[
  {
    "owner": "deepfence",
    "repo": "threatmapper",
    "content": "TITLE: Deploying ThreatMapper Agent with Podman\nDESCRIPTION: This command deploys the Deepfence ThreatMapper agent as a Podman container. It requires the Podman system service to be running. Similar to Docker, it configures resource limits, restart policies, networking, volumes, and environment variables for connecting to the management console and proxy settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /run/podman/podman.sock:/run/podman/podman.sock \\\n    -v /run/systemd/:/run/systemd/ \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e CUSTOM_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:THREATMAPPER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Add and Update Helm Repository\nDESCRIPTION: Adds the Deepfence Helm chart repository to the local Helm configuration and updates the repository to ensure the latest chart versions are available. This allows users to install the ThreatMapper console and router using Helm.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: YAML: docker-compose.yaml Configuration\nDESCRIPTION: This YAML configuration defines the docker-compose file for deploying the Cloud Scanner. It sets environment variables for the Management Console URL, port, Deepfence key, cloud provider details, region, project ID, and various deployment parameters. Important variables to configure: MGMT_CONSOLE_URL, MGMT_CONSOLE_PORT, DEEPFENCE_KEY, CLOUD_REGION and PROJECT_ID.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:THREATMAPPER_VERSION\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"gcp\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<PROJECT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"<PROJECT_ID>\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring docker-compose.yaml for Organization Account\nDESCRIPTION: Example configuration of the docker-compose.yaml file for an AWS organization account. It configures environment variables such as the management console URL, API key, cloud provider, root account details and role name for organization deployment, required for running the Deepfence Cloud Scanner using Docker Compose on EC2.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.3.1\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"aws\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<ROOT_ACCOUNT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: true\n  CLOUD_ORGANIZATION_ID: \"<ROOT_ACCOUNT_ID>\"\n  ROLE_NAME: \"<ROLE_NAME>\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"arn:aws:iam::aws:policy/SecurityAudit\"\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent Helm Chart\nDESCRIPTION: Installs the Deepfence Agent Helm chart with specified parameters, including the management console URL, Deepfence key, cluster name, and image tag. It creates the 'deepfence' namespace if it doesn't exist.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=40.40.40.40 \\\n    --set deepfenceKey=\"\" \\\n    --set clusterName=\"prod-cluster\" \\\n    --set global.imageTag=\"2.0.1\" \\\n    --namespace deepfence \\\n    --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Get Storage Class Kubernetes\nDESCRIPTION: This command retrieves the available storage classes in the Kubernetes cluster. It's used to identify suitable storage classes for persistent volume claims, especially when using cloud-managed Kubernetes services.  The output helps determine which storage class to use for the ThreatMapper console deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Task Definition for Deepfence Agent on ECS (EC2)\nDESCRIPTION: This JSON snippet defines an ECS task definition for the Deepfence agent, specifying the container image, environment variables (including the Deepfence API key and management console URL), volume mounts, and other configuration details required for the agent to run correctly within the ECS environment. Replace `<DEEPFENCE_KEY>` and `<MGMT_CONSOLE_URL>` with actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:2.3.1\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent Script\nDESCRIPTION: This bash script installs the Deepfence agent on a Linux host. It checks for required environment variables (MGMT_CONSOLE_URL, DEEPFENCE_KEY), installs dependencies (logrotate, jq, curl), downloads the agent binary and start script, configures the agent as a systemd service, and starts the service. The script utilizes curl for downloads, jq for JSON parsing, and systemctl for service management.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# MGMT_CONSOLE_URL: Example: threatmapper.customer.com or 65.65.65.65\nexport MGMT_CONSOLE_URL=\"${MGMT_CONSOLE_URL}\"\nexport DEEPFENCE_KEY=\"${DEEPFENCE_KEY}\"\n\nif [[ -z \"$MGMT_CONSOLE_URL\" ]]; then\n  echo \"env MGMT_CONSOLE_URL is not set\"\n  exit 1\nfi\n\nif [[ -z \"$DEEPFENCE_KEY\" ]]; then\n  echo \"env DEEPFENCE_KEY is not set\"\n  exit 1\nfi\n\nexport MGMT_CONSOLE_PORT=\"443\"\nexport MGMT_CONSOLE_URL_SCHEMA=\"https\"\nexport DF_HOSTNAME=\"$(hostname)\"\nexport DF_LOG_LEVEL=\"info\"\n\nMANAGEMENT_CONSOLE_URL=\"$MGMT_CONSOLE_URL_SCHEMA://$MGMT_CONSOLE_URL:$MGMT_CONSOLE_PORT\"\n\nOS_ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '\"')\nif [[ \"$OS_ID\" == \"amzn\" || \"$OS_ID\" == \"centos\" ]]; then\n    # Do necessary installs for Amazon Linux\n    yum -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nelse\n    # Do necessary installs for Ubuntu\n    apt-get -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nfi\n\naccess_token_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/auth/token\" \\\n        --header 'Content-Type: application/json' \\\n        --data \"{\\\"api_token\\\": \\\"$DEEPFENCE_KEY\\\"}\")\nif [[ $access_token_response == \"\" ]]; then\n  echo \"Failed to connect to the management console\"\n  exit 1\nfi\n\naccess_token=$(jq -r '.access_token' <<< \"$access_token_response\")\nif [[ $access_token == \"\" || $access_token == \"null\" ]]; then\n  echo \"Failed to authenticate\"\n  echo \"$access_token_response\"\n  exit 1\nfi\n\ndownload_url_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/agent-deployment/binary/download-url\" \\\n        --header \"Authorization: Bearer $access_token\")\nif [[ $download_url_response == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  exit 1\nfi\n\nstart_agent_script_download_url=$(jq -r '.start_agent_script_download_url' <<< \"$download_url_response\")\nif [[ $start_agent_script_download_url == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\ncat << EOF > uninstall_deepfence.sh\n#!/bin/bash\n\nsystemctl stop deepfence-agent.service\nsystemctl disable deepfence-agent.service\nrm -f /etc/systemd/system/deepfence-agent.service\nrm -rf /opt/deepfence\nEOF\n\necho \"Uninstalling existing Deepfence agent installation, if any\"\nchmod +x uninstall_deepfence.sh\nbash uninstall_deepfence.sh\n\nif [[ ! -d \"/opt/deepfence\" ]]; then\n    mkdir -p /opt/deepfence /opt/deepfence/var/log/\nfi\n\narchitecture=\"\"\ncase $(uname -m) in\n    i386)   architecture=\"386\" ;;\n    i686)   architecture=\"386\" ;;\n    x86_64) architecture=\"amd64\" ;;\n    arm)    dpkg --print-architecture | grep -q \"arm64\" && architecture=\"arm64\" || architecture=\"arm\" ;;\n    aarch64) architecture=\"arm64\" ;;\nesac\n\necho \"Detected architecture: $architecture\"\n\nagent_binary_download_url=$(jq -r --arg architecture \"agent_binary_${architecture}_download_url\" '.[$architecture]' <<< \"$download_url_response\")\nagent_binary_filename=$(basename \"$agent_binary_download_url\")\nagent_binary_filename=$(cut -f1 -d\"?\" <<< \"$agent_binary_filename\")\n\nif [[ $agent_binary_download_url == \"\" || $agent_binary_filename == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\necho \"Downloading agent binary from $agent_binary_download_url to /opt/deepfence/$agent_binary_filename\"\ncurl -k -o \"/opt/deepfence/$agent_binary_filename\" \"$agent_binary_download_url\"\n\ncurl -k -o /opt/deepfence/start_deepfence_agent.sh \"$start_agent_script_download_url\"\nchmod +x \"/opt/deepfence/start_deepfence_agent.sh\"\n\ntar -xzf \"/opt/deepfence/$agent_binary_filename\" -C /opt/deepfence/\n\necho \"MGMT_CONSOLE_URL: $MGMT_CONSOLE_URL\"\necho \"MGMT_CONSOLE_PORT: $MGMT_CONSOLE_PORT\"\necho \"DF_HOSTNAME: $DF_HOSTNAME\"\n\necho \"Installing Deepfence agent as daemon service\"\n\ncat << EOF > /etc/systemd/system/deepfence-agent.service\n[Unit]\nDescription=Deepfence Agent Service\nAfter=network.target\n\n[Service]\nEnvironment=\"MGMT_CONSOLE_URL=$MGMT_CONSOLE_URL\"\nEnvironment=\"DEEPFENCE_KEY=$DEEPFENCE_KEY\"\nEnvironment=\"MGMT_CONSOLE_PORT=$MGMT_CONSOLE_PORT\"\nEnvironment=\"MGMT_CONSOLE_URL_SCHEMA=$MGMT_CONSOLE_URL_SCHEMA\"\nEnvironment=\"DF_HOSTNAME=$(hostname)\"\nEnvironment=\"DF_LOG_LEVEL=$DF_LOG_LEVEL\"\n\nUser=root\nGroup=root\nRestart=on-failure\nType=forking\nExecStart=/opt/deepfence/start_deepfence_agent.sh\nWorkingDirectory=/opt/deepfence\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable deepfence-agent.service\nsystemctl start deepfence-agent.service\nsystemctl status deepfence-agent.service\n\n```\n\n----------------------------------------\n\nTITLE: Install Metrics Server on Kubernetes\nDESCRIPTION: This command installs the metrics server on the Kubernetes cluster, which is an optional dependency for the ThreatMapper console. It uses a YAML file from the Kubernetes SIGs repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on AKS Cluster for multiple Subscriptions\nDESCRIPTION: This Terraform configuration deploys Deepfence Cloud Scanner on an Azure Kubernetes Service (AKS) cluster to monitor multiple subscriptions within a tenant. It extends the single subscription deployment by adding parameters for organization deployment and a list of subscription IDs to access. It also requires the management console URL, Deepfence API key, and location.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"< AKS CLUSTER NAME >\"\n  resource_group_name = \"<AKS CLUSTER RESOURCE GROUP>\"\n}\n\nmodule \"test\" {\n  source                     = \"deepfence/cloud-scanner/azure//examples/aks\"\n  version                    = \"0.8.0\"\n  name                       = \"<name of the app>\"\n  mgmt-console-url           = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  deepfence-key              = \"<DEEPFENCE API KEY>\"\n  # ThreatMapper\n  cloud_scanner_image        = \"quay.io/deepfenceio/cloud_scanner_ce\"\n  # ThreatStryker\n  # cloud_scanner_image      = \"quay.io/deepfenceio/cloud_scanner\"\n  location                   = \"< LOCATION >\"\n  subscription_id            = data.azurerm_subscription.current.subscription_id\n  aks_host                   = data.azurerm_kubernetes_cluster.default.kube_config.0.host\n  aks_client_key             = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_key)\n  aks_client_certificate     = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)\n  aks_cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)\n  isOrganizationDeployment   = true\n  deployedAccountID          = data.azurerm_subscription.current.subscription_id\n  subscription_ids_access    = [ <list of tenants subscription id's> ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL in values.yaml (YAML)\nDESCRIPTION: This snippet configures the PostgreSQL connection in Kubernetes by modifying the `values.yaml` file used by the helm chart.  It disables the creation of a PostgreSQL StatefulSet and specifies the name of an existing secret containing the PostgreSQL credentials.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npostgres:\n  # Specifies whether a postgres database instance should be created\n  create: false\n  # if create false provide name of the existing secret\n  # secret format refer templates/deepfence-console-secrets/postgres.yaml\n  secretName: \"deepfence-console-secrets-postgres\"\n```\n\n----------------------------------------\n\nTITLE: Deploy ThreatMapper Agent Helm Chart\nDESCRIPTION: This snippet deploys the deepfence-agent Helm chart to install ThreatMapper sensors in a Kubernetes cluster. It sets the management console URL, API key, image tag, cluster name, and configures container runtime socket settings. It also specifies the log level and namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\n# helm show readme deepfence/deepfence-agent --version 2.1.1 | less\n# helm show values deepfence/deepfence-agent --version 2.1.1 | less\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set global.imageTag=2.1.1 \\\n    --set clusterName=\"prod-cluster\" \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.podmanSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --set logLevel=\"info\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Management Console URL Configuration\nDESCRIPTION: Configuration setting within the values.yaml file to define the URL for the Deepfence management console.  This is a crucial parameter for the agent to connect to the management plane.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmanagementConsoleUrl: \"\"\n```\n\n----------------------------------------\n\nTITLE: Deploy deepfence-agent helm chart\nDESCRIPTION: This snippet deploys the deepfence-agent Helm chart to a Kubernetes cluster. It sets various parameters, including the Management Console URL, Deepfence API key, image tag, cluster name, and container runtime socket settings.  Replace x.x.x.x with the Management Console IP address and the API key with your API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\n# helm show readme deepfence/deepfence-agent --version 2.4.0 | less\n# helm show values deepfence/deepfence-agent --version 2.4.0 | less\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set global.imageTag=2.4.0 \\\n    --set clusterName=\"prod-cluster\" \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.podmanSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --set logLevel=\"info\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Download Docker Compose File (Bash)\nDESCRIPTION: Downloads the docker-compose.yml file from the specified GitHub URL using wget. This file defines the services, networks, and volumes required for the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.4/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Multiple Project Cloud Scanner on GKE Cluster with Terraform\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner across multiple projects on a GKE cluster with workload identity enabled. It requires the target GKE cluster name, location, project ID, management console URL, Deepfence API key, deployed project ID, and organization project ID. It retrieves GKE cluster information dynamically.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\n# target cluster to deploy cloud scanner\ndata \"google_container_cluster\" \"target_cluster\" {\n  name     = \"<TARGET GKE CLUSTER NAME>\"\n  location = \"<TARGET GKE CLUSTER NAME>\"\n  project  = \"<PROJECT_ID>\"\n}\n\nmodule \"cloud_scanner_example_multiple_project\" {\n  source                     = \"deepfence/cloud-scanner/gcp//examples/gke\"\n  version                    = \"0.7.2\"\n  name                       = \"deepfence-cloud-scanner\"\n  gke_host                   = \"https://${data.google_container_cluster.target_cluster.endpoint}\"\n  gke_token                  = data.google_client_config.current.access_token\n  gke_cluster_ca_certificate = base64decode(data.google_container_cluster.target_cluster.master_auth[0].cluster_ca_certificate,)\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url           = \"<Console URL>\"\n  deepfence-key              = \"<Deepfence-key>\"\n  image_name                 = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce\"\n  image_tag                  = \"2.3.1\"\n  # project_id example: dev1-123456\n  project_id                 = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region                     = \"<REGION_ID>\"\n  # target gke cluster to deploy cloud scanner\n  cluster_name               = \"<TARGET GKE CLUSTER NAME>\"\n  # target gke cluster location\n  cluster_location           = \"<TARGET GKE CLUSTER NAME>\"\n  isOrganizationDeployment   = true\n  # project id where the cloud scanner is deployed\n  deployedAccountID          = \"<DEPLOYED PROJECT ID>\"\n  # organization project id\n  organizationAccountID      = \"<ORG PROJECT ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Environment Variables (JSON)\nDESCRIPTION: This JSON snippet configures environment variables for the Fargate application container, including the Deepfence API key, Management Console URL, serverless flag, log level, user-defined tags, installation directory, URL schema, and port.  The API key and Management Console URL need to be replaced with the actual values. The snippet is to be placed in the appropriate container section of the task definition JSON.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"environment\": [\n        {\n            \"name\": \"DEEPFENCE_KEY\",\n            \"value\": \"<deepfence-key>\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL\",\n            \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n            \"name\": \"DF_SERVERLESS\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"DF_LOG_LEVEL\",\n            \"value\": \"info\"\n        },\n        {\n            \"name\": \"USER_DEFINED_TAGS\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"DF_INSTALL_DIR\",\n            \"value\": \"/path/to/custom/install/dir\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n            \"value\": \"https\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_PORT\",\n            \"value\": \"443\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status via Kubectl\nDESCRIPTION: This command retrieves the status of all pods within a specified namespace. It is used to verify if the deepfence-agent pods have started successfully.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Create ECS Task Definition - Deepfence Agent\nDESCRIPTION: This JSON configuration defines the task definition for deploying the Deepfence agent on AWS ECS using the EC2 provider. It sets environment variables, volume mounts, container configurations, and resource constraints required for the Deepfence agent to function correctly, including necessary permissions and network settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:2.2.2\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Multiple Project Cloud Scanner\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner for multiple GCP projects within an organization.  It configures the module for organization-level deployment by setting the 'isOrganizationDeployment' variable to true. The 'project_id' should be replaced with the actual GCP project ID.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\nmodule \"cloud_scanner_example_multiple_project\" {\n  source                   = \"deepfence/cloud-scanner/gcp//examples/gce-vm\"\n  version                  = \"0.7.2\"\n  # gcp service account name\n  name                     = \"deepfence-cloud-scanner\"\n  # project_id example: dev1-123456\n  project_id               = \"<PROJECT_ID>\"\n  # org mode for multiple projects\n  isOrganizationDeployment = true\n}\n\noutput \"service_account_email\" {\n  value = module.cloud_scanner_example_multiple_project.service_account_email\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router Helm\nDESCRIPTION: This command installs the Deepfence router using the Deepfence Helm chart.  It creates the namespace if it doesn't exist and specifies the Helm chart version.  The router exposes the console via a LoadBalancer service. Replace `TM_ROUTER_HELM_CHART_VERSION` with appropriate value.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-router deepfence/deepfence-router \\\n--namespace deepfence-console \\\n--create-namespace \\\n--version TM_ROUTER_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Cloud Scanner Helm Chart\nDESCRIPTION: This command installs the Deepfence Cloud Scanner Helm chart using the configuration specified in `cloud-scanner.yaml`. It creates the specified namespace (`deepfence`), if it doesn't exist, and sets the chart version to `CLOUD_SCANNER_HELM_CHART_VERSION`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f cloud-scanner.yaml cloud-scanner cloud-scanner/deepfence-cloud-scanner \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version CLOUD_SCANNER_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart\nDESCRIPTION: Installs the Deepfence Cloud Scanner Helm chart into a Kubernetes cluster, using the specified values file and namespace. It also creates the namespace if it doesn't exist. Requires Helm and Kubernetes to be configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f cloud-scanner.yaml cloud-scanner cloud-scanner/deepfence-cloud-scanner \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.3.2\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition with Deepfence Agent (JSON)\nDESCRIPTION: Defines a Fargate task with two containers: a Python application and the Deepfence agent as a sidecar.  Requires the MGMT_CONSOLE_URL, API_KEY_SECRET_ARN, and AGENT_TASK_ROLE_ARN to be configured. The Deepfence agent collects telemetry and performs security scans.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"inferenceAccelerators\": [],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"python\",\n      \"image\": \"python:latest\",\n      \"cpu\": 0,\n      \"portMappings\": [\n        {\n          \"name\": \"python-8000-tcp\",\n          \"containerPort\": 8000,\n          \"hostPort\": 8000,\n          \"protocol\": \"tcp\",\n          \"appProtocol\": \"http\"\n        }\n      ],\n      \"essential\": true,\n      \"entryPoint\": [\n        \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n      ],\n      \"command\": [\"python3\", \"-m\", \"http.server\"],\n      \"environment\": [\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_SERVERLESS\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"DF_INSTALL_DIR\",\n          \"value\": \"/deepfence\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n          \"value\": \"https\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_PORT\",\n          \"value\": \"443\"\n        }\n      ],\n      \"mountPoints\": [],\n      \"volumesFrom\": [\n        {\n          \"sourceContainer\": \"deepfence-agent\",\n          \"readOnly\": false\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"valueFrom\": \"<API_KEY_SECRET_ARN>:deepfence_api_key::\"\n        }\n      ],\n      \"dependsOn\": [\n        {\n          \"containerName\": \"deepfence-agent\",\n          \"condition\": \"COMPLETE\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\",\n          \"mode\": \"non-blocking\",\n          \"max-buffer-size\": \"25m\"\n        }\n      }\n    },\n    {\n      \"name\": \"deepfence-agent\",\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:2.4.0-fargate\",\n      \"repositoryCredentials\": {},\n      \"cpu\": 0,\n      \"portMappings\": [],\n      \"essential\": false,\n      \"environment\": [],\n      \"mountPoints\": [],\n      \"volumesFrom\": [],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\",\n          \"mode\": \"non-blocking\",\n          \"max-buffer-size\": \"25m\"\n        }\n      }\n    }\n  ],\n  \"volumes\": [],\n  \"networkMode\": \"awsvpc\",\n  \"memory\": \"4096\",\n  \"cpu\": \"2048\",\n  \"family\": \"test-doc-python\",\n  \"executionRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"taskRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"runtimePlatform\": {\n    \"cpuArchitecture\": \"X86_64\",\n    \"operatingSystemFamily\": \"LINUX\"\n  },\n  \"tags\": [],\n  \"placementConstraints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Client Secret from Terraform Output\nDESCRIPTION: Command to retrieve the `client_secret` from the Terraform output. The `client_secret` is marked as sensitive, so it won't be displayed in the regular output.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterraform output client_secret\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent\nDESCRIPTION: This script automates the installation of the Deepfence agent on a Linux host. It sets environment variables for the management console URL and API key, installs necessary dependencies (logrotate, jq, curl), downloads the agent binary and start script, configures the agent as a systemd service, and starts the service. It requires MGMT_CONSOLE_URL and DEEPFENCE_KEY environment variables to be set.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# MGMT_CONSOLE_URL: Example: threatmapper.customer.com or 65.65.65.65\nexport MGMT_CONSOLE_URL=\"${MGMT_CONSOLE_URL}\"\nexport DEEPFENCE_KEY=\"${DEEPFENCE_KEY}\"\n\nif [[ -z \"$MGMT_CONSOLE_URL\" ]]; then\n  echo \"env MGMT_CONSOLE_URL is not set\"\n  exit 1\nfi\n\nif [[ -z \"$DEEPFENCE_KEY\" ]]; then\n  echo \"env DEEPFENCE_KEY is not set\"\n  exit 1\nfi\n\nexport MGMT_CONSOLE_PORT=\"443\"\nexport MGMT_CONSOLE_URL_SCHEMA=\"https\"\nexport DF_HOSTNAME=\"$(hostname)\"\nexport DF_LOG_LEVEL=\"info\"\n\nMANAGEMENT_CONSOLE_URL=\"$MGMT_CONSOLE_URL_SCHEMA://$MGMT_CONSOLE_URL:$MGMT_CONSOLE_PORT\"\n\nOS_ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '\"')\nif [[ \"$OS_ID\" == \"amzn\" || \"$OS_ID\" == \"centos\" ]]; then\n    # Do necessary installs for Amazon Linux\n    yum -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nelse\n    # Do necessary installs for Ubuntu\n    apt-get -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nfi\n\naccess_token_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/auth/token\" \\\n        --header 'Content-Type: application/json' \\\n        --data \"{\\\"api_token\\\": \\\"$DEEPFENCE_KEY\\\"}\")\nif [[ $access_token_response == \"\" ]]; then\n  echo \"Failed to connect to the management console\"\n  exit 1\nfi\n\naccess_token=$(jq -r '.access_token' <<< \"$access_token_response\")\nif [[ $access_token == \"\" || $access_token == \"null\" ]]; then\n  echo \"Failed to authenticate\"\n  echo \"$access_token_response\"\n  exit 1\nfi\n\ndownload_url_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/agent-deployment/binary/download-url\" \\\n        --header \"Authorization: Bearer $access_token\")\nif [[ $download_url_response == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  exit 1\nfi\n\nstart_agent_script_download_url=$(jq -r '.start_agent_script_download_url' <<< \"$download_url_response\")\nif [[ $start_agent_script_download_url == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\ncat << EOF > uninstall_deepfence.sh\n#!/bin/bash\n\nsystemctl stop deepfence-agent.service\nsystemctl disable deepfence-agent.service\nrm -f /etc/systemd/system/deepfence-agent.service\nrm -rf /opt/deepfence\nEOF\n\necho \"Uninstalling existing Deepfence agent installation, if any\"\nchmod +x uninstall_deepfence.sh\nbash uninstall_deepfence.sh\n\nif [[ ! -d \"/opt/deepfence\" ]]; then\n    mkdir -p /opt/deepfence /opt/deepfence/var/log/\nfi\n\narchitecture=\"\"\ncase $(uname -m) in\n    i386)   architecture=\"386\" ;;\n    i686)   architecture=\"386\" ;;\n    x86_64) architecture=\"amd64\" ;;\n    arm)    dpkg --print-architecture | grep -q \"arm64\" && architecture=\"arm64\" || architecture=\"arm\" ;;\n    aarch64) architecture=\"arm64\" ;;\nesac\n\necho \"Detected architecture: $architecture\"\n\nagent_binary_download_url=$(jq -r --arg architecture \"agent_binary_${architecture}_download_url\" '.[$architecture]' <<< \"$download_url_response\")\nagent_binary_filename=$(basename \"$agent_binary_download_url\")\nagent_binary_filename=$(cut -f1 -d\"?\" <<< \"$agent_binary_filename\")\n\nif [[ $agent_binary_download_url == \"\" || $agent_binary_filename == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\necho \"Downloading agent binary from $agent_binary_download_url to /opt/deepfence/$agent_binary_filename\"\ncurl -k -o \"/opt/deepfence/$agent_binary_filename\" \"$agent_binary_download_url\"\n\ncurl -k -o /opt/deepfence/start_deepfence_agent.sh \"$start_agent_script_download_url\"\nchmod +x \"/opt/deepfence/start_deepfence_agent.sh\"\n\ntar -xzf \"/opt/deepfence/$agent_binary_filename\" -C /opt/deepfence/\n\necho \"MGMT_CONSOLE_URL: $MGMT_CONSOLE_URL\"\necho \"MGMT_CONSOLE_PORT: $MGMT_CONSOLE_PORT\"\necho \"DF_HOSTNAME: $DF_HOSTNAME\"\n\necho \"Installing Deepfence agent as daemon service\"\n\ncat << EOF > /etc/systemd/system/deepfence-agent.service\n[Unit]\nDescription=Deepfence Agent Service\nAfter=network.target\n\n[Service]\nEnvironment=\"MGMT_CONSOLE_URL=$MGMT_CONSOLE_URL\"\nEnvironment=\"DEEPFENCE_KEY=$DEEPFENCE_KEY\"\nEnvironment=\"MGMT_CONSOLE_PORT=$MGMT_CONSOLE_PORT\"\nEnvironment=\"MGMT_CONSOLE_URL_SCHEMA=$MGMT_CONSOLE_URL_SCHEMA\"\nEnvironment=\"DF_HOSTNAME=$(hostname)\"\nEnvironment=\"DF_LOG_LEVEL=$DF_LOG_LEVEL\"\n\nUser=root\nGroup=root\nRestart=on-failure\nType=forking\nExecStart=/opt/deepfence/start_deepfence_agent.sh\nWorkingDirectory=/opt/deepfence\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable deepfence-agent.service\nsystemctl start deepfence-agent.service\nsystemctl status deepfence-agent.service\n\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition - Environment Variables (JSON)\nDESCRIPTION: This snippet demonstrates the JSON configuration for setting environment variables for the application container in a Fargate task definition. It includes variables such as DEEPFENCE_KEY, MGMT_CONSOLE_URL, DF_SERVERLESS, and others necessary for the ThreatMapper agent to function correctly.  The MGMT_CONSOLE_URL and DEEPFENCE_KEY need to be replaced with the actual management console URL and API Key, respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"environment\": [\n        {\n            \"name\": \"DEEPFENCE_KEY\",\n            \"value\": \"<deepfence-key>\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL\",\n            \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n            \"name\": \"DF_SERVERLESS\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"DF_LOG_LEVEL\",\n            \"value\": \"info\"\n        },\n        {\n            \"name\": \"USER_DEFINED_TAGS\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"DF_INSTALL_DIR\",\n            \"value\": \"/path/to/custom/install/dir\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n            \"value\": \"https\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_PORT\",\n            \"value\": \"443\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Cloud Scanner using Terraform\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner as a task within an AWS environment using ECS. It requires setting the AWS region, ThreatMapper console URL, and Deepfence API key. It includes optional configurations for existing VPCs and CloudTrail.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"aws\" {\n  # AWS region: Example: us-east-1\n  region = \"us-east-1\"\n}\n\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.5.0\"\n  name                          = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url              = \"<Console URL>\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence key>\"\n  image                         = \"quay.io/deepfenceio/cloud-scanner:2.2.2\"\n  # Task CPU Units (Default: 4 vCPU)\n  cpu                           = \"4096\"\n  # Task Memory (Default: 8 GB)\n  memory                        = \"8192\"\n  # Task Ephemeral Storage (Default: 100 GB)\n  ephemeral_storage             = \"100\"\n  # Task role: Must be either arn:aws:iam::aws:policy/SecurityAudit or arn:aws:iam::aws:policy/ReadOnlyAccess\n  task_role                     = \"arn:aws:iam::aws:policy/SecurityAudit\"\n  debug_logs                    = false\n  # Use existing VPC (Optional)\n  use_existing_vpc              = false\n  # VPC ID (If use_existing_vpc is set to true)\n  existing_vpc_id               = \"\"\n  # List of VPC Subnet IDs (If use_existing_vpc is set to true)\n  existing_vpc_subnet_ids       = []\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n  # AWS region: Example: us-east-1\n  region                        = \"us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n  # Optional: To refresh the cloud resources every hour, provide CloudTrail Trail ARNs (Management events with write-only or read-write).\n  # If empty, a trail with management events will be automatically chosen if available.\n  # e.g.: [\"arn:aws:cloudtrail:us-east-1:123456789012:trail/aws-events\"]\n  cloudtrail_trails             = []\n}\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console with Custom Values\nDESCRIPTION: This command installs the ThreatMapper console using the Deepfence Helm chart and a custom values file.  It creates the namespace if it doesn't exist and specifies the Helm chart version. The custom values file allows you to override the default configuration of the console. Replace `TM_CONSOLE_HELM_CHART_VERSION` with appropriate value.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console \\\n--namespace deepfence-console \\\n--create-namespace \\\n--version TM_CONSOLE_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Get Storage Class Kubernetes\nDESCRIPTION: This command retrieves the available storage classes in the Kubernetes cluster. It's a prerequisite step to identify a suitable storage class for persistent volumes used by the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Starting Vulnerability Scan Asynchronously\nDESCRIPTION: This snippet demonstrates how to start a vulnerability scan on hosts using the ThreatMapper API asynchronously.  It first defines a function `node_config` to retrieve a list of host node IDs. Then, the `start_vulnerability_scan_on_hosts` function constructs a request payload with the node IDs and scan configurations, and calls the start_vulnerability_scan endpoint using asyncio. It handles potential exceptions related to unexpected API status codes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.vulnerability import start_vulnerability_scan\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import ModelVulnerabilityScanTriggerReq, SearchSearchNodeReq, ModelScanTriggerResp\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\nfrom typing import List\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef node_config() -> List:\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       host_list = []\n       for host in hosts:\n          host_list.append({\"node_id\":host.node_id, \"node_type\": \"host\"})\n       return host_list\n    except UnexpectedStatus as e:\n        print(\"Exception when calling node_config-> %s\\n\" % e)\n\nasync def start_vulnerability_scan_on_hosts():\n    try:\n       node_ids = node_config()\n       payload_dict = {\n                       \"filters\": {\n                         \"cloud_account_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"container_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"host_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"image_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"kubernetes_cluster_scan_filter\": {\n                           \"filter_in\": None\n                         }\n                       },\n                       \"node_ids\": node_ids,\n                       \"scan_config\": [\n                         {\n                           \"language\": \"base\"\n                         },\n                         {\n                           \"language\": \"java\"\n                         },\n                         {\n                           \"language\": \"javascript\"\n                         },\n                         {\n                           \"language\": \"rust\"\n                         },\n                         {\n                           \"language\": \"golang\"\n                         },\n                         {\n                           \"language\": \"ruby\"\n                         },\n                         {\n                           \"language\": \"python\"\n                         },\n                         {\n                           \"language\": \"php\"\n                         },\n                         {\n                           \"language\": \"dotnet\"\n                         }\n                       ]\n                     }\n       json_body = ModelVulnerabilityScanTriggerReq.from_dict(payload_dict)\n       response: ModelScanTriggerResp = await start_vulnerability_scan.asyncio(client=client,json_body=json_body)\n       print(response.scan_ids, response.bulk_scan_id)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling start_vulnerability_scan_on_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Define ECS Task Definition JSON for Deepfence Agent\nDESCRIPTION: This JSON configures an ECS task definition for the Deepfence agent. It specifies the container image, environment variables (DEEPFENCE_KEY, MGMT_CONSOLE_URL), resource requirements, volume mounts, and other settings required for the agent to run correctly. The agent requires privileged mode and volume mounts to access host resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"docker.io/deepfenceio/deepfence_agent_ce:2.1.1\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Scanner Helm Chart Values\nDESCRIPTION: This YAML snippet shows the configuration of the cloud-scanner.yaml file, including image repository, management console URL, Deepfence API key, cloud account details (account ID, region, cloud provider), cloud scanner policy, organization deployment settings, service account settings (creation, annotations for IRSA, and name).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  # ThreatMapper\n  repository: quay.io/deepfenceio/cloud_scanner_ce\n\n# Format: deepfence.customer.com or 123.123.123.123\nmanagementConsoleUrl: \"\"\n   \n# Auth: Get Deepfence api key from UI -> Settings -> User Management\ndeepfenceKey:\n  key: \"\"\n\ncloudAccount:\n  # Organization root account ID\n  accountID: \"\"\n  # Account name (Optional, for easy identification. Not required in organization deployment.)\n  accountName: \"\"\n\n  cloudProvider: \"aws\"\n  # AWS region\n  region: \"us-east-1\"\n\n  # Policy set for Cloud Scanner in CloudFormation / terraform\n  # arn:aws:iam::aws:policy/ReadOnlyAccess / arn:aws:iam::aws:policy/SecurityAudit\n  cloudScannerPolicy: \"arn:aws:iam::aws:policy/SecurityAudit\"\n\n  # Optional: AWS account ID where the helm chart is deployed, in case it is different from cloudAccount.accountID\n  deployedAccountID: \"\"\n      \n  # For Organization deployment:\n    \n  # Is this organization deployment or single account deployment?\n  isOrganizationDeployment: true\n    \n  # Organization root account ID\n  # Should be same as cloudAccount.accountID\n  organizationAccountID: \"\"\n\n  # Role name. The name should be same across all accounts in the Organization deployment.\n  # Role ARN example: arn:aws:iam::123456789012:role/deepfence-cloud-scanner-role\n  # Role name in this case is deepfence-cloud-scanner-role\n  roleName: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Automatically mount a ServiceAccount's API credentials?\n  automount: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-cloud-scanner\"\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"deepfence-cloud-scanner\"\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Agent with Podman\nDESCRIPTION: This command deploys the Deepfence agent using Podman.  It sets CPU limits, container name, restart policy, host PID and network, log driver, volume mounts for accessing the host's resources, and environment variables for configuration.  Replace ---CONSOLE-IP--- and ---DEEPFENCE-API-KEY--- with the actual values.  Podman system service must be running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /run/podman/podman.sock:/run/podman/podman.sock \\\n    -v /run/systemd/:/run/systemd/ \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.2.2\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Service Status\nDESCRIPTION: This command retrieves the status of the `deepfence-console-router` service in the `deepfence-console` namespace and watches for changes.  This is used to determine the external IP address or hostname of the load balancer created by the router, allowing access to the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -w deepfence-console-router --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Access Deepfence Agent Logs\nDESCRIPTION: This command retrieves logs for the Deepfence agent service using journalctl. It filters the logs specifically for the 'deepfence-agent.service' unit, providing insight into the agent's operation. Requires systemd and journald.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/linux-host.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo journalctl -u deepfence-agent.service\n```\n\n----------------------------------------\n\nTITLE: Identify container runtime\nDESCRIPTION: These commands help identify the container runtime and its socket path in a Kubernetes cluster. The first command retrieves the container runtime version directly from the nodes. The subsequent commands deploy a job to the cluster, which then extracts the container runtime endpoint configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Start ThreatMapper Console (Docker Compose)\nDESCRIPTION: Uses the docker compose up command to start the ThreatMapper Management Console in detached mode (-d).  This command reads the docker-compose.yml file and creates and starts the containers defined within.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Get Container Runtime Socket Path\nDESCRIPTION: This snippet deploys a job to retrieve the container runtime socket path from within the Kubernetes cluster, logs the results, and then removes the job.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/kubernetes.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated ThreatMapper Client\nDESCRIPTION: This snippet shows how to initialize an authenticated ThreatMapper client using the `AuthenticatedClient` class. It requires the base URL of the console and an API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"Api Key\")\n```\n\n----------------------------------------\n\nTITLE: Directory Creation and Docker Compose Download\nDESCRIPTION: These commands create a directory named `deepfence-cloud-scanner`, navigate into it, and download the `docker-compose.yaml` file from the specified URL using `wget`. This file contains the configuration for the Deepfence Cloud Scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.3/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieve Client Secret from Terraform Output\nDESCRIPTION: This command retrieves the `client_secret` from the Terraform output after applying the Terraform script. This secret is required for configuring the cloud scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterraform output client_secret\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration in Amazon Linux/RHEL\nDESCRIPTION: This snippet demonstrates how to configure the maximum number of open files for Docker containers in Amazon Linux or RHEL systems. It involves modifying the `/etc/sysconfig/docker` file to set the `DAEMON_MAXFILES` and `OPTIONS` parameters. This configuration is necessary to prevent file handle exhaustion within containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Starting Vulnerability Scan ASYNC\nDESCRIPTION: This code defines an asynchronous function to initiate a vulnerability scan on hosts. It first defines `node_config` to retrieve a list of host node IDs. It then constructs a payload dictionary specifying the scan configurations for different languages and the target node IDs. The `start_vulnerability_scan.asyncio` function is used to trigger the scan, and the response, including scan IDs, is printed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef node_config() -> List:\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       host_list = []\n       for host in hosts:\n          host_list.append({\"node_id\":host.node_id, \"node_type\": \"host\"})\n       return host_list\n    except UnexpectedStatus as e:\n        print(\"Exception when calling node_config-> %s\\n\" % e)\n\nasync def start_vulnerability_scan_on_hosts():\n    try:\n       node_ids = node_config()\n       payload_dict = {\n                       \"filters\": {\n                         \"cloud_account_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"container_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"host_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"image_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"kubernetes_cluster_scan_filter\": {\n                           \"filter_in\": None\n                         }\n                       },\n                       \"node_ids\": node_ids,\n                       \"scan_config\": [\n                         {\n                           \"language\": \"base\"\n                         },\n                         {\n                           \"language\": \"java\"\n                         },\n                         {\n                           \"language\": \"javascript\"\n                         },\n                         {\n                           \"language\": \"rust\"\n                         },\n                         {\n                           \"language\": \"golang\"\n                         },\n                         {\n                           \"language\": \"ruby\"\n                         },\n                         {\n                           \"language\": \"python\"\n                         },\n                         {\n                           \"language\": \"php\"\n                         },\n                         {\n                           \"language\": \"dotnet\"\n                         }\n                       ]\n                     }\n       json_body = ModelVulnerabilityScanTriggerReq.from_dict(payload_dict)\n       response: ModelScanTriggerResp = await start_vulnerability_scan.asyncio(client=client,json_body=json_body)\n       print(response.scan_ids, response.bulk_scan_id)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling start_vulnerability_scan_on_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Running Deepfence Agent with Podman\nDESCRIPTION: This command runs the Deepfence agent as a Podman container with specified resource limits, network configuration, and volume mounts.  It requires the Podman system service to be running.  It sets environment variables for logging, tagging, console URL, and API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /run/podman/podman.sock:/run/podman/podman.sock \\\n    -v /run/systemd/:/run/systemd/ \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.4.0\n```\n\n----------------------------------------\n\nTITLE: Terraform Execution Commands\nDESCRIPTION: These are the standard Terraform commands to initialize, plan, and apply the configuration.  `terraform init` downloads the necessary providers and modules. `terraform plan` shows the changes that will be applied. `terraform apply` executes the changes in your Google Cloud environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform AWS Provider Configuration\nDESCRIPTION: Configures the AWS provider for Terraform, specifying the AWS region.  This block is essential for Terraform to interact with your AWS account and provision resources in the specified region.  The region needs to be a valid AWS region such as us-east-1.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprovider \"aws\" {\n  # AWS region: Example: us-east-1\n  region = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform GKE Cluster Data Source\nDESCRIPTION: This Terraform configuration retrieves information about an existing GKE cluster using the `google_container_cluster` data source.  It requires the cluster name, location, and project ID. This information is used to configure the Cloud Scanner deployment on the GKE cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\n# target cluster to deploy cloud scanner\ndata \"google_container_cluster\" \"target_cluster\" {\n  name     = \"<TARGET GKE CLUSTER NAME>\"\n  location = \"<TARGET GKE CLUSTER NAME>\"\n  project  = \"<PROJECT_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ThreatMapper Python SDK\nDESCRIPTION: This command installs the ThreatMapper Python SDK from the GitHub repository using pip. It fetches the latest version of the library, allowing you to use the SDK's functionalities in your Python scripts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/deepfence/threatmapper-python-client.git\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Single Project Cloud Scanner\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner in a single Google Cloud project. It requires specifying the console URL, Deepfence API key, project ID, and region. Optional parameters are available for connecting to a private IP console via a serverless VPC connector, requiring the VPC name and IP CIDR range.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.3.0\"\n  name                = \"deepfence-cloud-scanner\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.0.1\"\n  project_id          = \"<PROJECT_ID>; ex. dev1-123456\"\n  region              = \"<REGION_ID>; ex. asia-east1\"\n  #optional for private ip console\n  vpc                 = \"<VPC Network Name>; Name of vpc network in which the console exists\"\n  #optional for private ip console\n  ip_cidr_range_svpca = \"<11.0.0.0/28> IP CIDR range for the connector to above vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j in docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows how to set the Neo4j connection parameters in the `docker-compose.yml` file. It configures the Neo4j username, password, Bolt port, and host to connect to a managed Neo4j service.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_NEO4J_USER: neo4j\n    DEEPFENCE_NEO4J_PASSWORD: <password>\n    NEO4J_AUTH: neo4j/<password>\n    DEEPFENCE_NEO4J_BOLT_PORT: 7687\n    DEEPFENCE_NEO4J_HOST: abcdefgh.databases.neo4j.io\n```\n\n----------------------------------------\n\nTITLE: Create Cloud Scanner Directory and Download Docker Compose\nDESCRIPTION: This bash script creates a directory named 'deepfence-cloud-scanner', navigates into it, and downloads the docker-compose.yaml file from a specified URL. This is a necessary prerequisite for deploying the cloud scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.5/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml with wget in bash\nDESCRIPTION: Downloads the docker-compose.yml file from the ThreatMapper GitHub repository using wget. This file defines the services and configuration for the Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.5/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform for Multiple Subscriptions on AKS\nDESCRIPTION: This Terraform configuration snippet deploys the Deepfence Cloud Scanner on an Azure Kubernetes Service (AKS) cluster for multiple Azure subscriptions. It utilizes data sources to retrieve AKS cluster details and the current subscription ID.  The `test` module configures the deployment, requiring parameters like the management console URL, Deepfence API key, cloud scanner image, AKS cluster host and credentials, and a list of tenant subscription IDs. You must replace the placeholder values with your actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"< AKS CLUSTER NAME >\"\n  resource_group_name = \"<AKS CLUSTER RESOURCE GROUP>\"\n}\n\nmodule \"test\" {\n  source                     = \"deepfence/cloud-scanner/azure//examples/aks\"\n  version                    = \"0.9.1\"\n  name                       = \"<name of the app>\"\n  mgmt-console-url           = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  deepfence-key              = \"<DEEPFENCE API KEY>\"\n  # ThreatMapper\n  cloud_scanner_image        = \"quay.io/deepfenceio/cloud_scanner_ce\"\n  # ThreatStryker\n  # cloud_scanner_image      = \"quay.io/deepfenceio/cloud_scanner\"\n  location                   = \"< LOCATION >\"\n  subscription_id            = data.azurerm_subscription.current.subscription_id\n  aks_host                   = data.azurerm_kubernetes_cluster.default.kube_config.0.host\n  aks_client_key             = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_key)\n  aks_client_certificate     = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)\n  aks_cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)\n  isOrganizationDeployment   = true\n  deployedAccountID          = data.azurerm_subscription.current.subscription_id\n  subscription_ids_access    = [ <list of tenants subscription id's> ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deepfence Router Ingress Configuration\nDESCRIPTION: This YAML snippet configures ingress settings for the Deepfence router, specifying the ingress class, host, and annotations. It assumes an nginx ingress controller.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    name: deepfence-console-router\n    type: Ingress # LoadBalancer/NodePort/Ingress/ClusterIP\n\n# ingress configuration for console\ningress:\n    ## name of the ingress class for ingress provider installed on the cluster, cannot be empty\n    ## Example: nginx\n    class: nginx\n    ## host example: threat.example.com\n    host: \"threatmapper.example.com\"\n    ## annotations to customize ingress\n    annotations:\n        ## nginx ingress annotations\n        nginx.ingress.kubernetes.io/backend-protocol: HTTPS\n        nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n        nginx.ingress.kubernetes.io/proxy-body-size: 200m\n```\n\n----------------------------------------\n\nTITLE: Single Project Cloud Scanner on GKE Cluster with Terraform\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner in a single project on a GKE cluster with workload identity enabled.  It requires the target GKE cluster name, location, project ID, management console URL, and Deepfence API key. It retrieves GKE cluster information dynamically.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\n# target cluster to deploy cloud scanner\ndata \"google_container_cluster\" \"target_cluster\" {\n  name     = \"<TARGET GKE CLUSTER NAME>\"\n  location = \"<TARGET GKE CLUSTER NAME>\"\n  project  = \"<PROJECT_ID>\"\n}\n\nmodule \"cloud_scanner_example_single_project\" {\n  source                     = \"deepfence/cloud-scanner/gcp//examples/gke\"\n  version                    = \"0.7.2\"\n  gke_host                   = \"https://${data.google_container_cluster.target_cluster.endpoint}\"\n  gke_token                  = data.google_client_config.current.access_token\n  gke_cluster_ca_certificate = base64decode(data.google_container_cluster.target_cluster.master_auth[0].cluster_ca_certificate,)\n  name                       = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url           = \"<Console URL>\"\n  deepfence-key              = \"<Deepfence-key>\"\n  image_name                 = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce\"\n  image_tag                  = \"2.3.1\"\n  # project_id example: dev1-123456\n  project_id                 = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region                     = \"<REGION_ID>\"\n  # target gke cluster to deploy cloud scanner\n  cluster_name               = \"<TARGET GKE CLUSTER NAME>\"\n  # target gke cluster location\n  cluster_location           = \"<TARGET GKE CLUSTER LOCATION>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Single Account Deployment\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner to a single AWS account. It defines the AWS provider, specifies module source and version, and includes configurable parameters such as the management console URL, Deepfence API key, AWS account name, task resource requirements (CPU, memory, ephemeral storage), IAM role, and VPC settings. Important parameters that need to be configured are the region, mgmt-console-url and deepfence-key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprovider \"aws\" {\n  # AWS region: Example: us-east-1\n  region = \"us-east-1\"\n}\n\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.6.0\"\n  name                          = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url              = \"<Console URL>\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence key>\"\n  # AWS Account Name (Optional, for easy identification)\n  account_name                  = \"\"\n  image                         = \"quay.io/deepfenceio/cloud_scanner_ce:2.3.1\"\n  # Task CPU Units (Default: 4 vCPU)\n  cpu                           = \"4096\"\n  # Task Memory (Default: 8 GB)\n  memory                        = \"8192\"\n  # Task Ephemeral Storage (Default: 100 GB)\n  ephemeral_storage             = \"100\"\n  # Task role: Must be either arn:aws:iam::aws:policy/SecurityAudit or arn:aws:iam::aws:policy/ReadOnlyAccess\n  task_role                     = \"arn:aws:iam::aws:policy/SecurityAudit\"\n  debug_logs                    = false\n  # Use existing VPC (Optional)\n  use_existing_vpc              = false\n  # VPC ID (If use_existing_vpc is set to true)\n  existing_vpc_id               = \"\"\n  # List of VPC Subnet IDs (If use_existing_vpc is set to true)\n  existing_vpc_subnet_ids       = []\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n  # AWS region: Example: us-east-1\n  region                        = \"us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n  # Optional: To refresh the cloud resources every hour, provide CloudTrail Trail ARNs (Management events with write-only or read-write).\n  # If empty, a trail with management events will be automatically chosen if available.\n  # e.g.: [\"arn:aws:cloudtrail:us-east-1:123456789012:trail/aws-events\"]\n  cloudtrail_trails             = []\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Scanner YAML Configuration\nDESCRIPTION: Configures the Deepfence Cloud Scanner using a YAML file.  The configuration includes the image repository, management console URL, Deepfence API key, cloud account details (AWS account ID, name, region, and cloud provider), IAM policy, and service account settings, including annotations for IRSA.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  # ThreatMapper\n  repository: quay.io/deepfenceio/cloud_scanner_ce\n\n# Format: deepfence.customer.com or 123.123.123.123\nmanagementConsoleUrl: \"\"\n   \n# Auth: Get Deepfence api key from UI -> Settings -> User Management\ndeepfenceKey:\n  key: \"\"\n\ncloudAccount:\n  # AWS account ID to monitor\n  accountID: \"\"\n  # Account name (Optional, for easy identification. Not required in organization deployment.)\n  accountName: \"\"\n\n  cloudProvider: \"aws\"\n  # AWS region\n  region: \"us-east-1\"\n\n  # Policy set for Cloud Scanner in CloudFormation / terraform\n  # arn:aws:iam::aws:policy/ReadOnlyAccess / arn:aws:iam::aws:policy/SecurityAudit\n  cloudScannerPolicy: \"arn:aws:iam::aws:policy/SecurityAudit\"\n\n  # Optional: AWS account ID where the helm chart is deployed, in case it is different from cloudAccount.accountID\n  deployedAccountID: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Automatically mount a ServiceAccount's API credentials?\n  automount: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-cloud-scanner\"\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"deepfence-cloud-scanner\"\n```\n\n----------------------------------------\n\nTITLE: Terraform: Multiple Subscription Cloud Scanner on Azure\nDESCRIPTION: Terraform configuration for deploying a multi-subscription cloud scanner on an Azure virtual machine.  It defines the Azure provider, fetches subscription details, and uses a module to create the necessary infrastructure.  `subscription_ids_access` should contain a list of tenant subscription IDs. The module outputs the tenant ID, client ID, and client secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\nmodule \"infrastructure_cloud-scanner-app\" {\n  source                  = \"deepfence/cloud-scanner/azure//modules/infrastructure/cloud-scanner-app\"\n  version                 = \"0.8.0\"\n  name                    = \"deepfence-cloud-scanner\"\n  subscription_ids_access = [list of tenant subscriptions ids]\n}\n\noutput \"tenant_id\" {\n  value = module.infrastructure_cloud-scanner-app.tenant_id\n}\n\noutput \"client_id\" {\n  value = module.infrastructure_cloud-scanner-app.client_id\n}\n\noutput \"client_secret\" {\n  value     = module.infrastructure_cloud-scanner-app.client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Scanner Docker Compose Environment Variables (Single Account)\nDESCRIPTION: Configures the environment variables within the docker-compose.yaml file for a single account deployment of the Cloud Scanner. These variables specify the management console URL, Deepfence API key, cloud provider, region, account ID, and other settings required for the scanner to function correctly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.4.0\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"aws\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<ACCOUNT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"arn:aws:iam::aws:policy/SecurityAudit\"\n```\n\n----------------------------------------\n\nTITLE: Cloud Scanner Helm chart values configuration\nDESCRIPTION: This YAML configuration shows how to configure the Cloud Scanner Helm chart values.  It showcases configuring the image repository, management console URL, Deepfence API key, AWS account ID and name, AWS region, IAM role ARN, and service account details, including annotations for IRSA (IAM Roles for Service Accounts). The deepfenceKey.key and managementConsoleUrl properties need to be set.  Also service account annotations and name are required for EKS deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  # ThreatMapper\n  repository: quay.io/deepfenceio/cloud_scanner_ce\n\n# Format: deepfence.customer.com or 123.123.123.123\nmanagementConsoleUrl: \"\"\n   \n# Auth: Get Deepfence api key from UI -> Settings -> User Management\ndeepfenceKey:\n  key: \"\"\n\ncloudAccount:\n  # AWS account ID to monitor\n  accountID: \"\"\n  # Account name (Optional, for easy identification. Not required in organization deployment.)\n  accountName: \"\"\n\n  cloudProvider: \"aws\"\n  # AWS region\n  region: \"us-east-1\"\n\n  # Policy set for Cloud Scanner in CloudFormation / terraform\n  # arn:aws:iam::aws:policy/ReadOnlyAccess / arn:aws:iam::aws:policy/SecurityAudit\n  cloudScannerPolicy: \"arn:aws:iam::aws:policy/SecurityAudit\"\n\n  # Optional: AWS account ID where the helm chart is deployed, in case it is different from cloudAccount.accountID\n  deployedAccountID: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Automatically mount a ServiceAccount's API credentials?\n  automount: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-cloud-scanner\"\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"deepfence-cloud-scanner\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on AKS (Multiple Subscriptions)\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner on an AKS cluster and is configured to monitor multiple Azure subscriptions. It configures Terraform to retrieve cluster information and then deploy the Cloud Scanner using a module. It requires specifying the AKS cluster name and resource group name, as well as the list of tenant subscription IDs.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"< AKS CLUSTER NAME >\"\n  resource_group_name = \"<AKS CLUSTER RESOURCE GROUP>\"\n}\n\nmodule \"test\" {\n  source                     = \"deepfence/cloud-scanner/azure//examples/aks\"\n  version                    = \"0.7.0\"\n  name                       = \"<name of the app>\"\n  mgmt-console-url           = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  deepfence-key              = \"<DEEPFENCE API KEY>\"\n  # ThreatMapper\n  cloud_scanner_image        = \"quay.io/deepfenceio/cloud_scanner_ce\"\n  # ThreatStryker\n  # cloud_scanner_image      = \"quay.io/deepfenceio/cloud_scanner\"\n  location                   = \"< LOCATION >\"\n  subscription_id            = data.azurerm_subscription.current.subscription_id\n  aks_host                   = data.azurerm_kubernetes_cluster.default.kube_config.0.host\n  aks_client_key             = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_key)\n  aks_client_certificate     = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)\n  aks_cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)\n  isOrganizationDeployment   = true\n  deployedAccountID          = data.azurerm_subscription.current.subscription_id\n  subscription_ids_access    = [ <list of tenants subscription id's> ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Values Configuration (YAML)\nDESCRIPTION: This YAML snippet shows a sample configuration for the `cloud-scanner.yaml` file used to configure the Deepfence Cloud Scanner Helm chart. It contains parameters for setting the image repository, management console URL, Deepfence API key, cloud account details (ID, name, provider, region), cloud scanner policy, service account settings, and cloud audit log settings. These values need to be configured based on the specific environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  # ThreatMapper\n  repository: quay.io/deepfenceio/cloud_scanner_ce\n\n# Format: deepfence.customer.com or 123.123.123.123\nmanagementConsoleUrl: \"\"\n\n# Auth: Get Deepfence api key from UI -> Settings -> User Management\ndeepfenceKey:\n  key: \"\"\n\ncloudAccount:\n  # AWS account ID to monitor\n  accountID: \"\"\n  # Account name (Optional, for easy identification. Not required in organization deployment.)\n  accountName: \"\"\n\n  cloudProvider: \"aws\"\n  # AWS region\n  region: \"us-east-1\"\n\n  # Optional: Comma separated list of regions which should be scanned. All other regions will be disabled.\n  # All regions enabled by default\n  # Example: enabledCloudRegions: \"us-east-1,us-east-2\"\n  enabledCloudRegions: \"\"\n\n  # Policy set for Cloud Scanner in CloudFormation / terraform\n  # arn:aws:iam::aws:policy/ReadOnlyAccess / arn:aws:iam::aws:policy/SecurityAudit\n  cloudScannerPolicy: \"arn:aws:iam::aws:policy/SecurityAudit\"\n\n  # Optional: AWS account ID where the helm chart is deployed, in case it is different from cloudAccount.accountID\n  deployedAccountID: \"\"\n\n# Optional: To refresh the cloud resources every hour, provide CloudTrail Trail ARNs (Management events with write-only or read-write).\n# If empty, a trail with management events will be automatically chosen if available.\ncloudAuditLogsEnabled: false\ncloudAuditLogIDs: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Automatically mount a ServiceAccount's API credentials?\n  automount: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-cloud-scanner\"\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"deepfence-cloud-scanner\"\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Docker\nDESCRIPTION: Deploys the ThreatMapper sensor agent on a Docker host. This command pulls and runs a Docker image, sets various environment variables for configuration, and mounts volumes for access to system resources. It requires Docker to be installed and the user to be logged in to the specified Docker Hub account.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    $ACC/deepfence_agent_ce:2.4.0\n```\n\n----------------------------------------\n\nTITLE: Deepfence Authentication Key Configuration\nDESCRIPTION: Configuration setting within the values.yaml file to define the authentication key for the Deepfence agent.  This key is used for secure communication with the Deepfence management console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Auth (Optional): Get deepfence api key from UI -> Settings -> User Management\ndeepfenceKey: \"\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes TLS Configuration (YAML)\nDESCRIPTION: This YAML snippet shows how to configure TLS certificates for the Deepfence Management Console in Kubernetes using the `values.yaml` file. It illustrates two methods: embedding the certificate and key directly or referencing an existing Kubernetes secret containing the certificate and key. The embedded cert/key method requires the PEM encoded cert and key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/initial-configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  # Use custom ssl certificate for Deepfence UI\n  # custom certificates can be configured using two options\n  # existing secret or base64 encoded cert and key string\n  # provide one off the two options to configure custom certificates\n  tls:\n    # provide secret name which contains tls cert and key\n    # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets\n    # make sure to create secret in the same namespace as that of the console\n    secretName: \"\"\n    # embed given cert and key as secret and mount to router pod\n    # provide certificate and key in below example format\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL\n      .....\n      BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89\n      .....\n      bHEvWp7ugCTFhurM+lla0d+ElDO2\n      -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to IAM Role for Secrets Manager\nDESCRIPTION: This snippet grants the IAM role the permission to retrieve the Deepfence API key from AWS Secrets Manager.  This allows the Deepfence agent running in the ECS task to access the API key without hardcoding it in the task definition.  Replace `<API_KEY_SECRET_ARN>` with the ARN of the created secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:GetSecretValue\"\n      ],\n      \"Resource\": [\n        \"<API_KEY_SECRET_ARN>\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router with Custom Values\nDESCRIPTION: This command installs the Deepfence router Helm chart using a custom values file. It overrides the default configuration with the values specified in the YAML file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Execute post-upgrade script (Kubernetes)\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script within the specified Neo4j pod. This completes the upgrade process after the new release is deployed and Neo4j has performed its initial setup in a Kubernetes environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/upgrade-from-v2.1.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Terraform commands for Cloud Scanner deployment\nDESCRIPTION: These are the terraform commands needed to initialize, plan and apply the configuration to deploy the cloud scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Storing Deepfence API Key as Secret in AWS Secrets Manager (JSON)\nDESCRIPTION: Stores the Deepfence API key as a secret in AWS Secrets Manager. Requires AWS access and privileges to create and manage secrets. The secret will be used by the Deepfence agent running in Fargate to authenticate with the Deepfence Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"deepfence_api_key\": \"<DEEPFENCE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console with Helm\nDESCRIPTION: This command installs the ThreatMapper console using the Deepfence Helm chart. It sets specific parameters such as the image tag, storage class, and namespace. The command also creates the namespace if it doesn't exist. Version is specified for reproducibility.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-console deepfence/deepfence-console \\\n--set global.imageTag=2.4.0 \\\n--set global.storageClass=gp3 \\\n--namespace deepfence-console \\\n--create-namespace \\\n--version 2.4.1\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Single Account ECS Deployment\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner as a task within an AWS ECS cluster for a single account. It requires specifying the AWS region, ThreatMapper management console URL, Deepfence API key, and other optional settings such as account name, enabled regions, task CPU/memory, and task role. Ensure that the `name` parameter is unique to avoid resource name collisions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"aws\" {\n  # AWS region: Example: us-east-1\n  region = \"us-east-1\"\n}\n\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.9.1\"\n  name                          = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url              = \"<Console URL>\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence key>\"\n  # AWS Account Name (Optional, for easy identification)\n  account_name                  = \"\"\n  image                         = \"quay.io/deepfenceio/cloud_scanner_ce:THREATMAPPER_VERSION\"\n  # Enabled regions (Optional): List of regions which should be scanned. All other regions will be disabled.\n  # All regions enabled by default\n  # Example: [\"us-east-1\", \"us-east-2\"]\n  enabled_cloud_regions         = []\n  # Task CPU Units (Default: 4 vCPU)\n  cpu                           = \"4096\"\n  # Task Memory (Default: 8 GB)\n  memory                        = \"8192\"\n  # Task Ephemeral Storage (Default: 100 GB)\n  ephemeral_storage             = \"100\"\n  # Task role: Must be either arn:aws:iam::aws:policy/SecurityAudit or arn:aws:iam::aws:policy/ReadOnlyAccess\n  task_role                     = \"arn:aws:iam::aws:policy/SecurityAudit\"\n  debug_logs                    = false\n  # Use existing VPC (Optional)\n  use_existing_vpc              = false\n  # VPC ID (If use_existing_vpc is set to true)\n  existing_vpc_id               = \"\"\n  # List of VPC Subnet IDs (If use_existing_vpc is set to true)\n  existing_vpc_subnet_ids       = []\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n  # AWS region: Example: us-east-1\n  region                        = \"us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n  # Optional: To refresh the cloud resources every hour, provide CloudTrail Trail ARNs (Management events with write-only or read-write).\n  # If empty, a trail with management events will be automatically chosen if available.\n  # e.g.: [\"arn:aws:cloudtrail:us-east-1:123456789012:trail/aws-events\"]\n  enable_cloudtrail_trails      = false\n  cloudtrail_trails             = []\n}\n\n```\n\n----------------------------------------\n\nTITLE: ECS Task Definition (JSON)\nDESCRIPTION: This JSON defines the task definition for the Deepfence agent in AWS ECS. It specifies the container configuration, including environment variables for the Deepfence API key and management console URL, volume mounts for accessing host resources, and resource limits. Replace `<DEEPFENCE_KEY>` and `<MGMT_CONSOLE_URL>` with actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:2.4.0\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router with Helm\nDESCRIPTION: This command installs the Deepfence router using the Deepfence Helm chart. It creates a LoadBalancer service to provide external access to the console. The command also specifies the namespace and creates it if it doesn't exist. Version is specified for reproducibility.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-router deepfence/deepfence-router \\\n--namespace deepfence-console \\\n--create-namespace \\\n--version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform for Single Subscription on AKS\nDESCRIPTION: This Terraform configuration snippet deploys the Deepfence Cloud Scanner on an Azure Kubernetes Service (AKS) cluster for a single Azure subscription. It retrieves AKS cluster details and subscription information using data sources. The `cloud-scanner` module configures the deployment, requiring parameters such as the management console URL, Deepfence API key, cloud scanner image, AKS cluster host, and credentials. You must replace the placeholder values with your actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"< AKS CLUSTER NAME >\"\n  resource_group_name = \"<AKS CLUSTER RESOURCE GROUP>\"\n}\n\nmodule \"cloud-scanner\" {\n  source                     = \"deepfence/cloud-scanner/azure//examples/aks\"\n  version                    = \"0.9.1\"\n  name                       = \"<name of the app>\"\n  mgmt-console-url           = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  deepfence-key              = \"<DEEPFENCE API KEY>\"\n  # ThreatMapper\n  cloud_scanner_image        = \"quay.io/deepfenceio/cloud_scanner_ce\"\n  # ThreatStryker\n  # cloud_scanner_image      = \"quay.io/deepfenceio/cloud_scanner\"\n  location                   = \"< LOCATION >\"\n  subscription_id            = data.azurerm_subscription.current.subscription_id\n  aks_host                   = data.azurerm_kubernetes_cluster.default.kube_config.0.host\n  aks_client_key             = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_key)\n  aks_client_certificate     = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)\n  aks_cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Secret in Kubernetes (Shell)\nDESCRIPTION: This snippet demonstrates how to create a PostgreSQL secret in the `deepfence-console` namespace using `kubectl`. This secret is then applied to the Kubernetes cluster. The format of the secret is described in the `postgres.yaml` template within the console helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_postgres_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account in values.yaml - Kubernetes\nDESCRIPTION: This code snippet demonstrates how to configure the service account in the `values.yaml` file when deploying Deepfence Console in EKS. It includes settings for creating the service account, adding annotations for the IAM role ARN, and specifying the service account name. This configuration is essential for granting the Deepfence Console the necessary permissions to access the ECR registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/registries/aws-ecr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-ecr-role\"\n  # Service account name\n  name: \"deepfence-console\"\n```\n\n----------------------------------------\n\nTITLE: Postgres DB Export Script Execution\nDESCRIPTION: This command executes the `pg-export.sh` script inside the `deepfence-postgres` Docker container. This script performs the backup of the PostgreSQL database, creating a dump file that can be used for import into another instance.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/pg-export.sh\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agents on Docker Host (Bash)\nDESCRIPTION: This command installs and starts the ThreatMapper sensor agent on a Docker host. It configures the agent with necessary parameters like CPU usage, restart policy, networking, logging, and environment variables, including API key, console URL, and proxy settings. Replace `myorg` with your Docker Hub account, `---CONSOLE-IP---` with the management console IP address, and `---DEEPFENCE-API-KEY---` with your Deepfence API key. This snippet requires docker to be installed and running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e CUSTOM_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    $ACC/deepfence_agent_ce:THREATMAPPER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router with Custom Values\nDESCRIPTION: This command installs the Deepfence router using the Deepfence Helm chart and a custom values file. It creates the namespace if it doesn't exist and specifies the Helm chart version. The custom values file allows you to override the default configuration of the router, such as enabling ingress. Replace `TM_ROUTER_HELM_CHART_VERSION` with appropriate value.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router \\\n--namespace deepfence-console \\\n--create-namespace \\\n--version TM_ROUTER_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agents on Kubernetes (Bash)\nDESCRIPTION: This set of commands installs the ThreatMapper sensor agents in a Kubernetes cluster using Helm.  It adds the Deepfence Helm repository, updates the repository, shows the default values for the deepfence-agent chart, updates the values to reflect custom image locations, API key and management console URL, and installs the chart. Replace `TM_AGENT_HELM_CHART_VERSION` with the desired chart version, and adjust the `deepfence_agent_values.yaml` file accordingly. Requires Helm to be installed and configured to connect to the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version TM_AGENT_HELM_CHART_VERSION > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version TM_AGENT_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration in docker-compose.yml (YAML)\nDESCRIPTION: This snippet configures the connection to a PostgreSQL database instance, likely an AWS RDS instance, by setting environment variables in the `docker-compose.yml` file. It defines the username, password, host, database name, port, and SSL mode for the PostgreSQL database. These variables are used by the Deepfence Management Console to connect to the database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_POSTGRES_USER_DB_USER: postgres\n    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: <password>\n    DEEPFENCE_POSTGRES_USER_DB_HOST: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    DEEPFENCE_POSTGRES_USER_DB_NAME: deepfence\n    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432\n    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration in Kubernetes Values File - YAML\nDESCRIPTION: This snippet demonstrates how to configure custom TLS certificates in a Kubernetes Helm values file for the Deepfence Management Console.  It shows two methods: embedding the certificate and key directly in the values file, or referencing an existing TLS secret. The former requires properly formatted and escaped certificate and key strings, while the latter assumes a TLS secret named `console-tls-certs` exists in the same namespace as the console.  Ensure proper indentation and escaping of special characters within the YAML file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/initial-configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  # Use custom ssl certificate for Deepfence UI\n  # custom certificates can be configured using two options\n  # existing secret or base64 encoded cert and key string\n  # provide one off the two options to configure custom certificates\n  tls:\n    # provide secret name which contains tls cert and key\n    # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets\n    # make sure to create secret in the same namespace as that of the console\n    secretName: \"\"\n    # embed given cert and key as secret and mount to router pod\n    # provide certificate and key in below example format\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL\n      .....\n      BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89\n      .....\n      bHEvWp7ugCTFhurM+lla0d+ElDO2\n      -----END PRIVATE KEY-----\n```\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    secretName: console-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Docker Host (Bash)\nDESCRIPTION: This script deploys the ThreatMapper sensor agent on a Docker host. It configures the agent with CPU limits, restart policy, network settings, logging, volume mounts, and environment variables for log level, user-defined tags, management console URL, console port, and Deepfence API key. Requires Docker and a Docker Hub account.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    $ACC/deepfence_agent_ce:2.2.2\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console Helm Chart\nDESCRIPTION: This command installs the Deepfence console Helm chart into the specified Kubernetes namespace. It sets the image tag, storage class, and creates the namespace if it doesn't exist. It also specifies the chart version to install.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# helm show values deepfence/deepfence-console --version 2.3.1 | less\n\nhelm install deepfence-console deepfence/deepfence-console \\\n    --set global.imageTag=2.3.1 \\\n    --set global.storageClass=gp3 \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Deepfence Agent Uninstall Script\nDESCRIPTION: This bash script uninstalls the Deepfence agent. It stops and disables the deepfence-agent.service using systemctl, removes the service file, and deletes the /opt/deepfence directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/linux-host.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nsystemctl stop deepfence-agent.service\nsystemctl disable deepfence-agent.service\nrm -f /etc/systemd/system/deepfence-agent.service\nrm -rf /opt/deepfence\n```\n\n----------------------------------------\n\nTITLE: Downloading Helm Chart Values\nDESCRIPTION: Downloads the default values for the Deepfence Cloud Scanner Helm chart to a file named cloud-scanner.yaml. This file can then be modified to customize the deployment. Requires Helm to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values cloud-scanner/deepfence-cloud-scanner --version 2.3.2 > cloud-scanner.yaml\n```\n\n----------------------------------------\n\nTITLE: Global Image Tag Configuration\nDESCRIPTION: Configuration setting within the values.yaml file to define the image tag for the Deepfence Agent.  This allows specifying a particular version of the agent to be deployed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  # this image tag is used everywhere for agents\n  # to override set tag at agents level\n  imageTag: 2.5.2\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Configuration - Single Project (Cloud Run)\nDESCRIPTION: This Terraform module configures the Cloud Scanner for a single Google Cloud project using Cloud Run. It defines resources, versions, and parameters like management console URL, Deepfence API key, GCP project ID, and region. It allows for specifying a VPC and IP CIDR range for private IP console access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.9.1\"\n  name                = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  # GCP Project Name (Optional, for easy identification)\n  project_name        = \"\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce:THREATMAPPER_VERSION\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"2\"\n  memory              = \"4096Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repo\nDESCRIPTION: These commands add the Deepfence Helm chart repository and update the local Helm repository index. This allows Helm to find and install the ThreatMapper console and router charts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Running Deepfence Agent with Docker\nDESCRIPTION: This command runs the Deepfence agent as a Docker container with specified resource limits, network configuration, and volume mounts. It sets environment variables for logging, tagging, console URL, and API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.4.0\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Agent with Docker\nDESCRIPTION: This command pulls and runs the Deepfence agent as a Docker container. It configures CPU usage, restarts policy, networking, logging, volume mounts for access to host resources, and environment variables for configuration like log level, tags, console URL, console port, and API key.  Replace ---CONSOLE-IP--- and ---DEEPFENCE-API-KEY--- with actual values.  Requires Docker to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP--- \"\\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.2.2\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on Azure Container Instance for a single Subscription\nDESCRIPTION: This Terraform configuration deploys Deepfence Cloud Scanner on Azure Container Instance to monitor a single Azure subscription. It requires specifying the subscription ID, management console URL, Deepfence API key, location, and resource constraints like CPU and memory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.8.0\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud_scanner_ce:2.4.0\"\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location            = \"eastus\"\n  # Number of CPU cores (Default: 2 vCPU)\n  cpu                 = \"2\"\n  # Memory in GB (Default: 4 GB)\n  memory              = \"4\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment Commands\nDESCRIPTION: These shell commands initialize Terraform, create a plan, and apply the configuration to deploy the Cloud Scanner.  These commands are essential for provisioning the infrastructure defined in the Terraform configuration files.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Customizing Client with Event Hooks\nDESCRIPTION: This code shows how to customize the `Client` class with event hooks for logging requests and responses. It utilizes the `httpx_args` parameter to configure the underlying `httpx` client.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n    httpx_args={\"event_hooks\": {\"request\": [log_request], \"response\": [log_response]}},\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Secret usage in values.yaml (YAML)\nDESCRIPTION: This snippet configures the `values.yaml` file to utilize an existing PostgreSQL secret instead of creating a new StatefulSet. It disables the creation of a new PostgreSQL instance and specifies the name of the existing secret. This configures the Deepfence Management Console to use the external database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npostgres:\n  # Specifies whether a postgres database instance should be created\n  create: false\n  # if create false provide name of the existing secret\n  # secret format refer templates/deepfence-console-secrets/postgres.yaml\n  secretName: \"deepfence-console-secrets-postgres\"\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner on GKE (Single Project) Terraform\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner on a GKE cluster for a single project, leveraging workload identity. It retrieves GKE cluster details and configures the Cloud Scanner module with necessary parameters like cluster endpoint, token, certificate, and ThreatMapper console URL. The placeholder values for target GKE cluster and Deepfence key should be replaced with the actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\n# target cluster to deploy cloud scanner\ndata \"google_container_cluster\" \"target_cluster\" {\n  name     = \"<TARGET GKE CLUSTER NAME>\"\n  location = \"<TARGET GKE CLUSTER NAME>\"\n  project  = \"<PROJECT_ID>\"\n}\n\nmodule \"cloud_scanner_example_single_project\" {\n  source                     = \"deepfence/cloud-scanner/gcp//examples/gke\"\n  version                    = \"0.8.0\"\n  gke_host                   = \"https://${data.google_container_cluster.target_cluster.endpoint}\"\n  gke_token                  = data.google_client_config.current.access_token\n  gke_cluster_ca_certificate = base64decode(data.google_container_cluster.target_cluster.master_auth[0].cluster_ca_certificate,)\n  name                       = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url           = \"<Console URL>\"\n  deepfence-key              = \"<Deepfence-key>\"\n  image_name                 = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce\"\n  image_tag                  = \"2.4.0\"\n  # project_id example: dev1-123456\n  project_id                 = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region                     = \"<REGION_ID>\"\n  # target gke cluster to deploy cloud scanner\n  cluster_name               = \"<TARGET GKE CLUSTER NAME>\"\n  # target gke cluster location\n  cluster_location           = \"<TARGET GKE CLUSTER LOCATION>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Async)\nDESCRIPTION: This code demonstrates how to refresh an access token using an authenticated client in an asynchronous manner. An authenticated client is initialized with a refresh token, and the `auth_token_refresh.asyncio` function is then called to asynchronously fetch a new access token.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\nimport json\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def refresh_token_async():\n    try:\n        #  If we want minified response\n        res = await auth_token_refresh.asyncio(client=client)\n        print(res.access_token, res.refresh_token)\n        #  If we want Detailed response\n        res = await auth_token_refresh.asyncio_detailed(client=client)\n        if res.status_code == 200:\n           json_response = json.loads(res.content.decode(\"utf-8\"))\n           print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n        else:\n            raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx Ingress Controller with Helm - Bash\nDESCRIPTION: This command installs or upgrades the Nginx Ingress Controller using Helm in the ingress-nginx namespace. It uses the official Helm repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install ingress-nginx ingress-nginx \\\n  --repo https://kubernetes.github.io/ingress-nginx \\\n  --namespace ingress-nginx --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner across Multiple GCP Projects (Organization) with Terraform\nDESCRIPTION: This Terraform module deploys the Deepfence Cloud Scanner across multiple Google Cloud Platform projects in an organization. It requires specifying the organization domain, console URL, Deepfence API key, project ID, and region. It can also connect to a private IP console on a VPC with optional vpc and ip_cidr_range configurations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_multiple-projects\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  version             = \"0.5.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # org_domain: root project name\n  org_domain          = \"\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.2.2\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"4\"\n  memory              = \"8192Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describe Pod for Error Analysis - Kubernetes\nDESCRIPTION: This command retrieves detailed information about a specific pod in the deepfence namespace. It's used to diagnose issues, particularly mount failures related to the containerd socket. The expected output includes events and status details that can help pinpoint the root cause of the problem. It requires kubectl to be configured and connected to the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Check Service Status in Kubernetes\nDESCRIPTION: This command retrieves the status of the specified service in the specified namespace and watches for changes. It is used to monitor the deployment of the external load balancer for the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -w deepfence-console-router --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Deploy ThreatMapper Agent Helm Chart\nDESCRIPTION: This command deploys the deepfence-agent Helm chart to install the ThreatMapper sensor in a Kubernetes cluster. It sets various parameters such as the management console URL, API key, image tag, cluster name, container runtime socket settings, and log level. Replace `x.x.x.x` with the IP address of the Management Console and `73f6f3d0-9931-4b31-8967-fd6adf475f80` with the API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\n# helm show readme deepfence/deepfence-agent --version 2.2.2 | less\n# helm show values deepfence/deepfence-agent --version 2.2.2 | less\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set global.imageTag=2.2.2 \\\n    --set clusterName=\"prod-cluster\" \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.podmanSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --set logLevel=\"info\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment\nDESCRIPTION: These commands initialize the Terraform environment, create a plan, and apply the configuration to deploy the Deepfence Cloud Scanner. The `terraform init` command initializes the working directory. The `terraform plan` command creates an execution plan. The `terraform apply` command applies the changes to the infrastructure.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Fine-tune ThreatMapper Agent Helm Deployment\nDESCRIPTION: This snippet allows fine-tuning the ThreatMapper agent deployment by modifying the `deepfence_agent_values.yaml` file. It retrieves the default values, updates the necessary parameters like `managementConsoleUrl` and `deepfenceKey`, and then installs the chart using the modified values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.3.1 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Cloud Scanner Helm chart\nDESCRIPTION: This command installs the Deepfence Cloud Scanner Helm chart onto an EKS cluster. It specifies the chart name, location, namespace, and version. The command also creates the namespace if it does not already exist.  The namespace should be the same as the one used for the service account.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install -f cloud-scanner.yaml cloud-scanner cloud-scanner/deepfence-cloud-scanner \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.3.2\n```\n\n----------------------------------------\n\nTITLE: Configuring docker-compose.yaml for Single Account\nDESCRIPTION: Example configuration of the docker-compose.yaml file for a single AWS account.  It configures environment variables such as the management console URL, API key, cloud provider, and account details for running the Deepfence Cloud Scanner using Docker Compose on EC2.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.3.1\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"aws\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<ACCOUNT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"arn:aws:iam::aws:policy/SecurityAudit\"\n```\n\n----------------------------------------\n\nTITLE: Deploying ThreatMapper Agent with Docker\nDESCRIPTION: This command deploys the Deepfence ThreatMapper agent as a Docker container. It sets resource limits, restarts policies, network and volume configurations, environment variables for console URL, API key, and proxy settings. The agent is pulled from quay.io.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e CUSTOM_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:THREATMAPPER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Cloud Scanner\nDESCRIPTION: This YAML configuration defines the Docker Compose service for the Cloud Scanner. It specifies the image, environment variables for the management console URL, port, Deepfence key, cloud provider, region, account ID, and other configuration options.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.4.0\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"gcp\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<PROJECT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"<PROJECT_ID>\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"\"\n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Agent Helm Release\nDESCRIPTION: This snippet deletes the deployed ThreatMapper agent release named `deepfence-agent` from the `deepfence` namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Get Deepfence Router Service\nDESCRIPTION: This command retrieves and watches the service status for the Deepfence console router in the specified namespace. It's used to monitor the external IP or hostname assigned by the cloud platform's load balancer.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -w deepfence-console-router --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent Shell Script\nDESCRIPTION: This script automates the installation of the Deepfence agent on a Linux host. It checks for required environment variables (MGMT_CONSOLE_URL, DEEPFENCE_KEY), installs dependencies (logrotate, jq, curl), downloads the agent binary and supporting scripts, configures the agent, and installs it as a systemd service. It also includes uninstallation steps to remove the agent if it exists.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# MGMT_CONSOLE_URL: Example: threatmapper.customer.com or 65.65.65.65\nexport MGMT_CONSOLE_URL=\"${MGMT_CONSOLE_URL}\"\nexport DEEPFENCE_KEY=\"${DEEPFENCE_KEY}\"\n\nif [[ -z \"$MGMT_CONSOLE_URL\" ]]; then\n  echo \"env MGMT_CONSOLE_URL is not set\"\n  exit 1\nfi\n\nif [[ -z \"$DEEPFENCE_KEY\" ]]; then\n  echo \"env DEEPFENCE_KEY is not set\"\n  exit 1\nfi\n\nexport MGMT_CONSOLE_PORT=\"443\"\nexport MGMT_CONSOLE_URL_SCHEMA=\"https\"\nexport DF_HOSTNAME=\"$(hostname)\"\nexport DF_LOG_LEVEL=\"info\"\n\nMANAGEMENT_CONSOLE_URL=\"$MGMT_CONSOLE_URL_SCHEMA://$MGMT_CONSOLE_URL:$MGMT_CONSOLE_PORT\"\n\nOS_ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '\"')\nif [[ \"$OS_ID\" == \"amzn\" || \"$OS_ID\" == \"centos\" ]]; then\n    # Do necessary installs for Amazon Linux\n    yum -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nelse\n    # Do necessary installs for Ubuntu\n    apt-get -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nfi\n\naccess_token_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/auth/token\" \\\n        --header 'Content-Type: application/json' \\\n        --data '{\"api_token\": \"$DEEPFENCE_KEY\"}')\nif [[ $access_token_response == \"\" ]]; then\n  echo \"Failed to connect to the management console\"\n  exit 1\nfi\n\naccess_token=$(jq -r '.access_token' <<< \"$access_token_response\")\nif [[ $access_token == \"\" || $access_token == \"null\" ]]; then\n  echo \"Failed to authenticate\"\n  echo \"$access_token_response\"\n  exit 1\nfi\n\ndownload_url_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/agent-deployment/binary/download-url\" \\\n        --header \"Authorization: Bearer $access_token\")\nif [[ $download_url_response == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  exit 1\nfi\n\nstart_agent_script_download_url=$(jq -r '.start_agent_script_download_url' <<< \"$download_url_response\")\nif [[ $start_agent_script_download_url == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\nuninstall_agent_script_download_url=$(jq -r '.uninstall_agent_script_download_url' <<< \"$download_url_response\")\nif [[ $uninstall_agent_script_download_url == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\ncurl -k -o uninstall_deepfence.sh \"$uninstall_agent_script_download_url\"\nchmod +x uninstall_deepfence.sh\n\necho \"Uninstalling existing Deepfence agent installation, if any\"\nsystemctl stop deepfence-agent.service\nsystemctl disable deepfence-agent.service\nrm -f /etc/systemd/system/deepfence-agent.service\nbash uninstall_deepfence.sh\n\nif [[ ! -d \"/opt/deepfence\" ]]; then\n    mkdir -p /opt/deepfence /opt/deepfence/var/log/\nfi\n\narchitecture=\"\"\ncase $(uname -m) in\n    i386)   architecture=\"386\" ;;\n    i686)   architecture=\"386\" ;;\n    x86_64) architecture=\"amd64\" ;;\n    arm)    dpkg --print-architecture | grep -q \"arm64\" && architecture=\"arm64\" || architecture=\"arm\" ;;\nesac\n\necho \"Detected architecture: $architecture\"\n\nagent_binary_download_url=$(jq -r --arg architecture \"agent_binary_${architecture}_download_url\" '.[$architecture]' <<< \"$download_url_response\")\nagent_binary_filename=$(basename \"$agent_binary_download_url\")\nagent_binary_filename=$(cut -f1 -d\"?\" <<< \"$agent_binary_filename\")\n\nif [[ $agent_binary_download_url == \"\" || $agent_binary_filename == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\necho \"Downloading agent binary from $agent_binary_download_url to /opt/deepfence/$agent_binary_filename\"\ncurl -k -o \"/opt/deepfence/$agent_binary_filename\" \"$agent_binary_download_url\"\n\ncurl -k -o /opt/deepfence/start_deepfence_agent.sh \"$start_agent_script_download_url\"\nchmod +x \"/opt/deepfence/start_deepfence_agent.sh\"\n\ntar -xzf \"/opt/deepfence/$agent_binary_filename\" -C /opt/deepfence/\n\necho \"MGMT_CONSOLE_URL: $MGMT_CONSOLE_URL\"\necho \"MGMT_CONSOLE_PORT: $MGMT_CONSOLE_PORT\"\necho \"DF_HOSTNAME: $DF_HOSTNAME\"\n\necho \"Installing Deepfence agent as daemon service\"\n\ncat << EOF > /etc/systemd/system/deepfence-agent.service\n[Unit]\nDescription=Deepfence Agent Service\nAfter=network.target\n\n[Service]\nEnvironment=MGMT_CONSOLE_URL=\"$MGMT_CONSOLE_URL\"\nEnvironment=DEEPFENCE_KEY=\"$DEEPFENCE_KEY\"\nEnvironment=MGMT_CONSOLE_PORT=\"$MGMT_CONSOLE_PORT\"\nEnvironment=MGMT_CONSOLE_URL_SCHEMA=\"$MGMT_CONSOLE_URL_SCHEMA\"\nEnvironment=DF_HOSTNAME=\"$(hostname)\"\nEnvironment=DF_LOG_LEVEL=\"$DF_LOG_LEVEL\"\n\nUser=root\nGroup=root\nRestart=on-failure\nType=forking\nExecStart=/opt/deepfence/start_deepfence_agent.sh\nWorkingDirectory=/opt/deepfence\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable deepfence-agent.service\nsystemctl start deepfence-agent.service\nsystemctl status deepfence-agent.service\n\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Open Files Limit - RHEL/Amazon Linux\nDESCRIPTION: This snippet configures the maximum number of open files for Docker daemon and containers on Amazon Linux/RHEL systems. It involves modifying the `/etc/sysconfig/docker` file and restarting the Docker daemon.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for ECS Tasks\nDESCRIPTION: This snippet defines an IAM role with a custom trust policy that allows ECS tasks to assume the role. This is essential for granting the Deepfence agent the necessary permissions to access other AWS services, such as Secrets Manager and CloudWatch Logs.  The `ecs-tasks.amazonaws.com` service principal is used.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ecs-tasks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Redeploy Agent with Helm\nDESCRIPTION: This set of commands deletes the existing deepfence-agent deployment, retrieves default values for the Helm chart, modifies the `containerdSock` value in the `deepfence_agent_values.yaml` file to \"false\", and then reinstalls the agent with the updated configuration. It requires Helm to be installed and configured to communicate with the Kubernetes cluster. The version number '2.2.2' is significant and should match the desired agent version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n\nhelm show values deepfence/deepfence-agent --version 2.2.2 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Uninstall ThreatMapper Console (Docker Compose)\nDESCRIPTION: Uses the docker compose down command to stop and remove the containers, networks, and volumes defined in the docker-compose.yml file, effectively uninstalling the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Create IAM Role Trust Policy - AWS ECS (EC2)\nDESCRIPTION: This JSON defines a custom trust policy for an IAM role that allows ECS tasks to assume the role. The 'ecs-tasks.amazonaws.com' service is granted the 'sts:AssumeRole' action.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL connection in docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows the configuration settings in docker-compose.yml for connecting to an AWS RDS PostgreSQL instance. It includes the database user, password, host, database name, port, and SSL mode. Replace <password> with the actual password for the PostgreSQL user.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/managed-database.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_POSTGRES_USER_DB_USER: postgres\n    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: <password>\n    DEEPFENCE_POSTGRES_USER_DB_HOST: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    DEEPFENCE_POSTGRES_USER_DB_NAME: deepfence\n    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432\n    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable\n```\n\n----------------------------------------\n\nTITLE: Show Deepfence Console Helm Chart Values\nDESCRIPTION: Displays the default values for the Deepfence console Helm chart and saves them to a YAML file for customization. This allows users to modify the configuration before installing the chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-console --version 2.3.1 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Reset Password in Kubernetes Pod (Shell)\nDESCRIPTION: This snippet shows how to reset the password for Deepfence ThreatMapper when deployed in Kubernetes. It executes the deepfence_server --reset-password command within the server container of the deepfence-console-server deployment in the deepfence-console namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/troubleshooting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-console-server \\\n  -c server \\\n  --namespace deepfence-console \\\n  -- bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to IAM Role for Secrets Manager Access\nDESCRIPTION: This inline policy grants the IAM role permission to retrieve the Deepfence API key from AWS Secrets Manager. Replace <API_KEY_SECRET_ARN> with the actual ARN of the secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": [\n                \"<API_KEY_SECRET_ARN>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Cloud Scanner Helm Chart\nDESCRIPTION: Installs the deepfence-cloud-scanner helm chart using the specified values file (cloud-scanner.yaml), namespace (deepfence), creates the namespace if it doesn't exist, and specifies the chart version (2.4.0).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f cloud-scanner.yaml cloud-scanner cloud-scanner/deepfence-cloud-scanner \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server in docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows how to set file server parameters in `docker-compose.yml` for Docker deployments, when using an external S3-compatible file server. It defines environment variables related to bucket names, external file server status, host, port, user, password, secure flag, and region.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n        # public bucket with read permissions on objects for hosting vulnerability database\n        # S3 bucket permissions {\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"database\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"s3:GetObject\",\"Resource\":[\"arn:aws:s3:::<bucket-name>/database/*\",\"arn:aws:s3:::<bucket-name>/database\"]}]}\n        DEEPFENCE_FILE_SERVER_DB_BUCKET: database\n        # private bucket to host reports, sbom, etc.\n        DEEPFENCE_FILE_SERVER_BUCKET: default\n        # If using S3 or other external file server (MinIO/SeaweedFS), set this to true\n        DEEPFENCE_FILE_SERVER_EXTERNAL: \"true\"\n        # set s3.amazonaws.com if using s3 buckets\n        DEEPFENCE_FILE_SERVER_HOST: 123.123.123.123\n        DEEPFENCE_FILE_SERVER_PORT: 8080\n        # uncomment to set access key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_USER: fileserveruser\n        # uncomment to set secret key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_PASSWORD: changeme\n        # set true if https\n        DEEPFENCE_FILE_SERVER_SECURE: \"false\"\n        # set aws s3 bucket region if using s3 buckets\n        DEEPFENCE_FILE_SERVER_REGION: \"\"\n```\n\n----------------------------------------\n\nTITLE: Adding GCR Registry (Python)\nDESCRIPTION: This Python code demonstrates how to add a Google Container Registry (GCR) using the ThreatMapper client. It uses the `add_registry_gcr.sync` method. It requires providing the registry name, URL, and a service account JSON file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.types import File\nfrom threatmapper.api.registry import add_registry_gcr\nfrom threatmapper.models import FormDataModelRegistryGCRAddReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef add_gcr_registry():\n    try:\n       name = 'Google Registry'\n       registry_url = 'YOUR_REGISTRY_URL'\n       service_account_json = File(payload=open('/path/to/json','rb'), mime_type=\"application/json\", file_name=\"service.json\")\n       multipart_data=FormDataModelRegistryGCRAddReq(name=name, registry_url=registry_url, service_account_json=service_account_json)\n       response = add_registry_gcr.sync(client=client, multipart_data=multipart_data)\n       print(response.message)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Generate Self-Signed SSL Certificate and Restart Docker Console (Bash)\nDESCRIPTION: This snippet demonstrates how to generate a self-signed SSL certificate using OpenSSL, place the certificate and private key in the `/etc/deepfence/certs` directory, and restart the Deepfence Management Console using Docker Compose to apply the new TLS certificate. This is useful for securing communication with the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Provide the SSL key and cert, for example, using OpenSSL to create a self-signed pair\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n\n# restart the management console to use the new TLS certificate\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on Azure Container Instance (Tenant Subscriptions)\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner on Azure Container Instance for monitoring multiple subscriptions within a tenant. It requires specifying the subscription ID, management console URL, Deepfence API key, a list of subscription IDs to monitor, location, CPU cores, and memory allocation. Ensure the `name` parameter is unique to avoid resource name collisions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_tenant-subscriptions\" {\n  source                  = \"deepfence/cloud-scanner/azure//examples/tenant-subscriptions\"\n  version                 = \"0.6.0\"\n  mgmt-console-url        = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port       = \"<Console port> eg. 443\"\n  deepfence-key           = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                    = \"deepfence-cloud-scanner\"\n  image                   = \"quay.io/deepfenceio/cloud_scanner_ce:2.3.1\"\n  # List of subscription ids to monitor\n  subscription_ids_access = [\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\", \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"]\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location                = \"eastus\"\n  # Number of CPU cores (Default: 4 vCPU)\n  cpu                     = \"4\"\n  # Memory in GB (Default: 8 GB)\n  memory                  = \"8\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Service Type - YAML\nDESCRIPTION: This YAML snippet configures the service type as Ingress for use with the Nginx Ingress Controller.  This is an alternative to using a LoadBalancer service.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: deepfence-router\n  type: Ingress\n...\n```\n\n----------------------------------------\n\nTITLE: Deploy Cloud Scanner Single Project on GCP Cloud Run with Terraform\nDESCRIPTION: This Terraform configuration deploys the Cloud Scanner in a single project on Google Cloud Run. It requires the management console URL, Deepfence API key, project ID, and region to be specified. Optional parameters include VPC configuration for private IP console access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.6.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  # GCP Project Name (Optional, for easy identification)\n  project_name        = \"\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce:2.3.1\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"2\"\n  memory              = \"4096Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner on GCP Cloud Run (Multiple Projects) Terraform\nDESCRIPTION: This Terraform module configures and deploys the Cloud Scanner on GCP Cloud Run for multiple projects (organization deployment). It requires specifying the organization domain, ThreatMapper console URL, Deepfence API key, and other optional parameters like project ID and region. Update the placeholder values accordingly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_multiple-projects\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  version             = \"0.8.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # org_domain: root project name\n  org_domain          = \"\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce:2.4.0\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"4\"\n  memory              = \"8192Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificate - Bash\nDESCRIPTION: This snippet generates a self-signed SSL certificate and private key using OpenSSL, places them in the `/etc/deepfence/certs` directory, and restarts the management console to use the new certificate.  This is a common method for setting up TLS for local development or testing. Requires OpenSSL to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Provide the SSL key and cert, for example, using OpenSSL to create a self-signed pair\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n\n# restart the management console to use the new TLS certificate\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Configuration - Multiple Projects (GKE)\nDESCRIPTION: This Terraform module configures the Cloud Scanner for multiple Google Cloud projects (organization deployment) using a GKE cluster with workload identity. It has configuration parameters for single and organization deployments, including cluster details, management console URL, and API key. It requires details like `deployedAccountID` and `organizationAccountID`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud_scanner_example_multiple_project\" {\n  source                     = \"deepfence/cloud-scanner/gcp//examples/gke\"\n  version                    = \"0.9.1\"\n  name                       = \"deepfence-cloud-scanner\"\n  gke_host                   = \"https://${data.google_container_cluster.target_cluster.endpoint}\"\n  gke_token                  = data.google_client_config.current.access_token\n  gke_cluster_ca_certificate = base64decode(data.google_container_cluster.target_cluster.master_auth[0].cluster_ca_certificate,)\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url           = \"<Console URL>\"\n  deepfence-key              = \"<Deepfence-key>\"\n  image_name                 = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce\"\n  image_tag                  = \"THREATMAPPER_VERSION\"\n  # project_id example: dev1-123456\n  project_id                 = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region                     = \"<REGION_ID>\"\n  # target gke cluster to deploy cloud scanner\n  cluster_name               = \"<TARGET GKE CLUSTER NAME>\"\n  # target gke cluster location\n  cluster_location           = \"<TARGET GKE CLUSTER NAME>\"\n  isOrganizationDeployment   = true\n  # project id where the cloud scanner is deployed\n  deployedAccountID          = \"<DEPLOYED PROJECT ID>\"\n  # organization project id\n  organizationAccountID      = \"<ORG PROJECT ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Modification - YAML\nDESCRIPTION: This involves manually editing the `deepfence_agent_values.yaml` file to set the `containerdSock` value to `\"false\"`. This configuration change prevents the agent from attempting to mount the containerd socket, resolving the `FailedMount` error. A text editor is required to modify this YAML file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Postgres DB Import Script Execution\nDESCRIPTION: This command executes the `pg-import.sh` script inside the `deepfence-postgres` Docker container, providing the path to the database dump file as an argument. This script restores the PostgreSQL database from the provided dump file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/pg-import.sh /pg_data.dump\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL secret in Kubernetes (Shell)\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes secret for PostgreSQL credentials and apply it to the deepfence-console namespace. It utilizes kubectl to create the namespace and apply the secret from a YAML file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_postgres_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreatMapper Client\nDESCRIPTION: This code snippet demonstrates how to initialize a ThreatMapper client using the `Client` class. It requires the base URL of the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\nclient = Client(base_url=\"YOUR_CONSOLE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Modify Docker Open Files Limit - RHEL/Amazon Linux\nDESCRIPTION: This snippet demonstrates how to modify the default ulimit for the number of open files per container in the Docker configuration file.  It changes the OPTIONS variable to increase the nofile limit. This requires restarting the docker daemon afterwards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Docker Proxy Configuration\nDESCRIPTION: This JSON snippet configures Docker to use a proxy server for accessing external resources. It defines proxy settings for both HTTP and HTTPS protocols, as well as a list of hosts/IPs to bypass the proxy for. Replace the placeholder IP address with your actual proxy server IP.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/docker.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"\"\n            }\n    },\n    \"HttpHeaders\": {\n        \"User-Agent\": \"Docker-Client/19.03.1 (linux)\"\n    },\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://111.111.111.111:8006\",\n            \"httpsProxy\": \"http://111.111.111.111:8006\",\n            \"noProxy\": \"localhost,127.0.0.1\"\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repo\nDESCRIPTION: These commands add the Deepfence Helm charts repository to your local Helm configuration and update the repository information, allowing you to install charts from Deepfence.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Bash: Start Cloud Scanner using Docker Compose\nDESCRIPTION: This bash command starts the Cloud Scanner using Docker Compose in detached mode (-d), which runs the containers in the background.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: YAML: Docker Compose Configuration\nDESCRIPTION: This is a docker-compose configuration file for deploying the Deepfence Cloud Scanner. It defines the environment variables required for the scanner to connect to the Deepfence Management Console and scan the specified GCP account. Key variables to configure include MGMT_CONSOLE_URL, MGMT_CONSOLE_PORT, DEEPFENCE_KEY, CLOUD_PROVIDER, CLOUD_REGION, CLOUD_ACCOUNT_ID and DEPLOYED_ACCOUNT_ID.  Ensure to replace placeholder values with your actual configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.3.1\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"gcp\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<PROJECT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"<PROJECT_ID>\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"\"\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Management Console (Bash)\nDESCRIPTION: Navigates to the `deployment-scripts` directory and uses `docker-compose` to start the Deepfence Management Console in detached mode. Requires docker-compose to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Get Container Runtime Socket Path Kubernetes\nDESCRIPTION: This set of commands retrieves the container runtime socket path in the Kubernetes cluster. It applies a job definition, waits for the job to complete, extracts the logs, and then deletes the job definition.  The logs contain the information about `--container-runtime-endpoint` or `containerd`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Deepfence Agent Systemd Service\nDESCRIPTION: This configuration file defines the deepfence-agent service for systemd. It specifies the service description, dependencies, environment variables, user and group, restart policy, execution start command, and working directory. It relies on several environment variables: MGMT_CONSOLE_URL, DEEPFENCE_KEY, MGMT_CONSOLE_PORT, MGMT_CONSOLE_URL_SCHEMA, DF_HOSTNAME, and DF_LOG_LEVEL.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/linux-host.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[Unit]\nDescription=Deepfence Agent Service\nAfter=network.target\n\n[Service]\nEnvironment=\"MGMT_CONSOLE_URL=$MGMT_CONSOLE_URL\"\nEnvironment=\"DEEPFENCE_KEY=$DEEPFENCE_KEY\"\nEnvironment=\"MGMT_CONSOLE_PORT=$MGMT_CONSOLE_PORT\"\nEnvironment=\"MGMT_CONSOLE_URL_SCHEMA=$MGMT_CONSOLE_URL_SCHEMA\"\nEnvironment=\"DF_HOSTNAME=$(hostname)\"\nEnvironment=\"DF_LOG_LEVEL=$DF_LOG_LEVEL\"\n\nUser=root\nGroup=root\nRestart=on-failure\nType=forking\nExecStart=/opt/deepfence/start_deepfence_agent.sh\nWorkingDirectory=/opt/deepfence\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Helm Repository Addition\nDESCRIPTION: Adds the Deepfence Cloud Scanner Helm repository to your local Helm configuration.  This allows you to access and install the Deepfence Cloud Scanner chart.  This step is a pre-requisite for deploying Cloud Scanner on an EKS cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add cloud-scanner https://deepfence-helm-charts.s3.amazonaws.com/cloud-scanner\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router from Helm Chart\nDESCRIPTION: Installs the Deepfence router using the Helm chart, applying the customized values from the specified YAML file.  This enables external access to the Deepfence console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Configuration - Multiple Projects (Cloud Run)\nDESCRIPTION: This Terraform module configures the Cloud Scanner for multiple Google Cloud projects (organization deployment) using Cloud Run. Key parameters include `org_domain`, `mgmt-console-url`, `deepfence-key`, `project_id`, and `region`. It also supports optional VPC and IP CIDR range configuration for private IP console access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_multiple-projects\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  version             = \"0.9.1\"\n  name                = \"deepfence-cloud-scanner\"\n  # org_domain: root project name\n  org_domain          = \"\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce:THREATMAPPER_VERSION\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"4\"\n  memory              = \"8192Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Tokens (Async)\nDESCRIPTION: This code demonstrates how to get access and refresh tokens using the regular ThreatMapper client in an asynchronous manner. It demonstrates SSL enabled and disabled connection options.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n\n# SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n# OR\n# SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def get_access_refresh_token_async():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = await auth_token.asyncio(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = await auth_token.asyncio_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response = json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Download Helm Chart Values for Cloud Scanner\nDESCRIPTION: This command downloads the default values for the Deepfence Cloud Scanner Helm chart to a file named `cloud-scanner.yaml`.  This file is then modified to configure the scanner for your specific environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values cloud-scanner/deepfence-cloud-scanner --version CLOUD_SCANNER_HELM_CHART_VERSION > cloud-scanner.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Vulnerability Scan ASYNC with ThreatMapper API\nDESCRIPTION: This snippet showcases how to asynchronously start a vulnerability scan on hosts using the ThreatMapper API. It first defines a `node_config` function to retrieve a list of hosts. Then, the `start_vulnerability_scan_on_hosts` function constructs a payload including the host list and scan configurations for multiple languages and calls `start_vulnerability_scan.asyncio` to trigger the scan. It also handles potential exceptions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef node_config() -> List:\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       host_list = []\n       for host in hosts:\n          host_list.append({\"node_id\":host.node_id, \"node_type\": \"host\"})\n       return host_list\n    except UnexpectedStatus as e:\n        print(\"Exception when calling node_config-> %s\\n\" % e)\n\nasync def start_vulnerability_scan_on_hosts():\n    try:\n       node_ids = node_config()\n       payload_dict = {\n                       \"filters\": {\n                         \"cloud_account_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"container_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"host_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"image_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"kubernetes_cluster_scan_filter\": {\n                           \"filter_in\": None\n                         }\n                       },\n                       \"node_ids\": node_ids,\n                       \"scan_config\": [\n                         {\n                           \"language\": \"base\"\n                         },\n                         {\n                           \"language\": \"java\"\n                         },\n                         {\n                           \"language\": \"javascript\"\n                         },\n                         {\n                           \"language\": \"rust\"\n                         },\n                         {\n                           \"language\": \"golang\"\n                         },\n                         {\n                           \"language\": \"ruby\"\n                         },\n                         {\n                           \"language\": \"python\"\n                         },\n                         {\n                           \"language\": \"php\"\n                         },\n                         {\n                           \"language\": \"dotnet\"\n                         }\n                       ]\n                     }\n       json_body = ModelVulnerabilityScanTriggerReq.from_dict(payload_dict)\n       response: ModelScanTriggerResp = await start_vulnerability_scan.asyncio(client=client,json_body=json_body)\n       print(response.scan_ids, response.bulk_scan_id)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling start_vulnerability_scan_on_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sample Fargate Task Definition with Deepfence Agent\nDESCRIPTION: This JSON snippet provides a sample Fargate task definition that includes the Deepfence agent as a sidecar container. It defines the containers, their configurations, and necessary environment variables and secrets.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"inferenceAccelerators\": [],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"python\",\n      \"image\": \"python:latest\",\n      \"cpu\": 0,\n      \"portMappings\": [\n        {\n          \"name\": \"python-8000-tcp\",\n          \"containerPort\": 8000,\n          \"hostPort\": 8000,\n          \"protocol\": \"tcp\",\n          \"appProtocol\": \"http\"\n        }\n      ],\n      \"essential\": true,\n      \"entryPoint\": [\n        \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n      ],\n      \"command\": [\"python3\", \"-m\", \"http.server\"],\n      \"environment\": [\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_SERVERLESS\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"CUSTOM_TAGS\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"DF_INSTALL_DIR\",\n          \"value\": \"/deepfence\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n          \"value\": \"https\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_PORT\",\n          \"value\": \"443\"\n        }\n      ],\n      \"mountPoints\": [],\n      \"volumesFrom\": [\n        {\n          \"sourceContainer\": \"deepfence-agent\",\n          \"readOnly\": false\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"valueFrom\": \"<API_KEY_SECRET_ARN>:deepfence_api_key::\"\n        }\n      ],\n      \"dependsOn\": [\n        {\n          \"containerName\": \"deepfence-agent\",\n          \"condition\": \"COMPLETE\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\",\n          \"mode\": \"non-blocking\",\n          \"max-buffer-size\": \"25m\"\n        }\n      }\n    },\n    {\n      \"name\": \"deepfence-agent\",\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:THREATMAPPER_VERSION-fargate\",\n      \"repositoryCredentials\": {},\n      \"cpu\": 0,\n      \"portMappings\": [],\n      \"essential\": false,\n      \"environment\": [],\n      \"mountPoints\": [],\n      \"volumesFrom\": [],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\",\n          \"mode\": \"non-blocking\",\n          \"max-buffer-size\": \"25m\"\n        }\n      }\n    }\n  ],\n  \"volumes\": [],\n  \"networkMode\": \"awsvpc\",\n  \"memory\": \"4096\",\n  \"cpu\": \"2048\",\n  \"family\": \"test-doc-python\",\n  \"executionRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"taskRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"runtimePlatform\": {\n    \"cpuArchitecture\": \"X86_64\",\n    \"operatingSystemFamily\": \"LINUX\"\n  },\n  \"tags\": [],\n  \"placementConstraints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository for Cloud Scanner\nDESCRIPTION: Adds the Deepfence cloud scanner helm repository to the local helm configuration. This allows helm to discover and install the deepfence-cloud-scanner chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add cloud-scanner https://deepfence-helm-charts.s3.amazonaws.com/cloud-scanner\n```\n\n----------------------------------------\n\nTITLE: Instance ID Suffix Configuration\nDESCRIPTION: Configuration setting within the values.yaml file to define a suffix for cloud instance IDs. This is used to distinguish VMs with the same hostname, particularly in environments with custom Amazon Machine Images (AMIs).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Suffix cloud instance id to hostnames\ninstanceIdSuffix: \"N\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadBalancer Service - YAML\nDESCRIPTION: This YAML snippet configures the LoadBalancer service for the Deepfence Router.  It allows specification of a static IP address, AWS EIP allocations, load balancer type (external or internal), source IP ranges, ACM SSL certificate ARN, external IPs, and external traffic policy.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  name: deepfence-router\n  type: LoadBalancer\n  #  Using static ip address for load balancer\n  # - Google Cloud: https://cloud.google.com/kubernetes-engine/docs/tutorials/configuring-domain-name-static-ip\n  # loadBalancerIP: \"1.2.3.4\"\n  # - Azure: https://docs.microsoft.com/en-us/azure/aks/static-ip\n  # loadBalancerIP: \"1.2.3.4\"\n  loadBalancerIP: \"\"\n  # - AWS: (v1.16+) https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html#kubernetes-1.16\n  # Static ip for NLB: awsEipAllocations: \"eipalloc-0123456789abcdefg,eipalloc-0123456789hijklmn\"\n  awsEipAllocations: \"\"\n  # LoadBalancer type: external or internal\n  loadBalancerType: \"external\"\n  # If loadBalancerType is \"external\", we recommend setting loadBalancerSourceRanges to the ip address / CIDR ranges\n  # of your laptop's ip or corporate CIDR range. If this is set empty, ports 443 and 80 will be open to the public internet.\n  # Example: [\"143.231.0.0/16\",\"210.57.79.18/32\"]\n  loadBalancerSourceRanges: []\n  # ACM SSL certificate for AWS Classic LoadBalancer (This cannot be set if awsEipAllocations is set)\n  # https://aws.amazon.com/premiumsupport/knowledge-center/terminate-https-traffic-eks-acm/\n  # Example: \"arn:aws:acm:{region}:{user id}:certificate/{id}\"\n  awsLoadBalancerAcmArn: \"\"\n  # externalIPs: When kubernetes is not cloud managed, add public ip addresses of kubernetes nodes to externalIPs\n  externalIPs: []\n  externalTrafficPolicy: \"Cluster\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner in a Single GCP Project with Terraform\nDESCRIPTION: This Terraform module deploys the Deepfence Cloud Scanner within a single Google Cloud Platform project. It requires specifying the console URL, Deepfence API key, project ID, and region. It can also connect to a private IP console on a VPC with optional vpc and ip_cidr_range configurations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.5.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.2.2\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"2\"\n  memory              = \"4096Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Environment Variables (JSON)\nDESCRIPTION: This JSON snippet shows the environment variables required for the ThreatMapper agent within the application container's task definition. The `DEEPFENCE_KEY` and `MGMT_CONSOLE_URL` are crucial for the agent to communicate with the management console. `DF_SERVERLESS` is set to `true` for serverless environments. The values `<deepfence-key>` and `<MGMT_CONSOLE_URL>` should be replaced with the actual API key and Management Console URL respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"environment\": [\n        {\n            \"name\": \"DEEPFENCE_KEY\",\n            \"value\": \"<deepfence-key>\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL\",\n            \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n            \"name\": \"DF_SERVERLESS\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"DF_LOG_LEVEL\",\n            \"value\": \"info\"\n        },\n        {\n            \"name\": \"CUSTOM_TAGS\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"DF_INSTALL_DIR\",\n            \"value\": \"/deepfence\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n            \"value\": \"https\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_PORT\",\n            \"value\": \"443\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Management Console (bash)\nDESCRIPTION: This command uses Docker Compose to start the Deepfence Management Console in detached mode. It assumes that the `docker-compose.yml` file is present in the `ThreatMapper/deployment-scripts` directory. Docker Compose is required.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Referencing existing TLS Secret in Kubernetes (YAML)\nDESCRIPTION: This YAML snippet demonstrates referencing an existing TLS secret in Kubernetes containing the certificate and key for securing the ThreatMapper Management Console. The `secretName` parameter in the `router.tls` section specifies the name of the Kubernetes secret. This assumes the secret is in the same namespace as the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/initial-configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    secretName: console-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL connection in docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows how to configure PostgreSQL connection settings within the `docker-compose.yml` file for Deepfence Management Console. It sets environment variables for the PostgreSQL user, password, host, database name, and port. Replace <password> with the correct database password.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_POSTGRES_USER_DB_USER: postgres\n    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: <password>\n    DEEPFENCE_POSTGRES_USER_DB_HOST: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    DEEPFENCE_POSTGRES_USER_DB_NAME: deepfence\n    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432\n    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable\n```\n\n----------------------------------------\n\nTITLE: Show Deepfence Agent Helm Chart Values\nDESCRIPTION: Retrieves the default values for the Deepfence Agent Helm chart and saves them to a file named `deepfence_agent_values.yaml`. This file can then be edited to customize the chart deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-agent > deepfence_agent_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Azure Terraform Configuration\nDESCRIPTION: This Terraform configuration sets up the Cloud Scanner within an Azure subscription.  It requires specifying the subscription ID, console URL, Deepfence key, scanner name and scanner image. It utilizes the 'deepfence/cloud-scanner/azure' module from Terraform registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.2.0\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud-scanner:1.5.0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to IAM Role for KMS Key Access\nDESCRIPTION: This inline policy grants the IAM role permission to decrypt secrets using a custom KMS key and retrieve secrets from Secrets Manager.  Replace <API_KEY_SECRET_ARN> with the actual ARN of the secret and <custom_kms_key_arn> with the actual ARN of the KMS key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:Decrypt\",\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": [\n                \"<API_KEY_SECRET_ARN>\",\n                \"<custom_kms_key_arn>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Check Deepfence Console Pods\nDESCRIPTION: This command retrieves and watches the status of the pods in the deepfence-console namespace. This helps to monitor the startup progress of the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace deepfence-console -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Show Deepfence Router Helm Chart Values\nDESCRIPTION: Displays the default values for the Deepfence router Helm chart and saves them to a YAML file for customization. This allows users to modify the configuration before installing the chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-router --version 2.3.1 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Agent with Docker\nDESCRIPTION: This command runs the Deepfence agent as a Docker container. It sets resource limits, configures networking, mounts volumes for debugging and logging, and sets environment variables for console URL, port, and API key. The agent is configured to restart on failure.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.3.1\n```\n\n----------------------------------------\n\nTITLE: Download Docker Compose File for Cloud Scanner\nDESCRIPTION: This command downloads the `docker-compose.yaml` file for deploying the Cloud Scanner on an EC2 instance. The file is downloaded from the specified GitHub URL into the `deepfence-cloud-scanner` directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.5/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition with Deepfence Agent\nDESCRIPTION: This snippet provides a sample Fargate task definition that includes the Deepfence agent as a sidecar container.  The task definition defines two containers: one for the application (`python`) and one for the Deepfence agent (`deepfence-agent`). It configures environment variables, secrets, and log configurations. The `deepfence-agent` container shares its volumes with the main `python` container. Replace `<MGMT_CONSOLE_URL>` and `<API_KEY_SECRET_ARN>` with the appropriate values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"inferenceAccelerators\": [],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"python\",\n      \"image\": \"python:latest\",\n      \"cpu\": 0,\n      \"portMappings\": [\n        {\n          \"name\": \"python-8000-tcp\",\n          \"containerPort\": 8000,\n          \"hostPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"essential\": true,\n      \"entryPoint\": [\n        \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n      ],\n      \"command\": [\"python3\", \"-m\", \"http.server\"],\n      \"environment\": [\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_SERVERLESS\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"DF_INSTALL_DIR\",\n          \"value\": \"/usr/local/bin\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n          \"value\": \"https\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_PORT\",\n          \"value\": \"443\"\n        }\n      ],\n      \"mountPoints\": [],\n      \"volumesFrom\": [\n        {\n          \"sourceContainer\": \"deepfence-agent\",\n          \"readOnly\": false\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"valueFrom\": \"<API_KEY_SECRET_ARN>:deepfence_api_key::\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    },\n    {\n      \"name\": \"deepfence-agent\",\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:2.2.2-fargate\",\n      \"repositoryCredentials\": {},\n      \"cpu\": 0,\n      \"portMappings\": [],\n      \"essential\": false,\n      \"environment\": [],\n      \"mountPoints\": [],\n      \"volumesFrom\": [],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ],\n  \"volumes\": [],\n  \"networkMode\": \"awsvpc\",\n  \"memory\": \"4096\",\n  \"cpu\": \"2048\",\n  \"family\": \"test-doc-python\",\n  \"executionRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"taskRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"runtimePlatform\": {\n    \"cpuArchitecture\": \"X86_64\",\n    \"operatingSystemFamily\": \"LINUX\"\n  },\n  \"tags\": [],\n  \"placementConstraints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Router via Helm\nDESCRIPTION: Installs the ThreatMapper Router using Helm. It installs the `deepfence-router` chart in the `deepfence-console` namespace, creating the namespace if it doesn't exist. A specific chart version is used.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# helm show values deepfence/deepfence-router --version 2.1.1\n   \nhelm install deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Azure Cloud Scanner\nDESCRIPTION: This Terraform configuration defines the resources required to deploy the Cloud Scanner in Azure.  It uses the `azurerm` provider and the `deepfence/cloud-scanner/azure` module. It configures the cloud scanner with necessary parameters like console URL, API key, name, and image.  Remember to replace placeholder values with your actual configuration values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.2.0\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud-scanner:2.0.1\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: File Server Configuration in docker-compose.yml (YAML)\nDESCRIPTION: This YAML snippet configures the connection to an S3-compatible file server. It sets various environment variables related to bucket names, external file server usage, host, port, security, user credentials (commented out), and region.  It allows for using either internal or external S3-compatible file servers (MinIO, SeaweedFS, etc.).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n        # public bucket with read permissions on objects for hosting vulnerability database\n        # S3 bucket permissions {\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"database\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"s3:GetObject\",\"Resource\":[\"arn:aws:s3:::<bucket-name>/database/*\",\"arn:aws:s3:::<bucket-name>/database\"]}]}\n        DEEPFENCE_FILE_SERVER_DB_BUCKET: database\n        # private bucket to host reports, sbom, etc.\n        DEEPFENCE_FILE_SERVER_BUCKET: default\n        # If using S3 or other external file server (MinIO/SeaweedFS), set this to true\n        DEEPFENCE_FILE_SERVER_EXTERNAL: \"true\"\n        # set s3.amazonaws.com if using s3 buckets\n        DEEPFENCE_FILE_SERVER_HOST: 123.123.123.123\n        DEEPFENCE_FILE_SERVER_PORT: 8080\n        # uncomment to set access key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_USER: fileserveruser\n        # uncomment to set secret key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_PASSWORD: changeme\n        # set true if https\n        DEEPFENCE_FILE_SERVER_SECURE: \"false\"\n        # set aws s3 bucket region if using s3 buckets\n        DEEPFENCE_FILE_SERVER_REGION: \"\"\n```\n\n----------------------------------------\n\nTITLE: Fargate Volume Configuration (JSON)\nDESCRIPTION: This JSON snippet configures the volume access for the application container running on AWS Fargate. It allows the application container to read and write to the `deepfence-agent` container's volume by specifying the `sourceContainer` and setting `readOnly` to `false`.  The `sourceContainer` name must match the name of the deepfence agent container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"volumesFrom\": [\n       {\n           \"sourceContainer\": \"deepfence-agent\",\n           \"readOnly\": false\n       }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository\nDESCRIPTION: Adds the Deepfence Helm chart repository to the Helm configuration. This allows Helm to find and install the Deepfence console chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n```\n\n----------------------------------------\n\nTITLE: Pushing Deepfence Docker Images to Internal Registry\nDESCRIPTION: This snippet pushes the tagged Docker images to the internal registry specified by the IMAGE_REPOSITORY environment variable. This step makes the images available within the air-gapped environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/air-gapped.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport IMAGE_REPOSITORY=127.0.0.1:5000\n\ndocker push ${IMAGE_REPOSITORY}/deepfence_worker_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_server_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_ui_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_file_server_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_agent_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_cluster_agent_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_router_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_redis_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_kafka_broker_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_postgres_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_neo4j_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_compliance_scanner_ce:THREATMAPPER_VERSION\ndocker push ${IMAGE_REPOSITORY}/deepfence_telemetry_ce:THREATMAPPER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Redeploy Agent with Helm\nDESCRIPTION: These commands redeploy the deepfence-agent using Helm. First, it deletes the existing agent. Then, it downloads the default values, updates the containerdSock value, and installs the agent with the modified values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/tips/sensor-agent-not-start.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n\nhelm show values deepfence/deepfence-agent --version 2.0.3 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.0.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j connection in docker-compose.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the Neo4j connection settings in the `docker-compose.yml` file for the Deepfence Management Console.  It defines environment variables for the Neo4j user, password, bolt port, and host. Replace <password> with the actual password for the Neo4j database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_NEO4J_USER: neo4j\n    DEEPFENCE_NEO4J_PASSWORD: <password>\n    NEO4J_AUTH: neo4j/<password>\n    DEEPFENCE_NEO4J_BOLT_PORT: 7687\n    DEEPFENCE_NEO4J_HOST: abcdefgh.databases.neo4j.io\n```\n\n----------------------------------------\n\nTITLE: Terraform Deployment Commands\nDESCRIPTION: These commands are used to initialize, plan, and apply the Terraform configuration for deploying the Deepfence Cloud Scanner. They must be executed in the directory containing the `cloud-scanner.tf` file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/azure.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository - Bash\nDESCRIPTION: Adds the Deepfence Helm repository to the local Helm configuration.  This allows for the installation of the ThreatMapper console using Helm charts. The `helm repo add` command is used to add the repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n```\n\n----------------------------------------\n\nTITLE: Install Metrics Server on Kubernetes\nDESCRIPTION: This command applies a YAML manifest to install the metrics server in the Kubernetes cluster. The metrics server is optional but recommended for monitoring resource utilization.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Azure Cloud Scanner\nDESCRIPTION: This Terraform configuration defines the necessary resources to deploy the Deepfence Cloud Scanner in Azure. It requires specifying the subscription ID, console URL, Deepfence key, and a unique name for the scanner instance. Ensure to replace placeholder values with your actual Azure details.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.2.0\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud-scanner:2.1.1\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Ingress Configuration\nDESCRIPTION: This YAML snippet configures an Ingress resource for the ThreatMapper console router, assuming an Nginx Ingress Controller. It specifies the Ingress class, hostname, and annotations for SSL redirection and proxy body size. Replace `threatmapper.example.com` with the appropriate domain.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    name: deepfence-console-router\n    type: Ingress # LoadBalancer/NodePort/Ingress/ClusterIP\n\n# ingress configuration for console\ningress:\n    ## name of the ingress class for ingress provider installed on the cluster, cannot be empty\n    ## Example: nginx\n    class: nginx\n    ## host example: threat.example.com\n    host: \"threatmapper.example.com\"\n    ## annotations to customize ingress\n    annotations:\n        ## nginx ingress annotations\n        nginx.ingress.kubernetes.io/backend-protocol: HTTPS\n        nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n        nginx.ingress.kubernetes.io/proxy-body-size: 200m\n```\n\n----------------------------------------\n\nTITLE: Get Storage Class in Kubernetes\nDESCRIPTION: This command retrieves the available storage classes in the Kubernetes cluster. This is a prerequisite for configuring persistent volumes for the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Multiple Project GCP Cloud Scanner\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner across multiple Google Cloud projects within an organization. It requires specifying the source module, version, name, organization domain, management console URL, Deepfence API key, image name, project ID, and region.  Optional parameters include VPC network details for private IP console connections.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_multiple-projects\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  version             = \"0.4.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # org_domain: root project name\n  org_domain          = \"\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.1.1\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"4\"\n  memory              = \"8192Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Azure Subscription Terraform Configuration\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner to monitor a single Azure subscription. It requires specifying the subscription ID, management console URL, Deepfence API key, location, and other parameters such as CPU and memory. Replace the placeholder values with your actual configuration details.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.4.0\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud-scanner:2.2.2\"\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location            = \"eastus\"\n  # Number of CPU cores (Default: 2 vCPU)\n  cpu                 = \"2\"\n  # Memory in GB (Default: 4 GB)\n  memory              = \"4\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Scanner Docker Compose Environment Variables (Organization Account)\nDESCRIPTION: Configures the environment variables within the docker-compose.yaml file for an organization account deployment of the Cloud Scanner.  This includes setting the `ORGANIZATION_DEPLOYMENT` to `true` and specifying the root account ID and role name for cross-account access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.4.0\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"aws\"\n  CLOUD_REGION: \"<REGION>\"\n  CLOUD_ACCOUNT_ID: \"<ROOT_ACCOUNT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: true\n  CLOUD_ORGANIZATION_ID: \"<ROOT_ACCOUNT_ID>\"\n  ROLE_NAME: \"<ROLE_NAME>\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"arn:aws:iam::aws:policy/SecurityAudit\"\n```\n\n----------------------------------------\n\nTITLE: Fine-tune the Helm deployment\nDESCRIPTION: This snippet retrieves default values from the deepfence-agent Helm chart, saves them to a YAML file, and then installs the chart using the modified values. It allows for customizing the deployment by modifying the deepfence_agent_values.yaml file, including management console URL, API key, and image names.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.4.0 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Scanner Values\nDESCRIPTION: Example of cloud-scanner.yaml file, providing necessary configurations such as image repository, management console URL, Deepfence API key, cloud account details, and service account settings for deploying Deepfence Cloud Scanner on EKS. It includes settings for both single account and organization deployments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nimage:\n  # ThreatMapper\n  repository: quay.io/deepfenceio/cloud_scanner_ce\n\n# Format: deepfence.customer.com or 123.123.123.123\nmanagementConsoleUrl: \"\"\n   \n# Auth: Get Deepfence api key from UI -> Settings -> User Management\ndeepfenceKey:\n  key: \"\"\n\ncloudAccount:\n  # Organization root account ID\n  accountID: \"\"\n  # Account name (Optional, for easy identification. Not required in organization deployment.)\n  accountName: \"\"\n\n  cloudProvider: \"aws\"\n  # AWS region\n  region: \"us-east-1\"\n\n  # Policy set for Cloud Scanner in CloudFormation / terraform\n  # arn:aws:iam::aws:policy/ReadOnlyAccess / arn:aws:iam::aws:policy/SecurityAudit\n  cloudScannerPolicy: \"arn:aws:iam::aws:policy/SecurityAudit\"\n\n  # Optional: AWS account ID where the helm chart is deployed, in case it is different from cloudAccount.accountID\n  deployedAccountID: \"\"\n      \n  # For Organization deployment:\n\n  # Is this organization deployment or single account deployment?\n  isOrganizationDeployment: true\n    \n  # Organization root account ID\n  # Should be same as cloudAccount.accountID\n  organizationAccountID: \"\"\n\n  # Role name. The name should be same across all accounts in the Organization deployment.\n  # Role ARN example: arn:aws:iam::123456789012:role/deepfence-cloud-scanner-role\n  # Role name in this case is deepfence-cloud-scanner-role\n  roleName: \"\"\n\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Automatically mount a ServiceAccount's API credentials?\n  automount: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-cloud-scanner\"\n  # The name of the service account to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"deepfence-cloud-scanner\"\n```\n\n----------------------------------------\n\nTITLE: Running Neo4j Backup Script\nDESCRIPTION: This script exports the Neo4j database. It needs to be run from inside the `deepfence-neo4j` container. It creates a backup file inside the container with a filename format like `neo4j_backup_<YYYY-MM-DD_HOUR-MIN-SEC>`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/backup_neo4j.sh\n```\n\n----------------------------------------\n\nTITLE: IAM Inline Policy for Secrets Manager Access (JSON)\nDESCRIPTION: Defines an inline policy for the IAM role granting permissions to access the Deepfence API key stored in AWS Secrets Manager.  Requires the ARN of the Secrets Manager secret. The Deepfence agent requires this permission to retrieve the API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:GetSecretValue\"\n      ],\n      \"Resource\": [\n        \"<API_KEY_SECRET_ARN>\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Single Subscription Cloud Scanner\nDESCRIPTION: This Terraform configuration sets up the Deepfence Cloud Scanner for a single Azure subscription. It defines the Azure provider, retrieves the current subscription ID, and uses the cloud-scanner module to deploy the necessary infrastructure. The configuration outputs the tenant ID, client ID, and client secret for the deployed application. Replace <SUBSCRIPTION_ID> with your actual Azure subscription ID.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\nmodule \"infrastructure_cloud-scanner-app\" {\n  source                  = \"deepfence/cloud-scanner/azure//modules/infrastructure/cloud-scanner-app\"\n  version                 = \"0.7.0\"\n  name                    = \"deepfence-cloud-scanner\"\n  subscription_ids_access = [data.azurerm_subscription.current.subscription_id]\n}\n\noutput \"tenant_id\" {\n  value = module.infrastructure_cloud-scanner-app.tenant_id\n}\n\noutput \"client_id\" {\n  value = module.infrastructure_cloud-scanner-app.client_id\n}\n\noutput \"client_secret\" {\n  value     = module.infrastructure_cloud-scanner-app.client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Provider - YAML\nDESCRIPTION: This YAML snippet configures the cloud provider for the Deepfence Router. Options include AWS, Azure, GCP, IBM Cloud, and OpenStack.  This setting is required for proper LoadBalancer annotations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Cloud Provider: aws, azure, gcp, ibm_cloud, open_stack\n# cloudProvider is required to set appropriate LoadBalancer annotations\ncloudProvider: \"aws\"\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml file using wget\nDESCRIPTION: This command downloads the docker-compose.yml file from the ThreatMapper repository on GitHub. This file defines the services, networks, and volumes required to run the ThreatMapper Management Console in Docker.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.2/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Uninstall Deepfence Agent Helm Chart\nDESCRIPTION: Uninstalls the Deepfence Agent Helm chart from the specified namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL\nDESCRIPTION: This snippet demonstrates how to initialize an authenticated ThreatMapper API client with SSL verification enabled. It requires the base URL, a valid refresh token, and the path to a certificate bundle. This client can then be used for API requests.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Proxy Settings\nDESCRIPTION: This JSON configuration file sets proxy settings for Docker. It specifies the HTTP, HTTPS, and noProxy settings. Replace '111.111.111.111' with the actual IP address of the proxy server.  Docker daemon restart is required.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/docker.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"\"\n            }\n    },\n    \"HttpHeaders\": {\n        \"User-Agent\": \"Docker-Client/19.03.1 (linux)\"\n    },\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://111.111.111.111:8006\",\n            \"httpsProxy\": \"http://111.111.111.111:8006\",\n            \"noProxy\": \"localhost,127.0.0.1\"\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Container Runtime Socket Path - Kubernetes\nDESCRIPTION: These commands help determine the container runtime socket path within the Kubernetes cluster. A job is deployed to configure and log the cluster information which is then parsed for `--container-runtime-endpoint` or `containerd`. Finally, the job is deleted.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console with Custom Values\nDESCRIPTION: This command installs the ThreatMapper console using a custom values file, allowing you to override the default settings with your specific configurations. Version is specified for reproducibility.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.4.1\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Multiple Project Cloud Scanner on GCP\nDESCRIPTION: This Terraform configuration sets up a multiple project Cloud Scanner on a GCP compute instance using a service account. It defines the required module, specifies the source, version, service account name, project ID, and enables organization deployment. It outputs the service account email.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\nmodule \"cloud_scanner_example_multiple_project\" {\n  source                   = \"deepfence/cloud-scanner/gcp//examples/gce-vm\"\n  version                  = \"0.8.0\"\n  # gcp service account name\n  name                     = \"deepfence-cloud-scanner\"\n  # project_id example: dev1-123456\n  project_id               = \"<PROJECT_ID>\"\n  # org mode for multiple projects\n  isOrganizationDeployment = true\n}\n\noutput \"service_account_email\" {\n  value = module.cloud_scanner_example_multiple_project.service_account_email\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Deepfence Management Console (Bash)\nDESCRIPTION: Navigates to the deployment-scripts directory and stops the Deepfence Management Console using Docker Compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Kubernetes (Bash)\nDESCRIPTION: This script deploys the ThreatMapper sensor agent on a Kubernetes cluster using Helm. It adds the Deepfence Helm repository, updates the repository, shows the default values, allows user to update the values for image name/clusterAgentImageName, managementConsoleUrl and deepfenceKey, and then installs the deepfence-agent chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.2.2 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Deploy Cloud Scanner Multiple Projects on GCP Cloud Run with Terraform\nDESCRIPTION: This Terraform configuration deploys the Cloud Scanner across multiple projects (Organization Deployment) on Google Cloud Run.  It requires the organization domain, management console URL, Deepfence API key, project ID, and region.  It also supports optional VPC configuration for private IP console access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_multiple-projects\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  version             = \"0.6.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # org_domain: root project name\n  org_domain          = \"\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce:2.3.1\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"4\"\n  memory              = \"8192Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Show and Customize ThreatMapper Console Helm Values\nDESCRIPTION: This command shows the default values for the ThreatMapper console Helm chart, saves them to a YAML file, allowing for customization before installation. Then it installs console using specified values file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.0.2 > deepfence_console_values.yaml\n\n# Make the changes in this file and save\nvim deepfence_console_values.yaml\n\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.0.2\n```\n\n----------------------------------------\n\nTITLE: Deleting ThreatMapper Sensor\nDESCRIPTION: This command deletes the ThreatMapper agent deployment from the specified namespace in the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Start ThreatMapper Console with docker compose in bash\nDESCRIPTION: Starts the ThreatMapper Management Console using Docker Compose. This command deploys the services defined in the docker-compose.yml file in detached mode.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Uninstall Deepfence Agent Commands\nDESCRIPTION: These commands stop and disable the Deepfence agent, remove the systemd service file, and remove the /opt/deepfence directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/linux-host.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop deepfence-agent.service\nsudo systemctl disable deepfence-agent.service\nsudo rm -f /etc/systemd/system/deepfence-agent.service\nsudo rm -rf /opt/deepfence\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Proxy Settings\nDESCRIPTION: This JSON configuration file configures Docker to use a proxy server for accessing external resources.  It defines the HTTP and HTTPS proxy addresses, as well as a list of hosts to bypass the proxy for.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/docker.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"\"\n            }\n    },\n    \"HttpHeaders\": {\n        \"User-Agent\": \"Docker-Client/19.03.1 (linux)\"\n    },\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://111.111.111.111:8006\",\n            \"httpsProxy\": \"http://111.111.111.111:8006\",\n            \"noProxy\": \"localhost,127.0.0.1\"\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Save ThreatMapper Console Helm Values\nDESCRIPTION: This command saves the default values from the ThreatMapper console Helm chart to a file, allowing you to customize the deployment. Version is specified for reproducibility.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.4.1 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Check Pod Status in Kubernetes\nDESCRIPTION: This command retrieves the status of the pods in the specified namespace and watches for changes, providing real-time updates on pod states. This is used to verify the successful deployment of the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace deepfence-console -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration Single Subscription Azure\nDESCRIPTION: This Terraform configuration sets up the Cloud Scanner for a single Azure subscription. It defines the Azure provider, retrieves the current subscription ID, and uses a module to create the necessary infrastructure. The module outputs the tenant ID, client ID, and client secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\nmodule \"infrastructure_cloud-scanner-app\" {\n  source                  = \"deepfence/cloud-scanner/azure//modules/infrastructure/cloud-scanner-app\"\n  version                 = \"0.9.1\"\n  name                    = \"deepfence-cloud-scanner\"\n  subscription_ids_access = [data.azurerm_subscription.current.subscription_id]\n}\n\noutput \"tenant_id\" {\n  value = module.infrastructure_cloud-scanner-app.tenant_id\n}\n\noutput \"client_id\" {\n  value = module.infrastructure_cloud-scanner-app.client_id\n}\n\noutput \"client_secret\" {\n  value     = module.infrastructure_cloud-scanner-app.client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Image Pull Secret Configuration\nDESCRIPTION: Configuration settings within the values.yaml file to manage image pull secrets.  It allows specifying whether to create a secret, defining registry details (registry URL, username, password), and providing a name for the secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecret:\n  # Specifies whether a image pull secret should be created\n  create: true\n  registry: \"quay.io\"\n  # registry: \"https://index.docker.io/v1/\"\n  username: \"\"\n  password: \"\"\n  # The name of the imagePullSecret to use.\n  # If not set and create is true, a name is generated using the fullname template\n  name: \"\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment Commands\nDESCRIPTION: These shell commands are used to initialize, plan, and apply the Terraform configuration for deploying the Deepfence Cloud Scanner. `terraform init` initializes the Terraform working directory. `terraform plan` creates an execution plan. `terraform apply` applies the changes to deploy the cloud scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Apply commands\nDESCRIPTION: These shell commands initialize the Terraform working directory, create an execution plan, and apply the changes to provision the resources. It is required for Terraform deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Download Cloud Scanner Helm chart values\nDESCRIPTION: This command downloads the default values for the Deepfence Cloud Scanner Helm chart. These values can then be customized to configure the Cloud Scanner deployment, such as setting the management console URL, API key, and AWS account details.  The version should match the helm chart version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm show values cloud-scanner/deepfence-cloud-scanner --version 2.3.2 > cloud-scanner.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account for EKS ECR Access - YAML\nDESCRIPTION: This snippet shows how to configure the service account in the values.yaml file for a Helm deployment of the Deepfence Console in EKS. It includes annotations to associate an IAM role with the service account, enabling it to access ECR.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/registries/aws-ecr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-ecr-role\"\n  # Service account name\n  name: \"deepfence-console\"\n```\n\n----------------------------------------\n\nTITLE: Start ThreatMapper Console with Docker Compose\nDESCRIPTION: Starts the ThreatMapper Management Console using Docker Compose in detached mode. This command reads the docker-compose.yml file and creates and starts the necessary containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Helm Agent Redeployment - Bash\nDESCRIPTION: This script provides a series of Helm commands to delete and reinstall the deepfence-agent. It begins by deleting the existing deployment, then it retrieves the default values for the specified agent version, updates the values file to disable the containerd socket, and finally reinstalls the agent with the modified configuration. It requires Helm to be installed and configured and kubectl to connect to the cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n\nhelm show values deepfence/deepfence-agent --version 2.3.1 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to IAM Role for Secrets Manager\nDESCRIPTION: Adds an inline policy to the IAM role, granting it the necessary permissions to retrieve the Deepfence API key from AWS Secrets Manager.  This requires the ARN of the Secrets Manager secret created earlier.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": [\n                \"<API_KEY_SECRET_ARN>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Application URL using LoadBalancer\nDESCRIPTION: This snippet retrieves the application URL when using LoadBalancer. It uses kubectl to get the LoadBalancer IP and constructs the URL. Note: It may take time for the LoadBalancer IP to be available.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-console/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"deepfence-console.fullname\" . }} --template \"{{\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\"}}\")\necho http://$SERVICE_IP:{{ .Values.router.service.httpsPort }}\n```\n\n----------------------------------------\n\nTITLE: Using Encoder and Decoder\nDESCRIPTION: This code demonstrates how to create and use encoders and decoders with the ugorji/go/codec library. It shows how to initialize them with an io.Reader/io.Writer or a byte slice, and then how to encode and decode values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// create and use decoder/encoder\nvar (\n  r io.Reader\n  w io.Writer\n  b []byte\n  h = &bh // or mh to use msgpack\n)\n\ndec = codec.NewDecoder(r, h)\ndec = codec.NewDecoderBytes(b, h)\nerr = dec.Decode(&v)\n\nenc = codec.NewEncoder(w, h)\nenc = codec.NewEncoderBytes(&b, h)\nerr = enc.Encode(v)\n```\n\n----------------------------------------\n\nTITLE: Task Definition JSON Configuration - Deepfence Agent on AWS ECS\nDESCRIPTION: This JSON defines a task definition for deploying the Deepfence agent on AWS ECS (EC2 provider). It specifies the container image, environment variables for Deepfence API key and management console URL, volume mounts, resource limits, and networking configuration. Replace `<DEEPFENCE_KEY>` and `<MGMT_CONSOLE_URL>` with actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"CUSTOM_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:THREATMAPPER_VERSION\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Neo4j Database Example\nDESCRIPTION: This command illustrates how to run the restore script within the Neo4j Docker container. The script restores the database using the specified backup file, such as 'neo4j_backup_2023-11-17_10-25-28'.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/database-export-import.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /neo4j_backup_2023-11-17_10-25-28\n```\n\n----------------------------------------\n\nTITLE: Restarting Management Console (Docker)\nDESCRIPTION: This snippet shows the commands to restart the Deepfence Management Console using Docker Compose after updating the TLS certificates. This ensures that the new certificates are loaded and used by the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/initial-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console with Custom Values\nDESCRIPTION: This command installs the Deepfence console Helm chart using a custom values file. It overrides the default configuration with the values specified in the YAML file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Starting Vulnerability Scan ASYNC\nDESCRIPTION: This code snippet shows how to asynchronously trigger a vulnerability scan on hosts using the ThreatMapper API. It initializes an AuthenticatedClient (SSL enabled or disabled), defines a `node_config` function to retrieve the list of active hosts, and constructs a payload to specify the scan configurations for different languages. It captures any `UnexpectedStatus` exceptions and prints scan and bulk scan IDs.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.vulnerability import start_vulnerability_scan\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import ModelVulnerabilityScanTriggerReq, SearchSearchNodeReq, ModelScanTriggerResp\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\nfrom typing import List\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef node_config() -> List:\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       host_list = []\n       for host in hosts:\n          host_list.append({\"node_id\":host.node_id, \"node_type\": \"host\"})\n       return host_list\n    except UnexpectedStatus as e:\n        print(\"Exception when calling node_config-> %s\\n\" % e)\n\nasync def start_vulnerability_scan_on_hosts():\n    try:\n       node_ids = node_config()\n       payload_dict = {\n                       \"filters\": {\n                         \"cloud_account_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"container_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"host_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"image_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"kubernetes_cluster_scan_filter\": {\n                           \"filter_in\": None\n                         }\n                       },\n                       \"node_ids\": node_ids,\n                       \"scan_config\": [\n                         {\n                           \"language\": \"base\"\n                         },\n                         {\n                           \"language\": \"java\"\n                         },\n                         {\n                           \"language\": \"javascript\"\n                         },\n                         {\n                           \"language\": \"rust\"\n                         },\n                         {\n                           \"language\": \"golang\"\n                         },\n                         {\n                           \"language\": \"ruby\"\n                         },\n                         {\n                           \"language\": \"python\"\n                         },\n                         {\n                           \"language\": \"php\"\n                         },\n                         {\n                           \"language\": \"dotnet\"\n                         }\n                       ]\n                     }\n       json_body = ModelVulnerabilityScanTriggerReq.from_dict(payload_dict)\n       response: ModelScanTriggerResp = await start_vulnerability_scan.asyncio(client=client,json_body=json_body)\n       print(response.scan_ids, response.bulk_scan_id)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling start_vulnerability_scan_on_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Copy Backup File to Neo4j Container\nDESCRIPTION: Copies a Neo4j backup file from the host machine to the root directory of the running Neo4j Docker container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/database-export-import.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp <BACKUP_FILE> deepfence-neo4j:/\n```\n\n----------------------------------------\n\nTITLE: Installing Deepfence Console Helm Chart\nDESCRIPTION: This command installs the deepfence-console Helm chart into the 'threatmapper' namespace. This chart deploys the ThreatMapper console UI.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhelm install console ./deepfence-console --namespace threatmapper\n```\n\n----------------------------------------\n\nTITLE: Migrate Elasticsearch Data (Shell)\nDESCRIPTION: This command migrates the Elasticsearch data to a new format required by a major version upgrade of Deepfence Management Console. It uses a Docker container to run a Python script for migration. The es_data.json.gz file is overwritten. Prerequisites: Elasticsearch backup files.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --net=host --rm=true --name=es-migrate \\\n  -v ${PWD}:/data:rw \\\n  --entrypoint=python3 \\\n  deepfenceio/deepfence_backup:latest \\\n  /usr/local/migrate_es.py\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL secret name in values.yaml (YAML)\nDESCRIPTION: This snippet shows how to configure the Helm chart values.yaml file to use an existing PostgreSQL secret and prevent the creation of a new PostgreSQL StatefulSet. It sets the `create` flag to false and specifies the name of the existing secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npostgres:\n  # Specifies whether a postgres database instance should be created\n  create: false\n  # if create false provide name of the existing secret\n  # secret format refer templates/deepfence-console-secrets/postgres.yaml\n  secretName: \"deepfence-console-secrets-postgres\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration Multi Subscription Azure\nDESCRIPTION: This Terraform configuration sets up the Cloud Scanner for multiple Azure subscriptions. It defines the Azure provider, retrieves the current subscription ID, and uses a module to create the necessary infrastructure. The module outputs the tenant ID, client ID, and client secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\nmodule \"infrastructure_cloud-scanner-app\" {\n  source                  = \"deepfence/cloud-scanner/azure//modules/infrastructure/cloud-scanner-app\"\n  version                 = \"0.9.1\"\n  name                    = \"deepfence-cloud-scanner\"\n  subscription_ids_access = [list of tenant subscriptions ids]\n}\n\noutput \"tenant_id\" {\n  value = module.infrastructure_cloud-scanner-app.tenant_id\n}\n\noutput \"client_id\" {\n  value = module.infrastructure_cloud-scanner-app.client_id\n}\n\noutput \"client_secret\" {\n  value     = module.infrastructure_cloud-scanner-app.client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Access & Refresh Token (Async)\nDESCRIPTION: This code demonstrates how to retrieve access and refresh tokens asynchronously. It utilizes the auth_token.asyncio and auth_token.asyncio_detailed methods to perform the token retrieval operation in a non-blocking manner, handling potential exceptions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n\n# SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n# OR\n# SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def get_access_refresh_token_async():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = await auth_token.asyncio(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = await auth_token.asyncio_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response = json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTPX Client with Event Hooks\nDESCRIPTION: This example demonstrates customizing the underlying httpx client using event hooks for logging requests and responses.  It defines `log_request` and `log_response` functions and passes them via the `httpx_args` parameter to the `Client` constructor.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n    httpx_args={\"event_hooks\": {\"request\": [log_request], \"response\": [log_response]}},\n)\n```\n\n----------------------------------------\n\nTITLE: Define Deepfence Agent Task Definition (JSON)\nDESCRIPTION: This JSON defines the task definition for the Deepfence agent in AWS ECS.  It configures the container, including environment variables for the Deepfence API key and management console URL, volume mounts, and resource constraints.  Replace `<DEEPFENCE_KEY>` and `<MGMT_CONSOLE_URL>` with actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"docker.io/deepfenceio/deepfence_agent_ce:2.0.1\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Docker\nDESCRIPTION: Deploys a ThreatMapper sensor agent on a Docker host. It first logs into the specified Docker Hub account, and then runs a Docker container with specific configurations such as CPU allocation, restart policy, network settings, volume mounts, environment variables, and the custom agent image.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    $ACC/deepfence_agent_ce:2.1.1\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Kubernetes\nDESCRIPTION: Deploys the ThreatMapper sensor agent in a Kubernetes cluster using Helm. It adds the Deepfence Helm repository, updates the repository, shows the default values, allows customization of the values, and then installs the chart. It requires Helm to be installed and configured to connect to the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.4.0 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL in docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows how to set the PostgreSQL connection parameters in the `docker-compose.yml` file. It configures the PostgreSQL username, password, host, database name, and port to connect to a managed PostgreSQL service like AWS RDS. SSL mode is also configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_POSTGRES_USER_DB_USER: postgres\n    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: <password>\n    DEEPFENCE_POSTGRES_USER_DB_HOST: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    DEEPFENCE_POSTGRES_USER_DB_NAME: deepfence\n    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432\n    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable\n```\n\n----------------------------------------\n\nTITLE: Import PostgreSQL Database\nDESCRIPTION: This snippet imports a PostgreSQL database using a Docker container. It runs a container with a script to restore the database from a backup located in a mounted volume. Environment variables define database connection parameters. Ensure that the backup image version is compatible with your Deepfence setup and that the directory contains the exported data.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --net=host --rm=true --name=postgresql-restore \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/pg-import.sh \\\n  -e POSTGRES_DB_HOST=\"127.0.0.1\" \\\n  -e POSTGRES_DB_PORT=\"5432\" \\\n  -e POSTGRES_DB_NAME=users \\\n  -e POSTGRES_DB_USERNAME=\"\" \\\n  -e POSTGRES_DB_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:2.1.1\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Volumes From (JSON)\nDESCRIPTION: This JSON snippet configures the `volumesFrom` setting for the Fargate application container, allowing it to access the volumes from the Deepfence agent container. It grants read/write access to the application container.  Ensure to replace `deepfence-agent` with the actual name of the agent container if it's different.  Place this in the container definition JSON.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"volumesFrom\": [\n       {\n           \"sourceContainer\": \"deepfence-agent\",\n           \"readOnly\": false\n       }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Router Ingress Configuration (YAML)\nDESCRIPTION: This YAML snippet configures the ThreatMapper router to use an Ingress service, enabling external access to the console through an ingress controller like nginx. It sets the service type to Ingress, defines the ingress class, host, and annotations for SSL redirection and proxy settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    name: deepfence-console-router\n    type: Ingress # LoadBalancer/NodePort/Ingress/ClusterIP\n\n# ingress configuration for console\ningress:\n    ## name of the ingress class for ingress provider installed on the cluster, cannot be empty\n    ## Example: nginx\n    class: nginx\n    ## host example: threat.example.com\n    host: \"threatmapper.example.com\"\n    ## annotations to customize ingress\n    annotations:\n        ## nginx ingress annotations\n        nginx.ingress.kubernetes.io/backend-protocol: HTTPS\n        nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n        nginx.ingress.kubernetes.io/proxy-body-size: 200m\n```\n\n----------------------------------------\n\nTITLE: Deploy ThreatMapper Sensor Agent with Docker\nDESCRIPTION: Deploys the ThreatMapper sensor agent on a Linux host using Docker. This command configures the container with resource limits, restart policy, host network access, logging, privileged mode, volume mounts for necessary system directories, and environment variables for API key, management console URL, port, and user-defined tags. Requires Docker runtime to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    deepfenceio/deepfence_agent_ce:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Terraform: Multiple Project Cloud Scanner on GCP\nDESCRIPTION: This Terraform configuration deploys a multiple-project Cloud Scanner on a GCP Compute Instance using a service account. It configures the module source, version, name, project ID, and enables the organization deployment.  The output provides the service account email.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\nmodule \"cloud_scanner_example_multiple_project\" {\n  source                   = \"deepfence/cloud-scanner/gcp//examples/gce-vm\"\n  version                  = \"0.9.1\"\n  # gcp service account name\n  name                     = \"deepfence-cloud-scanner\"\n  # project_id example: dev1-123456\n  project_id               = \"<PROJECT_ID>\"\n  # org mode for multiple projects\n  isOrganizationDeployment = true\n}\n\noutput \"service_account_email\" {\n  value = module.cloud_scanner_example_multiple_project.service_account_email\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Cloud Scanner Deployment\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner in AWS. It defines the provider, module, and necessary parameters like region, management console URL, Deepfence API key, and image version.  It requires Terraform to be installed and configured with AWS credentials.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"aws\" {\n  region = \"<AWS-REGION>; eg. us-east-1\"\n}\n\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.3.0\"\n  mgmt-console-url              = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                          = \"deepfence-cloud-scanner\"\n  image                         = \"quay.io/deepfenceio/cloud-scanner:2.0.1\"\n  region                        = \"<AWS-REGION>; eg. us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Fargate Task Definition with Deepfence Agent Sidecar\nDESCRIPTION: A sample JSON definition for an AWS Fargate task that includes both a main application container (python in this case) and the Deepfence agent as a sidecar container. This configuration defines the required resources, networking, and environment variables for both containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"inferenceAccelerators\": [],\n  \"containerDefinitions\": [\n    {\n      \"name\": \"python\",\n      \"image\": \"python:latest\",\n      \"cpu\": 0,\n      \"portMappings\": [\n        {\n          \"name\": \"python-8000-tcp\",\n          \"containerPort\": 8000,\n          \"hostPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"essential\": true,\n      \"entryPoint\": [\n        \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n      ],\n      \"command\": [\"python3\", \"-m\", \"http.server\"],\n      \"environment\": [\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"DF_SERVERLESS\",\n          \"value\": \"true\"\n        },\n        {\n          \"name\": \"DF_LOG_LEVEL\",\n          \"value\": \"info\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        },\n        {\n          \"name\": \"DF_INSTALL_DIR\",\n          \"value\": \"/usr/local/bin\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n          \"value\": \"https\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_PORT\",\n          \"value\": \"443\"\n        }\n      ],\n      \"mountPoints\": [],\n      \"volumesFrom\": [\n        {\n          \"sourceContainer\": \"deepfence-agent\",\n          \"readOnly\": false\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"valueFrom\": \"<API_KEY_SECRET_ARN>:deepfence_api_key::\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    },\n    {\n      \"name\": \"deepfence-agent\",\n      \"image\": \"quay.io/deepfenceio/deepfence_agent_ce:2.3.1-fargate\",\n      \"repositoryCredentials\": {},\n      \"cpu\": 0,\n      \"portMappings\": [],\n      \"essential\": false,\n      \"environment\": [],\n      \"mountPoints\": [],\n      \"volumesFrom\": [],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-create-group\": \"true\",\n          \"awslogs-group\": \"/ecs/test-doc-python\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      }\n    }\n  ],\n  \"volumes\": [],\n  \"networkMode\": \"awsvpc\",\n  \"memory\": \"4096\",\n  \"cpu\": \"2048\",\n  \"family\": \"test-doc-python\",\n  \"executionRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"taskRoleArn\": \"<AGENT_TASK_ROLE_ARN>\",\n  \"runtimePlatform\": {\n    \"cpuArchitecture\": \"X86_64\",\n    \"operatingSystemFamily\": \"LINUX\"\n  },\n  \"tags\": [],\n  \"placementConstraints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Deepfence Agent with Podman\nDESCRIPTION: This command deploys the Deepfence ThreatMapper agent as a Podman container, requiring the Podman system service to be running. Similar to the Docker deployment, it configures resource limits, restart policies, networking, volume mounts for host access, and environment variables for settings like the management console URL and API key.  The MGMT_CONSOLE_URL and DEEPFENCE_KEY parameters must be replaced with the actual console IP and API key respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /run/podman/podman.sock:/run/podman/podman.sock \\\n    -v /run/systemd/:/run/systemd/ \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    docker.io/deepfenceio/deepfence_agent_ce:2.1.1\n```\n\n----------------------------------------\n\nTITLE: Initialize, Plan, and Apply Terraform Configuration\nDESCRIPTION: These shell commands initialize, plan, and apply the Terraform configuration defined in the `cloud-scanner.tf` file. This deployment process sets up the Cloud Scanner infrastructure as per the configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Redeploy Agent with Helm\nDESCRIPTION: These commands remove the existing deepfence-agent deployment, generate a new values file, and install the agent using the updated values.  This ensures that the configuration changes take effect. TM_AGENT_HELM_CHART_VERSION is a placeholder for the agent's Helm chart version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/tips/sensor-agent-not-start.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n\nhelm show values deepfence/deepfence-agent --version TM_AGENT_HELM_CHART_VERSION > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version TM_AGENT_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Storing Deepfence API Key as Secret in AWS Secrets Manager\nDESCRIPTION: Stores the Deepfence API key as a secret within AWS Secrets Manager.  This allows the key to be securely accessed by the Fargate task.  The ARN of the created secret is required for subsequent steps.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"deepfence_api_key\": \"<DEEPFENCE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Neo4j DB Import Script Execution\nDESCRIPTION: This command executes the `load_backup_neo4j.sh` script inside the `deepfence-neo4j` Docker container, providing the path to the backup file as an argument.  This script restores the Neo4j graph database from the specified backup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /<BACKUP_FILE>\n```\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /neo4j_backup_2023-11-17_10-25-28\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPX Client Directly\nDESCRIPTION: This snippet shows how to set the underlying httpx client directly, which overrides any existing settings. The base URL and other configurations may need to be re-set on the new httpx client instance.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom threatmapper import Client\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n)\n# Note that base_url needs to be re-set, as would any shared cookies, headers, etc.\nclient.set_httpx_client(httpx.Client(base_url=\"YOUR_CONSOLE_URL\", proxies=\"YOUR_PROXY_URL\"))\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console via Helm\nDESCRIPTION: Installs the ThreatMapper Console using Helm. It adds the Deepfence Helm repository, updates the repository, and installs the `deepfence-console` chart in the `deepfence-console` namespace, creating the namespace if it doesn't exist. Specific versions for the image tag, storage class, and chart are set during the installation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\n# helm show values deepfence/deepfence-console --version 2.1.3 | less\n\nhelm install deepfence-console deepfence/deepfence-console \\\n    --set global.imageTag=2.1.1 \\\n    --set global.storageClass=gp3 \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.1.3\n```\n\n----------------------------------------\n\nTITLE: Accessing Swagger UI and OpenAPI JSON\nDESCRIPTION: Provides the URLs to access the interactive Swagger UI documentation and the OpenAPI JSON specification for the ThreatMapper REST API. Replace <CONSOLE_URL> with the actual URL of the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/api-reference.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificate - Bash\nDESCRIPTION: This snippet generates a self-signed SSL certificate and key using OpenSSL, and restarts the management console to use the new TLS certificate. It requires OpenSSL to be installed on the system. The certificate and key are stored in `/etc/deepfence/certs`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Provide the SSL key and cert, for example, using OpenSSL to create a self-signed pair\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n\n# restart the management console to use the new TLS certificate\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Creating File Server Secret in Kubernetes (Shell)\nDESCRIPTION: This snippet creates a file server secret in Kubernetes using `kubectl`. The secret is saved as `deepfence_fileserver_secret.yaml` and applied to the `deepfence-console` namespace. The secret format is defined in either `s3.yaml` or `fileserver.yaml` templates within the helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_fileserver_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Docker\nDESCRIPTION: Deploys a ThreatMapper sensor agent on a Docker host. This command logs into a Docker Hub account, then runs a Docker container with specific configurations for CPU usage, restart policy, networking, logging, volume mounts, and environment variables including the management console URL, port, and Deepfence API key. Requires Docker to be installed and configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP--- \" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    $ACC/deepfence_agent_ce:2.3.1\n```\n\n----------------------------------------\n\nTITLE: Deepfence Router Ingress Configuration\nDESCRIPTION: This YAML snippet configures the Deepfence router service to use an Ingress controller. It sets the service type to Ingress and defines the Ingress class, host, and annotations for the Nginx Ingress controller.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n    name: deepfence-console-router\n    type: Ingress # LoadBalancer/NodePort/Ingress/ClusterIP\n\n# ingress configuration for console\ningress:\n    ## name of the ingress class for ingress provider installed on the cluster, cannot be empty\n    ## Example: nginx\n    class: nginx\n    ## host example: threat.example.com\n    host: \"threatmapper.example.com\"\n    ## annotations to customize ingress\n    annotations:\n        ## nginx ingress annotations\n        nginx.ingress.kubernetes.io/backend-protocol: HTTPS\n        nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n        nginx.ingress.kubernetes.io/proxy-body-size: 200m\n```\n\n----------------------------------------\n\nTITLE: Accessing Neo4j Container Shell\nDESCRIPTION: This command executes a bash shell within the running `deepfence-neo4j` Docker container, allowing the user to interact with the container's file system and execute commands. This is a prerequisite for exporting and importing the Neo4j graph database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-neo4j /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition VolumesFrom Configuration (JSON)\nDESCRIPTION: This JSON snippet configures the `volumesFrom` setting for the application container in the Fargate task definition. It allows the application container to access the volumes from the `deepfence-agent` container, enabling the agent to monitor and analyze the application's behavior. The `readOnly` property is set to `false` to allow read/write access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"volumesFrom\": [\n       {\n           \"sourceContainer\": \"deepfence-agent\",\n           \"readOnly\": false\n       }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Create Directory and Download Docker Compose\nDESCRIPTION: Bash commands to create a directory for the cloud scanner and download the docker-compose.yaml file from the specified URL using wget. This sets up the environment for deploying the scanner using Docker Compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.4/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Deployment Name (Shell)\nDESCRIPTION: This snippet is a kubectl command to retrieve the deployment name within the deepfence-console namespace. It's used to dynamically find the correct deployment name if the helm chart name was customized.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deploy --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Accessing Swagger UI and OpenAPI JSON\nDESCRIPTION: This snippet provides the URLs to access the interactive Swagger UI and the OpenAPI JSON file for the ThreatMapper REST API. Replace <CONSOLE_URL> with the actual URL of your ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/api-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Describe Daemonset Status via Kubectl\nDESCRIPTION: This command provides detailed information about the deepfence-agent daemonset within the specified namespace. It helps diagnose any issues preventing the daemonset from starting correctly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe daemonset -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Apply Commands\nDESCRIPTION: These commands initialize the Terraform working directory, plan the changes to be applied, and then apply the configuration to provision the Deepfence Cloud Scanner resources in Google Cloud Platform. It assumes a 'cloud-scanner.tf' file is present in the directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Console Port - YAML\nDESCRIPTION: This YAML snippet configures the port for accessing the management console and for agent communication. The default port is 443. Changing this requires adjusting firewall rules and agent configurations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Configure port for browser / agents\nmanagementConsolePort: \"443\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Postgres Container Shell\nDESCRIPTION: This command executes a bash shell within the running `deepfence-postgres` Docker container, allowing the user to interact with the container's file system and execute commands. This is a prerequisite for exporting and importing the Postgres database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Accessing Swagger UI and OpenAPI JSON\nDESCRIPTION: This snippet provides URLs to access the Swagger UI and OpenAPI JSON for the ThreatMapper REST API.  Replace `<CONSOLE_URL>` with the actual URL of the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/api-reference.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Copy file to Postgres Docker container\nDESCRIPTION: This command copies the specified file (pg_data.dump in the example) from the host machine into the root directory of the deepfence-postgres Docker container. This is necessary for importing a database backup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp pg_data.dump deepfence-postgres:/\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Deployment Name\nDESCRIPTION: This command is used to retrieve the deployment name in the deepfence-console namespace. This is needed to correctly target the deepfence-console-server deployment for password reset in Kubernetes\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/troubleshooting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deploy --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Make script executable (chmod)\nDESCRIPTION: This command makes the `pre-upgrade-to-v5.sh` script executable by changing its permissions. This is a prerequisite for executing the script.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/upgrade-from-v2.1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Deleting Deepfence Router Helm Chart - Bash (Helm 2)\nDESCRIPTION: This command deletes the deepfence-router Helm chart in Helm v2 and purges its resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# helm 2\nhelm delete --purge deepfence-router\n```\n\n----------------------------------------\n\nTITLE: Create File Server Secret in Kubernetes (Shell)\nDESCRIPTION: This snippet creates a Kubernetes secret named `deepfence_fileserver_secret.yaml` in the `deepfence-console` namespace, then applies it. This secret will contain credentials and configuration for connecting to an external S3-compatible file server. It assumes the existence of a `deepfence_fileserver_secret.yaml` file which is formatted according to the console helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_fileserver_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Kubernetes TLS Secret Reference (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to reference an existing TLS secret in Kubernetes containing the TLS certificate and key for the Deepfence Management Console.  The `secretName` should correspond to the name of a Kubernetes secret in the same namespace as the console. The secret must be of type `kubernetes.io/tls`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/initial-configuration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    secretName: console-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role with ECS Task Trust Policy\nDESCRIPTION: Creates an IAM role that the ECS tasks will assume, granting it permissions to access AWS resources. The trust policy allows the ECS tasks service to assume this role. The ARN of this role is required for the Fargate task definition.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ecs-tasks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run ThreatMapper Agent with Docker\nDESCRIPTION: This command runs the ThreatMapper agent as a Docker container. It configures CPU usage, restart policy, host network, logging, volumes for access to host resources, and environment variables for the Deepfence API key, management console URL, and user-defined tags.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    deepfenceio/deepfence_agent_ce:2.1.1\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Installation\nDESCRIPTION: Installs the Deepfence Cloud Scanner Helm chart on an EKS cluster. It specifies the values file, chart name, namespace, and version.  The `--create-namespace` flag ensures that the namespace is created if it does not already exist.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm install -f cloud-scanner.yaml cloud-scanner cloud-scanner/deepfence-cloud-scanner \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Configure File Server in values.yaml (YAML)\nDESCRIPTION: This snippet configures the file server connection in Kubernetes by modifying the `values.yaml` file used by the helm chart. It disables the creation of a file server StatefulSet, specifies the name of an existing secret containing the file server credentials, and sets the file server host and port if an external file server is used.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nfileserver:\n  # Specifies whether a file server instance should be created\n  # set this to false if using S3\n  create: false\n  # if create false provide name of the existing secret.\n  # Secret format refer templates/deepfence-console-secrets/s3.yaml\n  secretName: \"deepfence-console-secrets-fileserver\"\n      \n  # Set this if external file server is used and create=false\n  fileServerHost: \"123.123.123.123\"\n  fileServerPort: \"8080\"\n```\n\n----------------------------------------\n\nTITLE: Redeploying the Sensor Agent with Helm\nDESCRIPTION: This sequence of commands redeploys the `deepfence-agent` using Helm. It first deletes the existing agent, then retrieves the default values, updates the necessary configurations (containerdSock to false), and finally installs the agent with the modified values.  Helm is a package manager for Kubernetes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/tips/sensor-agent-not-start.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n\nhelm show values deepfence/deepfence-agent --version 2.4.0 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Edit deepfence_agent_values.yaml\nDESCRIPTION: This step involves modifying the deepfence_agent_values.yaml file, setting the `containerdSock` value to `false`. This disables the use of the containerd socket, which can resolve the FailedMount error.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n```\n\n----------------------------------------\n\nTITLE: ECS Task Definition Configuration (JSON)\nDESCRIPTION: This JSON configuration defines the task definition for the Deepfence agent on ECS. It includes container definitions, environment variables for API key and management console URL, volume mounts for access to the host system, and resource requirements.  Replace `<DEEPFENCE_KEY>` and `<MGMT_CONSOLE_URL>` with actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/aws-ecs.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ipcMode\": null,\n  \"containerDefinitions\": [\n    {\n      \"dnsSearchDomains\": [],\n      \"environmentFiles\": null,\n      \"logConfiguration\": null,\n      \"entryPoint\": [],\n      \"portMappings\": [],\n      \"command\": [],\n      \"linuxParameters\": null,\n      \"cpu\": 0,\n      \"environment\": [\n        {\n          \"name\": \"DEEPFENCE_KEY\",\n          \"value\": \"<DEEPFENCE_KEY>\"\n        },\n        {\n          \"name\": \"MGMT_CONSOLE_URL\",\n          \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n          \"name\": \"USER_DEFINED_TAGS\",\n          \"value\": \"\"\n        }\n      ],\n      \"resourceRequirements\": null,\n      \"ulimits\": null,\n      \"dnsServers\": [],\n      \"mountPoints\": [\n        {\n          \"readOnly\": true,\n          \"containerPath\": \"/fenced/mnt/host\",\n          \"sourceVolume\": \"Host\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/sys/kernel/debug\",\n          \"sourceVolume\": \"SysKernelDebug\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/run/docker.sock\",\n          \"sourceVolume\": \"DockerSock\"\n        },\n        {\n          \"readOnly\": false,\n          \"containerPath\": \"/var/log/fenced\",\n          \"sourceVolume\": \"VarLogFenced\"\n        }\n      ],\n      \"workingDirectory\": null,\n      \"secrets\": null,\n      \"dockerSecurityOptions\": [],\n      \"memory\": null,\n      \"memoryReservation\": null,\n      \"volumesFrom\": [],\n      \"stopTimeout\": null,\n      \"image\": \"docker.io/deepfenceio/deepfence_agent_ce:1.5.0\",\n      \"startTimeout\": null,\n      \"firelensConfiguration\": null,\n      \"dependsOn\": null,\n      \"disableNetworking\": null,\n      \"interactive\": null,\n      \"healthCheck\": null,\n      \"essential\": true,\n      \"links\": [],\n      \"hostname\": null,\n      \"extraHosts\": null,\n      \"pseudoTerminal\": null,\n      \"user\": null,\n      \"readonlyRootFilesystem\": null,\n      \"dockerLabels\": {},\n      \"systemControls\": [],\n      \"privileged\": true,\n      \"name\": \"deepfence\"\n    }\n  ],\n  \"placementConstraints\": [],\n  \"memory\": \"2048\",\n  \"family\": \"deepfence-agent-ec2-provider\",\n  \"pidMode\": null,\n  \"requiresCompatibilities\": [\n    \"EC2\"\n  ],\n  \"networkMode\": \"host\",\n  \"runtimePlatform\": {\n    \"operatingSystemFamily\": \"LINUX\",\n    \"cpuArchitecture\": \"X86_64\"\n  },\n  \"cpu\": \"512\",\n  \"inferenceAccelerators\": null,\n  \"proxyConfiguration\": null,\n  \"volumes\": [\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"SysKernelDebug\",\n      \"host\": {\n        \"sourcePath\": \"/sys/kernel/debug\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"DockerSock\",\n      \"host\": {\n        \"sourcePath\": \"/var/run/docker.sock\"\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"VarLogFenced\",\n      \"host\": {\n        \"sourcePath\": null\n      },\n      \"dockerVolumeConfiguration\": null\n    },\n    {\n      \"fsxWindowsFileServerVolumeConfiguration\": null,\n      \"efsVolumeConfiguration\": null,\n      \"name\": \"Host\",\n      \"host\": {\n        \"sourcePath\": \"/\"\n      },\n      \"dockerVolumeConfiguration\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router with Custom Values\nDESCRIPTION: This command installs the Deepfence router using a custom values file, allowing for overriding default settings in the Helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Docker Container\nDESCRIPTION: This command provides access to the shell of the running PostgreSQL Docker container named 'deepfence-postgres'. It is used to execute commands directly within the container's environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Check Pod Status with kubectl\nDESCRIPTION: This command retrieves the status of pods within the 'deepfence' namespace. It helps diagnose issues by showing the readiness, status, restarts, and age of each pod.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Clone, Build ThreatMapper (bash)\nDESCRIPTION: These commands clone the ThreatMapper repository from GitHub, navigate into the directory, and then executes the `make` command to build the container images. This requires `git` and `make` to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\nmake\n```\n\n----------------------------------------\n\nTITLE: Reset Deepfence Server Password (Docker)\nDESCRIPTION: This command executes the password reset script within the Deepfence Server Docker container. It requires Docker to be installed and the `deepfence-server` container to be running.  The script `/usr/local/bin/deepfence_server --reset-password` handles the password reset process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-server bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner on GKE (Multiple Projects) Terraform\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner on a GKE cluster for multiple projects (organization deployment), utilizing workload identity. It fetches GKE cluster details and configures the Cloud Scanner module, requiring parameters like cluster endpoint, token, certificate, ThreatMapper console URL, and project IDs.  Remember to replace the placeholder values with appropriate configurations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\n# target cluster to deploy cloud scanner\ndata \"google_container_cluster\" \"target_cluster\" {\n  name     = \"<TARGET GKE CLUSTER NAME>\"\n  location = \"<TARGET GKE CLUSTER NAME>\"\n  project  = \"<PROJECT_ID>\"\n}\n\nmodule \"cloud_scanner_example_multiple_project\" {\n  source                     = \"deepfence/cloud-scanner/gcp//examples/gke\"\n  version                    = \"0.8.0\"\n  name                       = \"deepfence-cloud-scanner\"\n  gke_host                   = \"https://${data.google_container_cluster.target_cluster.endpoint}\"\n  gke_token                  = data.google_client_config.current.access_token\n  gke_cluster_ca_certificate = base64decode(data.google_container_cluster.target_cluster.master_auth[0].cluster_ca_certificate,)\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url           = \"<Console URL>\"\n  deepfence-key              = \"<Deepfence-key>\"\n  image_name                 = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce\"\n  image_tag                  = \"2.4.0\"\n  # project_id example: dev1-123456\n  project_id                 = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region                     = \"<REGION_ID>\"\n  # target gke cluster to deploy cloud scanner\n  cluster_name               = \"<TARGET GKE CLUSTER NAME>\"\n  # target gke cluster location\n  cluster_location           = \"<TARGET GKE CLUSTER NAME>\"\n  isOrganizationDeployment   = true\n  # project id where the cloud scanner is deployed\n  deployedAccountID          = \"<DEPLOYED PROJECT ID>\"\n  # organization project id\n  organizationAccountID      = \"<ORG PROJECT ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Neo4j DB Backup Script\nDESCRIPTION: This command executes the backup_neo4j.sh script inside the neo4j Docker container to create a backup of the Neo4j database. The backup file name will be printed to standard output and follows the format `neo4j_backup_<YYYY-MM-DD_HOUR-MIN-SEC>`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/backup_neo4j.sh\n```\n\n----------------------------------------\n\nTITLE: Deploy Console with Docker Compose - Bash\nDESCRIPTION: Deploys the ThreatMapper console using Docker Compose, allowing customization of the image repository. It sets the `ACC` variable for the Docker Hub account name, logs in to the account using `docker login`, and then uses `docker-compose` to start the services defined in `docker-compose.yml` with the specified image repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Clone and Build ThreatMapper (Bash)\nDESCRIPTION: Clones the ThreatMapper repository from GitHub, navigates into the directory, and executes the `make` command to build the container images. Requires git and make to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\nmake\n```\n\n----------------------------------------\n\nTITLE: Copy and execute pre-upgrade script (Docker)\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script into the `deepfence-neo4j` Docker container's `/startup` directory and then execute it within the container. This prepares the Neo4j database for the upgrade.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/upgrade-from-v2.1.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp pre-upgrade-to-v5.sh deepfence-neo4j:/startup\ndocker exec deepfence-neo4j /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Entrypoint and Command Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure both the entrypoint and command for the container in the Fargate task definition. The ThreatMapper entrypoint is provided in the **Entry point** field, and the Application entrypoint and arguments are provided in the **Command** field.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n    ],\n    \"command\": [\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Elasticsearch on Amazon Opensearch Service in Helm Chart (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure Elasticsearch settings within the console helm chart for Amazon Opensearch Service. It includes the scheme, host, port, user, and password for connecting to the Elasticsearch service. The username and password should only contain alphanumeric characters and hyphens.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/managed-database.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  elasticsearch:\n    scheme: \"https\"\n    host: search-deepfence-aaaaaa.us-east-1.es.amazonaws.com\n    port: \"443\"\n    # Accepted characters for username and password: alphabets, numbers and -\n    user: \"<user>\"\n    password: \"<password>\"\n```\n\n----------------------------------------\n\nTITLE: Modifying deepfence_agent_values.yaml\nDESCRIPTION: This snippet highlights the crucial step of setting `containerdSock` to `false` within the deepfence_agent_values.yaml file. This configuration change prevents the agent from attempting to mount the containerd socket, resolving the startup issue.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Deepfence Agent Image (YAML)\nDESCRIPTION: Configuration snippet for customizing the Deepfence agent image in the values.yaml file.  Requires the values.yaml file to be created first.  The deepfenceAgentImage.name and deepfenceAgentImage.tag parameters specify the image name and tag, respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndeepfenceAgentImage:\n  name: deepfenceio/deepfence_agent_ce\n  tag: latest-fargate\n```\n\n----------------------------------------\n\nTITLE: Bash: Start Cloud Scanner with Docker Compose\nDESCRIPTION: This command starts the Deepfence Cloud Scanner using Docker Compose in detached mode. The '-d' flag ensures that the container runs in the background.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Remove ThreatMapper Console with Docker Compose\nDESCRIPTION: Removes the ThreatMapper Management Console by stopping and removing the containers, networks, and volumes defined in the docker-compose.yml file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Building ThreatMapper (Bash)\nDESCRIPTION: Clones the ThreatMapper repository, changes the directory to the cloned repository, and builds the container images using the make command. Requires git, make and docker.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\nmake\n```\n\n----------------------------------------\n\nTITLE: Secret Scan Pipeline\nDESCRIPTION: This Jenkinsfile demonstrates a pipeline for secret scanning using Threatmapper. It shows how to integrate the secret scanning process into a Jenkins pipeline. Refer to 'secrets.Jenkinsfile' for the full code.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/ci-cd-integrations/jenkins/README.md#_snippet_2\n\nLANGUAGE: Jenkinsfile\nCODE:\n```\nPlease refer to 'secrets.Jenkinsfile' for the full code.\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Kubernetes Scanner Helm Chart\nDESCRIPTION: This command installs the deepfence-k8s-scanner Helm chart with specific configuration parameters. It sets the image tag, management console URL, Deepfence key, and cluster name. It also creates a new namespace for the scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/kubernetes-scanner/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install deepfence-k8s-scanner deepfence-k8s-scanner/deepfence-k8s-scanner \\\n    --set image.tag=\"1.5.0\" \\\n    --set managementConsoleUrl=\"40.40.40.40\" \\\n    --set deepfenceKey=\"xxxxx\" \\\n    --set clusterName=\"prod-cluster\" \\\n    --namespace deepfence-k8s-scanner \\\n    --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Malware Scan Pipeline\nDESCRIPTION: This Jenkinsfile demonstrates a pipeline for malware scanning using Threatmapper. It showcases the integration of malware scanning into a Jenkins pipeline. Refer to 'malwares.Jenkinsfile' for the full code.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/ci-cd-integrations/jenkins/README.md#_snippet_3\n\nLANGUAGE: Jenkinsfile\nCODE:\n```\nPlease refer to 'malwares.Jenkinsfile' for the full code.\n```\n\n----------------------------------------\n\nTITLE: Deploying Deepfence Agent with Docker\nDESCRIPTION: This command deploys the Deepfence ThreatMapper agent as a Docker container. It sets resource limits, restart policies, network configuration, volume mounts for access to host resources, and environment variables for configuration such as the management console URL and API key.  The MGMT_CONSOLE_URL and DEEPFENCE_KEY parameters must be replaced with the actual console IP and API key respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    deepfenceio/deepfence_agent_ce:2.1.1\n```\n\n----------------------------------------\n\nTITLE: Copy and execute pre-upgrade script (Kubernetes)\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script into the specified Neo4j pod's `/startup` directory and then execute it within the pod. This prepares the Neo4j database for the upgrade in a Kubernetes environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/upgrade-from-v2.1.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cp -n $NAMESPACE pre-upgrade-to-v5.sh $PODNAME:/startup \nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform for Tenant Subscriptions\nDESCRIPTION: This Terraform configuration snippet is used to deploy the Deepfence Cloud Scanner on an Azure Container Instance for multiple Azure subscriptions within a tenant.  It requires the Azure provider to be configured with a subscription ID. The module `cloud-scanner_example_tenant-subscriptions` configures the resources, including the management console URL, Deepfence API key, a list of subscription IDs to monitor, container image, and location. You must replace the placeholder values with your actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_tenant-subscriptions\" {\n  source                  = \"deepfence/cloud-scanner/azure//examples/tenant-subscriptions\"\n  version                 = \"0.9.1\"\n  mgmt-console-url        = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port       = \"<Console port> eg. 443\"\n  deepfence-key           = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                    = \"deepfence-cloud-scanner\"\n  image                   = \"quay.io/deepfenceio/cloud_scanner_ce:THREATMAPPER_VERSION\"\n  # List of subscription ids to monitor\n  subscription_ids_access = [\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\", \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"]\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location                = \"eastus\"\n  # Number of CPU cores (Default: 4 vCPU)\n  cpu                     = \"4\"\n  # Memory in GB (Default: 8 GB)\n  memory                  = \"8\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Deepfence Docker Images (Air-Gapped)\nDESCRIPTION: This snippet pulls the required Docker images for Deepfence console components from the Deepfence registry (quay.io). The THREATMAPPER_VERSION variable should be replaced with the desired version of ThreatMapper.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/air-gapped.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull quay.io/deepfenceio/deepfence_worker_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_server_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_ui_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_file_server_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_agent_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_cluster_agent_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_router_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_redis_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_kafka_broker_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_postgres_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_neo4j_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_compliance_scanner_ce:THREATMAPPER_VERSION\ndocker pull quay.io/deepfenceio/deepfence_telemetry_ce:THREATMAPPER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Check Deepfence Agent Pod Status\nDESCRIPTION: Retrieves status information on the daemonset and pods in the deepfence namespace to ensure they are up and running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get daemonset -n deepfence\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Container Runtime Socket Path Configuration\nDESCRIPTION: Configuration settings within the values.yaml file to define the paths to container runtime sockets (Docker, Containerd, CRI-O).  The agent uses these sockets to detect and monitor containers. Allows enabling/disabling each runtime.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Mount container runtime socket path to agent pod. Agent will detect which runtime it is using these files.\nmountContainerRuntimeSocket:\n  dockerSock: false\n  # Change if socket path is not the following\n  dockerSockPath: \"/var/run/docker.sock\"\n  containerdSock: true\n  # Change if socket path is not the following\n  containerdSockPath: \"/run/containerd/containerd.sock\"\n  crioSock: false\n  # Change if socket path is not the following\n  crioSockPath: \"/var/run/crio/crio.sock\"\n```\n\n----------------------------------------\n\nTITLE: Install Required Packages (Ubuntu/Debian)\nDESCRIPTION: Installs necessary build tools, Golang, Docker, and Docker Compose on Ubuntu/Debian systems.  This snippet is required to prepare the build environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install build-essential golang-go docker.io docker-compose\n```\n\n----------------------------------------\n\nTITLE: Copying Postgres DB Dump to Container\nDESCRIPTION: This command copies the `pg_data.dump` file from the host machine into the root directory of the `deepfence-postgres` Docker container. This step is necessary for importing the backed-up database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp pg_data.dump deepfence-postgres:/\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on Azure Container Instance (Single Subscription)\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner on Azure Container Instance for monitoring a single Azure subscription. It requires specifying the subscription ID, management console URL, Deepfence API key, location, CPU cores, and memory allocation. Ensure the location and other parameters are properly set before applying.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.6.0\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud_scanner_ce:2.3.1\"\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location            = \"eastus\"\n  # Number of CPU cores (Default: 2 vCPU)\n  cpu                 = \"2\"\n  # Memory in GB (Default: 4 GB)\n  memory              = \"4\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Daemon\nDESCRIPTION: This command restarts the Docker daemon after proxy settings are configured in the `~/.docker/config.json` file. This ensures that the new proxy settings are applied to all Docker operations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Uninstall ThreatMapper Console with Docker Compose\nDESCRIPTION: Removes the ThreatMapper Management Console using Docker Compose.  This command stops and removes the containers defined in the docker-compose.yml file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL secret in Kubernetes (Shell)\nDESCRIPTION: This snippet shows how to create a Kubernetes secret for PostgreSQL credentials and apply it to the `deepfence-console` namespace. It references a secret format defined in the Helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_postgres_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificates (OpenSSL)\nDESCRIPTION: This snippet demonstrates how to generate a self-signed SSL certificate and private key using OpenSSL for use with the Deepfence Management Console. It creates the key and certificate files in the `/etc/deepfence/certs/` directory. This is typically done for Docker deployments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository\nDESCRIPTION: These commands add the Deepfence Helm chart repository and update the Helm repository list. This is a prerequisite for installing the ThreatMapper console using Helm.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Agent in Kubernetes with Helm\nDESCRIPTION: These commands deploy the ThreatMapper agent in a Kubernetes cluster using Helm. It adds the Deepfence Helm repository, shows the default values, and allows you to modify the values.yaml file. Crucially, it requires updating the image name and clusterAgentImageName to point to your custom images, and setting the management console URL and Deepfence API key. Finally, it installs the chart using the modified values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\nhelm show values deepfence/deepfence-agent --version 2.0.3 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.0.3\n```\n\n----------------------------------------\n\nTITLE: Create deepfence_router_values.yaml - Bash\nDESCRIPTION: Generates a default `deepfence_router_values.yaml` file from the Deepfence router Helm chart.  This file is used to customize the router installation. The `helm show values` command is used to extract the default values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.1.1 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Fargate Entrypoint Configuration (JSON)\nDESCRIPTION: This JSON snippet configures the entrypoint for the application container running on AWS Fargate. It sets the entrypoint as a comma-separated list including the ThreatMapper entrypoint (`/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh`) and the application entrypoint (`customer-entry-point.sh`) with parameters. Ensure correct quoting for the command elements.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\",\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment\nDESCRIPTION: These commands initialize Terraform, create an execution plan, and apply the changes to provision the Cloud Scanner resources. Ensure that the terraform configuration file `cloud-scanner.tf` is in the current directory before running these commands.  The user needs to have AWS credentials configured for Terraform to work correctly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Copying File to Neo4j Docker Container\nDESCRIPTION: This command copies a backup file to the running Neo4j Docker container.  <BACKUP_FILE> should be replaced with the actual name of the backup file being copied.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp <BACKUP_FILE> deepfence-neo4j:/\n```\n\n----------------------------------------\n\nTITLE: Tenant Subscriptions Terraform Configuration\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner to monitor multiple subscriptions within an Azure tenant. It requires specifying the subscription ID for deployment, management console URL, Deepfence API key, a list of subscription IDs to monitor, location, and other parameters like CPU and memory.  Replace the placeholder values with your specific configuration details.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_tenant-subscriptions\" {\n  source                  = \"deepfence/cloud-scanner/azure//examples/tenant-subscriptions\"\n  version                 = \"0.4.0\"\n  mgmt-console-url        = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port       = \"<Console port> eg. 443\"\n  deepfence-key           = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                    = \"deepfence-cloud-scanner\"\n  image                   = \"quay.io/deepfenceio/cloud-scanner:2.2.2\"\n  # List of subscription ids to monitor\n  subscription_ids_access = [\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\", \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"]\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location                = \"eastus\"\n  # Number of CPU cores (Default: 4 vCPU)\n  cpu                     = \"4\"\n  # Memory in GB (Default: 8 GB)\n  memory                  = \"8\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with API Key (Python)\nDESCRIPTION: This Python code initializes an authenticated ThreatMapper client using an API key.  The `base_url` parameter should be set to the URL of your ThreatMapper console, and the `token` parameter should be set to your API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"Api Key\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Threatmapper Client\nDESCRIPTION: This code snippet demonstrates how to create a basic Threatmapper client instance. It initializes the client with the base URL of the Threatmapper console, allowing for unauthenticated API calls.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\nclient = Client(base_url=\"YOUR_CONSOLE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Create Helm Values File for Router\nDESCRIPTION: Generates a default values.yaml file for the deepfence-router Helm chart. This file contains configurable parameters for the router deployment, such as image repositories, service types and ingress settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.4.0 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Configuration - Python\nDESCRIPTION: This snippet retrieves the node configuration using the `search_hosts` API and returns a list of node IDs and types. It constructs a payload similar to `list_hosts` but returns a list of dictionaries containing node_id and node_type. This configuration is later used to start a vulnerability scan. The snippet depends on `search_hosts` and `SearchSearchNodeReq`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef node_config() -> List:\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       host_list = []\n       for host in hosts:\n          host_list.append({\"node_id\":host.node_id, \"node_type\": \"host\"})\n       return host_list\n    except UnexpectedStatus as e:\n        print(\"Exception when calling node_config-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Console with Docker Compose\nDESCRIPTION: This snippet demonstrates how to install and start the ThreatMapper console using Docker Compose, overriding the default image repository. It sets the ACC variable to the Docker Hub account name, logs into the account, and then uses docker-compose to bring up the services in detached mode.  The IMAGE_REPOSITORY variable ensures that the custom image is pulled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Scan Pipeline (Scripted)\nDESCRIPTION: This Jenkinsfile demonstrates a scripted pipeline for vulnerability scanning using Threatmapper.  It provides an example of how to integrate the vulnerability scanning process into a scripted Jenkins pipeline. Refer to 'vulnerabilities_scripted_pipeline.Jenkinsfile' for the full code.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/ci-cd-integrations/jenkins/README.md#_snippet_0\n\nLANGUAGE: Jenkinsfile\nCODE:\n```\nPlease refer to 'vulnerabilities_scripted_pipeline.Jenkinsfile' for the full code.\n```\n\n----------------------------------------\n\nTITLE: Starting Cloud Scanner with Docker Compose\nDESCRIPTION: Starts the cloud scanner service defined in the docker-compose.yaml file in detached mode (-d). This command initiates the cloud scanner container in the background.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Entrypoint (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to modify the entry point of a Fargate container to invoke the ThreatMapper agent alongside the application's entry point. It includes the ThreatMapper entrypoint and the application's entrypoint and arguments as a comma-delimited list. The values `customer-entry-point.sh`, `param1`, and `param2` should be replaced with the application's actual entrypoint and arguments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\",\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ThreatMapper Python SDK\nDESCRIPTION: This command installs the ThreatMapper Python SDK from the specified GitHub repository using pip. It allows you to use the ThreatMapper API through Python scripts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/deepfence/threatmapper-python-client.git\n```\n\n----------------------------------------\n\nTITLE: Reset ThreatMapper password in Kubernetes\nDESCRIPTION: This command resets the ThreatMapper administrator password in a Kubernetes deployment. It executes the `deepfence_server --reset-password` command inside the `deepfence-console-server` pod, specifically in the `server` container. Requires `kubectl` configured to connect to the Kubernetes cluster where ThreatMapper is deployed. The deployment name might need adjustment if the Helm chart was customized.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-console-server \\\n  -c server \\\n  --namespace deepfence-console \\\n  -- bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Agent with Podman\nDESCRIPTION: This command runs the Deepfence agent as a Podman container, requiring the Podman system service to be running. Similar to the Docker command, it sets resource limits, configures networking, mounts volumes, and sets environment variables for console URL, port, and API key. It also mounts systemd directories.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /run/podman/podman.sock:/run/podman/podman.sock \\\n    -v /run/systemd/:/run/systemd/ \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e DF_LOG_LEVEL=\"info\" \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.3.1\n```\n\n----------------------------------------\n\nTITLE: Start Cloud Scanner with Docker Compose\nDESCRIPTION: Command to start the Deepfence Cloud Scanner using Docker Compose. The `-d` flag runs the containers in detached mode.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Identify Kubernetes Container Runtime\nDESCRIPTION: This command retrieves the container runtime used by each node in the Kubernetes cluster. It uses kubectl with custom columns to display the node name and container runtime version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Neo4j DB Export Script Execution\nDESCRIPTION: This command executes the `backup_neo4j.sh` script inside the `deepfence-neo4j` Docker container. This script performs the backup of the Neo4j graph database, creating a backup file within the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/backup_neo4j.sh\n```\n\n----------------------------------------\n\nTITLE: Customizing Client with Event Hooks\nDESCRIPTION: This snippet demonstrates how to add event hooks for request and response logging using the `httpx` library, which is used internally by the ThreatMapper client. Replace `YOUR_CONSOLE_URL` with the correct value. This example shows how to log request method, URL, and response status.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n    httpx_args={\"event_hooks\": {\"request\": [log_request], \"response\": [log_response]}},\n)\n\n# Or get the underlying httpx client to modify directly with client.get_httpx_client() or client.get_async_httpx_client()\n```\n\n----------------------------------------\n\nTITLE: Configure Custom TLS Certificates in Kubernetes Values File (YAML)\nDESCRIPTION: This YAML snippet illustrates how to configure custom TLS certificates for the Deepfence UI in a Kubernetes environment using the Helm chart values file.  It shows how to provide either an existing secret name containing the TLS certificate and key or embed the certificate and key directly as base64 encoded strings.  One of the two options should be used to configure custom certificates.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/initial-configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  # Use custom ssl certificate for Deepfence UI\n  # custom certificates can be configured using two options\n  # existing secret or base64 encoded cert and key string\n  # provide one off the two options to configure custom certificates\n  tls:\n    # provide secret name which contains tls cert and key\n    # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets\n    # make sure to create secret in the same namespace as that of the console\n    secretName: \"\"\n    # embed given cert and key as secret and mount to router pod\n    # provide certificate and key in below example format\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL\n      .....\n      BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89\n      .....\n      bHEvWp7ugCTFhurM+lla0d+ElDO2\n      -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Multiple Subscription Cloud Scanner\nDESCRIPTION: This Terraform configuration sets up the Deepfence Cloud Scanner for multiple Azure subscriptions.  It defines the Azure provider and retrieves the current subscription ID. It uses the cloud-scanner module to deploy the infrastructure and requires a list of tenant subscription IDs for access.  The configuration outputs the tenant ID, client ID, and client secret. Replace <SUBSCRIPTION_ID> with the subscription ID where the resource is deployed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\nmodule \"infrastructure_cloud-scanner-app\" {\n  source                  = \"deepfence/cloud-scanner/azure//modules/infrastructure/cloud-scanner-app\"\n  version                 = \"0.7.0\"\n  name                    = \"deepfence-cloud-scanner\"\n  subscription_ids_access = [list of tenant subscriptions ids]\n}\n\noutput \"tenant_id\" {\n  value = module.infrastructure_cloud-scanner-app.tenant_id\n}\n\noutput \"client_id\" {\n  value = module.infrastructure_cloud-scanner-app.client_id\n}\n\noutput \"client_secret\" {\n  value     = module.infrastructure_cloud-scanner-app.client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-tuning ThreatMapper Agent Helm Deployment\nDESCRIPTION: This set of commands allows fine-tuning the ThreatMapper agent deployment using a values file.  It fetches the default values, updates them with specific configurations like management console URL and API key, and then installs the Helm chart using the modified values file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.2.2 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Clone and Build ThreatMapper (Bash)\nDESCRIPTION: Clones the Deepfence ThreatMapper repository from GitHub, navigates into the directory, and then executes the 'make' command to build the container images. Requires Git and Make to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\nmake\n```\n\n----------------------------------------\n\nTITLE: Save ThreatMapper Router Helm Values\nDESCRIPTION: This command saves the default values from the ThreatMapper router Helm chart to a file, enabling customization of the router deployment. Version is specified for reproducibility.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.4.0 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Single Project Cloud Scanner on GCP\nDESCRIPTION: This Terraform configuration sets up a single project Cloud Scanner on a GCP compute instance using a service account. It defines the required module, specifies the source, version, service account name, and project ID. It outputs the service account email.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\nmodule \"cloud_scanner_example_single_project\" {\n  source     = \"deepfence/cloud-scanner/gcp//examples/gce-vm\"\n  version    = \"0.8.0\"\n  # gcp service account name\n  name       = \"deepfence-cloud-scanner\"\n  # project_id example: dev1-123456\n  project_id = \"<PROJECT_ID>\"\n}\n\noutput \"service_account_email\" {\n  value = module.cloud_scanner_example_single_project.service_account_email\n}\n```\n\n----------------------------------------\n\nTITLE: Creating deepfence_router_values.yaml\nDESCRIPTION: Retrieves default values for the deepfence-router Helm chart and stores them in deepfence_router_values.yaml. This allows customization of the router deployment, especially to change the image repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 1.5.0 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Copy and execute script (Kubernetes)\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script to the Neo4j pod in Kubernetes and then execute it. This must be done before upgrading to the new release.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/upgrade-from-v2.1.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cp -n $NAMESPACE pre-upgrade-to-v5.sh $PODNAME:/startup \nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Certificates in Kubernetes Values File (YAML)\nDESCRIPTION: This YAML snippet shows how to configure custom TLS certificates for the ThreatMapper Management Console deployed in Kubernetes. It allows specifying either an existing Kubernetes secret containing the TLS certificate and key, or embedding the certificate and key directly in the values file as base64 encoded strings.  Only one of the two options (secretName or cert/key) should be provided.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/initial-configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  # Use custom ssl certificate for Deepfence UI\n  # custom certificates can be configured using two options\n  # existing secret or base64 encoded cert and key string\n  # provide one off the two options to configure custom certificates\n  tls:\n    # provide secret name which contains tls cert and key\n    # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets\n    # make sure to create secret in the same namespace as that of the console\n    secretName: \"\"\n    # embed given cert and key as secret and mount to router pod\n    # provide certificate and key in below example format\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL\n      .....\n      BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89\n      .....\n      bHEvWp7ugCTFhurM+lla0d+ElDO2\n      -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Get Application URL using NodePort\nDESCRIPTION: This snippet retrieves the application URL when using NodePort. It uses kubectl to get the NodePort and Node IP, then constructs the URL.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-console/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"deepfence-console.fullname\" . }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho http://$NODE_IP:$NODE_PORT\n```\n\n----------------------------------------\n\nTITLE: Push Images to DockerHub - Bash\nDESCRIPTION: This script automates the process of tagging and pushing Docker images to a DockerHub repository. It iterates through a list of Deepfence ThreatMapper images, tags each image with the account and 'latest' tag, and then pushes the tagged images to DockerHub.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_redis_ce \\\n    deepfence_postgres_ce \\\n    deepfence_kafka_broker_ce \\\n    deepfence_router_ce \\\n    deepfence_file_server_ce \\\n    deepfence_server_ce \\\n    deepfence_worker_ce \\\n    deepfence_ui_ce \\\n    deepfence_agent_ce \\\n    deepfence_cluster_agent_ce \\\n    deepfence_package_scanner_ce \\\n    deepfence_malware_scanner_ce \\\n    deepfence_secret_scanner_ce \\\n    deepfence_neo4j_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Setting httpx Client Directly\nDESCRIPTION: This example shows how to override the default httpx client with a custom httpx client instance.  Note that you need to re-set the base_url, cookies, and headers. Replace `YOUR_CONSOLE_URL` and `YOUR_PROXY_URL` with the appropriate values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom threatmapper import Client\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n)\n# Note that base_url needs to be re-set, as would any shared cookies, headers, etc.\nclient.set_httpx_client(httpx.Client(base_url=\"YOUR_CONSOLE_URL\", proxies=\"YOUR_PROXY_URL\"))\n```\n\n----------------------------------------\n\nTITLE: Restart Docker Service\nDESCRIPTION: This command restarts the Docker daemon after proxy settings are configured, applying the new settings to all Docker containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Save Deepfence Router Helm Values\nDESCRIPTION: This command retrieves the default values of the Deepfence router Helm chart and saves them to a YAML file. This file can then be customized to override the default configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.3.1 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This code snippet demonstrates how to search for hosts using the Threatmapper API. It initializes an AuthenticatedClient and calls the search_hosts.sync method to retrieve a list of hosts based on the specified search criteria.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n```\n\n----------------------------------------\n\nTITLE: Delete the ThreatMapper Sensor\nDESCRIPTION: This command deletes the deepfence-agent Helm release from the specified namespace.  It removes the ThreatMapper sensor deployment from the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Copying Backup to PostgreSQL Container\nDESCRIPTION: This command copies the backup file to the running PostgreSQL Docker container. It's used to restore the database in a new environment. Requires Docker to be installed and the `deepfence-postgres` container to be running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp pg_data.dump deepfence-postgres:/\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository\nDESCRIPTION: Adds the Deepfence Helm repository to your local Helm configuration. This allows you to access the Deepfence Agent chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent with Values File\nDESCRIPTION: Installs the Deepfence Agent Helm chart using a custom values file.  This allows for customized configuration of the agent deployment. It creates the 'deepfence' namespace if it does not exist.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File for Cloud Scanner\nDESCRIPTION: Creates a directory named deepfence-cloud-scanner, navigates into it, and downloads the docker-compose.yaml file from the specified URL.  This file defines the services and configuration for running the Deepfence Cloud Scanner as a Docker container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.4/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Pod Status with kubectl\nDESCRIPTION: This command is used to check the status of pods in the `deepfence` namespace.  It helps identify if the `deepfence-agent` is in a `ContainerCreating` state, indicating a potential startup issue.  The output shows the pod's name, readiness, status, restarts, and age.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Monitor ThreatMapper Console Pods\nDESCRIPTION: Monitors the status of the ThreatMapper Console pods in the `deepfence-console` namespace. This is done to ensure that the pods start up correctly after the installation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace deepfence-console -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Proxy Settings\nDESCRIPTION: This JSON configuration file sets up a proxy server for Docker to use for all transactions.  The `httpProxy`, `httpsProxy`, and `noProxy` settings control the proxy server address and excluded hosts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/docker.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"\"\n            }\n    },\n    \"HttpHeaders\": {\n        \"User-Agent\": \"Docker-Client/19.03.1 (linux)\"\n    },\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://111.111.111.111:8006\",\n            \"httpsProxy\": \"http://111.111.111.111:8006\",\n            \"noProxy\": \"localhost,127.0.0.1\"\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent\nDESCRIPTION: This script automates the installation of the Deepfence agent on a Linux host. It retrieves the agent binary and configuration from the management console, installs necessary dependencies, configures the agent as a system service, and starts the service. Requires MGMT_CONSOLE_URL and DEEPFENCE_KEY environment variables.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# MGMT_CONSOLE_URL: Example: threatmapper.customer.com or 65.65.65.65\nexport MGMT_CONSOLE_URL=\"${MGMT_CONSOLE_URL}\"\nexport DEEPFENCE_KEY=\"${DEEPFENCE_KEY}\"\n\nif [[ -z \"$MGMT_CONSOLE_URL\" ]]; then\n  echo \"env MGMT_CONSOLE_URL is not set\"\n  exit 1\nfi\n\nif [[ -z \"$DEEPFENCE_KEY\" ]]; then\n  echo \"env DEEPFENCE_KEY is not set\"\n  exit 1\nfi\n\nexport MGMT_CONSOLE_PORT=\"443\"\nexport MGMT_CONSOLE_URL_SCHEMA=\"https\"\nexport DF_HOSTNAME=\"$(hostname)\"\nexport DF_LOG_LEVEL=\"info\"\n\nMANAGEMENT_CONSOLE_URL=\"$MGMT_CONSOLE_URL_SCHEMA://$MGMT_CONSOLE_URL:$MGMT_CONSOLE_PORT\"\n\nOS_ID=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '\"')\nif [[ \"$OS_ID\" == \"amzn\" || \"$OS_ID\" == \"centos\" ]]; then\n    # Do necessary installs for Amazon Linux\n    yum -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nelse\n    # Do necessary installs for Ubuntu\n    apt-get -y install logrotate jq curl\n    if [[ \"$?\" != \"0\" ]]; then\n        echo \"Failed to install logrotate\"\n        exit 1\n    fi\nfi\n\naccess_token_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/auth/token\" \\\n        --header 'Content-Type: application/json' \\\n        --data \"{\\\"api_token\\\": \\\"$DEEPFENCE_KEY\\\"}\")\nif [[ $access_token_response == \"\" ]]; then\n  echo \"Failed to connect to the management console\"\n  exit 1\nfi\n\naccess_token=$(jq -r '.access_token' <<< \"$access_token_response\")\nif [[ $access_token == \"\" || $access_token == \"null\" ]]; then\n  echo \"Failed to authenticate\"\n  echo \"$access_token_response\"\n  exit 1\nfi\n\ndownload_url_response=$(curl -m 5 -s -k \"$MANAGEMENT_CONSOLE_URL/deepfence/agent-deployment/binary/download-url\" \\\n        --header \"Authorization: Bearer $access_token\")\nif [[ $download_url_response == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  exit 1\nfi\n\nstart_agent_script_download_url=$(jq -r '.start_agent_script_download_url' <<< \"$download_url_response\")\nif [[ $start_agent_script_download_url == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\ncat << EOF > uninstall_deepfence.sh\n#!/bin/bash\n\nsystemctl stop deepfence-agent.service\nsystemctl disable deepfence-agent.service\nrm -f /etc/systemd/system/deepfence-agent.service\nrm -rf /opt/deepfence\nEOF\n\necho \"Uninstalling existing Deepfence agent installation, if any\"\nchmod +x uninstall_deepfence.sh\nbash uninstall_deepfence.sh\n\nif [[ ! -d \"/opt/deepfence\" ]]; then\n    mkdir -p /opt/deepfence /opt/deepfence/var/log/\nfi\n\narchitecture=\"\"\ncase $(uname -m) in\n    i386)   architecture=\"386\" ;;\n    i686)   architecture=\"386\" ;;\n    x86_64) architecture=\"amd64\" ;;\n    arm)    dpkg --print-architecture | grep -q \"arm64\" && architecture=\"arm64\" || architecture=\"arm\" ;;\n    aarch64) architecture=\"arm64\" ;;\nesac\n\necho \"Detected architecture: $architecture\"\n\nagent_binary_download_url=$(jq -r --arg architecture \"agent_binary_${architecture}_download_url\" '.[$architecture]' <<< \"$download_url_response\")\nagent_binary_filename=$(basename \"$agent_binary_download_url\")\nagent_binary_filename=$(cut -f1 -d\"?\" <<< \"$agent_binary_filename\")\n\nif [[ $agent_binary_download_url == \"\" || $agent_binary_filename == \"\" ]]; then\n  echo \"Failed to get agent binary download url\"\n  echo \"$download_url_response\"\n  exit 1\nfi\n\necho \"Downloading agent binary from $agent_binary_download_url to /opt/deepfence/$agent_binary_filename\"\ncurl -k -o \"/opt/deepfence/$agent_binary_filename\" \"$agent_binary_download_url\"\n\ncurl -k -o /opt/deepfence/start_deepfence_agent.sh \"$start_agent_script_download_url\"\nchmod +x \"/opt/deepfence/start_deepfence_agent.sh\"\n\ntar -xzf \"/opt/deepfence/$agent_binary_filename\" -C /opt/deepfence/\n\necho \"MGMT_CONSOLE_URL: $MGMT_CONSOLE_URL\"\necho \"MGMT_CONSOLE_PORT: $MGMT_CONSOLE_PORT\"\necho \"DF_HOSTNAME: $DF_HOSTNAME\"\n\necho \"Installing Deepfence agent as daemon service\"\n\ncat << EOF > /etc/systemd/system/deepfence-agent.service\n[Unit]\nDescription=Deepfence Agent Service\nAfter=network.target\n\n[Service]\nEnvironment=\"MGMT_CONSOLE_URL=$MGMT_CONSOLE_URL\"\nEnvironment=\"DEEPFENCE_KEY=$DEEPFENCE_KEY\"\nEnvironment=\"MGMT_CONSOLE_PORT=$MGMT_CONSOLE_PORT\"\nEnvironment=\"MGMT_CONSOLE_URL_SCHEMA=$MGMT_CONSOLE_URL_SCHEMA\"\nEnvironment=\"DF_HOSTNAME=$(hostname)\"\nEnvironment=\"DF_LOG_LEVEL=$DF_LOG_LEVEL\"\n\nUser=root\nGroup=root\nRestart=on-failure\nType=forking\nExecStart=/opt/deepfence/start_deepfence_agent.sh\nWorkingDirectory=/opt/deepfence\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable deepfence-agent.service\nsystemctl start deepfence-agent.service\nsystemctl status deepfence-agent.service\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Cloud Scanner Module\nDESCRIPTION: Defines a Terraform module to deploy Deepfence Cloud Scanner on AWS ECS.  It configures various parameters such as the Deepfence Management Console URL, API key, image version, CPU and memory allocation, and IAM role.  It utilizes the deepfence/cloud-scanner/aws module from the Terraform registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.8.0\"\n  name                          = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url              = \"<Console URL>\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence key>\"\n  # AWS Account Name (Optional, for easy identification)\n  account_name                  = \"\"\n  image                         = \"quay.io/deepfenceio/cloud_scanner_ce:2.4.0\"\n  # Task CPU Units (Default: 4 vCPU)\n  cpu                           = \"4096\"\n  # Task Memory (Default: 8 GB)\n  memory                        = \"8192\"\n  # Task Ephemeral Storage (Default: 100 GB)\n  ephemeral_storage             = \"100\"\n  # Task role: Must be either arn:aws:iam::aws:policy/SecurityAudit or arn:aws:iam::aws:policy/ReadOnlyAccess\n  task_role                     = \"arn:aws:iam::aws:policy/SecurityAudit\"\n  debug_logs                    = false\n  # Use existing VPC (Optional)\n  use_existing_vpc              = false\n  # VPC ID (If use_existing_vpc is set to true)\n  existing_vpc_id               = \"\"\n  # List of VPC Subnet IDs (If use_existing_vpc is set to true)\n  existing_vpc_subnet_ids       = []\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n  # AWS region: Example: us-east-1\n  region                        = \"us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n  # Optional: To refresh the cloud resources every hour, provide CloudTrail Trail ARNs (Management events with write-only or read-write).\n  # If empty, a trail with management events will be automatically chosen if available.\n  # e.g.: [\"arn:aws:cloudtrail:us-east-1:123456789012:trail/aws-events\"]\n  cloudtrail_trails             = []\n}\n```\n\n----------------------------------------\n\nTITLE: Push Images to DockerHub\nDESCRIPTION: Tags and pushes the Deepfence container images to a DockerHub repository.  Replace `myorg` with your DockerHub account name.  Assumes you are logged in to Docker.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/build.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_agent_ce \\\n    deepfence_api_ce \\\n    deepfence_diagnosis_ce \\\n    deepfence_discovery_ce \\\n    deepfence_elastic_ce \\\n    deepfence_fetcher_ce \\\n    deepfence_init_ce \\\n    deepfence_postgres_ce \\\n    deepfence_redis_ce \\\n    deepfence_router_ce \\\n    deepfence_ui_ce \\\n    deepfence_vulnerability_mapper_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Terraform commands to deploy Cloud Scanner\nDESCRIPTION: These are the terraform commands to initialize, plan, and apply the terraform configuration to deploy Cloud Scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images\nDESCRIPTION: Removes unused Docker images from the system. This command helps free up disk space by deleting images that are no longer associated with any containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Add User to Docker Group (Bash)\nDESCRIPTION: Adds the current user to the docker group. This allows the user to run docker commands without using sudo. A new shell or `su $USER` is required for the group change to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Kubernetes using Helm\nDESCRIPTION: Deploys a ThreatMapper sensor agent in a Kubernetes cluster using Helm. This command adds the Deepfence Helm repository, updates the repository, shows the default values for the deepfence-agent chart, and installs the chart with customized values. It requires Helm to be installed and configured to connect to the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.3.1 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Stop Deepfence Management Console (Bash)\nDESCRIPTION: Navigates to the `deployment-scripts` directory and uses `docker-compose` to stop the Deepfence Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Customizing Client with Event Hooks (Python)\nDESCRIPTION: This Python code demonstrates customizing the ThreatMapper client with event hooks for logging requests and responses.  It uses the `httpx_args` parameter to configure the underlying `httpx` client. It requires defining `log_request` and `log_response` functions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n    httpx_args={\"event_hooks\": {\"request\": [log_request], \"response\": [log_response]}},\n)\n```\n\n----------------------------------------\n\nTITLE: Terraform Deployment Commands\nDESCRIPTION: These commands initialize, plan, and apply the Terraform configuration to deploy the Cloud Scanner.  `terraform init` initializes the Terraform working directory. `terraform plan` shows the changes that will be applied. `terraform apply` applies the changes to create the resources in Azure.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Docker: Copy and execute pre-upgrade script\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script to the Neo4j Docker container and then execute it. This prepares the Neo4j database for the upgrade process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/upgrade-from-v2.1.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp pre-upgrade-to-v5.sh deepfence-neo4j:/startup\ndocker exec deepfence-neo4j /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Single Project GCP Cloud Scanner\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner in a single Google Cloud project. It requires specifying the source module, version, name, management console URL, Deepfence API key, image name, project ID, and region. Optional parameters include VPC network details for private IP console connections.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.4.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.1.1\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"2\"\n  memory              = \"4096Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform for Single Azure Subscription\nDESCRIPTION: This Terraform configuration snippet is used to deploy the Deepfence Cloud Scanner on an Azure Container Instance for a single Azure subscription. It requires the Azure provider to be configured with a subscription ID.  The module `cloud-scanner_example_single-subscription` configures the necessary resources, including the management console URL, Deepfence API key, container image, and location. You must replace the placeholder values with your actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_single-subscription\" {\n  source              = \"deepfence/cloud-scanner/azure//examples/single-subscription\"\n  version             = \"0.9.1\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                = \"deepfence-cloud-scanner\"\n  image               = \"quay.io/deepfenceio/cloud_scanner_ce:THREATMAPPER_VERSION\"\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location            = \"eastus\"\n  # Number of CPU cores (Default: 2 vCPU)\n  cpu                 = \"2\"\n  # Memory in GB (Default: 4 GB)\n  memory              = \"4\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner on GCP Cloud Run (Single Project) Terraform\nDESCRIPTION: This Terraform module configures and deploys the Cloud Scanner on GCP Cloud Run for a single project. It requires specifying the region, ThreatMapper console URL, Deepfence API key, and other optional parameters such as project name and VPC settings. Ensure to replace placeholder values with your actual configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.8.0\"\n  name                = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url    = \"<Console URL>\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key>\"\n  # GCP Project Name (Optional, for easy identification)\n  project_name        = \"\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce:2.4.0\"\n  # project_id example: dev1-123456\n  project_id          = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region              = \"<REGION_ID>\"\n  # Optional for private ip console\n  # Name of vpc network in which the management console was deployed\n  vpc                 = \"\"\n  # Optional for private ip console\n  # IP CIDR range for the connector to above vpc\n  # Example: 11.0.0.0/28\n  ip_cidr_range_svpca = \"\"\n  cpu                 = \"2\"\n  memory              = \"4096Mi\"\n  labels              = {\n    name = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This snippet showcases how to list hosts using the ThreatMapper API.  It assumes you have an authenticated client. Replace `YOUR_CONSOLE_URL` and `YOUR_REFRESH_TOKEN` with the actual values and `/path/to/certificate_bundle.pem` with your actual certificate bundle if SSL is enabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPX Client Directly\nDESCRIPTION: This snippet demonstrates setting the httpx client directly, overriding existing settings like the `base_url`.  It creates a new `httpx.Client` instance with a specified base URL and proxy, then sets it as the httpx client for the ThreatMapper client.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom threatmapper import Client\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n)\n# Note that base_url needs to be re-set, as would any shared cookies, headers, etc.\nclient.set_httpx_client(httpx.Client(base_url=\"YOUR_CONSOLE_URL\", proxies=\"YOUR_PROXY_URL\"))\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository\nDESCRIPTION: Adds the Deepfence Helm repository to the Helm configuration. This repository contains the Helm charts required to install the ThreatMapper Console and other Deepfence components in a Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n```\n\n----------------------------------------\n\nTITLE: Stop Deepfence Management Console - Bash\nDESCRIPTION: Navigates to the `deployment-scripts` directory and uses `docker-compose` to stop the Deepfence Management Console.  This assumes that the services were started using the same `docker-compose.yml` file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts with Filters - Python\nDESCRIPTION: This snippet shows how to list hosts using the Threatmapper API with specific filters. It constructs a payload dictionary to filter active hosts and retrieve them. The function then separates the hosts into agent-running and discovered hosts and prints their node IDs. It depends on the `search_hosts` API and `SearchSearchNodeReq` model.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef list_hosts():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       agent_host_list = []\n       discovered_host_list = []\n       for host in hosts:\n           # If agent is running inside hosts\n           if host.agent_running:\n               agent_host_list.append(host.node_id)\n           else:\n              discovered_host_list.append(host.node_id)\n       print(agent_host_list, discovered_host_list)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Neo4j Configuration in docker-compose.yml (YAML)\nDESCRIPTION: This snippet configures the connection to a Neo4j AuraDB instance by setting environment variables in the `docker-compose.yml` file.  It defines the username, password, host, and port for the Neo4j database.  The `NEO4J_AUTH` variable combines the username and password.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_NEO4J_USER: neo4j\n    DEEPFENCE_NEO4J_PASSWORD: <password>\n    NEO4J_AUTH: neo4j/<password>\n    DEEPFENCE_NEO4J_BOLT_PORT: 7687\n    DEEPFENCE_NEO4J_HOST: abcdefgh.databases.neo4j.io\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on AKS (Single Subscription)\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner as a pod within an Azure Kubernetes Service (AKS) cluster for a single subscription. It retrieves information about the AKS cluster and current subscription and uses it to configure the Cloud Scanner deployment. The configuration also supports specifying the Deepfence API key, console URL, and cloud scanner image.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"< AKS CLUSTER NAME >\"\n  resource_group_name = \"<AKS CLUSTER RESOURCE GROUP>\"\n}\n\nmodule \"cloud-scanner\" {\n  source                     = \"deepfence/cloud-scanner/azure//examples/aks\"\n  version                    = \"0.7.0\"\n  name                       = \"<name of the app>\"\n  mgmt-console-url           = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  deepfence-key              = \"<DEEPFENCE API KEY>\"\n  # ThreatMapper\n  cloud_scanner_image        = \"quay.io/deepfenceio/cloud_scanner_ce\"\n  # ThreatStryker\n  # cloud_scanner_image      = \"quay.io/deepfenceio/cloud_scanner\"\n  location                   = \"< LOCATION >\"\n  subscription_id            = data.azurerm_subscription.current.subscription_id\n  aks_host                   = data.azurerm_kubernetes_cluster.default.kube_config.0.host\n  aks_client_key             = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_key)\n  aks_client_certificate     = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)\n  aks_cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)\n}\n```\n\n----------------------------------------\n\nTITLE: Fargate Application Environment Variables Configuration (JSON)\nDESCRIPTION: This JSON snippet configures the environment variables for the application container running on AWS Fargate.  It includes API key, management console URL, serverless flag, log level, user defined tags, installation directory, console schema, and port. The placeholders `<deepfence-key>` and `<MGMT_CONSOLE_URL>` should be replaced with actual values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"environment\": [\n        {\n            \"name\": \"DEEPFENCE_KEY\",\n            \"value\": \"<deepfence-key>\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL\",\n            \"value\": \"<MGMT_CONSOLE_URL>\"\n        },\n        {\n            \"name\": \"DF_SERVERLESS\",\n            \"value\": \"true\"\n        },\n        {\n            \"name\": \"DF_LOG_LEVEL\",\n            \"value\": \"info\"\n        },\n        {\n            \"name\": \"USER_DEFINED_TAGS\",\n            \"value\": \"\"\n        },\n        {\n            \"name\": \"DF_INSTALL_DIR\",\n            \"value\": \"/deepfence\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_URL_SCHEMA\",\n            \"value\": \"https\"\n        },\n        {\n            \"name\": \"MGMT_CONSOLE_PORT\",\n            \"value\": \"443\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreatMapper Client\nDESCRIPTION: This snippet demonstrates how to initialize the ThreatMapper client with the base URL of the ThreatMapper console. Replace `YOUR_CONSOLE_URL` with the actual URL of your ThreatMapper instance.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\nclient = Client(base_url=\"YOUR_CONSOLE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Fine-tune Router Helm Chart\nDESCRIPTION: Retrieves the default values of the `deepfence-router` Helm chart, saves them to a file, and then installs the chart using the modified values file. This allows for customizing the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.1.1 > deepfence_router_values.yaml\n\n# Make the changes in this file and save\nvim deepfence_router_values.yaml\n\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Vulnerability Scan Pipeline (Declarative)\nDESCRIPTION: This Jenkinsfile demonstrates a declarative pipeline for vulnerability scanning using Threatmapper. It provides an example of how to integrate the vulnerability scanning process into a declarative Jenkins pipeline. Refer to 'vulnerabilities_declarative_pipeline.Jenkinsfile' for the full code.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/ci-cd-integrations/jenkins/README.md#_snippet_1\n\nLANGUAGE: Jenkinsfile\nCODE:\n```\nPlease refer to 'vulnerabilities_declarative_pipeline.Jenkinsfile' for the full code.\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variables\nDESCRIPTION: Example Docker Compose environment variables for configuring the Deepfence Cloud Scanner.  These variables include console details, Deepfence key, cloud provider information, Azure credentials, and other settings. Update the placeholders with the actual values for your environment. `ORGANIZATION_DEPLOYMENT: true` is required for multi-tenant deployments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.4.0\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"azure\"\n  CLOUD_REGION: \"<LOCATION>\"\n  CLOUD_ACCOUNT_ID: \"<SUBSCRIPTION_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"<SUBSCRIPTION_ID>\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"<TENANT_ID>\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"\"\n\n  AZURE_TENANT_ID: \"<TENANT_ID>\"\n  AZURE_REGION: \"<LOCATION>\"\n  AZURE_CLIENT_ID: \"<CLIENT_ID>\"\n  AZURE_CLIENT_SECRET: \"<CLIENT_SECRET>\"\n  AZURE_SUBSCRIPTION_ID: \"<SUBSCRIPTION_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Tokens (Async)\nDESCRIPTION: This code demonstrates how to obtain access and refresh tokens from the ThreatMapper API using a regular (non-authenticated) client, performing an asynchronous request. It creates a client with SSL disabled and sends an API authentication request with the API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n\n# SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n# OR\n# SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def get_access_refresh_token_async():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = await auth_token.asyncio(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = await auth_token.asyncio_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response = json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Export Elasticsearch and PostgreSQL Data (Shell)\nDESCRIPTION: These commands export Elasticsearch and PostgreSQL data from the current management console. It creates a directory for the export, then uses Docker to run scripts to export the data.  Environment variables specify connection details. Prerequisites: Docker.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir deepfence_export\ncd deepfence_export\n\ndocker run --net=host --rm=true --name=elasticsearch-backup \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/es-export.sh \\\n  -e EXPORT_ELASTICSEARCH_MAPPING=\"false\" \\\n  -e ELASTICSEARCH_SCHEME=\"http\" \\\n  -e ELASTICSEARCH_HOST=\"127.0.0.1\" \\\n  -e ELASTICSEARCH_PORT=\"9200\" \\\n  -e ELASTICSEARCH_USER=\"\" \\\n  -e ELASTICSEARCH_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:latest\n\ndocker run --net=host --rm=true --name=postgresql-backup \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/pg-export.sh \\\n  -e POSTGRES_DB_HOST=\"127.0.0.1\" \\\n  -e POSTGRES_DB_PORT=\"5432\" \\\n  -e POSTGRES_DB_NAME=users \\\n  -e POSTGRES_DB_USERNAME=\"\" \\\n  -e POSTGRES_DB_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:latest\n```\n\n----------------------------------------\n\nTITLE: Copying File to PostgreSQL Docker Container\nDESCRIPTION: This command copies the PostgreSQL backup file named 'pg_data.dump' from the host machine to the root directory of the running 'deepfence-postgres' Docker container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp pg_data.dump deepfence-postgres:/\n```\n\n----------------------------------------\n\nTITLE: Deploying ThreatMapper Agent with Podman\nDESCRIPTION: Deploys the Deepfence ThreatMapper agent as a Podman container, similar to Docker.  Podman system service (API service) should be running before deploying the sensor. It includes similar configurations for resources, restart policies, networking, volumes, and environment variables.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo podman run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /run/podman/podman.sock:/run/podman/podman.sock \\\n    -v /run/systemd/:/run/systemd/ \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    docker.io/deepfenceio/deepfence_agent_ce:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Start ThreatMapper Management Console with Docker Compose\nDESCRIPTION: This command starts the ThreatMapper Management Console using Docker Compose. The `-d` flag runs the containers in detached mode (in the background).  It requires docker compose to be installed and the docker-compose.yml file to be present in the current directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server in docker-compose.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to configure the file server settings in the `docker-compose.yml` file for Deepfence Management Console when using an external S3 compatible file server (S3, MinIO, SeaweedFS). It sets environment variables for the bucket names, external file server flag, host, port, user, password, secure connection flag and region.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n        # public bucket with read permissions on objects for hosting vulnerability database\n        # S3 bucket permissions {\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"database\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"s3:GetObject\",\"Resource\":[\"arn:aws:s3:::<bucket-name>/database/*\",\"arn:aws:s3:::<bucket-name>/database\"]}]}\n        DEEPFENCE_FILE_SERVER_DB_BUCKET: database\n        # private bucket to host reports, sbom, etc.\n        DEEPFENCE_FILE_SERVER_BUCKET: default\n        # If using S3 or other external file server (MinIO/SeaweedFS), set this to true\n        DEEPFENCE_FILE_SERVER_EXTERNAL: \"true\"\n        # set s3.amazonaws.com if using s3 buckets\n        DEEPFENCE_FILE_SERVER_HOST: 123.123.123.123\n        DEEPFENCE_FILE_SERVER_PORT: 8080\n        # uncomment to set access key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_USER: fileserveruser\n        # uncomment to set secret key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_PASSWORD: changeme\n        # set true if https\n        DEEPFENCE_FILE_SERVER_SECURE: \"false\"\n        # set aws s3 bucket region if using s3 buckets\n        DEEPFENCE_FILE_SERVER_REGION: \"\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Images to DockerHub (Bash)\nDESCRIPTION: This script pushes the Deepfence ThreatMapper images to a DockerHub repository.  It first logs in to DockerHub, then iterates through a list of images, tags each image with the user's DockerHub account and the 'latest' tag, and finally pushes each tagged image to DockerHub. Requires docker.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_redis_ce \\\n    deepfence_postgres_ce \\\n    deepfence_kafka_broker_ce \\\n    deepfence_router_ce \\\n    deepfence_file_server_ce \\\n    deepfence_server_ce \\\n    deepfence_worker_ce \\\n    deepfence_ui_ce \\\n    deepfence_agent_ce \\\n    deepfence_cluster_agent_ce \\\n    deepfence_package_scanner_ce \\\n    deepfence_malware_scanner_ce \\\n    deepfence_secret_scanner_ce \\\n    deepfence_neo4j_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on AKS Cluster for a single Subscription\nDESCRIPTION: This Terraform configuration deploys Deepfence Cloud Scanner on an Azure Kubernetes Service (AKS) cluster to monitor a single subscription. The configuration retrieves the subscription ID and AKS cluster details, then deploys the cloud scanner as a pod. It requires specifying the management console URL, Deepfence API key, and location.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"< AKS CLUSTER NAME >\"\n  resource_group_name = \"<AKS CLUSTER RESOURCE GROUP>\"\n}\n\nmodule \"cloud-scanner\" {\n  source                     = \"deepfence/cloud-scanner/azure//examples/aks\"\n  version                    = \"0.8.0\"\n  name                       = \"<name of the app>\"\n  mgmt-console-url           = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  deepfence-key              = \"<DEEPFENCE API KEY>\"\n  # ThreatMapper\n  cloud_scanner_image        = \"quay.io/deepfenceio/cloud_scanner_ce\"\n  # ThreatStryker\n  # cloud_scanner_image      = \"quay.io/deepfenceio/cloud_scanner\"\n  location                   = \"< LOCATION >\"\n  subscription_id            = data.azurerm_subscription.current.subscription_id\n  aks_host                   = data.azurerm_kubernetes_cluster.default.kube_config.0.host\n  aks_client_key             = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_key)\n  aks_client_certificate     = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.client_certificate)\n  aks_cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.default.kube_config.0.cluster_ca_certificate)\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Single Project Cloud Scanner\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner for a single GCP project. It defines the required GCP service account and project ID, using the deepfence/cloud-scanner module. The 'name' variable specifies the name of the service account, and the 'project_id' should be replaced with the actual GCP project ID.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\nmodule \"cloud_scanner_example_single_project\" {\n  source     = \"deepfence/cloud-scanner/gcp//examples/gce-vm\"\n  version    = \"0.7.2\"\n  # gcp service account name\n  name       = \"deepfence-cloud-scanner\"\n  # project_id example: dev1-123456\n  project_id = \"<PROJECT_ID>\"\n}\n\noutput \"service_account_email\" {\n  value = module.cloud_scanner_example_single_project.service_account_email\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes TLS Configuration - YAML\nDESCRIPTION: This snippet shows how to configure TLS certificates for the Deepfence UI in a Kubernetes environment. It describes two options: using an existing TLS secret or embedding the certificate and key directly in the values file. It assumes Helm is used for deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/initial-configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  # Use custom ssl certificate for Deepfence UI\n  # custom certificates can be configured using two options\n  # existing secret or base64 encoded cert and key string\n  # provide one off the two options to configure custom certificates\n  tls:\n    # provide secret name which contains tls cert and key\n    # reference: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets\n    # make sure to create secret in the same namespace as that of the console\n    secretName: \"\"\n    # embed given cert and key as secret and mount to router pod\n    # provide certificate and key in below example format\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL\n      .....\n      BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89\n      .....\n      bHEvWp7ugCTFhurM+lla0d+ElDO2\n      -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Proxy\nDESCRIPTION: This JSON configures Docker to use a proxy server for all HTTP and HTTPS traffic.  It specifies the proxy server address and a list of hosts/networks that should bypass the proxy.  The configuration should be added to `~/.docker/config.json`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/docker.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"\"\n            }\n    },\n    \"HttpHeaders\": {\n        \"User-Agent\": \"Docker-Client/19.03.1 (linux)\"\n    },\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://111.111.111.111:8006\",\n            \"httpsProxy\": \"http://111.111.111.111:8006\",\n            \"noProxy\": \"localhost,127.0.0.1\"\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner with docker-compose.yaml\nDESCRIPTION: This YAML configuration snippet defines the environment variables for the Deepfence Cloud Scanner. It sets parameters such as the management console URL and port, Deepfence key, cloud provider, region, account IDs, organization details, and other settings related to audit logging and scanning policies. Users must replace the placeholder values with their actual configuration values. Newlines are escaped to keep valid json.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:THREATMAPPER_VERSION\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"aws\"\n  CLOUD_REGION: \"<REGION>\"\n  ENABLED_CLOUD_REGIONS: \"\"\n  CLOUD_ACCOUNT_ID: \"<ROOT_ACCOUNT_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: true\n  CLOUD_ORGANIZATION_ID: \"<ROOT_ACCOUNT_ID>\"\n  ROLE_NAME: \"<ROLE_NAME>\"\n  CLOUD_AUDIT_LOGS_ENABLED: \"false\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"arn:aws:iam::aws:policy/SecurityAudit\"\n```\n\n----------------------------------------\n\nTITLE: Listing Containers Asynchronously\nDESCRIPTION: This snippet demonstrates how to list containers using the ThreatMapper API asynchronously. It constructs a request payload, calls the search_containers endpoint using asyncio, and then iterates through the results to print container IDs and names. It handles potential exceptions related to unexpected API status codes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_containers\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def list_containers():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       containers = await search_containers.asyncio(client=client,json_body=json_body)\n       for container in containers:\n          print(container.node_id, container.node_name)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_containers-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Install Router via Helm\nDESCRIPTION: Installs the Deepfence Router in a Kubernetes cluster using Helm, utilizing a customized values.yaml file.  The router is used to enable external access to the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Import useCurrentSidebarCategory Hook MDX\nDESCRIPTION: Imports the useCurrentSidebarCategory hook from the '@docusaurus/theme-common' module. This hook is used to access the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/index.md#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This code defines a function to list hosts using the ThreatMapper API. It constructs a payload dictionary to filter hosts and retrieve their information. The function uses the `search_hosts.sync` to make a synchronous API call, then processes the response to separate agent-running hosts from discovered hosts, and prints the lists.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef list_hosts():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       agent_host_list = []\n       discovered_host_list = []\n       for host in hosts:\n           # If agent is running inside hosts\n           if host.agent_running:\n               agent_host_list.append(host.node_id)\n           else:\n              discovered_host_list.append(host.node_id)\n       print(agent_host_list, discovered_host_list)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing, Planning, and Applying Terraform Configuration\nDESCRIPTION: This set of commands initializes the Terraform working directory, creates an execution plan, and applies the changes described in the plan to deploy the Cloud Scanner. This assumes that a cloud-scanner.tf file with the Terraform configuration has already been created and populated.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Start Deepfence Management Console - Bash\nDESCRIPTION: Navigates to the `deployment-scripts` directory within the ThreatMapper repository and uses `docker-compose` to start the Deepfence Management Console in detached mode. This command assumes a `docker-compose.yml` file is present in the specified directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated ThreatMapper Client with API Key\nDESCRIPTION: This snippet initializes an authenticated ThreatMapper client using an API key for accessing protected endpoints. Replace `YOUR_CONSOLE_URL` with the ThreatMapper console URL and `Api Key` with your actual API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"Api Key\")\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Template for Cross-Account ECR IAM Role\nDESCRIPTION: This CloudFormation template creates an IAM role in the target ECR registry account with the necessary permissions to allow access from another AWS account. The role is designed to provide pull permissions to the ECR registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/registries/aws-ecr.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n[deepfence-cross-acc-ecr-role-setup.template](https://deepfence-public.s3.amazonaws.com/cross-account-ecr/deepfence-ecr-role-setup.template)\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed TLS Certificates using OpenSSL (Bash)\nDESCRIPTION: This snippet generates a self-signed SSL/TLS certificate and key using OpenSSL. The generated files are placed in the `/etc/deepfence/certs` directory, which is the default location for the ThreatMapper Management Console to look for custom TLS certificates. After generating the certificates, the management console is restarted using docker-compose to apply the changes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Provide the SSL key and cert, for example, using OpenSSL to create a self-signed pair\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n\n# restart the management console to use the new TLS certificate\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server in values.yaml for Kubernetes (YAML)\nDESCRIPTION: This snippet shows how to configure the file server settings in the `values.yaml` file for Kubernetes deployment. It disables the creation of a file server StatefulSet and specifies the name of an existing secret, along with the external file server host and port.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nfileserver:\n  # Specifies whether a file server instance should be created\n  # set this to false if using S3\n  create: false\n  # if create false provide name of the existing secret.\n  # Secret format refer templates/deepfence-console-secrets/s3.yaml\n  secretName: \"deepfence-console-secrets-fileserver\"\n      \n  # Set this if external file server is used and create=false\n  fileServerHost: \"123.123.123.123\"\n  fileServerPort: \"8080\"\n```\n\n----------------------------------------\n\nTITLE: IAM Role Trust Policy for ECS Tasks (JSON)\nDESCRIPTION: Defines the trust policy for the IAM role assumed by ECS tasks. It allows the ECS tasks service to assume this role. Requires the AWS account ID. This is a prerequisite for giving the ECS tasks permissions to access other AWS resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ecs-tasks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Token (Sync)\nDESCRIPTION: This snippet demonstrates how to retrieve access and refresh tokens using the regular `Client` in a synchronous manner.  It includes both SSL enabled and disabled examples.  Replace `YOUR_CONSOLE_URL` and `YOUR_API_KEY` with the correct values and `/path/to/certificate_bundle.pem` with the actual path to your certificate bundle if SSL is enabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n# Regular Client SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n#OR\n# Regular Client SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef get_access_refresh_token_sync():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = auth_token.sync(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = auth_token.sync_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response =  json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_sync->: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Agent Deployment\nDESCRIPTION: This snippet removes the deepfence-agent deployment from the specified Kubernetes namespace. It utilizes the helm delete command for uninstalling the chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Async)\nDESCRIPTION: This code demonstrates the asynchronous version of refreshing an access token. It uses auth_token_refresh.asyncio and auth_token_refresh.asyncio_detailed to perform a non-blocking token refresh, handling potential exceptions during the process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\nimport json\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def refresh_token_async():\n    try:\n        #  If we want minified response\n        res = await auth_token_refresh.asyncio(client=client)\n        print(res.access_token, res.refresh_token)\n        #  If we want Detailed response\n        res = await auth_token_refresh.asyncio_detailed(client=client)\n        if res.status_code == 200:\n           json_response = json.loads(res.content.decode(\"utf-8\"))\n           print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n        else:\n            raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting Deepfence Auth Key (YAML)\nDESCRIPTION: Configuration snippet for setting the Deepfence authentication key in the values.yaml file.  Requires the values.yaml file to be created first. The deepfenceKey parameter is the API key obtained from the Deepfence management console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Auth: Get deepfence api key from UI -> Settings -> User Management\ndeepfenceKey: \"\"\n```\n\n----------------------------------------\n\nTITLE: ThreatMapper API Endpoints\nDESCRIPTION: These are the API endpoints for ThreatMapper. They allow users to interact with the ThreatMapper console programmatically to enumerate nodes and run scans.  Replace `<CONSOLE_URL>` with the actual URL of your ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/tips/automating-scans.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTPX Client with Event Hooks\nDESCRIPTION: This example shows how to customize the underlying `httpx.Client` used by the ThreatMapper client by adding event hooks for logging requests and responses.  It defines functions to log request and response details and passes them as event hooks to the `httpx_args` parameter during client initialization.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n    httpx_args={\"event_hooks\": {\"request\": [log_request], \"response\": [log_response]}},\n)\n\n# Or get the underlying httpx client to modify directly with client.get_httpx_client() or client.get_async_httpx_client()\n```\n\n----------------------------------------\n\nTITLE: Copy Backup Files (Shell)\nDESCRIPTION: This command creates a copy of the backup files.  This step is part of Elasticsearch migration procedure. Prerequisites: Existing deepfence_backup directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ../\ncp -r deepfence_backup deepfence_backup_copy\ncd deepfence_backup\n```\n\n----------------------------------------\n\nTITLE: Check Deepfence Agent Logs Command\nDESCRIPTION: This command uses journalctl to display the logs for the deepfence-agent.service.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/linux-host.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo journalctl -u deepfence-agent.service\n```\n\n----------------------------------------\n\nTITLE: Display Post-Installation DocCardList (MDX)\nDESCRIPTION: This snippet renders a DocCardList component, filtering the sidebar items to exclude those whose label includes 'Installation' or 'Troubleshooting'. This displays documentation links related to tasks that need to be done after the installation of the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/index.md#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: Import and Render DocCardList component with mdx-code-block\nDESCRIPTION: This code snippet imports DocCardList and useCurrentSidebarCategory components from Docusaurus theming libraries. It then uses JSX to render a DocCardList, populating it with items from the current sidebar category. This allows dynamic generation of a card list within the Docusaurus documentation based on the current sidebar context.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/installation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Check Pod Status in Kubernetes\nDESCRIPTION: This command retrieves the status of the pods in the specified namespace (deepfence-console) and watches for changes. It's used to verify that the ThreatMapper console pods have started up successfully.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace deepfence-console -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token Asynchronously with AuthenticatedClient\nDESCRIPTION: This example demonstrates how to refresh an access token asynchronously using an AuthenticatedClient. It creates an AuthenticatedClient with a refresh token, calls the `auth_token_refresh.asyncio` or `auth_token_refresh.asyncio_detailed` function, and prints the new access and refresh tokens.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\nimport json\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def refresh_token_async():\n    try:\n        #  If we want minified response\n        res = await auth_token_refresh.asyncio(client=client)\n        print(res.access_token, res.refresh_token)\n        #  If we want Detailed response\n        res = await auth_token_refresh.asyncio_detailed(client=client)\n        if res.status_code == 200:\n           json_response = json.loads(res.content.decode(\"utf-8\"))\n           print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n        else:\n            raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting httpx Client Directly\nDESCRIPTION: This snippet demonstrates how to directly set the underlying `httpx` client of the ThreatMapper client. Note that doing so will override any existing settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom threatmapper import Client\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n)\n# Note that base_url needs to be re-set, as would any shared cookies, headers, etc.\nclient.set_httpx_client(httpx.Client(base_url=\"YOUR_CONSOLE_URL\", proxies=\"YOUR_PROXY_URL\"))\n```\n\n----------------------------------------\n\nTITLE: Check Deepfence Router Service Status\nDESCRIPTION: This command checks the status of the Deepfence router service in the deepfence-console namespace. The `-w` flag watches for changes, which helps in determining when the cloud platform has deployed an external load balancer.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -w deepfence-router --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Install Metrics Server Kubernetes\nDESCRIPTION: This command applies a YAML configuration file to install the metrics server in the Kubernetes cluster. The metrics server is optional but recommended for monitoring resource usage. It fetches the configuration from the Kubernetes SIGs GitHub repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Execute Neo4j DB Restore Script\nDESCRIPTION: This command executes the load_backup_neo4j.sh script to restore a Neo4j database from a backup file located within the neo4j Docker container.  `/<BACKUP_FILE>` specifies the path to the backup file inside the container.  Example file name is `/neo4j_backup_2023-11-17_10-25-28`\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /<BACKUP_FILE>\n```\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /neo4j_backup_2023-11-17_10-25-28\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList in mdx-code-block for post-installation\nDESCRIPTION: Imports the DocCardList component and the useCurrentSidebarCategory hook for use in an MDX code block. This renders a list of documentation cards based on the current sidebar category, filtering to exclude items with 'Installation' or 'Troubleshooting' in their label, showing post-installation tasks.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Echo Server from Values File\nDESCRIPTION: Installs the flask-echo-server Helm chart using a custom values file.  Requires Helm to be installed and the values.yaml file to be configured.  The -f parameter specifies the path to the custom values file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f flask_echo_server_values.yaml flask-echo-server flask-echo-server\n```\n\n----------------------------------------\n\nTITLE: Execute Postgres DB Import Script\nDESCRIPTION: This command executes the pg-import.sh script within the postgres Docker container to restore a database backup. It takes the path to the backup file within the container as an argument (/pg_data.dump in the example).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/pg-import.sh /pg_data.dump\n```\n\n----------------------------------------\n\nTITLE: Deploy Console with Docker Compose (Bash)\nDESCRIPTION: Deploys the management console using Docker Compose, overriding the default image repository with a custom one. It requires the user to log in to their Docker Hub account. The ACC variable should be set to the user's Docker Hub account name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Token Synchronously\nDESCRIPTION: This example shows how to obtain access and refresh tokens synchronously using a regular ThreatMapper client.  It disables or enables SSL verification.  It creates a ModelApiAuthRequest, calls the `auth_token.sync` or `auth_token.sync_detailed` function, and prints the tokens.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n# Regular Client SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n#OR\n# Regular Client SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef get_access_refresh_token_sync():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = auth_token.sync(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = auth_token.sync_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response =  json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_sync->: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Terraform: Single Project Cloud Scanner on GCP\nDESCRIPTION: This Terraform configuration sets up a single-project Cloud Scanner on a GCP Compute Instance using a service account. It defines the module source, version, name, and project ID. The output provides the service account email.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"google_client_config\" \"current\" {}\n\nmodule \"cloud_scanner_example_single_project\" {\n  source     = \"deepfence/cloud-scanner/gcp//examples/gce-vm\"\n  version    = \"0.9.1\"\n  # gcp service account name\n  name       = \"deepfence-cloud-scanner\"\n  # project_id example: dev1-123456\n  project_id = \"<PROJECT_ID>\"\n}\n\noutput \"service_account_email\" {\n  value = module.cloud_scanner_example_single_project.service_account_email\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Inline Policy for Secrets Manager and KMS Access (JSON)\nDESCRIPTION: Defines an inline policy for the IAM role granting permissions to access the Deepfence API key stored in AWS Secrets Manager and to decrypt the key using a custom KMS key, if one is used. Requires the ARN of the Secrets Manager secret and the KMS key.  The Deepfence agent requires these permissions to retrieve and decrypt the API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"kms:Decrypt\",\n        \"secretsmanager:GetSecretValue\"\n      ],\n      \"Resource\": [\n        \"<API_KEY_SECRET_ARN>\",\n        \"<custom_kms_key_arn>\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding KMS Key Permissions to IAM Role (Optional)\nDESCRIPTION: Adds KMS key permissions to the IAM role if a custom KMS key is used for encrypting the secret in Secrets Manager. If using the default KMS key, this step is not necessary.  This snippet requires the ARN of both the Secrets Manager secret and the custom KMS key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:Decrypt\",\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": [\n                \"<API_KEY_SECRET_ARN>\",\n                \"<custom_kms_key_arn>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Access & Refresh Token (Sync)\nDESCRIPTION: This code snippet shows how to obtain access and refresh tokens using a regular Threatmapper client synchronously. It creates a ModelApiAuthRequest with an API key and uses the auth_token API to fetch the tokens, handling potential errors.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n# Regular Client SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n#OR\n# Regular Client SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef get_access_refresh_token_sync():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = auth_token.sync(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = auth_token.sync_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response =  json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_sync->: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner for Single Project GCP\nDESCRIPTION: This Terraform module configures the Cloud Scanner for a single project in Google Cloud Platform. It requires specifying the source module, version, name, management console URL, management console port, Deepfence key, image name, project ID, and region.  Optionally, it allows configuring connection to a private IP console on a VPC by specifying the VPC name and IP CIDR range.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/gcp.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/single-project\"\n  version             = \"0.3.0\"\n  name                = \"deepfence-cloud-scanner\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:1.5.0\"\n  project_id          = \"<PROJECT_ID>; ex. dev1-123456\"\n  region              = \"<REGION_ID>; ex. asia-east1\"\n  #optional for private ip console\n  vpc                 = \"<VPC Network Name>; Name of vpc network in which the console exists\"\n  #optional for private ip console\n  ip_cidr_range_svpca = \"<11.0.0.0/28> IP CIDR range for the connector to above vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Verification (Python)\nDESCRIPTION: This Python code initializes an authenticated ThreatMapper client with SSL certificate verification.  The `base_url` parameter should be set to the URL of your ThreatMapper console, the `token` parameter should be set to your API key, and the `verify_ssl` parameter should be set to the path of your certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Console\nDESCRIPTION: Deletes the ThreatMapper Console and Router using Helm. It removes the `deepfence-router` and `deepfence-console` deployments from the `deepfence-console` namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router -n deepfence-console\nhelm delete deepfence-console -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPX Client Directly\nDESCRIPTION: This code demonstrates how to directly set the underlying httpx client used by the Threatmapper client.  This allows full control over the HTTP client configuration, but requires manually setting the base URL and other relevant settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom threatmapper import Client\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n)\n# Note that base_url needs to be re-set, as would any shared cookies, headers, etc.\nclient.set_httpx_client(httpx.Client(base_url=\"YOUR_CONSOLE_URL\", proxies=\"YOUR_PROXY_URL\"))\n```\n\n----------------------------------------\n\nTITLE: Restart Docker Daemon\nDESCRIPTION: This command restarts the Docker daemon. This is necessary for the proxy settings in `~/.docker/config.json` to take effect.  Requires sudo privileges.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList Component (MDX)\nDESCRIPTION: Imports the DocCardList component from the '@theme/DocCardList' module. This component is used to dynamically generate a list of documentation cards, likely links to other documentation pages.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Export PostgreSQL Database\nDESCRIPTION: This snippet exports a PostgreSQL database using a Docker container. It creates a directory, then runs a Docker container that executes a script to export the database to the specified directory. Environment variables define database connection parameters. Ensure that the backup image version is compatible with your Deepfence setup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir deepfence_export\ncd deepfence_export\n\ndocker run --net=host --rm=true --name=postgresql-backup \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/pg-export.sh \\\n  -e POSTGRES_DB_HOST=\"127.0.0.1\" \\\n  -e POSTGRES_DB_PORT=\"5432\" \\\n  -e POSTGRES_DB_NAME=users \\\n  -e POSTGRES_DB_USERNAME=\"\" \\\n  -e POSTGRES_DB_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:2.1.1\n```\n\n----------------------------------------\n\nTITLE: Deploying Deepfence Console with Internal Registry using Docker Compose\nDESCRIPTION: This snippet uses Docker Compose to deploy the Deepfence console using the images from the internal registry. The IMAGE_REPOSITORY environment variable must be set to the internal registry address.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/air-gapped.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv IMAGE_REPOSITORY=127.0.0.1:5000 docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Bash: Create Directory and Download docker-compose.yaml\nDESCRIPTION: This bash script creates a directory named 'deepfence-cloud-scanner', navigates into it, and downloads the docker-compose.yaml file from the specified URL using wget.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.5/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Resetting Password in Docker\nDESCRIPTION: This command executes a password reset script within a running Deepfence ThreatMapper Docker container. It uses `docker exec` to run the `/usr/local/bin/deepfence_server --reset-password` command inside the container named `deepfence-server`. This is used when SMTP/SES is not configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-server bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Run ThreatMapper Agent in Docker with Custom Image\nDESCRIPTION: This command deploys the ThreatMapper agent as a Docker container. It sets various parameters such as CPU usage, restart policy, network mode, log driver, and volume mounts. It also defines environment variables for the management console URL, port, and Deepfence API key. The command utilizes a custom Docker image specified by the $ACC variable.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    $ACC/deepfence_agent_ce:2.0.1\n```\n\n----------------------------------------\n\nTITLE: ThreatMapper Container Architecture Details\nDESCRIPTION: This code snippet provides details about the deployed ThreatMapper containers, including their commands and port mappings. This is crucial for understanding how the different components communicate and function within the architecture.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/index.md#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\nNAME                  COMMAND                                                                PORTS                                                                                  \ndeepfence-ui          \"/home/deepfence/entrypoint.sh\"                                                                                                                               \ndeepfence-celery      \"/app/code/dockerify/celery/entrypoint.sh\"                                                                                                                    \ndeepfence-api         \"/app/code/dockerify/api/entrypoint.sh\"                                                                                                                       \ndeepfence-backend     \"/app/code/dockerify/backend/entrypoint.sh\"                                                                                                                   \ndeepfence-fetcher     \"/usr/bin/start_fetcher.sh\"                                            8001-8002/tcp, 8006/tcp                                                                \ndeepfence-router      \"docker-entrypoint.sh haproxy -f /usr/local/etc/haproxy/haproxy.cfg\"   0.0.0.0:80->80/tcp, :::80->80/tcp, 0.0.0.0:443->443/tcp, :::443->443/tcp               \ndeepfence-discovery   \"/home/deepfence/entrypoint.sh discovery localhost 8004\"                                                                                                      \ndeepfence-postgres    \"docker-entrypoint.sh postgres\"                                        5432/tcp                                                                               \ndeepfence-redis       \"/usr/local/bin/startRedis.sh redis-server\"                            6379/tcp                                                                               \ndeepfence-topology    \"/home/deepfence/entrypoint.sh topology\"                               0.0.0.0:8004->8004/tcp, :::8004->8004/tcp                                              \ndeepfence-diagnosis   \"/home/diagnosis\"                                                                                                                                             \ndeepfence-es-master   \"/usr/bin/startEs.sh elasticsearch\"                                    0.0.0.0:9200->9200/tcp, :::9200->9200/tcp, 0.0.0.0:9300->9300/tcp, :::9300->9300/tcp    \n```\n\n----------------------------------------\n\nTITLE: Terraform Module Configuration - Single Project (GKE)\nDESCRIPTION: This Terraform module configures the Cloud Scanner for a single Google Cloud project using a GKE cluster with workload identity. It includes the source, version, and parameters like `gke_host`, `gke_token`, `mgmt-console-url`, `deepfence-key`, image details, project ID, and region.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/gcp.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud_scanner_example_single_project\" {\n  source                     = \"deepfence/cloud-scanner/gcp//examples/gke\"\n  version                    = \"0.9.1\"\n  gke_host                   = \"https://${data.google_container_cluster.target_cluster.endpoint}\"\n  gke_token                  = data.google_client_config.current.access_token\n  gke_cluster_ca_certificate = base64decode(data.google_container_cluster.target_cluster.master_auth[0].cluster_ca_certificate,)\n  name                       = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url           = \"<Console URL>\"\n  deepfence-key              = \"<Deepfence-key>\"\n  image_name                 = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud_scanner_ce\"\n  image_tag                  = \"THREATMAPPER_VERSION\"\n  # project_id example: dev1-123456\n  project_id                 = \"<PROJECT_ID>\"\n  # region example: asia-east1\n  region                     = \"<REGION_ID>\"\n  # target gke cluster to deploy cloud scanner\n  cluster_name               = \"<TARGET GKE CLUSTER NAME>\"\n  # target gke cluster location\n  cluster_location           = \"<TARGET GKE CLUSTER LOCATION>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Open Files Limit in Amazon Linux/RHEL\nDESCRIPTION: This snippet shows how to configure the maximum number of open files for Docker daemon and containers in Amazon Linux/RHEL by modifying the `/etc/sysconfig/docker` file. The `DAEMON_MAXFILES` variable sets the system-wide limit, while the `OPTIONS` variable configures the default ulimit for new containers using the `--default-ulimit` flag. The file requires root permissions to modify and Docker daemon needs to be restarted to implement the changes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Verification\nDESCRIPTION: This example shows how to initialize an authenticated client with SSL verification using a custom certificate bundle. The `verify_ssl` parameter is set to the path of the certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList Component MDX\nDESCRIPTION: Imports the DocCardList component from the '@theme/DocCardList' module. This component is used to dynamically generate a list of documentation cards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client Disabling SSL Verification\nDESCRIPTION: This snippet demonstrates how to disable SSL certificate verification. While it allows communication with servers using self-signed certificates, it introduces a significant security risk and should only be used in controlled environments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Import Elasticsearch and PostgreSQL Data (Shell)\nDESCRIPTION: These commands import Elasticsearch and PostgreSQL data into the new management console. It uses Docker to run scripts for importing the data, using the exported files from the previous console. Environment variables specify connection details. Prerequisites: Elasticsearch and PostgreSQL export files.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --net=host --rm=true --name=elasticsearch-restore \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/es-import.sh \\\n  -e IMPORT_ELASTICSEARCH_MAPPING=\"false\" \\\n  -e ELASTICSEARCH_SCHEME=\"http\" \\\n  -e ELASTICSEARCH_HOST=\"127.0.0.1\" \\\n  -e ELASTICSEARCH_PORT=\"9200\" \\\n  -e ELASTICSEARCH_USER=\"\" \\\n  -e ELASTICSEARCH_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:latest\n\ndocker run --net=host --rm=true --name=postgresql-restore \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/pg-import.sh \\\n  -e POSTGRES_DB_HOST=\"127.0.0.1\" \\\n  -e POSTGRES_DB_PORT=\"5432\" \\\n  -e POSTGRES_DB_NAME=users \\\n  -e POSTGRES_DB_USERNAME=\"\" \\\n  -e POSTGRES_DB_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:latest\n```\n\n----------------------------------------\n\nTITLE: Install Helm Chart with Values File\nDESCRIPTION: Installs the Deepfence console Helm chart using a custom values file (`deepfence_console_values.yaml`).  The chart is installed with the name `deepfence-console` in the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version TM_CONSOLE_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Listing Containers ASYNC - Python\nDESCRIPTION: This snippet demonstrates how to asynchronously list containers using the Threatmapper API with specified filters. It creates a payload dictionary, sends it to the `search_containers` API via an async call, and prints the node ID and name of each container. This function relies on the `search_containers` API and the `SearchSearchNodeReq` model.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync def list_containers():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       containers = await search_containers.asyncio(client=client,json_body=json_body)\n       for container in containers:\n          print(container.node_id, container.node_name)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_containers-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Router TLS Configuration with Embedded Certificate and Key\nDESCRIPTION: This YAML snippet demonstrates how to configure TLS for the Deepfence Router in Kubernetes by embedding the certificate and key directly in the values file.  This is useful for simple setups where creating a separate secret is not necessary.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/initial-configuration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    cert: |-\n      -----BEGIN CERTIFICATE-----\n      MIIFCTCCAvGgAwIBAgIUNshy8GFTjfUR7inZ1JCcN+tDuh4wDQYJKoZIhvcNAQEL\n      .....\n      BMepE4d9+TQFcPQ/OKSlP8FB2nPKZJdM+JlXDFWqeKvbdYS4QErRLd33qUmq\n      -----END CERTIFICATE-----\n    key: |-\n      -----BEGIN PRIVATE KEY-----\n      MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQDECeUraonCz/89\n      .....\n      bHEvWp7ugCTFhurM+lla0d+ElDO2\n      -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Get Service Details\nDESCRIPTION: Retrieves the service information (name, namespace) using kubectl.  This is a prerequisite to determine service type and obtain access details.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get service -n {{ .Values.namespace }} {{ .Values.service.name }}\n```\n\n----------------------------------------\n\nTITLE: Fargate Entrypoint and Command Configuration (JSON)\nDESCRIPTION: This JSON snippet configures both the entrypoint and command for the application container on AWS Fargate.  The `entryPoint` is set to the ThreatMapper agent entrypoint, while the `command` specifies the application's entrypoint and its arguments. Proper quoting of the command elements is required.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-fargate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n    ],\n    \"command\": [\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Cloud Scanner on Azure Container Instance for multiple Subscriptions\nDESCRIPTION: This Terraform configuration deploys Deepfence Cloud Scanner on Azure Container Instance to monitor multiple subscriptions within a tenant. It requires specifying the subscription ID for the deployment, management console details, Deepfence API key, a list of subscription IDs to monitor, location, and resource configurations for CPU and memory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"azurerm\" {\n  features {}\n  # Subscription ID to deploy the Azure Container Service\n  subscription_id = \"<SUBSCRIPTION_ID eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX>\"\n}\n\nmodule \"cloud-scanner_example_tenant-subscriptions\" {\n  source                  = \"deepfence/cloud-scanner/azure//examples/tenant-subscriptions\"\n  version                 = \"0.8.0\"\n  mgmt-console-url        = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port       = \"<Console port> eg. 443\"\n  deepfence-key           = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                    = \"deepfence-cloud-scanner\"\n  image                   = \"quay.io/deepfenceio/cloud_scanner_ce:2.4.0\"\n  # List of subscription ids to monitor\n  subscription_ids_access = [\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\", \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"]\n  # Location name https://gist.github.com/ausfestivus/04e55c7d80229069bf3bc75870630ec8#results\n  location                = \"eastus\"\n  # Number of CPU cores (Default: 4 vCPU)\n  cpu                     = \"4\"\n  # Memory in GB (Default: 8 GB)\n  memory                  = \"8\"\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts with ThreatMapper API\nDESCRIPTION: This snippet demonstrates how to retrieve a list of hosts from the ThreatMapper API. It constructs a payload dictionary with filter configurations and sends it to the `search_hosts` API endpoint. The function then iterates through the results, distinguishing between hosts where the agent is running and those where it's not.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef list_hosts():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       agent_host_list = []\n       discovered_host_list = []\n       for host in hosts:\n           # If agent is running inside hosts\n           if host.agent_running:\n               agent_host_list.append(host.node_id)\n           else:\n              discovered_host_list.append(host.node_id)\n       print(agent_host_list, discovered_host_list)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Remove ThreatMapper components Kubernetes\nDESCRIPTION: Removes the ThreatMapper Console and Router using Helm delete command. This will uninstall the helm charts for router and console respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router\nhelm delete deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Show Router Helm Chart Values\nDESCRIPTION: Extracts the default values from the Deepfence router Helm chart and saves them to a file named `deepfence_router_values.yaml`. This file will be modified to customize the router deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-router --version TM_ROUTER_HELM_CHART_VERSION > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Getting Access & Refresh Token (Sync Python)\nDESCRIPTION: This Python code demonstrates how to retrieve access and refresh tokens using the regular ThreatMapper client in a synchronous manner. It uses the `auth_token.sync` and `auth_token.sync_detailed` methods. SSL verification can be enabled or disabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n# Regular Client SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n#OR\n# Regular Client SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef get_access_refresh_token_sync():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = auth_token.sync(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = auth_token.sync_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response =  json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_sync->: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Client SSL Enabled\nDESCRIPTION: This code snippet demonstrates how to initialize an AuthenticatedClient object with SSL verification enabled.  It requires the base URL, refresh token, and path to the certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Enabled - Python\nDESCRIPTION: This snippet demonstrates how to initialize an AuthenticatedClient object with SSL verification enabled. It requires the base URL, refresh token, and the path to the certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Service for Agents - YAML\nDESCRIPTION: This YAML snippet configures whether to create a separate Kubernetes service for agents.  This is useful for deploying an external load balancer for browser access and an internal load balancer for agent communication.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# User can create separate k8s service for agents if required.\n# One use case for this is to deploy external load balancer for browser access and internal load balancer for agent communication.\ncreateSeparateServiceForAgents: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Run Neo4j Restore Script\nDESCRIPTION: This command executes the restore script within the Neo4j container. It loads the specified backup file into the Neo4j database. Replace /<BACKUP_FILE> with the actual path and filename of your backup within the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/database-export-import.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /<BACKUP_FILE>\n```\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /neo4j_backup_2023-11-17_10-25-28\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variables Configuration\nDESCRIPTION: This YAML snippet shows the environment variables that need to be configured in the `docker-compose.yaml` file. These variables include the management console URL, Deepfence key, cloud provider details, Azure account credentials, and other settings for the cloud scanner.  It's crucial to update these values for your specific environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:THREATMAPPER_VERSION\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"azure\"\n  CLOUD_REGION: \"<LOCATION>\"\n  CLOUD_ACCOUNT_ID: \"<SUBSCRIPTION_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"<SUBSCRIPTION_ID>\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"<TENANT_ID>\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"\"\n\n  AZURE_TENANT_ID: \"<TENANT_ID>\"\n  AZURE_REGION: \"<LOCATION>\"\n  AZURE_CLIENT_ID: \"<CLIENT_ID>\"\n  AZURE_CLIENT_SECRET: \"<CLIENT_SECRET>\"\n  AZURE_SUBSCRIPTION_ID: \"<SUBSCRIPTION_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Configure Neo4j connection in docker-compose.yml\nDESCRIPTION: This YAML snippet configures the connection parameters for Neo4j in the docker-compose.yml file. It sets the username, password, host, and port for the Neo4j database. Replace <password> with the actual password for your Neo4j instance. Requires a running Neo4j instance, such as Neo4j AuraDB.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/managed-database.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_NEO4J_USER: neo4j\n    DEEPFENCE_NEO4J_PASSWORD: <password>\n    NEO4J_AUTH: neo4j/<password>\n    DEEPFENCE_NEO4J_BOLT_PORT: 7687\n    DEEPFENCE_NEO4J_HOST: abcdefgh.databases.neo4j.io\n```\n\n----------------------------------------\n\nTITLE: Fetching Docusaurus Site Metadata\nDESCRIPTION: This JavaScript function retrieves the site metadata from the Docusaurus context. It uses the `useDocusaurusContext` hook to access the global Docusaurus context and returns the `siteMetadata` object, which contains information about the site.  This can include various settings and data related to the site build and deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function siteMetadata() {\n  const {siteConfig, siteMetadata} = useDocusaurusContext();\n  return siteMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Install OpenEBS storage Kubernetes\nDESCRIPTION: Installs OpenEBS storage in the openebs namespace using Helm. This command creates the openebs namespace and then uses helm to install the openebs chart from the specified repository, disabling analytics.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create ns openebs\nhelm install openebs --namespace openebs --repo \"https://openebs.github.io/charts\" openebs --set analytics.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Install Kubernetes Metrics Server\nDESCRIPTION: Installs the Kubernetes Metrics Server if it is not already installed. The metrics server collects resource usage data from the kubelets and makes it available to the Kubernetes API.  The YAML manifest is applied directly from the official GitHub repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes\nDESCRIPTION: Removes unused Docker volumes from the system, freeing up disk space. This is an optional step after removing the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Delete Deepfence Console and Router\nDESCRIPTION: These commands delete the Deepfence router and console Helm releases from the specified Kubernetes namespace. This removes the ThreatMapper console and its associated resources from the cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router -n deepfence-console\nhelm delete deepfence-console -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Display Troubleshooting Docs MDX\nDESCRIPTION: Uses the DocCardList component to display a list of documentation cards filtered to include only those with labels containing the word \"Troubleshooting\". It leverages the useCurrentSidebarCategory hook to get the current sidebar category's items.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/index.md#_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Execute post-upgrade script (Kubernetes)\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script inside the Neo4j pod in Kubernetes. This is executed after upgrading to the new release and waiting for initial setup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/upgrade-from-v2.1.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Install sqlc with Brew\nDESCRIPTION: This command installs sqlc on macOS using the Homebrew package manager. Homebrew must be installed prior to running this command.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_utils/postgresql/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install sqlc\n```\n\n----------------------------------------\n\nTITLE: Start Cloud Scanner with Docker Compose\nDESCRIPTION: This command starts the cloud scanner using Docker Compose in detached mode. It reads the configuration from the `docker-compose.yaml` file and runs the necessary containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: AWS Fargate Container Image Name\nDESCRIPTION: Specifies the Docker image used for the Deepfence agent sidecar container in an AWS Fargate task definition. The image is pulled from Docker Hub and uses a specific version tag.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/aws-fargate.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker.io/deepfenceio/deepfence_fargate_agent_ce:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Create Custom values.yaml for Deepfence Console (Bash)\nDESCRIPTION: Generates a default `deepfence_console_values.yaml` file which will be edited to replace the image repository and customize the helm installation. The version specified should align with available versions on the helm repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-console --version 2.2.2 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Entrypoint and Command (JSON)\nDESCRIPTION: This JSON snippet shows an alternative approach to invoking the ThreatMapper agent in Fargate by separating the ThreatMapper entrypoint into the `entryPoint` field and the application's entrypoint and arguments into the `command` field. It offers flexibility in configuring the startup sequence. The values `customer-entry-point.sh`, `param1`, and `param2` should be replaced with the application's actual entrypoint and arguments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-fargate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n    ],\n    \"command\": [\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GCR Registry\nDESCRIPTION: This code snippet demonstrates how to add a Google Container Registry (GCR) using the Threatmapper API. It creates a FormDataModelRegistryGCRAddReq object with the registry details and the service account JSON file, and then uses the add_registry_gcr.sync method to add the registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.types import File\nfrom threatmapper.api.registry import add_registry_gcr\nfrom threatmapper.models import FormDataModelRegistryGCRAddReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef add_gcr_registry():\n    try:\n       name = 'Google Registry'\n       registry_url = 'YOUR_REGISTRY_URL'\n       service_account_json = File(payload=open('/path/to/json','rb'), mime_type=\"application/json\", file_name=\"service.json\")\n       multipart_data=FormDataModelRegistryGCRAddReq(name=name, registry_url=registry_url, service_account_json=service_account_json)\n       response = add_registry_gcr.sync(client=client, multipart_data=multipart_data)\n       print(response.message)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Terraform: Single Subscription Cloud Scanner on Azure\nDESCRIPTION: Terraform configuration for deploying a single subscription cloud scanner on an Azure virtual machine.  It defines the Azure provider, fetches subscription details, and uses a module to create the necessary infrastructure.  The module outputs the tenant ID, client ID, and client secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/azure.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"azurerm\" {\n  subscription_id = \"<SUBSCRIPTION_ID>\"\n  features {}\n}\n\ndata \"azurerm_subscription\" \"current\" {}\n\nmodule \"infrastructure_cloud-scanner-app\" {\n  source                  = \"deepfence/cloud-scanner/azure//modules/infrastructure/cloud-scanner-app\"\n  version                 = \"0.8.0\"\n  name                    = \"deepfence-cloud-scanner\"\n  subscription_ids_access = [data.azurerm_subscription.current.subscription_id]\n}\n\noutput \"tenant_id\" {\n  value = module.infrastructure_cloud-scanner-app.tenant_id\n}\n\noutput \"client_id\" {\n  value = module.infrastructure_cloud-scanner-app.client_id\n}\n\noutput \"client_secret\" {\n  value     = module.infrastructure_cloud-scanner-app.client_secret\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Sync)\nDESCRIPTION: This code snippet demonstrates how to refresh an access token using an authenticated client, performing a synchronous request. It initializes an authenticated client using a refresh token and then calls the `auth_token_refresh.sync` or `auth_token_refresh.sync_detailed` function to refresh the token.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n# OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\",\n                             verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef refresh_token_sync():\n   try:\n      #  If we want minified response\n      res = auth_token_refresh.sync(client=client)\n      print(res.access_token, res.refresh_token)\n      #  If we want Detailed response\n      res = auth_token_refresh.sync_detailed(client=client)\n      if res.status_code == 200:\n         json_response = json.loads(res.content.decode(\"utf-8\"))\n         print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n      else:\n         raise Exception(\"\")\n   except UnexpectedStatus as e:\n      print(\"Exception when calling refresh_token_sync-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Async)\nDESCRIPTION: This snippet shows how to refresh an access token using the `AuthenticatedClient` in an asynchronous context. It utilizes the refresh token for authentication and provides examples with and without SSL verification. Replace `YOUR_CONSOLE_URL` and `YOUR_REFRESH_TOKEN` with your actual console URL and refresh token, and `/path/to/certificate_bundle.pem` with the path to your certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\nimport json\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def refresh_token_async():\n    try:\n        #  If we want minified response\n        res = await auth_token_refresh.asyncio(client=client)\n        print(res.access_token, res.refresh_token)\n        #  If we want Detailed response\n        res = await auth_token_refresh.asyncio_detailed(client=client)\n        if res.status_code == 200:\n           json_response = json.loads(res.content.decode(\"utf-8\"))\n           print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n        else:\n            raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml with wget\nDESCRIPTION: Downloads the docker-compose.yml file from the Deepfence ThreatMapper repository. This file is used to define and manage the Docker containers for the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.3/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Run Docker Compose for Cloud Scanner\nDESCRIPTION: This command starts the Cloud Scanner using Docker Compose in detached mode. It reads the configuration from the `docker-compose.yaml` file and creates the necessary containers in the background.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Monitor OpenEBS Pods\nDESCRIPTION: Monitors the status of OpenEBS pods in the `openebs` namespace. This is done to ensure that the pods start up correctly after the OpenEBS installation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -o wide --namespace openebs -w\n```\n\n----------------------------------------\n\nTITLE: Restart Docker Service\nDESCRIPTION: This command restarts the Docker daemon after modifying the proxy configuration. This is necessary for the changes to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Running Neo4j Restore Script\nDESCRIPTION: This script imports the Neo4j database from a backup file. It needs to be run from inside the `deepfence-neo4j` container. It uses the backup file, and `<BACKUP_FILE>` needs to be replaced with the actual backup filename, including the leading `/`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /<BACKUP_FILE>\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images\nDESCRIPTION: Removes unused Docker images from the system. This command frees up disk space by deleting images that are no longer associated with any containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Uninstall Deepfence Agent Script\nDESCRIPTION: This script is generated and used to uninstall the Deepfence agent. It stops and disables the deepfence-agent systemd service, removes the service file, and deletes the /opt/deepfence directory. It doesn't require any specific parameters.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/linux-host.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nsystemctl stop deepfence-agent.service\nsystemctl disable deepfence-agent.service\nrm -f /etc/systemd/system/deepfence-agent.service\nrm -rf /opt/deepfence\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client\nDESCRIPTION: This code initializes the ThreatMapper AuthenticatedClient. It sets the base URL, token, and SSL verification settings. SSL can be enabled or disabled by setting verify_ssl to either a file path or False. Ensure to replace placeholders with your actual console URL, token, and certificate path.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Threatmapper Client with API Key\nDESCRIPTION: This snippet shows how to create an authenticated Threatmapper client using an API key.  The AuthenticatedClient is initialized with the base URL and the API key, enabling secure access to protected API endpoints.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"Api Key\")\n```\n\n----------------------------------------\n\nTITLE: Showing Helm Chart Values\nDESCRIPTION: Displays the default values for the flask-echo-server Helm chart and saves them to a file named flask_echo_server_values.yaml. Requires Helm to be installed.  The output file can then be modified to customize the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values flask-echo-server > flask_echo_server_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server in docker-compose.yml (YAML)\nDESCRIPTION: This snippet configures the connection parameters for an external S3 compatible file server within the docker-compose.yml file. It sets the bucket names, external flag, host, port, secure flag, and region for the file server.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n        # public bucket with read permissions on objects for hosting vulnerability database\n        # S3 bucket permissions {\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"database\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"s3:GetObject\",\"Resource\":[\"arn:aws:s3:::<bucket-name>/database/*\",\"arn:aws:s3:::<bucket-name>/database\"]}]}\n        DEEPFENCE_FILE_SERVER_DB_BUCKET: database\n        # private bucket to host reports, sbom, etc.\n        DEEPFENCE_FILE_SERVER_BUCKET: default\n        # If using S3 or other external file server (MinIO/SeaweedFS), set this to true\n        DEEPFENCE_FILE_SERVER_EXTERNAL: \"true\"\n        # set s3.amazonaws.com if using s3 buckets\n        DEEPFENCE_FILE_SERVER_HOST: 123.123.123.123\n        DEEPFENCE_FILE_SERVER_PORT: 8080\n        # uncomment to set access key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_USER: fileserveruser\n        # uncomment to set secret key if using s3 buckets\n        # DEEPFENCE_FILE_SERVER_PASSWORD: changeme\n        # set true if https\n        DEEPFENCE_FILE_SERVER_SECURE: \"false\"\n        # set aws s3 bucket region if using s3 buckets\n        DEEPFENCE_FILE_SERVER_REGION: \"\"\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Container Runtime\nDESCRIPTION: This snippet retrieves the container runtime used by the Kubernetes nodes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Get Container Runtime Info - Kubernetes\nDESCRIPTION: This command retrieves the container runtime version running on each node in the Kubernetes cluster. It uses `kubectl` to query the node information and formats the output to show the node name and the container runtime version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml - Bash\nDESCRIPTION: This command downloads the docker-compose.yml file from the specified URL. This file contains the configuration for the ThreatMapper Management Console Docker containers and is essential for deploying the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-1.5/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Remove ThreatMapper Console - Bash\nDESCRIPTION: This command stops and removes the ThreatMapper Management Console containers. This effectively uninstalls the console from the Docker host.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Reset Password - Docker\nDESCRIPTION: This command executes the password reset script within a running Docker container named `deepfence-server`. It assumes that the container has bash installed and the deepfence_server executable is located in `/usr/local/bin/`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-server bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Console and Router\nDESCRIPTION: These commands delete the ThreatMapper console and router deployments from the specified namespace, uninstalling the management console from the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router -n deepfence-console\nhelm delete deepfence-console -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Tokens (Sync)\nDESCRIPTION: This code demonstrates how to obtain access and refresh tokens from the ThreatMapper API using a regular (non-authenticated) client, performing a synchronous request. It disables SSL verification for the client and sends an API authentication request with the provided API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n# Regular Client SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n#OR\n# Regular Client SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef get_access_refresh_token_sync():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = auth_token.sync(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = auth_token.sync_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response =  json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_sync->: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Create Directory and Download Docker Compose File\nDESCRIPTION: These commands create a directory named `deepfence-cloud-scanner`, navigate into it, and download the `docker-compose.yaml` file from the specified URL using `wget`. This file is used to configure and run the cloud scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/azure.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.5/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client (SSL Enabled)\nDESCRIPTION: This snippet shows how to initialize an authenticated ThreatMapper client with SSL verification enabled, using the AuthenticatedClient class. It requires the base URL, refresh token, and the path to the certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n```\n\n----------------------------------------\n\nTITLE: Resetting Password in Kubernetes\nDESCRIPTION: This command executes a password reset script within a running Deepfence ThreatMapper pod in Kubernetes. It uses `kubectl exec` to run the `/usr/local/bin/deepfence_server --reset-password` command inside the `server` container of the `deepfence-console-server` deployment in the `deepfence-console` namespace. This method is for use if the SMTP/SES service is not set up.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/troubleshooting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-console-server \\\n  -c server \\\n  --namespace deepfence-console \\\n  -- bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Installing Flask Echo Server with Deepfence Agent\nDESCRIPTION: Installs the flask-echo-server Helm chart with the Deepfence agent, setting the management console IP address. Requires Helm to be installed.  The managementConsoleIp parameter specifies the IP address of the Deepfence management console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install flask-echo-server flask-echo-server \\\n    --set managementConsoleIp=40.40.40.40\n```\n\n----------------------------------------\n\nTITLE: Bash: Create Directory and Download Docker Compose\nDESCRIPTION: This bash script creates a directory named 'deepfence-cloud-scanner', navigates into it, and downloads the docker-compose.yaml file from the specified URL using wget. This script assumes wget is installed on the system.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/gcp.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.3/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Show Helm Chart Values\nDESCRIPTION: This command displays the default values of the specified Helm chart. This allows you to inspect the configurable parameters and their default values. The output is redirected to a file for later modification.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version TM_CONSOLE_HELM_CHART_VERSION > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding GCR Registry\nDESCRIPTION: This snippet demonstrates how to add a Google Container Registry (GCR) using the ThreatMapper API. It requires a service account JSON file for authentication. Replace `YOUR_CONSOLE_URL`, `YOUR_REFRESH_TOKEN`, `/path/to/json`, and `YOUR_REGISTRY_URL` with appropriate values, and `/path/to/certificate_bundle.pem` if SSL is enabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.types import File\nfrom threatmapper.api.registry import add_registry_gcr\nfrom threatmapper.models import FormDataModelRegistryGCRAddReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef add_gcr_registry():\n    try:\n       name = 'Google Registry'\n       registry_url = 'YOUR_REGISTRY_URL'\n       service_account_json = File(payload=open('/path/to/json','rb'), mime_type=\"application/json\", file_name=\"service.json\")\n       multipart_data=FormDataModelRegistryGCRAddReq(name=name, registry_url=registry_url, service_account_json=service_account_json)\n       response = add_registry_gcr.sync(client=client, multipart_data=multipart_data)\n       print(response.message)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n      \n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Sensor\nDESCRIPTION: This snippet removes the deployed deepfence-agent Helm chart from the specified namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Copying Neo4j DB Backup to Container\nDESCRIPTION: This command copies a Neo4j backup file (represented by `<BACKUP_FILE>`) from the host machine into the root directory of the `deepfence-neo4j` Docker container. This step is necessary for importing the backed-up database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/database-export-import.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp <BACKUP_FILE> deepfence-neo4j:/\n```\n\n----------------------------------------\n\nTITLE: Access Neo4j Docker Container Shell\nDESCRIPTION: Opens a bash shell within the running Neo4j Docker container, allowing execution of commands directly inside the container's environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-neo4j /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment\nDESCRIPTION: These shell commands initialize, plan, and apply the Terraform configuration to deploy the Cloud Scanner.  The `terraform init` command initializes the Terraform environment. The `terraform plan` command creates an execution plan. The `terraform apply` command then executes the plan and provisions the resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Adding GCR Registry\nDESCRIPTION: This snippet shows how to add a Google Container Registry (GCR) using the ThreatMapper API. It creates an AuthenticatedClient, constructs a FormDataModelRegistryGCRAddReq object, and calls the `add_registry_gcr.sync` function to add the registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.types import File\nfrom threatmapper.api.registry import add_registry_gcr\nfrom threatmapper.models import FormDataModelRegistryGCRAddReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef add_gcr_registry():\n    try:\n       name = 'Google Registry'\n       registry_url = 'YOUR_REGISTRY_URL'\n       service_account_json = File(payload=open('/path/to/json','rb'), mime_type=\"application/json\", file_name=\"service.json\")\n       multipart_data=FormDataModelRegistryGCRAddReq(name=name, registry_url=registry_url, service_account_json=service_account_json)\n       response = add_registry_gcr.sync(client=client, multipart_data=multipart_data)\n       print(response.message)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Reset Password in Docker Container (Shell)\nDESCRIPTION: This snippet provides the command to reset the password for Deepfence ThreatMapper when running in a Docker container. It executes the deepfence_server --reset-password command within the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-server bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Stop and Remove ThreatMapper Management Console\nDESCRIPTION: This command stops and removes the containers defined in the docker-compose.yml file.  It effectively uninstalls the ThreatMapper Management Console from the Docker host.  The docker-compose.yml file must be present in the current directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Deploying Sensor Agents in Kubernetes\nDESCRIPTION: This snippet provides instructions for deploying the ThreatMapper sensor agent in a Kubernetes cluster using Helm. It involves adding the Deepfence Helm repository, showing the values file, modifying the values, and then installing the chart.  Ensure to update the image name and clusterAgentImageName to point to your custom images, and set the correct managementConsoleUrl and deepfenceKey.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\nhelm show values deepfence/deepfence-agent --version 1.5.0 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 1.5.0\n```\n\n----------------------------------------\n\nTITLE: Install Router Helm Chart with Values File\nDESCRIPTION: Installs the Deepfence router Helm chart using a custom values file (`deepfence_router_values.yaml`).  The chart is installed with the name `deepfence-router` in the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version TM_ROUTER_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Fine-tune Deepfence Agent Helm Deployment\nDESCRIPTION: These commands show how to fine-tune the Deepfence Agent Helm deployment. It involves adding the Deepfence Helm repository, fetching the default values to a YAML file, customizing the values, and then installing the chart with the customized values. This allows for more granular control over the deployment configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\nhelm show values deepfence/deepfence-agent --version 1.5.0 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 1.5.0\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Documentation Cards\nDESCRIPTION: Renders a list of documentation cards specifically for troubleshooting the Management Console. The DocCardList component displays the filtered items from the current sidebar category where the label includes 'Troubleshooting'.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/index.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This MDX code snippet imports DocCardList and useCurrentSidebarCategory from the docusaurus theme. It is used to dynamically generate a list of documentation cards based on the current sidebar category. It displays documentation cards for each item in the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/installation.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Listing Containers ASYNC\nDESCRIPTION: This code defines an asynchronous function to list containers using the ThreatMapper API. It constructs a payload dictionary similar to the host listing function and retrieves container information using `search_containers.asyncio`. It then iterates through the containers, printing the container ID and name. This function demonstrates asynchronous API calls.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync def list_containers():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       containers = await search_containers.asyncio(client=client,json_body=json_body)\n       for container in containers:\n          print(container.node_id, container.node_name)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_containers-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Installing Management Console with Helm\nDESCRIPTION: This command installs the Deepfence Management Console using the Helm chart, using a customized values file (deepfence_console_values.yaml). It specifies the chart name (deepfence-console), the chart location (deepfence/deepfence-console), and a specific chart version (1.5.2).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version 1.5.2\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console using Helm\nDESCRIPTION: This command installs the ThreatMapper console using the Helm package manager.  It configures the image tag, storage class, and namespace for the console deployment. The specific version is set to 2.0.2, and image tag to 2.0.1.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\n# helm show values deepfence/deepfence-console --version 2.0.2 | less\n\nhelm install deepfence-console deepfence/deepfence-console \\\n    --set global.imageTag=2.0.1 \\\n    --set global.storageClass=gp3 \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.0.2\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Storage Class\nDESCRIPTION: Retrieves the available storage classes in the Kubernetes cluster. This is used to identify a suitable storage class for persistent volumes, depending on the cloud provider (e.g., AWS gp3, GCP standard).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Run Neo4j Backup Script\nDESCRIPTION: This command executes the backup script within the Neo4j container. The script creates a backup of the Neo4j database within the container's filesystem.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/backup_neo4j.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with Disabled SSL Verification\nDESCRIPTION: This snippet demonstrates how to initialize an authenticated ThreatMapper client with SSL certificate verification disabled. Disabling SSL verification is a security risk and should only be used in specific, controlled environments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Remove deepfence-file-server Service (YAML)\nDESCRIPTION: This YAML snippet removes the `deepfence-file-server` service definition from `docker-compose.yml`. This is done when an external file server (like S3) is being used, preventing the local Deepfence file server from being deployed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n      deepfence-file-server:\n        container_name: deepfence-file-server\n```\n\n----------------------------------------\n\nTITLE: Push Images to DockerHub (bash)\nDESCRIPTION: This script pushes the Deepfence ThreatMapper images to a DockerHub repository.  It iterates through a list of images, tags them with the specified DockerHub account name, and then pushes them to the repository. Requires Docker to be installed and configured, and the user to be logged in.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_redis_ce \\\n    deepfence_postgres_ce \\\n    deepfence_kafka_broker_ce \\\n    deepfence_router_ce \\\n    deepfence_file_server_ce \\\n    deepfence_server_ce \\\n    deepfence_worker_ce \\\n    deepfence_ui_ce \\\n    deepfence_agent_ce \\\n    deepfence_cluster_agent_ce \\\n    deepfence_package_scanner_ce \\\n    deepfence_malware_scanner_ce \\\n    deepfence_secret_scanner_ce \\\n    deepfence_neo4j_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Setting httpx Client Directly (Python)\nDESCRIPTION: This Python code demonstrates setting the underlying `httpx` client directly on the ThreatMapper client. This allows for full customization of the HTTP client, but requires manually setting the `base_url` and other settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom threatmapper import Client\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n)\n# Note that base_url needs to be re-set, as would any shared cookies, headers, etc.\nclient.set_httpx_client(httpx.Client(base_url=\"YOUR_CONSOLE_URL\", proxies=\"YOUR_PROXY_URL\"))\n```\n\n----------------------------------------\n\nTITLE: Check ThreatMapper Console Pod Status\nDESCRIPTION: This command checks the status of the ThreatMapper console pods in the deepfence-console namespace. The `-w` flag watches for changes until the pods are running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace deepfence-console -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Token Asynchronously\nDESCRIPTION: This example shows how to obtain access and refresh tokens asynchronously using a regular ThreatMapper client.  It disables or enables SSL verification. It creates a ModelApiAuthRequest, calls the `auth_token.asyncio` or `auth_token.asyncio_detailed` function, and prints the tokens.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n\n# SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n# OR\n# SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def get_access_refresh_token_async():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = await auth_token.asyncio(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = await auth_token.asyncio_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response = json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deploy Sensor Agent on Kubernetes with Helm\nDESCRIPTION: Deploys a ThreatMapper sensor agent on a Kubernetes cluster using Helm. It adds the Deepfence Helm repository, updates the repository, shows the default values for the deepfence-agent chart, updates the necessary values in the 'deepfence_agent_values.yaml' file, and installs the chart using the specified values file, namespace, and version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-agent.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.1.1 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   image:name and image:clusterAgentImageName - change the account to point to your images\n#   managementConsoleUrl and deepfenceKey - specify your IP and API key value\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client\nDESCRIPTION: This snippet shows how to initialize the AuthenticatedClient, both with SSL verification enabled and disabled. It requires a base URL, a refresh token, and optionally, a path to a certificate bundle for SSL verification.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n#  Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n```\n\n----------------------------------------\n\nTITLE: Fine-tune ThreatMapper Agent Helm Deployment\nDESCRIPTION: This snippet demonstrates how to customize the deepfence-agent Helm deployment by modifying the values.yaml file. It retrieves the default values, allows for editing, and then installs the chart using the modified file. Key parameters to update include the management console URL and API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version 2.1.1 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Getting Access & Refresh Token (Async Python)\nDESCRIPTION: This Python code demonstrates how to retrieve access and refresh tokens using the regular ThreatMapper client in an asynchronous manner. It uses the `auth_token.asyncio` and `auth_token.asyncio_detailed` methods. SSL verification can be enabled or disabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n\n# SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n# OR\n# SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def get_access_refresh_token_async():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = await auth_token.asyncio(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = await auth_token.asyncio_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response = json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: ThreatMapper API Endpoints\nDESCRIPTION: These URLs provide access to the ThreatMapper API documentation. The first URL opens the Swagger UI, while the second provides the OpenAPI JSON specification.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/tips/automating-scans.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList with Docusaurus\nDESCRIPTION: This code snippet imports DocCardList and useCurrentSidebarCategory from Docusaurus libraries to dynamically generate a list of documentation cards based on the current sidebar category. It's used for navigation and content organization within the Docusaurus documentation site. No specific inputs or outputs beyond the Docusaurus framework.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/installation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Sync)\nDESCRIPTION: This code shows how to refresh an access token using the authenticated ThreatMapper client in a synchronous manner, with SSL enabled and disabled examples.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n# OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\",\n                             verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef refresh_token_sync():\n   try:\n      #  If we want minified response\n      res = auth_token_refresh.sync(client=client)\n      print(res.access_token, res.refresh_token)\n      #  If we want Detailed response\n      res = auth_token_refresh.sync_detailed(client=client)\n      if res.status_code == 200:\n         json_response = json.loads(res.content.decode(\"utf-8\"))\n         print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n      else:\n         raise Exception(\"\")\n   except UnexpectedStatus as e:\n      print(\"Exception when calling refresh_token_sync-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Installing deepfence-router with Helm\nDESCRIPTION: Installs the deepfence-router Helm chart using the custom values from deepfence_router_values.yaml. This enables external access to the console.  Version 1.5.0 of the chart is used.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version 1.5.0\n```\n\n----------------------------------------\n\nTITLE: Execute shell in Neo4j Docker container\nDESCRIPTION: This command executes a bash shell within the deepfence-neo4j Docker container. This is required to run backup and restore commands within the Neo4j environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-neo4j /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Creating File Server secret in Kubernetes (Shell)\nDESCRIPTION: This snippet shows how to create a Kubernetes secret for the file server credentials and apply it to the `deepfence-console` namespace. It references a secret format defined in the Helm chart for S3 or a generic file server.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_fileserver_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Monitor ThreatMapper Console Pods Kubernetes\nDESCRIPTION: Monitors the status of ThreatMapper console pods.  This command uses kubectl to retrieve the pods in wide output format and watches (-w) for changes, allowing you to track the progress of pod startup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Install and Start ThreatMapper Console with Docker Compose\nDESCRIPTION: Uses the docker compose command to start the ThreatMapper Management Console in detached mode. This command reads the docker-compose.yml file and creates and starts the defined services.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This MDX code snippet imports the DocCardList component and the useCurrentSidebarCategory hook from the docusaurus theme. It then uses these to render a list of documentation cards based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console with Custom Values\nDESCRIPTION: This command installs the Deepfence console using a custom values file. It allows for overriding default settings in the Helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Cloud Scanner AWS\nDESCRIPTION: This Terraform configuration deploys Cloud Scanner as a task within your AWS infrastructure. It requires the AWS provider to be configured with the correct region. The configuration includes specifying the source module, version, ThreatMapper console URL, API key, name, Cloud Scanner image, and AWS region.  The `name` parameter should be unique.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprovider \"aws\" {\n  region = \"<AWS-REGION>; eg. us-east-1\"\n}\n\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.3.0\"\n  mgmt-console-url              = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  name                          = \"deepfence-cloud-scanner\"\n  image                         = \"quay.io/deepfenceio/cloud-scanner:1.5.0\"\n  region                        = \"<AWS-REGION>; eg. us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Tagged ThreatMapper Sensor\nDESCRIPTION: This command installs a specific tagged release of the ThreatMapper sensor agent using Docker.  It is recommended to match the sensor version with the Management Console version.  It requires a pre-installed Docker runtime on the Linux host.  This includes mounting volumes, setting environment variables for console and API keys, and optional tagging.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/linux-host.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install tagged release 1.5.0\ndocker run -dit --cpus=\".2\" --name=deepfence-agent \\\n  --restart on-failure --pid=host --net=host --privileged=true \\\n  -v /sys/kernel/debug:/sys/kernel/debug:rw -v /var/log/fenced \\\n  -v /var/run/docker.sock:/var/run/docker.sock -v /:/fenced/mnt/host/:ro \\\n  -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" -e MGMT_CONSOLE_PORT=\"443\" \\\n  -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n  -e USER_DEFINED_TAGS=\"\" \\\n  deepfenceio/deepfence_agent_ce:1.5.0\n```\n\n----------------------------------------\n\nTITLE: Deploying Sensor Agents in Docker\nDESCRIPTION: This snippet demonstrates how to deploy and run the ThreatMapper sensor agent on a Docker host. It includes setting environment variables for management console URL, API key, and image tag, as well as mounting necessary volumes for proper operation. Replace ACC with your Dockerhub account name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-agent.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n\ndocker run -dit --cpus=\".2\" --name=deepfence-agent --restart on-failure --pid=host --net=host \\\n  --privileged=true -v /sys/kernel/debug:/sys/kernel/debug:rw -v /var/log/fenced \\\n  -v /var/run/docker.sock:/var/run/docker.sock -v /:/fenced/mnt/host/:ro \\\n  -e USER_DEFINED_TAGS=\"\" -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" -e MGMT_CONSOLE_PORT=\"443\" \\\n  -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n  $ACC/deepfence_agent_ce:1.5.0\n```\n\n----------------------------------------\n\nTITLE: Start Docusaurus Development Server\nDESCRIPTION: This command starts the Docusaurus development server, which will automatically open a browser window and reflect changes made to the website's source code in real-time. Use the `--port` flag to specify a different port than the default 3000.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: List of ThreatMapper Containers Deployed\nDESCRIPTION: This code snippet lists the containers that are actually deployed in a ThreatMapper environment. This indicates the running components of the system that handle various functionalities.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/index.md#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\ndeepfence_api_ce\ndeepfence_diagnosis_ce\ndeepfence_discovery_ce\ndeepfence_elastic_ce\ndeepfence_fetcher_ce\ndeepfence_init_ce\ndeepfence_postgres_ce\ndeepfence_redis_ce\ndeepfence_router_ce\ndeepfence_ui_ce\ndeepfence_vulnerability_mapper_ce (?)\n```\n\n----------------------------------------\n\nTITLE: Reset Password - Kubernetes\nDESCRIPTION: This command executes the password reset script within a Kubernetes pod running the `server` container. It requires `kubectl` to be configured and assumes the `deepfence-console` namespace and `deepfence-console-server` deployment exist. The deepfence_server executable is expected to be at `/usr/local/bin/`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/troubleshooting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-console-server \\\n  -c server \\\n  --namespace deepfence-console \\\n  -- bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository (Bash)\nDESCRIPTION: Adds the Deepfence Helm repository to the local Helm configuration. This repository contains the Helm charts needed to deploy the ThreatMapper console in a Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Uninstall Deepfence Agent Commands\nDESCRIPTION: These shell commands are used to uninstall the Deepfence agent from a Linux system. It stops and disables the service, removes the systemd service file, and executes the uninstall script.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/linux-host.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop deepfence-agent.service\nsudo systemctl disable deepfence-agent.service\nsudo rm -f /etc/systemd/system/deepfence-agent.service\nsudo bash uninstall_deepfence.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client without SSL Verification\nDESCRIPTION: This snippet demonstrates initializing an authenticated client while disabling SSL verification. This is generally not recommended due to security risks. The `verify_ssl` parameter is set to `False`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Disabled\nDESCRIPTION: This code initializes the ThreatMapper AuthenticatedClient with SSL verification disabled. This is for demonstration purposes only and should not be used in production environments due to security concerns. Replace placeholders with your actual console URL and token.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n```\n\n----------------------------------------\n\nTITLE: Modify Docker Open Files Ulimit\nDESCRIPTION: This snippet shows how to modify Docker Open Files Ulimit by changing the OPTIONS variable to a desired value. The file requires root permissions to modify and Docker daemon needs to be restarted to implement the changes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Setting Instance ID Suffix (YAML)\nDESCRIPTION: Configuration snippet for setting the instance ID suffix in the values.yaml file.  Requires the values.yaml file to be created first.  The instanceIdSuffix parameter is used to distinguish VMs with the same hostname.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Suffix cloud instance id to hostnames\ninstanceIdSuffix: \"N\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Open File Limit\nDESCRIPTION: This snippet shows how to modify the Docker open file limit. The 'OPTIONS' variable is set to a specific value to increase the nofile limit for containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Removing file server service from docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows how to remove the default file server service from the docker-compose.yml when using an external file server.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n      deepfence-file-server:\n        container_name: deepfence-file-server\n```\n\n----------------------------------------\n\nTITLE: Running Deepfence Management Console (Bash)\nDESCRIPTION: Changes the directory to the deployment scripts and starts the Deepfence Management Console using docker-compose.  This command runs the containers in detached mode. Requires docker-compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes in bash\nDESCRIPTION: Removes unused Docker volumes from the system.  This command helps to free up disk space after the Management Console is uninstalled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Name Configuration\nDESCRIPTION: Configuration setting within the values.yaml file to define a custom name for the Kubernetes cluster. This name is used as a prefix for agent VM hostnames for easy identification in the Deepfence UI.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/ReadMe.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Set custom name for the cluster and hostname prefix for agent vm's to easily identify in Deepfence UI.\n# Example: prod-cluster or dev1-cluster\n# It will be suffixed with hostname - prod-cluster-aks-agentpool-123456-vmss000001\nclusterName: \"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated ThreatMapper Client with API Key\nDESCRIPTION: This snippet demonstrates how to initialize an authenticated client using an API key. Replace `YOUR_CONSOLE_URL` and `Api Key` with your actual console URL and API key respectively. This method is used when the endpoints require authentication.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"Api Key\")\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Sync)\nDESCRIPTION: This code snippet demonstrates how to refresh an access token using an AuthenticatedClient synchronously. It calls the auth_token_refresh API to obtain a new access token using a refresh token.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n# OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\",\n                             verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef refresh_token_sync():\n   try:\n      #  If we want minified response\n      res = auth_token_refresh.sync(client=client)\n      print(res.access_token, res.refresh_token)\n      #  If we want Detailed response\n      res = auth_token_refresh.sync_detailed(client=client)\n      if res.status_code == 200:\n         json_response = json.loads(res.content.decode(\"utf-8\"))\n         print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n      else:\n         raise Exception(\"\")\n   except UnexpectedStatus as e:\n      print(\"Exception when calling refresh_token_sync-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Push Docker Images to Remote Repository Bash\nDESCRIPTION: This script iterates through a list of Deepfence container images, tags them with the specified Docker Hub account name and 'latest' tag, and then pushes them to Docker Hub. Replace `myorg` with the actual Docker Hub account name. Requires Docker CLI and login.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_redis_ce \\\n    deepfence_postgres_ce \\\n    deepfence_kafka_broker_ce \\\n    deepfence_router_ce \\\n    deepfence_file_server_ce \\\n    deepfence_server_ce \\\n    deepfence_worker_ce \\\n    deepfence_ui_ce \\\n    deepfence_agent_ce \\\n    deepfence_cluster_agent_ce \\\n    deepfence_package_scanner_ce \\\n    deepfence_malware_scanner_ce \\\n    deepfence_secret_scanner_ce \\\n    deepfence_neo4j_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Installing Tagged ThreatMapper Sensor with Docker\nDESCRIPTION: Deploys a specific version of the Deepfence sensor agent using a Docker container. Similar to the latest version installation, it sets resource constraints, volume mounts, and environment variables for configuration.  It also shows how to set user defined tags. The container tag is specified as 1.5.0.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install tagged release 1.5.0\ndocker run -dit --cpus=\".2\" --name=deepfence-agent --restart on-failure --pid=host --net=host \\\n  --privileged=true -v /sys/kernel/debug:/sys/kernel/debug:rw -v /var/log/fenced \\\n  -v /var/run/docker.sock:/var/run/docker.sock -v /:/fenced/mnt/host/:ro \\\n  -e USER_DEFINED_TAGS=\"\" -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" -e MGMT_CONSOLE_PORT=\"443\" \\\n  -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n  deepfenceio/deepfence_agent_ce:1.5.0\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs all project dependencies defined in the `package.json` file using Yarn package manager.  It is a prerequisite for running the website locally.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console from Helm Chart\nDESCRIPTION: Installs the Deepfence console using the Helm chart, applying the customized values from the specified YAML file. This deploys the console to the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Configure Docker open file limits on Amazon Linux/RHEL\nDESCRIPTION: This snippet shows how to configure the maximum number of open files for the Docker daemon and containers in Amazon Linux or RHEL systems. It involves modifying the `/etc/sysconfig/docker` file to set the `DAEMON_MAXFILES` and `OPTIONS` parameters.  After modifying the file, the Docker daemon must be restarted.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Push Images to DockerHub (Bash)\nDESCRIPTION: This script pushes the Deepfence container images to a DockerHub repository. It iterates through a list of image names, tags each image with the specified DockerHub account and 'latest' tag, and then pushes the tagged image to DockerHub. Requires Docker CLI to be configured and the user to be logged in to DockerHub.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_redis_ce \\\n    deepfence_postgres_ce \\\n    deepfence_kafka_broker_ce \\\n    deepfence_router_ce \\\n    deepfence_file_server_ce \\\n    deepfence_server_ce \\\n    deepfence_worker_ce \\\n    deepfence_ui_ce \\\n    deepfence_agent_ce \\\n    deepfence_cluster_agent_ce \\\n    deepfence_package_scanner_ce \\\n    deepfence_malware_scanner_ce \\\n    deepfence_secret_scanner_ce \\\n    deepfence_neo4j_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated ThreatMapper Client Disabling SSL Verification\nDESCRIPTION: This code snippet shows how to initialize an authenticated client, disabling SSL verification. This is generally not recommended due to security risks, but might be necessary in specific scenarios. Replace `YOUR_CONSOLE_URL` and `Api Key` with your actual console URL and API key respectively.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and Filter (Troubleshooting)\nDESCRIPTION: This snippet imports the DocCardList component and filters items whose label includes 'Troubleshooting'. This snippet targets the troubleshooting documentation cards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Import and Render DocCardList with Sidebar Category in MDX\nDESCRIPTION: This MDX code snippet imports the DocCardList component and the useCurrentSidebarCategory hook from Docusaurus. It then uses these to render a list of documentation cards based on the current sidebar category.  This dynamically displays documentation links within the page.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/registries/index.md#_snippet_0\n\nLANGUAGE: mdx-code-block\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Initialize, Plan, and Apply Terraform Configuration\nDESCRIPTION: These commands initialize the Terraform working directory, create an execution plan, and apply the changes to deploy the Cloud Scanner. The commands should be executed in the directory where the `cloud-scanner.tf` file is located.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Display Installation Docs with DocCardList (MDX)\nDESCRIPTION: Uses the DocCardList component to display a list of documentation cards, filtering the current sidebar category items to include only those with labels containing \"Installation\".\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Stylesheet in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the main stylesheet for the ui-components package within a JavaScript file. This step is necessary to apply the default styling to the components. The stylesheet is expected to be available under the 'ui-components' package.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/packages/ui-components/Readme.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'ui-components/style.css';\n```\n\n----------------------------------------\n\nTITLE: Import and Render DocCardList in MDX\nDESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme and renders it using data from the current sidebar category. It is used to dynamically display a list of documentation cards in the registry scanning documentation page.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/registries/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Storing Deepfence API Key as Secret in AWS Secrets Manager\nDESCRIPTION: This snippet shows how to store the Deepfence API key as a secret in AWS Secrets Manager. It's crucial to store the API key securely and access it from the Fargate task. Ensure double quotes are valid JSON characters.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"deepfence_api_key\": \"<DEEPFENCE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install and Start Console with Docker\nDESCRIPTION: Installs and starts the ThreatMapper Console using Docker Compose, overriding the default image repository with a custom one. It requires the user to log in to their Docker Hub account and sets the IMAGE_REPOSITORY environment variable before running docker-compose up.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList in MDX\nDESCRIPTION: This snippet imports the DocCardList component from the @theme/DocCardList module, enabling the display of a list of documentation cards. It also imports the useCurrentSidebarCategory hook from '@docusaurus/theme-common' to filter items based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Verification\nDESCRIPTION: This snippet shows how to initialize an authenticated ThreatMapper client with custom SSL certificate verification.  It verifies SSL using a specified certificate bundle. Ensure that the `/path/to/certificate_bundle.pem` is a valid path to your certificate file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Terraform\nDESCRIPTION: These commands are used to initialize, plan, and apply the Terraform configuration. `terraform init` initializes the Terraform working directory. `terraform plan` creates an execution plan. `terraform apply` applies the changes to the infrastructure.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Fixing linting issues\nDESCRIPTION: This command automatically fixes linting issues based on the configured ESLint rules. It modifies the code in place to adhere to the established linting standards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Fine-tune Deepfence Agent Helm Deployment - Kubernetes\nDESCRIPTION: These commands fine-tune the Deepfence Agent Helm deployment in Kubernetes. First, the helm repo is added. Next, the default values are extracted to `deepfence_agent_values.yaml` and customized. Finally, the chart is installed using the modified values file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\nhelm show values deepfence/deepfence-agent --version 2.0.3 > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.0.3\n```\n\n----------------------------------------\n\nTITLE: Installing Deepfence Router Helm Chart\nDESCRIPTION: This command installs the deepfence-router Helm chart into the 'threatmapper' namespace. This chart handles routing traffic to the deepfence console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhelm install router ./deepfence-router --namespace threatmapper\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Restore Script\nDESCRIPTION: This script imports the PostgreSQL database from a backup file. It needs to be run from inside the `deepfence-postgres` container. It uses the backup file located at `/pg_data.dump`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/pg-import.sh /pg_data.dump\n```\n\n----------------------------------------\n\nTITLE: Neo4j Data Loading Script Invocation (Go)\nDESCRIPTION: This command runs the Go script to populate a Neo4j database. It requires setting environment variables for the Deepfence Console IP address and Neo4j password. The command-line arguments control the number of images, hosts, containers, vulnerabilities, and AWS Lambda functions to be generated and inserted into the database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/tests/loading/neo4j-setup/filler/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nDF_CONSOLE=ip DF_NEO4J_PASS=pass go run ./main.go -image_num=1000 -host_num=1000 -container_num=1000 -vuln_num=1000 -aws_lambda_num=1000\n```\n\n----------------------------------------\n\nTITLE: Stop ThreatMapper with Docker Compose Bash\nDESCRIPTION: Navigates to the deployment-scripts directory and stops the Deepfence Management Console using Docker Compose.  Stops and removes containers, networks, volumes, and images created by `up`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Show and Customize Deepfence Router Helm Values\nDESCRIPTION: This command shows the default values for the Deepfence router Helm chart, saves them to a YAML file for customization before installation. Then it installs the router using specified values file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.0.1 > deepfence_router_values.yaml\n\n# Make the changes in this file and save\nvim deepfence_router_values.yaml\n\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.0.1\n```\n\n----------------------------------------\n\nTITLE: Identifying Container Runtime\nDESCRIPTION: These commands help identify the container runtime and its socket path within the Kubernetes cluster. The first command retrieves the container runtime version. The subsequent commands deploy a job to retrieve the container runtime socket path from the nodes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Metadata as JSON (HTML)\nDESCRIPTION: This HTML snippet displays the entire site metadata object as a JSON string within a `<pre>` tag.  It uses `JSON.stringify` with `null, 2` to format the JSON string, which allows it to be easily read and examined. The JSON data is intended to represent metadata collected at site install time.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<details>\n  <summary><b>Site MetaData.</b>  Site metadata comes from docusaurus install</summary>\n  <pre>{JSON.stringify(siteMetadata(), null, 2) }</pre>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Installing ThreatMapper Python Client\nDESCRIPTION: This command installs the ThreatMapper Python client from the GitHub repository using pip. It fetches the latest version of the client and installs it into the Python environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/deepfence/threatmapper-python-client.git\n```\n\n----------------------------------------\n\nTITLE: Run Terraform Commands\nDESCRIPTION: These shell commands initialize, plan, and apply the Terraform configuration. `terraform init` initializes the Terraform working directory. `terraform plan` creates an execution plan. `terraform apply` applies the changes described in the plan.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/gcp.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Save Deepfence Router Helm Chart Values\nDESCRIPTION: This command saves the default values of the Deepfence router Helm chart to a YAML file, which allows customization of the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version 2.2.2 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token Synchronously with AuthenticatedClient\nDESCRIPTION: This snippet demonstrates how to refresh an access token synchronously using an AuthenticatedClient. It creates an AuthenticatedClient with a refresh token, calls the `auth_token_refresh.sync` or `auth_token_refresh.sync_detailed` function, and prints the new access and refresh tokens.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n# OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\",\n                             verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef refresh_token_sync():\n   try:\n      #  If we want minified response\n      res = auth_token_refresh.sync(client=client)\n      print(res.access_token, res.refresh_token)\n      #  If we want Detailed response\n      res = auth_token_refresh.sync_detailed(client=client)\n      if res.status_code == 200:\n         json_response = json.loads(res.content.decode(\"utf-8\"))\n         print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n      else:\n         raise Exception(\"\")\n   except UnexpectedStatus as e:\n      print(\"Exception when calling refresh_token_sync-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Modify Docker ulimit in Amazon Linux/RHEL (Shell)\nDESCRIPTION: This snippet demonstrates how to change the default ulimit for open files in Docker containers on Amazon Linux or RHEL. It modifies the OPTIONS variable in the /etc/sysconfig/docker file to set a new ulimit.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components in MDX\nDESCRIPTION: This MDX code snippet imports DocCardList from the \"@theme/DocCardList\" module and useCurrentSidebarCategory from \"@docusaurus/theme-common\" module. These components are used to dynamically generate a list of documentation cards based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/operations/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: DocCardList Component with Docusaurus\nDESCRIPTION: This code snippet imports necessary modules from the Docusaurus framework to dynamically generate a list of documentation cards based on the current sidebar category. It uses `DocCardList` to render the card list and `useCurrentSidebarCategory` to fetch the category items. This allows automatic updates to the installation documentation as items are added or removed from the category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/installation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console using Helm (Bash)\nDESCRIPTION: Installs the Deepfence console using Helm, applying the custom configurations specified in `deepfence_console_values.yaml`.  It requires the deepfence helm repository to be added before executing this.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Fine-tune Helm Deployment\nDESCRIPTION: This snippet demonstrates how to fine-tune the deepfence-agent Helm deployment by modifying the values.yaml file.  It retrieves the default values, updates critical parameters such as managementConsoleUrl and deepfenceKey, and then installs the chart using the modified values file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\nhelm show values deepfence/deepfence-agent --version TM_AGENT_HELM_CHART_VERSION > deepfence_agent_values.yaml\n\n# You will need to update the following values:\n#   managementConsoleUrl and deepfenceKey - specify your URL/IP and API key value\n# You may wish to update other values, including:\n#   image:name and image:clusterAgentImageName - change to point to custom images\n#   containerdSock - set to false if agent fails to start on some Kubernetes platforms e.g. Minikube \nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version TM_AGENT_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml with wget\nDESCRIPTION: Downloads the docker-compose.yml file from the ThreatMapper GitHub repository using wget. This file defines the services and configurations for the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.3/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Console URL (YAML)\nDESCRIPTION: Configuration snippet for setting the Deepfence management console URL and port in the values.yaml file.  Requires the values.yaml file to be created first. The managementConsoleUrl and managementConsolePort parameters define the address and port of the management console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmanagementConsoleUrl: \"\"\nmanagementConsolePort: \"443\"\n```\n\n----------------------------------------\n\nTITLE: Fixing code formatting issues\nDESCRIPTION: This command automatically fixes code formatting issues based on the configured Prettier rules. It modifies the code in place to adhere to the established style guidelines.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm run format:fix\n```\n\n----------------------------------------\n\nTITLE: Import and Render Docusaurus Components in MDX\nDESCRIPTION: This code snippet demonstrates how to import and render Docusaurus components within an MDX file. It imports `DocCardList` and `useCurrentSidebarCategory` from `@theme/DocCardList` and `@docusaurus/theme-common` respectively, and then uses these components to dynamically display a list of documentation cards based on the current sidebar category.  This approach allows for dynamic content generation within the documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/operations/index.md#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Cards with DocCardList in MDX\nDESCRIPTION: This snippet uses DocCardList and useCurrentSidebarCategory from Docusaurus to dynamically generate a list of documentation cards based on the current sidebar category. It imports necessary components and utilizes them to render the list. The snippet requires the Docusaurus theming library to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Import and Use DocCardList Component in MDX\nDESCRIPTION: This code snippet imports the DocCardList component from '@theme/DocCardList' and useCurrentSidebarCategory hook from '@docusaurus/theme-common'. It then uses these to render a list of documentation cards based on the current sidebar category within a Docusaurus-based documentation site.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/registries/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account for EKS with IAM Role - YAML\nDESCRIPTION: This snippet shows how to configure the service account in the `values.yaml` file of the Deepfence Console Helm chart to use an IAM role for accessing ECR in an EKS environment. It sets the required annotations and service account name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/registries/aws-ecr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserviceAccount:\n  # Specifies whether a service account should be created\n  create: true\n  # Annotations to add to the service account\n  annotations:\n    \"eks.amazonaws.com/role-arn\": \"arn:aws:iam::123456789012:role/deepfence-ecr-role\"\n  # Service account name\n  name: \"deepfence-console\"\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for ECS Tasks with Custom Trust Policy\nDESCRIPTION: This JSON snippet defines the custom trust policy for the IAM role that ECS tasks will assume. It allows ECS tasks to assume this role, granting them necessary permissions to access AWS resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ecs-tasks.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Management Console\nDESCRIPTION: Starts the Deepfence Management Console using Docker Compose in detached mode.  Requires navigating to the deployment scripts directory first.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Getting Kubernetes Deployment Name\nDESCRIPTION: Retrieves the deployment name in Kubernetes namespace deepfence-console. This can be used to reset a password if you do not know your helm chart name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deploy --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Starting Vulnerability Scan ASYNC - Python\nDESCRIPTION: This snippet demonstrates how to asynchronously start a vulnerability scan on hosts using the Threatmapper API. It first retrieves a list of node IDs using `node_config()`, then creates a payload dictionary specifying the nodes to scan and the scan configurations for different languages. It sends this to the `start_vulnerability_scan` API via an async call and prints the scan IDs and bulk scan ID. The function depends on the `start_vulnerability_scan` API, `ModelVulnerabilityScanTriggerReq`, `SearchSearchNodeReq`, and `ModelScanTriggerResp` models.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nasync def start_vulnerability_scan_on_hosts():\n    try:\n       node_ids = node_config()\n       payload_dict = {\n                       \"filters\": {\n                         \"cloud_account_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"container_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"host_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"image_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"kubernetes_cluster_scan_filter\": {\n                           \"filter_in\": None\n                         }\n                       },\n                       \"node_ids\": node_ids,\n                       \"scan_config\": [\n                         {\n                           \"language\": \"base\"\n                         },\n                         {\n                           \"language\": \"java\"\n                         },\n                         {\n                           \"language\": \"javascript\"\n                         },\n                         {\n                           \"language\": \"rust\"\n                         },\n                         {\n                           \"language\": \"golang\"\n                         },\n                         {\n                           \"language\": \"ruby\"\n                         },\n                         {\n                           \"language\": \"python\"\n                         },\n                         {\n                           \"language\": \"php\"\n                         },\n                         {\n                           \"language\": \"dotnet\"\n                         }\n                       ]\n                     }\n       json_body = ModelVulnerabilityScanTriggerReq.from_dict(payload_dict)\n       response: ModelScanTriggerResp = await start_vulnerability_scan.asyncio(client=client,json_body=json_body)\n       print(response.scan_ids, response.bulk_scan_id)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling start_vulnerability_scan_on_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Helm repository addition for Deepfence Cloud Scanner\nDESCRIPTION: This command adds the Deepfence Cloud Scanner Helm repository, which is required to install the Cloud Scanner on an EKS cluster. It allows Helm to locate and retrieve the necessary chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add cloud-scanner https://deepfence-helm-charts.s3.amazonaws.com/cloud-scanner\n```\n\n----------------------------------------\n\nTITLE: Set Kubernetes variables\nDESCRIPTION: These commands set the `NAMESPACE` and `PODNAME` variables needed to target the Neo4j pod in the Kubernetes cluster.  The namespace defaults to `deepfence-console` and the pod name is dynamically discovered.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/upgrade-from-v2.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=deepfence-console\nexport PODNAME=`kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=\":metadata.name\" | grep neo4j`\n```\n\n----------------------------------------\n\nTITLE: IAM Role Trust Policy for ECS Tasks (JSON)\nDESCRIPTION: This JSON defines the trust policy for the IAM role that the ECS tasks will assume. It allows the `ecs-tasks.amazonaws.com` service to assume the role, granting it necessary permissions to execute tasks.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Async Python)\nDESCRIPTION: This Python code demonstrates how to refresh an access token using the authenticated ThreatMapper client in an asynchronous manner. It uses the `auth_token_refresh.asyncio` and `auth_token_refresh.asyncio_detailed` methods. SSL verification can be enabled or disabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\nimport json\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def refresh_token_async():\n    try:\n        #  If we want minified response\n        res = await auth_token_refresh.asyncio(client=client)\n        print(res.access_token, res.refresh_token)\n        #  If we want Detailed response\n        res = await auth_token_refresh.asyncio_detailed(client=client)\n        if res.status_code == 200:\n           json_response = json.loads(res.content.decode(\"utf-8\"))\n           print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n        else:\n            raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Copying Backup to Neo4j Container\nDESCRIPTION: This command copies the backup file to the running Neo4j Docker container. It's used to restore the database in a new environment. Requires Docker to be installed and the `deepfence-neo4j` container to be running.  `<BACKUP_FILE>` needs to be replaced with the actual backup filename.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp <BACKUP_FILE> deepfence-neo4j:/\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition - Entrypoint Override (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for overriding the entrypoint of the application container in a Fargate task definition. It specifies both the ThreatMapper agent's entrypoint script and the application's entrypoint, along with any necessary parameters. This ensures that the ThreatMapper agent is initialized before the application starts.  The actual paths and parameters should be adjusted to match the application's requirements.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\",\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports DocCardList from '@theme/DocCardList' and useCurrentSidebarCategory from '@docusaurus/theme-common'. It then uses the useCurrentSidebarCategory hook to get the items from the current sidebar category and renders them using the DocCardList component.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Import useCurrentSidebarCategory Hook (MDX)\nDESCRIPTION: Imports the useCurrentSidebarCategory hook from '@docusaurus/theme-common'. This hook is used to access information about the current sidebar category, allowing for dynamic filtering of documentation cards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/index.md#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Monitor ThreatMapper Router Service\nDESCRIPTION: Monitors the status of the ThreatMapper Router service in the `deepfence-console` namespace. This is done to wait for the cloud platform to deploy an external load balancer.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -w deepfence-console-router --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Import useCurrentSidebarCategory React Hook\nDESCRIPTION: Imports the useCurrentSidebarCategory hook from '@docusaurus/theme-common'. This React hook provides access to the current sidebar category, allowing dynamic filtering of documentation cards within the Management Console documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Reset Password in Docker Container\nDESCRIPTION: This snippet shows how to reset the password for the Threatmapper application running inside a Docker container. It executes the `flask reset-password` command within the `deepfence-api` container using `docker exec`.  This method is used when SES/SMTP is not configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-api bash -c \"flask reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server Secret usage in values.yaml (YAML)\nDESCRIPTION: This snippet shows how to configure the `values.yaml` file to use an existing file server secret and prevent the creation of a new file server StatefulSet. The `create` parameter is set to `false`, and the `secretName` parameter specifies the name of the existing secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nfileserver:\n  # Specifies whether a file server instance should be created\n  # set this to false if using S3\n  create: false\n  # if create false provide name of the existing secret.\n  # Secret format refer templates/deepfence-console-secrets/s3.yaml\n  secretName: \"deepfence-console-secrets-fileserver\"\n      \n  # Set this if external file server is used and create=false\n  fileServerHost: \"123.123.123.123\"\n  fileServerPort: \"8080\"\n```\n\n----------------------------------------\n\nTITLE: Generate Go code with sqlc\nDESCRIPTION: This command generates Go code from SQL files using the sqlc executable. The command assumes sqlc is installed and accessible in the system's PATH, and a sqlc.yaml configuration file exists in the current directory.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_utils/postgresql/readme.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsqlc generate\n```\n\n----------------------------------------\n\nTITLE: Create IAM Role Trust Policy JSON for ECS Tasks\nDESCRIPTION: This JSON defines a custom trust policy for an IAM role that allows ECS tasks to assume the role.  This is necessary for the Deepfence agent running as an ECS task to have the required permissions. It trusts the 'ecs-tasks.amazonaws.com' service to assume the role.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Start ThreatMapper with Docker Compose Bash\nDESCRIPTION: Navigates to the deployment-scripts directory and starts the Deepfence Management Console using Docker Compose. The `-d` flag runs the containers in detached mode. Requires Docker Compose to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Redeploying Deepfence Agent with Updated Values\nDESCRIPTION: These commands demonstrate how to delete and redeploy the deepfence-agent using Helm, incorporating changes made to the deepfence_agent_values.yaml file. This includes deleting the old deployment, showing the values, editing the values, and re-installing with the modified values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-agent --version 1.5.0 > deepfence_agent_values.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 1.5.0\n```\n\n----------------------------------------\n\nTITLE: Access Neo4j Container\nDESCRIPTION: This command provides access to the Neo4j container's shell, allowing you to execute commands within the container's environment. It is essential for running backup and restore scripts directly within the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-neo4j /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configure TLS certificates - Docker\nDESCRIPTION: This snippet shows how to configure TLS certificates for the Deepfence Management Console when deployed using Docker. It uses OpenSSL to create a self-signed certificate and key, places them in the `/etc/deepfence/certs` directory, and restarts the console using docker-compose to apply the changes. Requires OpenSSL and Docker Compose to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Provide the SSL key and cert, for example, using OpenSSL to create a self-signed pair\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n\n# restart the management console to use the new TLS certificate\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Application Commands\nDESCRIPTION: These shell commands initialize the Terraform environment, create a plan, and apply the configuration to deploy Cloud Scanner. They require Terraform to be installed and configured correctly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Listing TCP Connections without Process Lookup in Go\nDESCRIPTION: This code snippet demonstrates how to list all established TCP connections without attempting to find the owning process. It initializes the connections using `procspy.Connections(false)`, iterates through the connections using `cs.Next()`, and prints the local port of each connection. It also takes an array of uint and local ips as arguments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/procspy/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/deepfence/procspy\"\n\n\n\t//\"github.com/deepfence/ThreatMapper/deepfence_utils/utils\"\n\n\n\n\n\n\n\n\n)\n\n\n\n\n\nfunc main() {\n\tcs, err := procspy.Connections(false, []uint{1,10}, dfUtils.GetAllLocalIps())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"TCP Connections:\\n\")\n\tfor c := cs.Next(); c != nil; c = cs.Next() {\n\t\t//fmt.Printf(\" - %v\\n\", c)\n\t\tfmt.Print(c.LocalPort)\n\t\tfmt.Print(\", \")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes TLS Secret Configuration - YAML\nDESCRIPTION: This snippet shows how to configure TLS certificates using an existing Kubernetes secret. It assumes that a TLS secret named `console-tls-certs` already exists in the same namespace as the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/initial-configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    secretName: console-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Cards with DocCardList React Component\nDESCRIPTION: This code snippet imports and uses the `DocCardList` component from the Docusaurus theme to dynamically display documentation cards. It also uses `useCurrentSidebarCategory` hook to fetch the items for the current sidebar category, which are then passed as props to the `DocCardList` component. This allows for easy navigation and display of related documentation pages within the Docusaurus-based documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/installation.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Delete Deepfence Console and Router\nDESCRIPTION: These commands delete the Deepfence router and console Helm releases from the specified namespace (deepfence-console).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router -n deepfence-console\nhelm delete deepfence-console -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Fetching Docusaurus Site Configuration\nDESCRIPTION: This JavaScript function retrieves the site configuration from the Docusaurus context using the `useDocusaurusContext` hook. It returns the complete site configuration object defined in `docusaurus.config.js`. This allows access to all configuration parameters defined for the Docusaurus site.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nexport function siteConfig() {\n  const {siteConfig, siteMetadata} = useDocusaurusContext();\n  return siteConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing the internal deepfence-file-server service in docker-compose.yml (YAML)\nDESCRIPTION: This snippet demonstrates how to disable the internal file server in the `docker-compose.yml` file when using an external S3 compatible server.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/managed-database.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n      deepfence-file-server:\n        container_name: deepfence-file-server\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes\nDESCRIPTION: Removes unused Docker volumes from the system. This command helps free up disk space by deleting volumes that are not currently in use by any containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Remove ThreatMapper Management Console with Docker Compose\nDESCRIPTION: Uses Docker Compose to stop and remove the ThreatMapper Management Console services. This command stops and removes containers, networks, volumes, and images created by `docker compose up`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Command to get service logs\nDESCRIPTION: This is a shell command to get the service logs of the deepfence-agent using journalctl. It requires sudo privileges.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/linux-host.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo journalctl -u deepfence-agent.service\n```\n\n----------------------------------------\n\nTITLE: Execute post-upgrade script (Docker)\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script inside the Neo4j Docker container. This is executed after upgrading to the new release and waiting for initial setup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/upgrade-from-v2.1.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec deepfence-neo4j /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Create PostgreSQL Secret in Kubernetes (Shell)\nDESCRIPTION: This snippet creates a Kubernetes secret named `deepfence_postgres_secret.yaml` in the `deepfence-console` namespace, then applies it. This secret will contain credentials for connecting to an external PostgreSQL database.  It assumes the existence of a `deepfence_postgres_secret.yaml` file which is formatted according to the console helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/managed-database.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_postgres_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Push Images to DockerHub (Bash)\nDESCRIPTION: This script pushes the Deepfence ThreatMapper container images to a DockerHub repository.  It requires docker to be logged in and the `ACC` variable to be set to the DockerHub account name. The script iterates through a list of Deepfence images, tags them with the DockerHub account name and `latest` tag, then pushes each image to DockerHub.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\n    \nfor IMG in \\\n    deepfence_redis_ce \\\n    deepfence_postgres_ce \\\n    deepfence_kafka_broker_ce \\\n    deepfence_router_ce \\\n    deepfence_file_server_ce \\\n    deepfence_server_ce \\\n    deepfence_worker_ce \\\n    deepfence_ui_ce \\\n    deepfence_agent_ce \\\n    deepfence_cluster_agent_ce \\\n    deepfence_package_scanner_ce \\\n    deepfence_malware_scanner_ce \\\n    deepfence_secret_scanner_ce \\\n    deepfence_neo4j_ce\ndo\n    docker tag deepfenceio/$IMG $ACC/$IMG:latest\n    docker push $ACC/$IMG:latest\ndone\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList in MDX\nDESCRIPTION: Imports the DocCardList component from the '@theme/DocCardList' module for use in rendering documentation cards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/index.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Modifying deepfence_agent_values.yaml\nDESCRIPTION: This step involves editing the `deepfence_agent_values.yaml` file to disable the `containerdSock` setting.  This is a crucial step in resolving the socket file issue that prevents the agent from starting correctly.  `containerdSock` should be set to `\"false\"`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Import and Display DocCardList in MDX\nDESCRIPTION: This code snippet imports the DocCardList component and uses the useCurrentSidebarCategory hook to dynamically display a list of documentation cards within an MDX document. It utilizes Docusaurus theming to fetch sidebar category items and render them as cards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/operations/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Installing ps package in Go\nDESCRIPTION: This code snippet shows how to install the 'github.com/mndrix/ps' package using the 'go get' command. This package provides persistent data structures for Go. Ensure Go is installed and configured correctly before running this command.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/scope/ps/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get github.com/mndrix/ps\n```\n\n----------------------------------------\n\nTITLE: ThreatMapper API Endpoints\nDESCRIPTION: These are the API endpoints for ThreatMapper that you can use to enumerate nodes and run scans. Replace <CONSOLE_URL> with the actual URL of your ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/tips/automating-scans.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\n```\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Flask Echo Server\nDESCRIPTION: Deletes the flask-echo-server Helm release. Requires Helm to be installed. This command uninstalls the deployment and removes associated resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/ReadMe.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete flask-echo-server\n```\n\n----------------------------------------\n\nTITLE: Accessing NodePort Service\nDESCRIPTION: If the service type is NodePort, this snippet retrieves the NodePort and Node IP address, then constructs the URL to access the service. The script relies on kubectl and uses jsonpath to parse the output.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport NODE_PORT=$(kubectl get --namespace {{ .Values.namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ .Values.service.name }})\nexport NODE_IP=$(kubectl get nodes --namespace {{ .Values.namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\necho \"https://$NODE_IP:$NODE_PORT\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Management Console IP (YAML)\nDESCRIPTION: This snippet retrieves the management console IP address from the Helm chart values. It is used in deployment configurations or scripts that require the management console IP.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{{ .Values.managementConsoleIp }}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers\nDESCRIPTION: This command lists all Docker containers, including those that are running and those that have exited. The `-a` flag ensures that all containers are displayed. This information is useful for diagnosing issues with ThreatMapper's containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Console and Router\nDESCRIPTION: These commands delete the ThreatMapper console and router deployments from the deepfence-console namespace using Helm. They are used to remove the ThreatMapper components from the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router -n deepfence-console\nhelm delete deepfence-console -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Display Installation Docs MDX\nDESCRIPTION: Uses the DocCardList component to display a list of documentation cards filtered to include only those with labels containing the word \"Installation\". It leverages the useCurrentSidebarCategory hook to get the current sidebar category's items.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/index.md#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Kubernetes Scanner Helm Repository\nDESCRIPTION: This command adds the Deepfence Kubernetes Scanner Helm repository to your local Helm configuration.  It allows you to access and install the deepfence-k8s-scanner chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/kubernetes-scanner/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add deepfence-k8s-scanner https://deepfence-helm-charts.s3.amazonaws.com/deepfence-k8s-scanner\n```\n\n----------------------------------------\n\nTITLE: Import Docusaurus components in MDX\nDESCRIPTION: This code snippet imports necessary components from the Docusaurus framework for generating a dynamic list of documentation cards. It includes DocCardList for displaying the cards and useCurrentSidebarCategory for retrieving the items based on the current sidebar category. These components are used to create a user-friendly navigation experience for ThreatMapper documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/operations/index.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList React Component\nDESCRIPTION: Imports the DocCardList component from the '@theme/DocCardList' module for rendering documentation cards. This React component is used to display a list of documentation cards within the Management Console documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Storing Deepfence API Key as AWS Secret\nDESCRIPTION: This snippet demonstrates how to store the Deepfence API key as a secret in AWS Secrets Manager. It is crucial for securely managing the API key required for the Deepfence agent to communicate with the management console.  The secret is stored as a simple JSON object. Replace `<DEEPFENCE_KEY>` with the actual API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"deepfence_api_key\": \"<DEEPFENCE_KEY>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add User to Docker Group (Bash)\nDESCRIPTION: Adds the current user to the 'docker' group, allowing them to run Docker commands without sudo. A new shell session or user re-login is required for the group change to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Service Status\nDESCRIPTION: This command retrieves the status of the deepfence-console-router service in the specified namespace and watches for changes.  It verifies the external load balancer creation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get svc -w deepfence-console-router --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Stopping Deepfence Management Console (Bash)\nDESCRIPTION: Changes the directory to the deployment scripts and stops the Deepfence Management Console using docker-compose. Requires docker-compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC Server\nDESCRIPTION: This snippet illustrates how to set up an RPC server using the ugorji/go/codec library. It accepts connections, creates an RPC codec using either GoRpc or MsgpackSpecRpc, and then serves the codec using rpc.ServeCodec.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n//RPC Server\ngo func() {\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\trpcCodec := codec.GoRpc.ServerCodec(conn, h)\n\t\t//OR rpcCodec := codec.MsgpackSpecRpc.ServerCodec(conn, h)\n\t\trpc.ServeCodec(rpcCodec)\n\t}\n}()\n```\n\n----------------------------------------\n\nTITLE: Docker: Copy and execute pre-upgrade script\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script to the Neo4j Docker container and then execute it. This needs to be done before upgrading to the new release.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/upgrade-from-v2.1.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp pre-upgrade-to-v5.sh deepfence-neo4j:/startup\ndocker exec deepfence-neo4j /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Open File Limit\nDESCRIPTION: This snippet shows how to modify the default open file limit for docker containers by updating the OPTIONS variable. The change requires restarting the docker daemon to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Install sqlc with go install\nDESCRIPTION: This command installs the latest version of sqlc using the go install command.  Go must be installed and configured correctly for this command to work.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_utils/postgresql/readme.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install -v github.com/sqlc-dev/sqlc/cmd/sqlc@latest\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent Helm Chart - Kubernetes\nDESCRIPTION: This command installs the Deepfence Agent Helm chart in a Kubernetes cluster. It configures the agent with the management console URL, API key, image tag, cluster name, and container runtime socket settings. The `--set` flags are used to customize the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\n# helm show readme deepfence/deepfence-agent --version 2.0.3 | less\n# helm show values deepfence/deepfence-agent --version 2.0.3 | less\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set global.imageTag=2.0.1 \\\n    --set clusterName=\"prod-cluster\" \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.podmanSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.0.3\n```\n\n----------------------------------------\n\nTITLE: Add user to Docker group - Bash\nDESCRIPTION: Adds the current user to the 'docker' group to allow Docker commands to be run without `sudo`. Requires a new shell or relogin for the group membership to take effect. The command uses `usermod` with the `-aG` flag, which adds the user to the specified group without removing them from any other groups.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Reset Deepfence Server Password (Kubernetes)\nDESCRIPTION: This command executes the password reset script within the Deepfence Server pod in a Kubernetes environment. It requires `kubectl` to be configured and the `deepfence-console-server` deployment to be running in the `deepfence-console` namespace. The script `/usr/local/bin/deepfence_server --reset-password` handles the password reset process. The deployment name might need adjustment depending on the helm chart customization.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-console-server \\\n  -c server \\\n  --namespace deepfence-console \\\n  -- bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes: Execute post-upgrade script\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script within the Neo4j pod. It should be run after upgrading to the new release and after the initial Neo4j setup is complete.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/upgrade-from-v2.1.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Scanner for Multi Project GCP\nDESCRIPTION: This Terraform module configures the Cloud Scanner for a multi-project setup in Google Cloud Platform. It requires specifying the source module, version, name, management console URL, management console port, Deepfence key, image name, project ID, region, and the organization domain. Optionally, it configures connection to private IP console on a VPC by specifying the VPC name and IP CIDR range.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  org_domain          = \"<Your Org Domain> e.g. deepfence.io\"\n  version             = \"0.3.0\"\n  name                = \"deepfence-cloud-scanner\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:1.5.0\"\n  project_id          = \"<PROJECT_ID>; ex. dev1-123456\"\n  region              = \"<REGION_ID>; ex. asia-east1\"\n  #optional for private ip console\n  vpc                 = \"<VPC Network Name>; Name of vpc network in which the console exists\"\n  #optional for private ip console\n  ip_cidr_range_svpca = \"<11.0.0.0/28> IP CIDR range for the connector to above vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Deepfence Router Values File\nDESCRIPTION: Creates a values file for the Deepfence Router Helm chart. This file contains the default configuration values for the chart, which can be overridden to customize the installation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-router --version 2.0.1 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Identify Kubernetes Container Runtime Socket Path\nDESCRIPTION: This set of commands creates a job in Kubernetes to determine the container runtime socket path. It applies a YAML manifest, waits for the job to complete, retrieves the logs from the job's pod, and then deletes the job and manifest. The logs contain the container runtime socket path.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/sensors/kubernetes.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This snippet demonstrates how to search for hosts using the ThreatMapper API. It creates an AuthenticatedClient, constructs a SearchSearchNodeReq object, and calls the `search_hosts.sync` function to search for hosts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml with wget\nDESCRIPTION: Downloads the docker-compose.yml file from the specified URL using wget. This file defines the services, networks, and volumes needed to run the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.1/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Add User to Docker Group Bash\nDESCRIPTION: Adds the current user to the docker group, allowing them to run docker commands without sudo. A new shell or re-login is required for the group change to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Create Deepfence Console Values File\nDESCRIPTION: Creates a values file for the Deepfence Console Helm chart. This file contains the default configuration values for the chart, which can be overridden to customize the installation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.0.2 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Redeploying deepfence-agent with Helm\nDESCRIPTION: This series of Helm commands redeploys the deepfence-agent with the updated configuration specified in `deepfence_agent_values.yaml`. The process involves deleting the existing agent, fetching the default values, modifying the values file, and then installing the agent with the custom values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/tips/sensor-agent-not-start.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n\nhelm show values deepfence/deepfence-agent --version 2.1.1 > deepfence_agent_values.yaml\n\nvim deepfence_agent_values.yaml\n\nhelm install -f deepfence_agent_values.yaml deepfence-agent deepfence/deepfence-agent \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Adding KMS Permissions (Optional)\nDESCRIPTION: This snippet adds KMS permissions to the IAM role if a custom KMS key is used to encrypt the secret in AWS Secrets Manager. It allows the role to decrypt the secret. Replace `<API_KEY_SECRET_ARN>` with the ARN of the created secret and `<custom_kms_key_arn>` with the ARN of the custom KMS key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:Decrypt\",\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": [\n                \"<API_KEY_SECRET_ARN>\",\n                \"<custom_kms_key_arn>\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up RPC Client\nDESCRIPTION: This snippet shows how to set up an RPC client using the ugorji/go/codec library. It dials a connection, creates an RPC codec using either GoRpc or MsgpackSpecRpc, and then creates a new RPC client with the codec using rpc.NewClientWithCodec.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n//RPC Communication (client side)\nconn, err = net.Dial(\"tcp\", \"localhost:5555\")\nrpcCodec := codec.GoRpc.ClientCodec(conn, h)\n//OR rpcCodec := codec.MsgpackSpecRpc.ClientCodec(conn, h)\nclient := rpc.NewClientWithCodec(rpcCodec)\n```\n\n----------------------------------------\n\nTITLE: Building all apps and packages\nDESCRIPTION: This command builds all applications and packages within the monorepo using PNPM. It leverages Turborepo for optimized build orchestration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Monitor ThreatMapper Router Service Kubernetes\nDESCRIPTION: Monitors the status of the deepfence-router service. This command uses kubectl to retrieve the service in the default namespace and watches (-w) for changes, allowing you to monitor the external load balancer deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get --namespace default svc -w deepfence-router\n```\n\n----------------------------------------\n\nTITLE: Start ThreatMapper Management Console with Docker Compose\nDESCRIPTION: Uses Docker Compose to start the ThreatMapper Management Console services defined in the `docker-compose.yml` file. The `-d` flag runs the containers in detached mode.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Deploy ThreatMapper Agent with Helm\nDESCRIPTION: This snippet deploys the deepfence-agent helm chart. It sets various parameters, including the management console URL, API key, image tag, cluster name, container runtime socket mounts, and log level. It also creates the deepfence namespace if it doesn't exist.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\n# helm show readme deepfence/deepfence-agent --version 2.3.1 | less\n# helm show values deepfence/deepfence-agent --version 2.3.1 | less\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set global.imageTag=2.3.1 \\\n    --set clusterName=\"prod-cluster\" \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.podmanSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --set logLevel=\"info\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Reset Password (Kubernetes)\nDESCRIPTION: This snippet shows how to reset the ThreatMapper password in a Kubernetes deployment. It uses `kubectl exec` to run the `deepfence_server --reset-password` command within the `server` container of the `deepfence-console-server` deployment in the `deepfence-console` namespace. Requires kubectl and access to the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/troubleshooting.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-console-server \\\n  -c server \\\n  --namespace deepfence-console \\\n  -- bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Set Kubernetes variables (Namespace and Pod Name)\nDESCRIPTION: These commands set environment variables for the Kubernetes namespace and the Neo4j pod name. These variables are used in subsequent commands to target the correct pod for script execution.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/upgrade-from-v2.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=deepfence-console\nexport PODNAME=`kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=\":metadata.name\" | grep neo4j`\n```\n\n----------------------------------------\n\nTITLE: Running ThreatMapper Sensor on Docker host\nDESCRIPTION: This snippet shows how to run the ThreatMapper sensor as a Docker container.  It includes resource constraints, volume mounts, network configuration, environment variables for connecting to the Management Console, and proxy settings. It also specifies the Docker image to use.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/README.md#_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e CUSTOM_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    -e http_proxy=\"\" \\\n    -e https_proxy=\"\" \\\n    -e no_proxy=\"\" \\\n    quay.io/deepfenceio/deepfence_agent_ce:2.5.7\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition Entrypoint Configuration (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the entrypoint for the container in the Fargate task definition.  The ThreatMapper entrypoint and the Application entrypoint and arguments are provided as a comma delimited list in the **Entry point** field.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/aws-fargate.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\",\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Link (HTML)\nDESCRIPTION: This HTML snippet creates a navigation link using data from the `siteConfig()`. It extracts the `docId` and `label` from the navbar items to create a button that links to a specific document within the Docusaurus site. It uses the deepfence-button CSS class for styling.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<span>\n\t<a href={siteConfig().themeConfig.navbar.items[0].docId.replace('/index', '')}>\n\t\t<div class=\"deepfence-button\">\n\t\t\t{siteConfig().themeConfig.navbar.items[0].label}\n\t\t</div>\n\t</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Configure Elasticsearch on Elastic Cloud in Helm Chart (YAML)\nDESCRIPTION: This YAML snippet shows the configuration for Elasticsearch on Elastic Cloud within the console helm chart. It specifies the scheme, host, port, user, and password needed to connect to the Elastic Cloud Elasticsearch instance. Accepted characters for username and password: alphabets, numbers and -.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/managed-database.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  elasticsearch:\n    scheme: \"https\"\n    host: deepfence-012345.es.us-east-1.aws.found.io\n    port: \"443\"\n    # Accepted characters for username and password: alphabets, numbers and -\n    user: \"<user>\"\n    password: \"<password>\"\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console Helm\nDESCRIPTION: This command installs the ThreatMapper console using the Deepfence Helm chart.  It sets the global image tag and storage class, creates the namespace if it doesn't exist, and specifies the Helm chart version. Replace `THREATMAPPER_VERSION`, `gp3`, and `TM_CONSOLE_HELM_CHART_VERSION` with appropriate values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-console deepfence/deepfence-console \\\n--set global.imageTag=THREATMAPPER_VERSION \\\n--set global.storageClass=gp3 \\\n--namespace deepfence-console \\\n--create-namespace \\\n--version TM_CONSOLE_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Multi Project GCP Cloud Scanner (Alt)\nDESCRIPTION: Alternative Terraform configuration for deploying Cloud Scanner across multiple Google Cloud projects. It showcases slightly different parameters and includes placeholders for organization domain, console URL, and Deepfence key, along with project ID and region.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/gcp.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  org_domain          = \"<Your Org Domain> e.g. deepfence.io\"\n  version             = \"0.3.0\"\n  name                = \"deepfence-cloud-scanner\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.1.1\"\n  project_id          = \"<PROJECT_ID>; ex. dev1-123456\"\n  region              = \"<REGION_ID>; ex. asia-east1\"\n  #optional for private ip console\n  vpc                 = \"<VPC Network Name>; Name of vpc network in which the console exists\"\n  #optional for private ip console\n  ip_cidr_range_svpca = \"<11.0.0.0/28> IP CIDR range for the connector to above vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router with Helm - Bash\nDESCRIPTION: Installs the Deepfence router using the Helm chart, referencing a custom `values.yaml` file for configuration.  This allows for customizing router settings, such as the image repository. The `helm install` command is used, specifying the values file and chart name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Accessing LoadBalancer Service, Retrieving IP\nDESCRIPTION: When the service type is LoadBalancer but the IP is not explicitly set, this retrieves the LoadBalancer IP using kubectl.  A note is included indicating that it may take some time for the IP to be available. It uses `kubectl get svc` and template processing to extract the IP.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexport LOAD_BALANCER_IP=$(kubectl get svc --namespace {{ .Values.namespace }} {{ .Values.service.name }} --template \"{{\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\"}}\")\necho \"https://$LOAD_BALANCER_IP\"\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition - Entrypoint and Command (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for specifying the entrypoint and command for the application container in a Fargate task definition. It separates the ThreatMapper agent's entrypoint from the application's command, allowing for more flexible configuration.  The actual paths and parameters should be adjusted to match the application's requirements.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entryPoint\": [\n       \"/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\"\n    ],\n    \"command\": [\n       \"customer-entry-point.sh\",\n       \"param1\",\n       \"param2\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Helm Repositories\nDESCRIPTION: Updates the Helm repositories to ensure the latest chart information is available before installing the Deepfence console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL in docker-compose.yml (YAML)\nDESCRIPTION: This snippet configures the connection parameters for a PostgreSQL database within the docker-compose.yml file. It sets the username, password, host, database name, port and SSL mode for the PostgreSQL database connection.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_POSTGRES_USER_DB_USER: postgres\n    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: <password>\n    DEEPFENCE_POSTGRES_USER_DB_HOST: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    DEEPFENCE_POSTGRES_USER_DB_NAME: deepfence\n    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432\n    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j in docker-compose.yml (YAML)\nDESCRIPTION: This snippet configures the connection parameters for Neo4j AuraDB Professional / Enterprise service within the docker-compose.yml file. It sets the username, password, bolt port and host for the Neo4j database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_NEO4J_USER: neo4j\n    DEEPFENCE_NEO4J_PASSWORD: <password>\n    NEO4J_AUTH: neo4j/<password>\n    DEEPFENCE_NEO4J_BOLT_PORT: 7687\n    DEEPFENCE_NEO4J_HOST: abcdefgh.databases.neo4j.io\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Config as JSON (HTML)\nDESCRIPTION: This HTML snippet displays the entire site configuration object as a JSON string within a `<pre>` tag, allowing for easy viewing of the configuration structure and values. It uses `JSON.stringify` with `null, 2` to format the JSON for readability.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<details>\n\t<summary><b>Site Config.</b>  Site config comes from <code>docusaurus.config.js</code></summary>\n\t<pre>{JSON.stringify( siteConfig(), null, 2 )}</pre>\n</details>\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Router Kubernetes\nDESCRIPTION: Installs the deepfence-router using Helm. This command uses helm to install the deepfence-router chart with a specific version, enabling external access to the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-router deepfence/deepfence-router --version 1.5.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Cards with DocCardList and useCurrentSidebarCategory (MDX)\nDESCRIPTION: This snippet imports the DocCardList component and the useCurrentSidebarCategory hook from the Docusaurus theme. It then uses these components to display a list of documentation cards based on the current sidebar category. This is used to dynamically render a list of related documentation links.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/installation.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Download Docker Compose File with wget\nDESCRIPTION: Downloads the `docker-compose.yml` file from the specified GitHub URL. This file defines the services, networks, and volumes needed to run the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.0/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Change Open Files Limit in Docker (Amazon Linux/RHEL)\nDESCRIPTION: This snippet demonstrates how to change the open files limit per container in `/etc/sysconfig/docker`. It sets both the soft and hard limits for the number of open files to 1024000. After making the changes, the Docker daemon needs to be restarted for the new settings to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for ThreatMapper\nDESCRIPTION: This command creates a Kubernetes namespace named 'threatmapper'.  It is a prerequisite to install the deepfence helm charts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create ns threatmapper\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router using Helm\nDESCRIPTION: This command installs the Deepfence router using the Helm package manager.  It deploys the router within the deepfence-console namespace to enable external access to the console. The specific version is set to 2.0.1.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# helm show values deepfence/deepfence-router --version 2.0.1\n\nhelm install deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.0.1\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL on AWS RDS in Helm Chart (YAML)\nDESCRIPTION: This YAML snippet illustrates the configuration of PostgreSQL on AWS RDS within the console helm chart. It includes settings for the host, port, user, password, database name, and SSL mode. It is configured to connect to a PostgreSQL database instance on AWS RDS.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/managed-database.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  postgresUserDb:\n    host: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    port: \"5432\"\n    user: \"postgres\"\n    password: \"<password>\"\n    dbname: \"deepfence\"\n    sslmode: \"disable\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Pod Details with kubectl\nDESCRIPTION: This command provides detailed information about a specific pod, in this case, `deepfence-agent-8lxng`. It helps diagnose the root cause of the startup failure by displaying events, status, and other relevant information, such as mount failures related to the `containerd-sock` volume.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Modify Docker open file limits on Amazon Linux/RHEL\nDESCRIPTION: This snippet demonstrates how to change the Docker container open file limit by modifying the `OPTIONS` variable within `/etc/sysconfig/docker`. The provided example sets both soft and hard limits to 1024000.  A subsequent restart of the Docker daemon is required for the changes to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPTIONS=\" — default-ulimit nofile=1024000:1024000\"\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList in mdx-code-block\nDESCRIPTION: Imports the DocCardList component and the useCurrentSidebarCategory hook for use in an MDX code block. This allows rendering a list of documentation cards based on the current sidebar category, filtering to only include items with 'Installation' in their label.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Generate Go code with Docker\nDESCRIPTION: This command generates Go code from SQL files using a Docker container. It mounts the current directory as /src and executes the sqlc generate command within the container.  Docker must be installed and running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_utils/postgresql/readme.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v $(pwd):/src -w /src kjconroy/sqlc generate\n```\n\n----------------------------------------\n\nTITLE: IAM Role Trust Policy for ECS Tasks (JSON)\nDESCRIPTION: This JSON snippet defines a trust policy for an IAM role that allows ECS tasks to assume the role. This is a required step to grant necessary permissions to the Deepfence agent running in ECS.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Start Cloud Scanner with Docker Compose\nDESCRIPTION: This bash command starts the cloud scanner using Docker Compose in detached mode.  It assumes that the docker-compose.yaml file is correctly configured in the current directory. Docker Compose must be installed on the EC2 instance.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Uninstall ThreatMapper Console with docker compose in bash\nDESCRIPTION: Removes the ThreatMapper Management Console containers using Docker Compose. This command stops and removes the services defined in the docker-compose.yml file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTPX Client with Event Hooks\nDESCRIPTION: This code snippet demonstrates how to customize the underlying httpx client for logging requests and responses. It defines functions for logging and configures the Threatmapper client to use them via event hooks.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\ndef log_request(request):\n    print(f\"Request event hook: {request.method} {request.url} - Waiting for response\")\n\ndef log_response(response):\n    request = response.request\n    print(f\"Response event hook: {request.method} {request.url} - Status {response.status_code}\")\n\nclient = Client(\n    base_url=\"YOUR_CONSOLE_URL\",\n    httpx_args={\"event_hooks\": {\"request\": [log_request], \"response\": [log_response]}},\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client without SSL Verification (Python)\nDESCRIPTION: This Python code initializes an authenticated ThreatMapper client without SSL certificate verification.  The `base_url` parameter should be set to the URL of your ThreatMapper console, the `token` parameter should be set to your API key, and the `verify_ssl` parameter should be set to `False`.  **Warning: This is a security risk.**\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Get Container Runtime Info Kubernetes\nDESCRIPTION: This command retrieves the container runtime version for each node in the Kubernetes cluster. It uses `kubectl get nodes` with a custom output format to display the node name and the container runtime version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Installing Threatmapper Python SDK\nDESCRIPTION: This command installs the Threatmapper Python client library directly from the GitHub repository using pip. It fetches the latest version of the SDK, allowing developers to use it in their Python projects.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/deepfence/threatmapper-python-client.git\n```\n\n----------------------------------------\n\nTITLE: Deepfence Sensor Entry Point Shell Script\nDESCRIPTION: Defines the entry point for the application container within the AWS Fargate task. This script invokes the Deepfence sensor to enable threat detection and analysis.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/aws-fargate.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/deepfence/usr/local/bin/deepfence-entry-point-scratch.sh\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Daemon\nDESCRIPTION: This command restarts the Docker daemon after modifying the Docker configuration file. This ensures that the new proxy settings are applied.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/sensors/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Display Post-Installation Docs MDX\nDESCRIPTION: Uses the DocCardList component to display a list of documentation cards, filtered to exclude documents related to 'Installation' and 'Troubleshooting'. It uses the useCurrentSidebarCategory hook to get current sidebar category items.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/index.md#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: Deploy Docker Console with Custom Image Repository\nDESCRIPTION: Deploys the ThreatMapper console using Docker Compose, allowing the user to specify a custom Docker Hub account for the images. This involves logging into the Docker Hub account and using Docker Compose to bring up the containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Accessing Swagger UI and OpenAPI JSON\nDESCRIPTION: These URLs provide access to the interactive Swagger UI documentation and the OpenAPI JSON specification for the ThreatMapper REST API. Replace <CONSOLE_URL> with the actual URL of the ThreatMapper console to access the documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/api-reference.md#_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://<CONSOLE_URL>/deepfence/swagger-ui/\nhttps://<CONSOLE_URL>/deepfence/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Listing Containers ASYNC with ThreatMapper API\nDESCRIPTION: This snippet demonstrates how to asynchronously retrieve a list of containers using the ThreatMapper API. It defines an async function `list_containers` that constructs a payload, calls the `search_containers.asyncio` endpoint, and prints the node ID and name of each container. It also includes error handling for unexpected status codes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync def list_containers():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       containers = await search_containers.asyncio(client=client,json_body=json_body)\n       for container in containers:\n          print(container.node_id, container.node_name)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_containers-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Stop Deepfence Management Console (bash)\nDESCRIPTION: This command uses Docker Compose to stop the Deepfence Management Console. It expects a `docker-compose.yml` file to be in the working directory. Docker Compose is a prerequisite.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/build.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for ECS Task - AWS\nDESCRIPTION: This JSON configuration defines a custom trust policy for an IAM role that allows ECS tasks to assume the role. This is a prerequisite for granting the ThreatMapper agent the necessary permissions to run within the ECS environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Describe Pod with kubectl\nDESCRIPTION: This command provides detailed information about a specific pod, including events, conditions, and resource usage. It is used here to identify the cause of the Sensor Agent's failure to start, specifically a FailedMount error related to the containerd socket.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Install OpenEBS Storage Class\nDESCRIPTION: Installs OpenEBS, a containerized storage solution, as a storage class in the Kubernetes cluster. This is used when a self-managed storage solution is preferred. It adds the OpenEBS Helm repository and installs the OpenEBS chart in the `openebs` namespace, creating the namespace if it doesn't exist.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add openebs https://openebs.github.io/charts\nhelm install openebs --namespace openebs openebs/openebs --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Apply Kubernetes Metrics Server\nDESCRIPTION: This command applies the metrics server deployment to the Kubernetes cluster. The metrics server provides resource usage metrics for pods and nodes, which are used by Kubernetes components like the Horizontal Pod Autoscaler and `kubectl top`. It is an optional, but recommended, component for ThreatMapper.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList in mdx-code-block for troubleshooting\nDESCRIPTION: Imports the DocCardList component and the useCurrentSidebarCategory hook for use in an MDX code block. This renders a list of documentation cards based on the current sidebar category, filtering to only include items with 'Troubleshooting' in their label.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Install and Start Console with Docker Compose\nDESCRIPTION: Installs and starts the ThreatMapper console using Docker Compose, overriding the default image repository with a custom one. The script logs in to the specified Docker Hub account and then uses docker-compose to bring up the services defined in the docker-compose.yml file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Kubernetes: Set namespace and pod name variables\nDESCRIPTION: These commands set the `NAMESPACE` and `PODNAME` environment variables.  `NAMESPACE` is set to `deepfence-console`. `PODNAME` is dynamically retrieved by querying Kubernetes for pods containing 'neo4j' in their name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/upgrade-from-v2.1.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport NAMESPACE=deepfence-console\nexport PODNAME=`kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=\":metadata.name\" | grep neo4j`\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console with Helm - Bash\nDESCRIPTION: Installs the Deepfence console using the Helm chart, referencing a custom `values.yaml` file for configuration. This allows for overriding default settings, such as the image repository.  The `helm install` command is used, specifying the values file and chart name.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version 2.1.3\n```\n\n----------------------------------------\n\nTITLE: Describe Pod for Details\nDESCRIPTION: This command provides detailed information about a specific pod, including events, which is useful for diagnosing mount failures or other startup issues. Replace 'deepfence-agent-8lxng' with the actual pod name from the previous command's output.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Bash Commands for Creating Directory and Downloading Docker Compose File\nDESCRIPTION: These bash commands create a directory named deepfence-cloud-scanner and download the docker-compose.yaml file from the specified URL using wget.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.4/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Update Helm Repositories - Bash\nDESCRIPTION: Updates the local Helm chart repository cache.  This ensures that the latest versions of the charts are available. The `helm repo update` command is used for this purpose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Import Postgres Database using Docker\nDESCRIPTION: Imports a PostgreSQL database using a Docker container.  It mounts a volume to read the backup from, sets environment variables for database connection, and executes a script to perform the import.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --net=host --rm=true --name=postgresql-restore \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/pg-import.sh \\\n  -e POSTGRES_DB_HOST=\"127.0.0.1\" \\\n  -e POSTGRES_DB_PORT=\"5432\" \\\n  -e POSTGRES_DB_NAME=users \\\n  -e POSTGRES_DB_USERNAME=\"\" \\\n  -e POSTGRES_DB_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and Filter (Post-Installation)\nDESCRIPTION: This snippet imports the DocCardList component and filters items based on whether their label includes 'Installation' or 'Troubleshooting'.  This is intended for use in displaying only the post-installation tasks.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: IAM Role Trust Policy for ECS Tasks\nDESCRIPTION: This JSON snippet defines a custom trust policy for an IAM role that allows ECS tasks to assume the role. This is necessary for granting the Deepfence agent the permissions it needs to operate within the ECS environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Application Container Entry Point\nDESCRIPTION: Specifies the default entrypoint for the main application container in the Fargate task. This is separate from the Deepfence sensor's entrypoint.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/aws-fargate.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n/entry-point.sh\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Template for ECR Read-Only IAM Role\nDESCRIPTION: This CloudFormation template is used to create an IAM role with read-only access to an AWS ECR repository. It's deployed in the same AWS account as the ECR registry to allow the Deepfence Console EC2 instance to access the registry.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/registries/aws-ecr.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[deepfence-ecr-role-setup.template](https://deepfence-public.s3.amazonaws.com/ecr/deepfence-ecr-role-setup.template)\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Certificate\nDESCRIPTION: This snippet configures the AuthenticatedClient with a custom SSL certificate bundle for secure communication. It initializes the client with the base URL, API key, and the path to the certificate file, enabling verification against internal servers using custom certificates.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Fine-tune Console Helm Chart\nDESCRIPTION: Retrieves the default values of the `deepfence-console` Helm chart, saves them to a file, and then installs the chart using the modified values file. This allows for customizing the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/kubernetes.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.1.3 > deepfence_console_values.yaml\n\n# Make the changes in this file and save\nvim deepfence_console_values.yaml\n\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.1.3\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Tokens (Sync)\nDESCRIPTION: This code demonstrates how to get access and refresh tokens using the regular ThreatMapper client in a synchronous manner.  It covers both SSL enabled and disabled scenarios.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n# Regular Client SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n#OR\n# Regular Client SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef get_access_refresh_token_sync():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = auth_token.sync(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = auth_token.sync_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response =  json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_sync->: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Sync)\nDESCRIPTION: This snippet shows how to refresh an access token using the `AuthenticatedClient` in a synchronous context. The refresh token is used for authentication. Both SSL enabled and disabled examples are shown. Replace `YOUR_CONSOLE_URL` and `YOUR_REFRESH_TOKEN` with your actual console URL and refresh token, and `/path/to/certificate_bundle.pem` with the path to your certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n# OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\",\n                             verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef refresh_token_sync():\n   try:\n      #  If we want minified response\n      res = auth_token_refresh.sync(client=client)\n      print(res.access_token, res.refresh_token)\n      #  If we want Detailed response\n      res = auth_token_refresh.sync_detailed(client=client)\n      if res.status_code == 200:\n         json_response = json.loads(res.content.decode(\"utf-8\"))\n         print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n      else:\n         raise Exception(\"\")\n   except UnexpectedStatus as e:\n      print(\"Exception when calling refresh_token_sync-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configure Neo4j connection in docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows the configuration settings in docker-compose.yml for connecting to a Neo4j AuraDB instance. It includes the username, password, host, and port for the Neo4j database. Replace <password> with the actual password for the Neo4j user.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/managed-database.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_NEO4J_USER: neo4j\n    DEEPFENCE_NEO4J_PASSWORD: <password>\n    NEO4J_AUTH: neo4j/<password>\n    DEEPFENCE_NEO4J_BOLT_PORT: 7687\n    DEEPFENCE_NEO4J_HOST: abcdefgh.databases.neo4j.io\n```\n\n----------------------------------------\n\nTITLE: Render DocCardList in MDX\nDESCRIPTION: This code snippet imports necessary modules from Docusaurus and renders a list of documentation cards using DocCardList component. It leverages `useCurrentSidebarCategory` hook to get the current sidebar category items.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Create IAM Role Trust Policy for ECS Tasks (JSON)\nDESCRIPTION: This JSON defines a trust policy for an IAM role that allows ECS tasks to assume the role. This is necessary for ECS tasks to have the permissions required to interact with AWS services.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/aws-ecs.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n            \"Service\": \"ecs-tasks.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n    }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router with Helm\nDESCRIPTION: Installs the Deepfence Router using the Helm chart and the customized values file.  This allows for overriding the default image repository with a custom one during installation in a Kubernetes environment. This package enables external access.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version 2.0.1\n```\n\n----------------------------------------\n\nTITLE: Describing a Pod with kubectl\nDESCRIPTION: This command provides detailed information about a specific pod, including events that can help diagnose startup failures. The output often reveals issues like failed volume mounts or container initialization problems.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL in values.yaml for Kubernetes (YAML)\nDESCRIPTION: This snippet shows how to configure PostgreSQL settings in the `values.yaml` file for Kubernetes deployment. It disables the creation of a PostgreSQL StatefulSet and specifies the name of an existing secret.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\npostgres:\n  # Specifies whether a postgres database instance should be created\n  create: false\n  # if create false provide name of the existing secret\n  # secret format refer templates/deepfence-console-secrets/postgres.yaml\n  secretName: \"deepfence-console-secrets-postgres\"\n```\n\n----------------------------------------\n\nTITLE: DocCardList Component in MDX\nDESCRIPTION: This code snippet imports and uses the `DocCardList` component from `@theme/DocCardList` and `useCurrentSidebarCategory` hook from `@docusaurus/theme-common`. It dynamically renders a list of documentation cards based on the current sidebar category, allowing for navigation within documentation pages.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: mdx-code-block\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes: Set namespace and podname variables\nDESCRIPTION: These commands set the `NAMESPACE` and `PODNAME` variables, which are used in subsequent Kubernetes commands. The namespace is set to `deepfence-console`, and the pod name is dynamically retrieved using `kubectl` and `grep` to find the Neo4j pod.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/upgrade-from-v2.1.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport NAMESPACE=deepfence-console\nexport PODNAME=`kubectl get pods -n $NAMESPACE --no-headers -o custom-columns=\":metadata.name\" | grep neo4j`\n```\n\n----------------------------------------\n\nTITLE: Configure PostgreSQL connection in docker-compose.yml\nDESCRIPTION: This YAML snippet configures the connection parameters for PostgreSQL in the docker-compose.yml file. It sets the username, password, host, port, database name, and SSL mode for the PostgreSQL database. Replace <password> with the actual password for your PostgreSQL instance. Requires a running PostgreSQL instance, such as AWS RDS.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/managed-database.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nx-service-variables: &common-creds\n    DEEPFENCE_POSTGRES_USER_DB_USER: postgres\n    DEEPFENCE_POSTGRES_USER_DB_PASSWORD: <password>\n    DEEPFENCE_POSTGRES_USER_DB_HOST: pg-db-1.aaaaaa.us-east-1.rds.amazonaws.com\n    DEEPFENCE_POSTGRES_USER_DB_NAME: deepfence\n    DEEPFENCE_POSTGRES_USER_DB_PORT: 5432\n    DEEPFENCE_POSTGRES_USER_DB_SSLMODE: disable\n```\n\n----------------------------------------\n\nTITLE: Execute post-upgrade script (Docker)\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script within the `deepfence-neo4j` Docker container. This completes the upgrade process after the new release is deployed and Neo4j has performed its initial setup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/upgrade-from-v2.1.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec deepfence-neo4j /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Template for Deepfence Console Account Setup\nDESCRIPTION: This CloudFormation template sets up the necessary IAM resources in the AWS account where the Deepfence Console is deployed. It creates a role that allows the console to assume the cross-account ECR access role in the target ECR registry account.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/registries/aws-ecr.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n[deepfence-console-account-setup.template](https://deepfence-public.s3.amazonaws.com/cross-account-ecr/deepfence-console-account-setup.template)\n```\n\n----------------------------------------\n\nTITLE: Configure TLS Secret Name in Kubernetes Values File (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure the name of a Kubernetes TLS secret containing the certificate within a Helm values file. The `secretName` field points to an existing TLS secret in the same namespace as the console, simplifying certificate management in Kubernetes environments.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/initial-configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    secretName: console-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Generate Self-Signed SSL Certificate with OpenSSL\nDESCRIPTION: This snippet demonstrates how to generate a self-signed SSL certificate and key using OpenSSL. It's used to create a certificate for the Management Console when a custom one is not provided.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/initial-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl req -x509 -newkey rsa:4096 \\\n  -keyout /etc/deepfence/certs/sslkey.key -out /etc/deepfence/certs/sslcert.crt \\\n  -days 365 -nodes\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment Commands\nDESCRIPTION: These shell commands initialize the Terraform working directory, create an execution plan, and apply the configuration to deploy the Deepfence Cloud Scanner on AWS ECS. It assumes that the Terraform configuration file `cloud-scanner.tf` has been created with the necessary parameters.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router Helm Chart\nDESCRIPTION: This command installs the Deepfence router Helm chart into the specified Kubernetes namespace. It creates a LoadBalancer service for accessing the console externally, setting the namespace, and chart version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# helm show values deepfence/deepfence-router --version 2.3.1\n\nhelm install deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.3.1\n```\n\n----------------------------------------\n\nTITLE: Creating File Server secret in Kubernetes (Shell)\nDESCRIPTION: This snippet demonstrates how to create a Kubernetes secret for file server credentials and apply it to the deepfence-console namespace. It utilizes kubectl to create the namespace and apply the secret from a YAML file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl create namespace deepfence-console\nkubectl apply -f deepfence_fileserver_secret.yaml -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Fargate Task Definition - Volumes From (JSON)\nDESCRIPTION: This snippet shows the JSON configuration for setting up volume sharing between the application container and the ThreatMapper agent container in a Fargate task definition.  The `sourceContainer` field specifies the name of the ThreatMapper agent container, and `readOnly` is set to `false` to allow the application container to read and write to the agent's volume.  The container name needs to be changed to the actual name of the deepfence agent container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/sensors/aws-fargate.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"volumesFrom\": [\n       {\n           \"sourceContainer\": \"deepfence-agent\",\n           \"readOnly\": false\n       }\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status with kubectl\nDESCRIPTION: This command retrieves the status of pods in the deepfence namespace, which can be used to identify if the deepfence-agent is failing to start.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts Synchronously\nDESCRIPTION: This snippet demonstrates how to list hosts using the ThreatMapper API synchronously. It constructs a request payload, calls the search_hosts endpoint, and then iterates through the results to print host IDs. It handles potential exceptions related to unexpected API status codes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef list_hosts():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       agent_host_list = []\n       discovered_host_list = []\n       for host in hosts:\n           # If agent is running inside hosts\n           if host.agent_running:\n               agent_host_list.append(host.node_id)\n           else:\n              discovered_host_list.append(host.node_id)\n       print(agent_host_list, discovered_host_list)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Download Docker Compose File\nDESCRIPTION: Downloads the docker-compose.yml file from the ThreatMapper repository to the host system. This file is used to define and manage the Docker containers for the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.5/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated ThreatMapper Client with SSL Verification\nDESCRIPTION: This snippet shows how to initialize the authenticated client while specifying a custom SSL certificate bundle for verification. Replace `YOUR_CONSOLE_URL`, `Api Key`, and `/path/to/certificate_bundle.pem` with the appropriate values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console via Helm\nDESCRIPTION: This command installs the ThreatMapper console using Helm. It sets the image tag, storage class, namespace, and version.  It requires Helm to be installed and configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-console deepfence/deepfence-console \\\n    --set global.imageTag=2.2.2 \\\n    --set global.storageClass=gp3 \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: List of ThreatMapper Containers Built\nDESCRIPTION: This code snippet lists the containers that are built as part of the ThreatMapper project. These containers form the foundation of the threat detection and response system.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/index.md#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\ndeepfence_agent_build_ce\ndeepfence_agent_ce\ndeepfence_api_ce\ndeepfence_diagnosis_ce\ndeepfence_discovery_ce\ndeepfence_elastic_ce\ndeepfence_fetcher_ce\ndeepfence_init_ce\ndeepfence_postgres_ce\ndeepfence_redis_ce\ndeepfence_router_ce\ndeepfence_ui_ce\ndeepfence_vulnerability_mapper_ce\n```\n\n----------------------------------------\n\nTITLE: Codecgen Usage\nDESCRIPTION: This command shows the usage options for the codecgen tool, including specifying the codec path, output file, regex for type name matching, regex for type name exclusion, tags for go run, build tags, unsafe usage, and keeping temporary files.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/codecgen/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncodecgen -?\n```\n\n----------------------------------------\n\nTITLE: Helm Show Values Command\nDESCRIPTION: Downloads the default values for the Deepfence Cloud Scanner Helm chart to a file named `cloud-scanner.yaml`. This file can then be modified to customize the deployment.  It is essential to specify the chart version when downloading values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm show values cloud-scanner/deepfence-cloud-scanner --version 2.4.0 > cloud-scanner.yaml\n```\n\n----------------------------------------\n\nTITLE: Downloading docker-compose.yml with wget\nDESCRIPTION: Downloads the docker-compose.yml file from the specified GitHub repository using wget. This file is essential for deploying the ThreatMapper console using Docker Compose. It specifies the services, networks, and volumes required for the console to run.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-1.5/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Copy Backup to Neo4j Container\nDESCRIPTION: This command copies the specified backup file to the root directory of the running Neo4j container, preparing it for the restore process. Replace <BACKUP_FILE> with the actual path and filename of your backup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/database-export-import.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp <BACKUP_FILE> deepfence-neo4j:/\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This MDX code snippet imports DocCardList and useCurrentSidebarCategory from Docusaurus theme modules. It uses these components to dynamically render a list of documentation cards based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Display Troubleshooting DocCardList (MDX)\nDESCRIPTION: This snippet renders a DocCardList component, filtering the sidebar items to only include those whose label includes 'Troubleshooting'. This displays documentation links related to troubleshooting the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/index.md#_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes: Copy and execute pre-upgrade script\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script to the Neo4j pod in the specified namespace and then execute it. The script is executed before the upgrade to the new release.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/upgrade-from-v2.1.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl cp -n $NAMESPACE pre-upgrade-to-v5.sh $PODNAME:/startup \nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Installing ps package in Go\nDESCRIPTION: This command installs the 'ps' package, which provides persistent data structures for Go, using the 'go get' tool.  It fetches the package from its repository and makes it available for use in Go projects. It requires Go to be installed and configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_server/pkg/scope/report/ps/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get github.com/mndrix/ps\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Async)\nDESCRIPTION: This code demonstrates how to refresh an access token using the authenticated ThreatMapper client in an asynchronous manner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\nimport json\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def refresh_token_async():\n    try:\n        #  If we want minified response\n        res = await auth_token_refresh.asyncio(client=client)\n        print(res.access_token, res.refresh_token)\n        #  If we want Detailed response\n        res = await auth_token_refresh.asyncio_detailed(client=client)\n        if res.status_code == 200:\n           json_response = json.loads(res.content.decode(\"utf-8\"))\n           print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n        else:\n            raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Uninstall Deepfence Agent\nDESCRIPTION: This set of commands stops and disables the Deepfence agent service, then removes the service file and the installation directory. This effectively uninstalls the Deepfence agent from the system. Requires root privileges.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/linux-host.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop deepfence-agent.service\nsudo systemctl disable deepfence-agent.service\nsudo rm -f /etc/systemd/system/deepfence-agent.service\nsudo rm -rf /opt/deepfence\n```\n\n----------------------------------------\n\nTITLE: Install Management Console via Helm\nDESCRIPTION: Installs the Deepfence Management Console in a Kubernetes cluster using Helm, utilizing a customized values.yaml file. The values file allows overriding default settings like the image repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version 2.4.1\n```\n\n----------------------------------------\n\nTITLE: Installing Latest ThreatMapper Sensor with Docker\nDESCRIPTION: Deploys the latest version of the Deepfence sensor agent as a Docker container. Sets resource constraints, mounts necessary volumes for access to system information and Docker socket, and configures environment variables for connecting to the management console using the provided URL and API key.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit --cpus=\".2\" --name=deepfence-agent --restart on-failure --pid=host --net=host \\\n  --privileged=true -v /sys/kernel/debug:/sys/kernel/debug:rw -v /var/log/fenced \\\n  -v /var/run/docker.sock:/var/run/docker.sock -v /:/fenced/mnt/host/:ro \\\n  -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" -e MGMT_CONSOLE_PORT=\"443\" \\\n  -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n  deepfenceio/deepfence_agent_ce:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Codecgen\nDESCRIPTION: This command downloads and installs the codecgen tool from the specified GitHub repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/codecgen/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -u github.com/ugorji/go/codec/codecgen\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts (Synchronous)\nDESCRIPTION: This function retrieves a list of hosts from the ThreatMapper API using a synchronous call. It constructs a payload with node filters and pagination settings, then parses the response to separate agent-running hosts from discovered hosts. It handles potential exceptions from unexpected API statuses.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef list_hosts():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       agent_host_list = []\n       discovered_host_list = []\n       for host in hosts:\n           # If agent is running inside hosts\n           if host.agent_running:\n               agent_host_list.append(host.node_id)\n           else:\n              discovered_host_list.append(host.node_id)\n       print(agent_host_list, discovered_host_list)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Proxy Settings\nDESCRIPTION: Configures Docker to use a proxy server for accessing external resources.  It involves modifying the `config.json` file in the `~/.docker/` directory with the proxy server address and any exceptions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/docker.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"\"\n            }\n    },\n    \"HttpHeaders\": {\n        \"User-Agent\": \"Docker-Client/19.03.1 (linux)\"\n    },\n    \"proxies\": {\n        \"default\": {\n            \"httpProxy\": \"http://111.111.111.111:8006\",\n            \"httpsProxy\": \"http://111.111.111.111:8006\",\n            \"noProxy\": \"localhost,127.0.0.1\"\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Storage Class\nDESCRIPTION: This command retrieves the available storage classes in the Kubernetes cluster. It is used to identify appropriate storage class to be used for Persistent Volume Claims.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Adding GCR Registry\nDESCRIPTION: This code snippet adds a Google Container Registry (GCR) using the ThreatMapper API. It initializes an authenticated client and then uses the `add_registry_gcr.sync` method to send a request to add the registry, including the registry name, URL, and service account JSON file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.types import File\nfrom threatmapper.api.registry import add_registry_gcr\nfrom threatmapper.models import FormDataModelRegistryGCRAddReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef add_gcr_registry():\n    try:\n       name = 'Google Registry'\n       registry_url = 'YOUR_REGISTRY_URL'\n       service_account_json = File(payload=open('/path/to/json','rb'), mime_type=\"application/json\", file_name=\"service.json\")\n       multipart_data=FormDataModelRegistryGCRAddReq(name=name, registry_url=registry_url, service_account_json=service_account_json)\n       response = add_registry_gcr.sync(client=client, multipart_data=multipart_data)\n       print(response.message)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n      \n```\n\n----------------------------------------\n\nTITLE: Kubernetes: Copy and execute pre-upgrade script\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script to the Neo4j pod and then execute it. This prepares the Neo4j database for the upgrade process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/upgrade-from-v2.1.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl cp -n $NAMESPACE pre-upgrade-to-v5.sh $PODNAME:/startup \nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Example Neo4j Restore Script Usage\nDESCRIPTION: This is an example of how to run the Neo4j restore script. It shows the specific filename that needs to be passed as an argument. It must be executed inside the Neo4j Docker container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /neo4j_backup_2023-11-17_10-25-28\n```\n\n----------------------------------------\n\nTITLE: Create Helm Values File for Console\nDESCRIPTION: Generates a default values.yaml file for the deepfence-console Helm chart. This file contains configurable parameters for the console deployment, such as image repositories, resource limits, and service settings.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.4.1 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Copy file to Neo4j Docker container\nDESCRIPTION: This command copies a backup file from the host machine to the deepfence-neo4j Docker container.  `<BACKUP_FILE>` represents the name of the backup file that will be copied to the root directory of the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker cp <BACKUP_FILE> deepfence-neo4j:/\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml\nDESCRIPTION: Downloads the docker-compose.yml file from the Deepfence ThreatMapper repository to the system that will host the Console. This file defines the services and configurations needed to run the ThreatMapper console using Docker Compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/blob/release-2.4/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Console Kubernetes\nDESCRIPTION: Installs the ThreatMapper Console using Helm. This command first adds the deepfence helm repository and then uses helm to install the deepfence-console chart with a specific version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n\nhelm install deepfence-console deepfence/deepfence-console --version 1.5.2\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Service\nDESCRIPTION: Restarts the Docker daemon to apply the proxy settings configured in the `config.json` file.  This ensures that Docker uses the specified proxy when pulling images or performing other network operations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Removing File Server service from docker-compose.yml (YAML)\nDESCRIPTION: This snippet shows how to remove the `deepfence-file-server` service from the `docker-compose.yml` file, which is necessary when using an external file server.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/managed-database.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n      deepfence-file-server:\n        container_name: deepfence-file-server\n```\n\n----------------------------------------\n\nTITLE: Describing a Pod with kubectl\nDESCRIPTION: This command provides detailed information about a specific pod, including events and error messages, useful for diagnosing the cause of the agent's failure.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This code snippet defines a function `list_hosts` to retrieve a list of hosts using the ThreatMapper API. It constructs a payload to filter active hosts and distinguishes between hosts with and without the agent running. It catches any `UnexpectedStatus` exceptions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef list_hosts():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       agent_host_list = []\n       discovered_host_list = []\n       for host in hosts:\n           # If agent is running inside hosts\n           if host.agent_running:\n               agent_host_list.append(host.node_id)\n           else:\n              discovered_host_list.append(host.node_id)\n       print(agent_host_list, discovered_host_list)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Kubernetes: Execute post-upgrade script\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script inside the Neo4j pod in the specified namespace. It is executed after upgrading to the new release and after the scheduler has completed the initial Neo4j setup, finalizing the upgrade process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/upgrade-from-v2.1.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it -n $NAMESPACE $PODNAME -- /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Import useCurrentSidebarCategory hook in MDX\nDESCRIPTION: Imports the useCurrentSidebarCategory hook from the \"@docusaurus/theme-common\" module for use in MDX files. This hook provides access to the current sidebar category, allowing components to dynamically adjust their content.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/index.md#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Save Deepfence Console Helm Values\nDESCRIPTION: This command retrieves the default values of the Deepfence console Helm chart and saves them to a YAML file. This file can then be customized to override the default configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.3.1 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Execute shell in Postgres Docker container\nDESCRIPTION: This command executes a bash shell within the deepfence-postgres Docker container. This allows you to run commands directly inside the container for tasks like database backup and restore.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Docker Container\nDESCRIPTION: This command allows you to execute commands inside a running PostgreSQL Docker container. This is necessary to run the backup script. Requires Docker to be installed and the `deepfence-postgres` container to be running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-postgres /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Delete ThreatMapper Console Helm\nDESCRIPTION: These commands delete the ThreatMapper router and console deployments from the `deepfence-console` namespace using Helm. This removes all resources associated with the ThreatMapper console from the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-router -n deepfence-console\nhelm delete deepfence-console -n deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This code demonstrates how to list hosts using the ThreatMapper API.  It initializes an authenticated client and calls the search_hosts function.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n```\n\n----------------------------------------\n\nTITLE: Refreshing Token (Sync Python)\nDESCRIPTION: This Python code demonstrates how to refresh an access token using the authenticated ThreatMapper client in a synchronous manner. It uses the `auth_token_refresh.sync` and `auth_token_refresh.sync_detailed` methods. SSL verification can be enabled or disabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.api.authentication import auth_token_refresh\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n# OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\",\n                             verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef refresh_token_sync():\n   try:\n      #  If we want minified response\n      res = auth_token_refresh.sync(client=client)\n      print(res.access_token, res.refresh_token)\n      #  If we want Detailed response\n      res = auth_token_refresh.sync_detailed(client=client)\n      if res.status_code == 200:\n         json_response = json.loads(res.content.decode(\"utf-8\"))\n         print(json_response[\"access-token\"], json_response[\"refresh-token\"])\n      else:\n         raise Exception(\"\")\n   except UnexpectedStatus as e:\n      print(\"Exception when calling refresh_token_sync-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform\nDESCRIPTION: These are the commands used to initialize, plan, and apply the Terraform configuration. `terraform init` initializes the Terraform working directory. `terraform plan` creates an execution plan. `terraform apply` applies the changes to create the resources.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/aws.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with API Key\nDESCRIPTION: This snippet demonstrates initializing an authenticated ThreatMapper client using an API key. It creates an AuthenticatedClient instance, passing the base URL and the API key as parameters.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"Api Key\")\n```\n\n----------------------------------------\n\nTITLE: Describe Pod with kubectl\nDESCRIPTION: This command provides detailed information about a specific pod, in this case, the deepfence-agent pod. It is used to investigate the cause of the agent's failure by examining events, logs, and configuration details.  The output reveals specific errors, such as failed volume mounts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/tips/sensor-agent-not-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe pod -n deepfence deepfence-agent-8lxng\n```\n\n----------------------------------------\n\nTITLE: Showing Deepfence Router Helm Chart Values - Bash\nDESCRIPTION: This command retrieves the default values for the deepfence-router Helm chart, which can then be customized and used for a more detailed setup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence-router > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Vulnerability Scan (Asynchronous)\nDESCRIPTION: This snippet demonstrates starting a vulnerability scan on hosts using the ThreatMapper API asynchronously. It first retrieves a list of hosts using the `node_config` function, then constructs a payload specifying the scan configuration (languages to scan for) and the target node IDs. It prints the scan IDs and bulk scan ID returned by the API.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.vulnerability import start_vulnerability_scan\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import ModelVulnerabilityScanTriggerReq, SearchSearchNodeReq, ModelScanTriggerResp\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\nfrom typing import List\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\n\ndef node_config() -> List:\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       hosts = search_hosts.sync(client=client,json_body=json_body)\n       host_list = []\n       for host in hosts:\n          host_list.append({\"node_id\":host.node_id, \"node_type\": \"host\"})\n       return host_list\n    except UnexpectedStatus as e:\n        print(\"Exception when calling node_config-> %s\\n\" % e)\n\nasync def start_vulnerability_scan_on_hosts():\n    try:\n       node_ids = node_config()\n       payload_dict = {\n                       \"filters\": {\n                         \"cloud_account_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"container_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"host_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"image_scan_filter\": {\n                           \"filter_in\": None\n                         },\n                         \"kubernetes_cluster_scan_filter\": {\n                           \"filter_in\": None\n                         }\n                       },\n                       \"node_ids\": node_ids,\n                       \"scan_config\": [\n                         {\n                           \"language\": \"base\"\n                         },\n                         {\n                           \"language\": \"java\"\n                         },\n                         {\n                           \"language\": \"javascript\"\n                         },\n                         {\n                           \"language\": \"rust\"\n                         },\n                         {\n                           \"language\": \"golang\"\n                         },\n                         {\n                           \"language\": \"ruby\"\n                         },\n                         {\n                           \"language\": \"python\"\n                         },\n                         {\n                           \"language\": \"php\"\n                         },\n                         {\n                           \"language\": \"dotnet\"\n                         }\n                       ]\n                     }\n       json_body = ModelVulnerabilityScanTriggerReq.from_dict(payload_dict)\n       response: ModelScanTriggerResp = await start_vulnerability_scan.asyncio(client=client,json_body=json_body)\n       print(response.scan_ids, response.bulk_scan_id)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling start_vulnerability_scan_on_hosts-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Copy and execute script (Docker)\nDESCRIPTION: These commands copy the `pre-upgrade-to-v5.sh` script to the Neo4j Docker container and then execute it. This must be done before upgrading to the new release.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/upgrade-from-v2.1.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp pre-upgrade-to-v5.sh deepfence-neo4j:/startup\ndocker exec deepfence-neo4j /startup/pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client with SSL Verification\nDESCRIPTION: This snippet shows how to initialize an authenticated ThreatMapper client with SSL certificate verification.  The `verify_ssl` parameter is set to the path of the certificate bundle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\",\n    verify_ssl=\"/path/to/certificate_bundle.pem\",\n)\n```\n\n----------------------------------------\n\nTITLE: Reset ThreatMapper password in Docker\nDESCRIPTION: This command resets the ThreatMapper administrator password in a Docker deployment. It executes the `deepfence_server --reset-password` command inside the `deepfence-server` container.  This requires Docker to be running and the container to be accessible.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-server bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router via Helm\nDESCRIPTION: This command installs the Deepfence router using Helm, creating a LoadBalancer service.  It requires Helm to be installed and configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Terraform Output Command\nDESCRIPTION: This command retrieves the client_secret from the terraform output after the terraform script has been applied. It is necessary to securely obtain the client secret for configuring the Deepfence Cloud Scanner.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nterraform output client_secret\n```\n\n----------------------------------------\n\nTITLE: Installing ThreatMapper Python SDK\nDESCRIPTION: This command installs the ThreatMapper Python SDK from the GitHub repository using pip. It allows you to utilize the library's functions for interacting with Deepfence ThreatMapper.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/deepfence/threatmapper-python-client.git\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Router TLS Configuration using Existing Secret\nDESCRIPTION: This YAML snippet shows how to configure TLS for the Deepfence Router in Kubernetes by referencing an existing TLS secret.  The secret must contain `tls.crt` and `tls.key`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/initial-configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  tls:\n    secretName: console-tls-certs\n```\n\n----------------------------------------\n\nTITLE: Terraform Deployment Commands\nDESCRIPTION: These commands initialize Terraform, create a plan, and apply the configuration to deploy the Cloud Scanner. They require Terraform to be installed and configured with access to your Azure account.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/azure.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Describe Deployment Status via Kubectl\nDESCRIPTION: This command provides detailed information about deployments within the specified namespace. It helps diagnose any issues preventing the deployment from starting correctly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-agent/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl describe deployment -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes\nDESCRIPTION: This command removes unused Docker volumes from the system.  Docker volumes persist data even after containers are removed, so pruning them is important for a complete uninstall.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Install and Start ThreatMapper Console - Bash\nDESCRIPTION: This command uses Docker Compose to install and start the ThreatMapper Management Console in detached mode (-d). It reads the configuration from the docker-compose.yml file and creates and runs the necessary containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Downloading docker-compose.yaml\nDESCRIPTION: Downloads the docker-compose.yaml file from the specified URL using wget. This file defines the services and configurations for running the Deepfence Cloud Scanner using Docker Compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/deepfence/cloud-scanner/refs/heads/release-2.3/docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Agent Helm Chart\nDESCRIPTION: This command installs the Deepfence Agent using Helm.  It configures various settings like the management console URL, API key, image tag, cluster name, and container runtime socket mount paths.  Replace `x.x.x.x` with the IP address of the Management Console and `73f6f3d0-9931-4b31-8967-fd6adf475f80` with the API key. The namespace is set to `deepfence` and is created if it doesn't exist.  The chart version is specified as 1.5.0.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm show readme deepfence/deepfence-agent --version 1.5.0\nhelm show values deepfence/deepfence-agent --version 1.5.0\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set image.tag=1.5.0 \\\n    --set image.clusterAgentImageTag=1.5.0 \\\n    --set clusterName=prod-cluster \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version 1.5.0\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreatMapper Client (Python)\nDESCRIPTION: This Python code initializes a basic ThreatMapper client.  The `base_url` parameter should be set to the URL of your ThreatMapper console. This client does not include authentication.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\nclient = Client(base_url=\"YOUR_CONSOLE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Execute Postgres DB Export Script\nDESCRIPTION: This command executes the pg-export.sh script within the postgres Docker container to create a database backup. The backup file will be created at /data/pg_data.dump inside the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/pg-export.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository\nDESCRIPTION: Adds the Deepfence Cloud Scanner Helm repository to your local Helm configuration. This allows you to access and install the Deepfence Cloud Scanner chart. Requires Helm to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add cloud-scanner https://deepfence-helm-charts.s3.amazonaws.com/cloud-scanner\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes\nDESCRIPTION: Removes unused Docker volumes from the system. This command deletes volumes that are not currently in use by any containers, helping to free up disk space.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Modify deepfence_agent_values.yaml\nDESCRIPTION: This snippet describes how to modify the deepfence_agent_values.yaml file to set the `containerdSock` value to `\"false\"`. This configuration change is crucial for resolving the hostPath type check failure. It disables the socket configuration that causes the startup issue.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/tips/sensor-agent-not-start.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# You will need to update the following values:\n#   containerdSock - set to \"false\"\nvim deepfence_agent_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This MDX code imports `DocCardList` and `useCurrentSidebarCategory` to dynamically generate a list of documentation cards based on the current sidebar category. It allows for automatic listing of related documents within the installation guide.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/installation.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images (Bash)\nDESCRIPTION: Removes unused Docker images from the system. This can free up disk space after uninstalling the ThreatMapper Management Console.  It prompts for confirmation before deleting images.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Installation Documentation Cards\nDESCRIPTION: Renders a list of documentation cards related to the installation process of the Management Console. The DocCardList component is used to display the filtered items from the current sidebar category where the label includes 'Installation'.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Neo4j Docker Container\nDESCRIPTION: This command provides access to the shell of the running Neo4j Docker container named 'deepfence-neo4j'. This is required to run the backup and restore scripts within the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/database-export-import.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-neo4j /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client SSL Disabled - Python\nDESCRIPTION: This snippet shows how to initialize an AuthenticatedClient object with SSL verification disabled. It takes the base URL and a token as input. Useful for development or testing in environments without valid SSL certificates.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n```\n\n----------------------------------------\n\nTITLE: Listing Containers ASYNC\nDESCRIPTION: This code snippet demonstrates how to asynchronously retrieve a list of containers using the ThreatMapper API. It initializes an AuthenticatedClient (SSL enabled or disabled). It constructs a payload for filtering active containers and prints the node ID and name of each container. It handles `UnexpectedStatus` exceptions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_containers\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def list_containers():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       containers = await search_containers.asyncio(client=client,json_body=json_body)\n       for container in containers:\n          print(container.node_id, container.node_name)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_containers-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Build ThreatMapper Bash\nDESCRIPTION: Clones the ThreatMapper repository, navigates into it, and executes the `make` command to build the container images. Requires git and make to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\nmake\n```\n\n----------------------------------------\n\nTITLE: Downloading Helm Chart Values for Cloud Scanner\nDESCRIPTION: Downloads the default values for the deepfence-cloud-scanner helm chart to a file named cloud-scanner.yaml. This file can then be modified to customize the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/aws.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values cloud-scanner/deepfence-cloud-scanner --version 2.4.0 > cloud-scanner.yaml\n```\n\n----------------------------------------\n\nTITLE: Add Helm Repository for Cloud Scanner\nDESCRIPTION: This command adds the Deepfence Cloud Scanner Helm repository to your Helm configuration. This is a necessary step before you can install the Deepfence Cloud Scanner Helm chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/cloudscanner/aws.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add cloud-scanner https://deepfence-helm-charts.s3.amazonaws.com/cloud-scanner\n```\n\n----------------------------------------\n\nTITLE: Download Docker Compose File (Bash)\nDESCRIPTION: Downloads the docker-compose.yml file from the Deepfence ThreatMapper repository. This file is essential for deploying the management console using Docker Compose.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/blob/release-2.2/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Run Deepfence Management Console (Bash)\nDESCRIPTION: Navigates to the deployment-scripts directory and starts the Deepfence Management Console using Docker Compose in detached mode. Requires Docker Compose to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ThreatMapper/deployment-scripts\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Check Pod Status (kubectl)\nDESCRIPTION: This command retrieves the status of all pods within the specified namespace. It is essential for verifying that all pods are running correctly after deployment or updates.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/templates/NOTES.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl get pods -n {{ .Values.namespace }}\n```\n\n----------------------------------------\n\nTITLE: Save Deepfence Console Helm Chart Values\nDESCRIPTION: This command saves the default values of the Deepfence console Helm chart to a YAML file.  This allows for customization of the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.2.2 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Run Docker Compose with Custom Repository\nDESCRIPTION: Executes the docker-compose.yml file to install and start the ThreatMapper console using Docker.  The IMAGE_REPOSITORY variable overrides the default image repository to use a custom repository (myorg) by first logging into the specified Docker Hub account.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nACC=myorg             # the name of the dockerhub account \ndocker login -u $ACC  # log in to the account\nIMAGE_REPOSITORY=$ACC docker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Check Pod Status\nDESCRIPTION: This command retrieves the status of pods within the 'deepfence' namespace, used to diagnose if the deepfence-agent is in a 'ContainerCreating' or failing state.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Show Helm Chart Values and Readme\nDESCRIPTION: These commands show the default values and README file for the deepfence-k8s-scanner Helm chart. This allows you to understand the configurable parameters and usage instructions before installing the chart.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/kubernetes-scanner/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm show values deepfence-k8s-scanner/deepfence-k8s-scanner\nhelm show readme deepfence-k8s-scanner/deepfence-k8s-scanner\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images and Volumes - Bash\nDESCRIPTION: These commands remove unused Docker images and volumes to free up disk space. This is an optional step after removing the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/docker.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Delete Deepfence Agent Helm Release\nDESCRIPTION: This command deletes the Deepfence Agent Helm release from the specified namespace (`deepfence`). It is used to uninstall the ThreatMapper sensor from the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Starting Cloud Scanner with Docker Compose\nDESCRIPTION: Starts the Deepfence Cloud Scanner using Docker Compose in detached mode. This command deploys the services defined in the docker-compose.yaml file.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Getting Access and Refresh Token (Async)\nDESCRIPTION: This code snippet demonstrates how to retrieve access and refresh tokens using the regular `Client` in an asynchronous manner. It includes both SSL enabled and disabled configurations. Replace `YOUR_CONSOLE_URL` and `YOUR_API_KEY` with the correct values and `/path/to/certificate_bundle.pem` with the actual path to your certificate bundle if SSL is enabled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/python-sdk.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom threatmapper import Client\nfrom threatmapper.models import ModelApiAuthRequest\nfrom threatmapper.api.authentication import auth_token\nfrom threatmapper.errors import UnexpectedStatus\n\n\n# SSL Disabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=False)\n# OR\n# SSL Enabled\nclient = Client(base_url=\"YOUR_CONSOLE_URL\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def get_access_refresh_token_async():\n    try:\n        json_body = ModelApiAuthRequest(\n            api_token=\"YOUR_API_KEY\"\n        )\n        #  If we want minified response\n        api_response = await auth_token.asyncio(client=client, json_body=json_body)\n        print(api_response.access_token, api_response.refresh_token)\n        #  If we want detailed response\n        api_response = await auth_token.asyncio_detailed(client=client, json_body=json_body)\n        if api_response.status_code == 200:\n           json_response = json.loads(api_response.content.decode(\"utf-8\"))\n           print(json_response[\"access_token\"], json_response[\"refresh_token\"])\n        else:\n           raise Exception(\"\")\n    except UnexpectedStatus as e:\n        print(\"Exception when calling get_access_refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Import and Render DocCardList Component in MDX\nDESCRIPTION: This MDX snippet imports the DocCardList component from the '@theme/DocCardList' module and uses the useCurrentSidebarCategory hook from '@docusaurus/theme-common' to render a list of documentation cards. The component displays documentation items associated with the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/operations/index.md#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Router using Helm (Bash)\nDESCRIPTION: Installs the Deepfence router using Helm, applying the custom configurations specified in `deepfence_router_values.yaml`. It enables external access to the console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router --version 2.2.2\n```\n\n----------------------------------------\n\nTITLE: Start Cloud Scanner with Docker Compose\nDESCRIPTION: This command starts the Deepfence Cloud Scanner using Docker Compose in detached mode (`-d`). This will run the scanner in the background.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images\nDESCRIPTION: This command removes unused Docker images from the system. This helps to free up disk space after uninstalling the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Render DocCardList with Docusaurus\nDESCRIPTION: This snippet uses Docusaurus components to render a list of documentation cards. It imports `DocCardList` and `useCurrentSidebarCategory` to dynamically generate the card list based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Volumes (Bash)\nDESCRIPTION: Removes unused Docker volumes from the system. This can free up disk space after uninstalling the ThreatMapper Management Console. It prompts for confirmation before deleting volumes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Storage Class\nDESCRIPTION: This command retrieves the available storage classes in the Kubernetes cluster. This is crucial for configuring persistent volumes for ThreatMapper.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get storageclass\n```\n\n----------------------------------------\n\nTITLE: Display Troubleshooting Docs with DocCardList (MDX)\nDESCRIPTION: Uses the DocCardList component to display a list of documentation cards, filtering the current sidebar category items to include only those with labels containing \"Troubleshooting\".\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/index.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreatMapper Client\nDESCRIPTION: This example shows how to initialize a ThreatMapper client with a base URL. The base URL points to the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/python-sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\nclient = Client(base_url=\"YOUR_CONSOLE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Stop Deepfence Management Console\nDESCRIPTION: Stops the Deepfence Management Console using Docker Compose. Requires navigating to the deployment scripts directory first.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/build.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreatMapper Client\nDESCRIPTION: This code snippet demonstrates how to initialize a basic ThreatMapper client, connecting to a specified base URL. The `base_url` parameter should be replaced with the actual URL of your ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import Client\n\nclient = Client(base_url=\"YOUR_CONSOLE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Multi-Project Cloud Scanner\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner across multiple Google Cloud projects. It requires specifying the organization domain, console URL, Deepfence API key, project ID, and region. Optional parameters are available for connecting to a private IP console via a serverless VPC connector, requiring the VPC name and IP CIDR range.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/gcp.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"cloud-scanner_example_single-project\" {\n  source              = \"deepfence/cloud-scanner/gcp//examples/multi-project\"\n  org_domain          = \"<Your Org Domain> e.g. deepfence.io\"\n  version             = \"0.3.0\"\n  name                = \"deepfence-cloud-scanner\"\n  mgmt-console-url    = \"<Console URL> eg. XXX.XXX.XX.XXX\"\n  mgmt-console-port   = \"443\"\n  deepfence-key       = \"<Deepfence-key> eg. XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n  image_name          = \"us-east1-docker.pkg.dev/deepfenceio/deepfence/cloud-scanner:2.0.1\"\n  project_id          = \"<PROJECT_ID>; ex. dev1-123456\"\n  region              = \"<REGION_ID>; ex. asia-east1\"\n  #optional for private ip console\n  vpc                 = \"<VPC Network Name>; Name of vpc network in which the console exists\"\n  #optional for private ip console\n  ip_cidr_range_svpca = \"<11.0.0.0/28> IP CIDR range for the connector to above vpc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Authenticated Client Disabling SSL Verification\nDESCRIPTION: This snippet demonstrates how to initialize an authenticated ThreatMapper client while disabling SSL certificate verification. Note that disabling SSL verification poses a security risk.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper import AuthenticatedClient\n\nclient = AuthenticatedClient(\n    base_url=\"YOUR_CONSOLE_URL\", \n    token=\"Api Key\", \n    verify_ssl=False\n)\n```\n\n----------------------------------------\n\nTITLE: Make pre-upgrade script executable\nDESCRIPTION: This command makes the `pre-upgrade-to-v5.sh` script executable.  This is a prerequisite to running the script.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/upgrade-from-v2.1.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Developing all apps and packages\nDESCRIPTION: This command starts the development environment for all applications and packages within the monorepo. It typically uses hot reloading and other development-friendly features.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images\nDESCRIPTION: Removes unused Docker images from the system, freeing up disk space.  This is an optional step after removing the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Download Docker Compose File\nDESCRIPTION: Downloads the docker-compose.yml file from the ThreatMapper GitHub repository to the system that will host the Console. This file is used to define and manage the Docker containers required for the ThreatMapper Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/blob/release-2.0/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Make script executable\nDESCRIPTION: This command makes the `pre-upgrade-to-v5.sh` script executable. It is a prerequisite to running the upgrade script.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/upgrade-from-v2.1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Delete Deepfence Agent Helm Release - Kubernetes\nDESCRIPTION: This command deletes the Deepfence Agent Helm release from the Kubernetes cluster. It uses the `helm delete` command to remove the release named `deepfence-agent` from the `deepfence` namespace.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm delete deepfence-agent -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Cards using DocCardList in MDX\nDESCRIPTION: This code snippet imports `DocCardList` and `useCurrentSidebarCategory` from `@docusaurus/theme-common` to dynamically generate a list of documentation cards based on the current sidebar category in a Docusaurus site. It's designed for use within MDX files. It leverages React components to display relevant documentation links.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Bash Command to Start Cloud Scanner using Docker Compose\nDESCRIPTION: This bash command uses docker compose to start the Cloud Scanner service in detached mode (-d).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/gcp.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Adding GCR Registry\nDESCRIPTION: This code snippet adds a Google Container Registry (GCR) to ThreatMapper. It demonstrates how to create a `FormDataModelRegistryGCRAddReq` object with the registry name, URL, and service account JSON file, then calls the `add_registry_gcr` function.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/python-sdk.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.types import File\nfrom threatmapper.api.registry import add_registry_gcr\nfrom threatmapper.models import FormDataModelRegistryGCRAddReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\ndef add_gcr_registry():\n    try:\n       name = 'Google Registry'\n       registry_url = 'YOUR_REGISTRY_URL'\n       service_account_json = File(payload=open('/path/to/json','rb'), mime_type=\"application/json\", file_name=\"service.json\")\n       multipart_data=FormDataModelRegistryGCRAddReq(name=name, registry_url=registry_url, service_account_json=service_account_json)\n       response = add_registry_gcr.sync(client=client, multipart_data=multipart_data)\n       print(response.message)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling refresh_token_async-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts (Python)\nDESCRIPTION: This code snippet demonstrates how to list hosts using the ThreatMapper Python SDK.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n```\n\n----------------------------------------\n\nTITLE: Create deepfence_console_values.yaml - Bash\nDESCRIPTION: Generates a default `deepfence_console_values.yaml` file from the Deepfence Helm chart. This file is used to customize the console installation, particularly for specifying a custom image repository.  The `helm show values` command is used to extract the default values.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 2.1.3 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Add and Update Helm Repository\nDESCRIPTION: Adds the Deepfence Helm chart repository and updates the local Helm repository index. This step is necessary to install the ThreatMapper console using Helm.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Download docker-compose.yml - Bash\nDESCRIPTION: Downloads the `docker-compose.yml` file from the ThreatMapper repository.  This file is used for deploying the console on a Docker host. The file is retrieved using `wget`.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/deploy-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.1/deployment-scripts/docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Deploy deepfence-agent Helm Chart\nDESCRIPTION: This snippet deploys the deepfence-agent Helm chart to a Kubernetes cluster. It sets various parameters, including the management console URL, Deepfence API key, image tag, cluster name, and container runtime socket settings. It also creates a namespace if it doesn't exist and specifies the Helm chart version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/sensors/kubernetes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n\n# helm show readme deepfence/deepfence-agent --version TM_AGENT_HELM_CHART_VERSION | less\n# helm show values deepfence/deepfence-agent --version TM_AGENT_HELM_CHART_VERSION | less\n\nhelm install deepfence-agent deepfence/deepfence-agent \\\n    --set managementConsoleUrl=x.x.x.x \\\n    --set deepfenceKey=73f6f3d0-9931-4b31-8967-fd6adf475f80 \\\n    --set global.imageTag=THREATMAPPER_VERSION \\\n    --set clusterName=\"prod-cluster\" \\\n    --set mountContainerRuntimeSocket.containerdSock=true \\\n    --set mountContainerRuntimeSocket.dockerSock=false \\\n    --set mountContainerRuntimeSocket.crioSock=false \\\n    --set mountContainerRuntimeSocket.podmanSock=false \\\n    --set mountContainerRuntimeSocket.containerdSockPath=\"/run/containerd/containerd.sock\" \\\n    --set logLevel=\"info\" \\\n    --namespace deepfence \\\n    --create-namespace \\\n    --version TM_AGENT_HELM_CHART_VERSION\n```\n\n----------------------------------------\n\nTITLE: Make script executable\nDESCRIPTION: This command makes the `pre-upgrade-to-v5.sh` script executable. This is a prerequisite for running the script.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/upgrade-from-v2.1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x pre-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Hosts\nDESCRIPTION: This code snippet demonstrates how to list hosts using the ThreatMapper API.  It initializes an authenticated client and uses the `search_hosts.sync` method to fetch the host list.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/python-sdk.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_hosts\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n```\n\n----------------------------------------\n\nTITLE: Listing Documentation Cards with DocCardList (MDX)\nDESCRIPTION: This code snippet uses the DocCardList component from Docusaurus to dynamically display a list of documentation cards within an MDX file. It imports the necessary components and uses the useCurrentSidebarCategory hook to fetch the items for the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/registries/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Reset Password in Kubernetes Pod\nDESCRIPTION: This snippet provides the command to reset the password for the Threatmapper application running in a Kubernetes pod. It uses `kubectl exec` to execute the `flask reset-password` command within the `deepfence-api` container in the `deepfence-api` deployment. This is used when SES/SMTP is not configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deploy/deepfence-api -c deepfence-api -- bash -c \"flask reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Run Neo4j Restore Script\nDESCRIPTION: Executes the Neo4j restore script within the Neo4j Docker container, using the specified backup file to restore the database.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/database-export-import.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /<BACKUP_FILE>\n```\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/load_backup_neo4j.sh /neo4j_backup_2023-11-17_10-25-28\n```\n\n----------------------------------------\n\nTITLE: Create custom values.yaml for Deepfence Router (Bash)\nDESCRIPTION: Generates a default `deepfence_router_values.yaml` file which will be edited to replace the image repository and customize the helm installation. Enables external access to the console via the `deepfence-router` package.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/deploy-console.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-router --version 2.2.2 > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Deployment\nDESCRIPTION: This snippet retrieves the Kubernetes deployment information for the `deepfence-console` namespace. This is to verify the name of deployment if the helm chart name was customized\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deploy --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Checking code formatting issues\nDESCRIPTION: This command checks the code for formatting issues based on the configured Prettier rules. It provides a report of any discrepancies found.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm run format\n```\n\n----------------------------------------\n\nTITLE: Docker: Execute post-upgrade script\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script within the Neo4j Docker container. It should be run after upgrading to the new release and after the initial Neo4j setup is complete.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/upgrade-from-v2.1.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec deepfence-neo4j /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Codec Handles\nDESCRIPTION: This snippet shows how to create and configure different codec handles (Binc, Msgpack, and Cbor) for use with the ugorji/go/codec library. It also includes an example of setting the MapType for the Msgpack handle.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// create and configure Handle\nvar (\n  bh codec.BincHandle\n  mh codec.MsgpackHandle\n  ch codec.CborHandle\n)\n\nmh.MapType = reflect.TypeOf(map[string]interface{}(nil))\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Posture Management with DocCardList\nDESCRIPTION: This MDX code snippet imports DocCardList and useCurrentSidebarCategory from Docusaurus to display a list of documentation cards related to the current sidebar category.  It uses React components to render the list.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Configure Docker maxfiles in Amazon Linux/RHEL (Shell)\nDESCRIPTION: This snippet shows how to configure the maximum number of open files for Docker containers in Amazon Linux or RHEL by modifying the /etc/sysconfig/docker file. It sets the DAEMON_MAXFILES and OPTIONS variables to increase the limit.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Identify Container Runtime Socket Path\nDESCRIPTION: This snippet creates a job to inspect the Kubernetes cluster configuration and retrieve the container runtime socket path. It then prints the logs of the job to find the path. Finally, it removes the job.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/kubernetes.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\nkubectl wait --for=condition=complete --timeout=30s job/deepfence-cluster-config\nkubectl logs $(kubectl get pod -l job-name=deepfence-cluster-config -o jsonpath=\"{.items[0].metadata.name}\")\nkubectl delete -f https://deepfence-public.s3.amazonaws.com/kubernetes/deepfence-cluster-config-job.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating deepfence_console_values.yaml\nDESCRIPTION: This command retrieves the default values for the deepfence-console Helm chart and saves them to a file named deepfence_console_values.yaml. This file can then be edited to customize the deployment of the console, such as changing the image repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-console --version 1.5.2 > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying ThreatMapper Agent with Docker\nDESCRIPTION: Deploys the Deepfence ThreatMapper agent as a Docker container. It sets resource limits, restarts policies, network and volume configurations, and environment variables for connecting to the ThreatMapper console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/sensors/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit \\\n    --cpus=\".2\" \\\n    --name=deepfence-agent \\\n    --restart on-failure \\\n    --pid=host \\\n    --net=host \\\n    --log-driver json-file \\\n    --log-opt max-size=50m \\\n    --privileged=true \\\n    -v /sys/kernel/debug:/sys/kernel/debug:rw \\\n    -v /var/log/fenced \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /:/fenced/mnt/host/:ro \\\n    -e USER_DEFINED_TAGS=\"\" \\\n    -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" \\\n    -e MGMT_CONSOLE_PORT=\"443\" \\\n    -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n    deepfenceio/deepfence_agent_ce:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Get Application URL using ClusterIP with Port Forwarding\nDESCRIPTION: This snippet retrieves the application URL when using ClusterIP by setting up port forwarding.  It retrieves the pod name and container port using kubectl and then sets up port forwarding to localhost.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-console/templates/NOTES.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexport POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"deepfence-console.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\nexport CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\necho \"Visit http://127.0.0.1:8080 to use your application\"\nkubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Open Files (Amazon Linux/RHEL)\nDESCRIPTION: This snippet shows how to configure the maximum number of open files for Docker containers on Amazon Linux/RHEL systems. It involves modifying the /etc/sysconfig/docker file to set the DAEMON_MAXFILES and OPTIONS parameters. The OPTIONS parameter specifically sets the default ulimit for the number of open files per container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports the DocCardList component and the useCurrentSidebarCategory hook from the docusaurus theme to render a list of documentation cards. The DocCardList component is used to display a list of documentation cards, and the useCurrentSidebarCategory hook retrieves the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/integrations/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList component in MDX\nDESCRIPTION: This code snippet imports the DocCardList component from the @theme/DocCardList module and the useCurrentSidebarCategory hook from the @docusaurus/theme-common module. It then uses these to render a list of documentation cards based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/registries/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: Imports DocCardList and useCurrentSidebarCategory from Docusaurus theming libraries to dynamically display a list of documentation cards based on the current sidebar category. This is used within an MDX document to create a dynamic listing of related documentation items.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Install Deepfence Console with Helm\nDESCRIPTION: Installs the Deepfence Console using the Helm chart and the customized values file.  This allows for overriding the default image repository with a custom one during installation in a Kubernetes environment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/deploy-console.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_console_values.yaml deepfence-console deepfence/deepfence-console --version 2.0.2\n```\n\n----------------------------------------\n\nTITLE: Restart Management Console in Docker\nDESCRIPTION: This snippet restarts the Management Console using Docker Compose.  This is required after updating the TLS certificate to apply the changes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/initial-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.yml down\ndocker-compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Running ThreatMapper Sensor Agent\nDESCRIPTION: This command starts the ThreatMapper sensor agent in a Docker container. It requires a pre-installed Docker runtime on the Linux host. The command mounts several volumes and sets environment variables for the management console URL, port, API key, and optional user-defined tags.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/sensors/linux-host.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -dit --cpus=\".2\" --name=deepfence-agent \\\n  --restart on-failure --pid=host --net=host --privileged=true \\\n  -v /sys/kernel/debug:/sys/kernel/debug:rw -v /var/log/fenced \\\n  -v /var/run/docker.sock:/var/run/docker.sock -v /:/fenced/mnt/host/:ro \\\n  -e MGMT_CONSOLE_URL=\"---CONSOLE-IP---\" -e MGMT_CONSOLE_PORT=\"443\" \\\n  -e DEEPFENCE_KEY=\"---DEEPFENCE-API-KEY---\" \\\n  -e USER_DEFINED_TAGS=\"\" \\\n  deepfenceio/deepfence_agent_ce:latest\n```\n\n----------------------------------------\n\nTITLE: Get Application URL using Ingress\nDESCRIPTION: This snippet retrieves the application URL when Ingress is enabled. It constructs the URL using the Ingress host value.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-console/templates/NOTES.txt#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n  https://{{ .Values.ingress.host }}/\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Checking for linting issues\nDESCRIPTION: This command checks the code for linting errors based on the configured ESLint rules. It provides a report of any issues found in the codebase.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Deployment Name\nDESCRIPTION: This command retrieves the name of the deployment in the `deepfence-console` namespace. This is useful for finding the deployment name if the helm chart name was customized.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/troubleshooting.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get deploy --namespace deepfence-console\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group (Bash)\nDESCRIPTION: Adds the current user to the docker group.  This allows the user to run docker commands without sudo.  A new shell is required for the group change to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Check Pod Status with kubectl\nDESCRIPTION: This command retrieves the status of pods within the deepfence namespace.  It is used to diagnose if the deepfence-agent is running correctly. The expected output will show the agent's status (e.g., Running, ContainerCreating, Error).\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Add Deepfence Helm Repository\nDESCRIPTION: These commands add the Deepfence Helm charts repository to your local Helm configuration and update the repository information. This allows you to install the ThreatMapper console and router using Helm. Requires Helm to be installed and configured.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Install Kubernetes Metrics Server\nDESCRIPTION: This command installs the Kubernetes metrics server using a YAML manifest file. The metrics server collects resource usage data from the Kubernetes nodes.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Neo4j Docker Container\nDESCRIPTION: This command allows you to execute commands inside a running Neo4j Docker container. This is necessary to run the backup script. Requires Docker to be installed and the `deepfence-neo4j` container to be running.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-neo4j /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Demonstrates basic testing using `go test`. Includes example of running all tests and tests with the 'safe' tag.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngo test\n```\n\nLANGUAGE: Go\nCODE:\n```\ngo test -tags alltests -run Suite\n```\n\nLANGUAGE: Go\nCODE:\n```\ngo test -tags safe -run Json\n```\n\nLANGUAGE: Go\nCODE:\n```\ngo test -tags \"alltests safe\" -run Suite\n```\n\n----------------------------------------\n\nTITLE: Installing Deepfence Router Helm Chart - Bash\nDESCRIPTION: This command installs the deepfence-router Helm chart. It is the quickest way to get the service up and running with default configurations.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install deepfence-router deepfence-router\n```\n\n----------------------------------------\n\nTITLE: Docker: Execute post-upgrade script\nDESCRIPTION: This command executes the `post-upgrade-to-v5.sh` script inside the Neo4j Docker container after upgrading to the new release and after the scheduler has completed the initial Neo4j setup. This script finalizes the upgrade process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/console/upgrade-from-v2.1.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec deepfence-neo4j /startup/post-upgrade-to-v5.sh\n```\n\n----------------------------------------\n\nTITLE: Installing ThreatMapper Python SDK\nDESCRIPTION: This shell command installs the ThreatMapper Python SDK from the GitHub repository using pip. It directly installs from the git repository, ensuring you get the latest version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/developers/python-sdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/deepfence/threatmapper-python-client.git\n```\n\n----------------------------------------\n\nTITLE: Display Installation DocCardList (MDX)\nDESCRIPTION: This snippet renders a DocCardList component, filtering the sidebar items to only include those whose label includes 'Installation'. This displays documentation links related to the installation process of the ThreatMapper Management Console.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/index.md#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Pod Status with kubectl\nDESCRIPTION: This command retrieves the status of pods within the deepfence namespace, allowing for quick identification of issues such as a deepfence-agent that is stuck in ContainerCreating status.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/tips/sensor-agent-not-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -n deepfence\n```\n\n----------------------------------------\n\nTITLE: Apply Metrics Server Kubernetes\nDESCRIPTION: Applies the Kubernetes metrics server manifest. This command uses kubectl to apply the specified YAML file, which installs the metrics server in the kube-system namespace, providing resource utilization metrics for the Kubernetes cluster.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n```\n\n----------------------------------------\n\nTITLE: Install OpenEBS using Helm\nDESCRIPTION: This command installs OpenEBS using Helm package manager in the openebs namespace. OpenEBS is a containerized block storage orchestrator that can be used as a storage provider for the ThreatMapper console when a cloud managed storage is not available.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add openebs https://openebs.github.io/charts\nhelm install openebs --namespace openebs openebs/openebs --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Identify Container Runtime in Kubernetes\nDESCRIPTION: This snippet retrieves the container runtime used by each node in the Kubernetes cluster. It uses `kubectl` to query the nodes and extract the container runtime version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/sensors/kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes -o=custom-columns=NAME:.metadata.name,Runtime:.status.nodeInfo.containerRuntimeVersion\n```\n\n----------------------------------------\n\nTITLE: Adding Deepfence Helm Repository\nDESCRIPTION: Adds the Deepfence Helm chart repository to your Helm configuration. This allows you to access and install the Deepfence Console Helm chart. The repository URL points to the location of the Helm charts.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/deploy-console.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add deepfence https://deepfence-helm-charts.s3.amazonaws.com/threatmapper\n```\n\n----------------------------------------\n\nTITLE: Installing Go Codec Library\nDESCRIPTION: This command retrieves and installs the ugorji/go/codec package, making it available for use in Go projects. It uses the `go get` command, which downloads the package and its dependencies from the specified repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get github.com/ugorji/go/codec\n```\n\n----------------------------------------\n\nTITLE: Display Post-Installation Docs with DocCardList (MDX)\nDESCRIPTION: Uses the DocCardList component to display a list of documentation cards, filtering the current sidebar category items to exclude those with labels containing \"Installation\" and \"Troubleshooting\".\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/index.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variables Configuration\nDESCRIPTION: This snippet shows the environment variables that need to be configured in the `docker-compose.yaml` file. These variables include console URL, console port, Deepfence key, cloud provider details (azure), tenant ID, client ID, client secret, and subscription ID. Set `ORGANIZATION_DEPLOYMENT` to `true` for multi-tenant deployments. Ensure to replace the placeholders with appropriate values. It uses the cloud_scanner_ce image with version 2.3.1.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/azure.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nimage: quay.io/deepfenceio/cloud_scanner_ce:2.3.1\nenvironment:\n  MGMT_CONSOLE_URL: \"<CONSOLE_URL>\"\n  MGMT_CONSOLE_PORT: <CONSOLE_PORT>\n  DEEPFENCE_KEY: \"<DEEPFENCE_KEY>\"\n  CLOUD_PROVIDER: \"azure\"\n  CLOUD_REGION: \"<LOCATION>\"\n  CLOUD_ACCOUNT_ID: \"<SUBSCRIPTION_ID>\"\n  DEPLOYED_ACCOUNT_ID: \"<SUBSCRIPTION_ID>\"\n  CLOUD_ACCOUNT_NAME: \"\"\n  ORGANIZATION_DEPLOYMENT: false\n  CLOUD_ORGANIZATION_ID: \"<TENANT_ID>\"\n  ROLE_NAME: \"\"\n  CLOUD_AUDIT_LOG_IDS: \"\"\n  HTTP_SERVER_REQUIRED: \"false\"\n  SUCCESS_SIGNAL_URL: \"\"\n  DF_LOG_LEVEL: info\n  SCAN_INACTIVE_THRESHOLD: \"21600\"\n  CLOUD_SCANNER_POLICY: \"\"\n\n  AZURE_TENANT_ID: \"<TENANT_ID>\"\n  AZURE_REGION: \"<LOCATION>\"\n  AZURE_CLIENT_ID: \"<CLIENT_ID>\"\n  AZURE_CLIENT_SECRET: \"<CLIENT_SECRET>\"\n  AZURE_SUBSCRIPTION_ID: \"<SUBSCRIPTION_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Import and Render DocCardList with Docusaurus\nDESCRIPTION: This MDX code block imports the DocCardList component from the Docusaurus theme and the useCurrentSidebarCategory hook. It then uses these to dynamically render a list of documentation cards based on the current sidebar category. The code relies on Docusaurus context for proper rendering and functionality.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/operations/index.md#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Check OpenEBS Pod Status\nDESCRIPTION: This command checks the status of the OpenEBS pods in the openebs namespace.  The `-w` flag watches for changes, useful for waiting until pods are ready.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/kubernetes.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -o wide --namespace openebs -w\n```\n\n----------------------------------------\n\nTITLE: Add User to Docker Group (bash)\nDESCRIPTION: This command adds the current user to the 'docker' group, allowing the user to run Docker commands without sudo. A new shell or user switch is required for the group change to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/developers/build.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Listing Containers (Asynchronous)\nDESCRIPTION: This asynchronous function retrieves a list of containers from the ThreatMapper API. Similar to listing hosts, it constructs a payload with filters and pagination. It then iterates through the containers and prints their node ID and name. It requires the `threatmapper` library and handles `UnexpectedStatus` exceptions.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/developers/python-sdk.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom threatmapper.api.search import search_containers\nfrom threatmapper.models import SearchSearchNodeReq\nfrom threatmapper import AuthenticatedClient\nfrom threatmapper.errors import UnexpectedStatus\n\n#  Authenticated Client SSL Disabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=False)\n#OR\n# Authenticated Client SSL Enabled\nclient = AuthenticatedClient(base_url=\"YOUR_CONSOLE_URL\", token=\"YOUR_REFRESH_TOKEN\", verify_ssl=\"/path/to/certificate_bundle.pem\")\n\nasync def list_containers():\n    try:\n       payload_dict = {\n                       \"node_filter\": {\n                         \"filters\": {\n                           \"compare_filter\": None,\n                           \"contains_filter\": {\n                             \"filter_in\": {\n                               \"active\": [\n                                 True\n                               ]\n                             }\n                           },\n                           \"match_filter\": {\n                             \"filter_in\": None\n                           },\n                           \"not_contains_filter\": {\n                             \"filter_in\": {}\n                           },\n                           \"order_filter\": {\n                             \"order_fields\": []\n                           }\n                         },\n                         \"in_field_filter\": None,\n                         \"window\": {\n                           \"offset\": 0,\n                           \"size\": 0\n                         }\n                       },\n                       \"window\": {\n                         \"offset\": 0,\n                         \"size\": 100\n                       }\n                     }\n       json_body = SearchSearchNodeReq.from_dict(payload_dict)\n       containers = await search_containers.asyncio(client=client,json_body=json_body)\n       for container in containers:\n          print(container.node_id, container.node_name)\n    except UnexpectedStatus as e:\n        print(\"Exception when calling list_containers-> %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Displaying Site Title and Tagline (HTML)\nDESCRIPTION: This HTML snippet displays the site title and tagline using the `siteConfig()` function. The title is rendered as an h1 heading, and the tagline is rendered as a paragraph. The `siteConfig()` function fetches the configuration values from the Docusaurus context.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>{siteConfig().title}</h1>\n\n<p>{siteConfig().tagline}</p>\n```\n\n----------------------------------------\n\nTITLE: Prune Docker Images in bash\nDESCRIPTION: Removes unused Docker images from the system.  This command helps to free up disk space after the Management Console is uninstalled.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Clone, Navigate, and Build ThreatMapper - Bash\nDESCRIPTION: Clones the ThreatMapper repository from GitHub, navigates into the repository directory, and then initiates the build process using `make`.  This process creates the container images for Deepfence ThreatMapper.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\nmake\n```\n\n----------------------------------------\n\nTITLE: Show Helm Chart Values\nDESCRIPTION: Extracts the default values from the Deepfence console Helm chart and saves them to a file named `deepfence_console_values.yaml`. This file will be modified to customize the deployment.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/developers/deploy-console.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create the values file\nhelm show values deepfence/deepfence-console --version TM_CONSOLE_HELM_CHART_VERSION > deepfence_console_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Add User to Docker Group\nDESCRIPTION: Adds the current user to the docker group, allowing them to run Docker commands without sudo. Requires a new shell or user re-login to take effect.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/build.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER # start new shell, or 'su $USER' for group change to take effect\n```\n\n----------------------------------------\n\nTITLE: Monitor OpenEBS Pods Kubernetes\nDESCRIPTION: Monitors the status of OpenEBS pods in the openebs namespace. This command uses kubectl to retrieve the pods in wide output format and watches (-w) for changes, allowing you to track the progress of pod startup.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/kubernetes.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods -o wide --namespace openebs -w\n```\n\n----------------------------------------\n\nTITLE: Export Postgres Database using Docker\nDESCRIPTION: Exports a PostgreSQL database using a Docker container. This command mounts a volume to store the backup, sets environment variables for database connection, and executes a script to perform the export.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/database-export-import.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir deepfence_export\ncd deepfence_export\n\ndocker run --net=host --rm=true --name=postgresql-backup \\\n  -v \"$(pwd)\":/data:rw \\\n  --entrypoint=/usr/local/bin/pg-export.sh \\\n  -e POSTGRES_DB_HOST=\"127.0.0.1\" \\\n  -e POSTGRES_DB_PORT=\"5432\" \\\n  -e POSTGRES_DB_NAME=users \\\n  -e POSTGRES_DB_USERNAME=\"\" \\\n  -e POSTGRES_DB_PASSWORD=\"\" \\\n  deepfenceio/deepfence_backup:2.0.1\n```\n\n----------------------------------------\n\nTITLE: Run Neo4j Backup Script\nDESCRIPTION: Executes the Neo4j backup script within the Neo4j Docker container. This script creates a backup file of the Neo4j database inside the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/console/database-export-import.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/backup_neo4j.sh\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: Imports DocCardList from '@theme/DocCardList' and useCurrentSidebarCategory from '@docusaurus/theme-common'. It uses DocCardList component to display items from the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/integrations/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to Directory\nDESCRIPTION: Creates a directory named 'deepfence-cloud-scanner' and navigates into it.  This prepares the environment for downloading and configuring the docker-compose file for deploying the Deepfence Cloud Scanner on an EC2 instance.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/cloudscanner/aws.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmkdir deepfence-cloud-scanner && cd deepfence-cloud-scanner\n```\n\n----------------------------------------\n\nTITLE: Clone and Build ThreatMapper\nDESCRIPTION: Clones the Deepfence ThreatMapper repository from GitHub and runs the build script. This script compiles the necessary components and creates the container images.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/developers/build.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/deepfence/ThreatMapper.git\ncd ThreatMapper\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Import and Render DocCardList with MDX\nDESCRIPTION: This code snippet imports necessary components from the Docusaurus theme to render a list of documentation cards. It uses `DocCardList` to display the cards based on the current sidebar category. The purpose is to dynamically generate documentation links based on the category in the sidebar.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/operations/index.md#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Show Router Helm Chart Values\nDESCRIPTION: This command displays the default values of the specified Helm chart. This allows you to inspect the configurable parameters and their default values. The output is redirected to a file for later modification.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhelm show values deepfence/deepfence-router --version TM_ROUTER_HELM_CHART_VERSION > deepfence_router_values.yaml\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList component in MDX\nDESCRIPTION: Imports the DocCardList component from the \"@theme/DocCardList\" module for use in MDX files. This component is used to dynamically display a list of documentation cards based on the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports DocCardList and useCurrentSidebarCategory from the docusaurus theme and uses them to display a list of documentation cards.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.0/developers/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Backup Script\nDESCRIPTION: This script exports the PostgreSQL database. It needs to be run from inside the `deepfence-postgres` container. It creates a backup file named `/data/pg_data.dump` inside the container.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/database-export-import.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/usr/local/bin/pg-export.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx Ingress Controller with Kubectl - Bash\nDESCRIPTION: This command applies a YAML manifest to install the Nginx Ingress Controller using kubectl, directly from the official GitHub repository.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/aws/deploy.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying ThreatMapper Management Console using Docker\nDESCRIPTION: This snippet demonstrates how to deploy the ThreatMapper Management Console using Docker. It retrieves the docker-compose.yml file from the GitHub repository and starts the application in detached mode.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/README.md#_snippet_0\n\nLANGUAGE: shell script\nCODE:\n```\n# Docker installation process for ThreatMapper Management Console\n\nwget https://github.com/deepfence/ThreatMapper/raw/release-2.5/deployment-scripts/docker-compose.yml\ndocker-compose -f docker-compose.yml up --detach\n```\n\n----------------------------------------\n\nTITLE: Accessing LoadBalancer Service with IP\nDESCRIPTION: If the service type is LoadBalancer and a LoadBalancer IP is explicitly set, this snippet simply echoes the URL using the provided IP.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\necho \"https://{{ .Values.service.loadBalancerIP }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Edit on GitHub Link (HTML)\nDESCRIPTION: This HTML snippet generates a link to edit the current page on GitHub. It uses the `editUrl` property from the Docusaurus configuration to create the link. This link allows users to directly navigate to the GitHub repository and edit the documentation source.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/src/pages/index.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<span>\n\t<a href={siteConfig().presets[0][1].docs.editUrl}>\n\t\t<div class=\"deepfence-button\">\n\t\t\tEdit on GitHub\n\t\t</div>\n\t</a>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Configure Open Files Limit in Docker (Amazon Linux/RHEL)\nDESCRIPTION: This snippet shows the configuration file for Docker in Amazon Linux/RHEL used to set the maximum number of open files for containers. It modifies the `/etc/sysconfig/docker` file to adjust the `DAEMON_MAXFILES` and `OPTIONS` parameters. This configuration is required to prevent 'Too many open files' errors in containers.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat /etc/sysconfig/docker\n# The max number of open files for the daemon itself, and all\n# running containers. The default value of 1048576 mirrors the value\n# used by the systemd service unit.\nDAEMON_MAXFILES=1048576\n# Additional startup options for the Docker daemon, for example:\n# OPTIONS=” — ip-forward=true — iptables=true”\n# By default we limit the number of open files per container\nOPTIONS=\" — default-ulimit nofile=1024:4096\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File Server secret and host in values.yaml (YAML)\nDESCRIPTION: This snippet shows how to configure the Helm chart values.yaml file to use an existing File Server secret, prevent the creation of a new File Server StatefulSet and configure external file server host and port. It sets the `create` flag to false, specifies the name of the existing secret, and provides fileServerHost and fileServerPort.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/managed-database.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nfileserver:\n  # Specifies whether a file server instance should be created\n  # set this to false if using S3\n  create: false\n  # if create false provide name of the existing secret.\n  # Secret format refer templates/deepfence-console-secrets/s3.yaml\n  secretName: \"deepfence-console-secrets-fileserver\"\n      \n  # Set this if external file server is used and create=false\n  fileServerHost: \"123.123.123.123\"\n  fileServerPort: \"8080\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Deepfence Router Helm Chart - Bash (Helm 3)\nDESCRIPTION: This command deletes the deepfence-router Helm chart in Helm v3.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/deepfence-router/ReadMe.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# helm 3\nhelm delete deepfence-router\n```\n\n----------------------------------------\n\nTITLE: Describe Deployment (kubectl)\nDESCRIPTION: This command provides detailed information about the deployment within the specified namespace. This command includes details about the deployment's configuration, status, and events, aiding in troubleshooting and understanding the deployment's behavior.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deployment-scripts/helm-charts/eks-fargate/flask-echo-server/templates/NOTES.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nkubectl describe deployment -n {{ .Values.namespace }}\n```\n\n----------------------------------------\n\nTITLE: Codecgen Example\nDESCRIPTION: This command runs the codecgen tool to generate codec.Selfer implementations for the types defined in the input Go files and saves the output to values_codecgen.go.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_agent/tools/apache/deepfence/ugorji/go/codec/codecgen/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncodecgen -o values_codecgen.go values.go values2.go moretypedefs.go\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Memory for ElasticSearch - Bash\nDESCRIPTION: This command increases the virtual memory settings as required by the ElasticSearch component. This is a prerequisite for the ThreatMapper Management Console to function correctly, especially when using ElasticSearch.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w vm.max_map_count=262144\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList component in MDX\nDESCRIPTION: This snippet imports the DocCardList component from the @theme/DocCardList module and the useCurrentSidebarCategory hook from @docusaurus/theme-common. It then renders a DocCardList component, passing the items from the current sidebar category as props. This is used for dynamically generating a list of documentation cards in a Docusaurus-based site.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Upgrade ThreatMapper Console - Bash\nDESCRIPTION: These commands upgrade the ThreatMapper Management Console by stopping the existing containers, refreshing the docker-compose file, and then restarting the containers with the new configuration. The DF_IMG_TAG variable is used to specify the version of the images to use.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n\n# refresh the docker-compose file\nrm docker-compose.yml\nwget https://github.com/deepfence/ThreatMapper/raw/release-1.5/deployment-scripts/docker-compose.yml\nenv DF_IMG_TAG=1.5.0 docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Display Post-Installation DocCardList in MDX\nDESCRIPTION: Renders a DocCardList component, filtering items in the current sidebar category to exclude those whose label contains \"Installation\" or \"Troubleshooting\". This displays documentation cards for post-installation tasks.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/index.md#_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: Import and Use DocCardList Component in MDX\nDESCRIPTION: This code snippet demonstrates how to import and use the DocCardList component from '@theme/DocCardList' and useCurrentSidebarCategory hook from '@docusaurus/theme-common' in an MDX file.  It retrieves items from the current sidebar category and displays them using the DocCardList component.  This allows dynamic listing of related documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/registries/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Reset Password (Docker)\nDESCRIPTION: This snippet demonstrates how to reset the ThreatMapper password when deployed via Docker. It uses the `docker exec` command to execute the `deepfence_server --reset-password` command within the `deepfence-server` container. This allows administrators to reset the password without using SES/SMTP configuration.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/troubleshooting.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it deepfence-server bash -c \"/usr/local/bin/deepfence_server --reset-password\"\n```\n\n----------------------------------------\n\nTITLE: Import useCurrentSidebarCategory in MDX\nDESCRIPTION: Imports the useCurrentSidebarCategory hook from the '@docusaurus/theme-common' module for accessing the current sidebar category.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/console/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Tagging Deepfence Docker Images for Internal Registry\nDESCRIPTION: This snippet tags the pulled Docker images with the internal registry address. It sets the IMAGE_REPOSITORY environment variable to the internal registry's address and then tags each image accordingly, replacing THREATMAPPER_VERSION with the appropriate version.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/air-gapped.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport IMAGE_REPOSITORY=127.0.0.1:5000\n\ndocker tag quay.io/deepfenceio/deepfence_worker_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_worker_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_server_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_server_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_ui_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_ui_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_file_server_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_file_server_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_agent_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_agent_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_cluster_agent_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_cluster_agent_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_router_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_router_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_redis_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_redis_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_kafka_broker_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_kafka_broker_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_postgres_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_postgres_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_neo4j_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_neo4j_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_compliance_scanner_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_compliance_scanner_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_telemetry_ce:THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_telemetry_ce:THREATMAPPER_VERSION\ndocker tag quay.io/deepfenceio/deepfence_agent_ce:fargate-THREATMAPPER_VERSION ${IMAGE_REPOSITORY}/deepfence_agent_ce:THREATMAPPER_VERSION\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports the DocCardList component and useCurrentSidebarCategory hook from the Docusaurus theme to dynamically display a list of documentation cards based on the current sidebar category. It's used in MDX files to create a structured listing of related documentation pages within the Integrations documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/integrations/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook Development Environment\nDESCRIPTION: This shell command starts the Storybook development environment for the ui-components package. Storybook allows developers to visualize and interact with the components in isolation, facilitating development and testing. It requires pnpm to be installed.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/packages/ui-components/Readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This MDX code snippet imports necessary components from Docusaurus theme to create a dynamic list of documentation cards based on the current sidebar category. It utilizes `DocCardList` for rendering the cards and `useCurrentSidebarCategory` to fetch the category information.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/registries/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: This command is used to list the Docker images available on the system. It's helpful for troubleshooting installation issues and providing context to the ThreatMapper developers when reporting problems.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker images list\n```\n\n----------------------------------------\n\nTITLE: Importing and Using UI Components\nDESCRIPTION: This code snippet illustrates how to import individual components (Button, Card, TextInput) from the ui-components package and use them within a React component.  The example shows how to render a Button component with specific size and color properties.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/deepfence_frontend/packages/ui-components/Readme.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button, Card, TextInput } from 'ui-components';\n\n<Button size=\"sm\" color=\"primary\">\n  Click me!\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports `DocCardList` from `@theme/DocCardList` and `useCurrentSidebarCategory` from `@docusaurus/theme-common`. It then uses these components to display a list of documentation cards within the current sidebar category. This is typically used to dynamically generate documentation lists within a Docusaurus-powered site.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/integrations/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Integration List with DocCardList (mdx-code-block)\nDESCRIPTION: This code snippet imports DocCardList and useCurrentSidebarCategory from Docusaurus theme modules. It then uses DocCardList to display a list of integration documentation cards based on the items in the current sidebar category. This allows the page to dynamically display a list of available integration options.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/integrations/index.md#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports the DocCardList component and the useCurrentSidebarCategory hook from the docusaurus theme. It is likely used to dynamically generate a list of documentation cards based on the current sidebar category within the ThreatMapper documentation site.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/integrations/index.md#_snippet_0\n\nLANGUAGE: mdx-code-block\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Import DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports necessary modules from the Docusaurus theme to generate a list of documentation cards based on the current sidebar category. It utilizes DocCardList for rendering the cards and useCurrentSidebarCategory to fetch the items for the current category. This is used to dynamically display integration options in the documentation.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/integrations/index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Display Troubleshooting DocCardList in MDX\nDESCRIPTION: Renders a DocCardList component, filtering items in the current sidebar category to only include those whose label contains \"Troubleshooting\". This displays documentation cards specifically related to troubleshooting.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/index.md#_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Troubleshooting\" ) == true )}/>\n```\n\n----------------------------------------\n\nTITLE: Post-Installation Documentation Cards\nDESCRIPTION: Renders a list of documentation cards related to post-installation tasks for the Management Console. It excludes cards related to 'Installation' and 'Troubleshooting'.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.3/console/index.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) == false && item.label.includes( \"Troubleshooting\" ) == false )}/>\n```\n\n----------------------------------------\n\nTITLE: Display Installation DocCardList in MDX\nDESCRIPTION: Renders a DocCardList component, filtering items in the current sidebar category to only include those whose label contains \"Installation\". This displays documentation cards specifically related to the installation process.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v1.5/console/index.md#_snippet_2\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items.filter( item => item.label.includes( \"Installation\" ) )}/>\n```\n\n----------------------------------------\n\nTITLE: Install ThreatMapper Router with Custom Values\nDESCRIPTION: This command installs the ThreatMapper router using a custom values file, allowing you to configure the router according to your specific requirements. Version is specified for reproducibility.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.4/console/kubernetes.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -f deepfence_router_values.yaml deepfence-router deepfence/deepfence-router \\\n    --namespace deepfence-console \\\n    --create-namespace \\\n    --version 2.4.0\n```\n\n----------------------------------------\n\nTITLE: Get Kubernetes Pods Status\nDESCRIPTION: This command retrieves the status of the pods in the `deepfence-console` namespace, using the wide output format and watching for changes. It's used to monitor the progress of the ThreatMapper console deployment and ensure that all pods are running correctly.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/docs/console/kubernetes.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods --namespace deepfence-console -o wide -w\n```\n\n----------------------------------------\n\nTITLE: Terraform Single Account Deployment\nDESCRIPTION: This Terraform configuration deploys the Deepfence Cloud Scanner in a single AWS account using ECS.  It requires the AWS provider, the deepfence/cloud-scanner/aws module, and specific input parameters such as the region, management console URL, and Deepfence API key.  It also configures task details like CPU, memory, and storage, and allows for optional configuration of an existing VPC.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.1/cloudscanner/aws.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprovider \"aws\" {\n  # AWS region: Example: us-east-1\n  region = \"us-east-1\"\n}\n\nmodule \"deepfence-cloud-scanner_example_single-account\" {\n  source                        = \"deepfence/cloud-scanner/aws//examples/single-account-ecs\"\n  version                       = \"0.4.0\"\n  name                          = \"deepfence-cloud-scanner\"\n  # mgmt-console-url: deepfence.customer.com or 22.33.44.55\n  mgmt-console-url              = \"<Console URL>\"\n  mgmt-console-port             = \"443\"\n  deepfence-key                 = \"<Deepfence key>\"\n  image                         = \"quay.io/deepfenceio/cloud-scanner:2.1.1\"\n  # Task CPU Units (Default: 4 vCPU)\n  cpu                           = \"4096\"\n  # Task Memory (Default: 8 GB)\n  memory                        = \"8192\"\n  # Task Ephemeral Storage (Default: 100 GB)\n  ephemeral_storage             = \"100\"\n  # Task role: Must be either arn:aws:iam::aws:policy/SecurityAudit or arn:aws:iam::aws:policy/ReadOnlyAccess\n  task_role                     = \"arn:aws:iam::aws:policy/SecurityAudit\"\n  debug_logs                    = false\n  # Use existing VPC (Optional)\n  use_existing_vpc              = false\n  # VPC ID (If use_existing_vpc is set to true)\n  existing_vpc_id               = \"\"\n  # List of VPC Subnet IDs (If use_existing_vpc is set to true)\n  existing_vpc_subnet_ids       = []\n  tags = {\n    product = \"deepfence-cloud-scanner\"\n  }\n  # AWS region: Example: us-east-1\n  region                        = \"us-east-1\"\n  ecs_vpc_region_azs            = [\"us-east-1a\"]\n  # Optional: To refresh the cloud resources every hour, provide CloudTrail Trail ARNs (Management events with write-only or read-write).\n  # If empty, a trail with management events will be automatically chosen if available.\n  # e.g.: [\"arn:aws:cloudtrail:us-east-1:123456789012:trail/aws-events\"]\n  cloudtrail_trails             = []\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList with DocCardList component\nDESCRIPTION: This code snippet imports and uses the DocCardList component to render a list of documentation cards based on the current sidebar category. It utilizes the @docusaurus/theme-common package to access the sidebar category information.\nSOURCE: https://github.com/deepfence/threatmapper/blob/release-2.5/docs/versioned_docs/version-v2.2/cloudscanner/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```"
  }
]