[
  {
    "owner": "typestrong",
    "repo": "typedoc",
    "content": "TITLE: Configure TypeDoc Outputs via JSON\nDESCRIPTION: This JSON configuration demonstrates how to specify multiple output types for TypeDoc, including HTML and JSON. It defines the output locations and provides options to customize the HTML output, such as navigation settings.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"outputs\": [\n        {\n            \"name\": \"html\",\n            \"path\": \"./docs_html\"\n        },\n        {\n            \"name\": \"html\",\n            \"path\": \"./docs_html_full_nav\",\n            \"options\": {\n                \"navigation\": {\n                    \"includeCategories\": true,\n                    \"includeGroups\": true,\n                    \"excludeReferences\": false,\n                    \"includeFolders\": true\n                }\n            }\n        },\n        {\n            \"name\": \"json\",\n            \"path\": \"./docs.json\"\n        },\n        {\n            \"name\": \"markdown\",\n            \"path\": \"./docs_markdown\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Entry Points using typedoc.json\nDESCRIPTION: Shows how to define entry points for TypeDoc using a `typedoc.json` configuration file.  The `entryPoints` array within the JSON object lists the paths to the TypeScript files that TypeDoc should consider as entry points. This allows configuring TypeDoc behavior through a configuration file instead of command-line arguments.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n// typedoc.json\n{\n    \"entryPoints\": [\"src/index.ts\", \"src/alt.ts\", \"src/multiple/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Entry Points using CLI in TypeDoc\nDESCRIPTION: Demonstrates how to specify entry point files for TypeDoc documentation generation using command-line arguments.  The `typedoc` command is invoked with explicit paths to the source files that serve as entry points for the documentation process. This configures TypeDoc to document the exports of the specified files.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc src/index.ts src/alt.ts\n# or\ntypedoc --entryPoints src/index.ts --entryPoints src/alt.ts\n```\n\n----------------------------------------\n\nTITLE: Using {@link} Tag with Description\nDESCRIPTION: This example demonstrates the use of the {@link} tag to refer to the `random` function with a custom description. It describes a function that is similar to the linked function but operates within a different range.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/link.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Similar to {@link random}, but with a range of [0, 100)\n */\nexport function rand(): number;\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @includeCode with Line Numbers (Markdown)\nDESCRIPTION: Illustrates including specific lines from a JSON file using the `@includeCode` tag and line number ranges, for cases when adding comments isn't possible. Includes lines 2 and the range 6-7 from package.json.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n{@includeCode ../../package.json:2,6-7}\n```\n\n----------------------------------------\n\nTITLE: Mapping Global External Types in TypeDoc via JSON\nDESCRIPTION: This JSON configuration demonstrates mapping global external types, like `Promise`, to their documentation.  It shows how to handle types defined in TypeScript's lib files, which TypeDoc detects as belonging to the `typescript` package rather than the `global` package. Links can be created using `{@link !Promise}` and in code using `type Foo = Promise<string>`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"externalSymbolLinkMappings\": {\n        // used by {@link !Promise}\n        \"global\": {\n            \"Promise\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n        },\n        // used by type Foo = Promise<string>\n        \"typescript\": {\n            \"Promise\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Tags in TypeDoc via typedoc.json\nDESCRIPTION: This JSON configuration demonstrates how to specify the valid block tags that TypeDoc will recognize using the `blockTags` option in `typedoc.json`. It allows extending or overriding the default set of block tags, such as `@param` and `@returns`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"blockTags\": [\"@param\", \"@returns\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting a type parameter with @typeParam\nDESCRIPTION: This code snippet demonstrates how to document a type parameter T of a function called identity using the @typeParam tag. The @typeParam tag is used to provide a description of the type parameter.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/typeParam.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typeParam T - the identity type\n */\nexport function identity<T>(x: T): T {\n    return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeDoc Application with Plugins JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a TypeDoc application with plugins using the `bootstrapWithPlugins` method. It configures the application with entry points and handles the conversion of the project, generating documentation or JSON output. The code uses the `typedoc` package and assumes the existence of a `generateOutputs` function.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/overview.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as td from \"typedoc\";\n\n// Application.bootstrap also exists, which will not load plugins\n// Also accepts an array of option readers if you want to disable\n// TypeDoc's tsconfig.json/package.json/typedoc.json option readers\nconst app = await td.Application.bootstrapWithPlugins({\n    // Note: This accepts globs, do not pass paths with backslash path separators!\n    entryPoints: [\"src/index.ts\"],\n});\n\n// May be undefined if errors are encountered.\nconst project = await app.convert();\n\nif (project) {\n    // Generate configured outputs\n    await generateOutputs(project);\n\n    // Alternatively...\n    const outputDir = \"docs\";\n    // Generate HTML rendered docs\n    await app.generateDocs(project, outputDir);\n    // Alternatively generate JSON output\n    await app.generateJson(project, outputDir + \"/docs.json\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Modifier Tags in TypeDoc via typedoc.json\nDESCRIPTION: This JSON configuration demonstrates how to specify the valid modifier tags that TypeDoc will recognize using the `modifierTags` option in `typedoc.json`. It allows extending or overriding the default set of modifier tags, such as `@hidden` and `@packageDocumentation`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modifierTags\": [\"@hidden\", \"@packageDocumentation\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Structure with JSON\nDESCRIPTION: This snippet demonstrates how to configure the left-hand side navigation structure using the `navigation` option within the `typedoc.json` file. It allows control over including categories, groups, and folders, as well as compacting folders and excluding references.  The `categorizeByGroup` setting also affects how the navigation is built.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_36\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"navigation\": {\n        \"includeCategories\": true,\n        \"includeGroups\": false,\n        \"includeFolders\": true,\n        \"compactFolders\": false,\n        \"excludeReferences\": true\n    },\n    \"categorizeByGroup\": false\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Options File Specification (Bash)\nDESCRIPTION: Specifies the command-line option to define a configuration file for TypeDoc. The configuration file should contain entries that correspond to command-line options or flags. If not provided, TypeDoc will search for standard configuration file names.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --options <filename>\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Parameters with @param in TypeScript\nDESCRIPTION: Demonstrates how to use the @param tag to document the parameters of a simple function. This example shows the basic syntax for describing each parameter with its name and purpose.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/param.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param a - the first number\n * @param b - the second number\n */\nexport function sum(a: number, b: number) {\n    return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Basic Usage\nDESCRIPTION: This command builds documentation for your TypeScript project using TypeDoc. It utilizes the \"exports\" or \"main\" fields in your package.json file to identify entry points.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx typedoc\n```\n\n----------------------------------------\n\nTITLE: TypeDoc JSON Configuration Example\nDESCRIPTION: Shows an example of a `typedoc.json` file, including the schema definition and common configuration options like entry points and output directory. It demonstrates how VSCode can automatically pick up the schema for validation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/configuration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://typedoc.org/schema.json\",\n    \"entryPoints\": [\"./src/index.ts\", \"./src/secondary-entry.ts\"],\n    \"out\": \"doc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Abstract Method with @abstract Tag in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the @abstract tag in TypeDoc to mark a method as abstract, even though it is not declared as abstract in the TypeScript code. This can be useful when providing default implementations for JavaScript consumers.  The method includes a default implementation that throws an error message when called, indicating that it should be overridden in a subclass.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/abstract.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AbstractExample {\n    /** @abstract */\n    requiredOverride(): void {\n        throw new Error(\n            \"requiredOverride not implemented in subclass of AbstractExample\",\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeDoc Plugin\nDESCRIPTION: This code snippet demonstrates the basic structure of a TypeDoc plugin, exporting a `load` function that TypeDoc calls to attach the plugin to the application. The `load` function receives the TypeDoc `Application` instance as a parameter, allowing the plugin to register event listeners and modify TypeDoc's behavior. It's recommended to publish plugins as ESM to avoid potential issues.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/plugins.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\nimport * as td from \"typedoc\";\n/** @param {td.Application} app */\nexport function load(app) {\n    // Add event listeners to app, app.converter, etc.\n    // this function may be async\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown-it Options Configuration\nDESCRIPTION: This JSON configuration shows how to override the default values used by markdown-it with the ones shown below using the `markdownItOptions` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"markdownItOptions\": {\n        \"html\": true,\n        \"linkify\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Links with JSON\nDESCRIPTION: This snippet demonstrates how to define additional links to be included in the page sidebar using the `sidebarLinks` option in `typedoc.json`. The keys of the `sidebarLinks` object are the link text and the values are the corresponding URLs.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sidebarLinks\": {\n        \"Example\": \"http://example.com\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc JavaScript Configuration Example\nDESCRIPTION: Illustrates how to define TypeDoc options within a JavaScript configuration file.  The configuration is exported as a default object with keys representing option names. The example uses JSDoc type hints to specify the configuration type.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/configuration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {Partial<import(\"typedoc\").TypeDocOptions>} */\nconst config = {\n    entryPoints: [\"./src/index.ts\", \"./src/secondary-entry.ts\"],\n    out: \"doc\",\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache Busting with Bash\nDESCRIPTION: This snippet demonstrates how to enable cache busting by including the generation time in `<script>` and `<link>` tags for JS/CSS assets using the `--cacheBust` option. This prevents the use of outdated assets from previous builds of the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_28\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --cacheBust\n```\n\n----------------------------------------\n\nTITLE: Documenting a file with @packageDocumentation in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `@packageDocumentation` tag to document an entire file in TypeScript. The comment block containing the tag must be the first comment in the file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/packageDocumentation.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// file1.ts\n/**\n * This is the doc comment for file1.ts\n *\n * @packageDocumentation\n */\nimport * as lib from \"lib\";\n```\n\n----------------------------------------\n\nTITLE: Registering Custom JSX Elements (TypeScript)\nDESCRIPTION: This code snippet shows how to register custom JSX elements and attributes in TypeDoc. It uses declaration merging to extend the `IntrinsicElements` and `IntrinsicAttributes` interfaces, allowing custom elements and attributes to be used in JSX templates.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/themes.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, JSX } from \"typedoc\";\n\ndeclare module \"typedoc\" {\n    // JSX.JSX is intentional due to TypeScript's strange JSX type discovery rules\n    namespace JSX.JSX {\n        interface IntrinsicElements {\n            \"custom-button\": IntrinsicAttributes & {\n                target: string;\n            };\n        }\n\n        // Generally shouldn't be necessary, TypeDoc contains an interface\n        // with all attributes documented on MDN. Properties added here will\n        // be permitted on all JSX elements.\n        interface IntrinsicAttributes {\n            customGlobalAttribute?: string;\n        }\n    }\n}\n\nexport function load(app: Application) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSDoc Compatibility in TypeDoc via typedoc.json\nDESCRIPTION: This JSON configuration demonstrates how to configure JSDoc compatibility options within the `typedoc.json` file.  It allows enabling or disabling specific JSDoc compatibility features, such as handling `@example`, `@default`, and `@inheritDoc` tags, as well as ignoring unescaped braces.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsDocCompatibility\": {\n        \"exampleTag\": true,\n        \"defaultTag\": true,\n        \"inheritDocTag\": true,\n        \"ignoreUnescapedBraces\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Link Resolution with Lodash Plugin (TypeScript)\nDESCRIPTION: This TypeScript plugin enhances link resolution for Lodash symbols using `app.converter.addUnknownSymbolResolver`. Since TypeDoc 0.23.26, plugins can return an object for more control, which allows you to specify both the target URL and the caption for the link. This snippet demonstrates linking Lodash methods to their documentation on lodash.com, while setting the `caption` property. This is useful when the user does not specify link text.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/third-party-symbols.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Application, type DeclarationReference } from \"typedoc\";\n\nconst documentedExports = [\n    \"chunk\",\n    \"compact\",\n    \"concat\",\n    \"difference\",\n    \"differenceBy\",\n    \"differenceWith\",\n];\n\nexport function load(app: Application) {\n    app.converter.addUnknownSymbolResolver((ref: DeclarationReference) => {\n        if (\n            // TS defined symbols\n            ref.moduleSource !== \"@types/lodash\" &&\n            // User {@link} tags\n            ref.moduleSource !== \"lodash\"\n        ) {\n            return;\n        }\n\n        // If someone did {@link lodash!}, link them directly to the home page.\n        if (!ref.symbolReference) {\n            return \"https://lodash.com/\";\n        }\n\n        if (!ref.symbolReference.path) {\n            // Someone included a meaning, but not a path.\n            // https://typedoc.org/guides/declaration-references/#meaning\n            return;\n        }\n\n        if (ref.symbolReference.path.length === 1) {\n            const name = ref.symbolReference.path[0].path;\n            if (documentedExports.includes(name)) {\n                return {\n                    target: `https://lodash.com/docs/4.17.15#${name}`,\n                    caption: name,\n                };\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Documents in typedoc.json\nDESCRIPTION: Demonstrates how to specify additional Markdown documents to be included in the generated documentation site using the `projectDocuments` option in `typedoc.json`. This allows integrating external documentation files seamlessly into the TypeDoc output.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// typedoc.json\n{\n    \"projectDocuments\": [\"docs/tutorial.md\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Group Boosts with JSON\nDESCRIPTION: This snippet demonstrates how to configure the search to increase the relevance of items in a given group using the `searchGroupBoosts` option within the `typedoc.json` file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_42\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"searchCategoryBoosts\": {\n        \"Classes\": 1.5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure externalSymbolLinkMappings in typedoc.json (JSONC)\nDESCRIPTION: This snippet demonstrates how to configure `externalSymbolLinkMappings` in the `typedoc.json` file to link symbols like `Promise` to the Mozilla Developer Network (MDN). It handles both global `Promise` references and those specific to the `typescript` package. The configuration maps package names to qualified names of third-party symbols. It is an object whose keys are package names, and values are the `.` joined qualified name of the third party symbol.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/third-party-symbols.md#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n// typedoc.json\n{\n    \"externalSymbolLinkMappings\": {\n        // For these you should probably install typedoc-plugin-mdn-links instead\n        \"global\": {\n            // Handle {@link !Promise}\n            \"Promise\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n        },\n        \"typescript\": {\n            // Handle type X = Promise<number>\n            \"Promise\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude Internal Symbols with CLI\nDESCRIPTION: Demonstrates how to remove symbols annotated with the `@internal` doc tag from the generated documentation using the `--excludeInternal` option in the TypeDoc CLI. This hides internal implementation details from the public documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludeInternal\n```\n\n----------------------------------------\n\nTITLE: Installing TypeDoc with NPM\nDESCRIPTION: This command installs TypeDoc as a development dependency using npm. This is the recommended approach for adding TypeDoc to a TypeScript project.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnpm install typedoc --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation Leaves with JSON\nDESCRIPTION: This snippet demonstrates how to specify namespaces/modules which should not be expandable in the navigation tree using the `navigationLeaves` option within the `typedoc.json` file. To specify nested namespaces, separate the parent names with `.` according to the displayed tree, skipping the top level project link. `ParentNS.ChildNS`\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_39\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"navigationLeaves\": [\"JSONOutput\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Symbol Link Mappings in TypeDoc via JSON\nDESCRIPTION: This JSON configuration demonstrates how to map external symbols to their documentation using the `externalSymbolLinkMappings` option in `typedoc.json`. This allows creating links to externally defined types using the `{@link}` tag or when the type is used in code. It shows mapping a `typescript` `Partial` to the typescriptlang.org documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    // format: { [packageName: string]: { [exportName: string]: string } }\n    \"externalSymbolLinkMappings\": {\n        // {@link typescript!Partial} will use this link as well as\n        // type Foo = Partial<Bar>\n        \"typescript\": {\n            \"Partial\": \"https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Search in Documents with Bash\nDESCRIPTION: This snippet demonstrates how to enable searching within document text in the generated documentation site using the `--searchInDocuments` option. This increases the size of the search index, potentially by an order of magnitude in projects with many documents.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_31\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --searchInDocuments\n```\n\n----------------------------------------\n\nTITLE: Define kind sort order - JSON\nDESCRIPTION: This JSON configuration specifies the relative ordering of reflections when `kind` is specified in the `sort` option. The order defines which reflection kinds are displayed first.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"kindSortOrder\": [\n        \"Reference\",\n        \"Project\",\n        \"Module\",\n        \"Namespace\",\n        \"Enum\",\n        \"EnumMember\",\n        \"Class\",\n        \"Interface\",\n        \"TypeAlias\",\n        \"Constructor\",\n        \"Property\",\n        \"Variable\",\n        \"Function\",\n        \"Accessor\",\n        \"Method\",\n        \"Parameter\",\n        \"TypeParameter\",\n        \"TypeLiteral\",\n        \"CallSignature\",\n        \"ConstructorSignature\",\n        \"IndexSignature\",\n        \"GetSignature\",\n        \"SetSignature\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @category tag in TypeDoc\nDESCRIPTION: This snippet demonstrates how to use the `@category` tag to group functions into different categories (General Use, Advanced Use) within TypeDoc documentation.  It also includes @categoryDescription, @showCategories, and @module tags for further customization. The first line of the `@categoryDescription` will be taken as the category name, and following lines will be used for the description.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/category.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @categoryDescription Advanced Use\n * These functions are available for...\n * @showCategories\n * @module\n */\n\n/**\n * @category General Use\n */\nexport function runProcess(): void;\n\n/**\n * @category Advanced Use\n */\nexport function unref(): void;\n\n/**\n * @category Advanced Use\n */\nexport function ref(): void;\n```\n\n----------------------------------------\n\nTITLE: Project Documents Configuration in JSON\nDESCRIPTION: This code snippet shows how to configure the `projectDocuments` option in a `typedoc.json` file to include multiple markdown files in the project's documentation. This is useful for including documents at the top level of the project when there are multiple entry points.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/external-documents.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// typedoc.json\n{\n    \"projectDocuments\": [\"documents/*.md\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @includeCode with Region Example (Markdown)\nDESCRIPTION: Illustrates how to include a specific region from a TypeScript file using the `@includeCode` tag and region markers in the TypeScript file itself. Shows how to reference the 'simpleEnum' region.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n{@includeCode ../../example/src/enums.ts#simpleEnum}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link as External Links\nDESCRIPTION: This bash command specifies that `http[s]://` links in comments and markdown files should be treated as external links to be opened in a new tab using the `--markdownLinkExternal` option\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_24\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --markdownLinkExternal\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example for Document Configuration\nDESCRIPTION: This code snippet illustrates the use of YAML frontmatter within a markdown document to control its title, group, category, and children within the generated documentation. The frontmatter block must begin and end with `---` on separate lines.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/external-documents.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: External Markdown\ngroup: Documents\ncategory: Guides\nchildren:\n    - ./child.md\n    - ./child2.md\n---\n```\n\n----------------------------------------\n\nTITLE: Controlling Compiled Output with --emit Option\nDESCRIPTION: This bash command demonstrates how to control the emission of compiled output files using the `--emit` option, which determines whether documentation, JavaScript, or nothing should be emitted.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --emit none\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascaded Modifier Tags in TypeDoc via typedoc.json\nDESCRIPTION: This JSON configuration demonstrates how to specify modifier tags that should be copied to all children of the parent reflection using the `cascadedModifierTags` option in `typedoc.json`.  Examples include `@alpha`, `@beta`, and `@experimental`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"modifierTags\": [\"@alpha\", \"@beta\", \"@experimental\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Compiler Options in typedoc.json (JSONC)\nDESCRIPTION: Shows how to selectively override TypeScript compiler options within a `typedoc.json` configuration file. This allows customizing compiler settings specifically for generating documentation, overriding those defined in `tsconfig.json`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/configuration.md#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n// typedoc.json\n{\n    \"compilerOptions\": {\n        \"skipLibCheck\": true,\n        \"strictNullChecks\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Async Jobs to the Renderer (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to add asynchronous jobs to the TypeDoc renderer. It adds functions to both `preRenderAsyncJobs` and `postRenderAsyncJobs` to perform tasks before and after rendering, including a delay. It demonstrates how to access the output directory via the `RendererEvent`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/themes.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, RendererEvent } from \"typedoc\";\nexport function load(app: Application) {\n    app.renderer.preRenderAsyncJobs.push(async (output: RendererEvent) => {\n        app.logger.info(\n            \"Pre render, no docs written to \" + output.outputDirectory + \" yet\",\n        );\n        // Slow down rendering by 1 second\n        await new Promise((r) => setTimeout(r, 1000));\n    });\n\n    app.renderer.postRenderAsyncJobs.push(async (output: RendererEvent) => {\n        app.logger.info(\n            \"Post render, all docs written to \" + output.outputDirectory,\n        );\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude Private Members with CLI\nDESCRIPTION: Illustrates how to remove private class members from the generated documentation using the `--excludePrivate` option in the TypeDoc CLI. This focuses the documentation on the public API of the classes.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludePrivate\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Options in typedoc.json\nDESCRIPTION: Illustrates how to configure package-specific options when using the `packages` entry point strategy in TypeDoc.  The `packageOptions` property in the `typedoc.json` file allows specifying options that are applied to each package when `entryPointStrategy` is set to `packages`. Paths within this object are interpreted relative to the package directory.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// typedoc.json\n{\n    \"entryPointStrategy\": \"packages\",\n    \"entryPoints\": [\"packages/*\"],\n    \"packageOptions\": {\n        \"entryPoints\": [\"src/index.ts\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Files with CLI\nDESCRIPTION: Illustrates how to exclude files from TypeDoc using the `--exclude` option in the command line. Supports [minimatch](https://github.com/isaacs/minimatch) patterns. This prevents TypeDoc from considering the specified files as entry points or including their content in the documentation. Note that TypeScript's `exclude` option is used to completely exclude files from compilation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --exclude \"**/*+(index|.spec|.e2e).ts\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Visibility Filters with JSON\nDESCRIPTION: This snippet demonstrates how to specify the available filters when viewing a page using the `visibilityFilters` option within the `typedoc.json` file. This controls display of `protected`, `private`, `inherited` and `external` members as well as those tagged with custom modifiers like `@alpha` and `@beta`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_40\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"visibilityFilters\": {\n        \"protected\": false,\n        \"private\": false,\n        \"inherited\": true,\n        \"external\": false,\n        \"@alpha\": false,\n        \"@beta\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Document Inclusion with @document Tag in TypeDoc\nDESCRIPTION: This code snippet demonstrates how to use the @document tag within a JSDoc comment to include an external markdown file ('promise-tutorial.md') as part of the generated documentation. The path specified after the @document tag will be linked as a document in the output.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/document.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @document promise-tutorial.md\n */\nexport class Promise<T> {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Hooks to Inject HTML (TSX)\nDESCRIPTION: This code snippet demonstrates how to use hooks in TypeDoc to inject HTML into a page without overwriting the entire theme. It attaches a function to the `head.end` hook to display a popup on every page.  It leverages JSX for HTML injection.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/themes.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Application, JSX } from \"typedoc\";\nexport function load(app: Application) {\n    app.renderer.hooks.on(\"head.end\", () => (\n        <script>\n            <JSX.Raw html=\"alert('hi!');\" />\n        </script>\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Readme Path Configuration (Bash)\nDESCRIPTION: This command sets the path to the readme file that TypeDoc should display on the index page.  If `none` is specified, or if no readme file is automatically found, the index page will be disabled. The `--readme` flag is used to specify the path to the readme file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --readme <path/to/readme|none>\n```\n\n----------------------------------------\n\nTITLE: Documenting Classes and Interfaces with @inheritDoc - TypeScript\nDESCRIPTION: This code demonstrates the usage of the {@inheritDoc} tag to inherit documentation from a class to an interface. The SomeUnrelatedClass interface will inherit the documentation from the SomeClass class.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/inheritDoc.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Some documentation\n */\nexport class SomeClass {}\n\n/** {@inheritDoc SomeClass} */\nexport interface SomeUnrelatedClass {}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Links with JSON\nDESCRIPTION: This snippet shows how to define additional links to be included in the page header using the `navigationLinks` option within the `typedoc.json` file.  The keys of the `navigationLinks` object define the link text, and the values define the link URLs.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"navigationLinks\": {\n        \"Example\": \"http://example.com\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing TypeDoc Messages with JSON\nDESCRIPTION: This snippet demonstrates how to specify translations for TypeDoc messages when using the `--lang` option. It defines a `locales` object within the `typedoc.json` file, where keys represent locale codes (e.g., \"zh\" for Chinese) and values are objects containing translations for specific messages (e.g., \"flag_private\": \"私有\").\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"locales\": {\n        \"zh\": {\n            \"flag_private\": \"私有\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Document Inclusion with @document Tag in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@document` tag within a TypeScript comment block to include an external markdown file in the generated documentation. The document path is specified relative to the file containing the comment.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/external-documents.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @document documents/external-markdown.md\n */\n```\n\n----------------------------------------\n\nTITLE: Reference Scope in TypeDoc (TS)\nDESCRIPTION: This code demonstrates how declaration references are resolved relative to the scope where they are declared and how an empty module source (`!`) can be used to refer to a name with resolution starting in the root scope. It also clarifies how TypeDoc mimics TypeScript's language service behavior for classes/interfaces.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/declaration-references.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Target = 1;\nexport namespace Foo {\n    export const Target = 2;\n\n    /**\n     * {@link Target} links to 2\n     * {@link !Target} links to 1\n     */\n    export const Source = 3;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dup = 1;\n/**\n * {@link dup} links to 1\n * {@link target} links to 2\n * {@link Foo.dup} links to 3\n */\nexport class Foo {\n    target = 2;\n    dup = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Stripping Configuration\nDESCRIPTION: Added `stripYamlFrontmatter` config option to remove YAML frontmatter from README.md files. This allows for cleaner documentation output when using README files with YAML frontmatter.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n`stripYamlFrontmatter` config option to remove YAML frontmatter from README.md\n```\n\n----------------------------------------\n\nTITLE: Controlling Reflection Headings with JSON\nDESCRIPTION: This snippet demonstrates how to control whether a heading describing the reflection should be included on the rendered page using the `headings` option in `typedoc.json`. It lets you control display of the `readme` and `document` headings separately.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_37\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"headings\": {\n        \"readme\": true,\n        \"document\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude Categories Configuration\nDESCRIPTION: Added `--excludeCategories` config option to remove reflections present in any excluded category. This allows for fine-grained control over which reflections are included in the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n`--excludeCategories` config option to remove reflections present in any excluded category\n```\n\n----------------------------------------\n\nTITLE: Grouping Members with @group Tag - TypeScript\nDESCRIPTION: This example demonstrates how to use the `@group` tag to organize members under a common header. The `@groupDescription` provides additional context. `@showGroups` enables navigation tree inclusion. The `@event` and `@eventProperty` tags are shorthand for `@group Events`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/group.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @groupDescription Events\n * Events are for...\n * @showGroups\n */\nexport class App extends EventEmitter {\n    /**\n     * @group Events\n     */\n    static readonly BEGIN = \"begin\";\n\n    /**\n     * The `@event` tag is equivalent to `@group Events`\n     * @event\n     */\n    static readonly PARSE_OPTIONS = \"parseOptions\";\n\n    /**\n     * The `@eventProperty` tag is equivalent to `@group Events`\n     * @eventProperty\n     */\n    static readonly END = \"end\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slugger with JSON\nDESCRIPTION: This snippet demonstrates how to configure the slugger which is used to create anchors within a page using the `sluggerConfiguration` option within `typedoc.json`.  Setting `lowercase` to `true` makes the generated anchors lowercase.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_38\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"sluggerConfiguration\": {\n        \"lowercase\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Class Members\nDESCRIPTION: This example demonstrates linking to different types of class members (instance and static) using the {@link} tag. It showcases how to link using declaration references when TypeScript resolution fails, clarifying the syntax for instance and static members.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/link.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * {@link Data.prop | instance member}\n * {@link Data.member | static member}\n * {@link Data#member | instance member} (declaration references only)\n */\nexport class Data {\n    prop = 0;\n\n    static member = 1;\n    member = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Git Revision with CLI\nDESCRIPTION: Shows how to specify a specific revision or branch to use when linking to source files using the `--gitRevision` option in the TypeDoc CLI.  This is useful for linking to older versions of the code.  The `--disableSources` option must not be set for this to take effect.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --gitRevision <revision|branch>\n```\n\n----------------------------------------\n\nTITLE: Define category order - JSON\nDESCRIPTION: This JSON configuration allows overriding the order in which categories are displayed. The `*` string indicates where categories not in the list should appear. Categories whose order is not specified will be sorted alphabetically. A category called `none` is reserved and displayed without a category before other categories.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"categoryOrder\": [\"Category Name\", \"Other Category\", \"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Type Alias to Interface Conversion with @interface - TypeScript\nDESCRIPTION: This code demonstrates how to use the `@interface` tag to force TypeDoc to document a type alias as an interface.  It includes JSDoc-style comments using `@property` to provide descriptions for individual properties that will be included in the expanded interface. The `Record` type is used to define a type alias.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/interface.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This will be displayed as an interface\n * @property a comment for a\n * @prop b comment for b\n * @interface\n */\nexport type Resolved = Record<\"a\" | \"b\" | \"c\", string>;\n```\n\n----------------------------------------\n\nTITLE: TypeDoc tsconfig.json Specification (Bash)\nDESCRIPTION: Demonstrates the command-line option to specify a `tsconfig.json` file for TypeDoc.  TypeDoc reads compiler options and TypeDoc-specific options from the `tsconfig.json` file. If unspecified, TypeDoc searches for `tsconfig.json` in the current directory and parent directories.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/configuration.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --tsconfig tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Watch Mode\nDESCRIPTION: Enables TypeScript's incremental compiler to monitor source files for modifications and automatically rebuild the documentation upon detection of changes. It supports changes to project documents, readme, custom JS/CSS, configuration files, files imported by `@include`/`@includeCode`, and any files explicitly registered by plugins.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Tags in TypeDoc via typedoc.json\nDESCRIPTION: This JSON configuration demonstrates how to specify the valid inline tags that TypeDoc will recognize using the `inlineTags` option in `typedoc.json`. It allows extending or overriding the default set of inline tags, such as `@link`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"inlineTags\": [\"@link\"]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @expand Tag Example (React)\nDESCRIPTION: This example demonstrates the use of the `@expand` tag on a type alias `HelloProps`. When applied, TypeDoc inlines the type declaration of `HelloProps` wherever it is referenced, such as in the `Hello` and `Hello2` components. The `Hello2` example showcases overriding the description.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/expand.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Props docs\n * @expand\n */\nexport type HelloProps = {\n    /** Name property docs */\n    name: string;\n};\n\n/**\n * Hello\n */\nexport function Hello(props: HelloProps) {\n    return {};\n}\n\n/**\n * Hello2\n * @param props Props docs (used instead of `@expand` description)\n */\nexport function Hello2(props: HelloProps) {\n    return {};\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Link Text in TypeDoc via CLI\nDESCRIPTION: This command demonstrates how to configure TypeDoc to only include the name of the target reflection in `{@link}` tags by setting `--preserveLinkText` to `false`.  This ensures only the name is displayed, not the original link text.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --preserveLinkText false\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Entry Point Specification\nDESCRIPTION: This command builds documentation for your TypeScript project, explicitly specifying \"src/index.ts\" as the entry point. It's used when TypeDoc cannot automatically discover the entry points.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx typedoc src/index.ts\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Show Config\nDESCRIPTION: Prints the effective TypeDoc configuration and exits. This is useful for debugging and understanding the options that have been set.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --showConfig\n```\n\n----------------------------------------\n\nTITLE: Basic TypeDoc Usage\nDESCRIPTION: This command runs TypeDoc on a single entry point file (src/index.ts). TypeDoc will attempt to find the tsconfig.json file in the project.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntypedoc src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Example API for Router Demonstrations\nDESCRIPTION: This TypeScript code snippet provides an example API structure used to demonstrate how different router options affect the generated documentation's folder structure. It includes a function, a class, and a namespace with a constant.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function initialize(): void;\n/** @group Opts */\nexport class Options {}\nexport namespace TypeDoc {\n    export const VERSION: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Block Tags in TypeDoc with JavaScript Config\nDESCRIPTION: This JavaScript configuration demonstrates how to extend the default set of block tags using a JavaScript configuration file.  It imports `OptionDefaults` and adds a custom tag, `@foo`, to the list of valid block tags. This allows defining custom tags specific to the project.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OptionDefaults } from \"typedoc\";\n\n/** @type {Partial<import('typedoc').TypeDocOptions>} */\nconst config = {\n    // Other config here.\n    // ...\n\n    blockTags: [...OptionDefaults.blockTags, \"@foo\"],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Translating Plugin-Defined Strings\nDESCRIPTION: This code snippet demonstrates how plugins can utilize TypeDoc's internationalization module. It shows how to extend the `TranslatableStrings` interface with plugin-specific strings and how to add translations for those strings using `Application.internationalization.addTranslations`. It also provides examples of how to use the translated strings within the plugin's code.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/internationalization.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as td from \"typedoc\";\n\ndeclare module \"typedoc\" {\n    interface TranslatableStrings {\n        // Define a translatable string with no arguments\n        plugin_example_hello_world: [];\n        // Define a translatable string requiring one argument\n        // By convention, keys should include index numbers for each placeholder\n        plugin_example_hello_0: [string];\n    }\n}\n\nexport function load(app: td.Application) {\n    app.internationalization.addTranslations(\"en\", {\n        plugin_example_hello_world: \"Hello World!\",\n        plugin_example_hello_0: \"Hello {0}!\",\n    });\n\n    app.logger.info(app.i18n.plugin_example_hello_world()); // Logs \"Hello World!\"\n    app.logger.info(app.i18n.plugin_example_hello_0(\"TypeDoc\")); // Logs \"Hello TypeDoc!\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc JSON Validation Configuration\nDESCRIPTION: This code shows the default validation configuration within a `typedoc.json` file. It specifies which validation checks should be performed during documentation generation, such as detecting not exported types, invalid links, rewritten links, not documented reflections, and unused merge module with tags.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"validation\": {\n        \"notExported\": true,\n        \"invalidLink\": true,\n        \"rewrittenLink\": true,\n        \"notDocumented\": false,\n        \"unusedMergeModuleWith\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Skip Error Checking\nDESCRIPTION: Instructs TypeDoc to bypass type checking before converting a project. While this can speed up generation, it may lead to crashes if the code contains type errors.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --skipErrorChecking\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Category Boosts with JSON\nDESCRIPTION: This snippet demonstrates how to configure the search to increase the relevance of items in a given category using the `searchCategoryBoosts` option within the `typedoc.json` file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_41\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"searchCategoryBoosts\": {\n        \"Common Items\": 1.5\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @beta Tag in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@beta` tag in TypeScript to mark a member as intended for third-party developers but not yet stable. It shows the tag being applied to a method within a class.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/beta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @beta */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Specify sort order for members - Bash\nDESCRIPTION: This command specifies the sort order for members. Sorting strategies are applied in order. If an earlier strategy determines the ordering, later strategies are not applied. The provided example sorts first by static/instance and then by visibility.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --sort static-first --sort alphabetical\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Required To Be Documented Configuration\nDESCRIPTION: This shows how to configure which reflection types must have documentation comments in the `typedoc.json` file. Used by the `validation.notDocumented` setting.  The code snippet provides a commented-out list of possible values and the default is a subset of available reflection types.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"requiredToBeDocumented\": [\n        // \"Project\",\n        // \"Module\",\n        // \"Namespace\",\n        \"Enum\",\n        \"EnumMember\",\n        \"Variable\",\n        \"Function\",\n        \"Class\",\n        \"Interface\",\n        // \"Constructor\",\n        \"Property\",\n        \"Method\",\n        // Implicitly set if function/method is set (this means you can't require docs on methods, but not functions)\n        // This exists because methods/functions can have multiple signatures due to overloads, and TypeDoc puts comment\n        // data on the signature. This might be improved someday, so you probably shouldn't set this directly.\n        //    \"CallSignature\",\n        // Index signature { [k: string]: string } \"properties\"\n        //    \"IndexSignature\",\n        // Equivalent to Constructor due to the same implementation detail as CallSignature\n        //    \"ConstructorSignature\",\n        // \"Parameter\",\n        // Used for object literal types. You probably should set TypeAlias instead, which refers to types created with `type X =`.\n        // This only really exists because of an implementation detail.\n        //    \"TypeLiteral\",\n        // \"TypeParameter\",\n        \"Accessor\", // shorthand for GetSignature + SetSignature\n        //   \"GetSignature\",\n        //    \"SetSignature\",\n        \"TypeAlias\"\n        // TypeDoc creates reference reflections if a symbol is exported from a package with multiple names. Most projects\n        // won't have any of these, and they just render as a link to the canonical name.\n        //    \"Reference\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Links to Namespaces and Enums\nDESCRIPTION: This code demonstrates linking to a namespace and enum that share the same name using the {@link} tag. It highlights how TypeScript's link resolution may behave when `--useTsLinkResolution` is enabled versus disabled.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/link.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * TypeScript links do not support meaning qualifiers (`:namespace`),\n * so both of these links will link to the enum unless --useTsLinkResolution is disabled.\n * {@link Merged:namespace} links to the namespace.\n * {@link Merged:enum} links to the enum.\n */\nexport namespace Merged {\n    export const a = 3;\n}\n\nexport enum Merged {\n    A,\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Class and Function Signatures with @deprecated in TypeDoc\nDESCRIPTION: This code demonstrates how to use the `@deprecated` tag to mark a class and a specific function signature as deprecated in TypeDoc. The deprecated class `Widget` suggests using `NewWidget` instead. The `work` function has one deprecated signature and one non-deprecated signature based on the presence of the `CancellationToken` parameter.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/deprecated.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @deprecated Use {@link NewWidget} instead.\n */\nexport class Widget {}\n\nexport class NewWidget {\n    /**\n     * @deprecated a single signature may be deprecated\n     */\n    work(): void;\n    /**\n     * This signature is not deprecated\n     */\n    work(token: CancellationToken): void;\n    work(token?: CancellationToken) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for intentionallyNotExported\nDESCRIPTION: This JSON configuration demonstrates how to use the `intentionallyNotExported` option in TypeDoc to suppress warnings for symbols that are intentionally not exported. Specifically, it suppresses the warning for 'Foo' in 'src/foo.ts', but not for another 'Foo' in 'src/utils/foo.ts'.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"intentionallyNotExported\": [\"src/foo.ts:Foo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Path Using --out Option\nDESCRIPTION: This bash command shows how to specify the output directory for the default output type (typically HTML) using the `--out` command-line option. This is a shortcut that overwrites the 'outputs' config option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --out <path/to/documentation/>\n```\n\n----------------------------------------\n\nTITLE: Setting Type Print Width\nDESCRIPTION: This bash command sets the width at which to wrap code when rendering types using the `--typePrintWidth` option. It is not advised to change this without tweaking the theme.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\ntypedoc --typePrintWidth 120\n```\n\n----------------------------------------\n\nTITLE: Configure Excluded Kinds in typedoc.json\nDESCRIPTION: Shows how to configure the kinds of members that can be removed by `excludeNotDocumented` using the `excludeNotDocumentedKinds` option in `typedoc.json`.  This provides fine-grained control over which undocumented symbols are excluded from the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// typedoc.json\n{\n    \"excludeNotDocumented\": true,\n    \"excludeNotDocumentedKinds\": [\"Property\", \"Interface\", \"TypeAlias\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Thrown Exceptions using @throws in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `@throws` tag to document a potential exception thrown by a function. It links to a `UserError` class to specify the type of exception that might be thrown if the input `max` is less than `min`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/throws.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @throws {@link UserError} if `max < min`\n */\nexport function rand(min: number, max: number): number;\n```\n\n----------------------------------------\n\nTITLE: Base Path Specification\nDESCRIPTION: This bash command specifies the base path to be used when displaying file paths using the `--basePath` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_20\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --basePath ./ --entryPoints src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Return Value with @returns in TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the `@returns` tag to document the return value of a function. The `@param` tags document the function's parameters. The function `sum` takes two numbers as input and returns their sum. The documentation includes a description of each parameter and the return value.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/returns.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param a - the first number\n * @param b - the second number\n * @returns The sum of `a` and `b`\n */\nexport function sum(a: number, b: number): number;\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @expandType Tag Example\nDESCRIPTION: This example demonstrates the usage of the `@expandType` tag on the `Hello` component. It tells TypeDoc to expand the `HelloProps` type reference within the `Hello` component as if the `@expand` tag had been placed on `HelloProps` directly. This tag can be inherited at the namespace/module level.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/expand.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type HelloProps = {\n    /** Name description */\n    name: string;\n};\n\n/**\n * Hello component\n * @expandType HelloProps\n */\nexport function Hello(props: HelloProps) {\n    return <span>Hello {props.name}!</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Search in Comments with Bash\nDESCRIPTION: This snippet demonstrates how to enable searching within comment text in the generated documentation site using the `--searchInComments` option. This increases the size of the search index, potentially by an order of magnitude in projects with many long comments.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --searchInComments\n```\n\n----------------------------------------\n\nTITLE: Exclude Not Documented Symbols with CLI\nDESCRIPTION: Demonstrates how to remove symbols without doc comments from the generated documentation using the `--excludeNotDocumented` option in the TypeDoc CLI.  This helps to clean up the documentation by removing undocumented elements.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludeNotDocumented\n```\n\n----------------------------------------\n\nTITLE: Adding a New Locale\nDESCRIPTION: This code snippet demonstrates how to create a new locale file in TypeDoc. It imports the `buildTranslation` function and exports a translation object with key-value pairs representing translated strings. The keys correspond to the English strings, and the values are the translated strings in the target language.  Ensure proper placeholder formatting.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/internationalization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// zh.cts\nimport { buildTranslation } from \"../translatable\";\n\nexport = buildTranslation({\n    docs_generated_at_0: \"文档生成于 {0}\",\n});\n```\n\n----------------------------------------\n\nTITLE: Resolve React Symbols with TypeDoc Plugin (TypeScript)\nDESCRIPTION: This TypeScript plugin demonstrates how to use `app.converter.addUnknownSymbolResolver` to resolve symbols from the `@types/react` or `react` packages and link them to the official React documentation site. It checks the `moduleSource` and `symbolReference` to determine the correct URL.  It covers the case where someone did `{@link react!}` to link them to the home page, and cases where more specific references are made.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/third-party-symbols.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Application, type DeclarationReference } from \"typedoc\";\n\nconst knownSymbols = {\n    Component: \"https://reactjs.org/docs/react-component.html\",\n    PureComponent: \"https://reactjs.org/docs/react-api.html#reactpurecomponent\",\n};\n\nexport function load(app: Application) {\n    app.converter.addUnknownSymbolResolver((ref: DeclarationReference) => {\n        if (\n            // TS defined symbols\n            ref.moduleSource !== \"@types/react\" &&\n            // User {@link} tags\n            ref.moduleSource !== \"react\"\n        ) {\n            return;\n        }\n\n        // If someone did {@link react!}, link them directly to the home page.\n        if (!ref.symbolReference) {\n            return \"https://reactjs.org/\";\n        }\n\n        // Otherwise, we need to navigate through the symbol reference to\n        // determine where they meant to link to. Since the symbols we know\n        // about are all a single \"level\" deep, this is pretty simple.\n\n        if (!ref.symbolReference.path) {\n            // Someone included a meaning, but not a path.\n            // https://typedoc.org/guides/declaration-references/#meaning\n            return;\n        }\n\n        if (ref.symbolReference.path.length === 1) {\n            const name = ref.symbolReference.path[0].path;\n            if (knownSymbols.hasOwnProperty(name)) {\n                return knownSymbols[name as never];\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Configuration: includeFolders Option\nDESCRIPTION: Introduced the `--navigation.includeFolders` option to create nested navigation for projects with many entry points. This option, which defaults to `true`, allows for better organization of the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n`--navigation.includeFolders` (default: `true`)\n```\n\n----------------------------------------\n\nTITLE: Custom Theme with Template Overriding (TSX)\nDESCRIPTION: This code snippet illustrates how to create a custom theme in TypeDoc that overrides the default footer template.  It defines a custom theme context class extending `DefaultThemeRenderContext` with an overridden `footer` function. It then defines a theme class which returns the context and registers the new theme.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/themes.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Application, DefaultTheme, JSX, PageEvent, Reflection } from \"typedoc\";\n\nclass MyThemeContext extends DefaultThemeRenderContext {\n    // Important: If you use `this`, this function MUST be bound! Template functions\n    // are free to destructure the context object to only grab what they care about.\n    override footer = (context) => {\n        return (\n            <footer>\n                {context.hook(\"footer.begin\", context)}\n                Copyright 2024\n                {context.hook(\"footer.end\", context)}\n            </footer>\n        );\n    };\n}\n\nclass MyTheme extends DefaultTheme {\n    getRenderContext(pageEvent: PageEvent<Reflection>) {\n        return new MyThemeContext(this, pageEvent, this.application.options);\n    }\n}\n\nexport function load(app: Application) {\n    app.renderer.defineTheme(\"open-web-analytics\", MyTheme);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Default Value with @defaultValue in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@defaultValue` tag in a TypeScript interface to document the default value of the `strictNullChecks` property. It clarifies that the default value depends on the value of the `strict` property.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/defaultValue.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface CompilerOptions {\n    strict?: boolean;\n    /**\n     * @defaultValue `true` if `strict` is `true`, otherwise `false`\n     */\n    strictNullChecks?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using First Paragraph as Summary with JSON\nDESCRIPTION: This snippet demonstrates how to configure TypeDoc to use the first paragraph from the comment as the short summary using the `useFirstParagraphOfCommentAsSummary` option within the `typedoc.json` file. This is used when rendering a module or namespace and the `@summary` tag is not used.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_45\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"useFirstParagraphOfCommentAsSummary\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Not Rendering Tags in TypeDoc via CLI\nDESCRIPTION: This command demonstrates how to specify tags that should be preserved in doc comments but not rendered in the output using the `--notRenderedTags` option in the TypeDoc CLI. In this example, the `beta` tag will be preserved but not rendered.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --notRenderedTags beta\n```\n\n----------------------------------------\n\nTITLE: Excluding Tags in TypeDoc via CLI\nDESCRIPTION: This command demonstrates how to exclude specific tags from being parsed by TypeDoc using the `--excludeTags` option in the CLI. In this example, the `apidefine` tag is excluded, which is useful when integrating with tools like apiDoc.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --excludeTags apidefine\n```\n\n----------------------------------------\n\nTITLE: Enabling alwaysCreateEntryPointModule with CLI\nDESCRIPTION: Shows how to use the `--alwaysCreateEntryPointModule` flag in the TypeDoc CLI. When enabled, TypeDoc will always create a module for the entry point, even if only one entry point is provided.  This ensures consistency in the generated documentation structure.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --alwaysCreateEntryPointModule\n```\n\n----------------------------------------\n\nTITLE: Using Hosted Base URL for Absolute Links with JSON\nDESCRIPTION: This snippet demonstrates how to generate absolute links to pages rather than relative links, using the `useHostedBaseUrlForAbsoluteLinks` option within `typedoc.json`. This requires also setting `hostedBaseUrl` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_44\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"hostedBaseUrl\": \"https://example.com\",\n    \"useHostedBaseUrlForAbsoluteLinks\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting with @see tag in TypeDoc\nDESCRIPTION: This example demonstrates how to use the `@see` tag to reference external resources and internal links within a documentation comment. It creates links to a Wikipedia article and another function using the `@link` tag.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/see.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @see [Factorial - Wikipedia](https://en.wikipedia.org/wiki/Factorial)\n * @see {@link semifactorial}\n */\nexport function factorial(n: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using @summary Tag in TypeDoc\nDESCRIPTION: This code snippet demonstrates the usage of the `@summary` tag in TypeDoc to provide a custom summary for a function on the module page. The first function `runProcess`'s description will be used on the module page only if `--useFirstParagraphOfCommentAsSummary` is set. The second function `forkProcess` uses the `@summary` tag to define a specific description for the module page.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/summary.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This description will be used on the **module** page if --useFirstParagraphOfCommentAsSummary is set\n * If not set, this function will not have a description on the module page.\n */\nexport function runProcess(): void;\n\n/**\n * This description will be used on the **member** page\n * @summary\n * This description will be used on the **module** page\n */\nexport function forkProcess(): void;\n```\n\n----------------------------------------\n\nTITLE: Extending Modifier Tags in TypeDoc with JavaScript Config\nDESCRIPTION: This JavaScript configuration demonstrates how to extend the default set of modifier tags using a JavaScript configuration file. It imports `OptionDefaults` and adds a custom tag, `@foo`, to the list of valid modifier tags. This allows defining custom tags specific to the project.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OptionDefaults } from \"typedoc\";\n\n/** @type {Partial<import('typedoc').TypeDocOptions>} */\nconst config = {\n    // Other config here.\n    // ...\n\n    modifierTags: [...OptionDefaults.modifierTags, \"@foo\"],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Project Documents Configuration in TypeDoc\nDESCRIPTION: This code snippet demonstrates how to configure the `projectDocuments` option in a `typedoc.json` file to include multiple markdown files in the TypeDoc documentation. This is useful when you need to include documents at the top level of the project, especially when dealing with multiple entry points.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/src/documents/external-markdown.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n// typedoc.json\n{\n    \"projectDocuments\": [\"documents/*.md\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Inlining with @inlineType Tag - TS\nDESCRIPTION: This example demonstrates how to use the `@inlineType` tag to selectively inline the `HelloProps` type only in the `Hello` function.  This tag avoids global inlining caused by the `@inline` tag.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/inline.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HelloProps = {\n    name: string;\n};\n\n/**\n * Hello component - HelloProps will be inlined here as\n * if you had written `Hello(props: { name: string })`\n * @inlineType HelloProps\n */\nexport function Hello(props: HelloProps) {\n    return <span>Hello {props.name}!</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude Categories with CLI\nDESCRIPTION: Illustrates how to remove reflections associated with specific categories from the documentation using the `--excludeCategories` option in the TypeDoc CLI.  This allows filtering out entire groups of reflections based on their assigned categories.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludeCategories A --excludeCategories B\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Help\nDESCRIPTION: Prints a comprehensive list of available TypeDoc options along with their descriptions. It also includes a list of supported highlighting languages.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --help\n```\n\n----------------------------------------\n\nTITLE: Using @property and @prop to Document Interface Members\nDESCRIPTION: This example demonstrates how to use the `@property` and `@prop` tags to add comments to interface members when the interface is defined using a type alias. It showcases the effect of these tags on the generated documentation, resulting in JSDoc-style comments attached to the interface properties.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/property.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This will be displayed as an interface\n * @property a comment for a\n * @prop b comment for b\n * @interface\n */\nexport type Resolved = Record<\"a\" | \"b\" | \"c\", string>;\n\n// will be documented as if you wrote\n\n/** This will be displayed as an interface */\nexport interface Resolved {\n    /** comment for a */\n    a: string;\n    /** comment for b */\n    b: string;\n    c: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping External Symbols from @types and Original Package\nDESCRIPTION: This JSON configuration demonstrates mapping the same external symbol from both the `@types` package and the original package, allowing both `class Foo extends Component {}` and `{@link react!Component}` to link to the React component documentation. It illustrates how TypeDoc links based on the package where the symbol is referenced from.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"externalSymbolLinkMappings\": {\n        // used by `class Foo extends Component {}`\n        \"@types/react\": {\n            \"Component\": \"https://reactjs.org/docs/react-component.html\"\n        },\n        // used by {@link react!Component}\n        \"react\": {\n            \"Component\": \"https://reactjs.org/docs/react-component.html\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Wildcard in externalSymbolLinkMappings (JSONC)\nDESCRIPTION: This snippet shows how to use a wildcard (*) in `externalSymbolLinkMappings` to provide a fallback link for any unmapped type within a specified external library. If a specific symbol is not defined, it defaults to the provided wildcard URL. This allows linking to the library's general documentation page.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/third-party-symbols.md#_snippet_1\n\nLANGUAGE: JSONC\nCODE:\n```\n// typedoc.json\n{\n    \"externalSymbolLinkMappings\": {\n        \"external-lib\": {\n            \"SomeObject\": \"https://external-lib.site/docs/SomeObject\",\n            \"*\": \"https://external-lib.site/docs\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Directory Cleaning with Bash\nDESCRIPTION: This snippet demonstrates how to prevent TypeDoc from cleaning the output directory specified with `--out` by using the `--cleanOutputDir false` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_32\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --cleanOutputDir false\n```\n\n----------------------------------------\n\nTITLE: Module Documentation with Renaming - TypeScript\nDESCRIPTION: This example demonstrates documenting a module using the `@module` tag and renaming it to 'my-module'. The comment block precedes the import statement to ensure it's treated as a module comment.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/module.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// file1.ts\n/**\n * This is the doc comment for file1.ts\n *\n * Specify this is a module comment and rename it to my-module:\n * @module my-module\n */\nimport * as lib from \"lib\";\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Preserve Watch Output\nDESCRIPTION: Disables the default behavior of `--watch`, which clears the screen between compilation steps. When enabled, the output from each compilation step is preserved on the screen.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --watch --preserveWatchOutput\n```\n\n----------------------------------------\n\nTITLE: Documenting Readonly Property with @readonly Tag - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@readonly` tag to indicate that a property, even if technically having a setter, should be documented as non-writable. This overrides TypeScript's type information in the generated documentation. The example shows a getter-only property marked as readonly and a setter that is explicitly hidden from the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/readonly.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Readable {\n    /** @readonly */\n    get prop() {\n        return 1;\n    }\n\n    /** Will be removed from the documentation due to the readonly tag */\n    set prop(_: number) {\n        throw new Error(\"Not permitted\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript Integration\nDESCRIPTION: This bash command specifies a JavaScript script file to be copied into the assets directory and referenced by the theme using the `--customJs` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --customJs ./theme/custom.js\n```\n\n----------------------------------------\n\nTITLE: Sorting Configuration: external-last Option\nDESCRIPTION: Added the `external-last` option for the `--sort` option. This allows sorting members with external types to be placed last in the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n`external-last` option for the `--sort` option\n```\n\n----------------------------------------\n\nTITLE: Documenting Destructured Parameters with @param in TypeScript\nDESCRIPTION: Explains how TypeDoc handles destructured parameters when using the @param tag. It emphasizes that all parameters must be documented for TypeDoc to correctly infer the parameter names. If inference fails, the parameter is documented as `__namedParameters`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/param.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param options - docs\n */\nexport function configure({ value }: { value: string }) {}\n\n// will be documented as if written as\nexport function configure(options: { value: string }) {}\n```\n\n----------------------------------------\n\nTITLE: Documenting Object Literal Parameters with @param in TypeScript\nDESCRIPTION: Illustrates how to document object literal parameters using the @param tag.  It shows how to document the parameter itself and individual properties within the object using dot notation. Note that deeply nested properties are not supported.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/param.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param options - documentation for the whole parameter\n * @param options.value - documentation for the `value` property\n * @param options.nested.value - NOT supported\n */\nexport function configure(\n    options: { value: string; nested: { value: string } } | undefined,\n) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Using --theme Option\nDESCRIPTION: This bash command demonstrates how to specify the theme to be used for generating documentation using the `--theme` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --theme default\n```\n\n----------------------------------------\n\nTITLE: Module Documentation without Renaming - TypeScript\nDESCRIPTION: This example shows how to document a module using the `@module` tag without renaming it. Similar to the previous example, the comment block is placed before the import statement.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/module.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file2.ts\n/**\n * Specify this is a module comment without renaming it:\n * @module\n */\nimport * as lib from \"lib\";\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Files with @include - Markdown\nDESCRIPTION: Demonstrates how to include an external markdown file within a TypeDoc documentation page using the `@include` tag. This allows for organizing long-form guides/tutorials outside of doc comments and importing them into the main documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/src/documents/include.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{@include ./include-code.md}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Example in TypeDoc\nDESCRIPTION: This code snippet illustrates the use of YAML frontmatter within a markdown document to control the document's title, group, category, and children in the TypeDoc documentation. These keys provide metadata that affects the document's presentation and organization within the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/src/documents/external-markdown.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: External Markdown\ngroup: Documents\ncategory: Guides\nchildren:\n    - ./child.md\n    - ./child2.md\n---\n```\n\n----------------------------------------\n\nTITLE: Extending Inline Tags in TypeDoc with JavaScript Config\nDESCRIPTION: This JavaScript configuration demonstrates how to extend the default set of inline tags using a JavaScript configuration file. It imports `OptionDefaults` and adds a custom tag, `@foo`, to the list of valid inline tags. This allows defining custom tags specific to the project.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OptionDefaults } from \"typedoc\";\n\n/** @type {Partial<import('typedoc').TypeDocOptions>} */\nconst config = {\n    // Other config here.\n    // ...\n\n    inlineTags: [...OptionDefaults.inlineTags, \"@foo\"],\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Set Project Name with CLI\nDESCRIPTION: Shows how to set the name of the project using the `--name` option in the TypeDoc CLI. The name is displayed in the header of the generated documentation. If not set, it defaults to the package name from `package.json`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --name <Documentation title>\n```\n\n----------------------------------------\n\nTITLE: Defining a Linked Function\nDESCRIPTION: This code defines the `random` function, which is referenced by the {@link} tag in the previous example. This function returns a random number between 0 and 1.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/link.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a random number in the range [0, 1)\n */\nexport function random(): number;\n```\n\n----------------------------------------\n\nTITLE: Inlining Type with @inline Tag - TSX\nDESCRIPTION: This example demonstrates how to use the `@inline` tag to inline a type alias (`HelloProps`) directly into the function signature of the `Hello` component. The documentation for `HelloProps` will be embedded where it is used.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/inline.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @inline\n */\nexport type HelloProps = {\n    /** Name property docs */\n    name: string;\n};\n\n/**\n * Hello component - HelloProps will be inlined here as\n * if you had written `Hello(props: { name: string })`\n */\nexport function Hello(props: HelloProps) {\n    return <span>Hello {props.name}!</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTML Output Path Using --html Option\nDESCRIPTION: This bash command demonstrates specifying the output directory for HTML documentation using the `--html` command-line option. It's a shortcut that will overwrite the 'outputs' config option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --html <path/to/documentation/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom Theme in TypeDoc (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define a basic custom theme in TypeDoc that duplicates the default theme. It imports the necessary modules from TypeDoc and uses the `defineTheme` method to register the theme.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/themes.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, DefaultTheme } from \"typedoc\";\n\nexport function load(app: Application) {\n    app.renderer.defineTheme(\"mydefault\", DefaultTheme);\n}\n```\n\n----------------------------------------\n\nTITLE: External Source Links Configuration\nDESCRIPTION: Added the `--sourceLinkExternal` option to render source code links as external links. This gives more control over linking to external repositories for source code.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n`--sourceLinkExternal` option to render source code links as external\n```\n\n----------------------------------------\n\nTITLE: Override Visibility with @public in TypeScript\nDESCRIPTION: This code demonstrates how the `@public` tag can be used to override the visibility of a protected member to public within TypeDoc's generated documentation. The `member` property, although declared as `protected`, will be documented as `public` due to the `@public` tag. This snippet illustrates TypeDoc's behavior regarding visibility modifiers.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/public.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @public */\n    protected member = 123;\n}\n\n// Will be documented as:\nexport class Visibility {\n    public member = 123;\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Comment Warnings in Declaration Files in TypeDoc via CLI\nDESCRIPTION: This command shows how to suppress comment warnings in declaration files (`.d.ts`) by using the `--suppressCommentWarningsInDeclarationFiles` option in the TypeDoc CLI. This prevents warnings related to unspecified tags from being reported in comments within these files.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --suppressCommentWarningsInDeclarationFiles\n```\n\n----------------------------------------\n\nTITLE: Marking an Event with @event Tag in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@event` tag in a TypeScript class to mark a static property as an event. The `ON_REQUEST` property is annotated with `@event`, which categorizes it in the 'Events' group in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/event.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class App extends EventEmitter {\n    /**\n     * @event\n     */\n    static ON_REQUEST = \"request\";\n}\n```\n\n----------------------------------------\n\nTITLE: Meaning in Declaration References in TypeDoc (TS)\nDESCRIPTION: This code illustrates how to use the 'meaning' component in declaration references to disambiguate references and target specific overloads or types. It shows the usage of keywords (e.g., `function`, `var`) and overload indices, along with TypeDoc-specific labels.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/declaration-references.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * {@link foo:0}\n * {@link foo:function}\n * {@link foo:(0)}\n * {@link foo:function(0)}\n * {@link foo:NO_ARGS}\n * {@label NO_ARGS}\n */\nfunction foo(): void;\n/**\n * {@link foo:1}\n * {@link foo:function(1)}\n * {@link foo:(1)}\n * {@link foo:NUM_ARG}\n * {@label NUM_ARG}\n */\nfunction foo(n: number): number;\n/**\n * {@link foo:2}\n * {@link foo:function(2)}\n * {@link foo:(2)}\n * {@link foo:STR_ARG}\n * {@label STR_ARG}\n */\nfunction foo(s: string): string;\n```\n\n----------------------------------------\n\nTITLE: Resulting Interface Documentation - TypeScript\nDESCRIPTION: This code shows the resulting interface that TypeDoc will generate after processing the type alias with the `@interface` tag. It demonstrates how dynamic properties from the `Record` type are expanded into individual properties with their respective JSDoc comments.  This example illustrates the effect of the `@interface` tag and the corresponding `@property` tags.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/interface.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** This will be displayed as an interface */\nexport interface Resolved {\n    /** comment for a */\n    a: string;\n    /** comment for b */\n    b: string;\n    c: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Intentionally Not Exported Configuration\nDESCRIPTION: This shows how to configure symbols that are intentionally excluded from documentation.  This is defined in the `typedoc.json` file. This prevents TypeDoc from producing warnings for these symbols. It allows optionally specifying a package/file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"intentionallyNotExported\": [\n        \"InternalClass\",\n        \"typedoc/src/other.ts:OtherInternal\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Callable Variable with @function Tag in TypeScript\nDESCRIPTION: This code demonstrates how to use the `@function` tag to document a callable variable as a function with overloads.  It also shows cases where TypeDoc automatically converts callable variables into functions and scenarios where it documents them as variables. The interface `MultiCallSignature` defines the structure of a callable variable with multiple call signatures.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/function.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MultiCallSignature {\n    (): string;\n    (x: string): string;\n}\n\n// Documented as if it was a function with two overloads\n/** @function */\nexport const Callable: MultiCallSignature = () => \"\";\n\n// Documented as Callable2: MultiCallSignature\nexport const Callable2: MultiCallSignature = () => \"\";\n\n// Documented as if it was a function\nexport const Callable3 = () => \"\";\n\n// Documented as a variable\nexport const Callable4 = Object.assign(function () {\n    return \"\";\n}, {\n    fnProp: \"\",\n});\n\n// Documented as if it was a function\n/** @function */\nexport const Callable5 = Object.assign(function () {\n    return \"\";\n}, {\n    fnProp: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using @privateRemarks in TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of the `@privateRemarks` tag to include private implementation details in the documentation of a TypeScript function. These remarks will typically be excluded from the generated API documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/privateRemarks.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Some docs here\n *\n * @privateRemarks\n * Implementation detail notes not useful to the API consumer\n */\nexport function rand(): number;\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @protected Tag Example (TypeScript)\nDESCRIPTION: This example demonstrates how the `@protected` tag is used to override the visibility of a class member to protected in TypeDoc's generated documentation. The `@protected` tag is placed in the JSDoc comment above the `member` property.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/protected.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @protected */\n    member = 123;\n}\n\n// Will be documented as:\nexport class Visibility {\n    protected member = 123;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Treat Warnings as Errors CLI Option\nDESCRIPTION: This snippet shows how to treat all warnings as errors using the command-line interface. When this flag is used, any reported warning will cause TypeDoc to stop documentation generation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --treatWarningsAsErrors\n```\n\n----------------------------------------\n\nTITLE: Ignored Highlight Languages Configuration\nDESCRIPTION: This JSON configuration specifies languages used in code blocks which should be silently ignored by TypeDoc.  This prevents errors for less common languages.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"ignoredHighlightLanguages\": [\"mkdocs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Link Creation for External Symbols in TypeDoc\nDESCRIPTION: This JSON configuration demonstrates how to prevent link creation for specific external symbols by mapping them to \"#\" in the `externalSymbolLinkMappings`. This marks the type as resolved but avoids generating a link. The use case is to prevent TypeDoc from creating a link for specific types.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"externalSymbolLinkMappings\": {\n        // used by {@link !Promise}\n        \"global\": {\n            \"Promise\": \"#\"\n        },\n        // used by type Foo = Promise<string>\n        \"typescript\": {\n            \"Promise\": \"#\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Intentionally Not Documented Configuration\nDESCRIPTION: This is how to ignore specific undocumented fields to prevent `validation.notDocumented` errors. Used in `typedoc.json` to selectively ignore fields. Use the qualified name.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"intentionallyNotDocumented\": [\"Namespace.Class.prop\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Router Using --router Option\nDESCRIPTION: This bash command demonstrates how to specify the router to be used for generating the HTML output using the `--router` option. The router determines how files are created and linked.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --router default\n```\n\n----------------------------------------\n\nTITLE: Setting Entry Point Strategy with CLI\nDESCRIPTION: Demonstrates setting the `entryPointStrategy` option via the command line in TypeDoc. The `entryPointStrategy` determines how TypeDoc handles the provided entry points, such as expanding directories or resolving specific files. This example shows setting it to \"expand\".\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --entryPointStrategy expand ./src\n```\n\n----------------------------------------\n\nTITLE: Define enum in declaration file with @enum tag - TypeScript\nDESCRIPTION: This example demonstrates how to declare an enum in a TypeScript declaration file using the @enum tag. This approach is useful when documenting existing JavaScript code or external libraries.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/enum.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * So does this, for declaration files\n */\nexport declare const MyEnum3: { A: \"a\" };\n```\n\n----------------------------------------\n\nTITLE: Specifying JSON Output Path Using --json Option\nDESCRIPTION: This bash command shows how to specify the output file for JSON reflection data using the `--json` command-line option. This is another shortcut that overwrites the 'outputs' config option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --json <path/to/out-file.json>\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Log Level\nDESCRIPTION: Sets the verbosity of log messages printed to the console. Available levels include Verbose, Info, Warn, Error, and None, each controlling the amount of detail shown in the output.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --logLevel Verbose\n```\n\n----------------------------------------\n\nTITLE: Namespace Conversion with @namespace in TypeScript\nDESCRIPTION: This code demonstrates how the `@namespace` tag can be used in TypeDoc to convert a variable into a namespace.  TypeDoc will document the properties of `d` as exported members within the `d` namespace. The code illustrates the input object and the resulting documented namespace.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/namespace.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 1;\nconst b = () => 2;\nconst c = { a, b, c: 3 };\n/** @namespace */\nexport const d = { ...c, d: 4 };\n\n// will be documented as if you wrote\n\nexport namespace d {\n    export const a = 1;\n    export const b = () => 2;\n    export const c = 3;\n    export const d = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Local Storage in TypeDoc\nDESCRIPTION: This JavaScript snippet enables TypeDoc's usage of local storage. This function relies on the `window.TypeDoc` object being available. Local storage is enabled by default, so this is primarily for re-enabling after disabling.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/local-storage.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.TypeDoc.enableLocalStorage();\n```\n\n----------------------------------------\n\nTITLE: Exclude Protected Members with CLI\nDESCRIPTION: Demonstrates how to remove protected class members from the generated documentation using the `--excludeProtected` option in the TypeDoc CLI. This filters the documentation to show only the public and potentially inherited members.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludeProtected\n```\n\n----------------------------------------\n\nTITLE: Documenting Generic Function with @template in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `@template` tag to document a type parameter `T` in a JavaScript function. The `@template` tag describes the type parameter, specifying that it must be a string. The identity function takes a parameter `x` of type `T` and returns it.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/template.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @template {string} T - the identity type\n */\nexport function identity<T>(x) {\n    return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Define enum with @enum tag - TypeScript\nDESCRIPTION: This example demonstrates how to use the @enum tag to convert a TypeScript object with string literal values into an enumeration in TypeDoc. The object is exported as a constant and uses the `as const` assertion to ensure the values are treated as literals.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/enum.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * This will be displayed as an enumeration.\n * @enum\n */\nexport const MyEnum = {\n    /**\n     * Doc comments may be included here.\n     */\n    A: \"a\",\n    B: \"b\",\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Disable Git Configuration\nDESCRIPTION: Added `--disableGit` option to prevent TypeDoc from using Git to determine if sources can be linked. This is useful in environments where Git is not available or desirable.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n`--disableGit` option to prevent TypeDoc from using Git\n```\n\n----------------------------------------\n\nTITLE: emit Option Values in TypeDoc\nDESCRIPTION: This table describes the behavior of different values for the `--emit` option in TypeDoc. It controls whether TypeDoc emits documentation, JavaScript, or both.  It also clarifies the deprecated aliases for backward compatibility.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| Value   | Behavior                                                                |\n| ------- | ----------------------------------------------------------------------- |\n| `both`  | Emit both documentation and JS.                                         |\n| `docs`  | Emit documentation, but not JS (default).                               |\n| `none`  | Emit nothing, just convert and run validation.                          |\n| `true`  | Alias for `both`, for backwards compatibility. Will be removed in 0.23. |\n| `false` | Alias for `docs`, for backwards compatibility. Will be removed in 0.23. |\n```\n\n----------------------------------------\n\nTITLE: Incorrect Module Documentation - TypeScript\nDESCRIPTION: This example illustrates a common mistake where a comment is placed after the import statement, causing it to be associated with the import rather than the file. To correct this, use the `@module` or `@packageDocumentation` tag before the import.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/module.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// file3.ts\n/**\n * This is *not* a doc comment for the file, it is a doc comment for the import.\n * Include the `@module` or `@packageDocumentation` tag to mark it as a file comment.\n */\nimport * as lib from \"lib\";\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Plugin Load Function\nDESCRIPTION: Defines the load function for a TypeDoc plugin, adding a custom option and a listener to the Converter.EVENT_RESOLVE event. This allows the plugin to modify TypeDoc's behavior during the conversion process based on the value of the custom option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Application, Context, Converter, ParameterType } from \"typedoc\";\n\nexport function load(app: Application) {\n    app.options.addDeclaration({\n        name: \"plugin-option\",\n        help: \"Displayed when --help is passed\",\n        type: ParameterType.String, // The default\n        defaultValue: \"\", // The default\n    });\n\n    app.converter.on(Converter.EVENT_RESOLVE, (context: Context) => {\n        if (app.options.getValue(\"plugin-option\") === \"something\") {\n            // ...\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Block\nDESCRIPTION: Illustrates a TypeScript code block within a Markdown document, demonstrating syntax highlighting in TypeDoc.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/src/documents/markdown.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// A fabulous variable\nconst x: number | string = 12\n```\n\n----------------------------------------\n\nTITLE: Marking a member as private with @private - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@private` tag to mark a class member as private in TypeDoc. The `member` property will be documented as `private` in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/private.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @private */\n    member = 123;\n}\n\n// Will be documented as:\nexport class Visibility {\n    private member = 123;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Alias Declaration and @useDeclaredType Example\nDESCRIPTION: This snippet demonstrates how to use the @useDeclaredType tag on a type alias. The `Data` type is documented using its declared type, which is derived from the return type of the `getData` function.  The `BarNum` example shows a case where @useDeclaredType may not work as expected.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/useDeclaredType.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getData() {\n    return [{ abc: 123 }];\n}\n\n/** @useDeclaredType */\nexport type Data = ReturnType<typeof getData>;\n\n// Data will be documented as if it was written like this:\nexport type DataManual = { abc: number }[];\n\n// This unfortunately DOES NOT work as expected\nexport type Bar = { a: string };\n/** @useDeclaredType */\nexport type BarNum = { [K in keyof Bar]: number };\n```\n\n----------------------------------------\n\nTITLE: Define enum with @enum tag and type annotation - TypeScript\nDESCRIPTION: This example demonstrates an alternative way to use the @enum tag by providing a type annotation for the object. This approach is more verbose but achieves the same result of converting the object into an enumeration in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/enum.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * This works too, but is more verbose\n * @enum\n */\nexport const MyEnum2: { A: \"a\" } = { A: \"a\" };\n```\n\n----------------------------------------\n\nTITLE: Documenting method author with @author tag in TypeDoc\nDESCRIPTION: This code snippet demonstrates how to use the @author tag to document the author of a method in TypeDoc. TypeDoc will render this tag as a simple paragraph within the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/author.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @author John Smith\n */\nexport function rand(min: number, max: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using @primaryExport in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the @primaryExport tag to ensure a namespace is the primary source of documentation, while maintaining a flattened export structure for compatibility.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/primaryExport.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * We want the primary documentation for models to be this namespace,\n * but also preserve the flattened export structure for backwards compatibility.\n * @primaryExport\n */\nexport * as Models from \"./models/index.js\";\nexport * from \"./models/index.js\";\n```\n\n----------------------------------------\n\nTITLE: Marking a Method as Experimental in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@experimental` tag to mark a method within a TypeScript class as experimental. This indicates that the method's API is not yet stable and may change in future versions. The `Visibility` class contains a method `newBehavior` which is tagged as `@experimental`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/experimental.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @experimental */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding the TypeDoc Generator Link with Bash\nDESCRIPTION: This snippet demonstrates how to prevent the TypeDoc link from being printed at the end of the page by using the `--hideGenerator` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_29\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --hideGenerator\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @include and @includeCode Example (TypeScript)\nDESCRIPTION: Demonstrates the usage of `@include` and `@includeCode` tags to include external markdown and code snippets into a function's documentation. The example showcases including a markdown file, a TypeScript quick start example, and a test file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * {@include ./doSomething_docs.md}\n *\n * Quick start:\n * {@includeCode ../examples/doSomethingQuickStart.ts}\n *\n * @example\n * This will only work if the jsdocCompatibility.exampleTag option is false\n * {@includeCode ../test/doSomething.test.ts}\n */\nfunction doSomething() {}\n```\n\n----------------------------------------\n\nTITLE: Declaring a virtual method in TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the `@virtual` tag in TypeScript. While TypeDoc parses the tag for TSDoc compatibility, it doesn't assign any specific meaning to it. This example illustrates its usage on a method intended to be overridden by child classes.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/virtual.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @virtual */\n    intendedForOverrideByChildren(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @alpha tag in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the @alpha tag to mark a method as being in an alpha state. The `newBehavior` method is marked as @alpha indicating it's intended for eventual public use but is not yet stable.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/alpha.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @alpha */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude Externals with CLI\nDESCRIPTION: Illustrates how to prevent externally resolved TypeScript files from being documented in TypeDoc using the `--excludeExternals` option in the CLI. This option helps to focus the documentation on the project's internal code.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludeExternals\n```\n\n----------------------------------------\n\nTITLE: Preserve Link Text Configuration\nDESCRIPTION: Added `--preserveLinkText` option (defaults to true) which determines whether the reflection name or full link text is included in the output when no override is specified. This allows control over the verbosity of links in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n`--preserveLinkText` option (defaults to true) which determines whether the reflection name or full link text is included\n```\n\n----------------------------------------\n\nTITLE: Hiding Members with @hidden in TypeScript\nDESCRIPTION: This example demonstrates how to use the `@hidden` tag to prevent a method from appearing in the generated documentation. The `newBehavior` method will be excluded from the output.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/hidden.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Visibility {\n    /** @hidden */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting with @remarks in TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of the @remarks tag to separate the summary documentation from the detailed documentation.  The @remarks block provides additional details, which themes might display differently from the initial summary.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/remarks.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Some docs here\n *\n * @remarks\n * Much longer documentation here\n */\nexport function rand(): number;\n```\n\n----------------------------------------\n\nTITLE: Define group order - JSON\nDESCRIPTION: This JSON configuration allows overriding the order in which groups are displayed. The `*` string indicates where groups not in the list should appear. Groups whose order is not specified will be sorted alphabetically. A group called `none` is reserved and displayed without a group heading before the list of groups.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"groupOrder\": [\"Variables\", \"Functions\", \"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Define External Patterns with CLI\nDESCRIPTION: Demonstrates how to define patterns for external files using the `--externalPattern` option in the TypeDoc CLI. This option allows specifying extra files that should be considered external and can be used with `--excludeExternals` to remove external modules from the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --externalPattern 'lib/**/*.ts' --externalPattern 'external/**/*.ts'\n```\n\n----------------------------------------\n\nTITLE: File documentation vs. declaration documentation in TypeScript\nDESCRIPTION: This snippet illustrates the difference between documenting a file using `@packageDocumentation` or `@module` and documenting a specific import declaration. Without the tag, the comment is associated with the following declaration, not the file itself.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/packageDocumentation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// file2.ts\n/**\n * This is *not* a doc comment for the file, it is a doc comment for the import.\n * Include the `@module` or `@packageDocumentation` tag to mark it as a file comment.\n */\nimport * as lib from \"lib\";\n```\n\n----------------------------------------\n\nTITLE: Component Path Delimiters in TypeDoc (TS)\nDESCRIPTION: This snippet illustrates the use of different delimiters (`.`, `#`, `~`) in component paths within declaration references. It demonstrates how these delimiters are used to navigate the project tree to resolve references to exports, members, and namespace/module exports. Note the discrepancy between TypeDoc and TSDoc's interpretation of `~`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/declaration-references.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// module.ts\n/**\n * {@link module!Foo}\n * {@link Foo}\n */\nexport namespace Foo {\n    /**\n     * {@link module!Foo.Bar}\n     * {@link module!Foo~Bar}\n     * {@link Foo~Bar}\n     */\n    export namespace Bar {\n        /**\n         * {@link module!Foo.Bar.Baz}\n         * {@link module!Foo~Bar~Baz}\n         * {@link Bar~Baz}\n         * {@link Baz}\n         */\n        export class Baz {\n            /**\n             * {@link Baz#prop}\n             */\n            prop = 123;\n            /**\n             * {@link Baz.prop}\n             */\n            static prop = 456;\n\n            /**\n             * {@link Baz#instanceOnly}\n             * {@link Baz.instanceOnly} also works as there is no conflicting static\n             */\n            instanceOnly = 789;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Region Definition Example\nDESCRIPTION: Shows the syntax for defining a region named 'simpleEnumRegion' within a TypeScript file using comments that are compatible with VS Code folding.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{@includeCode ../../example/src/enums.ts#simpleEnumRegion}\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Method with @ignore in TypeScript\nDESCRIPTION: This example demonstrates how to use the `@ignore` tag to exclude a method from the generated documentation.  The `newBehavior` method within the `Visibility` class will not be included in the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/ignore.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @ignore */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable grouping references by type - Bash\nDESCRIPTION: This command-line option enables the grouping of re-exports to members already included in the documentation under the type that the referenced member is grouped within. Without this option, TypeDoc groups these references in a `References` group.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --groupReferencesByType\n```\n\n----------------------------------------\n\nTITLE: Markdown-it Loader Function\nDESCRIPTION: This JavaScript code defines a function that configures plugins loaded by `markdown-it` using the `markdownItLoader` option. It will be called with an instance of the `MarkdownIt` class.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\n// typedoc.config.mjs\nexport default {\n    markdownItLoader(parser) {\n        parser.use(plugin1);\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Valid @typeParam usages for TSDoc compatibility\nDESCRIPTION: This code snippet illustrates various ways to use the @typeParam tag. TypeDoc does not enforce strict TSDoc requirements, accepting variations in syntax, including the presence or absence of types and hyphens between the parameter name and description. This offers improved compatibility with projects using TypeScript type annotations in JavaScript files.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/typeParam.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @typeParam test - description\n * @typeParam test description\n * @typeParam {string} test - description\n * @typeParam {string} test description\n */\n```\n\n----------------------------------------\n\nTITLE: Using TypeDoc Browser Bundle TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the TypeDoc browser bundle to process serialized JSON within a browser. It imports necessary modules from `typedoc/browser`, configures translations, deserializes a project from JSON, and accesses project elements. The code assumes the availability of a JSON file containing TypeDoc project data.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/overview.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n    ConsoleLogger,\n    Deserializer,\n    FileRegistry,\n    setTranslations,\n} from \"typedoc/browser\";\n\n// Similar paths are available for ja, ko, zh\nimport translations from \"typedoc/browser/en\";\n\n// Before doing anything with TypeDoc, it should be configured with translations\nsetTranslations(translations);\n\nconst projectJson = await fetch(\"...\").then(r => r.json());\n\nconst logger = new ConsoleLogger();\nconst deserializer = new Deserializer(logger);\nconst project = deserializer.reviveProject(\"API Docs\", projectJson, {\n    projectRoot: \"/\",\n    registry: new FileRegistry(),\n});\n\n// Now we can use TypeDoc's models to more easily analyze the json\nconsole.log(project.getChildByName(\"SomeClass.property\"));\nconsole.log(project.getChildByName(\"SomeClass.property\").type.toString());\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Usage with Multiple Entry Points\nDESCRIPTION: This command runs TypeDoc on multiple entry point files (package1/index.ts and package2/index.ts). Useful for documenting multiple modules or packages.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntypedoc package1/index.ts package2/index.ts\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Packages Requiring Documentation Configuration\nDESCRIPTION: This configures which packages TypeDoc expects to have documentation in the `typedoc.json` file. It defaults to the name from `package.json`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packagesRequiringDocumentation\": [\"typedoc\", \"typedoc-plugin-mdn-links\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Language Attribute\nDESCRIPTION: This bash command sets the `lang` attribute in TypeDoc's HTML output and the translations used when generating documentation using the `--lang` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_25\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --lang zh\n```\n\n----------------------------------------\n\nTITLE: Set Source Link Template with CLI\nDESCRIPTION: Illustrates how to specify a custom link template for source URLs using the `--sourceLinkTemplate` option in the TypeDoc CLI.  This allows linking to specific lines of code in a version control system.  The `--disableSources` option must not be set for this to take effect.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --sourceLinkTemplate 'https://vcs.example.com/{path}?at={gitRevision}#line={line}'\n```\n\n----------------------------------------\n\nTITLE: Set default category name - Bash\nDESCRIPTION: This option sets the name for the default category, used when only some elements of the page are categorized. The default category name is 'Other'.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --defaultCategory \"Category Name\"\n```\n\n----------------------------------------\n\nTITLE: Using @sealed Tag in TypeScript\nDESCRIPTION: This code snippet demonstrates the usage of the `@sealed` tag within a TypeScript class. The tag is applied to the `newBehavior` method. TypeDoc parses the `@sealed` tag for compatibility with TSDoc, but it does not attach any specific meaning to its use.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/sealed.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Visibility {\n    /** @sealed */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Exclude References with CLI\nDESCRIPTION: Demonstrates how to remove re-exports of a symbol already included in the documentation using the `--excludeReferences` option in the TypeDoc CLI. This helps to avoid duplicate entries and simplify the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --excludeReferences\n```\n\n----------------------------------------\n\nTITLE: Specifying Light Highlight Theme\nDESCRIPTION: This bash command shows how to specify the Shiki theme used for code highlighting in light mode using the `--lightHighlightTheme` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --lightHighlightTheme light-plus\n```\n\n----------------------------------------\n\nTITLE: Set Git Remote with CLI\nDESCRIPTION: Illustrates how to specify the Git remote to use when linking to source files using the `--gitRemote` option in the TypeDoc CLI. This is particularly useful for forked repositories. The `--disableSources` option must not be set for this to take effect.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --gitRemote <remote>\n```\n\n----------------------------------------\n\nTITLE: Preventing Inlining with @preventInline Tag - TSX\nDESCRIPTION: This example demonstrates how to use the `@preventInline` tag to prevent the inlining of the `HelloProps` type in the `Hello2` function, even when the `HelloProps` type is marked with the `@inline` tag. This allows for fine-grained control over which types are inlined.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/inline.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * @inline\n */\nexport type HelloProps = {\n    /** Name property docs */\n    name: string;\n};\n\n/**\n * Hello component - HelloProps will NOT be inlined here\n * @preventInline HelloProps\n */\nexport function Hello2(props: HelloProps) {\n    return <span>Hello {props.name}!</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Hosted Base URL with JSON\nDESCRIPTION: This snippet demonstrates how to specify the base URL which the TypeDoc generated site will be hosted at using the `hostedBaseUrl` option within the `typedoc.json` file. This is used to generate a sitemap, generate canonical `<link>` tags, and enable the [useHostedBaseUrlForAbsoluteLinks](#usehostedbaseurlforabsolutelinks) option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_43\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"hostedBaseUrl\": \"https://example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Property as an Event with @eventProperty in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@eventProperty` tag to mark a static property as an event. The `ON_REQUEST` property of the `App` class will be grouped under 'Events' in the documentation generated by TypeDoc.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/eventProperty.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class App extends EventEmitter {\n    /**\n     * @eventProperty\n     */\n    static ON_REQUEST = \"request\";\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling Overloaded Functions with @label in TypeScript\nDESCRIPTION: This code demonstrates how to use the `@label` tag to assign names to overloaded function signatures in TypeScript.  These labels can then be used in declaration references within JSDoc comments. It showcases two overloads of the `round` function, labeled `BASE` and `PRECISION` respectively.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/label.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * {@label BASE}\n */\nexport function round(x: number);\n/**\n * {@label PRECISION}\n */\nexport function round(x: number, y: number);\nexport function round(x: number, y = 0) {\n    // ...\n}\n\n/**\n * A value rounded with {@link round:PRECISION}\n */\nexport const rounded = round(123.456, 2);\n```\n\n----------------------------------------\n\nTITLE: Disable Writing to Local Storage in TypeDoc\nDESCRIPTION: This JavaScript snippet disables TypeDoc's writing to local storage, but it does not clear the existing contents. It allows you to prevent new data from being stored while retaining the existing data. This function relies on the `window.TypeDoc` object being available.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/local-storage.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.TypeDoc.disableWritingLocalStorage();\n```\n\n----------------------------------------\n\nTITLE: Marking a member as internal in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the @internal tag to mark a class member as internal, indicating that it should not be used by API consumers. The `--excludeInternal` option can be used to remove these members from the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/internal.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @internal */\n    member = 123;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable categorizing reflections by group - Bash\nDESCRIPTION: This command categorizes reflections by group (within properties, methods, etc.). Setting this flag to false allows methods and properties of the same category to be grouped together. The default value is false.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --categorizeByGroup\n```\n\n----------------------------------------\n\nTITLE: Declaration References with Module Source in TypeDoc (TS)\nDESCRIPTION: This code snippet demonstrates how to specify module sources in declaration references using the `!` syntax. It shows examples with and without quoted paths. This is used to reference declarations across multiple entry points.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/declaration-references.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * {@link moduleA!}\n * {@link \\\"with!bang and \\\\\\\"quoted path\\\\\\\"\\\"!}\n */\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Plugin Specification (Bash)\nDESCRIPTION: Specifies the command-line option to load plugins. It shows how to load a plugin by its name or by specifying a path to a custom plugin file.  By default, no plugins are loaded unless specified.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/configuration.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --plugin typedoc-plugin-markdown\ntypedoc --plugin ./custom-plugin.js\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Treat Validation Warnings as Errors CLI Option\nDESCRIPTION: This code shows how to treat only validation warnings as errors using the command line interface. This is a more targeted approach, and cannot disable the `treatWarningsAsErrors` if it's already on for validation warnings.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --treatValidationWarningsAsErrors\n```\n\n----------------------------------------\n\nTITLE: Validation Configuration Example\nDESCRIPTION: This JSON snippet showcases the usage of the new `validation` option within TypeDoc to disable checks for non-exported symbols. Setting `notExported` to true will suppress the related warnings.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"validation\": {\n        \"notExported\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Overloads with @overload Tag in JSDoc\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `@overload` tag in JSDoc comments to define function overloads. It shows multiple `@overload` tags defining different signatures for the `printValue` function, followed by the actual function implementation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/overload.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @overload\n * @param {string} value first signature\n * @return {void}\n */\n\n/**\n * @overload\n * @param {number} value second signature\n * @param {number} [maximumFractionDigits]\n * @return {void}\n */\n\n/**\n * @param {string | number} value\n * @param {number} [maximumFractionDigits]\n */\nfunction printValue(value, maximumFractionDigits) {}\n```\n\n----------------------------------------\n\nTITLE: Document Tag Example in TypeDoc\nDESCRIPTION: This code snippet shows how to use the `@document` tag in a TypeScript comment to include an external markdown file in the generated TypeDoc documentation. The path to the markdown file is relative to the TypeScript file containing the comment.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/src/documents/external-markdown.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @document documents/external-markdown.md\n */\n```\n\n----------------------------------------\n\nTITLE: Highlight Languages Configuration\nDESCRIPTION: This JSON configuration specifies the Shiki grammars to load for highlighting code blocks.  It lists the languages TypeDoc loads by default.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"highlightLanguages\": [\n        \"bash\",\n        \"console\",\n        \"css\",\n        \"html\",\n        \"javascript\",\n        \"json\",\n        \"jsonc\",\n        \"json5\",\n        \"tsx\",\n        \"typescript\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @import tag for type imports in JSDoc - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `@import` tag within a JSDoc comment to declare a type import in JavaScript. It shows how to specify the imported type and the module it comes from.  TypeDoc will ignore the comment containing the `@import` tag. The `@param` tag then uses the imported type.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/import.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @import { SomeType } from \"some-module\" */\n/**\n * @param {SomeType} myValue\n */\nfunction doSomething(myValue) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Merging modules into the root project with @mergeModuleWith in TypeScript\nDESCRIPTION: This example demonstrates how to use the `@mergeModuleWith` tag to merge the contents of two modules (`module-a.ts` and `module-b.ts`) directly into the root project's reflection. This effectively removes the modules `module-a` and `module-b` from the generated documentation and places their exported functions at the top level.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/mergeModuleWith.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// module-a.ts\n/**\n * @module\n * @mergeModuleWith <project>\n */\nexport function fn1() {}\n\n// module-b.ts\n/**\n * @module\n * @mergeModuleWith <project>\n */\nexport function fn2() {}\n```\n\n----------------------------------------\n\nTITLE: Source Link Template Configuration\nDESCRIPTION: The `gitRevision` variable is now correctly replaced in the `sourceLinkTemplate` option. This allows users to customize the links to source code in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n`gitRevision` will now be replaced in `sourceLinkTemplate`\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Integration\nDESCRIPTION: This bash command specifies an extra CSS file to be copied into the assets directory and referenced by the theme using the `--customCss` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --customCss ./theme/style.css\n```\n\n----------------------------------------\n\nTITLE: Favicon Specification\nDESCRIPTION: This bash command specifies a `.ico`, `.png` or `.svg` file to reference as the site favicon, using the `--favicon` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --favicon favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Hiding Constructor with @hideconstructor in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `@hideconstructor` tag to hide the constructor of a class from the generated TypeDoc documentation. It is placed in the JSDoc comment block preceding the class definition. This prevents the constructor from appearing in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/hideconstructor.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** @hideconstructor */\nexport class Visibility {\n    /** Will not be present in the generated documentation */\n    constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Git Usage with CLI\nDESCRIPTION: Demonstrates how to prevent TypeDoc from using Git to determine if sources can be linked using the `--disableGit` option in the TypeDoc CLI. This forces source linking, even if the project is not a Git repository.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --disableGit\n```\n\n----------------------------------------\n\nTITLE: Disabling Grouping with @disableGroups - TypeScript\nDESCRIPTION: This snippet shows how to disable the default grouping mechanism in TypeDoc using the `@disableGroups` tag for modules where grouping by type is not desired. This tag is applied at the module level.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/group.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is a very small module where separating members into groups by type\n * doesn't make sense.\n * @module\n * @disableGroups\n */\n\nexport const variable = 123;\n\nexport function fn() {}\n```\n\n----------------------------------------\n\nTITLE: Using @class tag to define a class-like function in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the @class tag to instruct TypeDoc to treat a function as a class. The function `ClassLike` is annotated with the @class tag, causing TypeDoc to handle it as a class and expand dynamic properties.  The `if (new.target)` block indicates it might be used as a constructor.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/class.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** @class */\nexport function ClassLike() {\n    if (new.target) {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc CLI Validation Option\nDESCRIPTION: This code snippet shows how to enable or disable validation using the command line interface. The `--validation.invalidLink` flag enables specific validation checks, while `--validation` enables all validation checks.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/validation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --validation.invalidLink\n$ typedoc --validation\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Expand Entry Point Strategy\nDESCRIPTION: This command generates documentation for all TypeScript files under the \"src\" directory using the `Expand` entry point strategy. This is useful for applications without a single entry point.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx typedoc --entryPointStrategy Expand src\n```\n\n----------------------------------------\n\nTITLE: Disable Sources with CLI\nDESCRIPTION: Demonstrates how to disable capturing where reflections are declared using the `--disableSources` option in the TypeDoc CLI.  This prevents TypeDoc from generating links to the source code.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --disableSources\n```\n\n----------------------------------------\n\nTITLE: Setting Comment Style via CLI in TypeDoc\nDESCRIPTION: This command demonstrates how to set the comment style using the `--commentStyle` option in the TypeDoc CLI. The value `block` specifies that TypeDoc should use all block comments when parsing documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --commentStyle block\n```\n\n----------------------------------------\n\nTITLE: Include Version with CLI\nDESCRIPTION: Illustrates how to include the version from `package.json` in the generated documentation using the `--includeVersion` option in the TypeDoc CLI.  By default, the version is not included.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --includeVersion\n```\n\n----------------------------------------\n\nTITLE: Disabling GitHub Pages Integration with Bash\nDESCRIPTION: This snippet shows how to disable the automatic addition of a `.nojekyll` file to the output directory using the `--githubPages false` option. This prevents GitHub Pages from processing the documentation site with Jekyll, which can be necessary when using scoped packages with filenames starting with `_`.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_27\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --githubPages false\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Multiple @includeCode Regions (Markdown)\nDESCRIPTION: Demonstrates how to include multiple regions from a TypeScript file using the `@includeCode` tag, separated by commas.  The regions will be combined into a single code block.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n{@includeCode file.ts#region1,region2}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Installation\nDESCRIPTION: This command installs TypeDoc as a development dependency in your project using npm. It allows you to use TypeDoc to generate documentation for your TypeScript project.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typedoc\n```\n\n----------------------------------------\n\nTITLE: Source Link as External Links\nDESCRIPTION: This bash command specifies to treat source links as external links that open in a new tab when generating HTML, using the `--sourceLinkExternal` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_23\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --sourceLinkExternal\n```\n\n----------------------------------------\n\nTITLE: Override Tag Example in TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the @override tag within a TypeScript class.  The tag is placed in the JSDoc comment for the `newBehavior` method, indicating that it is intended to override a method from a parent class.  TypeDoc parses this tag for TSDoc compatibility but doesn't apply any specific meaning to it.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/override.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Visibility {\n    /** @override */\n    newBehavior(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @includeCode with Result (Markdown)\nDESCRIPTION: Demonstrates the expected result of using the `@includeCode` tag to include the 'simpleEnum' region from a TypeScript file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n{@includeCode ../../example/src/enums.ts#simpleEnum}\n```\n\n----------------------------------------\n\nTITLE: Disable sorting at the top level - Bash\nDESCRIPTION: This command-line option disables sorting the members of all pages at the top level. By default, TypeDoc sorts members according to the `sort` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/organization.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --sortEntryPoints false\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @includeCode Result with Line Numbers (Markdown)\nDESCRIPTION: Demonstrates the expected result of using the `@includeCode` tag with line numbers to include specific lines from a file.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/include.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n{@includeCode ../../package.json:2,6-7}\n```\n\n----------------------------------------\n\nTITLE: TSDoc and JSDoc Compatibility with @param in TypeScript\nDESCRIPTION: Demonstrates TypeDoc's flexibility in handling the @param tag, showing compatibility with both TSDoc and JSDoc conventions. It illustrates that TypeDoc accepts variations in syntax, including optional type annotations and the presence or absence of a hyphen between the parameter name and description.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/param.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @param test - description\n * @param test description\n * @param {string} test - description\n * @param {string} test description\n */\n```\n\n----------------------------------------\n\nTITLE: Setting the Title Link with Bash\nDESCRIPTION: This snippet demonstrates how to set the link that the title in the header points to using the `--titleLink` option. It takes a URL as its value.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_33\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --titleLink \"http://example.com\"\n```\n\n----------------------------------------\n\nTITLE: TypeDoc Version\nDESCRIPTION: Displays the currently installed version of TypeDoc.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/other.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --version\n```\n\n----------------------------------------\n\nTITLE: Executing a Function in Typescript\nDESCRIPTION: This snippet demonstrates the execution of a function named 'test' within a TypeScript environment. The function's definition is not provided in the document. It directly calls the function which implies it needs to be in the scope where this statement is executed.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/src/test/converter2/renderer/doc.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest();\n```\n\n----------------------------------------\n\nTITLE: Custom Footer HTML Without Wrapper\nDESCRIPTION: This bash command specifies custom HTML for the footer and disables the default wrapping of this HTML in a `<p>` element, using the `--customFooterHtml` and `--customFooterHtmlDisableWrapper` options.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --customFooterHtml \"<p>Copyright <strong>Project</strong> 2024</p>\" --customFooterHtmlDisableWrapper\n```\n\n----------------------------------------\n\nTITLE: Disable Local Storage in TypeDoc\nDESCRIPTION: This JavaScript snippet disables TypeDoc's usage of local storage. It clears the contents of the local storage to comply with functional cookie requirements. This function relies on the `window.TypeDoc` object being available.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/development/local-storage.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.TypeDoc.disableLocalStorage();\n```\n\n----------------------------------------\n\nTITLE: Specifying Dark Highlight Theme\nDESCRIPTION: This bash command shows how to specify the Shiki theme used for code highlighting in dark mode using the `--darkHighlightTheme` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --darkHighlightTheme dark-plus\n```\n\n----------------------------------------\n\nTITLE: Hiding Hierarchy Summary with Bash\nDESCRIPTION: This snippet demonstrates how to disable the generation of the `hierarchy.html` page in the output, using the `--includeHierarchySummary false` command line argument.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_46\n\nLANGUAGE: Bash\nCODE:\n```\ntypedoc --includeHierarchySummary false\n```\n\n----------------------------------------\n\nTITLE: Pretty Formatting JSON Output\nDESCRIPTION: This bash command shows how to enable pretty-formatting for the JSON output using the `--pretty` option.  If unspecified, TypeDoc defaults to pretty formatting.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --json out.json --pretty\n```\n\n----------------------------------------\n\nTITLE: Custom Footer HTML\nDESCRIPTION: This bash command specifies additional custom HTML to be injected into the page footer using the `--customFooterHtml` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --customFooterHtml \"Copyright <strong>Project</strong> 2024\"\n```\n\n----------------------------------------\n\nTITLE: Entry Point Sorting Configuration\nDESCRIPTION: Added the `sortEntryPoints` option (defaults to true) to allow disabling entry point sorting. This provides control over the ordering of entry points in the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n`sortEntryPoints` option (defaults to true) to allow disabling entry point sorting\n```\n\n----------------------------------------\n\nTITLE: CNAME File Creation\nDESCRIPTION: This bash command creates a CNAME file in the output directory with the specified text, using the `--cname` option.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/output.md#_snippet_21\n\nLANGUAGE: Bash\nCODE:\n```\n$ typedoc --cname typedoc.org\n```\n\n----------------------------------------\n\nTITLE: Navigation Leaves Configuration\nDESCRIPTION: Added the `navigationLeaves` option to remove branches from the navigation tree. This allows for simpler navigation structures in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n`navigationLeaves` option to remove branches from the navigation tree\n```\n\n----------------------------------------\n\nTITLE: Disabling TypeScript Link Resolution in TypeDoc via CLI\nDESCRIPTION: This command shows how to disable TypeScript's parsing rules for `{@link}` tags by setting the `--useTsLinkResolution` option to `false` in the TypeDoc CLI. When disabled, TypeDoc will not use TypeScript's parsing rules for resolving links.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --useTsLinkResolution false\n```\n\n----------------------------------------\n\nTITLE: Documenting a method with @since tag in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the @since tag in a TypeScript doc comment to indicate the version in which the `rand` function was introduced.  TypeDoc renders this tag as a simple paragraph in the generated documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/since.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @since Introduced in v1.2.3\n */\nexport function rand(min: number, max: number): number;\n```\n\n----------------------------------------\n\nTITLE: Documenting a Function with TypeDoc in TypeScript\nDESCRIPTION: This snippet demonstrates how to document a function in TypeScript using JSDoc-style comments. It includes a description, parameter documentation with `@param`, and return value documentation with `@returns`. The function calculates the square root of a number.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Calculates the square root of a number.\n *\n * @param x the number to calculate the root of.\n * @returns the square root if `x` is non-negative or `NaN` if `x` is negative.\n */\nexport function sqrt(x: number): number {\n    return Math.sqrt(x);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeDoc @preventExpand Tag Example\nDESCRIPTION: This example demonstrates the `@preventExpand` tag. This tag prevents TypeDoc from expanding a type that would normally be expanded due to the `@expand` tag. In this case, `HelloProps` will not be expanded in `Hello2` because of the `@preventExpand HelloProps` tag.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/expand.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @expand\n */\nexport type HelloProps = {\n    /** Name property docs */\n    name: string;\n};\n\n/**\n * Hello component - HelloProps will NOT be expanded here\n * @preventExpand HelloProps\n */\nexport function Hello2(props: HelloProps) {\n    return <span>Hello {props.name}!</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling JSDoc Compatibility in TypeDoc via CLI\nDESCRIPTION: These commands illustrate how to disable JSDoc compatibility, either entirely or for specific tags, using the `--jsDocCompatibility` option in the TypeDoc CLI. Setting it to `false` disables all JSDoc compatibility features, while setting `jsDocCompatibility.defaultTag` to `false` only disables the behavior for `@default` tags.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/comments.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ typedoc --jsDocCompatibility false\n$ typedoc --jsDocCompatibility.defaultTag false\n```\n\n----------------------------------------\n\nTITLE: Set Max Type Conversion Depth with CLI\nDESCRIPTION: Demonstrates how to set the maximum depth to recurse when converting types using the `--maxTypeConversionDepth` option in the TypeDoc CLI. This option controls the complexity of type representations in the documentation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/options/input.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntypedoc --maxTypeConversionDepth 2\n```\n\n----------------------------------------\n\nTITLE: Markdown Alert Block\nDESCRIPTION: Shows how to create alert blocks in Markdown for notes, tips, important information, warnings, and cautions, recognized and styled by TypeDoc.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/example/src/documents/markdown.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n> [!NOTE]\n> Useful information that users should know, even when skimming content.\n```\n\n----------------------------------------\n\nTITLE: Excluding Code with @license Tag JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `@license` tag to exclude a code block from being documented by TypeDoc. The `@license` tag marks the comment as a license declaration, causing TypeDoc to ignore it during documentation generation.\nSOURCE: https://github.com/typestrong/typedoc/blob/master/site/tags/license.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @license Apache-2.0 */\nexport const api = {...} // not documented\n```"
  }
]