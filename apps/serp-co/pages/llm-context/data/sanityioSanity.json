[
  {
    "owner": "sanity-io",
    "repo": "sanity",
    "content": "TITLE: Initializing Sanity Project with Package Managers in Bash\nDESCRIPTION: Commands to create a new Sanity project using different package managers. Demonstrates how to initialize a new Sanity project using npm, yarn, or pnpm.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create sanity@latest\n\n# With other package managers:\nyarn create sanity@latest\npnpm create sanity@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing a Sanity Project with Package Managers\nDESCRIPTION: This snippet shows how to create a new Sanity project using npm, yarn, or pnpm package managers. It creates a new Sanity workspace that serves as the foundation for content management in your application.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create sanity@latest\n\n# With other package managers:\nyarn create sanity@latest\npnpm create sanity@latest\n```\n\n----------------------------------------\n\nTITLE: Setting up Sanity development environment\nDESCRIPTION: Commands to clone the Sanity repository, install dependencies, build the project, and start the development server. Requires Node.js version 18+ and pnpm package manager.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:sanity-io/sanity.git\ncd sanity\npnpm install\npnpm build\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Sanity Router in JavaScript\nDESCRIPTION: Demonstrates how to create a router instance, define routes, and use encode/decode methods for path manipulation. It shows various route configurations and their corresponding encoded/decoded values.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/router/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {route} from 'sanity/router'\n\nconst router = route.create('/', [\n  route.create('/products/:productId'),\n  route.create('/users/:userId'),\n  route('/:page'),\n])\n\nrouter.encode({})\n// => '/'\nrouter.decode('/')\n// => {}\n\nrouter.encode({productId: 54})\n// => '/products/54'\n\nrouter.decode('/products/54')\n// => {productId: 54}\n\nrouter.encode({userId: 22})\n// => '/users/22'\n\nrouter.decode('/users/54')\n// => {userId: 54}\n\nrouter.encode({page: 'about'})\n// => '/about'\n\nrouter.decode('/about')\n// => {page: about}\n```\n\n----------------------------------------\n\nTITLE: Defining a Person Schema Object in JavaScript\nDESCRIPTION: A basic example of a schema object that defines a 'person' type with 'firstName' and 'address' fields. The address is defined as a nested object field with its own subfields.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/schema/README.md#2025-04-12_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst PERSON = {\n  type: 'object',\n  name: 'person',\n  fields: [\n    {name: 'firstName', type: 'string'},\n    {\n      name: 'address',\n      type: 'object',\n      fields: [\n        {\n          name: 'street',\n          type: 'string',\n        },\n      ],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using defineQuery for TypeScript type inference with GROQ\nDESCRIPTION: Example showing how to use the defineQuery function from GROQ in TypeScript to get automatic type inference for queries while retrieving the first 10 products.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/groq/README.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineQuery} from 'groq'\n\nconst query = defineQuery(`*[_type == 'products'][0...10]`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Schema for Sanity Studio\nDESCRIPTION: This code defines the schema configuration for a page document type in Sanity Studio. It includes fields for title, slug, and an array of sections that can be arranged using the custom PageInput component.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/dev/page-building-studio/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// page.js schema\nexport default {\n  name: 'page',\n  title: 'Page',\n  type: 'document',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n      validation: Rule => Rule.required()\n    },\n    {\n      name: 'slug',\n      title: 'Slug',\n      type: 'slug',\n      options: {\n        source: 'title'\n      },\n      validation: Rule => Rule.required()\n    },\n    {\n      name: 'sections',\n      title: 'Page Sections',\n      type: 'array',\n      of: [{ type: 'section' }],\n      inputComponent: PageInput\n    }\n  ],\n  preview: {\n    select: {\n      title: 'title'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of Vision Tool in Sanity Studio\nDESCRIPTION: Shows how to configure the Vision tool in a Sanity Studio setup by adding it to the plugins array in the configuration file. Demonstrates optional parameters like defaultApiVersion and defaultDataset.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/vision/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `sanity.config.ts` / `sanity.config.js`:\nimport {defineConfig} from 'sanity'\nimport {visionTool} from '@sanity/vision'\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    visionTool({\n      // Note: These are both optional\n      defaultApiVersion: 'v2021-10-21',\n      defaultDataset: 'some-dataset',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sanity Router with React\nDESCRIPTION: Illustrates how to integrate Sanity Router with React, including setting up routes, creating a RouterProvider, and handling navigation. It demonstrates the use of withRouter HOC and StateLink component.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/router/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {route} from 'sanity/router'\nimport {RouterProvider, withRouter} from 'sanity/router'\n\nconst router = route('/', [route('/bikes/:bikeId')])\n\nconst history = createHistory()\n\nfunction handleNavigate(nextUrl, {replace} = {}) {\n  if (replace) {\n    history.replace(nextUrl)\n  } else {\n    history.push(nextUrl)\n  }\n}\n\nconst App = withRouter(function App({router}) {\n  if (router.state.bikeId) {\n    return <BikePage id={router.state.bikeId} />\n  }\n  return (\n    <div>\n      <h1>Welcome</h1>\n      <StateLink state={{bikeId: 22}}>Go to bike 22</StateLink>\n    </div>\n  )\n})\n\nfunction render(location) {\n  ReactDOM.render(\n    <RouterProvider\n      router={router}\n      onNavigate={handleNavigate}\n      state={router.decode(location.pathname)}\n    >\n      <App />\n    </RouterProvider>,\n    document.getElementById('container'),\n  )\n}\nhistory.listen(() => render(document.location))\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Component with Drag and Drop in React\nDESCRIPTION: This snippet demonstrates a React component for page building with drag and drop functionality. It uses the react-beautiful-dnd library to manage the drag and drop interface for arranging page sections.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/dev/page-building-studio/README.md#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// PageInput.jsx\nimport React from 'react'\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\nimport { FormBuilderInput, withDocument } from '@sanity/form-builder'\n\nconst PageInput = React.forwardRef((props, ref) => {\n  const { type, value, onChange, focusPath, markers, level, readOnly } = props\n\n  const handleDragEnd = (result) => {\n    // Implement drag end logic\n    if (!result.destination) return\n    \n    const items = Array.from(value || [])\n    const [removed] = items.splice(result.source.index, 1)\n    items.splice(result.destination.index, 0, removed)\n    \n    onChange(items)\n  }\n\n  return (\n    <div>\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Droppable droppableId=\"page-sections\">\n          {(provided) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {value && value.map((item, index) => (\n                <Draggable key={item._key} draggableId={item._key} index={index}>\n                  {(provided) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <FormBuilderInput\n                        level={level + 1}\n                        type={type.of[0]}\n                        value={item}\n                        onChange={(patchEvent) => {\n                          // Apply patches to the specific item\n                        }}\n                        path={[{_key: item._key}]}\n                        focusPath={focusPath}\n                        readOnly={readOnly}\n                        markers={markers}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n      \n      <button onClick={() => {\n        // Add new section logic\n      }}>\n        Add section\n      </button>\n    </div>\n  )\n})\n\nexport default withDocument(PageInput)\n```\n\n----------------------------------------\n\nTITLE: Recommended Composition Approach for Schema Reuse\nDESCRIPTION: A better approach using composition where common fields are defined separately and then reused across different schema types. This demonstrates the preferred pattern for schema design in Sanity.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/schema/README.md#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst FIRST_NAME_FIELD = {name: 'firstName', type: 'string'}\nconst ADDRESS_FIELD = {\n  name: 'address',\n  type: 'object',\n  fields: [\n    {\n      name: 'zip',\n      type: 'string',\n    },\n    {\n      name: 'street',\n      type: 'string',\n    },\n    {\n      name: 'city',\n      type: 'string',\n    },\n  ],\n}\n\nconst PERSON = {\n  type: 'object',\n  name: 'person',\n  fields: [FIRST_NAME_FIELD, ADDRESS_FIELD],\n}\n\nconst USER = {\n  type: 'object',\n  name: 'person',\n  fields: [FIRST_NAME_FIELD, {name: 'username', type: 'string'}, ADDRESS_FIELD],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Section Schema for Page Builder in Sanity\nDESCRIPTION: This code defines the schema for a section component that can be used within the page builder. It includes a type field with predefined options and conditional fields that appear based on the selected section type.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/dev/page-building-studio/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// section.js schema\nexport default {\n  name: 'section',\n  title: 'Section',\n  type: 'object',\n  fields: [\n    {\n      name: 'type',\n      title: 'Section Type',\n      type: 'string',\n      options: {\n        list: [\n          { title: 'Hero', value: 'hero' },\n          { title: 'Text with Image', value: 'textWithImage' },\n          { title: 'Feature Grid', value: 'featureGrid' },\n          { title: 'Call to Action', value: 'cta' }\n        ]\n      }\n    },\n    {\n      name: 'heading',\n      title: 'Heading',\n      type: 'string',\n      hidden: ({ parent }) => !parent?.type || !['hero', 'cta'].includes(parent.type)\n    },\n    {\n      name: 'text',\n      title: 'Text',\n      type: 'array',\n      of: [{ type: 'block' }],\n      hidden: ({ parent }) => !parent?.type\n    },\n    {\n      name: 'image',\n      title: 'Image',\n      type: 'image',\n      hidden: ({ parent }) => !parent?.type || !['hero', 'textWithImage'].includes(parent.type),\n      options: {\n        hotspot: true\n      }\n    },\n    // Additional fields based on section type\n  ],\n  preview: {\n    select: {\n      title: 'type',\n      heading: 'heading',\n      media: 'image'\n    },\n    prepare({ title, heading, media }) {\n      return {\n        title: heading || (title ? `${title.charAt(0).toUpperCase() + title.slice(1)} Section` : 'Section'),\n        media\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Format in Sanity Studio Config\nDESCRIPTION: Example showing how to customize the date format for scheduled publishing using date-fns format tokens. Sets the input date time format to 'MM/dd/yyyy h:mm a'.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/core/scheduledPublishing/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndefineConfig({\n  ...yourConfig,\n  scheduledPublishing: {\n    enabled: true,\n    // E.g. 12/25/2000 6:30 AM, make sure to specify minutes and hours if you are specifying a custom format.\n    inputDateTimeFormat: 'MM/dd/yyyy h:mm a',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Transforming Path Parameters in Sanity Router\nDESCRIPTION: Shows how to use custom transforms to encode and decode path parameters, allowing for more complex routing scenarios. This example demonstrates encoding multiple parameters into a single path segment.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/router/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction decodeParams(pathsegment) {\n  return pathsegment.split(';').reduce((params, pair) => {\n    const [key, value] = pair.split('=')\n    params[key] = value\n    return params\n  }, {})\n}\nfunction encodeParams(params) {\n  return Object.keys(params)\n    .map((key) => `${key}=${params[key]}`)\n    .join(';')\n}\n\nconst router = route(\n  '/some/:section/:settings',\n  {\n    transform: {\n      settings: {\n        toState: decodeParams,\n        toPath: encodeParams,\n      },\n    },\n  },\n  route('/other/:page'),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule Document Action in Sanity Studio\nDESCRIPTION: Implementation example for customizing document actions to show the Schedule button only for movie documents. Demonstrates how to filter document actions based on schema type.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/core/scheduledPublishing/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {scheduledPublishing, ScheduleAction} from '@sanity/scheduled-publishing'\n\nexport default defineConfig({\n  // ...\n  plugins: [scheduledPublishing()],\n  document: {\n    actions: (previousActions, {schemaType}) => {\n      /*\n       * Please note that this will only alter the visibility of the button in the studio.\n       * Users with document publish permissions will be able to create schedules directly\n       * via the Scheduled Publishing API.\n       */\n      if (schemaType.name !== 'movie') {\n        // Remove the schedule action from any documents that is not 'movie'.\n        return previousActions.filter((action) => action !== ScheduleAction)\n      }\n      return previousActions\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using GROQ tagged template literal in JavaScript\nDESCRIPTION: Example of importing and using the GROQ tagged template literal to create a query that retrieves the first 10 products from a Sanity dataset.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/groq/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport groq from 'groq'\n\nconst query = groq`*[_type == 'products'][0...10]`\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule Document Badge in Sanity Studio\nDESCRIPTION: Example showing how to customize document badges to display the Scheduled badge only for movie documents. Shows filtering of document badges based on schema type.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/core/scheduledPublishing/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {scheduledPublishing, ScheduledBadge} from '@sanity/scheduled-publishing'\n\nexport default defineConfig({\n  // ...\n  plugins: [scheduledPublishing()],\n  document: {\n    actions: (previousBadges, {schemaType}) => {\n      if (schemaType.name !== 'movie') {\n        // Remove the schedule badge from any documents that is not 'movie'.\n        return previousBadges.filter((badge) => badge !== ScheduledBadge)\n      }\n      return previousBadges\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Scopes in Sanity Router\nDESCRIPTION: Demonstrates how to use scopes in Sanity Router to create separate routing spaces for different parts of an application. This example shows a dynamic scope creation based on an app name.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/router/README.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {route} from './src'\nfunction findAppByName(name) {\n  return (\n    name === 'pokemon' && {\n      name: 'pokemon',\n      router: route('/:section', route('/:pokemonName')),\n    }\n  )\n}\n\nconst router = route('/', [\n  route('/users/:username'),\n  route('/apps/:appName', (params) => {\n    const app = findAppByName(params.appName)\n    return app && route.scope(app.name, '/', app.router)\n  }),\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Structure Builder for Page Building in Sanity Studio\nDESCRIPTION: This snippet shows how to set up a Structure Builder configuration that creates a dedicated section for page building in Sanity Studio, allowing for a customized editing experience.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/dev/page-building-studio/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// deskStructure.js\nimport S from '@sanity/desk-tool/structure-builder'\n\nexport default () =>\n  S.list()\n    .title('Content')\n    .items([\n      // Regular document types\n      ...S.documentTypeListItems().filter(\n        (item) => !['page'].includes(item.getId())\n      ),\n      // Pages with custom structure\n      S.listItem()\n        .title('Pages')\n        .child(\n          S.documentList()\n            .title('Pages')\n            .menuItems(S.documentTypeList('page').getMenuItems())\n            .filter('_type == \"page\"')\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation in DateTimeInput with Time Zone Awareness\nDESCRIPTION: Example showing how to use the customValidation and customValidationMessage options in DateTimeInput to prevent scheduling on weekends. The component handles dates in UTC while formatting and parsing in the current time zone.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/core/scheduledPublishing/components/dateInputs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// E.g. No scheduling on weekends!\nconst {utcToCurrentZoneDate} = useTimeZone()\n\nconst handleCustomValidation = (selectedDate: Date): boolean => {\n  return !isWeekend(utcToCurrentZoneDate(selectedDate))\n}\n\nreturn (\n  <DateTimeInput\n    type={{\n      name: 'date',\n      options: {\n        customValidation: handleCustomValidation,\n        customValidationmessage: 'No schedules on weekends please',\n      },\n      title: 'Date and time',\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Development-Only Configuration of Vision Tool\nDESCRIPTION: Demonstrates how to make the Vision tool available only in development environments by using the isDev flag from the sanity package to conditionally include the plugin.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/vision/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// `sanity.config.ts` / `sanity.config.js`:\nimport {defineConfig, isDev} from 'sanity'\nimport {visionTool} from '@sanity/vision'\n\nconst devOnlyPlugins = [visionTool()]\n\nexport default defineConfig({\n  // ...\n  plugins: [\n    // ... your other plugins here ...\n    ...(isDev ? devOnlyPlugins : []),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Administrator-Only Configuration of Vision Tool\nDESCRIPTION: Shows how to restrict the Vision tool to administrators by using the Tool API to filter tools based on the user's role. The tool is only available to users with the 'administrator' role.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/vision/README.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// `sanity.config.ts` / `sanity.config.js`:\nimport {defineConfig} from 'sanity'\nimport {visionTool} from '@sanity/vision'\n\nexport default defineConfig({\n  // ... name, title, projectId, dataset, etc.\n  plugins: [\n    // ... your other plugins here ...\n    visionTool(),\n  ],\n  tools: (prev, {currentUser}) => {\n    const isAdmin = currentUser?.roles.some((role) => role.name === 'administrator')\n\n    // If the user has the administrator role, return all tools.\n    // If the user does not have the administrator role, filter out the vision tool.\n    return isAdmin ? prev : prev.filter((tool) => tool.name !== 'vision')\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Placeholder String Field in Sanity Schema\nDESCRIPTION: Demonstrates how to define a placeholder string field in a Sanity schema. This field uses the value of another field as a placeholder.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify/docs/features.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndefineField({\n  name: 'title',\n  type: 'placeholderString',\n  options: { field: 'store.title' }\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining Proxy String Field in Sanity Schema\nDESCRIPTION: Shows how to define a proxy string field in a Sanity schema. This field displays the value of another field as a read-only input, useful for surfacing deeply nested fields to editors.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify/docs/features.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndefineField({\n  title: 'Slug',\n  name: 'slugProxy',\n  type: 'proxyString',\n  options: {field: 'store.slug.current'},\n})\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Adding a New eFPS Test\nDESCRIPTION: Shows the recommended folder and file structure for adding a new test to the eFPS benchmark suite. Each test requires a separate configuration, type definitions, and test implementation file.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/perf/efps/README.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntests/\n  newtest/\n    assets/\n    sanity.config.ts\n    sanity.types.ts\n    newtest.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanity Studio with Shopify Template\nDESCRIPTION: Command to initialize a new Sanity Studio project using the shopify-online-storefront template. This is a one-off initialization script that sets up the Studio with Shopify-specific configurations.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify-online-storefront/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# run a one-off initializing script:\nnpx @sanity/cli init --template shopify-online-storefront\n```\n\n----------------------------------------\n\nTITLE: Initializing Sanity Studio with Shopify Template\nDESCRIPTION: Command to initialize a new Sanity Studio project using the Shopify template. Uses the @sanity/cli package to create a new studio instance.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx @sanity/cli init --template shopify\n```\n\n----------------------------------------\n\nTITLE: Building and testing Sanity\nDESCRIPTION: Commands to build the repository and run tests. Building is required before testing since some tests depend on compiled files.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Problematic Inheritance Approach for Schema Definition\nDESCRIPTION: An example showing a problematic approach that attempts to use inheritance by defining a 'user' as a subtype of 'person'. This illustrates the design pattern that Sanity discourages due to merging and override complexities.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/schema/README.md#2025-04-12_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst USER = {\n  // modelling user as a subtype of person\n  name: 'user',\n  type: 'person',\n  fields: [\n    {\n      name: 'username',\n      type: 'string',\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Sanity Studio Development Server\nDESCRIPTION: Command to start the local development server for Sanity Studio. This allows developers to work on and test the Studio locally before deployment.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify-online-storefront/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Sanity Studio Development Server\nDESCRIPTION: Command to start the local development server for Sanity Studio.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Sanity Studio\nDESCRIPTION: Command to deploy the Sanity Studio to a hosted environment. This makes the Studio available online for content editors to use.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify-online-storefront/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Sanity Studio\nDESCRIPTION: Command to deploy the Sanity Studio to production.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sanity Studio\nDESCRIPTION: Command to upgrade the Sanity Studio to the latest version. This ensures the Studio has the latest features and security updates.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify-online-storefront/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run upgrade\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sanity Studio\nDESCRIPTION: Command to upgrade the Sanity Studio installation to the latest version.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shopify/README.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing @sanity/mutator via npm\nDESCRIPTION: Command to install the @sanity/mutator package as a dependency in a JavaScript project using npm.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/mutator/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @sanity/mutator\n```\n\n----------------------------------------\n\nTITLE: Installing the GROQ package with npm\nDESCRIPTION: Command to install the GROQ package from npm registry as a project dependency.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/groq/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save groq\n```\n\n----------------------------------------\n\nTITLE: Starting Sanity Blog Studio from Project Root\nDESCRIPTION: Command to initialize and run the Sanity blog studio using the predefined schema from the blog init template. This should be executed from the project's root directory.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/examples/blog-studio/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run blog-studio\n```\n\n----------------------------------------\n\nTITLE: Starting Movies Studio in Sanity Project\nDESCRIPTION: Command to start the movies studio from the project root directory. This runs the preconfigured script that initializes the Sanity content studio with the moviedb template schema.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/examples/movies-studio/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run movies-studio\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Group Events API Endpoint in Sanity\nDESCRIPTION: This snippet shows the endpoint for accessing DocumentGroupEvent entries derived from the translog. It allows retrieval of events for specific document IDs within a dataset.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/sanity/src/core/store/events/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/data/history/<datasetName>/events/documents/<documentsIds>\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests with PNPM\nDESCRIPTION: Command to execute performance tests locally against the perf studio to compare with the current next build.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/perf/readme.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm perf:test\n```\n\n----------------------------------------\n\nTITLE: Running All E2E Tests for Sanity Studio\nDESCRIPTION: Command to execute all end-to-end tests for the Sanity Studio project from the root directory.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/test/e2e/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests in Specific Directory for Sanity Studio\nDESCRIPTION: Command to run all tests in a specific directory relative to 'test/e2e/tests' in the Sanity Studio project.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/test/e2e/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:e2e tests/default-layout\n```\n\n----------------------------------------\n\nTITLE: Running Specific E2E Tests for Sanity Studio\nDESCRIPTION: Command to run files with specific names in their titles for the Sanity Studio E2E tests.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/test/e2e/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:e2e my-spec my-spec-2\n```\n\n----------------------------------------\n\nTITLE: Displaying E2E Test Help for Sanity Studio\nDESCRIPTION: Command to show help information for running E2E tests in the Sanity Studio project.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/test/e2e/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:e2e --help\n```\n\n----------------------------------------\n\nTITLE: Performance Test Template Structure\nDESCRIPTION: Basic template for creating new performance test files in the perf/tests/tests directory. Shows required structure with name and run function returning performance summary.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/perf/readme.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  name: 'Simple typing speed test',\n  run: (context: PerformanceTestContext) => Promise<PerformanceSummary> {\n    // Do stuff here\n    return {result: 9.2}\n  }\n} satisfies PerformanceTestProps\n```\n\n----------------------------------------\n\nTITLE: Performance Test Anti-Pattern Example\nDESCRIPTION: Example showing incorrect way to measure performance across different execution contexts using Playwright.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/perf/readme.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst start = performance.now()\nawait input.evaluate((el: HTMLInputElement) => {\n  // do something\n})\nconst end = performance.now()\nconst duration = end - start\n```\n\n----------------------------------------\n\nTITLE: Performance Test Best Practice Example\nDESCRIPTION: Correct implementation of performance measurement within Playwright's evaluation context.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/perf/readme.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst duration = await input.evaluate((element: HTMLInputElement) => {\n  const start = performance.now()\n  // do something with the element\n  const end = performance.now()\n  return end - start\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignores for Sanity Studio Project\nDESCRIPTION: Defines patterns for files and directories that should not be tracked by Git, including node dependencies, build artifacts, logs, coverage reports, system files, and local configuration files.\nSOURCE: https://github.com/sanity-io/sanity/blob/main/packages/@sanity/cli/templates/shared/gitignore.txt#2025-04-12_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# Dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# Compiled Sanity Studio\n/dist\n\n# Temporary Sanity runtime, generated by the CLI on every dev server start\n/.sanity\n\n# Logs\n/logs\n*.log\n\n# Coverage directory used by testing tools\n/coverage\n\n# Misc\n.DS_Store\n*.pem\n\n# Typescript\n*.tsbuildinfo\n\n# Dotenv and similar local-only files\n*.local\n```"
  }
]