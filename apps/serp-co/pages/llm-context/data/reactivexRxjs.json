[
  {
    "owner": "reactivex",
    "repo": "rxjs",
    "content": "TITLE: Creating Basic Observable in TypeScript\nDESCRIPTION: Creates an Observable that synchronously emits values 1-3 and asynchronously emits value 4 after 1 second\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable((subscriber) => {\n  subscriber.next(1);\n  subscriber.next(2);\n  subscriber.next(3);\n  setTimeout(() => {\n    subscriber.next(4);\n    subscriber.complete();\n  }, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Observable in TypeScript\nDESCRIPTION: Demonstrates how to subscribe to an Observable using the subscribe method. This basic example logs the received values to the console.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nobservable.subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing an Observable in TypeScript\nDESCRIPTION: Illustrates how to create an Observable that emits three values and then completes. This example demonstrates the basic structure of an Observable execution.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable(function subscribe(subscriber) {\n  subscriber.next(1);\n  subscriber.next(2);\n  subscriber.next(3);\n  subscriber.complete();\n});\n```\n\n----------------------------------------\n\nTITLE: Observable Multiple Value Emission\nDESCRIPTION: Shows how Observables can emit multiple values over time, both synchronously and asynchronously\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst foo = new Observable((subscriber) => {\n  console.log('Hello');\n  subscriber.next(42);\n  subscriber.next(100); // \"return\" another value\n  subscriber.next(200); // \"return\" yet another\n});\n\nconsole.log('before');\nfoo.subscribe((x) => {\n  console.log(x);\n});\nconsole.log('after');\n```\n\n----------------------------------------\n\nTITLE: Flattening a Higher-order Observable using concatMap in RxJS TypeScript\nDESCRIPTION: This example shows how to flatten a higher-order Observable using the concatMap operator. It subscribes to each inner Observable sequentially, concatenating their emissions into a single output Observable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/higher-order-observables.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileObservable = urlObservable.pipe(\n   concatMap(url => http.get(url)),\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Unsubscribing from an Observable in TypeScript\nDESCRIPTION: Shows how to subscribe to an Observable and store the returned Subscription object. The Subscription can be used later to unsubscribe and cancel the ongoing execution.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { from } from 'rxjs';\n\nconst observable = from([10, 20, 30]);\nconst subscription = observable.subscribe((x) => console.log(x));\n// Later:\nsubscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Creating Complete RxJS Observer\nDESCRIPTION: Demonstrates creation of a complete Observer object with all three callback types: next for handling values, error for handling errors, and complete for handling completion notifications.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observer.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst observer = {\n  next: x => console.log('Observer got a next value: ' + x),\n  error: err => console.error('Observer got an error: ' + err),\n  complete: () => console.log('Observer got a complete notification'),\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Higher-order Observable in RxJS TypeScript\nDESCRIPTION: This snippet demonstrates how to create a higher-order Observable by mapping URLs to HTTP GET requests. Each URL emitted by urlObservable is transformed into an Observable of the HTTP response.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/higher-order-observables.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileObservable = urlObservable.pipe(\n   map(url => http.get(url)),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Unsubscribing from an Observable in RxJS\nDESCRIPTION: This example demonstrates how to create a subscription to an interval Observable and how to unsubscribe from it to cancel the ongoing execution. The subscription object provides the unsubscribe() method to release resources.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subscription.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval } from 'rxjs';\n\nconst observable = interval(1000);\nconst subscription = observable.subscribe(x => console.log(x));\n// Later:\n// This cancels the ongoing Observable execution which\n// was started by calling subscribe with an Observer.\nsubscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Delay Operator from Scratch in RxJS\nDESCRIPTION: Implementation of a custom delay operator using Observable constructor. This example shows how to create an operator that cannot be composed from existing operators, including proper handling of subscription, cleanup, and error propagation.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable, of } from 'rxjs';\n\nfunction delay<T>(delayInMillis: number) {\n  return (observable: Observable<T>) =>\n    new Observable<T>((subscriber) => {\n      const allTimerIDs = new Set();\n      let hasCompleted = false;\n      const subscription = observable.subscribe({\n        next(value) {\n          const timerID = setTimeout(() => {\n            subscriber.next(value);\n            allTimerIDs.delete(timerID);\n            if (hasCompleted && allTimerIDs.size === 0) {\n              subscriber.complete();\n            }\n          }, delayInMillis);\n\n          allTimerIDs.add(timerID);\n        },\n        error(err) {\n          subscriber.error(err);\n        },\n        complete() {\n          hasCompleted = true;\n          if (allTimerIDs.size === 0) {\n            subscriber.complete();\n          }\n        },\n      });\n\n      return () => {\n        subscription.unsubscribe();\n        for (const timerID of allTimerIDs) {\n          clearTimeout(timerID);\n        }\n      };\n    });\n}\n\nof(1, 2, 3).pipe(delay(1000)).subscribe(console.log);\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable with Custom Unsubscribe Logic\nDESCRIPTION: Illustrates how to create an Observable that sets up an interval and provides a custom unsubscribe function to clear the interval when the execution is cancelled.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable(function subscribe(subscriber) {\n  // Keep track of the interval resource\n  const intervalId = setInterval(() => {\n    subscriber.next('hi');\n  }, 1000);\n\n  // Provide a way of canceling and disposing the interval resource\n  return function unsubscribe() {\n    clearInterval(intervalId);\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: BehaviorSubject Usage with Initial Value\nDESCRIPTION: Shows how BehaviorSubject maintains and emits the current value to new subscribers, initialized with a default value.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BehaviorSubject } from 'rxjs';\nconst subject = new BehaviorSubject(0);\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\n\nsubject.next(1);\nsubject.next(2);\n\nsubject.subscribe({\n  next: (v) => console.log(`observerB: ${v}`),\n});\n\nsubject.next(3);\n```\n\n----------------------------------------\n\nTITLE: TestScheduler Run Helpers API Example in TypeScript\nDESCRIPTION: Shows the complete list of helper functions available in the TestScheduler.run() callback. These helpers are used for creating test observables and making assertions.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntestScheduler.run((helpers) => {\n  const { cold, hot, expectObservable, expectSubscriptions, flush, time, animate } = helpers;\n  // use them\n});\n```\n\n----------------------------------------\n\nTITLE: Basic RxJS TestScheduler Usage with Marble Diagrams in TypeScript\nDESCRIPTION: Demonstrates setting up TestScheduler and using it to test a throttleTime operator with marble diagrams. Shows how to create cold observables and assert expected behavior.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestScheduler } from 'rxjs/testing';\nimport { throttleTime } from 'rxjs';\n\nconst testScheduler = new TestScheduler((actual, expected) => {\n  expect(actual).deep.equal(expected);\n});\n\nit('generates the stream correctly', () => {\n  testScheduler.run((helpers) => {\n    const { cold, time, expectObservable, expectSubscriptions } = helpers;\n    const e1 = cold(' -a--b--c---|');\n    const e1subs = '  ^----------!';\n    const t = time('   ---|       '); // t = 3\n    const expected = '-a-----c---|';\n\n    expectObservable(e1.pipe(throttleTime(t))).toBe(expected);\n    expectSubscriptions(e1.subscriptions).toBe(e1subs);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified JavaScript Version of Observable Subscription\nDESCRIPTION: Presents a basic JavaScript implementation of the Observable subscription concept, demonstrating the core ideas without RxJS types. It shows how to create a subscribe function and an unsubscribe mechanism.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction subscribe(subscriber) {\n  const intervalId = setInterval(() => {\n    subscriber.next('hi');\n  }, 1000);\n\n  return function unsubscribe() {\n    clearInterval(intervalId);\n  };\n}\n\nconst unsubscribe = subscribe({ next: (x) => console.log(x) });\n\n// Later:\nunsubscribe(); // dispose the resources\n```\n\n----------------------------------------\n\nTITLE: Using map Operator in RxJS with TypeScript\nDESCRIPTION: Demonstrates how to use the map operator to transform values in an Observable stream, similar to Array.map(). The example squares each number in the sequence.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of, map } from 'rxjs';\n\nof(1, 2, 3)\n  .pipe(map((x) => x * x))\n  .subscribe((v) => console.log(`value: ${v}`));\n\n// Logs:\n// value: 1\n// value: 4\n// value: 9\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Observable Execution\nDESCRIPTION: Demonstrates how to properly handle errors in an Observable execution by wrapping the code in a try/catch block and emitting an Error notification if an exception is caught.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable(function subscribe(subscriber) {\n  try {\n    subscriber.next(1);\n    subscriber.next(2);\n    subscriber.next(3);\n    subscriber.complete();\n  } catch (err) {\n    subscriber.error(err); // delivers an error if it caught one\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pipe Operator in RxJS\nDESCRIPTION: Example of creating a custom operator using pipe() function that filters out odd numbers and doubles even numbers. This demonstrates how to combine existing operators to create new functionality.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pipe, filter, map } from 'rxjs';\n\nfunction discardOddDoubleEven() {\n  return pipe(\n    filter((v) => !(v % 2)),\n    map((v) => v + v)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using ReplaySubject in TypeScript\nDESCRIPTION: Demonstrates how to create a ReplaySubject that buffers 3 values for new subscribers. It shows how values are replayed to new subscribers and how all subscribers receive new values.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReplaySubject } from 'rxjs';\nconst subject = new ReplaySubject(3); // buffer 3 values for new subscribers\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\n\nsubject.next(1);\nsubject.next(2);\nsubject.next(3);\nsubject.next(4);\n\nsubject.subscribe({\n  next: (v) => console.log(`observerB: ${v}`),\n});\n\nsubject.next(5);\n\n// Logs:\n// observerA: 1\n// observerA: 2\n// observerA: 3\n// observerA: 4\n// observerB: 2\n// observerB: 3\n// observerB: 4\n// observerA: 5\n// observerB: 5\n```\n\n----------------------------------------\n\nTITLE: Piping Multiple Operators in RxJS with TypeScript\nDESCRIPTION: Demonstrates the recommended syntax for combining multiple operators using the pipe method.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nobs.pipe(op1(), op2(), op3(), op4());\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Observable with Error Handling\nDESCRIPTION: Demonstrates how to subscribe to an Observable with next, error and complete handlers\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable((subscriber) => {\n  subscriber.next(1);\n  subscriber.next(2);\n  subscriber.next(3);\n  setTimeout(() => {\n    subscriber.next(4);\n    subscriber.complete();\n  }, 1000);\n});\n\nconsole.log('just before subscribe');\nobservable.subscribe({\n  next(x) {\n    console.log('got value ' + x);\n  },\n  error(err) {\n    console.error('something wrong occurred: ' + err);\n  },\n  complete() {\n    console.log('done');\n  },\n});\nconsole.log('just after subscribe');\n```\n\n----------------------------------------\n\nTITLE: Basic Subject Usage in TypeScript with RxJS\nDESCRIPTION: Demonstrates basic usage of RxJS Subject with multiple observers receiving multicasted values. Shows how a Subject acts as both an Observable and an Observer.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Subject } from 'rxjs';\n\nconst subject = new Subject<number>();\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\nsubject.subscribe({\n  next: (v) => console.log(`observerB: ${v}`),\n});\n\nsubject.next(1);\nsubject.next(2);\n```\n\n----------------------------------------\n\nTITLE: Creating Observable with interval Operator in RxJS\nDESCRIPTION: Shows how to create an Observable that emits values at specified time intervals using the interval creation operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval } from 'rxjs';\n\nconst observable = interval(1000 /* number of milliseconds */);\n```\n\n----------------------------------------\n\nTITLE: ReplaySubject with Window Time in TypeScript\nDESCRIPTION: Shows how to create a ReplaySubject with a large buffer size and a window time parameter. This example demonstrates how the subject emits values at regular intervals and how a delayed subscriber receives only recent values.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ReplaySubject } from 'rxjs';\nconst subject = new ReplaySubject(100, 500 /* windowTime */);\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\n\nlet i = 1;\nsetInterval(() => subject.next(i++), 200);\n\nsetTimeout(() => {\n  subject.subscribe({\n    next: (v) => console.log(`observerB: ${v}`),\n  });\n}, 1000);\n\n// Logs\n// observerA: 1\n// observerA: 2\n// observerA: 3\n// observerA: 4\n// observerA: 5\n// observerB: 3\n// observerB: 4\n// observerB: 5\n// observerA: 6\n// observerB: 6\n// ...\n```\n\n----------------------------------------\n\nTITLE: Multicasted Observable with Manual Connection\nDESCRIPTION: Demonstrates using the multicast operator with manual connection management using connect() method.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { from, Subject, multicast } from 'rxjs';\n\nconst source = from([1, 2, 3]);\nconst subject = new Subject();\nconst multicasted = source.pipe(multicast(subject));\n\nmulticasted.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\nmulticasted.subscribe({\n  next: (v) => console.log(`observerB: ${v}`),\n});\n\nmulticasted.connect();\n```\n\n----------------------------------------\n\nTITLE: Higher-order Observable Example with HTTP Requests\nDESCRIPTION: Demonstrates creating and handling higher-order Observables using map and concatAll operators for HTTP requests.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileObservable = urlObservable.pipe(map((url) => http.get(url)));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileObservable = urlObservable.pipe(\n  map((url) => http.get(url)),\n  concatAll()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Interval Observable\nDESCRIPTION: Creates an Observable that emits 'hi' every second to subscribers\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable(function subscribe(subscriber) {\n  const id = setInterval(() => {\n    subscriber.next('hi');\n  }, 1000);\n});\n```\n\n----------------------------------------\n\nTITLE: Using AsyncSubject in JavaScript\nDESCRIPTION: Demonstrates the usage of AsyncSubject, which only emits the last value to its observers when the execution completes. This example shows how multiple values are emitted, but only the last one is received by subscribers upon completion.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AsyncSubject } from 'rxjs';\nconst subject = new AsyncSubject();\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\n\nsubject.next(1);\nsubject.next(2);\nsubject.next(3);\nsubject.next(4);\n\nsubject.subscribe({\n  next: (v) => console.log(`observerB: ${v}`),\n});\n\nsubject.next(5);\nsubject.complete();\n\n// Logs:\n// observerA: 5\n// observerB: 5\n```\n\n----------------------------------------\n\nTITLE: Using first Operator in RxJS with TypeScript\nDESCRIPTION: Shows how to use the first operator to extract only the first value from an Observable sequence.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/operators.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of, first } from 'rxjs';\n\nof(1, 2, 3)\n  .pipe(first())\n  .subscribe((v) => console.log(`value: ${v}`));\n\n// Logs:\n// value: 1\n```\n\n----------------------------------------\n\nTITLE: Subject as Observer with Observable Subscription\nDESCRIPTION: Shows how a Subject can be used as an Observer by subscribing it to an Observable, effectively converting unicast to multicast behavior.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Subject, from } from 'rxjs';\n\nconst subject = new Subject<number>();\n\nsubject.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\nsubject.subscribe({\n  next: (v) => console.log(`observerB: ${v}`),\n});\n\nconst observable = from([1, 2, 3]);\n\nobservable.subscribe(subject);\n```\n\n----------------------------------------\n\nTITLE: Function vs Observable Comparison\nDESCRIPTION: Compares traditional function calls with Observable subscription behavior\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  console.log('Hello');\n  return 42;\n}\n\nconst x = foo.call(); // same as foo()\nconsole.log(x);\nconst y = foo.call(); // same as foo()\nconsole.log(y);\n```\n\n----------------------------------------\n\nTITLE: Event Flow Control Implementation - TypeScript\nDESCRIPTION: Shows how to implement click rate limiting using traditional JavaScript versus RxJS's throttleTime operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = 0;\nlet rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener('click', () => {\n  if (Date.now() - lastClick >= rate) {\n    console.log(`Clicked ${++count} times`);\n    lastClick = Date.now();\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromEvent, throttleTime, scan } from 'rxjs';\n\nfromEvent(document, 'click')\n  .pipe(\n    throttleTime(1000),\n    scan((count) => count + 1, 0)\n  )\n  .subscribe((count) => console.log(`Clicked ${count} times`));\n```\n\n----------------------------------------\n\nTITLE: State Management with Pure Functions - TypeScript\nDESCRIPTION: Compares impure state management using vanilla JavaScript with RxJS's pure functional approach using scan operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = 0;\ndocument.addEventListener('click', () => console.log(`Clicked ${++count} times`));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromEvent, scan } from 'rxjs';\n\nfromEvent(document, 'click')\n  .pipe(scan((count) => count + 1, 0))\n  .subscribe((count) => console.log(`Clicked ${count} times`));\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Subscriptions with add() in RxJS\nDESCRIPTION: This snippet demonstrates how to manage multiple subscriptions by adding one subscription as a child of another. When the parent subscription is unsubscribed, all child subscriptions are automatically unsubscribed as well.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subscription.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval } from 'rxjs';\n\nconst observable1 = interval(400);\nconst observable2 = interval(300);\n\nconst subscription = observable1.subscribe(x => console.log('first: ' + x));\nconst childSubscription = observable2.subscribe(x => console.log('second: ' + x));\n\nsubscription.add(childSubscription);\n\nsetTimeout(() => {\n  // Unsubscribes BOTH subscription and childSubscription\n  subscription.unsubscribe();\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Void Subject in TypeScript\nDESCRIPTION: Illustrates the concept of a void subject, which is used when the emitted value is irrelevant and only the event itself matters. This example shows how to create and use a void subject to signal that one second has passed.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Subject } from 'rxjs';\n\nconst subject = new Subject(); // Shorthand for Subject<void>\n\nsubject.subscribe({\n  next: () => console.log('One second has passed'),\n});\n\nsetTimeout(() => subject.next(), 1000);\n```\n\n----------------------------------------\n\nTITLE: Manual Unsubscription Testing in RxJS\nDESCRIPTION: Demonstrates how to test manual unsubscription from an infinite observable stream using marble syntax.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nit('should repeat forever', () => {\n  const testScheduler = createScheduler();\n\n  testScheduler.run(({ expectObservable }) => {\n    const foreverStream$ = interval(1).pipe(mapTo('a'));\n\n    // Omitting this arg may crash the test suite.\n    const unsub = '------!';\n\n    expectObservable(foreverStream$, unsub).toBe('-aaaaa');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Output of asyncScheduler example in RxJS\nDESCRIPTION: This shows the console output of the asyncScheduler example, demonstrating how the notifications are delivered after the subscription process has completed due to the asyncScheduler's behavior.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/scheduler.md#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\njust before subscribe\njust after subscribe\ngot value 1\ngot value 2\ngot value 3\ndone\n```\n\n----------------------------------------\n\nTITLE: Using observeOn with asyncScheduler in RxJS\nDESCRIPTION: This example demonstrates how to use the observeOn operator with asyncScheduler to control when notifications are delivered to the Observer. The Observable emits values synchronously, but the Observer receives them asynchronously after the execution context has completed.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/scheduler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable, observeOn, asyncScheduler } from 'rxjs';\n\nconst observable = new Observable((observer) => {\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.complete();\n}).pipe(\n  observeOn(asyncScheduler)\n);\n\nconsole.log('just before subscribe');\nobservable.subscribe({\n  next(x) {\n    console.log('got value ' + x);\n  },\n  error(err) {\n    console.error('something wrong occurred: ' + err);\n  },\n  complete() {\n    console.log('done');\n  },\n});\nconsole.log('just after subscribe');\n```\n\n----------------------------------------\n\nTITLE: Converting Observable to Promise using lastValueFrom in TypeScript\nDESCRIPTION: Demonstrates how to use lastValueFrom to convert an Observable to a Promise that resolves with the last emitted value. The example uses interval and take operators to create a finite sequence of numbers.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/to-promise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval, take, lastValueFrom } from 'rxjs';\n\nasync function execute() {\n  const source$ = interval(2000).pipe(take(10));\n  const finalNumber = await lastValueFrom(source$);\n  console.log(`The final number is ${finalNumber}`);\n}\n\nexecute();\n\n// Expected output:\n// \"The final number is 9\"\n```\n\n----------------------------------------\n\nTITLE: Time Progression Example in RxJS Marble Testing\nDESCRIPTION: Demonstrates using time progression syntax with concatMap and delay operators. Shows how to test delayed emissions using marble diagrams.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = ' -a-b-c|';\nconst expected = '-- 9ms a 9ms b 9ms (c|)';\n\n// Depending on your personal preferences you could also\n// use frame dashes to keep vertical alignment with the input.\n// const input = ' -a-b-c|';\n// const expected = '------- 4ms a 9ms b 9ms (c|)';\n// or\n// const expected = '-----------a 9ms b 9ms (c|)';\n\nconst result = cold(input).pipe(\n  concatMap((d) => of(d).pipe(\n    delay(10)\n  ))\n);\n\nexpectObservable(result).toBe(expected);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Guard Usage in Find Operator\nDESCRIPTION: Example showing how find() operator can take a type guard as predicate function for improved type inference\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nObservable<T>.find() // Can take type guard as predicate function\n```\n\n----------------------------------------\n\nTITLE: toPromise Implementation as Observable Method\nDESCRIPTION: Addition of toPromise as a permanent method on Observable class, allowing conversion of Observable sequences to Promises.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nObservable.prototype.toPromise = function() { return toPromise(this); }\n```\n\n----------------------------------------\n\nTITLE: Converting Observable to Promise using firstValueFrom in TypeScript\nDESCRIPTION: Shows how to use firstValueFrom to convert an Observable to a Promise that resolves with the first emitted value. The example creates an infinite sequence using interval operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/to-promise.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval, firstValueFrom } from 'rxjs';\n\nasync function execute() {\n  const source$ = interval(2000);\n  const firstNumber = await firstValueFrom(source$);\n  console.log(`The first number is ${firstNumber}`);\n}\n\nexecute();\n\n// Expected output:\n// \"The first number is 0\"\n```\n\n----------------------------------------\n\nTITLE: Replacing publish and refCount with share in RxJS\nDESCRIPTION: Shows how to refactor from using publish with refCount to using the share operator for automatic connection management.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publish, refCount } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publish(),\n  refCount()\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, share } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  share({\n    resetOnError: false,\n    resetOnComplete: false,\n    resetOnRefCountZero: false\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Using Map Instead of Result Selector in mergeMap\nDESCRIPTION: Example showing how to migrate from using a result selector with mergeMap to using map operator instead after breaking change.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nsource.mergeMap(x => of(x + x).pipe(map(y => y + x)))\n```\n\n----------------------------------------\n\nTITLE: Migrating publishReplay to connectable with ReplaySubject\nDESCRIPTION: Shows how to replace the deprecated publishReplay operator with connectable and ReplaySubject for creating a ConnectableObservable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishReplay, ConnectableObservable } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishReplay(1)\n) as ConnectableObservable<number>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, ReplaySubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new ReplaySubject<number>(1),\n  resetOnDisconnect: false\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Subscribers in RxJS Hot Observables\nDESCRIPTION: Shows how to test multiple subscribers to a hot observable that subscribe at different times using marble syntax.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntestScheduler.run(({ hot, expectObservable }) => {\n  const source = hot('--a--a--a--a--a--a--a--');\n  const sub1 = '      --^-----------!';\n  const sub2 = '      ---------^--------!';\n  const expect1 = '   --a--a--a--a--';\n  const expect2 = '   -----------a--a--a-';\n\n  expectObservable(source, sub1).toBe(expect1);\n  expectObservable(source, sub2).toBe(expect2);\n});\n```\n\n----------------------------------------\n\nTITLE: Using defaultValue with firstValueFrom in TypeScript\nDESCRIPTION: Demonstrates how to provide a default value when converting an empty Observable to a Promise using firstValueFrom, preventing EmptyError rejections.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/to-promise.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { firstValueFrom, EMPTY } from 'rxjs';\n\nconst result = await firstValueFrom(EMPTY, { defaultValue: 0 });\nconsole.log(result);\n\n// Expected output:\n// 0\n```\n\n----------------------------------------\n\nTITLE: Refactoring multicast with selector to connect in RxJS\nDESCRIPTION: Shows how to replace multicast operator with a selector using the connect operator for creating a connectable observable with a selector function.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, multicast, Subject, combineLatest } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  multicast(\n    () => new Subject(),\n    (source) => combineLatest([source, source])\n  )\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, connect, combineLatest, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  connect((source) => combineLatest([source, source]), {\n    connector: () => new Subject()\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Observable AsyncIterator Implementation\nDESCRIPTION: Implementation of Symbol.asyncIterator for Observable class, allowing for async iteration of Observable values.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nObservable.prototype[Symbol.asyncIterator] = function() { /* implementation */ }\n```\n\n----------------------------------------\n\nTITLE: Complex Multicasting with Timing Control\nDESCRIPTION: Shows advanced multicasting with manual subscription timing control and cleanup using setTimeout.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval, Subject, multicast } from 'rxjs';\n\nconst source = interval(500);\nconst subject = new Subject();\nconst multicasted = source.pipe(multicast(subject));\nlet subscription1, subscription2, subscriptionConnect;\n\nsubscription1 = multicasted.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\nsubscriptionConnect = multicasted.connect();\n\nsetTimeout(() => {\n  subscription2 = multicasted.subscribe({\n    next: (v) => console.log(`observerB: ${v}`),\n  });\n}, 600);\n\nsetTimeout(() => {\n  subscription1.unsubscribe();\n}, 1200);\n\nsetTimeout(() => {\n  subscription2.unsubscribe();\n  subscriptionConnect.unsubscribe();\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Replacing multicast and refCount with share in RxJS\nDESCRIPTION: Demonstrates how to refactor from using multicast with refCount to using the share operator for automatic connection management.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, multicast, Subject, refCount } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  multicast(() => new Subject()),\n  refCount()\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, share, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  share({ connector: () => new Subject() })\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Named Parameters in RxJS Operators (JavaScript)\nDESCRIPTION: This snippet illustrates the use of named parameters in RxJS operators when there are multiple arguments. It shows the preferred approach for improving readability in complex operations.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/core-semantics.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfakeFlattenMap(n => of(n), { maxConcurrent: 1 })\n```\n\n----------------------------------------\n\nTITLE: Using combineLatest with Array in RxJS\nDESCRIPTION: combineLatest now requires an array of ObservableInputs instead of spread arguments.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncombineLatest([a$, b$, c$])\n```\n\n----------------------------------------\n\nTITLE: Refactoring ResultSelector Parameter with RxJS map Operator\nDESCRIPTION: Demonstrates how to refactor code that uses the deprecated resultSelector parameter in RxJS operators. Shows both the deprecated approach using resultSelector and the recommended approach using the map operator with inner Observable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/resultSelector.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromEvent, switchMap, interval, map } from 'rxjs';\n\n// deprecated\nfromEvent(document, 'click').pipe(\n  switchMap((x) => interval(1000), (_, x) => x + 1)\n);\n// suggested change\nfromEvent(document, 'click').pipe(\n  switchMap((x) => interval(1000).pipe(map((x) => x + 1)))\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing publishBehavior and refCount with share and BehaviorSubject in RxJS\nDESCRIPTION: Demonstrates how to refactor from using publishBehavior with refCount to using the share operator with a BehaviorSubject connector for automatic connection management.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishBehavior, refCount } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishBehavior(0),\n  refCount()\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, share, BehaviorSubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  share({\n    connector: () => new BehaviorSubject(0),\n    resetOnError: false,\n    resetOnComplete: false,\n    resetOnRefCountZero: false\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Operator Function Signature in RxJS (TypeScript)\nDESCRIPTION: This code snippet defines the signature of an operator function in RxJS. It demonstrates that operators must return a function that takes a source Observable and returns a new Observable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/core-semantics.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(source: Observable<In>) => Observable<Out>\n```\n\n----------------------------------------\n\nTITLE: RxJS switchMap Pattern Update Example\nDESCRIPTION: Demonstrates the new pattern for using switchMap after removal of result selector functionality.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nsource.pipe(switchMap(x => of(x + x).pipe(y => x + y)))\n```\n\n----------------------------------------\n\nTITLE: ThrowError with Function Error\nDESCRIPTION: Demonstrates the new way to emit a function as an error using throwError operator with a factory function.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/breaking-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthrowError(() => () => console.log('called later'))\n```\n\n----------------------------------------\n\nTITLE: Value Transformation with Events - TypeScript\nDESCRIPTION: Demonstrates value transformation of click events by tracking cumulative x-coordinates using vanilla JavaScript versus RxJS operators.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = 0;\nconst rate = 1000;\nlet lastClick = Date.now() - rate;\ndocument.addEventListener('click', (event) => {\n  if (Date.now() - lastClick >= rate) {\n    count += event.clientX;\n    console.log(count);\n    lastClick = Date.now();\n  }\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromEvent, throttleTime, map, scan } from 'rxjs';\n\nfromEvent(document, 'click')\n  .pipe(\n    throttleTime(1000),\n    map((event) => event.clientX),\n    scan((count, clientX) => count + clientX, 0)\n  )\n  .subscribe((count) => console.log(count));\n```\n\n----------------------------------------\n\nTITLE: Replacing publishLast and refCount with share and AsyncSubject in RxJS\nDESCRIPTION: Demonstrates how to refactor from using publishLast with refCount to using the share operator with an AsyncSubject connector for automatic connection management.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishLast, refCount } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishLast(),\n  refCount()\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, share, AsyncSubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  share({\n    connector: () => new AsyncSubject(),\n    resetOnError: false,\n    resetOnComplete: false,\n    resetOnRefCountZero: false\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Referential Transparency in RxJS Operators (JavaScript)\nDESCRIPTION: This example shows how to create a reusable operator function in RxJS, emphasizing the concept of referential transparency. The operator can be applied to multiple observables without changing its internal state.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/core-semantics.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst double => map(x => x + x)\na$.pipe(double)\nb$.pipe(double)\n```\n\n----------------------------------------\n\nTITLE: New Subscriber Creation Pattern\nDESCRIPTION: Updated pattern for creating Subscribers after removal of Subscriber.create()\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnew Subscriber()\n```\n\n----------------------------------------\n\nTITLE: Reference Counting with refCount Operator\nDESCRIPTION: Demonstrates automatic connection management using refCount operator for multicasted observables.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subject.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval, Subject, multicast, refCount } from 'rxjs';\n\nconst source = interval(500);\nconst subject = new Subject();\nconst refCounted = source.pipe(multicast(subject), refCount());\nlet subscription1, subscription2;\n\nconsole.log('observerA subscribed');\nsubscription1 = refCounted.subscribe({\n  next: (v) => console.log(`observerA: ${v}`),\n});\n\nsetTimeout(() => {\n  console.log('observerB subscribed');\n  subscription2 = refCounted.subscribe({\n    next: (v) => console.log(`observerB: ${v}`),\n  });\n}, 600);\n\nsetTimeout(() => {\n  console.log('observerA unsubscribed');\n  subscription1.unsubscribe();\n}, 1200);\n\nsetTimeout(() => {\n  console.log('observerB unsubscribed');\n  subscription2.unsubscribe();\n}, 2000);\n```\n\n----------------------------------------\n\nTITLE: Migrating publishReplay with selector to connect operator\nDESCRIPTION: Shows how to replace publishReplay with selector functionality using the connect operator and ReplaySubject.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishReplay, combineLatest } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishReplay(1, undefined, (source) => combineLatest([source, source]))\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, connect, combineLatest, ReplaySubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  connect((source) => combineLatest([source, source]), {\n    connector: () => new ReplaySubject(1)\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Illustrating No-op Operators in RxJS (JavaScript)\nDESCRIPTION: These examples demonstrate operators that don't change the output of the source observable. In such cases, the operator should return the reference to the source observable directly.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/core-semantics.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntake(Infinity)\nskip(0)\n```\n\n----------------------------------------\n\nTITLE: Replacing pluck Operator in RxJS\nDESCRIPTION: Use map with optional chaining instead of the deprecated pluck operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nmap(x => x?.foo?.bar)\n```\n\n----------------------------------------\n\nTITLE: Time Progression Example with Marble Diagrams in TypeScript\nDESCRIPTION: Example showing how the time() helper can be used with marble diagrams to handle specific timeouts and delays in testing.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntestScheduler.run((helpers) => {\n  const { time, cold } = helpers;\n  const source = cold('---a--b--|');\n  const t = time('        --|    ');\n  //                         --|\n  const expected = '   -----a--b|';\n  const result = source.pipe(delay(t));\n  expectObservable(result).toBe(expected);\n});\n```\n\n----------------------------------------\n\nTITLE: Refactoring publishLast to connectable with AsyncSubject in RxJS\nDESCRIPTION: Shows how to replace the publishLast operator with the connectable function and an AsyncSubject for creating a connectable observable that emits only the last value.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishLast, ConnectableObservable } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishLast()\n) as ConnectableObservable<number>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, AsyncSubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new AsyncSubject<number>(),\n  resetOnDisconnect: false\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Guard Usage in Filter Operator\nDESCRIPTION: Example showing how filter() operator can take a type guard as predicate function for improved type inference\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nObservable<T>.filter() // Can take type guard as predicate function\n```\n\n----------------------------------------\n\nTITLE: Migrating fromEvent Result Selector\nDESCRIPTION: Example showing how to migrate from using result selector with fromEvent to using map operator instead.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nfromEvent(target, 'click').pipe(map(fn))\n```\n\n----------------------------------------\n\nTITLE: Refactoring RxJS forkJoin Arguments in TypeScript\nDESCRIPTION: Demonstrates how to refactor deprecated direct parameter passing to forkJoin operator using recommended array or object syntax. Shows migration from deprecated syntax to two supported approaches using array notation and object notation.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/array-argument.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {forkJoin, from} from 'rxjs';\n\nconst odd$ = from([1,3,5]);\nconst even$ = from([2,4,6]);\n\n// deprecated\nforkJoin(odd$, even$);\n// suggested change\nforkJoin([odd$, even$]);\n// or\nforkJoin({odd: odd$, even: even$})\n```\n\n----------------------------------------\n\nTITLE: Console Output from Multiple Subscriptions Example\nDESCRIPTION: This shows the console output from the previous example, demonstrating the timing of emissions from both interval Observables before they are unsubscribed after 1000ms.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/subscription.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nsecond: 0\nfirst: 0\nsecond: 1\nfirst: 1\nsecond: 2\n```\n\n----------------------------------------\n\nTITLE: Creating Partial RxJS Observer\nDESCRIPTION: Shows creation of a partial Observer object with only next and error callbacks, omitting the complete callback.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observer.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst observer = {\n  next: x => console.log('Observer got a next value: ' + x),\n  error: err => console.error('Observer got an error: ' + err),\n};\n```\n\n----------------------------------------\n\nTITLE: Updated throwError Usage with Function Factory\nDESCRIPTION: Example showing the breaking change in throwError operator where functions must now be returned from a factory function to be emitted as errors.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrowError(() => () => console.log('called later'))\n```\n\n----------------------------------------\n\nTITLE: RxJS mergeMap Pattern Update Example\nDESCRIPTION: Shows the new pattern for using mergeMap with result selectors after the breaking change where result selectors were removed.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nsource.mergeMap(x => of(x + x).pipe(map(y => y + x)))\n```\n\n----------------------------------------\n\nTITLE: Animation Frame Testing with Marble Diagrams in TypeScript\nDESCRIPTION: Demonstrates using the animate() helper to test requestAnimationFrame callbacks with marble diagrams.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntestScheduler.run((helpers) => {\n  const { animate, cold } = helpers;\n  animate('              ---x---x---x---x');\n  const requests = cold('-r-------r------');\n  /* ... */\n  const expected = '     ---a-------b----';\n});\n```\n\n----------------------------------------\n\nTITLE: Using proxyObserver with asyncScheduler in RxJS\nDESCRIPTION: This example demonstrates how observeOn introduces a proxy Observer between the Observable and the final Observer. It shows the same behavior as the first example but with renamed identifiers to make the distinction between observers clear.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/scheduler.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable, observeOn, asyncScheduler } from 'rxjs';\n\nconst observable = new Observable((proxyObserver) => {\n  proxyObserver.next(1);\n  proxyObserver.next(2);\n  proxyObserver.next(3);\n  proxyObserver.complete();\n}).pipe(\n  observeOn(asyncScheduler)\n);\n\nconst finalObserver = {\n  next(x) {\n    console.log('got value ' + x);\n  },\n  error(err) {\n    console.error('something wrong occurred: ' + err);\n  },\n  complete() {\n    console.log('done');\n  },\n};\n\nconsole.log('just before subscribe');\nobservable.subscribe(finalObserver);\nconsole.log('just after subscribe');\n```\n\n----------------------------------------\n\nTITLE: Simplified Observable Subscription\nDESCRIPTION: Demonstrates the simplified subscription syntax where only the next callback is provided directly to subscribe method.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observer.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nobservable.subscribe(x => console.log('Observer got a next value: ' + x));\n```\n\n----------------------------------------\n\nTITLE: Window Boundaries with skipLast Example\nDESCRIPTION: Example showing how to achieve previous window boundaries behavior using endWith and skipLast\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/6-to-7-change-summary.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsource$.pipe(window(notifier$.pipe(endWith(true))), skipLast(1))\n```\n\n----------------------------------------\n\nTITLE: Refactoring multicast with subject instance to connectable in RxJS\nDESCRIPTION: Shows how to replace multicast operator with a subject instance using the connectable function and a local subject instance.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, multicast, Subject, ConnectableObservable } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  multicast(new Subject())\n) as ConnectableObservable<number>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new Subject(),\n  resetOnDisconnect: false\n});\n```\n\n----------------------------------------\n\nTITLE: Implementation of proxyObserver in RxJS\nDESCRIPTION: This code snippet shows the approximate implementation of the proxyObserver's next method when using observeOn with asyncScheduler. It demonstrates how the scheduler schedules the delivery of values to the final observer.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/scheduler.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst proxyObserver = {\n  next(val) {\n    asyncScheduler.schedule(\n      (x) => finalObserver.next(x),\n      0 /* delay */,\n      val /* will be the x for the function above */\n    );\n  },\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Subscription Management with add/remove\nDESCRIPTION: Example of the new subscription management pattern using add and remove methods directly.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nsubscription.add(teardownFn);\nsubscription.remove(teardownFn);\n```\n\n----------------------------------------\n\nTITLE: Buffer with takeUntil Pattern\nDESCRIPTION: Example demonstrating buffer with takeUntil for completion behavior\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/6-to-7-change-summary.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsource$.pipe(buffer(notifier$), takeUntil(notifier$.pipe(ignoreElements(), endWith(true))))\n```\n\n----------------------------------------\n\nTITLE: RxJS bindCallback Pattern Update Example\nDESCRIPTION: Demonstrates the new pattern for using bindCallback after removal of result selector, using map operator instead.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nbindCallback(fn1)().pipe(map(fn2))\n```\n\n----------------------------------------\n\nTITLE: Replacing ConnectableObservable with refCount using share in RxJS\nDESCRIPTION: Shows how to refactor from using ConnectableObservable with refCount to using the share operator for automatic connection management.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectableObservable, timer, Subject } from 'rxjs';\n\n// deprecated\nconst tick$ = new ConnectableObservable(\n  timer(1_000),\n  () => new Subject()\n).refCount();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, share, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  share({ connector: () => new Subject() })\n);\n```\n\n----------------------------------------\n\nTITLE: Refactoring RxJS of() with Scheduler\nDESCRIPTION: Demonstrates how to refactor the deprecated of() operator with scheduler argument to use the scheduled() function instead\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/scheduler-argument.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of, asyncScheduler, scheduled } from 'rxjs';\n\n// Deprecated approach\nof(1, 2, 3, asyncScheduler).subscribe((x) => console.log(x));\n// suggested approach\nscheduled([1, 2, 3], asyncScheduler).subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Finalize Operator Subscription Chain\nDESCRIPTION: Fix for finalize operator to ensure proper subscription chaining and cleanup\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nsource$.pipe(\n  finalize(() => console.log('Finalized!'))\n);\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in RxJS Ajax Module Configuration\nDESCRIPTION: Details the updated body serialization behavior in ajax requests. JSON serialization is now applied for object bodies, with Content-Type set to application/json;charset=utf-8. Native handling is used for Blob, ArrayBuffer, FormData, URLSearchParams, string, and ReadableStream.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/6-to-7-change-summary.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\najax({ // AjaxConfig type instead of AjaxRequest\n  url: '/api',\n  body: { data: 'example' }, // Will be automatically JSON stringified\n  headers: { 'Content-Type': 'application/json' } // No effect on serialization\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing publishReplay and refCount with share operator\nDESCRIPTION: Demonstrates how to use the share operator with ReplaySubject to replace both publishReplay and refCount operators.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishReplay, refCount } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishReplay(1),\n  refCount()\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, share, ReplaySubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  share({\n    connector: () => new ReplaySubject(1),\n    resetOnError: false,\n    resetOnComplete: false,\n    resetOnRefCountZero: false\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Refactoring RxJS concat() with Scheduler\nDESCRIPTION: Shows the deprecated usage of concat() with scheduler argument and how to refactor it using scheduled() and concatAll()\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/scheduler-argument.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { concat, of, asyncScheduler } from 'rxjs';\n\nconcat(of('hello '), of('World'), asyncScheduler).subscribe((x) => console.log(x));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { scheduled, of, asyncScheduler, concatAll } from 'rxjs';\n\nscheduled([of('hello '), of('World')], asyncScheduler)\n  .pipe(concatAll())\n  .subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Testing Observable Equality in TestScheduler\nDESCRIPTION: Demonstrates the new TestScheduler.expectObservable().toEqual() method for comparing observable equality based on emissions and timing.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/6-to-7-change-summary.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntestScheduler.run(({ expectObservable }) => {\n  const source$ = someObservable;\n  const comparison$ = anotherObservable;\n  expectObservable(source$).toEqual(comparison$);\n});\n```\n\n----------------------------------------\n\nTITLE: Refactoring RxJS combineLatest() with Scheduler\nDESCRIPTION: Demonstrates how to refactor combineLatest() with scheduler argument using scheduled() and combineLatestAll()\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/scheduler-argument.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { combineLatest, of, asyncScheduler } from 'rxjs';\n\ncombineLatest(of('hello '), of('World'), asyncScheduler).subscribe(console.log);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { scheduled, of, asyncScheduler, combineLatestAll } from 'rxjs';\n\nscheduled([of('hello '), of('World')], asyncScheduler)\n  .pipe(combineLatestAll())\n  .subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Errors in RxJS Observable\nDESCRIPTION: Ensures errors thrown during subscription are properly sent down error channel.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n**Observable:** errors thrown during subscription are now properly sent down error channel\n```\n\n----------------------------------------\n\nTITLE: Synchronous Assertion Testing in RxJS\nDESCRIPTION: Shows how to test side effects after stream completion using flush() to run virtual time to completion.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet eventCount = 0;\n\nconst s1 = cold('--a--b|', { a: 'x', b: 'y' });\n\n// side effect using 'tap' updates a variable\nconst result = s1.pipe(tap(() => eventCount++));\n\nexpectObservable(result).toBe('--a--b|', { a: 'x', b: 'y' });\n\n// flush - run 'virtual time' to complete all outstanding hot or cold observables\nflush();\n\nexpect(eventCount).toBe(2);\n```\n\n----------------------------------------\n\nTITLE: Basic Event Listener Implementation - TypeScript\nDESCRIPTION: Demonstrates traditional DOM event listener implementation compared to RxJS observable approach.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndocument.addEventListener('click', () => console.log('Clicked!'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromEvent } from 'rxjs';\n\nfromEvent(document, 'click').subscribe(() => console.log('Clicked!'));\n```\n\n----------------------------------------\n\nTITLE: Refactoring publish to connectable in RxJS\nDESCRIPTION: Demonstrates how to replace the publish operator with the connectable function for creating a connectable observable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publish, ConnectableObservable } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publish()\n) as ConnectableObservable<number>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new Subject<number>(),\n  resetOnDisconnect: false\n});\n```\n\n----------------------------------------\n\nTITLE: Buffer Pattern with skipLast Example\nDESCRIPTION: Example showing how to achieve previous buffer behavior using endWith and skipLast operators\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/6-to-7-change-summary.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsource$.pipe(buffer(notifier$.pipe(endWith(true))), skipLast(1))\n```\n\n----------------------------------------\n\nTITLE: Adding MaxWindowSize to windowTime Operator in RxJS\nDESCRIPTION: Adds maxWindowSize parameter to the windowTime operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\n**windowTime:** maxWindowSize parameter in windowTime operator\n```\n\n----------------------------------------\n\nTITLE: Recommended RxJS Subscribe Method Usage\nDESCRIPTION: This snippet demonstrates the recommended ways of using the subscribe method in RxJS. It shows how to use an anonymous function for the next callback only, and how to use an observer object for multiple callbacks.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/subscribe-arguments.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of } from 'rxjs';\n\n// recommended \nof([1,2,3]).subscribe((v) => console.info(v));\n// also recommended\nof([1,2,3]).subscribe({\n    next: (v) => console.log(v),\n    error: (e) => console.error(e),\n    complete: () => console.info('complete') \n})\n```\n\n----------------------------------------\n\nTITLE: Using RxJS Operators (Version 7.2+)\nDESCRIPTION: Example showing how to import and use RxJS operators directly from 'rxjs' package in version 7.2 or above. Demonstrates range, filter, and map operators with subscription.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { range, filter, map } from 'rxjs';\n\nrange(1, 200)\n  .pipe(\n    filter((x) => x % 2 === 1),\n    map((x) => x + x)\n  )\n  .subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building RxJS Documentation\nDESCRIPTION: Commands for installing dependencies and generating the documentation. Includes setup, build, and test commands that should be run from the apps/rxjs.dev folder.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nyarn setup\n\nyarn build\n\nnpm start\nyarn serve-and-sync\nyarn lint\nnpm test\nnpm test -- --watch=false\nyarn e2e\n\nyarn docs\nyarn docs-watch\nyarn docs-lint\nyarn docs-test\n```\n\n----------------------------------------\n\nTITLE: Migrating bindCallback Result Selector\nDESCRIPTION: Example showing how to migrate from using result selector with bindCallback to using map operator instead.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nbindCallback(fn1)().pipe(map(fn2))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Creation Function with Result Selector in RxJS (JavaScript)\nDESCRIPTION: This snippet shows the recommended way to implement a creation function with a result selector in RxJS. It uses an array to accept multiple sources and a separate function for the result selector.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/core-semantics.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncombineThings([sourceA$, sourceB$], (a, b) => a + b)\n```\n\n----------------------------------------\n\nTITLE: Using RxJS Operators (Pre-7.2)\nDESCRIPTION: Example showing how to import and use RxJS operators from 'rxjs/operators' in versions before 7.2. Demonstrates range, filter, and map operators with subscription.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { range } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nrange(1, 200)\n  .pipe(\n    filter((x) => x % 2 === 1),\n    map((x) => x + x)\n  )\n  .subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Importing RxJS Operators - Modern Method (v7.2.0+)\nDESCRIPTION: Preferred way of importing operators directly from rxjs package\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { map } from 'rxjs';\n```\n\n----------------------------------------\n\nTITLE: Running RxJS Documentation in Docker\nDESCRIPTION: Docker commands for building and running the RxJS documentation as a container. Includes saving and loading the Docker image for offline usage.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t rxjs-docs:6.4.1 .\ndocker run -p <host-port>:4200 rxjs-docs:6.4.1\n\nsudo docker save rxjs-docs:6.4.1 > <tar-name>.tar\nsudo docker load < <tar-name>.tar\n```\n\n----------------------------------------\n\nTITLE: Refactoring publish with selector to connect in RxJS\nDESCRIPTION: Demonstrates how to replace the publish operator with a selector using the connect operator for creating a connectable observable with a selector function.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publish, combineLatest } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publish((source) => combineLatest([source, source]))\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, connect, combineLatest } from 'rxjs';\n\n// suggested refactor\nconst tick$ = timer(1_000).pipe(\n  connect((source) => combineLatest([source, source]))\n);\n```\n\n----------------------------------------\n\nTITLE: Updated Subscribe Pattern\nDESCRIPTION: New pattern for subscribe method using observer object instead of separate function arguments\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribe({ next: fn, error: fn, complete: fn })\n```\n\n----------------------------------------\n\nTITLE: Modern MergeWith Operator Usage\nDESCRIPTION: Current approach using mergeWith pipeable operator\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mergeWith } from 'rxjs';\n\na$.pipe(mergeWith(b$)).subscribe();\n```\n\n----------------------------------------\n\nTITLE: Opening Browser Automatically with npm start\nDESCRIPTION: Command to start the development server and automatically open the browser to view the documentation.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start -- -o\n```\n\n----------------------------------------\n\nTITLE: Using exhaustMap with Map\nDESCRIPTION: Example showing how to achieve result selector functionality with exhaustMap using map operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nsource.pipe(exhaustMap(x => of(x + x).pipe(map(y => x + y))))\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Sources in forkJoin with RxJS\nDESCRIPTION: Use catchError or defaultIfEmpty to handle empty sources in forkJoin.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nforkJoin(sources.map(defaultIfEmpty(null)))\n```\n\n----------------------------------------\n\nTITLE: Observable Grammar Regular Expression\nDESCRIPTION: Represents the Observable Contract as a regular expression. It shows that an Observable can emit zero to infinite Next notifications, optionally followed by either an Error or Complete notification.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nnext*(error|complete)?\n```\n\n----------------------------------------\n\nTITLE: Subscribing Observable to Observer\nDESCRIPTION: Shows how to subscribe an Observable to an Observer using the subscribe method.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observer.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nobservable.subscribe(observer);\n```\n\n----------------------------------------\n\nTITLE: Publishing Replay Operator with Selector Function\nDESCRIPTION: New feature added to publishReplay operator allowing a selector function parameter. The selector function enables transformation of the replayed observable sequence.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\npublishReplay(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike, selector?: (shared: Observable<T>) => Observable<R>)\n```\n\n----------------------------------------\n\nTITLE: Replacing startWith with Scheduler in RxJS\nDESCRIPTION: Instead of using startWith with a scheduler, use concat with scheduled array.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconcat(scheduled([1, 2, 3], scheduler), source$)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Subscribe Pattern Update\nDESCRIPTION: New pattern for subscribe() calls requiring use of observer object instead of function arguments.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Old pattern (removed)\nsubscribe(fn, fn, fn)\n\n// New pattern\nsubscribe({ next: fn, error: fn, complete: fn })\n```\n\n----------------------------------------\n\nTITLE: Installing RxJS via npm for ES2015\nDESCRIPTION: This command installs the latest version of RxJS using npm. It's suitable for projects using ES2015 or later.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install rxjs\n```\n\n----------------------------------------\n\nTITLE: TypeScript Ajax Configuration Type Changes\nDESCRIPTION: Breaking change in TypeScript type definitions for AJAX configuration. AjaxConfig is now the preferred type over AjaxRequest, adding support for progressSubscriber and createXHR properties.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/breaking-changes.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Old approach\nconst request: AjaxRequest = {\n  url: '/api/data',\n  method: 'POST'\n};\n\n// New approach\nconst config: AjaxConfig = {\n  url: '/api/data',\n  method: 'POST',\n  progressSubscriber: subscriber,\n  createXHR: () => new XMLHttpRequest()\n};\n```\n\n----------------------------------------\n\nTITLE: New Subscriber Chaining Mechanism\nDESCRIPTION: Addition of a new subscriber chaining mechanism for operator creation, improving the operator composition pattern.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\noperate(subscriber => { /* operator implementation */ })\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Subject Usage\nDESCRIPTION: Example showing how to configure websocket serialization behavior in RxJS 6.0.0, where messages are now JSON serialized by default. Shows how to revert to raw message passing.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nwebsocket({ url, serializer: x => x })\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Tap Pattern Update\nDESCRIPTION: New pattern for tap() operator requiring use of named arguments instead of function arguments.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Old pattern (removed)\ntap(fn, fn, fn)\n\n// New pattern\ntap({ complete: fn, error: fn, next: fn })\n```\n\n----------------------------------------\n\nTITLE: Static Merge Creation Function\nDESCRIPTION: Modern approach using static merge creation function\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { merge } from 'rxjs';\n\nmerge(a$, b$).subscribe();\n```\n\n----------------------------------------\n\nTITLE: ES6 Imports (v7.2.0+)\nDESCRIPTION: Examples of importing and using RxJS functionality in ES6 with v7.2.0 or later\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of, map } from 'rxjs';\n\nof(1, 2, 3).pipe(map((x) => x + '!!!'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as rxjs from 'rxjs';\n\nrxjs.of(1, 2, 3).pipe(rxjs.map((x) => x + '!!!'));\n```\n\n----------------------------------------\n\nTITLE: ES6 Imports (Pre v7.2.0)\nDESCRIPTION: Examples of importing and using RxJS functionality in ES6 with v7.1.0 or older\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nof(1, 2, 3).pipe(map((x) => x + '!!!'));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as rxjs from 'rxjs';\nimport * as operators from 'rxjs';\n\nrxjs.of(1, 2, 3).pipe(operators.map((x) => x + '!!!'));\n```\n\n----------------------------------------\n\nTITLE: Refactoring publishBehavior to connectable with BehaviorSubject in RxJS\nDESCRIPTION: Shows how to replace the publishBehavior operator with the connectable function and a BehaviorSubject for creating a connectable observable with initial value.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, publishBehavior, ConnectableObservable } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  publishBehavior(0)\n) as ConnectableObservable<number>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, BehaviorSubject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new BehaviorSubject(0),\n  resetOnDisconnect: false\n});\n```\n\n----------------------------------------\n\nTITLE: CDN Usage (v7.2.0+)\nDESCRIPTION: Example of using RxJS via CDN in version 7.2.0 or later\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { range, filter, map } = rxjs;\n\nrange(1, 200)\n  .pipe(\n    filter((x) => x % 2 === 1),\n    map((x) => x + x)\n  )\n  .subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Invalid Observable Execution in TypeScript\nDESCRIPTION: Shows an example of an Observable that attempts to emit a value after completion, which violates the Observable Contract. The fourth emission would not be delivered to subscribers.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/observable.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Observable } from 'rxjs';\n\nconst observable = new Observable(function subscribe(subscriber) {\n  subscriber.next(1);\n  subscriber.next(2);\n  subscriber.next(3);\n  subscriber.complete();\n  subscriber.next(4); // Is not delivered because it would violate the contract\n});\n```\n\n----------------------------------------\n\nTITLE: Importing RxJS Operators - Legacy Method (Pre v7.2.0)\nDESCRIPTION: Example showing the deprecated way of importing operators from rxjs/operators\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { map } from 'rxjs/operators';\n```\n\n----------------------------------------\n\nTITLE: Refactoring multicast with subject factory to connectable in RxJS\nDESCRIPTION: Demonstrates how to replace multicast operator with subject factory using the connectable function for creating a connectable observable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timer, multicast, Subject, ConnectableObservable } from 'rxjs';\n\n// deprecated\nconst tick$ = timer(1_000).pipe(\n  multicast(() => new Subject())\n) as ConnectableObservable<number>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new Subject()\n});\n```\n\n----------------------------------------\n\nTITLE: CDN Usage (Pre v7.2.0)\nDESCRIPTION: Example of using RxJS via CDN in version 7.1.0 or older\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { range } = rxjs;\nconst { filter, map } = rxjs.operators;\n\nrange(1, 200)\n  .pipe(\n    filter((x) => x % 2 === 1),\n    map((x) => x + x)\n  )\n  .subscribe((x) => console.log(x));\n```\n\n----------------------------------------\n\nTITLE: Updated Tap Operator Pattern\nDESCRIPTION: New pattern for using tap operator with named arguments instead of function parameters\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntap({ complete: fn, error: fn, next: fn })\n```\n\n----------------------------------------\n\nTITLE: Refactoring ConnectableObservable to connectable in RxJS\nDESCRIPTION: Demonstrates how to refactor from creating a ConnectableObservable instance to using the connectable function for obtaining a connectable observable.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/multicasting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectableObservable, timer, Subject } from 'rxjs';\n\n// deprecated\nconst tick$ = new ConnectableObservable(\n  timer(1_000),\n  () => new Subject());\ntick$.connect();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connectable, timer, Subject } from 'rxjs';\n\n// suggested refactor\nconst tick$ = connectable(timer(1_000), {\n  connector: () => new Subject()\n});\ntick$.connect();\n```\n\n----------------------------------------\n\nTITLE: Installing RxJS via npm\nDESCRIPTION: Command to install RxJS package using npm package manager.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install rxjs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Symbol.observable Usage in JavaScript\nDESCRIPTION: Shows how to use Symbol.observable or fallback to a string literal as a workaround for the removed observable export.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nSymbol.observable ?? '@@observable'\n```\n\n----------------------------------------\n\nTITLE: Optimizing bufferCount Operator in RxJS\nDESCRIPTION: Performance improvement for the bufferCount operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n**bufferCount:** optimize bufferCount operator\n```\n\n----------------------------------------\n\nTITLE: Subject Performance Improvement\nDESCRIPTION: Performance optimization for Subject subscription, unsubscription, and nexting operations, resulting in ~4x improvement. The update includes creating one less subscription on subscribe.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Performance improvement for\nsubject.subscribe()\nsubject.unsubscribe()\nsubject.next(value)\n```\n\n----------------------------------------\n\nTITLE: ThrowError with Function Example\nDESCRIPTION: Example showing how to emit a function as an error using throwError operator\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/6-to-7-change-summary.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthrowError(() => () => console.log('called later'))\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to RxJS\nDESCRIPTION: Command to commit changes with the -a flag to automatically add and remove edited files\nSOURCE: https://github.com/reactivex/rxjs/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: ReplaySubject with Scheduled Emissions\nDESCRIPTION: Example of the new way to schedule emissions with ReplaySubject using observeOn operator instead of the constructor parameter.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/breaking-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ReplaySubject(2, 3000).pipe(observeOn(asap))\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing RxJS Development Environment\nDESCRIPTION: Commands for setting up the RxJS development environment using Yarn, running tests, and starting the documentation server. Uses Yarn instead of npm due to type definition conflicts between Jasmine and Mocha.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd repository-root\nyarn install\nyarn workspace rxjs test\nyarn workspace rxjs.dev start\n```\n\n----------------------------------------\n\nTITLE: Reexporting flatMap as mergeMap Alias\nDESCRIPTION: Implementation to reexport flatMap as an alias of mergeMap operator for backward compatibility and common usage patterns.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const flatMap = mergeMap;\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to GitHub\nDESCRIPTION: Command to push the local branch to GitHub repository\nSOURCE: https://github.com/reactivex/rxjs/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: RxJS exhaustMap Pattern Update Example\nDESCRIPTION: Shows the new pattern for using exhaustMap after removal of result selector functionality.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nsource.pipe(exhaustMap(x => of(x + x).pipe(map(y => x + y))))\n```\n\n----------------------------------------\n\nTITLE: Interop Subscriber Unsubscription Chain\nDESCRIPTION: Fix for proper chaining of unsubscriptions in interop/safe subscribers\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst subscription = source$.subscribe({\n  next: value => console.log(value),\n  error: err => console.error(err),\n  complete: () => console.log('complete')\n});\nsubscription.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Adding Optional RemoveHandler to fromEventPattern in RxJS\nDESCRIPTION: Adds support for an optional removeHandler in fromEventPattern.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n**fromEventPattern:** support optional removeHandler\n```\n\n----------------------------------------\n\nTITLE: Documentation Package List\nDESCRIPTION: List of key packages used in the documentation generation system.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/transforms/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* angular-base-package\n* angular-api-package\n* angular-content-package\n* content-package\n* links-package\n* post-process-package\n* remark-package\n* target-package\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in RxJS 7\nDESCRIPTION: Example of configuring unhandled error behavior using the new configuration API. Shows how to revert to console.warn behavior for unhandled errors.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/breaking-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from 'rxjs';\nconfig.onUnhandledError = (err) => console.warn(err);\n```\n\n----------------------------------------\n\nTITLE: Function Import Configuration for Deprecated Context\nDESCRIPTION: Configuration code to enable deprecated next context behavior in RxJS, with a note about performance impact.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { config } from 'rxjs';\nconfig.useDeprecatedNextContext = true;\n```\n\n----------------------------------------\n\nTITLE: Testing Async RxJS Code with Promises\nDESCRIPTION: Example of testing RxJS code that involves Promises using traditional asynchronous testing methods instead of marble diagrams.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/testing/marble-testing.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Some RxJS code that also consumes a Promise, so TestScheduler won't be able\n// to correctly virtualize and the test will always be really asynchronous.\nconst myAsyncCode = () => from(Promise.resolve('something'));\n\nit('has async code', (done) => {\n  myAsyncCode().subscribe((d) => {\n    assertEqual(d, 'something');\n    done();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Dependencies\nDESCRIPTION: Commands for installing dependencies and building the project\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/transforms/rxjs-decision-tree-generator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i && yarn build\n```\n\n----------------------------------------\n\nTITLE: Body Serialization Examples in RxJS AJAX\nDESCRIPTION: Demonstrates the new default XHR behavior for different body types in AJAX requests. Objects are automatically converted to JSON with appropriate content-type headers.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/breaking-changes.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Default handling for these types\nconst blobBody = new Blob(['content']);\nconst arrayBufferBody = new ArrayBuffer(8);\nconst formDataBody = new FormData();\nconst urlParamsBody = new URLSearchParams();\nconst stringBody = 'content';\n\n// Object automatically converted to JSON\nconst objectBody = { key: 'value' }; // Will be JSON.stringify'd\n```\n\n----------------------------------------\n\nTITLE: Development Workflow for Editing Documentation\nDESCRIPTION: A setup workflow that allows for efficient document creation and editing with quick preview capabilities. The commands run tasks in parallel to watch for changes and automatically rebuild documentation.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn setup\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Marble Diagram with Delay Operator\nDESCRIPTION: Shows an Observable stream with events a, b, c and how the delay(20) operator affects the timing of emissions\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/delay.txt#2025-04-21_snippet_1\n\nLANGUAGE: ascii\nCODE:\n```\n---a--b--c---|\n\n> delay(20)\n\n-----a--b--c-|\n```\n\n----------------------------------------\n\nTITLE: RxJS Decision Tree YAML Configuration Path\nDESCRIPTION: Path to the YAML configuration file used to generate the decision tree data structure.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/src/app/custom-elements/operator-decision-tree/README.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napps/rxjs.dev/content/operator-decision-tree.yml\n```\n\n----------------------------------------\n\nTITLE: Deprecated Complete Callback Usage in RxJS Subscribe Method\nDESCRIPTION: This snippet demonstrates a deprecated way of using the subscribe method with only a complete callback. It's recommended to use an observer object instead for better readability.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/subscribe-arguments.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { of } from 'rxjs';\n\n// deprecated\nof([1,2,3]).subscribe(null, null, console.info); // difficult to read\n// suggested change\nof([1,2,3]).subscribe({complete: console.info});\n```\n\n----------------------------------------\n\nTITLE: Updating RxJS Observable Import Paths\nDESCRIPTION: Changes to import paths for RxJS Observable modules and patch files. Observable subclass modules are now in dedicated files, and patch files for static methods use a new path structure.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New import paths\nimport { of } from 'rxjs/add/observable/of';\nimport { from } from 'rxjs/add/observable/from';\n\n// New paths for Observable subclasses\nimport { PromiseObservable } from 'rxjs/observable/PromiseObservable';\nimport { ArrayObservable } from 'rxjs/observable/ArrayObservable';\n```\n\n----------------------------------------\n\nTITLE: Installing RxJS for all module types via npm v3\nDESCRIPTION: This command installs RxJS for all module types (CommonJS, ES6, AMD, TypeScript) using npm version 3 or later.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @reactivex/rxjs\n```\n\n----------------------------------------\n\nTITLE: Setting Ajax Response Type to JSON\nDESCRIPTION: Fix for ajax responseType which should default to \"json\". This code reference shows the commit that fixed the issue where responseType wasn't properly defaulted.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n5bc8e3361 Fix/6052 ajax responseType should default to \"json\" (#6056)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Guard Usage in First Operator\nDESCRIPTION: Example showing how first() operator can take a type guard as predicate function for improved type inference\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nObservable<T>.first() // Can take type guard as predicate function\n```\n\n----------------------------------------\n\nTITLE: Updating RxJS Subject.create Arguments\nDESCRIPTION: The order of arguments for Subject.create has been swapped to match the Rx 4 signature.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old\nSubject.create(observable, observer);\n\n// New \nSubject.create(observer, observable);\n```\n\n----------------------------------------\n\nTITLE: Installing specific RxJS version for all module types via npm v2\nDESCRIPTION: This command installs a specific version of RxJS (7.3.0) for all module types using npm version 2. Version specification is required for npm v2.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @reactivex/rxjs@7.3.0\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in bindNodeCallback in RxJS\nDESCRIPTION: Schedules errors thrown in callback if a scheduler is provided.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n**bindNodeCallback:** errors thrown in callback will be scheduled if a scheduler is provided\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Guard Usage in Last Operator\nDESCRIPTION: Example showing how last() operator can take a type guard as predicate function for improved type inference\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nObservable<T>.last() // Can take type guard as predicate function\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Type to WebSocket Config in RxJS\nDESCRIPTION: Adds binaryType property to the WebSocket config object.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n**webSocket:** Add binaryType to config object\n```\n\n----------------------------------------\n\nTITLE: Deprecated Error Callback Usage in RxJS Subscribe Method\nDESCRIPTION: This example shows a deprecated way of using the subscribe method with only an error callback. The recommended approach is to use an observer object for better code clarity.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/deprecations/subscribe-arguments.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { throwError } from 'rxjs';\n\n// deprecated \nthrowError('I am an error').subscribe(null, console.error);\n// suggested change\nthrowError('I am an error').subscribe({error: console.error});\n```\n\n----------------------------------------\n\nTITLE: Initializing Symbol Exports in JavaScript\nDESCRIPTION: Exports symbols without the '$$' prefix to work with Babel UMD exporting.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nsymbols now also exported without `$$` prefix to work with Babel UMD exporting\n```\n\n----------------------------------------\n\nTITLE: Fixing shareReplay Synchronous Value Handling\nDESCRIPTION: Update to shareReplay operator to properly handle synchronous values from source stream\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst source$ = of(1, 2, 3);\nsource$.pipe(\n  shareReplay(1)\n);\n```\n\n----------------------------------------\n\nTITLE: Updating ISubscription Closed Type in RxJS\nDESCRIPTION: Updates the type definition of ISubscription::closed.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ISubscription:** update type definition of ISubscription::closed\n```\n\n----------------------------------------\n\nTITLE: Setting withCredentials on XHR in RxJS AJAX\nDESCRIPTION: Fixes an issue with setting withCredentials after open on XHR for IE10.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ajax:** will set `withCredentials` after `open` on XHR for IE10\n```\n\n----------------------------------------\n\nTITLE: Using BehaviorSubject getValue Method in RxJS 5\nDESCRIPTION: Demonstrates the new getValue method added to BehaviorSubject for accessing its current value.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BehaviorSubject } from 'rxjs';\n\nconst subject = new BehaviorSubject(42);\nconst currentValue = subject.getValue();\n```\n\n----------------------------------------\n\nTITLE: RxJS Debounce Marble Diagram\nDESCRIPTION: A marble diagram showing an input stream with values a, b, c, d, e, f being debounced with a timing window represented by '---x'. The result shows only values a, c, and f that were not followed by other values within the debounce window.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/debounce.txt#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n-a----bc----d-ef----|\\n\\n ---x\\n\\n       ---x\\n\\n               ---x\\n\\n> debounce()\\n\\n----a-----c-------f-|\n```\n\n----------------------------------------\n\nTITLE: Testing Commands\nDESCRIPTION: Various commands for running tests, including watch mode and coverage reports\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/transforms/rxjs-decision-tree-generator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:watch\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn test:coverage\nyarn test:watch:coverage\n```\n\n----------------------------------------\n\nTITLE: Using switchFirstMap Operator in RxJS 5\nDESCRIPTION: Shows the usage of the renamed switchFirstMap operator (formerly switchMapFirst) in RxJS 5.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { of } from 'rxjs';\nimport { switchFirstMap } from 'rxjs/operators';\n\nof(1, 2, 3).pipe(\n  switchFirstMap(x => of(x, x * 2, x * 3))\n).subscribe(console.log);\n```\n\n----------------------------------------\n\nTITLE: Using QueueScheduler in RxJS 5\nDESCRIPTION: Demonstrates how to use the renamed QueueScheduler (formerly ImmediateScheduler) in RxJS 5.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Scheduler } from 'rxjs';\n\nconst queueScheduler = Scheduler.queue;\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Observable Creation Update\nDESCRIPTION: Observable.create has been removed in favor of using the constructor directly.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Old pattern (removed)\nObservable.create()\n\n// New pattern\nnew Observable()\n```\n\n----------------------------------------\n\nTITLE: RxJS Decision Tree JSON Data Path\nDESCRIPTION: Path to the generated JSON data file required by the operator-decision-tree module.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/src/app/custom-elements/operator-decision-tree/README.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/generated/app/decision-tree-data.json\n```\n\n----------------------------------------\n\nTITLE: Template Inheritance Structure in Markdown\nDESCRIPTION: Hierarchical representation of template inheritance showing base templates and their extendable blocks. Shows the relationship between different template types including base, module, api-base, and specific doc type templates.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/transforms/templates/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- layout/base.template.html (base)\n  - module.template.html\n  - layout/api-base.template.html (jumpNav, jumpNavLinks, whatItDoes, infoBar, securityConsiderations,\n    deprecationNotes, howToUse, details)\n    - class.template.html\n      - directive.template.html\n      - enum.template.html\n    - var.template.html\n      - const.template.html\n      - let.template.html\n    - decorator.template.html\n    - function.template.html\n    - interface.template.html\n      - type-alias.template.html\n    - pipe.template.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Marble Diagram Style\nDESCRIPTION: Sets the visual radius for events in marble diagrams to 15 units\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/delay.txt#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n[styles]\nevent_radius = 15\n```\n\n----------------------------------------\n\nTITLE: Deprecated Result Selector Pattern Examples\nDESCRIPTION: Examples of deprecated result selector patterns that are no longer available in RxJS 8.0\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nmergeMapTo(observable, resultSelector)\nconcatMap(project, resultSelector)\nconcatMapTo(observable, resultSelector)\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access for RxJS Documentation Site\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access all pages and specifies the location of the sitemap.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/src/extra-files/stable/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\nSitemap: https://rxjs.dev/generated/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Testing ServiceWorker Locally with Http-Server\nDESCRIPTION: Command to build the project and serve the files using http-server to test ServiceWorker functionality locally.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\nyarn http-server -- dist -p 4200\n```\n\n----------------------------------------\n\nTITLE: Visualizing RxJS audit() Operator with Marble Diagram\nDESCRIPTION: This marble diagram illustrates the behavior of the audit() operator in RxJS. The top line represents the source stream, the middle lines show the timing function, and the bottom line shows the resulting output stream after applying audit().\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/audit.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-a-xy-----b--x--cxyz-|\n\n ----i\n\n          ----i\n\n                ----i\n\n> audit()\n\n-----y--------x-----z|\n```\n\n----------------------------------------\n\nTITLE: Illustrating Windowing Behavior in ASCII Art\nDESCRIPTION: This ASCII art shows three overlapping windows, each ending with a completion marker, demonstrating a windowing operation on a stream.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/windowWhen.txt#2025-04-21_snippet_2\n\nLANGUAGE: ascii-art\nCODE:\n```\n-------------x|\n             -------------x|\n                          -------------x|\n```\n\n----------------------------------------\n\nTITLE: Blocking All Web Crawlers in robots.txt\nDESCRIPTION: Configuration that prevents all web crawlers/robots from accessing any content on the site by using a wildcard user agent and blanket disallow directive.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/src/extra-files/next/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /\n```\n\n----------------------------------------\n\nTITLE: Watching Documentation Changes for Live Preview\nDESCRIPTION: Commands for watching documentation files for changes, allowing near real-time preview of edits. Includes both the separate terminal approach and the consolidated command.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn docs-watch\n```\n\n----------------------------------------\n\nTITLE: RxJS Marble Diagram - exhaustAll Operator Pattern\nDESCRIPTION: A marble diagram showing multiple source observables (x, y, z) and how exhaustAll processes them. The diagram illustrates how only the first inner observable completes before switching to the next available inner observable, ignoring any inner observables that arrive while the current one is still active.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/exhaustAll.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nx = --a---b---c--|\n\ny = ---d--e---f---|\n\nz = ---g--h---i---|\n\n------x-------y------z--|\nghosts = y\n\n> exhaustAll\n\n--------a---b---c-------g--h---i---|\n```\n\n----------------------------------------\n\nTITLE: Visualizing Event Stream in ASCII Art\nDESCRIPTION: This ASCII art represents a stream of events from 'a' to 'h', ending with a completion marker.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/windowWhen.txt#2025-04-21_snippet_1\n\nLANGUAGE: ascii-art\nCODE:\n```\n---a---b---c---d---e---f---g---h---|\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for RxJS Contribution\nDESCRIPTION: Command to create a new git branch for implementing fixes or features\nSOURCE: https://github.com/reactivex/rxjs/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch master\n```\n\n----------------------------------------\n\nTITLE: Development Watch Mode\nDESCRIPTION: Command to watch for changes in YAML tree or TypeScript scripts and automatically regenerate JSON tree\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/transforms/rxjs-decision-tree-generator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn watch\n```\n\n----------------------------------------\n\nTITLE: Visualizing RxJS throttle() Operator with Marble Diagram\nDESCRIPTION: This marble diagram illustrates the behavior of the throttle() operator in RxJS. It shows an input stream with various events, the throttle intervals, and the resulting output stream after applying the throttle operator.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/throttle.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-a-xy-----b--x--cxyz-|\n\n ----i\n\n          ----i\n\n                ----i\n\n> throttle()\n\n-a--------b-----c----|\n```\n\n----------------------------------------\n\nTITLE: Installing ES6-shim typings for RxJS\nDESCRIPTION: This command installs supplemental typings for ES6 features if you encounter errors related to Promise or Iterable when using RxJS with TypeScript.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntypings install es6-shim --ambient\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Force Pushing Changes\nDESCRIPTION: Commands to rebase the branch against master and force push updates\nSOURCE: https://github.com/reactivex/rxjs/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase master -i\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Defining Marble Diagram Styles in CSS\nDESCRIPTION: This snippet defines CSS variables for rendering marble diagrams, including event radius, operator height, and completion height.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/windowWhen.txt#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[styles]\nevent_radius = 33\noperator_height = 60\ncompletion_height = 80\n```\n\n----------------------------------------\n\nTITLE: Consolidated Serve and Sync Command for Documentation Development\nDESCRIPTION: A single command that combines building, watching and serving documentation in the same terminal window, simplifying the development workflow.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve-and-sync\n```\n\n----------------------------------------\n\nTITLE: File Path References in Documentation\nDESCRIPTION: Multiple file path references showing the structure of documentation generation tools and packages.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/transforms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntools/transforms/cheatsheet-package\ntools/transforms/content-package\ntools/transforms/angular.io-package/index.js\ntools/transforms/authors-package/*-package.js\ntools/transforms/templates\n```\n\n----------------------------------------\n\nTITLE: Demonstrating windowWhen() Operator in ASCII Art\nDESCRIPTION: This ASCII art illustrates the behavior of the windowWhen() operator in RxJS, showing how it creates multiple window observables based on a closing selector function.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/windowWhen.txt#2025-04-21_snippet_3\n\nLANGUAGE: ascii-art\nCODE:\n```\nx = ---a---b---c-|\n\ny = --d---e---f---g|\n\nz = -g---h---|\n\nx------------y------------z--------|\n```\n\n----------------------------------------\n\nTITLE: Using rxSubscriber Symbol in RxJS 5\nDESCRIPTION: Shows how to use the new rxSubscriber symbol for custom subscription handling.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Symbol } from 'rxjs';\n\nconst customSubscriber = {\n  [Symbol.rxSubscriber]() {\n    // Custom subscription logic\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: Structured markdown document containing the complete Code of Conduct for the RxJS project, including sections for pledge, standards, responsibilities, scope, enforcement, and attribution.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/code-of-conduct.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\neducation, socio-economic status, nationality, personal appearance, race,\nreligion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting Ben Lesh (ben@benlesh.com), Tracy Lee (tracy@thisdot.co) or OJ Kwon (kwon.ohjoong@gmail.com). All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n```\n\n----------------------------------------\n\nTITLE: Legacy Merge Operator Usage\nDESCRIPTION: Deprecated way of using merge operator from rxjs/operators\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/guide/importing.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { merge } from 'rxjs/operators';\n\na$.pipe(merge(b$)).subscribe();\n```\n\n----------------------------------------\n\nTITLE: Importing AsapScheduler in RxJS 5\nDESCRIPTION: Shows how to import the renamed AsapScheduler (formerly NextTickScheduler) in RxJS 5.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Scheduler } from 'rxjs';\n\nconst asapScheduler = Scheduler.asap;\n```\n\n----------------------------------------\n\nTITLE: Black Lives Matter Statement HTML Structure\nDESCRIPTION: HTML markup for a Black Lives Matter solidarity statement page, including heading, paragraphs, and a list of educational resources with external links.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/blackLivesMatter.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<article class=\"blm-background\">\n  <div layout=\"row\" layout-xs=\"column\" class=\"home-row homepage-container\">\n    <div class=\"text-container blm-container\">\n      <h1 class=\"no-anchor no-toc\" style=\"font-size: 3rem; line-height: inherit\">BLACK LIVES MATTER</h1>\n      <p class=\"blm-text\">\n        We stand in solidarity with the Black Lives Matter movement. We believe that technologists must not be silent in the fight to end racial inequality.      </p>\n      <p class=\"blm-text\">\n        We ask you to stand with us and help educate your team members and those in your network on how to help dismantle a system that oppresses Black people. Find a list of starting resources here: \n        <ul style=\"list-style-type: none; line-height: inherit; padding-inline-start: 0\">\n          <li class=\"blm-list-item\"><a class=\"blm-text\" href=\"https://www.youtube.com/watch?v=-aCn72iXO9s\">Let's get to the root of racial injustice by Megan Ming Francis</a></li>\n          <li class=\"blm-list-item\"><a class=\"blm-text\" href=\"http://www.changecadet.com/blog/2020/5/30/what-leaders-can-do-for-black-employees\">What Leaders can do for Black Employees by Dr. Akilah Cadet</a></li>\n          <li class=\"blm-list-item\"><a class=\"blm-text\" href=\"https://blacktechpipeline.substack.com/p/hey-employers-do-black-lives-matter\">Hey Employers: Do Black Lives Matter? by Pariss Athena</a></li>\n          <li class=\"blm-list-item\"><a class=\"blm-text\" href=\"https://safiyaunoble.com/\">Algorithms of Oppression by Safiya Umoja Noble</a></li>\n          <li class=\"blm-list-item\"><a class=\"blm-text\" href=\"https://www.rageinsidethemachine.com/\">Rage Inside The Machine by Robert Smith</a></li>\n          <li class=\"blm-list-item\"><a class=\"blm-text\" href=\"https://www.sarawb.com/\">Technically Wrong by Sara Wachter-Boettcher</a></li>\n        </ul>\n      </p>\n      <p class=\"blm-text\">\n        In solidarity, we ask you to consider financially supporting efforts such as <a class=\"blm-text\" href=\"https://secure.actblue.com/donate/ms_blm_homepage_2019\">Black Lives Matter</a>, \n        <a class=\"blm-text\" href=\"https://support.eji.org/give/153413/#!/donation/checkout\">The Equal Justice Initiative</a> or local charity organizations.\n      </p>\n    </div>\n  </div>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Error Page with Flexbox Layout\nDESCRIPTION: HTML markup for a 404 error page that uses flexbox to center content and display an RxJS-themed image alongside an error message. The template includes container elements with flex-wrap and center alignment classes.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/file-not-found.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"nf-container l-flex-wrap flex-center\">\n    <img src=\"assets/images/support/rxjs-404.png\" width=\"300\" height=\"300\"/>\n    <div class=\"nf-response l-flex-wrap\">\n        <h1 class=\"no-toc\">Page Not Found</h1>\n        <p>We're sorry. The page you are looking for cannot be found.</p>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Post-Merge Branch Cleanup\nDESCRIPTION: Series of commands to clean up after PR is merged, including deleting remote and local branches\nSOURCE: https://github.com/reactivex/rxjs/blob/master/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin --delete my-fix-branch\ngit checkout master -f\ngit branch -D my-fix-branch\ngit pull --ff upstream master\n```\n\n----------------------------------------\n\nTITLE: Defining bufferWhen Marble Diagram in RxJS\nDESCRIPTION: This marble diagram shows how the bufferWhen operator collects values from a source stream into buffers. Each buffer is emitted when a closing notifier (represented by 's') produces a value (x, y, z). The diagram includes style definitions and shows input/output streams.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/tools/marbles/diagrams/bufferWhen.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[styles]\nevent_radius = 33\noperator_height = 60\ncompletion_height = 80\n\n---a---b---c---d---e---f---g---h---|\n\n-------------s\n\n> bufferWhen()\n\n-------------x------------y--------(z|)\nx := [a, b, c]\ny := [d, e, f]\nz := [g, h]\n```\n\n----------------------------------------\n\nTITLE: Styling Black Lives Matter Page Components with CSS\nDESCRIPTION: CSS styles defining the layout and appearance of a Black Lives Matter solidarity statement page, including background color, text formatting, and container properties.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/apps/rxjs.dev/content/blackLivesMatter.md#2025-04-21_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.blm-background {\n    background-color: black; \n    color: white; \n    display: flex; \n    min-height: calc(100vh + 64px);\n    margin: -20px -50px;\n}\n\n.text-container.blm-container {\n    text-align: center;\n    line-height: inherit;\n    max-width: inherit;\n}\n\n.blm-text {\n    font-size: 2rem;\n    line-height: inherit\n}\n\n.blm-list-item {\n    margin: 10px 0\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Breaking Change Format\nDESCRIPTION: Example showing how to format breaking changes in commit messages for RxJS. Breaking changes must be prefixed with 'BREAKING CHANGE:' followed by a space or two newlines.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nBREAKING CHANGE:\n```\n\n----------------------------------------\n\nTITLE: Replacing pairs Function in RxJS\nDESCRIPTION: Use from with Object.entries instead of the deprecated pairs function.\nSOURCE: https://github.com/reactivex/rxjs/blob/master/packages/rxjs/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfrom(Object.entries(obj))\n```"
  }
]