[
  {
    "owner": "spring-projects",
    "repo": "spring-grpc",
    "content": "TITLE: Defining gRPC Service Using Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for a simple gRPC service that includes a greeting service with synchronous and streaming methods. This defines message types and service endpoints that will be used to generate Java service stubs.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\noption java_multiple_files = true;\noption java_package = \"org.springframework.grpc.sample.proto\";\noption java_outer_classname = \"HelloWorldProto\";\n\n// The greeting service definition.\nservice Simple {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {\n  }\n  rpc StreamHello(HelloRequest) returns (stream HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Channel Properties\nDESCRIPTION: This snippet shows how to configure a named gRPC channel in the application.properties file. It sets the address for the 'local' channel to '0.0.0.0:9090'.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_16\n\nLANGUAGE: properties\nCODE:\n```\nspring.grpc.client.channels.local.address=0.0.0.0:9090\n```\n\n----------------------------------------\n\nTITLE: Simple gRPC Service Implementation\nDESCRIPTION: Basic implementation of a gRPC service using Spring's @Service annotation. This class extends the generated service base class to provide the actual implementation of the gRPC service methods.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class GrpcServerService extends SimpleGrpc.SimpleImplBase {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service in Spring\nDESCRIPTION: Java implementation of the gRPC service defined in the Protocol Buffer file. This Spring service extends the generated stub class and implements both synchronous and streaming methods for the greeting service.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Service\nclass GrpcServerService extends SimpleGrpc.SimpleImplBase {\n\n    private static Log log = LogFactory.getLog(GrpcServerService.class);\n\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        log.info(\"Hello \" + req.getName());\n        if (req.getName().startsWith(\"error\")) {\n            throw new IllegalArgumentException(\"Bad name: \" + req.getName());\n        }\n        if (req.getName().startsWith(\"internal\")) {\n            throw new RuntimeException();\n        }\n        HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello ==> \" + req.getName()).build();\n        responseObserver.onNext(reply);\n        responseObserver.onCompleted();\n    }\n\n    @Override\n    public void streamHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        log.info(\"Hello \" + req.getName());\n        int count = 0;\n        while (count < 10) {\n            HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello(\" + count + \") ==> \" + req.getName()).build();\n            responseObserver.onNext(reply);\n            count++;\n            try {\n                Thread.sleep(1000L);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                responseObserver.onError(e);\n                return;\n            }\n        }\n        responseObserver.onCompleted();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependency Management for Spring gRPC\nDESCRIPTION: Gradle dependency management configuration for Spring gRPC. This uses Gradle's platform feature to import the spring-grpc-dependencies BOM for managing versions of all Spring gRPC dependencies.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: gradle\nCODE:\n```\ndependencies {\n  implementation platform(\"org.springframework.grpc:spring-grpc-dependencies:0.8.0-SNAPSHOT\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a gRPC Client Stub in Java\nDESCRIPTION: This snippet shows how to create a gRPC client stub using a GrpcChannelFactory. It creates a SimpleBlockingStub for the SimpleGrpc service, connecting to a local server on port 9090.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Bean\nSimpleGrpc.SimpleBlockingStub stub(GrpcChannelFactory channels) {\n\treturn SimpleGrpc.newBlockingStub(channels.createChannel(\"0.0.0.0:9090\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application with gRPC Server\nDESCRIPTION: Main Spring Boot application class that initializes the gRPC server. This standard Spring Boot application class ensures that the gRPC server is started automatically with the application.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\npublic class GrpcServerApplication {\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(GrpcServerApplication.class, args);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Named gRPC Channel in Java\nDESCRIPTION: This example demonstrates how to create a named gRPC channel using GrpcChannelFactory. It creates a SimpleBlockingStub for the SimpleGrpc service using a channel named 'local'.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@Bean\nSimpleGrpc.SimpleBlockingStub stub(GrpcChannelFactory channels) {\n\treturn SimpleGrpc.newBlockingStub(channels.createChannel(\"local\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Server with HTTP Basic Authentication\nDESCRIPTION: Example of testing the gRPC server using gRPCurl with HTTP Basic authentication, encoding username and password in the Authorization header.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-secure/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -H \"Authorization: Basic $(echo -n user:user | base64)\" -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n{\n  \"message\": \"Hello ==>\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Stubs Using Maven\nDESCRIPTION: Maven command to generate Java service stubs from the Protocol Buffer definition. This command compiles the .proto file and creates the necessary Java classes for implementing the gRPC service.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw clean package\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Server with User Header Authentication\nDESCRIPTION: Example of testing the gRPC server using gRPCurl with a custom X-User header for authentication, sending a simple request to the SayHello method.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-secure/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -H \"X-User: user\" -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n{\n  \"message\": \"Hello ==>\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Stubs Using Gradle\nDESCRIPTION: Gradle command to generate Java service stubs from the Protocol Buffer definition. This command compiles the .proto file and creates the necessary Java classes for implementing the gRPC service.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service with gRPCurl\nDESCRIPTION: Demonstrates how to test the gRPC service using gRPCurl tool, making a request to the SayHello endpoint with a name parameter.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service with grpcurl\nDESCRIPTION: Shell command to test the running gRPC service using grpcurl. This sends a request to the SayHello method with a name parameter and retrieves the response from the server.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngrpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service with OAuth2 Authentication using gRPCurl\nDESCRIPTION: Commands to obtain an OAuth2 token and then test the gRPC service using gRPCurl. The example shows how to make an authenticated request to the 'SayHello' method with the response showing successful execution.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-oauth2/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ TOKEN=`curl -v spring:secret@localhost:43737/oauth2/token -d grant_type=client_credentials | jq -r .access_token`\n$ grpcurl -H \"Authorization: Bearer $TOKEN\" -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n```\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Spring Boot gRPC Application as Native Image\nDESCRIPTION: Demonstrates how to compile the Spring Boot gRPC application to a native image using GraalVM and the Maven native plugin. Shows faster startup times compared to the JVM version.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-reactive/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/demo\n```\n\nLANGUAGE: log\nCODE:\n```\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:36:54.365-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Starting AOT-processed DemoApplication using Java 17.0.5 with PID 554359 (/home/dsyer/dev/scratch/demo/target/demo started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:36:54.366-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:36:54.377-08:00  INFO 554359 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.046 seconds (process running for 0.052)\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Service with grpcurl\nDESCRIPTION: Shows how to use grpcurl to test the Simple.SayHello gRPC service endpoint. The example sends a request with a name field and receives a formatted response message.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-reactive/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n```\n\nLANGUAGE: log\nCODE:\n```\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Server with gRPCurl\nDESCRIPTION: This snippet demonstrates how to test the gRPC server using gRPCurl. It shows the command to send a request to the 'SayHello' method of the 'Simple' service and the expected response.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-tomcat-secure/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Native Image\nDESCRIPTION: Shows the process of compiling the Spring Boot application to a native image using GraalVM and running it. Includes the startup output showing faster startup times compared to JVM version.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/demo\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:36:54.365-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Starting AOT-processed DemoApplication using Java 17.0.5 with PID 554359 (/home/dsyer/dev/scratch/demo/target/demo started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:36:54.366-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:36:54.377-08:00  INFO 554359 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.046 seconds (process running for 0.052)\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Server with gRPCurl\nDESCRIPTION: This snippet demonstrates how to test the gRPC server using gRPCurl, a command-line tool for interacting with gRPC servers. It sends a request to the 'SayHello' method of the 'Simple' service.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-webflux/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Server with gRPCurl\nDESCRIPTION: This snippet demonstrates how to test the gRPC server using gRPCurl. It shows the command to send a request to the SayHello method of the Simple service and the expected JSON response.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing gRPC Server with gRPCurl\nDESCRIPTION: This snippet demonstrates how to test the gRPC server using gRPCurl. It sends a request to the 'Simple.SayHello' method and displays the response.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-tomcat/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ grpcurl -d '{\"name\":\"Hi\"}' -plaintext localhost:9090 Simple.SayHello\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Server\nDESCRIPTION: Command and output for starting the Spring Boot gRPC application using Maven wrapper, showing successful initialization of gRPC services on port 9090.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-secure/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Maven\nDESCRIPTION: Maven command to run the Spring Boot application with the implemented gRPC service. This starts the gRPC server on the default port (9090).\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw spring-boot:run\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Application with Maven\nDESCRIPTION: Demonstrates how to run the Spring Boot gRPC sample application using Maven wrapper and shows the startup log output. The server starts on port 9090 and registers several gRPC services.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-reactive/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n```\n\nLANGUAGE: log\nCODE:\n```\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Application with Gradle\nDESCRIPTION: Gradle command to run the Spring Boot application with the implemented gRPC service. This starts the gRPC server on the default port (9090).\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./gradle bootRun\n```\n\n----------------------------------------\n\nTITLE: Starting Spring Boot gRPC Server\nDESCRIPTION: Shows the startup output of the Spring Boot gRPC server, including service registration and port configuration. The server starts on port 9090 and registers multiple gRPC services including a Simple service, Health service, and Server Reflection service.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Server with Maven\nDESCRIPTION: Command to start the Spring Boot gRPC server using Maven wrapper. The output shows the Spring Boot banner and server startup logs including registration of gRPC services on port 9090.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-oauth2/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:test-run\n```\n\nLANGUAGE: text\nCODE:\n```\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.4.1)\n\n...\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2025-01-28T07:10:35.363Z  INFO 1218185 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 44207 (http) with context path '/'\n2025-01-28T07:10:35.394Z  INFO 1218185 --- [           main] o.s.e.b.s.e.m.SpringBootApplicationMain  : Started SpringBootApplicationMain in 2.802 seconds (process running for 3.291)\n2025-01-28T07:10:35.749Z  INFO 1218050 --- [grpc-server] [           main] o.s.grpc.server.NettyGrpcServerFactory   : Registered gRPC service: Simple\n2025-01-28T07:10:35.749Z  INFO 1218050 --- [grpc-server] [           main] o.s.grpc.server.NettyGrpcServerFactory   : Registered gRPC service: grpc.reflection.v1.ServerReflection\n2025-01-28T07:10:35.749Z  INFO 1218050 --- [grpc-server] [           main] o.s.grpc.server.NettyGrpcServerFactory   : Registered gRPC service: grpc.health.v1.Health\n2025-01-28T07:10:35.835Z  INFO 1218050 --- [grpc-server] [           main] o.s.g.s.lifecycle.GrpcServerLifecycle    : gRPC Server started, listening on address: [/[0:0:0:0:0:0:0:0]:9090]\n2025-01-28T07:10:35.844Z  INFO 1218050 --- [grpc-server] [           main] o.s.grpc.sample.GrpcServerApplication    : Started GrpcServerApplication in 5.072 seconds (process running for 5.419)\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Native Image for Spring gRPC Application\nDESCRIPTION: Command to execute the test suite in a native image environment to validate application compatibility.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-gradle.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gradlew nativeTest\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Server\nDESCRIPTION: This snippet shows the command to run the Spring Boot application and the resulting console output. It demonstrates the startup process, including the registration of gRPC services and the server listening on port 9090.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-tomcat-secure/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Server\nDESCRIPTION: This snippet shows how to start the Spring Boot gRPC server using Maven. It includes the command to run the application and sample output showing successful startup and registration of gRPC services.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Server\nDESCRIPTION: This snippet shows how to run the Spring Boot gRPC server using Maven. It includes the server startup logs, displaying information about the gRPC services registered and the port the server is listening on.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-tomcat/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Server\nDESCRIPTION: This snippet shows how to run the Spring Boot gRPC server using Maven. It displays the startup logs, including information about registered gRPC services and the server's listening port.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-webflux/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n...\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:32:24.934-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication using Java 17.0.5 with PID 551632 (/home/dsyer/dev/scratch/demo/target/classes started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:32:24.938-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:32:25.377-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcHealthServiceAutoConfiguration\n2022-12-08T05:32:25.416-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerAutoConfiguration\n2022-12-08T05:32:25.425-08:00  WARN 551632 --- [           main] ocalVariableTableParameterNameDiscoverer : Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: net.devh.boot.grpc.server.autoconfigure.GrpcServerFactoryAutoConfiguration\n2022-12-08T05:32:25.427-08:00  INFO 551632 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:32:25.712-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:32:25.820-08:00  INFO 551632 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:32:25.831-08:00  INFO 551632 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 1.264 seconds (process running for 1.623)\n```\n\n----------------------------------------\n\nTITLE: Running Spring gRPC Docker Container\nDESCRIPTION: Command to run the containerized Spring gRPC application after building the Docker image.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-gradle.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm grpc-server:0.5.0-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Expected gRPC Response Format\nDESCRIPTION: The expected JSON response from the gRPC service when calling the SayHello method. This shows the structure of the HelloReply message with the formatted greeting message.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n{\n  \"message\": \"Hello ==\\u003e Hi\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot gRPC Client Sample\nDESCRIPTION: This snippet shows how to run the Spring Boot gRPC Client sample application using Maven. It includes the command to execute and a sample of the expected output.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-client/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:run\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.4.4)\n\n...\n2025-02-27T09:21:19.515Z  INFO 1211091 --- [grpc-client] [           main] o.s.g.sample.GrpcClientApplication  : Started GrpcClientApplication in 0.909 seconds (process running for 1.172)\nmessage: \"Hello ==> Alien\"\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Spring Boot gRPC Server as Native Image\nDESCRIPTION: This snippet shows how to compile the Spring Boot application to a native image using GraalVM and run it. It includes the commands for compilation and execution, along with the console output demonstrating faster startup times.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-tomcat-secure/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/demo\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:36:54.365-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Starting AOT-processed DemoApplication using Java 17.0.5 with PID 554359 (/home/dsyer/dev/scratch/demo/target/demo started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:36:54.366-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:36:54.377-08:00  INFO 554359 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.046 seconds (process running for 0.052)\n```\n\n----------------------------------------\n\nTITLE: Compiling Spring Boot gRPC Server to Native Image\nDESCRIPTION: This snippet shows how to compile the Spring Boot gRPC server to a native image using GraalVM and run it. It includes the Maven command for compilation and the output of running the native image.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-webflux/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/demo\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:36:54.365-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Starting AOT-processed DemoApplication using Java 17.0.5 with PID 554359 (/home/dsyer/dev/scratch/demo/target/demo started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:36:54.366-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:36:54.377-08:00  INFO 554359 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.046 seconds (process running for 0.052)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spring Boot gRPC Client as Native Image\nDESCRIPTION: This snippet demonstrates how to build and run the Spring Boot gRPC Client application as a native image using GraalVM. It includes commands for compiling and executing the native image.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-client/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/grpc-client-sample\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running Spring Boot gRPC Server as Native Image\nDESCRIPTION: This snippet shows how to compile the Spring Boot gRPC server to a native image using GraalVM and Maven, and then run the resulting native executable. It includes the startup logs of the native image.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-tomcat/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/demo\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:36:54.365-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Starting AOT-processed DemoApplication using Java 17.0.5 with PID 554359 (/home/dsyer/dev/scratch/demo/target/demo started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:36:54.366-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:36:54.377-08:00  INFO 554359 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.046 seconds (process running for 0.052)\n```\n\n----------------------------------------\n\nTITLE: Compiling Spring Boot gRPC Server to Native Image\nDESCRIPTION: Commands and output for compiling the Spring Boot gRPC application to a native image using GraalVM and running it, showing faster startup time compared to the JVM version.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-secure/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw -Pnative native:compile\n$ ./target/demo\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v3.0.0)\n\n2022-12-08T05:36:54.365-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Starting AOT-processed DemoApplication using Java 17.0.5 with PID 554359 (/home/dsyer/dev/scratch/demo/target/demo started by dsyer in /home/dsyer/dev/scratch/demo)\n2022-12-08T05:36:54.366-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: \"default\"\n2022-12-08T05:36:54.377-08:00  INFO 554359 --- [           main] g.s.a.GrpcServerFactoryAutoConfiguration : Detected grpc-netty: Creating NettyGrpcServerFactory\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: Simple, bean: grpcServerService, class: com.example.demo.GrpcServerService\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.health.v1.Health, bean: grpcHealthService, class: io.grpc.protobuf.services.HealthServiceImpl\n2022-12-08T05:36:54.392-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.AbstractGrpcServerFactory    : Registered gRPC service: grpc.reflection.v1alpha.ServerReflection, bean: protoReflectionService, class: io.grpc.protobuf.services.ProtoReflectionService\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] n.d.b.g.s.s.GrpcServerLifecycle          : gRPC Server started, listening on address: *, port: 9090\n2022-12-08T05:36:54.396-08:00  INFO 554359 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 0.046 seconds (process running for 0.052)\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Management for Spring gRPC\nDESCRIPTION: Maven dependency management configuration for Spring gRPC. This imports the spring-grpc-dependencies BOM to manage versions of all Spring gRPC dependencies in a Spring Boot application.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.grpc</groupId>\n            <artifactId>spring-grpc-dependencies</artifactId>\n            <version>0.8.0-SNAPSHOT</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories for Spring gRPC\nDESCRIPTION: Maven repository configuration for accessing Spring Milestone and Snapshot repositories. This allows fetching Spring gRPC dependencies from the Spring repositories when using milestone or snapshot versions.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n  <repositories>\n    <repository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n    <repository>\n      <id>spring-snapshots</id>\n      <name>Spring Snapshots</name>\n      <url>https://repo.spring.io/snapshot</url>\n      <releases>\n        <enabled>false</enabled>\n      </releases>\n    </repository>\n  </repositories>\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Repositories for Spring gRPC\nDESCRIPTION: Gradle repository configuration for accessing Spring Milestone and Snapshot repositories. This allows fetching Spring gRPC dependencies from the Spring repositories when using milestone or snapshot versions.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nrepositories {\n  mavenCentral()\n  maven { url 'https://repo.spring.io/milestone' }\n  maven { url 'https://repo.spring.io/snapshot' }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Spring Boot Native Image with Maven\nDESCRIPTION: This command builds a lightweight container image for the Spring Boot application using Cloud Native Buildpacks and the native profile.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/HELP.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw spring-boot:build-image -Pnative\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Spring gRPC Project\nDESCRIPTION: Command to build a lightweight container image for the Spring gRPC project using Cloud Native Buildpacks. This method is recommended for those familiar with Spring Boot container images support.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-maven.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mvnw spring-boot:build-image -Pnative\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Gradle for Spring gRPC Application\nDESCRIPTION: Command to build a lightweight container image for a Spring gRPC application using Cloud Native Buildpacks via Gradle.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-gradle.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gradlew bootBuildImage\n```\n\n----------------------------------------\n\nTITLE: Compiling Spring Boot Native Executable\nDESCRIPTION: This command compiles the Spring Boot application into a native executable using GraalVM native-image compiler.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/HELP.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw native:compile -Pnative\n```\n\n----------------------------------------\n\nTITLE: Compiling Native Executable for Spring gRPC with GraalVM\nDESCRIPTION: Command to compile the Spring gRPC application into a native executable using GraalVM native-image compiler via Gradle.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-gradle.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gradlew nativeCompile\n```\n\n----------------------------------------\n\nTITLE: Compiling Native Executable for Spring gRPC Project\nDESCRIPTION: Command to compile a native executable for the Spring gRPC project using GraalVM native-image compiler. This option provides more flexibility for exploring additional features.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-maven.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mvnw native:compile -Pnative\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Native Executable\nDESCRIPTION: This command runs the compiled Spring Boot native executable located in the target directory.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/HELP.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ target/demo\n```\n\n----------------------------------------\n\nTITLE: Running Native Executable of Spring gRPC Application\nDESCRIPTION: Command to run the Spring gRPC application after it has been compiled to a native executable.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-gradle.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ build/native/nativeCompile/grpc-server\n```\n\n----------------------------------------\n\nTITLE: Running Native Executable for Spring gRPC Project\nDESCRIPTION: Command to run the native executable compiled for the Spring gRPC project. This executes the application directly without a JVM.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-maven.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ target/grpc-server-sample\n```\n\n----------------------------------------\n\nTITLE: Running Spring Boot Native Image Container\nDESCRIPTION: This command runs the built Spring Boot native image container, mapping port 8080 from the container to the host.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/HELP.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -p 8080:8080 demo:0.0.1-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Spring gRPC Project\nDESCRIPTION: Command to run the Docker container created for the Spring gRPC project. This allows you to execute the application as a container.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-maven.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm grpc-server-sample:0.5.0-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Native Image\nDESCRIPTION: This command runs the existing test suite in a native image to validate the compatibility of the application.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server-netty-shaded/HELP.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./mvnw test -PnativeTest\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Native Image for Spring gRPC Project\nDESCRIPTION: Command to run the existing test suite in a native image for the Spring gRPC project. This is an efficient way to validate the compatibility of the application in a native environment.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/samples/grpc-server/HELP-maven.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./mvnw test -PnativeTest\n```\n\n----------------------------------------\n\nTITLE: Building Antora Site for Spring gRPC Documentation\nDESCRIPTION: This Maven command builds the Antora site for Spring gRPC documentation. It processes resources and runs Antora with the 'docs' profile. The resulting site can be viewed by opening the generated index.html file.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/spring-grpc-docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./mvnw -pl spring-grpc-docs process-resources antora -P docs\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting and Javadoc Generation for Spring gRPC\nDESCRIPTION: This command applies code formatting using Spring JavaFormat and generates Javadoc documentation. The -Pjavadoc profile enables Javadoc processing to avoid long build times during development.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./mvnw spring-javaformat:apply javadoc:javadoc -Pjavadoc\n```\n\n----------------------------------------\n\nTITLE: Formatting Git Commit Message with DCO for Spring gRPC\nDESCRIPTION: Example of a properly formatted Git commit message adhering to the Developer Certificate of Origin (DCO) rules. It includes a Signed-off-by line and references a resolved issue number.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/CONTRIBUTING.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis is my commit message\n\nSigned-off-by: Random J Developer <random@developer.example.org>\n\n[resolves #1234]\n```\n\n----------------------------------------\n\nTITLE: Regex Pattern for Apache License Header\nDESCRIPTION: Regular expression pattern that matches the standard Apache License 2.0 header with dynamic copyright year matching. The pattern uses literal quotes (\\Q...\\E) for exact text matching and includes regex for flexible year ranges.\nSOURCE: https://github.com/spring-projects/spring-grpc/blob/main/src/checkstyle/checkstyle-header.txt#2025-04-19_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^\\Q/*\\E$\n^\\Q * Copyright \\E20\\d\\d(\\-20\\d\\d)?\\Q the original author or authors.\\E$\n^\\Q *\\E$\n^\\Q * Licensed under the Apache License, Version 2.0 (the \"License\");\\E$\n^\\Q * you may not use this file except in compliance with the License.\\E$\n^\\Q * You may obtain a copy of the License at\\E$\n^\\Q *\\E$\n^\\Q *      https://www.apache.org/licenses/LICENSE-2.0\\E$\n^\\Q *\\E$\n^\\Q * Unless required by applicable law or agreed to in writing, software\\E$\n^\\Q * distributed under the License is distributed on an \"AS IS\" BASIS,\\E$\n^\\Q * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\E$\n^\\Q * See the License for the specific language governing permissions and\\E$\n^\\Q * limitations under the License.\\E$\n```"
  }
]