[
  {
    "owner": "taosdata",
    "repo": "tdengine",
    "content": "TITLE: Basic SQL Query in TDengine\nDESCRIPTION: Demonstrates a basic SQL query on the 'meters' supertable, filtering for voltage greater than 230V, ordering by timestamp descending, and limiting to 5 results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM meters \nWHERE voltage > 230 \nORDER BY ts DESC\nLIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Multi-Table Insertion with Automatic Creation\nDESCRIPTION: Shows how to insert data into multiple tables with automatic table creation in a single SQL statement. This method is efficient for initializing and populating multiple tables simultaneously.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO d1001 USING meters TAGS (\"California.SanFrancisco\", 2) VALUES \n    (\"2018-10-03 14:38:05\", 10.2, 220, 0.23),\n    (\"2018-10-03 14:38:15\", 12.6, 218, 0.33),\n    (\"2018-10-03 14:38:25\", 12.3, 221, 0.31) \nd1002 USING meters TAGS (\"California.SanFrancisco\", 3) VALUES \n    (\"2018-10-03 14:38:04\", 10.2, 220, 0.23),\n    (\"2018-10-03 14:38:14\", 10.3, 218, 0.25),\n    (\"2018-10-03 14:38:24\", 10.1, 220, 0.22)\nd1003 USING meters TAGS (\"California.LosAngeles\", 2) VALUES\n    (\"2018-10-03 14:38:06\", 11.5, 221, 0.35),\n    (\"2018-10-03 14:38:16\", 10.4, 220, 0.36),\n    (\"2018-10-03 14:38:26\", 10.3, 220, 0.33)\n;\n```\n\n----------------------------------------\n\nTITLE: Using HikariCP Connection Pool with TDengine in Java\nDESCRIPTION: This code shows how to use HikariCP connection pool with TDengine in Java. It includes setting up the connection pool and obtaining connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/HikariDemo.java:connection_pool}}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in TDengine SQL\nDESCRIPTION: SQL syntax for creating basic tables and subtables with various options including column definitions, tags, and table options like TTL and comments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] [db_name.]tb_name (create_definition [, create_definition] ...) [table_options]\n\nCREATE TABLE create_subtable_clause\n\nCREATE TABLE [IF NOT EXISTS] [db_name.]tb_name (create_definition [, create_definition] ...)\n    [TAGS (create_definition [, create_definition] ...)]\n    [table_options]\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using WebSocket Connection in C\nDESCRIPTION: This C snippet demonstrates how to create a database and a supertable in TDengine using the C connector with a WebSocket connection. It sets up a WebSocket connection to the TDengine server and executes SQL statements to create the database and table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n```c  title=\"WebSocket Connection\"\n{{#include docs/examples/c-ws/create_db_demo.c:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using Rust\nDESCRIPTION: This Rust snippet shows how to create a database and a supertable in TDengine using the Rust connector. The snippet uses the native TDengine client library to connect to the TDengine database and execute SQL commands for database and supertable creation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n{{#include docs/examples/rust/nativeexample/examples/createdb.rs:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying aggregate statistics across all records\nDESCRIPTION: SQL query to calculate the average, maximum, and minimum values across all records in the 'meters' supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(current), MAX(voltage), MIN(phase) FROM test.meters;\n```\n\n----------------------------------------\n\nTITLE: Defining Schemaless Writing Line Protocol\nDESCRIPTION: This snippet explains the structure of the schemaless writing line protocol used in TDengine. It details the format for measurement, tag_set, field_set, and timestamp, along with their respective formatting requirements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```text\nmeasurement,tag_set field_set timestamp\n```\n```\n\n----------------------------------------\n\nTITLE: Parse Command-Line Arguments for Efficient Writing in Java\nDESCRIPTION: This snippet includes command-line argument parsing for a Java application that efficiently writes data to TDengine. It specifies parameters such as batch size, cache size, database name, and Kafka usage configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n   -b,--batchSizeByRow <arg>             Specifies the `batchSizeByRow` parameter for Efficient Writing, default is 1000  \n   -c,--cacheSizeByRow <arg>             Specifies the `cacheSizeByRow` parameter for Efficient Writing, default is 10000  \n   -d,--dbName <arg>                     Specifies the database name, default is `test`  \n      --help                             Prints help information  \n   -K,--useKafka                         Enables Kafka mode, creating a producer to send messages and a consumer to receive messages for writing to TDengine. Otherwise, uses worker threads to subscribe to simulated data for writing.  \n   -r,--readThreadCount <arg>            Specifies the number of worker threads, default is 5. In Kafka mode, this parameter also determines the number of producer and consumer threads.  \n   -R,--rowsPerSubTable <arg>            Specifies the number of rows to write per child table, default is 100  \n   -s,--subTableNum <arg>                Specifies the total number of child tables, default is 1000000  \n   -w,--writeThreadPerReadThread <arg>   Specifies the number of write threads per worker thread, default is 5  \n```\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using Go\nDESCRIPTION: This Go snippet shows how to create a database and a supertable in TDengine using the Go connector. It connects to the TDengine database and executes SQL commands to create the `power` database and the `meters` supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{#include docs/examples/go/sqlquery/main.go:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Utilizing JDBC ResultSet Interface in Java\nDESCRIPTION: This section details the methods within the Java JDBC ResultSet interface used for data retrieval and manipulation from a database query result set. It explains each method's purpose, the parameters they accept, their expected return values, and any exceptions that might be thrown. These methods are core to traversing and extracting data from a result set in JDBC, providing functionality such as reading column values in various data types and moving the cursor.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_43\n\nLANGUAGE: Java\nCODE:\n```\n\"ResultSetMetaData getMetaData() throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"boolean next() throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"void close() throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"boolean wasNull() throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"String getString(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"boolean getBoolean(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"byte getByte(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"short getShort(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"int getInt(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"long getLong(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"float getFloat(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"double getDouble(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"byte[] getBytes(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"Date getDate(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"Time getTime(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"Timestamp getTimestamp(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"String getNString(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"Object getObject(int columnIndex) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"String getString(String columnLabel) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"boolean getBoolean(String columnLabel) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"byte getByte(String columnLabel) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"short getShort(String columnLabel) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"int getInt(String columnLabel) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"long getLong(String columnLabel) throws SQLException\"\n```\n\nLANGUAGE: Java\nCODE:\n```\n\"float getFloat(String columnLabel) throws SQLException\"\n```\n\n----------------------------------------\n\nTITLE: Establishing REST Connection to TDengine in Go\nDESCRIPTION: This code demonstrates how to establish a REST connection to TDengine database using Go. It includes connection initialization and error handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/restexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Typed Object from ResultSet in Java\nDESCRIPTION: Generic method for retrieving the value of a specified column as a specified Java type using type conversion. Allows direct conversion to desired types. Returns null if the value is NULL and throws SQLException if type conversion is not supported.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_61\n\nLANGUAGE: Java\nCODE:\n```\n<T> T getObject(String columnLabel, Class<T> type) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Create Dnode in TDengine CLI\nDESCRIPTION: This snippet shows how to add a new dnode to an existing TDengine cluster using the TDengine CLI. The create dnode command is used, specifying the endpoint (fqdn:port) of the new dnode. The endpoint should be enclosed in double quotes. After adding the dnode, the show dnodes command can be used to verify that the new node has joined the cluster successfully.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"create dnode \\\"h2.taosdata.com:6030\\\"\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"show dnodes;\"\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: MockDataSource\nDESCRIPTION: This class simulates a data source, generating data for a specific range of sub-tables. It generates data in a round-robin fashion, producing one data point for each sub-table sequentially to mimic a real-world scenario.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/MockDataSource.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Scalar Function Interface Definition in C\nDESCRIPTION: This code snippet defines the interface for a scalar function in C used within TDengine. It takes an input data block and outputs a result column. The function's purpose is to transform input data into output data, suitable for calculating and transforming single data values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint32_t scalarfn(SUdfDataBlock* inputDataBlock, SUdfColumn *resultColumn);\n```\n\n----------------------------------------\n\nTITLE: Creating a Database in TDengine SQL\nDESCRIPTION: SQL syntax for creating a new database in TDengine with various configuration options including vgroups, precision, replica settings, memory allocation, caching configuration, and data retention policies.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE [IF NOT EXISTS] db_name [database_options]\n\ndatabase_options:\n    database_option ...\n\ndatabase_option: {\n    VGROUPS value\n  | PRECISION {'ms' | 'us' | 'ns'}\n  | REPLICA value\n  | BUFFER value\n  | PAGES value\n  | PAGESIZE  value\n  | CACHEMODEL {'none' | 'last_row' | 'last_value' | 'both'}\n  | CACHESIZE value\n  | COMP {0 | 1 | 2}\n  | DURATION value\n  | MAXROWS value\n  | MINROWS value\n  | KEEP value\n  | KEEP_TIME_OFFSET value\n  | STT_TRIGGER value\n  | SINGLE_STABLE {0 | 1}\n  | TABLE_PREFIX value\n  | TABLE_SUFFIX value\n  | DNODES value\n  | TSDB_PAGESIZE value\n  | WAL_LEVEL {1 | 2}\n  | WAL_FSYNC_PERIOD value\n  | WAL_RETENTION_PERIOD value\n  | WAL_RETENTION_SIZE value\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in Go\nDESCRIPTION: The Go snippet shows how to utilize parameter binding techniques with WebSocket connections to efficiently insert data into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/stmt/ws/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Checking URL Support in TDengine JDBC Driver\nDESCRIPTION: Method to determine if the driver supports a given URL format. Returns true if supported, false otherwise. Throws SQLException if the URL is illegal.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nboolean acceptsURL(String url) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Schemaless Raw Data Insertion with TTL and Request ID\nDESCRIPTION: Comprehensive schemaless insertion method combining TTL management and request ID tracking for enhanced data lifecycle control and distributed system traceability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nWS_RES *ws_schemaless_insert_raw_ttl_with_reqid(WS_TAOS *taos,\n                                                const char *lines,\n                                                int len,\n                                                int32_t *totalRows,\n                                                int protocol,\n                                                int precision,\n                                                int ttl,\n                                                uint64_t reqid)\n```\n\n----------------------------------------\n\nTITLE: TDengine Window Clause Syntax\nDESCRIPTION: This code snippet shows the general syntax for the window clause in TDengine. It supports session, state, interval, and event windows. The INTERVAL option supports sliding windows and data filling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nwindow_clause: {\n    SESSION(ts_col, tol_val)\n  | STATE_WINDOW(col)\n  | INTERVAL(interval_val [, interval_offset]) [SLIDING (sliding_val)] [FILL(fill_mod_and_val)]\n  | EVENT_WINDOW START WITH start_trigger_condition END WITH end_trigger_condition\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running TDengine in a Docker container\nDESCRIPTION: Command for starting a TDengine Docker container with the necessary port mappings for TDengine services.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 6030:6030 -p 6041:6041 -p 6043-6060:6043-6060 -p 6043-6060:6043-6060/udp tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregation Function Interfaces in Python\nDESCRIPTION: This code snippet defines the interface for creating custom aggregation functions in TDengine using Python. It specifies three functions: `start` (initializes the buffer), `reduce` (updates the buffer with input data), and `finish` (produces the final output from the buffer). The `datablock` type is specific to the TDengine UDF environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef start() -> bytes:\ndef reduce(inputs: datablock, buf: bytes) -> bytes\ndef finish(buf: bytes) -> output_type:\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using WebSocket in Python\nDESCRIPTION: This Python snippet demonstrates how to create a database and table in TDengine using a WebSocket connection. It establishes a WebSocket connection to the TDengine server and executes SQL commands to create a database named `power` and a supertable named `meters`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"WebSocket Connection\"\n{{#include docs/examples/python/create_db_ws.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Automatic Subtable Creation in TDengine SQL\nDESCRIPTION: Demonstrates how to insert multiple rows of data into a meters supertable while automatically creating subtables based on the tbname column. The example shows insertion of measurement data including location, groupId, timestamp, current, voltage, and phase values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO meters(tbname, location, groupId, ts, current, voltage, phase)\n                VALUES ('d31001', 'California.SanFrancisco', 2, '2021-07-13 14:06:34.630', 10.2, 219, 0.32)\n                ('d31001', 'California.SanFrancisco', 2, '2021-07-13 14:06:35.779', 10.15, 217, 0.33)\n                ('d31002', NULL, 2, '2021-07-13 14:06:34.255', 10.15, 217, 0.33)\n```\n\n----------------------------------------\n\nTITLE: Query with Column Calculation and LIMIT\nDESCRIPTION: Query demonstrating column arithmetic, aliasing, and LIMIT with OFFSET.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSELECT (col1 + col2) AS 'complex' FROM tb1 WHERE ts > '2018-06-01 08:00:00.000' AND col2 > 1.2 LIMIT 10 OFFSET 5;\n```\n\n----------------------------------------\n\nTITLE: Creating Users in TDengine SQL\nDESCRIPTION: SQL command to create a new user with configurable system information and database creation permissions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate user user_name pass'password' [sysinfo {1|0}] [createdb {1|0}]\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate user test pass 'abc123!@#' sysinfo 1\n```\n\n----------------------------------------\n\nTITLE: Defining Anomaly Detection Service in Python\nDESCRIPTION: This code snippet illustrates the definition of a custom anomaly detection service in TDengine. It demonstrates subclassing the AbstractAnomalyDetectionService, implementing the execute method to identify the final data point in a series as an anomaly. Required libraries include the taosanalytics.service module, and the implementation is designed to be saved to a specific directory for service recognition by TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/02-algo/03-ad.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom taosanalytics.service import AbstractAnomalyDetectionService\n\n# Algorithm files must start with an underscore (\"_\") and end with \"Service\".\nclass _MyAnomalyDetectionService(AbstractAnomalyDetectionService):\n    \"\"\" Define a class inheriting from AbstractAnomalyDetectionService and implementing the abstract method of that class.  \"\"\"\n\n    # Name the algorithm using only lowercase ASCII characters.\n    name = 'myad'\n\n    # Include a description of the algorithm (recommended)\n    desc = \"\"\"return the last value as the anomaly data\"\"\"\n\n    def __init__(self):\n        \"\"\"Method to initialize the class\"\"\"\n        super().__init__()\n\n    def execute(self):\n        \"\"\" Implementation of algorithm logic\"\"\"\n\n        \"\"\"Create an array with length len(self.list) whose results are all 1, then set the final value in the array to -1 to indicate an anomaly\"\"\"\n        res = [1] * len(self.list)\n        res[-1] = -1\n\n        \"\"\"Return results\"\"\"\n        return res\n\n    def set_params(self, params):\n        \"\"\"This algorithm does not take any parameters, so this logic is not included.\"\"\"\n        return super().set_params(params)\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool for TDengine in Go\nDESCRIPTION: This code illustrates how to configure and use a connection pool for TDengine in Go. It includes setting connection pool parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/connpool/main.go:pool}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Byte Array from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a byte array from a database result set. Returns null if the value is NULL and throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_45\n\nLANGUAGE: Java\nCODE:\n```\nbyte[] getBytes(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Querying Data using WebSocket in Python\nDESCRIPTION: This Python snippet demonstrates querying data from TDengine using a WebSocket connection. It establishes a WebSocket connection and sends an SQL SELECT query to retrieve data from the `meters` supertable in the `power` database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"WebSocket Connection\"\n{{#include docs/examples/python/query_ws.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Subtables for Devices in TDengine\nDESCRIPTION: These SQL statements create subtables for four devices (d1001, d1002, d1003, and d1004) under each supertable (current_stb, voltage_stb, and phase_stb). Each subtable is created 'using' the corresponding supertable and is tagged with specific device information (deviceid, location, and group_id). This allows for storing data for each device separately while maintaining a consistent schema.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate table current_d1001 using current_stb(deviceid, location, group_id) tags(\"d1001\", \"California.SanFrancisco\", 2);\ncreate table current_d1002 using current_stb(deviceid, location, group_id) tags(\"d1002\", \"California.SanFrancisco\", 3);\ncreate table current_d1003 using current_stb(deviceid, location, group_id) tags(\"d1003\", \"California.LosAngeles\", 3);\ncreate table current_d1004 using current_stb(deviceid, location, group_id) tags(\"d1004\", \"California.LosAngeles\", 2);\n\ncreate table voltage_d1001 using voltage_stb(deviceid, location, group_id) tags(\"d1001\", \"California.SanFrancisco\", 2);\ncreate table voltage_d1002 using voltage_stb(deviceid, location, group_id) tags(\"d1002\", \"California.SanFrancisco\", 3);\ncreate table voltage_d1003 using voltage_stb(deviceid, location, group_id) tags(\"d1003\", \"California.LosAngeles\", 3);\ncreate table voltage_d1004 using voltage_stb(deviceid, location, group_id) tags(\"d1004\", \"California.LosAngeles\", 2);\n\ncreate table phase_d1001 using phase_stb(deviceid, location, group_id) tags(\"d1001\", \"California.SanFrancisco\", 2);\ncreate table phase_d1002 using phase_stb(deviceid, location, group_id) tags(\"d1002\", \"California.SanFrancisco\", 3);\ncreate table phase_d1003 using phase_stb(deviceid, location, group_id) tags(\"d1003\", \"California.LosAngeles\", 3);\ncreate table phase_d1004 using phase_stb(deviceid, location, group_id) tags(\"d1004\", \"California.LosAngeles\", 2);\n```\n\n----------------------------------------\n\nTITLE: Querying Data using Rust\nDESCRIPTION: This Rust snippet shows how to query data from TDengine using the Rust connector. It executes a SELECT query and processes the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n{{#include docs/examples/rust/nativeexample/examples/query.rs:query_data}}\n```\n```\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n{{#include docs/examples/rust/nativeexample/examples/query.rs:query_data_2}}\n```\n```\n\n----------------------------------------\n\nTITLE: Count Window Query in TDengine SQL\nDESCRIPTION: This query demonstrates the use of COUNT_WINDOW to divide data into windows based on a fixed number of rows (4 in this case). It returns the start time, end time, and count for each window.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, _wend, count(*) from t count_window(4);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records into Single Table\nDESCRIPTION: Shows how to insert multiple records into a single TDengine table in one SQL statement. This method is more efficient for batch inserts of time-series data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into d1001 values\n ( \"2018-10-03 14:38:05\", 10.2, 220, 0.23),\n ( \"2018-10-03 14:38:15\", 12.6, 218, 0.33),\n ( \"2018-10-03 14:38:25\", 12.3, 221, 0.31)\n```\n\n----------------------------------------\n\nTITLE: WebSocket JDBC Connection in Java\nDESCRIPTION: This snippet demonstrates how to use a WebSocket connection with JDBC to connect to TDengine. It specifies the driver class and the JDBC URL format to be used as well as the default connection port. The snippet also lists configuration parameters for WebSocket connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString webSocketUrl = \"jdbc:TAOS-WS://host:6041/power?user=root&password=taosdata\";\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to create a database and supertable in TDengine using the Node.js connector with WebSocket. It establishes a WebSocket connection and executes SQL commands to create the database and table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{{#include docs/examples/node/websocketexample/sql_example.js:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Simple Scalar UDF in Python\nDESCRIPTION: This Python code defines a simple scalar UDF that calculates ln(n^2 + 1) for a given integer input.  The `process` function iterates through the input `datablock`, retrieves the value from the first column of each row, and computes the result. The `init` and `destroy` functions are included but perform no actions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom math import log\n\ndef init():\n    pass\n\ndef destroy():\n    pass\n\ndef process(block):\n    rows, _ = block.shape()\n    return [log(block.data(i, 0) ** 2 + 1) for i in range(rows)]\n```\n\n----------------------------------------\n\nTITLE: Python REST SQL Execution with Request ID\nDESCRIPTION: Implementation of SQL query execution with request ID using Python REST connection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/reqid_rest.py}}\n```\n\n----------------------------------------\n\nTITLE: Verifying RESTful API with curl in Shell\nDESCRIPTION: Example of using curl to verify the TDengine RESTful API by listing all databases. Replace the hostname and port with your actual TDengine service details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -H \"Authorization: Basic cm9vdDp0YW9zZGF0YQ==\" \\\n  -d \"select name, ntables, status from information_schema.ins_databases;\" \\\n  h1.tdengine.com:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Computing Basic Syntax\nDESCRIPTION: Defines the fundamental syntax for creating a stream computation in TDengine, including stream options, watermark settings, and output table configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STREAM [IF NOT EXISTS] stream_name [stream_options] INTO stb_name[(field1_name, field2_name [COMPOSITE KEY], ...)] [TAGS (create_definition [, create_definition] ...)] SUBTABLE(expression) AS subquery [notification_definition]\nstream_options: {\n TRIGGER        [AT_ONCE | WINDOW_CLOSE | MAX_DELAY time | FORCE_WINDOW_CLOSE | CONTINUOUS_WINDOW_CLOSE [recalculate rec_time_val] ]\n WATERMARK      time\n IGNORE EXPIRED [0|1]\n DELETE_MARK    time\n FILL_HISTORY   [0|1] [ASYNC]\n IGNORE UPDATE  [0|1]\n}\n```\n\n----------------------------------------\n\nTITLE: Column-Specified Insertion\nDESCRIPTION: Example of inserting data with explicitly specified column names.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d1001 (ts, current, phase) VALUES ('2021-07-13 14:06:33.196', 10.27, 0.31);\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection to TDengine in Go\nDESCRIPTION: This code shows how to create a native connection to TDengine database using Go. It includes connection setup and error handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/cgoexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Using JDBC Efficient Writing\nDESCRIPTION: This snippet demonstrates how to enable and use the efficient writing feature of the TDengine JDBC driver, which enhances data ingestion performance by utilizing asynchronous writing and adjusting various configuration parameters for batch processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/java/src/main/java/com/taos/example/WSHighVolumeDemo.java:efficient_writing}}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Computation in TDengine SQL\nDESCRIPTION: SQL syntax for creating a stream computation in TDengine. This example creates a stream that calculates the average voltage from power meters using a 1-minute time window with a 30-second sliding interval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol AS\nSELECT _wstart, count(*), avg(voltage) FROM power.meters PARTITION BY tbname INTERVAL(1m) SLIDING(30s);\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate UDF in TDengine SQL\nDESCRIPTION: SQL syntax for creating an aggregate user-defined function with optional buffer size parameter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [OR REPLACE] AGGREGATE FUNCTION function_name AS library_path OUTPUTTYPE output_type [ BUFSIZE buffer_size ] [LANGUAGE 'C|Python'];\n```\n\n----------------------------------------\n\nTITLE: Multiple Records Insertion\nDESCRIPTION: Example showing how to insert multiple records in a single statement using different timestamp formats.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d1001 VALUES ('2021-07-13 14:06:32.272', 10.2, 219, 0.32) (1626164208000, 10.15, 217, 0.33);\n```\n\n----------------------------------------\n\nTITLE: Nested Query Example in TDengine SQL\nDESCRIPTION: Demonstrates a nested query on a smart meters table, where the inner query gets the latest data for each meter grouped by tbname, and the outer query aggregates maximum voltage by groupid.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT max(voltage),* \nFROM (\n    SELECT tbname,last_row(ts),voltage,current,phase,groupid,location \n    FROM meters \n    PARTITION BY tbname\n) \nGROUP BY groupid;\n```\n\n----------------------------------------\n\nTITLE: Creating Statement with ResultSet Options in Java\nDESCRIPTION: Creates a `Statement` object, specifying the `ResultSet` type and concurrency mode. It throws `SQLException` if the operation fails. The parameters control how the results of the query are handled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n\"`Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: TDengine Basic SQL Query Syntax\nDESCRIPTION: Complete SQL query syntax specification for TDengine including select statements, hints, joins, windows, and various clauses for data manipulation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT {DATABASE() | CLIENT_VERSION() | SERVER_VERSION() | SERVER_STATUS() | NOW() | TODAY() | TIMEZONE() | CURRENT_USER() | USER() }\n\nSELECT [hints] [DISTINCT] [TAGS] select_list\n    from_clause\n    [WHERE condition]\n    [partition_by_clause]\n    [interp_clause]\n    [window_clause]\n    [group_by_clause]\n    [order_by_clasue]\n    [SLIMIT limit_val [SOFFSET offset_val]]\n    [LIMIT limit_val [OFFSET offset_val]]\n    [>> export_file]\n```\n\n----------------------------------------\n\nTITLE: Main Class Implementation for Efficient Writing in Java\nDESCRIPTION: This Java class 'FastWriteExample' serves as the main entry point for the application, managing command-line arguments, creating threads for data writing, and monitoring the write speed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/FastWriteExample.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Aggregate Function Template in Python\nDESCRIPTION: This template provides the structure for creating aggregation UDFs in TDengine using Python. It includes `init`, `destroy`, `start` (to initialize the aggregation state), `reduce` (to update the state with input data), and `finish` (to produce the final output).  Serialization and deserialization of the state are necessary for the `start` and `reduce` functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef init():\n    #initialization\ndef destroy():\n    #destroy\ndef start() -> bytes:\n    #return serialize(init_state)\ndef reduce(inputs: datablock, buf: bytes) -> bytes\n    # deserialize buf to state\n    # reduce the inputs and state into new_state. \n    # use inputs.data(i, j) to access python object of location(i, j)\n    # serialize new_state into new_state_bytes\n    return new_state_bytes   \ndef finish(buf: bytes) -> output_type:\n    #return obj of type outputtype   \n```\n\n----------------------------------------\n\nTITLE: Using TDengine Native Connection in Go\nDESCRIPTION: Code example demonstrating how to establish a native connection to TDengine using the taosSql driver with a connection string and the database/sql package.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"database/sql\"\n    _ \"github.com/taosdata/driver-go/v3/taosSql\"\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Time-Windowed Aggregates with Fill for Smart Meter Data\nDESCRIPTION: Performs time-series analysis on smart meter current readings over 24 hours using 10-minute intervals. Calculates average, maximum, and 50th percentile (median) values with previous value fill strategy for NULL values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _WSTART, _WEND, AVG(current), MAX(current), APERCENTILE(current, 50) FROM meters\n  WHERE ts>=NOW-1d and ts<=now\n  INTERVAL(10m)\n  FILL(PREV);\n```\n\n----------------------------------------\n\nTITLE: Inserting Through Supertables\nDESCRIPTION: Demonstrates how to insert data directly into a supertable, which automatically routes the data to the corresponding subtable based on the specified 'tbname' column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into meters (tbname, ts, current, voltage, phase, location, group_id)\nvalues( \"d1001, \"2018-10-03 14:38:05\", 10.2, 220, 0.23, \"California.SanFrancisco\", 2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Access in taosX\nDESCRIPTION: Limits the REST and gRPC API access to internal networks in the taosX configuration, using a TOML configuration file. By default, these interfaces are exposed over non-encrypted protocols, presenting a security risk that can be mitigated by binding them to localhost.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[serve]\nlisten = \"127.0.0.1:6050\"\ngrpc = \"127.0.0.1:6055\"\n```\n\n----------------------------------------\n\nTITLE: Creating Connection Pool for TDengine in Rust\nDESCRIPTION: This code shows how to create and configure a connection pool for TDengine in Rust. It includes creating a pool with default parameters and customizing pool settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nlet pool: Pool<TaosBuilder> = TaosBuilder::from_dsn(\"taos:///\")\n    .unwrap()\n    .pool()\n    .unwrap();\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet pool: Pool<TaosBuilder> = Pool::builder(Manager::from_dsn(self.dsn.clone()).unwrap().0)\n    .max_size(88)  // Maximum number of connections\n    .build()\n    .unwrap();\n```\n\nLANGUAGE: rust\nCODE:\n```\nlet taos = pool.get()?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Param Methods for Different Data Types in Go\nDESCRIPTION: Provides methods to set various data types including Nchar, Timestamp, JSON, and Geometry via method chain calls with specific offset and value parameters\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_61\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Param) SetNchar(offset int, value string)\nfunc (p *Param) SetTimestamp(offset int, value time.Time, precision int)\nfunc (p *Param) SetJson(offset int, value []byte)\nfunc (p *Param) SetGeometry(offset int, value []byte)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine Database in Java\nDESCRIPTION: Method to establish a connection to the TDengine database using a URL and properties. Returns a Connection object or throws SQLException if connection fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nConnection connect(String url, java.util.Properties info) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Aggregation Query with Group By\nDESCRIPTION: Performs average voltage calculation grouped by groupid within a specific time range, demonstrating TDengine's aggregation capabilities\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/03-query.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT groupid, avg(voltage) \nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2023-01-01T00:00:00+08:00\" \nGROUP BY groupid;\n```\n\n----------------------------------------\n\nTITLE: Aggregate SQL Query with GROUP BY in TDengine\nDESCRIPTION: Shows an aggregate query using GROUP BY on the 'meters' supertable, calculating average voltage for each group within a specific time range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT groupid, avg(voltage) \nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2023-01-01T00:00:00+08:00\" \nGROUP BY groupid;\n```\n\n----------------------------------------\n\nTITLE: Basic Event Window Query in TDengine SQL\nDESCRIPTION: Example of a basic event window query that counts records based on start and end conditions using c1 and c2 columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, _wend, count(*) from t event_window start with c1 > 0 end with c2 < 10\n```\n\n----------------------------------------\n\nTITLE: Normal Table Insertion Syntax\nDESCRIPTION: Base syntax for inserting data into normal tables or subtables, including options for using supertables and tag specifications.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\n    tb_name\n        [USING stb_name [(tag1_name, ...)] TAGS (tag1_value, ...)]\n        [(field1_name, ...)]\n        VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path\n    [tb2_name\n        [USING stb_name [(tag1_name, ...)] TAGS (tag1_value, ...)]\n        [(field1_name, ...)]\n        VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path\n    ...];\n\nINSERT INTO tb_name [(field1_name, ...)] subquery\n```\n\n----------------------------------------\n\nTITLE: Using a Database in TDengine\nDESCRIPTION: SQL command to switch to a specific database. Note that this command is not valid in REST connection mode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUSE db_name;\n```\n\n----------------------------------------\n\nTITLE: Native Connection\nDESCRIPTION: This Java code snippet demonstrates how to establish a native connection to a TDengine database. It includes the necessary imports and connection setup to interact directly with the TDengine server. The code assumes that the TDengine client library is properly installed and configured.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_java.mdx#2025-04-16_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/JNIConnectExample.java}}\n```\n\n----------------------------------------\n\nTITLE: Initiating HTTP Request with curl using Custom Authentication\nDESCRIPTION: Example of using curl to send an HTTP request to the TDengine REST API with custom authentication. Replace placeholders with actual values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -H \"Authorization: Basic <TOKEN>\" -d \"<SQL>\" <ip>:<PORT>/rest/sql/[db_name][?tz=timezone[&req_id=req_id][&row_with_meta=true]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic in TDengine\nDESCRIPTION: Creates a topic for data subscription by selecting specific columns from a table. This SQL statement defines a topic named topic_meters with selected columns from the meters table, enabling data streaming and consumption.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TOPIC IF NOT EXISTS topic_meters AS SELECT ts, current, voltage, phase, groupid, location FROM meters\n```\n\n----------------------------------------\n\nTITLE: Querying with FILL Clause in TDengine\nDESCRIPTION: This snippet provides a SQL query in TDengine that uses the FILL clause to handle missing data. It queries the `meters` supertable, partitions by `tbname`, applies a 1-minute interval, fills missing data with the previous non-NULL value (prev), and limits the result to the first two partitions, calculating the average voltage and using the FILL clause.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, _wend, avg(voltage)\nFROM meters\nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:05:00+08:00\" \nPARTITION BY tbname\nINTERVAL(1m) FILL(prev)\nSLIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Aggregate Function Template in C\nDESCRIPTION: This is a template for developing aggregate functions in C for TDengine. It includes necessary headers and provides a basic structure for the initialization, start, reduce, finish, and cleanup functions. Users need to implement `aggfn_start`, `aggfn`, and `aggfn_finish` to handle the aggregation logic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include \"taos.h\"\n#include \"taoserror.h\"\n#include \"taosudf.h\"\n\n// Initialization function.\n// If no initialization, we can skip definition of it. \n// The initialization function shall be concatenation of the udf name and _init suffix.\n// @return error number defined in taoserror.h\nint32_t aggfn_init() {\n    // initialization.\n    return TSDB_CODE_SUCCESS;\n}\n\n// Aggregate start function.\n// The intermediate value or the state(@interBuf) is initialized in this function. \n// The function name shall be concatenation of udf name and _start suffix.\n// @param interbuf intermediate value to initialize\n// @return error number defined in taoserror.h\nint32_t aggfn_start(SUdfInterBuf* interBuf) {\n    // initialize intermediate value in interBuf\n    return TSDB_CODE_SUCCESS;\n}\n\n// Aggregate reduce function.\n// This function aggregate old state(@interbuf) and one data bock(inputBlock) and output a new state(@newInterBuf).\n// @param inputBlock input data block\n// @param interBuf old state\n// @param newInterBuf new state\n// @return error number defined in taoserror.h\nint32_t aggfn(SUdfDataBlock* inputBlock, SUdfInterBuf *interBuf, SUdfInterBuf *newInterBuf) {\n    // read from inputBlock and interBuf and output to newInterBuf\n    return TSDB_CODE_SUCCESS;\n}\n\n// Aggregate function finish function.\n// This function transforms the intermediate value(@interBuf) into the final output(@result).\n// The function name must be concatenation of aggfn and _finish suffix.\n// @interBuf : intermediate value\n// @result: final result\n// @return error number defined in taoserror.h\nint32_t int32_t aggfn_finish(SUdfInterBuf* interBuf, SUdfInterBuf *result) {\n    // read data from inputDataBlock and process, then output to result\n    return TSDB_CODE_SUCCESS;\n}\n\n// Cleanup function.\n// If no cleanup related processing, we can skip definition of it. \n// The destroy function shall be concatenation of the udf name and _destroy suffix.\n// @return error number defined in taoserror.h\nint32_t aggfn_destroy() {\n    // clean up\n    return TSDB_CODE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: REST JDBC Connection in Java\nDESCRIPTION: This snippet illustrates how to configure a REST connection for JDBC with TDengine. It includes the necessary driver class and specifies the JDBC URL format along with the connection parameters such as username and password. The characteristics of REST connections, including their stateless nature, are also highlighted.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString restUrl = \"jdbc:TAOS-RS://host:6041/power?user=root&password=taosdata\";\n```\n\n----------------------------------------\n\nTITLE: Creating a Supertable in TDengine\nDESCRIPTION: SQL statement to create a supertable named 'meters' with timestamp and measurement columns (current, voltage, phase) and tag columns (location, group_id).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE meters (\n    ts timestamp, \n    current float, \n    voltage int, \n    phase float\n) TAGS (\n    location varchar(64), \n    group_id int\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using WebSocket Connection in C\nDESCRIPTION: This C snippet demonstrates inserting data into TDengine using the C connector with a WebSocket connection. It connects to TDengine over WebSocket and executes SQL INSERT statements to write data to the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_19\n\nLANGUAGE: c\nCODE:\n```\n```c title=\"WebSocket Connection\"\n{{#include docs/examples/c-ws/insert_data_demo.c:insert_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Run TDengine in Docker with Specified Hostname and Port\nDESCRIPTION: This snippet shows how to run TDengine in a Docker container with a specified hostname and port using the TAOS_FQDN environment variable. This allows for greater flexibility in deploying TDengine. It also requires adding the specified hostname to /etc/hosts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"docker run -d \\\n   --name tdengine \\\n   -e TAOS_FQDN=tdengine \\\n   -p 6030:6030 \\\n   -p 6041-6049:6041-6049 \\\n   -p 6041-6049:6041-6049/udp \\\n   tdengine/tdengine\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"echo 127.0.0.1 tdengine |sudo tee -a /etc/hosts\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"taos -h tdengine -P 6030\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Using TDengine REST API\nDESCRIPTION: Examples of cURL commands to create a database in TDengine using both Basic and custom Taosd authentication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -H \"Authorization: Basic cm9vdDp0YW9zZGF0YQ==\" -d \"create database demo\" 192.168.0.1:6041/rest/sql\ncurl -L -H \"Authorization: Taosd /KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04\" -d \"create database demo\" 192.168.0.1:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Example: Creating Bit AND UDF in TDengine\nDESCRIPTION: Example of creating a scalar UDF named bit_and using a C library implementation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION bit_and AS \"/home/taos/udf_example/libbitand.so\" OUTPUTTYPE INT;\n```\n\n----------------------------------------\n\nTITLE: Multi-Table Insertion\nDESCRIPTION: Example of inserting multiple records into different tables in a single statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d1001 VALUES ('2021-07-13 14:06:34.630', 10.2, 219, 0.32) ('2021-07-13 14:06:35.779', 10.15, 217, 0.33)\n            d1002 (ts, current, phase) VALUES ('2021-07-13 14:06:34.255', 10.27, 0.31);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using REST API in Shell\nDESCRIPTION: This shell script uses `curl` to insert data into TDengine using the REST API. It sends an HTTP request with an SQL INSERT statement to the TDengine server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ncurl --location -uroot:taosdata 'http://127.0.0.1:6041/rest/sql' \\\n--data 'INSERT INTO power.d1001 USING power.meters TAGS(2,\\'\\'California.SanFrancisco\\'\\') VALUES (NOW + 1a, 10.30000, 219, 0.31000) (NOW + 2a, 12.60000, 218, 0.33000) (NOW + 3a, 12.30000, 221, 0.31000) power.d1002 USING power.meters TAGS(3, \\'\\'California.SanFrancisco\\'\\') VALUES (NOW + 1a, 10.30000, 218, 0.25000)'\n```\n```\n\n----------------------------------------\n\nTITLE: Preparing a Statement Object in Java\nDESCRIPTION: This method creates a `PreparedStatement` object using a given SQL query.  It throws an `SQLException` if the operation fails. The SQL statement is precompiled for efficiency.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n\"`PreparedStatement prepareStatement(String sql) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: CreateSubTableTask\nDESCRIPTION: This class is responsible for creating sub-tables within TDengine based on a specified range. It uses batch SQL statements to create the sub-tables efficiently.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/CreateSubTableTask.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Join Condition Examples in TDengine SQL\nDESCRIPTION: Demonstrates various valid join conditions including timestamp comparisons, logical operations, and time truncation functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nselect a.* from meters a left join meters b on a.ts = b.ts and a.ts > '2023-10-18 10:00:00.000';\nselect a.* from meters a left join meters b on a.ts = b.ts and (a.ts > '2023-10-18 10:00:00.000' or a.ts < '2023-10-17 10:00:00.000');\nselect a.* from meters a left join meters b on timetruncate(a.ts, 1s) = timetruncate(b.ts, 1s) and (a.ts + 1s > '2023-10-18 10:00:00.000' or a.groupId > 0);\nselect a.* from meters a left asof join meters b on timetruncate(a.ts, 1s) < timetruncate(b.ts, 1s) and a.groupId = b.groupId;\n```\n\n----------------------------------------\n\nTITLE: Querying aggregate statistics with tag filter\nDESCRIPTION: SQL query to calculate the average, maximum, and minimum values from records in the 'meters' supertable where groupId equals 10.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(current), MAX(voltage), MIN(phase) FROM test.meters WHERE groupId = 10;\n```\n\n----------------------------------------\n\nTITLE: Java Schemaless Write Example\nDESCRIPTION: Demonstrates how to perform schemaless writing using the Java connector. This example uses the WebSocket connection and includes the `writer.write` function to insert data with specified protocol and timestamp types, along with a request ID for tracing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nwriter.write(lineDemo, SchemalessProtocolType.LINE, SchemalessTimestampType.NANO_SECONDS, 1L);\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Index in TDengine SQL\nDESCRIPTION: SQL syntax for creating an index on a tag column in a supertable. The index_name must be unique system-wide, and tagColName can be of any type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/08-tag-index.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX index_name ON tbl_name (tagColName)\n```\n\n----------------------------------------\n\nTITLE: Python WebSocket SQL Execution with Request ID\nDESCRIPTION: Implementation of SQL query execution with request ID using Python WebSocket connection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/reqid_ws.py}}\n```\n\n----------------------------------------\n\nTITLE: Native Connection Parameter Binding in Go\nDESCRIPTION: The Go snippets provide examples for implementing parameter binding in TDengine using native connections, suitable for Go connector v3.6.0 and above (TDengine v3.3.5.0 and above).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/stmt2/native/main.go}}\n```\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/stmt/native/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supertable Structure Information\nDESCRIPTION: SQL command to get detailed structure information about a specific supertable, including column definitions and tags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE [db_name.]stb_name;\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration for Nginx\nDESCRIPTION: Configures SSL in Nginx to ensure secure connections when using taosAdapter, specifying the certificate and key file paths within the server block.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    server {\n        listen 443 ssl;\n\n        ssl_certificate /path/to/your/certificate.crt;\n        ssl_certificate_key /path/to/your/private.key;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Specified Compression in TDengine SQL\nDESCRIPTION: SQL syntax for creating a table with specific compression settings for columns. This allows configuring both the encoding type (first-level compression) and compression type (second-level compression) with an optional compression level.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/32-compress.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [dbname.]tabname (colName colType [ENCODE 'encode_type'] [COMPRESS 'compress_type' [LEVEL 'level'], [, other create_definition]...])\n```\n\n----------------------------------------\n\nTITLE: TDengine Time Window Syntax\nDESCRIPTION: This code snippet demonstrates the syntax for defining a time window in TDengine. It includes the INTERVAL, SLIDING, and FILL sub-clauses for customizing the window size, sliding interval, and handling missing data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nINTERVAL(interval_val [, interval_offset]) \n[SLIDING (sliding_val)] \n[FILL(fill_mod_and_val)]\n```\n```\n\n----------------------------------------\n\nTITLE: Querying with Sliding Window in TDengine\nDESCRIPTION: This snippet demonstrates a SQL query in TDengine using a sliding window. It queries data from the `meters` supertable, partitions it by `tbname`, applies a 1-minute window with a 30-second slide, and limits the results to the first partition, calculating the average voltage within each window.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, avg(voltage)\nFROM meters\nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:05:00+08:00\" \nPARTITION BY tbname\nINTERVAL(1m) SLIDING(30s)\nSLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Records into TDengine with MyBatis\nDESCRIPTION: MyBatis XML mapper definition for inserting multiple weather records in a single statement. Uses the foreach construct to create a batch insert with incremental timestamps.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/springbootdemo/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- weatherMapper.xml -->\n<insert id=\"batchInsert\" parameterType=\"java.util.List\" >\n    insert into test.weather (ts, temperature, humidity) values\n    <foreach separator=\" \" collection=\"list\" item=\"weather\" index=\"index\" >\n        (now + #{index}a, #{weather.temperature}, #{weather.humidity})\n    </foreach>\n</insert>\n```\n\n----------------------------------------\n\nTITLE: Deploying TDengine StatefulSet in Kubernetes\nDESCRIPTION: This YAML configuration defines a Kubernetes StatefulSet for deploying TDengine. It configures the number of replicas, update strategy, pod affinity, container settings (including image, ports, environment variables, and volume mounts), probes (startup, readiness, and liveness), and volume claim templates for persistent storage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: \"tdengine\"\n  labels:\n    app: \"tdengine\"\nspec:\n  serviceName: \"taosd\"\n  replicas: 3\n  updateStrategy:\n    type: RollingUpdate\n  selector:\n    matchLabels:\n      app: \"tdengine\"\n  template:\n    metadata:\n      name: \"tdengine\"\n      labels:\n        app: \"tdengine\"\n    spec:\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n            - weight: 100\n              podAffinityTerm:\n                labelSelector:\n                  matchExpressions:\n                    - key: app\n                      operator: In\n                      values:\n                        - tdengine\n                topologyKey: kubernetes.io/hostname\n      containers:\n        - name: \"tdengine\"\n          image: \"tdengine/tdengine:3.2.3.0\"\n          imagePullPolicy: \"IfNotPresent\"\n          ports:\n            - name: tcp6030\n              protocol: \"TCP\"\n              containerPort: 6030\n            - name: tcp6041\n              protocol: \"TCP\"\n              containerPort: 6041\n          env:\n            # POD_NAME for FQDN config\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            # SERVICE_NAME and NAMESPACE for fqdn resolve\n            - name: SERVICE_NAME\n              value: \"taosd\"\n            - name: STS_NAME\n              value: \"tdengine\"\n            - name: STS_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            # TZ for timezone settings, we recommend to always set it.\n            - name: TZ\n              value: \"Asia/Shanghai\"\n            # Environment variables with prefix TAOS_ will be parsed and converted into corresponding parameter in taos.cfg. For example, serverPort in taos.cfg should be configured by TAOS_SERVER_PORT when using K8S to deploy\n            - name: TAOS_SERVER_PORT\n              value: \"6030\"\n            # Must set if you want a cluster.\n            - name: TAOS_FIRST_EP\n              value: \"$(STS_NAME)-0.$(SERVICE_NAME).$(STS_NAMESPACE).svc.cluster.local:$(TAOS_SERVER_PORT)\"\n            # TAOS_FQND should always be set in k8s env.\n            - name: TAOS_FQDN\n              value: \"$(POD_NAME).$(SERVICE_NAME).$(STS_NAMESPACE).svc.cluster.local\"\n          volumeMounts:\n            - name: taosdata\n              mountPath: /var/lib/taos\n          startupProbe:\n            exec:\n              command:\n                - taos-check\n            failureThreshold: 360\n            periodSeconds: 10\n          readinessProbe:\n            exec:\n              command:\n                - taos-check\n            initialDelaySeconds: 5\n            timeoutSeconds: 5000\n          livenessProbe:\n            exec:\n              command:\n                - taos-check\n            initialDelaySeconds: 15\n            periodSeconds: 20\n  volumeClaimTemplates:\n    - metadata:\n        name: taosdata\n      spec:\n        accessModes:\n          - \"ReadWriteOnce\"\n        storageClassName: \"standard\"\n        resources:\n          requests:\n            storage: \"5Gi\"\n```\n\n----------------------------------------\n\nTITLE: Database Creation Example in TDengine\nDESCRIPTION: Example of creating a database named 'db' with 10 vgroups and allocating 10MB of write buffer for each vnode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ncreate database if not exists db vgroups 10 buffer 10\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using Native Connection in C\nDESCRIPTION: This C snippet demonstrates how to insert data into TDengine using the C connector with a native connection. It utilizes the TDengine native client library to connect to the database and execute SQL INSERT statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n```c title=\"Native Connection\"\n{{#include docs/examples/c/insert_data_demo.c:insert_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in TDengine Python Connector\nDESCRIPTION: Example of how to handle exceptions thrown by the TDengine Python connector using try-except blocks. The code demonstrates connecting to a database and handling potential connection errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/handle_exception.py}}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Consumer in C#\nDESCRIPTION: The C# snippet is intended for developing a native consumer. It utilizes the necessary parameters and methods to connect to the messaging system according to the C# example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/subscribe/Program.cs:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Advanced Connection using AF Package in Go\nDESCRIPTION: Utilizes the TDengine driver-go af package to establish a connection with advanced features like parameter binding and subscription support\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_go.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/afconn/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Getting Topic Assignment Information in C\nDESCRIPTION: Function to retrieve information about vgroups assigned to a consumer, including vgId and offset details. Takes a TMQ consumer, topic name, and output parameters for assignment information. Returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_42\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_get_topic_assignment(ws_tmq_t *tmq, const char *pTopicName, struct ws_tmq_topic_assignment **assignment, int32_t *numOfAssignment)\n```\n\n----------------------------------------\n\nTITLE: Native Connection Parameter Binding in Java\nDESCRIPTION: This Java snippet illustrates using parameter binding with a native connection for data insertion in TDengine, focusing on performance enhancement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/ParameterBindingBasicDemo.java:para_bind}}\n```\n\n----------------------------------------\n\nTITLE: Installing Multi-Replica TDengine Cluster\nDESCRIPTION: Shell command for installing a 3-replica TDengine cluster using Helm. This command deploys a more robust TDengine setup with multiple nodes for improved availability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nhelm install replica3 tdengine-3.5.0.tgz -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using JDBC in Java\nDESCRIPTION: This snippet shows how to create a database named `power` and a supertable named `meters` in TDengine using Java's JDBC connector. It establishes a connection to the TDengine database and executes SQL statements to create the database and table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/java/src/main/java/com/taos/example/JdbcCreatDBDemo.java:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Using Parameter Binding - SQL\nDESCRIPTION: Demonstrates the use of parameter binding in SQL for inserting data into existing subtables or creating tables automatically upon insertion. It uses placeholders for parameters to improve efficiency by reducing parsing time and network overhead.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO meters (tbname, ts, current, voltage, phase) VALUES(?, ?, ?, ?, ?)\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO meters (tbname, ts, current, voltage, phase, location, group_id) VALUES(?, ?, ?, ?, ?, ?, ?)\n```\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO ? USING meters TAGS (?, ?) VALUES (?, ?, ?, ?)\n```\n\n----------------------------------------\n\nTITLE: Complex Event Window Query with Partitioning in TDengine SQL\nDESCRIPTION: Advanced event window query example that includes partitioning by tbname, time filtering, and voltage-based window conditions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, _wend, _wduration, count(*)\nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:10:00+08:00\" \nPARTITION BY tbname\nEVENT_WINDOW START WITH voltage >= 225 END WITH voltage < 235\nLIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Python Connector (taospy) from GitHub\nDESCRIPTION: This shell command illustrates how to install the `taospy` Python connector directly from the GitHub repository using `pip3`. This allows users to install the latest development version or a specific branch of the connector.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"pip3 install git+https://github.com/taosdata/taos-connector-python.git\"\n```\n\n----------------------------------------\n\nTITLE: Querying with Prepared Statement in Go\nDESCRIPTION: Method for executing a prepared statement query with parameters. Returns result rows for data retrieval operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Stmt) Query(args ...any) (*Rows, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic UDF Function in Python (Example 1)\nDESCRIPTION: A Python UDF that accepts a single integer and outputs ln(n^2 + 1). Contains three required functions: init() and destroy() as lifecycle handlers, and process() which performs the actual computation on input data blocks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom math import log\n\ndef init():\n    pass\n\ndef destroy():\n    pass\n\ndef process(block):\n    rows, _ = block.shape()\n    return [log(block.data(i, 0) ** 2 + 1) for i in range(rows)]\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - C#\nDESCRIPTION: This C# code snippet demonstrates how to create a WebSocket connection to TDengine. It executes the main method from the designated example file which details the connection setup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wsConnect/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: TDengine Tag Column Query\nDESCRIPTION: Example of querying tag columns along with regular columns in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT location, groupid, current FROM d1001 LIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: LEFT JOIN Example in TDengine\nDESCRIPTION: Example of LEFT JOIN operation between supertables with multiple conditions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM temp_stable t1 LEFT JOIN temp_stable t2\nON t1.ts = t2.ts AND t1.deviceid = t2.deviceid AND t1.status=0;\n```\n\n----------------------------------------\n\nTITLE: TDengine Time Window Query Example\nDESCRIPTION: This SQL query demonstrates the usage of time windows in TDengine to calculate the average voltage from the `meters` supertable. It partitions the data by `tbname`, applies a 1-minute time window with a 5-second offset, and limits the output to the first two partitions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSELECT tbname, _wstart, _wend, avg(voltage) \nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:05:00+08:00\" \nPARTITION BY tbname \nINTERVAL(1m, 5s) \nSLIMIT 2;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Statement Object in Java\nDESCRIPTION: This method creates a `Statement` object, which can be used to execute SQL queries. It throws an `SQLException` if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n\"`Statement createStatement() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Spread Aggregate Function in Python\nDESCRIPTION: Python implementation of an aggregate function that calculates the difference between maximum and minimum values of a column. Includes logging functionality and demonstrates the map-reduce pattern.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport math\nimport pickle\n\nLOG_FILE: io.TextIOBase = None\n\ndef init():\n    global LOG_FILE\n    LOG_FILE = open(\"/var/log/taos/spread.log\", \"wt\")\n    log(\"init function myspead success\")\n\ndef log(o):\n    LOG_FILE.write(str(o) + '\\n')\n\ndef destroy():\n    log(\"close log file: spread.log\")\n    LOG_FILE.close()\n\ndef start():\n    return pickle.dumps((-math.inf, math.inf))\n\ndef reduce(block, buf):\n    max_number, min_number = pickle.loads(buf)\n    log(f\"initial max_number={max_number}, min_number={min_number}\")\n    rows, _ = block.shape()\n    for i in range(rows):\n        v = block.data(i, 0)\n        if v > max_number:\n            log(f\"max_number={v}\")\n            max_number = v\n        if v < min_number:\n            log(f\"min_number={v}\")\n            min_number = v\n    return pickle.dumps((max_number, min_number))\n\ndef finish(buf):\n    max_number, min_number = pickle.loads(buf)\n    return max_number - min_number\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using JDBC in Java\nDESCRIPTION: This Java snippet shows how to insert data into TDengine using Java's JDBC connector. It connects to the TDengine database and executes SQL INSERT statements to write data into the `meters` supertable via subtables d1001 and d1002.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/java/src/main/java/com/taos/example/JdbcInsertDataDemo.java:insert_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine with Helm Chart\nDESCRIPTION: Shell command for installing TDengine using a Helm chart with a custom values.yaml file. This command deploys the TDengine database based on the configuration specified in the values file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nhelm install simple tdengine-3.5.0.tgz -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Using DIFF Function in SQL\nDESCRIPTION: Calculates the difference between the current value and the previous non-NULL value in a column, with options to handle negative results and NULL values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_67\n\nLANGUAGE: sql\nCODE:\n```\nDIFF(expr [, ignore_option])\n\nignore_option: {\n    0\n  | 1\n  | 2\n  | 3\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Consumer Group in TDengine SQL\nDESCRIPTION: SQL syntax for deleting a consumer group in TDengine. The FORCE option allows deletion of groups with active consumers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nDROP CONSUMER GROUP [IF EXISTS] [FORCE] cgroup_name ON topic_name;\n```\n\n----------------------------------------\n\nTITLE: Retrieves Affected Rows Once - TDengine C\nDESCRIPTION: Fetches the count of rows affected during a single execution of a bound statement, providing insights into execution impact.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_78\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_affected_rows_once(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Node.js WebSocket SQL Execution with Request ID\nDESCRIPTION: Example of executing SQL query with a request ID using Node.js WebSocket connection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/node/websocketexample/sql_example.js:sqlWithReqid}}\n```\n\n----------------------------------------\n\nTITLE: Creating an Average Voltage Stream Example in TDengine\nDESCRIPTION: Example of creating a stream that calculates the average voltage from power meters with a 1-minute time window and 30-second sliding interval, writing results to partitioned tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol AS\nSELECT _wstart, count(*), avg(voltage) FROM power.meters PARTITION BY tbname INTERVAL(1m) SLIDING(30s);\n```\n\n----------------------------------------\n\nTITLE: Revoking All Permissions on a Database in SQL\nDESCRIPTION: This SQL snippet explains how to completely revoke all permissions from a user for an entire database in TDengine, ensuring no further access or operations can be conducted on the specified database by that user.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nrevoke all on power from test\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Query Stream in SQL\nDESCRIPTION: This SQL snippet demonstrates creating a stream for continuous queries, counting data entries in the past 10 seconds window every 1 second. It uses the FORCE_WINDOW_CLOSE trigger mode and a sliding interval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists continuous_query_s trigger force_window_close into continuous_query as select count(*) from power.meters interval(10s) sliding(1s)\n```\n\n----------------------------------------\n\nTITLE: Get Column Display Size using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the maximum standard width of a specified column, measured in characters. The column number starts from 1. An SQLException is thrown if the column index is out of range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_66\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `int getColumnDisplaySize(int column) throws SQLException`\n  - **Interface Description**: Gets the maximum standard width of a specified column, in characters.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The maximum width of the column.\n  - **Exception**: Throws `SQLException` if the column index is out of range.\n```\n\n----------------------------------------\n\nTITLE: Initializes Precompiled SQL Statement - TDengine C\nDESCRIPTION: Initializes a precompiled SQL statement object in TDengine. The function takes a pointer to an established database connection and returns a pointer to a TAOS_STMT structure upon success. Required dependency includes an established connection via `taos_connect()`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_69\n\nLANGUAGE: C\nCODE:\n```\nTAOS_STMT* taos_stmt_init(TAOS *taos)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Specific Historical Time Range in SQL\nDESCRIPTION: This SQL snippet demonstrates creating a stream that processes data within a specific historical time range, starting from January 30, 2020. It combines the fill_history option with a WHERE clause to filter data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists count_history_s fill_history 1 into count_history  as select count(*) from power.meters where ts > '2020-01-30' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Automatic Table Creation on Insert\nDESCRIPTION: Demonstrates how to use the 'using' keyword for automatic table creation during insert. If the table doesn't exist, it's created before data insertion. This example also shows how to specify tag values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into d1005\nusing meters (location)\ntags ( \"beijing.chaoyang\")\nvalues ( \"2018-10-04 14:38:07\", 10.15, 217, 0.33)\n```\n\n----------------------------------------\n\nTITLE: Modifying Supertable Structure\nDESCRIPTION: Comprehensive SQL syntax for altering supertable definitions, including adding/dropping columns and tags, modifying data types, and changing table options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE [db_name.]tb_name alter_table_clause\n \nalter_table_clause: {\n    alter_table_options\n  | ADD COLUMN col_name column_type\n  | DROP COLUMN col_name\n  | MODIFY COLUMN col_name column_type\n  | ADD tag tag_name tag_type\n  | DROP tag tag_name\n  | MODIFY tag tag_name tag_type\n  | RENAME tag old_tag_name new_tag_name\n}\n \nalter_table_options:\n    alter_table_option ...\n \nalter_table_option: {\n    COMMENT 'string_value'\n  | KEEP value\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statement\nDESCRIPTION: Executes the prepared statement with all batched parameters. Returns number of affected rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_execute(WS_STMT *stmt, int32_t *affected_rows)\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Supertable in TDengine\nDESCRIPTION: This SQL statement creates a virtual supertable named `meters_v` in TDengine.  It defines the schema for the aggregated data, including timestamp (`ts`), current, voltage, and phase measurements, and tags for location and group_id. The `VIRTUAL 1` clause indicates that it is a virtual supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE meters_v (\n    ts timestamp, \n    current float, \n    voltage int, \n    phase float\n) TAGS (\n    location varchar(64), \n    group_id int\n) VIRTUAL 1;\n```\n\n----------------------------------------\n\nTITLE: Establishing REST Connection in Go\nDESCRIPTION: This snippet illustrates how to establish a RESTful connection to TDengine using Go. It is useful for scenarios where a REST API is preferred or required. Ensure network accessibility and REST API endpoint configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_go.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/restexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Binds Parameters to SQL Statement - TDengine C\nDESCRIPTION: Binds parameters to a precompiled SQL statement. It uses a TAOS_MULTI_BIND structure, similar to MYSQL_BIND, to match the SQL statement parameters. While efficient for insertion, it’s capable of handling other SQL types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_71\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_bind_param(TAOS_STMT *stmt, TAOS_MULTI_BIND *bind)\n```\n\n----------------------------------------\n\nTITLE: Worker Thread Implementation for Reading Data in Java\nDESCRIPTION: This class 'WorkTask' is responsible for reading data from a simulated source and writing it into TDengine using the JDBC interface, utilizing a blocking addBatch method.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/WorkTask.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting a Supertable in TDengine\nDESCRIPTION: SQL command to delete a supertable and all its associated subtables, with an optional IF EXISTS clause to prevent errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP STABLE [IF EXISTS] [db_name.]stb_name\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using Node.js\nDESCRIPTION: This Node.js snippet demonstrates inserting data into TDengine using the Node.js connector with WebSocket. It establishes a WebSocket connection and sends SQL INSERT commands for inserting sample data into the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{{#include docs/examples/node/websocketexample/sql_example.js:insertData}}\n```\n```\n\n----------------------------------------\n\nTITLE: Running TDengine in Docker with persistent storage\nDESCRIPTION: Command for starting a TDengine Docker container with volume mounts to persist data and logs to the host machine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v <local-data-directory>:/var/lib/taos -v <local-log-directory>:/var/log/taos -p 6030:6030 -p 6041:6041 -p 6043-6060:6043-6060 -p 6043-6060:6043-6060/udp tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Catching and Processing SQLException in TDengine JDBC\nDESCRIPTION: This code snippet demonstrates how to catch a SQLException, extract the error code and error message, and print them for debugging purposes. It's a basic example of error handling in TDengine JDBC applications.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    // JDBC operation that may cause exception\n} catch (SQLException e) {\n    System.out.printf(\"Error Message: %s\\n\", e.getMessage());\n    System.out.printf(\"Error Code: 0x%08X\\n\", e.getErrorCode());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine JDBC Driver Dependency in Maven\nDESCRIPTION: This XML snippet demonstrates how to add the TDengine JDBC driver dependency to a Maven project's `pom.xml` file. The dependency specifies the group ID, artifact ID, and version of the TDengine JDBC driver, enabling Java applications to connect to TDengine databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<dependency>\n  <groupId>com.taosdata.jdbc</groupId>\n  <artifactId>taos-jdbcdriver</artifactId>\n  <version>3.5.2</version>\n</dependency>\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records into Multiple Tables\nDESCRIPTION: Demonstrates how to insert multiple records into multiple TDengine tables in a single SQL statement. This is useful for batch inserts across different devices or sensors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO d1001 VALUES \n    (\"2018-10-03 14:38:05\", 10.2, 220, 0.23),\n    (\"2018-10-03 14:38:15\", 12.6, 218, 0.33),\n    (\"2018-10-03 14:38:25\", 12.3, 221, 0.31) \nd1002 VALUES \n    (\"2018-10-03 14:38:04\", 10.2, 220, 0.23),\n    (\"2018-10-03 14:38:14\", 10.3, 218, 0.25),\n    (\"2018-10-03 14:38:24\", 10.1, 220, 0.22)\nd1003 VALUES\n    (\"2018-10-03 14:38:06\", 11.5, 221, 0.35),\n    (\"2018-10-03 14:38:16\", 10.4, 220, 0.36),\n    (\"2018-10-03 14:38:26\", 10.3, 220, 0.33)\n;\n```\n\n----------------------------------------\n\nTITLE: Establishing REST Connection to TDengine in Java\nDESCRIPTION: This code shows how to establish a REST connection to TDengine database using Java. It includes setting up connection parameters and handling exceptions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/RESTConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: Creating Supertables for Single-Column Time-Series Data in TDengine\nDESCRIPTION: These SQL statements create three supertables (current_stb, voltage_stb, and phase_stb) in TDengine, each designed to store a single column of time-series data.  The tables are tagged with device_id, location, and group_id for identifying the data source. The 'ts' column represents the timestamp, and the other column represents the measurement value (current, voltage, or phase).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE current_stb (\n    ts timestamp, \n    current float\n) TAGS (\n    device_id varchar(64),\n    location varchar(64), \n    group_id int\n);\n\nCREATE STABLE voltage_stb (\n    ts timestamp, \n    voltage int\n) TAGS (\n    device_id varchar(64),\n    location varchar(64), \n    group_id int\n);\n \nCREATE STABLE phase_stb (\n    ts timestamp, \n    phase float\n) TAGS (\n    device_id varchar(64),\n    location varchar(64), \n    group_id int\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Conditional Operations\nDESCRIPTION: Examples of using various conditional operators and functions with JSON data in where clauses.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/17-json.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect * from s1 where info->'k1' match 'v*';\n\nselect * from s1 where info->'k1' like 'v%' and info contains 'k2';\n\nselect * from s1 where info is null;\n\nselect * from s1 where info->'k1' is not null\n```\n\n----------------------------------------\n\nTITLE: State Window Query with Voltage Monitoring\nDESCRIPTION: SQL query demonstrating state window functionality to monitor voltage ranges in smart meters. The query partitions data by table name and creates windows based on voltage thresholds between 225V and 235V.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, _wend,_wduration, CASE WHEN voltage >= 225 and voltage <= 235 THEN 1 ELSE 0 END status \nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:05:00+08:00\" \nPARTITION BY tbname \nSTATE_WINDOW(\n    CASE WHEN voltage >= 225 and voltage <= 235 THEN 1 ELSE 0 END\n)\nSLIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: JOIN Examples in TDengine\nDESCRIPTION: Examples of different JOIN operations between tables, supertables, and subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM temp_tb_1 t1, pressure_tb_1 t2\nWHERE t1.ts = t2.ts\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - Go\nDESCRIPTION: This Go code snippet provides an example of how to establish a WebSocket connection with TDengine. It includes a main function from the specified file that outlines the necessary connection parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/wsexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Record into TDengine Table\nDESCRIPTION: Demonstrates how to insert a single record into a TDengine table using SQL. The example uses a smart meter data model with timestamp, current, voltage, and phase values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into d1001 (ts, current, voltage, phase) values ( \"2018-10-03 14:38:05\", 10.3, 219, 0.31)\n```\n\n----------------------------------------\n\nTITLE: Creating a User in TDengine SQL\nDESCRIPTION: SQL command to create a new user in TDengine with options for password, system information access, and database creation permissions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER user_name PASS 'password' [SYSINFO {1|0}] [CREATEDB {1|0}];\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark with JSON Configuration File\nDESCRIPTION: Shows how to run taosBenchmark using a JSON configuration file that provides access to all functionality and configuration options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark -f <json file>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource and JdbcTemplate in Spring XML\nDESCRIPTION: This XML configuration sets up the data source connection for TDengine, defining the required JDBC driver and database credentials as well as creating a JdbcTemplate bean that will use this data source. It is essential to ensure that the TDengine JDBC driver is available in the project classpath.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/SpringJdbcTemplate/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n    <property name=\"driverClassName\" value=\"com.taosdata.jdbc.TSDBDriver\"></property>\n    <property name=\"url\" value=\"jdbc:TAOS://127.0.0.1:6030/test\"></property>\n    <property name=\"username\" value=\"root\"></property>\n    <property name=\"password\" value=\"taosdata\"></property>\n</bean>\n\n<bean id = \"jdbcTemplate\"  class=\"org.springframework.jdbc.core.JdbcTemplate\" >\n    <property name=\"dataSource\" ref = \"dataSource\" ></property>\n</bean>\n```\n\n----------------------------------------\n\nTITLE: TDengine Wildcard Query Examples\nDESCRIPTION: Examples showing how to use wildcards in TDengine queries for selecting all columns and using table prefixes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM d1001;\nSELECT d1001.* FROM d1001;\nSELECT * FROM d1001, d1003 WHERE d1001.ts=d1003.ts;\nSELECT d1001.* FROM d1001,d1003 WHERE d1001.ts = d1003.ts;\n```\n\n----------------------------------------\n\nTITLE: SQL DELETE Statement Syntax in TDengine\nDESCRIPTION: Basic syntax for deleting data from tables or supertables in TDengine. Supports optional database name specification and WHERE conditions for filtering records based on time column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/09-delete-data.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM [ db_name. ] tb_name [WHERE condition];\n```\n\n----------------------------------------\n\nTITLE: SHESD Seasonal Anomaly Detection in SQL\nDESCRIPTION: Seasonal Hybrid Extreme Studentized Deviate test for detecting multiple anomalies in time series data, with configurable detection direction and maximum anomaly percentage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=shesd,direction=both,anoms=0.05\")\n```\n\n----------------------------------------\n\nTITLE: Preparing Statement with Auto-Generated Keys in Java\nDESCRIPTION: Creates a `PreparedStatement` object, specifying the SQL statement and the flag for auto-generated keys. It throws `SQLException` if the operation fails.  The `autoGeneratedKeys` flag determines whether the database returns auto-generated keys for insert statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n\"`PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Rows Next Method\nDESCRIPTION: Prepares the next row of data from the result set and assigns it to the destination slice. The function takes a slice of `driver.Value` as input and returns an error if any occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_43\n\nLANGUAGE: go\nCODE:\n```\n\"func (rs *Rows) Next(dest []driver.Value) error\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Specific Columns\nDESCRIPTION: Shows how to insert data into specific columns of a TDengine table. Unspecified columns are automatically filled with NULL values, except for the timestamp which is required.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into d1004 (ts, voltage, phase) values(\"2018-10-04 14:38:06\", 223, 0.29)\n```\n\n----------------------------------------\n\nTITLE: Database Connection Establishment - Python\nDESCRIPTION: Establishes a connection to TaosAdapter with configurable parameters including user credentials, host, port, database name, and timezone settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef connect(*args, **kwargs):\n```\n\n----------------------------------------\n\nTITLE: Creating Stream with Custom Tags in TDengine SQL\nDESCRIPTION: This SQL statement creates a stream named 'streams2' that generates custom tag values for each subtable corresponding to a partition. It selects the window start time and count, partitioning by a concatenated string of 'tag-' and the table name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STREAM streams2 trigger at_once INTO st1 TAGS(cc varchar(100)) as select  _wstart, count(*) c1 from st partition by concat(\"tag-\", tbname) as cc interval(10s));\n```\n\n----------------------------------------\n\nTITLE: Including C Native Parameter Binding Example for stmt2\nDESCRIPTION: This code snippet in C demonstrates the use of parameter binding with stmt2 in TDengine for efficient data insertion, focusing on performance enhancement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/stmt2_insert_demo.c}}\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection in TDengine with Rust\nDESCRIPTION: Code example showing how to establish a native connection to TDengine using Rust. The connection method depends on the feature flags used during compilation, particularly the 'ws' feature for WebSocket implementation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_rust.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/connect.rs}}\n```\n\n----------------------------------------\n\nTITLE: Setting ResultSet Holdability in Java\nDESCRIPTION: Sets the default holdability for `ResultSet` objects. It throws `SQLException` if the operation fails. Holdability determines whether open `ResultSet` objects are closed when a commit operation occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n\"`void setHoldability(int holdability) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Displaying License Information in TDengine SQL\nDESCRIPTION: Shows information about enterprise edition license authorizations. Exclusive to the enterprise edition.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSHOW LICENCES;\nSHOW GRANTS;\nSHOW GRANTS FULL; // Supported starting from TDengine version 3.2.3.0\n```\n\n----------------------------------------\n\nTITLE: Viewing Database Parameters in TDengine SQL\nDESCRIPTION: Retrieves configuration parameters of a specified database from the INFORMATION_SCHEMA. Displays one parameter per line for better readability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM INFORMATION_SCHEMA.INS_DATABASES WHERE NAME='db_name' \\G;\n```\n\n----------------------------------------\n\nTITLE: Executing Full Outer Join in TDengine SQL\nDESCRIPTION: Query to retrieve all timestamps and voltage values from both d1001 and d1002 tables, including unmatched records.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.ts, a.voltage, b.ts, b.voltage FROM d1001 a FULL JOIN d1002 b on a.ts = b.ts\n```\n\n----------------------------------------\n\nTITLE: Rust Schemaless WebSocket Implementation\nDESCRIPTION: Rust example showcasing the implementation of a WebSocket client for schemaless writing. This code includes the necessary imports and defines the main function to demonstrate the usage of the WebSocket for data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/schemaless.rs}}\n```\n\n----------------------------------------\n\nTITLE: Binding Batch Parameters\nDESCRIPTION: Binds multiple parameters in batch mode for efficient data insertion. Parameters must match the VALUES clause in the SQL statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_bind_param_batch(WS_STMT *stmt, const WS_MULTI_BIND *bind, uint32_t len)\n```\n\n----------------------------------------\n\nTITLE: Managing Data Subscription with Consumer Structure in Rust\nDESCRIPTION: Methods for the Consumer structure that provide subscription-related functionalities for TDengine. These methods handle topic subscription, message reception, offset management, and topic information retrieval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nfn subscribe<T: Into<String>, I: IntoIterator<Item = T> + Send>(&mut self, topics: I) -> RawResult<()>\n\nfn recv_timeout(&self, timeout: Timeout) -> RawResult<Option<(Self::Offset, MessageSet<Self::Meta, Self::Data>)>>\n\nfn commit(&self, offset: Self::Offset) -> RawResult<()>\n\nfn commit_offset(&self, topic_name: &str, vgroup_id: VGroupId, offset: i64) -> RawResult<()>\n\nfn list_topics(&self) -> RawResult<Vec<String>>\n\nfn assignments(&self) -> Option<Vec<(String, Vec<Assignment>)>>\n\nfn offset_seek(&mut self, topic: &str, vg_id: VGroupId, offset: i64) -> RawResult<()>\n\nfn committed(&self, topic: &str, vgroup_id: VGroupId) -> RawResult<i64>\n\nfn position(&self, topic: &str, vgroup_id: VGroupId) -> RawResult<i64>\n```\n\n----------------------------------------\n\nTITLE: C# SQL Execution with Request ID\nDESCRIPTION: Implementation of SQL query execution with request ID using C# connector\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wsInsert/Program.cs:query_id}}\n```\n\n----------------------------------------\n\nTITLE: Combined Partitioning and Interval Query\nDESCRIPTION: Query demonstrating how to combine data partitioning with time window intervals to get maximum current values per location every 10 minutes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, location, max(current) from meters partition by location interval(10m)\n```\n\n----------------------------------------\n\nTITLE: Executing a Successful Query in TDengine REST API\nDESCRIPTION: Example of a successful query execution response from TDengine's REST API. The response includes a status code, column metadata, and query results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"column_meta\": [\n    [\"ts\", \"TIMESTAMP\", 8],\n    [\"count\", \"BIGINT\", 8],\n    [\"endpoint\", \"VARCHAR\", 45],\n    [\"status_code\", \"INT\", 4],\n    [\"client_ip\", \"VARCHAR\", 40],\n    [\"request_method\", \"VARCHAR\", 15],\n    [\"request_uri\", \"VARCHAR\", 128]\n  ],\n  \"data\": [\n    [\n      \"2022-06-29T05:50:55.401Z\",\n      2,\n      \"LAPTOP-NNKFTLTG:6041\",\n      200,\n      \"172.23.208.1\",\n      \"POST\",\n      \"/rest/sql\"\n    ],\n    [\n      \"2022-06-29T05:52:16.603Z\",\n      1,\n      \"LAPTOP-NNKFTLTG:6041\",\n      200,\n      \"172.23.208.1\",\n      \"POST\",\n      \"/rest/sql\"\n    ],\n    [\n      \"2022-06-29T06:28:14.118Z\",\n      1,\n      \"LAPTOP-NNKFTLTG:6041\",\n      200,\n      \"172.23.208.1\",\n      \"POST\",\n      \"/rest/sql\"\n    ],\n    [\n      \"2022-06-29T05:52:16.603Z\",\n      2,\n      \"LAPTOP-NNKFTLTG:6041\",\n      401,\n      \"172.23.208.1\",\n      \"POST\",\n      \"/rest/sql\"\n    ]\n  ],\n  \"rows\": 4\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Execution - Python\nDESCRIPTION: Executes SQL queries with optional request ID tracking and returns result sets. Supports both standard queries and execution operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef query(self, sql: str, req_id: Optional[int] = None) -> TaosResult\n```\n\n----------------------------------------\n\nTITLE: C Native SQL Execution with Request ID\nDESCRIPTION: Example of executing SQL query with a request ID using C native connection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_42\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/with_reqid_demo.c:with_reqid}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Tables Information in TDengine SQL\nDESCRIPTION: Shows information about normal and child tables in the specified database. Can filter for only basic tables (NORMAL) or only child tables (CHILD), and supports filtering names with LIKE pattern.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [NORMAL | CHILD] [db_name.]TABLES [LIKE 'pattern'];\n```\n\n----------------------------------------\n\nTITLE: Enabling Batch Retrieval\nDESCRIPTION: This Java code snippet demonstrates how to enable batch data retrieval when using a REST connection to TDengine.  Enabling batch retrieval is recommended for larger data volumes to optimize performance. The example showcases the main execution function with batch retrieval enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_java.mdx#2025-04-16_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: Scalar Function Template in C\nDESCRIPTION: This is a template for developing scalar functions in C for TDengine. It includes necessary headers and provides a basic structure for the initialization, main computation, and cleanup functions. Users need to implement the `scalarfn` function to process the input data block and output the result column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include \"taos.h\"\n#include \"taoserror.h\"\n#include \"taosudf.h\"\n\n// Initialization function. \n// If no initialization, we can skip definition of it. \n// The initialization function shall be concatenation of the udf name and _init suffix.\n// @return error number defined in taoserror.h\nint32_t scalarfn_init() {\n    // initialization.\n    return TSDB_CODE_SUCCESS;\n}\n\n// Scalar function main computation function.\n// @param inputDataBlock, input data block composed of multiple columns with each column defined by SUdfColumn\n// @param resultColumn, output column\n// @return error number defined in taoserror.h\nint32_t scalarfn(SUdfDataBlock* inputDataBlock, SUdfColumn* resultColumn) {\n    // read data from inputDataBlock and process, then output to resultColumn.\n    return TSDB_CODE_SUCCESS;\n}\n\n// Cleanup function.\n// If no cleanup related processing, we can skip definition of it.\n// The destroy function shall be concatenation of the udf name and _destroy suffix.\n// @return error number defined in taoserror.h\nint32_t scalarfn_destroy() {\n    // clean up\n    return TSDB_CODE_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: FastWriteExample\nDESCRIPTION: This is the main program for demonstrating high-volume data writing to TDengine using JDBC. It parses command-line arguments, creates a thread pool, waits for tasks to complete, and handles either direct JDBC writing or Kafka-based data ingestion.  It is responsible for creating sub-tables, creating worker threads (or Kafka producers/consumers), tracking write speed, and releasing resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/FastWriteExample.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data into TDengine Supertable\nDESCRIPTION: Shows how to insert data from a CSV file into a meters supertable. The CSV file should contain columns matching the specified structure including tbname, location, groupId, ts, current, voltage, and phase.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO meters(tbname, location, groupId, ts, current, voltage, phase)\n                FILE '/tmp/csvfile_21002.csv'\n```\n\n----------------------------------------\n\nTITLE: Scalar UDF for Next Sunday Calculation in Python\nDESCRIPTION: This Python code defines a scalar UDF that calculates the date of the next Sunday given a timestamp. It uses the `moment` library to manipulate the timestamp and returns the date in 'YYYY-MM-DD' format. The function includes input validation to ensure a single integer (timestamp) parameter is provided.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport moment\n\ndef init():\n    pass\n\ndef destroy():\n    pass\n\n\ndef process(block):\n    rows, cols = block.shape()\n    if cols > 1:\n        raise Exception(\"require only 1 parameter\")\n    if not type(block.data(0, 0)) is int:\n        raise Exception(\"type error\")\n    return [moment.unix(block.data(i, 0)).replace(weekday=7).format('YYYY-MM-DD')\n            for i in range(rows)]\n```\n\n----------------------------------------\n\nTITLE: Python Scalar Function Template in TDengine\nDESCRIPTION: Provides a template for defining scalar functions in Python for TDengine, illustrating the structure needed to implement such functions, including initialization and process logic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndef init():\\n    # initialization\\ndef destroy():\\n    # destroy\\ndef process(input: datablock) -> tuple[output_type]:  \n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with SQL Syntax in TDengine\nDESCRIPTION: The SQL syntax for creating a stream in TDengine, including stream options like trigger modes, watermark settings, and handling of expired data. It defines how to transform source data and write results to destination tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM [IF NOT EXISTS] stream_name [stream_options] INTO stb_name\n[(field1_name, ...)] [TAGS (column_definition [, column_definition] ...)] \nSUBTABLE(expression) AS subquery\n\nstream_options: {\n TRIGGER        [AT_ONCE | WINDOW_CLOSE | MAX_DELAY time | FORCE_WINDOW_CLOSE | CONTINUOUS_WINDOW_CLOSE [recalculate rec_time_val] ]\n WATERMARK      time\n IGNORE EXPIRED [0|1]\n DELETE_MARK    time\n FILL_HISTORY   [0|1] [ASYNC]\n IGNORE UPDATE  [0|1]\n}\n\ncolumn_definition:\n    col_name col_type [COMMENT 'string_value']\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine WebSocket Python Connector (taos-ws-py)\nDESCRIPTION: This bash command demonstrates how to install the `taos-ws-py` Python connector using `pip3`. This connector enables Python applications to connect to TDengine databases via WebSocket.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"pip3 install taos-ws-py\"\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection in Go\nDESCRIPTION: This snippet demonstrates a native connection to a TDengine database using Go. It is designed to showcase the use of the native driver for connecting directly to the database. Ensure Go environment is set up and necessary TDengine drivers are installed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_go.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/cgoexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Synchronize Data for a Specified Time Interval\nDESCRIPTION: This command synchronizes data within a specified time interval from one TDengine instance to another using taosX. It uses the `run` command with the `-f` parameter including `start` parameter in DSN to define the start time, and the `-t` parameter to define the target database. The `-v` parameter enables verbose logging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run -f 'taos:///db1?start=2022-10-10T00:00:00Z' -t 'taos:///db2' -v\"\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for TDengine taosAdapter Load Balancing\nDESCRIPTION: This code snippet demonstrates how to configure Nginx as a load balancer for the TDengine taosAdapter service. It sets up a reverse proxy to distribute incoming WebSocket connections across multiple taosAdapter instances, improving availability and scalability.  It also includes configuration for forwarding necessary headers for WebSocket compatibility.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    server {\n        listen 6041;\n        \n        location / {\n            proxy_pass http://websocket;\n            # Headers for websocket compatible\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n            # Forwarded headers\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_set_header X-Forwarded-Host $host;\n            proxy_set_header X-Forwarded-Port $server_port;\n            proxy_set_header X-Forwarded-Server $hostname;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n    }\n \n    upstream websocket {\n        server 192.168.11.61:6041;\n        server 192.168.11.62:6041;\n        server 192.168.11.63:6041;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Subtable Creation in TDengine\nDESCRIPTION: SQL syntax for creating multiple subtables in a single statement and using CSV files for batch creation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] tb_name1 USING stb_name TAGS (tag_value1, ...) [IF NOT EXISTS] tb_name2 USING stb_name TAGS (tag_value2, ...) ...;\n\nCREATE TABLE [IF NOT EXISTS] USING [db_name.]stb_name (field1_name [, field2_name] ....) FILE csv_file_path;\n```\n\n----------------------------------------\n\nTITLE: DELETE Example with Time-Based Condition\nDESCRIPTION: Example showing how to delete data from a supertable 'meters' where timestamp is less than a specific value. The statement affects all matching records across multiple subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/09-delete-data.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ndelete from meters where ts < '2021-10-01 10:40:00.100' ;\n```\n\n----------------------------------------\n\nTITLE: Binds Parameters in Batch Mode - TDengine C\nDESCRIPTION: Binds parameters in a batch mode for INSERT SQL statements, ensuring column order and count consistency with the SQL statement. This function enhances performance and is supported from version 2.1.1.0 onwards.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_74\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_bind_param_batch(TAOS_STMT* stmt, TAOS_MULTI_BIND* bind)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Update with Request ID in Java JDBC\nDESCRIPTION: Extended interface for executing a SQL update with a request ID for tracing. Returns affected row count and throws SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_41\n\nLANGUAGE: Java\nCODE:\n```\nint executeUpdate(String sql, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Getting All Client Info in Java\nDESCRIPTION: Retrieves all client information properties for the database connection. It throws `SQLException` if the operation fails. Returns a `Properties` object containing the client information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_31\n\nLANGUAGE: java\nCODE:\n```\n\"`Properties getClientInfo() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Data Partitioning Query\nDESCRIPTION: Demonstrates data partitioning by location tag, calculating average voltage for each unique location\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/03-query.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT location, avg(voltage) \nFROM meters \nPARTITION BY location;\n```\n\n----------------------------------------\n\nTITLE: TDengine Service Management Commands on Linux\nDESCRIPTION: Collection of systemctl commands for managing the TDengine service. Includes commands for starting, stopping, restarting, and checking status of the taosd service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n1. 启动服务进程：sudo systemctl start taosd\n2. 停止服务进程：sudo systemctl stop taosd\n3. 重启服务进程：sudo systemctl restart taosd\n4. 查看服务状态：sudo systemctl status taosd\n```\n\n----------------------------------------\n\nTITLE: Message Consumption with Consumer in Rust\nDESCRIPTION: Implements topic subscription, message reception, offset management, and topic listing for data streaming operations\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/26-rust.mdx#2025-04-16_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nfn subscribe<T: Into<String>, I: IntoIterator<Item = T> + Send>(&mut self, topics: I) -> RawResult<()>\n```\n\nLANGUAGE: Rust\nCODE:\n```\nfn recv_timeout(&self, timeout: Timeout) -> RawResult<Option<(Self::Offset, MessageSet<Self::Meta, Self::Data>)>>\n```\n\n----------------------------------------\n\nTITLE: ARIMA Forecasting Examples in SQL\nDESCRIPTION: Demonstrates two SQL queries using the FORECAST function with ARIMA algorithm, showcasing different parameter configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n--- ARIMA forecast, return 10 rows of results (default), perform white noise data check, with 95% confidence interval \nSELECT  _flow, _fhigh, _frowts, FORECAST(i32, \"algo=arima\")\nFROM foo;\n\n--- ARIMA forecast, periodic input data, 10 samples per period, disable white noise data check, with 95% confidence interval\nSELECT  _flow, _fhigh, _frowts, FORECAST(i32, \"algo=arima,alpha=95,period=10,wncheck=0\")\nFROM foo;\n```\n\n----------------------------------------\n\nTITLE: Batch Fetching Data Block from Result Set in TDengine (C)\nDESCRIPTION: Retrieves a block of data from the result set. Populates pData with the data block and numOfRows with the number of rows in the block.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_fetch_raw_block(WS_RES *rs, const void **pData, int32_t *numOfRows)\n```\n\n----------------------------------------\n\nTITLE: Supertable Insertion Syntax\nDESCRIPTION: Syntax for inserting data directly into supertables with field specifications and value definitions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO\n    stb1_name [(field1_name, ...)]\n        VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path\n    [stb2_name [(field1_name, ...)]\n        VALUES (field1_value, ...) [(field1_value2, ...) ...] | FILE csv_file_path\n    ...];\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statement in Go\nDESCRIPTION: Method for executing a prepared statement with parameters. Supports automatic type conversion from Go native types to database types. Returns a Result object with affected rows count.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Stmt) Exec(args ...any) (Result, error)\n```\n\n----------------------------------------\n\nTITLE: Modifying User Information in TDengine\nDESCRIPTION: SQL command to alter user properties like password, enable status, system info access, and database creation permissions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter user user_name alter_user_clause\n```\n\nLANGUAGE: sql\nCODE:\n```\nalter user test enable 0\n```\n\n----------------------------------------\n\nTITLE: Installing Java JDBC Connector with Maven\nDESCRIPTION: Adds TDengine JDBC driver dependency to Maven project for establishing database connections\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/index.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.taosdata.jdbc</groupId>\n  <artifactId>taos-jdbcdriver</artifactId>\n  <version>3.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Preparing Statement with ResultSet Options in Java\nDESCRIPTION: Creates a `PreparedStatement` object, specifying the SQL, `ResultSet` type, and concurrency mode. It throws `SQLException` if the operation fails. The precompiled SQL allows for better performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n\"`PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write (Java)\nDESCRIPTION: This Java code snippet demonstrates how to perform schemaless writes to TDengine using the native Java driver. It includes the `schemaless` method from the `SchemalessJniTest.java` example for writing data without pre-defined schema.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n\"{{#include docs/examples/java/src/main/java/com/taos/example/SchemalessJniTest.java:schemaless}}\"\n```\n\n----------------------------------------\n\nTITLE: Schemaless Insert with Request ID Tracking in TDengine C/C++ API\nDESCRIPTION: Extended version of the schemaless insert function that includes request ID tracking for distributed system debugging. The reqid parameter helps establish correlation between requests and responses across client and server sides.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_83\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES *taos_schemaless_insert_with_reqid(TAOS *taos, char *lines[], int numLines, int protocol, int precision, int64_t reqid)\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Connection for TDengine JDBC\nDESCRIPTION: JDBC driver class for establishing WebSocket connections to TDengine database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ncom.taosdata.jdbc.ws.WebSocketDriver\n```\n\n----------------------------------------\n\nTITLE: Create Sub-Table Task Implementation in Java\nDESCRIPTION: This class 'CreateSubTableTask' manages the creation of sub-tables in TDengine using a batch SQL approach, facilitating efficient data organization.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/CreateSubTableTask.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Stream with Time Range Filter in SQL\nDESCRIPTION: Creates a stream that processes data within a specific historical time range, starting from January 30, 2020.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists s1 fill_history 1 into st1  as select count(*) from t1 where ts > '2020-01-30' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Configuring Anomaly Detection Evaluation Settings in Bash\nDESCRIPTION: This bash snippet configures the settings for evaluating the effectiveness of anomaly detection algorithms in TDengine. It specifies the training start and end times, options for drawing result figures, and the list of algorithms to compare, using parameters such as k for k-sigma. The output includes evaluation metrics like recall and precision.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[ad]\\n# training data start time\\nstart_time = 2021-01-01T01:01:01\\n\\n# training data end time\\nend_time = 2021-01-01T01:01:11\\n\\n# draw the results or not\\ngen_figure = true\\n\\n# annotate the anomaly_detection result\\nanno_res = [9]\\n\\n# algorithms list that is involved in the comparison\\n[ad.algos]\\nksigma={\\\"k\\\": 2}\\niqr={}\\ngrubbs={}\\nlof={\\\"algorithm\\\":\\\"auto\\\", \\\"n_neighbor\\\": 3}\n```\n\n----------------------------------------\n\nTITLE: Creating Stream with Tags in TDengine SQL\nDESCRIPTION: This snippet demonstrates how to create a stream with custom tags in TDengine. It requires the TDengine SQL environment and utilizes the `CREATE STREAM` syntax to define streams with dynamic tags using the PARTITION clause. Key parameters include stream name, trigger conditions, and SQL query for defining the stream.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STREAM output_tag trigger at_once INTO output_tag_s TAGS(alias_tag varchar(100)) as select _wstart, count(*) from power.meters partition by concat(\"tag-\", tbname) as alias_tag interval(10s));\n```\n\n----------------------------------------\n\nTITLE: Creating Query Topic in TDengine SQL\nDESCRIPTION: SQL syntax for creating a topic based on a SELECT query. Allows subscribing to specific columns with filtering but doesn't support aggregates or time windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name as subquery\n```\n\n----------------------------------------\n\nTITLE: Establishing Connection to TDengine in PHP\nDESCRIPTION: PHP code snippet demonstrating how to establish a connection to a TDengine database using the PHP connector. Includes error handling with try-catch block.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/45-php.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n{{#include docs/examples/php/connect.php}}\n```\n\n----------------------------------------\n\nTITLE: Querying Data using Native Connection in Python\nDESCRIPTION: This Python snippet demonstrates querying data from TDengine using the native Python connector. It executes a SELECT query against the `meters` supertable using the native TDengine client library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"Native Connection\"\n{{#include docs/examples/python/query_native.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Writing Custom Types to TDengine Super Table with Flink Sink\nDESCRIPTION: This snippet shows how to write custom data types to a TDengine super table using the TDengine Flink connector. It involves defining a custom serializer to convert the custom type to a format suitable for TDengine and configuring the Flink sink to use this serializer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/flink/Main.java:CustomTypeToNormalTable}}\n\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Batch Result Fetching in C using TDengine\nDESCRIPTION: Batch retrieves the result set of an asynchronous query. Must be used with taos_query_a(). The callback function should handle the fetched rows and call this function again until all results are retrieved.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_68\n\nLANGUAGE: C\nCODE:\n```\nvoid taos_fetch_rows_a(TAOS_RES *res, void (*fp)(void *param, TAOS_RES *, int numOfRows), void *param)\n```\n\n----------------------------------------\n\nTITLE: Basic Schemaless Insert Function in TDengine C/C++ API\nDESCRIPTION: This function performs batch insert operations in schemaless mode, writing text data in line protocol to TDengine. It supports three different protocols: InfluxDB Line Protocol, OpenTSDB Telnet protocol, and OpenTSDB JSON protocol.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_82\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES* taos_schemaless_insert(TAOS* taos, const char* lines[], int numLines, int protocol, int precision)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to TDengine Normal Table Using Table SQL\nDESCRIPTION: This code snippet demonstrates writing data to a TDengine normal table using Flink's Table API and SQL. It involves defining a table sink with the TDengine connector and inserting data into that table through SQL INSERT statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/flink/Main.java:NormalTableSqlToSink}}\n\n```\n\n----------------------------------------\n\nTITLE: Creating or Replacing a View in TDengine SQL\nDESCRIPTION: This snippet demonstrates the syntax for creating or replacing a view in TDengine SQL, allowing users to define a view based on a query. The database name can be specified, and if omitted, defaults to the current database connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [ OR REPLACE ] VIEW [db_name.]view_name AS query\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar UDF in TDengine SQL\nDESCRIPTION: SQL syntax for creating a scalar user-defined function. Allows specifying the function name, library path, output type and programming language (C or Python).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [OR REPLACE] FUNCTION function_name AS library_path OUTPUTTYPE output_type [LANGUAGE 'C|Python'];\n```\n\n----------------------------------------\n\nTITLE: Creating Native Consumer in Python\nDESCRIPTION: This Python snippet provides the method for creating a native consumer. It includes important parameters for message subscription and processing from the broker.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/tmq_native.py:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Including Node.js Example for Parameter Binding\nDESCRIPTION: This Node.js snippet illustrates how to use parameter binding to insert data efficiently into TDengine. It emphasizes the reduction of SQL parsing costs during execution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{{#include docs/examples/node/websocketexample/stmt_example.js:createConnect}}\n```\n\n----------------------------------------\n\nTITLE: Establishing TDengine Database Connection\nDESCRIPTION: Function to create a database connection and initialize the connection context using username and password.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_56\n\nLANGUAGE: c\nCODE:\n```\nTAOS *taos_connect(const char *ip, const char *user, const char *pass, const char *db, uint16_t port)\n```\n\n----------------------------------------\n\nTITLE: Database Access Authorization SQL in TDengine\nDESCRIPTION: SQL syntax for granting database access privileges to users. Supports READ and WRITE permissions at database and table levels with wildcard support.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/26-grant.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT privileges ON priv_level TO user_name\n\nprivileges : {\n    ALL\n  | priv_type [, priv_type] ...\n}\n\npriv_type : {\n    READ\n  | WRITE\n}\n\npriv_level : {\n    dbname.tbname\n  | dbname.*\n  | *.*\n}\n```\n\n----------------------------------------\n\nTITLE: Data Partitioning Query with PARTITION BY in TDengine\nDESCRIPTION: Illustrates a data partitioning query using PARTITION BY on the 'meters' supertable, grouping data by location and calculating average voltage for each group.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT location, avg(voltage) \nFROM meters \nPARTITION BY location;\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with taosBenchmark in Shell\nDESCRIPTION: Uses taosBenchmark to generate 1 billion time-series data entries for testing, starting from September 13, 2020, with 100 devices and 10 million entries per device, collected every 10 seconds.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark --start-timestamp=1600000000000 --tables=100 --records=10000000 --time-step=10000\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Components\nDESCRIPTION: This set of commands starts the Zookeeper server, Kafka server, and Kafka Connect in distributed mode as daemons.  It is crucial to start Zookeeper first, then Kafka, and finally Kafka Connect.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nzookeeper-server-start.sh -daemon $KAFKA_HOME/config/zookeeper.properties\n\nkafka-server-start.sh -daemon $KAFKA_HOME/config/server.properties\n\nconnect-distributed.sh -daemon $KAFKA_HOME/config/connect-distributed.properties\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: ConsumerTask\nDESCRIPTION: This class represents a Kafka consumer that receives messages from Kafka and writes them to TDengine. It consumes messages from Kafka, writes to TDengine using JDBC efficient writing, and commits offsets based on progress.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/ConsumerTask.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Data using REST API in Python\nDESCRIPTION: This Python snippet queries data from TDengine using the REST API. It constructs an HTTP request containing an SQL SELECT query and sends it to the TDengine server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"Rest Connection\"\n{{#include docs/examples/python/query_rest.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Object Parameter in JDBC PreparedStatement (Java)\nDESCRIPTION: Sets the value of a specified parameter using a given object in a PreparedStatement. The object's type is determined automatically. Takes parameter index and object value as inputs. Throws SQLException if the statement is closed or index is out of range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_81\n\nLANGUAGE: Java\nCODE:\n```\nvoid setObject(int parameterIndex, Object x) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Client for Active-Active Mode\nDESCRIPTION: This Java code snippet shows how to configure the Java client library to connect to TDengine in active-active mode using WebSocket. It sets properties such as the hostname and port of the secondary node, enables automatic reconnection, and configures reconnection intervals and retry counts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nurl = \"jdbc:TAOS-RS://\" + host + \":6041/?user=root&password=taosdata\";\nProperties properties = new Properties();\nproperties.setProperty(TSDBDriver.PROPERTY_KEY_BATCH_LOAD, \"true\");\nproperties.setProperty(TSDBDriver.PROPERTY_KEY_SLAVE_CLUSTER_HOST, \"192.168.1.11\");\nproperties.setProperty(TSDBDriver.PROPERTY_KEY_SLAVE_CLUSTER_PORT, \"6041\");\nproperties.setProperty(TSDBDriver.PROPERTY_KEY_ENABLE_AUTO_RECONNECT, \"true\");\nproperties.setProperty(TSDBDriver.PROPERTY_KEY_RECONNECT_INTERVAL_MS, \"2000\");\nproperties.setProperty(TSDBDriver.PROPERTY_KEY_RECONNECT_RETRY_COUNT, \"3\");\nconnection = DriverManager.getConnection(url, properties);\n```\n\n----------------------------------------\n\nTITLE: Export User and Permission Information to JSON\nDESCRIPTION: This command exports user information, permissions, and whitelist information from a TDengine cluster to a JSON file. It utilizes the `privileges` command with the `-f` parameter to specify the source DSN and the `-o` parameter to define the output file path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx privileges -f \\\"taos+ws://root:taosdata@localhost:6041\\\" \\\n  -o ./user-pass-privileges-backup.json\"\n```\n\n----------------------------------------\n\nTITLE: Message Polling and Offset Management\nDESCRIPTION: Methods for polling messages, committing offsets, and managing consumer position within topics.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_99\n\nLANGUAGE: Java\nCODE:\n```\nConsumerRecords<V> poll(Duration timeout) throws SQLException\nvoid commitAsync() throws SQLException\nvoid commitSync() throws SQLException\nvoid seek(TopicPartition partition, long offset) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating Subtables in TDengine\nDESCRIPTION: SQL commands for creating individual and batch subtables using a supertable template with tag values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] tb_name USING stb_name TAGS (tag_value1, ...);\n\nCREATE TABLE [IF NOT EXISTS] tb_name USING stb_name (tag_name1, ...) TAGS (tag_value1, ...);\n```\n\n----------------------------------------\n\nTITLE: Detecting Anomalies Using ANOMALY_WINDOW in SQL\nDESCRIPTION: This SQL snippet demonstrates the use of the ANOMALY_WINDOW keyword to detect anomalies. It executes a query to find the start and end times of the anomaly window and the sum of values from a specified column. This operation requires a numerical column and an algorithm, such as IQR, to be specified in the options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/index.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n--- Use the IQR algorithm to detect anomalies in the `col_val` column. Also return the start and end time of the anomaly window as well as the sum of the `col` column within the window.\\nSELECT _wstart, _wend, SUM(col) \\nFROM foo\\nANOMALY_WINDOW(col_val, \\\"algo=iqr\\\");\n```\n\nLANGUAGE: SQL\nCODE:\n```\n--- Use the IQR algorithm to detect anomalies in the `i32` column.\\nSELECT _wstart, _wend, SUM(i32) \\nFROM foo\\nANOMALY_WINDOW(i32, \\\"algo=iqr\\\");\n```\n\nLANGUAGE: SQL\nCODE:\n```\n--- Use the k-sigma algorithm with k value of 2 to detect anomalies in the `i32`\\nSELECT _wstart, _wend, SUM(i32) \\nFROM foo\\nANOMALY_WINDOW(i32, \\\"algo=ksigma,k=2\\\");\\n\\ntaos> SELECT _wstart, _wend, count(*) FROM foo ANOMAYL_WINDOW(i32);\\n         _wstart         |          _wend          |   count(*)    |\\n====================================================================\\n 2020-01-01 00:00:16.000 | 2020-01-01 00:00:17.000 |             2 |\\nQuery OK, 1 row(s) in set (0.028946s)\n```\n\n----------------------------------------\n\nTITLE: Querying Data using JDBC in Java\nDESCRIPTION: This Java snippet demonstrates querying data from TDengine using Java's JDBC connector. It executes a SELECT query against the `meters` supertable in the `power` database and prints the retrieved data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/java/src/main/java/com/taos/example/JdbcQueryDemo.java:query_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Subtable Naming Convention\nDESCRIPTION: Illustrates how subtable names are automatically generated in TDengine using the measurement name, tag key-value pairs, and an MD5 hash. The process involves sorting tag keys, combining the measurement name and tag values, generating an MD5 hash, and prefixing it with 't_'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"measurement,tag_key1=tag_value1,tag_key2=tag_value2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Data using TDengine CLI\nDESCRIPTION: This snippet demonstrates how to query data written from Prometheus to TDengine using the TDengine CLI. It includes commands to show databases, use the `prometheus_data` database, show stables, and select data from the `metrics` stable. The output shows example data stored in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/02-prometheus.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n prometheus_data                |\nQuery OK, 3 row(s) in set (0.000585s)\n\ntaos> use prometheus_data;\nDatabase changed.\n\ntaos> show stables;\n              name              |\n=================================\n metrics                        |\nQuery OK, 1 row(s) in set (0.000487s)\n\ntaos> select * from metrics limit 10;\n              ts               |           value           |             labels             |\n=============================================================================================\n 2022-04-20 07:21:09.193000000 |               0.000024996 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:14.193000000 |               0.000024996 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:19.193000000 |               0.000024996 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:24.193000000 |               0.000024996 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:29.193000000 |               0.000024996 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:09.193000000 |               0.000054249 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:14.193000000 |               0.000054249 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:19.193000000 |               0.000054249 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:24.193000000 |               0.000054249 | {\"__name__\":\"go_gc_duration... |\n 2022-04-20 07:21:29.193000000 |               0.000054249 | {\"__name__\":\"go_gc_duration... |\nQuery OK, 10 row(s) in set (0.011146s)\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write (C#)\nDESCRIPTION: This C# code snippet demonstrates how to perform schemaless writes to TDengine using the native C# driver. The code is from `Program.cs` example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n\"{{#include docs/examples/csharp/nativesml/Program.cs:main}}\"\n```\n\n----------------------------------------\n\nTITLE: Python Native SQL Execution with Request ID\nDESCRIPTION: Implementation of SQL query execution with request ID using Python native connection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/reqid_native.py}}\n```\n\n----------------------------------------\n\nTITLE: Viewing All Indices in TDengine SQL\nDESCRIPTION: SQL query to view all existing indices in the system using the information_schema.INS_INDEXES system table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/08-tag-index.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM information_schema.INS_INDEXES\n```\n\n----------------------------------------\n\nTITLE: Initializing Statement Object in TDengine (C)\nDESCRIPTION: Initializes a pre-compiled SQL statement object for parameter binding. It requires a valid database connection established via `ws_connect()` and returns a pointer to the `WS_STMT` structure on success, or `NULL` on failure. Errors can be retrieved using `ws_stmt_errstr()`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n\"WS_STMT *ws_stmt_init(const WS_TAOS *taos)\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Continuous Query Stream in TDengine\nDESCRIPTION: Example of creating a stream with force_window_close trigger mode to implement continuous queries, checking data count every 1 second for the past 10-second window.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\ncreate stream if not exists continuous_query_s trigger force_window_close into continuous_query as select count(*) from power.meters interval(10s) sliding(1s)\n```\n\n----------------------------------------\n\nTITLE: Consumer Constructor Implementation - Rust/Python\nDESCRIPTION: Creates a new Consumer object for data subscription with configurable properties including host, port, group ID, and authentication details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nfn Consumer(conf: Option<&PyDict>, dsn: Option<&str>) -> PyResult<Self>\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Status in TDengine SQL\nDESCRIPTION: Checks the availability status of the cluster, returning 0 for unavailable, 1 for fully available, or 2 for partially available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER ALIVE;\n```\n\n----------------------------------------\n\nTITLE: Executing Join Queries with Various Conditions in SQL\nDESCRIPTION: These SQL queries demonstrate different types of join conditions in TDengine, including timestamp comparisons, logical operations, and function calls.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.* FROM meters a LEFT JOIN meters b ON a.ts = b.ts AND a.ts > '2023-10-18 10:00:00.000';\nSELECT a.* FROM meters a LEFT JOIN meters b ON a.ts = b.ts AND (a.ts > '2023-10-18 10:00:00.000' OR a.ts < '2023-10-17 10:00:00.000');\nSELECT a.* FROM meters a LEFT JOIN meters b ON timetruncate(a.ts, 1s) = timetruncate(b.ts, 1s) AND (a.ts + 1s > '2023-10-18 10:00:00.000' OR a.groupId > 0);\nSELECT a.* FROM meters a LEFT ASOF JOIN meters b ON timetruncate(a.ts, 1s) < timetruncate(b.ts, 1s) AND a.groupId = b.groupId;\n```\n\n----------------------------------------\n\nTITLE: Extracting Fields from Strings using Regex in TDengine\nDESCRIPTION: This snippet demonstrates how to use named capture groups in regular expressions to extract multiple fields (IP address, timestamp, method, URL, status, and length) from a string field, specifically from Nginx logs, using regex in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/index.md#2025-04-16_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n\"(?<ip>\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b)\\s-\\s-\\s\\[(?<ts>\\d{2}/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2}\\s\\+\\d{4})\\]\\s\\\"(?<method>[A-Z]+)\\s(?<url>[^\\s\\\"]+).*(?<status>\\d{3})\\s(?<length>\\d+)\"\n```\n\n----------------------------------------\n\nTITLE: Paginated Query with TDengine and MyBatis\nDESCRIPTION: Complete MyBatis XML mapper file showing a paginated query implementation. Includes result mapping, column list definitions, and a select statement with optional limit and offset parameters for pagination.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/springbootdemo/readme.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- weatherMapper.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"WeatherMapper\">\n\n    <resultMap id=\"BaseResultMap\" type=\"Weather\">\n        <id column=\"ts\" jdbcType=\"TIMESTAMP\" property=\"ts\" />\n        <result column=\"temperature\" jdbcType=\"INTEGER\" property=\"temperature\" />\n        <result column=\"humidity\" jdbcType=\"FLOAT\" property=\"humidity\" />\n    </resultMap>\n\n    <sql id=\"Base_Column_List\">\n        ts, temperature, humidity\n    </sql>\n\n    <select id=\"select\" resultMap=\"BaseResultMap\">\n        select\n        <include refid=\"Base_Column_List\" />\n        from test.weather\n        order by ts desc\n        <if test=\"limit != null\">\n            limit #{limit,jdbcType=BIGINT}\n        </if>\n        <if test=\"offset != null\">\n            offset #{offset,jdbcType=BIGINT}\n        </if>\n    </select>\n</mapper>\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Request ID in Java JDBC\nDESCRIPTION: Extended interface for executing a SQL query with a request ID for tracing. Returns ResultSet and throws SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_40\n\nLANGUAGE: Java\nCODE:\n```\nResultSet executeQuery(String sql, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in Java\nDESCRIPTION: This Java snippet demonstrates how to manually commit consumer offsets in TMQ. It synchronously commits the current offset, ensuring messages are processed before marking them as consumed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n\t\ttry {\n\t\t\tconsumer.commitSync();\n\t\t\tlog.info(\"commit success\");\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"commit failed\", e);\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Including Python Example for Parameter Binding\nDESCRIPTION: This Python code snippet provides an example of parameter binding for data insertion into TDengine. It highlights efficient handling of data inputs without repeated SQL parsing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/stmt_ws.py}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Custom Tags in TDengine\nDESCRIPTION: Example showing how to create a stream with custom tag values for destination tables, using concatenation to generate tag values from source table names.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM output_tag trigger at_once INTO output_tag_s TAGS(alias_tag varchar(100)) as select _wstart, count(*) from power.meters partition by concat(\"tag-\", tbname) as alias_tag interval(10s);\n```\n\n----------------------------------------\n\nTITLE: Using Druid Connection Pool with TDengine in Java\nDESCRIPTION: This code demonstrates how to use Druid connection pool with TDengine in Java. It includes configuring the connection pool and obtaining connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_32\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/DruidDemo.java:connection_pool}}\n```\n\n----------------------------------------\n\nTITLE: REST Client Constructor\nDESCRIPTION: Constructor for creating a new REST client connection with detailed configuration options including authentication, timeout settings and timestamp conversion options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef RestClient(self, url: str, token: str = None, database: str = None, user: str = \"root\", password: str = \"taosdata\", timeout: int = None, convert_timestamp: bool = True, timezone: Union[str, datetime.tzinfo] = None)\n```\n\n----------------------------------------\n\nTITLE: Deleting Stream Computing Task in TDengine SQL\nDESCRIPTION: This snippet provides the SQL command to delete a stream computing task in TDengine without affecting the data previously written by the stream. The `DROP STREAM` command is used with an optional `IF EXISTS` clause to avoid errors if the stream does not exist.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nDROP STREAM [IF EXISTS] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Python Connector Installation with pip\nDESCRIPTION: Demonstrates multiple methods for installing Python TDengine connectors for native, REST, and WebSocket connections\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/index.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install taospy\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install taos-ws-py\n```\n\n----------------------------------------\n\nTITLE: Configuring Flink Execution Environment in Java\nDESCRIPTION: This Java snippet demonstrates how to configure the Flink `StreamExecutionEnvironment` to use the `At-Least-Once` mode. This configuration ensures high data processing performance and low latency by enabling checkpointing every 5000 milliseconds. Requires Apache Flink environment setup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.enableCheckpointing(5000);\nenv.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.AT_LEAST_ONCE);\n```\n\n----------------------------------------\n\nTITLE: Creating a Streaming Computation in TDengine SQL\nDESCRIPTION: Syntax for creating a streaming computation, specifying options like trigger mode, watermark, and how to handle expired/updated data. Includes definition of the target super table and subquery.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM [IF NOT EXISTS] stream_name [stream_options] INTO stb_name[(field1_name, field2_name [COMPOSITE KEY], ...)] [TAGS (create_definition [, create_definition] ...)] SUBTABLE(expression) AS subquery [notification_definition]\nstream_options: {\n TRIGGER        [AT_ONCE | WINDOW_CLOSE | MAX_DELAY time | FORCE_WINDOW_CLOSE| CONTINUOUS_WINDOW_CLOSE [recalculate rec_time_val] ]\n WATERMARK      time\n IGNORE EXPIRED [0|1]\n DELETE_MARK    time\n FILL_HISTORY   [0|1] [ASYNC]\n IGNORE UPDATE  [0|1]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Column Type Information in Go\nDESCRIPTION: Provides methods for creating and configuring column type information with support for multiple data types and size specification\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_63\n\nLANGUAGE: go\nCODE:\n```\nfunc NewColumnType(size int) *ColumnType\nfunc (c *ColumnType) AddBool() *ColumnType\nfunc (c *ColumnType) AddTinyint() *ColumnType\n```\n\n----------------------------------------\n\nTITLE: Establishing Database Connection\nDESCRIPTION: Creates a connection to the TDengine database using the configured JDBC driver.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/43-r-lang.md#2025-04-16_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n# Create a database connection\nconn <- dbConnect(drv, url)\n```\n\n----------------------------------------\n\nTITLE: Querying Data using REST API in Shell\nDESCRIPTION: This shell script uses `curl` to query data from TDengine using the REST API. It sends an HTTP request with an SQL SELECT statement to the TDengine server, retrieves the data, and displays it.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ncurl --location -uroot:taosdata 'http://127.0.0.1:6041/rest/sql' \\\n--data 'SELECT ts, current, location FROM power.meters limit 100'\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Stream Computing Tasks in TDengine SQL\nDESCRIPTION: These snippets demonstrate how to view existing stream computing tasks in TDengine. `SHOW STREAMS` lists the current streams, while a `SELECT` query on `information_schema.ins_streams` provides detailed information. No additional setup is needed; these are built-in TDengine SQL commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STREAMS;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from information_schema.`ins_streams`;\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - C\nDESCRIPTION: This C code snippet explains how to connect to TDengine via WebSocket using the provided example file. It includes code that illustrates the connection parameters to be utilized.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/connect_example.c}}\n```\n\n----------------------------------------\n\nTITLE: Restoring Data with taosdump - Shell\nDESCRIPTION: This snippet illustrates how to restore data from a backup file to a TDengine cluster using the taosdump command. It requires the taosdump tool and valid connection details to the TDengine instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/09-backup.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntaosdump -i /file/path -h localhost -P 6030\n```\n\n----------------------------------------\n\nTITLE: Executing Left Semi Join in TDengine SQL\nDESCRIPTION: Query to find timestamps in table d1001 where voltage exceeds 220V and other meters also have voltage above 220V at the same moment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.ts FROM d1001 a LEFT SEMI JOIN meters b ON a.ts = b.ts and a.voltage > 220 and b.voltage > 220 and b.tbname != 'd1001'\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Route for Time-MoE Model Prediction\nDESCRIPTION: This Python snippet shows how to set up a Flask route for the Time-MoE model, allowing users to make POST requests for predictions. The function 'time_moe' will handle incoming requests to the 'ds_predict' endpoint.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/ds_predict', methods=['POST'])\ndef time_moe():\n...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Load Balancing\nDESCRIPTION: This Nginx configuration snippet is for setting up load balancing among multiple instances of taosAdapter. It includes configuration for different server locations like dbserver, keeper, and explorer, each listening on specific ports. The configuration utilizes features like 'least_conn' for dbserver to ensure connections are balanced based on the current number of connections, and 'ip_hash' for others to maintain session persistence. Ensure correct IP addresses in the 'upstream' directive.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/01-manual.md#2025-04-16_snippet_4\n\nLANGUAGE: Nginx\nCODE:\n```\nuser root;\nworker_processes auto;\nerror_log /var/log/nginx_error.log;\n\n\n    events {\n        use epoll;\n        worker_connections 1024;\n    }\n\n    http {\n\n        access_log off;\n\n        map $http_upgrade $connection_upgrade {\n            default upgrade;\n            ''      close;\n        }\n\n        server {\n            listen 6041;\n            location ~* {\n                proxy_pass http://dbserver;\n                proxy_read_timeout 600s;\n                proxy_send_timeout 600s;\n                proxy_connect_timeout 600s;\n                proxy_next_upstream error http_502 non_idempotent;\n                proxy_http_version 1.1;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection $http_connection;\n            }\n        }\n        server {\n            listen 6043;\n            location ~* {\n                proxy_pass http://keeper;\n                proxy_read_timeout 60s;\n                proxy_next_upstream error  http_502 http_500  non_idempotent;\n            }\n        }\n\n        server {\n            listen 6060;\n            location ~* {\n                proxy_pass http://explorer;\n                proxy_read_timeout 60s;\n                proxy_next_upstream error  http_502 http_500  non_idempotent;\n            }\n        }\n        upstream dbserver {\n            least_conn;\n            server 172.16.214.201:6041 max_fails=0;\n            server 172.16.214.202:6041 max_fails=0;\n            server 172.16.214.203:6041 max_fails=0;\n        }\n        upstream keeper {\n            ip_hash;\n            server 172.16.214.201:6043 ;\n            server 172.16.214.202:6043 ;\n            server 172.16.214.203:6043 ;\n        }\n        upstream explorer{\n            ip_hash;\n            server 172.16.214.201:6060 ;\n            server 172.16.214.202:6060 ;\n            server 172.16.214.203:6060 ;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using TmqBuilder for Data Subscription Connection in Rust\nDESCRIPTION: Methods for the TmqBuilder structure that creates consumer objects for data subscription in TDengine. These methods handle connection creation, parameter management, and connection status verification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn available_params() -> &'static [&'static str]\n\nfn from_dsn<D: IntoDsn>(dsn: D) -> RawResult<Self>\n\nfn client_version() -> &'static str\n\nfn ping(&self, conn: &mut Self::Target) -> RawResult<()>\n\nfn ready(&self) -> bool\n\nfn build(&self) -> RawResult<Self::Target>\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in C using TDengine\nDESCRIPTION: Executes an SQL statement, which can be a DQL, DML, or DDL statement. The result must be checked using taos_errno() to determine success or failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_63\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES* taos_query(TAOS *taos, const char *sql)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Subtables in TDengine\nDESCRIPTION: These SQL statements create virtual subtables for the four devices (d1001, d1002, d1003, and d1004), leveraging the virtual supertable `meters_v`. Each virtual subtable selects the 'current', 'voltage', and 'phase' columns from the corresponding subtables of the 'current_stb', 'voltage_stb', and 'phase_stb' supertables, respectively. The `USING meters_v` clause associates these virtual subtables with the defined virtual supertable, and each is tagged with location and group_id information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VTABLE d1001_v (\n    current from current_d1001.current,\n    voltage from voltage_d1001.voltage, \n    phase from phase_d1001.phase\n) \nUSING meters_v \nTAGS (\n    \"California.SanFrancisco\", \n    2\n);\n       \nCREATE VTABLE d1002_v (\n    current from current_d1002.current,\n    voltage from voltage_d1002.voltage, \n    phase from phase_d1002.phase\n) \nUSING meters_v \nTAGS (\n    \"California.SanFrancisco\", \n    3\n);\n       \nCREATE VTABLE d1003_v (\n    current from current_d1003.current,\n    voltage from voltage_d1003.voltage, \n    phase from phase_d1003.phase\n) \nUSING meters_v \nTAGS (\n    \"California.LosAngeles\", \n    3\n);\n       \nCREATE VTABLE d1004_v (\n    current from current_d1004.current,\n    voltage from voltage_d1004.voltage, \n    phase from phase_d1004.phase\n) \nUSING meters_v \nTAGS (\n    \"California.LosAngeles\", \n    2\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Left Anti Join in TDengine SQL\nDESCRIPTION: Query to find timestamps when voltage in d1001 exceeds 220V but no other meter has voltage above 220V at that time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.ts FROM d1001 a LEFT ANTI JOIN meters b ON a.ts = b.ts and b.voltage > 220 and b.tbname != 'd1001' WHERE a.voltage > 220\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table in TDengine SQL\nDESCRIPTION: This SQL statement creates a basic table 'd1003' without tags in TDengine. It defines a structure with timestamp, current, voltage, phase, location, and group_id columns, demonstrating the creation of a table similar to traditional relational databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE d1003(\n    ts timestamp,\n    current float, \n    voltage int, \n    phase float,\n    location varchar(64), \n    group_id int\n);\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine Go Driver Dependency in go.mod\nDESCRIPTION: This `go.mod` snippet demonstrates how to add the TDengine Go driver (`driver-go`) dependency to a Go project's module file. This enables Go applications to connect to TDengine databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_10\n\nLANGUAGE: go-mod\nCODE:\n```\n\"module goexample\\n\\ngo 1.17\\n\\nrequire github.com/taosdata/driver-go/v3 latest\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for TDengine Testing\nDESCRIPTION: Commands to install Python and required dependencies for running TDengine tests. This includes the TDengine Python connector and various other libraries used in the testing framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install python3\napt install python3-pip\n\npip3 install pandas psutil fabric2 requests faker simplejson \\\n  toml pexpect tzlocal distro decorator loguru hyperloglog\n\npip3 install taospy taos-ws-py\n```\n\n----------------------------------------\n\nTITLE: Creating Query Topic in TDengine SQL\nDESCRIPTION: SQL syntax for creating a query topic in TDengine. This allows subscribing to results of an SQL query, essentially creating a continuous query that returns only the latest values each time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name as subquery\n```\n\n----------------------------------------\n\nTITLE: Including Rust Native Parameter Binding Example\nDESCRIPTION: This Rust code snippet demonstrates parameter binding implementation using a native interface, aiming for optimized data insertion into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/stmt.rs}}\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in TDengine SQL\nDESCRIPTION: SQL syntax for creating regular tables and child tables from super tables. Supports options like comments, SMA (Small Materialized Aggregates), and TTL (Time to Live).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] [db_name.]tb_name (create_definition [, create_definition] ...) [table_options]\n\nCREATE TABLE create_subtable_clause\n\nCREATE TABLE [IF NOT EXISTS] [db_name.]tb_name (create_definition [, create_definition] ...)\n    [TAGS (create_definition [, create_definition] ...)]\n    [table_options]\n```\n\n----------------------------------------\n\nTITLE: Performing Least Squares Regression with LEASTSQUARES() in TDengine SQL\nDESCRIPTION: Calculates the least squares regression line equation for a column's values. Returns a string expression with slope and intercept. Applicable to numeric columns in tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\nLEASTSQUARES(expr, start_val, step_val)\n```\n\n----------------------------------------\n\nTITLE: Creating REST Connection for TDengine JDBC\nDESCRIPTION: JDBC driver class for establishing REST connections to TDengine database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncom.taosdata.jdbc.rs.RestfulDriver\n```\n\n----------------------------------------\n\nTITLE: Using result using Stmt object in af package\nDESCRIPTION: This function retrieves the result set after executing a query. It returns a driver.Rows object representing the result set and an error if the retrieval fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) UseResult() (driver.Rows, error)\"\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Binding with TDengine in PHP\nDESCRIPTION: PHP code example demonstrating how to use parameter binding for inserting data into a TDengine database, which can help prevent SQL injection and improve performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/45-php.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n{{#include docs/examples/php/insert_stmt.php}}\n```\n\n----------------------------------------\n\nTITLE: Querying DNodes in TDengine Cluster\nDESCRIPTION: Executes a query within the TDengine CLI to list all available dnodes in the cluster. The command retrieves the IDs, endpoints, status, and other details of each dnode, aiding in cluster management and monitoring.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/01-manual.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntaos> show dnodes;\n```\n\n----------------------------------------\n\nTITLE: Window Clause Syntax\nDESCRIPTION: Specifies various window types including session, state, interval, event, and count windows with their respective configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nwindow_clause: {\n    SESSION(ts_col, tol_val)\n  | STATE_WINDOW(col)\n  | INTERVAL(interval_val [, interval_offset]) [SLIDING (sliding_val)]\n  | EVENT_WINDOW START WITH start_trigger_condition END WITH end_trigger_condition\n  | COUNT_WINDOW(count_val[, sliding_val])\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Creation Example with Notifications in SQL\nDESCRIPTION: Example of creating a stream that computes average current from meters and sends notifications on window events to multiple websocket endpoints.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STREAM avg_current_stream FILL_HISTORY 1\n    AS SELECT _wstart, _wend, AVG(current) FROM meters\n    INTERVAL (1m)\n    NOTIFY ('ws://localhost:8080/notify', 'wss://192.168.1.1:8080/notify?key=foo')\n    ON ('WINDOW_OPEN', 'WINDOW_CLOSE');\n    NOTIFY_HISTORY 0\n    ON_FAILURE PAUSE;\n```\n\n----------------------------------------\n\nTITLE: Querying Data using WebSocket Connection in C\nDESCRIPTION: This C snippet demonstrates how to query data from TDengine using the C connector with a WebSocket connection. It sets up a WebSocket connection, executes an SQL SELECT query, and processes the results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_30\n\nLANGUAGE: c\nCODE:\n```\n```c  title=\"WebSocket Connection\"\n{{#include docs/examples/c-ws/query_data_demo.c:query_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Example: Replacing Bit AND UDF with Python Implementation\nDESCRIPTION: Example of modifying an existing UDF to use Python implementation with different output type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE OR REPLACE FUNCTION bit_and AS \"/home/taos/udf_example/bit_and.py\" OUTPUTTYPE BIGINT LANGUAGE 'Python';\n```\n\n----------------------------------------\n\nTITLE: Utility Class for Java Application Support Functions\nDESCRIPTION: The 'Util' class provides essential utility functions for connection management, database creation, and topic management within the application.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/Util.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Subtable Creation Example\nDESCRIPTION: Shows how to create a stream with custom subtable naming using concatenation and partition information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol SUBTABLE(CONCAT('new-', tname)) AS SELECT _wstart, count(*), avg(voltage) FROM meters PARTITION BY tbname tname INTERVAL(1m);\n```\n\n----------------------------------------\n\nTITLE: SQL Extensions for Time-Series Data in TDengine\nDESCRIPTION: Examples of TDengine's SQL extensions including partition by clause, slimit/soffset for group limiting, tag queries, window queries, and specialized join operations for time-series data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/05-query.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Extended grouping with partition by\nPARTITION BY custom_dimension\n\n-- Group limiting with slimit/soffset\nSLIMIT 10 SOFFSET 5\n\n-- Tag query syntax\nSELECT tag_column FROM supertable\n\n-- Window query examples\nSELECT * FROM table_name WINDOW [time|state|session|event|count]\n\n-- Extended join types\nSELECT * FROM table1 ASOF JOIN table2\n```\n\n----------------------------------------\n\nTITLE: Obtaining Custom Authorization Code in TDengine\nDESCRIPTION: Example of obtaining a custom authorization code from TDengine's REST API using a cURL command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://192.168.0.1:6041/rest/login/root/taosdata\n```\n\n----------------------------------------\n\nTITLE: Creating Native Consumers in C\nDESCRIPTION: The C snippet covers the setup of native consumers with various function definitions for connecting to the broker and processing messages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/tmq_demo.c:create_consumer_1}}\n```\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/tmq_demo.c:create_consumer_2}}\n```\n\n----------------------------------------\n\nTITLE: Batch Data Setting Methods in Java\nDESCRIPTION: Methods for setting batch data values for different data types. Each method takes a column index and an ArrayList of values. Throws SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_94\n\nLANGUAGE: Java\nCODE:\n```\nvoid setInt(int columnIndex, ArrayList<Integer> list) throws SQLException\nvoid setFloat(int columnIndex, ArrayList<Float> list) throws SQLException\nvoid setTimestamp(int columnIndex, ArrayList<Long> list) throws SQLException\nvoid setLong(int columnIndex, ArrayList<Long> list) throws SQLException\nvoid setDouble(int columnIndex, ArrayList<Double> list) throws SQLException\nvoid setBoolean(int columnIndex, ArrayList<Boolean> list) throws SQLException\nvoid setByte(int columnIndex, ArrayList<Byte> list) throws SQLException\nvoid setShort(int columnIndex, ArrayList<Short> list) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Python Aggregate Function Template in TDengine\nDESCRIPTION: Provides a template outlay for defining aggregate functions in Python, including steps for start, reduce, and finish processes used in handling and calculating aggregated data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndef init():\\n    #initialization\\ndef destroy():\\n    #destroy\\ndef start() -> bytes:\\n    #return serialize(init_state)\\ndef reduce(inputs: datablock, buf: bytes) -> bytes\\n    # deserialize buf to state\\n    # reduce the inputs and state into new_state. \\n    # use inputs.data(i, j) to access python object of location(i, j)\\n    # serialize new_state into new_state_bytes\\n    return new_state_bytes   \\ndef finish(buf: bytes) -> output_type:\\n    #return obj of type outputtype   \n```\n\n----------------------------------------\n\nTITLE: Data Subscription Configuration and Event Handling Structures in Go\nDESCRIPTION: Defines configuration and event handling structures for managing WebSocket and native data subscription connections with various configuration options\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_65\n\nLANGUAGE: go\nCODE:\n```\ntype ConfigValue interface{}\ntype ConfigMap map[string]ConfigValue\n\ntype TopicPartition struct {\n    Topic     *string\n    Partition int32\n    Offset    Offset\n    Metadata  *string\n    Error     error\n}\n```\n\n----------------------------------------\n\nTITLE: REST Connection to TDengine in Go\nDESCRIPTION: Connects to TDengine using the REST API, providing an alternative connection method for scenarios requiring HTTP-based communication with the database\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_go.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/restexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Including Java Extended Interface Example for Parameter Binding\nDESCRIPTION: This code snippet illustrates the use of the extended interface for parameter binding in Java, which offers improved performance. It is designed to efficiently insert data into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSParameterBindingExtendInterfaceDemo.java:para_bind}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Prepared Statement Object\nDESCRIPTION: Creates a new prepared statement object for parameter binding operations. Takes a database connection pointer and returns a statement handle.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nWS_STMT *ws_stmt_init(const WS_TAOS *taos)\n```\n\n----------------------------------------\n\nTITLE: Executing Left Join Query on Voltage Data in SQL\nDESCRIPTION: This SQL query performs a Left Join between two tables (d1001 and d1002) to return all voltage values from d1001 and moments when both tables have voltages greater than 220V, along with their respective voltage values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.ts, a.voltage, b.voltage FROM d1001 a LEFT JOIN d1002 b ON a.ts = b.ts and a.voltage > 220 and b.voltage > 220\n```\n\n----------------------------------------\n\nTITLE: Complex Query Example with LIKE and ORDER BY\nDESCRIPTION: Query with time range, LIKE pattern matching, and descending order.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM tb1 WHERE ts > '2018-06-01 08:00:00.000' AND ts <= '2018-06-02 08:00:00.000' AND col3 LIKE '%nny' ORDER BY ts DESC;\n```\n\n----------------------------------------\n\nTITLE: Querying Virtual Table in TDengine\nDESCRIPTION: Examples of querying virtual tables, showing both full table select and partial column selection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM v1;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT c1, c2 FROM v1;\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Integer Unpacking in C\nDESCRIPTION: Example demonstrating how to unpack a JSON integer value into a C integer variable\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n/* root is the JSON integer 42 */\nint myint;\njson_unpack(root, \"i\", &myint);\nassert(myint == 42);\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Information with Offset Structure in Rust\nDESCRIPTION: Methods for the Offset structure that provide information about the database, topic, and partition to which the current message belongs in TDengine data subscription.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nfn database(&self) -> &str\n\nfn topic(&self) -> &str\n\nfn vgroup_id(&self) -> VGroupId\n```\n\n----------------------------------------\n\nTITLE: Manual Offset Commit - WebSocket Python Implementation\nDESCRIPTION: Shows how to manually commit offsets in Python using WebSocket connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/tmq_websocket_example.py:commit_offset}}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a TMQ Topic in Python\nDESCRIPTION: This Python snippet demonstrates subscribing to a topic using the TMQ native client. The `subscribe` method takes a list of topics as input, allowing subscription to multiple topics simultaneously. The `poll` method retrieves messages, which can contain multiple records.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    def subscribe(self):\n        td = TMQ_NATIVE.TMQ_SubWithFilter(self.tmq,b'topic', b'test',\n                                           b'group.id', b'test',\n                                           b'auto.offset.reset', b'earliest')\n        if td != 0:\n            print(f'failed to subscribe topic, {TMQ_NATIVE.TMQ_GetLastError()}')\n            sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Tag Management Methods in Java\nDESCRIPTION: Collection of methods for managing tags with different data types including null, boolean, numeric, and string values. Each method sets a tag value at a specified index.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_93\n\nLANGUAGE: Java\nCODE:\n```\nvoid setTagNull(int index, int type)\nvoid setTagBoolean(int index, boolean value)\nvoid setTagInt(int index, int value)\nvoid setTagByte(int index, byte value)\nvoid setTagShort(int index, short value)\nvoid setTagLong(int index, long value)\nvoid setTagTimestamp(int index, long value)\nvoid setTagFloat(int index, float value)\nvoid setTagDouble(int index, double value)\nvoid setTagString(int index, String value)\nvoid setTagNString(int index, String value)\nvoid setTagJson(int index, String value)\nvoid setTagVarbinary(int index, byte[] value)\nvoid setTagGeometry(int index, byte[] value)\n```\n\n----------------------------------------\n\nTITLE: Freeing Query Result Set in C using TDengine\nDESCRIPTION: Frees the query result set and related resources. Must be called after completing the query to prevent memory leaks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_66\n\nLANGUAGE: C\nCODE:\n```\nvoid taos_free_result(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Historical Data Processing in SQL\nDESCRIPTION: This SQL snippet creates a stream that counts data entries from power meters every 10 seconds, including historical data. It uses the fill_history option to process data written before the stream's creation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists count_history_s fill_history 1 into count_history as select count(*) from power.meters interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Consuming Data with TMQ in Java\nDESCRIPTION: This Java snippet demonstrates how to poll data from a subscribed TMQ topic. It relies on a custom `ResultBean` class to deserialize the received messages, mapping column names and data types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n\t\twhile (true) {\n\t\t\tConsumerRecords<String, ResultBean> records = consumer.poll(Duration.ofSeconds(1));\n\t\t\tif (!records.isEmpty()) {\n\t\t\t\tfor (ConsumerRecord<String, ResultBean> record : records) {\n\t\t\t\t\tResultBean value = record.value();\n\t\t\t\t\tlog.info(\"topic:{},partition:{},offset:{},value: {}\", record.topic(), record.partition(), record.offset(), value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Holt-Winters FORECAST example\nDESCRIPTION: This SQL statement demonstrates how to use the FORECAST function in TDengine with Holt-Winters forecasting. It specifies the target column `i32`, the algorithm `holtwinters`, a period of 10, and multiplicative models for both trend and seasonality.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/03-holtwinters.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n\"SELECT _frowts, FORECAST(i32, \\\"algo=holtwinters, period=10,trend=mul,seasonal=mul\\\") from foo\"\n```\n\n----------------------------------------\n\nTITLE: Writing RowData to TDengine Super Table with Flink Sink\nDESCRIPTION: This code snippet demonstrates how to write Flink `RowData` to a TDengine super table using the TDengine Flink connector. It showcases the basic setup and configuration required to send data from a Flink job to a TDengine instance, targeting a specific super table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/flink/Main.java:RowDataToSuperTable}}\n\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in Java\nDESCRIPTION: This Java snippet demonstrates parameter binding using WebSocket connections in TDengine. It includes both standard JDBC and extended interfaces for parameter binding, offering improved performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSParameterBindingStdInterfaceDemo.java:para_bind}}\n```\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSParameterBindingExtendInterfaceDemo.java:para_bind}}\n```\n\n----------------------------------------\n\nTITLE: Creating Query Node in TDengine SQL\nDESCRIPTION: Creates a query node (qnode) on a specified dnode for computation and storage separation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE QNODE ON DNODE dnode_id;\n```\n\n----------------------------------------\n\nTITLE: State Window Query with Minimum Duration in TDengine SQL\nDESCRIPTION: This query uses the TRUE_FOR parameter with STATE_WINDOW to set a minimum duration of 3 seconds for state windows. Windows shorter than this duration are automatically discarded.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), FIRST(ts), status FROM temp_tb_1 STATE_WINDOW(status) TRUE_FOR (3s);\n```\n\n----------------------------------------\n\nTITLE: Creating Stream with Specific Time Period in SQL\nDESCRIPTION: Creates a stream that processes data only within a certain time period, with both start and end dates specified.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists s1 fill_history 1 into st1  as select count(*) from t1 where ts > '2020-01-30' and ts < '2023-01-01' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Creating Supertables in TDengine\nDESCRIPTION: SQL syntax for creating supertables with customizable columns, tags, and table options. Supports features like composite keys, encoding, compression, and various configuration options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE [IF NOT EXISTS] stb_name (create_definition [, create_definition] ...) TAGS (create_definition [, create_definition] ...) [table_options]\n \ncreate_definition:\n    col_name column_definition\n \ncolumn_definition:\n    type_name [COMPOSITE KEY] [ENCODE 'encode_type'] [COMPRESS 'compress_type'] [LEVEL 'level_type']\n\ntable_options:\n    table_option ...\n\ntable_option: {\n    COMMENT 'string_value'\n  | SMA(col_name [, col_name] ...)  \n  | KEEP value\n}\n```\n\n----------------------------------------\n\nTITLE: Get Column Precision using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the maximum precision of a specified column. The column number starts from 1. An SQLException is thrown if the column index is out of range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_69\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `int getPrecision(int column) throws SQLException`\n  - **Interface Description**: Gets the maximum precision of a specified column.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The maximum precision of the column.\n  - **Exception**: Throws `SQLException` if the column index is out of range.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Consumer in TDengine (TypeScript)\nDESCRIPTION: Creates a new WsConsumer object with the specified configuration. Throws a TDWebSocketClientError if an exception occurs during execution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic async newConsumer(wsConfig:Map<string, any>):Promise<WsConsumer>\n```\n\n----------------------------------------\n\nTITLE: Example of Creating and Querying Views in TDengine SQL\nDESCRIPTION: This snippet provides practical examples of how to create views in TDengine SQL and perform queries against them, showcasing the use of views in data retrieval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW view1 AS SELECT _wstart, count(*) FROM table1 INTERVAL(1d);\nCREATE VIEW view2 AS SELECT ts, col2 FROM table1;\nCREATE VIEW view3 AS SELECT * from view1;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from view1;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW view1;\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Parameters in C# for TDengine\nDESCRIPTION: Demonstrates how to set connection parameters using the ConnectionStringBuilder in C# for connecting to a TDengine database. This example shows the key-value pair method for setting WebSocket connection parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n\"protocol=WebSocket;host=127.0.0.1;port=6041;useSSL=false;enableCompression=true;autoReconnect=true;reconnectIntervalMs=10;reconnectRetryCount=5\"\n```\n\n----------------------------------------\n\nTITLE: Field Creation Methods in Rust\nDESCRIPTION: Methods for creating and manipulating field definitions in the database, including empty field creation and field property access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub const fn empty() -> Field\npub fn new(name: impl Into<String>, ty: Ty, bytes: u32) -> Field\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Type Tag in TDengine\nDESCRIPTION: Demonstrates how to create a stable table with a JSON type tag and create a subtable using JSON tag values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/17-json.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate stable s1 (ts timestamp, v1 int) tags (info json)\n\ncreate table s1_1 using s1 tags ('{\"k1\": \"v1\"}')\n```\n\n----------------------------------------\n\nTITLE: Filtered State Window Query in TDengine SQL\nDESCRIPTION: This query shows how to filter state window results, focusing only on windows where the status is 2. It uses a subquery to first create state windows and then applies a filter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM (SELECT COUNT(*) AS cnt, FIRST(ts) AS fst, status FROM temp_tb_1 STATE_WINDOW(status)) t WHERE status = 2;\n```\n\n----------------------------------------\n\nTITLE: Importing taosWS driver\nDESCRIPTION: This code snippet shows how to import the `taosWS` driver for WebSocket connections in Go. The blank identifier `_` is used to import the driver for its side effects (i.e., registering the driver).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"database/sql\"\n    _ \"github.com/taosdata/driver-go/v3/taosWS\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting a UInt value in Param object\nDESCRIPTION: This function sets a UInt value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the UInt value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_54\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetUInt(offset int, value uint)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Data with TDengine CLI Shell\nDESCRIPTION: This shell snippet shows how to query data from TDengine using the command line interface. It demonstrates listing stables within a specified database and retrieving data from the meters table with a limit of 1 result.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ntaos> show power.stables;\n          stable_name           |\n=================================\n meter_current                  |\n stb0_0                         |\n meters                         |\nQuery OK, 3 row(s) in set (0.002527s)\n\n\ntaos> select * from power.meters limit 1 \\G;\n*************************** 1.row ***************************\n     _ts: 2021-07-11 20:33:53.639\n current: 10.300000199999999\n voltage: 219\n   phase: 0.310000000000000\n groupid: 2\nlocation: California.SanFrancisco\nQuery OK, 1 row(s) in set (0.004501s)\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query with Filtering and Sorting\nDESCRIPTION: Demonstrates selecting records from a supertable with voltage condition, ordered by timestamp in descending order, limited to 5 results\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/03-query.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM meters \nWHERE voltage > 230 \nORDER BY ts DESC\nLIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Double Value from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a Java double from a database result set. Returns 0.0d if the value is NULL and throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_44\n\nLANGUAGE: Java\nCODE:\n```\ndouble getDouble(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in TDengine for Power Consumption Data\nDESCRIPTION: SQL commands to create stable and table structures in TDengine for storing power consumption and goods data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STABLE meters (ts TIMESTAMP, num INT, temperature FLOAT, goods INT) TAGS (device NCHAR(20));\nCREATE TABLE goods (ts1 TIMESTAMP, ts2 TIMESTAMP, goods FLOAT);\n```\n\n----------------------------------------\n\nTITLE: Including C# Example for Parameter Binding\nDESCRIPTION: This C# snippet shows how to use parameter binding to facilitate effective data insertion into TDengine, focusing on reducing overhead associated with SQL parsing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wsStmt/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection to TDengine in Rust\nDESCRIPTION: This code illustrates how to establish a native connection to TDengine database using Rust. It includes connection initialization and error handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/connect.rs}}\n```\n\n----------------------------------------\n\nTITLE: Rust SQL Execution with Request ID\nDESCRIPTION: Implementation of SQL query execution with request ID using Rust native connector\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/query.rs:query_with_req_id}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Connection Parameters\nDESCRIPTION: Configuration parameters table for connection-related settings in TDengine client driver\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/02-taosc.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name|Supported Version|Dynamic Modification|Description|\n|----------------------|----------|--------------------|-------------|\n|firstEp               |                  |Supported, effective immediately  |At startup, the endpoint of the first dnode in the cluster to actively connect to, default value: hostname:6030, if the server's hostname cannot be obtained, it is assigned to localhost|\n|secondEp              |                  |Supported, effective immediately  |At startup, if the firstEp cannot be connected, try to connect to the endpoint of the second dnode in the cluster, no default value|\n|compressMsgSize       |                  |Supported, effective immediately  |Whether to compress RPC messages; -1: no messages are compressed; 0: all messages are compressed; N (N>0): only messages larger than N bytes are compressed; default value -1|\n|shellActivityTimer    |                  |Not supported                     |The duration in seconds for the client to send heartbeats to mnode, range 1-120, default value 3|\n|numOfRpcSessions      |                  |Supported, effective immediately  |Maximum number of connections supported by RPC, range 100-100000, default value 30000|\n|numOfRpcThreads       |                  |Not supported                     |Number of threads for RPC to send and receive data, range 1-50, default value is half of the CPU cores|\n|numOfTaskQueueThreads |                  |Not supported                     |Number of threads for the client to handle RPC messages, range 4-16, default value is half of the CPU cores|\n|timeToGetAvailableConn| Cancelled after 3.3.4.*   |Not supported                     |The longest waiting time to get an available connection, range 10-50000000, in milliseconds, default value 500000|\n|useAdapter            |          |Supported, effective immediately  |Internal parameter, whether to use taosadapter, affects CSV file import|\n|shareConnLimit        |Added in 3.3.4.0|Not supported                     |Internal parameter, the number of queries a link can share, range 1-256, default value 10|\n|readTimeout           |Added in 3.3.4.0|Not supported                     |Internal parameter, minimum timeout, range 64-604800, in seconds, default value 900|\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache Configuration\nDESCRIPTION: SQL commands to enable caching on the power database and verify the configuration using show create database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/02-cache.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nalter database power cachemodel 'both';\nshow create database power\\G;\n```\n\n----------------------------------------\n\nTITLE: Creating Various Views in TDengine SQL\nDESCRIPTION: Examples of creating different types of views, including time-based aggregation, column selection, and nested views.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW view1 AS SELECT _wstart, count(*) FROM table1 INTERVAL(1d);\nCREATE VIEW view2 AS SELECT ts, col2 FROM table1;\nCREATE VIEW view3 AS SELECT * from view1;\n```\n\n----------------------------------------\n\nTITLE: Get Column Label using ResultSetMetaData in Java\nDESCRIPTION: This method gets the suggested title of a specified column, which is useful for printing and display purposes. The column number starts from 1. An SQLException is thrown if the column index is out of range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_67\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `String getColumnLabel(int column) throws SQLException`\n  - **Interface Description**: Gets the suggested title of a specified column, used for printing and display purposes.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The suggested title of the column.\n  - **Exception**: Throws `SQLException` if the column index is out of range.\n```\n\n----------------------------------------\n\nTITLE: Querying Data using Node.js\nDESCRIPTION: This Node.js snippet demonstrates how to query data from TDengine using the Node.js connector with WebSocket. It establishes a WebSocket connection and sends an SQL query, printing the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{{#include docs/examples/node/websocketexample/sql_example.js:queryData}}\n```\n```\n\n----------------------------------------\n\nTITLE: Native Connection Parameter Binding in Rust\nDESCRIPTION: Demonstrates how to efficiently bind parameters using native connections in Rust to perform data insertion operations in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/stmt.rs}}\n```\n\n----------------------------------------\n\nTITLE: Parses Precompiled SQL Statement - TDengine C\nDESCRIPTION: Parses a precompiled SQL statement and associates it with parameter information. This function requires a valid SQL statement and its length. A successful operation returns 0, while failure returns a non-zero value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_70\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_prepare(TAOS_STMT *stmt, const char *sql, unsigned long length)\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Consumer Parameters\nDESCRIPTION: Describes the use of Properties for setting parameters in Java consumers. Users should refer to the linked documentation for detailed parameter settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nThe parameters for creating a consumer with the Java connector are Properties. For a list of parameters you can set, please refer to [Consumer Parameters](../../tdengine-reference/client-libraries/java/)\nFor other parameters, refer to the common basic configuration items mentioned above.\n```\n\n----------------------------------------\n\nTITLE: Setting Client Info (String, String) in Java\nDESCRIPTION: Sets a client information property for the database connection. It throws `SQLClientInfoException` if setting fails. Client info can be used to identify the application or user connecting to the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n\"`void setClientInfo(String name, String value) throws SQLClientInfoException`\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving ResultSetMetaData in JDBC PreparedStatement (Java)\nDESCRIPTION: Obtains the metadata related to the ResultSet object generated by the PreparedStatement. Returns null if no ResultSet has been generated. Throws SQLException on database access errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_82\n\nLANGUAGE: Java\nCODE:\n```\nResultSetMetaData getMetaData() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Query with File Output\nDESCRIPTION: Query counting records and outputting results to a CSV file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM tb1 WHERE ts >= NOW - 10m AND col2 > 3.14 >> /home/testoutput.csv;\n```\n\n----------------------------------------\n\nTITLE: Defining Window Clause for Streaming Computation in TDengine SQL\nDESCRIPTION: Syntax for defining different types of windows in streaming computation, including session, state, interval, event, and count windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nwindow_clause: {\n    SESSION(ts_col, tol_val)\n  | STATE_WINDOW(col)\n  | INTERVAL(interval_val [, interval_offset]) [SLIDING (sliding_val)]\n  | EVENT_WINDOW START WITH start_trigger_condition END WITH end_trigger_condition\n  | COUNT_WINDOW(count_val[, sliding_val])\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket TMQ Connection Examples\nDESCRIPTION: Code examples demonstrating TMQ implementation using WebSocket connections across different programming languages. Shows connection setup, subscription handling and cleanup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_27\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WsConsumerLoopFull.java:unsubscribe_data_code_piece}}\n```\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/tmq_websocket_example.py:unsubscribe}}\n```\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/tmq/ws/main.go:close}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/tmq.rs:unsubscribe}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/node/websocketexample/tmq_example.js:unsubscribe}}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wssubscribe/Program.cs:close}}\n```\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/tmq_demo.c:unsubscribe_and_close}}\n```\n\n----------------------------------------\n\nTITLE: Performing time-window aggregation\nDESCRIPTION: SQL query to calculate the average, maximum, and minimum values for table 'd1001' grouped by 10-second time windows using the INTERVAL feature.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _wstart, AVG(current), MAX(voltage), MIN(phase) FROM test.d1001 INTERVAL(10s);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over JSON Object Key-Value Pairs with json_object_foreach Macro\nDESCRIPTION: Shows how to use the json_object_foreach macro to iterate through all key-value pairs in a JSON object. This approach simplifies object traversal by handling the iteration details internally.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n/* obj is a JSON object */\nconst char *key;\njson_t *value;\n\njson_object_foreach(obj, key, value) {\n    /* block of code that uses key and value */\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine in Docker\nDESCRIPTION: This command creates a TDengine container with HTTP service activated. It maps the container's data and log directories to the host, and maps the HTTP service's port 6041 to the host port 6041. The volumes are used to persist data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name tdengine \\\n-v ~/data/taos/dnode/data:/var/lib/taos \\\n-v ~/data/taos/dnode/log:/var/log/taos \\\n-p 6041:6041 tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Setting table name using Stmt object in af package\nDESCRIPTION: This function sets the table name for the prepared SQL statement. It takes a table name as input and returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) SetTableName(tableName string) error\"\n```\n\n----------------------------------------\n\nTITLE: Using ST_Contains Function in SQL\nDESCRIPTION: Tests if one geometry completely contains another. Returns TRUE if geometry A contains geometry B.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_81\n\nLANGUAGE: sql\nCODE:\n```\nST_Contains(GEOMETRY geomA, GEOMETRY geomB)\n```\n\n----------------------------------------\n\nTITLE: Using ROUND Function in SQL\nDESCRIPTION: The ROUND function rounds the specified value to a certain number of decimal places. It maintains the original data type and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. The digits parameter is supported from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_18\n\nLANGUAGE: SQL\nCODE:\n```\nROUND(expr[, digits])\n```\n\n----------------------------------------\n\nTITLE: Initializing Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function initializes a Stmt object for WebSocket communication. It requires a Connector object to be initialized and returns a Stmt object and an error if initialization fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n\"func (c *Connector) Init() (*Stmt, error)\"\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Update in Java JDBC\nDESCRIPTION: Executes a SQL update statement (INSERT, DELETE, etc.) and returns the number of affected rows. Throws SQLException for errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_34\n\nLANGUAGE: Java\nCODE:\n```\nint executeUpdate(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Batch Fetching Query Results in C using TDengine\nDESCRIPTION: Batch fetches data from the query result set. Returns the number of rows fetched, or 0 if there are no more rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_65\n\nLANGUAGE: C\nCODE:\n```\nint taos_fetch_block(TAOS_RES *res, TAOS_ROW *rows)\n```\n\n----------------------------------------\n\nTITLE: Setting a boolean value in Param object\nDESCRIPTION: This function sets a boolean value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the boolean value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_46\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetBool(offset int, value bool)\"\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in Node.js\nDESCRIPTION: The Node.js code demonstrates how to establish and utilize WebSocket connections with parameter binding to enhance data insertion efficiency in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{{#include docs/examples/node/websocketexample/stmt_example.js:createConnect}}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics in TMQ in C\nDESCRIPTION: Function to subscribe to a list of topics. Takes a TMQ consumer object and a list of topics. Returns 0 on success or a non-zero value on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_subscribe(ws_tmq_t *tmq, const ws_tmq_list_t *topic_list)\n```\n\n----------------------------------------\n\nTITLE: Initiating HTTP Request with curl using Basic Authentication\nDESCRIPTION: Example of using curl to send an HTTP request to the TDengine REST API with basic authentication. Replace placeholders with actual values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -u username:password -d \"<SQL>\" <ip>:<PORT>/rest/sql/[db_name][?tz=timezone[&req_id=req_id][&row_with_meta=true]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Connection Information in TDengine SQL\nDESCRIPTION: Shows information about all connections that exist in the current TDengine system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CONNECTIONS;\n```\n\n----------------------------------------\n\nTITLE: Asynchronous SQL Query Execution in TDengine C Client\nDESCRIPTION: Execute a SQL statement asynchronously, with results delivered through a callback function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_42\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_query_a(TAOS *taos, const char *sql, void (*fp)(void *param, TAOS_RES *, int code), void *param)\n```\n\n----------------------------------------\n\nTITLE: TDengine Query Hints Examples\nDESCRIPTION: Examples demonstrating the usage of different query hints in TDengine for optimizing query performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT /*+ BATCH_SCAN() */ a.ts FROM stable1 a, stable2 b where a.tag0 = b.tag0 and a.ts = b.ts;\nSELECT /*+ SORT_FOR_GROUP() */ count(*), c1 FROM stable1 PARTITION BY c1;\nSELECT /*+ PARTITION_FIRST() */ count(*), c1 FROM stable1 PARTITION BY c1;\nSELECT /*+ PARA_TABLES_SORT() */ * from stable1 order by ts;\nSELECT /*+ SMALLDATA_TS_SORT() */ * from stable1 order by ts;\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Chart with Helm - Shell\nDESCRIPTION: This shell command demonstrates how to install the TDengine Helm chart using a specified values.yaml file to configure the deployment parameters for a cluster of 3 replicas.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nhelm install replica3 tdengine-3.5.0.tgz -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Batch SQL Statements in Java JDBC\nDESCRIPTION: Executes all SQL statements in the batch. Returns an array of update counts. Throws SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_39\n\nLANGUAGE: Java\nCODE:\n```\nint[] executeBatch() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Time-bounded Historical Data Processing in TDengine\nDESCRIPTION: Example showing how to create a stream that processes historical data within a specific time range, starting from January 30, 2020.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ncreate stream if not exists count_history_s fill_history 1 into count_history  as select count(*) from power.meters where ts > '2020-01-30' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Synchronize Historical Data and Real-time Data\nDESCRIPTION: This command synchronizes both historical and real-time data from one TDengine instance to another using taosX. It uses the `run` command with the `-f` parameter including `mode=all` parameter in DSN to enable both historical and real-time data synchronization, and the `-t` parameter to define the target database. The `-v` parameter enables verbose logging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run -f 'taos:///db1?mode=all' -t 'taos:///db2' -v\"\n```\n\n----------------------------------------\n\nTITLE: Creating Supertable Topic in TDengine SQL\nDESCRIPTION: SQL syntax for creating a topic that subscribes to a supertable. Supports optional meta data inclusion and filtering conditions on tags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name [with meta] AS STABLE stb_name [where_condition]\n```\n\n----------------------------------------\n\nTITLE: Stream Creation Examples\nDESCRIPTION: Demonstrates practical examples of creating streams with different window types and configurations, including average voltage calculation and event-based windowing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol AS\nSELECT _wstart, count(*), avg(voltage) FROM meters PARTITION BY tbname INTERVAL(1m) SLIDING(30s);\n\nCREATE STREAM streams0 INTO streamt0 AS\nSELECT _wstart, count(*), avg(voltage) from meters PARTITION BY tbname EVENT_WINDOW START WITH voltage < 0 END WITH voltage > 9;\n\nCREATE STREAM streams1 IGNORE EXPIRED 1 WATERMARK 100s INTO streamt1 AS\nSELECT _wstart, count(*), avg(voltage) from meters PARTITION BY tbname COUNT_WINDOW(10);\n```\n\n----------------------------------------\n\nTITLE: InfluxDB EndPoint Configuration\nDESCRIPTION: This snippet shows the format of the EndPoint URL for writing InfluxDB compatible data to TDengine. It highlights the use of query parameters for database, precision, username, password, and time-to-live configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/_05-schemaless.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"/influxdb/v1/write?<param1=value1>?<param2=value2>...\"\n```\n\n----------------------------------------\n\nTITLE: Executing a batch using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function executes the batched SQL statements via WebSocket. It returns an error if the execution fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_35\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) Exec() error\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from TMQ in Rust\nDESCRIPTION: This Rust snippet shows how to consume messages from a TMQ topic. It leverages the `futures::Stream` trait for asynchronous message processing and uses `serde` for deserializing records into a custom `Record` struct.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nasync fn consume() -> Result<(), Error> {\n    let mut consumer = Consumer::new(vec![\"topic\"],\n    Options::default().group_id(\"test\")\n    .enable_auto_commit(false).client_id(\"cid\")).await?;\n    while let Some(msg) = consumer.next().await {\n        let msg = msg?;\n        let _value: Record = serde_json::from_slice(&msg.payload()).unwrap();\n        msg.commit().await?;\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Table Definition\nDESCRIPTION: Defines a table named `foo` with a timestamp column `ts` and an integer column `i32`. The `ts` column is the primary timestamp column, and `i32` represents a device's measured metric.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/index.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ntaos> select * from foo;\n           ts            |      i32    |\n========================================\n 2020-01-01 00:00:12.681 |          13 |\n 2020-01-01 00:00:13.727 |          14 |\n 2020-01-01 00:00:14.378 |           8 |\n 2020-01-01 00:00:15.774 |          10 |\n 2020-01-01 00:00:16.170 |          16 |\n 2020-01-01 00:00:17.558 |          26 |\n 2020-01-01 00:00:18.938 |          32 |\n 2020-01-01 00:00:19.308 |          27 |\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine in Python\nDESCRIPTION: This code snippet demonstrates how to establish a connection to a TDengine database using the Python connector. It includes error handling to catch potential exceptions during the connection process. The connection object is then closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_python.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"{{#include docs/examples/python/connect_example.py}}\"\n```\n\n----------------------------------------\n\nTITLE: Result Set Retrieval in TDengine JDBC\nDESCRIPTION: Method to get the current ResultSet object generated by the Statement. Used after execute() returns true to access the query results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\nResultSet getResultSet() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Node.js Schemaless WebSocket Implementation\nDESCRIPTION: Node.js example showcasing the implementation of a WebSocket client for schemaless writing. This code demonstrates the usage of the WebSocket for line protocol data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/node/websocketexample/line_example.js}}\n```\n\n----------------------------------------\n\nTITLE: State Window Query in TDengine SQL\nDESCRIPTION: This query uses the STATE_WINDOW clause to divide data into windows based on the 'status' column. It demonstrates how to perform aggregations on state-based windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), FIRST(ts), status FROM temp_tb_1 STATE_WINDOW(status);\n```\n\n----------------------------------------\n\nTITLE: Querying with Tumbling Window in TDengine\nDESCRIPTION: This snippet showcases a SQL query in TDengine using a tumbling window. It retrieves data from the `meters` supertable, partitions by `tbname`, uses a 1-minute interval and slide, and limits the output to the first partition. The query calculates the average voltage for each 1-minute tumbling window.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, _wend, avg(voltage)\nFROM meters\nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:05:00+08:00\" \nPARTITION BY tbname\nINTERVAL(1m) SLIDING(1m)\nSLIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Creating Native Connection for TDengine JDBC\nDESCRIPTION: JDBC driver class for establishing native connections to TDengine database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncom.taosdata.jdbc.TSDBDriver\n```\n\n----------------------------------------\n\nTITLE: Run TDengine in Docker\nDESCRIPTION: This snippet shows how to run TDengine in a Docker container with persistent volumes and port mapping. It creates a container named tdengine, maps the host directories to the container's data and log directories, and maps the container's HTTP service port 6041 to the host's port 6041. This allows external access to the TDengine HTTP service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"docker run -d --name tdengine \\\n-v ~/data/taos/dnode/data:/var/lib/taos \\\n-v ~/data/taos/dnode/log:/var/log/taos \\\n-p 6041:6041 tdengine/tdengine\"\n```\n\n----------------------------------------\n\nTITLE: Setting a Double value in Param object\nDESCRIPTION: This function sets a Double value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Double value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_57\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetDouble(offset int, value float64)\"\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumer in C#\nDESCRIPTION: The C# snippet is focused on establishing a WebSocket consumer. It covers necessary parameters and methods utilized for connecting to the message broker specified in the C# example file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wssubscribe/Program.cs:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: UDT Script for Parsing Three-Phase Voltage Data\nDESCRIPTION: A custom Rhai script that parses JSON data containing comma-separated voltage values and splits them into three separate data points. This demonstrates how to transform a single record into multiple entries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_4\n\nLANGUAGE: rhai\nCODE:\n```\nlet v3 = data[\"voltage\"].split(\",\");\n\n[\n#{\"ts\": data[\"ts\"], \"val\": v3[0], \"dev_id\": data[\"dev_id\"]},\n#{\"ts\": data[\"ts\"], \"val\": v3[1], \"dev_id\": data[\"dev_id\"]},\n#{\"ts\": data[\"ts\"], \"val\": v3[2], \"dev_id\": data[\"dev_id\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Streaming Computations with Different Window Types in TDengine SQL\nDESCRIPTION: Examples of creating streaming computations using interval, event, and count windows, with automatic creation of super tables for results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol AS\nSELECT _wstart, count(*), avg(voltage) FROM meters PARTITION BY tbname INTERVAL(1m) SLIDING(30s);\n\nCREATE STREAM streams0 INTO streamt0 AS\nSELECT _wstart, count(*), avg(voltage) from meters PARTITION BY tbname EVENT_WINDOW START WITH voltage < 0 END WITH voltage > 9;\n\nCREATE STREAM streams1 IGNORE EXPIRED 1 WATERMARK 100s INTO streamt1 AS\nSELECT _wstart, count(*), avg(voltage) from meters PARTITION BY tbname COUNT_WINDOW(10);\n```\n\n----------------------------------------\n\nTITLE: Schemaless Raw Data Insertion API\nDESCRIPTION: Primary interface for inserting schemaless data into TDengine without pre-creating table structures. Supports multiple protocol formats and provides flexible data insertion options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nWS_RES *ws_schemaless_insert_raw(WS_TAOS *taos,\n                                 const char *lines,\n                                 int len,\n                                 int32_t *totalRows,\n                                 int protocol,\n                                 int precision)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine via REST Protocol\nDESCRIPTION: Code snippet demonstrating how to establish a REST connection to TDengine using the taosRestful driver with the appropriate connection string format.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar taosUri = \"root:taosdata@http(localhost:6041)/\"\ntaos, err := sql.Open(\"taosRestful\", taosUri)\n```\n\n----------------------------------------\n\nTITLE: C# Schemaless WebSocket Implementation\nDESCRIPTION: C# example showcasing the implementation of a WebSocket client for schemaless writing. This code includes the necessary imports and defines the main function to demonstrate the usage of the WebSocket for data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wssml/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Validity in Java\nDESCRIPTION: Checks if the database connection is valid within a specified timeout. It throws `SQLException` if the operation fails. A timeout value of 0 will not timeout.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_27\n\nLANGUAGE: java\nCODE:\n```\n\"`boolean isValid(int timeout) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Batch Operation Execution Methods in Java\nDESCRIPTION: Methods for managing batch operations including adding data to batch and executing batch operations. Both methods throw SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_96\n\nLANGUAGE: Java\nCODE:\n```\nvoid columnDataAddBatch() throws SQLException\nvoid columnDataExecuteBatch() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Backing Up Data with taosdump - Shell\nDESCRIPTION: This code snippet demonstrates the use of the taosdump command to back up data from a running TDengine cluster. It specifies the database and the output file path. Dependencies include having taosdump installed and access to the TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/09-backup.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosdump -h localhost -P 6030 -D dbname -o /file/path\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Indexes in TDengine SQL\nDESCRIPTION: Shows created indexes for the specified table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSHOW INDEXES FROM tbl_name [FROM db_name];\nSHOW INDEXES FROM [db_name.]tbl_name;\n```\n\n----------------------------------------\n\nTITLE: Setting Client Info (Properties) in Java\nDESCRIPTION: Sets a set of client information properties for the database connection using a `Properties` object. It throws `SQLClientInfoException` if setting fails. Useful for setting multiple client properties at once.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n\"`void setClientInfo(Properties properties) throws SQLClientInfoException`\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Commit Data from JSON Objects with Jansson\nDESCRIPTION: Code that retrieves specific properties (sha, commit object, and message) from the JSON commit data using json_object_get. Includes type checking to ensure the retrieved values match expected JSON types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nsha = json_object_get(data, \"sha\");\nif(!json_is_string(sha))\n{\n    fprintf(stderr, \"error: commit %d: sha is not a string\\n\", i + 1);\n    json_decref(root);\n    return 1;\n}\n\ncommit = json_object_get(data, \"commit\");\nif(!json_is_object(commit))\n{\n    fprintf(stderr, \"error: commit %d: commit is not an object\\n\", i + 1);\n    json_decref(root);\n    return 1;\n}\n\nmessage = json_object_get(commit, \"message\");\nif(!json_is_string(message))\n{\n    fprintf(stderr, \"error: commit %d: message is not a string\\n\", i + 1);\n    json_decref(root);\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Successful REST API Response in JSON\nDESCRIPTION: Example of a successful JSON response from the TDengine REST API, showing the structure of the returned data including column metadata and rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"name\",\n            \"VARCHAR\",\n            64\n        ],\n        [\n            \"ntables\",\n            \"BIGINT\",\n            8\n        ],\n        [\n            \"status\",\n            \"VARCHAR\",\n            10\n        ]\n    ],\n    \"data\": [\n        [\n            \"information_schema\",\n            16,\n            \"ready\"\n        ],\n        [\n            \"performance_schema\",\n            9,\n            \"ready\"\n        ]\n    ],\n    \"rows\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Result Set Navigation Methods - C# DbDataReader\nDESCRIPTION: Methods for navigating and accessing result sets, including value retrieval, null checking, and result set metadata access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic object GetValue(int ordinal)\npublic int GetValues(object[] values)\npublic bool IsDBNull(int ordinal)\npublic int RecordsAffected\npublic bool HasRows\npublic bool Read()\npublic IEnumerator GetEnumerator()\npublic void Close()\n```\n\n----------------------------------------\n\nTITLE: Setting NULL Parameter in JDBC PreparedStatement (Java)\nDESCRIPTION: Sets the SQL type of a specified parameter to NULL in a PreparedStatement. Takes the parameter index and SQL type as inputs. Throws SQLException on database access errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_77\n\nLANGUAGE: Java\nCODE:\n```\nvoid setNull(int parameterIndex, int sqlType) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: IP Whitelist Middleware Configuration in Traefik\nDESCRIPTION: This snippet sets up an IP whitelist middleware in Traefik, allowing only specified IP addresses to access the service. This security feature restricts access based on CIDR routing rules.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.tdengine-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.1.7\"\n```\n\n----------------------------------------\n\nTITLE: Scalar Function Interface in Python\nDESCRIPTION: Defines the interface for scalar functions in Python for TDengine, particularly the 'process' function which takes a data block and returns a tuple.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\ndef process(input: datablock) -> tuple[output_type]:\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Helm Chart\nDESCRIPTION: The snippet shows the steps to download and install the TDengine Helm chart, including editing necessary configuration files and issuing the install command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nwget https://github.com/taosdata/TDengine-Operator/raw/refs/heads/3.0/helm/tdengine-3.5.0.tgz\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Edit the values.yaml file to set the topology of the cluster\n```\n\nLANGUAGE: shell\nCODE:\n```\nvim values.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\nhelm install tdengine tdengine-3.5.0.tgz -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Fetching Column Attributes from Result Set in TDengine (C)\nDESCRIPTION: Retrieves attributes (name, type, length) of each column in the query result set. Used with ws_num_fields() to parse data returned by ws_fetch_row().\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nconst struct WS_FIELD *ws_fetch_fields(WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Data in TDengine\nDESCRIPTION: Shows how to update existing data in TDengine by inserting a new record with a duplicate timestamp. The new values will replace the old ones for the specified columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO d1001 (ts, current) VALUES (\"2018-10-03 14:38:05\", 22);\n```\n\n----------------------------------------\n\nTITLE: Using INTERP Function in SQL\nDESCRIPTION: Returns values or interpolated values at specified time points. Can ignore NULL values with the ignore_null_values parameter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_68\n\nLANGUAGE: sql\nCODE:\n```\nINTERP(expr [, ignore_null_values])\n\nignore_null_values: {\n    0\n  | 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Window Join with Direct Values in TDengine SQL\nDESCRIPTION: Query to find voltage values from d1002 within a 1-second window before and after d1001's readings when voltage exceeds 220V.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.ts, a.voltage, b.voltage FROM d1001 a LEFT WINDOW JOIN d1002 b WINDOW_OFFSET（-1s, 1s) where a.voltage > 220\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in TDengine C Client\nDESCRIPTION: Execute a SQL statement synchronously, which can be DQL, DML, or DDL. The result must be checked with taos_errno() to determine success or failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nTAOS_RES* taos_query(TAOS *taos, const char *sql)\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions on Views in TDengine SQL\nDESCRIPTION: This snippet outlines the syntax for granting permissions to users on specific views in TDengine SQL. It specifies what privileges can be granted and to which users, enabling control over view access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nGRANT privileges ON [db_name.]view_name TO user_name\nprivileges: {\n    ALL,\n  | priv_type [, priv_type] ...\n}\npriv_type: {\n    READ\n  | WRITE\n  | ALTER\n}\n```\n\n----------------------------------------\n\nTITLE: CASE Expression Syntax in TDengine\nDESCRIPTION: CASE expression syntax for implementing IF...THEN...ELSE logic in SQL statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nCASE value WHEN compare_value THEN result [WHEN compare_value THEN result ...] [ELSE result] END\nCASE WHEN condition THEN result [WHEN condition THEN result ...] [ELSE result] END\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Record without Specifying Columns\nDESCRIPTION: Shows how to insert a single record into a TDengine table without explicitly specifying column names. This method requires values for all columns to be provided in the correct order.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into d1001 values(\"2018-10-03 14:38:05\", 10.3, 219, 0.31)\n```\n\n----------------------------------------\n\nTITLE: Configuring taosX with TOML Configuration File\nDESCRIPTION: Sample TOML configuration file for taosX showing available configuration options including data directory, server settings, monitoring parameters, and logging options. This file is located at /etc/taos/taosx.toml on Linux or C:\\TDengine\\cfg\\taosx.toml on Windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n# data dir\n#data_dir = \"/var/lib/taos/taosx\" # on linux/macOS\n#data_dir = \"C:\\\\TDengine\\\\data\\\\taosx\" # on windows\n\n# number of threads used for tokio workers, default to 0 (means cores * 2)\n#jobs = 0\n\n# enable OpenTelemetry tracing and metrics exporter\n#otel = false\n\n# server instance id\n#\n# The instanceId of each instance is unique on the host\n# instanceId = 16\n\n[serve]\n# listen to ip:port address\n#listen = \"0.0.0.0:6050\"\n\n# database url\n#database_url = \"sqlite:taosx.db\"\n\n# default global request timeout which unit is second. This parameter takes effect for certain interfaces that require a timeout setting\n#request_timeout = 30\n\n[monitor]\n# FQDN of taosKeeper service, no default value\n#fqdn = \"localhost\"\n\n# Port of taosKeeper service, default 6043\n#port = 6043\n\n# How often to send metrics to taosKeeper, default every 10 seconds. Only value from 1 to 10 is valid.\n#interval = 10\n\n\n# log configuration\n[log]\n# All log files are stored in this directory\n#\n#path = \"/var/log/taos\" # on linux/macOS\n#path = \"C:\\\\TDengine\\\\log\" # on windows\n\n# log filter level\n#\n#level = \"info\"\n\n# Compress archived log files or not\n#\n#compress = false\n\n# The number of log files retained by the current explorer server instance in the `path` directory\n#\n#rotationCount = 30\n\n# Rotate when the log file reaches this size\n#\n#rotationSize = \"1GB\"\n\n# Log downgrade when the remaining disk space reaches this size, only logging `ERROR` level logs\n#\n#reservedDiskSize = \"1GB\"\n\n# The number of days log files are retained\n#\n#keepDays = 30\n\n# Watching the configuration file for log.loggers changes, default to true.\n#\n#watching = true\n\n# Customize the log output level of modules, and changes will be applied after modifying the file when log.watching is enabled\n#\n# ## Examples:\n#\n# crate = \"error\"\n# crate::mod1::mod2 = \"info\"\n# crate::span[field=value] = \"warn\"\n#\n[log.loggers]\n#\"actix_server::accept\" = \"warn\"\n#\"taos::query\" = \"warn\"\n```\n\n----------------------------------------\n\nTITLE: JSON Key Existence Check\nDESCRIPTION: Demonstrates how to use the contains operator to check for the existence of keys in JSON data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/17-json.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect * from s1 where info contains 'k2'\n\nselect * from s1 where info contains 'k1'\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Weighted Sum UDF (Example 3)\nDESCRIPTION: A UDF that calculates weighted sum of input columns, where weights are the column indices (1-based). Returns null if any input value is null. Accepts any number of input columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef init():\n    pass\n\ndef destroy():\n    pass\n\ndef process(block):\n    rows, cols = block.shape()\n    result = []\n    for i in range(rows):\n        total = 0\n        for j in range(cols):\n            v = block.data(i, j)\n            if v is None:\n                total = None\n                break\n            total += (j + 1) * block.data(i, j)\n        result.append(total)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Fetching Query Results Row-by-Row in C using TDengine\nDESCRIPTION: Fetches data from the query result set row by row. Returns NULL on failure, in which case taos_errstr(NULL) can be called for more detailed error information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_64\n\nLANGUAGE: C\nCODE:\n```\nTAOS_ROW taos_fetch_row(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Native Connection with Config File\nDESCRIPTION: Example showing how to establish a native JDBC connection using TDengine client configuration file, where cluster endpoints are specified in the config file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:TAOS://:/power?user=root&password=taosdata\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Custom Subtable Names in TDengine SQL\nDESCRIPTION: SQL example demonstrating how to create a stream with custom subtable names using the SUBTABLE clause. This stream calculates average voltage from meters and creates subtables with names prefixed by 'new-'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol SUBTABLE(CONCAT('new-', tname)) AS SELECT _wstart, count(*), avg(voltage) FROM meters PARTITION BY tbname tname INTERVAL(1m);\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine APT Repository on Linux\nDESCRIPTION: Commands to set up the TDengine APT repository for installation on Debian-based Linux systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO - http://repos.taosdata.com/tdengine.key | sudo apt-key add -\necho \"deb [arch=amd64] http://repos.taosdata.com/tdengine-stable stable main\" | sudo tee /etc/apt/sources.list.d/tdengine-stable.list\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Creation Statement in TDengine SQL\nDESCRIPTION: Shows the creation statement for the specified table. Supports basic tables, super tables, and subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE TABLE [db_name.]tb_name\n```\n\n----------------------------------------\n\nTITLE: Customizing Tags in Streaming Computation in TDengine SQL\nDESCRIPTION: Example of creating a streaming computation with custom tag values for each partition.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM streams2 trigger at_once INTO st1 TAGS(cc varchar(100)) as select _wstart, count(*) c1 from st partition by concat(\"tag-\", tbname) as cc interval(10s);\n```\n\n----------------------------------------\n\nTITLE: Command Line Configuration Options for TDengine Adapter\nDESCRIPTION: Defines command line parameters and environment variables for configuring TDengine Adapter, including pool settings, ports, SSL, StatsD, and other core functionality.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n--pool.waitTimeout int                         wait for connection timeout seconds. Env \"TAOS_ADAPTER_POOL_WAIT_TIMEOUT\" (default 60)\n-P, --port int                                     http port. Env \"TAOS_ADAPTER_PORT\" (default 6041)\n--prometheus.enable                            enable prometheus. Env \"TAOS_ADAPTER_PROMETHEUS_ENABLE\" (default true)\n--restfulRowLimit int                          restful returns the maximum number of rows (-1 means no limit). Env \"TAOS_ADAPTER_RESTFUL_ROW_LIMIT\" (default -1)\n--smlAutoCreateDB                              Whether to automatically create db when writing with schemaless. Env \"TAOS_ADAPTER_SML_AUTO_CREATE_DB\"\n--ssl.certFile string                          ssl cert file path. Env \"TAOS_ADAPTER_SSL_CERT_FILE\"\n--ssl.enable                                   enable ssl. Env \"TAOS_ADAPTER_SSL_ENABLE\"\n--ssl.keyFile string                           ssl key file path. Env \"TAOS_ADAPTER_SSL_KEY_FILE\"\n--statsd.allowPendingMessages int              statsd allow pending messages. Env \"TAOS_ADAPTER_STATSD_ALLOW_PENDING_MESSAGES\" (default 50000)\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Nanosecond Precision in TDengine SQL\nDESCRIPTION: SQL command to create a new database with nanosecond precision. TDengine's default timestamp precision is milliseconds, but can be configured to microseconds or nanoseconds using the PRECISION parameter during database creation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/01-data-type.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE db_name PRECISION 'ns';\n```\n\n----------------------------------------\n\nTITLE: Creating TSMAs in TDengine SQL\nDESCRIPTION: SQL syntax for creating TSMAs based on supertables or basic tables, and for creating recursive TSMAs based on existing TSMAs. This allows for pre-calculation of aggregated results within specified time windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/28-tsma.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create tsma based on supertables or basic tables\nCREATE TSMA tsma_name ON [dbname.]table_name FUNCTION (func_name(func_param) [, ...] ) INTERVAL(time_duration);\n-- Create a larger window tsma based on a smaller window tsma\nCREATE RECURSIVE TSMA tsma_name ON [db_name.]tsma_name1 INTERVAL(time_duration);\n\ntime_duration:\n    number unit\n```\n\n----------------------------------------\n\nTITLE: WebSocket URL Example\nDESCRIPTION: Example of a complete WebSocket connection URL with authentication credentials.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nws://root:taosdata@localhost:6041\n```\n\n----------------------------------------\n\nTITLE: Adds Parameters to Batch Processing - TDengine C\nDESCRIPTION: Adds current parameters to batch processing supported only for INSERT/IMPORT statements. Use this function in conjunction with other parameter binding functions to manage batch operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_75\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_add_batch(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: CASE Expression Example with Device Status\nDESCRIPTION: Example showing how to use CASE expression to display device status codes as text.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CASE dev_status WHEN 1 THEN 'Running' WHEN 2 THEN 'Warning' WHEN 3 THEN 'Downtime' ELSE 'Unknown' END FROM dev_table;\n```\n\n----------------------------------------\n\nTITLE: Basic Time-Range Query Template\nDESCRIPTION: Template for querying time-series data with time range constraints using Grafana variables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect column_name from db.table where ts > $from and ts < $to;\n```\n\n----------------------------------------\n\nTITLE: TaosAdapter Command-Line Usage Options\nDESCRIPTION: A comprehensive list of command-line parameters for configuring TaosAdapter. Parameters control various aspects including collectd integration, CORS settings, logging, monitoring, and integrations with various protocols like InfluxDB, Node Exporter, and OpenTSDB.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nUsage of taosAdapter:\n      --collectd.db string                           collectd db name. Env \"TAOS_ADAPTER_COLLECTD_DB\" (default \"collectd\")\n      --collectd.enable                              enable collectd. Env \"TAOS_ADAPTER_COLLECTD_ENABLE\" (default true)\n      --collectd.password string                     collectd password. Env \"TAOS_ADAPTER_COLLECTD_PASSWORD\" (default \"taosdata\")\n      --collectd.port int                            collectd server port. Env \"TAOS_ADAPTER_COLLECTD_PORT\" (default 6045)\n      --collectd.ttl int                             collectd data ttl. Env \"TAOS_ADAPTER_COLLECTD_TTL\"\n      --collectd.user string                         collectd user. Env \"TAOS_ADAPTER_COLLECTD_USER\" (default \"root\")\n      --collectd.worker int                          collectd write worker. Env \"TAOS_ADAPTER_COLLECTD_WORKER\" (default 10)\n  -c, --config string                                config path default /etc/taos/taosadapter.toml\n      --cors.allowAllOrigins                         cors allow all origins. Env \"TAOS_ADAPTER_CORS_ALLOW_ALL_ORIGINS\" (default true)\n      --cors.allowCredentials                        cors allow credentials. Env \"TAOS_ADAPTER_CORS_ALLOW_Credentials\"\n      --cors.allowHeaders stringArray                cors allow HEADERS. Env \"TAOS_ADAPTER_ALLOW_HEADERS\"\n      --cors.allowOrigins stringArray                cors allow origins. Env \"TAOS_ADAPTER_ALLOW_ORIGINS\"\n      --cors.allowWebSockets                         cors allow WebSockets. Env \"TAOS_ADAPTER_CORS_ALLOW_WebSockets\"\n      --cors.exposeHeaders stringArray               cors expose headers. Env \"TAOS_ADAPTER_Expose_Headers\"\n      --debug                                        enable debug mode. Env \"TAOS_ADAPTER_DEBUG\" (default true)\n      --help                                         Print this help message and exit\n      --httpCodeServerError                          Use a non-200 http status code when server returns an error. Env \"TAOS_ADAPTER_HTTP_CODE_SERVER_ERROR\"\n      --influxdb.enable                              enable influxdb. Env \"TAOS_ADAPTER_INFLUXDB_ENABLE\" (default true)\n      --instanceId int                               instance ID. Env \"TAOS_ADAPTER_INSTANCE_ID\" (default 32)\n      --log.compress                                 whether to compress old log. Env \"TAOS_ADAPTER_LOG_COMPRESS\"\n      --log.enableRecordHttpSql                      whether to record http sql. Env \"TAOS_ADAPTER_LOG_ENABLE_RECORD_HTTP_SQL\"\n      --log.keepDays uint                            log retention days, must be a positive integer. Env \"TAOS_ADAPTER_LOG_KEEP_DAYS\" (default 30)\n      --log.level string                             log level (trace debug info warning error). Env \"TAOS_ADAPTER_LOG_LEVEL\" (default \"info\")\n      --log.path string                              log path. Env \"TAOS_ADAPTER_LOG_PATH\" (default \"/var/log/taos\")\n      --log.reservedDiskSize string                  reserved disk size for log dir (KB MB GB), must be a positive integer. Env \"TAOS_ADAPTER_LOG_RESERVED_DISK_SIZE\" (default \"1GB\")\n      --log.rotationCount uint                       log rotation count. Env \"TAOS_ADAPTER_LOG_ROTATION_COUNT\" (default 30)\n      --log.rotationSize string                      log rotation size(KB MB GB), must be a positive integer. Env \"TAOS_ADAPTER_LOG_ROTATION_SIZE\" (default \"1GB\")\n      --log.rotationTime duration                    deprecated: log rotation time always 24 hours. Env \"TAOS_ADAPTER_LOG_ROTATION_TIME\" (default 24h0m0s)\n      --log.sqlRotationCount uint                    record sql log rotation count. Env \"TAOS_ADAPTER_LOG_SQL_ROTATION_COUNT\" (default 2)\n      --log.sqlRotationSize string                   record sql log rotation size(KB MB GB), must be a positive integer. Env \"TAOS_ADAPTER_LOG_SQL_ROTATION_SIZE\" (default \"1GB\")\n      --log.sqlRotationTime duration                 record sql log rotation time. Env \"TAOS_ADAPTER_LOG_SQL_ROTATION_TIME\" (default 24h0m0s)\n      --logLevel string                              log level (trace debug info warning error). Env \"TAOS_ADAPTER_LOG_LEVEL\" (default \"info\")\n      --maxAsyncConcurrentLimit int                  The maximum number of concurrent calls allowed for the C asynchronous method. 0 means use CPU core count. Env \"TAOS_ADAPTER_MAX_ASYNC_CONCURRENT_LIMIT\"\n      --maxSyncConcurrentLimit int                   The maximum number of concurrent calls allowed for the C synchronized method. 0 means use CPU core count. Env \"TAOS_ADAPTER_MAX_SYNC_CONCURRENT_LIMIT\"\n      --monitor.collectDuration duration             Set monitor duration. Env \"TAOS_ADAPTER_MONITOR_COLLECT_DURATION\" (default 3s)\n      --monitor.disable                              Whether to disable monitoring. Env \"TAOS_ADAPTER_MONITOR_DISABLE\" (default true)\n      --monitor.identity string                      The identity of the current instance, or 'hostname:port' if it is empty. Env \"TAOS_ADAPTER_MONITOR_IDENTITY\"\n      --monitor.incgroup                             Whether running in cgroup. Env \"TAOS_ADAPTER_MONITOR_INCGROUP\"\n      --monitor.pauseAllMemoryThreshold float        Memory percentage threshold for pause all. Env \"TAOS_ADAPTER_MONITOR_PAUSE_ALL_MEMORY_THRESHOLD\" (default 80)\n      --monitor.pauseQueryMemoryThreshold float      Memory percentage threshold for pause query. Env \"TAOS_ADAPTER_MONITOR_PAUSE_QUERY_MEMORY_THRESHOLD\" (default 70)\n      --node_exporter.caCertFile string              node_exporter ca cert file path. Env \"TAOS_ADAPTER_NODE_EXPORTER_CA_CERT_FILE\"\n      --node_exporter.certFile string                node_exporter cert file path. Env \"TAOS_ADAPTER_NODE_EXPORTER_CERT_FILE\"\n      --node_exporter.db string                      node_exporter db name. Env \"TAOS_ADAPTER_NODE_EXPORTER_DB\" (default \"node_exporter\")\n      --node_exporter.enable                         enable node_exporter. Env \"TAOS_ADAPTER_NODE_EXPORTER_ENABLE\"\n      --node_exporter.gatherDuration duration        node_exporter gather duration. Env \"TAOS_ADAPTER_NODE_EXPORTER_GATHER_DURATION\" (default 5s)\n      --node_exporter.httpBearerTokenString string   node_exporter http bearer token. Env \"TAOS_ADAPTER_NODE_EXPORTER_HTTP_BEARER_TOKEN_STRING\"\n      --node_exporter.httpPassword string            node_exporter http password. Env \"TAOS_ADAPTER_NODE_EXPORTER_HTTP_PASSWORD\"\n      --node_exporter.httpUsername string            node_exporter http username. Env \"TAOS_ADAPTER_NODE_EXPORTER_HTTP_USERNAME\"\n      --node_exporter.insecureSkipVerify             node_exporter skip ssl check. Env \"TAOS_ADAPTER_NODE_EXPORTER_INSECURE_SKIP_VERIFY\" (default true)\n      --node_exporter.keyFile string                 node_exporter cert key file path. Env \"TAOS_ADAPTER_NODE_EXPORTER_KEY_FILE\"\n      --node_exporter.password string                node_exporter password. Env \"TAOS_ADAPTER_NODE_EXPORTER_PASSWORD\" (default \"taosdata\")\n      --node_exporter.responseTimeout duration       node_exporter response timeout. Env \"TAOS_ADAPTER_NODE_EXPORTER_RESPONSE_TIMEOUT\" (default 5s)\n      --node_exporter.ttl int                        node_exporter data ttl. Env \"TAOS_ADAPTER_NODE_EXPORTER_TTL\"\n      --node_exporter.urls strings                   node_exporter urls. Env \"TAOS_ADAPTER_NODE_EXPORTER_URLS\" (default [http://localhost:9100])\n      --node_exporter.user string                    node_exporter user. Env \"TAOS_ADAPTER_NODE_EXPORTER_USER\" (default \"root\")\n      --opentsdb.enable                              enable opentsdb. Env \"TAOS_ADAPTER_OPENTSDB_ENABLE\" (default true)\n      --opentsdb_telnet.batchSize int                opentsdb_telnet batch size. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_BATCH_SIZE\" (default 1)\n      --opentsdb_telnet.dbs strings                  opentsdb_telnet db names. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_DBS\" (default [opentsdb_telnet,collectd_tsdb,icinga2_tsdb,tcollector_tsdb])\n      --opentsdb_telnet.enable                       enable opentsdb telnet,warning: without auth info(default false). Env \"TAOS_ADAPTER_OPENTSDB_TELNET_ENABLE\"\n      --opentsdb_telnet.flushInterval duration       opentsdb_telnet flush interval (0s means not valid) . Env \"TAOS_ADAPTER_OPENTSDB_TELNET_FLUSH_INTERVAL\"\n      --opentsdb_telnet.maxTCPConnections int        max tcp connections. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_MAX_TCP_CONNECTIONS\" (default 250)\n      --opentsdb_telnet.password string              opentsdb_telnet password. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_PASSWORD\" (default \"taosdata\")\n      --opentsdb_telnet.ports ints                   opentsdb telnet tcp port. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_PORTS\" (default [6046,6047,6048,6049])\n      --opentsdb_telnet.tcpKeepAlive                 enable tcp keep alive. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_TCP_KEEP_ALIVE\"\n      --opentsdb_telnet.ttl int                      opentsdb_telnet data ttl. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_TTL\"\n      --opentsdb_telnet.user string                  opentsdb_telnet user. Env \"TAOS_ADAPTER_OPENTSDB_TELNET_USER\" (default \"root\")\n      --pool.idleTimeout duration                    Set idle connection timeout. Env \"TAOS_ADAPTER_POOL_IDLE_TIMEOUT\"\n      --pool.maxConnect int                          max connections to server. Env \"TAOS_ADAPTER_POOL_MAX_CONNECT\"\n      --pool.maxIdle int                             max idle connections to server. Env \"TAOS_ADAPTER_POOL_MAX_IDLE\"\n      --pool.maxWait int                             max count of waiting for connection. Env \"TAOS_ADAPTER_POOL_MAX_WAIT\"\n```\n\n----------------------------------------\n\nTITLE: Native Connection Parameter Binding in Python\nDESCRIPTION: This Python code snippet demonstrates parameter binding techniques through native connections in TDengine for efficient data writing processes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/stmt2_native.py}}\n```\n\n----------------------------------------\n\nTITLE: Standard SQL Query Execution in TDengine JDBC\nDESCRIPTION: Standard JDBC method for executing a SQL query that returns a result set. Used for SELECT statements and other queries that retrieve data from the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nResultSet executeQuery(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write (C)\nDESCRIPTION: This C code snippet demonstrates how to perform schemaless writes to TDengine using the native C driver.  It includes the `schemaless` method from the `sml_insert_demo.c` example for writing data without pre-defined schema.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n\"{{#include docs/examples/c/sml_insert_demo.c:schemaless}}\"\n```\n\n----------------------------------------\n\nTITLE: Invoking UDF in TDengine Query\nDESCRIPTION: Example of using a user-defined function in a SQL query.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT bit_and(c1,c2) FROM table;\n```\n\n----------------------------------------\n\nTITLE: Modifying Data Node Configuration in TDengine SQL\nDESCRIPTION: Alters configuration parameters for a specific dnode or all dnodes in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER DNODE dnode_id dnode_option\n\nALTER ALL DNODES dnode_option\n```\n\n----------------------------------------\n\nTITLE: Stream Notification Syntax Definition in SQL\nDESCRIPTION: Defines the SQL syntax for configuring stream notifications, including URL specifications, event types, and notification options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nnotification_definition:\n    NOTIFY (url [, url] ...) ON (event_type [, event_type] ...) [notification_options]\n\nevent_type:\n    'WINDOW_OPEN'\n  | 'WINDOW_CLOSE'\n\nnotification_options: {\n    NOTIFY_HISTORY [0|1]\n    ON_FAILURE [DROP|PAUSE]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Specific Time Period in SQL\nDESCRIPTION: This SQL snippet shows how to create a stream that processes data within a specific time period, from January 30, 2020, to January 1, 2023. It uses the fill_history option and WHERE clause with start and end dates.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists count_history_s fill_history 1 into count_history as select count(*) from power.meters where ts > '2020-01-30' and ts < '2023-01-01' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Stopping Query Execution in TDengine WebSocket (C)\nDESCRIPTION: Stops the execution of the current query. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_stop_query(WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested JSON Data in TDengine\nDESCRIPTION: Example of nested JSON structure that can be automatically parsed to extract fields including nested attributes from objects and arrays. The system can intelligently parse hierarchical data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"groupid\": 170001, \"data\": { \"voltage\": \"221V\", \"current\": 12.3 }, \"ts\": \"2023-12-18T22:12:00\", \"inuse\": true, \"location\": [{\"province\": \"beijing\", \"city\":\"chaoyang\", \"street\": \"datun\"}]}\n```\n\n----------------------------------------\n\nTITLE: Deleting Expired Data in TDengine SQL\nDESCRIPTION: Deletes expired data and reorganizes storage based on multi-level storage configuration. Useful for database maintenance and optimization.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nTRIM DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Aggregate Function Interface in Python\nDESCRIPTION: Outlines the required interfaces for Python aggregate functions in TDengine: 'start', 'reduce', and 'finish', each handling different stages of aggregate state processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndef start() -> bytes: \\ndef reduce(inputs: datablock, buf: bytes) -> bytes \\ndef finish(buf: bytes) -> output_type:\n```\n\n----------------------------------------\n\nTITLE: Getting Timestamp Precision from Result Set in TDengine (C)\nDESCRIPTION: Returns the precision category of the timestamp field in the result set. The return value indicates milliseconds (0), microseconds (1), or nanoseconds (2).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_result_precision(const WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: SQL Execution and Result Checking in Python\nDESCRIPTION: This Python code snippet shows database operations using SQL statements. The `prepare` function sets up the test environment by resetting the query cache, dropping and creating a database named 'db', and then using it. Other functions like `query`, `error`, `checkRows`, `checkData`, `getData`, `execute`, `executeTimes`, and `checkAffectedRows` execute SQL queries, handle errors, and check the results or affected rows, respectively, during testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/How-To-Run-Test-And-How-To-Add-New-Test-Case.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef prepare(self):\n\ntdLog.info(\"prepare database:db\")\n\nself.cursor.execute('reset query cache')\n\nself.cursor.execute('drop database if exists db')\n\nself.cursor.execute('create database db')\n\nself.cursor.execute('use db')\n\n...\n\n# query() is mainly used to execute select statements for normal syntax input\n\ndef query(self, sql):\n\n...\n\n# error() is mainly used to execute the select statement with the wrong syntax\n# input, the error will be caught as a reasonable behavior, if not caught it will\n# prove that the test failed\n\ndef error()\n\n...\n\n# checkRows() is used to check the number of returned lines after calling\n# query(select ...) after calling the query(select ...) to check the number of\n# rows of returned results.\n\ndef checkRows(self, expectRows):\n\n...\n\n# checkData() is used to check the returned result data after calling\n# query(select ...) after the query(select ...) is called, failure to meet\n# expectation is\n\ndef checkData(self, row, col, data):\n\n...\n\n# getData() returns the result data after calling query(select ...) to return\n# the resulting data after calling query(select ...)\n\ndef getData(self, row, col):\n\n...\n\n# execute() used to execute sql and return the number of affected rows\n\ndef execute(self, sql):\n\n...\n\n# executeTimes() Multiple executions of the same sql statement\n\ndef executeTimes(self, sql, times):\n\n...\n\n# CheckAffectedRows() Check if the number of affected rows is as expected\n\ndef checkAffectedRows(self, expectAffectedRows):\n```\n\n----------------------------------------\n\nTITLE: Preparing Statement with ResultSet Options and Holdability in Java\nDESCRIPTION: Creates a `PreparedStatement` object, specifying the SQL, `ResultSet` type, concurrency mode, and holdability. It throws `SQLException` if the operation fails. It enables setting detailed options for `ResultSet` handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n\"`PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New TMQ Consumer in C\nDESCRIPTION: Function to create a new TMQ consumer object for consuming data. Takes configuration, DSN information string, and error buffer. Returns a pointer to a ws_tmq_t structure representing a TMQ consumer object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nws_tmq_t *ws_tmq_consumer_new(ws_tmq_conf_t *conf, const char *dsn, char *errstr, int errstr_len)\n```\n\n----------------------------------------\n\nTITLE: Verifying Data in TDengine - TDengine CLI\nDESCRIPTION: Commands to verify that data from Telegraf is correctly written to and readable from TDengine. These CLI commands show databases, switch databases, list stable tables, and display a subset of data from a specified table. Requires a running TDengine instance and appropriate user permissions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/03-telegraf.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n telegraf                       |\nQuery OK, 3 rows in database (0.010568s)\n\ntaos> use telegraf;\nDatabase changed.\n\ntaos> show stables;\n              name              |\n=================================\n swap                           |\n cpu                            |\n system                         |\n diskio                         |\n kernel                         |\n mem                            |\n processes                      |\n disk                           |\nQuery OK, 8 row(s) in set (0.000521s)\n\ntaos> select * from telegraf.system limit 10;\n              ts               |           load1           |           load5           |          load15           |        n_cpus         |        n_users        |        uptime         | uptime_format |              host\n|\n========================================================================================================================\n 2022-04-20 08:47:50.000000000 |               0.000000000 |               0.050000000 |               0.070000000 |                     4 |                     1 |                  5533 |  1:32         | shuduo-1804\n|\n 2022-04-20 08:48:00.000000000 |               0.000000000 |               0.050000000 |               0.070000000 |                     4 |                     1 |                  5543 |  1:32         | shuduo-1804\n|\n 2022-04-20 08:48:10.000000000 |               0.000000000 |               0.040000000 |               0.070000000 |                     4 |                     1 |                  5553 |  1:32         | shuduo-1804\n|\nQuery OK, 3 row(s) in set (0.013269s)\n```\n\n----------------------------------------\n\nTITLE: Mock Data Source for Generating Simulated Data in Java\nDESCRIPTION: The 'MockDataSource' class generates simulated data for sub-tables in a round-robin fashion, ensuring a realistic mimic of data generation for testing purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/MockDataSource.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Connection with WSConfig\nDESCRIPTION: Example demonstrating how to establish a WebSocket connection using WSConfig to specify connection parameters including URL, credentials, database, and timeout.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst taos = require(\"@tdengine/websocket\");\n\nasync function createConnect() {\n    try {\n        let url = 'ws://127.0.0.1:6041'\n        let conf = new taos.WSConfig(url)\n        conf.setUser('root')\n        conf.setPwd('taosdata')\n        conf.setDb('db')\n        conf.setTimeOut(500)\n        let wsSql = await taos.sqlConnect(conf)\n    } catch (e) {\n        console.error(e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Path Accessor Usage Example\nDESCRIPTION: Demonstrates how to use the json_object_get_by_path function with a nested JSON object structure and path-based access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint main(void) {\n    json_t *obj = json_pack(\"{s:{s:{s:b}}}\", \"a\", \"b\", \"c\", 1);\n\n    json_t *c = json_object_get_by_path(obj, \"a.b.c\");\n    assert(json_is_true(c));\n\n    json_decref(obj);\n}\n```\n\n----------------------------------------\n\nTITLE: Message Producer Implementation for TDengine in Java\nDESCRIPTION: The 'ProducerTask' class is responsible for sending messages to Kafka from the simulated data generator, utilizing a custom hash method for partitioning.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/ProducerTask.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: TDengineCommand Interface Implementation\nDESCRIPTION: Standard interface implementation for command handling in TDengine. Provides command text management and parameter collection functionality.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic string CommandText\npublic new virtual TDengineParameterCollection Parameters\n```\n\n----------------------------------------\n\nTITLE: Fetching Row Block from TDengine Query Result in C\nDESCRIPTION: Retrieve multiple rows at once from the query result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nint taos_fetch_block(TAOS_RES *res, TAOS_ROW *rows)\n```\n\n----------------------------------------\n\nTITLE: Example Query Configuration in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration example for querying data using taosBenchmark. This snippet is a placeholder for the actual query.json file content.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{{#include /TDengine/tools/taos-tools/example/query.json}}\n```\n\n----------------------------------------\n\nTITLE: Creating Histograms with HISTOGRAM() in TDengine SQL\nDESCRIPTION: Generates a histogram of data distribution based on user-specified intervals. Supports different binning types and can return normalized results. Applicable to numeric fields in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_45\n\nLANGUAGE: sql\nCODE:\n```\nHISTOGRAM(expr，bin_type, bin_description, normalized)\n```\n\n----------------------------------------\n\nTITLE: Modifying Virtual Basic Tables in TDengine\nDESCRIPTION: SQL syntax for altering virtual basic tables including adding/dropping columns, modifying column properties and changing column sources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER VTABLE [db_name.]vtb_name alter_table_clause\n\nalter_table_clause: {\n  ADD COLUMN vtb_col_name vtb_column_type [FROM table_name.col_name]\n  | DROP COLUMN vtb_col_name\n  | ALTER COLUMN vtb_col_name SET {table_name.col_name | NULL }\n  | MODIFY COLUMN col_name column_type\n  | RENAME COLUMN old_col_name new_col_name\n}\n```\n\n----------------------------------------\n\nTITLE: Window Clause Syntax\nDESCRIPTION: Complete syntax definition for window clauses in TDengine, including session, state, interval, event, and count windows with their respective parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nwindow_clause: {\n    SESSION(ts_col, tol_val)\n  | STATE_WINDOW(col) [TRUE_FOR(true_for_duration)]\n  | INTERVAL(interval_val [, interval_offset]) [SLIDING (sliding_val)] [FILL(fill_mod_and_val)]\n  | EVENT_WINDOW START WITH start_trigger_condition END WITH end_trigger_condition [TRUE_FOR(true_for_duration)]\n  | COUNT_WINDOW(count_val[, sliding_val])\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing SQL Statement in Go\nDESCRIPTION: Interface method for preparing a SQL statement bound to a connection. Returns a Stmt object that can be used for execution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nPrepare(query string) (Stmt, error)\n```\n\n----------------------------------------\n\nTITLE: Setting TDengine Client Options\nDESCRIPTION: Function to set various client options including locale, charset, timezone, config directory, and driver type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_53\n\nLANGUAGE: c\nCODE:\n```\nint taos_options(TSDB_OPTION option, const void * arg, ...)\n```\n\n----------------------------------------\n\nTITLE: TIMETRUNCATE Function in TDengine\nDESCRIPTION: The TIMETRUNCATE function truncates a timestamp to a specified time unit.  It supports various time units such as nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, and weeks. The function returns a TIMESTAMP with the specified time unit truncated.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\n\"TIMETRUNCATE(expr, time_unit [, use_current_timezone])\\n\\nuse_current_timezone: {\\n    0\\n  | 1\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Freeing Query Result in TDengine C Client\nDESCRIPTION: Release resources associated with the query result set. Must be called after query completion to avoid memory leaks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_free_result(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Creating extract_avg Aggregate Function\nDESCRIPTION: Defines a custom aggregate function 'extract_avg' in TDengine using the shared library '/root/udf/libextract_avg.so'. It outputs a double representing the average of a comma-separated string converted to numeric values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ncreate aggregate function extract_avg as '/root/udf/libextract_avg.so' outputtype double bufsize 16 language 'C';\n```\n\n----------------------------------------\n\nTITLE: Pausing Stream Computing Task in TDengine SQL\nDESCRIPTION: This snippet uses the `PAUSE STREAM` command to pause an existing stream computing task in TDengine. The `IF EXISTS` clause can be used to avoid errors if the stream does not exist. The pause operation does not affect the existing data processed by the stream.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nPAUSE STREAM [IF EXISTS] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a View in TDengine SQL\nDESCRIPTION: Syntax for creating a new view or replacing an existing one. The view is defined by a query and can be bound to a specific database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [ OR REPLACE ] VIEW [db_name.]view_name AS query\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using Go\nDESCRIPTION: This Go snippet shows how to insert data into TDengine using the Go connector. It connects to TDengine and executes SQL INSERT statements to write data into the `meters` supertable using subtables d1001 and d1002.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{#include docs/examples/go/sqlquery/main.go:insert_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Automatic Table Creation with Data Insertion\nDESCRIPTION: Examples of creating tables automatically during data insertion using USING TAGS syntax.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d21001 USING meters TAGS ('California.SanFrancisco', 2) VALUES ('2021-07-13 14:06:32.272', 10.2, 219, 0.32);\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statement in TDengine (C)\nDESCRIPTION: Executes the prepared statement. Currently, a statement can only be executed once. The function takes a pointer to a valid pre-compiled SQL statement object and a pointer to an integer that will store the number of successfully written rows. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_execute(WS_STMT *stmt, int32_t *affected_rows)\"\n\n```\n\n----------------------------------------\n\nTITLE: Multi-Tier Storage Configuration Example in TDengine\nDESCRIPTION: An example configuration of multiple storage tiers in TDengine using six different disks spread across three tier levels (0, 1, and 2), with specific settings for primary mount point and file creation permissions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/01-arch.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndataDir /mnt/disk1/taos 0 1 0\ndataDir /mnt/disk2/taos 0 0 0\ndataDir /mnt/disk3/taos 1 0 0\ndataDir /mnt/disk4/taos 1 0 1\ndataDir /mnt/disk5/taos 2 0 0\ndataDir /mnt/disk6/taos 2 0 0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timestamp from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a java.sql.Timestamp object from a database result set. Returns null if the value is NULL and throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_48\n\nLANGUAGE: Java\nCODE:\n```\nTimestamp getTimestamp(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database in TDengine\nDESCRIPTION: SQL syntax for dropping a database in TDengine. This will delete all tables in the database and destroy all vgroups associated with it.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP DATABASE [IF EXISTS] db_name\n```\n\n----------------------------------------\n\nTITLE: New Database Management Commands in TDengine 3.0\nDESCRIPTION: TDengine 3.0 introduces new commands for database management, including TRIM DATABASE for deleting expired data, and REDISTRIBUTE VGROUP and BALANCE VGROUP for adjusting VNODE distribution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/30-changes.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nTRIM DATABASE db_name;\nREDISTRIBUTE VGROUP vgroup_id DNODE dnode_id;\nBALANCE VGROUP;\n```\n\n----------------------------------------\n\nTITLE: Initializing TDengine Runtime Environment\nDESCRIPTION: Function to initialize the TDengine runtime environment. Generally called automatically by taos_connect() if not explicitly invoked.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_51\n\nLANGUAGE: c\nCODE:\n```\nint taos_init()\n```\n\n----------------------------------------\n\nTITLE: String and Binary Batch Setting Methods in Java\nDESCRIPTION: Methods for setting batch string and binary data with size limits. Includes support for various string and binary formats. Throws SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_95\n\nLANGUAGE: Java\nCODE:\n```\nvoid setString(int columnIndex, ArrayList<String> list, int size) throws SQLException\nvoid setVarbinary(int columnIndex, ArrayList<byte[]> list, int size) throws SQLException\nvoid setGeometry(int columnIndex, ArrayList<byte[]> list, int size) throws SQLException\nvoid setNString(int columnIndex, ArrayList<String> list, int size) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Executing Inner Join Query on Voltage Data in SQL\nDESCRIPTION: This SQL query performs an Inner Join between two tables (d1001 and d1002) to find moments when both tables have voltages greater than 220V, returning the timestamp and voltage values from both tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.ts, a.voltage, b.voltage FROM d1001 a JOIN d1002 b ON a.ts = b.ts and a.voltage > 220 and b.voltage > 220\n```\n\n----------------------------------------\n\nTITLE: HoltWinters SQL Query\nDESCRIPTION: This SQL query calls the FORECAST function with the HoltWinters algorithm on the 'i32' column of the 'foo' table. It specifies the HoltWinters parameters, period, trend, and seasonality, for the time series forecasting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/03-holtwinters.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _frowts, FORECAST(i32, \"algo=holtwinters, period=10,trend=mul,seasonal=mul\") from foo\n```\n\n----------------------------------------\n\nTITLE: Including WebsocketSubscribeDemo Example\nDESCRIPTION: This snippet includes the WebsocketSubscribeDemo Java file which showcases how to subscribe to Websocket events in TDengine. This file is essential for understanding real-time data handling through Websockets.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_java_ws.mdx#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WebsocketSubscribeDemo.java}}\n```\n\n----------------------------------------\n\nTITLE: Query Timeout Configuration in TDengine JDBC\nDESCRIPTION: Method to set the query timeout for the Statement object. Limits the maximum time in seconds that a query can execute before the driver attempts to cancel it.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\nvoid setQueryTimeout(int seconds) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write (Rust)\nDESCRIPTION: This Rust code snippet demonstrates how to perform schemaless writes to TDengine using the native Rust driver. The code is from `schemaless.rs` example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n\"{{#include docs/examples/rust/nativeexample/examples/schemaless.rs}}\"\n```\n\n----------------------------------------\n\nTITLE: Inserting New Data into TDengine using SQL\nDESCRIPTION: This SQL snippet demonstrates how to insert new data into TDengine tables d1001 and d1002. It uses the 'now' function for the timestamp and inserts current, voltage, and phase values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nUSE test;\nINSERT INTO d1001 VALUES (now, 13.3, 229, 0.38);\nINSERT INTO d1002 VALUES (now, 16.3, 233, 0.22);\n```\n\n----------------------------------------\n\nTITLE: Configuring Collectd Direct Collection Plugin in XML\nDESCRIPTION: This XML configuration snippet shows how to set up the network plugin in collectd to send data directly to taosAdapter. It specifies the host and port for the connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_collectd.mdx#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nLoadPlugin network\n<Plugin network>\n         Server \"127.0.0.1\" \"6045\"\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: K-Sigma Anomaly Detection in SQL\nDESCRIPTION: Identifies anomalous data points by comparing values against k times the standard deviation from the mean, with default k value of 3. Assumes normally distributed data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=ksigma,k=2\")\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions for Virtual Tables in SQL\nDESCRIPTION: Syntax for revoking privileges on virtual tables from users. Privileges can be ALL, READ, or WRITE. The database name is optional.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE privileges ON [db_name.]vtable_name FROM user_name\n    privileges: { ALL | READ | WRITE }\n```\n\n----------------------------------------\n\nTITLE: Synchronize Specified Subtables or Regular Tables\nDESCRIPTION: This command synchronizes specified subtables or regular tables from one TDengine instance to another using taosX. It uses the `run` command with the `-f` parameter including `tables` parameter in DSN to specify tables to synchronize, and the `-t` parameter to define the target database. The `-v` parameter enables verbose logging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run \\\n  -f 'taos://root:taosdata@localhost:6030/db1?tables=meters.d0,d1,table1' \\\n  -t 'taos:///db2' -v\"\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumer in Go\nDESCRIPTION: The Go snippet illustrates the setup for a WebSocket consumer, detailing the connection parameters necessary for consuming messages from the broker. It references the relevant Go example file for implementation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/tmq/ws/main.go:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Setting table name with tags using Stmt object in af package\nDESCRIPTION: This function sets the table name and associated tags for the prepared SQL statement. It takes a table name and a Param object containing the tags as input, returning an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) SetTableNameWithTags(tableName string, tags *param.Param) error\"\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions on a View in TDengine SQL\nDESCRIPTION: Syntax for granting specific privileges (READ, WRITE, ALTER) on a view to a user. Only root users can perform this operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nGRANT privileges ON [db_name.]view_name TO user_name\nprivileges: {\n    ALL,\n  | priv_type [, priv_type] ...\n}\npriv_type: {\n    READ\n  | WRITE\n  | ALTER\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Prepared Statement in Go\nDESCRIPTION: Method for closing and cleaning up a prepared statement to free resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (s *Stmt) Close() error\n```\n\n----------------------------------------\n\nTITLE: Fetching Rows from TDengine Query Result in C\nDESCRIPTION: Retrieve a single row from the query result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nTAOS_ROW taos_fetch_row(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Sets Table Name and Tags for SQL Statement - TDengine C\nDESCRIPTION: Binds table names and tag values to an INSERT SQL statement using placeholders. This function is supported in version 2.1.2.0 and later, mainly for auto-create table scenarios.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_73\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_set_tbname_tags(TAOS_STMT* stmt, const char* name, TAOS_MULTI_BIND* tags)\n```\n\n----------------------------------------\n\nTITLE: Schemaless Raw Data Insertion with Request ID\nDESCRIPTION: Extended schemaless insertion method that allows tracking the entire function call chain through a request ID. Provides enhanced traceability for distributed system interactions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nWS_RES *ws_schemaless_insert_raw_with_reqid(WS_TAOS *taos,\n                                            const char *lines,\n                                            int len,\n                                            int32_t *totalRows,\n                                            int protocol,\n                                            int precision,\n                                            uint64_t reqid)\n```\n\n----------------------------------------\n\nTITLE: Creating REST Connection to TDengine\nDESCRIPTION: Shows how to establish a REST-based connection to TDengine. REST connections provide platform independence and don't require client libraries, though with slightly lower performance than native connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_java.mdx#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/RESTConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Python Connector\nDESCRIPTION: Command line instructions for installing the taospy Python package for Native and REST connections, with optional installation of taos-ws-py for WebSocket connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Native connection and REST connection\npip3 install taospy\n\n# WebSocket connection, optional installation\npip3 install taos-ws-py\n```\n\n----------------------------------------\n\nTITLE: Showing Subscriptions in TDengine SQL\nDESCRIPTION: SQL command to display the allocation relationships and consumption information between consumers and vgroups.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SUBSCRIPTIONS;\n```\n\n----------------------------------------\n\nTITLE: Writing RowData to TDengine Normal Table with Flink Sink\nDESCRIPTION: This code snippet illustrates how to write Flink `RowData` to a TDengine normal table. It demonstrates configuring the TDengine Flink connector to write data directly to a normal TDengine table, specifying the database and table name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/flink/Main.java:RowDataToNormalTable}}\n\n```\n\n----------------------------------------\n\nTITLE: JSON Error Handling Example in C\nDESCRIPTION: Shows how to use json_error_t struct for error handling when loading JSON files. Demonstrates proper error checking pattern.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nint main() {\n    json_t *json;\n    json_error_t error;\n\n    json = json_load_file(\"/path/to/file.json\", 0, &error);\n    if(!json) {\n        /* the error variable contains error information */\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in TDengine SQL\nDESCRIPTION: Shows information about all users in the current system, including user-defined users and system default users.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSHOW USERS;\n```\n\n----------------------------------------\n\nTITLE: Defining TmqMessage Class in C#\nDESCRIPTION: Defines the TmqMessage class to represent the specific content of messages in TDengine message queue. It includes properties for the table name and message value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TmqMessage<TValue>\n{\n    public string TableName { get; set; }\n    public TValue Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Update Execution in TDengine JDBC\nDESCRIPTION: Standard JDBC method for executing SQL statements that modify data or schema. Used for INSERT, UPDATE, DELETE, and DDL statements, returning the count of affected rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nint executeUpdate(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Middleware for Security\nDESCRIPTION: This code snippet demonstrates how to set up several middleware configurations in Traefik, including a custom header, IP whitelist, and redirection to HTTPS. These configurations enhance the security of the API endpoints by restricting access and enforcing HTTPS connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"traefik.enable=true\"\n  - \"traefik.http.routers.tdengine.rule=Host(`api.tdengine.example.com`)\"\n  - \"traefik.http.routers.tdengine.entrypoints=https\"\n  - \"traefik.http.routers.tdengine.tls.certresolver=default\"\n  - \"traefik.http.routers.tdengine.service=tdengine\"\n  - \"traefik.http.services.tdengine.loadbalancer.server.port=6041\"\n  - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\"\n  - \"traefik.http.middlewares.check-header.headers.customrequestheaders.X-Secret-Header=SecretValue\"\n  - \"traefik.http.middlewares.check-header.headers.customresponseheaders.X-Header-Check=true\"\n  - \"traefik.http.middlewares.tdengine-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.1.7\"\n  - \"traefik.http.routers.tdengine.middlewares=redirect-to-https,check-header,tdengine-ipwhitelist\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Scalar Function Template in Python\nDESCRIPTION: This template outlines the structure for creating scalar UDFs in TDengine using Python. It includes `init` and `destroy` for lifecycle management, and a `process` function that takes a `datablock` as input and returns a tuple of `output_type` values. The `datablock` provides access to the input data, and the function should return a result for each row in the input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ndef init():\n    # initialization\ndef destroy():\n    # destroy\ndef process(input: datablock) -> tuple[output_type]:  \n```\n\n----------------------------------------\n\nTITLE: Handling TDengine Error Codes in Go\nDESCRIPTION: Code example showing how to extract error codes and messages from TDengine errors by checking if the error is of type errors.TaosError.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// import \"github.com/taosdata/driver-go/v3/errors\"\n    if err != nil {\n        tError, is := err.(*errors.TaosError)\n        if is {\n            fmt.Println(\"errorCode:\", int(tError.Code))\n            fmt.Println(\"errorMessage:\", tError.ErrStr)\n        } else {\n            fmt.Println(err.Error())\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Table Creation Example in TDengine\nDESCRIPTION: Example of creating a table with timestamp, integer, float, and binary columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tb1 (ts TIMESTAMP, col1 INT, col2 FLOAT, col3 BINARY(50));\n```\n\n----------------------------------------\n\nTITLE: Deleting and Viewing Tables in TDengine\nDESCRIPTION: SQL commands for dropping tables and viewing table information including structure and creation statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE [IF EXISTS] [db_name.]tb_name [, [IF EXISTS] [db_name.]tb_name] ...\n\nSHOW TABLES [LIKE tb_name_wildcard];\n\nSHOW CREATE TABLE tb_name;\n\nDESCRIBE [db_name.]tb_name;\n```\n\n----------------------------------------\n\nTITLE: Closing TDengine Connection\nDESCRIPTION: Function to close an established database connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_62\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_close(TAOS *taos)\n```\n\n----------------------------------------\n\nTITLE: Modifying Basic Tables in TDengine\nDESCRIPTION: SQL commands for altering basic table structure including adding/dropping columns, modifying column definitions, and changing table properties.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [db_name.]tb_name alter_table_clause\n\nalter_table_clause: {\n    alter_table_options\n  | ADD COLUMN col_name column_type\n  | DROP COLUMN col_name\n  | MODIFY COLUMN col_name column_type\n  | RENAME COLUMN old_col_name new_col_name\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data via promql-cli with TDengine running\nDESCRIPTION: This snippet demonstrates querying Prometheus data from TDengine using `promql-cli` when both TDengine and taosAdapter are running. It shows the expected output including the job name, value, and timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/02-prometheus.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nubuntu@shuduo-1804 ~ $ promql-cli --host \"http://127.0.0.1:9090\" \"sum(up) by (job)\"\nJOB           VALUE    TIMESTAMP\nprometheus    1        2022-04-20T08:05:26Z\nnode          1        2022-04-20T08:05:26Z\n```\n\n----------------------------------------\n\nTITLE: Adding a Column to a Supertable\nDESCRIPTION: SQL command to add a new column to an existing supertable, which will be propagated to all its subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name ADD COLUMN col_name column_type;\n```\n\n----------------------------------------\n\nTITLE: Schemaless Insert with TTL Control in TDengine C/C++ API\nDESCRIPTION: This function adds Time-To-Live (TTL) capabilities to schemaless inserts. The TTL parameter specifies how many days the data should be retained before automatic deletion by TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_86\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES *taos_schemaless_insert_ttl(TAOS *taos, char *lines[], int numLines, int protocol, int precision, int32_t ttl)\n```\n\n----------------------------------------\n\nTITLE: Using TDengine SQL to Invoke Anomaly Detection\nDESCRIPTION: This SQL snippet demonstrates running the custom anomaly detection algorithm using the TDengine SQL interface. It shows how to query a column for anomalies using the ANOMALY_WINDOW function, highlighting the integration of SQL calls after defining the Python service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/02-algo/03-ad.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM foo ANOMALY_WINDOW(col, 'algo=myad')\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Data Without Cache\nDESCRIPTION: SQL queries to retrieve the latest current and timestamp data from meters using last() and last_row() functions before enabling caching.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/02-cache.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect last(ts,current) from meters;\nselect last_row(ts,current) from meters;\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection Using af Package in Go\nDESCRIPTION: This snippet demonstrates establishing a native connection using the 'af' package in Go, which provides encapsulated advanced features like parameter binding and subscription. Ensure the 'af' package is imported and TDengine is set up correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_go.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/afconn/main.go}}\n```\n\n----------------------------------------\n\nTITLE: UNION Query Example in TDengine SQL\nDESCRIPTION: Shows how to combine results from multiple SELECT statements using UNION ALL, querying different numbers of records from three subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\n(SELECT tbname,* FROM d1 limit 1) \nUNION ALL \n(SELECT tbname,* FROM d11 limit 2) \nUNION ALL \n(SELECT tbname,* FROM d21 limit 3);\n```\n\n----------------------------------------\n\nTITLE: Using _ROWTS Pseudo Column in TDengine SQL\nDESCRIPTION: Demonstrates the use of the _ROWTS pseudo column to represent the primary key timestamp in a query with an aggregate function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect _rowts, max(current) from meters;\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Record with Timestamp as Integer\nDESCRIPTION: Demonstrates inserting a single record using an integer timestamp instead of a formatted date string. This method is useful when working with millisecond precision timestamps.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO d1001 VALUES (1538548685000, 10.3, 219, 0.31);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Topic in TDengine SQL\nDESCRIPTION: SQL syntax for creating a topic to subscribe to all data in a database. This includes all table data and optionally metadata for database migration purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name [with meta] AS DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in TDengine WebSocket (C)\nDESCRIPTION: Executes an SQL statement (DQL, DML, or DDL) synchronously. Returns a result set that must be checked with ws_errno() for success or failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nWS_RES *ws_query(WS_TAOS *taos, const char *sql)\n```\n\n----------------------------------------\n\nTITLE: Setting TDengine Client Options in C\nDESCRIPTION: Set client options including locale, charset, timezone, config directory, and driver type. Default settings use current OS configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nint taos_options(TSDB_OPTION option, const void * arg, ...)\n```\n\n----------------------------------------\n\nTITLE: Show Cluster Status Command\nDESCRIPTION: Queries cluster availability status. Returns 0 for unavailable, 1 for fully available, 2 for partially available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER ALIVE;\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Consumers for Data Subscription in Go\nDESCRIPTION: Provides interfaces for creating consumers, subscribing to topics, polling events, and managing consumer lifecycle with support for native and WebSocket connections\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_64\n\nLANGUAGE: go\nCODE:\n```\nfunc NewConsumer(conf *tmq.ConfigMap) (*Consumer, error)\nfunc (c *Consumer) Subscribe(topic string, rebalanceCb RebalanceCb) error\nfunc (c *Consumer) Poll(timeoutMs int) tmq.Event\n```\n\n----------------------------------------\n\nTITLE: Polling Messages in TDengine (TypeScript)\nDESCRIPTION: Polls for messages with a specified timeout. Returns a Map of topic strings to TaosResult objects. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync poll(timeoutMs: number, reqId?:number):Promise<Map<string, TaosResult>>\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using REST API in Python\nDESCRIPTION: This Python snippet inserts data into TDengine using the REST API. It constructs HTTP requests containing SQL insert statements and sends them to the TDengine server via the REST endpoint.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"Rest Connection\"\n{{#include docs/examples/python/insert_rest.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Batch Parameters\nDESCRIPTION: Adds currently bound parameters to the batch processing queue. Supports only INSERT/IMPORT statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_add_batch(WS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Basic Consume Loop for TMQ in C\nDESCRIPTION: This C snippet presents a basic consume loop for handling messages from a TMQ subscription. It retrieves messages and processes them using `msg_process`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint basic_consume_loop(tmq_t* tmq) {\n  while (true) {\n    tmq_message_t* msg = tmq_consume(tmq, 2000);  // Timeout: 2000ms\n    if (msg == NULL) {\n      if (tmq_errno == TMQ_TIMEOUT_ERR) {\n        // No message received within the timeout\n        continue;\n      } else {\n        fprintf(stderr, \"failed to consume message: %s\\n\", tmq_err2str(tmq_errno));\n        break;\n      }\n    }\n\n    if (msg_process(msg) != 0) {\n      tmq_message_destroy(msg);\n      break;\n    }\n\n    tmq_message_destroy(msg);\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter SQL Type in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the SQL type of a specified parameter. Takes the parameter index as input and returns an integer representing the SQL type. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_88\n\nLANGUAGE: Java\nCODE:\n```\nint getParameterType(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine in Host Network Mode\nDESCRIPTION: This command starts TDengine in host network mode, allowing connections using the host's FQDN.  This simplifies access from the host machine as the container shares the host's network namespace.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name tdengine --network host tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Including Go Example for Parameter Binding\nDESCRIPTION: This Go snippet showcases the implementation of parameter binding in TDengine, demonstrating efficient batch data insertion into the database, aimed at reducing overhead.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/stmt/ws/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Setting table name using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function sets the table name for the prepared SQL statement via WebSocket. It takes a table name as input and returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) SetTableName(name string) error\"\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection to TDengine in Java\nDESCRIPTION: This code demonstrates how to establish a native connection to TDengine database using Java. It includes setting up connection parameters and handling exceptions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/JNIConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Virtual Table in TDengine\nDESCRIPTION: Example of creating a virtual table v1 with multiple columns sourced from different tables including timestamp and integer columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VTABLE v1 (\n    ts timestamp,\n    c1 int FROM t1.value,\n    c2 int FROM t2.value,\n    c3 int FROM t3.value1,\n    c4 int FROM t3.value2);\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statement with Multiple Results in Java JDBC\nDESCRIPTION: Executes a SQL statement that may return multiple results. Returns boolean indicating if first result is a ResultSet.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_37\n\nLANGUAGE: Java\nCODE:\n```\nboolean execute(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Asynchronous SQL Query Execution in C using TDengine\nDESCRIPTION: Asynchronously executes an SQL statement. Requires a callback function to handle the result. The 'code' parameter in the callback indicates success (0) or failure (negative).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_67\n\nLANGUAGE: C\nCODE:\n```\nvoid taos_query_a(TAOS *taos, const char *sql, void (*fp)(void *param, TAOS_RES *, int code), void *param)\n```\n\n----------------------------------------\n\nTITLE: Creating max_vol Aggregate UDF\nDESCRIPTION: Defines a custom aggregate function 'max_vol' in TDengine using the library '/root/udf/libmaxvol.so'. The function outputs a composite string type that combines device ID and the maximum voltage position.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncreate aggregate function max_vol as '/root/udf/libmaxvol.so' outputtype binary(64) bufsize 10240 language 'C';\n```\n\n----------------------------------------\n\nTITLE: Plugin API Function - Get Parser Name\nDESCRIPTION: Function to retrieve the plugin name for frontend display. Must be implemented by the parser plugin dynamic library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nconst char* parser_name()\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using Native Connection in Python\nDESCRIPTION: This Python snippet demonstrates inserting data into TDengine using the native Python connector. It uses the TDengine native client library to establish a connection and execute SQL insert statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"Native Connection\"\n{{#include docs/examples/python/insert_native.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Interquartile Range (IQR) Anomaly Detection in SQL\nDESCRIPTION: Detects anomalies by comparing data points to quartile-based range, identifying values outside 1.5 x IQR from Q1 and Q3\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=iqr\")\n```\n\n----------------------------------------\n\nTITLE: Java Schemaless WebSocket Implementation\nDESCRIPTION: Java example showcasing the implementation of a WebSocket client for schemaless writing. This code includes the necessary imports and defines the `schemaless` method to demonstrate the usage of the WebSocket for data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/SchemalessWsTest.java:schemaless}}\n```\n\n----------------------------------------\n\nTITLE: Automatic Subtable Creation and Data Insertion in TDengine SQL\nDESCRIPTION: This SQL snippet demonstrates how to automatically create a subtable 'd1002' using the 'meters' supertable as a template, and simultaneously insert data into it. It showcases the automatic table creation feature of TDengine using the 'using' keyword.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO d1002 \nUSING meters \nTAGS (\n    \"California.SanFrancisco\", \n    2\n) VALUES (\n    NOW, \n    10.2, \n    219, \n    0.32\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Stream Computing in SQL\nDESCRIPTION: SQL commands to display information about stream computations. The first command shows a basic list, while the second provides more detailed information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STREAMS;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from information_schema.`ins_streams`;\n```\n\n----------------------------------------\n\nTITLE: Preparing SQL Statement in TDengine (C)\nDESCRIPTION: Parses a pre-compiled SQL statement and binds the parsing result and parameter information to the provided `WS_STMT` object. It takes the SQL statement and its length as input. Returns 0 on success, non-zero on failure; refer to the error code page for details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_prepare(WS_STMT *stmt, const char *sql, unsigned long len)\"\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Connected Application Information in TDengine SQL\nDESCRIPTION: Shows information about applications (clients) connected to the TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW APPS;\n```\n\n----------------------------------------\n\nTITLE: Extended Query Execution with Request ID in TDengine JDBC\nDESCRIPTION: Extended method for executing SQL queries with request tracking capabilities. The reqId parameter enables tracing and monitoring of specific requests through the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_31\n\nLANGUAGE: Java\nCODE:\n```\nResultSet executeQuery(String sql, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Raw Schemaless Insert for Binary Data in TDengine C/C++ API\nDESCRIPTION: This function handles schemaless inserts for data that may contain null bytes ('\\0'). It accepts a data buffer and its length instead of an array of strings, making it suitable for binary data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_84\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES *taos_schemaless_insert_raw(TAOS *taos, char *lines, int len, int32_t *totalRows, int protocol, int precision)\n```\n\n----------------------------------------\n\nTITLE: C WebSocket SQL Execution with Request ID\nDESCRIPTION: Example of executing SQL query with a request ID using C WebSocket connection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_41\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/with_reqid_demo.c:with_reqid}}\n```\n\n----------------------------------------\n\nTITLE: Predicting Data using TDengine TDTSFM Model\nDESCRIPTION: SQL query to forecast time series data using TDengine's TDTSFM model v1.0, returning 10 predicted records from the input table\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/04-tsfm.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _frowts, FORECAST(i32, \"algo=tdtsfm_1,rows=10\") from foo\n```\n\n----------------------------------------\n\nTITLE: Using RADIANS Function in SQL\nDESCRIPTION: The RADIANS function converts degrees to radians. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_16\n\nLANGUAGE: SQL\nCODE:\n```\nRADIANS(expr)\n```\n\n----------------------------------------\n\nTITLE: TDengine Metadata Interface\nDESCRIPTION: Interface definition for TDengine column metadata including name, type and length information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport interface TDengineMeta {\n    name: string,\n    type: string,\n    length: number,\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to TDengine Super Table Using Table SQL\nDESCRIPTION: This code snippet demonstrates how to write data to a TDengine super table using Flink's Table API and SQL. It involves defining a table sink using the TDengine connector and then inserting data into that table using SQL INSERT statements, effectively writing the results to TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/flink/Main.java:TableSqlToSink}}\n\n```\n\n----------------------------------------\n\nTITLE: Iterating Over JSON Object with Key Length Information\nDESCRIPTION: Demonstrates using json_object_keylen_foreach to iterate through a JSON object's key-value pairs with access to each key's length. This is useful when working with keys that may contain non-printable characters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n/* obj is a JSON object */\nconst char *key;\njson_t *value;\nsize_t len;\n\njson_object_keylen_foreach(obj, key, len, value) {\n     printf(\"got key %s with length %zu\\n\", key, len);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Cursor is on First Row in ResultSet in Java\nDESCRIPTION: Method for checking if the cursor is positioned on the first row in a database result set. Returns true if the cursor is on the first row, otherwise false. Throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_54\n\nLANGUAGE: Java\nCODE:\n```\nboolean isFirst() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for TDengine and Grafana\nDESCRIPTION: Docker Compose configuration for deploying TDengine and Grafana with automated plugin and data source provisioning\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n  tdengine:\n    image: tdengine/tdengine:latest\n    container_name: tdengine\n    hostname: tdengine\n    environment:\n      TAOS_FQDN: tdengine\n      MONITOR_FQDN: tdengine\n      EXPLORER_CLUSTER: http://tdengine:6041\n      TAOS_KEEPER_TDENGINE_HOST: tdengine\n    volumes:\n      - tdengine-data:/var/lib/taos/\n    ports:\n      - 6060:6060\n  grafana:\n    image: grafana/grafana:latest\n    volumes:\n      - ./tdengine.yml:/etc/grafana/provisioning/datasources/tdengine.yml\n      - grafana-data:/var/lib/grafana\n    environment:\n      GF_INSTALL_PLUGINS: \"tdengine-datasource\"\n      TDENGINE_API: \"http://tdengine:6041\"\n      TDENGINE_BASIC_AUTH: \"cm9vdDp0YW9zZGF0YQ==\"\n    ports:\n      - 3000:3000\n\nvolumes:\n  grafana-data:\n  tdengine-data:\n```\n\n----------------------------------------\n\nTITLE: Counting Subtables in TDengine SQL\nDESCRIPTION: Illustrates how to count the number of subtables under a supertable using the TBNAME pseudo column and DISTINCT keyword.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM (SELECT DISTINCT TBNAME FROM meters);\n```\n\n----------------------------------------\n\nTITLE: TDengine Monitoring Tables Query\nDESCRIPTION: SQL query to view monitoring supertables in the log database showing available metrics\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntaos> use log;\nDatabase changed.\n\ntaos> show stables;\n          stable_name           |\n=================================\n taosd_dnodes_status            |\n taosd_vnodes_info              |\n keeper_monitor                 |\n taosd_vgroups_info             |\n taos_sql_req                   |\n taos_slow_sql                  |\n taosd_mnodes_info              |\n taosd_cluster_info             |\n taosd_sql_req                  |\n taosd_dnodes_info              |\n adapter_requests               |\n taosd_cluster_basic            |\n taosd_dnodes_data_dirs         |\n taosd_dnodes_log_dirs          |\nQuery OK, 14 row(s) in set (0.006542s)\n\n```\n\n----------------------------------------\n\nTITLE: Selecting First Non-NULL Value with FIRST() in TDengine SQL\nDESCRIPTION: Selects the first non-NULL value written to a column. Returns the original data type. Applicable to all column types in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_54\n\nLANGUAGE: sql\nCODE:\n```\nFIRST(expr)\n```\n\n----------------------------------------\n\nTITLE: Go Schemaless WebSocket Implementation\nDESCRIPTION: Go example showcasing the implementation of a WebSocket client for schemaless writing. This code includes the necessary imports and defines the main function to demonstrate the usage of the WebSocket for data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/schemaless/ws/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Subtable in TDengine\nDESCRIPTION: SQL syntax for creating a virtual subtable using a virtual supertable as template. Includes tag definitions and column mappings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VTABLE [IF NOT EXISTS] [db_name].vtb_name \n    (create_definition[ ,create_definition] ...) \n    USING [db_name.]stb_name \n    [(tag_name [, tag_name] ...)] \n    TAGS (tag_value [, tag_value] ...)\n     \n  create_definition:\n    [stb_col_name FROM] [db_name.]table_name.col_name\n  tag_value:\n     const_value\n```\n\n----------------------------------------\n\nTITLE: Opening a taosWS connection\nDESCRIPTION: This code snippet demonstrates how to open a connection to TDengine using the `taosWS` driver. It uses `sql.Open` with the driver name \"taosWS\" and a DSN to connect to the database via WebSocket.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar taosUri = \"root:taosdata@ws(localhost:6041)/\"\ntaos, err := sql.Open(\"taosWS\", taosUri)\n```\n\n----------------------------------------\n\nTITLE: Fetches Error Information - TDengine C\nDESCRIPTION: Provides error details for issues encountered during STMT API operations, available from version 2.1.3.0 onward.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_81\n\nLANGUAGE: C\nCODE:\n```\nchar * taos_stmt_errstr(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Native TMQ Connection Examples\nDESCRIPTION: Code examples demonstrating TMQ implementation using Native connections across different programming languages. Shows connection setup, subscription handling and cleanup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_28\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WsConsumerLoopFull.java:unsubscribe_data_code_piece}}\n```\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/tmq_native.py:unsubscribe}}\n```\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/tmq/native/main.go:close}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/tmq.rs:unsubscribe}}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/subscribe/Program.cs:close}}\n```\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/tmq_demo.c:unsubscribe_and_close}}\n```\n\n----------------------------------------\n\nTITLE: Querying data from a TDengine table using REST API\nDESCRIPTION: This snippet demonstrates how to query all records from a specified table in a TDengine database using the REST API. It includes two authorization methods: Basic authentication and Taosd authentication. The `curl` command sends an HTTP request to the TDengine server with the appropriate authorization header and a SQL query in the request body.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/60-rest-api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -H \"Authorization: Basic cm9vdDp0YW9zZGF0YQ==\" -d \"select * from demo.d1001\" 192.168.0.1:6041/rest/sql\ncurl -L -H \"Authorization: Taosd /KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04\" -d \"select * from demo.d1001\" 192.168.0.1:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Retrieving ParameterMetaData in JDBC PreparedStatement (Java)\nDESCRIPTION: Obtains the type and property information of each parameter in the PreparedStatement. Returns the parameter metadata object. Throws SQLException if the statement is closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_83\n\nLANGUAGE: Java\nCODE:\n```\nParameterMetaData getParameterMetaData() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Using MOD Function in SQL\nDESCRIPTION: The MOD function returns the remainder of expr1 divided by expr2. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nMOD(expr1, expr2)\n```\n\n----------------------------------------\n\nTITLE: Interpolation Query with _IROWTS_ORIGIN in TDengine SQL\nDESCRIPTION: Illustrates the use of _IROWTS_ORIGIN pseudo column with the INTERP function for FILL types PREV/NEXT/NEAR.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect _iorwts_origin, interp(current) from meters range('2020-01-01 10:00:00', '2020-01-01 10:30:00') every(1s) fill(NEXT);\n```\n\n----------------------------------------\n\nTITLE: Revoke Database Access SQL in TDengine\nDESCRIPTION: SQL syntax for revoking database access privileges from users, supporting both READ and WRITE permissions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/26-grant.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE privileges ON priv_level FROM user_name\n\nprivileges : {\n    ALL\n  | priv_type [, priv_type] ...\n}\n\npriv_type : {\n    READ\n  | WRITE\n}\n\npriv_level : {\n    dbname.tbname\n  | dbname.*\n  | *.*\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a row using Stmt object in af package\nDESCRIPTION: This function binds a row of data to the prepared SQL statement. It accepts a Param object containing the row data as input and returns an error if the binding fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) BindRow(row *param.Param) error\"\n```\n\n----------------------------------------\n\nTITLE: Checking Server Status in TDengine\nDESCRIPTION: SQL command to check server status. Returns a number if server is normal, error code if abnormal.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SERVER_STATUS();\n```\n\n----------------------------------------\n\nTITLE: Querying Data using C#\nDESCRIPTION: This C# snippet demonstrates how to query data from TDengine using the C# connector with WebSocket. It connects to TDengine over WebSocket, executes a SELECT query, and processes the retrieved data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n{{#include docs/examples/csharp/wsInsert/Program.cs:select_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Extended Query Interface - C# Request Tracking\nDESCRIPTION: Extended interface methods for request tracking functionality, including Query and Exec methods that accept request IDs for monitoring and tracking purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIRows Query(string query, long reqId)\nlong Exec(string query, long reqId)\n```\n\n----------------------------------------\n\nTITLE: Schemaless Data Insertion - Python\nDESCRIPTION: Performs schemaless data insertion supporting multiple protocols (InfluxDB, OpenTSDB, JSON) with configurable time precision and TTL settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef schemaless_insert(&self, lines: List[str], protocol: SmlProtocol, precision: SmlPrecision, req_id: Optional[int] = None, ttl: Optional[int] = None) -> int:\n```\n\n----------------------------------------\n\nTITLE: Establishing TDengine Connection with Auth Token\nDESCRIPTION: Function to create a database connection using MD5 authentication token instead of password.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_57\n\nLANGUAGE: c\nCODE:\n```\nTAOS *taos_connect_auth(const char *host, const char *user, const char *auth, const char *db, uint16_t port)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in taosAdapter\nDESCRIPTION: Configures SSL for secure HTTP connections in the taosAdapter component using a TOML configuration file. This helps ensure data security by enabling SSL and setting paths for the certificate and key files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[ssl]\nenable = true\ncertFile = \"/path/to/certificate-file\"\nkeyFile = \"/path/to/private-key\"\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine PHP Connector\nDESCRIPTION: Shell commands to download, unzip, and install the TDengine PHP connector. Includes options for non-Swoole and Swoole environments, as well as manually specifying the TDengine directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/45-php.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -L -o php-tdengine.tar.gz https://github.com/Yurunsoft/php-tdengine/archive/refs/tags/v1.0.2.tar.gz \\\n&& mkdir php-tdengine \\\n&& tar -xzf php-tdengine.tar.gz -C php-tdengine --strip-components=1\n```\n\nLANGUAGE: Shell\nCODE:\n```\nphpize && ./configure && make -j && make install\n```\n\nLANGUAGE: Shell\nCODE:\n```\nphpize && ./configure --with-tdengine-dir=/usr/local/Cellar/tdengine/3.0.0.0 && make -j && make install\n```\n\nLANGUAGE: Shell\nCODE:\n```\nphpize && ./configure --enable-swoole && make -j && make install\n```\n\n----------------------------------------\n\nTITLE: Using taosAdapter REST API with Time Zone Settings in Shell\nDESCRIPTION: This example demonstrates how to use the taosAdapter REST API with explicit time zone settings. The query specifies the Europe/Berlin time zone and returns timestamp data in RFC3339 format with appropriate time zone offsets.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -uroot:taosdata 'localhost:6041/rest/sql?tz=Europe/Berlin'\\\n  -d \"select ts from tz1.t1\"\n{\"code\":0,\"column_meta\":[[\"ts\",\"TIMESTAMP\",8]],\"data\":[[\"1970-01-01T00:59:59.000+01:00\"],[\"2024-03-31T01:00:00.000+01:00\"],[\"2024-03-31T01:59:59.000+01:00\"],[\"2024-03-31T03:00:00.000+02:00\"],[\"2024-03-31T03:00:01.000+02:00\"],[\"2024-10-27T02:00:00.000+02:00\"],[\"2024-10-27T02:59:59.000+02:00\"],[\"2024-10-27T02:00:00.000+01:00\"],[\"2024-10-27T02:59:59.000+01:00\"],[\"2024-10-27T03:00:00.000+01:00\"]],\"rows\":10}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Modifying dataDir in TDengine\nDESCRIPTION: SQL command to dynamically modify the dataDir parameter for an existing directory, controlling whether new file creation is disabled for that directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/01-arch.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter dnode 1 \"/mnt/disk2/taos 1\";\n```\n\n----------------------------------------\n\nTITLE: Querying TDengine with SQL\nDESCRIPTION: This SQL query is used to verify the data synchronization from Kafka to TDengine. It selects all columns from the `meters` stable in the `power` database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ntaos> use power;\nDatabase changed.\n\ntaos> select * from meters;\n```\n\n----------------------------------------\n\nTITLE: WebSocket URL Format Specification\nDESCRIPTION: Defines the format specification for WebSocket connection URLs including protocol, authentication, host, port, database and parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[+<protocol>]://[[<username>:<password>@]<host>:<port>][/<database>][?<p1>=<v1>[&<p2>=<v2>]]\n|------------|---|-----------|-----------|------|------|------------|-----------------------|\n|   protocol |   | username  | password  | host | port |  database  |  params               |\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - Java\nDESCRIPTION: This Java code snippet demonstrates how to establish a WebSocket connection to the TDengine database. It calls the main method from the specified example file, which sets up the connection parameters and includes exception handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: TO_ISO8601 Function in TDengine\nDESCRIPTION: The TO_ISO8601 function converts a timestamp to a string formatted according to the ISO8601 standard, including timezone information. The timezone parameter allows specifying an arbitrary timezone for the output; if omitted, the client's system timezone is used. This function is suitable for tables and super tables and is supported in nested subqueries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\n\"TO_ISO8601(expr [, timezone])\"\n```\n\n----------------------------------------\n\nTITLE: Preparing SQL Statement\nDESCRIPTION: Parses an SQL statement and binds the parsing results to the statement object. Supports customizable SQL length parameter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_prepare(WS_STMT *stmt, const char *sql, unsigned long len)\n```\n\n----------------------------------------\n\nTITLE: Adding a Tag to a Supertable\nDESCRIPTION: SQL command to add a new tag to a supertable, which will be added to all its subtables with NULL as the default value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name ADD tag tag_name tag_type;\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Flag in TDengine SQL\nDESCRIPTION: SQL command to modify the debug flag level for a specific dnode in TDengine. The debug flag controls the level of log information generated.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter dnode <dnode_id> 'debugFlag' '135';\n```\n\n----------------------------------------\n\nTITLE: Creating the Weighted Sum UDF\nDESCRIPTION: SQL statement to create the weighted sum UDF in TDengine. Defines the path to the Python implementation file and specifies double as the output type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\ncreate function nsum as '/root/udf/nsum.py' outputtype double language 'Python';\n```\n\n----------------------------------------\n\nTITLE: Initializing TDengine Consumer Class\nDESCRIPTION: Constructor for creating a new Consumer object for data subscription. Takes configuration parameters as a Python dictionary including connection details, group settings, and auto-commit options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef Consumer(configs)\n```\n\n----------------------------------------\n\nTITLE: Using RFC3339 Time Format with Time Zone Offsets in TDengine SQL\nDESCRIPTION: This example shows how to insert and query data using RFC3339 time format with explicit time zone offsets to handle DST transitions correctly. It demonstrates inserting data at different points during a DST change and querying it with different time ranges.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ntaos> insert into t1 values ('2024-10-27T02:00:00.000+02:00', 1)\n                          ('2024-10-27T02:59:59.000+02:00', 2)\n                          ('2024-10-27T02:00:00.000+01:00', 3)\n                          ('2024-10-27T02:59:59.000+01:00', 4);\nInsert OK, 4 row(s) affected (0.001514s)\n\ntaos> SELECT *,\n           to_iso8601(ts,'Z'),\n           to_char(ts, 'YYYY-MM-DD HH:mi:ss') FROM t1\n    WHERE ts >= '2024-10-27T02:00:00.000+02:00'\n      AND ts <= '2024-10-27T02:59:59.000+01:00';\n       ts      |     v1  |       to_iso8601(ts,'Z')       | to_char(ts, 'YYYY-MM-DD HH:mi:ss') |\n=====================================================================================================\n 1729987200000 |       1 | 2024-10-27T00:00:00.000Z       | 2024-10-27 02:00:00                |\n 1729990799000 |       2 | 2024-10-27T00:59:59.000Z       | 2024-10-27 02:59:59                |\n 1729990800000 |       3 | 2024-10-27T01:00:00.000Z       | 2024-10-27 02:00:00                |\n 1729994399000 |       4 | 2024-10-27T01:59:59.000Z       | 2024-10-27 02:59:59                |\nQuery OK, 4 row(s) in set (0.004275s)\n\ntaos> SELECT *,\n           to_iso8601(ts,'Z'),\n           to_char(ts, 'YYYY-MM-DD HH:mi:ss') FROM t1\n    WHERE ts >= '2024-10-27T02:00:00.000+02:00'\n      AND ts <= '2024-10-27T02:59:59.000+02:00';\n       ts      |     v1  |       to_iso8601(ts,'Z')       | to_char(ts, 'YYYY-MM-DD HH:mi:ss') |\n=====================================================================================================\n 1729987200000 |       1 | 2024-10-27T00:00:00.000Z       | 2024-10-27 02:00:00                |\n 1729990799000 |       2 | 2024-10-27T00:59:59.000Z       | 2024-10-27 02:59:59                |\nQuery OK, 2 row(s) in set (0.004275s)\n```\n\n----------------------------------------\n\nTITLE: Basic Query Example in TDengine\nDESCRIPTION: Query to select all records from the past hour.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM tb1 WHERE ts >= NOW - 1h;\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name\nDESCRIPTION: Sets the table name for INSERT statements where the table name is a placeholder. Used when table name is parameterized.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_set_tbname(WS_STMT *stmt, const char *name)\n```\n\n----------------------------------------\n\nTITLE: Displaying Stream Computations in TDengine SQL\nDESCRIPTION: Shows information about all stream computations in the current system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STREAMS;\n```\n\n----------------------------------------\n\nTITLE: Managing Topic Subscriptions\nDESCRIPTION: Methods for subscribing to topics, unsubscribing, and retrieving subscription information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_98\n\nLANGUAGE: Java\nCODE:\n```\nvoid subscribe(Collection<String> topics) throws SQLException\nvoid unsubscribe() throws SQLException\nSet<String> subscription() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Enhanced SELECT Query Functionality in TDengine 3.0\nDESCRIPTION: The SELECT statement in TDengine 3.0 has been significantly enhanced. It now requires explicit column specification, fully supports DISTINCT, has improved JOIN capabilities, allows unlimited subquery nesting, and offers more flexible GROUP BY and ORDER BY clauses.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/30-changes.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT column1, column2 FROM table\nWHERE condition\nGROUP BY expression\nORDER BY expression [NULLS FIRST|LAST]\nPARTITION BY tag_column\n```\n\n----------------------------------------\n\nTITLE: Closes Precompiled SQL Statement - TDengine C\nDESCRIPTION: Releases all resources involved after executing the precompiled SQL statement. Proper handling is essential for maintaining resource integrity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_80\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_close(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: FORECAST Function Syntax\nDESCRIPTION: Illustrates the syntax of the `FORECAST` function in TDengine SQL. It takes a column expression and an option expression as input, where the option expression is a JSON-like string containing algorithm and parameter settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/index.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nFORECAST(column_expr, option_expr)\n\noption_expr: {\"\nalgo=expr1\n[,wncheck=1|0]\n[,conf=conf_val]\n[,every=every_val]\n[,rows=rows_val]\n[,start=start_ts_val]\n[,expr2]\n\"}\n```\n\n----------------------------------------\n\nTITLE: Adding a batch using Stmt object in af package\nDESCRIPTION: This function adds the currently bound parameters as a batch for later execution. It is called on a Stmt object and returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) AddBatch() error\"\n```\n\n----------------------------------------\n\nTITLE: Including Java Standard Interface Example for Parameter Binding\nDESCRIPTION: This code snippet demonstrates the usage of the JDBC standard interface for parameter binding in Java. It allows efficient data insertion into TDengine by avoiding SQL parsing overhead.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSParameterBindingStdInterfaceDemo.java:para_bind}}\n```\n\n----------------------------------------\n\nTITLE: JSON Array Creation with Reference Stealing\nDESCRIPTION: Simplified example using reference stealing function to create and populate a JSON array.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\njson_t *array = json_array();\njson_array_append_new(array, json_integer(42));\n```\n\n----------------------------------------\n\nTITLE: Setting a Tinyint value in Param object\nDESCRIPTION: This function sets a Tinyint value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Tinyint value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_48\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetTinyint(offset int, value int)\"\n```\n\n----------------------------------------\n\nTITLE: Next Sunday Date UDF (Example 4)\nDESCRIPTION: A UDF that takes a timestamp and returns the date of the next Sunday. Uses the moment Python library for date manipulation and validates input parameters for correctness.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport moment\n\ndef init():\n    pass\n\ndef destroy():\n    pass\n\ndef process(block):\n    rows, cols = block.shape()\n    if cols > 1:\n        raise Exception(\"require only 1 parameter\")\n    if not type(block.data(0, 0)) is int:\n        raise Exception(\"type error\")\n    return [moment.unix(block.data(i, 0)).replace(weekday=7).format('YYYY-MM-DD')\n            for i in range(rows)]\n```\n\n----------------------------------------\n\nTITLE: 查看所有消费者的SQL语法\nDESCRIPTION: 显示当前数据库下所有消费者的信息，包括消费者状态和创建时间等详细信息。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CONSUMERS;\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions on Views in TDengine SQL\nDESCRIPTION: This snippet provides the syntax for revoking previously granted permissions on views in TDengine SQL. This is crucial for managing user access and maintaining security.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE privileges ON [db_name.]view_name FROM user_name\nprivileges: {\n    ALL,\n  | priv_type [, priv_type] ...\n}\npriv_type: {\n    READ\n  | WRITE\n  | ALTER\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TDengine Cluster Status\nDESCRIPTION: Shell commands for checking the status of the TDengine cluster. These commands extract the pod name and execute 'show dnodes' and 'show mnodes' queries to verify the cluster's operational status.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nroot@u1-58:/data1/projects/helm# kubectl --namespace default exec $POD_NAME -- taos -s \"show dnodes; show mnodes\"\nWelcome to the TDengine Command Line Interface, Client Version:3.3.5.8\nCopyright (c) 2023 by TDengine, all rights reserved.\n\ntaos> show dnodes; show mnodes\n     id      |            endpoint            | vnodes | support_vnodes |    status    |       create_time       |       reboot_time       |              note              |\n=============================================================================================================================================================================\n           1 | oss-tdengine-0.oss-tdengine... |      0 |             21 | ready        | 2025-03-12 19:05:42.224 | 2025-03-12 19:05:42.044 |                                |\nQuery OK, 1 row(s) in set (0.002545s)\n\n     id      |            endpoint            |      role      |   status    |       create_time       |        role_time        |\n==================================================================================================================================\n           1 | oss-tdengine-0.oss-tdengine... | leader         | ready       | 2025-03-12 19:05:42.239 | 2025-03-12 19:05:42.137 |\nQuery OK, 1 row(s) in set (0.001343s)\n```\n\n----------------------------------------\n\nTITLE: Managing IP Whitelists in TDengine\nDESCRIPTION: SQL commands to create, query, and delete IP whitelists for managing secure access to TDengine. Requires user permission configuration separate from IP whitelisting. Supports multiple IP ranges with deduplication logic. Key parameters include the user, password, and host. Default IP 127.0.0.1 is whitelisted. Cluster IPs are automatically whitelisted but not queriable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate user test pass password [sysinfo value] [host host_name1[,host_name2]] \nalter user test add host host_name1\n\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TEST, ALLOWED_HOST FROM INS_USERS;\nSHOW USERS;\n\n```\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER TEST DROP HOST HOST_NAME1\n\n```\n\n----------------------------------------\n\nTITLE: Getting Committed Offset in TMQ in C\nDESCRIPTION: Function to get the committed offset for a specific topic and vgroup. Takes a TMQ consumer, topic name, and vgroup ID. Returns an int64_t value representing the committed offset or a negative error code on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_44\n\nLANGUAGE: C\nCODE:\n```\nint64_t ws_tmq_committed(ws_tmq_t *tmq, const char *pTopicName, int32_t vgId)\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Consumer Parameters\nDESCRIPTION: Presents a list of WebSocket properties for creating consumers in C# and references common configuration items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSupported properties list for creating consumers:\n\n- `useSSL`: Whether to use SSL connection, default false.\n- `token`: Token for connecting to TDengine cloud.\n- `ws.message.enableCompression`: Whether to enable WebSocket compression, default false.\n- `ws.autoReconnect`: Whether to automatically reconnect, default false.\n- `ws.reconnect.retry.count`: Reconnect attempts, default 3.\n- `ws.reconnect.interval.ms`: Reconnect interval in milliseconds, default 2000.\n\nSee the table above for other parameters.\n```\n\n----------------------------------------\n\nTITLE: Creating a Sink Connector Instance\nDESCRIPTION: This command uses `curl` to create a TDengine Sink Connector instance in Kafka Connect, using the configuration defined in the `sink-demo.json` file. It sends a POST request to the Kafka Connect API with the JSON configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d @sink-demo.json http://localhost:8083/connectors -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Executing Schemaless Writing with TDengine Java\nDESCRIPTION: This snippet demonstrates how to execute schemaless data writing in TDengine using Java. The 'writer.write' method is called with the line demo data, specifying the LINE protocol and NANO_SECONDS timestamp type. The last parameter, reqId, enables request link tracing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nwriter.write(lineDemo, SchemalessProtocolType.LINE, SchemalessTimestampType.NANO_SECONDS, 1L);\n```\n\n----------------------------------------\n\nTITLE: Getting Field Count in TDengine Query Result in C\nDESCRIPTION: Get the number of columns in the query result set. Both functions are equivalent.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nint taos_num_fields(TAOS_RES *res)\n```\n\nLANGUAGE: c\nCODE:\n```\nint taos_field_count(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Setting TDengine Connection Options\nDESCRIPTION: Function to set connection-specific options like charset, timezone, user IP, and user APP settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_54\n\nLANGUAGE: c\nCODE:\n```\nint taos_options_connection(TAOS *taos, TSDB_OPTION_CONNECTION option, const void *arg, ...)\n```\n\n----------------------------------------\n\nTITLE: taosX Command Line Format\nDESCRIPTION: This code snippet illustrates the general command line syntax for using taosX. It requires specifying a source DSN (`-f`), a target DSN (`-t`), and potentially other parameters. Replace `<from-DSN>`, `<to-DSN>`, and `<other parameters>` with actual values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx -f <from-DSN> -t <to-DSN> <other parameters>\"\n```\n\n----------------------------------------\n\nTITLE: Session Window Query Results\nDESCRIPTION: Example result set showing the session window query output with window statistics for different devices over a 10-minute period.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n tbname |         _wstart         |          _wend          |  _wduration   |   count(*)    |\n===============================================================================================\n d2     | 2022-01-01 00:00:00.000 | 2022-01-01 00:09:50.000 |        590000 |            60 |\n d26    | 2022-01-01 00:00:00.000 | 2022-01-01 00:09:50.000 |        590000 |            60 |\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows Count in TDengine WebSocket (C)\nDESCRIPTION: Returns the number of rows affected by the executed SQL statement. Two versions are provided for different integer sizes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_affected_rows(const WS_RES *rs)\n```\n\nLANGUAGE: C\nCODE:\n```\nint64_t ws_affected_rows64(const WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Using LEAST Function in SQL\nDESCRIPTION: The LEAST function returns the smallest value from the list of expressions. It functions similarly to the GREATEST function but returns the minimum value instead. Available from version 3.3.6.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nLEAST(expr1, expr2[, expr]...)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in C\nDESCRIPTION: The C code example provides guidance on implementing parameter binding using WebSocket connections for improved data insertion performance in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/stmt_insert_demo.c}}\n```\n\n----------------------------------------\n\nTITLE: Executing ASOF Join in TDengine SQL\nDESCRIPTION: Query to compare voltage values between d1001 and d1002 when d1001's voltage exceeds 220V, matching with closest earlier timestamp in d1002.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.ts, a.voltage, b.ts, b.voltage FROM d1001 a LEFT ASOF JOIN d1002 b ON a.ts >= b.ts where a.voltage > 220 and b.voltage > 220\n```\n\n----------------------------------------\n\nTITLE: Seeking to Specific Offset in TDengine (TypeScript)\nDESCRIPTION: Sets the offset for a given partition to a specified position. Takes a TopicPartition object representing the partition and offset to set. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync seek(partition:TopicPartition, reqId?:number):Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding DNode to TDengine Cluster\nDESCRIPTION: Adds a new dnode to the existing TDengine cluster. The `create dnode` SQL command inserts the new node's endpoint into the cluster configuration. Proper endpoint format and quotation are crucial to avoid errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/01-manual.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate dnode \"h2.tdengine.com:6030\"\n```\n\nLANGUAGE: sql\nCODE:\n```\nshow dnodes;\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumer in Java\nDESCRIPTION: This snippet uses the WebSocket connection method to create a consumer instance in Java. It incorporates parameters for server address, auto-commit settings, and message handling strategies, expecting the source Java file to be present.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WsConsumerLoopFull.java:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Getting TDengine Client Version\nDESCRIPTION: Function to retrieve the client version information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_55\n\nLANGUAGE: c\nCODE:\n```\nchar *taos_get_client_info()\n```\n\n----------------------------------------\n\nTITLE: Defining Initialization and Destruction Interfaces in Python\nDESCRIPTION: This code defines the required `init` and `destroy` functions for all Python UDFs in TDengine. The `init` function performs any necessary initialization tasks, while `destroy` handles cleanup.  These functions are essential for managing the UDF's lifecycle within the TDengine environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef init()\ndef destroy()\n```\n\n----------------------------------------\n\nTITLE: Manual Offset Commit - Native C Implementation\nDESCRIPTION: Demonstrates manual offset commit using native C connection with tmq_commit_sync function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/tmq_demo.c:manual_commit}}\n```\n\n----------------------------------------\n\nTITLE: File-Based Data Insertion\nDESCRIPTION: Example of inserting data from a CSV file into a table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d1001 FILE '/tmp/csvfile.csv';\n```\n\n----------------------------------------\n\nTITLE: Constructing TDengine DSN String\nDESCRIPTION: Shows the structure of a Data Source Name (DSN) string used to represent connection information for the TDengine C/C++ WebSocket connector.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<driver>[+<protocol>]://[[<username>:<password>@]<host>:<port>][/<database>][?<p1>=<v1>[&<p2>=<v2>]]\n```\n\n----------------------------------------\n\nTITLE: Showing Topics in TDengine SQL\nDESCRIPTION: SQL command to display all topics in the current database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TOPICS;\n```\n\n----------------------------------------\n\nTITLE: Schemaless Insert with TTL and Request ID in TDengine C/C++ API\nDESCRIPTION: The most comprehensive schemaless insert function that combines TTL control for data expiration with request ID tracking for distributed systems monitoring and debugging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_87\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES *taos_schemaless_insert_ttl_with_reqid(TAOS *taos, char *lines[], int numLines, int protocol, int precision, int32_t ttl, int64_t reqid)\n```\n\n----------------------------------------\n\nTITLE: Retrieving String with Unicode Support from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a Java String with support for international character sets. Used for NCHAR, NVARCHAR, and LONGNVARCHAR columns. Returns null if the value is NULL.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_49\n\nLANGUAGE: Java\nCODE:\n```\nString getNString(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Setting a null value in Param object\nDESCRIPTION: This function sets a null value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_47\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetNull(offset int)\"\n```\n\n----------------------------------------\n\nTITLE: Forecasting with TDtsfm in SQL\nDESCRIPTION: This SQL statement forecasts 10 rows of data using the TDtsfm v1.0 model.  It uses the FORECAST function with the 'algo=tdtsfm_1,rows=10' parameter string to specify the TDtsfm model and the number of rows to forecast. The input data is assumed to be of type i32 and comes from the 'foo' table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/04-tsfm.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _frowts, FORECAST(i32, \"algo=tdtsfm_1,rows=10\") from foo\n```\n\n----------------------------------------\n\nTITLE: Forecasting Results Query in SQL\nDESCRIPTION: Shows a SQL query example of forecasting results, including lower and upper bounds of the confidence interval, forecast timestamps, and predicted values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ntaos> select _flow, _fhigh, _frowts, forecast(i32) from foo;\n        _flow         |        _fhigh        |       _frowts           | forecast(i32) |\n========================================================================================\n           10.5286684 |           41.8038254 | 2020-01-01 00:01:35.000 |            26 |\n          -21.9861946 |           83.3938904 | 2020-01-01 00:01:36.000 |            30 |\n          -78.5686035 |          144.6729126 | 2020-01-01 00:01:37.000 |            33 |\n         -154.9797363 |          230.3057709 | 2020-01-01 00:01:38.000 |            37 |\n         -253.9852905 |          337.6083984 | 2020-01-01 00:01:39.000 |            41 |\n         -375.7857971 |          466.4594727 | 2020-01-01 00:01:40.000 |            45 |\n         -514.8043823 |          622.4426270 | 2020-01-01 00:01:41.000 |            53 |\n         -680.6343994 |          796.2861328 | 2020-01-01 00:01:42.000 |            57 |\n         -868.4956665 |          992.8603516 | 2020-01-01 00:01:43.000 |            62 |\n        -1076.1566162 |         1214.4498291 | 2020-01-01 00:01:44.000 |            69 |\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Query Hints in TDengine SQL\nDESCRIPTION: This query demonstrates the use of multiple query hints. It selects from 'stb1' with hints to use a specific table and to stream the results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/query/hint.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT /*+ USE_TNAME(stb1_1) STREAM_CANCEL() */ * FROM stb1;\n```\n\n----------------------------------------\n\nTITLE: Select Data from Meters Table (TDengine CLI)\nDESCRIPTION: This shell command demonstrates how to select and display data from the `meters` table in the `power` database using the TDengine CLI.  It retrieves a single row with columns like `_ts`, `current`, `voltage`, `phase`, `groupid` and `location`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"taos> select * from power.meters limit 1 \\\\G;\\n*************************** 1.row ***************************\\n     _ts: 2021-07-11 20:33:53.639\\n current: 10.300000199999999\\n voltage: 219\\n   phase: 0.310000000000000\\n groupid: 2\\nlocation: California.SanFrancisco\\nQuery OK, 1 row(s) in set (0.004501s)\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine using REST API in Node.js\nDESCRIPTION: This snippet shows how to connect to TDengine using the REST API approach in Node.js. It sets up the connection configuration and creates a client instance for making REST API calls.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_node.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst taos = require('td2.0-rest-connector');\n\nconst config = {\n  url: \"http://127.0.0.1:6041\",\n  user: \"root\",\n  password: \"taosdata\"\n};\n\nlet client = taos.connect(config);\n\n```\n\n----------------------------------------\n\nTITLE: Establishing Native JDBC Connection in Java\nDESCRIPTION: This snippet shows how to establish a native JDBC connection to the TDengine database using the JDBC URL format. It specifies necessary parameters such as hostname, port, database name, username, and password. The snippet also highlights the dependencies required for the native JDBC driver.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString jdbcUrl = \"jdbc:TAOS://taosdemo.com:6030/power?user=root&password=taosdata\";\n```\n\n----------------------------------------\n\nTITLE: Using TOP Function in SQL\nDESCRIPTION: Returns the k largest non-NULL values in a column. When multiple equal values would exceed k records, randomly selects the required number.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_62\n\nLANGUAGE: sql\nCODE:\n```\nTOP(expr, k)\n```\n\n----------------------------------------\n\nTITLE: Adding Param Values with Chain Methods in Go\nDESCRIPTION: Provides chain methods for adding different data types to Param objects, supporting boolean and numeric types with fluent interface design\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_62\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *Param) AddBool(value bool) *Param\nfunc (p *Param) AddTinyint(value int8) *Param\nfunc (p *Param) AddSmallint(value int16) *Param\n```\n\n----------------------------------------\n\nTITLE: Renaming a Tag in a Supertable\nDESCRIPTION: SQL command to change the name of a tag in a supertable, which will be propagated to all its subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name RENAME tag old_tag_name new_tag_name;\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Connection Pool Table Schema in SQL\nDESCRIPTION: SQL table schema for adapter_conn_pool that tracks connection pool metrics including total connections, active connections and user details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE adapter_conn_pool (\n  _ts TIMESTAMP,\n  conn_pool_total DOUBLE,\n  conn_pool_in_use DOUBLE,\n  endpoint NCHAR,\n  user NCHAR\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Node TDengine Deployment in Kubernetes with YAML\nDESCRIPTION: A basic YAML configuration for deploying a single-node TDengine database in Kubernetes. This configuration defines services, volumes, and file mounts required for TDengine, including timezone settings and resource allocations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Set timezone here, not in taoscfg\ntimezone: \"Asia/Shanghai\"\n\nlabels:\n  app: \"tdengine\"\n  # Add more labels as needed.\n\nservices:\n  server:\n    type: ClusterIP\n    replica: 1\n    ports:\n      # TCP range required\n      tcp: [6041, 6030, 6060]\n      # UDP range, optional\n      udp:\n    volumes:\n      - name: data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n    files:\n      - name: cfg # must be lower case.\n        mountPath: /etc/taos/taos.cfg\n        content: |\n          dataDir /var/lib/taos/\n          logDir /var/log/taos/\n```\n\n----------------------------------------\n\nTITLE: Configuring taosX Agent parameters in TOML\nDESCRIPTION: This snippet shows the default configuration file in TOML format for the taosX Agent. Key parameters include endpoint, token, instanceId, and logging configuration options. Each parameter is followed by comments explaining their use and possible values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/05-taosx-agent.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# taosX service endpoint\n#\n#endpoint = \"http://localhost:6055\"\n\n# !important!\n# Uncomment it and copy-paste the token generated in Explorer.\n#\n#token = \"\"\n\n# server instance id\n# \n# The instanceId of each instance is unique on the host\n# instanceId = 48\n\n# enable communication data compression between Agent and taosX\n#\n#compression = true\n\n# In-memory cache capacity\n#\n#in_memory_cache_capacity = 64\n\n# log configuration\n[log]\n# All log files are stored in this directory\n# \n#path = \"/var/log/taos\" # on linux/macOS\n#path = \"C:\\\\TDengine\\\\log\" # on windows\n\n# log filter level\n#\n#level = \"info\"\n\n# Compress archived log files or not\n# \n#compress = false\n\n# The number of log files retained by the current explorer server instance in the `path` directory\n# \n#rotationCount = 30\n\n# Rotate when the log file reaches this size\n# \n#rotationSize = \"1GB\"\n\n# Log downgrade when the remaining disk space reaches this size, only logging `ERROR` level logs\n# \n#reservedDiskSize = \"1GB\"\n\n# The number of days log files are retained\n#\n#keepDays = 30\n```\n\n----------------------------------------\n\nTITLE: Iterating Over JSON Array Elements in C with json_array_foreach Macro\nDESCRIPTION: Demonstrates how to use the json_array_foreach macro to iterate over all elements in a JSON array. The macro handles the iteration mechanics internally, providing access to both the index and value for each element.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n/* array is a JSON array */\nsize_t index;\njson_t *value;\n\njson_array_foreach(array, index, value) {\n    /* block of code that uses index and value */\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Subtables in TDengine\nDESCRIPTION: SQL syntax for modifying subtable properties including tag values, TTL, and comments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [db_name.]tb_name alter_table_clause\n\nalter_table_clause: {\n    alter_table_options\n  | SET tag tag_name = new_tag_value, tag_name2=new_tag2_value ...\n}\n```\n\n----------------------------------------\n\nTITLE: Python Schemaless WebSocket Implementation\nDESCRIPTION: Python example for schemaless writing using WebSocket. This code snippet demonstrates how to connect to a TDengine server via WebSocket and perform schemaless data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/schemaless_ws.py}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Database List in TDengine SQL\nDESCRIPTION: Shows all defined databases in the system. Can be filtered to show only system databases or only user-created databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [USER | SYSTEM] DATABASES;\n```\n\n----------------------------------------\n\nTITLE: Opening a taosSql connection\nDESCRIPTION: This code snippet demonstrates how to open a connection to TDengine using the `taosSql` driver.  It uses `sql.Open` with the driver name \"taosSql\" and a DSN to connect to the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar taosUri = \"root:taosdata@tcp(localhost:6030)/\"\ntaos, err := sql.Open(\"taosSql\", taosUri)\n```\n\n----------------------------------------\n\nTITLE: Viewing Database Disk Usage Details in TDengine SQL\nDESCRIPTION: Retrieves detailed disk usage information for each module in the specified database from the INFORMATION_SCHEMA.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect * from  INFORMATION_SCHEMA.INS_DISK_USAGE where db_name = 'db_name'\n```\n\n----------------------------------------\n\nTITLE: Uses Result Set from Statement - TDengine C\nDESCRIPTION: Retrieves the result set of a statement execution. Ensure resource cleanup using `taos_free_result()` after inspection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_79\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES* taos_stmt_use_result(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: LEFT ASOF JOIN Example in TDengine\nDESCRIPTION: Example of LEFT ASOF JOIN operation between a subtable and a supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM temp_ctable t1 LEFT ASOF JOIN temp_stable t2\nON t1.ts = t2.ts AND t1.deviceid = t2.deviceid;\n```\n\n----------------------------------------\n\nTITLE: Manual Offset Commit - WebSocket Java Implementation\nDESCRIPTION: Demonstrates manual offset commit process in Java using WebSocket connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WsConsumerLoopFull.java:commit_code_piece}}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in Python\nDESCRIPTION: This Python snippet demonstrates how to use parameter binding with WebSocket connections in TDengine, focused on simplifying and optimizing data insertion processes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/stmt_ws.py}}\n```\n\n----------------------------------------\n\nTITLE: Logging Functions in Python\nDESCRIPTION: This Python code snippet defines a logging class with methods for printing different types of messages to the console with color-coding. It uses ANSI escape codes to format the output, providing visual cues for different message types (info, debug, success, notice, error).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/How-To-Run-Test-And-How-To-Add-New-Test-Case.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n \tdef info(self, info):\n\n\t\tprintf(\"%s %s\" % (datetime.datetime.now(), info))\n\n\t\n\tdef sleep(self, sec):\n\n\t\tprintf(\"%s sleep %d seconds\" % (datetime.datetime.now(), sec))\n\n\t\ttime.sleep(sec)\n\n\t\n\tdef debug(self, err):\n\n\t\tprintf(\"\\033[1;36m%s %s\\033[0m\" % (datetime.datetime.now(), err))\n\n\t\n\tdef success(self, info):\n\n\t\tprintf(\"\\033[1;32m%s %s\\033[0m\" % (datetime.datetime.now(), info))\n\n\t\n\tdef notice(self, err):\n\n\t\tprintf(\"\\033[1;33m%s %s\\033[0m\" % (datetime.datetime.now(), err))\n\n\t\n\tdef exit(self, err):\n\n\t\tprintf(\"\\033[1;31m%s %s\\033[0m\" % (datetime.datetime.now(), err))\n\n\t\tsys.exit(1)\n\n\t\n\tdef printNoPrefix(self, info):\n\n\t\tprintf(\"\\033[1;36m%s\\033[0m\" % (info)\n```\n\n----------------------------------------\n\nTITLE: Advanced Raw Schemaless Data Writing in TDengine JDBC\nDESCRIPTION: Abstract method for writing raw data with additional parameters for TTL and request ID tracking. Provides more control over data lifecycle and request monitoring.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nabstract int writeRaw(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType, Integer ttl, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data for UDF Testing\nDESCRIPTION: SQL statements to create a test database and table with sample data for testing UDFs. Creates a table with timestamp and integer columns and inserts test data records.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\ncreate database test;\ncreate table t(ts timestamp, v1 int, v2 int, v3 int);\ninsert into t values('2023-05-01 12:13:14', 1, 2, 3);\ninsert into t values('2023-05-03 08:09:10', 2, 3, 4);\ninsert into t values('2023-05-10 07:06:05', 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Configuration Variables in TDengine SQL\nDESCRIPTION: Shows the runtime values of configuration parameters for the current client. Results can be filtered with a LIKE pattern.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSHOW LOCAL VARIABLES [like pattern];\n```\n\n----------------------------------------\n\nTITLE: Establishing REST Connection to TDengine in Python\nDESCRIPTION: This code illustrates how to create a REST connection to TDengine database using Python. It includes connection setup and error handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/connect_rest_example.py:connect}}\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query in Java JDBC\nDESCRIPTION: Executes a SQL query and returns a ResultSet object. Throws SQLException for database access errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_33\n\nLANGUAGE: Java\nCODE:\n```\nResultSet executeQuery(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Summing Values with SUM() in TDengine SQL\nDESCRIPTION: Calculates the sum of values in a column. Returns DOUBLE, BIGINT, or DECIMAL type. Applicable to numeric columns in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_51\n\nLANGUAGE: sql\nCODE:\n```\nSUM(expr)\n```\n\n----------------------------------------\n\nTITLE: Rows Columns Method\nDESCRIPTION: Returns the column names of the result set. The function operates on a `Rows` struct and returns a slice of strings representing the column names.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_39\n\nLANGUAGE: go\nCODE:\n```\n\"func (rs *Rows) Columns() []string\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Connection String in C#\nDESCRIPTION: Example of creating a connection string for native TDengine connection with various configuration parameters including host, port, username, and database\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/40-csharp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"host=127.0.0.1;port=6030;username=root;password=taosdata;protocol=Native;db=test\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TaosConsumer Constructor\nDESCRIPTION: Constructor for creating a new TaosConsumer instance with configurable properties including connection type, server settings, and auto-commit options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_97\n\nLANGUAGE: Java\nCODE:\n```\nTaosConsumer(Properties properties) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Selecting Database in TDengine C Client\nDESCRIPTION: Set the current default database to the specified one.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nint taos_select_db(TAOS *taos, const char *db)\n```\n\n----------------------------------------\n\nTITLE: Configure JDBC URL and Kafka Cluster for Java Application\nDESCRIPTION: This snippet demonstrates how to configure the JDBC URL for TDengine and Kafka cluster address via environment variables, which are essential for the proper functioning of the Java application.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n1. The JDBC URL is configured via an environment variable, for example:  \n   ```shell\n   export TDENGINE_JDBC_URL=\"jdbc:TAOS-WS://localhost:6041?user=root&password=taosdata\"\n   ```  \n2. The Kafka cluster address is configured via an environment variable, for example:  \n   ```shell\n   export KAFKA_BOOTSTRAP_SERVERS=localhost:9092\n   ```  \n```\n```\n\n----------------------------------------\n\nTITLE: Getting Current Offsets in TDengine (TypeScript)\nDESCRIPTION: Retrieves the current offsets for a given set of partitions. Takes an array of TopicPartition objects and returns an updated array with the current offsets. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync positions(partitions:Array<TopicPartition>, reqId?:number):Promise<Array<TopicPartition>>\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Compression Ratio in TDengine\nDESCRIPTION: Shows the SQL command to view compression ratios based on tables in TDengine. This command displays compression statistics for specified tables, which can be super tables, regular tables, or subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE DISTRIBUTED table_name;\n```\n\n----------------------------------------\n\nTITLE: Automatically Balancing VNODE Distribution in TDengine SQL\nDESCRIPTION: Performs automatic load balancing of vnodes across all vgroups in the cluster. Ensures optimal distribution of data for better performance and resource utilization.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nBALANCE VGROUP\n```\n\n----------------------------------------\n\nTITLE: Setting a USmallint value in Param object\nDESCRIPTION: This function sets a USmallint value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the USmallint value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_53\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetUSmallint(offset int, value uint)\"\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark with Command Line Parameters\nDESCRIPTION: Example of running taosBenchmark with command line parameters to specify database, table count, record count, threads, and insert mode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntaosBenchmark -d db -t 100 -n 1000 -T 4 -I stmt -y\n```\n\n----------------------------------------\n\nTITLE: Restoring Data Nodes in TDengine\nDESCRIPTION: SQL commands for restoring different types of nodes (mnode, vnode, qnode) in case of data loss or damage on a data node in a TDengine cluster. This restoration relies on data replication from other healthy replicas and is only applicable if the cluster configuration supports it.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/04-maintenance.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nrestore dnode <dnode_id>; # Restore mnode, all vnodes, and qnode on dnode\nrestore mnode on dnode <dnode_id>; # Restore mnode on dnode\nrestore vnode on dnode <dnode_id>; # Restore all vnodes on dnode\nrestore qnode on dnode <dnode_id>; # Restore qnode on dnode\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Python\nDESCRIPTION: This snippet installs the required Python packages as specified in the 'requirements.txt' file using pip. It ensures that all necessary libraries are available for the TDengine demo application to function correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/python/taosdemo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"/usr/bin/python3 -m pip install -r requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Using SERVER_VERSION Function in SQL\nDESCRIPTION: Returns the server version information of the TDengine instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_78\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SERVER_VERSION();\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Grafana Plugin via Script\nDESCRIPTION: Bash script for automatically installing the TDengine Grafana plugin with configuration options for host, username, and password\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbash -c \"$(curl -fsSL \\\n  https://raw.githubusercontent.com/taosdata/grafanaplugin/master/install.sh)\" -- \\\n  -a http://localhost:6041 \\\n  -u root \\\n  -p taosdata\n```\n\n----------------------------------------\n\nTITLE: Displaying Supertable Creation Statement\nDESCRIPTION: SQL command to view the CREATE statement for an existing supertable, useful for database migration purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE STABLE stb_name;\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Record into TDengine with MyBatis\nDESCRIPTION: MyBatis XML mapper definition for inserting a single weather record into TDengine. Uses the current timestamp and maps temperature and humidity from a Weather object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/springbootdemo/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- weatherMapper.xml -->\n    <insert id=\"insert\" parameterType=\"Weather\" >\n        insert into test.weather (ts, temperature, humidity) values (now, #{temperature,jdbcType=INTEGER}, #{humidity,jdbcType=FLOAT})\n    </insert>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Topics in TDengine (TypeScript)\nDESCRIPTION: Unsubscribes from all currently subscribed topics. Takes an optional request ID for issue tracking. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync unsubscribe(reqId?:number): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding a Topic to a TMQ List in C\nDESCRIPTION: Function used to add a topic to a ws_tmq_list_t structure. It takes a pointer to a TMQ list and a topic name as parameters. Returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_list_append(ws_tmq_list_t *list, const char *topic)\n```\n\n----------------------------------------\n\nTITLE: Scalar UDF with Multiple Input Columns in Python\nDESCRIPTION: This Python code defines a scalar UDF that calculates the weighted sum of multiple input columns. The `process` function iterates through each row and column of the input `datablock`, handling null values by setting the total to `None` if any input value is null.  The function returns a list of calculated sums for each row.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef init():\n    pass\n\ndef destroy():\n    pass\n\ndef process(block):\n    rows, cols = block.shape()\n    result = []\n    for i in range(rows):\n        total = 0\n        for j in range(cols):\n            v = block.data(i, j)\n            if v is None:\n                total = None\n                break\n            total += (j + 1) * block.data(i, j)\n        result.append(total)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Adjusting VNODE Distribution in VGROUP in TDengine SQL\nDESCRIPTION: Manually adjusts the distribution of vnodes in a vgroup across specified dnodes. Limited to a maximum of 3 dnodes due to the maximum replica count limitation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nREDISTRIBUTE VGROUP vgroup_no DNODE dnode_id1 [DNODE dnode_id2] [DNODE dnode_id3]\n```\n\n----------------------------------------\n\nTITLE: Anomaly Detection using LOF in TDengine with SQL\nDESCRIPTION: This SQL snippet demonstrates how to use the LOF (Local Outlier Factor) algorithm for anomaly detection within a TDengine database. It selects the count of records from the `foo` table and applies the `ANOMALY_WINDOW` function with the `algo=lof` parameter to the `foo.i32` column to identify outliers based on local density.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/03-data-density.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n---\n--- Use LOF.\nSELECT count(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=lof\")\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in TDengine REST API\nDESCRIPTION: Example of an error response from TDengine's REST API, including an error code and description.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 9728,\n  \"desc\": \"syntax error near \\\"1\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine via Native Protocol\nDESCRIPTION: Code snippet showing how to create a database connection using the taosSql driver with the proper connection string format including host, port, username and password.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar taosUri = \"root:taosdata@tcp(localhost:6030)/\"\ntaos, err := sql.Open(\"taosSql\", taosUri)\n```\n\n----------------------------------------\n\nTITLE: Using SERVER_STATUS Function in SQL\nDESCRIPTION: Checks if all database nodes (dnodes) are online. Returns success if all nodes are available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_77\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SERVER_STATUS();\n```\n\n----------------------------------------\n\nTITLE: ResultSet Type Retrieval in TDengine JDBC\nDESCRIPTION: Method to get the ResultSet type configuration for this Statement. Determines the scrollability and sensitivity of ResultSet objects created by this Statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\nint getResultSetType() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Dropping Consumer Group in TDengine SQL\nDESCRIPTION: SQL syntax for deleting a consumer group from a topic, with optional FORCE parameter for groups with active consumers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP CONSUMER GROUP [IF EXISTS] [FORCE] cgroup_name ON topic_name;\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Unix Timestamp in UTC Timezone\nDESCRIPTION: Equivalent SQL query using a Unix timestamp in the UTC timezone. This demonstrates how the same timestamp string gets converted to a different Unix timestamp value in different timezones.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM table_name WHERE TS<1554984068000;\n```\n\n----------------------------------------\n\nTITLE: Session Window Query with Time Partitioning\nDESCRIPTION: Detailed SQL query example showing session window implementation with 10-minute intervals and partition by table name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, _wend, _wduration, count(*)\nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:10:00+08:00\" \nPARTITION BY tbname\nSESSION(ts, 10m)\nSLIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Enterprise TDengine Deployment Configuration\nDESCRIPTION: YAML configuration for deploying TDengine Enterprise Edition in Kubernetes. This example shows the basic configuration for the enterprise version of TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\n# This example is a simple deployment with one server replica.\nname: \"tdengine\"\n\nimage:\n  repository:\n  server: tdengine/tdengine-ee\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Commands Interface - C# ADO.NET\nDESCRIPTION: Core interface methods for executing SQL commands including ExecuteNonQuery, ExecuteScalar, ExecuteReader, and Dispose. These methods follow ADO.NET standards for database operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic int ExecuteNonQuery()\npublic object ExecuteScalar()\npublic DbDataReader ExecuteReader()\npublic void Dispose();\n```\n\n----------------------------------------\n\nTITLE: Executing Anomaly Detection in SQL\nDESCRIPTION: This SQL snippet demonstrates the invocation of anomaly detection algorithms. The \"algo\" key uses the defined \"name\" value to identify which algorithm to apply during query execution. It exemplifies how SQL integrates custom algorithms defined in Python for analytics processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/index.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*)\\nFROM foo ANOMALY_WINDOW(col_name, 'algo=name')\\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up TDengine Runtime Environment\nDESCRIPTION: Function to clean up the TDengine runtime environment before application exit.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_52\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_cleanup()\n```\n\n----------------------------------------\n\nTITLE: Using STATEDURATION Function in SQL\nDESCRIPTION: Returns the time duration of consecutive records meeting a specified condition. Resets to -1 when the condition is false.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_72\n\nLANGUAGE: sql\nCODE:\n```\nSTATEDURATION(expr, oper, val, unit)\n```\n\n----------------------------------------\n\nTITLE: C Schemaless WebSocket Implementation\nDESCRIPTION: C example showcasing the implementation of a WebSocket client for schemaless writing. This code includes the necessary includes and defines the `schemaless` method to demonstrate the usage of the WebSocket for data insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/sml_insert_demo.c:schemaless}}\n```\n\n----------------------------------------\n\nTITLE: Revoking Subscribe Permission on a Topic in SQL\nDESCRIPTION: This SQL snippet details the process of revoking a user's subscribe permission on a specific topic in TDengine. It ensures that the user cannot subscribe to messages published to the specified topic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nrevoke subscribe on topic_name from test\n```\n\n----------------------------------------\n\nTITLE: Creating a new Param object\nDESCRIPTION: This function creates a new parameter binding data structure (`Param`). It takes the number of parameters as input (`size`) and returns a pointer to the newly created `Param` object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_45\n\nLANGUAGE: go\nCODE:\n```\n\"func NewParam(size int) *Param\"\n```\n\n----------------------------------------\n\nTITLE: Altering Column Compression Settings in TDengine SQL\nDESCRIPTION: SQL syntax for modifying the compression method of an existing column in a table. This allows changing the encoding type, compression type, and compression level for a specific column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/32-compress.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [db_name.]tabName MODIFY COLUMN colName [ENCODE 'ecode_type'] [COMPRESS 'compress_type'] [LEVEL \"high\"]\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New TMQ Topic List in C\nDESCRIPTION: Function to create a new ws_tmq_list_t structure for storing subscribed topics. Returns a pointer to the newly created list structure on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nws_tmq_list_t *ws_tmq_list_new(void)\n```\n\n----------------------------------------\n\nTITLE: Using PI Function in SQL\nDESCRIPTION: The PI function returns the value of π (pi). It returns a DOUBLE value and can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nPI()\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions in Python\nDESCRIPTION: This snippet demonstrates how to handle exceptions that may arise during database operations using the TDengine Python connector. It uses a `try-except` block to catch potential errors and allows the application to manage them gracefully. The specific code included is in the file docs/examples/python/handle_exception.py.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/30-python.mdx#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n\"{{#include docs/examples/python/handle_exception.py}}\"\n\n```\n\n----------------------------------------\n\nTITLE: Using RAND Function in SQL\nDESCRIPTION: The RAND function returns a random floating-point value between 0 and 1. An optional seed value can be provided for reproducible results. It returns a DOUBLE value and can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_17\n\nLANGUAGE: SQL\nCODE:\n```\nRAND([seed])\n```\n\n----------------------------------------\n\nTITLE: Batch Execution in TDengine JDBC\nDESCRIPTION: Method to execute all SQL statements in the current batch. Returns an array of update counts for each SQL statement in the batch, indicating the number of rows affected by each statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nint[] executeBatch() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating a UDF Function in TDengine\nDESCRIPTION: SQL statement to register a Python UDF in TDengine. This defines the path to the Python script, specifies the output data type, and sets the implementation language.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\ncreate function myfun as '/root/udf/myfun.py' outputtype double language 'Python'\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregate Values with Tag Filter in TDengine\nDESCRIPTION: SQL query to calculate average, maximum, and minimum values from the 'meters' supertable where the 'groupId' tag is 10.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(current), MAX(voltage), MIN(phase) FROM test.meters WHERE groupId = 10;\n```\n\n----------------------------------------\n\nTITLE: Example of Simple 1-Node Deployment with Helm\nDESCRIPTION: This YAML snippet illustrates a simple configuration for deploying a single-node TDengine cluster using Helm. It defines the image repository and the server image to be used.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# This example is a simple deployment with one server replica.\nname: \"tdengine\"\n\nimage:\n  repository: # Leave a trailing slash for the repository, or \"\" for no repository\n  server: tdengine/tdengine:latest\n```\n\n----------------------------------------\n\nTITLE: Closing statement using Stmt2 object in af package (v3.6.0+)\nDESCRIPTION: This function closes the prepared SQL statement using the Stmt2 object, releasing associated resources. It returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt2) Close() error\"\n```\n\n----------------------------------------\n\nTITLE: Processing Historical Data in Streaming Computation in TDengine SQL\nDESCRIPTION: Examples of using fill_history option to process historical data in streaming computation, including processing data after a specific date or within a date range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\ncreate stream if not exists s1 fill_history 1 into st1  as select count(*) from t1 interval(10s)\n\ncreate stream if not exists s1 fill_history 1 into st1  as select count(*) from t1 where ts > '2020-01-30' interval(10s)\n\ncreate stream if not exists s1 fill_history 1 into st1  as select count(*) from t1 where ts > '2020-01-30' and ts < '2023-01-01' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database with S3 Storage\nDESCRIPTION: This snippet shows how to create a database in TDengine that uses S3 for storage. The 'duration' parameter specifies how long data is retained locally, and 's3_keeplocal' determines the duration data is kept locally before being moved to S3.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/12-multi.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"create database demo_db duration 1d s3_keeplocal 3d;\"\n```\n\n----------------------------------------\n\nTITLE: Enhanced SQL Functions in TDengine 3.0\nDESCRIPTION: Many SQL functions in TDengine 3.0 have been enhanced to work directly on supertables without requiring PARTITION BY. These include TWA, IRATE, LEASTSQUARES, ELAPSED, DIFF, DERIVATIVE, CSUM, MAVG, SAMPLE, STATECOUNT, and STATEDURATION.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/30-changes.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT TWA(column) FROM supertable;\nSELECT IRATE(column) FROM supertable;\nSELECT LEASTSQUARES(column) FROM supertable;\n```\n\n----------------------------------------\n\nTITLE: Executing a batch using Stmt object in af package\nDESCRIPTION: This function executes the batched SQL statements. It is called on a Stmt object and returns an error if the execution fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) Execute() error\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Row from Result Set in TDengine WebSocket (C)\nDESCRIPTION: Retrieves data from the result set row by row. Returns NULL on failure, in which case ws_errstr(NULL) can be called for detailed error information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nWS_ROW ws_fetch_row(WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Services on Linux\nDESCRIPTION: Command to start all TDengine services on Linux systems using the provided script.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo start-all.sh\n```\n\n----------------------------------------\n\nTITLE: Getting Assigned Partitions in TDengine (TypeScript)\nDESCRIPTION: Retrieves the currently assigned partitions for the consumer. Can optionally specify topics to retrieve partitions for. Returns an array of TopicPartition objects. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync assignment(topics?:string[]):Promise<Array<TopicPartition>>\n```\n\n----------------------------------------\n\nTITLE: Creating a User Example in TDengine SQL\nDESCRIPTION: Example of creating a user named 'test' with a password and system information access in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ntaos> create user test pass 'abc123!@#' sysinfo 1;\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine C# Connector Dependency in C# Project\nDESCRIPTION: This XML snippet demonstrates how to add a reference to the TDengine C# connector (`TDengine.Connector`) in a C# project file (`.csproj`). This enables C# applications to connect to TDengine databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n\"<Project Sdk=\\\"Microsoft.NET.Sdk\\\">\\n\\n  <PropertyGroup>\\n    <OutputType>Exe</OutputType>\\n    <TargetFramework>net6.0</TargetFramework>\\n    <ImplicitUsings>enable</ImplicitUsings>\\n    <Nullable>enable</Nullable>\\n    <StartupObject>TDengineExample.AsyncQueryExample</StartupObject>\\n  </PropertyGroup>\\n\\n  <ItemGroup>\\n    <PackageReference Include=\\\"TDengine.Connector\\\" Version=\\\"3.1.0\\\" />\\n  </ItemGroup>\\n\\n</Project>\"\n```\n\n----------------------------------------\n\nTITLE: SQL Query Execution Method in Rust\nDESCRIPTION: Method to execute an SQL query and return a ResultSet. Takes an SQL statement as input and returns a RawResult containing the query results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn query<T: AsRef<str>>(&self, sql: T) -> RawResult<Self::ResultSet>\n```\n\n----------------------------------------\n\nTITLE: Upgrading and Fault Recovery in TDengine Stream Computing\nDESCRIPTION: These snippets provide steps and SQL commands for handling incompatible stream computing tasks post-TDengine upgrade. Necessary steps include modification of configuration files, restarting TDengine and its services, and using `DROP STREAM` and `FLUSH DATABASE` commands to reset states. Proper execution requires access to TDengine configuration files and database directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\ndrop stream xxxx; ---- xxx refers to the stream name\nflush database stream_source_db; ---- The database where the supertable for stream computing data reading is located\nflush database stream_dest_db; ---- The database where the supertable for stream computing data writing is located\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream streams1 into test1.streamst as select  _wstart, count(a) c1  from test.st interval(1s); \ndrop stream streams1;\nflush database test;\nflush database test1;\n```\n\n----------------------------------------\n\nTITLE: Getting Current User in TDengine\nDESCRIPTION: SQL command to retrieve current user information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CURRENT_USER();\n```\n\n----------------------------------------\n\nTITLE: Inserting and Querying Data with UNIX Timestamps in TDengine SQL\nDESCRIPTION: This snippet demonstrates how to use UNIX timestamps to avoid DST-related time zone issues in TDengine. It shows inserting two rows with millisecond timestamps and then querying them within a specific timestamp range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ntaos> insert into t1 values(1711846799000, 1)(1711846800000, 2);\nInsert OK, 2 row(s) affected (0.001434s)\n\ntaos> select * from t1 where ts between 1711846799000 and 1711846800000;\n       ts       |     v1      |\n===============================\n 1711846799000 |           1 |\n 1711846800000 |           2 |\nQuery OK, 2 row(s) in set (0.003503s)\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Offset in Java\nDESCRIPTION: This Java snippet demonstrates how to seek to a specific offset in a TMQ consumer. It polls for data, retrieves partition assignments, and resets offsets to the beginning.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n\t\twhile (true) {\n\t\t\tConsumerRecords<String, ResultBean> records = consumer.poll(Duration.ofSeconds(1));\n\t\t\tif (!records.isEmpty()) {\n\t\t\t\tConsumerRecord<String, ResultBean> record = records.iterator().next();\n\t\t\t\tResultBean value = record.value();\n\t\t\t\tlog.info(\"first topic:{},partition:{},offset:{},value: {}\", record.topic(), record.partition(), record.offset(), value);\n\t\t\t\tSet<TopicPartition> assignment = consumer.assignment();\n\t\t\t\tconsumer.seekToBeginning(assignment);\n\t\t\t\tlog.info(\"seek to beginning success\");\n\t\t\t\tConsumerRecords<String, ResultBean> records2 = consumer.poll(Duration.ofSeconds(1));\n\t\t\t\tif (!records2.isEmpty()) {\n\t\t\t\t\tConsumerRecord<String, ResultBean> record2 = records2.iterator().next();\n\t\t\t\t\tResultBean value2 = record2.value();\n\t\t\t\t\tlog.info(\"second topic:{},partition:{},offset:{},value: {}\", record2.topic(), record2.partition(), record2.offset(), value2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Viewing Consumers in TDengine SQL\nDESCRIPTION: SQL command to display information about all consumers in the current database, including status and creation time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW CONSUMERS;\n```\n\n----------------------------------------\n\nTITLE: Message Subscription Authorization SQL in TDengine\nDESCRIPTION: SQL syntax for managing topic subscription permissions, allowing grant and revoke operations for topic access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/26-grant.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SUBSCRIBE ON topic_name TO user_name\n\nREVOKE SUBSCRIBE ON topic_name FROM user_name\n```\n\n----------------------------------------\n\nTITLE: Altering Regular Tables in TDengine\nDESCRIPTION: SQL syntax for modifying regular tables including adding/dropping columns, modifying column definitions, and changing table properties.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [db_name.]tb_name alter_table_clause\n\nalter_table_clause: {\n    alter_table_options\n  | ADD COLUMN col_name column_type\n  | DROP COLUMN col_name\n  | MODIFY COLUMN col_name column_type\n  | RENAME COLUMN old_col_name new_col_name\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the taos module in Python\nDESCRIPTION: This Python code snippet demonstrates how to import the `taos` module. Successful import verifies the correct installation of the TDengine client driver and Python connector for native connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"import taos\"\n```\n\n----------------------------------------\n\nTITLE: Defining TmqMessage Class Structure in C#\nDESCRIPTION: This snippet defines the TmqMessage class which represents a consumed message from TDengine TMQ. It contains the table name and the deserialized message value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/40-csharp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TmqMessage<TValue>\n{\n    public string TableName { get; set; }\n    public TValue Value { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dimension Data from TDengine - SQL\nDESCRIPTION: This SQL query retrieves distinct tag data of all smart meters under the supertable, essential for importing dimension data into Power BI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n\"select distinct tbname device, groupId, location from test.meters\"\n```\n\n----------------------------------------\n\nTITLE: Basic Session Window Query\nDESCRIPTION: Simple SQL query showing the basic syntax for session window usage with a tolerance value parameter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), FIRST(ts) FROM temp_tb_1 SESSION(ts, tol_val);\n```\n\n----------------------------------------\n\nTITLE: Polling for Data in TMQ in C\nDESCRIPTION: Function for polling to consume data from a TMQ consumer. Takes a TMQ consumer object and a timeout value in milliseconds. Returns a pointer to a WS_RES structure containing the received message or NULL if no data is available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nWS_RES *ws_tmq_consumer_poll(ws_tmq_t *tmq, int64_t timeout)\n```\n\n----------------------------------------\n\nTITLE: Example: Creating L2 Norm Aggregate UDF\nDESCRIPTION: Example of creating an aggregate UDF for L2 norm calculation with specified buffer size.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE AGGREGATE FUNCTION l2norm AS \"/home/taos/udf_example/libl2norm.so\" OUTPUTTYPE DOUBLE bufsize 8;\n```\n\n----------------------------------------\n\nTITLE: Querying Current Database in TDengine SQL\nDESCRIPTION: SQL command to retrieve the current database using database() function. Returns NULL if no default database was specified at login.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DATABASE();\n```\n\n----------------------------------------\n\nTITLE: JSON response format for data query\nDESCRIPTION: This JSON snippet shows the response format for a data query to a TDengine database. The JSON includes the return code, column metadata, data array, and number of rows. The `code` field indicates the success or failure of the query (0 means success), `column_meta` describes the column names and data types, `data` contains the actual query results, and `rows` specifies the number of rows in the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/60-rest-api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"ts\",\n            \"TIMESTAMP\",\n            8\n        ],\n        [\n            \"current\",\n            \"FLOAT\",\n            4\n        ],\n        [\n            \"voltage\",\n            \"INT\",\n            4\n        ],\n        [\n            \"phase\",\n            \"FLOAT\",\n            4\n        ]\n    ],\n    \"data\": [\n        [\n            \"2022-07-30T06:44:40.32Z\",\n            10.3,\n            219,\n            0.31\n        ],\n        [\n            \"2022-07-30T06:44:41.32Z\",\n            12.6,\n            218,\n            0.33\n        ]\n    ],\n    \"rows\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Prepared Statement\nDESCRIPTION: Releases all resources associated with the prepared statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint32_t ws_stmt_close(WS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Querying View Information from System Table in TDengine SQL\nDESCRIPTION: SQL query to retrieve information about all views from the system table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... FROM information_schema.ins_views;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a generic Java Object from a database result set. Returns null if the value is NULL and throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_50\n\nLANGUAGE: Java\nCODE:\n```\nObject getObject(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: WebSocket JDBC Connection URL\nDESCRIPTION: Example URL format for establishing a WebSocket JDBC connection to TDengine. Uses port 6041 and requires WebSocket driver class specification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:TAOS-WS://[host_name]:6041/[database_name]?user=[user]&password=[password]\n```\n\n----------------------------------------\n\nTITLE: Executing a UDF in a TDengine SQL Query\nDESCRIPTION: This SQL statement attempts to execute the UDF `myfun` with the column `v1` as input from table `t`. It selects the result of the UDF for each row in the table. This shows how a UDF is invoked within a normal SQL query.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect myfun(v1) from t;\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using Native Connection in Python\nDESCRIPTION: This Python snippet demonstrates how to create a database and table in TDengine using the native Python connector. It uses the native TDengine client library to connect and execute SQL commands for database and table creation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"Native Connection\"\n{{#include docs/examples/python/create_db_native.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: TDengine taosKeeper Configuration\nDESCRIPTION: This code snippet shows the configuration parameters found within the `/etc/taos/taoskeeper.toml` file for the `taosKeeper` component in TDengine.  It highlights the storage of credentials in plaintext, emphasizing the need to limit the file's visibility to enhance security.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n\"[tdengine]\\nhost = \\\"localhost\\\"\\nport = 6041\\nusername = \\\"root\\\"\\npassword = \\\"taosdata\\\"\\nusessl = false\"\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using REST API in Python\nDESCRIPTION: This Python snippet demonstrates creating a database and table in TDengine using the REST API. It constructs HTTP requests to send SQL commands for database and table creation to the TDengine server via the REST endpoint.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"Rest Connection\"\n{{#include docs/examples/python/create_db_rest.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Executing a Query with VARBINARY and GEOMETRY Types in TDengine\nDESCRIPTION: cURL command to execute a query on a table with VARBINARY and GEOMETRY columns in TDengine's REST API.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location 'http://<fqdn>:<port>/rest/sql' \\\n--header 'Content-Type: text/plain' \\\n--header 'Authorization: Basic cm9vdDp0YW9zZGF0YQ==' \\\n--data 'select * from demo.t'\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine Rust Connector Dependency in Cargo.toml\nDESCRIPTION: This `Cargo.toml` snippet demonstrates how to add the TDengine Rust connector (`taos`) dependency to a Rust project's manifest file. This allows Rust applications to interact with TDengine databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n\"[dependencies]\\ntaos = { version = \\\"*\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Grubbs Anomaly Detection in SQL\nDESCRIPTION: Tests maximum and minimum values to determine if they deviate significantly from the mean, requiring data to follow an approximately normal distribution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=grubbs\")\n```\n\n----------------------------------------\n\nTITLE: Initialization and Destruction Interface Definition in C\nDESCRIPTION: These are common interfaces used by both scalar and aggregate functions within TDengine UDFs. The `udf_init` function performs initialization tasks, while the `udf_destroy` function handles cleanup. These functions are optional and only needed if specific initialization or cleanup processes are required.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint32_t udf_init()\nint32_t udf_destroy()\n```\n\n----------------------------------------\n\nTITLE: Granting Database and Table Permissions\nDESCRIPTION: SQL commands to grant read and write permissions for databases, tables, and specific table subtypes\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ngrant privileges on resources [with tag_filter] to user_name\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant read on power to test\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on power.meters to test\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on power.meters with groupId=1 to test\n```\n\n----------------------------------------\n\nTITLE: Setting an Int value in Param object\nDESCRIPTION: This function sets an Int value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Int value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_50\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetInt(offset int, value int)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Subscriptions in TDengine SQL\nDESCRIPTION: Shows all subscription relationships in the current system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SUBSCRIPTIONS;\n```\n\n----------------------------------------\n\nTITLE: Rows ColumnTypeLength Method\nDESCRIPTION: Returns the length of a specific column in the result set. The function takes a column index `i` as input and returns the length as an int64 and a boolean indicating whether a length is present.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_41\n\nLANGUAGE: go\nCODE:\n```\n\"func (rs *Rows) ColumnTypeLength(i int) (length int64, ok bool)\"\n```\n\n----------------------------------------\n\nTITLE: Using EXP Function in SQL\nDESCRIPTION: The EXP function returns e raised to the power of the specified value. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nEXP(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Parameters in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration for setting up subscription parameters in taosBenchmark. Includes options for consumer count, creation mode, group mode, polling delay, and topic list.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tmq_info\": {\n    \"concurrent\": 1,\n    \"create_mode\": \"sequential\",\n    \"group_mode\": \"share\",\n    \"poll_delay\": -1,\n    \"enable.manual.commit\": false,\n    \"rows_file\": \"result\",\n    \"expect_rows\": 1000,\n    \"topic_list\": [\n      {\n        \"name\": \"topic1\",\n        \"sql\": \"select * from test.meters;\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Native Consumer in Go\nDESCRIPTION: The Go snippet presents the setup for a native consumer, detailing the requirements for successful connection and subscription as detailed in the Go example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/tmq/native/main.go:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: TDengine Query Result Interface\nDESCRIPTION: Interface definition for TDengine query result structure including affected rows and timing information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTaosResult {\n    affectRows: number,   // Number of rows affected\n    timing: number,       // Execution duration\n    totalTime: number,    // Total response time\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Cardinality with HYPERLOGLOG() in TDengine SQL\nDESCRIPTION: Estimates the cardinality of a column using the HyperLogLog algorithm. Useful for large datasets to reduce memory usage. Returns an INTEGER estimate with a standard error of 0.81%.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\nHYPERLOGLOG(expr)\n```\n\n----------------------------------------\n\nTITLE: Inserting and Querying Timestamps Using RFC3339 Format in TDengine\nDESCRIPTION: Examples of SQL queries demonstrating how to insert and query timestamp data using the RFC3339 format in TDengine. The format includes timezone information with 'Z' indicating UTC time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t1 values('2024-10-27T01:59:59.000Z', 0);\nselect * from t1 where ts >= '2024-10-27T01:59:59.000Z';\n```\n\n----------------------------------------\n\nTITLE: Compilation command for UDF in C\nDESCRIPTION: This is the compilation command for creating a dynamic link library from C source code, intended for use as a UDF within TDengine.  The command uses `gcc` to compile `bit_and.c` into `libbitand.so`, setting appropriate flags for shared library creation and debugging. It's recommended to use GCC version 7.5 or above.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngcc -g -O0 -fPIC -shared bit_and.c -o libbitand.so\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Offset in Go\nDESCRIPTION: This Go snippet demonstrates how to seek to a specific offset in a TMQ consumer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\n\tassignments, err := consumer.Assignments()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, assignment := range assignments {\n\t\terr = consumer.Seek(assignment, 0)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Example Telegraf HTTP Output Configuration for TDengine\nDESCRIPTION: Complete example of Telegraf outputs.http configuration with actual values for connecting to a local TDengine instance. Shows specific timeout settings, authentication details, and data format specification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_telegraf.mdx#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.http]]\n  url = \"http://127.0.0.1:6041/influxdb/v1/write?db=telegraf\"\n  method = \"POST\"\n  timeout = \"5s\"\n  username = \"root\"\n  password = \"taosdata\"\n  data_format = \"influx\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Keys in TDengine via Shell\nDESCRIPTION: This shell command configures encryption keys for each TDengine node offline. It requires the TDengine service to be stopped first and is used when creating or updating key configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntaosd -y {encryptKey}\n```\n\n----------------------------------------\n\nTITLE: CASE Expression Example with Voltage Calculation\nDESCRIPTION: Example showing how to use CASE expression for conditional voltage averaging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(CASE WHEN voltage < 200 or voltage > 250 THEN 220 ELSE voltage END) FROM meters;\n```\n\n----------------------------------------\n\nTITLE: Displaying Topic Information in TDengine SQL\nDESCRIPTION: Shows information about all topics in the current database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TOPICS;\n```\n\n----------------------------------------\n\nTITLE: Specifying Subscription Offset - WebSocket Python Implementation\nDESCRIPTION: Python implementation for managing subscription offset using WebSocket connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/tmq_websocket_example.py:assignment}}\n```\n\n----------------------------------------\n\nTITLE: JSON Parser Configuration\nDESCRIPTION: This JSON configuration file defines the parsing rules and model for importing CSV data into TDengine using taosX. It specifies the data types for each column in the CSV file, the supertable to use, the tags to apply, and the columns to insert.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\"parse\": {\n    \"ts\": { \"as\": \"TIMESTAMP(ms)\" },\n    \"current\": { \"as\": \"FLOAT\" },\n    \"voltage\": { \"as\": \"INT\" },\n    \"phase\": { \"as\": \"FLOAT\" },\n    \"groupid\": { \"as\": \"INT\" },\n    \"location\": { \"as\": \"VARCHAR(24)\" }\n  },\n  \"model\": {\n    \"name\": \"${tbname}\",\n    \"using\": \"meters\",\n    \"tags\": [\"groupid\", \"location\"],\n    \"columns\": [\"ts\", \"current\", \"voltage\", \"phase\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forecasting with Time-MoE in SQL\nDESCRIPTION: This SQL statement forecasts 10 rows of data using the Time-MoE model. It calls the FORECAST function with the 'algo=timemoe-fc,rows=10' parameter string to specify the Time-MoE model and the number of rows to forecast. The input data is assumed to be of type i32 and originates from the 'foo' table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/04-tsfm.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _frowts, FORECAST(i32, \"algo=timemoe-fc,rows=10\") from foo\n```\n\n----------------------------------------\n\nTITLE: Modifying Database Parameters in TDengine\nDESCRIPTION: SQL syntax for altering database configuration parameters such as cache model, cache size, buffer size, pages, replication, and WAL settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE db_name [alter_database_options]\n\nalter_database_options:\n    alter_database_option ...\n\nalter_database_option: {\n    CACHEMODEL {'none' | 'last_row' | 'last_value' | 'both'}\n  | CACHESIZE value\n  | BUFFER value\n  | PAGES value\n  | REPLICA value\n  | STT_TRIGGER value\n  | WAL_LEVEL value\n  | WAL_FSYNC_PERIOD value\n  | KEEP value\n  | WAL_RETENTION_PERIOD value\n  | WAL_RETENTION_SIZE value\n  | MINROWS value\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Vgroup Status for Dual Replicas\nDESCRIPTION: SQL commands to check the status of each vgroup in a dual-replica setup in TDengine. Details include synchronization status and designated leader information for ensuring high availability. These commands are crucial for monitoring the health and replication status of vgroups.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/04-maintenance.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nshow arbgroups;\n\nselect * from information_schema.ins_arbgroups;\n            db_name             |  vgroup_id  | v1_dnode | v2_dnode | is_sync | assigned_dnode |         assigned_token         |\n=================================================================================================================================\n db                             |           2 |        2 |        3 |       0 | NULL           | NULL                           |\n db                             |           3 |        1 |        2 |       0 |              1 | d1#g3#1714119404630#663        |\n db                             |           4 |        1 |        3 |       1 | NULL           | NULL                           |\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Stmt Structure for Parameter Binding in Rust\nDESCRIPTION: Methods for initializing and using the Stmt structure for parameter binding in TDengine Rust connector. These methods allow for preparing SQL statements, binding parameters, setting table names and tags, and executing statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nfn init(taos: &Q) -> RawResult<Self>\n\nfn init_with_req_id(taos: &Q, req_id: u64) -> RawResult<Self>\n\nfn prepare<S: AsRef<str>>(&mut self, sql: S) -> RawResult<&mut Self>\n\nfn set_tbname<S: AsRef<str>>(&mut self, name: S) -> RawResult<&mut Self>\n\nfn set_tags(&mut self, tags: &[Value]) -> RawResult<&mut Self>\n\nfn set_tbname_tags<S: AsRef<str>>(&mut self, name: S, tags: &[Value]) -> RawResult<&mut Self>\n\nfn bind(&mut self, params: &[ColumnView]) -> RawResult<&mut Self>\n\nfn add_batch(&mut self) -> RawResult<&mut Self>\n\nfn execute(&mut self) -> RawResult<usize>\n\nfn affected_rows(&self) -> usize\n```\n\n----------------------------------------\n\nTITLE: Function-based Column Configuration\nDESCRIPTION: Example of configuring a column with a mathematical function. Shows sine wave generation with random fluctuation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"fun\": \"10*sin(x)+100*random(5)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Statement with ResultSet Options and Holdability in Java\nDESCRIPTION: Creates a `Statement` object, specifying the `ResultSet` type, concurrency mode, and holdability. It throws `SQLException` if the operation fails. These parameters provide fine-grained control over how results are processed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n\"`Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Showing Available UDFs in TDengine\nDESCRIPTION: SQL command to display all user-defined functions in the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW FUNCTIONS;\n```\n\n----------------------------------------\n\nTITLE: Create Mnode in TDengine CLI\nDESCRIPTION: This snippet shows how to create a new mnode (management node) on an existing dnode within a TDengine cluster using the TDengine CLI. The create mnode on dnode <dnodeId> command is used, where <dnodeId> represents the ID of the dnode.  The show mnodes command can be used to verify that the new mnode has joined the cluster successfully.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"create mnode on dnode <dnodeId>\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n\"show mnodes\"\n```\n\n----------------------------------------\n\nTITLE: Establishing Native Connection to TDengine in C#\nDESCRIPTION: This code demonstrates how to create a native connection to TDengine database using C#. It includes connection setup and exception handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/connect/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: Fetching Extended Field Metadata in TDengine Query Result in C\nDESCRIPTION: Get extended metadata including precision and scale for each column in the query result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nTAOS_FIELD_E *taos_fetch_fields_e(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Table in SQL for Data Comparison\nDESCRIPTION: This SQL snippet creates a virtual table named 'current_v' to align and compare current measurements from four devices (d1001, d1002, d1003, d1004) based on their timestamps. The table integrates current data points from each device's respective tables. Dependencies include the existence of source tables current_d1001, current_d1002, current_d1003, and current_d1004 in the database. Each column represents the current measurement from a specific device at a given timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE VTABLE current_v (\n    ts TIMESTAMP,\n    d1001_current FLOAT FROM current_d1001.current,\n    d1002_current FLOAT FROM current_d1002.current, \n    d1003_current FLOAT FROM current_d1003.current,\n    d1004_current FLOAT FROM current_d1004.current\n);\n```\n\n----------------------------------------\n\nTITLE: Using SIN Function in SQL\nDESCRIPTION: The SIN function returns the sine of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nSIN(expr)\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregated Measure Data with Time Window\nDESCRIPTION: This SQL query calculates hourly averages for current, voltage, and phase for each smart meter using partitioning and interval functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect tbname, _wstart ws, avg(current), avg(voltage), avg(phase) from test.meters PARTITION by tbname interval(1h)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Topics in TMQ in C\nDESCRIPTION: Function to unsubscribe from the list of topics. Must be used in conjunction with ws_tmq_subscribe. Takes a TMQ consumer object and returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_unsubscribe(ws_tmq_t *tmq)\n```\n\n----------------------------------------\n\nTITLE: TSMA Query Examples in SQL\nDESCRIPTION: Examples demonstrating various TSMA query scenarios including creation, valid uses, and scenarios where TSMA cannot be used. Shows interactions with different time intervals and function combinations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/28-tsma.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT agg_func_list [, pseudo_col_list] FROM stable WHERE exprs [GROUP/PARTITION BY [tbname] [, tag_list]] [HAVING ...] [INTERVAL(time_duration, offset) SLIDING(duration)]...;\n\n-- Creation\nCREATE TSMA tsma1 ON stable FUNCTION(COUNT(ts), SUM(c1), SUM(c3), MIN(c1), MIN(c3), AVG(c1)) INTERVAL(1m);\n-- Query\nSELECT COUNT(*), SUM(c1) + SUM(c3) FROM stable; ---- use tsma1\nSELECT COUNT(*), AVG(c1) FROM stable GROUP/PARTITION BY tbname, tag1, tag2;  --- use tsma1\nSELECT COUNT(*), MIN(c1) FROM stable INTERVAL(1h);  ---use tsma1\nSELECT COUNT(*), MIN(c1), SPREAD(c1) FROM stable INTERVAL(1h); ----- can't use, spread func not defined, although SPREAD can be calculated by MIN and MAX which are defined.\nSELECT COUNT(*), MIN(c1) FROM stable INTERVAL(30s); ----- can't use tsma1, time_duration not fit. Normally, query_time_duration should be multiple of create_duration.\nSELECT COUNT(*), MIN(c1) FROM stable where c2 > 0; ---- can't use tsma1, can't do c2 filtering\nSELECT COUNT(*) FROM stable GROUP BY c2; ---- can't use any tsma\nSELECT MIN(c3), MIN(c2) FROM stable INTERVAL(1m); ---- can't use tsma1, c2 is not defined in tsma1.\n\n-- Another tsma2 created with INTERVAL(1h) based on tsma1\nCREATE RECURSIVE TSMA tsma2 on tsma1 INTERVAL(1h);\nSELECT COUNT(*), SUM(c1) FROM stable; ---- use tsma2\nSELECT COUNT(*), AVG(c1) FROM stable GROUP/PARTITION BY tbname, tag1, tag2;  --- use tsma2\nSELECT COUNT(*), MIN(c1) FROM stable INTERVAL(2h);  ---use tsma2\nSELECT COUNT(*), MIN(c1) FROM stable WHERE ts < '2023-01-01 10:10:10' INTERVAL(30m); --use tsma1\nSELECT COUNT(*), MIN(c1) + MIN(c3) FROM stable INTERVAL(30m);  ---use tsma1\nSELECT COUNT(*), MIN(c1) FROM stable INTERVAL(1h) SLIDING(30m);  ---use tsma1\nSELECT COUNT(*), MIN(c1), SPREAD(c1) FROM stable INTERVAL(1h); ----- can't use tsma1 or tsma2, spread func not defined\nSELECT COUNT(*), MIN(c1) FROM stable INTERVAL(30s); ----- can't use tsma1 or tsma2, time_duration not fit. Normally, query_time_duration should be multiple of create_duration.\nSELECT COUNT(*), MIN(c1) FROM stable where c2 > 0; ---- can't use tsma1 or tsam2, can't do c2 filtering\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access TDengine Cluster\nDESCRIPTION: This snippet demonstrates using kubectl to port forward the TDengine service, allowing local access to the TDengine cluster running in Kubernetes. The command forwards port 6041.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward -n tdengine-test tdengine-0 6041:6041 &\n```\n\n----------------------------------------\n\nTITLE: Deleting a Tag from a Supertable\nDESCRIPTION: SQL command to remove a tag from a supertable and all its subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name DROP tag tag_name;\n```\n\n----------------------------------------\n\nTITLE: Adding SQL to Batch in Java JDBC\nDESCRIPTION: Adds a SQL statement to the current Statement object's batch. Throws SQLException if addition fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_38\n\nLANGUAGE: Java\nCODE:\n```\nvoid addBatch(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Update Count Retrieval in TDengine JDBC\nDESCRIPTION: Method to get the number of rows affected by the execution of an update statement. Returns -1 if the result is a ResultSet or if there are no results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\nint getUpdateCount() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Importing TDengine REST Connection Driver in Go\nDESCRIPTION: Code example showing how to import the taosRestful driver to use REST connections with TDengine instead of native connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"database/sql\"\n    _ \"github.com/taosdata/driver-go/v3/taosRestful\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sink Connector Configuration File\nDESCRIPTION: This script creates a directory and a JSON file (`sink-demo.json`) to store the configuration for the TDengine Sink Connector. This file defines how Kafka Connect will write data from a Kafka topic to a TDengine database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/test\ncd ~/test\nvi sink-demo.json\n```\n\n----------------------------------------\n\nTITLE: Count Window Query Example in TDengine SQL\nDESCRIPTION: Example of a count window query that groups data into windows of 1000 rows each.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, _wend, count(*)\nfrom meters\nwhere ts >= \"2022-01-01T00:00:00+08:00\" and ts < \"2022-01-01T00:30:00+08:00\"\ncount_window(1000);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in Rust\nDESCRIPTION: This Rust example demonstrates parameter binding using WebSocket connections to facilitate data operations in TDengine, focusing on efficiency and performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/stmt.rs}}\n```\n\n----------------------------------------\n\nTITLE: Get Column Class Name using ResultSetMetaData in Java\nDESCRIPTION: This method gets the Java class name of a specified column. The column number starts from 1. The return value is the Java class name corresponding to the column value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_76\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `String getColumnClassName(int column) throws SQLException`\n  - **Interface Description**: Gets the Java class name of a specified column.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The Java class name corresponding to the column value.\n```\n\n----------------------------------------\n\nTITLE: Starting the TDengine CLI\nDESCRIPTION: Command to start the TDengine command-line interface for executing SQL queries against the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntaos\n```\n\n----------------------------------------\n\nTITLE: Getting JDBC Driver Minor Version\nDESCRIPTION: Method to retrieve the minor version number of the TDengine JDBC driver.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nint getMinorVersion()\n```\n\n----------------------------------------\n\nTITLE: Configuring Supertable Parameters in JSON for TDengine taosBenchmark\nDESCRIPTION: This JSON structure defines the configuration options for supertables in TDengine's taosBenchmark tool. It includes settings for table creation, data insertion methods, and CSV file generation parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"super_tables\": {\n    \"name\": \"supertable_name\",\n    \"child_table_exists\": \"no\",\n    \"childtable_count\": 10,\n    \"childtable_prefix\": \"child_\",\n    \"escape_character\": \"no\",\n    \"auto_create_table\": \"yes\",\n    \"batch_create_tbl_num\": 10,\n    \"data_source\": \"rand\",\n    \"insert_mode\": \"taosc\",\n    \"non_stop_mode\": \"no\",\n    \"line_protocol\": \"line\",\n    \"tcp_transfer\": \"http\",\n    \"insert_rows\": 0,\n    \"childtable_offset\": 0,\n    \"childtable_limit\": 0,\n    \"interlace_rows\": 0,\n    \"insert_interval\": 0,\n    \"partial_col_num\": 0,\n    \"disorder_ratio\": 0,\n    \"disorder_range\": 0,\n    \"timestamp_step\": 1,\n    \"start_timestamp\": \"now\",\n    \"sample_format\": \"csv\",\n    \"sample_file\": \"path/to/sample.csv\",\n    \"use_sample_ts\": \"no\",\n    \"tags_file\": \"path/to/tags.csv\",\n    \"primary_key\": 0,\n    \"repeat_ts_min\": 1,\n    \"repeat_ts_max\": 1,\n    \"sqls\": [\"SQL1\", \"SQL2\"],\n    \"csv_file_prefix\": \"data\",\n    \"csv_ts_format\": \"%Y%m%d\",\n    \"csv_ts_interval\": \"1d\",\n    \"csv_output_header\": \"yes\",\n    \"csv_tbname_alias\": \"device_id\",\n    \"csv_compress_level\": \"none\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Users in TDengine\nDESCRIPTION: SQL command to remove a user from the system\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ndrop user user_name\n```\n\n----------------------------------------\n\nTITLE: Establishing Native JNI Connection to TDengine\nDESCRIPTION: Demonstrates how to create a native connection to TDengine using JNI (Java Native Interface). Native connections provide optimal performance but require TDengine client libraries to be installed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_java.mdx#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/JNIConnectExample.java}}\n```\n\n----------------------------------------\n\nTITLE: Unsupported JSON Subquery Operations\nDESCRIPTION: Examples of unsupported JSON operations in subqueries, demonstrating limitations of JSON parsing in nested queries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/17-json.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect jtag->'key' from (select jtag from stable)\n\nselect jtag->'key' from (select jtag from stable) where jtag->'key'>0\n```\n\n----------------------------------------\n\nTITLE: Setting a Float value in Param object\nDESCRIPTION: This function sets a Float value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Float value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_56\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetFloat(offset int, value float32)\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Anode in SQL\nDESCRIPTION: This snippet contains SQL commands for creating, showing, and dropping Anode instances in TDengine. It provides the necessary syntax for managing Anode instances directly through the TDengine command-line interface, which connects to the running TDengine instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/03-management.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ANODE {node_url}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ANODES;\ntaos> show anodes;\n   id      |              url               |    status    |       create_time       |       update_time       |\n==================================================================================================================\n         1 | 192.168.0.1:6090               | ready        | 2024-11-28 18:44:27.089 | 2024-11-28 18:44:27.089 |\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ANODES FULL;\ntaos> show anodes full;                                                       \n   id      |            type            |              algo              | \n============================================================================ \n         1 | anomaly-detection          | grubbs                         | \n         1 | anomaly-detection          | lof                            | \n         1 | anomaly-detection          | shesd                          | \n         1 | anomaly-detection          | ksigma                         | \n         1 | anomaly-detection          | iqr                            | \n         1 | anomaly-detection          | sample_ad_model                | \n         1 | forecast                   | arima                          | \n         1 | forecast                   | holtwinters                    | \n         1 | forecast                   | tdtsfm_1                       | \n         1 | forecast                   | timemoe-fc                     | \nQuery OK, 10 row(s) in set (0.028750s)\n```\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE ANODE {anode_id}\nUPDATE ALL ANODES\n```\n\nLANGUAGE: sql\nCODE:\n```\nDROP ANODE {anode_id}\n```\n\n----------------------------------------\n\nTITLE: Check Column Nullability using ResultSetMetaData in Java\nDESCRIPTION: This method checks if a specified column can contain null values. The column number starts from 1. It returns the nullability status as ResultSetMetaData.columnNoNulls, ResultSetMetaData.columnNullable, or ResultSetMetaData.columnNullableUnknown.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_64\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `int isNullable(int column) throws SQLException`\n  - **Interface Description**: Determines whether the value of a specified column can be null.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The nullability status of the column, returning `ResultSetMetaData.columnNoNulls`, `ResultSetMetaData.columnNullable`, or `ResultSetMetaData.columnNullableUnknown`.\n```\n\n----------------------------------------\n\nTITLE: Fetching Prometheus Metrics from TDengine\nDESCRIPTION: Shows how to retrieve Prometheus-formatted metrics from the taoskeeper /metrics endpoint\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://127.0.0.1:6043/metrics\n```\n\n----------------------------------------\n\nTITLE: Exporting Query Results to File in TDengine\nDESCRIPTION: SQL example showing how to export query results to a CSV file using the >> operator.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect * from d0 >> '/root/d0.csv';\n```\n\n----------------------------------------\n\nTITLE: Example of Data Line in Schemaless Protocol\nDESCRIPTION: An example demonstrating the usage of the schemaless writing protocol to write data into TDengine. It shows how to format various fields including NCHAR, BOOL, and BIGINT types, along with the correct timestamp representation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/04-schemaless.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"st,t1=3,t2=4,t3=t3 c1=3i64,c3=\\\"passit\\\",c2=false,c4=4f64 1626006833639000000\" \n}\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Using Debian Package on Linux\nDESCRIPTION: Command to install TDengine using a .deb package on Linux systems. Replace <version> with the actual version number of the downloaded package.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg -i TDengine-server-<version>-Linux-x64.deb\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Basic Table in TDengine\nDESCRIPTION: SQL syntax for creating a virtual basic table with timestamp and column definitions. Supports cross-database column sources using FROM clause.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VTABLE [IF NOT EXISTS] [db_name].vtb_name \n    ts_col_name timestamp, \n    (create_definition[ ,create_definition] ...) \n     \n  create_definition:\n    vtb_col_name column_definition\n    \n  column_definition:\n    type_name [FROM [db_name.]table_name.col_name]\n```\n\n----------------------------------------\n\nTITLE: Configuring taosExplorer with TOML\nDESCRIPTION: This TOML configuration file sets parameters for the taosExplorer service, including port, address, log level, cluster endpoints, and SSL settings. It defines how taosExplorer connects to the TDengine cluster and configures logging behavior.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/07-explorer.md#2025-04-16_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n\n# This is an automatically generated configuration file for Explorer in [TOML](https://toml.io/) format.\n#\n# Here is a full list of available options.\n\n# Explorer server port to listen on.\n# Default is 6060.\n#\nport = 6060\n\n# IPv4 listen address.\n# Default is 0.0.0.0\naddr = \"0.0.0.0\"\n\n# IPv6 listen address.\n\n# ipv6 = \"::1\"\n\n# explorer server instance id\n# \n# The instanceId of each instance is unique on the host\n# instanceId = 1\n\n# Explorer server log level.\n# Default is \"info\"\n# \n# Deprecated: use log.level instead\nlog_level = \"info\"\n\n# All data files are stored in this directory\n# data_dir = \"/var/lib/taos/explorer\" # Default for Linux\n# data_dir = \"C:\\\\TDengine\\\\data\\\\explorer\" # Default for Windows\n\n# REST API endpoint to connect to the cluster.\n# This configuration is also the target for data migration tasks.\n# \n# Default is \"http://localhost:6041\" - the default endpoint for REST API.\n#\ncluster = \"http://localhost:6041\"\n\n# native endpoint to connect to the cluster.\n# Default is disabled. To enable it, set it to the native API URL like \"taos://localhost:6030\" and uncomment it.\n# If you enable it, you will get more performance for data migration tasks.\n#\n# cluster_native = \"taos://localhost:6030\"\n\n# API endpoint for data replication/backup/data sources. No default option.\n#   Set it to API URL like \"http://localhost:6050\".\n#\nx_api = \"http://localhost:6050\"\n\n# GRPC endpoint for \"Agent\"s.\n#   Default is \"http://localhost:6055\" - the default endpoint for taosX grpc API.\n#   You should set it to public IP or FQDN name like:\n#   \"http://192.168.111.111:6055\" or \"http://node1.company.domain:6055\" and\n#   ensure to add the port to the exception list of the firewall if it enabled.\ngrpc = \"http://localhost:6055\"\n\n# CORS configuration switch, it allows cross-origin access\ncors = true\n\n# Enable ssl\n# If the following two files exist, enable ssl protocol\n#\n[ssl]\n\n# SSL certificate\n#\n# certificate = \"/path/to/ca.file\" # on linux/macOS\n# certificate = \"C:\\\\path\\\\to\\\\ca.file\" # on windows\n\n# SSL certificate key\n#\n# certificate_key = \"/path/to/key.file\" # on linux/macOS\n# certificate_key = \"C:\\\\path\\\\to\\\\key.file\" # on windows\n\n# log configuration\n[log]\n# All log files are stored in this directory\n# \n# path = \"/var/log/taos\" # on linux/macOS\n# path = \"C:\\\\TDengine\\\\log\" # on windows\n\n# log filter level\n#\n# level = \"info\"\n\n# Compress archived log files or not\n# \n# compress = false\n\n# The number of log files retained by the current explorer server instance in the `path` directory\n# \n# rotationCount = 30\n\n# Rotate when the log file reaches this size\n# \n# rotationSize = \"1GB\"\n\n# Log downgrade when the remaining disk space reaches this size, only logging `ERROR` level logs\n# \n# reservedDiskSize = \"1GB\"\n\n# The number of days log files are retained\n#\n# keepDays = 30\n\n```\n\n----------------------------------------\n\nTITLE: List-based Schemaless Data Writing in TDengine JDBC\nDESCRIPTION: Method for writing multiple lines of data from a List collection with specified protocol and timestamp types. Provides flexibility for applications using Java Collections Framework to store data points.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nvoid write(List<String> lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: NOW Function in TDengine\nDESCRIPTION: The NOW function returns the current system time of the client as a TIMESTAMP. This function can be used in WHERE or INSERT statements, but only on TIMESTAMP fields. It supports time addition and subtraction using units like seconds (s), minutes (m), hours (h), etc.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\n\"NOW()\"\n```\n\n----------------------------------------\n\nTITLE: Show Table Information\nDESCRIPTION: Displays information about tables in the current database. Supports filtering by table type (NORMAL/CHILD) and pattern matching.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [NORMAL | CHILD] [db_name.]TABLES [LIKE 'pattern'];\n```\n\n----------------------------------------\n\nTITLE: Displaying DNODEs Information in TDengine SQL\nDESCRIPTION: Shows information about data nodes (DNODEs) in the current system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSHOW DNODES;\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - Python\nDESCRIPTION: This Python code snippet illustrates how to connect to TDengine using a WebSocket connection. It calls the connect function from the specified example file to demonstrate the connection setup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/connect_websocket_examples.py:connect}}\n```\n\n----------------------------------------\n\nTITLE: Installing both taospy and taos-ws-py Python connectors\nDESCRIPTION: This bash command shows how to install both `taospy` and `taos-ws-py` Python connectors with the `ws` extra using `pip3`. This allows Python applications to connect to TDengine databases using both native and WebSocket connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"pip3 install taospy[ws]\"\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine Flink Connector Dependency in Maven\nDESCRIPTION: This XML snippet illustrates how to add the TDengine Flink Connector as a dependency in a Maven project. This is necessary for integrating Flink with the TDengine database. Ensure Maven is correctly set up for project management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.taosdata.flink</groupId>\n    <artifactId>flink-connector-tdengine</artifactId>\n    <version>2.1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Platform Architecture Detection in CMake for TDengine\nDESCRIPTION: Detects the system processor architecture and sets appropriate CPU type and platform architecture string variables. Handles x86, x64, ARM (32/64-bit), MIPS64, Apple M1, and LoongArch64 architectures.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"The current platform \" ${CMAKE_SYSTEM_PROCESSOR} \" is detected\")\n\nIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"(amd64)|(AMD64)|(x86_64)\")\n    MESSAGE(STATUS \"The current platform is amd64\")\n    MESSAGE(STATUS \"Set CPUTYPE to x64\")\n    SET(CURRENT_CPUTYPE \"x64\")\n    SET(CURRENT_PLATFORM_ARCH_STR \"amd64\")\nELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"(x86)|(X86)\")\n    MESSAGE(STATUS \"The current platform is x86\")\n    MESSAGE(STATUS \"Set CPUTYPE to x86\")\n    SET(CURRENT_CPUTYPE \"x32\")\n    SET(CURRENT_PLATFORM_ARCH_STR \"i386\")\nELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"armv7l\")\n    MESSAGE(STATUS \"Set CPUTYPE to aarch32\")\n    SET(CURRENT_CPUTYPE \"aarch32\")\n    MESSAGE(STATUS \"Set CPUTYPE to aarch32\")\n    SET(CURRENT_PLATFORM_ARCH_STR \"arm\")\nELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64\")\n    SET(CURRENT_CPUTYPE \"aarch64\")\n    MESSAGE(STATUS \"Set CPUTYPE to aarch64\")\n    SET(CURRENT_PLATFORM_ARCH_STR \"arm64\")\nELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"mips64\")\n    SET(CURRENT_CPUTYPE \"mips64\")\n    MESSAGE(STATUS \"Set CPUTYPE to mips64\")\nELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n    SET(CURRENT_CPUTYPE \"apple_m1\")\n    MESSAGE(STATUS \"Set CPUTYPE to apple silicon m1\")\nELSEIF (CMAKE_SYSTEM_PROCESSOR MATCHES \"loongarch64\")\n    SET(CURRENT_CPUTYPE \"loongarch64\")\n    MESSAGE(STATUS \"Set CPUTYPE to loongarch64\")\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Initializing TopicPartition in Java\nDESCRIPTION: Constructor and accessor methods for managing topic partitions with virtual group IDs. Used for handling message topics and their associated virtual group identifiers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_101\n\nLANGUAGE: Java\nCODE:\n```\nTopicPartition(String topic, int vGroupId)\nString getTopic()\nint getVGroupId()\n```\n\n----------------------------------------\n\nTITLE: Anomaly Detection Query\nDESCRIPTION: This SQL query demonstrates how to use the installed autoencoder model for anomaly detection within a specified window. It uses the `anomaly_window` function, setting the algorithm to `sample_ad_model` and the model to `sample-ad-autoencoder`. The query selects the window start time (`_wstart`) and the count of data points within each window that are flagged as anomalous.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/04-machine-learning.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n--- In the anomaly window, set the algorithm to `sample_ad_model` and the model to `sample-ad-autoencoder`.\nSELECT _wstart, count(*) \nFROM foo anomaly_window(val, 'algo=sample_ad_model,model=sample-ad-autoencoder');\n```\n\n----------------------------------------\n\nTITLE: Basic Single Record Insertion\nDESCRIPTION: Example of inserting a single record into a table using current timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/06-insert.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d1001 VALUES (NOW, 10.2, 219, 0.32);\n```\n\n----------------------------------------\n\nTITLE: Creating a Time-range-wise SMA Index in SQL\nDESCRIPTION: This SQL command creates a time-range-wise SMA index named 'sma_10min' on the 'st' table. It calculates sum, max, min, and time-weighted average (twa) for all columns at 10-minute intervals.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/user_manual/Small_Materialized_Aggrates.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ncreate sma_indx sma_10min on st (sum(*), max(*), min(*), twa(*)) interval(10m);\n```\n\n----------------------------------------\n\nTITLE: Distinct Operation on JSON\nDESCRIPTION: Shows how to use distinct operation with JSON value queries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/17-json.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct info->'k1' from s1\n```\n\n----------------------------------------\n\nTITLE: Setting Fetch Size for ResultSet in Java\nDESCRIPTION: Method for setting the number of rows to be fetched from the database server for the result set. Helps optimize network traffic by controlling how many rows are retrieved at once. Throws SQLException if the result set is closed or rows parameter is negative.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_57\n\nLANGUAGE: Java\nCODE:\n```\nvoid setFetchSize(int rows) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Checking Database Availability Status in TDengine SQL\nDESCRIPTION: Queries the availability status of a database, returning 0 (unavailable), 1 (fully available), or 2 (partially available, where some VNODEs are available while others are not).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSHOW db_name.ALIVE;\n```\n\n----------------------------------------\n\nTITLE: Verifying Data in TDengine\nDESCRIPTION: These commands are run in the TDengine CLI to show databases, switch to the 'statsd' database, and query data from a specific table. This confirms that metrics sent from StatsD are recorded and retrievable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/06-statsd.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n statsd                         |\nQuery OK, 3 row(s) in set (0.003142s)\n\ntaos> use statsd;\nDatabase changed.\n\ntaos> show stables;\n              name              |\n=================================\n foo                            |\nQuery OK, 1 row(s) in set (0.002161s)\n\ntaos> select * from foo;\n              ts               |         value         |         metric_type          |\n=======================================================================================\n 2022-04-20 09:54:51.219614235 |                     1 | counter                      |\nQuery OK, 1 row(s) in set (0.004179s)\n\ntaos>\n```\n\n----------------------------------------\n\nTITLE: Finding Column Index by Name in ResultSet in Java\nDESCRIPTION: Method for retrieving the column number (index) for a given column name in a database result set. Throws SQLException if the column name does not exist or a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_51\n\nLANGUAGE: Java\nCODE:\n```\nint findColumn(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Viewing Users in TDengine\nDESCRIPTION: SQL commands to display user information in the system\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nshow users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from information_schema.ins_users;\n```\n\n----------------------------------------\n\nTITLE: Force Leader Assignment in Failure Scenarios\nDESCRIPTION: SQL command to forcibly assign a leader in specific failure scenarios where VGroup synchronization is compromised\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/18-ha/02-replica2.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nASSIGN LEADER FORCE;\n```\n\n----------------------------------------\n\nTITLE: Creating Native Consumers in Rust\nDESCRIPTION: This Rust snippet illustrates multiple functions for creating native consumers, addressing parameters for subscriptions and message processing, relying on the relevant Rust example files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/tmq.rs:create_consumer_dsn}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/nativeexample/examples/tmq.rs:create_consumer_ac}}\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using TDengine REST API\nDESCRIPTION: Examples of cURL commands to query data from a TDengine database using both Basic and custom Taosd authentication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L -H \"Authorization: Basic cm9vdDp0YW9zZGF0YQ==\" -d \"select * from demo.d1001\" 192.168.0.1:6041/rest/sql\ncurl -L -H \"Authorization: Taosd /KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04\" -d \"select * from demo.d1001\" 192.168.0.1:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Displaying User-Defined Functions in TDengine SQL\nDESCRIPTION: Shows all user-defined custom functions in the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSHOW FUNCTIONS;\n```\n\n----------------------------------------\n\nTITLE: TIMEZONE Function in TDengine\nDESCRIPTION: The TIMEZONE function returns the current client's timezone information as a string.  It takes no arguments. The function applies to both tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\n\"TIMEZONE()\"\n```\n\n----------------------------------------\n\nTITLE: Converting a TMQ List to C Array in C\nDESCRIPTION: Function to convert a ws_tmq_list_t structure into a C array of string pointers. Takes a list object and an output parameter for the topic count. Returns a C array where each element is a string pointer representing a topic name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nchar **ws_tmq_list_to_c_array(const ws_tmq_list_t *list, uint32_t *topic_num);\n```\n\n----------------------------------------\n\nTITLE: Creating a Database with S3 in TDengine\nDESCRIPTION: This snippet shows how to create a database in TDengine that utilizes S3 for storing time-series data. The command specifies a duration for local data retention before migrating to S3. This requires configuring the TDengine service with S3 access details and database creation privileges.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate database demo_db duration 1d s3_keeplocal 3d;\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine 3.x Data Source DSN\nDESCRIPTION: Examples of Data Source Name (DSN) configurations for TDengine 3.x, including single topic, multiple topics, and database-level subscriptions. These DSNs are used to establish connections for data synchronization between clusters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/02-tmq.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntmq+ws://root:taosdata@localhost:6041/topic\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntmq+ws://root:taosdata@localhost:6041/topic1,topic2,topic3\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntmq+ws://root:taosdata@localhost:6041/db1,db2,db3\n```\n\n----------------------------------------\n\nTITLE: Example of Modifying Debug Flag in TDengine SQL\nDESCRIPTION: Shows how to change the log output level of a specific dnode to debug mode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER DNODE 1 'debugFlag' '143';\n```\n\n----------------------------------------\n\nTITLE: TDengineParameter Constructor Definition\nDESCRIPTION: Constructor implementation for TDengineParameter class. Handles parameter name and value initialization with specific naming conventions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic TDengineParameter(string name, object value)\n```\n\n----------------------------------------\n\nTITLE: Querying TDengine Log Database Stable Tables\nDESCRIPTION: Shows how to connect to the log database and list all available super tables containing monitoring metrics\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaos> use log;\nDatabase changed.\n\ntaos> show stables;\n          stable_name           |\n=================================\n taosd_dnodes_status            |\n taosd_vnodes_info              |\n keeper_monitor                 |\n taosd_vgroups_info             |\n taos_sql_req                   |\n taos_slow_sql                  |\n taosd_mnodes_info              |\n taosd_cluster_info             |\n taosd_sql_req                  |\n taosd_dnodes_info              |\n adapter_requests               |\n taosd_cluster_basic            |\n taosd_dnodes_data_dirs         |\n taosd_dnodes_log_dirs          |\nQuery OK, 14 row(s) in set (0.006542s)\n```\n\n----------------------------------------\n\nTITLE: Checking if Cursor is Before First Row in ResultSet in Java\nDESCRIPTION: Method for checking if the cursor is positioned before the first row in a database result set. Returns true if the cursor is before the first row, otherwise false. Throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_52\n\nLANGUAGE: Java\nCODE:\n```\nboolean isBeforeFirst() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream to Process Historical Data in TDengine\nDESCRIPTION: Example of creating a stream with the fill_history option enabled to process historical data, counting records from power meters in 10-second intervals.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ncreate stream if not exists count_history_s fill_history 1 into count_history as select count(*) from power.meters interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Creating UDF with Binary Output in TDengine using SQL\nDESCRIPTION: This SQL statement creates a UDF named `nextsunday` in TDengine, linking it to the Python script located at `/root/udf/nextsunday.py`. The `outputtype` is specified as `binary(10)`, and the `language` is set to `Python`.  It indicates that the python UDF returns a binary string of length 10.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ncreate function nextsunday as '/root/udf/nextsunday.py' outputtype binary(10) language 'Python';\n```\n\n----------------------------------------\n\nTITLE: Revoking Database Access Authorization in SQL\nDESCRIPTION: This SQL snippet demonstrates how to revoke various database access permissions from a user in TDengine. The permissions (all, read, write) can be customized based on requirement. This operation applies to various privilege levels like specific tables, entire databases, or all databases. Adequate privilege level specification is essential to ensure the desired access restrictions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nrevoke privileges on priv_level [with tag_condition] from user_name\nprivileges : {\n all\n | priv_type [, priv_type] ...\n}\npriv_type : {\n read\n | write\n}\npriv_level : {\n dbname.tbname\n | dbname.*\n | *.*\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing TDengine Explorer Service - Shell\nDESCRIPTION: This shell command demonstrates how to access the TDengine Explorer service through the specified domain name, utilizing an HTTP request to verify accessibility.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://replica3.local.tdengine.com\n```\n\n----------------------------------------\n\nTITLE: Getting Client Info (String) in Java\nDESCRIPTION: Retrieves the value of a specified client information property for the connection. It throws `SQLException` if the operation fails. This allows retrieving specific client connection properties.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_30\n\nLANGUAGE: java\nCODE:\n```\n\"`String getClientInfo(String name) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Getting Error String in TDengine C Client\nDESCRIPTION: Get the error message for the most recent API call failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nchar *taos_errstr(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: EMQX Rule Engine Replacement Template\nDESCRIPTION: This SQL INSERT statement is used as a template within the EMQX rule engine to insert data into the 'sensor_data' table in the 'test' database. It extracts values from the MQTT message payload using the `${payload.field}` syntax.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/09-emq-broker.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO test.sensor_data VALUES(\n  now,\n  ${payload.temperature},\n  ${payload.humidity},\n  ${payload.volume},\n  ${payload.PM10},\n  ${payload.pm25},\n  ${payload.SO2},\n  ${payload.NO2},\n  ${payload.CO},\n  '${payload.id}',\n  ${payload.area},\n  ${payload.ts}\n)\n```\n\n----------------------------------------\n\nTITLE: Nested Query Syntax in TDengine\nDESCRIPTION: Syntax for nested queries (subqueries) in TDengine SQL.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... FROM (SELECT ... FROM ...) ...;\n```\n\n----------------------------------------\n\nTITLE: Performing Time-Window Aggregation in TDengine\nDESCRIPTION: SQL query to calculate average, maximum, and minimum values for the 'd1001' table at 10-second intervals.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _wstart, AVG(current), MAX(voltage), MIN(phase) FROM test.d1001 INTERVAL(10s);\n```\n\n----------------------------------------\n\nTITLE: Defining WebSocket Connection URL Structure in TDengine Python Connector\nDESCRIPTION: Specifies the URL structure for establishing a WebSocket connection to TDengine. It includes protocol, authentication, host, port, database, and additional parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[+<protocol>]://[[<username>:<password>@]<host>:<port>][/<database>][?<p1>=<v1>[&<p2>=<v2>]]\n|------------|---|-----------|-----------|------|------|------------|-----------------------|\n|   protocol |   | username  | password  | host | port |  database  |  params               |\n```\n\n----------------------------------------\n\nTITLE: Dropping UDF in TDengine\nDESCRIPTION: SQL command to remove a user-defined function from the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nDROP FUNCTION bit_and;\n```\n\n----------------------------------------\n\nTITLE: Getting TDengine Server Information in C\nDESCRIPTION: Retrieve the server version information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nchar *taos_get_server_info(TAOS *taos)\n```\n\n----------------------------------------\n\nTITLE: Creating a UDF in TDengine using SQL\nDESCRIPTION: This SQL statement creates a UDF named `myfun` in TDengine, linking it to the Python script located at `/root/udf/myfun.py`. The `outputtype` is specified as `double`, and the `language` is set to `Python`. This command registers the Python script as a usable function within TDengine SQL queries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate function myfun as '/root/udf/myfun.py' outputtype double language 'Python'\n```\n\n----------------------------------------\n\nTITLE: Getting Error Code in TDengine WebSocket (C)\nDESCRIPTION: Retrieves the error code for the last API call failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_errno(WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Settings for TaosKeeper\nDESCRIPTION: This snippet shows how to configure Prometheus to scrape metrics from TaosKeeper. It sets up a job named 'taoskeeper' that targets the local TaosKeeper instance running on port 6043.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  - job_name: \"taoskeeper\"\n    # metrics_path defaults to '/metrics'\n    # scheme defaults to 'http'.\n    static_configs:\n      - targets: [\"localhost:6043\"]\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions\nDESCRIPTION: SQL syntax for revoking various types of permissions including database access, view rights, and subscription privileges\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nrevoke all on power from test\n```\n\nLANGUAGE: sql\nCODE:\n```\nrevoke read on power.view_name from test\n```\n\nLANGUAGE: sql\nCODE:\n```\nrevoke subscribe on topic_name from test\n```\n\n----------------------------------------\n\nTITLE: Viewing TSMA Information in SQL\nDESCRIPTION: Commands for displaying information about existing TSMAs in the database through either SHOW command or information_schema query.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/28-tsma.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [db_name.]TSMAS;\nSELECT * FROM information_schema.ins_tsma;\n```\n\n----------------------------------------\n\nTITLE: IQR Anomaly Detection in SQL\nDESCRIPTION: Uses Interquartile Range method to detect outliers by comparing values against Q1 and Q3 quartiles, with a default 1.5 multiplier for boundary calculation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=iqr\")\n```\n\n----------------------------------------\n\nTITLE: Resuming a Stream in TDengine\nDESCRIPTION: SQL statement for resuming a paused stream computing task, with options to ignore data written during the pause period.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nRESUME STREAM [IF EXISTS] [IGNORE UNTREATED] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data in TDengine Zero-Code Integration\nDESCRIPTION: Example of JSON format data that can be automatically parsed to extract fields like groupid, voltage, current, timestamp, usage status, and location information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"groupid\": 170001, \"voltage\": \"221V\", \"current\": 12.3, \"ts\": \"2023-12-18T22:12:00\", \"inuse\": true, \"location\": \"beijing.chaoyang.datun\"}\n{\"groupid\": 170001, \"voltage\": \"220V\", \"current\": 12.2, \"ts\": \"2023-12-18T22:12:02\", \"inuse\": true, \"location\": \"beijing.chaoyang.datun\"}\n{\"groupid\": 170001, \"voltage\": \"216V\", \"current\": 12.5, \"ts\": \"2023-12-18T22:12:04\", \"inuse\": false, \"location\": \"beijing.chaoyang.datun\"}\n```\n\n----------------------------------------\n\nTITLE: Interpolation Query with _IROWTS in TDengine SQL\nDESCRIPTION: Shows how to use the _IROWTS pseudo column with the INTERP function for time-based interpolation of data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect _irowts, interp(current) from meters range('2020-01-01 10:00:00', '2020-01-01 10:30:00') every(1s) fill(linear);\n```\n\n----------------------------------------\n\nTITLE: Verifying Data in TDengine with CLI Commands\nDESCRIPTION: This set of TDengine CLI commands checks if the 'tcollector' database and various tables have been created and data has been written. It helps validate the successful configuration and operation of TCollector with TDengine. No specific permissions are required to run these queries, but sufficient database access should be ensured.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/08-tcollector.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n tcollector                     |\nQuery OK, 3 rows in database (0.001647s)\n\ntaos> use tcollector;\nDatabase changed.\n\ntaos> show stables;\n              name              |\n=================================\n proc.meminfo.hugepages_rsvd    |\n proc.meminfo.directmap1g       |\n proc.meminfo.vmallocchunk      |\n proc.meminfo.hugepagesize      |\n tcollector.reader.lines_dro... |\n proc.meminfo.sunreclaim        |\n proc.stat.ctxt                 |\n proc.meminfo.swaptotal         |\n proc.uptime.total              |\n tcollector.collector.lines_... |\n proc.meminfo.vmallocused       |\n proc.meminfo.memavailable      |\n sys.numa.foreign_allocs        |\n proc.meminfo.committed_as      |\n proc.vmstat.pswpin             |\n proc.meminfo.cmafree           |\n proc.meminfo.mapped            |\n proc.vmstat.pgmajfault         |\n...\n```\n\n----------------------------------------\n\nTITLE: Inserting New Data for Real-time Synchronization Testing\nDESCRIPTION: SQL commands to insert new data into TDengine tables that will be automatically synchronized to Kafka by the connector, demonstrating the real-time synchronization capability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nUSE test;\nINSERT INTO d1001 VALUES (now, 13.3, 229, 0.38);\nINSERT INTO d1002 VALUES (now, 16.3, 233, 0.22);\n```\n\n----------------------------------------\n\nTITLE: Deleting TSMAs in TDengine SQL\nDESCRIPTION: SQL syntax for dropping TSMAs. Recursive TSMAs must be deleted before their base TSMAs can be removed, as indicated by the error message that would occur otherwise.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/28-tsma.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP TSMA [db_name.]tsma_name;\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data in TDengine Data Connectors\nDESCRIPTION: Examples of JSON data formats that can be automatically parsed by TDengine's data connectors. Includes both simple and nested JSON structures, demonstrating field extraction capabilities.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/index.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"groupid\": 170001,\n  \"voltage\": \"221V\",\n  \"current\": 12.3,\n  \"ts\": \"2023-12-18T22:12:00\",\n  \"inuse\": true,\n  \"location\": \"beijing.chaoyang.datun\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"groupid\": 170001,\n  \"data\": {\n    \"voltage\": \"221V\",\n    \"current\": 12.3\n  },\n  \"ts\": \"2023-12-18T22:12:00\",\n  \"inuse\": true,\n  \"location\": [{\n    \"province\": \"beijing\",\n    \"city\":\"chaoyang\",\n    \"street\": \"datun\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Raw Schemaless Data with TTL and Request ID in TDengine (C API)\nDESCRIPTION: This C API function extends the schemaless data insertion functionality by including a request ID. It takes the same parameters as `taos_schemaless_insert_raw_ttl` along with an additional `reqid` parameter for tracking the request throughout the system.  The function returns a TAOS_RES pointer, which must be freed by the caller.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_89\n\nLANGUAGE: C\nCODE:\n```\n\"TAOS_RES *taos_schemaless_insert_raw_ttl_with_reqid(TAOS *taos, char *lines, int len, int32_t *totalRows, int protocol, int precision, int32_t ttl, int64_t reqid)\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Query Node in TDengine SQL\nDESCRIPTION: Removes a query node from a specified dnode in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nDROP QNODE ON DNODE dnode_id;\n```\n\n----------------------------------------\n\nTITLE: Building Executor Library in TDengine with CMake\nDESCRIPTION: This CMake script builds the executor static library by collecting source files from the src directory and linking against various dependencies. It includes platform-specific compiler options for Darwin (macOS), analytics support conditionals, and test directory inclusion when BUILD_TEST is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/executor/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src EXECUTOR_SRC)\n\nadd_library(executor STATIC ${EXECUTOR_SRC})\n\nif(${TD_DARWIN})\n  target_compile_options(executor PRIVATE -Wno-error=deprecated-non-prototype)\nendif(${TD_DARWIN})\n\nif(${BUILD_WITH_ANALYSIS})\n  add_definitions(-DUSE_ANALYTICS)\nendif()\n\ntarget_link_libraries(executor\n  PRIVATE os util common function parser planner qcom scalar nodes index wal tdb geometry\n)\n\ntarget_include_directories(\n  executor\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/executor\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\nif(${BUILD_TEST})\n  ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Using DERIVATIVE Function in SQL\nDESCRIPTION: Calculates the rate of change per unit time interval. Can optionally ignore negative values with the ignore_negative parameter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_66\n\nLANGUAGE: sql\nCODE:\n```\nDERIVATIVE(expr, time_interval, ignore_negative)\n\nignore_negative: {\n    0\n  | 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data from a View in TDengine SQL\nDESCRIPTION: Example of how to query data from a created view using a simple SELECT statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from view1;\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Connection with WSConfig in Node.js\nDESCRIPTION: This snippet demonstrates how to create a WebSocket connection to TDengine using the WSConfig object to specify connection parameters such as URL, username, password, database, and timeout.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/35-node.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst taos = require(\"@tdengine/websocket\");\n\nasync function createConnect() {\n    try {\n        let url = 'ws://127.0.0.1:6041'\n        let conf = new taos.WSConfig(url)\n        conf.setUser('root')\n        conf.setPwd('taosdata')\n        conf.setDb('db')\n        conf.setTimeOut(500)\n        let wsSql = await taos.sqlConnect(conf)\n    } catch (e) {\n        console.error(e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Database Compression Ratio and Disk Usage in TDengine SQL\nDESCRIPTION: Shows the compression ratio and total disk usage of a specified database. Equivalent to executing a sum query against the INFORMATION_SCHEMA.INS_DISK_USAGE table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSHOW db_name.disk_info;\n```\n\n----------------------------------------\n\nTITLE: Clearing Parameters in JDBC PreparedStatement (Java)\nDESCRIPTION: Clears all currently set parameter values in a PreparedStatement. Throws SQLException if the statement is closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_79\n\nLANGUAGE: Java\nCODE:\n```\nvoid clearParameters() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating Data Node in TDengine SQL\nDESCRIPTION: Creates a new data node (dnode) in the cluster by specifying either an endpoint (hostname:port) or separate hostname and port values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DNODE {dnode_endpoint | dnode_host_name PORT port_val}\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Services\nDESCRIPTION: Commands for starting TDengine services either all at once or individually using systemctl.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/06-enterprise.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./start-all.sh\n\nsudo systemctl start taosd\nsudo systemctl start taosadapter\nsudo systemctl start taoskeeper\nsudo systemctl start taosx\nsudo systemctl start taos-explorer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Time from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a java.sql.Time object from a database result set. Returns null if the value is NULL and throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_47\n\nLANGUAGE: Java\nCODE:\n```\nTime getTime(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from TDengine\nDESCRIPTION: Demonstrates how to delete time-series data based on timestamps. This example deletes all data in the supertable 'meters' with timestamps earlier than the specified date.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/02-insert.md#2025-04-16_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\ndelete from meters where ts < '2021-10-01 10:40:00.100' ;\n```\n\n----------------------------------------\n\nTITLE: Using extract_avg Aggregate Function\nDESCRIPTION: Demonstrates the use of 'extract_avg' to compute the average from comma-separated strings in the 'scores' table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nselect extract_avg(valStr) from scores;\n```\n\n----------------------------------------\n\nTITLE: Querying Subtable Names and Tags in TDengine SQL\nDESCRIPTION: Demonstrates how to retrieve subtable names and related tag information from a supertable using the TBNAME pseudo column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TAGS TBNAME, location FROM meters;\n```\n\n----------------------------------------\n\nTITLE: TDengine Datasource Provisioning Configuration\nDESCRIPTION: YAML configuration for automated TDengine datasource setup in Grafana with environment variable placeholders\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\ndatasources:\n- name: TDengine\n  type: tdengine-datasource\n  orgId: 1\n  url: \"$TDENGINE_API\"\n  isDefault: true\n  secureJsonData:\n    url: \"$TDENGINE_API\"\n    basicAuth: \"$TDENGINE_BASIC_AUTH\"\n  version: 1\n  editable: true\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Rust TDengine Client\nDESCRIPTION: Example of how to handle errors when executing SQL queries with the TDengine Rust connector. The code demonstrates proper error handling pattern by matching on the result of a SQL execution and printing detailed error information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmatch conn.exec(sql) {\n    Ok(_) => {\n        Ok(())\n    }\n    Err(e) => {\n        eprintln!(\"ERROR: {:?}\", e);\n        Err(e)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest TDengine Python Connector (taospy) using pip\nDESCRIPTION: This shell command shows how to install the latest version of the `taospy` Python connector using `pip3`. This allows Python applications to connect to TDengine databases using the native connection method.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"pip3 install taospy\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Tag Information for Child Tables in TDengine SQL\nDESCRIPTION: Shows tag information for the specified child table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TAGS FROM child_table_name [FROM db_name];\nSHOW TAGS FROM [db_name.]child_table_name;\n```\n\n----------------------------------------\n\nTITLE: Dropping a Stream in TDengine\nDESCRIPTION: SQL statement for deleting a stream computing task without affecting the data already written by the stream.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nDROP STREAM [IF EXISTS] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Inserting Schemaless Raw Data with TTL and Request ID in TDengine (C)\nDESCRIPTION: Performs a schemaless batch insert operation, writing row protocol text data into TDengine. This function combines the functionalities of `ws_schemaless_insert_raw_ttl` and `ws_schemaless_insert_raw_with_reqid`, accepting both `ttl` for time-to-live and `reqid` for call chain tracking. Returns a pointer to a `WS_RES` structure or NULL on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n\"WS_RES *ws_schemaless_insert_raw_ttl_with_reqid(WS_TAOS *taos,\n                                                const char *lines,\n                                                int len,\n                                                int32_t *totalRows,\n                                                int protocol,\n                                                int precision,\n                                                int ttl,\n                                                uint64_t reqid)\"\n\n```\n\n----------------------------------------\n\nTITLE: 创建数据库 SQL\nDESCRIPTION: 使用毫秒精度创建名为power的数据库，设置数据保留期限、文件分割和缓冲区大小\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/01-model.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE power PRECISION 'ms' KEEP 3650 DURATION 10 BUFFER 16;\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows Count\nDESCRIPTION: Retrieves the total number of rows affected by the executed statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_affected_rows(WS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Import CSV File Data\nDESCRIPTION: This command imports data from a gzipped CSV file into TDengine using taosX. It specifies the CSV file as the data source (`-f csv:./meters/meters.csv.gz`), uses a parser file to define data types and mapping (`--parser '@./meters/meters.json'`), and specifies the target database (`-t taos:///csv1`).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run -f csv:./meters/meters.csv.gz \\\n  --parser '@./meters/meters.json' \\\n  -t taos:///csv1 -qq\"\n```\n\n----------------------------------------\n\nTITLE: Describing Smart Meter Table Schema in TDengine SQL\nDESCRIPTION: Shows the table structure for a smart meter data model including timestamp, measurements (current, voltage, phase), and tags (location, groupid). The schema demonstrates TDengine's time-series data modeling capabilities.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/index.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntaos> DESCRIBE meters;\n             Field              |        Type        |   Length    |    Note    |\n=================================================================================\n ts                             | TIMESTAMP          |           8 |            |\n current                        | FLOAT              |           4 |            |\n voltage                        | INT                |           4 |            |\n phase                          | FLOAT              |           4 |            |\n location                       | BINARY             |          64 | tag        |\n groupid                        | INT                |           4 | tag        |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Column from a Supertable\nDESCRIPTION: SQL command to remove a column from a supertable and all its subtables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name DROP COLUMN col_name;\n```\n\n----------------------------------------\n\nTITLE: Inserting Aggregated Data into TDengine\nDESCRIPTION: SQL command to insert aggregated goods data into the 'goods' table using a 10-day interval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into power.goods select _wstart, _wstart + 10d, avg(goods) from power.meters interval(10d);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Consumer Parameters\nDESCRIPTION: Emphasizes setting DSN parameters for Rust consumers and advises checking common configuration items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nThe parameters for creating a consumer with the Rust connector are DSN. For a list of parameters you can set, please refer to [DSN](../../tdengine-reference/client-libraries/rust/#dsn)\nFor other parameters, refer to the common basic configuration items mentioned above.\n```\n\n----------------------------------------\n\nTITLE: Executing Schemaless Write in Java for TDengine\nDESCRIPTION: This code snippet defines abstract methods for writing schemaless data to TDengine. It supports various protocols like InfluxDB LINE, OpenTSDB TELNET, and OpenTSDB JSON, with different timestamp types and optional TTL and request ID parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nabstract void write(String[] lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType, Integer ttl, Long reqId) throws SQLException\n```\n\nLANGUAGE: Java\nCODE:\n```\nvoid write(String[] lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\nLANGUAGE: Java\nCODE:\n```\nvoid write(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\nLANGUAGE: Java\nCODE:\n```\nvoid write(List<String> lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\nLANGUAGE: Java\nCODE:\n```\nint writeRaw(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\nLANGUAGE: Java\nCODE:\n```\nabstract int writeRaw(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType, Integer ttl, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Altering Child Tables in TDengine\nDESCRIPTION: SQL syntax for modifying child tables including changing tag values and table properties like TTL and comments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE [db_name.]tb_name alter_table_clause\n\nalter_table_clause: {\n    alter_table_options\n  | SET TAG tag_name = new_tag_value, tag_name2=new_tag2_value ...\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Value Handling in JSON Construction\nDESCRIPTION: Shows how to handle optional members when creating JSON objects and arrays using NULL values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n/* Create an empty object or array when optional members are missing */\njson_pack(\"{s:s*,s:o*,s:O*}\", \"foo\", NULL, \"bar\", NULL, \"baz\", NULL);\njson_pack(\"[s*,o*,O*]\", NULL, NULL, NULL);\n```\n\n----------------------------------------\n\nTITLE: Querying Subtable Information Using INS_TAGS in TDengine SQL\nDESCRIPTION: Shows how to query subtable tag information of supertables using the INS_TAGS system table under INFORMATION_SCHEMA.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT table_name, tag_name, tag_type, tag_value FROM information_schema.ins_tags WHERE stable_name='meters';\n```\n\n----------------------------------------\n\nTITLE: Creating a Subtable in TDengine\nDESCRIPTION: SQL statement to create a subtable 'd1001' using the 'meters' supertable as a template, with specific tag values for location and group_id.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE d1001 \nUSING meters (\n    location,\n    group_id\n) TAGS (\n    \"California.SanFrancisco\", \n    2\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Subscribed Topics in TDengine (TypeScript)\nDESCRIPTION: Retrieves all currently subscribed topics. Returns an array of topic strings. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync subscription(reqId?:number):Promise<Array<string>>\n```\n\n----------------------------------------\n\nTITLE: Show Database Creation Statement\nDESCRIPTION: Displays the CREATE statement used to create the specified database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Stopping Query Execution in TDengine C Client\nDESCRIPTION: Stop the execution of the current query.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_38\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_stop_query(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Setting TDengine Event Callback\nDESCRIPTION: Function to set the event callback function for handling notifications.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_61\n\nLANGUAGE: c\nCODE:\n```\nint taos_set_notify_cb(TAOS *taos, __taos_notify_fn_t fp, void *param, int type)\n```\n\n----------------------------------------\n\nTITLE: Field Size Configuration in TDengine JDBC\nDESCRIPTION: Method to retrieve the maximum size limit for character and binary column values in ResultSet objects. Controls the maximum data size that can be read from query results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nint getMaxFieldSize() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Calculating Week Number with WEEK() in TDengine SQL\nDESCRIPTION: Returns the week number for a given date. Accepts a timestamp expression and an optional mode parameter to specify week calculation rules. Returns a BIGINT value representing the week number.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_38\n\nLANGUAGE: sql\nCODE:\n```\nWEEK(expr [, mode])\n```\n\n----------------------------------------\n\nTITLE: Modifying User Information\nDESCRIPTION: SQL syntax for altering user attributes like password, enabled status, system info access, and database creation rights\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nalter user user_name alter_user_clause\n```\n\nLANGUAGE: sql\nCODE:\n```\nalter user test enable 0\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in taosX\nDESCRIPTION: Introduces HTTPS support for taosX APIs for improved security, configuring paths to the SSL certificate, key, and CA files within the TOML configuration file. This setup ensures encrypted communication across the network.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[serve]\nssl_cert = \"/path/to/server.pem\"\nssl_key =  \"/path/to/server.key\"\nssl_ca =   \"/path/to/ca.pem\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# Local connection to taosX API\nx_api = \"https://127.0.01:6050\"\n# Public IP or domain address\ngrpc = \"https://public.domain.name:6055\"\n```\n\n----------------------------------------\n\nTITLE: Querying vnode distribution in TDengine\nDESCRIPTION: This SQL query retrieves information about the distribution of vnodes across dnodes within the TDengine cluster. It uses the information_schema.ins_vnodes table to display details such as dnode_id, vgroup_id, database name, status, and timestamps related to vnode roles and restoration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/02-planning.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from information_schema.ins_vnodes;\ndnode_id |vgroup_id | db_name | status | role_time | start_time | restored |\n===============================================================================================\n 1| 3 | log | leader | 2024-01-16 13:52:13.618 | 2024-01-16 13:52:01.628 | true |\n 1| 4 | log | leader | 2024-01-16 13:52:13.630 | 2024-01-16 13:52:01.702 | true |\n```\n\n----------------------------------------\n\nTITLE: Example Sink Connector Response\nDESCRIPTION: This JSON response confirms the successful creation of the TDengine Sink Connector. It includes the connector's name, configuration, tasks, and type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"TDengineSinkConnector\",\n  \"config\": {\n    \"connection.database\": \"power\",\n    \"connection.password\": \"taosdata\",\n    \"connection.url\": \"jdbc:TAOS://127.0.0.1:6030\",\n    \"connection.user\": \"root\",\n    \"connector.class\": \"com.taosdata.kafka.connect.sink.TDengineSinkConnector\",\n    \"data.precision\": \"ns\",\n    \"db.schemaless\": \"line\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"tasks.max\": \"1\",\n    \"topics\": \"meters\",\n    \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"name\": \"TDengineSinkConnector\",\n    \"errors.tolerance\": \"all\",\n    \"errors.deadletterqueue.topic.name\": \"dead_letter_topic\",\n    \"errors.deadletterqueue.topic.replication.factor\": \"1\",    \n  },\n  \"tasks\": [],\n  \"type\": \"sink\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Node Key Status in TDengine\nDESCRIPTION: These SQL commands check the status of the encryption keys across nodes. It reports whether keys are loaded, unset, or unknown.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nshow encryptions;\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from information_schema.ins_encryptions;\n```\n\nLANGUAGE: sql\nCODE:\n```\n  dnode_id   |           key_status           |\n===============================================\n           1 | loaded                         |\n           2 | unset                          |\n           3 | unknown                        |\n```\n\n----------------------------------------\n\nTITLE: Complex State Window Query with CASE in TDengine SQL\nDESCRIPTION: This query demonstrates the use of a CASE expression in STATE_WINDOW to define complex state conditions. It monitors voltage levels to determine if a circuit is in a normal state.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, CASE WHEN voltage >= 205 and voltage <= 235 THEN 1 ELSE 0 END status FROM meters PARTITION BY tbname STATE_WINDOW(CASE WHEN voltage >= 205 and voltage <= 235 THEN 1 ELSE 0 END);\n```\n\n----------------------------------------\n\nTITLE: Restarting a Replication Task (taosx)\nDESCRIPTION: This shell command restarts a replication task, either for a specific database, all tasks associated with a replica ID, or all tasks on the instance.  It provides a way to recover from interruptions in the replication process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica restart [id [db...]]\n```\n\n----------------------------------------\n\nTITLE: Using ABS Function in SQL\nDESCRIPTION: The ABS function returns the absolute value of the specified field. It works with numeric data types and can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nABS(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser in C\nDESCRIPTION: This function initializes a new parser object from a provided configuration string. It requires a user-defined configuration string and its binary length as inputs. If the object is created successfully, it stores the parser in the returned structure; otherwise, it signifies failure through a non-zero error code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nstruct parser_resp_t {\n  int e;    // 0 if success.\n  void* p;  // Success if contains.\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in TDengine\nDESCRIPTION: SQL syntax for deleting one or multiple regular tables or child tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE [IF EXISTS] [db_name.]tb_name [, [IF EXISTS] [db_name.]tb_name] ...\n```\n\n----------------------------------------\n\nTITLE: Deleting Cached Window States in TDengine SQL\nDESCRIPTION: This snippet shows how to delete cached window states in stream computing using the `DELETE_MARK` statement in TDengine SQL. No specific dependencies are required, but it is aimed to manage the lifetime of cached states used for updating window results. The default retention time if not specified is 10 years.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDELETE_MARK time\n```\n\n----------------------------------------\n\nTITLE: Using CURRENT_USER Function in SQL\nDESCRIPTION: Returns the current user name for the TDengine connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_75\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CURRENT_USER();\n```\n\n----------------------------------------\n\nTITLE: INS_TABLES Schema Definition\nDESCRIPTION: System table storing information about basic tables and subtables created by users including table names, database associations, and configuration details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/22-meta.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Column Name   | Data Type     | Description |\n| table_name    | VARCHAR(192)  | Table name |\n| db_name       | VARCHAR(64)   | Database name |\n| create_time   | TIMESTAMP     | Creation time |\n| columns       | INT           | Number of columns |\n| stable_name   | VARCHAR(192)  | Name of the supertable it belongs to |\n| uid           | BIGINT        | Table ID |\n| vgroup_id     | INT           | vgroup ID |\n| ttl           | INT           | Table's time to live |\n| table_comment | VARCHAR(1024) | Table comment |\n| type          | VARCHAR(21)   | Table type |\n```\n\n----------------------------------------\n\nTITLE: Viewing vgroup Status in TDengine Dual Replica\nDESCRIPTION: This snippet shows the SQL syntax for viewing vgroup statuses in a dual-replica TDengine database. The `show arbgroups` command and `select * from information_schema.ins_arbgroups` query provide information on vgroup synchronization status and assigned leader nodes. This is essential for monitoring the health and availability of dual-replica setups.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/04-maintenance.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n\"show arbgroups;\n\nselect * from information_schema.ins_arbgroups;\"\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Count in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the number of parameters in the prepared statement. Returns an integer representing the parameter count. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_84\n\nLANGUAGE: Java\nCODE:\n```\nint getParameterCount() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Retrieving Date from ResultSet in Java\nDESCRIPTION: Method for retrieving the value of a specified column as a java.sql.Date object from a database result set. Returns null if the value is NULL and throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_46\n\nLANGUAGE: Java\nCODE:\n```\nDate getDate(String columnLabel) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Get Column Name using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the name of a specified column. The column number starts from 1. An SQLException is thrown if the column index is out of range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_68\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `String getColumnName(int column) throws SQLException`\n  - **Interface Description**: Gets the name of a specified column.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The name of the column.\n  - **Exception**: Throws `SQLException` if the column index is out of range.\n```\n\n----------------------------------------\n\nTITLE: Using MODE Function in SQL\nDESCRIPTION: Returns the most frequent value in a column. If multiple values have the same highest frequency, returns one randomly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_59\n\nLANGUAGE: sql\nCODE:\n```\nMODE(expr)\n```\n\n----------------------------------------\n\nTITLE: Using LOG Function in SQL\nDESCRIPTION: The LOG function returns the logarithm of expr1 to the base of expr2. If expr2 is omitted, it returns the natural logarithm of expr1. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nLOG(expr1[, expr2])\n```\n\n----------------------------------------\n\nTITLE: TDengine REST Connection Initialization\nDESCRIPTION: Function to establish connection with taosAdapter REST service. Accepts connection parameters including credentials, host details and database name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef connect(**kwargs) -> TaosRestConnection\n```\n\n----------------------------------------\n\nTITLE: Configuring taos.cfg for TDengine\nDESCRIPTION: This snippet demonstrates how to modify the `taos.cfg` file to set the TDengine server's endpoint.  The `firstEP` parameter needs to be updated with the correct server address and port.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/_windows_install.mdx#2025-04-16_snippet_0\n\nLANGUAGE: cfg\nCODE:\n```\n\"firstEP = h1.tdengine.com:6030\"\n```\n\n----------------------------------------\n\nTITLE: EMQX SQL Field Configuration\nDESCRIPTION: This SQL snippet is used within the EMQX rule engine to select the 'payload' from the 'sensor/data' topic. The payload represents the entire message body, which will be processed and inserted into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/09-emq-broker.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  payload\nFROM\n  \"sensor/data\"\n```\n\n----------------------------------------\n\nTITLE: Listing Icinga2 Supertables in TDengine\nDESCRIPTION: SQL command to display all supertables created by Icinga2 monitoring data\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/07-icinga2.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ntaos> show stables;\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows Once in TDengine (C)\nDESCRIPTION: Retrieves the number of rows affected by a single bound statement execution. It takes a pointer to a valid pre-compiled SQL statement object as input. Returns the number of affected rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_affected_rows_once(WS_STMT *stmt)\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumer in Node.js\nDESCRIPTION: This Node.js snippet shows how to create a WebSocket consumer for processing messages. The implementation requires the Node.js example file to define connection settings and message processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n{{#include docs/examples/node/websocketexample/tmq_example.js:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping taosExplorer Service\nDESCRIPTION: These shell commands demonstrate how to start and stop the taosExplorer service on both Linux and Windows operating systems using `systemctl` and `sc.exe` respectively. They provide a platform-specific way to manage the taosExplorer service lifecycle.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/07-explorer.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsystemctl start taos-explorer  # Linux\nsc.exe start taos-explorer # Windows\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsystemctl stop taos-explorer  # Linux\nsc.exe stop taos-explorer # Windows\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter SQL Type Name in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the SQL type name of a specified parameter. Takes the parameter index as input and returns a string representing the SQL type name. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_89\n\nLANGUAGE: Java\nCODE:\n```\nString getParameterTypeName(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Time Window Aggregation Query\nDESCRIPTION: Advanced time-window query showing average voltage per minute, partitioned by table name, with start and end timestamps displayed\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/03-query.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tbname, _wstart, _wend, avg(voltage) \nFROM meters \nWHERE ts >= \"2022-01-01T00:00:00+08:00\" \nAND ts < \"2022-01-01T00:05:00+08:00\" \nPARTITION BY tbname \nINTERVAL(1m, 5s) \nSLIMIT 2;\n```\n\n----------------------------------------\n\nTITLE: Getting Current TDengine Database\nDESCRIPTION: Function to retrieve the current database name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_60\n\nLANGUAGE: c\nCODE:\n```\nint taos_get_current_db(TAOS *taos, char *database, int len, int *required)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database in TDengine\nDESCRIPTION: SQL statement to create a new database named 'power' with millisecond precision, 3650 days data retention, 10-day duration for data files, and 16MB memory buffer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE power PRECISION 'ms' KEEP 3650 DURATION 10 BUFFER 16;\n```\n\n----------------------------------------\n\nTITLE: Defining TMQ Result Types Enumeration in C\nDESCRIPTION: Defines an enumeration for TMQ result types, including invalid, data, table metadata, and combined metadata and data types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_92\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum tmq_res_t {\n  TMQ_RES_INVALID = -1,   // Invalid\n  TMQ_RES_DATA = 1,       // Data type\n  TMQ_RES_TABLE_META = 2, // Metadata type\n  TMQ_RES_METADATA = 3    // Both metadata and data types, i.e., automatic table creation\n} tmq_res_t;\n```\n\n----------------------------------------\n\nTITLE: Consumer Record Access Methods\nDESCRIPTION: Interface methods for accessing message record details including topic, database name, group ID, and offset information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_100\n\nLANGUAGE: Java\nCODE:\n```\nString getTopic()\nString getDbName()\nint getVGroupId()\nV value()\nlong getOffset()\n```\n\n----------------------------------------\n\nTITLE: Go SQL Execution with Request ID\nDESCRIPTION: Example of executing SQL query with a request ID using Go connector\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/queryreqid/main.go:query_id}}\n```\n\n----------------------------------------\n\nTITLE: Including TDengine Connection Example in C\nDESCRIPTION: A preprocessor include directive that references an external C code file containing TDengine connection example code. The file path suggests this is part of the documentation examples.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_c.mdx#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/connect_example.c}}\n```\n\n----------------------------------------\n\nTITLE: 查看所有主题的SQL语法\nDESCRIPTION: 显示当前数据库下所有数据订阅主题的信息。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TOPICS;\n```\n\n----------------------------------------\n\nTITLE: Viewing Advanced Analytics Services in TDengine CLI\nDESCRIPTION: SQL command to display detailed information about advanced analytics services provided by anodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ANODES FULL;\n```\n\n----------------------------------------\n\nTITLE: Creating Dual Replica Database\nDESCRIPTION: SQL command to create a database with two replicas, specifying vgroups and other configuration parameters\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/18-ha/02-replica2.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate database <dbname> replica 2 vgroups xx buffer xx ...\n```\n\n----------------------------------------\n\nTITLE: Example Subscription Configuration in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration example for setting up subscriptions using taosBenchmark. This snippet is a placeholder for the actual tmq.json file content.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{{#include /TDengine/tools/taos-tools/example/tmq.json}}\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark Without Parameters\nDESCRIPTION: Executes taosBenchmark in no parameter mode to perform a default write performance test on TDengine using predefined configuration settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Startup Parameters for TLS\nDESCRIPTION: This snippet outlines the necessary startup parameters for Traefik to enable TLS certificate resolution and configure the server's networking rules. These parameters help in setting up the ACME DNS challenge for automatic certificate management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik:\nimage: \"traefik:v2.3.2\"\nhostname: \"traefik\"\nnetworks:\n- traefik\ncommand:\n- \"--log.level=INFO\"\n- \"--api.insecure=true\"\n- \"--providers.docker=true\"\n- \"--providers.docker.exposedbydefault=false\"\n- \"--providers.docker.swarmmode=true\"\n- \"--providers.docker.network=traefik\"\n- \"--providers.docker.watch=true\"\n- \"--entrypoints.http.address=:80\"\n- \"--entrypoints.https.address=:443\"\n- \"--certificatesresolvers.default.acme.dnschallenge=true\"\n- \"--certificatesresolvers.default.acme.dnschallenge.provider=alidns\"\n- \"--certificatesresolvers.default.acme.dnschallenge.resolvers=ns1.alidns.com\"\n- \"--certificatesresolvers.default.acme.email=linhehuo@gmail.com\"\n- \"--certificatesresolvers.default.acme.storage=/letsencrypt/acme.json\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a View in TDengine SQL\nDESCRIPTION: Command to remove a view from the database. The IF EXISTS clause prevents an error if the view doesn't exist.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW [IF EXISTS] [db_name.]view_name;\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: WorkTask\nDESCRIPTION: This class represents a worker thread that reads data from a mock data source and writes it to TDengine using standard JDBC `addBatch` interface.  It is designed to work with a specific data source, handling a range of sub-tables, and its operation blocks when the efficient writing backend queue is full.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/WorkTask.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentiles with PERCENTILE() in TDengine SQL\nDESCRIPTION: Computes percentile values for a column. Can calculate multiple percentiles in a single call. Returns DOUBLE for single percentile or JSON array for multiple percentiles. Applicable to numeric columns in tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\nPERCENTILE(expr, p [, p1] ... )\n```\n\n----------------------------------------\n\nTITLE: Executes Prepared Statement - TDengine C\nDESCRIPTION: Executes the prepared SQL statement with the bound parameters. Executes once per statement preparation session and outputs 0 for success or non-zero for failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_76\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_execute(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Calculating Approximate Percentile with APERCENTILE() in TDengine SQL\nDESCRIPTION: Computes the approximate percentile of a column's values. Similar to PERCENTILE but returns an approximate result. Supports different algorithms and can be used on tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_41\n\nLANGUAGE: sql\nCODE:\n```\nAPERCENTILE(expr, p [, algo_type])\n\nalgo_type: {\n    \"default\"\n  | \"t-digest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Disk Usage by Module in TDengine\nDESCRIPTION: SQL query to retrieve detailed disk usage information broken down by module for a specific database from the INFORMATION_SCHEMA.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nSELECT * FROM INFORMATION_SCHEMA.INS_DISK_USAGE WHERE db_name='db_name';\n```\n\n----------------------------------------\n\nTITLE: Fetch Size Configuration in TDengine JDBC\nDESCRIPTION: Method to set the number of rows that should be fetched from the database when more rows are needed. Acts as a hint to the JDBC driver to optimize memory usage and network performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\nvoid setFetchSize(int rows) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Sets Table Name for SQL Statement - TDengine C\nDESCRIPTION: Binds a specific table name to a precompiled INSERT SQL statement when a placeholder is present. This function supports version 2.1.1.0 and above.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_72\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_set_tbname(TAOS_STMT* stmt, const char* name)\n```\n\n----------------------------------------\n\nTITLE: Batch Statement Clearing in TDengine JDBC\nDESCRIPTION: Method to clear all commands in the current batch of a Statement object. Removes all previously added SQL statements without executing them.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nvoid clearBatch() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Getting Committed Offsets in TDengine (TypeScript)\nDESCRIPTION: Retrieves the last committed offsets for a set of partitions. Takes an array of TopicPartition objects and returns an updated array with the last committed offsets. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync committed(partitions:Array<TopicPartition>, reqId?:number):Promise<Array<TopicPartition>>\n```\n\n----------------------------------------\n\nTITLE: Getting TDengine Client Information in C\nDESCRIPTION: Retrieve the client version information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nchar *taos_get_client_info()\n```\n\n----------------------------------------\n\nTITLE: Listing UDFs in TDengine\nDESCRIPTION: Query to show all custom UDF functions registered in the TDengine system. The output confirms the 'myfun' function has been successfully created and is available for use.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_24\n\nLANGUAGE: text\nCODE:\n```\ntaos> show functions;\n              name              |\n=================================\n myfun                          |\nQuery OK, 1 row(s) in set (0.005767s)\n```\n\n----------------------------------------\n\nTITLE: ASCII Function in TDengine SQL\nDESCRIPTION: Returns the ASCII code of the first character in a string. Supports VARCHAR and NCHAR types, and works with nested subqueries. Returns NULL if input is NULL.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nASCII(expr)\n```\n\n----------------------------------------\n\nTITLE: Access TDengine CLI in Docker\nDESCRIPTION: This snippet shows how to access the TDengine CLI inside a running Docker container. It uses the docker exec command to execute the taos command within the tdengine container, opening an interactive session with the TDengine CLI.  The show databases command is then executed within the TDengine CLI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"$ docker exec -it tdengine taos\n\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\nQuery OK, 2 rows in database (0.033802s)\"\n```\n\n----------------------------------------\n\nTITLE: Disk Usage Monitoring Query\nDESCRIPTION: SQL query to monitor disk capacity usage of dnode nodes with an 80% threshold\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect now(), dnode_id, data_dir_level, data_dir_name, last(used) / last(total) * 100 as used from log.taosd_dnodes_data_dirs where _ts >= (now - 5m) and _ts < now partition by dnode_id, data_dir_level, data_dir_name\n```\n\n----------------------------------------\n\nTITLE: Displaying VGROUPs Information in TDengine SQL\nDESCRIPTION: Shows information about all virtual groups (VGROUPs) in the specified database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [db_name.]VGROUPS;\n```\n\n----------------------------------------\n\nTITLE: Event Window Query with Minimum Duration in TDengine SQL\nDESCRIPTION: This query uses the TRUE_FOR parameter with EVENT_WINDOW to set a minimum duration of 3 seconds for event windows. Windows shorter than this duration are automatically discarded.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, _wend, count(*) from t event_window start with c1 > 0 end with c2 < 10 true_for (3s);\n```\n\n----------------------------------------\n\nTITLE: Getting Stmt2 object from Connector in af package (v3.6.0+)\nDESCRIPTION: This function returns a Stmt2 object associated with the provided Connector, allowing for further operations on the connection with parameter binding. It takes a request ID and a flag indicating single table binding and returns a Stmt2 object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n\"func (conn *Connector) Stmt2(reqID int64, singleTableBindOnce bool) *Stmt2\"\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Time Range During DST End (SQL)\nDESCRIPTION: These SQL queries demonstrate the behavior of querying specific time ranges during the DST end transition. The first query only finds data at the first occurrence of 2:00 AM, while the second query finds multiple rows including repeated timestamps.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ts, to_iso8601(ts,'Z'), TO_CHAR(ts, 'YYYY-MM-DD HH:mi:ss') FROM t1 WHERE ts >= '2024-10-27 02:00:00' AND ts <= '2024-10-27 02:57:00.999';\n\nSELECT ts, to_iso8601(ts,'Z'), TO_CHAR(ts, 'YYYY-MM-DD HH:mi:ss') FROM t1 WHERE ts >= '2024-10-27 02:00:00' AND ts <= '2024-10-27 02:57:35';\n```\n\n----------------------------------------\n\nTITLE: Java SQL Execution with Request ID\nDESCRIPTION: Example of executing SQL query with a request ID using Java JDBC connector\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_33\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/JdbcReqIdDemo.java:with_reqid}}\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster Nodes with SQL\nDESCRIPTION: SQL commands to create and configure data nodes in a TDengine cluster with multiple nodes and replicas\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/18-ha/02-replica2.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE dnode <dnode_ep> port <dnode_port>;\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing TDengine Connector Plugin\nDESCRIPTION: This script clones the TDengine Kafka Connector repository, compiles the plugin using Maven, and installs it into the Kafka Connect components directory.  It skips tests during the Maven build process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --branch 3.0 https://github.com/taosdata/kafka-connect-tdengine.git\ncd kafka-connect-tdengine\nmvn clean package -Dmaven.test.skip=true\nunzip -d $KAFKA_HOME/components/ target/components/packages/taosdata-kafka-connect-tdengine-*.zip\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - Rust\nDESCRIPTION: This Rust code snippet shows how to set up a WebSocket connection to the TDengine database. It references the connect function from the provided example file to demonstrate usage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/connect.rs}}\n```\n\n----------------------------------------\n\nTITLE: Using COLS Function in SQL\nDESCRIPTION: Returns values from multiple expressions based on the row selected by a single-row selection function like LAST or FIRST.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_64\n\nLANGUAGE: sql\nCODE:\n```\nCOLS(func(expr), output_expr1, [, output_expr2] ... )\n```\n\n----------------------------------------\n\nTITLE: Table Name Setting Method in Java\nDESCRIPTION: Method to set the table name for the current database operation. Throws SQLException if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_92\n\nLANGUAGE: Java\nCODE:\n```\nvoid setTableName(String name) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Behavior in JSON for TDengine taosBenchmark\nDESCRIPTION: Example JSON configuration for specifying query behavior, including query mode, number of times to run queries, and thread count.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"filetype\": \"query\",\n  \"query_mode\": \"taosc\",\n  \"query_times\": 1000,\n  \"specified_table_query\": {\n    \"threads\": 8,\n    \"sqls\": [\n      {\n        \"sql\": \"SELECT * FROM db.table LIMIT 10\",\n        \"result\": \"query_results.txt\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FLOOR Function in SQL\nDESCRIPTION: The FLOOR function returns the largest integer less than or equal to the specified field. It maintains the original data type and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nFLOOR(expr)\n```\n\n----------------------------------------\n\nTITLE: Viewing Column Compression Information in TDengine SQL\nDESCRIPTION: SQL command to display detailed information about a table, including the compression methods applied to each column. This helps verify the current compression settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/32-compress.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE [dbname.]tabName\n```\n\n----------------------------------------\n\nTITLE: Splitting Virtual Groups in TDengine\nDESCRIPTION: The `split vgroup` command is used to divide a vgroup into two in response to CPU or disk resource overloads. While the split is in progress, it may temporarily interrupt read and write operations and is limited to single-replica vgroups.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/04-maintenance.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nsplit vgroup <vgroup_id>\n```\n\n----------------------------------------\n\nTITLE: Modifying Tag Width in a Supertable\nDESCRIPTION: SQL command to increase the width of a variable-length tag in a supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name MODIFY tag tag_name data_type(length);\n```\n\n----------------------------------------\n\nTITLE: Statement Status Check in TDengine JDBC\nDESCRIPTION: Method to check if this Statement object has been closed. Returns true if the Statement has been closed and can no longer be used, false otherwise.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_30\n\nLANGUAGE: Java\nCODE:\n```\nboolean isClosed() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Getting Statement Error String in TDengine (C)\nDESCRIPTION: Retrieves error information when other STMT APIs return an error (error code or null pointer).  The function takes a pointer to a valid pre-compiled SQL statement object as input. Returns a pointer to a string containing the error message.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n\"const char *ws_stmt_errstr(WS_STMT *stmt)\"\n\n```\n\n----------------------------------------\n\nTITLE: Using result using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function retrieves the result set after executing a query via WebSocket. It returns a Rows object representing the result set and an error if the retrieval fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) UseResult() (*Rows, error)\"\n```\n\n----------------------------------------\n\nTITLE: Determining JSON Buffer Size Example in C\nDESCRIPTION: Example code demonstrating how to determine the required buffer size for JSON encoding by first calling json_dumpb with a NULL buffer, then allocating the appropriate space and performing the actual encoding.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nsize_t size = json_dumpb(json, NULL, 0, 0);\nif (size == 0)\n    return -1;\n\nchar *buf = alloca(size);\n\nsize = json_dumpb(json, buf, size, 0);\n```\n\n----------------------------------------\n\nTITLE: Check Read-Only Status using ResultSetMetaData in Java\nDESCRIPTION: This method checks whether a specified column is read-only. The column number starts from 1. It returns true if the column is read-only; otherwise, it returns false.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_75\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `boolean isReadOnly(int column) throws SQLException`\n  - **Interface Description**: Determines whether a specified column is read-only.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: Returns true if the column is read-only; otherwise, returns false.\n```\n\n----------------------------------------\n\nTITLE: HoltWinters FORECAST Function Call\nDESCRIPTION: This code snippet demonstrates how to use the FORECAST function with the HoltWinters algorithm. It predicts values for the i32 column, specifying a period of 10, multiplicative trend, and multiplicative seasonality.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/03-holtwinters.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nFORECAST(i32, \"algo=holtwinters,period=10,trend=mul,seasonal=mul\")\n```\n\n----------------------------------------\n\nTITLE: Setting WAL Parameters in TDengine SQL\nDESCRIPTION: SQL command showing WAL (Write-Ahead Logging) configuration with level 2 persistence and 3000ms fsync period for balanced reliability and performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/10-cache.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE POWER WAL_LEVEL 2 WAL_FSYNC_PERIOD 3000;\n```\n\n----------------------------------------\n\nTITLE: Resuming Stream Computing Task in TDengine SQL\nDESCRIPTION: This snippet uses the `RESUME STREAM` command to restart a paused stream computing task in TDengine. It optionally ignores data written during the pause with the `IGNORE UNTREATED` clause. The `IF EXISTS` clause prevents errors if the stream is absent.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/03-stream.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nRESUME STREAM [IF EXISTS] [IGNORE UNTREATED] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Count Window Query Results Example\nDESCRIPTION: Sample output showing the results of a count window query with window start/end times and counts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n         _wstart         |          _wend          |   count(*)    |\n=====================================================================\n 2022-01-01 00:00:00.000 | 2022-01-01 00:01:30.000 |          1000 |\n 2022-01-01 00:01:40.000 | 2022-01-01 00:03:10.000 |          1000 |\n 2022-01-01 00:03:20.000 | 2022-01-01 00:04:50.000 |          1000 |\n 2022-01-01 00:05:00.000 | 2022-01-01 00:06:30.000 |          1000 |\n 2022-01-01 00:06:40.000 | 2022-01-01 00:08:10.000 |          1000 |\n 2022-01-01 00:08:20.000 | 2022-01-01 00:09:50.000 |          1000 |\n 2022-01-01 00:10:00.000 | 2022-01-01 00:11:30.000 |          1000 |\n 2022-01-01 00:11:40.000 | 2022-01-01 00:13:10.000 |          1000 |\n 2022-01-01 00:13:20.000 | 2022-01-01 00:14:50.000 |          1000 |\n 2022-01-01 00:15:00.000 | 2022-01-01 00:16:30.000 |          1000\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in TDengine (TypeScript)\nDESCRIPTION: Commits the offset of the messages currently being processed. Returns an array of TopicPartition objects representing the consumption progress for each topic. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync commit(reqId?:number):Promise<Array<TopicPartition>>\n```\n\n----------------------------------------\n\nTITLE: Pulling a specific TDengine Docker image version\nDESCRIPTION: Command example for pulling a specific version (3.3.0.0) of the TDengine Docker image instead of the latest version.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull tdengine/tdengine:3.3.0.0\n```\n\n----------------------------------------\n\nTITLE: Using TRUNCATE Function in SQL\nDESCRIPTION: The TRUNCATE function truncates the specified value to a certain number of decimal places. It maintains the original data type and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_23\n\nLANGUAGE: SQL\nCODE:\n```\nTRUNCATE(expr, digits)\n```\n\n----------------------------------------\n\nTITLE: 删除消费组的SQL语法\nDESCRIPTION: 删除指定消费组，如果消费组中有活跃的消费者，可以使用FORCE参数强制删除。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDROP CONSUMER GROUP [IF EXISTS] [FORCE] cgroup_name ON topic_name;\n```\n\n----------------------------------------\n\nTITLE: Seeq Query Definition for Temperature Data\nDESCRIPTION: This JSON object defines a query to retrieve temperature data from the meter readings in TDengine using Seeq, specifying parameters for data management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"QueryDefinitions\": [\n        {\n            \"Name\": \"PowerNum\",\n            \"Type\": \"SIGNAL\",\n            \"Sql\": \"SELECT  ts, temperature FROM meters\",\n            \"Enabled\": true,\n            \"TestMode\": false,\n            \"TestQueriesDuringSync\": true,\n            \"InProgressCapsulesEnabled\": false,\n            \"Variables\": null,\n            \"Properties\": [\n                {\n                    \"Name\": \"Name\",\n                    \"Value\": \"Temperature\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Interpolation Method\",\n                    \"Value\": \"linear\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Maximum Interpolation\",\n                    \"Value\": \"2day\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                }\n            ],\n            \"CapsuleProperties\": null\n        }\n    ],\n    \"Type\": \"GENERIC\",\n    \"Hostname\": null,\n    \"Port\": 0,\n    \"DatabaseName\": null,\n    \"Username\": \"root\",\n    \"Password\": \"taosdata\",\n    \"InitialSql\": null,\n    \"TimeZone\": null,\n    \"PrintRows\": false,\n    \"UseWindowsAuth\": false,\n    \"SqlFetchBatchSize\": 100000,\n    \"UseSSL\": false,\n    \"JdbcProperties\": null,\n    \"GenericDatabaseConfig\": {\n        \"DatabaseJdbcUrl\": \"jdbc:TAOS-RS://127.0.0.1:6041/power?user=root&password=taosdata\",\n        \"SqlDriverClassName\": \"com.taosdata.jdbc.rs.RestfulDriver\",\n        \"ResolutionInNanoseconds\": 1000,\n        \"ZonedColumnTypes\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WAL Configuration Modification - SQL\nDESCRIPTION: This SQL command modifies the Write-Ahead Logging (WAL) retention period for a specified database in TDengine. It's important for resolving WAL configuration issues.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/09-backup.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER DATABASE test WAL_RETENTION_PERIOD 3600;\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Level via HTTP API - Shell Command\nDESCRIPTION: Example of using curl to dynamically set the log level to debug through the taosAdapter HTTP configuration API. Requires authentication with root credentials.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request PUT 'http://127.0.0.1:6041/config' \\\n-u root:taosdata \\\n--data '{\"log.level\": \"debug\"}'\n```\n\n----------------------------------------\n\nTITLE: Running TaosBenchmark Performance Test\nDESCRIPTION: Command to run TaosBenchmark for automatic data generation and performance testing\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/01-docker.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark -y\n```\n\n----------------------------------------\n\nTITLE: Verifying TDengine HTTP Service\nDESCRIPTION: This command verifies if the HTTP service in the container is available by sending a \"show databases\" query to the REST endpoint. It uses curl to send a request to the specified URL with basic authentication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u root:taosdata -d \"show databases\" localhost:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3.10 on Ubuntu\nDESCRIPTION: Series of commands to install Python 3.10 and related packages on Ubuntu for TDgpt local installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.10\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 2\nsudo update-alternatives --config python3\nsudo apt install python3.10-venv\nsudo apt install python3.10-dev\n```\n\n----------------------------------------\n\nTITLE: Time-Series Average Current Query\nDESCRIPTION: SQL query to calculate average current over time intervals with null filling for missing data points.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart as ts, avg(current) as current from power.meters where groupid in ($selected_groups) and ts > $from and ts < $to interval($interval) fill(null)\n```\n\n----------------------------------------\n\nTITLE: Message Consumer Implementation for TDengine in Java\nDESCRIPTION: The 'ConsumerTask' class receives messages from Kafka and writes them to TDengine, ensuring efficient data handling and processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/ConsumerTask.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Error String\nDESCRIPTION: Retrieves error information when other STMT APIs return an error code or null pointer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nconst char *ws_stmt_errstr(WS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Using ATAN Function in SQL\nDESCRIPTION: The ATAN function returns the arctangent of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nATAN(expr)\n```\n\n----------------------------------------\n\nTITLE: Manual Plugin Installation via grafana-cli\nDESCRIPTION: Command-line method to install TDengine Grafana plugin using grafana-cli tool, with sudo option for system-wide installation\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngrafana-cli plugins install tdengine-datasource\n# with sudo\nsudo -u grafana grafana-cli plugins install tdengine-datasource\n```\n\n----------------------------------------\n\nTITLE: Retrieving Version Information in TDengine\nDESCRIPTION: SQL commands to get client and server version numbers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CLIENT_VERSION();\nSELECT SERVER_VERSION();\n```\n\n----------------------------------------\n\nTITLE: Selecting Last Row Value in TDengine\nDESCRIPTION: This SQL query retrieves the value of the 'c1' column from the last row of a TDengine table. The LAST_ROW function provides access to the most recent data point in the table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/taosc_query-kill-slow-query.txt#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect LAST_ROW(c1) ; \n```\n\n----------------------------------------\n\nTITLE: Check Column Searchability using ResultSetMetaData in Java\nDESCRIPTION: This method checks if a specific column can be used in a WHERE clause. The column number starts from 1. It returns true if searchable, otherwise false.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_63\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `boolean isSearchable(int column) throws SQLException`\n  - **Interface Description**: Determines whether a specified column can be used in a WHERE clause.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: Returns true if the specified column can be used for searching; otherwise, returns false.\n```\n\n----------------------------------------\n\nTITLE: Getting Error String in TDengine WebSocket (C)\nDESCRIPTION: Retrieves the error message string for the last API call failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nconst char *ws_errstr(WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Statement Resource Management in TDengine JDBC\nDESCRIPTION: Method for releasing database and JDBC resources associated with a Statement object. Important for proper resource cleanup to prevent memory leaks and connection issues.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nvoid close() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Check Column Signed Status using ResultSetMetaData in Java\nDESCRIPTION: This method checks if the value of a specified column is a signed number. The column number starts from 1. It returns true if the column is signed, otherwise false.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_65\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `boolean isSigned(int column) throws SQLException`\n  - **Interface Description**: Determines whether the value of a specified column is a signed number.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: Returns true if the column value is signed; otherwise, returns false.\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from TMQ in Node.js\nDESCRIPTION: This Node.js snippet demonstrates unsubscribing from a TMQ topic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n    tmq.unsubscribe((err) => {\n        if (err) {\n            console.error('unsubscribe failed:', err);\n        } else {\n            console.log('unsubscribe succeeded');\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Measurement Points Usage Query\nDESCRIPTION: SQL query to monitor used measurement points against authorized limit with 90% threshold\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect now(), cluster_id, CASE WHEN max(grants_timeseries_total) > 0.0 THEN max(grants_timeseries_used) /max(grants_timeseries_total) * 100.0 ELSE 0.0 END AS result from log.taosd_cluster_info where _ts >= (now - 30s) and _ts < now partition by cluster_id having timetruncate(first(_ts), 1m) > 0\n```\n\n----------------------------------------\n\nTITLE: REST JDBC Connection URL\nDESCRIPTION: Example URL format for establishing a REST JDBC connection to TDengine. Uses port 6041 and requires REST driver class specification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:TAOS-RS://[host_name]:6041/[database_name]?user=[user]&password=[password]\n```\n\n----------------------------------------\n\nTITLE: Authorization Expiry Check Query\nDESCRIPTION: SQL query to monitor authorization expiration with 60-day warning threshold\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect now(), cluster_id, last(grants_expire_time) / 86400 as expire_time from log.taosd_cluster_info where _ts >= (now - 24h) and _ts < now partition by cluster_id having first(_ts) > 0\n```\n\n----------------------------------------\n\nTITLE: Displaying Super Table Creation Statement in TDengine SQL\nDESCRIPTION: Shows the creation statement for the specified super table (stable).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE STABLE [db_name.]stb_name;\n```\n\n----------------------------------------\n\nTITLE: Setting Nchar Value in Param object\nDESCRIPTION: Sets an Nchar value at the given offset within a Param object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_60\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetNchar(offset int, value string)\"\n```\n\n----------------------------------------\n\nTITLE: Using max_vol Aggregate Function\nDESCRIPTION: Shows the usage of the 'max_vol' function to find the maximum voltage from specified voltage columns and device ID in the 'battery' table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nselect max_vol(vol1, vol2, vol3, deviceid) from battery;\n```\n\n----------------------------------------\n\nTITLE: Accessing TDengine within Docker Container\nDESCRIPTION: This command executes the `taos` CLI within the running `tdengine` Docker container, allowing you to interact with the TDengine server directly. The `-it` flags allocate a pseudo-TTY and keep STDIN open, enabling interactive sessions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker exec -it tdengine taos\n```\n\n----------------------------------------\n\nTITLE: Selecting TDengine Database\nDESCRIPTION: Function to set the current default database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_59\n\nLANGUAGE: c\nCODE:\n```\nint taos_select_db(TAOS *taos, const char *db)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lossy Compression for Float and Double Types in TDengine\nDESCRIPTION: This shell command enables lossy compression for both float and double data types in TDengine. It sets the 'lossyColumns' parameter to compress float and double values using the TSZ algorithm.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nlossyColumns     float|double\n```\n\n----------------------------------------\n\nTITLE: WebSocket Parameter Binding in C#\nDESCRIPTION: This C# snippet illustrates using parameter binding via WebSocket connections in TDengine, aiming at improving data writing efficiency.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wsStmt/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Creation Statement in TDengine SQL\nDESCRIPTION: Shows the creation statement for the specified database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Using DATABASE Function in SQL\nDESCRIPTION: Returns the name of the current database. Returns NULL if no database is selected.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_76\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DATABASE();\n```\n\n----------------------------------------\n\nTITLE: Setting Display Width for Binary Data in TDengine\nDESCRIPTION: SQL command to adjust the maximum display width for binary data in the TDengine CLI to prevent content truncation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ntaos> SET MAX_BINARY_DISPLAY_WIDTH <nn>;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Database Catalog in Java\nDESCRIPTION: This method sets the default database catalog (or schema) for the current connection.  It throws an `SQLException` if the operation fails. Subsequent queries will use this catalog unless explicitly specified otherwise.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n\"`void setCatalog(String catalog) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring dataDir Parameter Format in TDengine\nDESCRIPTION: The format for configuring the dataDir parameter in TDengine, which defines the storage path, tier level, primary status, and file creation permissions for data storage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/01-arch.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndataDir data_path [tier_level] [primary] [disable_create_new_file]\n```\n\n----------------------------------------\n\nTITLE: Loading JDBC Driver in R\nDESCRIPTION: Initializes the TDengine JDBC driver for database connectivity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/43-r-lang.md#2025-04-16_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n# Load the JDBC driver\ndrv <- JDBC(\"com.taosdata.jdbc.TSDBDriver\", driverPath)\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for taosAdapter\nDESCRIPTION: This snippet is a Nginx configuration file designed for load balancing multiple taosAdapter instances. It defines upstream servers (dbserver, keeper, explorer) and uses proxy_pass to route traffic to these servers based on different ports and applications. The configuration includes settings for timeouts, connection upgrades for WebSocket, and load balancing algorithms (least_conn, ip_hash).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"user root;\nworker_processes auto;\nerror_log /var/log/nginx_error.log;\n\n\nevents {\n        use epoll;\n        worker_connections 1024;\n}\n\nhttp {\n\n    access_log off;\n\n    map $http_upgrade $connection_upgrade {\n        default upgrade;\n        ''      close;\n    }\n\n    server {\n        listen 6041;\n        location ~* {\n            proxy_pass http://dbserver;\n            proxy_read_timeout 600s;\n            proxy_send_timeout 600s;\n            proxy_connect_timeout 600s;\n            proxy_next_upstream error http_502 non_idempotent;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $http_connection;\n        }\n    }\n    server {\n        listen 6043;\n        location ~* {\n            proxy_pass http://keeper;\n            proxy_read_timeout 60s;\n            proxy_next_upstream error  http_502 http_500  non_idempotent;\n        }\n    }\n\n    server {\n        listen 6060;\n        location ~* {\n            proxy_pass http://explorer;\n            proxy_read_timeout 60s;\n            proxy_next_upstream error  http_502 http_500  non_idempotent;\n        }\n    }\n    upstream dbserver {\n        least_conn;\n        server 172.16.214.201:6041 max_fails=0;\n        server 172.16.214.202:6041 max_fails=0;\n        server 172.16.214.203:6041 max_fails=0;\n    }\n    upstream keeper {\n        ip_hash;\n        server 172.16.214.201:6043 ;\n        server 172.16.214.202:6043 ;\n        server 172.16.214.203:6043 ;\n    }\n    upstream explorer{\n        ip_hash;\n        server 172.16.214.201:6060 ;\n        server 172.16.214.202:6060 ;\n        server 172.16.214.203:6060 ;\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Event Window Query in TDengine SQL\nDESCRIPTION: This query showcases the EVENT_WINDOW clause, which defines windows based on start and end conditions. It counts the number of events between when c1 > 0 and c2 < 10.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, _wend, count(*) from t event_window start with c1 > 0 end with c2 < 10 \n```\n\n----------------------------------------\n\nTITLE: Importing Measure Data from TDengine - SQL\nDESCRIPTION: This SQL query fetches the average current, voltage, and phase of each smart meter in 1-hour time windows, necessary for importing measure data into Power BI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"select tbname, _wstart ws, avg(current), avg(voltage), avg(phase) from test.meters PARTITION by tbname interval(1h)\"\n```\n\n----------------------------------------\n\nTITLE: Session Window Query in TDengine SQL\nDESCRIPTION: This query demonstrates the use of the SESSION clause to create session windows based on timestamp intervals. The 'tol_val' parameter defines the maximum gap between timestamps within a session.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*), FIRST(ts) FROM temp_tb_1 SESSION(ts, tol_val);\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Forecast Function in TDengine\nDESCRIPTION: This snippet demonstrates a query using the `forecast` function in TDengine. The error message indicates the analysis service timed out, suggesting the analysis process took longer than 60 seconds.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/10-faq.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n\"taos> select _frowts,forecast(current, 'algo=arima, alpha=95, wncheck=0, rows=20') from d1 where ts<='2017-07-14 10:40:09.999';\n\nDB error: Analysis service can't access[0x80000441] (60.195613s)\"\n```\n\n----------------------------------------\n\nTITLE: Creating TDengine Source Connector Instance\nDESCRIPTION: cURL command to create a Source Connector instance by posting the configuration JSON to the Kafka Connect REST API, which initiates the data synchronization process from TDengine to Kafka.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -d @source-demo.json http://localhost:8083/connectors -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New TMQ Configuration Object in C\nDESCRIPTION: Function that creates a new TMQ configuration object used to configure the behavior and characteristics of TMQ consumers. Returns a pointer to a ws_tmq_conf_t structure on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nws_tmq_conf_t *ws_tmq_conf_new(void);\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows in TDengine (C)\nDESCRIPTION: Retrieves the number of rows affected after executing a pre-compiled SQL statement. It takes a pointer to a valid pre-compiled SQL statement object as input. Returns the number of affected rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_affected_rows(WS_STMT *stmt)\"\n\n```\n\n----------------------------------------\n\nTITLE: Fetch Direction Configuration in TDengine JDBC\nDESCRIPTION: Method to get the direction for fetching rows from the database. TDengine only supports FETCH_FORWARD direction for retrieving rows in sequential order.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nint getFetchDirection() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine Server in C\nDESCRIPTION: Create a database connection and initialize connection context. Multiple connections to different TDengine clusters can be created in the same process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nTAOS *taos_connect(const char *ip, const char *user, const char *pass, const char *db, uint16_t port)\n```\n\n----------------------------------------\n\nTITLE: Using result using Stmt2 object in af package (v3.6.0+)\nDESCRIPTION: This function retrieves the result set after executing a query using the Stmt2 object. It returns a driver.Rows object representing the result set and an error if the retrieval fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_27\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt2) UseResult() (driver.Rows, error)\"\n```\n\n----------------------------------------\n\nTITLE: JSON Object Key-Value Iteration Example in C\nDESCRIPTION: Demonstrates how to iterate through a JSON object's key-value pairs using json_object_iter functions. Shows basic iteration pattern for accessing keys and values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n/* obj is a JSON object */\nconst char *key;\njson_t *value;\n\nvoid *iter = json_object_iter(obj);\nwhile(iter)\n{\n    key = json_object_iter_key(iter);\n    value = json_object_iter_value(iter);\n    /* use key and value ... */\n    iter = json_object_iter_next(obj, iter);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Single Execution Affected Rows\nDESCRIPTION: Retrieves the number of rows affected by a single bound statement execution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_affected_rows_once(WS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using WebSocket in Python\nDESCRIPTION: This Python snippet demonstrates how to insert data into TDengine using a WebSocket connection. It establishes a WebSocket connection and sends SQL INSERT commands to write data into subtables d1001 and d1002 under the `meters` supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n```python title=\"WebSocket Connection\"\n{{#include docs/examples/python/insert_ws.py}}\n```\n```\n\n----------------------------------------\n\nTITLE: Function Execution Error Codes\nDESCRIPTION: Error codes for function parameter validation, input type checking, and runtime execution issues in database functions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nError codes 0x80002800 - 0x80002805\n```\n\n----------------------------------------\n\nTITLE: Creating Stream with Historical Data Processing in SQL\nDESCRIPTION: Creates a stream that processes historical data by using the fill_history option. This allows the stream to process data written before, during, and after its creation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate stream if not exists s1 fill_history 1 into st1  as select count(*) from t1 interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Export User and Permission Information\nDESCRIPTION: This command exports user information, permissions, and whitelist information from a TDengine cluster (hostA) to another TDengine cluster (hostB) using taosX. It uses the `privileges` command with the `-f` (source) and `-t` (target) parameters, specifying the connection details for each cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx privileges -f \\\"taos://root:taosdata@hostA:6030\\\" \\\n  -t \\\"taos+ws://root:password@hostB:6041\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets Manually in C\nDESCRIPTION: This C snippet demonstrates how to manually commit consumer progress using `tmq_commit_sync` function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint manual_commit(tmq_t* tmq) {\n  if (tmq_commit_sync(tmq) != 0) {\n    fprintf(stderr, \"failed to commit: %s\\n\", tmq_err2str(tmq_errno));\n    return -1;\n  }\n  printf(\"commit done\\n\");\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using MAX Function in SQL\nDESCRIPTION: Returns the maximum value in a column. Supports numeric types, VARCHAR, and NCHAR data types. String support was added in v3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_57\n\nLANGUAGE: sql\nCODE:\n```\nMAX(expr)\n```\n\n----------------------------------------\n\nTITLE: Terminating Transaction in TDengine SQL\nDESCRIPTION: This SQL command terminates a specific transaction in TDengine. The trans_id parameter is obtained through the 'SHOW TRANSACTIONS' command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nKILL TRANSACTION trans_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js Consumer Parameters\nDESCRIPTION: Highlights the use of `WS_URL` for Node.js consumers alongside standard configuration items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_5\n\nLANGUAGE: node\nCODE:\n```\nThe `WS_URL` parameter is provided to indicate the server address to connect to, other parameters are the same as the common basic configuration items.\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date in TDengine\nDESCRIPTION: SQL command to retrieve current date.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TODAY();\n```\n\n----------------------------------------\n\nTITLE: Show Stables Query (TDengine CLI)\nDESCRIPTION: This shell command shows how to query the super tables in the `power` database using the TDengine CLI. It lists the available super tables including `meter_current`, `stb0_0`, and `meters`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"taos> show power.stables;\\n          stable_name           |\\n=================================\\n meter_current                  |\\n stb0_0                         |\\n meters                         |\\nQuery OK, 3 row(s) in set (0.002527s)\"\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in Node.js\nDESCRIPTION: This Node.js snippet demonstrates committing offsets in a TMQ consumer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n    tmq.commit((err) => {\n        if (err) {\n            console.error('commit failed:', err);\n        } else {\n            console.log('commit succeeded');\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Message Subscription Authorization\nDESCRIPTION: SQL commands to grant subscription permissions for message topics\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ngrant privileges on priv_level to user_name\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant subscribe on topic_name to test\n```\n\n----------------------------------------\n\nTITLE: Viewing Client Configuration in TDengine SQL\nDESCRIPTION: Displays the current client configuration parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSHOW LOCAL VARIABLES;\n```\n\n----------------------------------------\n\nTITLE: Creating DNODE with Separate Host and Port in TDengine SQL\nDESCRIPTION: New syntax in TDengine 3.0 for creating a DNODE by specifying the hostname and port number separately.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/30-changes.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE DNODE dnode_host_name PORT port_val\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module\nDESCRIPTION: This snippet initializes a new Go module for the demo project. The 'go mod init demo' command sets up the module with the name 'demo'. The subsequent commands ensure that all dependencies are resolved and the module is built. The 'go mod tidy' command cleans up any unused dependencies, while 'go build' compiles the module into an executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/go/BUILD.md#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo mod init demo\n```\n\nLANGUAGE: Go\nCODE:\n```\ngo mod tidy\n```\n\nLANGUAGE: Go\nCODE:\n```\ngo build\n```\n\n----------------------------------------\n\nTITLE: Inserting Raw Schemaless Data with TTL in TDengine (C API)\nDESCRIPTION: This C API function allows inserting schemaless data into TDengine with a specified TTL (Time-To-Live). It takes a database connection, raw data, data length, a pointer to store the number of inserted rows, protocol type, precision, and the TTL value as input. The function returns a TAOS_RES pointer, which must be freed by the caller to prevent memory leaks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_88\n\nLANGUAGE: C\nCODE:\n```\n\"TAOS_RES *taos_schemaless_insert_raw_ttl(TAOS *taos, char *lines, int len, int32_t *totalRows, int protocol, int precision, int32_t ttl)\"\n```\n\n----------------------------------------\n\nTITLE: Executing a batch using Stmt2 object in af package (v3.6.0+)\nDESCRIPTION: This function executes the batched SQL statements using the Stmt2 object. It returns an error if the execution fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt2) Execute() error\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Consumer Information in TDengine SQL\nDESCRIPTION: Shows information about all consumers in the current database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CONSUMERS;\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in taosExplorer\nDESCRIPTION: Sets up SSL for the taosExplorer component through its TOML configuration file, specifying paths to the SSL certificate and private key. Access must then be secured over HTTPS.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[ssl]\n# SSL certificate file\ncertificate = \"/path/to/ca.file\"\n\n# SSL certificate private key\ncertificate_key = \"/path/to/key.file\"\n```\n\n----------------------------------------\n\nTITLE: Grouped Time-Series Current Analysis\nDESCRIPTION: SQL query to analyze average current over time intervals, grouped by groupid with partition by clause.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart as ts, groupid, avg(current) as current from power.meters where ts > $from and ts < $to partition by groupid interval($interval) fill(null)\n```\n\n----------------------------------------\n\nTITLE: INS_TAGS Schema Definition\nDESCRIPTION: System table containing information about table tags including their names, types, and values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/22-meta.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Column Name | Data Type     | Description |\n| table_name  | VARCHAR(192)  | Table name |\n| db_name     | VARCHAR(64)   | Name of the database the table belongs to |\n| stable_name | VARCHAR(192)  | Name of the supertable |\n| tag_name    | VARCHAR(64)   | Name of the tag |\n| tag_type    | VARCHAR(64)   | Type of the tag |\n| tag_value   | VARCHAR(16384)| Value of the tag |\n```\n\n----------------------------------------\n\nTITLE: Creating a database using TDengine REST API\nDESCRIPTION: This snippet demonstrates how to create a new database in TDengine using the REST API. It uses a `curl` command to send an HTTP request with a SQL command to create the database. It includes two authorization methods: Basic authentication and Taosd authentication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/60-rest-api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -H \"Authorization: Basic cm9vdDp0YW9zZGF0YQ==\" -d \"create database demo\" 192.168.0.1:6041/rest/sql\ncurl -L -H \"Authorization: Taosd /KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04\" -d \"create database demo\" 192.168.0.1:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Parsing Data to JSON in C\nDESCRIPTION: This function takes an input payload and transforms it into a JSON format, using the parser initialized earlier. It needs pointers to the input payload and output JSON, along with their respective lengths. The function returns NULL upon success, indicating that the operation completed as expected.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nconst char* parser_mutate(\n  void* parser,\n  const uint8_t* in_ptr, uint32_t in_len,\n  const void* uint8_t* out_ptr, uint32_t* out_len\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Data Node in TDengine SQL\nDESCRIPTION: Removes a data node from the cluster with options for force deletion and unsafe removal of offline nodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP DNODE dnode_id [force] [unsafe]\n```\n\n----------------------------------------\n\nTITLE: Native Protocol Check Method in Rust\nDESCRIPTION: Method to determine if the connection uses a native protocol. Returns a boolean indicating the protocol type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub fn is_native(&self) -> bool\n```\n\n----------------------------------------\n\nTITLE: Verifying TDengine container status\nDESCRIPTION: Command to check if the TDengine Docker container is running properly by listing all running containers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Getting affected rows using Stmt object in af package\nDESCRIPTION: This function retrieves the number of rows affected by the executed SQL statement. It is called on a Stmt object and returns the affected rows count.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) GetAffectedRows() int\"\n```\n\n----------------------------------------\n\nTITLE: Querying Repeated Time Range During DST End (SQL)\nDESCRIPTION: This SQL query selects timestamps between 2:00 AM and 3:00 AM on the day DST ends, which includes a repeated time range. The result shows all data points, including the repeated timestamps.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ts, to_iso8601(ts,'Z'), TO_CHAR(ts, 'YYYY-MM-DD HH:mi:ss') FROM t1 WHERE ts BETWEEN '2024-10-27 02:00:00' AND '2024-10-27 03:00:00';\n```\n\n----------------------------------------\n\nTITLE: Rust Cargo Configuration for TDengine Connector\nDESCRIPTION: Adds TDengine Rust connector dependency with optional WebSocket feature selection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/index.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ntaos = { version = \"*\"}\n```\n\nLANGUAGE: toml\nCODE:\n```\ntaos = { version = \"*\", default-features = false, features = [\"ws\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Cache in TDengine SQL\nDESCRIPTION: SQL command demonstrating metadata cache configuration with 128 pages of 16KB each per vnode in the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/10-cache.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE POWER PAGES 128 PAGESIZE 16;\n```\n\n----------------------------------------\n\nTITLE: Displaying Transaction Information in TDengine SQL\nDESCRIPTION: Shows information about all transactions or a specific transaction currently being executed in the system. These transactions are only for metadata level, not for regular tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TRANSACTIONS;\nSHOW TRANSACTION [transaction_id];\n```\n\n----------------------------------------\n\nTITLE: Setting Event Notification Callback in TDengine C Client\nDESCRIPTION: Set a callback function to be notified of events such as password changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nint taos_set_notify_cb(TAOS *taos, __taos_notify_fn_t fp, void *param, int type)\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Parameter in JDBC PreparedStatement (Java)\nDESCRIPTION: Sets the value of a specified parameter to a Java boolean in a PreparedStatement. Takes the parameter index and boolean value as inputs. Throws SQLException on database access errors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_78\n\nLANGUAGE: Java\nCODE:\n```\nvoid setBoolean(int parameterIndex, boolean x) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Applying TDengine Service Configuration Using kubectl\nDESCRIPTION: This snippet applies the TDengine service configuration from a YAML file to the specified namespace, setting up a three-node TDengine cluster. The required namespace should be created beforehand.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f taosd-service.yaml -n tdengine-test\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in Go\nDESCRIPTION: This Go snippet demonstrates committing offsets in a TMQ consumer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n\terr = consumer.Commit()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Level Storage\nDESCRIPTION: This snippet shows how to configure multi-level storage in TDengine by setting the dataDir parameter in the /etc/taos/taos.cfg file. Each dataDir entry specifies the path, storage level (0, 1, or 2), and whether it's the primary mount point (1 for yes, 0 for no).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/12-multi.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"dataDir /mnt/data1 0 1\ndataDir /mnt/data2 0 0\ndataDir /mnt/data3 1 0\ndataDir /mnt/data4 1 0\ndataDir /mnt/data5 2 0\ndataDir /mnt/data6 2 0\"\n```\n\n----------------------------------------\n\nTITLE: Stopping a Replication Task (taosx)\nDESCRIPTION: This shell command stops a replication task, either for a specific database or all tasks associated with a replica ID, or all replication tasks on the instance. It allows granular control over which replication tasks are active.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica stop [id [db...]]\n```\n\n----------------------------------------\n\nTITLE: Creating Power Topic with Voltage Filter in TDengine SQL\nDESCRIPTION: Example of creating a topic to subscribe to smart meter data where voltage is greater than 200, returning only timestamp, current, and voltage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TOPIC power_topic AS SELECT ts, current, voltage FROM power.meters WHERE voltage > 200;\n```\n\n----------------------------------------\n\nTITLE: Setting a UTinyint value in Param object\nDESCRIPTION: This function sets a UTinyint value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the UTinyint value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_52\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetUTinyint(offset int, value uint)\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Field Struct in Rust\nDESCRIPTION: Provides methods for creating and managing database field information with support for field name, type, and byte length configuration\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/26-rust.mdx#2025-04-16_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\npub const fn empty() -> Field\n```\n\nLANGUAGE: Rust\nCODE:\n```\npub fn new(name: impl Into<String>, ty: Ty, bytes: u32) -> Field\n```\n\n----------------------------------------\n\nTITLE: TDengine Tiered Storage Configuration\nDESCRIPTION: Helm configuration for deploying TDengine with three-tiered storage configuration\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"tdengine\"\n\nimage:\n  repository:\n  server: tdengine/tdengine-ee\n\ntimezone: \"Asia/Shanghai\"\n\nservices:\n  server:\n    type: ClusterIP\n    replica: 1\n    ports:\n      tcp: [6041, 6030, 6060]\n      udp:\n    volumes:\n      - name: tier0\n        mountPath: /data/taos0/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: tier1\n        mountPath: /data/taos1/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: tier2\n        mountPath: /data/taos2/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n```\n\n----------------------------------------\n\nTITLE: Showing Supertables in Current Database\nDESCRIPTION: SQL query to display all supertables in the current database with optional filtering using wildcards.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW STABLES [LIKE tb_name_wildcard];\n```\n\n----------------------------------------\n\nTITLE: Compacting Data in TDengine\nDESCRIPTION: The SQL code provides commands for compacting data in TDengine databases. This includes removing file holes, invalid data, and improving data organization by merging multiple STT files. Compact tasks can be monitored with the SHOW command and halted with the KILL command, executed asynchronously, and might affect write operations depending on the settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/04-maintenance.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCOMPACT DATABASE db_name [start with 'XXXX'] [end with 'YYYY'] [META_ONLY];\nCOMPACT [db_name.]VGROUPS IN (vgroup_id1, vgroup_id2, ...) [start with 'XXXX'] [end with 'YYYY'] [META_ONLY];\nSHOW COMPACTS;\nSHOW COMPACT compact_id;\nKILL COMPACT compact_id;\n```\n\n----------------------------------------\n\nTITLE: Installing Helm for Kubernetes Package Management\nDESCRIPTION: This snippet provides instructions for downloading and installing Helm using a shell script, which is a package manager for Kubernetes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL -o get_helm.sh \\\n  https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x get_helm.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\n./get_helm.sh\n```\n\n----------------------------------------\n\nTITLE: Getting Error Information for TMQ Subscriptions in C\nDESCRIPTION: Function to obtain error information for TMQ data subscriptions. It takes a pointer to a TMQ consumer object and returns a string containing error information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nconst char *ws_tmq_errstr(ws_tmq_t *tmq)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Script with TDengine CLI\nDESCRIPTION: Shell command to run the prepared SQL script using the TDengine CLI, which creates the test database and populates it with sample data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ntaos -f prepare-source-data.sql\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name in TDengine (C)\nDESCRIPTION: Binds a specific table name when the table name in the SQL statement uses `?` as a placeholder. This function supports replacing parameter values in `INSERT` statements only. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_set_tbname(WS_STMT *stmt, const char *name)\"\n\n```\n\n----------------------------------------\n\nTITLE: Stream Subquery Syntax\nDESCRIPTION: Specifies the subquery syntax used within stream creation, including select list, from clause, conditions, and partitioning options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nsubquery: SELECT select_list\n    from_clause\n    [WHERE condition]\n    [PARTITION BY tag_list]\n    window_clause\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Hash Table Seeding in C\nDESCRIPTION: Function call to explicitly seed the hash table before spawning threads, ensuring thread-safe initialization of the hash function seed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/threadsafety.rst#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\njson_object_seed(0)\n```\n\n----------------------------------------\n\nTITLE: Closing TMQ Connection in TDengine (TypeScript)\nDESCRIPTION: Closes the TMQ connection. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync close():Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using Rust\nDESCRIPTION: This Rust snippet shows how to insert data into TDengine using the Rust connector. It uses the TDengine native client library to connect and execute SQL INSERT statements to insert data into the `meters` supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\n```rust\n{{#include docs/examples/rust/nativeexample/examples/insert.rs:insert_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic TDengine Helm Configuration\nDESCRIPTION: Basic configuration for deploying TDengine with single replica, defining storage volumes, ports, and basic server settings\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ntimezone: \"Asia/Shanghai\"\n\nlabels:\n  app: \"tdengine\"\n\nservices:\n  server:\n    type: ClusterIP\n    replica: 1\n    ports:\n      tcp: [6041, 6030, 6060]\n      udp:\n    volumes:\n      - name: data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n    files:\n      - name: cfg\n        mountPath: /etc/taos/taos.cfg\n        content: |\n          dataDir /var/lib/taos/\n          logDir /var/log/taos/\n```\n\n----------------------------------------\n\nTITLE: Creating Supertable Topic in TDengine SQL\nDESCRIPTION: SQL syntax for creating a topic to subscribe to all data in a supertable. This allows for structure changes and returns unstructured data that adapts to supertable modifications.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name [with meta] AS STABLE stb_name [where_condition]\n```\n\n----------------------------------------\n\nTITLE: Deleting an Anode in TDengine CLI\nDESCRIPTION: SQL command to remove an anode from the TDengine cluster by its ID.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nDROP ANODE {anode_id}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from TMQ in Rust\nDESCRIPTION: This Rust snippet shows how to unsubscribe from a TMQ topic, highlighting that the consumer cannot be reused after unsubscribing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nasync fn unsubscribe() -> Result<(), Error> {\n    let consumer = Consumer::new(vec![\"topic\"],\n    Options::default().group_id(\"test\")\n    .enable_auto_commit(false).client_id(\"cid\")).await?;\n    consumer.unsubscribe().await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Using UNIQUE Function in SQL\nDESCRIPTION: Returns distinct values from a column, similar to DISTINCT. For duplicate values, returns the one with the earliest timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_63\n\nLANGUAGE: sql\nCODE:\n```\nUNIQUE(expr)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up TDengine Cluster Resources\nDESCRIPTION: The snippet includes commands to clean up all resources related to the TDengine deployment, such as statefulsets, services, and persistent volume claims.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete statefulset -l app=tdengine -n tdengine-test\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete svc -l app=tdengine -n tdengine-test\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pvc -l app=tdengine -n tdengine-test\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete namespace tdengine-test\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive SQL Execution with TDengine CLI\nDESCRIPTION: Using the -s parameter to execute SQL commands non-interactively and exit immediately, suitable for automated scripts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntaos -h my-server -s \"use db; show tables;\"\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Data Retrieval from MySQL\nDESCRIPTION: SQL template used for querying data from MySQL with time range conditions. It includes placeholders for start and end times, and can include subtable field placeholders for data migration ordering.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/13-mysql.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from table where ts >= ${start} and ts < ${end} and ${col_name1} and ${col_name2}\n```\n\n----------------------------------------\n\nTITLE: TDengine CLI Prompt Display\nDESCRIPTION: How the TDengine CLI prompt appears after successful connection to the service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntaos>\n```\n\n----------------------------------------\n\nTITLE: CPU Load Monitoring Query\nDESCRIPTION: SQL query to monitor CPU load of dnode nodes with a 5-minute interval and 80% threshold\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect now(), dnode_id, last(cpu_system) as cup_use from log.taosd_dnodes_info where _ts >= (now- 5m) and _ts < now partition by dnode_id having first(_ts) > 0\n```\n\n----------------------------------------\n\nTITLE: Querying Date Range and Data Count\nDESCRIPTION: This SQL query retrieves the date range and data count for the time series data using a daily interval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart date, count(*) from test.meters interval(1d) having count(*)>0\n```\n\n----------------------------------------\n\nTITLE: Auto Window Offset Queries in TDengine SQL\nDESCRIPTION: These examples demonstrate the use of the AUTO keyword with INTERVAL for automatic window offset calculation. The offset is determined based on the presence and clarity of start time limits in the WHERE clause.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM meters WHERE _rowts >= '2018-10-03 14:38:05' INTERVAL (1m, AUTO);\n\nSELECT COUNT(*) FROM meters WHERE _rowts < '2018-10-03 15:00:00' INTERVAL (1m, AUTO);\n\nSELECT COUNT(*) FROM meters WHERE _rowts - voltage > 1000000;\n```\n\n----------------------------------------\n\nTITLE: Using ARIMA for Forecasting in SQL\nDESCRIPTION: This SQL snippet demonstrates how to use the ARIMA model for forecasting time-series data in TDengine. It specifies the ARIMA parameters such as period, start_p, max_p, start_q, and max_q for the 'i32' column and calculates the forecast within a 95% confidence interval. The snippet assumes the 'foo' table contains relevant time-series data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/02-arima.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _frowts, FORECAST(i32, \"algo=arima,alpha=95,period=10,start_p=1,max_p=5,start_q=1,max_q=5\") from foo\n```\n\n----------------------------------------\n\nTITLE: Native Connection String Example in C# for TDengine\nDESCRIPTION: Shows an example of a connection string for native connection to TDengine using C#. This string includes parameters for host, port, username, password, protocol, and database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n\"host=127.0.0.1;port=6030;username=root;password=taosdata;protocol=Native;db=test\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into TDengine using PHP\nDESCRIPTION: PHP code example showing how to insert data into a TDengine database. Demonstrates creating a table and inserting multiple rows of data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/45-php.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n{{#include docs/examples/php/insert.php}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Creation Statement in TDengine SQL\nDESCRIPTION: Shows the SQL statement used to create a specific database. Useful for database migration as executing this statement in another cluster will create a database with identical settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE DATABASE db_name \\G;\n```\n\n----------------------------------------\n\nTITLE: Packaging the JDBC Demo Application\nDESCRIPTION: This snippet demonstrates how to navigate to the example directory for the JDBC demo application and package it using Maven, skipping tests. Requires Maven and the TDengine JDBC driver to be properly configured.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/taosdemo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd tests/examples/JDBC/taosdemo\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Loading System Configuration on macOS\nDESCRIPTION: Shell command to load the maxfiles configuration into the macOS launchd system. This applies the new file limit settings without requiring a system restart.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Groups in TDengine\nDESCRIPTION: SQL query to select distinct group IDs from power meters table within a specified time range using Grafana variables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct(groupid) from power.meters where groupid < 3 and ts > $from and ts < $to;\n```\n\n----------------------------------------\n\nTITLE: Viewing All Databases in TDengine\nDESCRIPTION: SQL command to display all databases in the TDengine system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW DATABASES;\n```\n\n----------------------------------------\n\nTITLE: Cluster Configuration Parameters Table in Markdown\nDESCRIPTION: Table defining cluster-related configuration parameters including node management, threading, TTL settings, audit features, and internal parameters\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name         |Supported Version        |Dynamic Modification|Description|\n|-----------------------|-------------------------|--------------------|------------|\n|supportVnodes             |          |Supported, effective immediately  |Maximum number of vnodes supported by a dnode, range 0-4096, default value is twice the number of CPU cores + 5|\n```\n\n----------------------------------------\n\nTITLE: Opening a taosRestful connection\nDESCRIPTION: This code snippet demonstrates how to open a connection to TDengine using the `taosRestful` driver. It uses `sql.Open` with the driver name \"taosRestful\" and a DSN to connect to the database via REST.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar taosUri = \"root:taosdata@http(localhost:6041)/\"\ntaos, err := sql.Open(\"taosRestful\", taosUri)\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows Count in TDengine C Client\nDESCRIPTION: Get the number of rows affected by the executed SQL statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_35\n\nLANGUAGE: c\nCODE:\n```\nint taos_affected_rows(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Status Table Schema in SQL\nDESCRIPTION: SQL table schema for adapter_status that stores system metrics like memory usage, WebSocket connections and interface concurrency limits.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE adapter_status (\n  _ts TIMESTAMP,\n  go_heap_sys DOUBLE,\n  go_heap_inuse DOUBLE,\n  go_stack_sys DOUBLE,\n  go_stack_inuse DOUBLE,\n  rss DOUBLE,\n  ws_query_conn DOUBLE,\n  ws_stmt_conn DOUBLE,\n  ws_sml_conn DOUBLE,\n  ws_ws_conn DOUBLE,\n  ws_tmq_conn DOUBLE,\n  async_c_limit DOUBLE,\n  async_c_inflight DOUBLE,\n  sync_c_limit DOUBLE,\n  sync_c_inflight DOUBLE,\n  endpoint NCHAR,\n)\n```\n\n----------------------------------------\n\nTITLE: Invalid Sliding Window Query in TDengine SQL\nDESCRIPTION: This snippet shows an invalid SQL query where the SLIDING time exceeds the INTERVAL time. The forward sliding time of SLIDING cannot be greater than the time range of one window.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM temp_tb_1 INTERVAL(1m) SLIDING(2m);\n```\n\n----------------------------------------\n\nTITLE: User-Defined Function (UDF) Error Management\nDESCRIPTION: Error codes related to UDF loading, execution, pipe communication, and language support for custom function implementations\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nError codes 0x80002901 - 0x8000290A\n```\n\n----------------------------------------\n\nTITLE: 查看订阅信息的SQL语法\nDESCRIPTION: 显示主题在不同vgroup上的消费信息，可用于监控和查看各个主题的消费进度。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SUBSCRIPTIONS;\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Distribution Information in TDengine SQL\nDESCRIPTION: Shows the data distribution information of a specified table, including block statistics, row counts, and physical distribution details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE DISTRIBUTED table_name;\n```\n\n----------------------------------------\n\nTITLE: Building a Topic List for TMQ in C\nDESCRIPTION: This C snippet shows how to build a topic list for subscribing to TMQ.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\ntopic_list_t* build_topic_list(const char** topics, int topic_count) {\n  topic_list_t* topic_list = tmq_list_create();\n  if (topic_list == NULL) {\n    fprintf(stderr, \"failed to create topic list\\n\");\n    return NULL;\n  }\n\n  for (int i = 0; i < topic_count; i++) {\n    if (tmq_list_append(topic_list, topics[i]) != 0) {\n      fprintf(stderr, \"failed to append topic: %s\\n\", topics[i]);\n      tmq_list_destroy(topic_list);\n      return NULL;\n    }\n  }\n  return topic_list;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Kafka Topic Consumption with kcat and Kerberos Authentication\nDESCRIPTION: A shell command example using the kcat tool to verify Kafka topic consumption with GSSAPI (Kerberos) authentication. This helps users test their Kafka connection configuration before setting up the data migration task in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/08-kafka.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkcat <topic> \\\n  -b <kafka-server:port> \\\n  -G kcat \\\n  -X security.protocol=SASL_PLAINTEXT \\\n  -X sasl.mechanism=GSSAPI \\\n  -X sasl.kerberos.keytab=</path/to/kafkaclient.keytab> \\\n  -X sasl.kerberos.principal=<kafkaclient> \\\n  -X sasl.kerberos.service.name=kafka\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 access with Flexify Service\nDESCRIPTION: This configuration demonstrates how to set the parameters for S3 access within TDengine when using Flexify service to connect to Azure Blob storage.  The parameters include the S3 endpoint, access key, and bucket name, configured in the /etc/taos/taos.cfg file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/12-multi.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"s3EndPoint   http //20.191.157.23,http://20.191.157.24,http://20.191.157.25\ns3AccessKey  FLIOMMNL0:uhRNdeZMLD4wo,ABCIOMMN:uhRNdeZMD4wog,DEFOMMNL049ba:uhRNdeZMLD4wogXd\ns3BucketName td-test\"\n```\n\n----------------------------------------\n\nTITLE: TMQ (Topic Message Queue) Error Codes\nDESCRIPTION: Error codes related to consumer operations in TDengine's message queue system, covering scenarios like consumer timeout, message subscription, and consumer state management\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/09-error-code.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError codes for TMQ consumer operations\n```\n\n----------------------------------------\n\nTITLE: Using MAVG Function in SQL\nDESCRIPTION: Calculates the moving average of k consecutive values. Requires at least k input rows to produce a result.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_70\n\nLANGUAGE: sql\nCODE:\n```\nMAVG(expr, k)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Consumer Parameters\nDESCRIPTION: Lists supported WebSocket properties for Go consumers and instructs to refer to common parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nSupported properties list for creating consumers:\n\n- `ws.url`: WebSocket connection address.\n- `ws.message.channelLen`: WebSocket message channel buffer length, default 0.\n- `ws.message.timeout`: WebSocket message timeout, default 5m.\n- `ws.message.writeWait`: WebSocket message write timeout, default 10s.\n- `ws.message.enableCompression`: Whether to enable compression for WebSocket, default false.\n- `ws.autoReconnect`: Whether WebSocket should automatically reconnect, default false.\n- `ws.reconnectIntervalMs`: WebSocket reconnect interval in milliseconds, default 2000.\n- `ws.reconnectRetryCount`: WebSocket reconnect retry count, default 3.\n\nSee the table above for other parameters.\n```\n\n----------------------------------------\n\nTITLE: WebSocket Protocol Check Method in Rust\nDESCRIPTION: Method to determine if the connection uses WebSocket protocol. Returns a boolean indicating if WebSocket is being used.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub fn is_ws(&self) -> bool\n```\n\n----------------------------------------\n\nTITLE: Revoking Permissions on a View in TDengine SQL\nDESCRIPTION: Syntax for revoking specific privileges (READ, WRITE, ALTER) on a view from a user. Only root users can perform this operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE privileges ON [db_name.]view_name FROM user_name\nprivileges: {\n    ALL,\n  | priv_type [, priv_type] ...\n}\npriv_type: {\n    READ\n  | WRITE\n  | ALTER\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Template for Data Retrieval from PostgreSQL\nDESCRIPTION: SQL template for querying data from PostgreSQL with time range conditions. It includes placeholders for start and end times, and can include subtable field placeholders.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/14-postgres.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from table where ts >= ${start} and ts < ${end} and ${col_name1} and ${col_name2}\n```\n\n----------------------------------------\n\nTITLE: Terminating Query in TDengine SQL\nDESCRIPTION: This SQL command terminates a specific query in TDengine. The kill_id parameter is obtained through the 'SHOW QUERIES' command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nKILL QUERY 'kill_id';\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - Node.js\nDESCRIPTION: This Node.js code snippet illustrates the process of establishing a WebSocket connection with TDengine. It calls the createConnect function from the specified example file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/node/websocketexample/sql_example.js:createConnect}}\n```\n\n----------------------------------------\n\nTITLE: Predicting Data using TimeMoE Model\nDESCRIPTION: SQL query to forecast time series data using TDengine's TimeMoE model, returning 10 predicted records from the input table\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/04-tsfm.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _frowts, FORECAST(i32, \"algo=timemoe-fc,rows=10\") from foo\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Meter Table with Tags in TDengine\nDESCRIPTION: Creates a table schema for storing smart meter readings with timestamp, current, voltage, and phase measurements. Includes tags for location and group identification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE meters (ts TIMESTAMP, current FLOAT, voltage INT, phase FLOAT) TAGS (location BINARY(64), groupId INT);\n```\n\n----------------------------------------\n\nTITLE: Getting the Size of a TMQ Topic List in C\nDESCRIPTION: Function to get the number of topics in a ws_tmq_list_t structure. Takes a pointer to a TMQ list object and returns the count of topics or -1 if the input parameter is NULL.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_list_get_size(ws_tmq_list_t *list);\n```\n\n----------------------------------------\n\nTITLE: Freeing TMQ Assignment Information in C\nDESCRIPTION: Function to free assignment information returned by ws_tmq_get_topic_assignment. Takes an array of assignment structures and its size. Returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_43\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_free_assignment(struct ws_tmq_topic_assignment *pAssignment, int32_t numOfAssignment)\n```\n\n----------------------------------------\n\nTITLE: SQL Event Window Query with Having Clause\nDESCRIPTION: Example of event window query pattern with having clause that was fixed to properly apply filter conditions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/28-releases/03-notes/3.3.2.0.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nevent_window + having\n```\n\n----------------------------------------\n\nTITLE: Handling VARBINARY and GEOMETRY Types in TDengine Query Results\nDESCRIPTION: Example of a query result containing VARBINARY and GEOMETRY data types from TDengine's REST API. VARBINARY is returned as a hex string, and GEOMETRY as Well-Known Binary (WKB) format.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"ts\",\n            \"TIMESTAMP\",\n            8\n        ],\n        [\n            \"c1\",\n            \"VARBINARY\",\n            20\n        ],\n        [\n            \"c2\",\n            \"GEOMETRY\",\n            100\n        ]\n    ],\n    \"data\": [\n        [\n            \"2023-11-01T06:28:15.210Z\",\n            \"7f8290\",\n            \"010100000000000000000059400000000000005940\"\n        ]\n    ],\n    \"rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Including Java Native Parameter Binding Example\nDESCRIPTION: This Java snippet showcases the implementation of parameter binding using a native interface. It aims at efficient data manipulation in TDengine without incurring SQL parsing costs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/ParameterBindingBasicDemo.java:para_bind}}\n```\n\n----------------------------------------\n\nTITLE: Building QNode Static Library with CMake in TDengine\nDESCRIPTION: Configures the build process for the qnode static library in TDengine. It collects source files from the src directory, defines the library target, sets up include directories, and specifies dependencies including transport, os, common, util, qworker, qcom, executor, tdb, wal, and index.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/qnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src QNODE_SRC)\nadd_library(qnode STATIC ${QNODE_SRC})\ntarget_include_directories(\n    qnode\n    PUBLIC \"${TD_SOURCE_DIR}/include/dnode/qnode\"\n    private \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n    qnode\n    PRIVATE transport\n    PRIVATE os\n    PRIVATE common\n    PRIVATE util\n    PRIVATE qworker\n    PRIVATE qcom\n    PRIVATE executor\n    PRIVATE tdb\n    PRIVATE wal\n    PRIVATE index\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Population Variance with VAR_POP() in TDengine SQL\nDESCRIPTION: Computes the population variance of values in a column. Returns a DOUBLE value. Applicable to numeric columns in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_52\n\nLANGUAGE: sql\nCODE:\n```\nVAR_POP(expr)\n```\n\n----------------------------------------\n\nTITLE: Querying Data using Go\nDESCRIPTION: This Go snippet shows how to query data from TDengine using the Go connector. It connects to the database and executes a SELECT query against the `meters` supertable in the `power` database, printing the results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n```go\n{{#include docs/examples/go/sqlquery/main.go:select_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Rebalancing vgroup Leaders in TDengine\nDESCRIPTION: This snippet shows the SQL syntax for rebalancing vgroup leaders in a TDengine cluster. The `balance vgroup leader` command redistributes vgroup leaders across replica nodes to ensure even load distribution. This helps prevent situations where all leaders reside on a single dnode, improving cluster performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/04-maintenance.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n\"balance vgroup leader; # 再平衡所有 vgroup 的 leader\nbalance vgroup leader on <vgroup_id>; # 再平衡一个 vgroup 的 leader\nbalance vgroup leader database <database_name>; # 再平衡一个 database 内所有 vgroup 的 leader\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Topics in TDengine SQL\nDESCRIPTION: SQL command to display information about all topics under the current database in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW TOPICS;\n```\n\n----------------------------------------\n\nTITLE: Schemaless Interface Error Handling\nDESCRIPTION: Error codes for managing schemaless data ingestion, covering protocol type validation, timestamp precision, and data format issues\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nError codes 0x80003000 - 0x80003005\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a TMQ Topic in C#\nDESCRIPTION: This C# snippet demonstrates how to subscribe to a TMQ topic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n        public async Task Subscribe()\n        {\n            var consumer = new TDConsumer(new TDProperties()\n            {\n                { \"group.id\", \"test_group\" },\n                { \"auto.offset.reset\", \"earliest\" }\n            }, new string[] { \"topic\" });\n            consumer.OnMessageReceived += (object sender, TDMessageEvent e) =>\n            {\n                var message = Encoding.UTF8.GetString(e.TDMessage.Payload);\n                Console.WriteLine($\"Received message: {message}\");\n            };\n            await consumer.StartAsync();\n\n            Console.ReadKey();\n            await consumer.StopAsync();\n            consumer.Dispose();\n        }\n```\n\n----------------------------------------\n\nTITLE: Using CSUM Function in SQL\nDESCRIPTION: Calculates the cumulative sum of values, ignoring NULL values. Returns bigint for integer types and double for floating-point types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_65\n\nLANGUAGE: sql\nCODE:\n```\nCSUM(expr)\n```\n\n----------------------------------------\n\nTITLE: Defining taosd_dnodes_status Table Structure in Markdown\nDESCRIPTION: This snippet details the structure of the taosd_dnodes_status table, which records dnode status information. It includes the dnode's status, ID, endpoint, and associated cluster ID.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n| field       | type      | is\\_tag | comment                                  |\n| :---------- | :-------- | :------ | :--------------------------------------- |\n| \\_ts        | TIMESTAMP |         | timestamp                                |\n| status      | DOUBLE    |         | dnode status, value range ready=1, offline=0 |\n| dnode\\_id   | VARCHAR   | tag     | dnode id                                 |\n| dnode\\_ep   | VARCHAR   | tag     | dnode endpoint                           |\n| cluster\\_id | VARCHAR   | tag     | cluster id                               |\n```\n\n----------------------------------------\n\nTITLE: Custom Header Middleware Configuration in Traefik\nDESCRIPTION: This code configures a custom header check middleware in Traefik, requiring external access to include specific headers to be allowed access. This adds an extra layer of security for API requests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.check-header.headers.customrequestheaders.X-Secret-Header=SecretValue\"\n- \"traefik.http.middlewares.check-header.headers.customresponseheaders.X-Header-Check=true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TaosAdapter TOML File for Icinga2 Data Reception\nDESCRIPTION: This TOML configuration enables TaosAdapter to receive Icinga2 data. It specifies the OpenTSDB Telnet settings, including the database names, ports, and authentication details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_icinga2.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[opentsdb_telnet]\nenable = true\nmaxTCPConnections = 250\ntcpKeepAlive = false\ndbs = [\"opentsdb_telnet\", \"collectd\", \"icinga2\", \"tcollector\"]\nports = [6046, 6047, 6048, 6049]\nuser = \"root\"\npassword = \"taosdata\"\n```\n\n----------------------------------------\n\nTITLE: Closing Database Connection\nDESCRIPTION: Properly closes the database connection after use to free up resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/43-r-lang.md#2025-04-16_snippet_5\n\nLANGUAGE: r\nCODE:\n```\n# Close the database connection\ndbDisconnect(conn)\n```\n\n----------------------------------------\n\nTITLE: Querying total record count in a supertable\nDESCRIPTION: SQL query to count the total number of records in the 'meters' supertable created by taosBenchmark.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM test.meters;\n```\n\n----------------------------------------\n\nTITLE: Python Script for Advanced Data Analysis with Seeq Data Lab\nDESCRIPTION: Python code using Seeq Data Lab to perform data analysis and forecasting on power consumption data from TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom seeq import spy\nspy.options.compatibility = 189\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport mlforecast\nimport lightgbm as lgb\nfrom mlforecast.target_transforms import Differences\nfrom sklearn.linear_model import LinearRegression\n\nds = spy.search({'ID': \"8C91A9C7-B6C2-4E18-AAAF-XXXXXXXXX\"})\nprint(ds)\n\nsig = ds.loc[ds['Name'].isin(['Num'])]\nprint(sig)\n\ndata = spy.pull(sig, start='2015-01-01', end='2022-12-31', grid=None)\nprint(\"data.info()\")\ndata.info()\nprint(data)\n\nprint(\"data[Num].info()\")\ndata['Num'].info()\nda = data['Num'].index.tolist()\n\nli = data['Num'].tolist()\n\ndata2 = pd.DataFrame()\ndata2['ds'] = da\nprint('1st data2 ds info()')\ndata2['ds'].info()\n\ndata2['ds'] = pd.to_datetime(data2['ds']).astype('int64')\ndata2['y'] = li\nprint('2nd data2 ds info()')\ndata2['ds'].info()\nprint(data2)\n\ndata2.insert(0, column = \"unique_id\", value=\"unique_id\")\n\nprint(\"Forecasting ...\")\n\nforecast = mlforecast.MLForecast(\n    models = lgb.LGBMRegressor(),\n    freq = 1,\n    lags=[365],\n    target_transforms=[Differences([365])],\n)\n\nforecast.fit(data2)\npredicts = forecast.predict(365)\n\npd.concat([data2, predicts]).set_index(\"ds\").plot(title = \"current data with forecast\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Querying Data using Native Connection in C\nDESCRIPTION: This C snippet demonstrates querying data from TDengine using the C connector with a native connection. It connects using the TDengine client library, executes an SQL SELECT query, and processes the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_31\n\nLANGUAGE: c\nCODE:\n```\n```c  title=\"Native Connection\"\n{{#include docs/examples/c/query_data_demo.c:query_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying records with specific tag value\nDESCRIPTION: SQL query to count records in the 'meters' supertable where the location tag equals 'California.SanFrancisco'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM test.meters WHERE location = \"California.SanFrancisco\";\n```\n\n----------------------------------------\n\nTITLE: Building TDengine on Linux with specific CPU architecture\nDESCRIPTION: Specifies the CPU architecture manually using the CPUTYPE option in CMake.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncmake .. -DCPUTYPE=aarch64 && cmake --build .\n```\n\n----------------------------------------\n\nTITLE: Native Connection Parameter Binding in C#\nDESCRIPTION: This C# snippet shows the use of parameter binding with native connections to enhance data insertion capabilities in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/stmtInsert/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: Closing JDBC Statement in Java\nDESCRIPTION: Releases database and JDBC resources associated with the Statement object. Throws SQLException if closure fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_35\n\nLANGUAGE: Java\nCODE:\n```\nvoid close() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Illegal Time Window Query in TDengine SQL\nDESCRIPTION: This snippet demonstrates an illegal SQL query using the INTERVAL clause without an aggregation function. The INTERVAL clause must be used with aggregation or selection functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM temp_tb_1 INTERVAL(1m);\n```\n\n----------------------------------------\n\nTITLE: Binding parameters using Stmt2 object in af package (v3.6.0+)\nDESCRIPTION: This function binds data to the prepared statement using the Stmt2 object. It takes a slice of TaosStmt2BindData as input and returns an error if the binding fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt2) Bind(params []*stmt.TaosStmt2BindData) error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC URL for TDengine in Yonghong BI\nDESCRIPTION: JDBC connection string for connecting Yonghong BI to TDengine. Specifies the host, port, user, and password for the connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/05-yhbi.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\njdbc:TAOS-RS://127.0.0.1:6041?user=root&password=taosdata\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using REST API in Shell\nDESCRIPTION: This shell script uses `curl` to create a database and table in TDengine via the REST API. It sends HTTP requests to the TDengine server, including the SQL commands to create the database and the supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ncurl --location -uroot:taosdata 'http://127.0.0.1:6041/rest/sql' \\\n--data 'CREATE DATABASE IF NOT EXISTS power'\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\ncurl --location -uroot:taosdata 'http://127.0.0.1:6041/rest/sql/power' \\\n--data 'CREATE STABLE IF NOT EXISTS meters (ts TIMESTAMP, current FLOAT, voltage INT, phase FLOAT) TAGS (groupId INT, location BINARY(24))'\n```\n```\n\n----------------------------------------\n\nTITLE: Rows ColumnTypeScanType Method\nDESCRIPTION: Returns the Go type corresponding to the database type of a specific column in the result set. The function takes a column index `i` as input and returns the `reflect.Type` of the column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_42\n\nLANGUAGE: go\nCODE:\n```\n\"func (rs *Rows) ColumnTypeScanType(i int) reflect.Type\"\n```\n\n----------------------------------------\n\nTITLE: Showing Table Indices in TDengine SQL\nDESCRIPTION: SQL syntax for viewing indices on a specific table, with optional database name specification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/08-tag-index.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW INDEXES FROM tbl_name [FROM db_name];\nSHOW INDEXES FROM [db_name.]tbl_name;\n```\n\n----------------------------------------\n\nTITLE: Defining taosd_cluster_info Table Structure in Markdown\nDESCRIPTION: This snippet details the structure of the taosd_cluster_info table, which records comprehensive cluster information. It includes various metrics such as uptime, database counts, node counts, and connection information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n| field                    | type      | is\\_tag | comment                                          |\n| :----------------------- | :-------- | :------ | :----------------------------------------------- |\n| \\_ts                     | TIMESTAMP |         | timestamp                                        |\n| cluster_uptime           | DOUBLE    |         | uptime of the current master node. Unit: seconds |\n| dbs\\_total               | DOUBLE    |         | total number of databases                        |\n| tbs\\_total               | DOUBLE    |         | total number of tables in the current cluster    |\n| stbs\\_total              | DOUBLE    |         | total number of stables in the current cluster   |\n| dnodes\\_total            | DOUBLE    |         | total number of dnodes in the current cluster    |\n| dnodes\\_alive            | DOUBLE    |         | total number of alive dnodes in the current cluster |\n| mnodes\\_total            | DOUBLE    |         | total number of mnodes in the current cluster    |\n| mnodes\\_alive            | DOUBLE    |         | total number of alive mnodes in the current cluster |\n| vgroups\\_total           | DOUBLE    |         | total number of vgroups in the current cluster   |\n| vgroups\\_alive           | DOUBLE    |         | total number of alive vgroups in the current cluster |\n| vnodes\\_total            | DOUBLE    |         | total number of vnodes in the current cluster    |\n| vnodes\\_alive            | DOUBLE    |         | total number of alive vnodes in the current cluster |\n| connections\\_total       | DOUBLE    |         | total number of connections in the current cluster |\n| topics\\_total            | DOUBLE    |         | total number of topics in the current cluster    |\n| streams\\_total           | DOUBLE    |         | total number of streams in the current cluster   |\n| grants_expire\\_time      | DOUBLE    |         | authentication expiration time, valid in enterprise edition, maximum DOUBLE value in community edition |\n| grants_timeseries\\_used  | DOUBLE    |         | number of used timeseries                        |\n| grants_timeseries\\_total | DOUBLE    |         | total number of timeseries, maximum DOUBLE value in open source version |\n| cluster\\_id              | VARCHAR   | tag     | cluster id                                       |\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name and Tags in TDengine (C)\nDESCRIPTION: Binds a specific table name and tag values when both the table name and tags in the SQL statement use `?` as placeholders.  This function is typically used with `INSERT` statements utilizing auto-table creation. The number of TAGS columns must match the number required by the SQL statement. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_set_tbname_tags(WS_STMT *stmt,\n                            const char *name,\n                            const WS_MULTI_BIND *bind,\n                            uint32_t len);\"\n\n```\n\n----------------------------------------\n\nTITLE: Cleanup TDengine Client Environment in C\nDESCRIPTION: Clean up the TDengine client runtime environment. This should be called before the application exits.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_cleanup()\n```\n\n----------------------------------------\n\nTITLE: Viewing Subscription Information in TDengine SQL\nDESCRIPTION: SQL command to display consumption information of topics on different vgroups, useful for viewing consumption progress.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW SUBSCRIPTIONS;\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Compression Statistics in TDengine\nDESCRIPTION: SQL command to display the distributed information of a table including compression statistics using the TDengine CLI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSHOW TABLE DISTRIBUTED table_name;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Tables for High Availability Testing in TDengine\nDESCRIPTION: This SQL command inserts multiple rows of data into tables t1, t2, and t3. Each row contains a timestamp and values for temperature and humidity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/high_availability/2_replica.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO t1 VALUES ('2022-02-02 02:00:00', 20, 21) ('2022-02-02 02:01:00', 21, 22) ('2022-02-02 02:02:00', 22, 23);\nINSERT INTO t2 VALUES ('2022-02-02 02:00:00', 20, 21) ('2022-02-02 02:01:00', 21, 22) ('2022-02-02 02:02:00', 22, 23);\nINSERT INTO t3 VALUES ('2022-02-02 02:00:00', 20, 21) ('2022-02-02 02:01:00', 21, 22) ('2022-02-02 02:02:00', 22, 23);\n```\n\n----------------------------------------\n\nTITLE: Defining and linking regexTest executable\nDESCRIPTION: This creates an executable named `regexTest` from `regexTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `regexTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_executable(regexTest \\\"regexTest.cpp\\\")\ntarget_link_libraries(regexTest os util gtest_main)\nadd_test(\n    NAME regexTest\n    COMMAND regexTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying License Capacity Information in TDengine SQL\nDESCRIPTION: Shows information about the capacity authorized by the license. Exclusive to the enterprise edition.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSHOW SCORES;\n```\n\n----------------------------------------\n\nTITLE: Displaying Cluster Information in TDengine SQL\nDESCRIPTION: Shows information about the current TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER;\n```\n\n----------------------------------------\n\nTITLE: 创建子表 SQL\nDESCRIPTION: 使用meters超级表作为模板，创建带有标签值的子表d1001\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/01-model.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE d1001 \nUSING meters (\n    location,\n    group_id\n) TAGS (\n    \"California.SanFrancisco\", \n    2\n);\n```\n\n----------------------------------------\n\nTITLE: 删除主题的SQL语法\nDESCRIPTION: 删除数据订阅主题，可以使用FORCE参数强制删除正在被消费者订阅的主题。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nDROP TOPIC [IF EXISTS] [FORCE] topic_name;\n```\n\n----------------------------------------\n\nTITLE: Creating Stable Tables in TDengine for OpenTSDB Metrics\nDESCRIPTION: SQL statements to create stable tables in TDengine that correspond to OpenTSDB metrics for memory, swap, and disk usage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/25-application/_i3-immigrate.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate stable memory(ts timestamp, val float) tags(host binary(12)，memory_type binary(20), memory_type_instance binary(20), source binary(20));\ncreate stable swap(ts timestamp, val double) tags(host binary(12), swap_type binary(20), swap_type_binary binary(20), source binary(20));\ncreate stable disk(ts timestamp, val double) tags(host binary(12), disk_point binary(20), disk_instance binary(20), disk_type binary(20), source binary(20));\n```\n\n----------------------------------------\n\nTITLE: Closing a TMQ Consumer in C\nDESCRIPTION: Function to close a TMQ consumer and release its resources. Must be used in conjunction with ws_tmq_consumer_new. Takes a TMQ consumer object and returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_consumer_close(ws_tmq_t *tmq)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag and Data Columns in JSON for TDengine taosBenchmark\nDESCRIPTION: Example JSON configuration for specifying tag and data columns in a super table schema. Includes options for data types, lengths, ranges, and generation methods.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"super_tables\": [\n    {\n      \"columns\": [\n        {\n          \"type\": \"FLOAT\",\n          \"name\": \"current\",\n          \"count\": 3,\n          \"min\": 0,\n          \"max\": 100\n        }\n      ],\n      \"tags\": [\n        {\n          \"type\": \"NCHAR\",\n          \"name\": \"location\",\n          \"len\": 16,\n          \"values\": [\"California\", \"New York\", \"Texas\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Tables with Constant Timestamps in SQL Subqueries\nDESCRIPTION: These SQL queries show how to use constant timestamps in subqueries for join operations in TDengine, including the use of built-in time functions and explicit timestamp casting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * from d1001 a JOIN (SELECT today() as ts1, * from d1002 WHERE ts = '2025-03-19 10:00:00.000') b ON timetruncate(a.ts, 1d) = b.ts1;\n\nSELECT * from d1001 a JOIN (SELECT timestamp '2025-03-19 10:00:00.000' as ts1, * from d1002 WHERE ts = '2025-03-19 10:00:00.000') b ON timetruncate(a.ts, 1d) = b.ts1;\n```\n\n----------------------------------------\n\nTITLE: Rename Child Table Using CSV Mapping File\nDESCRIPTION: This command demonstrates how to rename child tables based on a CSV mapping file using the `-T rename-child-table:map:@./map.csv` option in taosX. It assumes that the CSV file `./map.csv` contains a list of old and new table names separated by commas.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n\"-T rename-child-table:map:@./map.csv\"\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Field Combinations in PostgreSQL\nDESCRIPTION: SQL statement to select distinct combinations of fields for subtable splitting in PostgreSQL. This is used in conjunction with the SQL Template to manage data migration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/14-postgres.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct col_name1, col_name2 from table\n```\n\n----------------------------------------\n\nTITLE: Dropping Topic in TDengine SQL\nDESCRIPTION: SQL syntax for deleting a topic, with optional FORCE parameter for deleting topics with active consumers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP TOPIC [IF EXISTS] [FORCE] topic_name;\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Status in Java\nDESCRIPTION: This method checks whether the current database connection is closed. It returns `true` if the connection is closed, and `false` otherwise. It throws an `SQLException` if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n\"`boolean isClosed() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: 创建超级表主题的SQL语法\nDESCRIPTION: 创建一个基于超级表的数据订阅主题，可以订阅超级表中的所有数据，支持表结构变更，并可选择性地返回元数据和过滤子表。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name [with meta] AS STABLE stb_name [where_condition]\n```\n\n----------------------------------------\n\nTITLE: Data Filtering Condition in MySQL\nDESCRIPTION: Example of a filtering condition applied to the data before writing to TDengine. This condition ensures only data meeting specific criteria is migrated.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/13-mysql.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nValue > 0\n```\n\n----------------------------------------\n\nTITLE: Fetching Field Metadata in TDengine Query Result in C\nDESCRIPTION: Get the metadata (name, type, length) for each column in the query result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nTAOS_FIELD *taos_fetch_fields(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: TDengine Database Synchronization DSN Example\nDESCRIPTION: Example of a Database Source Name (DSN) used for cross-cluster data synchronization, specifying connection parameters including host, port, and credentials.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/10-disaster.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntaos+ws://root:taosdata@clusterB:6041/db2\n```\n\n----------------------------------------\n\nTITLE: Query Response in TDengine REST API\nDESCRIPTION: Example of a query response from TDengine's REST API, including column metadata and query results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"ts\",\n            \"TIMESTAMP\",\n            8\n        ],\n        [\n            \"current\",\n            \"FLOAT\",\n            4\n        ],\n        [\n            \"voltage\",\n            \"INT\",\n            4\n        ],\n        [\n            \"phase\",\n            \"FLOAT\",\n            4\n        ]\n    ],\n    \"data\": [\n        [\n            \"2022-07-30T06:44:40.32Z\",\n            10.3,\n            219,\n            0.31\n        ],\n        [\n            \"2022-07-30T06:44:41.32Z\",\n            12.6,\n            218,\n            0.33\n        ]\n    ],\n    \"rows\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Execution Steps for Running Java Example Program\nDESCRIPTION: This section outlines the steps required to execute the Java example program both locally and on a remote server, detailing necessary configurations and commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n```shell\n1. Clone the TDengine repository\n\n   ```shell\n   git clone git@github.com:taosdata/TDengine.git --depth 1\n   ```\n\n2. Open the `TDengine/docs/examples/JDBC/highvolume` directory with the integrated development environment.\n3. Configure the environment variable `TDENGINE_JDBC_URL` in the development environment. If the global environment variable `TDENGINE_JDBC_URL` has already been configured, you can skip this step.\n4. If you want to run the Kafka example, you need to set the environment variable `KAFKA_BOOTSTRAP_SERVERS` for the Kafka cluster address.\n5. Specify command-line arguments, such as `-r 3 -w 3 -b 100 -c 1000 -s 1000 -R 100`.\n6. Run the class `com.taos.example.highvolume.FastWriteExample`.\n\n**Execute the example program on a remote server**\n\nTo execute the example program on a server, follow these steps:\n\n1. Package the sample code. Navigate to the directory `TDengine/docs/examples/JDBC/highvolume` and run the following command to generate `highVolume.jar`:\n\n   ```shell\n   mvn package\n   ```\n\n2. Copy the program to the specified directory on the server:\n  \n   ```shell\n   scp -r .\\target\\highVolume.jar <user>@<host>:~/dest-path\n   ```\n\n3. Configure the environment variable.\n   Edit `~/.bash_profile` or `~/.bashrc` and add the following content for example:\n\n   ```shell\n   export TDENGINE_JDBC_URL=\"jdbc:TAOS-WS://localhost:6041?user=root&password=taosdata\"\n   ```\n\n   The above uses the default JDBC URL for a locally deployed TDengine Server. Modify it according to your actual environment.\n   If you want to use Kafka subscription mode, additionally configure the Kafka cluster environment variable:\n\n   ```shell\n   export KAFKA_BOOTSTRAP_SERVERS=localhost:9092\n   ```\n\n4. Start the sample program with the Java command. Use the following template (append `-K` for Kafka subscription mode):\n\n   ```shell\n   java -jar highVolume.jar -r 5 -w 5 -b 10000 -c 100000 -s 1000000 -R 1000\n   ```\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Audit Library and Include Directories - CMake\nDESCRIPTION: This snippet creates a static library named 'audit' and sets the include directories for both public and private usage. The public directory is accessible to other targets that link against 'audit', while the private directory is only used internally within the 'audit' target.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/audit/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(audit STATIC ${AUDIT_SRC})\ntarget_include_directories(\n  audit\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/audit\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Time Elapsed with ELAPSED() in TDengine SQL\nDESCRIPTION: Computes the continuous time length within a statistical period. Used with twa function to calculate area under statistical curve. Returns DOUBLE value representing time units elapsed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_44\n\nLANGUAGE: sql\nCODE:\n```\nELAPSED(ts_primary_key [, time_unit])\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Consumer Parameters\nDESCRIPTION: Outlines the use of `td.connect.websocket.scheme` for Python consumers along with the standard configuration items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nThe `td.connect.websocket.scheme` parameter is provided to indicate the protocol type, other parameters are the same as the common basic configuration items.\n```\n\n----------------------------------------\n\nTITLE: Getting JDBC Driver Major Version\nDESCRIPTION: Method to retrieve the major version number of the TDengine JDBC driver.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nint getMajorVersion()\n```\n\n----------------------------------------\n\nTITLE: Viewing Tag Information for Subtables\nDESCRIPTION: SQL command to retrieve tag information for all subtables belonging to a particular supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE TAGS FROM table_name [FROM db_name];\nSHOW TABLE TAGS FROM [db_name.]table_name;\n```\n\n----------------------------------------\n\nTITLE: Message Subscription Permissions\nDESCRIPTION: SQL commands for granting subscription rights to specific topics\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ngrant privileges on priv_level to user_name\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant subscribe on topic_name to test\n```\n\n----------------------------------------\n\nTITLE: Notification Message Structure Example in JSON\nDESCRIPTION: Example JSON structure showing the format of notification messages sent by TDengine, including multiple streams and event types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messageId\": \"unique-message-id-12345\",\n  \"timestamp\": 1733284887203,\n  \"streams\": [\n    {\n      \"streamName\": \"avg_current_stream\",\n      \"events\": [\n        {\n          \"tableName\": \"t_a667a16127d3b5a18988e32f3e76cd30\",\n          \"eventType\": \"WINDOW_OPEN\",\n          \"eventTime\": 1733284887097,\n          \"windowId\": \"window-id-67890\",\n          \"windowType\": \"Time\",\n          \"windowStart\": 1733284800000\n        },\n        {\n          \"tableName\": \"t_a667a16127d3b5a18988e32f3e76cd30\",\n          \"eventType\": \"WINDOW_CLOSE\",\n          \"eventTime\": 1733284887197,\n          \"windowId\": \"window-id-67890\",\n          \"windowType\": \"Time\",\n          \"windowStart\": 1733284800000,\n          \"windowEnd\": 1733284860000,\n          \"result\": {\n            \"_wstart\": 1733284800000,\n            \"avg(current)\": 1.3\n          }\n        }\n      ]\n    },\n    {\n      \"streamName\": \"max_voltage_stream\",\n      \"events\": [\n        {\n          \"tableName\": \"t_96f62b752f36e9b16dc969fe45363748\",\n          \"eventType\": \"WINDOW_OPEN\",\n          \"eventTime\": 1733284887231,\n          \"windowId\": \"window-id-13579\",\n          \"windowType\": \"Event\",\n          \"windowStart\": 1733284800000,\n          \"triggerCondition\": {\n            \"conditionIndex\": 0,\n            \"fieldValue\": {\n              \"c1\": 10,\n              \"c2\": 15\n            }\n          }\n        },\n        {\n          \"tableName\": \"t_96f62b752f36e9b16dc969fe45363748\",\n          \"eventType\": \"WINDOW_CLOSE\",\n          \"eventTime\": 1733284887231,\n          \"windowId\": \"window-id-13579\",\n          \"windowType\": \"Event\",\n          \"windowStart\": 1733284800000,\n          \"windowEnd\": 1733284810000,\n          \"triggerCondition\": {\n            \"conditionIndex\": 1,\n            \"fieldValue\": {\n              \"c1\": 20,\n              \"c2\": 3\n            }\n          },\n          \"result\": {\n            \"_wstart\": 1733284800000,\n            \"max(voltage)\": 220\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cached Window States in TDengine SQL\nDESCRIPTION: This SQL statement is used to delete cached window states, which are intermediate results of stream computing. The DELETE_MARK represents the time threshold for deletion, with a default value of 10 years if not set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nDELETE_MARK    time\n```\n\n----------------------------------------\n\nTITLE: Restoring Data Node in TDengine\nDESCRIPTION: This snippet shows the SQL syntax for restoring a data node (dnode) in a TDengine cluster. The `restore dnode` command recovers data on a dnode using data replication from other nodes. This is useful when a dnode's data is lost or corrupted, but requires a cluster with at least 3 dnodes and a replication factor of 3.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/04-maintenance.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n\"restore dnode <dnode_id>；# 恢复dnode上的mnode，所有vnode和qnode\nrestore mnode on dnode <dnode_id>；# 恢复dnode上的mnode\nrestore vnode on dnode <dnode_id> ；# 恢复dnode上的所有vnode\nrestore qnode on dnode <dnode_id>；# 恢复dnode上的qnode\"\n```\n\n----------------------------------------\n\nTITLE: Querying Data via promql-cli with taosAdapter stopped\nDESCRIPTION: This snippet shows what happens when querying Prometheus data from TDengine using `promql-cli` after the taosAdapter service has been stopped. The output shows that only the value and timestamp are returned, but the job name is missing, indicating that taosAdapter is not functioning.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/02-prometheus.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nubuntu@shuduo-1804 ~ $ sudo systemctl stop taosadapter.service\nubuntu@shuduo-1804 ~ $ promql-cli --host \"http://127.0.0.1:9090\" \"sum(up) by (job)\"\nVALUE    TIMESTAMP\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for taosAdapter in TDengine\nDESCRIPTION: This code snippet demonstrates how to configure SSL encryption for the taosAdapter component in TDengine. It involves modifying the `/etc/taos/taosadapter.toml` configuration file to enable SSL, specify the certificate file path, and specify the private key file path.  This ensures that data transmitted between taosadapter and other components is encrypted, enhancing security.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\"[ssl]\\nenable = true\ncertFile = \\\"/path/to/certificate-file\\\"\\nkeyFile = \\\"/path/to/private-key\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Closing Database Connection in Java\nDESCRIPTION: This method closes the current database connection. It throws an `SQLException` if the operation fails. This should be called to release resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n\"`void close() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Forecast Service Return Dictionary Example\nDESCRIPTION: Illustrates the expected dictionary format for the return value of the `execute` method in a forecast service. It contains the mean squared error (`mse`) and the results (`res`), including timestamps, predicted values, and confidence interval bounds.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/02-forecast.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n    \"mse\": mse, # 预测算法的拟合数据最小均方误差 (minimum squared error)\n    \"res\": res  # 结果数组 [时间戳数组，预测结果数组，预测结果执行区间下界数组，预测结果执行区间上界数组]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Table Name using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the table name where a specified column is located. The column number starts from 1.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_71\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `String getTableName(int column) throws SQLException`\n  - **Interface Description**: Gets the table name where a specified column is located.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The table name where the column is located.\n```\n\n----------------------------------------\n\nTITLE: Setting Table Name and Tags\nDESCRIPTION: Sets both table name and tags for INSERT statements with auto-table creation feature. Used when both table name and tags are parameterized.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nint ws_stmt_set_tbname_tags(WS_STMT *stmt, const char *name, const WS_MULTI_BIND *bind, uint32_t len)\n```\n\n----------------------------------------\n\nTITLE: Customizing Subtable Names in Streaming Computation in TDengine SQL\nDESCRIPTION: Example of using SUBTABLE clause to generate custom names for subtables created by streaming computation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol SUBTABLE(CONCAT('new-', tname)) AS SELECT _wstart, count(*), avg(voltage) FROM meters PARTITION BY tbname tname INTERVAL(1m);\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Performance Tests for TDengine\nDESCRIPTION: Commands to set up and run Time Series Benchmark Suite (TSBS) tests for TDengine. TSBS is used to evaluate the performance of time-series data processing systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/local/src && \\\ngit clone https://github.com/taosdata/tsbs.git && \\\ncd tsbs && \\\ngit checkout enh/add-influxdb3.0 && \\\ncd scripts/tsdbComp && \\\n./tsbs_test.sh -s scenario4\n```\n\n----------------------------------------\n\nTITLE: Creating the Next Sunday UDF\nDESCRIPTION: SQL statement to create the next Sunday UDF with a fixed-length binary output type. This specifies the output will be a 10-character string representing a date.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\ncreate function nextsunday as '/root/udf/nextsunday.py' outputtype binary(10) language 'Python';\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark in Command Line Mode\nDESCRIPTION: Demonstrates using taosBenchmark with command line parameters to create a database with specified tables and insert records using parameter binding.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntaosBenchmark -d db -t 100 -n 1000 -T 4 -I stmt -y\n```\n\n----------------------------------------\n\nTITLE: Importing TDengine WebSocket Driver in Go\nDESCRIPTION: Shows how to import the TDengine WebSocket driver package for database connectivity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"database/sql\"\n    _ \"github.com/taosdata/driver-go/v3/taosWS\"\n)\n```\n\n----------------------------------------\n\nTITLE: 自动建表并插入数据 SQL\nDESCRIPTION: 在写入数据的同时自动创建子表d1002，并插入一行数据\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/01-model.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO d1002 \nUSING meters \nTAGS (\n    \"California.SanFrancisco\", \n    2\n) VALUES (\n    NOW, \n    10.2, \n    219, \n    0.32\n);\n```\n\n----------------------------------------\n\nTITLE: Including Go Native Example for Parameter Binding\nDESCRIPTION: This Go snippet provides two examples of parameter binding for data insertion using both stmt and stmt2 methods in TDengine. It focuses on efficiency and minimal SQL overhead.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/stmt2/native/main.go}}\n```\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/stmt/native/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Working with Avro Buffer Wrapper Functions\nDESCRIPTION: Functions for handling binary data in Avro without copying the data. The wrapped buffer API provides a way to give control of existing buffers to Avro values or grab references to existing buffers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include <stdint.h>\n#include <stdlib.h>\n#include <avro.h>\n\ntypedef void\n(*avro_buf_free_t)(void *ptr, size_t sz, void *user_data);\n\nint avro_value_give_bytes(avro_value_t *value, avro_wrapped_buffer_t *src);\nint avro_value_give_string_len(avro_value_t *value, avro_wrapped_buffer_t *src);\nint avro_value_give_fixed(avro_value_t *value, avro_wrapped_buffer_t *src);\n\nint avro_value_grab_bytes(const avro_value_t *value, avro_wrapped_buffer_t *dest);\nint avro_value_grab_string(const avro_value_t *value, avro_wrapped_buffer_t *dest);\nint avro_value_grab_fixed(const avro_value_t *value, avro_wrapped_buffer_t *dest);\n\ntypedef struct avro_wrapped_buffer {\n    const void  *buf;\n    size_t  size;\n    void (*free)(avro_wrapped_buffer_t *self);\n    int (*copy)(avro_wrapped_buffer_t *dest,\n                const avro_wrapped_buffer_t *src,\n                size_t offset, size_t length);\n    int (*slice)(avro_wrapped_buffer_t *self,\n                 size_t offset, size_t length);\n} avro_wrapped_buffer_t;\n\nvoid\navro_wrapped_buffer_free(avro_wrapped_buffer_t *buf);\n\nint\navro_wrapped_buffer_copy(avro_wrapped_buffer_t *dest,\n                         const avro_wrapped_buffer_t *src,\n                         size_t offset, size_t length);\n\nint\navro_wrapped_buffer_slice(avro_wrapped_buffer_t *self,\n                          size_t offset, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Viewing Column Information of a View in TDengine SQL\nDESCRIPTION: Command to display the column structure of a specific view.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE [db_name.]view_name;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Storage Parameters\nDESCRIPTION: Configuration parameters table for storage-related settings in TDengine client driver\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/02-taosc.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name|Supported Version|Dynamic Modification|Description|\n|----------------------|----------|--------------------|-------------|\n| tempDir         |                   |Supported, effective immediately  | Specifies the directory for generating temporary files during operation, default on Linux platform is /tmp |\n| minimalTmpDirGB |                   |Supported, effective immediately  | Minimum space required to be reserved in the directory specified by tempDir, in GB, default value: 1 |\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using C#\nDESCRIPTION: This C# snippet demonstrates how to create a database and a supertable in TDengine using the C# connector with WebSocket.  It connects to TDengine using WebSockets and then executes SQL statements to create the database and table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n{{#include docs/examples/csharp/wsInsert/Program.cs:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing TDengine Client Environment in C\nDESCRIPTION: Initialize the TDengine client runtime environment. This function is automatically called when taos_connect() is invoked if not explicitly called by the application.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nint taos_init()\n```\n\n----------------------------------------\n\nTITLE: Displaying Super Tables Information in TDengine SQL\nDESCRIPTION: Shows information about all super tables in the specified database. Supports filtering table names with LIKE pattern.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [db_name.]STABLES [LIKE 'pattern'];\n```\n\n----------------------------------------\n\nTITLE: Sample Input for UDT Three-Phase Voltage Processing\nDESCRIPTION: Example JSON input data for the UDT script that processes three-phase voltage values. The data contains a timestamp, comma-separated voltage values, and a device ID.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ts\": \"2024-06-27 18:00:00\", \n    \"voltage\": \"220.1,220.3,221.1\", \n    \"dev_id\": \"8208891\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and linking bufferTest executable\nDESCRIPTION: This creates an executable named `bufferTest` from `bufferTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `bufferTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n\"# bufferTest\nadd_executable(bufferTest \\\"bufferTest.cpp\\\")\ntarget_link_libraries(bufferTest os util gtest_main)\nadd_test(\n    NAME bufferTest\n    COMMAND bufferTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Creating SuperTable for Audit Data Storage\nDESCRIPTION: SQL command to define a supertable in the TDengine database for storing reported audit data. Includes columns for timestamp, user, operation, and client address, leveraging tags for cluster identification. It requires prior setup of taosKeeper to handle data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE operations(ts timestamp, details VARCHAR(64000), User VARCHAR(25), Operation VARCHAR(20), db VARCHAR(65), resource VARCHAR(193), client_add(25)) TAGS (clusterID VARCHAR(64));\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Cluster Configuration Variables in TDengine SQL\nDESCRIPTION: Shows the runtime values of configuration parameters that need to be consistent across nodes. Can show parameters for the entire cluster or a specific data node, and supports filtering with LIKE pattern.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER VARIABLES [like pattern];\nSHOW DNODE dnode_id VARIABLES [like pattern];\n```\n\n----------------------------------------\n\nTITLE: Defining Standard UDF Library Targets\nDESCRIPTION: Creates multiple static library modules for User Defined Functions (UDF), each linked with the OS library. This includes udf1, udf2, and their duplicate versions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(udf1 STATIC MODULE udf1.c)\ntarget_link_libraries(udf1 PUBLIC os)\n\nadd_library(udf2 STATIC MODULE udf2.c)\ntarget_link_libraries(udf2 PUBLIC os)\n\nadd_library(udf1_dup STATIC MODULE udf1_dup.c)\ntarget_link_libraries(udf1_dup PUBLIC os)\n\nadd_library(udf2_dup STATIC MODULE udf2_dup.c)\ntarget_link_libraries(udf2_dup PUBLIC os)\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Availability Status in TDengine SQL\nDESCRIPTION: Queries whether the current cluster is available, returning values: 0 (unavailable), 1 (fully available), or 2 (partially available).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER ALIVE;\n```\n\n----------------------------------------\n\nTITLE: Updating New Databases Checking Interval (taosx)\nDESCRIPTION: This shell command updates the checking interval for new databases in an active-active replication task. This command allows configuring the frequency with which the system checks for newly created databases to replicate.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica update id --new-database-checking-interval <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: State Window Query Results\nDESCRIPTION: Example result set showing the state window query output with window start times, end times, durations, and status values for different devices.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n tbname |         _wstart         |          _wend          |  _wduration   |    status     |\n===============================================================================================\n d2     | 2022-01-01 00:00:00.000 | 2022-01-01 00:01:20.000 |         80000 |             0 |\n d2     | 2022-01-01 00:01:30.000 | 2022-01-01 00:01:30.000 |             0 |             1 |\n d2     | 2022-01-01 00:01:40.000 | 2022-01-01 00:01:40.000 |             0 |             0 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription in JSON for TDengine taosBenchmark\nDESCRIPTION: Example JSON configuration for setting up data subscription, including consumer count, creation mode, and topic list.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"filetype\": \"subscribe\",\n  \"tmq_info\": {\n    \"concurrent\": 3,\n    \"create_mode\": \"parallel\",\n    \"group_mode\": \"independent\",\n    \"topic_list\": [\n      {\n        \"name\": \"topic1\",\n        \"sql\": \"SELECT * FROM test.meters;\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using STATECOUNT Function in SQL\nDESCRIPTION: Returns the count of consecutive records meeting a specified condition. Resets to -1 when the condition is false.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_71\n\nLANGUAGE: sql\nCODE:\n```\nSTATECOUNT(expr, oper, val)\n```\n\n----------------------------------------\n\nTITLE: Tag-Based Authorization SQL in TDengine\nDESCRIPTION: SQL syntax for granting permissions to specific subtables based on tag conditions, supporting both READ and WRITE privileges.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/26-grant.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nGRANT privileges ON priv_level [WITH tag_condition] TO user_name\n \nprivileges : {\n    ALL\n  | priv_type [, priv_type] ...\n}\n \npriv_type : {\n    READ\n  | WRITE\n}\n \npriv_level : {\n    dbname.tbname\n  | dbname.*\n  | *.*\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Memory Data to Disk in TDengine SQL\nDESCRIPTION: Manually forces data in memory to be written to disk. Helps avoid data replay after restart when executed before shutting down a node, resulting in faster startup times.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/02-database.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nFLUSH DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Functions SQL\nDESCRIPTION: SQL syntax template for creating scalar functions in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [OR REPLACE] FUNCTION function_name AS library_path OUTPUTTYPE output_type LANGUAGE 'Python';\n```\n\n----------------------------------------\n\nTITLE: Using ASIN Function in SQL\nDESCRIPTION: The ASIN function returns the arcsine of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nASIN(expr)\n```\n\n----------------------------------------\n\nTITLE: Including MetersDeserializer Example\nDESCRIPTION: This snippet includes the MetersDeserializer class, which is responsible for deserializing meter data in the TDengine framework. This example highlights how raw data can be transformed into usable objects in a Java application interacting with TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_java.mdx#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/MetersDeserializer.java}}\n```\n\n----------------------------------------\n\nTITLE: Conditional Executable Creation (tdbTest)\nDESCRIPTION: This CMake snippet conditionally creates an executable named 'tdbTest' if the 'TD_LINUX' variable is defined. It links the executable against the 'tdb' and 'gtest_main' libraries for testing purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(${TD_LINUX})\n    add_executable(tdbTest \"tdbTest.cpp\")\n    target_link_libraries(tdbTest tdb gtest_main)\nendif()\n```\n\n----------------------------------------\n\nTITLE: TDengine 3.0 Response Format\nDESCRIPTION: Example of the response format in TDengine 3.0 REST API, showing the updated structure of the returned JSON object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"name\",\n            \"VARCHAR\",\n            64\n        ],\n        [\n            \"ntables\",\n            \"BIGINT\",\n            8\n        ],\n        [\n            \"status\",\n            \"VARCHAR\",\n            10\n        ]\n    ],\n    \"data\": [\n        [\n            \"information_schema\",\n            16,\n            \"ready\"\n        ],\n        [\n            \"performance_schema\",\n            9,\n            \"ready\"\n        ]\n    ],\n    \"rows\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Metadata in Java\nDESCRIPTION: This method retrieves the metadata of the database. The metadata provides information about the database structure, capabilities, and available features. It throws an `SQLException` if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n\"`DatabaseMetaData getMetaData() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Testing Query Hint with Subquery in TDengine SQL\nDESCRIPTION: This query tests the application of query hints in a subquery. It uses a hint to specify the table for the subquery selecting from 'stb1'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/query/hint.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM (SELECT /*+ USE_TNAME(stb1_1) */ * FROM stb1);\n```\n\n----------------------------------------\n\nTITLE: Using CEIL Function in SQL\nDESCRIPTION: The CEIL function returns the smallest integer greater than or equal to the specified field. It maintains the original data type and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCEIL(expr)\n```\n\n----------------------------------------\n\nTITLE: FORECAST Function Syntax in SQL\nDESCRIPTION: Defines the syntax for the FORECAST function in SQL, including column expression and option expression parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nFORECAST(column_expr, option_expr)\n\noption_expr: {\"\nalgo=expr1\n[,wncheck=1|0]\n[,conf=conf_val]\n[,every=every_val]\n[,rows=rows_val]\n[,start=start_ts_val]\n[,expr2]\n\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Connection String for Superset\nDESCRIPTION: Connection string format for establishing a WebSocket connection to TDengine database in Superset. Includes username, password, host, and port parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/11-superset.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntaosws://user:password@host:port\n```\n\nLANGUAGE: bash\nCODE:\n```\ntaosws://root:taosdata@localhost:6041\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Development Dependencies on Debian-based Systems\nDESCRIPTION: This command installs the necessary development libraries required for TDengine, including bzip2, PCRE2, and ICU libraries. These dependencies are essential for compiling or running TDengine database on Debian-based Linux distributions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/R/readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install -y libbz2-dev libpcre2-dev libicu-dev\n```\n\n----------------------------------------\n\nTITLE: Adler-32 Checksum Calculation Function\nDESCRIPTION: Main function to compute Adler-32 checksum for a given buffer. Initializes checksum to 1 and calls update_adler32 to process the buffer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1950.txt#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n      unsigned long adler32(unsigned char *buf, int len)\n      {\n        return update_adler32(1L, buf, len);\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in TDengine\nDESCRIPTION: Example of setting the locale parameter in the configuration file. This setting is used in Linux/macOS systems to specify both language and character encoding.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nlocale zh_CN.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Destroying a TMQ Configuration Object in C\nDESCRIPTION: Function to destroy a TMQ configuration object and release associated resources. Takes a pointer to a TMQ configuration object and returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_conf_destroy(ws_tmq_conf_t *conf)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Managing Dependencies in CMake\nDESCRIPTION: This snippet configures the linking of standard libraries and applies additional linking libraries based on the operating system (Windows, Darwin, Alpine, or others). It handles dependencies such as pthread, zlib, and jemalloc, and manages linkage for specific configurations like address-to-line conversion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/os/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_ADDR2LINE)\n    if(NOT TD_WINDOWS)\n        target_include_directories(\n            os\n            PUBLIC \"${TD_SOURCE_DIR}/contrib/libdwarf/src/lib/libdwarf\"\n        )\n        target_link_libraries(\n            os PUBLIC addr2line dl z\n        )\n    endif()\n\n    add_definitions(-DUSE_ADDR2LINE)\nendif()\n\nif(CHECK_STR2INT_ERROR)\n    add_definitions(-DTD_CHECK_STR_TO_INT_ERROR)\nendif()\n\ntarget_link_libraries(\n    os\n    PUBLIC pthread\n    PUBLIC zlibstatic\n    PUBLIC ${LINK_JEMALLOC}\n)\n\nif(TD_WINDOWS)\n    target_link_libraries(\n        os PUBLIC ws2_32 iconv msvcregex wcwidth winmm crashdump dbghelp version KtmW32\n    )\nelif(TD_DARWIN_64)\n    find_library(CORE_FOUNDATION_FRAMEWORK CoreFoundation)\n    target_link_libraries(os PUBLIC ${CORE_FOUNDATION_FRAMEWORK})\n    find_library(SYSTEM_CONFIGURATION_FRAMEWORK SystemConfiguration)\n    target_link_libraries(os PUBLIC ${SYSTEM_CONFIGURATION_FRAMEWORK})\n    target_link_libraries(\n        os PUBLIC dl m iconv\n    )\nelif(TD_ALPINE)\n    target_link_libraries(\n        os PUBLIC dl m rt unwind\n    )\nelse()\n    target_link_libraries(\n        os PUBLIC dl m rt\n    )\nendif()\n\n\nif(JEMALLOC_ENABLED)\n    add_dependencies(os jemalloc)\nendif()\n\n# if(NOT ${TD_WINDOWS})\n# find_library(tz libtz.a \"${TD_SOURCE_DIR}/contrib/tz\")\n# target_link_libraries(os PUBLIC ${tz})\n# endif(NOT ${TD_WINDOWS})\nif(${BUILD_TEST})\n    add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Specifying Subscription Offset - WebSocket Java Implementation\nDESCRIPTION: Demonstrates how to specify and reset subscription offset in Java using WebSocket connection. Uses consumer.poll for data retrieval and consumer.seekToBeginning for offset reset.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WsConsumerLoopFull.java:consumer_seek}}\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions for Virtual Tables in SQL\nDESCRIPTION: Syntax for granting privileges on virtual tables to users. Privileges can be ALL, READ, or WRITE. The database name is optional.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nGRANT privileges ON [db_name.]vtable_name TO user_name\nprivileges: { ALL | READ | WRITE }\n```\n\n----------------------------------------\n\nTITLE: Creating Spread Aggregate Function SQL\nDESCRIPTION: SQL statement to create the spread aggregate function with specified buffer size and Python language setting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_48\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace aggregate function myspread as '/root/udf/myspread.py' outputtype double bufsize 128 language 'Python';\n```\n\n----------------------------------------\n\nTITLE: Disabling a User Example in TDengine SQL\nDESCRIPTION: Example of disabling a user named 'test' in TDengine using the ALTER USER command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ntaos> alter user test enable 0;\n```\n\n----------------------------------------\n\nTITLE: Setting a VarBinary value in Param object\nDESCRIPTION: This function sets a VarBinary value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the VarBinary value (`value` as a byte slice) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_59\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetVarBinary(offset int, value []byte)\"\n```\n\n----------------------------------------\n\nTITLE: Creating TDengine Source Connector Configuration File\nDESCRIPTION: JSON configuration for the TDengine Source Connector that specifies connection details, data format preferences, and synchronization parameters for pushing data from a TDengine database to Kafka.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\":\"TDengineSourceConnector\",\n    \"config\":{\n    \"connector.class\": \"com.taosdata.kafka.connect.source.TDengineSourceConnector\",\n    \"tasks.max\": 1,\n    \"subscription.group.id\": \"source-demo\",\n    \"connection.url\": \"jdbc:TAOS://127.0.0.1:6030\",\n    \"connection.user\": \"root\",\n    \"connection.password\": \"taosdata\",\n    \"connection.database\": \"test\",\n    \"connection.attempts\": 3,\n    \"connection.backoff.ms\": 5000,\n    \"topic.prefix\": \"tdengine\",\n    \"topic.delimiter\": \"-\",\n    \"poll.interval.ms\": 1000,\n    \"fetch.max.rows\": 100,\n    \"topic.per.stable\": true,\n    \"topic.ignore.db\": false,\n    \"out.format\": \"line\",\n    \"data.precision\": \"ms\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of Anode in Shell\nDESCRIPTION: The directory tree depicts how directories are organized within an anode, used to store various components such as binaries, configurations, and source code for analytics algorithms. It's crucial for placing Python scripts for anomaly detection and forecasting in specific subdirectories to ensure they are recognized by the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\\n├── bin\\n├── cfg\\n├── lib\\n│   └── taosanalytics\\n│       ├── algo\\n│       │   ├── ad\\n│       │   └── fc\\n│       ├── misc\\n│       └── test\\n├── log -> /var/log/taos/taosanode\\n├── model -> /var/lib/taos/taosanode/model\\n└── venv -> /var/lib/taos/taosanode/venv\\n\n```\n\n----------------------------------------\n\nTITLE: TDengine Status Check Commands\nDESCRIPTION: Example output of TDengine cluster status check showing dnode and mnode information\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nroot@u1-58:/data1/projects/helm# kubectl --namespace default exec $POD_NAME -- taos -s \"show dnodes; show mnodes\"\nWelcome to the TDengine Command Line Interface, Client Version:3.3.5.1\nCopyright (c) 2023 by TDengine, all rights reserved.\n\ntaos> show dnodes; show mnodes\n     id      |            endpoint            | vnodes | support_vnodes |    status    |       create_time       |       reboot_time       |              note              |         machine_id         |\n==========================================================================================================================================================================================================\n           1 | simple-tdengine-0.simple-td... |      0 |             85 | ready        | 2025-02-07 21:17:34.903 | 2025-02-08 15:52:34.781 |                                | BWhWyPiEBrWZrQCSqTSc2a/H   |\nQuery OK, 1 row(s) in set (0.005133s)\n\n     id      |            endpoint            |      role      |   status    |       create_time       |        role_time        |\n==================================================================================================================================\n           1 | simple-tdengine-0.simple-td... | leader         | ready       | 2025-02-07 21:17:34.906 | 2025-02-08 15:52:34.878 |\nQuery OK, 1 row(s) in set (0.004299s)\n```\n\n----------------------------------------\n\nTITLE: Access TDengine CLI Directly on Host\nDESCRIPTION: This snippet demonstrates accessing TDengine CLI directly on the host after running TDengine in Docker with host network mode. It assumes that the TDengine client is installed on the host. The show dnodes command is executed to display information about the dnodes in the TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"$ taos\n\ntaos> show dnodes;\n     id      |            endpoint            | vnodes | support_vnodes |   status   |       create_time       |              note              |\n=================================================================================================================================================\n           1 | vm98:6030                      |      0 |             32 | ready      | 2022-08-19 14:50:05.337 |                                |\nQuery OK, 1 rows in database (0.010654s)\"\n```\n\n----------------------------------------\n\nTITLE: Python Implementation for Anomaly Detection Model in TDgpt\nDESCRIPTION: A Python class implementing the machine learning model loading and inference logic for a custom anomaly detection algorithm within the TDgpt framework\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/03-ml/index.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass _AutoEncoderDetectionService(AbstractAnomalyDetectionService):\n    name = 'sample_ad_model'\n    desc = \"sample anomaly detection model based on auto encoder\"\n\n    def __init__(self):\n        super().__init__()\n\n        self.table_name = None\n        self.mean = None\n        self.std = None\n        self.threshold = None\n        self.time_interval = None\n        self.model = None\n\n        self.dir = 'sample-ad-autoencoder'\n\n        self.root_path = conf.get_model_directory()\n\n        self.root_path = self.root_path + f'/{self.dir}/'\n\n        if not os.path.exists(self.root_path):\n            app_logger.log_inst.error(\n                \"%s ad algorithm failed to locate default module directory:\"\n                \"%s, not active\", self.__class__.__name__, self.root_path)\n        else:\n            app_logger.log_inst.info(\"%s ad algorithm root path is: %s\", self.__class__.__name__,\n                                     self.root_path)\n\n    def execute(self):\n        # Anomaly detection logic implementation\n        pass\n\n    def set_params(self, params):\n        # Model loading and parameter initialization\n        pass\n```\n\n----------------------------------------\n\nTITLE: Checking if Cursor is After Last Row in ResultSet in Java\nDESCRIPTION: Method for checking if the cursor is positioned after the last row in a database result set. Returns true if the cursor is after the last row, otherwise false. Throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_53\n\nLANGUAGE: Java\nCODE:\n```\nboolean isAfterLast() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Querying Total Records in TDengine\nDESCRIPTION: SQL query to count the total number of records in the 'meters' supertable created by taosBenchmark.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM test.meters;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Topic in TDengine SQL\nDESCRIPTION: SQL syntax for creating a topic that subscribes to an entire database. Can optionally include meta data for migration purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name [with meta] AS DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Event Window Query Results Example\nDESCRIPTION: Sample output showing the results of an event window query including window start/end times, duration, and counts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n tbname |         _wstart         |          _wend          |  _wduration   |   count(*)    |\n==============================================================================================\n d0     | 2022-01-01 00:00:00.000 | 2022-01-01 00:01:30.000 |         90000 |            10 |\n d0     | 2022-01-01 00:01:40.000 | 2022-01-01 00:02:30.000 |         50000 |             6 |\n d0     | 2022-01-01 00:02:40.000 | 2022-01-01 00:03:10.000 |         30000 |             4 |\n d0     | 2022-01-01 00:03:20.000 | 2022-01-01 00:07:10.000 |        230000 |            24 |\n d0     | 2022-01-01 00:07:20.000 | 2022-01-01 00:07:50.000 |         30000 |             4 |\n d1     | 2022-01-01 00:00:00.000 | 2022-01-01 00:01:30.000 |         90000 |            10 |\n d1     | 2022-01-01 00:01:40.000 | 2022-01-01 00:02:30.000 |         50000 |             6 |\n d1     | 2022-01-01 00:02:40.000 | 2022-01-01 00:03:10.000 |         30000 |             4 |\n d1     | 2022-01-01 00:03:20.000 | 2022-01-01 00:07:10.000 |        230000 |            24\n```\n\n----------------------------------------\n\nTITLE: Showing Consumers in TDengine SQL\nDESCRIPTION: SQL command to display all active consumers in the current database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/13-tmq.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CONSUMERS;\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in Python\nDESCRIPTION: This Python snippet demonstrates how to commit offsets in a TMQ consumer using the native client.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n    def commit_offset(self):\n        if self.consumer.TMQ_CommitSync() != 0:\n            print(f'failed to commit offset, {TMQ_NATIVE.TMQ_GetLastError()}')\n            sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Setting Primitive Avro Values\nDESCRIPTION: Functions for setting string, enum, and fixed values in Avro. For string, bytes, and fixed values, the set methods make a copy of the underlying data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint avro_value_set_string_len(avro_value_t *value,\n                              const char *src, size_t size);\nint avro_value_set_enum(avro_value_t *value, int src);\nint avro_value_set_fixed(avro_value_t *value,\n                         void *buf, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Dropping a Time-range-wise SMA Index in SQL\nDESCRIPTION: This SQL command demonstrates how to drop a previously created time-range-wise SMA index. It removes the 'sma_5min' index from the 'st' table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/user_manual/Small_Materialized_Aggrates.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ndrop sma_index sma_5min on st;\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for ARIMA Forecast Results\nDESCRIPTION: This JSON example illustrates the expected structure of ARIMA forecast results. It includes properties such as 'rows' for the number of returned rows, 'period' for the period of results, 'alpha' for the confidence interval, the 'algo' used, the 'mse' showing mean square error, and 'res' containing the results in column format. These fields outline the typical output from an ARIMA forecast in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/02-arima.md#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"rows\": fc_rows,  // Rows returned\n\"period\": period, // Period of results (equivalent to input period)\n\"alpha\": alpha,   // Confidence interval of results (equivalent to input confidence interval)\n\"algo\": \"arima\",  // Algorithm\n\"mse\": mse,       // Mean square error (MSE) of model generated for input time series\n\"res\": res        // Results in column format\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table using Native Connection in C\nDESCRIPTION: This C snippet demonstrates how to create a database and a supertable in TDengine using the C connector with a native connection. It uses the native TDengine client library to connect to the database and executes SQL statements for creating the database and table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n```c  title=\"Native Connection\"\n{{#include docs/examples/c/create_db_demo.c:create_db_and_table}}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumers in C\nDESCRIPTION: This C snippet outlines the steps for creating WebSocket consumers, including multiple function definitions for connection handling and message processing from a specified broker.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/tmq_demo.c:create_consumer_1}}\n```\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/tmq_demo.c:create_consumer_2}}\n```\n\n----------------------------------------\n\nTITLE: Show Table Distribution\nDESCRIPTION: Displays detailed information about table data distribution, including block counts, sizes, and compression ratios.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLE DISTRIBUTED table_name;\n```\n\n----------------------------------------\n\nTITLE: Redirect Middleware Configuration in Traefik\nDESCRIPTION: This snippet configures a middleware in Traefik that automatically redirects HTTP requests to HTTPS, enhancing the security of the API endpoints by ensuring secure connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\"\n```\n\n----------------------------------------\n\nTITLE: Seeking to End of Partitions in TDengine (TypeScript)\nDESCRIPTION: Sets the offset for a set of partitions to the latest offset. Takes an array of TopicPartition objects representing the partitions to operate on. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync seekToEnd(partitions:Array<TopicPartition>):Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building TDengine CLI Unit Tests with CMake\nDESCRIPTION: This CMake script configures and builds the unit tests for the TDengine CLI (shell) component. It sets the C++ standard, collects source files, creates an executable, links necessary libraries, and registers the test. The build process is skipped for Darwin (macOS) systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/shell/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"build taos-CLI unit test\")\n\nIF(NOT TD_DARWIN)\n        # GoogleTest requires at least C++11\n        SET(CMAKE_CXX_STANDARD 11)\n        AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n        ADD_EXECUTABLE(shellTest ${SOURCE_LIST})\n        TARGET_LINK_LIBRARIES(\n                shellTest\n                PRIVATE shell_ut gtest os common transport geometry util\n        )\n\n        target_include_directories(\n            shell_ut\n            PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n        )\n        \n\n        add_test(\n            NAME shellTest\n            COMMAND shellTest\n        )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Querying Encryption Configuration in TDengine\nDESCRIPTION: This SQL command retrieves the current encryption configuration for databases, showing the encryption algorithm applied to each database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect name, `encrypt_algorithm` from ins_databases;\n```\n\nLANGUAGE: sql\nCODE:\n```\n              name              | encrypt_algorithm |\n=====================================================\n power1                         | none              |\n power                          | sm4               |\n```\n\n----------------------------------------\n\nTITLE: Deleting a User in TDengine SQL\nDESCRIPTION: SQL command to drop (delete) a user from the TDengine system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDROP USER user_name;\n```\n\n----------------------------------------\n\nTITLE: Calculating Final Adler-32 Value\nDESCRIPTION: Code fragment showing the final computation steps of the Adler-32 checksum, combining s1 and s2 components with modulo operations using BASE constant.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1950.txt#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n          s1 = (s1 + buf[n]) % BASE;\n          s2 = (s2 + s1)     % BASE;\n        }\n        return (s2 << 16) + s1;\n      }\n```\n\n----------------------------------------\n\nTITLE: Querying VGROUPS from INFORMATION_SCHEMA\nDESCRIPTION: Example of querying the number of VGROUPs for a specific database using the ins_databases table. Shows proper usage of backtick escaping for keyword columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/22-meta.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect `vgroups` from ins_databases where name = 'test';\n```\n\n----------------------------------------\n\nTITLE: Example CSV Export Configuration in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration example for exporting data to CSV format using taosBenchmark. This snippet is a placeholder for the actual csv-export.json file content.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{{#include /TDengine/tools/taos-tools/example/csv-export.json}}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in TDengine\nDESCRIPTION: SQL command to retrieve current timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT NOW();\n```\n\n----------------------------------------\n\nTITLE: Latest State Query Template\nDESCRIPTION: Template for querying the latest state of time-series data with time range constraints.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect last(column_name) from db.table where ts > $from and ts < $to;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data using C#\nDESCRIPTION: This C# snippet demonstrates inserting data into TDengine using the C# connector with WebSocket. It establishes a WebSocket connection and uses SQL INSERT statements to insert data into the `meters` supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp\n{{#include docs/examples/csharp/wsInsert/Program.cs:insert_data}}\n```\n```\n\n----------------------------------------\n\nTITLE: Using COS Function in SQL\nDESCRIPTION: The COS function returns the cosine of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nCOS(expr)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Table Creation\nDESCRIPTION: This command runs the JDBC demo application JAR file, instructing it to create tables before inserting data. It requires a host and database name, and accepts several parameters for table and row specifications. Outputs are the creation of specified tables and a large dataset being inserted into the TDengine database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/taosdemo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\njava -jar target/taosdemo-2.0.1-jar-with-dependencies.jar -host <hostname> -database <db name> -doCreateTable true -superTableSQL \"create table weather(ts timestamp, f1 int) tags(t1 nchar(4))\" -numOfTables 1000 -numOfRowsPerTable 100000000 -numOfThreadsForInsert 10 -numOfTablesPerSQL 10 -numOfValuesPerSQL 100\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Geometry Unit Tests with CMake\nDESCRIPTION: Sets up the geometry unit test executable with proper C++ standard, links required libraries, and registers the test. The configuration uses GoogleTest framework and requires C++11 standard. It excludes Darwin (macOS) platforms from the build.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/geometry/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"build geometry unit test\")\n\nIF(NOT TD_DARWIN)\n  # GoogleTest requires at least C++11\n  SET(CMAKE_CXX_STANDARD 11)\n\n  AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n  ADD_EXECUTABLE(geomTest ${SOURCE_LIST})\n\n  TARGET_LINK_LIBRARIES(\n    geomTest\n    PUBLIC os util gtest qcom nodes geometry scalar function scalar\n  )\n\n  add_test(\n    NAME geomTest\n    COMMAND geomTest\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Accessing OffsetAndMetadata in Java\nDESCRIPTION: Methods for retrieving offset and metadata information from OffsetAndMetadata instances. Handles message offset tracking and associated metadata management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_102\n\nLANGUAGE: Java\nCODE:\n```\nlong offset()\nString metadata()\n```\n\n----------------------------------------\n\nTITLE: Synchronize Specified Supertables\nDESCRIPTION: This command synchronizes specified supertables from one TDengine instance to another using taosX. It uses the `run` command with the `-f` parameter including `stables` parameter in DSN to specify the supertables to synchronize, and the `-t` parameter to define the target database. The `-v` parameter enables verbose logging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run \\\n  -f 'taos://root:taosdata@localhost:6030/db1?stables=meters' \\\n  -t 'taos:///db2' -v\"\n```\n\n----------------------------------------\n\nTITLE: Using ACOS Function in SQL\nDESCRIPTION: The ACOS function returns the arccosine of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nACOS(expr)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine via Native Interface\nDESCRIPTION: Establishes a native connection to TDengine using the direct driver interface for high-performance database interactions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_node.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/node/nativeexample/connect.js}}\n```\n\n----------------------------------------\n\nTITLE: Getting number of parameters using Stmt object in af package\nDESCRIPTION: This function retrieves the number of parameters required by the prepared SQL statement. It is called on a Stmt object and returns the count and an error if retrieval fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) NumParams() (int, error)\"\n```\n\n----------------------------------------\n\nTITLE: Starting taosX Agent on Linux using Systemd\nDESCRIPTION: This snippet describes the command to start the taosX Agent on Linux systems using the Systemd service manager. This command initiates the Agent to begin operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/05-taosx-agent.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start taosx-agent\n```\n\n----------------------------------------\n\nTITLE: Seasonal Hybrid ESD Anomaly Detection in SQL\nDESCRIPTION: Advanced time-series anomaly detection algorithm supporting multiple detection directions and configurable anomaly proportions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=shesd,direction=both,anoms=0.05\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for TDengine Function Library\nDESCRIPTION: Sets up include paths for the function library, specifying both public and private header directories to resolve dependencies during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    function\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/function\"\n    \"${TD_SOURCE_DIR}/include/util\"\n    \"${TD_SOURCE_DIR}/include/common\"\n    \"${TD_SOURCE_DIR}/include/client\"\n    \"${TD_SOURCE_DIR}/contrib/libuv/include\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Dimension Data from TDengine Supertable\nDESCRIPTION: This SQL query retrieves distinct tag data for all smart meters from the test.meters supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct tbname device, groupId, location from test.meters\n```\n\n----------------------------------------\n\nTITLE: Specifying Subscription Offset - WebSocket Go Implementation\nDESCRIPTION: Go implementation for managing subscription offset using WebSocket connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/tmq/ws/main.go:seek}}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Value Building in C using json_pack\nDESCRIPTION: Examples of creating JSON values using the json_pack function with format strings. Shows how to create integers, arrays, and objects.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n/* Create the JSON integer 42 */\njson_pack(\"i\", 42);\n\n/* Create the JSON array [\"foo\", \"bar\", true] */\njson_pack(\"[ssb]\", \"foo\", \"bar\", 1);\n```\n\n----------------------------------------\n\nTITLE: Viewing Data Nodes in TDengine SQL\nDESCRIPTION: Displays all data nodes in the cluster, showing information like node ID, endpoint, and status.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW DNODES;\n```\n\n----------------------------------------\n\nTITLE: Terminating Connection in TDengine SQL\nDESCRIPTION: This SQL command terminates a specific connection in TDengine. The conn_id parameter is obtained through the 'SHOW CONNECTIONS' command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nKILL CONNECTION conn_id;\n```\n\n----------------------------------------\n\nTITLE: Usage of taoskeeper Command Line Parameters\nDESCRIPTION: This snippet provides the command line usage instructions for the taoskeeper tool, detailing various parameters and their default values. It serves as a reference for users to understand how to configure and execute taoskeeper. Required dependencies include a working TDengine installation and access to its RESTful interface.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage of taoskeeper v3.3.3.0:\n  -R, --RotationInterval string                      interval for refresh metrics, such as \"300ms\", Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". Env \"TAOS_KEEPER_ROTATION_INTERVAL\" (default \"15s\")\n  -c, --config string                                config path default /etc/taos/taoskeeper.toml\n      --drop string                                  run taoskeeper in command mode, only support old_taosd_metric_stables.\n      --environment.incgroup                         whether running in cgroup. Env \"TAOS_KEEPER_ENVIRONMENT_INCGROUP\"\n      --fromTime string                              parameter of transfer, example: 2020-01-01T00:00:00+08:00 (default \"2020-01-01T00:00:00+08:00\")\n      --gopoolsize int                               coroutine size. Env \"TAOS_KEEPER_POOL_SIZE\" (default 50000)\n  -h, --help                                         Print this help message and exit\n      --instanceId int                               instance ID. Env \"TAOS_KEEPER_INSTANCE_ID\" (default 64)\n      --log.compress                                 whether to compress old log. Env \"TAOS_KEEPER_LOG_COMPRESS\"\n      --log.keepDays uint                            log retention days, must be a positive integer. Env \"TAOS_KEEPER_LOG_KEEP_DAYS\" (default 30)\n      --log.level string                             log level (trace debug info warning error). Env \"TAOS_KEEPER_LOG_LEVEL\" (default \"info\")\n      --log.path string                              log path. Env \"TAOS_KEEPER_LOG_PATH\" (default \"/var/log/taos\")\n      --log.reservedDiskSize string                  reserved disk size for log dir (KB MB GB), must be a positive integer. Env \"TAOS_KEEPER_LOG_RESERVED_DISK_SIZE\" (default \"1GB\")\n      --log.rotationCount uint                       log rotation count. Env \"TAOS_KEEPER_LOG_ROTATION_COUNT\" (default 5)\n      --log.rotationSize string                      log rotation size(KB MB GB), must be a positive integer. Env \"TAOS_KEEPER_LOG_ROTATION_SIZE\" (default \"1GB\")\n      --log.rotationTime duration                    deprecated: log rotation time always 24 hours. Env \"TAOS_KEEPER_LOG_ROTATION_TIME\" (default 24h0m0s)\n      --logLevel string                              log level (trace debug info warning error). Env \"TAOS_KEEPER_LOG_LEVEL\" (default \"info\")\n      --metrics.database.name string                 database for storing metrics data. Env \"TAOS_KEEPER_METRICS_DATABASE\" (default \"log\")\n      --metrics.database.options.buffer int          database option buffer for audit database. Env \"TAOS_KEEPER_METRICS_BUFFER\" (default 64)\n      --metrics.database.options.cachemodel string   database option cachemodel for audit database. Env \"TAOS_KEEPER_METRICS_CACHEMODEL\" (default \"both\")\n      --metrics.database.options.keep int            database option buffer for audit database. Env \"TAOS_KEEPER_METRICS_KEEP\" (default 90)\n      --metrics.database.options.vgroups int         database option vgroups for audit database. Env \"TAOS_KEEPER_METRICS_VGROUPS\" (default 1)\n      --metrics.prefix string                        prefix in metrics names. Env \"TAOS_KEEPER_METRICS_PREFIX\"\n      --metrics.tables stringArray                   export some tables that are not supertable, multiple values split with white space. Env \"TAOS_KEEPER_METRICS_TABLES\"\n  -P, --port int                                     http port. Env \"TAOS_KEEPER_PORT\" (default 6043)\n      --tdengine.host string                         TDengine server's ip. Env \"TAOS_KEEPER_TDENGINE_HOST\" (default \"127.0.0.1\")\n      --tdengine.password string                     TDengine server's password. Env \"TAOS_KEEPER_TDENGINE_PASSWORD\" (default \"taosdata\")\n      --tdengine.port int                            TDengine REST server(taosAdapter)'s port. Env \"TAOS_KEEPER_TDENGINE_PORT\" (default 6041)\n      --tdengine.username string                     TDengine server's username. Env \"TAOS_KEEPER_TDENGINE_USERNAME\" (default \"root\")\n      --tdengine.usessl                              TDengine server use ssl or not. Env \"TAOS_KEEPER_TDENGINE_USESSL\"\n      --transfer string                              run taoskeeper in command mode, only support old_taosd_metric. transfer old metrics data to new tables and exit\n  -V, --version                                      Print the version and exit\n```\n\n----------------------------------------\n\nTITLE: Schemaless Raw Data Insertion with TTL\nDESCRIPTION: Schemaless insertion method that supports setting a Time-to-Live (TTL) parameter for automatically managing data lifecycle and table creation expiration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nWS_RES *ws_schemaless_insert_raw_ttl(WS_TAOS *taos,\n                                     const char *lines,\n                                     int len,\n                                     int32_t *totalRows,\n                                     int protocol,\n                                     int precision,\n                                     int ttl)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data with Rhai Scripts for TDengine\nDESCRIPTION: This snippet showcases a custom Rhai script used to parse JSON data and transform it into an array of objects suitable for insertion into TDengine. The script extracts three-phase voltage values from a JSON object and restructures them into individual objects with timestamp, voltage value, and device ID.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/index.md#2025-04-16_snippet_2\n\nLANGUAGE: rhai\nCODE:\n```\nlet v3 = data[\"voltage\"].split(\",\");\n\n[\n#{\"ts\": data[\"ts\"], \"val\": v3[0], \"dev_id\": data[\"dev_id\"]},\n#{\"ts\": data[\"ts\"], \"val\": v3[1], \"dev_id\": data[\"dev_id\"]},\n#{\"ts\": data[\"ts\"], \"val\": v3[2], \"dev_id\": data[\"dev_id\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TDinsight with Custom Parameters\nDESCRIPTION: Example of running the TDinsight.sh script with custom TDengine connection parameters for a non-default setup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./TDinsight.sh -a http://tdengine:6041 -u root1 -p pass5ord\n```\n\n----------------------------------------\n\nTITLE: Extracting TDengine Tar Archive on Linux\nDESCRIPTION: Command to extract the TDengine .tar.gz package on Linux systems. Replace <version> with the actual version number of the downloaded package.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -zxvf TDengine-server-<version>-Linux-x64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Service in Kubernetes\nDESCRIPTION: This YAML configuration defines a Kubernetes Service for TDengine, exposing ports 6030 and 6041 for TCP communication. The service uses a selector to identify pods with the label 'app: tdengine', ensuring traffic is routed to the appropriate TDengine instances.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: \"taosd\"\n  labels:\n    app: \"tdengine\"\nspec:\n  ports:\n    - name: tcp6030\n      protocol: \"TCP\"\n      port: 6030\n    - name: tcp6041\n      protocol: \"TCP\"\n      port: 6041\n  selector:\n    app: \"tdengine\"\n```\n\n----------------------------------------\n\nTITLE: 创建查询主题的SQL语法\nDESCRIPTION: 创建一个基于SQL查询的数据订阅主题，允许订阅查询结果，包括条件过滤和标量函数计算，但不支持聚合函数和时间窗口聚合。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name as subquery\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Requests Table Schema in SQL\nDESCRIPTION: SQL table schema for adapter_requests that stores monitoring data for taosAdapter requests including total counts, query stats, and request statuses.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE adapter_requests (\n  ts TIMESTAMP,\n  total INT UNSIGNED,\n  query INT UNSIGNED,\n  write INT UNSIGNED,\n  other INT UNSIGNED,\n  in_process INT UNSIGNED,\n  success INT UNSIGNED,\n  fail INT UNSIGNED,\n  query_success INT UNSIGNED,\n  query_fail INT UNSIGNED,\n  write_success INT UNSIGNED,\n  write_fail INT UNSIGNED,\n  other_success INT UNSIGNED,\n  other_fail INT UNSIGNED,\n  query_in_process INT UNSIGNED,\n  write_in_process INT UNSIGNED,\n  endpoint VARCHAR,\n  req_type NCHAR\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Access for Azure Blob Storage via Flexify in TDengine\nDESCRIPTION: This snippet demonstrates how to configure TDengine to access Azure Blob Storage using the Flexify service as an S3 gateway. It involves setting the `s3EndPoint`, `s3AccessKey`, and `s3BucketName` parameters in the `taos.cfg` configuration file. The example shows how to configure multiple endpoints for redundancy.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\"s3EndPoint   http //20.191.157.23,http://20.191.157.24,http://20.191.157.25\ns3AccessKey  FLIOMMNL0:uhRNdeZMLD4wo,ABCIOMMN:uhRNdeZMD4wog,DEFOMMNL049ba:uhRNdeZMLD4wogXd\ns3BucketName td-test\"\n```\n\n----------------------------------------\n\nTITLE: Including C Native Parameter Binding Example for stmt\nDESCRIPTION: This C code snippet provides an example of parameter binding with the stmt method, demonstrating efficient data insertion into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/stmt_insert_demo.c}}\n```\n\n----------------------------------------\n\nTITLE: Running full test suite for Apache Avro using Docker\nDESCRIPTION: Command to run a clean execution of the full test suite for Apache Avro using a Docker container. This ensures consistent testing across environments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/BUILD.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh docker-test\n```\n\n----------------------------------------\n\nTITLE: Basic Load Balancing Setup with Nginx\nDESCRIPTION: Demonstrates using Nginx to set up load balancing for taosAdapter, distributing traffic across multiple nodes. Includes configurations for forwarding headers and websocket compatibility.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    server {\n        listen 6041;\n        \n        location / {\n            proxy_pass http://websocket;\n            # Headers for websocket compatible\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection $connection_upgrade;\n            # Forwarded headers\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_set_header X-Forwarded-Host $host;\n            proxy_set_header X-Forwarded-Port $server_port;\n            proxy_set_header X-Forwarded-Server $hostname;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n    }\n \n    upstream websocket {\n        server 192.168.11.61:6041;\n        server 192.168.11.62:6041;\n        server 192.168.11.63:6041;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a UDF in TDengine using SQL\nDESCRIPTION: This SQL statement updates an existing UDF named `myfun` in TDengine, replacing its definition with the Python script located at `/root/udf/myfun.py`.  The `outputtype` remains `double` and `language` remains `Python`. This is a method for updating UDF logic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function myfun as '/root/udf/myfun.py' outputtype double language 'Python';\n```\n\n----------------------------------------\n\nTITLE: Example JSON Data Structure for TDengine\nDESCRIPTION: This snippet provides an example of JSON data collected from a smart meter, which includes group ID, voltage (as string), current, timestamp, inuse status, and location.  This JSON data can be parsed and transformed for storage and analysis within TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/index.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"groupid\": 170001, \"voltage\": \"221V\", \"current\": 12.3, \"ts\": \"2023-12-18T22:12:00\", \"inuse\": true, \"location\": \"beijing.chaoyang.datun\"}\n{\"groupid\": 170001, \"voltage\": \"220V\", \"current\": 12.2, \"ts\": \"2023-12-18T22:12:02\", \"inuse\": true, \"location\": \"beijing.chaoyang.datun\"}\n{\"groupid\": 170001, \"voltage\": \"216V\", \"current\": 12.5, \"ts\": \"2023-12-18T22:12:04\", \"inuse\": false, \"location\": \"beijing.chaoyang.datun\"}\n```\n\n----------------------------------------\n\nTITLE: Counting Records in TDengine\nDESCRIPTION: This SQL query counts the total number of records in the `d0` table within the `test` database. It's a basic aggregation operation to determine the size of the table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/query-sqls-slow-query.txt#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect count(*) from test.d0\n```\n\n----------------------------------------\n\nTITLE: TDengine Server Platform Support Matrix - Markdown Table\nDESCRIPTION: Detailed table showing operating system compatibility for TDengine Server across different architectures and versions, including both community and enterprise edition support.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/07-supported.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                       | **Version**        | **X64 64bit** | **ARM64** |\n| ----------------------|----------------| ------------- | --------- |\n| **CentOS**            | **7.9 and above**    | ●             | ●         |\n| **Ubuntu**            | **18 and above**     | ●             | ●         |\n| **RedHat**            | **RHEL 7 and above** | ●             | ●         |\n| **Debian**            | **6.0 and above**    | ●             | ●         |\n| **FreeBSD**           | **12 and above**     | ●             | ●         |\n| **OpenSUSE**          | **All versions**     | ●             | ●         |\n| **SUSE Linux**        | **11 and above**     | ●             | ●         |\n| **Fedora**            | **21 and above**     | ●             | ●         |\n| **Windows Server**    | **2016 and above**  | ●/E           |           |\n| **Windows**           | **10/11**      | ●/E           |           |\n| **Galaxy Kirin**      | **V10 and above**     | ●/E           | ●/E      |\n| **NeoKylin**          | **V7.0 and above**    | ●/E           | ●/E      |\n| **UnionTech UOS**     | **V20 and above**     | ●/E           |           |\n| **Inspur K-UX**       | **V8.0 and above**    | ●/E           |           |\n| **Huawei Euler openEuler** | **V20.03 and above**  | ●/E           |           |\n| **Anolis OS**         | **V8.6 and above**   | ●/E           |           |\n| **macOS**             | **11.0 and above**   |                | ●         |\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Offset in Rust\nDESCRIPTION: This Rust snippet demonstrates seeking to a specified offset in a TMQ consumer, logging partition assignments and offset adjustment attempts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nasync fn seek_offset() -> Result<(), Error> {\n    let mut consumer = Consumer::new(vec![\"topic\"],\n    Options::default().group_id(\"test\")\n    .enable_auto_commit(false)\n    .client_id(\"cid\")).await?;\n\n    let assignments = consumer.assignments().await?;\n    println!(\"Initial assignments: {:?}\", assignments);\n\n    for assignment in &assignments {\n        println!(\"Topic: {}, Vgroup ID: {}, Current: {}, Begin: {}, End: {}\",\n                 assignment.topic(), assignment.vgroup_id(), assignment.current(), assignment.begin(), assignment.end());\n\n        let result = consumer.offset_seek(assignment.topic(), assignment.vgroup_id(), assignment.begin()).await;\n        match result {\n            Ok(_) => println!(\"Offset seek succeeded for topic {}\", assignment.topic()),\n            Err(e) => println!(\"Offset seek failed for topic {}: {:?}\", assignment.topic(), e),\n        }\n    }\n\n    let assignments = consumer.assignments().await?;\n    println!(\"Assignments after seek: {:?}\", assignments);\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: String Iterator Implementation in C\nDESCRIPTION: Defines a string structure and iterator function for parsing delimited strings without modifying the input. Used for efficient string traversal in path-based JSON access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nstruct string {\n    const char *string;\n    size_t length;\n};\n\nsize_t string_try_next(struct string *str, const char *delimiter) {\n    str->string += strspn(str->string, delimiter);\n    str->length = strcspn(str->string, delimiter);\n    return str->length;\n}\n\n#define string_foreach(_string, _delimiter) \\\n        for (; string_try_next(&(_string), _delimiter); (_string).string += (_string).length)\n```\n\n----------------------------------------\n\nTITLE: Querying Table Names Based on Group Selection\nDESCRIPTION: SQL query to select table names filtered by a previously selected group ID and time range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect tbname from power.meters where groupid = $selected_groups and ts > $from and ts < $to;\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Anomaly Detection Service in Python\nDESCRIPTION: This code segment shows how to implement a unit test for the custom anomaly detection service using the unittest module. It affirms the functional correctness by asserting that the last data point is returned as an anomaly, ensuring the robustness of the service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/02-algo/03-ad.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_myad(self):\n    \"\"\" Test the _IqrService class \"\"\"\n    s = loader.get_service(\"myad\")\n\n    # Configure the data to test\n    s.set_input_list(AnomalyDetectionTest.input_list, None)\n\n    r = s.execute()\n\n    # The final value is an anomaly\n    self.assertEqual(r[-1], -1)\n    self.assertEqual(len(r), len(AnomalyDetectionTest.input_list))\n```\n\n----------------------------------------\n\nTITLE: Establishing WebSocket Connection to TDengine\nDESCRIPTION: Demonstrates how to create a WebSocket connection to TDengine database using the driver. Uses root credentials and connects to localhost on port 6041.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvar taosUri = \"root:taosdata@ws(localhost:6041)/\"\ntaos, err := sql.Open(\"taosWS\", taosUri)\n```\n\n----------------------------------------\n\nTITLE: Unit testing anomaly detection service in Python\nDESCRIPTION: This Python code snippet shows a unit test case for the custom anomaly detection algorithm (`myad`). It retrieves the service, sets the input data using `set_input_list`, executes the algorithm using `execute`, and asserts that the last element of the result is -1 (indicating an anomaly) and that the result length matches the input length. This requires the `taosanalytics` and `unittest` packages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/03-ad.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_myad(self):\n    \"\"\" 测试 _IqrService 类 \"\"\"\n    s = loader.get_service(\"myad\")\n\n    # 设置需要进行检测的输入数据\n    s.set_input_list(AnomalyDetectionTest.input_list, None)\n\n    r = s.execute()\n\n    # 最后一个点是异常点\n    self.assertEqual(r[-1], -1)\n    self.assertEqual(len(r), len(AnomalyDetectionTest.input_list))\n```\n\n----------------------------------------\n\nTITLE: Dropping Tag Index in TDengine SQL\nDESCRIPTION: SQL syntax for dropping an existing index. If the specified index doesn't exist, the command fails without affecting the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/08-tag-index.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nDROP INDEX index_name\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Processing Time-Series Data with Seeq and Python for Forecasting\nDESCRIPTION: This script demonstrates how to retrieve data from Seeq, process it using pandas, and apply machine learning forecasting techniques using mlforecast and LightGBM. It includes data retrieval, preprocessing, and visualization of the forecasted results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nfrom seeq import spy\nspy.options.compatibility = 189\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport mlforecast\nimport lightgbm as lgb\nfrom mlforecast.target_transforms import Differences\nfrom sklearn.linear_model import LinearRegression\n\nds = spy.search({'ID': \"8C91A9C7-B6C2-4E18-AAAF-XXXXXXXXX\"})\nprint(ds)\n\nsig = ds.loc[ds['Name'].isin(['Num'])]\nprint(sig)\n\ndata = spy.pull(sig, start='2015-01-01', end='2022-12-31', grid=None)\nprint(\"data.info()\")\ndata.info()\nprint(data)\n#data.plot()\n\nprint(\"data[Num].info()\")\ndata['Num'].info()\nda = data['Num'].index.tolist()\n#print(da)\n\nli = data['Num'].tolist()\n#print(li)\n\ndata2 = pd.DataFrame()\ndata2['ds'] = da\nprint('1st data2 ds info()')\ndata2['ds'].info()\n\n#data2['ds'] = pd.to_datetime(data2['ds']).to_timestamp()\ndata2['ds'] = pd.to_datetime(data2['ds']).astype('int64')\ndata2['y'] = li\nprint('2nd data2 ds info()')\ndata2['ds'].info()\nprint(data2)\n\ndata2.insert(0, column = \"unique_id\", value=\"unique_id\")\n\nprint(\"Forecasting ...\")\n\nforecast = mlforecast.MLForecast(\n    models = lgb.LGBMRegressor(),\n    freq = 1,\n    lags=[365],\n    target_transforms=[Differences([365])],\n)\n\nforecast.fit(data2)\npredicts = forecast.predict(365)\n\npd.concat([data2, predicts]).set_index(\"ds\").plot(title = \"current data with forecast\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Building TDengine Shell Executable\nDESCRIPTION: Configures and builds the main TDengine shell executable with platform-specific dependencies and linking options. Includes conditional compilation for jemalloc support on Linux 64-bit systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/shell/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src SHELL_SRC)\n\nadd_executable(shell ${SHELL_SRC} ../src/pub.c)\n\nIF(TD_LINUX_64 AND JEMALLOC_ENABLED)\n    ADD_DEFINITIONS(-DTD_JEMALLOC_ENABLED -I${CMAKE_BINARY_DIR}/build/include -L${CMAKE_BINARY_DIR}/build/lib -Wl,-rpath,${CMAKE_BINARY_DIR}/build/lib -ljemalloc)\n    SET(LINK_JEMALLOC \"-L${CMAKE_BINARY_DIR}/build/lib -ljemalloc\")\n    ADD_DEPENDENCIES(shell jemalloc)\nELSE()\n    SET(LINK_JEMALLOC \"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Revoking View Permissions in SQL\nDESCRIPTION: This SQL snippet showcases how to revoke specific view permissions from a user in TDengine. Permissions can include read, write, or alter, and can be revoked for specific views or databases. Establishing clear permissions is crucial to managing database security effectively.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nrevoke privileges on [db_name.]view_name from user_name\nprivileges: {\n all,\n | priv_type [, priv_type] ...\n}\npriv_type: {\n read\n | write\n | alter\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Users in TDengine SQL\nDESCRIPTION: SQL command to show all users in the TDengine system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW USERS;\n```\n\n----------------------------------------\n\nTITLE: Reference Count Manipulation Functions in C\nDESCRIPTION: Thread-safe functions for manipulating JSON value reference counts in multithreaded environments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/threadsafety.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\njson_incref()\njson_decref()\n```\n\n----------------------------------------\n\nTITLE: Verifying Kafka Connect Status\nDESCRIPTION: This command uses `curl` to query the Kafka Connect API and check if connectors are running.  An empty JSON array `[]` indicates that no connectors are currently running, suggesting a successful startup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8083/connectors\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for taosExplorer in TDengine\nDESCRIPTION: This code snippet demonstrates how to configure SSL for the taosExplorer component in TDengine by modifying the `/etc/taos/explorer.toml` configuration file. It specifies the paths to the SSL certificate and private key files, enabling secure HTTPS access to the taosExplorer web interface. This ensures that data transmitted between the client and taosExplorer is encrypted.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n\"[ssl]\\n# SSL certificate file\ncertificate = \\\"/path/to/ca.file\\\"\\n\n# SSL certificate private key\ncertificate_key = \\\"/path/to/key.file\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Column Width in a Supertable\nDESCRIPTION: SQL command to modify the width of a variable-length column in a supertable (can only increase, not decrease).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/04-stable.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER STABLE stb_name MODIFY COLUMN col_name data_type(length);\n```\n\n----------------------------------------\n\nTITLE: Defining Subquery for Streaming Computation in TDengine SQL\nDESCRIPTION: Syntax for the subquery used in creating a streaming computation, including select list, from clause, optional where condition, partitioning, and window clause.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nsubquery: SELECT select_list\n    from_clause\n    [WHERE condition]\n    [PARTITION BY tag_list]\n    window_clause\n```\n\n----------------------------------------\n\nTITLE: Scaling TDengine Cluster Using kubectl\nDESCRIPTION: This snippet scales the TDengine statefulset to the specified number of replicas in the cluster. The command is set to scale the cluster to 4 nodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl scale statefulsets tdengine  -n tdengine-test --replicas=4\n```\n\n----------------------------------------\n\nTITLE: Manually Trigger S3 Migration in TDengine\nDESCRIPTION: This snippet explains how to manually trigger the migration of time-series data from local storage to S3 in TDengine. The `s3migrate` command is used on a specified database. Dependencies include having an operational TDengine setup with S3 configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ns3migrate database <db_name>;\n```\n\n----------------------------------------\n\nTITLE: Deleting Topic in TDengine SQL\nDESCRIPTION: SQL syntax for deleting a topic in TDengine. The FORCE option allows deletion of topics currently subscribed to by consumers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/01-subscription.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TOPIC [IF EXISTS] [FORCE] topic_name;\n```\n\n----------------------------------------\n\nTITLE: Installing Python Package for UDF\nDESCRIPTION: Shell command to install the 'moment' Python package needed for the next UDF example. Third-party libraries can be used in UDFs but require proper installation and configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\npip3 install moment\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Source Files and Directories in CMake\nDESCRIPTION: Sets up directory variables and glob patterns to collect Azure SDK source files for compilation. This includes core Azure components, identity management, and storage-related functionalities.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/azure-cmake/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(AZURE_DIR \"${TD_CONTRIB_DIR}/azure-sdk-for-cpp-azure-storage-blobs_12.13.0-beta.1\")\nset(AZURE_SDK_LIBRARY_DIR \"${AZURE_DIR}/sdk\")\n\nfile(GLOB AZURE_SDK_SRC\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/credentials/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/cryptography/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/http/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/http/curl/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/io/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/src/tracing/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/identity/azure-identity/src/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/storage/azure-storage-blobs/src/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/storage/azure-storage-blobs/src/private/*.cpp\"\n    \"${AZURE_SDK_LIBRARY_DIR}/storage/azure-storage-common/src/*.cpp\"\n)\n\nfile(GLOB AZURE_SDK_UNIFIED_SRC\n    ${AZURE_SDK_SRC}\n)\n\nset(AZURE_SDK_INCLUDES\n    \"${AZURE_SDK_LIBRARY_DIR}/core/azure-core/inc/\"\n    \"${AZURE_SDK_LIBRARY_DIR}/identity/azure-identity/inc/\"\n    \"${AZURE_SDK_LIBRARY_DIR}/storage/azure-storage-common/inc/\"\n    \"${AZURE_SDK_LIBRARY_DIR}/storage/azure-storage-blobs/inc/\"\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Value Operator Usage\nDESCRIPTION: Shows how to use the -> operator to access JSON values in queries and selections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/17-json.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from s1 where info->'k1' = 'v1'\n\nselect info->'k1' from s1\n```\n\n----------------------------------------\n\nTITLE: Getting TDengine Server Version\nDESCRIPTION: Function to retrieve the server version information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_58\n\nLANGUAGE: c\nCODE:\n```\nchar *taos_get_server_info(TAOS *taos)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Data from MQTT Payload in TDengine\nDESCRIPTION: Examples of JSON data formats that can be parsed by the TDengine MQTT connector. The parser supports both JSONObject and JSONArray formats for ingesting data from MQTT messages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/07-mqtt.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"message\": \"hello-word\"}\n{\"id\": 2, \"message\": \"hello-word\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\": 1, \"message\": \"hello-word\"},{\"id\": 2, \"message\": \"hello-word\"}]\n```\n\n----------------------------------------\n\nTITLE: MongoDB Database Query Template Example\nDESCRIPTION: Example of a JSON query template for filtering MongoDB data with datetime range conditions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/17-mongodb.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"ddate\":{\"$gte\":${start_datetime},\"$lt\":${end_datetime}}}\n```\n\n----------------------------------------\n\nTITLE: Batch Creating Child Tables from CSV\nDESCRIPTION: SQL syntax for creating multiple child tables using data from a CSV file. The CSV file should contain table names and tag values without headers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] USING [db_name.]stb_name (field1_name [, field2_name] ....) FILE csv_file_path;\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Scale in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the scale (number of decimal places) of a specified parameter. Takes the parameter index as input and returns an integer representing the scale. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_87\n\nLANGUAGE: Java\nCODE:\n```\nint getScale(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Values for Subtable Fields in Oracle SQL\nDESCRIPTION: This SQL snippet is used to query distinct values of specified field combinations for splitting subtables. It's typically used in conjunction with the SQL Template to ensure proper data migration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/15-oracle.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct col_name1, col_name2 from table\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Executables\nDESCRIPTION: This code snippet specifies the source files for the previously defined executables, linking source files to their respective executables. This is crucial for compiling the code correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/transport/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(transUT\n  PRIVATE\n  \"transUT.cpp\"\n)\ntarget_sources(transUT2\n  PRIVATE\n  \"transUT2.cpp\"\n)\ntarget_sources(transportTest\n  PRIVATE\n  \"transportTests.cpp\"\n)\ntarget_sources(svrBench\n  PRIVATE\n  \"svrBench.c\"\n)\ntarget_sources(cliBench\n  PRIVATE\n  \"cliBench.c\"\n)\ntarget_sources(httpBench\n  PRIVATE\n  \"http_test.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring taosAdapter for TCollector in TOML\nDESCRIPTION: This TOML configuration enables taosAdapter to receive TCollector data. It sets up the OpenTSDB telnet protocol, specifies databases, ports, and authentication details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_tcollector.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[opentsdb_telnet]\nenable = true\nmaxTCPConnections = 250\ntcpKeepAlive = false\ndbs = [\"opentsdb_telnet\", \"collectd\", \"icinga2\", \"tcollector\"]\nports = [6046, 6047, 6048, 6049]\nuser = \"root\"\npassword = \"taosdata\"\n```\n\n----------------------------------------\n\nTITLE: Defining Source Directory for Query Components\nDESCRIPTION: Defines the source directory for the query components using the `aux_source_directory` command. The command searches for source files in the `src` directory and stores the list of files in the `QUERY_SRC` variable for later use in building the library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src QUERY_SRC)\n```\n\n----------------------------------------\n\nTITLE: Viewing User Privileges\nDESCRIPTION: SQL command to display all authorizations for a specific user\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nshow user privileges\n```\n\n----------------------------------------\n\nTITLE: Verifying TDengine REST API with curl Command\nDESCRIPTION: This snippet shows how to use curl to check the TDengine REST API, querying the databases available after setting up port forwarding.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u root:taosdata -d \"show databases\" 127.0.0.1:6041/rest/sql\n```\n\n----------------------------------------\n\nTITLE: Complex JSON Object Construction in C\nDESCRIPTION: Examples demonstrating more complex JSON object and array construction with format strings, including nested structures and different value types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_14\n\nLANGUAGE: C\nCODE:\n```\n/* Build an empty JSON object */\njson_pack(\"{}\");\n\n/* Build the JSON object {\"foo\": 42, \"bar\": 7} */\njson_pack(\"{sisi}\", \"foo\", 42, \"bar\", 7);\n\n/* Like above, ':', ',' and whitespace are ignored */\njson_pack(\"{s:i, s:i}\", \"foo\", 42, \"bar\", 7);\n\n/* Build the JSON array [[1, 2], {\"cool\": true}] */\njson_pack(\"[[i,i],{s:b}]\", 1, 2, \"cool\", 1);\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Script Files in TDengine\nDESCRIPTION: Command to run multiple SQL statements from a script file within the TDengine CLI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ntaos> source <filename>;\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Replication Task (taosx)\nDESCRIPTION: This shell command checks the status of active-active replication tasks. It returns a list and status of tasks created on the current machine, allowing you to monitor the health and progress of data synchronization between the primary and secondary nodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica status [id...]\n```\n\n----------------------------------------\n\nTITLE: Successful Insertion Response in JSON\nDESCRIPTION: Example of a JSON response for a successful insertion operation via the TDengine REST API, showing the structure including affected rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"column_meta\": [[\"affected_rows\", \"INT\", 4]],\n  \"data\": [[0]],\n  \"rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-less Data Structure Definition in Rust\nDESCRIPTION: Structure definition for handling schema-less data writing with support for different protocols and precision levels.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/26-rust.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub struct SmlData\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine with Specified Hostname and Port\nDESCRIPTION: This command starts TDengine with a specified hostname and port, using the TAOS_FQDN environment variable. It also maps the container's ports to the host's ports, enabling external access. The user must ensure that the specified hostname is resolvable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n   --name tdengine \\\n   -e TAOS_FQDN=tdengine \\\n   -p 6030:6030 \\\n   -p 6041-6049:6041-6049 \\\n   -p 6041-6049:6041-6049/udp \\\n   tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine via APT on Linux\nDESCRIPTION: Commands to update package lists and install TDengine using APT on Debian-based Linux systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\napt-cache policy tdengine\nsudo apt-get install tdengine\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for taosAdapter\nDESCRIPTION: TOML configuration for enabling SSL encryption in taosAdapter component.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/06-enterprise.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[ssl]\nenable = true\ncertFile = \"<your-certificate.crt>\"\nkeyFile = \"<your-private-key.pem>\"\n```\n\n----------------------------------------\n\nTITLE: Using TWA Function in SQL\nDESCRIPTION: Calculates the time-weighted average of values in a column over a time range. Only includes the record with minimum compound key when timestamps are identical.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_73\n\nLANGUAGE: sql\nCODE:\n```\nTWA(expr)\n```\n\n----------------------------------------\n\nTITLE: Example Configuration File for taosKeeper\nDESCRIPTION: This snippet presents an example configuration file in TOML format for taosKeeper. It illustrates how to specify settings such as instance ID, port, and metrics storage options. The file must follow TOML syntax and is essential for customizing the behavior of the taosKeeper instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n# The ID of the currently running taoskeeper instance, default is 64.\ninstanceId = 64\n\n# Listening port, default is 6043.\nport = 6043\n\n# Go pool size\ngopoolsize = 50000\n\n# Interval for metrics\nRotationInterval = \"15s\"\n\n[tdengine]\nhost = \"127.0.0.1\"\nport = 6041\nusername = \"root\"\npassword = \"taosdata\"\nusessl = false\n\n[metrics]\n# Metrics prefix in metrics names.\nprefix = \"taos\"\n\n# Export some tables that are not supertable.\ntables = []\n\n# Database for storing metrics data.\n[metrics.database]\nname = \"log\"\n\n# Database options for db storing metrics data.\n[metrics.database.options]\nvgroups = 1\nbuffer = 64\nkeep = 90\ncachemodel = \"both\"\n\n[environment]\n# Whether running in cgroup.\nincgroup = false\n\n[log]\n# The directory where log files are stored.\n# path = \"/var/log/taos\"\nlevel = \"info\"\n# Number of log file rotations before deletion.\nrotationCount = 30\n# The number of days to retain log files.\nkeepDays = 30\n# The maximum size of a log file before rotation.\nrotationSize = \"1GB\"\n# If set to true, log files will be compressed.\ncompress = false\n# Minimum disk space to reserve. Log files will not be written if disk space falls below this limit.\nreservedDiskSize = \"1GB\"\n```\n\n----------------------------------------\n\nTITLE: Basic Snappy Compression in C++\nDESCRIPTION: Simple example of compressing data using Snappy's C++ interface. Takes input data and compresses it into an output string.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nsnappy::Compress(input.data(), input.size(), &output)\n```\n\n----------------------------------------\n\nTITLE: Improved UDF with Parameter Validation (Example 2)\nDESCRIPTION: Enhanced UDF function that validates input parameters and handles null values. This version ensures exactly one column is provided as input and returns null for null inputs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef process(block):\n    rows, cols = block.shape()\n    if cols > 1:\n        raise Exception(f\"require 1 parameter but given {cols}\")\n    return [ None if block.data(i, 0) is None else log(block.data(i, 0) ** 2 + 1) for i in range(rows)]\n```\n\n----------------------------------------\n\nTITLE: Query Error Codes\nDESCRIPTION: Error codes related to query operations in TDengine, including query handle, memory limits, and task management issues\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Code | Error Description                    | Possible Error Scenarios or Reasons                          | Recommended Actions for Users                                |\n| ---------- | ------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 0x80000700 | Invalid query handle                 | Current query handle does not exist                          | Preserve the scene and logs, report issue on GitHub          |\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Keys in TDengine via SQL\nDESCRIPTION: This SQL command sets encryption keys when all nodes are online. It requires that no offline keys were previously set and ensures that the key is loaded for use.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate encrypt_key {encryptKey};\n```\n\n----------------------------------------\n\nTITLE: DSN (Data Source Name) Example\nDESCRIPTION: This code snippet shows an example of a DSN (Data Source Name) used by taosX to specify the connection details for data sources and targets. It uses a URL-like format to define the driver, protocol, authentication, host, port, object, and parameters for connecting to TDengine via the `tmq` driver using websocket protocol.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"tmq+ws://root:taosdata@localhost:6030/db1?timeout=never\"\n```\n\n----------------------------------------\n\nTITLE: Running TDengine Simulation with Virtual Nodes\nDESCRIPTION: This snippet demonstrates how to start the TDengine simulation using three virtual nodes. Each node is initialized with its own ID and the IDs of the other two nodes for communication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/craft/help.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./simulate_vnode 10000 10001 10002\n./simulate_vnode 10001 10000 10002\n./simulate_vnode 10002 10000 10001\n```\n\n----------------------------------------\n\nTITLE: Raw Schemaless Insert with Request ID in TDengine C/C++ API\nDESCRIPTION: Combines the raw data insertion capability with request ID tracking. This function is suitable for binary data that may contain null bytes while providing traceability through distributed systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_85\n\nLANGUAGE: C\nCODE:\n```\nTAOS_RES *taos_schemaless_insert_raw_with_reqid(TAOS *taos, char *lines, int len, int32_t *totalRows, int protocol, int precision, int64_t reqid)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine using Native Driver in Node.js\nDESCRIPTION: This snippet demonstrates how to establish a native connection to TDengine using the Node.js driver. It includes error handling and displays connection information upon successful connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_node.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst taos = require('td2.0-connector');\n\nconst config = {\n  host: \"127.0.0.1\",\n  port: 6030,\n  user: \"root\",\n  password: \"taosdata\"\n};\n\nlet conn = taos.connect(config);\nconsole.log(`connect id: ${conn.getTaosConnection()}`);\n\nconn.close();\n\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Data With Cache\nDESCRIPTION: SQL queries to retrieve the latest current and timestamp data from meters after enabling caching, demonstrating improved performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/02-cache.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect last(ts,current) from meters;\nselect last_row(ts,current) from meters;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up TDengine Kubernetes Deployment\nDESCRIPTION: Shell commands for uninstalling the TDengine cluster and cleaning up persistent volume claims. This ensures complete removal of the TDengine deployment from the Kubernetes cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall simple\nkubectl delete pvc -l app.kubernetes.io/instance=simple\n```\n\n----------------------------------------\n\nTITLE: TaoSX Agent Compression Configuration\nDESCRIPTION: TOML configuration example showing how to enable compression in the TaoSX Agent configuration file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/11-compress.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\ncompression=true\n```\n\n----------------------------------------\n\nTITLE: Data Type Access Methods - C# DbDataReader\nDESCRIPTION: Type-specific data access methods from the DbDataReader interface for retrieving strongly-typed values from result sets.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic bool GetBoolean(int ordinal)\npublic byte GetByte(int ordinal)\npublic long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length)\npublic char GetChar(int ordinal)\npublic DateTime GetDateTime(int ordinal)\npublic double GetDouble(int ordinal)\npublic float GetFloat(int ordinal)\npublic short GetInt16(int ordinal)\npublic int GetInt32(int ordinal)\npublic long GetInt64(int ordinal)\npublic string GetString(int ordinal)\n```\n\n----------------------------------------\n\nTITLE: Implementing Anomaly Detection Service in Python\nDESCRIPTION: This Python code snippet demonstrates how to create a custom anomaly detection algorithm by extending the `AbstractAnomalyDetectionService` class from the `taosanalytics.service` module.  The `execute` method is overridden to implement the core logic, which in this example simply marks the last data point as an anomaly. This code requires the `taosanalytics` package.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/03-ad.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom taosanalytics.service import AbstractAnomalyDetectionService\n\n# 算法实现类名称 需要以下划线 \"_\" 开始，并以 Service 结束\nclass _MyAnomalyDetectionService(AbstractAnomalyDetectionService):\n    \"\"\" 定义类，从 AbstractAnomalyDetectionService 继承，并实现 AbstractAnomalyDetectionService 类的抽象方法  \"\"\"\n\n    # 定义算法调用关键词，全小写 ASCII 码\n    name = 'myad'\n\n    # 该算法的描述信息 (建议添加)\n    desc = \"\"\"return the last value as the anomaly data\"\"\"\n\n    def __init__(self):\n        \"\"\"类初始化方法\"\"\"\n        super().__init__()\n\n    def execute(self):\n        \"\"\" 算法逻辑的核心实现\"\"\"\n\n        \"\"\"创建一个长度为 len(self.list)，全部值为 1 的结果数组，然后将最后一个值设置为 -1，表示最后一个值是异常值\"\"\"\n        res = [1] * len(self.list)\n        res[-1] = -1\n\n        \"\"\"返回结果数组\"\"\"\n        return res\n\n\t\n    def set_params(self, params):\n        \"\"\"该算法无需任何输入参数，直接重载父类该函数，不处理算法参数设置逻辑\"\"\"\n        return super().set_params(params)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with taosBenchmark\nDESCRIPTION: Command to generate time-series test data for smart electric meters using taosBenchmark tool. Creates a database named 'power' with 10,000 devices and 10,000 records each.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/02-cache.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark -d power -Q --start-timestamp=1600000000000 --tables=10000 --records=10000 --time-step=10000 -y\n```\n\n----------------------------------------\n\nTITLE: Resetting Failed Service Count in Systemd for TDengine\nDESCRIPTION: Command to reset the failed service counter in systemd before restarting the TDengine service when hitting the start limit.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl reset-failed taosd.service\n```\n\n----------------------------------------\n\nTITLE: Rename Child Table with Regex using Transform\nDESCRIPTION: This command demonstrates renaming child tables using regular expression replacement with the `--transform` option in taosX. It shows how to replace a prefix in the table name using `rename-child-table:replace_with_regex:^prefix1(?<old>)::prefix2_$old`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n\"-T rename-child-table:replace_with_regex:^prefix1(?<old>)::prefix2_$old\"\n```\n\n----------------------------------------\n\nTITLE: Apache Avro Configuration\nDESCRIPTION: Sets up Apache Avro builds with platform-specific patches and configurations. Includes special handling for Windows compatibility and build type settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(\n    apache-avro\n    PREFIX ${CMAKE_CURRENT_BINARY_DIR}/avro\n    SOURCE_DIR ${PROJECT_SOURCE_DIR}/deps/avro\n    CONFIGURE_COMMAND cmake -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/build/ -DCMAKE_INSTALL_LIBDIR=lib -S ${PROJECT_SOURCE_DIR}/deps/avro/lang/c\n)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to TMQ with Topic List in C\nDESCRIPTION: This C snippet demonstrates subscribing to TMQ using a pre-built topic list. It checks for errors during list creation and subscription.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n  const char* topics[] = {\"topic1\", \"topic2\"};\n  int topic_count = sizeof(topics) / sizeof(topics[0]);\n  topic_list_t* topic_list = build_topic_list(topics, topic_count);\n  if (topic_list == NULL) {\n    return 1; // Indicate failure\n  }\n\n  if (tmq_subscribe(tmq, topic_list) != 0) {\n    fprintf(stderr, \"failed to subscribe: %s\\n\", tmq_err2str(tmq_errno));\n    tmq_list_destroy(topic_list);\n    return 1; // Indicate failure\n  }\n\n  tmq_list_destroy(topic_list);  // Free the topic list when done\n\n```\n\n----------------------------------------\n\nTITLE: Modifying User Configuration in TDengine SQL\nDESCRIPTION: SQL command structure for altering user configurations such as password, enable status, system info access, and database creation permissions in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER user_name alter_user_clause\n\nalter_user_clause: {\n    PASS 'literal'\n  | ENABLE value\n  | SYSINFO value\n  | CREATEDB value\n}\n```\n\n----------------------------------------\n\nTITLE: Adding walTest Test\nDESCRIPTION: This snippet adds a test named wal_test that executes the walTest executable. The COMMAND option specifies the command to run for the test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(\n    NAME wal_test\n    COMMAND walTest\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Configuration Directory for TDengine\nDESCRIPTION: Command to load a custom configuration file for the TDengine client by specifying an alternate directory path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntaos -c /root/cfg/\n```\n\n----------------------------------------\n\nTITLE: SQL Alter Table Command Enhancement\nDESCRIPTION: New support for ENCODE/COMPRESS options when adding columns using ALTER TABLE command\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/28-releases/03-notes/3.3.2.0.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nalter table add column\n```\n\n----------------------------------------\n\nTITLE: Loading RJDBC and Setting Up Environment in R\nDESCRIPTION: This code segment loads the RJDBC library and sets a working directory where the JDBC driver is stored. It is crucial to ensure the environment is correctly set for JDBC operations using the RJDBC package.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/R/command.txt#2025-04-16_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nlibrary('RJDBC')\nsetwd('C:/TDengine')\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout in Java JDBC\nDESCRIPTION: Sets the query timeout for the Statement object in seconds. Throws SQLException if setting fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nvoid setQueryTimeout(int seconds) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring OPC DataIn CSV Row for TDengine\nDESCRIPTION: Defines the structure and rules for each row in the CSV file, corresponding to an OPC data point. Includes value types, ranges, and default values for each column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/05-opcua.md#2025-04-16_snippet_1\n\nLANGUAGE: CSV\nCODE:\n```\nns=3;i=1005,1,my_stable,my_table,val,(val + 10) / 1000 * 2.0,float,quality,ts,qts,rts,ts + 8 * 3600 * 1000,qts / 1000 * 1000,rts - 8 * 3600 * 1000,SampleTag\n```\n\n----------------------------------------\n\nTITLE: Using LN Function in SQL\nDESCRIPTION: The LN function returns the natural logarithm of the specified value. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nLN(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring libxml2 Source Files and Building Library in CMake\nDESCRIPTION: This CMake snippet sets up the source directory for libxml2, defines all the source files to be compiled, creates a library target, sets up include directories, and creates an alias for the library. It also links the zlib library as a dependency.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/xml2-cmake/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBXML2_SOURCE_DIR \"${TD_CONTRIB_DIR}/libxml2\")\n\nset(SRCS\n    \"${LIBXML2_SOURCE_DIR}/SAX.c\"\n    \"${LIBXML2_SOURCE_DIR}/entities.c\"\n    \"${LIBXML2_SOURCE_DIR}/encoding.c\"\n    \"${LIBXML2_SOURCE_DIR}/error.c\"\n    \"${LIBXML2_SOURCE_DIR}/parserInternals.c\"\n    \"${LIBXML2_SOURCE_DIR}/parser.c\"\n    \"${LIBXML2_SOURCE_DIR}/tree.c\"\n    \"${LIBXML2_SOURCE_DIR}/hash.c\"\n    \"${LIBXML2_SOURCE_DIR}/list.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlIO.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlmemory.c\"\n    \"${LIBXML2_SOURCE_DIR}/uri.c\"\n    \"${LIBXML2_SOURCE_DIR}/valid.c\"\n    \"${LIBXML2_SOURCE_DIR}/xlink.c\"\n    \"${LIBXML2_SOURCE_DIR}/HTMLparser.c\"\n    \"${LIBXML2_SOURCE_DIR}/HTMLtree.c\"\n    \"${LIBXML2_SOURCE_DIR}/debugXML.c\"\n    \"${LIBXML2_SOURCE_DIR}/xpath.c\"\n    \"${LIBXML2_SOURCE_DIR}/xpointer.c\"\n    \"${LIBXML2_SOURCE_DIR}/xinclude.c\"\n    \"${LIBXML2_SOURCE_DIR}/nanohttp.c\"\n    \"${LIBXML2_SOURCE_DIR}/nanoftp.c\"\n    \"${LIBXML2_SOURCE_DIR}/catalog.c\"\n    \"${LIBXML2_SOURCE_DIR}/globals.c\"\n    \"${LIBXML2_SOURCE_DIR}/threads.c\"\n    \"${LIBXML2_SOURCE_DIR}/c14n.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlstring.c\"\n    \"${LIBXML2_SOURCE_DIR}/buf.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlregexp.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlschemas.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlschemastypes.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlunicode.c\"\n    \"${LIBXML2_SOURCE_DIR}/triostr.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlreader.c\"\n    \"${LIBXML2_SOURCE_DIR}/relaxng.c\"\n    \"${LIBXML2_SOURCE_DIR}/dict.c\"\n    \"${LIBXML2_SOURCE_DIR}/SAX2.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlwriter.c\"\n    \"${LIBXML2_SOURCE_DIR}/legacy.c\"\n    \"${LIBXML2_SOURCE_DIR}/chvalid.c\"\n    \"${LIBXML2_SOURCE_DIR}/pattern.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlsave.c\"\n    \"${LIBXML2_SOURCE_DIR}/xmlmodule.c\"\n    \"${LIBXML2_SOURCE_DIR}/schematron.c\"\n    \"${LIBXML2_SOURCE_DIR}/xzlib.c\"\n)\nadd_library(_libxml2 ${SRCS})\n\n#target_link_libraries(_libxml2 PRIVATE td_contrib::zlib)\ntarget_link_libraries(_libxml2 PRIVATE zlib)\n\ntarget_include_directories(_libxml2 BEFORE PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/linux_x86_64/include\")\ntarget_include_directories(_libxml2 BEFORE PUBLIC \"${LIBXML2_SOURCE_DIR}/include\")\n\nadd_library(td_contrib::libxml2 ALIAS _libxml2)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connection with Batch Fetching\nDESCRIPTION: Demonstrates how to set up a WebSocket connection with batch fetching enabled, which is optimal for retrieving large datasets. This approach provides better performance for large query results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_java.mdx#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/WSConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Subtable Fields in MySQL\nDESCRIPTION: SQL statement to select distinct values from specified columns in MySQL, used for splitting subtables in TDengine. This is part of the subtable field configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/13-mysql.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect distinct col_name1, col_name2 from table\n```\n\n----------------------------------------\n\nTITLE: SQL Parsing Error Codes\nDESCRIPTION: Error codes related to SQL statement parsing, validation, and execution, covering issues with table joins, column types, and virtual table references\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nError codes 0x80002689 - 0x800026FF\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Precision in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the precision of a specified parameter. Takes the parameter index as input and returns an integer representing the precision. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_86\n\nLANGUAGE: Java\nCODE:\n```\nint getPrecision(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Deleting Stream Computing in SQL\nDESCRIPTION: SQL command to delete a stream computing task. This only removes the task, not the data written by the stream computation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nDROP STREAM [IF EXISTS] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Viewing taosX-Agent Logs with journalctl\nDESCRIPTION: Command to view taosX-Agent logs using journalctl on Linux systems. The -f option can be added for real-time log following.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/05-taosx-agent.md#2025-04-16_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\njournalctl -u taosx-agent [-f]\n```\n\n----------------------------------------\n\nTITLE: Running the Time-MoE Prediction Script in Background\nDESCRIPTION: This shell command demonstrates how to execute the 'time-moe.py' script in the background, directing its output to 'service_output.out', which helps in monitoring the service operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnohup python time-moe.py > service_output.out 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Configuring Jansson JSON Library\nDESCRIPTION: Sets up the Jansson JSON library as a dependency for the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (TRUE)\n    set(JANSSON_PKG libjansson)\n    link_directories(${JANSSON_LIBRARY_DIRS})\nelse (TRUE)\n    message(FATAL_ERROR \"libjansson >=2.3 not found\")\nendif (TRUE)\n```\n\n----------------------------------------\n\nTITLE: Audit Logs Configuration in TDengine\nDESCRIPTION: JSON representation of the audit logs format used for tracking and monitoring database operations in TDengine. It contains timestamp, cluster ID, user, operation details, and client address, which are sent to taosKeeper for storage. Required configurations are set in `taos.cfg` and `keeper.toml` files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ts\": timestamp,\n    \"cluster_id\": string,\n    \"user\": string,\n    \"operation\": string,\n    \"db\": string,\n    \"resource\": string,\n    \"client_add\": string,\n    \"details\": string\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Multi-Replica TDengine Deployment\nDESCRIPTION: Shell commands for uninstalling the multi-replica TDengine cluster and removing associated persistent volume claims to ensure complete cleanup of resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall replica3\nkubectl delete pvc -l app.kubernetes.io/instance=replica3\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of TDengine Python Connector (taospy)\nDESCRIPTION: This shell command demonstrates how to install a specific version (2.3.0) of the `taospy` Python connector using `pip3`. Specifying a version ensures compatibility with particular TDengine server versions or application requirements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"pip3 install taospy==2.3.0\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Kafka Topic for TDengine Data\nDESCRIPTION: Shell command using kafka-console-consumer to view the data being synchronized from TDengine to the Kafka topic. This displays both historical and newly inserted data in InfluxDB line protocol format.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic tdengine-test-meters\n```\n\n----------------------------------------\n\nTITLE: Checking Anode Service with curl\nDESCRIPTION: This snippet demonstrates using curl to check if the anode is providing services. The expected output indicates the anode is running, while a connection refused error suggests it's not.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/10-faq.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"curl '127.0.0.1:6090'\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"TDengine© Time Series Data Analytics Platform (ver 1.0.x)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"curl: (7) Failed to connect to 127.0.0.1 port 6090: Connection refused\"\n```\n\n----------------------------------------\n\nTITLE: Virtual Table Error Codes\nDESCRIPTION: Error codes specific to virtual table operations in TDengine, including issues with table scanning, data types, query limitations, and table creation constraints\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/09-error-code.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError codes for virtual table operations\n```\n\n----------------------------------------\n\nTITLE: Continuous Synchronization\nDESCRIPTION: This command configures continuous synchronization from one TDengine instance to another using taosX. It uses the `run` command with the `-f` parameter including `mode=realtime`, `restro=5m`, `interval=1s`, and `excursion=500ms` parameters in DSN to configure the real-time synchronization settings, and the `-t` parameter to define the target database. The `-v` parameter enables verbose logging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run \\\n  -f 'taos:///db1?mode=realtime&restro=5m&interval=1s&excursion=500ms' \\\n  -t 'taos:///db2' -v\"\n```\n\n----------------------------------------\n\nTITLE: Rows ColumnTypeDatabaseTypeName Method\nDESCRIPTION: Returns the database type name of a specific column in the result set. The function takes a column index `i` as input and returns the database type name as a string.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_40\n\nLANGUAGE: go\nCODE:\n```\n\"func (rs *Rows) ColumnTypeDatabaseTypeName(i int) string\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WAL Fault Tolerance Parameters\nDESCRIPTION: Configuration parameters for Write-Ahead Logging to prevent data loss during system failures or restarts. Controls logging level and filesystem synchronization behavior.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/10-disaster.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwal_level: 2\nwal_fsync_period: 0\n```\n\n----------------------------------------\n\nTITLE: Restarting TDengine Service with Systemd\nDESCRIPTION: Command to restart the TDengine service using systemd after resetting the failed service counter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl restart taosd.service\n```\n\n----------------------------------------\n\nTITLE: Managing TDengine Services with launchctl on macOS\nDESCRIPTION: Commands to start individual TDengine services using launchctl on macOS systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo launchctl start com.tdengine.taosd\nsudo launchctl start com.tdengine.taosadapter\nsudo launchctl start com.tdengine.taoskeeper\nsudo launchctl start com.tdengine.taos-explorer\n```\n\n----------------------------------------\n\nTITLE: Calculating Value Spread with SPREAD() in TDengine SQL\nDESCRIPTION: Computes the difference between the maximum and minimum values in a column. Returns a DOUBLE value. Applicable to INTEGER and TIMESTAMP columns in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_49\n\nLANGUAGE: sql\nCODE:\n```\nSPREAD(expr)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Class for TDengine Nanosecond Precision\nDESCRIPTION: Defines the TestPrecisionNs class for nanosecond precision tests. It includes setup and teardown methods for preparing the test environment and cleaning up after tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/metadata/time_precision.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass TestPrecisionNs:\n    def init(self, conn, logSql):\n        tdLog.debug(\"start to execute %s\" % __file__)\n        tdSql.init(conn.cursor(), logSql)\n\n    def run(self):\n        print(\"running\")\n        tdSql.prepare()\n\n    def stop(self):\n        tdSql.close()\n        tdLog.success(\"%s successfully executed\" % __file__)\n```\n\n----------------------------------------\n\nTITLE: Consuming and Repeating with Offset Seek in C\nDESCRIPTION: This C snippet demonstrates how to consume messages repeatedly by seeking to the earliest offset. It retrieves topic assignments and seeks to the beginning of each assigned partition.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint consume_repeatly(tmq_t* tmq) {\n  int assignment_count = 0;\n  ws_topic_assignment_t* assignments = NULL;\n\n  if (ws_tmq_get_topic_assignment(tmq, \"topic\", &assignment_count, &assignments) != 0) {\n    fprintf(stderr, \"failed to get topic assignment: %s\\n\", tmq_err2str(tmq_errno));\n    return -1;\n  }\n\n  for (int i = 0; i < assignment_count; i++) {\n    ws_topic_assignment_t* assignment = &assignments[i];\n\n    if (ws_tmq_offset_seek(tmq, assignment->topic, assignment->vgroup_id, TMQ_SEEK_BEGIN) != 0) {\n      fprintf(stderr, \"failed to seek offset: %s\\n\", tmq_err2str(tmq_errno));\n    }\n  }\n\n  free(assignments);\n  return basic_consume_loop(tmq);\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Read Permission on a Specific View in SQL\nDESCRIPTION: This SQL snippet illustrates how to revoke read permission from a user for a specific view within a database in TDengine, thus preventing access to view the data residing in the specified view.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nrevoke read on power.view_name from test\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Card List with React in MDX\nDESCRIPTION: This code snippet uses React components to render a list of documentation cards. It imports the DocCardList component and a hook to access the current sidebar category, then renders the DocCardList with items from the current category.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/index.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Viewing Active Kafka Connectors\nDESCRIPTION: cURL command to list all active connectors in the Kafka Connect cluster, which helps verify that the TDengine connectors are properly running.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8083/connectors\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Node (snode) in TDengine SQL\nDESCRIPTION: This SQL command creates a stream node (snode) on a specified data node (dnode). The snode is used for deploying aggregation tasks and backing up checkpoint data generated by stream computing tasks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE SNODE ON DNODE [id]\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Connection Endpoint\nDESCRIPTION: Example configuration entry for the taos.cfg file to specify the TDengine server endpoint. The firstEP parameter defines the server hostname and port to connect to.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_linux_install.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nfirstEP=h1.tdengine.com:6030\n```\n\n----------------------------------------\n\nTITLE: Creating Mnode Cluster for High Availability\nDESCRIPTION: SQL commands to establish multiple Mnodes across different nodes to ensure arbitration service reliability\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/18-ha/02-replica2.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE mnode on dnode <dnode_id>;\n```\n\n----------------------------------------\n\nTITLE: Adding Databases to Existing Replication Task (taosx)\nDESCRIPTION: This shell command adds specified databases to an existing replication task using a replica ID. This command is used to expand the replication to include additional databases in an already running active-active setup. The command does not create duplicate tasks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica start -i <id> [database...]\n```\n\n----------------------------------------\n\nTITLE: CSV File Example\nDESCRIPTION: This CSV file contains sample electricity meter data, including columns for table name, timestamp, current, voltage, phase, group ID, and location. The data is comma-separated, and the timestamp includes timezone information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_17\n\nLANGUAGE: csv\nCODE:\n```\n\"tbname,ts,current,voltage,phase,groupid,location\nd4,2017-07-14T10:40:00+08:00,-2.598076,16,-0.866025,7,California.LosAngles\nd4,2017-07-14T10:40:00.001+08:00,-2.623859,6,-0.87462,7,California.LosAngles\nd4,2017-07-14T10:40:00.002+08:00,-2.648843,2,-0.862948,7,California.LosAngles\nd4,2017-07-14T10:40:00.003+08:00,-2.673019,16,-0.891006,7,California.LosAngles\nd4,2017-07-14T10:40:00.004+08:00,-2.696382,10,-0.898794,7,California.LosAngles\nd4,2017-07-14T10:40:00.005+08:00,-2.718924,6,-0.886308,7,California.LosAngles\nd4,2017-07-14T10:40:00.006+08:00,-2.740636,10,-0.893545,7,California.LosAngles\"\n```\n\n----------------------------------------\n\nTITLE: Accessing the TDengine container shell\nDESCRIPTION: Command to open an interactive shell inside the running TDengine Docker container for executing commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container-name> bash\n```\n\n----------------------------------------\n\nTITLE: Viewing taosX Agent logs using journalctl\nDESCRIPTION: This snippet provides the command to view the taosX Agent logs on Linux systems using the journalctl utility. It also specifies an optional parameter to follow the live log outputs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/05-taosx-agent.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njournalctl -u taosx-agent [-f]\n```\n\n----------------------------------------\n\nTITLE: PERF_APP Table Structure in TDengine\nDESCRIPTION: Defines the structure of the PERF_APP table that stores information about client applications accessing the TDengine cluster, including metrics like client ID, address, request counts, and processing times.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/23-perf.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE PERF_APP (\n  app_id UBIGINT,\n  ip BINARY(16),\n  pid INT,\n  name BINARY(24),\n  start_time TIMESTAMP,\n  insert_req UBIGINT,\n  insert_row UBIGINT,\n  insert_time UBIGINT,\n  insert_bytes UBIGINT,\n  fetch_bytes UBIGINT,\n  query_time UBIGINT,\n  slow_query UBIGINT,\n  total_req UBIGINT,\n  current_req UBIGINT,\n  last_access TIMESTAMP\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Python System Path\nDESCRIPTION: Python code to check the current system module search paths. Used to identify where third-party modules are installed to configure the UDF environment correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n>>> import sys\n>>> \":\".join(sys.path)\n'/usr/lib/python3.8:/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages'\n```\n\n----------------------------------------\n\nTITLE: Adding Example Executable in CMake\nDESCRIPTION: Conditionally adds an example executable 'simple_parse' that demonstrates Jansson functionality. Links the example with the Jansson library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (JANSSON_EXAMPLES)\n\tadd_executable(simple_parse \"${CMAKE_CURRENT_SOURCE_DIR}/examples/simple_parse.c\")\n\ttarget_link_libraries(simple_parse jansson)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from TMQ in Python\nDESCRIPTION: This Python snippet demonstrates how to unsubscribe from a TMQ topic using the native client.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n    def unsubscribe(self):\n        if self.consumer.TMQ_Unsubscribe() != 0:\n            print(f'failed to unsubscribe, {TMQ_NATIVE.TMQ_GetLastError()}')\n            sys.exit(1)\n```\n\n----------------------------------------\n\nTITLE: Disabling Strong Password Requirement in TDengine SQL\nDESCRIPTION: SQL command to alter all dnodes and disable the strong password requirement in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nalter all dnodes 'EnableStrongPassword' '0'\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Collecting Source Files in CMake\nDESCRIPTION: Configures the C++ standard to C++11 for TDengine executor tests and collects all source files from the current directory into a SOURCE_LIST variable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/executor/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n```\n\n----------------------------------------\n\nTITLE: Getting Current Fetch Size of ResultSet in Java\nDESCRIPTION: Method for retrieving the current fetch size setting of the result set, which determines how many rows are fetched from the database server at once. Throws SQLException if the result set is closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_58\n\nLANGUAGE: Java\nCODE:\n```\nint getFetchSize() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple TDinsight Dashboards\nDESCRIPTION: Example command for configuring an additional TDinsight dashboard to monitor a separate TDengine cluster with custom naming.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./TDengine.sh -n TDengine-Env1 -a http://another:6041 -u root -p taosdata -i tdinsight-env1 -t 'TDinsight Env1'\n```\n\n----------------------------------------\n\nTITLE: Fetch Size Retrieval in TDengine JDBC\nDESCRIPTION: Method to get the fetch size configuration of the Statement object. Returns the number of rows that will be fetched from the database in each batch.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\nint getFetchSize() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Table in TDengine with MyBatis\nDESCRIPTION: MyBatis XML mapper definitions for creating a database and weather table in TDengine. The weather table has timestamp, temperature, and humidity columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/springbootdemo/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- weatherMapper.xml -->\n <update id=\"createDB\" >\n        create database if not exists test;\n    </update>\n\n    <update id=\"createTable\" >\n        create table if not exists test.weather(ts timestamp, temperature int, humidity float);\n    </update>\n```\n\n----------------------------------------\n\nTITLE: Setting tags using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function sets the tags for the prepared SQL statement via WebSocket. It takes a Param object containing the tags and a ColumnType object containing type information as input and returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) SetTags(tags *param.Param, bindType *param.ColumnType)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Ongoing Queries in TDengine SQL\nDESCRIPTION: Shows information about ongoing queries in the current system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nSHOW QUERIES;\n```\n\n----------------------------------------\n\nTITLE: Parameter Binding Statement Creation - Python\nDESCRIPTION: Creates and manages STMT2 objects for parameter binding operations with support for table operations and batch data processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/30-python.md#2025-04-16_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef statement2(self, sql=None, option=None)\n```\n\n----------------------------------------\n\nTITLE: Get Column Scale using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the number of decimal places to the right of the decimal point for a specified column. The column number starts from 1. An SQLException is thrown if the column index is out of range.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_70\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `int getScale(int column) throws SQLException`\n  - **Interface Description**: Gets the number of decimal places to the right of the decimal point for a specified column.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The number of decimal places for the column.\n  - **Exception**: Throws `SQLException` if the column index is out of range.\n```\n\n----------------------------------------\n\nTITLE: PERF_SMAS Table Structure in TDengine\nDESCRIPTION: Defines the structure of the PERF_SMAS table that stores information about time-range-wise SMA (Simple Moving Average) configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/23-perf.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE PERF_SMAS (\n  sma_name BINARY(192),\n  create_time TIMESTAMP,\n  stable_name BINARY(192),\n  vgroup_id INT\n)\n```\n\n----------------------------------------\n\nTITLE: 创建普通表 SQL\nDESCRIPTION: 创建不带标签的普通表d1003，包含时间戳和多个列\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/01-model.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE d1003(\n    ts timestamp,\n    current float, \n    voltage int, \n    phase float,\n    location varchar(64), \n    group_id int\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Auxiliary Source Directory in CMake\nDESCRIPTION: The `aux_source_directory` command gathers all source files within the specified directory and stores them in a variable for later use.  In this case, it finds all source files in the 'src' directory and stores them in the 'SCALAR_SRC' variable. This allows CMake to easily track and compile all source files related to the scalar library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src SCALAR_SRC)\n```\n\n----------------------------------------\n\nTITLE: TMQ Consumer Get Current Position\nDESCRIPTION: Retrieves the current consumption position for a specific topic and virtual group in a TMQ consumer\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_47\n\nLANGUAGE: c\nCODE:\n```\nint64_t ws_tmq_position(ws_tmq_t *tmq, const char *pTopicName, int32_t vgId)\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for TDengine Driver\nDESCRIPTION: Configures Go module to include TDengine driver for establishing database connections\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/index.md#2025-04-16_snippet_2\n\nLANGUAGE: go-mod\nCODE:\n```\nmodule goexample\n\ngo 1.17\n\nrequire github.com/taosdata/driver-go/v3 latest\n```\n\n----------------------------------------\n\nTITLE: Configuring taosX Monitoring in TOML\nDESCRIPTION: This snippet provides a sample configuration for monitoring taosX using taosKeeper. It defines parameters such as FQDN, port, and the frequency of sending metrics. It also includes command line options and environment variables for flexibility in configuration. Ensure taosKeeper service is correctly set up before enabling these configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/05-monitor.md#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[monitor]\n# FQDN of taosKeeper service, no default value\n# fqdn = \"localhost\"\n# port of taosKeeper service, default 6043\n# port = 6043\n# how often to send metrics to taosKeeper, default every 10 seconds. Only value from 1 to 10 is valid.\n# interval = 10\n```\n\n----------------------------------------\n\nTITLE: View Permissions Management\nDESCRIPTION: SQL syntax for granting read, write, and alter permissions on database views\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ngrant privileges on [db_name.]view_name to user_name\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant read on power.view_name to test\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on power.view_name to test\n```\n\n----------------------------------------\n\nTITLE: Constructing SQL Template for Oracle Data Retrieval\nDESCRIPTION: This SQL template is used for querying data from Oracle. It includes time range conditions with placeholders for start and end times, as well as subtable field placeholders for proper data segmentation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/15-oracle.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from table where ts >= ${start} and ts < ${end} and ${col_name1} and ${col_name2}\n```\n\n----------------------------------------\n\nTITLE: Executing Window Join with Aggregation in TDengine SQL\nDESCRIPTION: Query to compare d1001's voltage values with average voltage from d1002 within a 1-second window, filtering for values above 220V.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/31-join.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.ts, a.voltage, avg(b.voltage) FROM d1001 a LEFT WINDOW JOIN d1002 b WINDOW_OFFSET（-1s, 1s) where a.voltage > 220 HAVING(avg(b.voltage) > 220)\n```\n\n----------------------------------------\n\nTITLE: Querying User Information from System Table in TDengine SQL\nDESCRIPTION: SQL query to retrieve user information from the INFORMATION_SCHEMA.INS_USERS system table in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/25-user.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ntaos> select * from information_schema.ins_users;\n```\n\n----------------------------------------\n\nTITLE: Creating static library 'az'\nDESCRIPTION: This command creates a static library named 'az' from the source files listed in the AZ_SRC variable. The static library is created in the build directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(az STATIC ${AZ_SRC})\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping Time Series Base Model Services\nDESCRIPTION: This snippet includes commands for manually starting and stopping the Time Series Base Model services, which require significant resources. It is necessary to execute these commands directly as automated startup is not provided due to resource constraints.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/03-management.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 启动涛思时序数据基础模型\nstart-tdtsfm\n# 启动 Time-MoE 基础模型\nstart-timer-moe\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 停止涛思时序数据基础模型\nstop-tdtsfm\n# 停止 Time-MoE 基础模型\nstop-timer-moe\n```\n\n----------------------------------------\n\nTITLE: Importing Date Data from TDengine - SQL\nDESCRIPTION: This SQL command obtains the time range and data count of the time-series data using a 1-day time window, facilitating the creation of time-based analyses in Power BI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"select _wstart date, count(*) from test.meters interval(1d) having count(*)>0\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Avro Version Numbers on Unix Systems\nDESCRIPTION: Executes shell scripts to retrieve Avro version numbers and sets corresponding CMake variables. This is only done on Unix systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\n    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/version.sh project\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n        RESULT_VARIABLE AVRO_VERSION_RESULT\n        OUTPUT_VARIABLE AVRO_VERSION\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if(AVRO_VERSION_RESULT)\n        message(FATAL_ERROR \"Cannot determine Avro version number\")\n    endif(AVRO_VERSION_RESULT)\n\n    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/version.sh libtool\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n        RESULT_VARIABLE LIBAVRO_VERSION_RESULT\n        OUTPUT_VARIABLE LIBAVRO_VERSION\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if(LIBAVRO_VERSION_RESULT)\n        message(FATAL_ERROR \"Cannot determine libavro version number\")\n    endif(LIBAVRO_VERSION_RESULT)\n\n    execute_process(COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/version.sh libcurrent\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n        RESULT_VARIABLE LIBAVRO_SOVERSION_RESULT\n        OUTPUT_VARIABLE LIBAVRO_SOVERSION\n        OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if(LIBAVRO_SOVERSION_RESULT)\n        message(FATAL_ERROR \"Cannot determine libavro version number\")\n    endif(LIBAVRO_SOVERSION_RESULT)\n\nelse(UNIX)\n    # Hard code for win32 -- need to figure out how to port version.sh for\n    # Windows.\n    set(LIBAVRO_VERSION \"22:0:0\")\nendif(UNIX)\n```\n\n----------------------------------------\n\nTITLE: Restore User and Permission Information from JSON\nDESCRIPTION: This command restores user information, permissions, and whitelist information from a JSON file to a TDengine instance. It uses the `privileges` command with the `-i` parameter to specify the input JSON file and the `-t` parameter to define the target DSN (in this case, the local machine).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx privileges -i ./user-pass-privileges-backup.json -t \\\"taos:///\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Server and TAOSX Services - YAML\nDESCRIPTION: This YAML configuration sets up the TDengine server and TAOSX services in a Kubernetes environment, specifying resource requests, environment variables, and volume mounts necessary for data storage. It utilizes ClusterIP service type with multiple replicas for reliability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# Set timezone here, not in taoscfg\ntimezone: \"Asia/Shanghai\"\n\nlabels:\n  # Add more labels as needed.\n\nservices:\n  server:\n    type: ClusterIP\n    replica: 3\n    ports:\n      # TCP range required\n      tcp: [6041, 6030]\n      # UDP range, optional\n      udp:\n    volumes:\n      - name: data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: \"10Gi\"\n    environment:\n      ENABLE_TAOSX: \"0\" # Disable taosx in server replicas.\n  taosx:\n    type: ClusterIP\n    volumes:\n      - name: taosx-data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: taosx-log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: \"10Gi\"\n    files:\n      - name: taosx\n        mountPath: /etc/taos/taosx.toml\n        content: |-\n          # TAOSX configuration in TOML format.\n          [monitor]\n          # FQDN of taosKeeper service, no default value\n          fqdn = \"localhost\"\n          # How often to send metrics to taosKeeper, default every 10 seconds. Only value from 1 to 10 is valid.\n          interval = 10\n\n          # log configuration\n          [log]\n          # All log files are stored in this directory\n          #\n          #path = \"/var/log/taos\" # on linux/macOS\n\n          # log filter level\n          #\n          #level = \"info\"\n\n          # Compress archived log files or not\n          #\n          #compress = false\n\n          # The number of log files retained by the current explorer server instance in the `path` directory\n          #\n          #rotationCount = 30\n\n          # Rotate when the log file reaches this size\n          #\n          #rotationSize = \"1GB\"\n\n          # Log downgrade when the remaining disk space reaches this size, only logging `ERROR` level logs\n          #\n          #reservedDiskSize = \"1GB\"\n\n          # The number of days log files are retained\n          #\n          #keepDays = 30\n\n          # Watching the configuration file for log.loggers changes, default to true.\n          #\n          #watching = true\n\n          # Customize the log output level of modules, and changes will be applied after modifying the file when log.watching is enabled\n          #\n          # ## Examples:\n          #\n          # crate = \"error\"\n          # crate::mod1::mod2 = \"info\"\n          # crate::span[field=value] = \"warn\"\n          #\n          [log.loggers]\n          #\"actix_server::accept\" = \"warn\"\n          #\"taos::query\" = \"warn\"\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Using RPM Package on Linux\nDESCRIPTION: Command to install TDengine using an .rpm package on Linux systems. Replace <version> with the actual version number of the downloaded package.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm -ivh TDengine-server-<version>-Linux-x64.rpm\n```\n\n----------------------------------------\n\nTITLE: Checking TDengine Service Status on Linux\nDESCRIPTION: Command to verify the running status of TDengine service. This displays whether the taosd service is active or inactive.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl status taosd\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd write_tsdb plugin\nDESCRIPTION: Configure the write_tsdb plugin in collectd to send data to taosAdapter by modifying /etc/collectd/collectd.conf. Set the 'Host' and 'Port' fields with the appropriate details of the taosAdapter server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_collectd.mdx#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nLoadPlugin write_tsdb\n<Plugin write_tsdb>\n        <Node>\n                Host \"<taosAdapter's host>\"\n                Port \"<port for collectd write_tsdb plugin>\"\n                ...\n        </Node>\n</Plugin>\n```\n\nLANGUAGE: xml\nCODE:\n```\nLoadPlugin write_tsdb\n<Plugin write_tsdb>\n        <Node>\n                Host \"127.0.0.1\"\n                Port \"6047\"\n                HostTags \"status=production\"\n                StoreRates false\n                AlwaysAppendDS false\n        </Node>\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: New SHOW Commands in TDengine 3.0\nDESCRIPTION: TDengine 3.0 introduces several new SHOW commands for displaying system information, including SHOW APPS, SHOW CONSUMERS, SHOW LICENCE, SHOW INDEXES, and SHOW LOCAL VARIABLES.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/30-changes.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW APPS;\nSHOW CONSUMERS;\nSHOW LICENCE;\nSHOW INDEXES;\nSHOW LOCAL VARIABLES;\n```\n\n----------------------------------------\n\nTITLE: Setting a Bigint value in Param object\nDESCRIPTION: This function sets a Bigint value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Bigint value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_51\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetBigint(offset int, value int)\"\n```\n\n----------------------------------------\n\nTITLE: Verifying File Limits on macOS\nDESCRIPTION: Command to confirm the new maximum files limit has been successfully applied on macOS. This displays the current limit settings after configuration changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nlaunchctl limit maxfiles\n```\n\n----------------------------------------\n\nTITLE: Checking Anode Service with Curl\nDESCRIPTION: This snippet shows the correct output from a properly functioning anode service when accessed using `curl`. It is used to verify that the anode service is running and accessible.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/11-faq.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTDgpt - TDengine© Time Series Data Analytics Platform (ver x.x.x)\n```\n\n----------------------------------------\n\nTITLE: Configuring Supertable Queries in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration for setting up supertable queries in taosBenchmark. Includes parameters for specifying the supertable name, query interval, thread count, and SQL commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"super_table_query\": {\n    \"stblname\": \"supertable_name\",\n    \"query_interval\": 0,\n    \"threads\": 1,\n    \"sqls\": [\n      {\n        \"sql\": \"SELECT * FROM xxxx\",\n        \"result\": \"query_results.txt\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Average in TDengine\nDESCRIPTION: This snippet calculates the average of column 't0' from a specified table. It is useful for obtaining mean values from a dataset.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/query-error-sqls.txt#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect AVG(t0) ;\n```\n\n----------------------------------------\n\nTITLE: Viewing Topic Data with Kafka Console Consumer in Shell\nDESCRIPTION: This command uses the kafka-console-consumer tool to monitor data in the tdengine-test-meters topic. It will output all historical data and immediately show new data inserted into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic tdengine-test-meters\n```\n\n----------------------------------------\n\nTITLE: Getting Column Count from Result Set in TDengine WebSocket (C)\nDESCRIPTION: Returns the number of columns in the result set. Both functions are equivalent.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_num_fields(const WS_RES *rs)\n```\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_field_count(const WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Node.js Connector using npm\nDESCRIPTION: This shell command demonstrates how to install the TDengine Node.js connector (`@tdengine/websocket`) using `npm`. This allows Node.js applications to connect to TDengine databases via WebSocket.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n\"npm install @tdengine/websocket\"\n```\n\n----------------------------------------\n\nTITLE: Including Jansson Header in C\nDESCRIPTION: Basic include statement required to use the Jansson library in C source files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <jansson.h>\n```\n\n----------------------------------------\n\nTITLE: Viewing Users in TDengine\nDESCRIPTION: SQL commands to list and query system users through show command and system table\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nshow users;\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from information_schema.ins_users;\n```\n\n----------------------------------------\n\nTITLE: Implementing the Time-MoE Service in TDgpt\nDESCRIPTION: This Python snippet defines the '_TimeMOEService' class, which extends 'AbstractForecastService' to handle the forecasting logic utilizing the Time-MoE model. It includes methods for executing predictions and error handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass _TimeMOEService(AbstractForecastService):\n    name = 'timemoe-fc'\n    desc = (\"Time-MoE: Billion-Scale Time Series Foundation Models with Mixture of Experts; \"\n            \"Ref to https://github.com/Time-MoE/Time-MoE\")\n    def __init__(self):\n        super().__init__()\n        self.table_name = None\n        service_host = conf.get_tsfm_service(\"timemoe-fc\")\n        if  service_host is not None:\n            self.service_host = service_host\n        else:\n            self.service_host = 'http://127.0.0.1:5001/timemoe'\n        self.headers = {'Content-Type': 'application/json'}\n\n    def execute(self):\n        \"\"\"analytics methods\"\"\"\n        if self.list is None or len(self.list) < self.period:\n            raise ValueError(\"number of input data is less than the periods\")\n        if self.rows <= 0:\n            raise ValueError(\"fc rows is not specified yet\")\n        data = {\"input\": self.list, 'next_len': self.rows}\n        try:\n            response = requests.post(self.service_host, data=json.dumps(data), headers=self.headers)\n        except Exception as e:\n            app_logger.log_inst.error(f\"failed to connect the service: {self.service_host} \", str(e))\n            raise e\n        if response.status_code == 404:\n            app_logger.log_inst.error(f\"failed to connect the service: {self.service_host} \")\n            raise ValueError(\"invalid host url\")\n        elif response.status_code != 200:\n            app_logger.log_inst.error(f\"failed to request the service: {self.service_host}, reason: {response.text}\")\n            raise ValueError(f\"failed to request the service, {response.text}\")\n        pred_y = response.json()['output']\n        res =  {\n            \"res\": [pred_y]\n        }\n        insert_ts_list(res[\"res\"], self.start_ts, self.time_step, self.rows)\n        return res\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Addition in CMake\nDESCRIPTION: This snippet checks the BUILD_TEST variable and adds the test directory to the project if testing is enabled. It allows for conditional builds.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Creating User in TDengine\nDESCRIPTION: SQL command for creating a new user with configurable system information and database creation permissions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ncreate user user_name pass'password' [sysinfo {1|0}] [createdb {1|0}]\n```\n\nLANGUAGE: sql\nCODE:\n```\ncreate user test pass 'abc123!@#' sysinfo 1\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Library Build for TDengine (CMake)\nDESCRIPTION: Sets up the WebSocket library build process for TDengine, handling different configurations for Linux, macOS, Alpine Linux, and Windows. It uses ExternalProject to build the taosws-rs Rust project and copy the resulting libraries and headers to the appropriate build directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_WEBSOCKET)\n    IF(TD_LINUX)\n        SET(websocket_lib_file \"libtaosws.so\")\n    ELSEIF(TD_DARWIN)\n        SET(websocket_lib_file \"libtaosws.dylib\")\n    ENDIF()\n\n    MESSAGE(\"${Green} use libtaos-ws${ColourReset}\")\n\n    IF(TD_ALPINE)\n        include(ExternalProject)\n        ExternalProject_Add(taosws-rs\n            PREFIX \"taosws-rs\"\n            SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/taosws-rs\n            BUILD_ALWAYS off\n            DEPENDS ${TAOS_NATIVE_LIB}\n            BUILD_IN_SOURCE 1\n            CONFIGURE_COMMAND cmake -E echo \"taosws-rs no need cmake to config\"\n            PATCH_COMMAND\n            COMMAND git clean -f -d\n            BUILD_COMMAND\n            COMMAND RUSTFLAGS=-Ctarget-feature=-crt-static cargo build --release --locked -p taos-ws-sys --features rustls\n            INSTALL_COMMAND\n            COMMAND cp target/release/${websocket_lib_file} ${CMAKE_BINARY_DIR}/build/lib\n            COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/build/include\n            COMMAND cmake -E copy target/release/taosws.h ${CMAKE_BINARY_DIR}/build/include\n        )\n    ELSEIF(TD_WINDOWS)\n        include(ExternalProject)\n        ExternalProject_Add(taosws-rs\n            PREFIX \"taosws-rs\"\n            SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/taosws-rs\n            BUILD_ALWAYS off\n            DEPENDS ${TAOS_NATIVE_LIB}\n            BUILD_IN_SOURCE 1\n            CONFIGURE_COMMAND cmake -E echo \"taosws-rs no need cmake to config\"\n            PATCH_COMMAND\n            COMMAND git clean -f -d\n            BUILD_COMMAND\n            COMMAND cargo build --release --locked -p taos-ws-sys --features rustls\n            INSTALL_COMMAND\n            COMMAND cp target/release/taosws.dll ${CMAKE_BINARY_DIR}/build/lib\n            COMMAND cp target/release/taosws.dll.lib ${CMAKE_BINARY_DIR}/build/lib/taosws.lib\n            COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/build/include\n            COMMAND cmake -E copy target/release/taosws.h ${CMAKE_BINARY_DIR}/build/include\n        )\n    ELSE()\n        include(ExternalProject)\n        ExternalProject_Add(taosws-rs\n            PREFIX \"taosws-rs\"\n            SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/taosws-rs\n            BUILD_ALWAYS off\n            DEPENDS ${TAOS_NATIVE_LIB}\n            BUILD_IN_SOURCE 1\n            CONFIGURE_COMMAND cmake -E echo \"taosws-rs no need cmake to config\"\n            PATCH_COMMAND\n            COMMAND git clean -f -d\n            BUILD_COMMAND\n            COMMAND cargo build --release --locked -p taos-ws-sys --features rustls\n            INSTALL_COMMAND\n            COMMAND cp target/release/${websocket_lib_file} ${CMAKE_BINARY_DIR}/build/lib\n            COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/build/include\n            COMMAND cmake -E copy target/release/taosws.h ${CMAKE_BINARY_DIR}/build/include\n        )\n    ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Updating Key Configuration in TDengine via Shell\nDESCRIPTION: This shell command updates the key configuration similar to its initial offline configuration. The service must be stopped, and the key must remain unchanged.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntaosd -y  {encryptKey}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Connect Plugin Path\nDESCRIPTION: This configuration line adds the TDengine Connector plugin directory to the `plugin.path` property in the Kafka Connect distributed properties file. This allows Kafka Connect to discover and load the TDengine Connector.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nplugin.path=/usr/share/java,/opt/kafka/components\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics in TDengine (TypeScript)\nDESCRIPTION: Subscribes to a set of topics. Takes an array of topic strings and an optional request ID for issue tracking. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync subscribe(topics: Array<string>, reqId?:number): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Verifying the Time-MoE Service is Running\nDESCRIPTION: This shell command uses curl to check if the Time-MoE service is running correctly by making a request to the 'ds_predict' endpoint.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl 127.0.0.1:5001/ds_predict\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Locale and Charset Configuration Example 1\nDESCRIPTION: Example showing the resolution when both locale and charset are set with conflicting values. In this configuration, the charset setting (GBK) will override the encoding from the locale setting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlocale zh_CN.UTF-8\ncharset GBK\n```\n\n----------------------------------------\n\nTITLE: Restarting collectd service\nDESCRIPTION: After making changes to the collectd configuration, restart the collectd service to apply these changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_collectd.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl restart collectd\n```\n\n----------------------------------------\n\nTITLE: TDengine Helm Installation Commands\nDESCRIPTION: Shell commands for installing and verifying TDengine deployment using Helm\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nhelm install simple tdengine-3.5.0.tgz -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Build with Sphinx in CMake\nDESCRIPTION: Sets up documentation generation using Sphinx. Provides options for HTML, man pages, and LaTeX (PDF) documentation formats and creates custom targets for building each type of documentation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# For building Documentation (uses Sphinx)\noption(JANSSON_BUILD_DOCS \"Build documentation (uses python-sphinx).\" ON)\nif (JANSSON_BUILD_DOCS)\n   find_package(Sphinx)\n\n   if (NOT SPHINX_FOUND)\n      message(WARNING \"Sphinx not found. Cannot generate documentation!\n      Set -DJANSSON_BUILD_DOCS=OFF to get rid of this message.\")\n   else()\n      if (Sphinx_VERSION_STRING VERSION_LESS 1.0)\n         message(WARNING \"Your Sphinx version is too old!\n               This project requires Sphinx v1.0 or above to produce\n               proper documentation (you have v${Sphinx_VERSION_STRING}).\n               You will get output but it will have errors.\")\n      endif()\n\n      # configured documentation tools and intermediate build results\n      set(BINARY_BUILD_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_build\")\n\n      # Sphinx cache with pickled ReST documents\n      set(SPHINX_CACHE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/_doctrees\")\n\n      # CMake could be used to build the conf.py file too,\n      # eg it could automatically write the version of the program or change the theme.\n      # if(NOT DEFINED SPHINX_THEME)\n      #    set(SPHINX_THEME default)\n      # endif()\n      #\n      # if(NOT DEFINED SPHINX_THEME_DIR)\n      #    set(SPHINX_THEME_DIR)\n      # endif()\n      #\n      # configure_file(\n      #    \"${CMAKE_CURRENT_SOURCE_DIR}/conf.py.in\"\n      #    \"${BINARY_BUILD_DIR}/conf.py\"\n      #    @ONLY)\n\n      # TODO: Add support for all sphinx builders: http://sphinx-doc.org/builders.html\n\n      # Add documentation targets.\n      set(DOC_TARGETS html)\n\n      option(JANSSON_BUILD_MAN \"Create a target for building man pages.\" ON)\n\n      if (JANSSON_BUILD_MAN)\n         if (Sphinx_VERSION_STRING VERSION_LESS 1.0)\n            message(WARNING \"Sphinx version 1.0 > is required to build man pages. You have v${Sphinx_VERSION_STRING}.\")\n         else()\n            list(APPEND DOC_TARGETS man)\n         endif()\n      endif()\n\n      option(JANSSON_BUILD_LATEX \"Create a target for building latex docs (to create PDF).\" OFF)\n\n      if (JANSSON_BUILD_LATEX)\n         find_package(LATEX)\n\n         if (NOT LATEX_COMPILER)\n            message(\"Couldn't find Latex, can't build latex docs using Sphinx\")\n         else()\n            message(\"Latex found! If you have problems building, see Sphinx documentation for required Latex packages.\")\n            list(APPEND DOC_TARGETS latex)\n         endif()\n      endif()\n\n      # The doc target will build all documentation targets.\n      add_custom_target(doc)\n\n      foreach (DOC_TARGET ${DOC_TARGETS})\n         add_custom_target(${DOC_TARGET}\n            ${SPHINX_EXECUTABLE}\n            # -q   # Enable for quiet mode\n            -b ${DOC_TARGET}\n            -d \"${SPHINX_CACHE_DIR}\"\n            # -c \"${BINARY_BUILD_DIR}\" # enable if using cmake-generated conf.py\n            \"${CMAKE_CURRENT_SOURCE_DIR}/doc\"\n            \"${CMAKE_CURRENT_BINARY_DIR}/doc/${DOC_TARGET}\"\n            COMMENT \"Building ${DOC_TARGET} documentation with Sphinx\")\n\n         add_dependencies(doc ${DOC_TARGET})\n      endforeach()\n\n      message(\"Building documentation enabled for: ${DOC_TARGETS}\")\n   endif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Accessing TDengine via CLI with Hostname and Port\nDESCRIPTION: This command accesses the TDengine service using the TDengine CLI with a specified hostname and port. It allows connecting to the TDengine server running in a Docker container by explicitly specifying the hostname and port.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntaos -h tdengine -P 6030\n```\n\n----------------------------------------\n\nTITLE: Granting View Permissions\nDESCRIPTION: SQL commands to grant read, write, and alter permissions for database views\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ngrant privileges on [db_name.]view_name to user_name\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant read on power.view_name to test\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on power.view_name to test\n```\n\n----------------------------------------\n\nTITLE: CMake: Define source directory (commented out)\nDESCRIPTION: This commented-out line intends to define the source directory for the MNODE/QNODE test. It uses the `aux_source_directory` command, likely to automatically include all source files in the specified directory. MNODE_QNODE_TEST_SRC is assumed to be a variable holding the path to the source directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/qnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"# aux_source_directory(. MNODE_QNODE_TEST_SRC)\"\n```\n\n----------------------------------------\n\nTITLE: Closing statement using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function closes the prepared SQL statement via WebSocket, releasing associated resources. It returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_38\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) Close() error\"\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Source Files for GoogleTest\nDESCRIPTION: This snippet sets the C++ standard to C++11 and automatically includes all source files in the current directory into the build process. It is essential for ensuring the project uses modern C++ features required by GoogleTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/scalar/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"build scalar unit test\")\n\n# GoogleTest requires at least C++11\nSET(CMAKE_CXX_STANDARD 11)\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n```\n\n----------------------------------------\n\nTITLE: Importing taosSql driver\nDESCRIPTION: This code snippet shows how to import the `taosSql` driver for native connections in Go. The blank identifier `_` is used to import the driver for its side effects (i.e., registering the driver).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"database/sql\"\n    _ \"github.com/taosdata/driver-go/v3/taosSql\"\n)\n```\n\n----------------------------------------\n\nTITLE: Refreshing Algorithm Cache in TDengine CLI\nDESCRIPTION: SQL commands to refresh the algorithm cache for a specific anode or all anodes in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE ANODE {anode_id}\nUPDATE ALL ANODES\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine Server with MD5 Authentication in C\nDESCRIPTION: Connect to TDengine server using MD5 authentication. Similar to taos_connect() but using 32-bit lowercase MD5 of the password.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nTAOS *taos_connect_auth(const char *host, const char *user, const char *auth, const char *db, uint16_t port)\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Data for TDengine Source Connector\nDESCRIPTION: SQL script that creates a test database with a table schema for meters and inserts sample time-series data with tags for location and group identifiers. This data will be synchronized to Kafka by the connector.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nDROP DATABASE IF EXISTS test;\nCREATE DATABASE test;\nUSE test;\nCREATE STABLE meters (ts TIMESTAMP, current FLOAT, voltage INT, phase FLOAT) TAGS (location BINARY(64), groupId INT);\n\nINSERT INTO d1001 USING meters TAGS('California.SanFrancisco', 2) VALUES('2018-10-03 14:38:05.000',10.30000,219,0.31000) \\\n            d1001 USING meters TAGS('California.SanFrancisco', 2) VALUES('2018-10-03 14:38:15.000',12.60000,218,0.33000) \\\n            d1001 USING meters TAGS('California.SanFrancisco', 2) VALUES('2018-10-03 14:38:16.800',12.30000,221,0.31000) \\\n            d1002 USING meters TAGS('California.SanFrancisco', 3) VALUES('2018-10-03 14:38:16.650',10.30000,218,0.25000) \\\n            d1003 USING meters TAGS('California.LosAngeles', 2)   VALUES('2018-10-03 14:38:05.500',11.80000,221,0.28000) \\\n            d1003 USING meters TAGS('California.LosAngeles', 2)   VALUES('2018-10-03 14:38:16.600',13.40000,223,0.29000) \\\n            d1004 USING meters TAGS('California.LosAngeles', 3)   VALUES('2018-10-03 14:38:05.000',10.80000,223,0.29000) \\\n            d1004 USING meters TAGS('California.LosAngeles', 3)   VALUES('2018-10-03 14:38:06.500',11.50000,221,0.35000);\n```\n\n----------------------------------------\n\nTITLE: Displaying Cluster Machine Information in TDengine SQL\nDESCRIPTION: Shows information about the cluster's machine codes. This feature is available starting from TDengine version 3.2.3.0 and is exclusive to the enterprise edition.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER MACHINES; // Supported starting from TDengine version 3.2.3.0\n```\n\n----------------------------------------\n\nTITLE: Running Lua Performance Test\nDESCRIPTION: Measure performance of the Lua implementation by timing the execution of the benchmark script. Suitable for runtime performance analysis of TDengine Lua driver.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/lua/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntime lua benchmark.lua\n```\n\n----------------------------------------\n\nTITLE: Building TDengine on Linux using CMake\nDESCRIPTION: Creates a debug directory, runs CMake with build options, and compiles the project. Includes options for building taosAdapter and taosKeeper.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir debug && cd debug\ncmake .. -DBUILD_TOOLS=true -DBUILD_CONTRIB=true\nmake\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Query Parameters\nDESCRIPTION: Configuration parameters table for query-related settings in TDengine client driver\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/02-taosc.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name|Supported Version|Dynamic Modification|Description|\n|----------------------|----------|--------------------|-------------|\n|countAlwaysReturnValue           |         |Supported, effective immediately  |Whether the count/hyperloglog function returns a value when the input data is empty or NULL; 0: returns an empty row, 1: returns; default value 1; when this parameter is set to 1, if the query contains an INTERVAL clause or the query uses TSMA, and the corresponding group or window has empty or NULL data, the corresponding group or window will not return a query result; note that this parameter should be consistent between client and server|\n|keepColumnName                   |         |Supported, effective immediately  |Automatically sets the alias to the column name (excluding the function name) when querying with Last, First, LastRow functions without specifying an alias, thus the order by clause will automatically refer to the column corresponding to the function; 1: automatically sets the alias to the column name (excluding the function name), 0: does not automatically set an alias; default value: 0|\n|multiResultFunctionStarReturnTags|After 3.3.3.0|Supported, effective immediately  |When querying a supertable, whether last(*)/last_row(*)/first(*) returns tag columns; when querying basic tables, subtables, it is not affected by this parameter; 0: does not return tag columns, 1: returns tag columns; default value: 0; when this parameter is set to 0, last(*)/last_row(*)/first(*) only returns the ordinary columns of the supertable; when set to 1, it returns both the ordinary columns and tag columns of the supertable|\n|metaCacheMaxSize                 |         |Supported, effective immediately  |Specifies the maximum size of metadata cache for a single client, in MB; default value -1, meaning unlimited|\n|maxTsmaCalcDelay                 |         |Supported, effective immediately  |The allowable delay for tsma calculation by the client during query, range 600s - 86400s, i.e., 10 minutes - 1 day; default value: 600 seconds|\n|tsmaDataDeleteMark               |         |Supported, effective immediately  |The retention time for intermediate results of historical data calculated by TSMA, in milliseconds; range >= 3600000, i.e., at least 1h; default value: 86400000, i.e., 1d |\n```\n\n----------------------------------------\n\nTITLE: Error Handling for UnsatisfiedLinkError\nDESCRIPTION: This section provides guidance on troubleshooting the 'UnsatisfiedLinkError' when running the Java application. Users are instructed to ensure the TDengine client package is installed and optionally modify the library path with '-Djava.library.path=/usr/lib' if necessary. It highlights a common issue for users integrating TDengine with Java.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/taosdemo/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nIf you encounter the error Exception in thread \"main\" `java.lang.UnsatisfiedLinkError: no taos in java.library.path`, please check whether the TDengine client package is installed or TDengine is compiled and installed. If you are sure it is installed and still encounter this error, you can add `-Djava.library.path=/usr/lib` after the `java` command to specify the path to the shared library.\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine CLI in Shell\nDESCRIPTION: Basic command to launch the TDengine command line interface in a terminal.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaos\n```\n\n----------------------------------------\n\nTITLE: TDengine Monitor Configuration Setup\nDESCRIPTION: Basic configuration settings required in taos.cfg file to enable monitoring in TDengine\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmonitor 1\nmonitorFqdn localhost # FQDN for taoskeeper service\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Container Shell\nDESCRIPTION: Command to enter the running TDgpt Docker container and access its bash shell.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it <container name> bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Column Model for PI to TDengine Migration\nDESCRIPTION: Example CSV configuration file for single-column model that maps PI Points to individual TDengine tables. It defines two super tables ('volt_float32' and 'milliampere_float32') with their schemas, and a mapping of specific PI Points to these super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/03-pi.md#2025-04-16_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\nSuperTable,volt_float32\nSubTable,${point_name}\nFilter,\nts,KEY,TIMESTAMP,$ts\nvalue,COLUMN,FLOAT,$value\nstatus,COLUMN,INT,$status\npath,TAG,VARCHAR(200),$path\npoint_name,TAG,VARCHAR(100),$point_name\nptclassname,TAG,VARCHAR(100),$ptclassname\nsourcetag,TAG,VARCHAR(100),$sourcetag\ntag,TAG,VARCHAR(100),$tag\ndescriptor,TAG,VARCHAR(100),$descriptor\nexdesc,TAG,VARCHAR(100),$exdesc\nengunits,TAG,VARCHAR(100),$engunits\npointsource,TAG,VARCHAR(100),$pointsource\nstep,TAG,VARCHAR(100),$step\nfuture,TAG,VARCHAR(100),$future\nelement_paths,TAG,VARCHAR(512),`$element_paths.replace(\"\\\\\", \".\")`\n\nSuperTable,milliampere_float32\nSubTable,${point_name}\nFilter,\nts,KEY,TIMESTAMP,$ts\nvalue,COLUMN,FLOAT,$value\nstatus,COLUMN,INT,$status\npath,TAG,VARCHAR(200),$path\npoint_name,TAG,VARCHAR(100),$point_name\nptclassname,TAG,VARCHAR(100),$ptclassname\nsourcetag,TAG,VARCHAR(100),$sourcetag\ntag,TAG,VARCHAR(100),$tag\ndescriptor,TAG,VARCHAR(100),$descriptor\nexdesc,TAG,VARCHAR(100),$exdesc\nengunits,TAG,VARCHAR(100),$engunits\npointsource,TAG,VARCHAR(100),$pointsource\nstep,TAG,VARCHAR(100),$step\nfuture,TAG,VARCHAR(100),$future\nelement_paths,TAG,VARCHAR(512),`$element_paths.replace(\"\\\\\", \".\")`\n\nMeter_1000004_Voltage,POINT,volt_float32\nMeter_1000004_Current,POINT,milliampere_float32\nMeter_1000001_Voltage,POINT,volt_float32\nMeter_1000001_Current,POINT,milliampere_float32\nMeter_1000474_Voltage,POINT,volt_float32\nMeter_1000474_Current,POINT,milliampere_float32\n```\n\n----------------------------------------\n\nTITLE: Configuring Collectd Write_TSDB Plugin in XML\nDESCRIPTION: This XML configuration snippet demonstrates how to set up the write_tsdb plugin in collectd to send data to taosAdapter. It includes host, port, and additional settings for data formatting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_collectd.mdx#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\nLoadPlugin write_tsdb\n<Plugin write_tsdb>\n        <Node>\n                Host \"127.0.0.1\"\n                Port \"6047\"\n                HostTags \"status=production\"\n                StoreRates false\n                AlwaysAppendDS false\n        </Node>\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: Accessing TDengine via CLI\nDESCRIPTION: This command accesses the TDengine service using the `taos` CLI. It assumes that the TDengine client is already installed on the host and that TDengine is running in host network mode, or is accessible on the default port.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ taos\n```\n\n----------------------------------------\n\nTITLE: Manually Executing TCollector in Shell\nDESCRIPTION: This shell command snippet manually executes the TCollector script to start the data collection process. It is used to verify the configuration setup of TCollector and ensure it is writing data into TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/08-tcollector.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./tcollector.py\n```\n\n----------------------------------------\n\nTITLE: Building TDengine on Linux with Jemalloc\nDESCRIPTION: Uses CMake to build TDengine with Jemalloc as the memory allocator instead of glibc.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncmake .. -DJEMALLOC_ENABLED=ON\n```\n\n----------------------------------------\n\nTITLE: Extracting TDengine Installation Package on Linux\nDESCRIPTION: Command to extract the TDengine installation package from a tar archive. This extracts the compressed TDengine server files into the current directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntar -zxvf TDengine-server-3.3.0.0-Linux-x64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Unloading TDengine Connectors\nDESCRIPTION: cURL commands to stop and unload both the TDengineSinkConnector and TDengineSourceConnector instances from the Kafka Connect cluster after testing is complete.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://localhost:8083/connectors/TDengineSinkConnector\ncurl -X DELETE http://localhost:8083/connectors/TDengineSourceConnector\n```\n\n----------------------------------------\n\nTITLE: Starting/Stopping TDengine Service\nDESCRIPTION: This snippet provides the commands to start and stop the TDengine service (taosd) using the Windows Service Control Manager (sc). It requires administrator privileges to execute.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/packaging/tools/windows_before_install.txt#2025-04-16_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\n\"sc start/stop taosd\"\n```\n\n----------------------------------------\n\nTITLE: Getting Assignments from TMQ in Python\nDESCRIPTION: This Python snippet demonstrates how to get the assignments (partitions) for a consumer using the TMQ native client.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n    def assignment(self):\n        def cb(topic, vgroup_id, current, begin, end, user_data):\n            print(f'topic: {topic.decode()}, vgroup_id: {vgroup_id}, current: {current}, begin: {begin}, end: {end}')\n        self.consumer.TMQ_GetTopicAssignment(b'topic', cb, None)\n```\n\n----------------------------------------\n\nTITLE: Destroying a TMQ Topic List in C\nDESCRIPTION: Function to destroy a ws_tmq_list_t structure and release its resources. Takes a pointer to a TMQ list object and returns 0 on success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_list_destroy(ws_tmq_list_t *list);\n```\n\n----------------------------------------\n\nTITLE: Displaying TDengine Error Codes Table in Markdown\nDESCRIPTION: A markdown table presenting TDengine error codes, their descriptions, possible scenarios, and recommended actions. The table covers various error types including operation, memory, file, reference, driver, and system-related issues.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Code | Error Description                 | Possible Error Scenarios or Reasons                          | Recommended User Actions                                     |\n| ---------- | --------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 0x80000100 | Operation not supported           | Operation not supported, disallowed scenarios                | Check if the operation is incorrect, confirm if the feature is supported |\n| 0x80000102 | Out of Memory                     | Client or server memory allocation failure scenarios         | Check if client, server memory is sufficient                 |\n| 0x80000104 | Data file corrupted               | 1. Storage data file damaged 2. udf file cannot be created   | 1. Contact Taos customer support 2. Confirm server has read/write/create file permissions for the temporary directory |\n| 0x80000106 | too many Ref Objs                 | No available ref resources                                   | Preserve the scene and logs, report issue on github          |\n| 0x80000107 | Ref ID is removed                 | The referenced ref resource has been released                | Preserve the scene and logs, report issue on github          |\n| 0x80000108 | Invalid Ref ID                    | Invalid ref ID                                               | Preserve the scene and logs, report issue on github          |\n| 0x8000010A | Ref is not there                  | ref information does not exist                               | Preserve the scene and logs, report issue on github          |\n| 0x8000010B | Driver was not loaded                   | libtaosnative.so or libtaosws.so was not found in the system path                           | Reinstall the client driver |\n| 0x8000010C | Function was not loaded from the driver | some function defined in libtaos.so are not implemented in libtaosnative.so or libtaosws.so | Reinstall the client driver |\n| 0x80000110 | Unexpected generic error          | System internal error                                        | Preserve the scene and logs, report issue on github          |\n| 0x80000111 | Action in progress                | Operation in progress                                        | 1. Wait for the operation to complete 2. Cancel the operation if necessary 3. If it exceeds a reasonable time and still not completed, preserve the scene and logs, or contact customer support |\n| 0x80000112 | Out of range                      | Configuration parameter exceeds allowed value range          | Change the parameter                                         |\n| 0x80000115 | Invalid message                   | Incorrect message                                            | 1. Check for version inconsistency between nodes 2. Preserve the scene and logs, report issue on github |\n| 0x80000116 | Invalid message len               | Incorrect message length                                     | 1. Check for version inconsistency between nodes 2. Preserve the scene and logs, report issue on github |\n| 0x80000117 | Invalid pointer                   | Invalid pointer                                              | Preserve the scene and logs, report issue on github          |\n| 0x80000118 | Invalid parameters                | Invalid parameters                                           | Preserve the scene and logs, report issue on github          |\n| 0x80000119 | Invalid config option             | Invalid configuration                                        | Preserve the scene and logs, report issue on github          |\n| 0x8000011A | Invalid option                    | Invalid option                                               | Preserve the scene and logs, report issue on github          |\n| 0x8000011B | Invalid json format               | JSON format error                                            | Preserve the scene and logs, report issue on github          |\n| 0x8000011C | Invalid version number            | Invalid version format                                       | Preserve the scene and logs, report issue on github          |\n| 0x8000011D | Invalid version string            | Invalid version format                                       | Preserve the scene and logs, report issue on github          |\n| 0x8000011E | Version not compatible            | Version incompatibility between nodes                        | Check versions of all nodes (including server and client), ensure node versions are consistent or compatible |\n| 0x8000011F | Checksum error                    | File checksum verification failed                            | Preserve the scene and logs, report issue on github          |\n| 0x80000120 | Failed to compress msg            | Compression failed                                           | Preserve the scene and logs, report issue on github          |\n| 0x80000121 | Message not processed             | Message not correctly processed                              | Preserve the scene and logs, report issue on github          |\n| 0x80000122 | Config not found                  | Configuration item not found                                 | Preserve the scene and logs, report issue on github          |\n| 0x80000123 | Repeat initialization             | Repeated initialization                                      | Preserve the scene and logs, report issue on github          |\n| 0x80000124 | Cannot add duplicate keys to hash | Adding duplicate key data to hash table                      | Preserve the scene and logs, report issue on github          |\n| 0x80000125 | Retry needed                      | Application needs to retry                                   | Application should retry according to API usage specifications |\n| 0x80000126 | Out of memory in rpc queue        | rpc message queue memory usage reached limit                 | 1. Check and confirm if system load is too high 2. (If necessary) Increase rpc message queue memory limit through configuration rpcQueueMemoryAllowed 3. If the problem persists, preserve the scene and logs, report issue on github |\n| 0x80000127 | Invalid timestamp format          | Incorrect timestamp format                                   | Check and confirm the input timestamp format is correct      |\n| 0x80000128 | Msg decode error                  | Message decode error                                         | Preserve the scene and logs, report issue on github          |\n| 0x8000012A | Not found                         | Internal cache information not found                         | Preserve the scene and logs, report issue on github          |\n| 0x8000012B | Out of disk space                 | Insufficient disk space                                      | 1. Check and ensure data directory, temporary file folder directory have sufficient disk space 2. Regularly check and maintain the above directories to ensure enough space |\n| 0x80000130 | Database is starting up           | Database is starting up, unable to provide service           | Check database status, wait for the system to finish starting up or retry |\n| 0x80000131 | Database is closing down          | Database is closing down or has closed, unable to provide service | Check database status, ensure the system is working in normal state |\n| 0x80000132 | Invalid data format               | Incorrect data format                                        | 1. Preserve the scene and logs, report issue on github 2. Contact Taos customer support |\n| 0x80000133 | Invalid operation                 | Invalid or unsupported operation                             | 1. Modify to confirm the current operation is legal and supported, check parameter validity 2. If the problem persists, preserve the scene and logs, report issue on github |\n| 0x80000134 | Invalid value                     | Invalid value                                                | Preserve the scene and logs, report issue on github          |\n| 0x80000135 | Invalid fqdn                      | Invalid FQDN                                                 | Check if the configured or input FQDN value is correct       |\n| 0x8000013C | Invalid disk id                   | Invalid disk id                                              | Check users whether the mounted disk is invalid or use the parameter diskIDCheckEnabled to skip the disk check. |\n| 0x8000013D | Decimal value overflow            | Decimal value overflow                                       | Check query expression and decimal values |\n| 0x8000013E | Division by zero error            | Division by zero                                             | Check division expression |\n```\n\n----------------------------------------\n\nTITLE: Restarting taosAdapter Service in Shell\nDESCRIPTION: This shell command snippet restarts the taosAdapter service, necessary for ensuring changes in configuration are applied. It requires system privileges to execute.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/08-tcollector.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart taosadapter\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tier Storage Levels in TDengine\nDESCRIPTION: This snippet demonstrates how to configure multi-tier storage levels using the TDengine configuration file. Users specify mount points for different levels, which determine the location and behavior of data storage. The path is where the data is stored, the level indicates the priority, and the primary variable determines if it is the main mount point. Dependencies include having the TDengine service installed, and it uses file paths to manage storage locations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndataDir /mnt/data1 0 1\ndataDir /mnt/data2 0 0\ndataDir /mnt/data3 1 0\ndataDir /mnt/data4 1 0\ndataDir /mnt/data5 2 0\ndataDir /mnt/data6 2 0\n```\n\n----------------------------------------\n\nTITLE: Exiting TDengine CLI\nDESCRIPTION: Command to exit the TDengine CLI interface by typing quit and pressing enter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntaos> quit\n```\n\n----------------------------------------\n\nTITLE: Network Bandwidth and Latency Text Description\nDESCRIPTION: This text advises on the network requirements for distributed systems using TDengine, recommending a dedicated VLAN for intra-cluster communication, bandwith choices, and packet loss limits to improve performance and reliability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/02-planning.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNetwork bandwidth and communication latency are crucial for the performance and stability of distributed systems, especially in terms of network connections between server nodes.\nWe strongly recommend allocating a dedicated VLAN for the network between server nodes to avoid interference from external communications. In terms of bandwidth selection, it is advisable to use a 10-gigabit network, or at least a gigabit network, and ensure that the packet loss rate is below one ten-thousandth.\nIf a distributed storage solution is adopted, the storage network and the intra-cluster communication network must be planned separately. A common practice is to use dual 10-gigabit networks, i.e., two sets of independent 10-gigabit networks. This ensures that storage data and intra-cluster communication do not interfere with each other, improving overall performance.\nFor inbound networks, in addition to ensuring sufficient access bandwidth, the packet loss rate must also be kept below one ten-thousandth. This will help reduce errors and retransmissions during data transmission, thereby improving the reliability and efficiency of the system.\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: StatTask\nDESCRIPTION: This class provides the functionality to periodically count the number of written records.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/StatTask.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write with ReqId (Java)\nDESCRIPTION: This Java code snippet shows how to execute a schemaless write operation to TDengine with a request ID (reqId) for request tracking. The last parameter, reqId, enables request link tracing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n\"writer.write(lineDemo, SchemalessProtocolType.LINE, SchemalessTimestampType.NANO_SECONDS, 1L);\"\n```\n\n----------------------------------------\n\nTITLE: Follower Processing Strict Consistency Write Request in TDengine (PlantUML)\nDESCRIPTION: Sequence diagram showing how a follower node processes a strict consistency write request in TDengine, including replication and application of changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/scratch.md#2025-04-16_snippet_2\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml follower_process_strict_consistency\nparticipant SYNC as sync\nparticipant VNODE as vnode\n\ngroup #pink \"SYNC threads\"\n    -> sync: replication req\n\n    sync -> sync: syncProcessReqs()\n    note right\n        In the replication\n        only data is\n        persisted and response\n        is sent back\n    end note\n\n    <- sync: replication rsp\n\n    -> sync: apply req\n\n    sync -> vnode: notify apply\nend\n\ngroup #lightblue \"VNODE worker threads\"\n    vnode -> vnode: vnodeApplyReqs()\nend\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Displaying Defined Functions in TDengine using SQL\nDESCRIPTION: This SQL statement lists all user-defined functions (UDFs) currently registered in the TDengine system. It provides a simple way to verify if a UDF has been successfully created and is available for use in queries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nshow functions;\n```\n\n----------------------------------------\n\nTITLE: Preparing SQL using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function prepares an SQL statement for execution using the Stmt object via WebSocket. It takes an SQL string as input and returns an error if the preparation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) Prepare(sql string) error\"\n```\n\n----------------------------------------\n\nTITLE: Grubbs's Test Anomaly Detection in SQL\nDESCRIPTION: Identifies anomalies by testing maximum and minimum deviations from the mean in normally distributed datasets\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=grubbs\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Decimal Library\nDESCRIPTION: This block configures the include directories for the 'decimal' target. It adds a public include directory for external users and a private include directory for internal implementation details.  These directories are used by the compiler to locate header files during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_include_directories(\n    decimal\n    PUBLIC \\\"${TD_SOURCE_DIR}/include/libs/decimal\\\"\n    PRIVATE \\\"${CMAKE_CURRENT_SOURCE_DIR}/inc\\\"\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine C# Connector Package using dotnet CLI\nDESCRIPTION: This shell command demonstrates how to add the TDengine C# connector package (`TDengine.Connector`) to a C# project using the `dotnet add package` command. This provides an alternative to manually editing the project file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n\"dotnet add package TDengine.Connector\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Upload Count for Object Storage in TDengine\nDESCRIPTION: This formula calculates the number of upload requests to object storage based on the data file size, `s3_chunkpages`, and `tsdb_pagesize`. The calculation determines how many file blocks are uploaded, excluding the last one, based on the chunk size.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"Upload Count = Data File Size / (s3_chunkpages * tsdb_pagesize) - 1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring collectd network plugin\nDESCRIPTION: Configure collectd to send data directly to taosAdapter using the network plugin by modifying /etc/collectd/collectd.conf. Set the 'Server' directive with the IP and port of the taosAdapter instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_collectd.mdx#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\nLoadPlugin network\n<Plugin network>\n         Server \"<taosAdapter's host>\" \"<port for collectd direct>\"\n</Plugin>\n```\n\nLANGUAGE: xml\nCODE:\n```\nLoadPlugin network\n<Plugin network>\n         Server \"127.0.0.1\" \"6045\"\n</Plugin>\n```\n\n----------------------------------------\n\nTITLE: Pulling TDgpt Docker Image (Standard Version)\nDESCRIPTION: Commands to pull the latest or a specific version of the standard TDgpt Docker image.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull tdengine/tdengine-tdgpt:latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull tdengine/tdengine-tdgpt:3.3.6.0\n```\n\n----------------------------------------\n\nTITLE: Writing Table Row Data to TDengine Super Table with Flink\nDESCRIPTION: This code snippet demonstrates writing Flink Table `Row` data to a TDengine super table. It illustrates configuring the TDengine Flink connector as a table sink and writing `Row` data to the super table using Flink's Table API.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/flink.md#2025-04-16_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/flink/Main.java:TableRowToSink}}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with taosBenchmark - Shell\nDESCRIPTION: This shell command generates test data for 1,000 smart meters over 3 days with a collection frequency of 1 second. It's crucial for simulating real-time data for analysis in Power BI.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"taosBenchmark -t 1000 -n 259200 -S 1000 -y\"\n```\n\n----------------------------------------\n\nTITLE: Selecting All Data from TDengine Table\nDESCRIPTION: This SQL query selects all columns and rows from the `meters` table within the `test` database. It retrieves the entire dataset stored in the table for examination or further processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/query-sqls-slow-query.txt#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from test.meters\n```\n\n----------------------------------------\n\nTITLE: Running Chaos Tests in TDengine\nDESCRIPTION: Command to execute chaos tests, which perform randomized operations to expose potential issues without predefined scenarios.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/pytest\npython3 auto_crash_gen.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Jansson Installation Targets in CMake\nDESCRIPTION: Sets up installation targets for the Jansson library, including library files, headers, pkg-config, and CMake configuration files. Can be disabled with the JANSSON_INSTALL option.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\noption(JANSSON_INSTALL \"Generate installation target\" ON)\nif (JANSSON_INSTALL)\n  install(TARGETS jansson\n          EXPORT janssonTargets\n          LIBRARY DESTINATION \"lib\"\n          ARCHIVE DESTINATION \"lib\"\n          RUNTIME DESTINATION \"bin\"\n          INCLUDES DESTINATION \"include\")\n\n  install(FILES ${JANSSON_HDR_PUBLIC}\n          DESTINATION \"include\")\n\n  # Install the pkg-config.\n  install(FILES\n          ${CMAKE_CURRENT_BINARY_DIR}/jansson.pc\n          DESTINATION lib/pkgconfig)\n\n  # Install the configs.\n  install(FILES\n      ${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfig.cmake\n      ${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfigVersion.cmake\n      DESTINATION \"${JANSSON_INSTALL_CMAKE_DIR}\")\n\n  # Install exports for the install-tree.\n  install(EXPORT janssonTargets\n          NAMESPACE jansson::\n          DESTINATION \"${JANSSON_INSTALL_CMAKE_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Database Creation Response in TDengine REST API\nDESCRIPTION: Example of a response from TDengine's REST API after creating a database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"affected_rows\",\n            \"INT\",\n            4\n        ]\n    ],\n    \"data\": [\n        [\n            0\n        ]\n    ],\n    \"rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Lossy Compression Configuration in TDengine Logs\nDESCRIPTION: This SQL-like log entry demonstrates the successful application of lossy compression settings for float and double types in TDengine. It appears in the taosd log after restarting the service with the new configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n02/22 10:49:27.607990 00002933 UTL  lossyColumns     float|double\n```\n\n----------------------------------------\n\nTITLE: Configuring mdnodeTest Build and Test in CMake (Commented Out)\nDESCRIPTION: A commented-out CMake configuration that would collect source files from the current directory, build an executable named mdnodeTest, link it with the 'sut' library, and register it as a test target. The configuration is currently disabled through commenting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/dnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# aux_source_directory(. MNODE_DNODE_TEST_SRC)\n# add_executable(mdnodeTest ${MNODE_DNODE_TEST_SRC})\n# target_link_libraries(\n#     mdnodeTest\n#     PUBLIC sut\n# )\n\n# add_test(\n#     NAME mdnodeTest\n#     COMMAND mdnodeTest\n# )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet adds an executable target named 'scalarTest', which is built from the source files identified earlier, and links it to several libraries necessary for the application. These libraries include both application-specific libraries and GoogleTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/scalar/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(scalarTest ${SOURCE_LIST})\nTARGET_LINK_LIBRARIES(\n        scalarTest\n        PUBLIC os util common gtest qcom function nodes scalar parser catalog transport\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Consumer Demo Environment Variables\nDESCRIPTION: Shell commands to set environment variables for customizing the TDengine Consumer demo. These variables control connection details, consumer type, number of consumers and processors, consumption rate, and polling behavior.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/consumer-demo/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# the host of TDengine server\nexport TAOS_HOST=\"127.0.0.1\"\n\n# the port of TDengine server\nexport TAOS_PORT=\"6041\"\n\n# the consumer type, can be \"ws\" or \"jni\"\nexport TAOS_TYPE=\"ws\"\n\n# the number of consumers\nexport TAOS_JDBC_CONSUMER_NUM=\"1\"\n\n# the number of processors to consume\nexport TAOS_JDBC_PROCESSOR_NUM=\"2\"\n\n# the number of records to be consumed per processor per second\nexport TAOS_JDBC_RATE_PER_PROCESSOR=\"1000\"\n\n# poll wait time in ms\nexport TAOS_JDBC_POLL_SLEEP=\"100\"\n```\n\n----------------------------------------\n\nTITLE: Running Forecasting Evaluation in Python\nDESCRIPTION: Command to run the analytics_compare.py script for evaluating forecasting algorithms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\npython3.10 ./analytics_compare.py forecast\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Mode in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the mode (e.g., IN, OUT, INOUT) of a specified parameter. Takes the parameter index as input and returns an integer representing the mode. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_91\n\nLANGUAGE: Java\nCODE:\n```\nint getParameterMode(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Java Class Name in JDBC ParameterMetaData (Java)\nDESCRIPTION: Retrieves the Java class name of a specified parameter. Takes the parameter index as input and returns a string representing the Java class name. Throws SQLException if an error occurs during the process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_90\n\nLANGUAGE: Java\nCODE:\n```\nString getParameterClassName(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark with Configuration File\nDESCRIPTION: Runs taosBenchmark using a JSON configuration file to specify all parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntaosBenchmark -f <json file>\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine Rust Connector with WebSocket Feature\nDESCRIPTION: This `toml` snippet demonstrates how to add the TDengine Rust connector (`taos`) dependency to a Rust project, configuring it for WebSocket-only connections by disabling default features and enabling the `ws` feature.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n\"taos = { version = \\\"*\\\", default-features = false, features = [\\\"ws\\\"] }\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current Database in TDengine C Client\nDESCRIPTION: Retrieve the name of the current database in use.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nint taos_get_current_db(TAOS *taos, char *database, int len, int *required)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine using CLI on Linux\nDESCRIPTION: Launches the TDengine CLI to connect to the TDengine server on Linux.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntaos\n```\n\n----------------------------------------\n\nTITLE: Building TaosTools from Source\nDESCRIPTION: Commands to clone and build TaosTools from source code\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/taosdata/taos-tools\ncd taos-tools\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example - REST API\nDESCRIPTION: The REST API does not support WebSocket connections for connecting to TDengine. Reference documentation for more information on using the REST API with TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Querying Latest Monitoring Record\nDESCRIPTION: Demonstrates how to query the most recent monitoring record from a super table using last_row function\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntaos> select last_row(*) from taosd_dnodes_info;\n      last_row(_ts)      |   last_row(disk_engine)   |  last_row(system_net_in)  |   last_row(vnodes_num)    | last_row(system_net_out)  |     last_row(uptime)      |    last_row(has_mnode)    |  last_row(io_read_disk)   | last_row(error_log_count) |     last_row(io_read)     |    last_row(cpu_cores)    |    last_row(has_qnode)    |    last_row(has_snode)    |   last_row(disk_total)    |   last_row(mem_engine)    | last_row(info_log_count)  |   last_row(cpu_engine)    |  last_row(io_write_disk)  | last_row(debug_log_count) |    last_row(disk_used)    |    last_row(mem_total)    |    last_row(io_write)     |     last_row(masters)     |   last_row(cpu_system)    | last_row(trace_log_count) |    last_row(mem_free)     |\nn 2024-08-07 14:54:09.174 |         0.000000000000000 |      3379.093240947399863 |        37.000000000000000 |      5265.998201139278535 |     64402.000000000000000 |         1.000000000000000 |      8323.261934108399146 |         6.000000000000000 |     40547.386655118425551 |        16.000000000000000 |         0.000000000000000 |         0.000000000000000 |     5.272955781120000e+11 |   2443032.000000000000000 |       423.000000000000000 |         0.556269622200215 |    677731.836503547732718 |    356380.000000000000000 |     4.997186764800000e+10 |  65557284.000000000000000 |    714177.054532129666768 |        37.000000000000000 |         2.642280705451021 |         0.000000000000000 |  11604276.000000000000000 |\nQuery OK, 1 row(s) in set (0.003168s)\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Unix Timestamp in GMT+8 Timezone\nDESCRIPTION: Equivalent SQL query using a Unix timestamp in the GMT+8 timezone. This shows the conversion from the timestamp string in the previous example to the corresponding Unix timestamp value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM table_name WHERE TS<1554955268000;\n```\n\n----------------------------------------\n\nTITLE: SQL First/Last Query with Interval and Fill\nDESCRIPTION: Example of problematic query pattern that was fixed in this release, involving first/last operations with interval and fill clauses\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/28-releases/03-notes/3.3.2.0.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nfirst/last + interval + fill\n```\n\n----------------------------------------\n\nTITLE: Rebalancing Vgroup Leaders in TDengine\nDESCRIPTION: These SQL commands attempt to even out the distribution of vgroup leaders across replica nodes in a TDengine cluster. This is achieved via a re-election process, but due to random nature, the results are not perfectly balanced. This operation can affect both query and write operations temporarily.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/04-maintenance.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nbalance vgroup leader; # Rebalance all vgroup leaders\nbalance vgroup leader on <vgroup_id>; # Rebalance a vgroup leader\nbalance vgroup leader database <database_name>; # Rebalance all vgroup leaders within a database\n```\n\n----------------------------------------\n\nTITLE: Managing Anode Service in Linux with systemd\nDESCRIPTION: This snippet provides commands to start, stop, and check the status of the 'taosanoded' Anode service on a Linux system using systemd. It is essential for Anode management and requires systemd to be installed and running.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/03-management.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start  taosanoded\nsystemctl stop   taosanoded\nsystemctl status taosanoded\n```\n\n----------------------------------------\n\nTITLE: DAYOFWEEK Function in TDengine\nDESCRIPTION: The DAYOFWEEK function returns the day of the week for a given date. The input can be a BIGINT or TIMESTAMP representing the timestamp, or a VARCHAR/NCHAR string conforming to ISO8601/RFC3339 standards.  The return value is a BIGINT, where 1 represents Sunday, 2 represents Monday, and so on.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\n\"DAYOFWEEK(expr)\"\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"taos> select dayofweek('2000-01-01');\\n dayofweek('2000-01-01') |\\n==========================\\n                       7 |\"\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Grants Configuration Support in TDengine\nDESCRIPTION: Conditionally enables grants configuration support by adding a compilation definition when GRANT_CFG_INCLUDE_DIR is defined, providing access control features.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/node_mgmt/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED GRANT_CFG_INCLUDE_DIR)\n  add_definitions(-DGRANTS_CFG)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Python TDengine Connectors using pip\nDESCRIPTION: These shell commands demonstrate how to uninstall previously installed versions of the TDengine Python connectors (`taos` and `taospy`, `taos-ws-py`) using `pip3`. This is a necessary step before installing newer versions to avoid conflicts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"pip3 uninstall taos taospy\npip3 uninstall taos  taos-ws-py\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Current Mnode Status in TDengine with kubectl\nDESCRIPTION: This snippet retrieves and displays the current mnode status for the TDengine cluster. The command is run on the second TDengine pod in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it tdengine-1 -n tdengine-test -- taos -s \"show mnodes\\G\"\n```\n\n----------------------------------------\n\nTITLE: StatsD JavaScript Configuration\nDESCRIPTION: JavaScript configuration file for StatsD showing backend repeater setup and port configuration for connecting to TaosAdapter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_statsd.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\nport: 8125\n, backends: [\"./backends/repeater\"]\n, repeater: [{ host: '127.0.0.1', port: 6044}]\n}\n```\n\n----------------------------------------\n\nTITLE: Traefik startup parameters\nDESCRIPTION: This configuration sets up a `default` TLS certificate resolver for Traefik, enabling automatic certificate acquisition and renewal via ACME. It also configures Docker as a provider, allowing Traefik to dynamically discover and configure routes for Docker containers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntraefik:\n    image: \\\"traefik:v2.3.2\\\" \n    hostname: \\\"traefik\\\"\n    networks:\n    - traefik\n    command:\n    - \\\"--log.level=INFO\\\"\n    - \\\"--api.insecure=true\\\"\n    - \\\"--providers.docker=true\\\"\n    - \\\"--providers.docker.exposedbydefault=false\\\"\n    - \\\"--providers.docker.swarmmode=true\\\"\n    - \\\"--providers.docker.network=traefik\\\"\n    - \\\"--providers.docker.watch=true\\\"\n    - \\\"--entrypoints.http.address=:80\\\"\n    - \\\"--entrypoints.https.address=:443\\\"\n    - \\\"--certificatesresolvers.default.acme.dnschallenge=true\\\"\n    - \\\"--certificatesresolvers.default.acme.dnschallenge.provider=alidns\\\"\n    - \\\"--certificatesresolvers.default.acme.dnschallenge.resolvers=ns1.alidns.com\\\"\n    - \\\"--certificatesresolvers.default.acme.email=linhehuo@gmail.com\\\"\n    - \\\"--certificatesresolvers.default.acme.storage=/letsencrypt/acme.json\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining taosd_vgroups_info Table Structure in Markdown\nDESCRIPTION: This snippet presents the structure of the taosd_vgroups_info table, which records virtual node group information. It includes details such as table count, status, and associated database name for each vgroup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n| field          | type      | is\\_tag | comment                                        |\n| :------------- | :-------- | :------ | :--------------------------------------------- |\n| \\_ts           | TIMESTAMP |         | timestamp                                      |\n| tables\\_num    | DOUBLE    |         | Number of tables in vgroup                     |\n| status         | DOUBLE    |         | vgroup status, range: unsynced = 0, ready = 1 |\n| vgroup\\_id     | VARCHAR   | tag     | vgroup id                                      |\n| database\\_name | VARCHAR   | tag     | Name of the database the vgroup belongs to     |\n| cluster\\_id    | VARCHAR   | tag     | cluster id                                     |\n```\n\n----------------------------------------\n\nTITLE: Installing Maven on Linux\nDESCRIPTION: This snippet shows the command to install Maven, which is required to compile and run the TDengine JDBC demo project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/JDBCDemo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install maven\n```\n\n----------------------------------------\n\nTITLE: Starting All TDengine Components\nDESCRIPTION: This command executes a shell script named 'start-all.sh' with sudo privileges.  The script is assumed to handle the startup of all TDengine components. The user will need to ensure that the 'start-all.sh' script exists and is executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/packaging/tools/mac_install_summary.txt#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo start-all.sh\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: ProducerTask\nDESCRIPTION: This class acts as a Kafka producer, sending data generated by the mock data source to all partitions of a Kafka topic.  It uses a different hashing method than the JDBC efficient writing approach.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/ProducerTask.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark for Data Ingestion Testing\nDESCRIPTION: Command to run taosBenchmark with default settings for testing TDengine's data ingestion performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntaosBenchmark -y\n```\n\n----------------------------------------\n\nTITLE: Checking S3 Configuration for TDengine Enterprise\nDESCRIPTION: This snippet runs a command to verify the availability of S3 configuration in TDengine. The `taosd` command with the `checks3` parameter checks if the configured S3 service can be accessed. It requires TDengine to be installed and configured with S3 parameters in the configuration file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntaosd --checks3\n```\n\n----------------------------------------\n\nTITLE: Retrieves Affected Rows Count - TDengine C\nDESCRIPTION: Delivers the count of rows affected by the execution of the precompiled SQL statement, crucial for validating operation impacts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_77\n\nLANGUAGE: C\nCODE:\n```\nint taos_stmt_affected_rows(TAOS_STMT *stmt)\n```\n\n----------------------------------------\n\nTITLE: Custom Forecast Service Implementation in Python\nDESCRIPTION: Demonstrates how to create a custom forecast service by inheriting from `AbstractForecastService` and implementing the `execute` method.  This example service, named `_MyForecastService`, returns a fixed value of 1 as the prediction for all time steps, including upper and lower bounds equal to 1 if `return_conf` is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/02-forecast.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom taosanalytics.service import AbstractForecastService\n\n\n# 算法实现类名称 需要以下划线 \"_\" 开始，并以 Service 结束\nclass _MyForecastService(AbstractForecastService):\n    \"\"\" 定义类，从 AbstractForecastService 继承并实现其定义的抽象方法 execute  \"\"\"\n\n    # 定义算法调用关键词，全小写 ASCII 码\n    name = 'myfc'\n\n    # 该算法的描述信息 (建议添加)\n    desc = \"\"\"return the forecast time series data\"\"\"\n\n    def __init__(self):\n        \"\"\"类初始化方法\"\"\"\n        super().__init__()\n\n    def execute(self):\n        \"\"\" 算法逻辑的核心实现\"\"\"\n        res = []\n\n        \"\"\"这个预测算法固定返回 1 作为预测值，预测值的数量是用户通过 self.fc_rows 指定\"\"\"\n        ts_list = [self.start_ts + i * self.time_step for i in range(self.fc_rows)]\n        res.append(ts_list)  # 设置预测结果时间戳列\n\n        \"\"\"生成全部为 1 的预测结果 \"\"\"\n        res_list = [1] * self.fc_rows\n        res.append(res_list)\n\n        \"\"\"检查用户输入，是否要求返回预测置信区间上下界\"\"\"\n        if self.return_conf:\n            \"\"\"对于没有计算预测置信区间上下界的算法，直接返回预测值作为上下界即可\"\"\"\n            bound_list = [1] * self.fc_rows\n            res.append(bound_list)  # 预测结果置信区间下界\n            res.append(bound_list)  # 预测结果执行区间上界\n\n        \"\"\"返回结果\"\"\"\n        return {\"res\": res, \"mse\": 0}\n\n    def set_params(self, params):\n        \"\"\"该算法无需任何输入参数，直接调用父类函数，不处理算法参数设置逻辑\"\"\"\n        return super().set_params(params)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu/Debian\nDESCRIPTION: Commands to install required dependency packages for building TaosTools on Ubuntu/Debian systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install libjansson-dev libsnappy-dev liblzma-dev libz-dev zlib1g zlib1g-dev pkg-config libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Building TDengine on macOS\nDESCRIPTION: Creates a debug directory, runs CMake, and builds the project on macOS. Requires XCode command line tools and cmake.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmkdir debug && cd debug\ncmake .. && cmake --build .\n```\n\n----------------------------------------\n\nTITLE: Docker Container Plugin Installation\nDESCRIPTION: Docker command to start Grafana container with automatic TDengine plugin installation using environment variable\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -p 3000:3000 \\\n  --name=grafana \\\n  -e \"GF_INSTALL_PLUGINS=tdengine-datasource\" \\\n  grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Starting taosX Service on Linux Using Systemd\nDESCRIPTION: Command to start the taosX service on Linux systems using Systemd. This is the preferred method for starting taosX in service mode on Linux.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start taosx\n```\n\n----------------------------------------\n\nTITLE: Creating a Super Table with Disabled SMA Column in SQL\nDESCRIPTION: This SQL command creates a super table with SMA disabled for the 'b' column using the NOSMA keyword. It demonstrates how to selectively disable SMA for specific columns when creating a table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/user_manual/Small_Materialized_Aggrates.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate table st (ts timestamp, a int, b int NOSMA, c double) tags (tg1 binary(10), tg2 int);\n```\n\n----------------------------------------\n\nTITLE: Converting SQL to Native Syntax in Java\nDESCRIPTION: This method converts a standard SQL statement into the database-specific syntax. It throws an `SQLException` if the conversion fails. The input is the standard SQL query string.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n\"`String nativeSQL(String sql) throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring dataformatTest Executable\nDESCRIPTION: Creates a test executable for data format testing, linking against utility and common libraries and setting include directories\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dataformatTest \"dataformatTest.cpp\")\ntarget_link_libraries(dataformatTest gtest gtest_main util common)\ntarget_include_directories(\n    dataformatTest\n    PUBLIC \"${TD_SOURCE_DIR}/include/common\"\n    PUBLIC \"${TD_SOURCE_DIR}/include/util\"\n)\nadd_test(\n    NAME dataformatTest\n    COMMAND dataformatTest\n)\n```\n\n----------------------------------------\n\nTITLE: Getting affected rows using Stmt2 object in af package (v3.6.0+)\nDESCRIPTION: This function retrieves the number of rows affected by the executed SQL statement using the Stmt2 object. It returns the affected rows count.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt2) GetAffectedRows() int\"\n```\n\n----------------------------------------\n\nTITLE: Including C Example for Parameter Binding\nDESCRIPTION: This C code snippet provides an example of how to implement parameter binding in TDengine, aimed at efficiently inserting data while minimizing SQL parsing overhead.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c-ws/stmt_insert_demo.c}}\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory for Audit Library - CMake\nDESCRIPTION: This snippet specifies the source directory for the audit library. It conditionally appends a source file based on whether TD_ENTERPRISE is defined, which allows for flexible builds depending on the environment. The source file is located within the TD_ENTERPRISE directory if applicable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/audit/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src AUDIT_SRC)\n\nIF(TD_ENTERPRISE)\n  LIST(APPEND AUDIT_SRC ${TD_ENTERPRISE_DIR}/src/plugins/audit/src/audit.c)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Mock Data Script\nDESCRIPTION: This shell command installs the 'mqtt' and 'mockjs' Node.js packages using npm, specifying a custom registry (taobao). After installation, it executes the 'mock.js' script using Node.js, which generates and sends mock MQTT data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/09-emq-broker.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm install mqtt mockjs --save --registry=https://registry.npm.taobao.org\nnode mock.js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on CentOS 8/Rocky Linux\nDESCRIPTION: Commands to install required dependency packages for building TaosTools on CentOS 8/Rocky Linux systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y epel-release\nsudo yum install -y dnf-plugins-core\nsudo yum config-manager --set-enabled powertools\nsudo yum install -y zlib-devel zlib-static xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libatomic-static libstdc++-static openssl-devel\n```\n\n----------------------------------------\n\nTITLE: TSDB Error Codes\nDESCRIPTION: Error codes related to time-series database operations in TDengine, covering table operations, schema versions, and configuration issues\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Code | Error Description                        | Possible Error Scenarios or Reasons                          | Recommended Actions for Users                        |\n| ---------- | ---------------------------------------- | ------------------------------------------------------------ | ---------------------------------------------------- |\n| 0x80000600 | Invalid table ID to write                | Writing to a non-existent table                              | Restart the client                                   |\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Tiered Storage\nDESCRIPTION: Configuration entries for setting up tiered storage with multiple mount points in taos.cfg file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/06-enterprise.md#2025-04-16_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\ndataDir /var/lib/taos 0 1\ndataDir /var/lib/taos1 1 0\ndataDir /var/lib/taos2 2 0\n```\n\n----------------------------------------\n\nTITLE: TDengine CLI Database Queries\nDESCRIPTION: SQL commands to verify TCollector database creation and data ingestion in TDengine, including showing databases and super tables\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/08-tcollector.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n tcollector                     |\nQuery OK, 3 rows in database (0.001647s)\n\n\ntaos> use tcollector;\nDatabase changed.\n\ntaos> show stables;\n              name              |\n=================================\n proc.meminfo.hugepages_rsvd    |\n proc.meminfo.directmap1g       |\n proc.meminfo.vmallocchunk      |\n proc.meminfo.hugepagesize      |\n tcollector.reader.lines_dro... |\n proc.meminfo.sunreclaim        |\n proc.stat.ctxt                 |\n proc.meminfo.swaptotal         |\n proc.uptime.total              |\n tcollector.collector.lines_... |\n proc.meminfo.vmallocused       |\n proc.meminfo.memavailable      |\n sys.numa.foreign_allocs        |\n proc.meminfo.committed_as      |\n proc.vmstat.pswpin             |\n proc.meminfo.cmafree           |\n proc.meminfo.mapped            |\n proc.vmstat.pgmajfault         |\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Database with 2 Replicas in TDengine\nDESCRIPTION: This SQL command creates a database named 'db' with 2 replicas for high availability testing. It sets various parameters including the number of replicas, days to keep, number of rows per file, and compression level.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/high_availability/2_replica.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE DATABASE IF NOT EXISTS db replica 2 days 10 keep 3650 rows 10000 comp 2;\n```\n\n----------------------------------------\n\nTITLE: Configuring Flink Checkpointing for At-Least-Once Semantics\nDESCRIPTION: Sets up Flink checkpointing with AT_LEAST_ONCE mode and 5 second interval to ensure at-least-once delivery semantics when writing to TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/12-flink.md#2025-04-16_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\nenv.enableCheckpointing(5000);\nenv.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.AT_LEAST_ONCE);\n```\n\n----------------------------------------\n\nTITLE: TDengine Sink Connector Configuration\nDESCRIPTION: This JSON configuration file defines the TDengine Sink Connector settings, including the connector class, topics to subscribe to, connection URL, database credentials, data format (InfluxDB Line Protocol), and error handling configurations.  The key parameters include `topics`, `connection.database`, and `db.schemaless`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"TDengineSinkConnector\",\n  \"config\": {\n    \"connector.class\":\"com.taosdata.kafka.connect.sink.TDengineSinkConnector\",\n    \"tasks.max\": \"1\",\n    \"topics\": \"meters\",\n    \"connection.url\": \"jdbc:TAOS://127.0.0.1:6030\",\n    \"connection.user\": \"root\",\n    \"connection.password\": \"taosdata\",\n    \"connection.database\": \"power\",\n    \"db.schemaless\": \"line\",\n    \"data.precision\": \"ns\",\n    \"key.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"value.converter\": \"org.apache.kafka.connect.storage.StringConverter\",\n    \"errors.tolerance\": \"all\",\n    \"errors.deadletterqueue.topic.name\": \"dead_letter_topic\",\n    \"errors.deadletterqueue.topic.replication.factor\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Application Properties for TDengine Connection\nDESCRIPTION: Configuration settings for Spring datasource with TDengine JDBC driver, connection pooling, and Mybatis. Includes database connection parameters, connection pool settings, and logging configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/springbootdemo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# datasource config\nspring.datasource.driver-class-name=com.taosdata.jdbc.TSDBDriver\nspring.datasource.url=jdbc:TAOS://127.0.0.1:6030/test\nspring.datasource.username=root\nspring.datasource.password=taosdata\n\nspring.datasource.druid.initial-size=5\nspring.datasource.druid.min-idle=5\nspring.datasource.druid.max-active=5\n# max wait time for get connection, ms\nspring.datasource.druid.max-wait=60000\n\nspring.datasource.druid.validation-query=select SERVER_VERSION();\nspring.datasource.druid.validation-query-timeout=5000\nspring.datasource.druid.test-on-borrow=false\nspring.datasource.druid.test-on-return=false\nspring.datasource.druid.test-while-idle=true\nspring.datasource.druid.time-between-eviction-runs-millis=60000\nspring.datasource.druid.min-evictable-idle-time-millis=600000\nspring.datasource.druid.max-evictable-idle-time-millis=900000\n\n# mybatis\nmybatis.mapper-locations=classpath:mapper/*.xml\n\n# log \nlogging.level.com.taosdata.jdbc.springbootdemo.dao=debug\n```\n\n----------------------------------------\n\nTITLE: Installing Python3 and Python dependencies\nDESCRIPTION: This snippet demonstrates how to install Python3 and its dependencies required for running the tests using the apt package manager and pip. It ensures that Python3 and pip are available for installing further Python packages listed in the requirements.txt file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install python3\napt install python3-pip\n```\n\n----------------------------------------\n\nTITLE: Inconsistent Locale and Charset Configuration Example 2\nDESCRIPTION: Another example showing how configuration order affects the final encoding. In this case, the locale setting will override the charset, making UTF-8 the effective character encoding.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ncharset GBK\nlocale zh_CN.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Generating Jansson Build-Tree Configuration in CMake\nDESCRIPTION: Sets up include directories and generates the configuration file for using Jansson from the build tree (without installation).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(JANSSON__INCLUDE_DIRS\n    \"${CMAKE_CURRENT_SOURCE_DIR}/include\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/include\")\nset(JANSSON_INCLUDE_DIRS ${JANSSON__INCLUDE_DIRS} CACHE PATH \"Jansson include directories\")\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/janssonConfig.cmake.in\n               ${CMAKE_CURRENT_BINARY_DIR}/janssonConfig.cmake\n               @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Connection Settings\nDESCRIPTION: Sets up the JDBC driver path and connection URL for TDengine database access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/43-r-lang.md#2025-04-16_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n# Set the JDBC driver path (modify according to the actual location you saved)\ndriverPath <- \"/path/to/taos-jdbcdriver-X.X.X-dist.jar\"\n\n# Set the JDBC URL (modify according to your specific environment)\nurl <- \"jdbc:TAOS://localhost:6030/?user=root&password=taosdata\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Client Configuration in TDengine SQL\nDESCRIPTION: Dynamically modifies client configuration parameters without requiring restart.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nALTER LOCAL local_option\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Test Executable in CMake\nDESCRIPTION: Defines an executable named 'azure-test' with 'main.cpp' as its source file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/azure/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n  azure-test\n  main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Test Output for taosKeeper\nDESCRIPTION: Example of successful test execution output for taosKeeper, showing passed tests for various packages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nok      github.com/taosdata/taoskeeper/api      17.405s\nok      github.com/taosdata/taoskeeper/cmd      1.819s\nok      github.com/taosdata/taoskeeper/db       0.484s\nok      github.com/taosdata/taoskeeper/infrastructure/config    0.417s\nok      github.com/taosdata/taoskeeper/infrastructure/log       0.785s\nok      github.com/taosdata/taoskeeper/monitor  4.623s\nok      github.com/taosdata/taoskeeper/process  0.606s\nok      github.com/taosdata/taoskeeper/system   3.420s\nok      github.com/taosdata/taoskeeper/util     0.097s\nok      github.com/taosdata/taoskeeper/util/pool        0.146s\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine on Linux\nDESCRIPTION: Installs TDengine after successful build using make install with sudo privileges.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Running Lua Sample Script\nDESCRIPTION: Run this Lua script to test the functionality of the TDengine Lua connection. Ensure Lua is installed and accessible in your environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/lua/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nlua test.lua\n```\n\n----------------------------------------\n\nTITLE: Seeq Query Definition for Power Consumption Data\nDESCRIPTION: This JSON object defines a query for retrieving power consumption data from TDengine using Seeq. It specifies query properties and parameters critical for data analysis.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"QueryDefinitions\": [\n        {\n            \"Name\": \"PowerNum\",\n            \"Type\": \"SIGNAL\",\n            \"Sql\": \"SELECT  ts, num FROM meters\",\n            \"Enabled\": true,\n            \"TestMode\": false,\n            \"TestQueriesDuringSync\": true,\n            \"InProgressCapsulesEnabled\": false,\n            \"Variables\": null,\n            \"Properties\": [\n                {\n                    \"Name\": \"Name\",\n                    \"Value\": \"Num\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Interpolation Method\",\n                    \"Value\": \"linear\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Maximum Interpolation\",\n                    \"Value\": \"2day\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                }\n            ],\n            \"CapsuleProperties\": null\n        }\n    ],\n    \"Type\": \"GENERIC\",\n    \"Hostname\": null,\n    \"Port\": 0,\n    \"DatabaseName\": null,\n    \"Username\": \"root\",\n    \"Password\": \"taosdata\",\n    \"InitialSql\": null,\n    \"TimeZone\": null,\n    \"PrintRows\": false,\n    \"UseWindowsAuth\": false,\n    \"SqlFetchBatchSize\": 100000,\n    \"UseSSL\": false,\n    \"JdbcProperties\": null,\n    \"GenericDatabaseConfig\": {\n        \"DatabaseJdbcUrl\": \"jdbc:TAOS-RS://127.0.0.1:6041/power?user=root&password=taosdata\",\n        \"SqlDriverClassName\": \"com.taosdata.jdbc.rs.RestfulDriver\",\n        \"ResolutionInNanoseconds\": 1000,\n        \"ZonedColumnTypes\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: Meters\nDESCRIPTION: This class represents the data model for the 'meters' table, providing methods for serialization and deserialization of data. These methods are used when sending messages to and receiving messages from Kafka.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/Meters.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Metadata Operations in TDengine\nDESCRIPTION: Offers a range of operations on catalog and metadata records such as table and view removal, cache updates, and stats retrieval. Essential for both maintaining and querying database state.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n(void)catalogRemoveTableMeta\n(void)catalogRemoveViewMeta\n(void)metaCacheUpsert\n(void)metaGetStbStats\n```\n\n----------------------------------------\n\nTITLE: Running TDgpt Docker Container (Standard Version)\nDESCRIPTION: Command to start a Docker container with the standard TDgpt image, exposing necessary ports.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -p 6090:6090 -p 5000:5000 tdengine/tdengine-tdgpt:3.3.6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring taosX-Agent in TOML\nDESCRIPTION: Example TOML configuration file for taosX-Agent, including endpoint, token, compression, logging, and other settings. This snippet shows the default configuration with commented options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/05-taosx-agent.md#2025-04-16_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# taosX service endpoint\n#\n#endpoint = \"http://localhost:6055\"\n\n# !important!\n# Uncomment it and copy-paste the token generated in Explorer.\n#\n#token = \"\"\n\n# server instance id\n# \n# The instanceId of each instance is unique on the host\n# instanceId = 48\n\n# enable communication data compression between Agent and taosX\n#\n#compression = true\n\n# In-memory cache capacity\n#\n#in_memory_cache_capacity = 64\n\n[client_port_range]\n# Minimum boundary of listening port of agent, can not less than 49152\n#\n# min = 49152\n\n# Maximum boundary of listening port of agent, can not greater than 65535\n#\n# max = 65535\n\n# log configuration\n[log]\n# All log files are stored in this directory\n# \n#path = \"/var/log/taos\" # on linux/macOS\n#path = \"C:\\\\TDengine\\\\log\" # on windows\n\n# log filter level\n#\n#level = \"info\"\n\n# Compress archived log files or not\n# \n#compress = false\n\n# The number of log files retained by the current explorer server instance in the `path` directory\n# \n#rotationCount = 30\n\n# Rotate when the log file reaches this size\n# \n#rotationSize = \"1GB\"\n\n# Log downgrade when the remaining disk space reaches this size, only logging `ERROR` level logs\n# \n#reservedDiskSize = \"1GB\"\n\n# The number of days log files are retained\n#\n#keepDays = 30\n```\n\n----------------------------------------\n\nTITLE: REST Connection\nDESCRIPTION: This Java code snippet demonstrates how to establish a REST connection to a TDengine database.  It shows the structure for connecting and executing queries against the TDengine server through its REST API. The example focuses on the main execution function for a REST connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_java.mdx#2025-04-16_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/RESTConnectExample.java:main}}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Anomaly Detection with Custom Model\nDESCRIPTION: SQL statement demonstrating how to use a custom machine learning model for anomaly detection in TDgpt\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/03-ml/index.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _wstart, count(*) \nFROM foo anomaly_window(val, 'algo=sample_ad_model,model=sample-ad-autoencoder');\n```\n\n----------------------------------------\n\nTITLE: Configuring taoskeeper build for Windows in CMake\nDESCRIPTION: Sets up an ExternalProject for building taoskeeper on Windows. It configures the build environment, sets version information, and specifies build and install commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_WINDOWS)\n    MESSAGE(\"Building taoskeeper on Windows\")\n    INCLUDE(ExternalProject)\n    ExternalProject_Add(taoskeeper\n        PREFIX \"taoskeeper\"\n        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/keeper\n        BUILD_ALWAYS off\n        BUILD_IN_SOURCE 1\n        CONFIGURE_COMMAND cmake -E echo \"taoskeeper no need cmake to config\"\n        PATCH_COMMAND\n        COMMAND git clean -f -d\n        BUILD_COMMAND\n        COMMAND go build -a -ldflags \"-X 'github.com/taosdata/taoskeeper/version.Version=${taos_version}' -X 'github.com/taosdata/taoskeeper/version.Gitinfo=${taoskeeper_commit_sha1}' -X 'github.com/taosdata/taoskeeper/version.CommitID=${taoskeeper_commit_sha1}' -X 'github.com/taosdata/taoskeeper/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n        INSTALL_COMMAND\n        COMMAND cmake -E echo \"Comparessing taoskeeper.exe\"\n        COMMAND cmake -E time upx taoskeeper.exe\n        COMMAND cmake -E echo \"Copy taoskeeper.exe\"\n        COMMAND cmake -E copy taoskeeper.exe ${CMAKE_BINARY_DIR}/build/bin/taoskeeper.exe\n        COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E echo \"Copy taoskeeper.toml\"\n        COMMAND cmake -E copy ./config/taoskeeper.toml ${CMAKE_BINARY_DIR}/test/cfg/\n    )\n```\n\n----------------------------------------\n\nTITLE: Nginx SSL Configuration\nDESCRIPTION: This code snippet shows how to configure SSL in Nginx.  It specifies the path to the SSL certificate and private key, enabling HTTPS connections. This enhances security by encrypting the data transmitted between the client and the server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    server {\n        listen 443 ssl;\n\n        ssl_certificate /path/to/your/certificate.crt;\n        ssl_certificate_key /path/to/your/private.key;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Long Value Generation Example - C\nDESCRIPTION: Example showing how to create and manage Avro long values using generic implementation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_14\n\nLANGUAGE: c\nCODE:\n```\navro_schema_t  schema = avro_schema_long();\navro_value_iface_t  *iface = avro_generic_class_from_schema(schema);\n\navro_value_t  val;\navro_generic_value_new(iface, &val);\n\n/* Generate Avro longs from 0-499 */\nint  i;\nfor (i = 0; i < 500; i++) {\n    avro_value_reset(&val);\n    avro_value_set_long(&val, i);\n    /* do something with the value */\n}\n\navro_generic_value_free(&val);\navro_value_iface_decref(iface);\navro_schema_decref(schema);\n```\n\n----------------------------------------\n\nTITLE: Linux Dependencies Configuration\nDESCRIPTION: Configures and builds external dependencies (jansson, snappy, apache-avro) for Linux systems. Includes special handling for ARM 32-bit architecture and debug/release build types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(\n    deps-jansson\n    PREFIX ${CMAKE_CURRENT_BINARY_DIR}/jansson\n    SOURCE_DIR ${PROJECT_SOURCE_DIR}/deps/jansson\n    CONFIGURE_COMMAND cmake -DJANSSON_BUILD_DOCS=OFF -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/build/ -DCMAKE_INSTALL_LIBDIR=lib -S ${PROJECT_SOURCE_DIR}/deps/jansson\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output from TDengine Java High-Volume Write Test\nDESCRIPTION: A log sample showing the execution of a Java-based high-volume data writing program for TDengine. The log demonstrates the creation of a database, sub-tables, and the progressive write speeds achieved with 2 read threads, 10 write threads per read thread, 10,000 rows per batch, and 1,000,000 sub-tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n   ---------------$ java -jar highVolume.jar -r 2 -w 10 -b 10000 -c 100000 -s 1000000 -R 100\n   [INFO ] 2025-03-24 18:03:17.980 com.taos.example.highvolume.FastWriteExample main 309 main readThreadCount=2, writeThreadPerReadThread=10 batchSizeByRow=10000 cacheSizeByRow=100000, subTableNum=1000000, rowsPerSubTable=100\n   [INFO ] 2025-03-24 18:03:17.983 com.taos.example.highvolume.FastWriteExample main 312 main create database begin.\n   [INFO ] 2025-03-24 18:03:34.499 com.taos.example.highvolume.FastWriteExample main 315 main create database end.\n   [INFO ] 2025-03-24 18:03:34.500 com.taos.example.highvolume.FastWriteExample main 317 main create sub tables start.\n   [INFO ] 2025-03-24 18:03:34.502 com.taos.example.highvolume.FastWriteExample createSubTables 73 main create sub table task started.\n   [INFO ] 2025-03-24 18:03:55.777 com.taos.example.highvolume.FastWriteExample createSubTables 82 main create sub table task finished.\n   [INFO ] 2025-03-24 18:03:55.778 com.taos.example.highvolume.FastWriteExample main 319 main create sub tables end.\n   [INFO ] 2025-03-24 18:03:55.781 com.taos.example.highvolume.WorkTask run 41 FW-work-thread-2 started\n   [INFO ] 2025-03-24 18:03:55.781 com.taos.example.highvolume.WorkTask run 41 FW-work-thread-1 started\n   [INFO ] 2025-03-24 18:04:06.580 com.taos.example.highvolume.StatTask run 36 pool-1-thread-1 numberOfTable=1000000 count=12235906 speed=1223590\n   [INFO ] 2025-03-24 18:04:17.531 com.taos.example.highvolume.StatTask run 36 pool-1-thread-1 numberOfTable=1000000 count=31185614 speed=1894970\n   [INFO ] 2025-03-24 18:04:28.490 com.taos.example.highvolume.StatTask run 36 pool-1-thread-1 numberOfTable=1000000 count=51464904 speed=2027929\n   [INFO ] 2025-03-24 18:04:40.851 com.taos.example.highvolume.StatTask run 36 pool-1-thread-1 numberOfTable=1000000 count=71498113 speed=2003320\n   [INFO ] 2025-03-24 18:04:51.948 com.taos.example.highvolume.StatTask run 36 pool-1-thread-1 numberOfTable=1000000 count=91242103 speed=1974399\n```\n\n----------------------------------------\n\nTITLE: Interfacing TDengine with InfluxDB via HTTP\nDESCRIPTION: This snippet demonstrates how to write data to TDengine in an InfluxDB compatible format through HTTP. It requires HTTP clients and basic authentication. The `db`, `precision`, `u`, `p`, and `ttl` parameters specify the database, time precision, username, password, and lifespan of subtables, respectively. Notably, InfluxDB's token authentication is unsupported.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncurl --request POST http://127.0.0.1:6041/influxdb/v1/write?db=test --user \"root:taosdata\" --data-binary \"measurement,host=host1 field1=2i,field2=2.0 1577836800000000000\"\n```\n\n----------------------------------------\n\nTITLE: Running TDengine Consumer Demo as Standalone JAR\nDESCRIPTION: Java command to execute the compiled TDengine Consumer demo as a standalone JAR file with all dependencies included. This runs the application directly without requiring Maven.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/consumer-demo/readme.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\njava -jar target/ConsumerDemo-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Parameters\nDESCRIPTION: Configuration parameters for enabling and configuring S3 storage integration in taos.cfg file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/06-enterprise.md#2025-04-16_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\ns3EndPoint <your-endpoint>\ns3AccessKey <secret-id>:<secret-key>\ns3BucketName <your-s3-bucket>\ns3UploadDelaySec 10\ns3MigrateIntervalSec 600\ns3MigrateEnabled 1\ns3PageCacheSize 1\n```\n\n----------------------------------------\n\nTITLE: Building TDengine Consumer Demo JAR Package\nDESCRIPTION: Maven command to build a standalone JAR file with all dependencies for the TDengine Consumer demo. This creates an executable JAR file that can run independently of Maven.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/consumer-demo/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package assembly:single\n```\n\n----------------------------------------\n\nTITLE: TDengine Cluster Configuration in INI\nDESCRIPTION: Shows the configuration settings for connecting to a TDengine cluster in the analytics.ini file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_5\n\nLANGUAGE: INI\nCODE:\n```\n[taosd]\n# taosd hostname\nhost = 127.0.0.1\n\n# username\nuser = root\n\n# password\npassword = taosdata\n\n# tdengine configuration file\nconf = /etc/taos/taos.cfg\n\n[input_data]\n# database for testing forecasting algorithms\ndb_name = test\n\n# table with test data\ntable_name = passengers\n\n# columns with test data\ncolumn_name = val, _c0   \n```\n\n----------------------------------------\n\nTITLE: Setting Object Parameter with Type in JDBC PreparedStatement (Java)\nDESCRIPTION: Sets the value of a specified parameter using a given object and SQL type in a PreparedStatement. Takes parameter index, object value, and target SQL type as inputs. Throws SQLException if the statement is closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_80\n\nLANGUAGE: Java\nCODE:\n```\nvoid setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Setting TMQ Configuration Parameters in C\nDESCRIPTION: Function to set configuration items in a TMQ configuration object. It takes a configuration object, key name, and value as parameters. Returns an enumeration value indicating the result of the configuration setting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nenum ws_tmq_conf_res_t ws_tmq_conf_set(ws_tmq_conf_t *conf, const char *key, const char *value)\n```\n\n----------------------------------------\n\nTITLE: Building Lua Driver Library for OpenResty\nDESCRIPTION: This command builds the Lua driver library specifically for OpenResty, acknowledging compatibility differences between Lua5.3 and Lua5.1. Run this from the lua51 directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/lua/README.md#2025-04-16_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncd lua51\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Settings in Grafana\nDESCRIPTION: Configuration settings for enabling email notifications in Grafana's SMTP module. Includes server settings, authentication, and email addresses for sending alerts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n#################################### SMTP / Emailing ##########################\n[smtp]\nenabled = true\nhost = smtp.qq.com:465      #Email used\nuser = receiver@foxmail.com\npassword = ***********      #Use mail authorization code\nskip_verify = true\nfrom_address = sender@foxmail.com\n```\n\n----------------------------------------\n\nTITLE: Extracting TDengine Client Package on Linux\nDESCRIPTION: Command to extract the TDengine client package archive. VERSION should be replaced with the actual version number of the package being installed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_linux_install.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzvf TDengine-client-VERSION.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Sending Test Data to StatsD\nDESCRIPTION: This shell command sends a test metric to the StatsD server using the 'nc' (netcat) utility. This validates that StatsD is receiving data correctly, which can then be checked in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/06-statsd.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho \"foo:1|c\" | nc -u -w0 127.0.0.1 8125\n```\n\n----------------------------------------\n\nTITLE: Closing statement using Stmt object in af package\nDESCRIPTION: This function closes the prepared SQL statement, releasing associated resources. It is called on a Stmt object and returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) Close() error\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flag Definitions in CMake\nDESCRIPTION: This snippet defines conditional compilation flags for enabling S3 or COS support based on the TD_ENTERPRISE and respective build flags variables. This allows for flexible build configurations depending on user requirements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_ENTERPRISE)\n  if(${BUILD_WITH_S3})\n    add_definitions(-DUSE_S3)\n  elseif(${BUILD_WITH_COS})\n    add_definitions(-DUSE_COS)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating scores Table in TDengine\nDESCRIPTION: Provides a shell command to create a TDengine table named 'scores' containing a timestamp and a variable-length string column. This serves as input for the 'extract_avg' aggregate function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ncreate table scores(ts timestamp, varStr varchar(128));\n```\n\n----------------------------------------\n\nTITLE: Partitioning by Table Name with Interval\nDESCRIPTION: Example showing how to partition data by table name and calculate average voltage per meter every 10 minutes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart, tbname, avg(voltage) from meters partition by tbname interval(10m)\n```\n\n----------------------------------------\n\nTITLE: Creating an Anode in TDengine CLI\nDESCRIPTION: SQL command to create and register an anode with a specified node URL in the TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ANODE {node_url}\n```\n\n----------------------------------------\n\nTITLE: Restarting Collectd Service in Shell\nDESCRIPTION: This shell command restarts the collectd service to apply the new configuration changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_collectd.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl restart collectd\n```\n\n----------------------------------------\n\nTITLE: Installing RJDBC Package in R\nDESCRIPTION: Command to install the RJDBC package from CRAN repository required for TDengine connectivity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/43-r-lang.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"RJDBC\", repos='http://cran.us.r-project.org')\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building RocksDB Test Executable with CMake\nDESCRIPTION: This CMake snippet configures a test executable for RocksDB. It creates an executable target named 'rocksdbTest', adds the main.c source file to it, and links it with the RocksDB library. The message command displays whether dependency tests are being built.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/rocksdb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(\"contrib test/rocksdb:\" ${BUILD_DEPENDENCY_TESTS})\n\nadd_executable(rocksdbTest \"\")\ntarget_sources(rocksdbTest\n    PRIVATE\n    \"${CMAKE_CURRENT_SOURCE_DIR}/main.c\"\n)\ntarget_link_libraries(rocksdbTest rocksdb)\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Kafka Console Consumer in Text Format\nDESCRIPTION: This snippet shows the output format of the kafka-console-consumer command, which displays data in InfluxDB line protocol format. It includes metrics like current, voltage, and phase for different locations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n......\nmeters,location=\"California.SanFrancisco\",groupid=2i32 current=10.3f32,voltage=219i32,phase=0.31f32 1538548685000000000\nmeters,location=\"California.SanFrancisco\",groupid=2i32 current=12.6f32,voltage=218i32,phase=0.33f32 1538548695000000000\n......\n```\n\n----------------------------------------\n\nTITLE: Creating a Database and Table in TDengine using SQL\nDESCRIPTION: These SQL statements create a database named `test` and a table named `t` within that database. The table `t` has columns for timestamp (`ts`), and three integer values (`v1`, `v2`, `v3`).  These are used for testing UDFs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\ncreate database test;\ncreate table t(ts timestamp, v1 int, v2 int, v3 int);\ninsert into t values('2023-05-01 12:13:14', 1, 2, 3);\ninsert into t values('2023-05-03 08:09:10', 2, 3, 4);\ninsert into t values('2023-05-10 07:06:05', 3, 4, 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring LevelDB for TDengine\nDESCRIPTION: Sets up LevelDB integration when BUILD_WITH_LEVELDB option is enabled. It disables LevelDB tests and configures the include directories to make LevelDB headers accessible.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_LEVELDB})\n    option(LEVELDB_BUILD_TESTS \"\" OFF)\n    add_subdirectory(leveldb EXCLUDE_FROM_ALL)\n    target_include_directories(\n        leveldb\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/leveldb/include>\n    )\nendif(${BUILD_WITH_LEVELDB})\n```\n\n----------------------------------------\n\nTITLE: Configuring TaosAdapter TOML Settings for StatsD\nDESCRIPTION: TOML configuration settings for enabling StatsD data collection in TaosAdapter. Includes database settings, authentication, worker configuration, and protocol settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_statsd.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[statsd]\nenable = true\nport = 6044\ndb = \"statsd\"\nuser = \"root\"\npassword = \"taosdata\"\nworker = 10\ngatherInterval = \"5s\"\nprotocol = \"udp\"\nmaxTCPConnections = 250\ntcpKeepAlive = false\nallowPendingMessages = 50000\ndeleteCounters = true\ndeleteGauges = true\ndeleteSets = true\ndeleteTimings = true\n```\n\n----------------------------------------\n\nTITLE: Checking Python UDF System Path\nDESCRIPTION: Shell command to find the current Python system path configuration in the UDF log file. This helps identify where the UDF is looking for modules.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ngrep 'sys path' taospyudf.log  | tail -1\n```\n\n----------------------------------------\n\nTITLE: Defining Color Codes for Non-Windows Systems\nDESCRIPTION: Sets up color codes for console output on non-Windows systems using ASCII escape sequences.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32)\n    string(ASCII 27 Esc)\n    set(ColourReset \"${Esc}[m\")\n    set(ColourBold  \"${Esc}[1m\")\n    set(Red         \"${Esc}[31m\")\n    set(Green       \"${Esc}[32m\")\n    set(Yellow      \"${Esc}[33m\")\n    set(Blue        \"${Esc}[34m\")\n    set(Magenta     \"${Esc}[35m\")\n    set(Cyan        \"${Esc}[36m\")\n    set(White       \"${Esc}[37m\")\n    set(BoldRed     \"${Esc}[1;31m\")\n    set(BoldGreen   \"${Esc}[1;32m\")\n    set(BoldYellow  \"${Esc}[1;33m\")\n    set(BoldBlue    \"${Esc}[1;34m\")\n    set(BoldMagenta \"${Esc}[1;35m\")\n    set(BoldCyan    \"${Esc}[1;36m\")\n    set(BoldWhite   \"${Esc}[1;37m\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Query Timeout Retrieval in TDengine JDBC\nDESCRIPTION: Method to get the current query timeout setting for the Statement object. Returns the maximum time in seconds that a query execution can take before being terminated.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nint getQueryTimeout() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Test Data for Kafka Producer\nDESCRIPTION: This is an example of test data in InfluxDB Line Protocol format, which will be sent to the Kafka topic `meters`. This data represents meter readings with location, group ID, current, voltage, phase, and timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nmeters,location=California.LosAngeles,groupid=2 current=11.8,voltage=221,phase=0.28 1648432611249000000\nmeters,location=California.LosAngeles,groupid=2 current=13.4,voltage=223,phase=0.29 1648432611250000000\nmeters,location=California.LosAngeles,groupid=3 current=10.8,voltage=223,phase=0.29 1648432611249000000\nmeters,location=California.LosAngeles,groupid=3 current=11.3,voltage=221,phase=0.35 1648432611250000000\n```\n\n----------------------------------------\n\nTITLE: Closing TDengine Connection in C\nDESCRIPTION: Close the database connection and release resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_28\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_close(TAOS *taos)\n```\n\n----------------------------------------\n\nTITLE: Building Release Package\nDESCRIPTION: Command to build and package TDgpt into a tarball release file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/tdgpt/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd script && ./release.sh\n```\n\n----------------------------------------\n\nTITLE: Producing Data to Kafka Topic\nDESCRIPTION: This command uses `kafka-console-producer.sh` to send the test data from `test-data.txt` to the Kafka topic `meters`. It specifies the Kafka broker address as `localhost:9092`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncat test-data.txt | kafka-console-producer.sh --broker-list localhost:9092 --topic meters\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for taos-tools\nDESCRIPTION: Sets up the CMake project for taos-tools, specifying the minimum required CMake version, project name, language, and version.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.0)\n\nPROJECT(taos-tools\n        LANGUAGES C\n        VERSION 0.1.0\n        )\n```\n\n----------------------------------------\n\nTITLE: Plugin API Function - Get Parser Version\nDESCRIPTION: Function to retrieve the plugin version information for troubleshooting purposes. Must be implemented by the parser plugin dynamic library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nconst char* parser_version()\n```\n\n----------------------------------------\n\nTITLE: Installing Maven on Linux for TDengine Consumer Demo\nDESCRIPTION: Command to install Maven package manager on Debian-based Linux distributions using apt-get. Maven is required to compile and run the TDengine Consumer demo project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/consumer-demo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install maven\n```\n\n----------------------------------------\n\nTITLE: Get Catalog Name using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the database name where a specified column is located. The column number starts from 1.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_72\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `String getCatalogName(int column) throws SQLException`\n  - **Interface Description**: Gets the database name where a specified column is located.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The database name where the column is located.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Database Catalog in Java\nDESCRIPTION: This method retrieves the default database catalog (or schema) for the current connection. It throws an `SQLException` if the operation fails. The catalog is a String representing the database name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n\"`String getCatalog() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Weighted Sum UDF with Null Values\nDESCRIPTION: SQL statements to insert a record with a null value and test the weighted sum UDF. Shows how the UDF handles null values by returning null for the entire calculation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\ntaos> insert into t values('2023-05-25 09:09:15', 6, null, 8);\nInsert OK, 1 row(s) affected (0.003675s)\n\ntaos> select ts, v1, v2, v3,  nsum(v1, v2, v3) from t;\n           ts            |     v1      |     v2      |     v3      |     nsum(v1, v2, v3)      |\n================================================================================================\n 2023-05-01 12:13:14.000 |           1 |           2 |           3 |              14.000000000 |\n 2023-05-03 08:09:10.000 |           2 |           3 |           4 |              20.000000000 |\n 2023-05-10 07:06:05.000 |           3 |           4 |           5 |              26.000000000 |\n 2023-05-25 09:09:15.000 |           6 |        NULL |           8 |                      NULL |\nQuery OK, 4 row(s) in set (0.010653s)\n```\n\n----------------------------------------\n\nTITLE: Modifying TaosAdapter Log Level Using cURL\nDESCRIPTION: Example of using cURL to dynamically modify the TaosAdapter log level to debug via HTTP PUT request to the /config endpoint. Requires authentication with root credentials.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location --request PUT 'http://127.0.0.1:6041/config' \\\n-u root:taosdata \\\n--data '{\"log.level\": \"debug\"}'\n```\n\n----------------------------------------\n\nTITLE: Binding Parameters in Batch in TDengine (C)\nDESCRIPTION: Passes the data to be bound in multiple columns, ensuring the order and number of data columns match the `VALUES` parameters in the SQL statement. It takes a pointer to a `WS_MULTI_BIND` structure containing the parameter list and the number of elements in the array. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_bind_param_batch(WS_STMT *stmt, const WS_MULTI_BIND *bind, uint32_t len)\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Legacy Tests in TDengine\nDESCRIPTION: Commands to execute individual legacy tests or all legacy tests in TDengine. Legacy tests use the TSIM framework developed in C++.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run single legacy test\ncd tests/script\n./test.sh -f tsim/db/basic1.sim\n\n# Run all legacy tests\ncd tests\n./run_all_ci_cases.sh -t legacy # all legacy cases\n```\n\n----------------------------------------\n\nTITLE: Getting Time Zone in TDengine\nDESCRIPTION: SQL command to retrieve current time zone setting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TIMEZONE();\n```\n\n----------------------------------------\n\nTITLE: Displaying QNODEs Information in TDengine SQL\nDESCRIPTION: Shows information about query nodes (QNODEs) in the current system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSHOW QNODES;\n```\n\n----------------------------------------\n\nTITLE: Defining taosd_dnodes_info Table Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the taosd_dnodes_info table, which records detailed dnode information. It includes various system metrics, resource usage statistics, and node configuration details for each dnode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n| field             | type      | is\\_tag | comment                                                                                           |\n| :---------------- | :-------- | :------ | :------------------------------------------------------------------------------------------------ |\n| \\_ts              | TIMESTAMP |         | timestamp                                                                                         |\n| uptime            | DOUBLE    |         | dnode uptime, unit: seconds                                                                       |\n| cpu\\_engine       | DOUBLE    |         | taosd CPU usage, read from `/proc/<taosd_pid>/stat`                                               |\n| cpu\\_system       | DOUBLE    |         | Server CPU usage, read from `/proc/stat`                                                          |\n| cpu\\_cores        | DOUBLE    |         | Number of server CPU cores                                                                        |\n| mem\\_engine       | DOUBLE    |         | taosd memory usage, read from `/proc/<taosd_pid>/status`                                          |\n| mem\\_free         | DOUBLE    |         | Server free memory, unit: KB                                                                      |\n| mem\\_total        | DOUBLE    |         | Total server memory, unit: KB                                                                     |\n| disk\\_used        | DOUBLE    |         | Disk usage of data dir mount, unit: bytes                                                         |\n| disk\\_total       | DOUBLE    |         | Total disk capacity of data dir mount, unit: bytes                                                |\n| system\\_net\\_in   | DOUBLE    |         | Network throughput, received bytes read from `/proc/net/dev`. Unit: byte/s                        |\n| system\\_net\\_out  | DOUBLE    |         | Network throughput, transmit bytes read from `/proc/net/dev`. Unit: byte/s                        |\n| io\\_read          | DOUBLE    |         | IO throughput, speed calculated from `rchar` read from `/proc/<taosd_pid>/io` since last value. Unit: byte/s |\n| io\\_write         | DOUBLE    |         | IO throughput, speed calculated from `wchar` read from `/proc/<taosd_pid>/io` since last value. Unit: byte/s |\n| io\\_read\\_disk    | DOUBLE    |         | Disk IO throughput, read_bytes read from `/proc/<taosd_pid>/io`. Unit: byte/s                     |\n| io\\_write\\_disk   | DOUBLE    |         | Disk IO throughput, write_bytes read from `/proc/<taosd_pid>/io`. Unit: byte/s                    |\n| vnodes\\_num       | DOUBLE    |         | Number of vnodes on dnode                                                                         |\n| masters           | DOUBLE    |         | Number of master nodes on dnode                                                                   |\n| has\\_mnode        | DOUBLE    |         | Whether dnode contains mnode, range: contains=1, does not contain=0                               |\n| has\\_qnode        | DOUBLE    |         | Whether dnode contains qnode, range: contains=1, does not contain=0                               |\n| has\\_snode        | DOUBLE    |         | Whether dnode contains snode, range: contains=1, does not contain=0                               |\n| has\\_bnode        | DOUBLE    |         | Whether dnode contains bnode, range: contains=1, does not contain=0                               |\n| error\\_log\\_count | DOUBLE    |         | Total number of error logs                                                                        |\n| info\\_log\\_count  | DOUBLE    |         | Total number of info logs                                                                         |\n| debug\\_log\\_count | DOUBLE    |         | Total number of debug logs                                                                        |\n| trace\\_log\\_count | DOUBLE    |         | Total number of trace logs                                                                        |\n| dnode\\_id         | VARCHAR   | tag     | dnode id                                                                                          |\n| dnode\\_ep         | VARCHAR   | tag     | dnode endpoint                                                                                    |\n| cluster\\_id       | VARCHAR   | tag     | cluster id                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: License and Grant Error Codes\nDESCRIPTION: Error codes related to licensing and resource limitations in TDengine, covering various system constraints and usage limits\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/09-error-code.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Error Code | Description                         | Possible Error Scenarios or Reasons                    | Recommended Actions for Users                                |\n| ---------- | ----------------------------------- | ------------------------------------------------------ | ------------------------------------------------------------ |\n| 0x80000800 | License expired                     | License period expired                                 | Check license information, contact delivery for updated license code |\n```\n\n----------------------------------------\n\nTITLE: SQL FORECAST Function Example\nDESCRIPTION: Demonstrates how to use the `FORECAST` function with the ARIMA algorithm. The first example uses default settings, while the second example customizes the algorithm parameters to include `alpha`, `period`, and disables white noise checking.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/index.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n--- 使用 arima 算法进行预测，预测结果是 10 条记录（默认值），数据进行白噪声检查，默认置信区间 95%. \nSELECT  _flow, _fhigh, _frowts, FORECAST(i32, \"algo=arima\")\nFROM foo;\n\n--- 使用 arima 算法进行预测，输入数据的是周期数据，每 10 个采样点是一个周期，返回置信区间是95%的上下边界，同时忽略白噪声检查\nSELECT  _flow, _fhigh, _frowts, FORECAST(i32, \"algo=arima,alpha=95,period=10,wncheck=0\")\nFROM foo;\n```\n\n----------------------------------------\n\nTITLE: Querying Database Disk Usage Information in TDengine 3.3.5.0+\nDESCRIPTION: SQL command to view the overall disk usage and compression ratio for a specific database in TDengine version 3.3.5.0 and above.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nSHOW db_name.disk_info;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Column Model for PI to TDengine Migration\nDESCRIPTION: Example CSV configuration file for multi-column model that maps PI AF elements to TDengine tables. It includes two super table configurations: 'metertemplate' for MeterTemplate elements and 'farm' for Farm template elements, with column mappings for timestamps, metrics and tags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/03-pi.md#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nSuperTable,metertemplate\nSubTable,${element_name}_${element_id}\nTemplate,MeterTemplate\nFilter,\nts,KEY,TIMESTAMP,$ts\nvoltage,COLUMN,DOUBLE,$voltage\nvoltage_status,COLUMN,INT,$voltage_status\ncurrent,COLUMN,DOUBLE,$current\ncurrent_status,COLUMN,INT,$current_status\nelement_id,TAG,VARCHAR(100),$element_id\nelement_name,TAG,VARCHAR(100),$element_name\npath,TAG,VARCHAR(100),$path\ncategories,TAG,VARCHAR(100),$categories\n\nSuperTable,farm\nSubTable,${element_name}_${element_id}\nTemplate,Farm\nFilter,\nts,KEY,TIMESTAMP,$ts\nwind_speed,COLUMN,FLOAT,$wind_speed\nwind_speed_status,COLUMN,INT,$wind_speed_status\npower_production,COLUMN,FLOAT,$power_production\npower_production_status,COLUMN,INT,$power_production_status\nlost_power,COLUMN,FLOAT,$lost_power\nlost_power_status,COLUMN,INT,$lost_power_status\nfarm_lifetime_production__weekly_,COLUMN,FLOAT,$farm_lifetime_production__weekly_\nfarm_lifetime_production__weekly__status,COLUMN,INT,$farm_lifetime_production__weekly__status\nfarm_lifetime_production__hourly_,COLUMN,FLOAT,$farm_lifetime_production__hourly_\nfarm_lifetime_production__hourly__status,COLUMN,INT,$farm_lifetime_production__hourly__status\nelement_id,TAG,VARCHAR(100),$element_id\nelement_name,TAG,VARCHAR(100),$element_name\npath,TAG,VARCHAR(100),$path\ncategories,TAG,VARCHAR(100),$categories\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Structure\nDESCRIPTION: Basic markdown structure for the changelog file showing the title, format reference links, and footnote.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Conventional Changelog](https://www.conventionalcommits.org/en/v1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Footnote\n\nThis changelog is automatically generated.\n```\n\n----------------------------------------\n\nTITLE: Running TDengine server without service on Linux\nDESCRIPTION: Starts a TDengine server in the current shell after building, specifying a configuration file directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./build/bin/taosd -c test/cfg\n```\n\n----------------------------------------\n\nTITLE: Example Supertable Query Configuration in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration example for querying supertables using taosBenchmark. This snippet is a placeholder for the actual queryStb.json file content.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{{#include /TDengine/tools/taos-tools/example/queryStb.json}}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories and Version Information\nDESCRIPTION: Configures output directories for binaries and libraries, and sets version information for Jansson.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)\nset(JANSSON_TEMP_DIR ${CMAKE_CURRENT_BINARY_DIR}/tmp)\n\nset(JANSSON_DISPLAY_VERSION \"2.14\")\n\nset(JANSSON_VERSION \"4.14.0\")\nset(JANSSON_SOVERSION 4)\n```\n\n----------------------------------------\n\nTITLE: Successful UDF Execution\nDESCRIPTION: TDengine CLI output showing successful execution of the UDF after environment issues are fixed. The function correctly calculates ln(n^2 + 1) for each input value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\ntaos> select myfun(v1) from t;\n         myfun(v1)         |\n============================\n               0.693147181 |\n               1.609437912 |\n               2.302585093 |\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS in Nginx for taosExplorer\nDESCRIPTION: This Nginx configuration snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) to allow access to the taosExplorer service from different domains.  It sets the necessary headers to handle OPTIONS, POST, and GET requests, enabling cross-origin communication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/07-explorer.md#2025-04-16_snippet_2\n\nLANGUAGE: Nginx\nCODE:\n```\nhttp {\n  server {\n        listen 6060;\n        location ~* {\n            proxy_pass http://explorer;\n\n            if ($request_method = 'OPTIONS') {\n                add_header 'Access-Control-Allow-Origin' '*';\n\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n\n                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n\n                add_header 'Access-Control-Max-Age' 86400;\n                add_header 'Content-Type' 'text/plain charset=UTF-8';\n                add_header 'Content-Length' 0;\n                return 204; break;\n            }\n\n            if ($request_method = 'POST') {\n                add_header 'Access-Control-Allow-Origin' '*';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n            }\n            if ($request_method = 'GET') {\n                add_header 'Access-Control-Allow-Origin' '*';\n                add_header 'Access-Control-Allow-Credentials' 'true';\n                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';\n            }\n\n            proxy_set_header Host      $host:$server_port;\n            proxy_set_header X-Real-IP $remote_addr;\n\n            #proxy_http_version 1.1;\n            proxy_read_timeout 60s;\n            proxy_next_upstream error  http_502 http_500  non_idempotent;\n        }\n    }\n    upstream explorer{\n        ip_hash;\n        server 192.168.1.65:6060 ;\n        server 192.168.1.68:6060 ;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Active Status Output for TDengine Service\nDESCRIPTION: Example output when the TDengine service is running correctly. This line appears in the systemctl status output when taosd is active.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nActive: active (running)\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Offset in Node.js\nDESCRIPTION: This Node.js snippet demonstrates seeking to a specific offset in a TMQ consumer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n    tmq.getTopicAssignment((err, topicAssignment) => {\n        if (err) {\n            console.error('getTopicAssignment failed:', err);\n            return;\n        }\n\n        if (topicAssignment) {\n            const { topic, vgroup_id, current, begin, end } = topicAssignment;\n            console.log('topic:', topic, 'vgroup_id:', vgroup_id, 'current:', current, 'begin:', begin, 'end:', end);\n            tmq.offsetSeek(topic, vgroup_id, begin, (err) => {\n                if (err) {\n                    console.error('offsetSeek failed:', err);\n                } else {\n                    console.log('offsetSeek succeeded');\n                }\n            });\n        } else {\n            console.log('No topic assignment found.');\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Leader Processing Strict Consistency Write Request in TDengine (PlantUML)\nDESCRIPTION: Sequence diagram illustrating how a leader node processes a strict consistency write request in TDengine, including request handling, replication, and synchronization.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/scratch.md#2025-04-16_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml leader_process_stict_consistency\nbox \"dnode1\"\n    participant CRPC as crpc\n    participant VNODE as vnode\n    participant SYNC as sync\nend box\n\n-> crpc: create table/submit req\n\ngroup #pink \"In CRPC threads\"\n    crpc -> vnode:vnodeProcessReq()\n    note right\n        A callback function\n        run by CRPC thread\n        to put the request\n        to a vnode queue\n    end note\nend\n\ngroup #lightblue \"In VNODE worker threads\"\n    vnode -> vnode: vnodeProcessReqs()\n    note right\n        VNODE process requests\n        accumulated in a \n        vnode write queue and\n        process the batch reqs\n        as a whole\n    end note\n\n    vnode -> sync: syncProcessReqs()\n\n    sync -> : replication req1\n    sync -> : replication req2\nend\n\ngroup #red \"SYNC threads\"\n    sync <- : replication rsp1\n    sync <- : replication rsp2\n    sync -> vnode: notify apply\n    sync -> : apply rsp1\n    sync -> : apply rsp2\nend\n\ngroup #lightblue \"In VNODE worker threads\"\n    vnode -> vnode: vnodeApplyReqs()\n    vnode -> crpc:\nend\n\n<- crpc: create table/submit rsp\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Anode and uWSGI\nDESCRIPTION: Configuration file (taosanode.ini) for setting up the anode and uWSGI driver, including service address, log files, and model storage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[uwsgi]\n\n# Anode RESTful service ip:port\nhttp = 127.0.0.1:6090\n\n# base directory for Anode python files， do NOT modified this\nchdir = /usr/local/taos/taosanode/lib\n\n# initialize Anode python file\nwsgi-file = /usr/local/taos/taosanode/lib/taos/app.py\n\n# pid file\npidfile = /usr/local/taos/taosanode/taosanode.pid\n\n# conflict with systemctl, so do NOT uncomment this\n# daemonize = /var/log/taos/taosanode/taosanode.log\n\n# uWSGI log files\nlogto = /var/log/taos/taosanode/taosanode.log\n\n# uWSGI monitor port\nstats = 127.0.0.1:8387\n\n# python virtual environment directory, used by Anode\nvirtualenv = /usr/local/taos/taosanode/venv/\n\n[taosanode]\n# default taosanode log file\napp-log = /var/log/taos/taosanode/taosanode.app.log\n\n# model storage directory\nmodel-dir = /usr/local/taos/taosanode/model/\n\n# default log level\nlog-level = INFO\n```\n\n----------------------------------------\n\nTITLE: Getting Stmt object from Connector in af package (native connections)\nDESCRIPTION: This function returns a Stmt object associated with the provided Connector, allowing for further operations on the connection. It requires a Connector object to be initialized and available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n\"func (conn *Connector) Stmt() *Stmt\"\n```\n\n----------------------------------------\n\nTITLE: Get Column Type using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the SQL type of a specified column. The column number starts from 1. The return value is from java.sql.Types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_73\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `int getColumnType(int column) throws SQLException`\n  - **Interface Description**: Gets the SQL type of a specified column.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The SQL type, from `java.sql.Types`.\n```\n\n----------------------------------------\n\nTITLE: Creating runUdf Executable with Dependencies\nDESCRIPTION: Defines the runUdf executable target and links it with required libraries including libuv, OS utilities, and function libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(runUdf runUdf.c)\ntarget_link_libraries(\n    runUdf\n    PUBLIC uv_a\n    PRIVATE os util common nodes function\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling the Demo Code\nDESCRIPTION: This snippet illustrates the command for compiling the TDengine JDBC demo code while skipping tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/JDBCDemo/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -Dmaven.test.skip=true\n```\n\n----------------------------------------\n\nTITLE: Running jdbcDemo Using Maven Plugin\nDESCRIPTION: This snippet demonstrates how to run the jdbcDemo class using Maven, including a command to pass custom arguments like the host name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/JDBCDemo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean compile exec:java -Dexec.mainClass=\"com.taosdata.example.JdbcDemo\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean compile exec:java -Dexec.mainClass=\"com.taosdata.example.JdbcDemo\" -Dexec.args=\"-host [HOSTNAME]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on CentOS 7/RHEL\nDESCRIPTION: Command to install required system packages and development libraries on CentOS 7 or RHEL systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y zlib-devel zlib-static xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libatomic-static libstdc++-static openssl-devel gawk\n```\n\n----------------------------------------\n\nTITLE: Building TaosTools from Source\nDESCRIPTION: Commands to clone, build and install TaosTools from source code\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/taosdata/taos-tools\ncd taos-tools\ngit submodule update --init --recursive\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n----------------------------------------\n\nTITLE: Getting Day of Week with WEEKDAY() in TDengine SQL\nDESCRIPTION: Returns the weekday index (0-6) for a given date, where 0 represents Monday and 6 represents Sunday. Accepts timestamp or date string input and returns a BIGINT value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_39\n\nLANGUAGE: sql\nCODE:\n```\nWEEKDAY(expr)\n```\n\n----------------------------------------\n\nTITLE: Checking Parameter Signedness in JDBC ParameterMetaData (Java)\nDESCRIPTION: Determines whether a specified parameter is a signed number. Takes the parameter index as input and returns a boolean. Throws SQLException if an error occurs during the determination process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_85\n\nLANGUAGE: Java\nCODE:\n```\nboolean isSigned(int param) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Building Node Utility Library with CMake in TDengine\nDESCRIPTION: This CMake configuration defines the node_util static library by collecting source files from the src directory, setting include paths, and linking with required dependencies like cjson, mnode, vnode, qnode, and other TDengine components.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/node_util/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src NODE_UTIL)\nadd_library(node_util STATIC ${NODE_UTIL})\ntarget_include_directories(\n    node_util\n    PUBLIC \"${TD_SOURCE_DIR}/include/dnode/mgmt\"\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n    node_util cjson mnode vnode qnode snode wal sync ${TAOS_NATIVE_LIB_STATIC} tfs monitor monitorfw\n)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing and Closing TMQ Connection in C\nDESCRIPTION: This C snippet demonstrates unsubscribing from all topics and closing the TMQ connection, releasing allocated resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nint unsubscribe_and_close(tmq_t* tmq) {\n  if (ws_tmq_unsubscribe(tmq) != 0) {\n    fprintf(stderr, \"failed to unsubscribe: %s\\n\", tmq_err2str(tmq_errno));\n    return -1;\n  }\n\n  if (ws_tmq_close(tmq) != 0) {\n    fprintf(stderr, \"failed to close tmq: %s\\n\", tmq_err2str(tmq_errno));\n    return -1;\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using TAIL Function in SQL\nDESCRIPTION: Returns k consecutive records after skipping the last offset_rows records. Similar to ORDER BY ts DESC LIMIT k OFFSET offset_val.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_61\n\nLANGUAGE: sql\nCODE:\n```\nTAIL(expr, k [, offset_rows])\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for mgmt_snode\nDESCRIPTION: This section configures the include directories for the mgmt_snode target, making the headers located in the 'inc' directory available during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_snode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    mgmt_snode\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running TDengine Consumer Demo with Maven\nDESCRIPTION: Maven command to clean, compile and execute the TDengine Consumer demo application. This command runs the main class 'com.taosdata.ConsumerDemo' directly through Maven's exec plugin.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/consumer-demo/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean compile exec:java -Dexec.mainClass=\"com.taosdata.ConsumerDemo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Subdirectories in TDengine with CMake\nDESCRIPTION: Conditionally enables testing and adds test subdirectories when BUILD_TEST is set to true. The configuration includes test directories for qnode, snode, vnode, and sut components, while mnode tests are commented out and not included in the build.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST})\n    enable_testing()\n    add_subdirectory(qnode)\n    add_subdirectory(snode)\n    #add_subdirectory(mnode)\n    add_subdirectory(vnode)\n    add_subdirectory(sut)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Using BINARY Type with Escaped Parentheses in Bash\nDESCRIPTION: Shows how to properly escape parentheses when specifying BINARY type with length in bash shell environments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark -A INT,DOUBLE,NCHAR,BINARY\\(16\\)\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in Rust\nDESCRIPTION: This Rust snippet shows how to manually commit consumer offsets in TMQ, providing control over when messages are marked as processed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\nasync fn consumer_commit_manually() -> Result<(), Error> {\n    let mut consumer = Consumer::new(vec![\"topic\"],\n    Options::default().group_id(\"test\")\n    .enable_auto_commit(false).client_id(\"cid\")).await?;\n    while let Some(msg) = consumer.next().await {\n        let msg = msg?;\n        let _value: Record = serde_json::from_slice(&msg.payload()).unwrap();\n        msg.commit().await?;\n    }\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing Dependency Download and Build Configuration in CMake\nDESCRIPTION: Configures the final CMakeLists.txt for downloading dependencies, executes the download process, and sets up the build environment for TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Force specify CC=cc on MacOS. Because the default CC setting in the generated Makefile has issues finding standard library headers\nIF(${TD_DARWIN})\n    SET(CONTRIB_CONFIG_ENV \"CC=cc\")\nENDIF()\n\n# download dependencies\nconfigure_file(${CONTRIB_TMP_FILE} \"${TD_CONTRIB_DIR}/deps-download/CMakeLists.txt\")\nexecute_process(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n    WORKING_DIRECTORY \"${TD_CONTRIB_DIR}/deps-download\"\n    RESULT_VARIABLE result)\nIF(NOT result EQUAL \"0\")\n    message(FATAL_ERROR \"CMake step for dowloading dependencies failed: ${result}\")\nENDIF()\n\nexecute_process(COMMAND \"${CMAKE_COMMAND}\" --build .\n    WORKING_DIRECTORY \"${TD_CONTRIB_DIR}/deps-download\"\n    RESULT_VARIABLE result)\nIF(NOT result EQUAL \"0\")\n    message(FATAL_ERROR \"CMake step for building dependencies failed: ${result}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Anode Configuration in INI Format\nDESCRIPTION: The provided snippet shows a sample configuration file in INI format for the Anode service, including uWSGI settings. The section details how to set parameters for Anode RESTful service, logging, and virtual environment paths, crucial for proper service operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/03-management.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[uwsgi]\n\n# Anode RESTful service ip:port\nhttp = 127.0.0.1:6090\n\n# base directory for Anode python files， do NOT modified this\nchdir = /usr/local/taos/taosanode/lib\n\n# initialize Anode python file\nwsgi-file = /usr/local/taos/taosanode/lib/taos/app.py\n\n# pid file\npidfile = /usr/local/taos/taosanode/taosanode.pid\n\n# conflict with systemctl, so do NOT uncomment this\n# daemonize = /var/log/taos/taosanode/taosanode.log\n\n# uWSGI log files\nlogto = /var/log/taos/taosanode/taosanode.log\n\n# uWSGI monitor port\nstats = 127.0.0.1:8387\n\n# python virtual environment directory, used by Anode\nvirtualenv = /usr/local/taos/taosanode/venv/\n\n[taosanode]\n# default taosanode log file\napp-log = /var/log/taos/taosanode/taosanode.app.log\n\n# model storage directory\nmodel-dir = /usr/local/taos/taosanode/model/\n\n# default log level\nlog-level = INFO\n```\n\n----------------------------------------\n\nTITLE: ZLIB Function Declarations for Win16/Win32\nDESCRIPTION: Declares ZLIB functions for both 16-bit and 32-bit Windows environments. Includes declarations for compress, uncompress, gzopen, gzread, gzwrite, and gzclose functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/old/visual-basic.txt#2025-04-16_snippet_0\n\nLANGUAGE: visual basic\nCODE:\n```\n#If Win16 Then   'Use Win16 calls.\nDeclare Function compress Lib \"ZLIB.DLL\" (ByVal compr As String, comprLen As Any, ByVal buf As String, ByVal buflen As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB.DLL\" (ByVal uncompr As String, uncomprLen As Any, ByVal compr As String, ByVal lcompr As Long) As Integer\nDeclare Function gzopen Lib \"ZLIB.DLL\" (ByVal filePath As String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB.DLL\" (ByVal file As Long, ByVal uncompr As String, ByVal uncomprLen As Integer) As Integer\nDeclare Function gzwrite Lib \"ZLIB.DLL\" (ByVal file As Long, ByVal uncompr As String, ByVal uncomprLen As Integer) As Integer\nDeclare Function gzclose Lib \"ZLIB.DLL\" (ByVal file As Long) As Integer\n#Else\nDeclare Function compress Lib \"ZLIB32.DLL\" (ByVal compr As String, comprLen As Any, ByVal buf As String, ByVal buflen As Long) As Integer\nDeclare Function uncompress Lib \"ZLIB32.DLL\" (ByVal uncompr As String, uncomprLen As Any, ByVal compr As String, ByVal lcompr As Long) As Long\nDeclare Function gzopen Lib \"ZLIB32.DLL\" (ByVal file As String, ByVal mode As String) As Long\nDeclare Function gzread Lib \"ZLIB32.DLL\" (ByVal file As Long, ByVal uncompr As String, ByVal uncomprLen As Long) As Long\nDeclare Function gzwrite Lib \"ZLIB32.DLL\" (ByVal file As Long, ByVal uncompr As String, ByVal uncomprLen As Long) As Long\nDeclare Function gzclose Lib \"ZLIB32.DLL\" (ByVal file As Long) As Long\n#End If\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for AvroC\nDESCRIPTION: Sets up the CMake project for AvroC, including minimum required version, project name, and enabling testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1)\nproject(AvroC C)\nenable_testing()\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR})\n\ncmake_policy(SET CMP0003 NEW)\n```\n\n----------------------------------------\n\nTITLE: Pulling TDengine Docker Image\nDESCRIPTION: Commands to pull the latest or specific version of TDengine Docker image from Docker Hub\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/01-docker.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull tdengine/tdengine:latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull tdengine/tdengine:3.3.3.0\n```\n\n----------------------------------------\n\nTITLE: Adding a test case for mmnodeTest in CMake\nDESCRIPTION: This CMake command adds a test case named 'mmnodeTest' that executes the 'mmnodeTest' executable. The add_test command allows the test to be discovered and run through CMake's testing infrastructure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/mnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n    NAME mmnodeTest\n    COMMAND mmnodeTest\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Download Count for Object Storage in TDengine\nDESCRIPTION: This formula estimates the number of download requests from object storage based on the number of data blocks needed for a query and the number of cached data blocks. It accounts for the page cache and its impact on reducing downloads.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/12-multi.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\"Download Count = Number of Data Blocks Needed for Query - Number of Cached Data Blocks\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Data for VARBINARY and GEOMETRY Types in TDengine\nDESCRIPTION: Shell commands to create a database, table, and insert data for demonstrating VARBINARY and GEOMETRY type handling in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncreate database demo\nuse demo\ncreate table t(ts timestamp,c1 varbinary(20),c2 geometry(100))\ninsert into t values(now,'\\x7f8290','point(100 100)')\n```\n\n----------------------------------------\n\nTITLE: Diagramming Time-series Data Operations in TDengine using PlantUML\nDESCRIPTION: This PlantUML diagram shows the process of time-series data operations in TDengine, specifically for data insertion. It illustrates the interaction between the application, RPC, VNODE, and SYNC components across multiple dnodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/vnode_write.md#2025-04-16_snippet_1\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml create_table\nskinparam sequenceMessageAlign center\nskinparam responseMessageBelowArrow true\n\nparticipant APP as app\nbox \"dnode1\"\n    participant RPC as rpc\n    participant VNODE as vnode\n    participant SYNC as sync\nend box\n\nbox \"dnode2\"\n    participant SYNC as sync2\n    participant VNODE as vnode2\nend box\n\nbox \"dnode3\"\n    participant SYNC as sync3\n    participant VNODE as vnode3\nend box\n\n' APP send request to dnode and RPC in dnode recv the request\napp ->rpc: insert data req\n\n' RPC call vnodeProcessReq() function to process the request\nrpc -> vnode: vnodeProcessReq\nnote right\ncallback function \nrun in RPC module \nthreads. The function\nonly puts the request\nto a vnode queue.\nend note\n\n' VNODE call vnodeProcessReqs() function to integrate requests and process as a whole\nvnode -> vnode: vnodeProcessReqs()\nnote right\nintegrate reqs and \nprocess as a whole\nend note\n\n\n' sync the request to other nodes\nvnode -> sync: syncProcessReqs()\n\n' ' make request persistent\n' ' sync -->vnode: walWrite()\\n(callback function)\n\n' ' replicate requests to other DNODES\nsync -> sync2: replication req\nsync -> sync3: replication req\n\n' vnode apply\nsync2 -> vnode2: vnodeApplyReqs()\nsync3 -> vnode3: vnodeApplyReqs()\n\n' call apply request\nsync --> vnode: vnodeApplyReqs()\\n(callback function)\n\n' send response\nvnode --> rpc: rpcSendRsp()\n\n' dnode send response to APP\nrpc --> app: insert data rsp\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuzzing Build Options in CMake\nDESCRIPTION: Sets up compiler flags for building Snappy with fuzzing support if the option is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (SNAPPY_FUZZING_BUILD)\n  if (NOT \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n    message(WARNING \"Fuzzing builds are only supported with Clang\")\n  endif (NOT \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n\n  if(NOT CMAKE_CXX_FLAGS MATCHES \"-fsanitize=address\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n  endif(NOT CMAKE_CXX_FLAGS MATCHES \"-fsanitize=address\")\n\n  if(NOT CMAKE_CXX_FLAGS MATCHES \"-fsanitize=fuzzer-no-link\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=fuzzer-no-link\")\n  endif(NOT CMAKE_CXX_FLAGS MATCHES \"-fsanitize=fuzzer-no-link\")\nendif (SNAPPY_FUZZING_BUILD)\n```\n\n----------------------------------------\n\nTITLE: Installing taospyudf for TDengine\nDESCRIPTION: Provides the steps to set up the Python environment for developing UDFs for TDengine, including pip installation of 'taospyudf' ensuring '--enable-shared' is enabled during Python installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install taospyudf\n```\n\n----------------------------------------\n\nTITLE: Example TDengine Query Result\nDESCRIPTION: This is an example of the expected output from the TDengine CLI after successfully synchronizing data from Kafka. It shows the data written to the `meters` stable, including timestamp, current, voltage, phase, groupid, and location.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n              _ts               |          current          |          voltage          |           phase           | groupid |            location            |\n===============================================================================================================================================================\n 2022-03-28 09:56:51.249000000 |              11.800000000 |             221.000000000 |               0.280000000 | 2       | California.LosAngeles          |\n 2022-03-28 09:56:51.250000000 |              13.400000000 |             223.000000000 |               0.290000000 | 2       | California.LosAngeles          |\n 2022-03-28 09:56:51.249000000 |              10.800000000 |             223.000000000 |               0.290000000 | 3       | California.LosAngeles          |\n 2022-03-28 09:56:51.250000000 |              11.300000000 |             221.000000000 |               0.350000000 | 3       | California.LosAngeles          |\nQuery OK, 4 row(s) in set (0.004208s)\n```\n\n----------------------------------------\n\nTITLE: Writing Data to TDengine in OpenTSDB Format\nDESCRIPTION: This snippet configures TDengine to accept data in OpenTSDB JSON and telnet formats. Users should utilize HTTP clients to post data to specified endpoints corresponding to JSON and telnet under the `put` API. It requires indicating the correct database path within the URL.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/03-taosadapter.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/opentsdb/v1/put/json/<db>\n/opentsdb/v1/put/telnet/<db>\n```\n\n----------------------------------------\n\nTITLE: Host File Configuration for TDengine Explorer Access\nDESCRIPTION: Configuration line to add to the hosts file for local domain resolution of the TDengine Explorer service. This allows access to the Explorer interface using the configured domain name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n192.168.1.58    replica3.local.tdengine.com\n```\n\n----------------------------------------\n\nTITLE: Checking if Cursor is on Last Row in ResultSet in Java\nDESCRIPTION: Method for checking if the cursor is positioned on the last row in a database result set. Returns true if the cursor is on the last row, otherwise false. Throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_55\n\nLANGUAGE: Java\nCODE:\n```\nboolean isLast() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Pattern for Nginx Log Parsing\nDESCRIPTION: A regular expression pattern using named capture groups to extract fields like IP address, timestamp, HTTP method, URL, status code, and response length from Nginx log entries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_3\n\nLANGUAGE: regex\nCODE:\n```\n(?<ip>\\b(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\b)\\s-\\s-\\s\\[(?<ts>\\d{2}/\\w{3}/\\d{4}:\\d{2}:\\d{2}:\\d{2}\\s\\+\\d{4})\\]\\s\"(?<method>[A-Z]+)\\s(?<url>[^\\s\"]+).*(?<status>\\d{3})\\s(?<length>\\d+)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static TAOS Library with CMake\nDESCRIPTION: This snippet sets up the static TAOS library build. It includes platform-specific compilation options similar to the shared library setup. The code specifies public and private include directories and links the library against 'os' and 'util'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/wrapper/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${TAOS_LIB_STATIC} STATIC ${WRAPPER_SRC})\n\nif(${TD_DARWIN})\n    target_compile_options(${TAOS_LIB_STATIC} PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\n\ntarget_include_directories(\n    ${TAOS_LIB_STATIC}\n    PUBLIC \"${TD_SOURCE_DIR}/include/client\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n    ${TAOS_LIB_STATIC}\n    PUBLIC os util\n)\n```\n\n----------------------------------------\n\nTITLE: Building Taosdemo with C# in Mono\nDESCRIPTION: Instructions to compile and run the C# version of Taosdemo using Mono. The `mcs` command is used for compiling the C# source files into an executable named 'taosdemo'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/C#/taosdemo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmcs -out:taosdemo *.cs\n./taosdemo --help\n```\n\n----------------------------------------\n\nTITLE: Defining taosd_cluster_basic Table Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the taosd_cluster_basic table, which records basic cluster information. It includes field names, data types, tag indicators, and descriptions for each column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| field                | type      | is\\_tag | comment                         |\n| :------------------- | :-------- | :------ | :------------------------------ |\n| ts                   | TIMESTAMP |         | timestamp                       |\n| first\\_ep            | VARCHAR   |         | cluster first ep                |\n| first\\_ep\\_dnode\\_id | INT       |         | dnode id of cluster first ep    |\n| cluster_version      | VARCHAR   |         | tdengine version. e.g.: 3.0.4.0 |\n| cluster\\_id          | VARCHAR   | tag     | cluster id                      |\n```\n\n----------------------------------------\n\nTITLE: Viewing Active Connectors with cURL in Shell\nDESCRIPTION: This command uses cURL to check the currently active Kafka connectors by sending a GET request to the Kafka Connect REST API.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8083/connectors\n```\n\n----------------------------------------\n\nTITLE: Applying Ingress Configuration for TDengine Explorer\nDESCRIPTION: Shell command for applying the Ingress configuration to expose the TDengine Explorer service. This command creates the Ingress resource in the Kubernetes cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f replica3-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Smart Meter Data with TDengine Benchmark\nDESCRIPTION: This command uses taosBenchmark to generate 3 days of data for 1000 smart meters, with a sampling frequency of 1 second.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/03-powerbi.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark -t 1000 -n 259200 -S 1000 -y\n```\n\n----------------------------------------\n\nTITLE: Defining Length Codes in DEFLATE Compression\nDESCRIPTION: This table defines the length codes used in DEFLATE compression. It shows the mapping between codes, extra bits, and the resulting lengths they represent.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1951.txt#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n             Extra               Extra               Extra\n        Code Bits Length(s) Code Bits Lengths   Code Bits Length(s)\n        ---- ---- ------     ---- ---- -------   ---- ---- -------\n         257   0     3       267   1   15,16     277   4   67-82\n         258   0     4       268   1   17,18     278   4   83-98\n         259   0     5       269   2   19-22     279   4   99-114\n         260   0     6       270   2   23-26     280   4  115-130\n         261   0     7       271   2   27-30     281   5  131-162\n         262   0     8       272   2   31-34     282   5  163-194\n         263   0     9       273   3   35-42     283   5  195-226\n         264   0    10       274   3   43-50     284   5  227-257\n         265   1  11,12      275   3   51-58     285   0    258\n         266   1  13,14      276   3   59-66\n```\n\n----------------------------------------\n\nTITLE: Diagramming vnodeProcessReqs() Function in TDengine using PlantUML\nDESCRIPTION: This PlantUML diagram illustrates the vnodeProcessReqs() function in TDengine. It shows the process of grouping requests, syncing with other nodes, and applying requests based on different conditions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/vnode_write.md#2025-04-16_snippet_2\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml vnodeProcessReqs()\nparticipant VNODE as v\nparticipant SYNC as s\n\ngroup vnodeProcessReqs()\n    ' Group requests and get a request batch to process as a whole\n    v -> v: vnodeGetReqsFromQueue()\n    note right\n    integrate all write\n    requests as a batch\n    to process as a whole\n    end note\n\n    ' VNODE call syncProcessReqs() function to process the batch request\n    v -> s: syncProcessReqs()\n\n    group syncProcessReqs()\n        ' Check if current node is leader\n        alt not leader\n            return NOT_LEADER\n        end\n\n        s -> s: syncAppendReqsToLogStore()\n        group syncAppendReqsToLogStore()\n            s -> v: walWrite()\n            note right\n            There must be a \n            callback function \n            provided by VNODE \n            to persist the \n            requests in WAL\n            end note\n\n            alt (no unapplied reqs) AND (only one node OR no meta requests)\n                s -> v: vnodeApplyReqs()\n                note right\n                just use the woker\n                thread to apply\n                the requests. This\n                is a callback function\n                provided by VNODE\n                end note\n            else other cases need to wait response\n                s -> s:\n                note right\n                save the requests in log store\n                and wait for confirmation or\n                other cases\n                end note\n\n                s ->]: send replication requests\n                s ->]: send replication requests\n            end\n        end\n    end\nend\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Subquery Syntax for Stream Computing in TDengine\nDESCRIPTION: The syntax for the subquery component used in stream creation, including support for various window types like session windows, state windows, time windows, event windows, and count windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nsubquery: SELECT select_list\n    from_clause\n    [WHERE condition]\n    [PARTITION BY tag_list]\n    [window_clause]\n    \nwindow_cluse: {\n    SESSION(ts_col, tol_val)\n  | STATE_WINDOW(col)\n  | INTERVAL(interval_val [, interval_offset]) [SLIDING (sliding_val)]\n  | EVENT_WINDOW START WITH start_trigger_condition END WITH end_trigger_condition\n  | COUNT_WINDOW(count_val[, sliding_val])\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Output Path and Verbosity\nDESCRIPTION: Configures the output path for executables and sets verbose makefile option based on the VERBOSE variable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/bin)\n\nIF (${VERBOSE} MATCHES \"true\")\n    SET(CMAKE_VERBOSE_MAKEFILE ON)\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Configuration and Communication in TDengine\nDESCRIPTION: Functions related to file configuration writing and request/response communication with remote procedure calls. It includes setting up and sending configuration files as well as network operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n(void)rpcSendRequest\n(void)rpcSendResponse\n(void)syncWriteCfgFile\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions for macOS System Configuration\nDESCRIPTION: Shell commands to set the appropriate ownership and permissions for the maxfiles limit configuration file on macOS. This ensures the system can properly load the configuration file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown root:wheel /Library/LaunchDaemons/limit.maxfiles.plist\nsudo chmod 644 /Library/LaunchDaemons/limit.maxfiles.plist\n```\n\n----------------------------------------\n\nTITLE: Generating Allure Reports after tests\nDESCRIPTION: This snippet provides the command to manually generate an Allure report from test results stored in the allure-results directory. It specifies the use of the allure CLI to create a clean report in a designated output directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nallure generate allure-results -o $YOUR_REPORT_DIR --clean\n```\n\n----------------------------------------\n\nTITLE: Executing Database Commands using RJDBC in R\nDESCRIPTION: The following commands exemplify various database interactions, such as obtaining connection information, executing SQL commands to insert data, checking table existence, and reading data from tables. These operations demonstrate the versatility of RJDBC in handling typical database tasks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/R/command.txt#2025-04-16_snippet_3\n\nLANGUAGE: R\nCODE:\n```\ndbGetInfo(conn)\ndbSendUpdate(conn, \"use test\")\ndbSendUpdate(conn, \"insert into t1 values(now, 99)\")\ntable1<-dbGetQuery(conn,\"show tables\")\ndbListTables(conn)\ndbExistsTable(conn,\"iris\")\nsummary(conn)\ndbGetInfo(conn)\ndbReadTable(conn, \"t1\")\ndbRemoveTable(conn,\"t1\")\ndbSendUpdate(conn, \"create table t1(a timestamp, b int, c nchar(12))\")\ndbWriteTable(conn, \"t1\", t_demo_n, overwrite=FALSE, append=TRUE)\ndbGetQuery(conn, \"select k from tu\")\ndbDisconnect(conn)\n```\n\n----------------------------------------\n\nTITLE: Adding a batch using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function adds the currently bound parameters as a batch for later execution via WebSocket. It returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_34\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) AddBatch() error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring taosAdapter for Collectd Data Reception in TOML\nDESCRIPTION: This snippet shows how to configure taosAdapter in the taosadapter.toml file to enable receiving data from collectd. It specifies database names, ports, and authentication details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_collectd.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[opentsdb_telnet]\nenable = true\nmaxTCPConnections = 250\ntcpKeepAlive = false\ndbs = [\"opentsdb_telnet\", \"collectd\", \"icinga2\", \"tcollector\"]\nports = [6046, 6047, 6048, 6049]\nuser = \"root\"\npassword = \"taosdata\"\n```\n\n----------------------------------------\n\nTITLE: Getting affected rows using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function retrieves the number of rows affected by the executed SQL statement via WebSocket. It returns the affected rows count.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_36\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) GetAffectedRows() int\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Virtual Table Information in TDengine\nDESCRIPTION: SQL commands for viewing virtual table information including listing tables, showing creation statements and describing table structure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [NORMAL | CHILD] [db_name.]VTABLES [LIKE 'pattern'];\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE VTABLE [db_name.]vtable_name;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE [db_name.]vtb_name;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... FROM information_schema.ins_tables WHERE type = 'VIRTUAL_NORMAL_TABLE' OR type = 'VIRTUAL_CHILD_TABLE';\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for mgmt_vnode Library in CMake\nDESCRIPTION: Configures the include directories for the mgmt_vnode library, specifically adding the inc directory from the current source directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_vnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n    mgmt_vnode\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in Docusaurus\nDESCRIPTION: This snippet demonstrates how to import and utilize the DocCardList component from Docusaurus to display a list of documentation cards that are relevant to the current sidebar category. It leverages the `useCurrentSidebarCategory` hook to dynamically fetch items based on the active context. No external dependencies outside of Docusaurus are necessary.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Project Structure in CMake\nDESCRIPTION: This snippet includes multiple 'add_subdirectory' commands to organize the TDengine project into manageable modules. Each command specifies a subdirectory related to different functionalities, such as transport handling, monitoring, and data operations. Ensure that each subdirectory has its own CMakeLists.txt file as prerequisites.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(tdb)\nadd_subdirectory(transport)\nadd_subdirectory(wal)\nadd_subdirectory(monitor)\nadd_subdirectory(tfs)\nadd_subdirectory(sync)\nadd_subdirectory(qcom)\nadd_subdirectory(nodes)\nadd_subdirectory(catalog)\nadd_subdirectory(audit)\nadd_subdirectory(monitorfw)\nadd_subdirectory(sm4)\nadd_subdirectory(crypt)\n\nadd_subdirectory(scalar)\nadd_subdirectory(function)\nadd_subdirectory(index)\nadd_subdirectory(parser)\nadd_subdirectory(scheduler)\nadd_subdirectory(executor)\nadd_subdirectory(stream)\nadd_subdirectory(planner)\nadd_subdirectory(qworker)\nadd_subdirectory(geometry)\nadd_subdirectory(command)\nadd_subdirectory(azure)\nadd_subdirectory(tcs)\nadd_subdirectory(decimal)\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests in TDengine\nDESCRIPTION: Commands to run individual unit tests or all unit tests in TDengine. Unit tests are the smallest testable units used to verify functions, methods, or classes in the codebase.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run single unit test\ncd debug/build/bin\n./osTimeTests\n\n# Run all unit tests\ncd tests/unit-test/\nbash test.sh -e 0\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Bytes Size from Avro Value in C\nDESCRIPTION: Shows how to retrieve the size of a bytes value without getting the actual content.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\navro_value_t  *value = /* from somewhere */;\nsize_t  size;\navro_value_get_bytes(value, NULL, &size);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Connection Properties Information\nDESCRIPTION: Method to get detailed information about all properties needed for database connection. Returns an array of DriverPropertyInfo objects containing property details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nDriverPropertyInfo[] getPropertyInfo(String url, java.util.Properties info) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directory and Executable in CMake\nDESCRIPTION: This snippet defines a source directory and creates an executable target in a CMake project. The executable is named 'sdbTest' and it includes the specified source files defined by the variable 'MNODE_SDB_TEST_SRC'. This is essential for building the actual test application.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/sdb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_SDB_TEST_SRC)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(sdbTest ${MNODE_SDB_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Creating Mnodes on TDengine Dnodes\nDESCRIPTION: This snippet shows how to create mnodes on specified dnodes using kubectl commands. It demonstrates creating mnodes on two different dnodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it tdengine-0 -n tdengine-test -- taos -s \"create mnode on dnode 2\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it tdengine-0 -n tdengine-test -- taos -s \"create mnode on dnode 3\"\n```\n\n----------------------------------------\n\nTITLE: Committing Offsets in C#\nDESCRIPTION: This C# snippet demonstrates committing offsets in a TMQ consumer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n        public async Task CommitOffset()\n        {\n            var consumer = new TDConsumer(new TDProperties()\n            {\n                { \"group.id\", \"test_group\" },\n                { \"enable.auto.commit\", false }\n            }, new string[] { \"topic\" });\n\n            consumer.OnMessageReceived += (object sender, TDMessageEvent e) =>\n            {\n                var message = Encoding.UTF8.GetString(e.TDMessage.Payload);\n                Console.WriteLine($\"Received message: {message}\");\n                consumer.Commit(e.TDMessage);\n            };\n\n            await consumer.StartAsync();\n            Console.ReadKey();\n\n            await consumer.StopAsync();\n            consumer.Dispose();\n        }\n```\n\n----------------------------------------\n\nTITLE: Using SAMPLE Function in SQL\nDESCRIPTION: Returns k sample values from a column, where k is between 1 and 1000. Works with all data types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_60\n\nLANGUAGE: sql\nCODE:\n```\nSAMPLE(expr, k)\n```\n\n----------------------------------------\n\nTITLE: Adding auxiliary source directory in CMake\nDESCRIPTION: This CMake command adds the specified source directory to the build. aux_source_directory is a CMake function that finds all source files in the specified directory and adds them to a variable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/mnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_MNODE_TEST_SRC)\n```\n\n----------------------------------------\n\nTITLE: Error Output from Updated UDF\nDESCRIPTION: TDengine CLI output showing an error when calling the updated UDF with incorrect parameters. The improved UDF now enforces parameter validation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\ntaos> select myfun(v1, v2) from t;\n\nDB error: udf function execution failure (0.014643s)\n```\n\n----------------------------------------\n\nTITLE: Linking 'az' library to dependencies\nDESCRIPTION: This command links the 'az' library to the 'cjson', 'os', 'util', and 'common' libraries. This ensures that the 'az' library can use functions and data structures defined in these libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  az\n  PUBLIC cjson\n  PUBLIC os\n  PUBLIC util\n  PUBLIC common\n)\n```\n\n----------------------------------------\n\nTITLE: Including SubscribeDemo Example\nDESCRIPTION: This snippet includes the SubscribeDemo class, which likely showcases how to subscribe to data streams from TDengine. As part of the TDengine examples, it demonstrates the fundamental functionality and use of subscription in this context.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_java.mdx#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/SubscribeDemo.java}}\n```\n\n----------------------------------------\n\nTITLE: Building the Lua Driver Library\nDESCRIPTION: Execute this shell script to compile the Lua driver library. This step is required before running any Lua sample scripts. Ensure that your environment is set up to execute shell scripts.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/lua/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Definitions\nDESCRIPTION: Adds preprocessor definitions based on build configuration and enterprise features\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_ENTERPRISE)\n  LIST(APPEND COMMON_SRC ${TD_ENTERPRISE_DIR}/src/plugins/common/src/tglobal.c)\nendif()\n\nif(DEFINED GRANT_CFG_INCLUDE_DIR)\n  add_definitions(-DGRANTS_CFG)\nendif()\n\nif(${BUILD_WITH_ANALYSIS})\n  add_definitions(-DUSE_ANALYTICS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Usage Documentation for TDinsight.sh Script\nDESCRIPTION: Complete reference documentation for the TDinsight.sh script, showing all available command-line options and their descriptions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nUsage:\n   ./TDinsight.sh\n   ./TDinsight.sh -h|--help\n   ./TDinsight.sh -n <ds-name> -a <api-url> -u <user> -p <password>\n\nInstall and configure TDinsight dashboard in Grafana on Ubuntu 18.04/20.04 system.\n\n-h, -help,          --help                  Display help\n\n-V, -verbose,       --verbose               Run script in verbose mode. Will print out each step of execution.\n\n-v, --plugin-version <version>              TDengine datasource plugin version, [default: latest]\n\n-P, --grafana-provisioning-dir <dir>        Grafana provisioning directory, [default: /etc/grafana/provisioning/]\n-G, --grafana-plugins-dir <dir>             Grafana plugins directory, [default: /var/lib/grafana/plugins]\n-O, --grafana-org-id <number>               Grafana organization id. [default: 1]\n\n-n, --tdengine-ds-name <string>             TDengine datasource name, no space. [default: TDengine]\n-a, --tdengine-api <url>                    TDengine REST API endpoint. [default: http://127.0.0.1:6041]\n-u, --tdengine-user <string>                TDengine user name. [default: root]\n-p, --tdengine-password <string>            TDengine password. [default: taosdata]\n\n-i, --tdinsight-uid <string>                Replace with a non-space ASCII code as the dashboard id. [default: tdinsight]\n-t, --tdinsight-title <string>              Dashboard title. [default: TDinsight]\n-e, --tdinsight-editable                    If the provisioning dashboard could be editable. [default: false]\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library for Management Node\nDESCRIPTION: This snippet defines a static library target named mgmt_snode and associates it with the source files defined in the MGMT_SNODE variable. It sets compilation options specific to the Darwin OS to suppress certain warnings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_snode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src MGMT_SNODE)\nadd_library(mgmt_snode STATIC ${MGMT_SNODE})\n```\n\n----------------------------------------\n\nTITLE: Adding Linux-Specific Test Configuration in CMake\nDESCRIPTION: Adds a test configuration specifically for Linux systems. This conditional block ensures that the test is only added to the test suite on Linux platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/taosc_test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(${TD_LINUX})\n    add_test(\n        NAME taoscTest\n        COMMAND taoscTest\n    )\nendif(${TD_LINUX})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Description in Avro C\nDESCRIPTION: Demonstrates how to retrieve a string description of the most recent error using the avro_strerror function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\navro_schema_t  schema = avro_schema_string();\nif (schema == NULL) {\n    fprintf(stderr, \"Error was %s\\n\", avro_strerror());\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying TDengine Database Creation\nDESCRIPTION: SQL command to show created databases, confirming Icinga2 database integration\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/07-icinga2.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n```\n\n----------------------------------------\n\nTITLE: Compiling Windows DLL with MinGW\nDESCRIPTION: Example command for compiling a project that uses the Zstandard DLL on Windows with MinGW. This demonstrates how to link against the ZSTD DLL after building it with MinGW+MSYS.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/TSZ/zstd/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcc $(CFLAGS) -Iinclude/ test-dll.c -o test-dll dll\\libzstd.dll\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine Using WebSocket in C#\nDESCRIPTION: Example code showing how to establish a WebSocket connection to TDengine database using C#. Uses include directive syntax to reference an external file containing the actual WebSocket connection code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_cs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/wsConnect/Program.cs}}\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumers in Rust\nDESCRIPTION: This Rust snippet includes multiple functions for creating WebSocket consumers. It utilizes parameters such as server address, `group.id`, and `client.id` to successfully connect and consume messages in the Ros example files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/tmq.rs:create_consumer_dsn}}\n```\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/tmq.rs:create_consumer_ac}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain Name Resolution - Configuration\nDESCRIPTION: This configuration snippet shows how to update the local hosts file to resolve the TDengine Explorer service's domain name to the specified external IP address of the ingress resource.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_36\n\nLANGUAGE: conf\nCODE:\n```\n192.168.1.58    replica3.local.tdengine.com\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statement with Request ID in Java JDBC\nDESCRIPTION: Extended interface for executing a SQL statement with a request ID for tracing. Returns boolean and throws SQLException on error.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_42\n\nLANGUAGE: Java\nCODE:\n```\nboolean execute(String sql, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Viewing Creation Statement of a View in TDengine SQL\nDESCRIPTION: Command to display the SQL statement used to create a specific view.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE VIEW [db_name.]view_name;\n```\n\n----------------------------------------\n\nTITLE: Estimating TDengine Compression Ratio Text Description\nDESCRIPTION: This text explains how to use the \\\\\"taosBenchmark\\\\\" performance testing tool to assess TDengine's data compression. It details the steps to write sample data, execute the flush command, and use the \\\\\"du\\\\\" command to calculate the storage size.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/02-planning.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsers can use the performance testing tool taosBenchmark to assess the data compression effect of TDengine. By using the -f option to specify the write configuration file, taosBenchmark can write a specified number of CSV sample data into the specified database parameters and table structure.\nAfter completing the data writing, users can execute the flush database command in the TDengine CLI to force all data to be written to the disk. Then, use the du command of the Linux operating system to get the size of the data folder of the specified vnode. Finally, divide the original data size by the actual storage data size to calculate the real compression ratio.\n```\n\n----------------------------------------\n\nTITLE: Committing Messages Synchronously in TMQ in C\nDESCRIPTION: Function declaration for synchronously committing consumed messages in TMQ. Takes a TMQ consumer object and a result set pointer containing the message to commit.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_45\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_tmq_commit_sync(ws_tmq_t *tmq, const WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Inserting Schemaless Raw Data in TDengine (C)\nDESCRIPTION: Performs a schemaless batch insert operation, writing row protocol text data into TDengine.  The `lines` parameter and `len` specify the data to be written, addressing potential truncation issues with embedded '\\0' characters. The function takes the database connection, data buffer, data length, protocol type, and timestamp precision as input and returns a pointer to a `WS_RES` structure or NULL on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n\"WS_RES *ws_schemaless_insert_raw(WS_TAOS *taos,\n                                 const char *lines,\n                                 int len,\n                                 int32_t *totalRows,\n                                 int protocol,\n                                 int precision)\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding Enterprise VNode Plugins in CMake\nDESCRIPTION: Conditionally adds enterprise plugin source files if TD_VNODE_PLUGINS is enabled, including compaction-related functionality for both TSDB and meta components.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_VNODE_PLUGINS)\n    target_sources(\n        vnode\n        PRIVATE\n        ${TD_ENTERPRISE_DIR}/src/plugins/vnode/src/tsdbCompact.c\n        ${TD_ENTERPRISE_DIR}/src/plugins/vnode/src/metaCompact.c\n        ${TD_ENTERPRISE_DIR}/src/plugins/vnode/src/tsdbCompactMonitor.c\n        ${TD_ENTERPRISE_DIR}/src/plugins/vnode/src/vnodeCompact.c\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Parameter Binding with Stmt in Rust\nDESCRIPTION: Implements parameter binding functionality for efficient database write operations, supporting initialization, SQL preparation, and execution\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/26-rust.mdx#2025-04-16_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nfn init(taos: &Q) -> RawResult<Self>\n```\n\nLANGUAGE: Rust\nCODE:\n```\nfn prepare<S: AsRef<str>>(&mut self, sql: S) -> RawResult<&mut Self>\n```\n\n----------------------------------------\n\nTITLE: Updating Existing UDF Function\nDESCRIPTION: SQL statement to update an existing UDF with new code. The 'create or replace' syntax allows replacing a UDF without dropping it first.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\ncreate or replace function myfun as '/root/udf/myfun.py' outputtype double language 'Python';\n```\n\n----------------------------------------\n\nTITLE: Starting taosX Service on Windows\nDESCRIPTION: Command to start the taosX service on Windows systems using the service control utility. This can be executed in Command Prompt (cmd.exe) or PowerShell.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsc.exe start taosx\n```\n\n----------------------------------------\n\nTITLE: Sample Prometheus Metrics Output\nDESCRIPTION: Example of Prometheus-formatted metrics showing cluster information including connections, databases, and node status\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# HELP taos_cluster_info_connections_total\n# TYPE taos_cluster_info_connections_total counter\ntaos_cluster_info_connections_total{cluster_id=\"554014120921134497\"} 8\n# HELP taos_cluster_info_dbs_total\n# TYPE taos_cluster_info_dbs_total counter\ntaos_cluster_info_dbs_total{cluster_id=\"554014120921134497\"} 2\n# HELP taos_cluster_info_dnodes_alive\n# TYPE taos_cluster_info_dnodes_alive counter\ntaos_cluster_info_dnodes_alive{cluster_id=\"554014120921134497\"} 1\n# HELP taos_cluster_info_dnodes_total\n# TYPE taos_cluster_info_dnodes_total counter\ntaos_cluster_info_dnodes_total{cluster_id=\"554014120921134497\"} 1\n# HELP taos_cluster_info_first_ep\n# TYPE taos_cluster_info_first_ep gauge\ntaos_cluster_info_first_ep{cluster_id=\"554014120921134497\",value=\"tdengine:6030\"} 1\n# HELP taos_cluster_info_first_ep_dnode_id\n# TYPE taos_cluster_info_first_ep_dnode_id counter\ntaos_cluster_info_first_ep_dnode_id{cluster_id=\"554014120921134497\"} 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Ingress Creation for TDengine Explorer\nDESCRIPTION: Shell command and output for verifying the creation of the Ingress resource for TDengine Explorer. This shows the hostname and IP address assigned to the Ingress service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nroot@server:/data1/projects/helm# kubectl get ingress\nNAME               CLASS   HOSTS                         ADDRESS        PORTS   AGE\nreplica3-ingress   nginx   replica3.local.tdengine.com   192.168.1.58   80      48m\n```\n\n----------------------------------------\n\nTITLE: PERF_QUERIES Table Structure in TDengine\nDESCRIPTION: Defines the structure of the PERF_QUERIES table that stores information about currently executing SQL statements, including query details, execution metrics, and status.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/23-perf.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE PERF_QUERIES (\n  kill_id UBIGINT,\n  query_id INT,\n  conn_id UINT,\n  app BINARY(24),\n  pid INT,\n  user BINARY(24),\n  end_point BINARY(16),\n  create_time TIMESTAMP,\n  exec_usec BIGINT,\n  stable_query BOOL,\n  sub_num INT,\n  sub_status BINARY(1000),\n  sql BINARY(1024)\n)\n```\n\n----------------------------------------\n\nTITLE: Including C# Native Parameter Binding Example\nDESCRIPTION: This C# snippet showcases the native interface for parameter binding in TDengine, aimed at efficient data insertion with reduced parsing requirements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/stmtInsert/Program.cs:main}}\n```\n\n----------------------------------------\n\nTITLE: Counting Records in TDengine Table\nDESCRIPTION: SQL query to count the number of records in a TDengine table named 'memory'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/25-application/_i3-immigrate.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect count(*) from memory\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine using CLI on macOS\nDESCRIPTION: Launches the TDengine CLI to connect to the TDengine server on macOS.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntaos\n```\n\n----------------------------------------\n\nTITLE: Executing TDengine Nanosecond Precision Test\nDESCRIPTION: Defines the main test function for running the nanosecond precision test suite. It calls the run method of the TestPrecisionNs instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/metadata/time_precision.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef test_case():\n    default_case.run()\n```\n\n----------------------------------------\n\nTITLE: TDengine CLI Database Verification\nDESCRIPTION: SQL commands to verify Telegraf data ingestion by checking databases, super tables and querying sample data\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/03-telegraf.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n telegraf                       |\nQuery OK, 3 rows in database (0.010568s)\n\ntaos> use telegraf;\nDatabase changed.\n\ntaos> show stables;\n              name              |\n=================================\n swap                           |\n cpu                            |\n system                         |\n diskio                         |\n kernel                         |\n mem                            |\n processes                      |\n disk                           |\nQuery OK, 8 row(s) in set (0.000521s)\n\ntaos> select * from telegraf.system limit 10;\n              ts               |           load1           |           load5           |          load15           |        n_cpus         |        n_users        |        uptime         | uptime_format |              host\n|\n=============================================================================================================================================================================================================================================\n 2022-04-20 08:47:50.000000000 |               0.000000000 |               0.050000000 |               0.070000000 |                     4 |                     1 |                  5533 |  1:32         | shuduo-1804\n|\n 2022-04-20 08:48:00.000000000 |               0.000000000 |               0.050000000 |               0.070000000 |                     4 |                     1 |                  5543 |  1:32         | shuduo-1804\n|\n 2022-04-20 08:48:10.000000000 |               0.000000000 |               0.040000000 |               0.070000000 |                     4 |                     1 |                  5553 |  1:32         | shuduo-1804\n|\nQuery OK, 3 row(s) in set (0.013269s)\n```\n\n----------------------------------------\n\nTITLE: Executing TDengine Test Scripts with Python\nDESCRIPTION: These commands run various test scripts for the TDengine project using Python. Each command specifies a different test file to be executed, covering areas such as querying, insertion, database operations, and specific features like TSMA and TMQ.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/system-test/failed.txt#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython3 ./test.py -f 2-query/match.py\npython3 ./test.py -f 0-others/splitVGroup.py -N 3 -n 1\npython3 ./test.py -f 2-query/tsma.py\npython3 ./test.py -f 2-query/tsma2.py\npython3 ./test.py -f 1-insert/database_pre_suf.py \npython3 ./test.py -f 0-others/splitVGroup.py -N 3 -n 1\npython3 ./test.py -f 0-others/splitVGroupWal.py -N 3 -n 1\npython3 ./test.py -f 0-others/delete_check.py\npython3 ./test.py -f 1-insert/alter_database.py\npython3 ./test.py -f 1-insert/db_tb_name_check.py\npython3 ./test.py -f 1-insert/precisionUS.py\npython3 ./test.py -f 1-insert/precisionNS.py\npython3 ./test.py -f 1-insert/ts-4272.py\npython3 ./test.py -f 2-query/last+last_row.py\npython3 ./test.py -f 2-query/normal.py\npython3 ./test.py -f 2-query/To_iso8601.py \npython3 ./test.py -f 2-query/normal.py\npython3 ./test.py -f 5-taos-tools/taosbenchmark/insertMix.py -N 3\npython3 ./test.py -f 7-tmq/tmq_taosx.py\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark for data ingestion testing\nDESCRIPTION: Command to execute taosBenchmark with default settings to test TDengine's data ingestion performance by inserting sample data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntaosBenchmark -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Storage and Debugging Tools in CMake\nDESCRIPTION: Adds configuration for cloud storage (S3 or COS) and debugging tools (crashdump, addr2line) based on build options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# s3\nif(${BUILD_WITH_S3})\n    cat(\"${TD_SUPPORT_DIR}/xml2_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    cat(\"${TD_SUPPORT_DIR}/libs3_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    cat(\"${TD_SUPPORT_DIR}/azure_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    add_definitions(-DUSE_S3)\n\n# cos\nelseif(${BUILD_WITH_COS})\n    cat(\"${TD_SUPPORT_DIR}/cos_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    add_definitions(-DUSE_COS)\nendif()\n\n# crashdump\nif(${BUILD_CRASHDUMP})\n    cat(\"${TD_SUPPORT_DIR}/crashdump_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(${BUILD_CRASHDUMP})\n\n# addr2line\nif(${BUILD_ADDR2LINE})\n    if(NOT ${TD_WINDOWS})\n        cat(\"${TD_SUPPORT_DIR}/libdwarf_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n        cat(\"${TD_SUPPORT_DIR}/addr2line_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    endif(NOT ${TD_WINDOWS})\nendif(${BUILD_ADDR2LINE})\n```\n\n----------------------------------------\n\nTITLE: JDBC Connection Configuration for Windows Chinese Character Support\nDESCRIPTION: Java code snippet showing how to configure JDBC connection properties to handle Chinese characters correctly in Windows environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nClass.forName(\"com.taosdata.jdbc.TSDBDriver\");\nProperties properties = new Properties();\nproperties.setProperty(TSDBDriver.LOCALE_KEY, \"UTF-8\");\nConnection = DriverManager.getConnection(url, properties);\n```\n\n----------------------------------------\n\nTITLE: Preparing SQL using Stmt object in af package\nDESCRIPTION: This function prepares an SQL statement for execution using the Stmt object. It takes an SQL string as input and returns an error if the preparation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) Prepare(sql string) error\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Icinga2 OpenTSDB Writer\nDESCRIPTION: This configuration file enables the OpenTSDB writer feature in Icinga2 and specifies the connection details to TaosAdapter. It sets the host and port for sending data to TaosAdapter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_icinga2.mdx#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nobject OpenTsdbWriter \"opentsdb\" {\n  host = \"<taosAdapter's host>\"\n  port = <port for icinga2>\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Access Methods - C# DbDataReader\nDESCRIPTION: Methods for accessing result set metadata including schema information, column names, types, and sizes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic DataTable GetSchemaTable()\npublic string GetDataTypeName(int ordinal)\npublic Type GetFieldType(int ordinal)\npublic string GetName(int ordinal)\npublic int GetFieldSize(int ordinal)\npublic int GetOrdinal(string name)\npublic int FieldCount\n```\n\n----------------------------------------\n\nTITLE: ResultSet Holdability in TDengine JDBC\nDESCRIPTION: Method to get the holdability setting for ResultSet objects generated by this Statement. Determines whether ResultSets remain open when the transaction is committed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_29\n\nLANGUAGE: Java\nCODE:\n```\nint getResultSetHoldability() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Decimal Library\nDESCRIPTION: This command creates a static library named 'decimal' from the source files listed in the DECIMAL_SRC variable.  The library will be built as a static archive.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_library(decimal STATIC ${DECIMAL_SRC})\"\n```\n\n----------------------------------------\n\nTITLE: Go Main Function in Sub Package\nDESCRIPTION: This Go code snippet represents the main function within a sub package. It is a starting point for a Go program, and demonstrates a basic example. It is essential to have Go installed and configured to run this code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_go.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/edte/tdengine/examples/go/sub/sub\"\n)\n\nfunc main() {\n\tfmt.Println(\"sub package main func\")\n\tsub.PrintSub()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable\nDESCRIPTION: This snippet links necessary libraries to the `decimalTest` executable. It links GoogleTest (`gtest`), TDengine's `taos` library, `os` library, and `common` library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_LINK_LIBRARIES(\n        decimalTest\n        PUBLIC gtest taos os common\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Pip for Python 3.10\nDESCRIPTION: Command to install pip package manager for Python 3.10 using the bootstrap script.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/tdgpt/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3.10\n```\n\n----------------------------------------\n\nTITLE: C# .NET Connector Configuration\nDESCRIPTION: Adds TDengine .NET connector package reference to C# project file\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/index.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"TDengine.Connector\" Version=\"3.1.0\" />\n```\n\n----------------------------------------\n\nTITLE: Raw Schemaless Data Writing in TDengine JDBC\nDESCRIPTION: Method for writing raw data with newline-separated records using specified protocol and timestamp types. Returns an operation result code indicating success or failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nint writeRaw(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Basic Data Partitioning Syntax\nDESCRIPTION: Demonstrates the basic syntax for data partitioning queries in TDengine SQL. The part_list can include columns, constants, scalar functions, and their combinations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPARTITION BY part_list\n```\n\n----------------------------------------\n\nTITLE: Building TDengine userTest Executable with CMake\nDESCRIPTION: This CMake configuration collects all source files from the current directory, builds them into a 'userTest' executable, and links it with the 'sut' library. A test declaration is included but commented out, indicating it may be used for testing in the future.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/user/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_USER_TEST_SRC)\nadd_executable(userTest ${MNODE_USER_TEST_SRC})\ntarget_link_libraries(\n    userTest\n    PUBLIC sut\n)\n\n\n#add_test(\n#    NAME userTest\n#    COMMAND userTest\n#)\n```\n\n----------------------------------------\n\nTITLE: Closing TMQ Connection in C#\nDESCRIPTION: This C# snippet demonstrates closing the TMQ connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\n        public async Task Close()\n        {\n            var consumer = new TDConsumer(new TDProperties()\n            {\n                { \"group.id\", \"test_group\" },\n                { \"enable.auto.commit\", false }\n            }, new string[] { \"topic\" });\n\n            consumer.OnMessageReceived += (object sender, TDMessageEvent e) =>\n            {\n                var message = Encoding.UTF8.GetString(e.TDMessage.Payload);\n                Console.WriteLine($\"Received message: {message}\");\n                consumer.Commit(e.TDMessage);\n            };\n\n            await consumer.StartAsync();\n            Console.ReadKey();\n\n            await consumer.StopAsync();\n            consumer.Dispose();\n        }\n```\n\n----------------------------------------\n\nTITLE: 创建电表数据查询主题示例\nDESCRIPTION: 创建一个名为power_topic的主题，订阅智能电表中电压值大于200的数据，并只返回时间戳、电流和电压三个字段。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC power_topic AS SELECT ts, current, voltage FROM power.meters WHERE voltage > 200;\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Build for TDengine (CMake)\nDESCRIPTION: Displays a message indicating the use of the original embedded httpd when TD_BUILD_HTTP is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_BUILD_HTTP)\n    MESSAGE(\"\")\n    MESSAGE(\"${Yellow} use original embedded httpd ${ColourReset}\")\n    MESSAGE(\"\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Timezone in TDengine\nDESCRIPTION: Examples of valid timezone configurations in TDengine configuration files. Demonstrates three different ways to set the GMT+8 timezone, with a note that the Asia/Shanghai format is not supported on Windows systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntimezone UTC-8\ntimezone GMT-8\ntimezone Asia/Shanghai\n```\n\n----------------------------------------\n\nTITLE: Pulling the latest TDengine Docker image\nDESCRIPTION: Command for pulling the latest version of the TDengine Docker image from Docker Hub.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/01-docker.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull tdengine/tdengine:latest\n```\n\n----------------------------------------\n\nTITLE: Viewing taosX Logs with Journalctl\nDESCRIPTION: Command to view taosX service logs on Linux systems using the journalctl utility. The optional -f flag can be added to follow the log output in real-time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\njournalctl -u taosx [-f]\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables for crash reporting\nDESCRIPTION: Example configuration for the .env file, including version settings, IP filters, server addresses, and FeiShu webhook URL for notifications.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/telemetry/crash-report/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Statistics of detailed crash information for the version\nVERSION=\"3.3.2.*\"\n# Statistics of crash counts for different versions\nVERSION_LIST=3.3.5.*,3.3.6.*\n# Filter to exclude IP (Company network export IP)\nEXCLUDE_IP=\"192.168.1.10\"\n# Official website server IP\nSERVER_IP=\"192.168.1.11\"\n# Internal network providing HTTP service IP and port, used for HTML report browsing\nHTTP_SERV_IP=\"192.168.1.12\"\nHTTP_SERV_PORT=8080\n# Webhook address for feiShu group bot\nFEISHU_MSG_URL=\"https://open.feishu.cn/open-apis/bot/v2/hook/*******\"\n# Owner\nOWNER=\"Jayden Jia\"\n```\n\n----------------------------------------\n\nTITLE: Adding Tests for CMake unit tests\nDESCRIPTION: This section registers the tests with the CMake testing framework, ensuring that they can be executed appropriately during the build process and validating the correctness of the implementations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(${TD_LINUX})\n        add_test(\n                NAME clientTest\n                COMMAND clientTest\n        )\n        add_test(\n                NAME connectOptionsTest\n                COMMAND connectOptionsTest\n        )\n        add_test(\n                NAME stmt2Test\n                COMMAND stmt2Test\n        )\n        add_test(\n                NAME stmtTest\n                COMMAND stmtTest\n        )\nENDIF ()\n\nadd_test(\n        NAME smlTest\n        COMMAND smlTest\n)\n\nadd_test(\n        NAME userOperTest\n        COMMAND userOperTest\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Build Components with CMake\nDESCRIPTION: This CMake configuration adds the tsim subdirectory to the build process and conditionally includes C tests when the BUILD_TEST flag is enabled. A comparison test module is available but currently commented out.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(tsim)\n\nIF(${BUILD_TEST})\n  ADD_SUBDIRECTORY(test/c)\nENDIF(${BUILD_TEST})\n\n# ADD_SUBDIRECTORY(comparisonTest/tdengine)\n```\n\n----------------------------------------\n\nTITLE: Building unit tests\nDESCRIPTION: This section conditionally builds unit tests if the gTest library is found. It includes setting include directories, finding source files, creating executable targets, and linking the targets with necessary libraries like `util`, `common`, `os`, `gtest`, and `pthread`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF(HEADER_GTEST_INCLUDE_DIR AND(LIB_GTEST_STATIC_DIR OR LIB_GTEST_SHARED_DIR))\n    MESSAGE(STATUS \\\"gTest library found, build unit test\\\")\n\n    INCLUDE_DIRECTORIES(${HEADER_GTEST_INCLUDE_DIR})\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n    LIST(REMOVE_ITEM SOURCE_LIST ${CMAKE_CURRENT_SOURCE_DIR}/trefTest.c)\n    LIST(REMOVE_ITEM SOURCE_LIST ${CMAKE_CURRENT_SOURCE_DIR}/terrorTest.cpp)\n    ADD_EXECUTABLE(utilTest ${SOURCE_LIST})\n    TARGET_LINK_LIBRARIES(utilTest util common os gtest pthread)\n\n    LIST(REMOVE_ITEM SOURCE_LIST ${CMAKE_CURRENT_SOURCE_DIR}/cacheTest.cpp)\n    LIST(APPEND SOURCE_LIST ${CMAKE_CURRENT_SOURCE_DIR}/hashTest.cpp)\n    ADD_EXECUTABLE(hashTest ${SOURCE_LIST})\n    TARGET_LINK_LIBRARIES(hashTest util common os gtest pthread)\n\n    LIST(APPEND BIN_SRC ${CMAKE_CURRENT_SOURCE_DIR}/trefTest.c)\n    ADD_EXECUTABLE(trefTest ${BIN_SRC})\n    TARGET_LINK_LIBRARIES(trefTest common util)\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Displaying GZIP Header Structure with CRC32 and ISIZE Fields\nDESCRIPTION: ASCII diagram showing the last two fields (CRC32 and ISIZE) of a GZIP file format, with byte positions indicated from 0-7.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n           0   1   2   3   4   5   6   7\n         +---+---+---+---+---+---+---+---+\n         |     CRC32     |     ISIZE     |\n         +---+---+---+---+---+---+---+---+\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine with Username and Password\nDESCRIPTION: Command for connecting to a TDengine server using the taos CLI with specific credentials after the root password has been changed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntaos -h xxx.xxx.xxx.xxx -u root -p\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Compiler Options for macOS in CMake\nDESCRIPTION: Adds a specific compiler option to disable deprecated-non-prototype warnings when building on macOS (Darwin) platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_vnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(${TD_DARWIN})\n    target_compile_options(mgmt_vnode PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring taosadapter build for macOS in CMake\nDESCRIPTION: Sets up an ExternalProject for building taosadapter on macOS. It configures the build environment, sets version information, and specifies build and install commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nELSEIF(TD_DARWIN)\n    MESSAGE(\"Building taosAdapter on MACOS\")\n    INCLUDE(ExternalProject)\n    ExternalProject_Add(taosadapter\n        PREFIX \"taosadapter\"\n        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/taosadapter\n        BUILD_ALWAYS off\n        DEPENDS ${TAOS_NATIVE_LIB}\n        BUILD_IN_SOURCE 1\n        CONFIGURE_COMMAND cmake -E echo \"taosadapter no need cmake to config\"\n        PATCH_COMMAND\n        COMMAND git clean -f -d\n        BUILD_COMMAND\n        COMMAND CGO_CFLAGS=-I${CMAKE_CURRENT_SOURCE_DIR}/../include/client CGO_LDFLAGS=-L${CMAKE_BINARY_DIR}/build/lib go build -a -ldflags \"-s -w -X 'github.com/taosdata/taosadapter/v3/version.Version=${taos_version}' -X 'github.com/taosdata/taosadapter/v3/version.CommitID=${taosadapter_commit_sha1}' -X 'github.com/taosdata/taosadapter/v3/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n        COMMAND CGO_CFLAGS=-I${CMAKE_CURRENT_SOURCE_DIR}/../include/client CGO_LDFLAGS=-L${CMAKE_BINARY_DIR}/build/lib go build -a -o taosadapter-debug -ldflags \"-X 'github.com/taosdata/taosadapter/v3/version.Version=${taos_version}' -X 'github.com/taosdata/taosadapter/v3/version.CommitID=${taosadapter_commit_sha1}' -X 'github.com/taosdata/taosadapter/v3/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n        INSTALL_COMMAND\n        COMMAND cmake -E echo \"Copy taosadapter\"\n        COMMAND cmake -E copy taosadapter ${CMAKE_BINARY_DIR}/build/bin\n        COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E echo \"Copy taosadapter.toml\"\n        COMMAND cmake -E copy ./example/config/taosadapter.toml ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E copy ./taosadapter.service ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E echo \"Copy taosadapter-debug\"\n        COMMAND cmake -E copy taosadapter-debug ${CMAKE_BINARY_DIR}/build/bin\n    )\n```\n\n----------------------------------------\n\nTITLE: Example of Accessing Avro Array Elements\nDESCRIPTION: Example showing how to access an element in an Avro array. The child element is created as a local variable and is valid only within the scope where it's defined.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_11\n\nLANGUAGE: c\nCODE:\n```\navro_value_t  *array = /* from somewhere else */;\n\n{\n    avro_value_t  child;\n    avro_value_get_by_index(array, 0, &child, NULL);\n    /* do something interesting with the array element */\n}\n```\n\n----------------------------------------\n\nTITLE: 切换数据库 SQL\nDESCRIPTION: 使用USE语句切换当前操作的数据库上下文到power数据库\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/01-model.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse power;\n```\n\n----------------------------------------\n\nTITLE: REST API SQL Query with Request ID\nDESCRIPTION: Example of executing SQL query with a request ID using REST API via curl command\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/02-sql.md#2025-04-16_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ncurl --location -uroot:taosdata 'http://127.0.0.1:6041/rest/sql?req_id=3' \\\n--data 'SELECT ts, current, location FROM power.meters limit 1'\n```\n\n----------------------------------------\n\nTITLE: SGML Document Type Definition Implementation for OJCCT\nDESCRIPTION: Document type definitions (DTDs) used for coding articles in the OJCCT system. The SGML implementation allows for flexible text formatting and structured document representation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/testdata/lcet10.txt#2025-04-16_snippet_0\n\nLANGUAGE: SGML\nCODE:\n```\n* The SGML text can be tailored as users wish.\n* All these articles have a fairly simple document definition.\n* Document-type definitions (DTDs) were developed and given to OJCCT for coding.\n```\n\n----------------------------------------\n\nTITLE: Initializing Avro Value Interface Functions - C\nDESCRIPTION: Core functions for managing Avro value interfaces, including reference counting and memory management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n#include <avro.h>\n\navro_value_iface_t *avro_value_iface_incref(avro_value_iface_t *iface);\nvoid avro_value_iface_decref(avro_value_iface_t *iface);\n```\n\n----------------------------------------\n\nTITLE: Building Apache Avro using Docker\nDESCRIPTION: Commands to build Apache Avro inside a Docker container. This method simplifies the build process by using a pre-configured environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/BUILD.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh docker\ndocker@539f6535c9db:~/avro$ cd lang/java/\ndocker@539f6535c9db:~/avro/lang/java$ ./build.sh test\n[INFO] Scanning for projects...\n```\n\n----------------------------------------\n\nTITLE: View User Privileges SQL in TDengine\nDESCRIPTION: SQL command to display user authorizations in the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/26-grant.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nshow user privileges\n```\n\n----------------------------------------\n\nTITLE: Importing TDengine Python Connector and Setting Up Test Environment\nDESCRIPTION: Imports the necessary modules and sets up the test environment for TDengine nanosecond precision tests. It includes imports for the TDengine connector, pytest, and utility functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/metadata/time_precision.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport taos\nimport pytest\nfrom util.log import *\nfrom util.cases import *\nfrom util.sql import *\nfrom util.dnodes import *\n```\n\n----------------------------------------\n\nTITLE: Optional Cloud Storage Integration\nDESCRIPTION: Configures library linking and compilation for S3 and COS cloud storage options\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_S3})\n  if(${BUILD_WITH_S3})\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n    set(CMAKE_PREFIX_PATH $ENV{HOME}/.cos-local.2)\n    find_library(S3_LIBRARY s3)\n    target_link_libraries(\n      common\n      PUBLIC ${S3_LIBRARY}\n      PUBLIC ${CURL_LIBRARY}\n      PUBLIC ${SSL_LIBRARY}\n      PUBLIC ${CRYPTO_LIBRARY}\n      PUBLIC _libxml2\n    )\n    add_definitions(-DUSE_S3)\n  endif()\n\n  if(${BUILD_WITH_COS})\n    set(CMAKE_FIND_LIBRARY_SUFFIXES \".a\")\n    find_library(APR_LIBRARY apr-1 PATHS /usr/local/apr/lib/)\n    find_library(APR_UTIL_LIBRARY aprutil-1 PATHS /usr/local/apr/lib/)\n    find_library(MINIXML_LIBRARY mxml)\n    target_link_libraries(\n      common\n      PUBLIC cos_c_sdk_static\n      PUBLIC ${APR_UTIL_LIBRARY}\n      PUBLIC ${APR_LIBRARY}\n      PUBLIC ${MINIXML_LIBRARY}\n      PUBLIC ${CURL_LIBRARY}\n    )\n    add_definitions(-DUSE_COS)\n  endif(${BUILD_WITH_COS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Stat Task for Counting Written Records in Java\nDESCRIPTION: The 'StatTask' class provides periodic reporting functionality, counting and printing the number of records that have been successfully written to TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/StatTask.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Insert Configuration in JSON for TDengine taosBenchmark\nDESCRIPTION: JSON configuration example for data insertion using taosBenchmark. This snippet is a placeholder for the actual insert.json file content.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{{#include /TDengine/tools/taos-tools/example/insert.json}}\n```\n\n----------------------------------------\n\nTITLE: Creating Ingress for TDengine Explorer - YAML\nDESCRIPTION: This YAML defines an Ingress resource for the TDengine Explorer service, allowing external access through defined host rules. It specifies path rules directing traffic to the relevant service and port.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ntee replica3-ingress.yaml <<EOF\n# This is a helm chart example for deploying 3 replicas of TDengine Explorer\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: replica3-ingress\n  namespace: default\nspec:\n  rules:\n    - host: replica3.local.tdengine.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name:  replica3-tdengine-taosx\n                port:\n                  number: 6060\nEOF\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine server using CLI with custom config\nDESCRIPTION: Uses the TDengine CLI to connect to the server, specifying a custom configuration file directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./build/bin/taos -c test/cfg\n```\n\n----------------------------------------\n\nTITLE: TDengine JDBC High-Volume Write Example: Util\nDESCRIPTION: This is a utility class that provides basic functionalities such as creating database connections, creating databases, and creating Kafka topics.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/15-high.md#2025-04-16_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/Util.java}}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Scheduler\nDESCRIPTION: Sets up public and private include directories for the scheduler library, specifying paths for header files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scheduler/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n        scheduler\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/scheduler\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Function - C\nDESCRIPTION: Function for writing and validating Avro data against a schema.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint avro_write_data(avro_writer_t writer,\n                    avro_schema_t writers_schema, avro_datum_t datum);\n```\n\n----------------------------------------\n\nTITLE: Linking mmnodeTest with the 'sut' library in CMake\nDESCRIPTION: This CMake command links the 'mmnodeTest' executable with the 'sut' library. The 'PUBLIC' keyword means that the dependency on 'sut' is propagated to other targets that link against 'mmnodeTest'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/mnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    mmnodeTest\n    PUBLIC sut\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeq Data Source - Step 1\nDESCRIPTION: This shell command retrieves the current data storage location configuration for Seeq. It's essential for ensuring that data connectors are pointing to the correct directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo seeq config get Folders/Data\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Build Options with CMake\nDESCRIPTION: This snippet checks the platform and applies platform-specific build settings such as sourcing directories and including necessary directories and libraries. For non-Windows systems, it adds directories related to threading and iconv support. It also manages conditional linking based on the target platform.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/os/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src OS_SRC)\n\nif(NOT ${TD_WINDOWS})\n    add_definitions(-DTHREAD_SAFE=1)\n    aux_source_directory(src/timezone OS_TZ)\n    add_library(os STATIC ${OS_SRC} ${OS_TZ})\nelse()\n    add_library(os STATIC ${OS_SRC})\nendif(NOT ${TD_WINDOWS})\n\ntarget_include_directories(\n    os\n    PUBLIC \"${TD_SOURCE_DIR}/include/os\"\n    PUBLIC \"${TD_SOURCE_DIR}/include\"\n    PUBLIC \"${TD_SOURCE_DIR}/include/util\"\n    PUBLIC \"${TD_SOURCE_DIR}/contrib/pthread\"\n    PUBLIC \"${TD_SOURCE_DIR}/contrib/iconv\"\n    PUBLIC \"${TD_SOURCE_DIR}/contrib/msvcregex\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList in Docusaurus\nDESCRIPTION: This code snippet imports the DocCardList component from the Docusaurus theme package and uses it to render a list of documentation cards based on the current sidebar category. It leverages Docusaurus hooks for contextual data retrieval.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/index.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Dependencies and Timezone Setup\nDESCRIPTION: Handles build configuration for PCRE2, XML2, Azure components and timezone data. Sets up platform-specific paths and compilation of timezone-related source files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_PCRE2})\n    add_subdirectory(pcre2 EXCLUDE_FROM_ALL)\nendif(${BUILD_PCRE2})\n\nif(${TD_LINUX} AND ${BUILD_WITH_S3})\n  set(ORIG_CMAKE_C_FLAGS ${CMAKE_C_FLAGS})\n  string(REPLACE \" -Werror \" \" \" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  add_subdirectory(xml2-cmake)\n  set(CMAKE_C_FLAGS ${ORIG_CMAKE_C_FLAGS})\n\n  add_subdirectory(azure-cmake)\nendif()\n\nIF(TD_LINUX)\n    SET(TZ_OUTPUT_PATH /usr/share/zoneinfo)\nELSEIF(TD_DARWIN)\n    SET(TZ_OUTPUT_PATH /var/db/timezone/zoneinfo)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: HoltWinters Result Format\nDESCRIPTION: This JSON object outlines the expected structure of the result returned by the HoltWinters forecast. It includes the number of rows, period, algorithm name, mean squared error (MSE), and the actual forecast results in a column format.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/03-holtwinters.md#2025-04-16_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n\"rows\": rows,         // 返回结果的行数\n\"period\": period,     // 返回结果的周期性，该结果与输入的周期性相同，如果没有周期性，该值为 0\n\"algo\": 'holtwinters' // 返回结果使用的计算模型\n\"mse\": mse,           // 最小均方误差（minimum square error）\n\"res\": res            // 具体的结果，按照列形式返回的结果。一般意义上包含了两列 [timestamp][fc_results]。\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing SQL using Stmt2 object in af package (v3.6.0+)\nDESCRIPTION: This function prepares an SQL statement for execution using the Stmt2 object. It takes an SQL string as input and returns an error if the preparation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_23\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt2) Prepare(sql string) error\"\n```\n\n----------------------------------------\n\nTITLE: Starting StatsD with NPM\nDESCRIPTION: Shell commands for installing dependencies and starting StatsD with a custom configuration file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_statsd.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnode stats.js config.js &\n```\n\n----------------------------------------\n\nTITLE: Releasing Result Set Resources in TDengine WebSocket (C)\nDESCRIPTION: Releases the query result set and related resources. Must be called to prevent memory leaks. Accessing released resources may cause application crashes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nint32_t ws_free_result(WS_RES *rs)\n```\n\n----------------------------------------\n\nTITLE: Generic SQL Execution in TDengine JDBC\nDESCRIPTION: Method for executing any SQL statement that might return multiple results. Returns a boolean indicating whether the first result is a ResultSet (true) or an update count (false).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\nboolean execute(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for TDengine Function Library\nDESCRIPTION: Defines library dependencies for the function library, specifying which libraries should be linked and whether they should be exposed as public or kept as private implementation details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    function\n    PRIVATE os\n    PRIVATE util\n    PRIVATE common\n    PRIVATE nodes\n    PRIVATE qcom\n    PRIVATE scalar\n    PRIVATE geometry\n    PRIVATE decimal\n    PRIVATE transport\n    PUBLIC uv_a\n)\n```\n\n----------------------------------------\n\nTITLE: ADT-FSE Academic Citation in BibTeX\nDESCRIPTION: BibTeX citation entry for the ADT-FSE algorithm paper presented at SC'23 conference, documenting the new encoder for SZ compression.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/TSZ/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@inproceedings{\n  adtfse_sc2023,\n  author = {Tao Lu, Yu Zhong, Zibin Sun, Xiang Chen, You Zhou, Fei Wu, Ying Yang, Yunxin Huang, and Yafei Yang},\n  title = {ADT-FSE: A New Encoder for SZ},\n  year = {2023},\n  publisher = {IEEE Press},\n  booktitle = {Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis},\n  location = {Denver, Colorado},\n  series = {SC'23}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting walTest Include Directories\nDESCRIPTION: This snippet defines the include directories for the walTest executable. It adds two include directories: one for the wal library and another for the current source directory's inc subdirectory. These directories are added as public include directories, meaning they will be available to other targets that link against walTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(walTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/wal\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building ZLib.Ada with GNAT\nDESCRIPTION: Instructions for building ZLib.Ada using GNAT compiler. Requires the ZLib library to be already built on the system. Shows two alternative methods: using gnatmake directly or using the GNAT project file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/contrib/ada/readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngnatmake test -largs -L<directory where libz.a is> -lz\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngnatmake -Pzlib.gpr -L<directory where libz.a is>\n```\n\n----------------------------------------\n\nTITLE: Inactive Status Output for TDengine Service\nDESCRIPTION: Example output when the TDengine service is not running. This line appears in the systemctl status output when taosd is stopped.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nActive: inactive (dead)\n```\n\n----------------------------------------\n\nTITLE: Managing Iconv and Compilation Flags in CMake\nDESCRIPTION: This snippet determines the existence of Iconv headers and sets a compilation flag if they are missing. It includes platform-specific checks for the path and sets additional definitions related to memory use, random errors, and error checking.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/os/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# iconv\nif(TD_WINDOWS)\n    find_path(IconvApiIncludes iconv.h \"${TD_SOURCE_DIR}/contrib/iconv\")\nelse()\n    find_path(IconvApiIncludes iconv.h PATHS)\nendif(TD_WINDOWS)\n\nif(NOT IconvApiIncludes)\n    add_definitions(-DDISALLOW_NCHAR_WITHOUT_ICONV)\nendif()\n\nif(USE_TD_MEMORY)\n    add_definitions(-DUSE_TD_MEMORY)\nendif()\n\nif(BUILD_WITH_RAND_ERR)\n    add_definitions(-DBUILD_WITH_RAND_ERR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying Databases in TDengine CLI\nDESCRIPTION: Example of connecting to TDengine using the taos command and executing a show databases query. Shows the default system databases and user-created databases in the output.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_verify_macos.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ taos\n\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n db                             |\nQuery OK, 3 rows in database (0.019154s)\n\ntaos>\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for WAL\nDESCRIPTION: This CMake command sets the include directories for the 'wal' library.  It specifies both public and private include paths, allowing other libraries and the 'wal' library itself to find necessary header files. PUBLIC directories are added to the include path of dependent targets, while PRIVATE directories are only used during compilation of the wal library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n    wal\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/wal\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Stable and Tables for High Availability Testing in TDengine\nDESCRIPTION: These SQL commands create a super table (stable) named 'stb1' and multiple tables (t1, t2, t3) using the stable as a template. The stable defines columns for timestamp, temperature, and humidity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/high_availability/2_replica.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS stb1 (ts timestamp, temperature int, humidity int) TAGS (location binary(20));\nCREATE TABLE IF NOT EXISTS t1 USING stb1 TAGS (\"beijing\");\nCREATE TABLE IF NOT EXISTS t2 USING stb1 TAGS (\"shanghai\");\nCREATE TABLE IF NOT EXISTS t3 USING stb1 TAGS (\"guangzhou\");\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Specific Offset in C#\nDESCRIPTION: This C# snippet demonstrates seeking to a specific offset in a TMQ consumer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n        public async Task Seek()\n        {\n            var consumer = new TDConsumer(new TDProperties()\n            {\n                { \"group.id\", \"test_group\" },\n                { \"auto.offset.reset\", \"earliest\" }\n            }, new string[] { \"topic\" });\n            consumer.OnMessageReceived += (object sender, TDMessageEvent e) =>\n            {\n                var message = Encoding.UTF8.GetString(e.TDMessage.Payload);\n                Console.WriteLine($\"Received message: {message}\");\n            };\n            await consumer.StartAsync();\n\n            consumer.Seek(\"topic\", 0, 0);\n\n            Console.ReadKey();\n            await consumer.StopAsync();\n            consumer.Dispose();\n        }\n```\n\n----------------------------------------\n\nTITLE: Install Python dependencies using pip\nDESCRIPTION: This snippet describes how to install Python test dependencies from a requirements.txt file located in the test directory using pip3. It is a crucial step to set up the testing environment with all necessary Python packages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd test\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building TaosKeeper with Go\nDESCRIPTION: Command to build the TaosKeeper project from source code. Must be run in the TDengine/tools/keeper directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/README-CN.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build\n```\n\n----------------------------------------\n\nTITLE: Implementing Boundary Value Check Method in Python for TDengine\nDESCRIPTION: A common pattern across multiple files where a 'check_boundary_values' method is defined and called. This method is used to test edge cases and limit scenarios for various TDengine operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/system-test/2-query/txt.txt#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef check_boundary_values(self, dbname=\"bound_test\"):\n    # Method implementation\n\nself.check_boundary_values()\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Documentation Example Builds in CMake\nDESCRIPTION: This CMake script sets up the build configuration for TDengine documentation examples. It includes directory paths, defines executable targets, specifies source files, links required libraries (mainly the taos library), and sets output names for the example programs. The configuration is primarily for Linux systems with a partial implementation for macOS (Darwin).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/c/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nPROJECT(TDengine)\n\nIF (TD_LINUX)\n  INCLUDE_DIRECTORIES(. ${TD_SOURCE_DIR}/src/inc ${TD_SOURCE_DIR}/src/client/inc  ${TD_SOURCE_DIR}/inc)\n  AUX_SOURCE_DIRECTORY(. SRC)\n\n  add_executable(docs_connect_example \"\")\n  add_executable(docs_create_db_demo \"\")\n  add_executable(docs_insert_data_demo \"\")\n  add_executable(docs_query_data_demo \"\")\n  add_executable(docs_with_reqid_demo \"\")\n  add_executable(docs_sml_insert_demo \"\")\n  add_executable(docs_stmt_insert_demo \"\")\n  add_executable(docs_tmq_demo \"\")\n\n  target_sources(docs_connect_example\n      PRIVATE\n      \"connect_example.c\"\n      )\n\n  target_sources(docs_create_db_demo\n      PRIVATE\n      \"create_db_demo.c\"\n      )\n\n  target_sources(docs_insert_data_demo\n      PRIVATE\n      \"insert_data_demo.c\"\n      )\n\n  target_sources(docs_query_data_demo\n    PRIVATE \n    \"query_data_demo.c\"\n    )\n    \n  target_sources(docs_with_reqid_demo\n    PRIVATE \n    \"with_reqid_demo.c\"\n    )\n\n  target_sources(docs_sml_insert_demo\n    PRIVATE \n    \"sml_insert_demo.c\"\n    )\n\n    target_sources(docs_stmt_insert_demo\n    PRIVATE \n    \"stmt_insert_demo.c\"\n    )\n\n    target_sources(docs_tmq_demo\n    PRIVATE \n    \"tmq_demo.c\"\n    )\n\n  target_link_libraries(docs_connect_example\n      taos\n      )\n\n  target_link_libraries(docs_create_db_demo\n      taos\n      )\n\n  target_link_libraries(docs_insert_data_demo\n      taos\n      )\n\n  target_link_libraries(docs_query_data_demo\n      taos\n      )\n  \n  target_link_libraries(docs_with_reqid_demo\n      taos\n      )\n\n  target_link_libraries(docs_sml_insert_demo\n      taos\n      )\n\n  target_link_libraries(docs_stmt_insert_demo\n      taos\n      )\n\n  target_link_libraries(docs_tmq_demo\n      taos\n      pthread\n      )\n\n  SET_TARGET_PROPERTIES(docs_connect_example PROPERTIES OUTPUT_NAME docs_connect_example)\n  SET_TARGET_PROPERTIES(docs_create_db_demo PROPERTIES OUTPUT_NAME docs_create_db_demo)\n  SET_TARGET_PROPERTIES(docs_insert_data_demo PROPERTIES OUTPUT_NAME docs_insert_data_demo)\n  SET_TARGET_PROPERTIES(docs_query_data_demo PROPERTIES OUTPUT_NAME docs_query_data_demo)\n  SET_TARGET_PROPERTIES(docs_with_reqid_demo PROPERTIES OUTPUT_NAME docs_with_reqid_demo)\n  SET_TARGET_PROPERTIES(docs_sml_insert_demo PROPERTIES OUTPUT_NAME docs_sml_insert_demo)\n  SET_TARGET_PROPERTIES(docs_stmt_insert_demo PROPERTIES OUTPUT_NAME docs_stmt_insert_demo)\n  SET_TARGET_PROPERTIES(docs_tmq_demo PROPERTIES OUTPUT_NAME docs_tmq_demo)\nENDIF ()\nIF (TD_DARWIN)\n  INCLUDE_DIRECTORIES(. ${TD_SOURCE_DIR}/src/inc ${TD_SOURCE_DIR}/src/client/inc  ${TD_SOURCE_DIR}/inc)\n  AUX_SOURCE_DIRECTORY(. SRC)\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Starting taosX-Agent on Linux with Systemd\nDESCRIPTION: Command to start the taosX-Agent service using systemctl on Linux systems with Systemd.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/05-taosx-agent.md#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsystemctl start taosx-agent\n```\n\n----------------------------------------\n\nTITLE: Creating Static Management Module Library\nDESCRIPTION: Creates a static library named mgmt_mnode using the source files collected from MGMT_MNODE variable\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_mnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mgmt_mnode STATIC ${MGMT_MNODE})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for VNode Based on Build Type\nDESCRIPTION: Sets up include directories for the vnode library based on whether the project is using built-in dependencies (BUILD_CONTRIB) or external dependencies, with special handling for Linux platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_CONTRIB})\n    target_include_directories(\n        vnode\n        PUBLIC \"inc\"\n        PUBLIC \"src/inc\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/tcs\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/scalar\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/crypt\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/dnode/vnode\"\n        PUBLIC \"${TD_SOURCE_DIR}/contrib/rocksdb/include\"\n    )\nelse()\n    target_include_directories(\n        vnode\n        PUBLIC \"inc\"\n        PUBLIC \"src/inc\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/tcs\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/scalar\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/crypt\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/dnode/vnode\"\n    )\n\n    if(${TD_LINUX})\n        target_include_directories(\n            vnode\n            PUBLIC \"${TD_SOURCE_DIR}/deps/${TD_DEPS_DIR}/rocksdb_static\"\n        )\n        target_link_directories(\n            vnode\n            PUBLIC \"${TD_SOURCE_DIR}/deps/${TD_DEPS_DIR}/rocksdb_static\"\n        )\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Directory\nDESCRIPTION: This snippet uses `AUX_SOURCE_DIRECTORY` to automatically discover all source files in the current directory. It creates a variable named `SOURCE_LIST` containing the list of source files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests in CMake\nDESCRIPTION: This snippet outlines how to add tests for the executables using CMake's add_test function, specifying the command that runs each test, which is crucial for testing the functionality of the code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/transport/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n  NAME transUT\n  COMMAND transUT\n)\nadd_test(\n  NAME transUtilUt\n  COMMAND transportTest\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS\nDESCRIPTION: Command to install required dependency for building TaosTools (taosBenchmark only) on macOS\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrew install argp-standalone\n```\n\n----------------------------------------\n\nTITLE: Enabling and Adding Sync Test in CMake\nDESCRIPTION: This snippet enables testing and adds a test named 'sync_test' that runs the 'syncTest' command. It's part of the CMake configuration for running tests in the TDengine project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\nadd_test(\n    NAME sync_test\n    COMMAND syncTest\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inflate Decompression Algorithm\nDESCRIPTION: The inflate algorithm uses a multi-level table lookup approach for efficient Huffman code decoding. It creates a first-level table for short codes and additional tables for longer codes. This method balances the trade-off between decoding speed and table construction time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/algorithm.txt#2025-04-16_snippet_1\n\nLANGUAGE: pseudo\nCODE:\n```\n1. Set up first-level table for X bits (e.g., 9 for literal/length, 6 for distance)\n2. Get X bits from input stream\n3. Look up in first-level table\n4. If entry contains translation:\n   - Output translated value\n   - Gobble corresponding bits\n5. If entry points to second-level table:\n   - Gobble X bits\n   - Get additional bits\n   - Look up in second-level table\n   - Output translated value\n   - Gobble remaining bits\n6. Repeat from step 2 until end of input\n```\n\n----------------------------------------\n\nTITLE: EMQX Default Authorization Value\nDESCRIPTION: This is the default authorization value to be used when configuring the 'Action' in EMQX to connect to TDengine via taosAdapter.  It represents the base64 encoded string of 'root:taosdata', the default username and password.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/09-emq-broker.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBasic cm9vdDp0YW9zZGF0YQ==\n```\n\n----------------------------------------\n\nTITLE: Configuring C Consumer Parameters\nDESCRIPTION: Explains how C consumers use DSN for WebSocket connections and indicates common configurations for native connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n- WebSocket connection: Since it uses dsn, the four configuration items `td.connect.ip`, `td.connect.port`, `td.connect.user`, and `td.connect.pass` are not needed, the rest are the same as the common configuration items.\n- Native connection: Same as the common basic configuration items.\n```\n\n----------------------------------------\n\nTITLE: TMQ Consumer Offset Commit Synchronously\nDESCRIPTION: Synchronously commits message offset for a TMQ consumer, allowing full or specific topic/vgroup offset commits\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nint32_t ws_tmq_commit_offset_sync(ws_tmq_t *tmq,\n                                  const char *pTopicName,\n                                  int32_t vgId,\n                                  int64_t offset)\n```\n\n----------------------------------------\n\nTITLE: Viewing Management Nodes in TDengine SQL\nDESCRIPTION: Lists all management nodes in the cluster with their ID, associated dnode, and status.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW MNODES;\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine\nDESCRIPTION: These commands open the configuration files for TDengine, taosadapter, and taos-explorer using the vi editor with sudo privileges.  This allows users to modify the settings of each component.  Users should replace the default configurations with their desired settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/packaging/tools/mac_install_summary.txt#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsudo vi /etc/taos/taos.cfg\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo vi /etc/taos/taoadapter.toml\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo vi /etc/taos/explorer.toml\n```\n\n----------------------------------------\n\nTITLE: Using Docker environment variables for Apache Avro build\nDESCRIPTION: Examples of using DOCKER_ environment variables to customize the Docker build process for Apache Avro, including rebuilding without cache and specifying image tags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/BUILD.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Rebuild the docker image without using the build cache.\nDOCKER_BUILD_XTRA_ARGS=--no-cache ./build.sh docker\n\n# Build a docker image with a specific tag (for an RC or poc, for example)\nDOCKER_IMAGE_NAME=avro-build:1.10.1-rc1 ./build.sh docker\n\n# Run a command and return.\nDOCKER_RUN_ENTRYPOINT=\"mvn --version\" ./build.sh docker\n```\n\n----------------------------------------\n\nTITLE: IStmt Interface Statement Operations\nDESCRIPTION: Extended interface for statement operations including preparation, execution, and result handling. Supports table operations and parameter binding.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/40-csharp.md#2025-04-16_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvoid Prepare(string query)\nbool IsInsert()\nvoid SetTableName(string tableName)\nvoid SetTags(object[] tags)\nTaosFieldE[] GetTagFields()\nTaosFieldE[] GetColFields()\nvoid BindRow(object[] row)\nvoid BindColumn(TaosFieldE[] fields, params Array[] arrays)\nvoid AddBatch()\nvoid Exec()\nlong Affected()\nIRows Result()\n```\n\n----------------------------------------\n\nTITLE: Creating MNode in TDengine Cluster\nDESCRIPTION: This command creates a management node (mnode) on a given dnode within the TDengine cluster, which aids in coordination and management. The command `create mnode on dnode <dnodeId>` requires replacing `<dnodeId>` with the actual node ID retrieved from the dnodes list.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/01-manual.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate mnode on dnode <dnodeId>\n```\n\nLANGUAGE: sql\nCODE:\n```\nshow mnodes;\n```\n\n----------------------------------------\n\nTITLE: Loading Required R Libraries\nDESCRIPTION: Imports necessary R libraries including DBI, rJava, and RJDBC for database connectivity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/43-r-lang.md#2025-04-16_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(DBI)\nlibrary(rJava)\nlibrary(RJDBC)\n```\n\n----------------------------------------\n\nTITLE: Column Definition Syntax\nDESCRIPTION: Defines the syntax for creating column definitions in stream computing, including column name, type, and optional comment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ncreate_definition:\n    col_name column_definition\ncolumn_definition:\n    type_name [COMMENT 'string_value']\n```\n\n----------------------------------------\n\nTITLE: Add Tag to a Table using Transform\nDESCRIPTION: This command shows how to add a tag to a table using the `--transform` option in taosX. It demonstrates the syntax for adding a tag with a specific value during data synchronization.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n\"-T add-tag:<tag1>=<value1>\"\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Command Library - CMake\nDESCRIPTION: Links the command library with its dependencies, ensuring it has access to necessary external libraries for its functionality. Dependencies include various components required for the command library's operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n        command\n        PRIVATE os util nodes catalog function transport qcom scheduler decimal\n)\n```\n\n----------------------------------------\n\nTITLE: Aggregate Function Interface Definition in C\nDESCRIPTION: This code defines the interface functions for aggregate functions in C within TDengine. It includes functions for initializing the result buffer (`aggfn_start`), updating intermediate results (`aggfn`), and generating the final result (`aggfn_finish`). These functions enable grouping and calculating data to generate summary information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint32_t aggfn_start(SUdfInterBuf *interBuf);\nint32_t aggfn(SUdfDataBlock* inputBlock, SUdfInterBuf *interBuf, SUdfInterBuf *newInterBuf);\nint32_t aggfn_finish(SUdfInterBuf* interBuf, SUdfInterBuf *result);\n```\n\n----------------------------------------\n\nTITLE: PERF_CONSUMERS Table Structure in TDengine\nDESCRIPTION: Defines the structure of the PERF_CONSUMERS table that stores information about message consumers, including consumer groups, status, and subscription details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/23-perf.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE PERF_CONSUMERS (\n  consumer_id BIGINT,\n  consumer_group BINARY(192),\n  client_id BINARY(192),\n  status BINARY(20),\n  topics BINARY(204),\n  up_time TIMESTAMP,\n  subscribe_time TIMESTAMP,\n  rebalance_time TIMESTAMP\n)\n```\n\n----------------------------------------\n\nTITLE: Model Directory Structure\nDESCRIPTION: This snippet shows the directory structure required for the anomaly detection model.  It indicates that the `sample-ad-autoencoder` directory should contain the `.keras` model file and the `.info` file. This setup is necessary for TDengine to correctly load and use the model for anomaly detection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/04-machine-learning.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n.\n└── model\n    └── sample-ad-autoencoder\n        ├── sample-ad-autoencoder.keras\n        └── sample-ad-autoencoder.info\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Ingress for TDengine Explorer\nDESCRIPTION: YAML configuration for creating an Ingress resource to expose the TDengine Explorer service externally. This allows users to access the Explorer interface from outside the Kubernetes cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# This is a helm chart example for deploying 3 replicas of TDengine Explorer\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: replica3-ingress\n  namespace: default\nspec:\n  rules:\n    - host: replica3.local.tdengine.com\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name:  replica3-tdengine-taosx\n                port:\n                  number: 6060\n```\n\n----------------------------------------\n\nTITLE: Viewing All Views in a Database in TDengine SQL\nDESCRIPTION: Command to list all views under a specified database or the current database if not specified.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [db_name.]VIEWS;\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Write Cache Configuration in TDengine SQL\nDESCRIPTION: SQL command to create a database with 10 vgroups and 256MB buffer per vnode. Includes cache model configuration and page settings for memory management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/10-cache.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE POWER VGROUPS 10 BUFFER 256 CACHEMODEL 'NONE' PAGES 128 PAGESIZE 16;\n```\n\n----------------------------------------\n\nTITLE: Custom Authorization Code Response in TDengine\nDESCRIPTION: Example of the response when obtaining a custom authorization code from TDengine's REST API.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"desc\": \"/KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04\"\n}\n```\n\n----------------------------------------\n\nTITLE: 创建超级表 SQL\nDESCRIPTION: 定义名为meters的超级表，包含时间戳、电流、电压和相位列，以及位置和分组ID标签\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/01-model.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE meters (\n    ts timestamp, \n    current float, \n    voltage int, \n    phase float\n) TAGS (\n    location varchar(64), \n    group_id int\n);\n```\n\n----------------------------------------\n\nTITLE: TDengine 2.x Response Format\nDESCRIPTION: Example of the response format in TDengine 2.x REST API, showing the structure of the returned JSON object.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/60-rest-api.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"succ\",\n  \"head\": [\n    \"name\",\n    \"created_time\",\n    \"ntables\",\n    \"vgroups\",\n    \"replica\",\n    \"quorum\",\n    \"days\",\n    \"keep1,keep2,keep(D)\",\n    \"cache(MB)\",\n    \"blocks\",\n    \"minrows\",\n    \"maxrows\",\n    \"wallevel\",\n    \"fsync\",\n    \"comp\",\n    \"precision\",\n    \"status\"\n  ],\n  \"data\": [\n    [\n      \"log\",\n      \"2020-09-02 17:23:00.039\",\n      4,\n      1,\n      1,\n      1,\n      10,\n      \"30,30,30\",\n      1,\n      3,\n      100,\n      4096,\n      1,\n      3000,\n      2,\n      \"us\",\n      \"ready\"\n    ]\n  ],\n  \"rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB and Other Optional Dependencies in CMake\nDESCRIPTION: Adds configuration for RocksDB and other optional dependencies like libuv, SQLite, and SSL/curl based on build options and platform.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_CONTRIB})\n    if(${BUILD_WITH_ROCKSDB})\n        cat(\"${TD_SUPPORT_DIR}/rocksdb_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n        add_definitions(-DUSE_ROCKSDB)\n    endif()\nelse()\n    if(NOT ${TD_LINUX})\n        if(${BUILD_WITH_ROCKSDB})\n            cat(\"${TD_SUPPORT_DIR}/rocksdb_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n            add_definitions(-DUSE_ROCKSDB)\n        endif(${BUILD_WITH_ROCKSDB})\n    else()\n        if(${BUILD_WITH_ROCKSDB})\n            add_definitions(-DUSE_ROCKSDB)\n        endif(${BUILD_WITH_ROCKSDB})\n    endif()\nendif()\n\n# libuv\nif(${BUILD_WITH_UV})\n    cat(\"${TD_SUPPORT_DIR}/libuv_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(${BUILD_WITH_UV})\n\n# sqlite\nif(${BUILD_WITH_SQLITE})\n    cat(\"${TD_SUPPORT_DIR}/sqlite_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(${BUILD_WITH_SQLITE})\n\n# libcurl\nif(NOT ${TD_WINDOWS})\n    file(MAKE_DIRECTORY $ENV{HOME}/.cos-local.2/)\n    cat(\"${TD_SUPPORT_DIR}/ssl_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    cat(\"${TD_SUPPORT_DIR}/curl_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(NOT ${TD_WINDOWS})\n```\n\n----------------------------------------\n\nTITLE: Accessing TDengine CLI\nDESCRIPTION: This command provides access to the TDengine Command Line Interface (CLI). The user needs to replace 'YourServerName' with the actual hostname or IP address of the TDengine server. This allows direct interaction with the database for executing queries and managing data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/packaging/tools/mac_install_summary.txt#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntaos -h YourServerName\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple UDF Libraries with Different Behaviors using CMake Foreach Loop\nDESCRIPTION: Uses a foreach loop to create multiple libraries from the same source but with different compile definitions, allowing testing of various UDF behavior scenarios.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(index RANGE 0 6)\n    list(GET TARGET_NAMES ${index} target_name)\n    list(GET COMPILE_DEFINITIONS ${index} compile_def)\n    add_library(${target_name} STATIC MODULE change_udf.c)\n    target_compile_definitions(${target_name} PRIVATE ${compile_def})\n    target_link_libraries(${target_name} PUBLIC os)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Including Connection Example - PHP\nDESCRIPTION: This snippet includes a PHP file that contains examples for establishing a native connection. The included file should contain relevant connection details and methods for successful interaction with the TDengine database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_php.mdx#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"\"\"php\\n{{#include docs/examples/php/connect.php}}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Getting ResultSet Concurrency Mode in Java\nDESCRIPTION: Method for retrieving the concurrency mode of the ResultSet. Always returns ResultSet.CONCUR_READ_ONLY, indicating that the result set cannot be updated. Throws SQLException if the result set is closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_60\n\nLANGUAGE: Java\nCODE:\n```\nint getConcurrency() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Library in CMake\nDESCRIPTION: The script sets up a CMake configuration for a static library named 'transport'. It specifies source directories, include paths, and links against libraries like lz4, os, and zlib. The script also conditionally includes the libuv library if certain build options are specified, utilizing 'add_definitions' to define a macro when 'USE_UV' is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/transport/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src TRANSPORT_SRC)\nadd_library(transport STATIC ${TRANSPORT_SRC})\ntarget_include_directories(\n  transport\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/transport\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n  transport\n  PUBLIC lz4_static\n  PUBLIC os\n  PUBLIC util\n  PUBLIC common\n  PUBLIC zlibstatic\n)\n\nif(${BUILD_WITH_UV_TRANS})\n  if(${BUILD_WITH_UV})\n    target_link_libraries(\n      transport\n      PUBLIC uv_a\n    )\n    add_definitions(-DUSE_UV)\n  endif(${BUILD_WITH_UV})\nendif(${BUILD_WITH_UV_TRANS})\n```\n\n----------------------------------------\n\nTITLE: Basic Schemaless Data Writing Method in TDengine JDBC\nDESCRIPTION: Method for writing multiple lines of data with specified protocol and timestamp types without TTL or request ID. Supports InfluxDB LINE, OpenTSDB TELNET, and OpenTSDB JSON protocols with various timestamp precisions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nvoid write(String[] lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Batch SQL Statement Addition in TDengine JDBC\nDESCRIPTION: Method to add a SQL statement to the current batch of commands for this Statement. Allows accumulating multiple SQL operations to be executed in a single batch for better performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nvoid addBatch(String sql) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Finding gtest Library for Testing\nDESCRIPTION: This snippet finds the necessary gtest header and library files for compiling the unit tests. It sets up the include directories and marks a message if the gtest library is found.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/os/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8...3.20)\nPROJECT(TDengine)\n\nFIND_PATH(HEADER_GTEST_INCLUDE_DIR gtest.h /usr/include/gtest /usr/local/include/gtest)\nFIND_LIBRARY(LIB_GTEST_STATIC_DIR libgtest.a /usr/lib/ /usr/local/lib /usr/lib64)\nFIND_LIBRARY(LIB_GTEST_SHARED_DIR libgtest.so /usr/lib/ /usr/local/lib /usr/lib64)\n\nIF(HEADER_GTEST_INCLUDE_DIR AND(LIB_GTEST_STATIC_DIR OR LIB_GTEST_SHARED_DIR))\n    MESSAGE(STATUS \"gTest library found, build os test\")\n\n    INCLUDE_DIRECTORIES(${HEADER_GTEST_INCLUDE_DIR})\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable in CMake\nDESCRIPTION: This snippet links necessary libraries to the 'sdbTest' executable. It declares that the executable has public dependencies on the 'sut' and 'sdb' libraries, ensuring that these libraries are included during linking and are available to consumers of 'sdbTest'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/sdb/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    sdbTest\n    PUBLIC sut\n    PUBLIC sdb\n)\n```\n\n----------------------------------------\n\nTITLE: Detecting Integer Types and Conversion Functions\nDESCRIPTION: Checks for various integer types and their sizes, and determines the appropriate conversion functions to use.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_type_size (__int64 __INT64)\ncheck_type_size (int64_t INT64_T)\ncheck_type_size (\"long long\" LONG_LONG_INT)\n\ncheck_type_size (int32_t INT32_T)\ncheck_type_size (__int32 __INT32)\ncheck_type_size (\"long\" LONG_INT)\ncheck_type_size (\"int\" INT)\n\ncheck_function_exists (strtoll HAVE_STRTOLL)\ncheck_function_exists (strtoq HAVE_STRTOQ)\ncheck_function_exists (_strtoi64 HAVE__STRTOI64)\n\nif (HAVE_STRTOLL)\n   set (JSON_STRTOINT strtoll)\nelseif (HAVE_STRTOQ)\n   set (JSON_STRTOINT strtoq)\nelseif (HAVE__STRTOI64)\n   set (JSON_STRTOINT _strtoi64)\nelse ()\n   set (JSON_STRTOINT strtol)\n   set (JSON_INT_T long)\n   set (JSON_INTEGER_FORMAT \"\\\"ld\\\"\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: JSON Parser Maximum Depth Configuration\nDESCRIPTION: Configuration macro defining maximum nesting depth for JSON arrays and objects to prevent stack exhaustion. Default value is 2048.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/conformance.rst#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define JSON_PARSER_MAX_DEPTH 2048\n```\n\n----------------------------------------\n\nTITLE: JSON response format for database creation\nDESCRIPTION: This JSON snippet shows the response format after creating a database in TDengine via the REST API.  The JSON includes the return code, column metadata for affected rows, the number of affected rows (which will be 0 in this case), and number of returned rows.  A code of 0 indicates success.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/60-rest-api.mdx#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"affected_rows\",\n            \"INT\",\n            4\n        ]\n    ],\n    \"data\": [\n        [\n            0\n        ]\n    ],\n    \"rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Schemaless Data Writing Interface in TDengine JDBC Driver\nDESCRIPTION: Abstract interface for writing schemaless data to TDengine using different protocol types (InfluxDB LINE, OpenTSDB TELNET, OpenTSDB JSON) and timestamp formats. Includes methods for single line, multiple lines, and raw data writing with optional TTL specification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nabstract void write(String[] lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType, Integer ttl, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Executing Database Query in TDengine CLI - Text\nDESCRIPTION: This snippet demonstrates how to execute a query to show databases within the TDengine CLI. The output format includes database metadata such as creation time and table information. Users are expected to have access to the TDengine service before executing this command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_verify_windows.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n              name              |       create_time       | vgroups |        ntables        | replica | strict |  duration  |              keep              |   buffer    |  pagesize   |    pages    |   minrows   |   maxrows   | comp | precision |   status   |           retention            | single_stable | cachemodel  |  cachesize  | wal_level | wal_fsync_period | wal_retention_period |  wal_retention_size   |\n===============================================================================================================================================================================================================================================================================================================================================================================================================================\n information_schema             | NULL                    |    NULL |                    14 |    NULL | NULL   | NULL       | NULL                           |        NULL |        NULL |        NULL |        NULL |        NULL | NULL | NULL      | ready      | NULL                           | NULL          | NULL        |        NULL |      NULL |             NULL |                 NULL |                  NULL |\n performance_schema             | NULL                    |    NULL |                     3 |    NULL | NULL   | NULL       | NULL                           |        NULL |        NULL |        NULL |        NULL |        NULL | NULL | NULL      | ready      | NULL                           | NULL          | NULL        |        NULL |      NULL |             NULL |                 NULL |                  NULL |\n test                           | 2022-08-04 16:46:40.506 |       2 |                     0 |       1 | off    | 14400m     | 5256000m,5256000m,5256000m     |          96 |           4 |         256 |         100 |        4096 |    2 | ms        | ready      | NULL                           |         false | none        |           1 |         1 |             3000 |                    0 |                     0 |               0 |                     0 |\nQuery OK, 3 rows in database (0.123000s)\n\ntaos>\n```\n\n----------------------------------------\n\nTITLE: Executing TDengine mnode Basic Tests in Shell\nDESCRIPTION: A series of shell commands to run basic tests for the mnode component of TDengine using the test.sh script.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/jenkins/clusterCase.txt#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./test.sh -f tsim/mnode/basic1.sim\n./test.sh -f tsim/mnode/basic2.sim\n./test.sh -f tsim/mnode/basic3.sim\n./test.sh -f tsim/mnode/basic4.sim\n./test.sh -f tsim/mnode/basic5.sim\n```\n\n----------------------------------------\n\nTITLE: Setting a Binary value in Param object\nDESCRIPTION: This function sets a Binary value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Binary value (`value` as a byte slice) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_58\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetBinary(offset int, value []byte)\"\n```\n\n----------------------------------------\n\nTITLE: Starting a Static Web Server with Python\nDESCRIPTION: This Python command starts a static web server on port 8081 to serve HTML resources, such as prsp-viewer.html, allowing users to access visualized data in a browser.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/02-perspective.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -m http.server 8081\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking of DM Module\nDESCRIPTION: This snippet conditionally links the `dm_static` library to `mgmt_dnode` based on the `BUILD_DM_MODULE` flag. If `BUILD_DM_MODULE` is not defined, it links `dm_static`; otherwise, it skips linking.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_dnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT BUILD_DM_MODULE)\n  MESSAGE(STATUS \"NOT BUILD_DM_MODULE\")\n  target_link_directories(\n    mgmt_dnode\n    PUBLIC \"${TD_SOURCE_DIR}/deps/${TD_DEPS_DIR}/dm_static\"\n  )\nelse()\n  MESSAGE(STATUS \"BUILD_DM_MODULE\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building TDengine Nodes Library in CMake\nDESCRIPTION: This CMake script builds the nodes static library for TDengine. It collects source files from the src directory, sets up include paths for public and private headers, links against required dependencies (os, util, common, qcom, function), and conditionally adds test directories when BUILD_TEST is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/nodes/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src NODES_SRC)\nadd_library(nodes STATIC ${NODES_SRC})\ntarget_include_directories(\n    nodes\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/nodes\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n    nodes\n    PRIVATE os util common qcom function\n)\n\nif(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring gTest Build Settings in CMake\nDESCRIPTION: Sets up include directories and source files for gTest if the library is found. This conditional block ensures that the test build is only configured when gTest is available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/taosc_test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF(HEADER_GTEST_INCLUDE_DIR AND(LIB_GTEST_STATIC_DIR OR LIB_GTEST_SHARED_DIR))\n    MESSAGE(STATUS \"gTest library found, build os test\")\n\n    INCLUDE_DIRECTORIES(${HEADER_GTEST_INCLUDE_DIR})\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional building of terrorTest executable\nDESCRIPTION: This snippet conditionally builds the `terrorTest` executable if the `${TD_LINUX}` variable is set. It creates the executable from `terrorTest.cpp` and links it against the `os`, `util`, `common`, and `gtest_main` libraries. An associated test is then added. It also copies the error code table file to the target directory after building.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(${TD_LINUX})\n    # terrorTest\n    add_executable(terrorTest \\\"terrorTest.cpp\\\")\n    target_link_libraries(terrorTest os util common gtest_main)\n    add_test(\n        NAME terrorTest\n        COMMAND terrorTest\n    )\n\n    # config\n    SET(ERR_TBL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/errorCodeTable.ini)\n    add_custom_command(TARGET terrorTest POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${ERR_TBL_FILE} $<TARGET_FILE_DIR:terrorTest>\n    )\n\n    # memPoolTest\n    add_executable(memPoolTest \\\"memPoolTest.cpp\\\")\n    target_link_libraries(memPoolTest os util common gtest_main)\n    # add_test(\n    #     NAME memPoolTest\n    #     COMMAND memPoolTest\n    # )\n\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Granting Database Permissions\nDESCRIPTION: SQL commands for granting read, write, or all permissions on databases, tables, and super tables with optional tag filtering\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/14-user.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ngrant privileges on resources [with tag_filter] to user_name\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant read on power to test\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on power.meters to test\n```\n\nLANGUAGE: sql\nCODE:\n```\ngrant all on power.meters with groupId=1 to test\n```\n\n----------------------------------------\n\nTITLE: Define Source Directory and Create Library\nDESCRIPTION: This snippet defines the source directory for the mgmt_dnode library and adds the library using the source files defined in MGMT_DNODE.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_dnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src MGMT_DNODE)\nadd_library(mgmt_dnode STATIC ${MGMT_DNODE})\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Kafka\nDESCRIPTION: This script downloads the Apache Kafka distribution, extracts it to the `/opt/` directory, and creates a symbolic link for easier access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -O https://archive.apache.org/dist/kafka/3.4.0/kafka_2.13-3.4.0.tgz\ntar xzf kafka_2.13-3.4.0.tgz -C /opt/\nln -s /opt/kafka_2.13-3.4.0 /opt/kafka\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Node Management in CMake\nDESCRIPTION: This snippet adds subdirectories for various node management utilities in the TDengine project, organizing the directory structure for better modularity. Each subdirectory likely contains its own set of CMakeLists to manage specific functionalities related to different node types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(node_mgmt)\nadd_subdirectory(node_util)\nadd_subdirectory(mgmt_mnode)\nadd_subdirectory(mgmt_qnode)\nadd_subdirectory(mgmt_snode)\nadd_subdirectory(mgmt_vnode)\nadd_subdirectory(mgmt_dnode)\nadd_subdirectory(test)\n```\n\n----------------------------------------\n\nTITLE: Building GitHub API Request URL in C\nDESCRIPTION: Code that formats the GitHub API URL using the provided command-line arguments (user and repository names). Uses snprintf to safely build the URL string.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nsnprintf(url, URL_SIZE, URL_FORMAT, argv[1], argv[2]);\n```\n\n----------------------------------------\n\nTITLE: UDF Execution Error Example\nDESCRIPTION: TDengine CLI output showing a UDF execution failure. This happens when trying to use a UDF with incorrect parameters or when there are environment configuration issues.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\ntaos> select myfun(v1, v2) from t;\n\nDB error: udf function execution failure (0.011088s)\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Shared Library Installation\nDESCRIPTION: Displays the command to verify the presence of the library 'libtaospyudf.so' which is used in conjunction with UDFs in Python for TDengine post-installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nroot@server11 ~/udf $ ls -l /usr/local/lib/libtaos*\n```\n\n----------------------------------------\n\nTITLE: Holt-Winters FORECAST JSON response\nDESCRIPTION: This JSON5 snippet describes the structure of the response returned by the FORECAST function when using Holt-Winters. It includes fields for the number of rows, the period used for the forecast, the algorithm name, the mean squared error (MSE), and the forecast results in a column format.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/03-holtwinters.md#2025-04-16_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n\"{\n\\\"rows\\\": fc_rows,  // Rows returned\n\\\"period\\\": period, // Period of results (equivalent to input period; set to 0 if no periodicity)\n\\\"algo\\\": 'holtwinters' // Algorithm\n\\\"mse\\\": mse,       // Mean square error (MSE)\n\\\"res\\\": res        // Results in column format (typically returned as two columns, `timestamp` and `fc_results`.)\n}\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Enterprise Cryptography Implementation\nDESCRIPTION: Adds an enterprise-specific cryptography implementation source file when TD_ENTERPRISE flag is enabled\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/crypt/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_ENTERPRISE)\n  LIST(APPEND CRYPT_SRC ${TD_ENTERPRISE_DIR}/src/plugins/crypt/cryptImpl.c)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and testing Apache Avro\nDESCRIPTION: Commands for building, testing, and cleaning Apache Avro project using the build.sh script. These commands handle various tasks in the build process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/BUILD.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh test # runs tests for all languages\n./build.sh dist # creates all release distribution files in dist/\n./build.sh clean # removes all generated artifacts\n```\n\n----------------------------------------\n\nTITLE: Configuring MNode Test Executable in CMake for TDengine\nDESCRIPTION: This CMake snippet configures the build for a test executable named 'dmnodeTest'. It collects all source files from the current directory, creates an executable, and links it with the 'sut' library. There's also a commented-out section for registering the executable as a formal test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/test/mnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. DND_MNODE_TEST_SRC)\nadd_executable(dmnodeTest ${DND_MNODE_TEST_SRC})\ntarget_link_libraries(\n    dmnodeTest sut\n)\n\n#add_test(\n#    NAME dmnodeTest\n#    COMMAND dmnodeTest\n#)\n```\n\n----------------------------------------\n\nTITLE: Creating TDengine Function Static Library\nDESCRIPTION: Defines the main function library as a static library and specifies its source files from previously collected variables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(function STATIC ${FUNCTION_SRC} ${FUNCTION_SRC_DETAIL})\n```\n\n----------------------------------------\n\nTITLE: Ingesting Sample Data in Shell\nDESCRIPTION: Command to ingest sample forecasting data into TDengine using the taos shell.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ntaos -f sample-fc.sql\n```\n\n----------------------------------------\n\nTITLE: TDengine 2-Replica Configuration\nDESCRIPTION: Helm configuration for deploying TDengine with 2 replicas and an arbitrator\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"tdengine\"\n\nimage:\n  repository:\n  server: tdengine/tdengine-ee\n\ntimezone: \"Asia/Shanghai\"\n\nlabels:\n  my-app: \"tdengine\"\n\nservices:\n  arbitrator:\n    type: ClusterIP\n    volumes:\n      - name: arb-data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: arb-log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n  server:\n    type: ClusterIP\n    replica: 2\n    ports:\n      tcp: [6041, 6030, 6060]\n      udp:\n    volumes:\n      - name: data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [ \"ReadWriteOnce\" ]\n          resources:\n            requests:\n              storage: \"10Gi\"\n```\n\n----------------------------------------\n\nTITLE: Successful Next Sunday UDF Execution\nDESCRIPTION: TDengine CLI output showing successful execution of the next Sunday UDF after fixing module path issues. The UDF correctly calculates the date of the next Sunday for each timestamp input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_46\n\nLANGUAGE: sql\nCODE:\n```\ntaos> select ts, nextsunday(ts) from t;\n           ts            | nextsunday(ts) |\n===========================================\n 2023-05-01 12:13:14.000 | 2023-05-07     |\n 2023-05-03 08:09:10.000 | 2023-05-07     |\n 2023-05-10 07:06:05.000 | 2023-05-14     |\n 2023-05-25 09:09:15.000 | 2023-05-28     |\nQuery OK, 4 row(s) in set (1.011474s)\n```\n\n----------------------------------------\n\nTITLE: CAST Type Conversion Function in TDengine SQL\nDESCRIPTION: Converts values between different data types. Supports most types except JSON and VARBINARY. Handles type conversion with specific rules for handling invalid conversions and overflow scenarios.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\nCAST(expr AS type_name)\n```\n\n----------------------------------------\n\nTITLE: Defining Resolver.resolve Method for Schema Resolution in Java\nDESCRIPTION: This snippet introduces the key method of the proposed Resolver class, which takes writer and reader schemas and returns a Resolver.Action object representing the resolution logic.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/doc/src/content/mddocs/refactoring-resolution.md#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static Resolver.Action resolve(Schema writer, Schema reader);\n```\n\n----------------------------------------\n\nTITLE: JSON Array Example for Kafka Message Parsing\nDESCRIPTION: Sample JSON data in array format that can be parsed from Kafka messages. This example shows how multiple records can be sent in a single Kafka message as a JSON array.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/08-kafka.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\"id\": 1, \"message\": \"hello-word\"},{\"id\": 2, \"message\": \"hello-word\"}]\n```\n\n----------------------------------------\n\nTITLE: Configuring AVX2 Support for TDengine Function Library\nDESCRIPTION: Conditionally enables AVX2 instruction support for performance optimization. Sets specific compiler flags for tminmaxavx.c when AVX2 support is available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(COMPILER_SUPPORT_AVX2)\n    MESSAGE(STATUS \"AVX2 instructions is ACTIVATED\")\n    set_source_files_properties(src/detail/tminmaxavx.c PROPERTIES COMPILE_FLAGS -mavx2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running pytest with options\nDESCRIPTION: This snippet illustrates the basic usage of running pytest from the command line. It includes options for specifying which tests to run and how to format output, aiming to streamline executing specific test files or entire directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd test\npytest [options] [test_file_path]\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Synchronization Tests - CMake\nDESCRIPTION: This portion of the CMake file specifies include directories for the synchronization test targets to access necessary headers. The 'target_include_directories' command makes the specified include paths public to the target, allowing for proper function definitions and declarations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(syncTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncRaftIdCheck\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncEnvTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncPingTimerTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIOTickQTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIOTickPingTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIOSendMsgTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIOClientTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIOServerTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncRaftStoreTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncEnqTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIndexTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncInitTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncUtilTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncVotesGrantedTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncVotesRespondTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncIndexMgrTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncLogStoreTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncEntryTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncEntryCacheTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncHashCacheTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncRequestVoteTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(syncRequestVoteReplyTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n```\n\n----------------------------------------\n\nTITLE: Building a Static Monitor Library with CMake in TDengine\nDESCRIPTION: Configures and builds the monitor static library for TDengine. It collects source files from the src directory, sets up include paths, and defines library dependencies including os, util, common, qcom, transport, and monitorfw. Additionally includes test subdirectory when BUILD_TEST is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/monitor/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src MONITOR_SRC)\nadd_library(monitor STATIC ${MONITOR_SRC})\ntarget_include_directories(\n  monitor\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/monitor\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(monitor os util common qcom transport monitorfw)\n\nif(${BUILD_TEST})\n  add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Python UDF Initialization and Cleanup Interfaces\nDESCRIPTION: Details the interface functions 'init' and 'destroy' used for initialization and cleanup in Python UDFs for TDengine. Both functions must be defined.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndef init()\\ndef destroy()\n```\n\n----------------------------------------\n\nTITLE: Defining and linking rbtreeTest executable\nDESCRIPTION: This creates an executable named `rbtreeTest` from `trbtreeTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `rbtreeTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n\"# trbtreeTest\nadd_executable(rbtreeTest \\\"trbtreeTest.cpp\\\")\ntarget_link_libraries(rbtreeTest os util gtest_main)\nadd_test(\n    NAME rbtreeTest\n    COMMAND rbtreeTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Column Type Configuration Example\nDESCRIPTION: Example showing how to configure a column with count and name parameters. When name=\"current\" and count=3, generates columns: current, current_2, current_3\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"current\",\n  \"count\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Running taosKeeper Tests with Go\nDESCRIPTION: Command to execute all tests for taosKeeper in the TDengine/tools/keeper directory using Go test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo go test ./...\n```\n\n----------------------------------------\n\nTITLE: CMake: Add test (commented out)\nDESCRIPTION: This commented-out block defines a test case named `mqnodeTest`. The test will execute the `mqnodeTest` executable.  `add_test` integrates the executable into the testing framework (e.g., CTest).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/qnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"# add_test(\n#     NAME mqnodeTest\n#     COMMAND mqnodeTest\n# )\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Worker Source Directory\nDESCRIPTION: Identifies the source directory for the query worker library using aux_source_directory macro to collect source files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qworker/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src QWORKER_SRC)\n```\n\n----------------------------------------\n\nTITLE: Debug Build Configuration\nDESCRIPTION: Sets up compiler flags and linking options for debug builds, including sanitizer options and coverage flags when enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF (${TOOLS_BUILD_TYPE} MATCHES \"Debug\")\n    SET(CMAKE_C_FLAGS \"-Wall -Wshadow -std=c99 -std=gnu11 ${TOOLS_SANITIZE_FLAG} -O0 -g3 -DDEBUG0ww0 -Wformat=2 -Wno-format-nonliteral -Wno-format-truncation ${GCC_COVERAGE_COMPILE_FLAGS}\")\n    TARGET_LINK_LIBRARIES(taosdump taos avro jansson atomic pthread m  ${GCC_COVERAGE_LINK_FLAGS})\n    TARGET_LINK_LIBRARIES(taosBenchmark taos pthread m toolscJson  ${GCC_COVERAGE_LINK_FLAGS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite in CMake\nDESCRIPTION: Sets up comprehensive testing for the Jansson library, including API tests, suite tests, and optional valgrind memory checking. Defines test targets and provides a 'check' target that runs all tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\noption(JANSSON_WITHOUT_TESTS \"Don't build tests ('make test' to execute tests)\" OFF)\n\nif (NOT JANSSON_WITHOUT_TESTS)\n   option(JANSSON_TEST_WITH_VALGRIND \"Enable valgrind tests.\" OFF)\n\n   ENABLE_TESTING()\n\n   if (JANSSON_TEST_WITH_VALGRIND)\n      # TODO: Add FindValgrind.cmake instead of having a hardcoded path.\n\n      add_definitions(-DVALGRIND)\n\n      # enable valgrind\n      set(CMAKE_MEMORYCHECK_COMMAND valgrind)\n      set(CMAKE_MEMORYCHECK_COMMAND_OPTIONS\n         \"--error-exitcode=1 --leak-check=full --show-reachable=yes --track-origins=yes -q\")\n\n      set(MEMCHECK_COMMAND\n         \"${CMAKE_MEMORYCHECK_COMMAND} ${CMAKE_MEMORYCHECK_COMMAND_OPTIONS}\")\n      separate_arguments(MEMCHECK_COMMAND)\n   endif ()\n\n   #\n   # Test suites.\n   #\n   if (CMAKE_COMPILER_IS_GNUCC)\n      add_definitions(-Wall -Wextra -Wdeclaration-after-statement)\n   endif ()\n\n   set(api_tests\n         test_array\n         test_chaos\n         test_copy\n         test_dump\n         test_dump_callback\n         test_equal\n         test_fixed_size\n         test_load\n         test_load_callback\n         test_loadb\n         test_number\n         test_object\n         test_pack\n         test_simple\n         test_sprintf\n         test_unpack)\n\n   # Doing arithmetic on void pointers is not allowed by Microsofts compiler\n   # such as secure_malloc and secure_free is doing, so exclude it for now.\n   if (NOT MSVC)\n      list(APPEND api_tests test_memory_funcs)\n   endif()\n\n   # Helper macro for building and linking a test program.\n   macro(build_testprog name dir)\n       add_executable(${name} ${dir}/${name}.c)\n       add_dependencies(${name} jansson)\n       target_link_libraries(${name} jansson)\n   endmacro(build_testprog)\n\n   # Create executables and tests/valgrind tests for API tests.\n   foreach (test ${api_tests})\n      build_testprog(${test} ${CMAKE_CURRENT_SOURCE_DIR}/test/suites/api)\n\n      if (JANSSON_TEST_WITH_VALGRIND)\n         add_test(memcheck__${test}\n             ${MEMCHECK_COMMAND} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test}\n             WORKING_DIRECTORY ${JANSSON_TEMP_DIR})\n      else()\n         add_test(${test}\n             ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${test}\n             WORKING_DIRECTORY ${JANSSON_TEMP_DIR})\n      endif ()\n   endforeach ()\n\n   # Test harness for the suites tests.\n   build_testprog(json_process ${CMAKE_CURRENT_SOURCE_DIR}/test/bin)\n\n   set(SUITE_TEST_CMD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/json_process)\n   set(SUITES encoding-flags valid invalid invalid-unicode)\n   foreach (SUITE ${SUITES})\n       file(GLOB TESTDIRS test/suites/${SUITE}/*)\n\n       foreach (TESTDIR ${TESTDIRS})\n         if (IS_DIRECTORY ${TESTDIR})\n            get_filename_component(TNAME ${TESTDIR} NAME)\n\n            if (JANSSON_TEST_WITH_VALGRIND)\n               add_test(memcheck__${SUITE}__${TNAME}\n                        ${MEMCHECK_COMMAND} ${SUITE_TEST_CMD} ${TESTDIR})\n            else()\n               add_test(${SUITE}__${TNAME}\n                        ${SUITE_TEST_CMD} ${TESTDIR})\n            endif()\n\n            if ((${SUITE} STREQUAL \"valid\" OR ${SUITE} STREQUAL \"invalid\") AND NOT EXISTS ${TESTDIR}/nostrip)\n               if (JANSSON_TEST_WITH_VALGRIND)\n                  add_test(memcheck__${SUITE}__${TNAME}__strip\n                           ${MEMCHECK_COMMAND} ${SUITE_TEST_CMD} --strip ${TESTDIR})\n               else()\n                  add_test(${SUITE}__${TNAME}__strip\n                           ${SUITE_TEST_CMD} --strip ${TESTDIR})\n               endif()\n            endif ()\n         endif ()\n       endforeach ()\n   endforeach ()\n\n   if (JANSSON_COVERAGE)\n      SETUP_TARGET_FOR_COVERAGE(coverage coverage ctest)\n   endif ()\n\n   # Enable using \"make check\" just like the autotools project.\n   # By default cmake creates a target \"make test\"\n   add_custom_target(check COMMAND ${CMAKE_CTEST_COMMAND}\n                     DEPENDS json_process ${api_tests})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Example Icinga2 OpenTSDB Writer Configuration\nDESCRIPTION: This is an example configuration for the Icinga2 OpenTSDB writer, demonstrating how to set the host and port. In this case, it's configured to send data to localhost on port 6048.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_icinga2.mdx#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nobject OpenTsdbWriter \"opentsdb\" {\n  host = \"127.0.0.1\"\n  port = 6048\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Subdirectories in CMake\nDESCRIPTION: Adds multiple subdirectories to the build system, organizing different modules of the TDengine project including operating system, utilities, common libraries, client, and distributed node components\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(os)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(util)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(common)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(libs)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(client)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(dnode)\n```\n\n----------------------------------------\n\nTITLE: Native JDBC Connection URL\nDESCRIPTION: Example URL format for establishing a native JDBC connection to TDengine using TSDBDriver. Connects to taosdemo.com on port 6030 with specified credentials.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:TAOS://taosdemo.com:6030/power?user=root&password=taosdata\n```\n\n----------------------------------------\n\nTITLE: Create Database and Table in TDengine\nDESCRIPTION: This SQL code snippet creates a database named 'test' and a table named 'sensor_data' within that database. The table is designed to store sensor data with fields like timestamp, temperature, humidity, and various pollutant measurements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/09-emq-broker.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE test;\nUSE test;\nCREATE TABLE sensor_data (ts TIMESTAMP, temperature FLOAT, humidity FLOAT, volume FLOAT, pm10 FLOAT, pm25 FLOAT, so2 FLOAT, no2 FLOAT, co FLOAT, sensor_id NCHAR(255), area TINYINT, coll_time TIMESTAMP);\n```\n\n----------------------------------------\n\nTITLE: Importing taosRestful driver\nDESCRIPTION: This code snippet shows how to import the `taosRestful` driver for REST connections in Go. The blank identifier `_` is used to import the driver for its side effects (i.e., registering the driver).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"database/sql\"\n    _ \"github.com/taosdata/driver-go/v3/taosRestful\"\n)\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Export Sample\nDESCRIPTION: Sample output from the /metrics endpoint showing Prometheus-formatted monitoring data\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# HELP taos_cluster_info_connections_total \n# TYPE taos_cluster_info_connections_total counter\ntaos_cluster_info_connections_total{cluster_id=\"554014120921134497\"} 8\n# HELP taos_cluster_info_dbs_total \n# TYPE taos_cluster_info_dbs_total counter\ntaos_cluster_info_dbs_total{cluster_id=\"554014120921134497\"} 2\n# HELP taos_cluster_info_dnodes_alive \n# TYPE taos_cluster_info_dnodes_alive counter\ntaos_cluster_info_dnodes_alive{cluster_id=\"554014120921134497\"} 1\n# HELP taos_cluster_info_dnodes_total \n# TYPE taos_cluster_info_dnodes_total counter\ntaos_cluster_info_dnodes_total{cluster_id=\"554014120921134497\"} 1\n# HELP taos_cluster_info_first_ep \n# TYPE taos_cluster_info_first_ep gauge\ntaos_cluster_info_first_ep{cluster_id=\"554014120921134497\",value=\"tdengine:6030\"} 1\n# HELP taos_cluster_info_first_ep_dnode_id \n# TYPE taos_cluster_info_first_ep_dnode_id counter\ntaos_cluster_info_first_ep_dnode_id{cluster_id=\"554014120921134497\"} 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Data in TDengine CLI\nDESCRIPTION: These snippets interact with TDengine CLI to verify data collection from collectd. Commands are used to list databases, switch to the collectd database, show stable tables, and query memory values to confirm active data transfer. They expect a running TDengine instance and a configured connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/05-collectd.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n collectd                       |\nQuery OK, 3 row(s) in set (0.003266s)\n```\n\nLANGUAGE: text\nCODE:\n```\ntaos> use collectd;\nDatabase changed.\n```\n\nLANGUAGE: text\nCODE:\n```\ntaos> show stables;\n              name              |\n=================================\n load_1                         |\n memory_value                   |\n df_value                       |\n load_2                         |\n load_0                         |\n interface_1                    |\n irq_value                      |\n interface_0                    |\n entropy_value                  |\n swap_value                     |\nQuery OK, 10 row(s) in set (0.002236s)\n```\n\nLANGUAGE: text\nCODE:\n```\ntaos> select * from collectd.memory_value limit 10;\n              ts               |           value           |              host              |         type_instance          |           type           |\n=========================================================================================================================================================\n 2022-04-20 09:27:45.459653462 |        54689792.000000000 | shuduo-1804                    | buffered                       | memory                   |\n 2022-04-20 09:27:55.453168283 |        57212928.000000000 | shuduo-1804                    | buffered                       | memory                   |\n 2022-04-20 09:28:05.453004291 |        57942016.000000000 | shuduo-1804                    | buffered                       | memory                   |\n 2022-04-20 09:27:45.459653462 |      6381330432.000000000 | shuduo-1804                    | free                           | memory                   |\n 2022-04-20 09:27:55.453168283 |      6357643264.000000000 | shuduo-1804                    | free                           | memory                   |\n 2022-04-20 09:28:05.453004291 |      6349987840.000000000 | shuduo-1804                    | free                           | memory                   |\n 2022-04-20 09:27:45.459653462 |       107040768.000000000 | shuduo-1804                    | slab_recl                      | memory                   |\n 2022-04-20 09:27:55.453168283 |       107536384.000000000 | shuduo-1804                    | slab_recl                      | memory                   |\n 2022-04-20 09:28:05.453004291 |       107634688.000000000 | shuduo-1804                    | slab_recl                      | memory                   |\n 2022-04-20 09:27:45.459653462 |       309137408.000000000 | shuduo-1804                    | used                           | memory                   |\nQuery OK, 10 row(s) in set (0.010348s)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to C++ Unit Test with CMake\nDESCRIPTION: Demonstrates how to link necessary libraries to the backendTest target using CMake directives. Libraries like os, common, gtest, and others are linked to ensure proper compilation and execution of the backendTest executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/stream/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(\nbackendTest\nPUBLIC rocksdb\nPUBLIC os common gtest stream executor qcom index transport util\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine CLI on macOS\nDESCRIPTION: This snippet demonstrates connecting to the TDengine service using the `taos` command-line interface from a macOS terminal. The `show databases` command is then executed to list available databases.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/_verify_macos.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ taos\n\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n db                             |\nQuery OK, 3 rows in database (0.019154s)\n\ntaos>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project and GTest Dependencies\nDESCRIPTION: Sets up the CMake project and searches for Google Test library dependencies in standard system locations. Checks for both static and shared libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8...3.20)\nPROJECT(TDengine)\n\nFIND_PATH(HEADER_GTEST_INCLUDE_DIR gtest.h /usr/include/gtest /usr/local/include/gtest)\nFIND_LIBRARY(LIB_GTEST_STATIC_DIR libgtest.a /usr/lib/ /usr/local/lib /usr/lib64)\nFIND_LIBRARY(LIB_GTEST_SHARED_DIR libgtest.so /usr/lib/ /usr/local/lib /usr/lib64)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for ScalarTest\nDESCRIPTION: This snippet configures the include directories for the 'scalarTest' executable, allowing it to access necessary headers from both public and private libraries. This is crucial for compilation and linking processes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/scalar/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        scalarTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/scalar/\"\n        PUBLIC \"${TD_SOURCE_DIR}/source/libs/parser/inc\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/libs/scalar/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine DNode Settings\nDESCRIPTION: These settings configure the connectivity and identification of each dnode in the TDengine cluster. The `firstEp` attribute specifies the initial connection point for each node, while `fqdn` is used for setting the fully qualified domain name. `serverPort` dictates the port for the dnode, defaulting to 6030. Ensure that the `firstEp` is consistent across all dnodes while `fqdn` is unique to each node.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/01-manual.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# firstEp is the first dnode that each dnode connects to after the initial startup\nfirstEp h1.tdengine.com:6030\n# Must be configured to the FQDN of this dnode, if there is only one hostname on this machine, you can comment out or delete the following line\nfqdn h1.tdengine.com\n# Configure the port of this dnode, default is 6030\nserverPort 6030\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Installation Targets in CMake\nDESCRIPTION: Sets up installation targets for Snappy libraries, headers, and CMake configuration files if installation is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Must be included before CMAKE_INSTALL_INCLUDEDIR is used.\ninclude(GNUInstallDirs)\n\nif(SNAPPY_INSTALL)\n  install(TARGETS snappy\n    EXPORT SnappyTargets\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  )\n  install(\n    FILES\n      \"snappy-c.h\"\n      \"snappy-sinksource.h\"\n      \"snappy.h\"\n      \"${PROJECT_BINARY_DIR}/snappy-stubs-public.h\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n  )\n\n  include(CMakePackageConfigHelpers)\n  configure_package_config_file(\n    \"cmake/${PROJECT_NAME}Config.cmake.in\"\n    \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n  write_basic_package_version_file(\n    \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake\"\n    COMPATIBILITY SameMajorVersion\n  )\n  install(\n    EXPORT SnappyTargets\n    NAMESPACE Snappy::\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\n  install(\n    FILES\n      \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake\"\n      \"${PROJECT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  )\nendif(SNAPPY_INSTALL)\n```\n\n----------------------------------------\n\nTITLE: Defining the TDB Library with CMake\nDESCRIPTION: This snippet defines and configures the TDB library using CMake within the TDengine project. It specifies the library's source files, include directories, and its dependencies on other libraries such as os, util, and crypt. The configuration sets up TDB as a static library and includes support for building tests conditionally based on the BUILD_TEST flag.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# tdb\nadd_library(tdb STATIC \"\")\ntarget_sources(tdb\n    PRIVATE\n    \"src/db/tdbPCache.c\"\n    \"src/db/tdbPager.c\"\n    \"src/db/tdbUtil.c\"\n    \"src/db/tdbBtree.c\"\n    \"src/db/tdbDb.c\"\n    \"src/db/tdbTable.c\"\n    \"src/db/tdbTxn.c\"\n    \"src/db/tdbPage.c\"\n)\n\ntarget_include_directories(\n    tdb\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/src/inc\"\n)\ntarget_link_libraries(\n    tdb\n    PUBLIC os\n    PUBLIC util\n    PUBLIC crypt\n)\n\n# for test\nif(${BUILD_TEST})\n    add_subdirectory(test)\nendif(${BUILD_TEST})\n\n```\n\n----------------------------------------\n\nTITLE: Autoconf Bootstrap Command\nDESCRIPTION: Command to bootstrap the build system when building from source control.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/gettingstarted.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nautoreconf -fi\n```\n\n----------------------------------------\n\nTITLE: Installing RJDBC Package in R\nDESCRIPTION: This snippet details the installation of the RJDBC package from a specified CRAN repository. This package is essential for JDBC connectivity in R, enabling users to connect to databases like TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/R/command.txt#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ninstall.packages('rJDBC', repos='http://cran.us.r-project.org')\n```\n\n----------------------------------------\n\nTITLE: Python UDF System Path Output\nDESCRIPTION: Log output showing the Python system path used by the UDF plugin. This reveals which directories are searched for Python modules when executing UDFs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_43\n\nLANGUAGE: text\nCODE:\n```\n2023-05-25 10:58:48.554 INFO  [1679419] [doPyOpen@592] python sys path: ['', '/lib/python38.zip', '/lib/python3.8', '/lib/python3.8/lib-dynload', '/lib/python3/dist-packages', '/var/lib/taos//.udf']\n```\n\n----------------------------------------\n\nTITLE: SQL FORECAST Function Usage Example\nDESCRIPTION: Shows an example of using the `FORECAST` function without specifying an algorithm, which will use the default algorithm. It selects the lower bound, upper bound, timestamp, and forecast value from the `foo` table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/05-forecast/index.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ntaos> select _flow, _fhigh, _frowts, forecast(i32) from foo;\n        _flow         |        _fhigh        |       _frowts           | forecast(i32) |\n========================================================================================\n           10.5286684 |           41.8038254 | 2020-01-01 00:01:35.000 |            26 |\n          -21.9861946 |           83.3938904 | 2020-01-01 00:01:36.000 |            30 |\n          -78.5686035 |          144.6729126 | 2020-01-01 00:01:37.000 |            33 |\n         -154.9797363 |          230.3057709 | 2020-01-01 00:01:38.000 |            37 |\n         -253.9852905 |          337.6083984 | 2020-01-01 00:01:39.000 |            41 |\n         -375.7857971 |          466.4594727 | 2020-01-01 00:01:40.000 |            45 |\n         -514.8043823 |          622.4426270 | 2020-01-01 00:01:41.000 |            53 |\n         -680.6343994 |          796.2861328 | 2020-01-01 00:01:42.000 |            57 |\n         -868.4956665 |          992.8603516 | 2020-01-01 00:01:43.000 |            62 |\n        -1076.1566162 |         1214.4498291 | 2020-01-01 00:01:44.000 |            69 |\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Lemon Parsing\nDESCRIPTION: This snippet defines a custom command to generate SQL parser source files from Yacc files using the lemon tool. It specifies commands to copy and rename output files, and sets dependencies for ensuring the process is executed correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/parser/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n    OUTPUT ${TD_SOURCE_DIR}/source/libs/parser/src/sql.c ${TD_SOURCE_DIR}/include/common/ttokenauto.h\n    COMMAND echo \"Running lemon process in ${TD_SOURCE_DIR}/source/libs/parser/inc\"\n    COMMAND ${TD_CONTRIB_DIR}/lemon/lemon sql.y\n    COMMAND echo \"copy sql.c from ${TD_SOURCE_DIR}/source/libs/parser/inc/sql.c to ${TD_SOURCE_DIR}/source/libs/parser/src/\"\n    COMMAND mv ${TD_SOURCE_DIR}/source/libs/parser/inc/sql.c ${TD_SOURCE_DIR}/source/libs/parser/src/sql.c\n    COMMAND mv ${TD_SOURCE_DIR}/source/libs/parser/inc/sql.h ${TD_SOURCE_DIR}/include/common/ttokenauto.h\n    COMMAND echo \"lemon process completed.\"\n    DEPENDS ${TD_SOURCE_DIR}/source/libs/parser/inc/sql.y\n    WORKING_DIRECTORY ${TD_SOURCE_DIR}/source/libs/parser/inc\n    COMMENT \"Generating sql.c using lemon\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing CI Tests for TDengine\nDESCRIPTION: Command to run all CI test cases, which include unit tests, system tests, and legacy tests. This is typically used in continuous integration pipelines.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd tests\n./run_all_ci_cases.sh -b main # on main branch\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Region Parameters\nDESCRIPTION: Configuration parameters table for region-related settings in TDengine client driver\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/02-taosc.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name|Supported Version|Dynamic Modification|Description|\n|----------------------|----------|--------------------|-------------|\n| timezone       |                   |Supported, effective immediately  | Time zone; defaults to dynamically obtaining the current system time zone setting |\n| locale         |                   |Supported, effective immediately  | System locale and encoding format, defaults to system settings |\n| charset        |                   |Supported, effective immediately  | Character set encoding, defaults to system settings |\n```\n\n----------------------------------------\n\nTITLE: Taosdemo Usage Instructions\nDESCRIPTION: Details on how to execute the compiled Taosdemo executable using Mono or .NET with supported options for connecting to the TDengine database. Options include specifying host details, database credentials, table configurations, and insertion modes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/C#/taosdemo/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage with mono:\n$ mono taosdemo.exe [OPTION...]\n\nUsage with dotnet:\nUsage: .\\bin\\Release\\net5.0\\taosdemo.exe [OPTION...]\n\n        --help                   Show usage.\n\n        -h <hostname>            host, The host to connect to TDengine. Default is localhost.\n        -p <port>                port, The TCP/IP port number to use for the connection. Default is 0.\n        -u <username>            user, The user name to use when connecting to the server. Default is 'root'.\n        -P <password>            password, The password to use when connecting to the server. Default is 'taosdata'.\n        -d <dbname>              database, Destination database. Default is 'test'.\n        -a <replications>        replica, Set the replica parameters of the database, Default 1, min: 1, max: 5.\n        -m <table prefix>        table_prefix, Table prefix name. Default is 't'.\n        -M                       stable, Use super table.\n        -s <stable prefix>       stable_prefix, STable prefix name. Default is 'st'\n        -Q <DEFAULT | command>   query, Execute query command. set 'DEFAULT' means select * from each table\n        -T <number>              num_of_threads, The number of threads. Default is 10.\n        -r <number>              num_of_records_per_req, The number of records per request. Default is 1000.\n        -t <number>              num_of_tables, The number of tables. Default is 1.\n        -n <number>              num_of_records_per_table, The number of records per table. Default is 1.\n        -c <path>                config_directory, Configuration directory. Default is '/etc/taos/'.\n        -x                       flag, Insert only flag.\n        -O                       order, Insert mode--0: In order, 1: Out of order. Default is in order.\n        -R <number>              rate, Out of order data's rate--if order=1 Default 10, min: 0, max: 50.\n        -D <number>              Delete data methods 0: don't delete, 1: delete by table, 2: delete by stable, 3: delete by database.\n        -v                       Print verbose output\n        -g                       Print debug output\n        -y                       Skip read key for continous test, default is not skip\n```\n\n----------------------------------------\n\nTITLE: Implementing Deflate Compression Algorithm\nDESCRIPTION: The deflate algorithm, used in gzip, zip, and zlib, is a variation of LZ77. It finds duplicated strings in input data and replaces them with pointers. The algorithm uses Huffman trees for compression and a hash table for finding duplicates. It includes optimizations like lazy evaluation and truncation of long hash chains.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/algorithm.txt#2025-04-16_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\n1. Insert all input strings of length 3 into hash table\n2. Compute hash index for next 3 bytes\n3. If hash chain not empty, compare current input string with chain\n4. Select longest match\n5. If match found, use lazy evaluation to potentially find longer match\n6. Output match or literal byte\n7. Repeat from step 2 until end of input\n```\n\n----------------------------------------\n\nTITLE: TDengine Client/Connector Support Matrix - Markdown Table\nDESCRIPTION: Compatibility matrix showing support for various programming languages and platforms across different operating systems and CPU architectures for TDengine clients and connectors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/07-supported.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **CPU**     | **X64 64bit** | **X64 64bit** | **X64 64bit** | **ARM64** | **ARM64** |\n| ----------- | ------------- | ------------- | ------------- | --------- | --------- |\n| **OS**      | **Linux**     | **Win64**     | **macOS**     | **Linux** | **macOS** |\n| **C/C++**   | ●             | ●             | ●             | ●         | ●         |\n| **JDBC**    | ●             | ●             | ●             | ●         | ●         |\n| **Python**  | ●             | ●             | ●             | ●         | ●         |\n| **Go**      | ●             | ●             | ●             | ●         | ●         |\n| **NodeJs**  | ●             | ●             | ●             | ●         | ●         |\n| **C#**      | ●             | ●             | ○             | ●         | ○         |\n| **Rust**    | ●             | ●             | ●             | ○         | ●         |\n| **RESTful** | ●             | ●             | ●             | ●         | ●         |\n```\n\n----------------------------------------\n\nTITLE: Show Dnodes in TDengine CLI\nDESCRIPTION: This snippet demonstrates how to use the TDengine CLI to display information about the dnodes (data nodes) in the cluster. It uses the show dnodes command to retrieve details like endpoint, status, and create time for each dnode. This is useful for verifying the cluster's configuration and monitoring the status of individual nodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"taos> show dnodes;\n id | endpoint | vnodes|support_vnodes|status| create_time | note |\n===================================================================================\n 1| h1.taosdata.com:6030 | 0| 1024| ready| 2022-07-16 10:50:42.673 | |\"\n```\n\n----------------------------------------\n\nTITLE: Diagramming vnodeApplyReqs() Function in TDengine using PlantUML\nDESCRIPTION: This PlantUML diagram shows the vnodeApplyReqs() function in TDengine, which is responsible for processing requests in a VNODE. It illustrates the process of copying requests, pushing to TQ, applying META or TS requests, and committing changes when necessary.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/vnode_write.md#2025-04-16_snippet_3\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml vnodeApplyReqs()\nskinparam sequenceMessageAlign left\nskinparam responseMessageBelowArrow true\n\nparticipant VNODE as vnode\nparticipant TQ as tq\nparticipant TSDB as tsdb\nparticipant META as meta\n\ngroup vnodeApplyReqs()\n    autonumber\n    loop nReqs\n        ' Copy request message to vnode buffer pool\n        vnode -> vnode: vnodeCopyReq()\n        note right\n        copy request to \n        vnode buffer pool\n        end note\n\n        vnode -> tq: tqPush()\n        note right\n        push the request \n        to TQ so consumers \n        can consume\n        end note\n        alt META_REQ\n            autonumber 3\n            vnode -> meta: metaApplyReq()\n        else TS_REQ\n            autonumber 3\n            vnode -> tsdb: tsdbApplyReq()\n        end\n\n    end\n\n    ' Check if need to commit\n    alt vnode buffer pool is full\n        group vnodeCommit()\n            autonumber 4.1\n            vnode -> tq: tqCommit()\n            note right\n            tqCommit may renew wal\n            end note\n            vnode -> meta: metaCommit();\n            note right\n            commit meta data\n            end note\n            vnode -> tsdb: tsdbCommit();\n            note right\n            commit time-series data\n            end note\n        end\n    end\nend\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Adding Flags Parameter to Jansson Decoding Functions in C\nDESCRIPTION: Example showing how to add the new required flags parameter to json_loads() when upgrading from Jansson 1.x to 2.0. The new parameter should be set to 0 for maintaining the same behavior as in 1.x.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/upgrading.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* old code */\njson_loads(input, &error);\n\n/* new code */\njson_loads(input, 0, &error);\n```\n\n----------------------------------------\n\nTITLE: Multiple Results Handling in TDengine JDBC\nDESCRIPTION: Method to move to the next result in a Statement that may return multiple results. Returns true if the next result is a ResultSet, false if it's an update count or no more results exist.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nboolean getMoreResults() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Model Directory Structure for TDgpt\nDESCRIPTION: Demonstrates the recommended directory structure for saving machine learning model files in TDgpt, specifically for the sample anomaly detection model\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/03-ml/index.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n└── model\n    └── sample-ad-autoencoder\n        ├── sample-ad-autoencoder.keras\n        └── sample-ad-autoencoder.info\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Replica TDengine Deployment in Kubernetes\nDESCRIPTION: YAML configuration for deploying a 3-replica TDengine cluster. This example demonstrates how to set up a more robust TDengine deployment with multiple nodes for high availability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# This example shows how to deploy a 3-replica TDengine cluster with separate taosx/explorer service.\n# Users should know that the explorer/taosx service is not cluster-ready, so it is recommended to deploy it separately.\nname: \"tdengine\"\n\nimage:\n  repository: # Leave a trailing slash for the repository, or \"\" for no repository\n  server: tdengine/tdengine:latest\n\n# Set timezone here, not in taoscfg\ntimezone: \"Asia/Shanghai\"\n\nlabels:\n  # Add more labels as needed.\n\nservices:\n  server:\n    type: ClusterIP\n    replica: 3\n    ports:\n      # TCP range required\n      tcp: [6041, 6030]\n      # UDP range, optional\n      udp:\n    volumes:\n      - name: data\n        mountPath: /var/lib/taos\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: \"10Gi\"\n      - name: log\n        mountPath: /var/log/taos/\n        spec:\n          storageClassName: \"local-path\"\n          accessModes: [\"ReadWriteOnce\"]\n          resources:\n            requests:\n              storage: \"10Gi\"\n```\n\n----------------------------------------\n\nTITLE: Building TDengine with Test Options\nDESCRIPTION: Commands to build TDengine with options enabled for testing, including tools, test suites, and contrib modules. This is a prerequisite step before running the tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd debug\ncmake .. -DBUILD_TOOLS=true -DBUILD_TEST=true -DBUILD_CONTRIB=true\nmake && make install\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate Functions SQL\nDESCRIPTION: SQL syntax template for creating aggregate functions with buffer size specification.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_50\n\nLANGUAGE: sql\nCODE:\n```\nCREATE [OR REPLACE] AGGREGATE FUNCTION function_name library_path OUTPUTTYPE output_type BUFSIZE buffer_size LANGUAGE 'Python';\n```\n\n----------------------------------------\n\nTITLE: Checking UDF Creation Result in TDengine CLI\nDESCRIPTION: Shell output showing the successful creation of a UDF function in TDengine CLI. The system response confirms the operation was completed successfully.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ntaos> create function myfun as '/root/udf/myfun.py' outputtype double language 'Python';\nCreate OK, 0 row(s) affected (0.005202s)\n```\n\n----------------------------------------\n\nTITLE: Finding gTest library\nDESCRIPTION: This snippet uses CMake's `FIND_PATH` and `FIND_LIBRARY` commands to locate the gTest include directory and library (static and shared) on the system. It searches in standard locations like `/usr/include/gtest`, `/usr/lib/`, and `/usr/local/lib`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"FIND_PATH(HEADER_GTEST_INCLUDE_DIR gtest.h /usr/include/gtest /usr/local/include/gtest)\nFIND_LIBRARY(LIB_GTEST_STATIC_DIR libgtest.a /usr/lib/ /usr/local/lib /usr/lib64)\nFIND_LIBRARY(LIB_GTEST_SHARED_DIR libgtest.so /usr/lib/ /usr/local/lib /usr/lib64)\"\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine service on Linux\nDESCRIPTION: Starts the TDengine service using systemctl after installation on Linux.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start taosd\n```\n\n----------------------------------------\n\nTITLE: Running TDgpt Docker Container (Full Version)\nDESCRIPTION: Command to start a Docker container with the full TDgpt image, exposing necessary ports.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -p 6090:6090 -p 5000:5000 -p 5001:5001 tdengine/tdengine-tdgpt-full:3.3.6.0\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies in CMake\nDESCRIPTION: This snippet links the planner library with other necessary libraries, defining which are public and private. It ensures that dependencies are available as required for the build.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    planner\n    PRIVATE os util nodes catalog cjson parser function qcom scalar index\n    PUBLIC transport\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for mgmt_dnode\nDESCRIPTION: This snippet sets the include directories for the `mgmt_dnode` library. It includes the current source directory's `inc` folder and the `GRANT_CFG_INCLUDE_DIR` if defined.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_dnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  mgmt_dnode\n  PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n  PUBLIC \"${GRANT_CFG_INCLUDE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Library named qcom\nDESCRIPTION: Creates a static library named `qcom` using the source files listed in the `QUERY_SRC` variable. The `add_library` command specifies that `qcom` is a static library and uses the files in `QUERY_SRC` to build the library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(qcom STATIC ${QUERY_SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the `decimalTest` target. It specifies both public and private include directories.  `TD_SOURCE_DIR` is assumed to be a predefined variable pointing to the TDengine source directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        decimalTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/decimal/\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a new Pytest test case\nDESCRIPTION: This Python snippet demonstrates the process of adding a new test case to the TDengine testing suite. It details importing necessary modules for a new test file and crafting a function with assertions to validate expected behaviors.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom new_test_framework.utils import tdLog, tdSql, etool\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Subdirectory Addition\nDESCRIPTION: Conditionally adds a test subdirectory when BUILD_TEST flag is enabled\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qworker/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Parameters for TDengine Benchmark Tool (JSON)\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up database-related parameters for the TDengine benchmark tool. It includes options for specifying the database name and whether to drop existing databases before insertion.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"dbinfo\": {\n  \"name\": \"database_name\",\n  \"drop\": \"yes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on CentOS 7/RHEL\nDESCRIPTION: Commands to install required dependency packages for building TaosTools on CentOS 7/RHEL systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y zlib-devel zlib-static xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libatomic-static libstdc++-static openssl-devel\n```\n\n----------------------------------------\n\nTITLE: Configuring Lucene Test Executable with CMake\nDESCRIPTION: This CMake snippet creates an executable named 'luceneTest', sets its source file, and links it with the Lucene++ library. It demonstrates how to configure a simple C++ project that uses Lucene for testing purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/lucene/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(luceneTest \"\")\ntarget_sources(luceneTest\n    PRIVATE\n    \"${CMAKE_CURRENT_SOURCE_DIR}/main.cpp\"\n)\ntarget_link_libraries(luceneTest lucene++)\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring nodesTest Executable with CMake\nDESCRIPTION: This CMake snippet builds an executable named 'nodesTest' from source files in the current source directory. It includes directories for header files, links necessary libraries, and adds a test case for the executable, but only if the target operating system is not Darwin (TD_DARWIN). It also sets the C++ standard to 11.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/nodes/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"build nodes unit test\")\n\nIF(NOT TD_DARWIN)\n    # GoogleTest requires at least C++11\n    SET(CMAKE_CXX_STANDARD 11)\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n    \n    ADD_EXECUTABLE(nodesTest ${SOURCE_LIST})\n    \n    TARGET_INCLUDE_DIRECTORIES(\n        nodesTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/nodes/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/nodes/inc\"\n    )\n    \n    TARGET_LINK_LIBRARIES(\n        nodesTest\n        PUBLIC os util common nodes qcom gtest\n    )\n    \n    add_test(\n        NAME nodesTest\n        COMMAND nodesTest\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring jemalloc memory allocator for TDengine\nDESCRIPTION: Sets up jemalloc memory allocator when enabled, using ExternalProject to build it from source with appropriate configuration options. It disables initial-exec-tls and sets the installation prefix.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(${JEMALLOC_ENABLED})\n    include(ExternalProject)\n    ExternalProject_Add(jemalloc\n        PREFIX \"jemalloc\"\n        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/jemalloc\n        BUILD_IN_SOURCE 1\n        CONFIGURE_COMMAND ./autogen.sh COMMAND ./configure --prefix=${CMAKE_BINARY_DIR}/build/ --disable-initial-exec-tls\n        BUILD_COMMAND ${MAKE}\n    )\n    INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/build/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Library Build with Symbol Versioning in CMake\nDESCRIPTION: Creates a shared library target for Jansson and configures symbol versioning using either --default-symver or --version-script linker options. Sets the version and soversion properties for proper library versioning.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(JANSSON_BUILD_SHARED_LIBS)\n   add_library(jansson SHARED\n      ${JANSSON_SRC}\n      ${JANSSON_HDR_PRIVATE}\n      ${JANSSON_HDR_PUBLIC}\n      src/jansson.def)\n\n# check if linker support --default-symver\n   list(APPEND CMAKE_REQUIRED_LIBRARIES \"-Wl,--default-symver\")\n   check_c_source_compiles(\n   \"\n   int main (void)\n   {\n      return 0;\n   }\n   \"\n   DSYMVER_WORKS\n   )\n   list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES \"-Wl,--default-symver\")\n\n   if (SYMVER_WORKS)\n      set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--default-symver\")\n   else()\n# some linkers may only support --version-script\n      file(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\" \"JANSSON_${JANSSON_SOVERSION} {\n    global:\n          *;\n};\n\")\n      list(APPEND CMAKE_REQUIRED_LIBRARIES \"-Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\")\n      check_c_source_compiles(\n   \"\n   int main (void)\n   {\n      return 0;\n   }\n   \"\n   VSCRIPT_WORKS\n   )\n      list(REMOVE_ITEM CMAKE_REQUIRED_LIBRARIES \"-Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\")\n      if (VSCRIPT_WORKS)\n         set(CMAKE_SHARED_LINKER_FLAGS \"-Wl,--version-script,${CMAKE_CURRENT_BINARY_DIR}/jansson.sym\")\n      endif()\n   endif()\n\n   set_target_properties(jansson PROPERTIES\n      VERSION ${JANSSON_VERSION}\n      SOVERSION ${JANSSON_SOVERSION})\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-In Lua in TDengine using CMake\nDESCRIPTION: The snippet provides commands necessary to configure TDengine to disable the built-in Lua feature by building with lua-disable flag. Ensure that cmake is installed and configured before running the commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/lua/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir debug && cd debug\ncmake .. -DBUILD_LUA=false && cmake --build .\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus components in MDX\nDESCRIPTION: This code snippet imports necessary components from the Docusaurus library. DocCardList is used to render a list of documentation cards, and useCurrentSidebarCategory is used to fetch the current sidebar category's items.  These are standard Docusaurus components used for dynamic content rendering.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/index.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in D0 Table using TDengine SQL\nDESCRIPTION: This query counts the total number of rows in the 'd0' table in TDengine. It uses the count(*) function to return a single value representing the total number of rows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/example/query-sqls.txt#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect count(*) from d0\n```\n\n----------------------------------------\n\nTITLE: Creating Battery Table in TDengine\nDESCRIPTION: Provides shell commands to create a TDengine table called 'battery' with timestamp and voltage columns along with a deviceId. This table serves as input for aggregate UDF functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncreate table battery(ts timestamp, vol1 float, vol2 float, vol3 float, deviceId varchar(16));\n```\n\n----------------------------------------\n\nTITLE: Configuring Seeq Data Source for Power Consumption\nDESCRIPTION: JSON configuration for setting up a Seeq data source to query power consumption data from TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"QueryDefinitions\": [\n        {\n            \"Name\": \"PowerNum\",\n            \"Type\": \"SIGNAL\",\n            \"Sql\": \"SELECT  ts, num FROM meters\",\n            \"Enabled\": true,\n            \"TestMode\": false,\n            \"TestQueriesDuringSync\": true,\n            \"InProgressCapsulesEnabled\": false,\n            \"Variables\": null,\n            \"Properties\": [\n                {\n                    \"Name\": \"Name\",\n                    \"Value\": \"Num\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Interpolation Method\",\n                    \"Value\": \"linear\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Maximum Interpolation\",\n                    \"Value\": \"2day\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                }\n            ],\n            \"CapsuleProperties\": null\n        }\n    ],\n    \"Type\": \"GENERIC\",\n    \"Hostname\": null,\n    \"Port\": 0,\n    \"DatabaseName\": null,\n    \"Username\": \"root\",\n    \"Password\": \"taosdata\",\n    \"InitialSql\": null,\n    \"TimeZone\": null,\n    \"PrintRows\": false,\n    \"UseWindowsAuth\": false,\n    \"SqlFetchBatchSize\": 100000,\n    \"UseSSL\": false,\n    \"JdbcProperties\": null,\n    \"GenericDatabaseConfig\": {\n        \"DatabaseJdbcUrl\": \"jdbc:TAOS-RS://127.0.0.1:6041/power?user=root&password=taosdata\",\n        \"SqlDriverClassName\": \"com.taosdata.jdbc.rs.RestfulDriver\",\n        \"ResolutionInNanoseconds\": 1000,\n        \"ZonedColumnTypes\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Wide Integer Library\nDESCRIPTION: Adds a static library named wideInteger using discovered source files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/src/detail/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(wideInteger STATIC ${WIDE_INTEGER_SRC})\n```\n\n----------------------------------------\n\nTITLE: Creating an Encrypted Database in TDengine\nDESCRIPTION: This SQL command creates a new database with optional encryption parameters. Users can specify the encryption algorithm, such as 'sm4', for securing data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/16-security.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ncreate database [if not exists] db_name [database_options]\ndatabase_options:\n database_option ...\ndatabase_option: {\n encrypt_algorithm {'none' |'sm4'}\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files in CMake for TDengine Function Library\nDESCRIPTION: Collects source files from multiple directories and removes a specific file (udfd.c) that will be built separately. This prepares the source file list for the main function library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src FUNCTION_SRC)\naux_source_directory(src/detail FUNCTION_SRC_DETAIL)\nlist(REMOVE_ITEM FUNCTION_SRC src/udfd.c)\n```\n\n----------------------------------------\n\nTITLE: Executable Creation (tdbPageDefragmentTest)\nDESCRIPTION: This CMake snippet creates an executable named 'tdbPageDefragmentTest' and links it against the 'tdb' and 'gtest_main' libraries. This executable is used for page defragmentation testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tdbPageDefragmentTest \"tdbPageDefragmentTest.cpp\")\ntarget_link_libraries(tdbPageDefragmentTest tdb gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Native TDengine Header Inclusion\nDESCRIPTION: Include the primary TDengine header for native connection method, specifying standard include path\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_50\n\nLANGUAGE: c\nCODE:\n```\n#include <taos.h>\n```\n\n----------------------------------------\n\nTITLE: Defining Executables for TDengine Project in CMake\nDESCRIPTION: This snippet defines multiple executables for the TDengine project using the add_executable() command. It includes various TMQ demos, tests, and utility programs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/test/c/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(tmq_demo tmqDemo.c)\nadd_dependencies(tmq_demo ${TAOS_NATIVE_LIB})\nadd_executable(tmq_sim tmqSim.c)\nadd_executable(create_table createTable.c)\nadd_executable(tmq_taosx_ci tmq_taosx_ci.c)\nadd_executable(tmq_ts5466 tmq_ts5466.c)\nadd_executable(tmq_td32526 tmq_td32526.c)\nadd_executable(tmq_td32187 tmq_td32187.c)\nadd_executable(tmq_ts5776 tmq_ts5776.c)\nadd_executable(tmq_ts6115 tmq_ts6115.c)\nadd_executable(tmq_td32471 tmq_td32471.c)\nadd_executable(tmq_td33798 tmq_td33798.c)\nadd_executable(tmq_poll_test tmq_poll_test.c)\nadd_executable(tmq_write_raw_test tmq_write_raw_test.c)\nadd_executable(write_raw_block_test write_raw_block_test.c)\nadd_executable(sml_test sml_test.c)\nadd_executable(get_db_name_test get_db_name_test.c)\nadd_executable(tmq_offset tmqOffset.c)\nadd_executable(tmq_multi_thread_test tmq_multi_thread_test.c)\nadd_executable(tmq_offset_test tmq_offset_test.c)\nadd_executable(varbinary_test varbinary_test.c)\nadd_executable(replay_test replay_test.c)\nadd_executable(timezone_test timezone_test.c)\n\nif(${TD_LINUX})\n    add_executable(tsz_test tsz_test.c)\nendif(${TD_LINUX})\n```\n\n----------------------------------------\n\nTITLE: Building TDengine Stable Table Test Executable with CMake\nDESCRIPTION: Configures the build process for the stable table test (stbTest) executable. It collects source files from the current directory, creates the executable, links it with the 'sut' library, and adds a test execution target that runs only on non-Windows platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/stb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(. MNODE_STB_TEST_SRC)\nadd_executable(stbTest ${MNODE_STB_TEST_SRC})\ntarget_link_libraries(\n    stbTest\n    PUBLIC sut\n)\n\nif(NOT ${TD_WINDOWS})\n    add_test(\n        NAME stbTest\n        COMMAND stbTest\n    )\nendif(NOT ${TD_WINDOWS})\n```\n\n----------------------------------------\n\nTITLE: JSON Object Example for Kafka Message Parsing\nDESCRIPTION: Sample JSON data in object format that can be parsed from Kafka messages. This example shows how individual JSON objects are structured when sent as separate messages in Kafka.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/08-kafka.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"id\": 1, \"message\": \"hello-word\"}\n{\"id\": 2, \"message\": \"hello-word\"}\n```\n\n----------------------------------------\n\nTITLE: Linking zlib to taosBenchmark\nDESCRIPTION: This snippet adds the z library as a dependency to the taosBenchmark executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(taosBenchmark z)\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine Submodules to CMake Build\nDESCRIPTION: Configures CMake to include two subdirectories ('impl' and 'sdb') in the build process. These directories likely contain implementation details and storage database components of the TDengine project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(impl)\nadd_subdirectory(sdb)\n```\n\n----------------------------------------\n\nTITLE: Including Required Headers for GitHub Commits Program\nDESCRIPTION: Include statements for the necessary headers: string.h for string manipulation functions and jansson.h for JSON parsing functionality provided by the Jansson library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h>\n#include <jansson.h>\n```\n\n----------------------------------------\n\nTITLE: Shell Library Dependencies Configuration\nDESCRIPTION: Configures additional library dependencies and include directories for the shell executable. Sets the output name of the shell target to 'taos'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/shell/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n    shell\n    PUBLIC ${LINK_WEBSOCKET}\n    PRIVATE os common transport geometry util\n)\n\ntarget_include_directories(\n    shell\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\nSET_TARGET_PROPERTIES(shell PROPERTIES OUTPUT_NAME taos)\n```\n\n----------------------------------------\n\nTITLE: Installing .NET SDK on Ubuntu\nDESCRIPTION: Script to download and install the .NET SDK on Ubuntu 18.04. The script fetches the Microsoft package, installs it, and updates the package lists before installing the SDK.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/C#/taosdemo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nwget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb \\\n  && dpkg -i packages-microsoft-prod.deb \\\n  && rm packages-microsoft-prod.deb \\\n  && apt-get update && apt-get install -y dotnet-sdk-5.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Directory for Parser\nDESCRIPTION: This snippet sets the source directory for the parser. It appends the path to the parserView.c if TD_ENTERPRISE is defined, thereby allowing conditional compilation for enterprise features.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/parser/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src PARSER_SRC)\n\nIF(TD_ENTERPRISE)\n        LIST(APPEND PARSER_SRC ${TD_ENTERPRISE_DIR}/src/plugins/view/src/parserView.c)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Building and Registering DNode Query Node Test in CMake\nDESCRIPTION: This CMake snippet configures the dqnodeTest executable by collecting source files from the current directory, linking against the 'sut' library, and registering it as a test. It demonstrates the complete build configuration for a TDengine component test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/test/qnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. DND_QNODE_TEST_SRC)\nadd_executable(dqnodeTest ${DND_QNODE_TEST_SRC})\ntarget_link_libraries(\n    dqnodeTest\n    PUBLIC sut\n)\n\nadd_test(\n    NAME dqnodeTest\n    COMMAND dqnodeTest\n)\n```\n\n----------------------------------------\n\nTITLE: Viewing Query Nodes in TDengine SQL\nDESCRIPTION: Lists all query nodes in the cluster with their ID and associated dnode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSHOW QNODES;\n```\n\n----------------------------------------\n\nTITLE: Checking System Capabilities and Setting Compiler Flags\nDESCRIPTION: Performs various checks for system capabilities, header files, and functions. Sets compiler flags based on the results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude (CheckCSourceCompiles)\ninclude (CheckFunctionExists)\ninclude (CheckFunctionKeywords)\ninclude (CheckIncludeFiles)\ninclude (CheckTypeSize)\n\ncheck_c_compiler_flag(-Wno-format-truncation HAS_NO_FORMAT_TRUNCATION)\nif (HAS_NO_FORMAT_TRUNCATION)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-format-truncation\")\nendif()\n\nif (MSVC)\n   add_definitions( \"/W3 /D_CRT_SECURE_NO_WARNINGS /wd4005 /wd4996 /nologo\" )\n\n   if (JANSSON_STATIC_CRT)\n      set(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /MT\")\n      set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /MTd\")\n   endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linux-Specific Build Configuration\nDESCRIPTION: Configures build settings specific to Linux systems, including library imports and executable targets for taosdump and taosBenchmark.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    ADD_DEFINITIONS(-DLINUX)\n    EXECUTE_PROCESS (\n        COMMAND sh -c \"awk -F= '/^ID=/{print $2}' /etc/os-release |tr -d '\\n' | tr -d '\\\"'\"\n        OUTPUT_VARIABLE OS_ID\n    )\n    ADD_LIBRARY(jansson STATIC IMPORTED)\n    SET_PROPERTY(TARGET jansson PROPERTY IMPORTED_LOCATION\n        \"${CMAKE_BINARY_DIR}/build/lib/libjansson.a\")\n    ADD_LIBRARY(snappy STATIC IMPORTED)\n    SET_PROPERTY(TARGET snappy PROPERTY IMPORTED_LOCATION\n        \"${CMAKE_BINARY_DIR}/build/lib/libsnappy.a\")\n    ADD_EXECUTABLE(taosdump taosdump.c ../../src/pub.c dumpUtil.c toolstime.c toolsSys.c toolsDir.c toolsString.c)\n    ADD_EXECUTABLE(taosBenchmark benchMain.c benchLog.c benchTmq.c benchQuery.c benchCsv.c benchJsonOpt.c benchInsert.c benchInsertMix.c benchDataMix.c wrapDb.c benchData.c benchCommandOpt.c benchUtil.c ../../src/pub.c benchUtilDs.c benchSys.c toolstime.c toolsSys.c toolsString.c)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Using BINARY Type with Length in taosBenchmark\nDESCRIPTION: Demonstrates how to specify tag column types including BINARY with explicit length when benchmarking TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark -A INT,DOUBLE,NCHAR,BINARY(16)\n```\n\n----------------------------------------\n\nTITLE: Viewing Anodes in TDengine CLI\nDESCRIPTION: SQL command to display the FQDN and status of anodes in the TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSHOW ANODES;\n```\n\n----------------------------------------\n\nTITLE: Icinga2 OpenTSDB Writer Example Configuration\nDESCRIPTION: Example implementation of Icinga2's OpenTSDB writer configuration using localhost and default port 6048.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_icinga2.mdx#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nobject OpenTsdbWriter \"opentsdb\" {\n  host = \"127.0.0.1\"\n  port = 6048\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Perspective Service Shell Script\nDESCRIPTION: This shell script, 'run.sh', retrieves data from the TDengine database every 300 milliseconds and streams it to the web-based Perspective Viewer. The script is a part of the perspective-connect-demo project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/02-perspective.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh run.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Library in CMake\nDESCRIPTION: The `add_library` command creates a library target.  Here, it creates a static library named 'scalar' from the source files listed in the ${SCALAR_SRC} variable, which was populated by the `aux_source_directory` command. A static library is linked directly into the executable at compile time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(scalar STATIC ${SCALAR_SRC})\n```\n\n----------------------------------------\n\nTITLE: Direct Circular Reference Example\nDESCRIPTION: Example demonstrating a direct circular reference that Jansson will prevent.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\njson_t *obj = json_object();\njson_object_set(obj, \"foo\", obj);\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Consumer in Python\nDESCRIPTION: This snippet demonstrates how to create a WebSocket consumer in Python. It specifies necessary parameters such as server address and auto-commit for processing messages for a specified topic, with reliance on the indicated Python example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/tmq_websocket_example.py:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for mgmt_vnode Library in CMake\nDESCRIPTION: Specifies that the mgmt_vnode library depends on and should be linked with the node_util library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_vnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n    mgmt_vnode node_util\n)\n```\n\n----------------------------------------\n\nTITLE: Creating TSIM Static Library with Dependencies\nDESCRIPTION: Creates a static library for TSIM, configures include directories, and links required dependencies including TAOS native library, util, common, os, and cjson.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_LIBRARY(tsim_static STATIC ${TSIM_SRC})\nTARGET_INCLUDE_DIRECTORIES(\n    tsim_static\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\nTARGET_LINK_LIBRARIES(\n    tsim_static\n    PUBLIC ${TAOS_NATIVE_LIB}\n    PUBLIC util\n    PUBLIC common\n    PUBLIC os\n    PUBLIC cjson\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Processor-Specific Optimizations in CMake\nDESCRIPTION: Checks for compiler support of AVX/AVX2 processor optimizations and configures the compiler flags accordingly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXCompilerFlag)\nCHECK_CXX_COMPILER_FLAG(\"/arch:AVX\" HAVE_VISUAL_STUDIO_ARCH_AVX)\nCHECK_CXX_COMPILER_FLAG(\"/arch:AVX2\" HAVE_VISUAL_STUDIO_ARCH_AVX2)\nCHECK_CXX_COMPILER_FLAG(\"-mavx\" HAVE_CLANG_MAVX)\nCHECK_CXX_COMPILER_FLAG(\"-mbmi2\" HAVE_CLANG_MBMI2)\nif(SNAPPY_REQUIRE_AVX2)\n  if(HAVE_VISUAL_STUDIO_ARCH_AVX2)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:AVX2\")\n  endif(HAVE_VISUAL_STUDIO_ARCH_AVX2)\n  if(HAVE_CLANG_MAVX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mavx\")\n  endif(HAVE_CLANG_MAVX)\n  if(HAVE_CLANG_MBMI2)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mbmi2\")\n  endif(HAVE_CLANG_MBMI2)\nelseif (SNAPPY_REQUIRE_AVX)\n  if(HAVE_VISUAL_STUDIO_ARCH_AVX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:AVX\")\n  endif(HAVE_VISUAL_STUDIO_ARCH_AVX)\n  if(HAVE_CLANG_MAVX)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -mavx\")\n  endif(HAVE_CLANG_MAVX)\nendif(SNAPPY_REQUIRE_AVX2)\n```\n\n----------------------------------------\n\nTITLE: Building TDengine Geometry Library with CMake\nDESCRIPTION: This CMake configuration collects source files from the src directory, builds them into a static library called 'geometry', sets include paths, and links required dependencies. It also conditionally adds test directories when BUILD_TEST is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/geometry/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src GEOMETRY_SRC)\n\nadd_library(geometry STATIC ${GEOMETRY_SRC})\ntarget_include_directories(\n  geometry\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/geometry\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../scalar/inc\"\n)\n\ntarget_link_libraries(\n  geometry\n  PRIVATE os util nodes function scalar qcom\n)\n\nif(${BUILD_TEST})\n  ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Query Node Management Library\nDESCRIPTION: Sets private include directories for the mgmt_qnode library, specifying the path to header files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_qnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    mgmt_qnode\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Developer Toolset on CentOS\nDESCRIPTION: Commands to install and enable devtoolset-9 on CentOS systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install centos-release-scl\nsudo yum install devtoolset-9 devtoolset-9-libatomic-devel\nscl enable devtoolset-9 -- bash\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Test Subdirectories with CMake\nDESCRIPTION: This CMake configuration enables testing and adds specific test subdirectories for different components of the TDengine project. Some test directories are commented out, indicating they are currently excluded from the test suite.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n\nadd_subdirectory(acct)\nadd_subdirectory(arbgroup)\n#add_subdirectory(db)\n#add_subdirectory(dnode)\nadd_subdirectory(func)\nadd_subdirectory(stream)\nadd_subdirectory(profile)\nadd_subdirectory(qnode)\nadd_subdirectory(sdb)\nadd_subdirectory(show)\nadd_subdirectory(sma)\nadd_subdirectory(snode)\nadd_subdirectory(stb)\nadd_subdirectory(topic)\nadd_subdirectory(trans)\n#add_subdirectory(user)\n#add_subdirectory(mnode)\n```\n\n----------------------------------------\n\nTITLE: Adding TDengine Flink Connector Maven Dependency\nDESCRIPTION: Adds the TDengine Flink Connector dependency to a Maven project's pom.xml file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/12-flink.md#2025-04-16_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.taosdata.flink</groupId>\n    <artifactId>flink-connector-tdengine</artifactId>\n    <version>2.1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Executables\nDESCRIPTION: This snippet outlines the inclusion of necessary directories for header files required by the executables, enhancing modularity and reusability within the build configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/transport/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(transportTest\n  PUBLIC\n  \"${TD_SOURCE_DIR}/include/libs/transport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(transUT\n  PUBLIC\n  \"${TD_SOURCE_DIR}/include/libs/transport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(transUT2\n  PUBLIC\n  \"${TD_SOURCE_DIR}/include/libs/transport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(svrBench\n  PUBLIC\n  \"${TD_SOURCE_DIR}/include/libs/transport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(cliBench\n  PUBLIC\n  \"${TD_SOURCE_DIR}/include/libs/transport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\ntarget_include_directories(httpBench\n  PUBLIC\n  \"${TD_SOURCE_DIR}/include/libs/transport\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Cryptography Library\nDESCRIPTION: Links additional libraries 'common' and 'sm4' to the crypt library to provide necessary functionality\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/crypt/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(crypt common sm4)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to a CMake Target\nDESCRIPTION: The `target_link_libraries` command specifies the libraries to link against the 'scalar' target.  All libraries listed are linked privately, meaning they are only required for compiling and linking 'scalar', and not exposed to other libraries that depend on 'scalar'. The listed dependencies include 'os', 'util', 'common', 'nodes', 'function', 'qcom', 'parser', 'geometry' and 'decimal'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(scalar\n    PRIVATE os\n    PRIVATE util\n    PRIVATE common\n    PRIVATE nodes\n    PRIVATE function\n    PRIVATE qcom\n    PRIVATE parser\n    PRIVATE geometry\n    PRIVATE decimal\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up environment file for crash reporting\nDESCRIPTION: Bash commands to copy the example environment file and open it for editing. This file will contain configuration settings for the crash reporting system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/telemetry/crash-report/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $DIR/telemetry/crash-report\ncp .env.example .env\nvim .env\n...\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Build Configuration\nDESCRIPTION: This section defines Windows-specific build settings including compiler flags, executable targets, dependencies, and library linking for taosdump and taosBenchmark.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nELSE ()\n    ADD_DEFINITIONS(-DWINDOWS)\n    SET(CMAKE_C_STANDARD 11)\n    SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /utf-8 \")\n    SET(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /utf-8 \")\n    ADD_EXECUTABLE(taosBenchmark benchMain.c benchLog.c benchTmq.c benchQuery.c benchCsv.c benchJsonOpt.c benchInsert.c benchInsertMix.c benchDataMix.c wrapDb.c benchData.c benchCommandOpt.c benchUtil.c ../../src/pub.c benchUtilDs.c benchSys.c toolstime.c toolsString.c toolsSys.c toolsString.c)\n\n    ADD_EXECUTABLE(taosdump taosdump.c ../../src/pub.c dumpUtil.c toolsSys.c toolstime.c toolsDir.c toolsString.c)\n    ADD_DEPENDENCIES(apache-avro tools-zlib)\n    ADD_DEPENDENCIES(apache-avro deps-jansson)\n    ADD_DEPENDENCIES(apache-avro deps-snappy)\n    ADD_DEPENDENCIES(taosdump deps-jansson)\n    ADD_DEPENDENCIES(taosdump deps-snappy)\n    ADD_DEPENDENCIES(taosdump deps-libargp)\n    ADD_DEPENDENCIES(taosdump apache-avro)\n    ADD_DEPENDENCIES(taosBenchmark tools-zlib)\n\n    target_include_directories(\n        taosdump\n        PUBLIC \"${TD_SOURCE_DIR}/contrib/pthread\"\n        PUBLIC \"${TD_SOURCE_DIR}/contrib/iconv\"\n    )\n\n    IF (${TOOLS_BUILD_TYPE} MATCHES \"Debug\")\n        TARGET_LINK_LIBRARIES(taosdump taos avro jansson snappy pthread libargp.lib zlib )\n    ELSE ()\n        TARGET_LINK_LIBRARIES(taosdump taos avro jansson snappy pthread libargp.lib zlibstatic )\n    ENDIF ()\n\n    TARGET_LINK_LIBRARIES(taosBenchmark taos msvcregex pthread toolscJson )\n\n    TARGET_LINK_LIBRARIES(taosBenchmark zlibstatic)\n\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files and Libraries in CMake\nDESCRIPTION: This snippet sets up the source files and library definitions for the TDengine project using CMake. It configures the build process by defining how source files are organized and instructs the compiler to use specific instruction sets, like AVX2 if available. It also manages inclusion of directories and linking of necessary libraries across different platforms. Conditional compilation flags are set based on environment variables and build settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/version.c.in\" \"${CMAKE_CURRENT_SOURCE_DIR}/src/version.c\")\naux_source_directory(src UTIL_SRC)\nIF(COMPILER_SUPPORT_AVX2)\n    MESSAGE(STATUS \"AVX2 instructions is ACTIVATED\")\n    set_source_files_properties(src/tdecompressavx.c PROPERTIES COMPILE_FLAGS -mavx2)\nENDIF()\nadd_library(util STATIC ${UTIL_SRC})\n\nif(DEFINED GRANT_CFG_INCLUDE_DIR)\n    add_definitions(-DGRANTS_CFG)\nendif()\n\nif(${ASSERT_NOT_CORE})\n    ADD_DEFINITIONS(-DASSERT_NOT_CORE)\n    MESSAGE(STATUS \"disable assert core\")\nelse()\n    MESSAGE(STATUS \"enable assert core\")\nendif(${ASSERT_NOT_CORE})\n\ntarget_include_directories(\n    util\n    PUBLIC \"${TD_SOURCE_DIR}/include/util\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n    PRIVATE \"${TD_SOURCE_DIR}/include/common\"\n    PRIVATE \"${GRANT_CFG_INCLUDE_DIR}\"\n    PRIVATE \"${TD_CONTRIB_DIR}/TSZ/sz/inc\"\n    PRIVATE \"${TD_CONTRIB_DIR}/TSZ/zstd/\"\n    PRIVATE \"${TD_SOURCE_DIR}/contrib/lzma2/\"\n    PRIVATE \"${TD_SOURCE_DIR}/contrib/pcre2/\"\n)\n\ntarget_link_directories(\n    util\n    PUBLIC \"${TD_SOURCE_DIR}/contrib/lzma2\"\n    PUBLIC \"${TD_SOURCE_DIR}/contrib/pcre2\"\n)\n\nif(TD_LINUX)\n    target_link_libraries(\n        util\n        PUBLIC os common\n        PUBLIC lz4_static fast-lzma2 pcre2-8\n        PUBLIC api cjson geos_c TSZ decimal\n    )\nelse()\n    target_link_libraries(\n        util\n        PUBLIC os common\n        PUBLIC lz4_static pcre2-8\n        PUBLIC api cjson geos_c TSZ decimal\n    )\nendif()\n\nif(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Getting Current Row Number in ResultSet in Java\nDESCRIPTION: Method for getting the row number of the current cursor position in a database result set. Returns the current row number or 0 if the cursor is outside the result set. Throws SQLException if a database access error occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_56\n\nLANGUAGE: Java\nCODE:\n```\nint getRow() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Defining C UDF Data Structures\nDESCRIPTION: Defines data structures needed to implement UDFs in C for TDengine. These structures include SUdfColumnMeta, SUdfColumnData, SUdfColumn, SUdfDataBlock, and SUdfInterBuf, and serve to provide metadata, column data, and buffer information. Dependencies for these include 'taos.h' and 'taosudf.h'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SUdfColumnMeta {\\n  int16_t type;\\n  int32_t bytes;\\n  uint8_t precision;\\n  uint8_t scale;\\n} SUdfColumnMeta;\\n\\ntypedef struct SUdfColumnData {\\n  int32_t numOfRows;\\n  int32_t rowsAlloc;\\n  union {\\n    struct {\\n      int32_t nullBitmapLen;\\n      char   *nullBitmap;\\n      int32_t dataLen;\\n      char   *data;\\n    } fixLenCol;\\n\\n    struct {\\n      int32_t  varOffsetsLen;\\n      int32_t *varOffsets;\\n      int32_t  payloadLen;\\n      char    *payload;\\n      int32_t  payloadAllocLen;\\n    } varLenCol;\\n  };\\n} SUdfColumnData;\\n\\ntypedef struct SUdfColumn {\\n  SUdfColumnMeta colMeta;\\n  bool           hasNull;\\n  SUdfColumnData colData;\\n} SUdfColumn;\\n\\ntypedef struct SUdfDataBlock {\\n  int32_t numOfRows;\\n  int32_t numOfCols;\\n  SUdfColumn **udfCols;\\n} SUdfDataBlock;\\n\\ntypedef struct SUdfInterBuf {\\n  int32_t bufLen;\\n  char   *buf;\\n  int8_t  numOfResult; //zero or one\\n} SUdfInterBuf;\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into TDengine Using Dynamic Table Creation\nDESCRIPTION: SQL statement to insert data into TDengine using dynamic table creation, which automatically creates a subtable if it doesn't exist.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/25-application/_i3-immigrate.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ninsert into memory_vm130_memory_buffered_collectd  using memory tags('vm130', 'memory', 'buffer', 'collectd') values(1632979445, 3.0656);\n```\n\n----------------------------------------\n\nTITLE: Displaying MNODEs Information in TDengine SQL\nDESCRIPTION: Shows information about management nodes (MNODEs) in the current system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSHOW MNODES;\n```\n\n----------------------------------------\n\nTITLE: Sample TDengine SQL Queries\nDESCRIPTION: Example SQL queries demonstrating count, aggregation, and filtering operations on the benchmark dataset\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/01-docker.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM test.meters;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(current), MAX(voltage), MIN(phase) FROM test.meters;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM test.meters WHERE location = \"California.SanFrancisco\";\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(current), MAX(voltage), MIN(phase) FROM test.meters WHERE groupId = 10;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT _wstart, AVG(current), MAX(voltage), MIN(phase) FROM test.d1001 INTERVAL(10s);\n```\n\n----------------------------------------\n\nTITLE: Creating Avro Shared Library in CMake (Non-Windows)\nDESCRIPTION: This snippet creates a shared library target for Avro on non-Windows platforms. It sets version properties and links necessary dependencies.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/src/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT WIN32)\nadd_library(avro-shared SHARED ${AVRO_SRC})\ntarget_link_libraries(avro-shared ${JANSSON_LIBRARIES} ${CODEC_LIBRARIES} ${THREADS_LIBRARIES})\nset_target_properties(avro-shared PROPERTIES\n        OUTPUT_NAME avro\n        VERSION ${LIBAVRO_DOT_VERSION}\n        SOVERSION ${LIBAVRO_SOVERSION})\nendif(NOT WIN32)\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Index Library Build in CMake\nDESCRIPTION: Sets up the 'index' static library by defining source files, include directories, and dependencies. It includes conditional configuration for Lucene integration, inverted index support, and test components based on build variables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/index/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src INDEX_SRC)\nadd_library(index STATIC ${INDEX_SRC})\ntarget_include_directories(\n  index\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/index\"\n  PUBLIC \"${TD_SOURCE_DIR}/include/os\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n  index\n  PUBLIC os\n  PUBLIC util\n  PUBLIC common\n  PUBLIC nodes\n  PUBLIC scalar\n  PUBLIC function\n)\n\nif(${BUILD_WITH_LUCENE})\n  target_include_directories(\n    index\n    PUBLIC \"${TD_SOURCE_DIR}/deps/lucene/include\"\n  )\n  LINK_DIRECTORIES(\"${TD_SOURCE_DIR}/deps/lucene/debug/src/core\")\n  target_link_libraries(\n    index\n    PUBLIC lucene++\n  )\nendif(${BUILD_WITH_LUCENE})\n\nif(${BUILD_WITH_INVERTEDINDEX})\n  add_definitions(-DUSE_INVERTED_INDEX)\nendif(${BUILD_WITH_INVERTEDINDEX})\n\nif(${BUILD_TEST})\n  add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Linking\nDESCRIPTION: Handles library linking for different platforms (Windows vs. other systems)\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${TD_WINDOWS})\n  target_link_libraries(\n    common\n    PUBLIC os\n    PUBLIC util\n    INTERFACE api\n  )\nelse()\n  find_library(CURL_LIBRARY curl $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\n  find_library(SSL_LIBRARY ssl $ENV{HOME}/.cos-local.2/lib64 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\n  find_library(CRYPTO_LIBRARY crypto $ENV{HOME}/.cos-local.2/lib64 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\n\n  target_link_libraries(\n    common\n    PUBLIC ${CURL_LIBRARY}\n    PUBLIC ${SSL_LIBRARY}\n    PUBLIC ${CRYPTO_LIBRARY}\n    PUBLIC os\n    PUBLIC util\n    INTERFACE api\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for TDengine Executables in CMake\nDESCRIPTION: This snippet demonstrates how to link libraries to the executables defined earlier. It uses target_link_libraries() to link TAOS libraries, util, common, and os to each executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/test/c/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    tmq_offset\n    PUBLIC ${TAOS_NATIVE_LIB}\n    PUBLIC util\n    PUBLIC common\n    PUBLIC os\n)\n\ntarget_link_libraries(\n    tmq_multi_thread_test\n    PUBLIC ${TAOS_NATIVE_LIB}\n    PUBLIC util\n    PUBLIC common\n    PUBLIC os\n)\n\ntarget_link_libraries(\n    create_table\n    PUBLIC ${TAOS_NATIVE_LIB}\n    PUBLIC util\n    PUBLIC common\n    PUBLIC os\n)\n\ntarget_link_libraries(\n    tmq_demo\n    PUBLIC ${TAOS_NATIVE_LIB}\n    PUBLIC util\n    PUBLIC common\n    PUBLIC os\n)\n\n# ... (similar blocks for other executables)\n\ntarget_link_libraries(\n    timezone_test\n    PUBLIC taos\n    PUBLIC util\n    PUBLIC common\n    PUBLIC os\n)\n\nif(${TD_LINUX})\n    target_link_libraries(\n        tsz_test\n        PUBLIC ${TAOS_NATIVE_LIB}\n        PUBLIC util\n        PUBLIC common\n        PUBLIC os\n    )\nendif(${TD_LINUX})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for cosTest in CMake\nDESCRIPTION: This section links the necessary libraries to the cosTest executable. It includes cos_c_sdk, apr-1, aprutil-1, mxml, and curl libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/cos/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(cosTest cos_c_sdk)\ntarget_link_libraries(cosTest apr-1})\ntarget_link_libraries(cosTest aprutil-1})\ntarget_link_libraries(cosTest mxml)\ntarget_link_libraries(cosTest curl)\n```\n\n----------------------------------------\n\nTITLE: Filtering Data in Oracle SQL Query\nDESCRIPTION: This SQL condition is used to filter data before writing to TDengine. It demonstrates how to apply a simple numeric filter on a column named 'Value'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/15-oracle.md#2025-04-16_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nValue > 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux and Darwin-specific Build Settings\nDESCRIPTION: Sets up build configurations for Linux and Darwin systems, including package checks for ZLIB, Snappy, LZMA, and Jansson libraries. It also handles OS-specific configurations and error messages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nIF (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\" OR ${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    find_package(PkgConfig REQUIRED)\n\n    IF (${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n        SET(OS_INFO \"Darwin\")\n    ELSE()\n        find_package(ZLIB)\n        if (ZLIB_FOUND)\n            set(ZLIB_PKG zlib)\n            add_definitions(-DDEFLATE_CODEC)\n            include_directories(${ZLIB_INCLUDE_DIRS})\n            message(\"${Green} Enabled deflate codec ${ColourReset}\")\n        else (ZLIB_FOUND)\n            set(ZLIB_PKG \"\")\n            set(ZLIB_LIBRARIES \"\")\n            message(\"${Red} Disabled deflate codec. zlib not found. ${ColourReset}\")\n        endif (ZLIB_FOUND)\n\n        pkg_check_modules(SNAPPY snappy)\n        IF (SNAPPY_FOUND AND ZLIB_FOUND)  # Snappy borrows crc32 from zlib\n            set(SNAPPY_PKG libsnappy)\n            add_definitions(-DSNAPPY_CODEC)\n            include_directories(${SNAPPY_INCLUDE_DIRS})\n            message(\"${Green} Enabled snappy codec ${ColourReset}\")\n        ELSE ()\n            execute_process(COMMAND chmod 777 ${PROJECT_SOURCE_DIR}/packaging/tools/get_os.sh)\n\n            EXECUTE_PROCESS(COMMAND readlink /bin/sh OUTPUT_VARIABLE SHELL_LINK)\n            MESSAGE(STATUS \"The shell is: \" ${SHELL_LINK})\n            IF (${SHELL_LINK} MATCHES \"dash\")\n                EXECUTE_PROCESS(COMMAND ${PROJECT_SOURCE_DIR}/packaging/tools/get_os.sh \"\" OUTPUT_VARIABLE OS_INFO)\n            ELSE ()\n                EXECUTE_PROCESS(COMMAND sh ${PROJECT_SOURCE_DIR}/packaging/tools/get_os.sh \"\" OUTPUT_VARIABLE OS_INFO)\n            ENDIF()\n            MESSAGE(\"Current OS is \" ${OS_INFO})\n            set(SNAPPY_PKG \"\")\n            set(SNAPPY_LIBRARIES \"\")\n            MESSAGE(\"\")\n            IF (${OS_INFO} MATCHES \"CentOS\")\n                MESSAGE(\"${Yellow}libsnappy not found or zlib not found.\")\n                MESSAGE(\"NOTE: The snappy package lacks pkg-config support on CentOS Linux even it is already installed.\")\n                MESSAGE(\"      It leads cmake prompt \\\"libsnappy not found.\\\", but it will works well.\")\n                MESSAGE(\"      Please refer to https://github.com/google/snappy/pull/86.\")\n                MESSAGE(\"${ColourReset}\")\n            ELSE ()\n                MESSAGE(\"${Red}libsnappy not found or zlib not found.\")\n                MESSAGE(\"${ColourReset}\")\n            ENDIF ()\n        ENDIf (SNAPPY_FOUND AND ZLIB_FOUND)\n\n        find_package(PkgConfig)\n        pkg_check_modules(LZMA liblzma)\n        if (LZMA_FOUND)\n            set(LZMA_PKG liblzma)\n            add_definitions(-DLZMA_CODEC)\n            include_directories(${LZMA_INCLUDE_DIRS})\n            link_directories(${LZMA_LIBRARY_DIRS})\n            message(\"${Green} Enabled lzma codec ${ColourReset}\")\n        else (LZMA_FOUND)\n            set(LZMA_PKG \"\")\n            set(LZMA_LIBRARIES \"\")\n            message(\"${Red} Disabled lzma codec. liblzma not found.${ColourReset}\")\n        endif (LZMA_FOUND)\n\n        # Jansson JSON library\n        pkg_check_modules(JANSSON jansson>=2.3)\n        IF (JANSSON_FOUND)\n            MESSAGE(\"${Green} jansson found ${ColourReset}\")\n            include_directories(${JANSSON_INCLUDE_DIRS})\n        ELSE()\n            MESSAGE(FATAL_ERROR \"${Red} jansson not found ${ColourReset}\")\n        ENDIF()\n    ENDIF ()\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Running Jansson Test Suite in Bash\nDESCRIPTION: This snippet demonstrates how to run the test suite for Jansson after building it from source.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make check\n```\n\n----------------------------------------\n\nTITLE: Adding Grant Configuration Support in CMake\nDESCRIPTION: Conditionally adds support for grants configuration and links against the grant library if TD_GRANT is defined.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED GRANT_CFG_INCLUDE_DIR)\n  add_definitions(-DGRANTS_CFG)\nendif()\n\nif(TD_GRANT)\n  TARGET_LINK_LIBRARIES(mnode grant)\n  ADD_DEFINITIONS(-D_GRANT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running TaosKeeper Tests\nDESCRIPTION: Command to run all tests for the TaosKeeper project. Requires sudo privileges and connects to local TDengine server and taosAdapter for testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/README-CN.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo go test ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpine Linux Specific Library Dependencies\nDESCRIPTION: This conditional block handles Alpine Linux specific library linking, finding the argp and z libraries and linking them to taosdump and taosBenchmark targets when available.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF (${OS_ID} MATCHES \"alpine\")\n    MESSAGE(\"alpine TARGET_LINK_LIBRARIES\")\n    FIND_LIBRARY(ARGP_LIBRARY argp)\n    MESSAGE(${ARGP_LIBRARY})\n\n    FIND_LIBRARY(LIBZ_LIBRARY z)\n    MESSAGE(${LIBZ_LIBRARY})\n\n    TARGET_LINK_LIBRARIES(taosdump taos avro jansson snappy stdc++ lzma atomic pthread $<$<BOOL:${LIBZ_LIBRARY}>:${LIBZ_LIBRARY}> $<$<BOOL:${ARGP_LIBRARY}>:${ARGP_LIBRARY}>  ${GCC_COVERAGE_LINK_FLAGS})\n    TARGET_LINK_LIBRARIES(taosBenchmark taos pthread m toolscJson $<$<BOOL:${LIBZ_LIBRARY}>:${LIBZ_LIBRARY}> $<$<BOOL:${ARGP_LIBRARY}>:${ARGP_LIBRARY}>  ${GCC_COVERAGE_LINK_FLAGS})\nELSE()\n    TARGET_LINK_LIBRARIES(taosdump taos avro jansson snappy stdc++ lzma libz-static atomic pthread  ${GCC_COVERAGE_LINK_FLAGS})\n    TARGET_LINK_LIBRARIES(taosBenchmark taos pthread m toolscJson  ${GCC_COVERAGE_LINK_FLAGS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: TDengine Select Query Error\nDESCRIPTION: This snippet shows the error received when a select query in TDengine fails because the analysis service is not accessible. This usually indicates a timeout or a problem with the analysis service's availability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/11-faq.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntaos> select _frowts,forecast(current, 'algo=arima, alpha=95, wncheck=0, rows=20') from d1 where ts<='2017-07-14 10:40:09.999';\n\nDB error: Analysis service can't access[0x80000441] (60.195613s)\n```\n\n----------------------------------------\n\nTITLE: Setting a Smallint value in Param object\nDESCRIPTION: This function sets a Smallint value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the Smallint value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_49\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetSmallint(offset int, value int)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Library and Directories in CMake\nDESCRIPTION: This snippet sets the source directory for the planner library and defines it as a static target. It also configures include directories for public and private access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src PLANNER_SRC)\nadd_library(planner STATIC ${PLANNER_SRC})\ntarget_include_directories(\n    planner\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/planner\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Topic Test Build in TDengine with CMake\nDESCRIPTION: This CMake script configures the build process for a topic test in the TDengine project. It collects all source files from the current directory, creates an executable named 'topicTest', links it with the 'sut' library, and registers it as a test to be run by the CMake test runner.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/topic/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_TOPIC_TEST_SRC)\nadd_executable(topicTest ${MNODE_TOPIC_TEST_SRC})\ntarget_link_libraries(\n    topicTest\n    PUBLIC sut\n)\n\nadd_test(\n    NAME topicTest\n    COMMAND topicTest\n)\n```\n\n----------------------------------------\n\nTITLE: Resetting Query Cache in TDengine\nDESCRIPTION: This SQL command resets the query cache on the client side in TDengine. This is useful when metadata synchronization issues occur in multi-client scenarios, forcing the client to retrieve the latest metadata from the server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nRESET QUERY CACHE;\n```\n\n----------------------------------------\n\nTITLE: Checking Progress of Replication Task (taosx)\nDESCRIPTION: This shell command outputs the difference between the subscribed offset and the latest WAL offset in an active-active replication task. It provides insight into the progress and potential lag in data replication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica diff [id [db....]]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building profileTest Executable in CMake\nDESCRIPTION: This CMake snippet configures the build process for a profile test in TDengine. It collects all source files from the current directory, creates an executable named 'profileTest', links it against the 'sut' library, and registers it as a test case.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/profile/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_PROFILE_TEST_SRC)\nadd_executable(profileTest ${MNODE_PROFILE_TEST_SRC})\ntarget_link_libraries(\n    profileTest\n    PUBLIC sut\n)\n\nadd_test(\n    NAME profileTest\n    COMMAND profileTest\n)\n```\n\n----------------------------------------\n\nTITLE: Resetting Client Cache in TDengine SQL\nDESCRIPTION: This SQL command forcibly clears the client cache in TDengine. It's useful when metadata synchronization issues occur in a multi-client environment, ensuring the client pulls the latest metadata from the server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nRESET QUERY CACHE;\n```\n\n----------------------------------------\n\nTITLE: Querying Mixed Existent and Nonexistent Time Range During DST Start (SQL)\nDESCRIPTION: This SQL query selects timestamps between 2:00 AM and 3:59 AM on the day DST starts, including both nonexistent and existing time ranges. The result shows unexpected behavior with the nonexistent timestamp appearing as -1000.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ts, to_iso8601(ts,'Z') FROM t1 WHERE ts BETWEEN '2024-03-31 02:00:00' AND '2024-03-31 03:59:59';\n```\n\n----------------------------------------\n\nTITLE: Defining include directories for the target.\nDESCRIPTION: This CMake code snippet defines the include directories for the target `queryUtilTest`. It specifies both public and private include directories, allowing the test to access necessary header files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        queryUtilTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/qcom/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/libs/qcom/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SM4 Source Directory\nDESCRIPTION: This snippet declares the source directory for the SM4 library, allowing CMake to locate the necessary source files for compilation. It uses 'aux_source_directory' to gather all source files in the specified directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sm4/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src SM4_SRC)\n```\n\n----------------------------------------\n\nTITLE: Rows Close Method\nDESCRIPTION: Closes the result set, releasing associated resources. The function operates on a `Rows` struct and returns an error if any occurs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_44\n\nLANGUAGE: go\nCODE:\n```\n\"func (rs *Rows) Close() error\"\n```\n\n----------------------------------------\n\nTITLE: Starting Time-Series Foundation Models\nDESCRIPTION: Commands for manually starting TDtsfm and Time-MoE foundation models, which require significant hardware resources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start TDtsdm\nstart-tdtsfm\n\n# Start Time-MoE\nstart-timer-moe\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Build Targets with CMake\nDESCRIPTION: Configures the build process for a Linux environment within the TDengine project. This snippet includes directives to add executable targets like `tmq`, `stream_demo`, and others, specifying their source files and linking them with the necessary libraries. Targets are set with specific output names, taking into account the source directories and dependencies on `taos` libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/c/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_LINUX)\n  INCLUDE_DIRECTORIES(. ${TD_SOURCE_DIR}/src/inc ${TD_SOURCE_DIR}/src/client/inc ${TD_SOURCE_DIR}/inc)\n  AUX_SOURCE_DIRECTORY(. SRC)\n\n  add_executable(tmq \"\")\n  add_executable(stream_demo \"\")\n  add_executable(schemaless \"\")\n  add_executable(prepare \"\")\n  add_executable(demo \"\")\n  add_executable(asyncdemo \"\")\n\n  target_sources(tmq\n    PRIVATE\n    \"tmq.c\"\n  )\n\n  target_sources(stream_demo\n    PRIVATE\n    \"stream_demo.c\"\n  )\n\n  target_sources(schemaless\n    PRIVATE\n    \"schemaless.c\"\n  )\n\n  target_sources(prepare\n    PRIVATE\n    \"prepare.c\"\n  )\n\n  target_sources(demo\n    PRIVATE\n    \"demo.c\"\n  )\n\n  target_sources(asyncdemo\n    PRIVATE\n    \"asyncdemo.c\"\n  )\n\n  target_link_libraries(tmq\n    ${TAOS_NATIVE_LIB}\n  )\n\n  target_link_libraries(stream_demo\n    ${TAOS_NATIVE_LIB}\n  )\n\n  target_link_libraries(schemaless\n    ${TAOS_NATIVE_LIB}\n  )\n\n  target_link_libraries(prepare\n    ${TAOS_NATIVE_LIB}\n  )\n\n  target_link_libraries(demo\n    ${TAOS_NATIVE_LIB}\n  )\n\n  target_link_libraries(asyncdemo\n    ${TAOS_NATIVE_LIB}\n  )\n\n  SET_TARGET_PROPERTIES(tmq PROPERTIES OUTPUT_NAME tmq)\n  SET_TARGET_PROPERTIES(stream_demo PROPERTIES OUTPUT_NAME stream_demo)\n  SET_TARGET_PROPERTIES(schemaless PROPERTIES OUTPUT_NAME schemaless)\n  SET_TARGET_PROPERTIES(prepare PROPERTIES OUTPUT_NAME prepare)\n  SET_TARGET_PROPERTIES(demo PROPERTIES OUTPUT_NAME demo)\n  SET_TARGET_PROPERTIES(asyncdemo PROPERTIES OUTPUT_NAME asyncdemo)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Checking UDF Logs for Errors\nDESCRIPTION: Shell command to check the UDF process logs for error information. This is a debugging step to identify why the UDF execution failed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ntail -10 /var/log/taos/taosudf.log\n```\n\n----------------------------------------\n\nTITLE: Include Mock Test Program (JavaScript)\nDESCRIPTION: This snippet indicates the inclusion of a JavaScript file (mock.js) located in the docs/examples/other/ directory. This file likely contains code for generating mock MQTT data to test the EMQX and TDengine integration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/09-emq-broker.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/other/mock.js}}\n```\n\n----------------------------------------\n\nTITLE: Querying Records with Tag Filter in TDengine\nDESCRIPTION: SQL query to count records in the 'meters' supertable where the 'location' tag is 'California.SanFrancisco'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM test.meters WHERE location = \"California.SanFrancisco\";\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Command Test\nDESCRIPTION: Links multiple libraries required for the command test executable, including system, utility, and testing libraries\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(\n        commandTest\n        PUBLIC os util common nodes parser catalog transport gtest function qcom\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring VNODE Test in CMake (Commented Out)\nDESCRIPTION: A commented-out CMake configuration that would build and register a vnode test for TDengine. It includes collecting source files, creating an executable, linking with the 'sut' (system under test) library, and registering the test with the test runner.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/test/vnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# aux_source_directory(. DND_VNODE_TEST_SRC)\n# add_executable(dvnodeTest ${DND_VNODE_TEST_SRC})\n# target_link_libraries(\n#     dvnodeTest\n#     PUBLIC sut\n# )\n\n# add_test(\n#     NAME dvnodeTest\n#     COMMAND dvnodeTest\n# )\n```\n\n----------------------------------------\n\nTITLE: Adding Test Command\nDESCRIPTION: This snippet adds a test case named 'plannerTest' that executes the 'plannerTest' executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n    add_test(\n        NAME plannerTest\n        COMMAND plannerTest\n    )\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard for GoogleTest\nDESCRIPTION: This snippet sets the C++ standard to 11, as it is required by GoogleTest. It ensures that the compiler uses the correct standard when building the unit tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for SML Tests\nDESCRIPTION: This entry adds an executable for SML tests and links it to necessary libraries while also including specific geometry libraries. This ensures that the SML functionalities can be tested appropriately.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(smlTest smlTest.cpp)\nTARGET_LINK_LIBRARIES(\n        smlTest\n        PUBLIC os util common transport parser catalog scheduler function gtest ${TAOS_NATIVE_LIB_STATIC} qcom geometry\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for a CMake Target\nDESCRIPTION: The `target_include_directories` command specifies include directories for the 'scalar' library.  It sets both public and private include directories.  Public include directories are available to other libraries that link against 'scalar', while private include directories are only used when compiling 'scalar' itself. `${TD_SOURCE_DIR}/include/libs/scalar` is a public directory, accessible to all libraries that depend on `scalar`, and `${CMAKE_CURRENT_SOURCE_DIR}/inc` is private to the `scalar` library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n    scalar\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/scalar\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up JSON Resources with Reference Counting in Jansson\nDESCRIPTION: Code that demonstrates proper cleanup of JSON resources using Jansson's reference counting mechanism. The json_decref function decreases the reference count of the root JSON value, allowing Jansson to free resources when they're no longer needed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\njson_decref(root);\nreturn 0;\n```\n\n----------------------------------------\n\nTITLE: Configuring Auxiliary Source Directory for Cryptography\nDESCRIPTION: Establishes the source directory for cryptography-related source files, with special handling for enterprise edition sources\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/crypt/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src CRYPT_SRC)\n```\n\n----------------------------------------\n\nTITLE: TDengine Configuration - firstEp and fqdn\nDESCRIPTION: This snippet shows the configuration parameters firstEp and fqdn in the TDengine configuration file (taos.cfg). firstEp specifies the endpoint of the first dnode in the cluster for initial connection. fqdn specifies the fully qualified domain name of the current dnode. Each dnode's fqdn must be unique, while firstEp should be consistent across all dnodes during initial setup.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"# firstEp 是每个 dnode 首次启动后连接的第 1 个 dnode\nfirstEp h1.taosdata.com:6030\n# 必须配置为本 dnode 的 FQDN，如果本机只有一个 hostname，可注释或删除如下这行代码\nfqdn h1.taosdata.com\n# 配置本 dnode 的端口，默认是 6030\nserverPort 6030\"\n```\n\n----------------------------------------\n\nTITLE: Version Information Configuration\nDESCRIPTION: Configures version information for the build process. Requires TD_VER_NUMBER to be defined or aborts the build with an error message.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/shell/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(\"collect --version show info:\")\nIF (DEFINED TD_VER_NUMBER)\n    ADD_DEFINITIONS(-DTD_VER_NUMBER=\"${TD_VER_NUMBER}\")\n    MESSAGE(STATUS \"taos version:${TD_VER_NUMBER}\")\nELSE ()    \n    MESSAGE(FATAL_ERROR \"build taos not found TD_VER_NUMBER define.\")\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Snappy RLE Encoding Example\nDESCRIPTION: Example demonstrating how run-length encoding works in Snappy, showing how the string 'xababab' can be encoded using a literal followed by a copy instruction.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/format_description.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<literal: \"xab\"> <copy: offset=2 length=4>\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Include Directories\nDESCRIPTION: Sets public and private include directories for the wide integer library, enabling header file access\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/src/detail/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    wideInteger\n    PUBLIC \"${TD_SOURCE_DIR}/source/libs/decimal/inc/\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/intx/\"\n)\n```\n\n----------------------------------------\n\nTITLE: Stream Task and Error Handling in TDengine\nDESCRIPTION: Functions responsible for managing downstream task statuses, building stream task identifiers, and dispatching stream tasks. They also include error handling through status result feedback in asynchronous processing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n(void)addDownstreamFailedStatusResultAsync\n(void)createStreamTaskIdStr\n(void)streamDispatchStreamBlock\n```\n\n----------------------------------------\n\nTITLE: Configuring taosadapter build for Windows in CMake\nDESCRIPTION: Sets up an ExternalProject for building taosadapter on Windows. It configures the build environment, sets version information, and specifies build and install commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_WINDOWS)\n    MESSAGE(\"Building taosAdapter on Windows\")\n    INCLUDE(ExternalProject)\n    ExternalProject_Add(taosadapter\n        PREFIX \"taosadapter\"\n        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/taosadapter\n        BUILD_ALWAYS off\n        DEPENDS ${TAOS_NATIVE_LIB}\n        BUILD_IN_SOURCE 1\n        CONFIGURE_COMMAND cmake -E echo \"taosadapter no need cmake to config\"\n        PATCH_COMMAND\n        COMMAND git clean -f -d\n        BUILD_COMMAND\n        COMMAND set CGO_CFLAGS=-I${CMAKE_CURRENT_SOURCE_DIR}/../include/client\n        COMMAND set CGO_LDFLAGS=-L${CMAKE_BINARY_DIR}/build/lib\n        COMMAND go build -a -o taosadapter.exe -ldflags \"-s -w -X 'github.com/taosdata/taosadapter/v3/version.Version=${taos_version}' -X 'github.com/taosdata/taosadapter/v3/version.CommitID=${taosadapter_commit_sha1}' -X 'github.com/taosdata/taosadapter/v3/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n        COMMAND go build -a -o taosadapter-debug.exe -ldflags \"-X 'github.com/taosdata/taosadapter/v3/version.Version=${taos_version}' -X 'github.com/taosdata/taosadapter/v3/version.CommitID=${taosadapter_commit_sha1}' -X 'github.com/taosdata/taosadapter/v3/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n\n        INSTALL_COMMAND\n        COMMAND cmake -E echo \"Comparessing taosadapter.exe\"\n        COMMAND cmake -E time upx taosadapter.exe\n        COMMAND cmake -E echo \"Copy taosadapter.exe\"\n        COMMAND cmake -E copy taosadapter.exe ${CMAKE_BINARY_DIR}/build/bin/taosadapter.exe\n        COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E echo \"Copy taosadapter.toml\"\n        COMMAND cmake -E copy ./example/config/taosadapter.toml ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E echo \"Copy taosadapter-debug.exe\"\n        COMMAND cmake -E copy taosadapter-debug.exe ${CMAKE_BINARY_DIR}/build/bin\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring transTest2 Executable\nDESCRIPTION: Active CMake configuration for building the transTest2 executable. It sets up the executable, specifies trans2.cpp as the source file, links against dnode, mnode, and gtest_main libraries, and configures include directories. The test command is commented out.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/trans/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(transTest2 \"\")\ntarget_sources(transTest2\n    PRIVATE\n    \"${CMAKE_CURRENT_SOURCE_DIR}/trans2.cpp\"\n)\ntarget_link_libraries(\n    transTest2\n    PUBLIC dnode mnode gtest_main\n)\ntarget_include_directories(\n    transTest2\n    PUBLIC \"${TD_SOURCE_DIR}/include/dnode/mnode\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../../inc\"\n)\n#add_test(\n#    NAME transTest2\n#    COMMAND transTest2\n#)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Row Fetching in TDengine C Client\nDESCRIPTION: Fetch rows asynchronously from the result set, can only be used with taos_query_a(). The application needs to continue calling this until numOfRows is zero or negative.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nvoid taos_fetch_rows_a(TAOS_RES *res, void (*fp)(void *param, TAOS_RES *, int numOfRows), void *param)\n```\n\n----------------------------------------\n\nTITLE: Stream Computing Parameters Table in Markdown\nDESCRIPTION: Table defining stream computing related configuration parameters including buffer sizes, checkpoints, and adapter settings\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name         |Supported Version        |Dynamic Modification|Description|\n|-----------------------|-------------------------|--------------------|------------|\n| disableStream          |          |Supported, effective immediately  | Switch to enable or disable stream computing |\n```\n\n----------------------------------------\n\nTITLE: Setting Up Relative Installation Paths in CMake\nDESCRIPTION: Creates a foreach loop to ensure paths are relative for library, binary, include, and CMake directories in the Jansson installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Make sure the paths are relative.\nforeach(p LIB BIN INCLUDE CMAKE)\n    set(var JANSSON_INSTALL_${p}_DIR)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Storage Backend Options in TDengine\nDESCRIPTION: Conditionally adds compilation definitions for S3 or COS storage backends when building the enterprise version of TDengine, enabling cloud storage integrations based on build configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/node_mgmt/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(TD_ENTERPRISE)\n  IF(${BUILD_WITH_S3})\n    add_definitions(-DUSE_S3)\n  ELSEIF(${BUILD_WITH_COS})\n    add_definitions(-DUSE_COS)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to WAL\nDESCRIPTION: This CMake command links the 'wal' library to other libraries.  PUBLIC dependencies are made available to projects which link against `wal`. The listed libraries (cjson, os, util, common, and crypt) are required for the WAL library to function correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n    wal\n    PUBLIC cjson\n    PUBLIC os\n    PUBLIC util\n    PUBLIC common\n    PUBLIC crypt\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying TCollector Configuration Files\nDESCRIPTION: This diff shows changes made to TCollector's configuration files (config.py and tcollector.py) to point to the taosAdapter server and use the correct port for TDengine integration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/_tcollector.mdx#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nindex e7e7a1c..ec3e23c 100644\n--- a/collectors/etc/config.py\n+++ b/collectors/etc/config.py\n@@ -59,13 +59,13 @@ def get_defaults():\n         'http_password': False,\n         'reconnectinterval': 0,\n         'http_username': False,\n-        'port': 4242,\n+        'port': 6049,\n         'pidfile': '/var/run/tcollector.pid',\n         'http': False,\n         'http_api_path': \"api/put\",\n         'tags': [],\n         'remove_inactive_collectors': False,\n-        'host': '',\n+        'host': '127.0.0.1',\n         'logfile': '/var/log/tcollector.log',\n         'cdir': default_cdir,\n         'ssl': False,\ndiff --git a/tcollector.py b/tcollector.py\nindex 21f9b23..4c71ba2 100755\n--- a/tcollector.py\n+++ b/tcollector.py\n@@ -64,7 +64,7 @@ ALIVE = True\n # exceptions, something is not right and tcollector will shutdown.\n # Hopefully some kind of supervising daemon will then restart it.\n MAX_UNCAUGHT_EXCEPTIONS = 100\n-DEFAULT_PORT = 4242\n+DEFAULT_PORT = 6049\n MAX_REASONABLE_TIMESTAMP = 2209212000  # Good until Tue  3 Jan 14:00:00 GMT 2040\n # How long to wait for datapoints before assuming\n # a collector is dead and restarting it\n@@ -943,13 +943,13 @@ def parse_cmdline(argv):\n             'http_password': False,\n             'reconnectinterval': 0,\n             'http_username': False,\n-            'port': 4242,\n+            'port': 6049,\n             'pidfile': '/var/run/tcollector.pid',\n             'http': False,\n             'http_api_path': \"api/put\",\n             'tags': [],\n             'remove_inactive_collectors': False,\n-            'host': '',\n+            'host': '127.0.0.1',\n             'logfile': '/var/log/tcollector.log',\n             'cdir': default_cdir,\n             'ssl': False,\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Query Worker Library\nDESCRIPTION: Sets public and private include directories for the qworker library to specify header file locations\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qworker/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    qworker\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/qworker\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directory in CMake\nDESCRIPTION: Adds the 'src' directory to the list of source files for compilation. This command collects all source files in the specified directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/taosc_test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src OS_SRC)\n```\n\n----------------------------------------\n\nTITLE: Dynamic SQL Query for Real-time Data in Yonghong BI\nDESCRIPTION: SQL query template for fetching real-time data from TDengine in Yonghong BI. Uses parameters for dynamic filtering and aggregation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/05-bi/05-yhbi.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect _wstart ws, count(*) cnt from supertable where tbname=?{metric} and ts = ?{from} and ts < ?{to} interval(?{interval})\n```\n\n----------------------------------------\n\nTITLE: Building TDengine on Linux using build.sh script\nDESCRIPTION: Executes the build.sh script to build TDengine and taosTools including taosBenchmark and taosdump.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Configures include directories for the common library with platform-specific settings\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  common\n  PUBLIC \"$ENV{HOME}/.cos-local.2/include\"\n  PUBLIC \"${TD_SOURCE_DIR}/include/common\"\n\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n  PRIVATE \"${GRANT_CFG_INCLUDE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS\nDESCRIPTION: Command to install required packages on macOS using Homebrew (only for taosBenchmark)\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbrew install argp-standalone gawk\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in MDX for TDengine Tools\nDESCRIPTION: This code snippet imports and renders a DocCardList component to display the documentation pages for various TDengine tools. It uses the current sidebar category to populate the list items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/index.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Auxiliary Source Directory Configuration - CMake\nDESCRIPTION: Defines the source directory for the command library and sets up the static library configuration. This snippet utilizes common CMake functions to establish file paths and library creation based on the provided sources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src COMMAND_SRC)\nadd_library(command STATIC ${COMMAND_SRC})\ntarget_include_directories(\n        command\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/command\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: PERF_TRANS Table Structure in TDengine\nDESCRIPTION: Defines the structure of the PERF_TRANS table that stores information about ongoing transactions, including transaction stage, conflicts, and execution details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/23-perf.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE PERF_TRANS (\n  id INT,\n  create_time TIMESTAMP,\n  stage BINARY(12),\n  db1 BINARY(64),\n  db2 BINARY(64),\n  failed_times INT,\n  last_exec_time TIMESTAMP,\n  last_action_info BINARY(511)\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Show Test\nDESCRIPTION: Links the 'sut' library publicly to the showTest executable, enabling access to its functionality during testing\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/show/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    showTest\n    PUBLIC sut\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard for Wide Integer Library\nDESCRIPTION: Sets the C++ standard to version 14 for the library compilation process\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/src/detail/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 14)\n```\n\n----------------------------------------\n\nTITLE: Data Partitioning by Location Example\nDESCRIPTION: Example query showing how to group data by location tag and calculate average voltage for each group.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/12-distinguished.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect location, avg(voltage) from meters partition by location\n```\n\n----------------------------------------\n\nTITLE: Test Output Example\nDESCRIPTION: Example of successful test execution output showing various package test results with timing information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/README-CN.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nok      github.com/taosdata/taoskeeper/api      17.405s\nok      github.com/taosdata/taoskeeper/cmd      1.819s\nok      github.com/taosdata/taoskeeper/db       0.484s\nok      github.com/taosdata/taoskeeper/infrastructure/config    0.417s\nok      github.com/taosdata/taoskeeper/infrastructure/log       0.785s\nok      github.com/taosdata/taoskeeper/monitor  4.623s\nok      github.com/taosdata/taoskeeper/process  0.606s\nok      github.com/taosdata/taoskeeper/system   3.420s\nok      github.com/taosdata/taoskeeper/util     0.097s\nok      github.com/taosdata/taoskeeper/util/pool        0.146s\n```\n\n----------------------------------------\n\nTITLE: Linking Target Library to Dependencies\nDESCRIPTION: This snippet links the `sync_test_lib` library to the `sync` library.  The `target_link_libraries` command is used to specify the public dependencies of `sync_test_lib`. This ensures that any project that links to `sync_test_lib` will also be linked to `sync`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/sync_test_lib/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n    sync_test_lib\n    PUBLIC sync\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Snappy Library Target in CMake\nDESCRIPTION: Defines the main Snappy library target with source files, include directories, and build properties.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(snappy \"\")\ntarget_sources(snappy\n  PRIVATE\n    \"snappy-internal.h\"\n    \"snappy-stubs-internal.h\"\n    \"snappy-c.cc\"\n    \"snappy-sinksource.cc\"\n    \"snappy-stubs-internal.cc\"\n    \"snappy.cc\"\n    \"${PROJECT_BINARY_DIR}/config.h\"\n\n  # Only CMake 3.3+ supports PUBLIC sources in targets exported by \"install\".\n  $<$<VERSION_GREATER:CMAKE_VERSION,3.2>:PUBLIC>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy-c.h>\n    $<INSTALL_INTERFACE:include/snappy-c.h>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy-sinksource.h>\n    $<INSTALL_INTERFACE:include/snappy-sinksource.h>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/snappy.h>\n    $<INSTALL_INTERFACE:include/snappy.h>\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/snappy-stubs-public.h>\n    $<INSTALL_INTERFACE:include/snappy-stubs-public.h>\n)\ntarget_include_directories(snappy\n  PUBLIC\n    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}>\n    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>\n    $<INSTALL_INTERFACE:include>\n)\nset_target_properties(snappy\n  PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})\n\ntarget_compile_definitions(snappy PRIVATE -DHAVE_CONFIG_H)\nif(BUILD_SHARED_LIBS)\n  set_target_properties(snappy PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)\nendif(BUILD_SHARED_LIBS)\n```\n\n----------------------------------------\n\nTITLE: Stopping Time-Series Foundation Models\nDESCRIPTION: Commands for stopping the TDtsfm and Time-MoE foundation models.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Stop TDtsfm\nstop-tdtsfm\n\n# Stop Time-MoE\nstop-timer-moe\n```\n\n----------------------------------------\n\nTITLE: String Handling in JSON Construction\nDESCRIPTION: Examples showing various string handling techniques including non-null terminated buffers and string concatenation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n/* Build a string from a non-null terminated buffer */\nchar buffer[4] = {'t', 'e', 's', 't'};\njson_pack(\"s#\", buffer, 4);\n\n/* Concatenate strings together to build the JSON string \"foobarbaz\" */\njson_pack(\"s++\", \"foo\", \"bar\", \"baz\");\n```\n\n----------------------------------------\n\nTITLE: Selecting Top N Rows in TDengine\nDESCRIPTION: This snippet retrieves the top 100 values from column 'c1'. It is commonly used for filtering and retrieving a certain number of results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/query-error-sqls.txt#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect TOP(c1,100) ;\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Unit Tests with CMake\nDESCRIPTION: Configures the backendTest as a CMake test target under the condition that the operating system is not TD_DARWIN. Uses add_test to ensure the executable is included in the test suite.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/stream/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_TEST(\nNAME backendTest\nCOMMAND backendTest\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes List using Docusaurus in MDX\nDESCRIPTION: This code snippet uses Docusaurus components to dynamically generate a list of release note entries. It imports the DocCardList component and uses the useCurrentSidebarCategory hook to populate the list items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/28-releases/03-notes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for taosAdapter Compilation\nDESCRIPTION: Commands to configure Go environment variables to resolve compilation issues with taosAdapter when facing access restrictions to Go mod repositories in China. This sets the module mode and configures a China-based proxy for downloading dependencies.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct\n```\n\n----------------------------------------\n\nTITLE: Creating Show Test Executable\nDESCRIPTION: Creates an executable target named 'showTest' using the collected source files from the previous step\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/show/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(showTest ${MNODE_SHOW_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory Conditionally\nDESCRIPTION: This conditional block adds a subdirectory named 'test' to the build process if the BUILD_TEST variable is set to true.  This allows including unit tests only when needed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"if(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Command Test\nDESCRIPTION: Sets public and private include directories for the command test executable, specifying paths for header files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        commandTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/command/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/libs/command/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking walTest Libraries\nDESCRIPTION: This snippet links the walTest executable against the wal and gtest_main libraries. The wal library likely contains the core WAL (Write-Ahead Logging) functionality, while gtest_main provides the main entry point for Google Test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(walTest\n    wal\n    gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the 'plannerTest' target. It specifies both public and private include paths for the planner and parser libraries, including test directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n    TARGET_INCLUDE_DIRECTORIES(\n            plannerTest\n            PUBLIC \"${TD_SOURCE_DIR}/include/libs/planner/\"\n            PRIVATE \"${TD_SOURCE_DIR}/source/libs/planner/inc\"\n            PRIVATE \"${TD_SOURCE_DIR}/source/libs/parser/test\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Join Tests for TDengine Executor in CMake\nDESCRIPTION: Creates a joinTests executable for testing join operations in TDengine's executor module. Links necessary libraries including os, util, common, executor, and testing frameworks, while also setting up include directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/executor/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(joinTests joinTests.cpp)\nTARGET_LINK_LIBRARIES(\n        joinTests\n        PRIVATE os util common executor gtest_main qcom function planner scalar nodes vnode\n)\n\nTARGET_INCLUDE_DIRECTORIES(\n        joinTests\n        PUBLIC \"${TD_SOURCE_DIR}/include/common\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Case\nDESCRIPTION: This snippet adds a test case named `decimalTest` that runs the `decimalTest` executable. It uses the `add_test` command to integrate the test into the CMake testing framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(\n  NAME decimalTest\n  COMMAND decimalTest\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Hostname Resolution\nDESCRIPTION: This command adds the hostname resolution to the /etc/hosts file.  It appends a line to the /etc/hosts file, mapping the IP address 127.0.0.1 to the hostname \"tdengine\".  This is necessary for the Docker container to be accessible using the specified hostname.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/02-docker.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho 127.0.0.1 tdengine |sudo tee -a /etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Plan Tests for TDengine Executor in CMake\nDESCRIPTION: Creates a queryPlanTests executable for testing query planning in TDengine's executor module. Links necessary libraries and sets up include directories for the test environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/executor/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(queryPlanTests queryPlanTests.cpp)\nTARGET_LINK_LIBRARIES(\n        queryPlanTests\n        PRIVATE os util common executor gtest_main qcom function planner scalar nodes vnode\n)\n\nTARGET_INCLUDE_DIRECTORIES(\n        queryPlanTests\n        PUBLIC \"${TD_SOURCE_DIR}/include/common\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including External Changes File in RST Documentation\nDESCRIPTION: RestructuredText directive to include the content of an external CHANGES file located one directory up from the current location.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/changes.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGES\n```\n\n----------------------------------------\n\nTITLE: Defining and linking talgoTest executable\nDESCRIPTION: This creates an executable named `talgoTest` from `talgoTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `talgoTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n\"# talgoTest\nadd_executable(talgoTest \\\"talgoTest.cpp\\\")\ntarget_link_libraries(talgoTest os util gtest_main)\nadd_test(\n    NAME talgoTest\n    COMMAND talgoTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Defining GZIP Extra Field Format Structure\nDESCRIPTION: ASCII diagram showing the structure of an extra field subfield in the GZIP header. Each subfield consists of a 2-byte ID (SI1, SI2), a 2-byte length field (LEN), and the subfield data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n            +---+---+---+---+==================================+\n            |SI1|SI2|  LEN  |... LEN bytes of subfield data ...|\n            +---+---+---+---+==================================+\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory Conditionally\nDESCRIPTION: Adds the `test` subdirectory to the build process if the `BUILD_TEST` variable is set to true. This allows for conditional compilation of tests based on a build configuration option. If BUILD_TEST is enabled, the test directory will be included in the build, otherwise it will be skipped.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Creating Static Query Worker Library\nDESCRIPTION: Creates a static library named qworker using collected source files from the source directory\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qworker/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(qworker STATIC ${QWORKER_SRC})\n```\n\n----------------------------------------\n\nTITLE: Linking Test Libraries\nDESCRIPTION: Links the 'sut' library publicly to the database test executable\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/db/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\\n    dbTest\\n    PUBLIC sut\\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a View in TDengine SQL\nDESCRIPTION: Example of how to delete a specific view using the DROP VIEW command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW view1;\n```\n\n----------------------------------------\n\nTITLE: Disabling Strong Password Requirement\nDESCRIPTION: SQL command to disable the strong password complexity rules in TDengine configuration\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nalter all dnodes 'EnableStrongPassword' '0'\n```\n\n----------------------------------------\n\nTITLE: Using TAN Function in SQL\nDESCRIPTION: The TAN function returns the tangent of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_22\n\nLANGUAGE: SQL\nCODE:\n```\nTAN(expr)\n```\n\n----------------------------------------\n\nTITLE: Defining Snappy Build Options in CMake\nDESCRIPTION: Defines various build options for Snappy including shared library build, testing, fuzzing, processor optimization flags, and installation options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to make\n# it prominent in the GUI.\noption(BUILD_SHARED_LIBS \"Build shared libraries(DLLs).\" OFF)\n\noption(SNAPPY_BUILD_TESTS \"Build Snappy's own tests.\" ON)\n\noption(SNAPPY_FUZZING_BUILD \"Build Snappy for fuzzing.\" OFF)\n\noption(SNAPPY_REQUIRE_AVX \"Target processors with AVX support.\" OFF)\n\noption(SNAPPY_REQUIRE_AVX2 \"Target processors with AVX2 support.\" OFF)\n\noption(SNAPPY_INSTALL \"Install Snappy's header and library\" ON)\n```\n\n----------------------------------------\n\nTITLE: Snappy Library Configuration\nDESCRIPTION: Configures and builds the Snappy compression library with specific flags and options for both Linux and Windows environments.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(\n    deps-snappy\n    PREFIX ${CMAKE_CURRENT_BINARY_DIR}/snappy\n    SOURCE_DIR ${PROJECT_SOURCE_DIR}/deps/snappy\n    CONFIGURE_COMMAND cmake -DBUILD_SHARED_LIBS=OFF -DSNAPPY_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/build/ -DCMAKE_INSTALL_LIBDIR=lib -S ${PROJECT_SOURCE_DIR}/deps/snappy\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for TDengine Arbgroup Test\nDESCRIPTION: Sets up the CMake build configuration for compiling and testing the arbgroup functionality in TDengine. It specifies C++11 as the standard, collects source files from the current directory, creates an executable with necessary library dependencies, and registers it as a test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/arbgroup/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\n\naux_source_directory(. MNODE_ARBGROUP_TEST_SRC)\nadd_executable(arbgroupTest ${MNODE_ARBGROUP_TEST_SRC})\ntarget_link_libraries(\n        arbgroupTest\n        PRIVATE dnode nodes planner gtest qcom tcs\n)\n\nadd_test(\n        NAME arbgroupTest\n        COMMAND arbgroupTest\n)\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Configuration for ZLib\nDESCRIPTION: Sets up initial CMake configuration including version requirements, project name, and installation directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.4.4)\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\n\nproject(zlib C)\n\nset(VERSION \"1.2.13\")\n\nset(INSTALL_BIN_DIR \"${CMAKE_INSTALL_PREFIX}/bin\" CACHE PATH \"Installation directory for executables\")\nset(INSTALL_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_INC_DIR \"${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"Installation directory for headers\")\nset(INSTALL_MAN_DIR \"${CMAKE_INSTALL_PREFIX}/share/man\" CACHE PATH \"Installation directory for manual pages\")\nset(INSTALL_PKGCONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/share/pkgconfig\" CACHE PATH \"Installation directory for pkgconfig (.pc) files\")\n```\n\n----------------------------------------\n\nTITLE: Defining GZIP Member Format Structure\nDESCRIPTION: Outlines the structure of a GZIP member, including the header fields and optional sections. This format is crucial for understanding how GZIP files are organized and can be parsed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n+---+---+---+---+---+---+---+---+---+---+\n|ID1|ID2|CM |FLG|     MTIME     |XFL|OS | (more-->)\n+---+---+---+---+---+---+---+---+---+---+\n\n(if FLG.FEXTRA set)\n\n+---+---+=================================+\n| XLEN  |...XLEN bytes of \"extra field\"...| (more-->)\n+---+---+=================================+\n\n(if FLG.FNAME set)\n\n+=========================================+\n|...original file name, zero-terminated...| (more-->)\n+=========================================+\n\n(if FLG.FCOMMENT set)\n\n+===================================+\n|...file comment, zero-terminated...| (more-->)\n+===================================+\n\n(if FLG.FHCRC set)\n\n+---+---+\n| CRC16 |\n+---+---+\n\n+=======================+\n|...compressed blocks...| (more-->)\n+=======================+\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Parser Test with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the parser test executable in the TDengine project. It requires at least the C++11 standard and includes directories and links with relevant libraries, such as GoogleTest. Conditional logic is used to include additional directories and libraries when certain build options are enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/parser/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"build parser unit test\")\n\nIF(NOT TD_DARWIN)\n    # GoogleTest requires at least C++11\n    SET(CMAKE_CXX_STANDARD 11)\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n    ADD_EXECUTABLE(parserTest ${SOURCE_LIST})\n\n    TARGET_INCLUDE_DIRECTORIES(\n            parserTest\n            PUBLIC \"${TD_SOURCE_DIR}/include/libs/parser/\"\n            PRIVATE \"${TD_SOURCE_DIR}/source/libs/parser/inc\"\n    )\n\n    TARGET_LINK_LIBRARIES(\n            parserTest\n            PUBLIC os util common nodes parser catalog transport gtest function planner qcom\n    )\n\n    if(${BUILD_WINGETOPT})\n        target_include_directories(\n            parserTest\n            PUBLIC \"${TD_SOURCE_DIR}/contrib/wingetopt/src\"\n        )\n        target_link_libraries(parserTest PUBLIC wingetopt)\n    endif()\n\n    add_test(\n        NAME parserTest\n        COMMAND parserTest\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring TAOS Tools Build for TDengine (CMake)\nDESCRIPTION: Sets up the build configuration for TAOS tools in TDengine. It includes necessary directories and adds the taos-tools subdirectory to the build process when TD_TAOS_TOOLS is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_TAOS_TOOLS)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/tools/taos_tools/deps/avro/lang/c/src)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/client)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/common)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/util)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/os)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/libs/transport)\n    INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/libs/decimal)\n    ADD_SUBDIRECTORY(taos-tools)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Testing SQL Statement Table Name and Tag Setting in TDengine (C)\nDESCRIPTION: This code snippet tests the functionality of setting table names and tags using SQL statements in TDengine. It creates a statement, binds parameters for the table name and tag value, and executes the statement multiple times with different values. The test verifies the correct insertion of data and handling of table names and tags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/data_write/stmt.md#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid test_stmt_set_tbname_tag() {\n  TAOS* taos = NULL;\n  TAOS_STMT* stmt = NULL;\n  TAOS_RES* res = NULL;\n\n  const char* sql = \"insert into ? using stb_101 tags(?) values(now, 1)\";\n\n  taos = taos_connect(\"localhost\", \"root\", \"taosdata\", NULL, 0);\n  if (taos == NULL) {\n    printf(\"failed to connect to server, reason:%s\\n\", taos_errstr(NULL));\n    return;\n  }\n\n  stmt = taos_stmt_init(taos);\n  if (stmt == NULL) {\n    printf(\"failed to init stmt, reason:%s\\n\", taos_errstr(NULL));\n    taos_close(taos);\n    return;\n  }\n\n  res = taos_query(taos, \"create table if not exists stb_101(ts timestamp, c1 int) tags(t1 int)\");\n  taos_free_result(res);\n\n  int code = taos_stmt_prepare(stmt, sql, 0);\n  if (code != 0) {\n    printf(\"failed to execute taos_stmt_prepare. error:%s\\n\", taos_stmt_errstr(stmt));\n    taos_stmt_close(stmt);\n    taos_close(taos);\n    return;\n  }\n\n  int i = 0;\n  for (; i < 10; ++i) {\n    char buf[32];\n    sprintf(buf, \"tb_101_%d\", i);\n    int tag = i;\n\n    taos_stmt_set_tbname(stmt, buf);\n    taos_stmt_set_tags(stmt, (TAOS_BIND[]){{\n                                .buffer_type = TSDB_DATA_TYPE_INT,\n                                .buffer = &tag,\n                                .buffer_length = sizeof(tag),\n                              }});\n\n    code = taos_stmt_execute(stmt);\n    if (code != 0) {\n      printf(\"failed to execute insert statement. error:%s\\n\", taos_stmt_errstr(stmt));\n      break;\n    }\n  }\n\n  taos_stmt_close(stmt);\n  taos_close(taos);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine service on macOS\nDESCRIPTION: Starts the TDengine service using launchctl after installation on macOS.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo launchctl start com.tdengine.taosd\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring C++ Test Executable with CMake\nDESCRIPTION: Defines the process of adding and configuring a test executable 'tqTest' using CMake for non-Windows platforms. It includes test source files, directories to include, and necessary libraries. Dependencies include GoogleTest libraries (gtest_main) and project-specific modules, with no specific input or outputs defined.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(tqTest tqTest.cpp)\ntarget_include_directories(tqTest\n        PUBLIC\n        \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n\nTARGET_LINK_LIBRARIES(\n        tqTest\n        PUBLIC os util common vnode gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: CentOS 8 EOL Repository Fix\nDESCRIPTION: Commands to update repository URLs for CentOS 8 EOL systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\nsed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\n```\n\n----------------------------------------\n\nTITLE: Defining and linking pageBufferTest executable\nDESCRIPTION: This creates an executable named `pageBufferTest` from `pageBufferTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `pageBufferTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n\"# pageBufferTest\nadd_executable(pageBufferTest \\\"pageBufferTest.cpp\\\")\ntarget_link_libraries(pageBufferTest os util gtest_main)\nadd_test(\n    NAME pageBufferTest\n    COMMAND pageBufferTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Addition in CMake\nDESCRIPTION: This snippet conditionally adds a test directory to the build process if the 'BUILD_TEST' variable is true and the target platform is not Windows. This allows for optional testing based on user configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/catalog/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST} AND NOT ${TD_WINDOWS})\n ADD_SUBDIRECTORY(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining and linking cfgTest executable\nDESCRIPTION: This creates an executable named `cfgTest` from `cfgTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `cfgTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n\"# cfgTest\nadd_executable(cfgTest \\\"cfgTest.cpp\\\")\ntarget_link_libraries(cfgTest os util gtest_main)\nadd_test(\n    NAME cfgTest\n    COMMAND cfgTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RocksDB for TDengine\nDESCRIPTION: Sets up RocksDB with platform-specific compiler flags and configuration options. It handles different cases for Linux, macOS, and Windows, disabling tests and benchmarks while setting appropriate build and optimization options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_UV})\n    if(${TD_LINUX})\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS_REL}\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS_REL}\")\n\n        if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n            SET(CMAKE_BUILD_TYPE Release)\n        endif()\n    endif(${TD_LINUX})\nendif(${BUILD_WITH_UV})\n\nif(${BUILD_WITH_ROCKSDB})\n    if(${BUILD_CONTRIB})\n        if(${TD_LINUX})\n            SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS_REL} -Wno-error=maybe-uninitialized -Wno-error=unused-but-set-variable -Wno-error=unused-variable -Wno-error=unused-function -Wno-errno=unused-private-field -Wno-error=unused-result\")\n\n            if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n                SET(CMAKE_BUILD_TYPE Release)\n            endif()\n        endif(${TD_LINUX})\n\n        MESSAGE(STATUS \"ROCKSDB CXXXX STATUS CONFIG: \" ${CMAKE_CXX_FLAGS})\n        MESSAGE(STATUS \"ROCKSDB C STATUS CONFIG: \" ${CMAKE_C_FLAGS})\n\n        if(${TD_DARWIN})\n            SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-error=maybe-uninitialized\")\n        endif(${TD_DARWIN})\n\n        if(${TD_DARWIN_ARM64})\n            set(HAS_ARMV8_CRC true)\n        endif(${TD_DARWIN_ARM64})\n\n        if(${TD_WINDOWS})\n            unset(CMAKE_CXX_STANDARD CACHE) \n            SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4244 /wd4819 /std:c++17\")\n            SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /wd4244 /wd4819\")\n            option(WITH_JNI \"\" OFF)\n\n            if(CMAKE_C_FLAGS MATCHES \"/MT\" OR CMAKE_C_FLAGS MATCHES \"/MTd\")\n                message(\"Rocksdb build runtime lib use /MT or /MTd\")\n                option(WITH_MD_LIBRARY \"build with MD\" OFF)\n            endif()\n\n            set(SYSTEM_LIBS ${SYSTEM_LIBS} shlwapi.lib rpcrt4.lib)\n        endif(${TD_WINDOWS})\n\n        if(${TD_DARWIN})\n            option(HAVE_THREAD_LOCAL \"\" OFF)\n            option(WITH_IOSTATS_CONTEXT \"\" OFF)\n            option(WITH_PERF_CONTEXT \"\" OFF)\n        endif(${TD_DARWIN})\n\n        option(WITH_FALLOCATE \"\" OFF)\n        option(WITH_JEMALLOC \"\" OFF)\n        option(WITH_GFLAGS \"\" OFF)\n        option(PORTABLE \"\" ON)\n        option(WITH_LIBURING \"\" OFF)\n        option(FAIL_ON_WARNINGS OFF)\n\n        option(WITH_TESTS \"\" OFF)\n        option(WITH_BENCHMARK_TOOLS \"\" OFF)\n        option(WITH_TOOLS \"\" OFF)\n        option(WITH_LIBURING \"\" OFF)\n\n        option(ROCKSDB_BUILD_SHARED \"Build shared versions of the RocksDB libraries\" OFF)\n        add_subdirectory(rocksdb EXCLUDE_FROM_ALL)\n        target_include_directories(\n            rocksdb\n            PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/rocksdb/include>\n        )\n    else()\n        if(NOT ${TD_LINUX})\n            MESSAGE(STATUS \"ROCKSDB CXX STATUS CONFIG: \" ${CMAKE_CXX_FLAGS})\n            MESSAGE(STATUS \"ROCKSDB C STATUS CONFIG: \" ${CMAKE_C_FLAGS})\n\n            if(${TD_DARWIN})\n                SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-error=maybe-uninitialized\")\n                SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-error=maybe-uninitialized\")\n            endif(${TD_DARWIN})\n\n            if(${TD_DARWIN_ARM64})\n                set(HAS_ARMV8_CRC true)\n            endif(${TD_DARWIN_ARM64})\n\n            if(${TD_WINDOWS})\n                unset(CMAKE_CXX_STANDARD CACHE) \n                SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd4244 /wd4819 /std:c++17\")\n                SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /wd4244 /wd4819\")\n                option(WITH_JNI \"\" OFF)\n\n                if(CMAKE_C_FLAGS MATCHES \"/MT\" OR CMAKE_C_FLAGS MATCHES \"/MTd\")\n                    message(\"Rocksdb build runtime lib use /MT or /MTd\")\n                    option(WITH_MD_LIBRARY \"build with MD\" OFF)\n                endif()\n\n                set(SYSTEM_LIBS ${SYSTEM_LIBS} shlwapi.lib rpcrt4.lib)\n            endif(${TD_WINDOWS})\n\n            if(${TD_DARWIN})\n                option(HAVE_THREAD_LOCAL \"\" OFF)\n                option(WITH_IOSTATS_CONTEXT \"\" OFF)\n                option(WITH_PERF_CONTEXT \"\" OFF)\n            endif(${TD_DARWIN})\n\n            option(WITH_FALLOCATE \"\" OFF)\n            option(WITH_JEMALLOC \"\" OFF)\n            option(WITH_GFLAGS \"\" OFF)\n            option(PORTABLE \"\" ON)\n            option(WITH_LIBURING \"\" OFF)\n            option(FAIL_ON_WARNINGS OFF)\n\n            option(WITH_TESTS \"\" OFF)\n            option(WITH_BENCHMARK_TOOLS \"\" OFF)\n            option(WITH_TOOLS \"\" OFF)\n            option(WITH_LIBURING \"\" OFF)\n\n            option(ROCKSDB_BUILD_SHARED \"Build shared versions of the RocksDB libraries\" OFF)\n            add_subdirectory(rocksdb EXCLUDE_FROM_ALL)\n            target_include_directories(\n                rocksdb\n                PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/rocksdb/include>\n            )\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Killing a Connection in TDengine\nDESCRIPTION: This SQL command terminates a specific connection in TDengine. The `conn_id` parameter identifies the connection to be terminated and can be obtained using the `SHOW CONNECTIONS` command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nKILL CONNECTION conn_id;\n```\n\n----------------------------------------\n\nTITLE: Extended Generic SQL Execution with Request ID in TDengine JDBC\nDESCRIPTION: Extended method for executing any SQL statement with request tracking. The reqId parameter facilitates tracing of specific SQL operations through the database system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_33\n\nLANGUAGE: Java\nCODE:\n```\nboolean execute(String sql, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Test Suite\nDESCRIPTION: Sets up the TDengine test suite configuration. It specifies the test case, creates an instance of the TestPrecisionNs class, and defines setup and teardown procedures.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/metadata/time_precision.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntdCases.addWindows(__file__, __class__.__name__)\ntdCases.addLinux(__file__, __class__.__name__)\n\ndefault_case = TestPrecisionNs()\n\ndef setup_module(module):\n    default_case.init(taos.connect())\n\ndef teardown_module(module):\n    default_case.stop()\n```\n\n----------------------------------------\n\nTITLE: Altering Database Replica Count\nDESCRIPTION: SQL command to modify the number of replicas for an existing database between single and dual replica configurations\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/18-ha/02-replica2.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nalter database <dbname> replica 2|1\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on Ubuntu\nDESCRIPTION: Installs required tools and libraries for building TDengine on Ubuntu 18.04, 20.04, and 22.04 using apt-get.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y gcc cmake build-essential git libjansson-dev \\\n  libsnappy-dev liblzma-dev zlib1g-dev pkg-config\n```\n\n----------------------------------------\n\nTITLE: Conditional C++ Test Build Configuration in CMake\nDESCRIPTION: Demonstrates conditional setup of the backendTest based on the TD_DARWIN flag. Sets the C++ standard, gathers source files, and configures the build process tailored for non-Darwin platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/stream/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT TD_DARWIN)\n        SET(CMAKE_CXX_STANDARD 11)\n        AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n        ADD_EXECUTABLE(backendTest ${SOURCE_LIST})\n        TARGET_LINK_LIBRARIES(\n                backendTest\n                PUBLIC rocksdb\n                PUBLIC os common gtest stream executor qcom index transport util vnode\n        )\n\n        TARGET_INCLUDE_DIRECTORIES(\n                backendTest\n                PUBLIC \"${TD_SOURCE_DIR}/include/libs/stream/\"\n                PRIVATE \"${TD_SOURCE_DIR}/source/libs/stream/inc\"\n        )\n\n        ADD_TEST(\n                NAME backendTest\n                COMMAND backendTest\n        )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Rendering Document Cards in Docusaurus\nDESCRIPTION: This code snippet demonstrates how to import 'DocCardList' and 'useCurrentSidebarCategory' from Docusaurus theme libraries. It renders a list of document cards based on the current sidebar category, allowing easy access to related documentation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/index.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Closing Statement and Releasing Resources in TDengine (C)\nDESCRIPTION: Releases all resources after execution is complete.  The function takes a pointer to a valid pre-compiled SQL statement object as input. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n\"int32_t ws_stmt_close(WS_STMT *stmt)\"\n\n```\n\n----------------------------------------\n\nTITLE: Pulling TDgpt Docker Image (Full Version)\nDESCRIPTION: Commands to pull the latest or a specific version of the full TDgpt Docker image.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull tdengine/tdengine-tdgpt-full:latest\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull tdengine/tdengine-tdgpt-full:3.3.6.0\n```\n\n----------------------------------------\n\nTITLE: JSON Array Creation with Manual Reference Management\nDESCRIPTION: Example showing how to create a JSON array and append an integer value with manual reference counting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\njson_t *array, *integer;\n\narray = json_array();\ninteger = json_integer(42);\n\njson_array_append(array, integer);\njson_decref(integer);\n```\n\n----------------------------------------\n\nTITLE: Managing TDengine Services with Systemd on Linux\nDESCRIPTION: Commands to start individual TDengine services using systemd on Linux systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start taosd\nsudo systemctl start taosadapter\nsudo systemctl start taoskeeper\nsudo systemctl start taos-explorer\n```\n\n----------------------------------------\n\nTITLE: Advanced ZLIB File Compression Implementation\nDESCRIPTION: Comprehensive implementation of file compression using ZLIB, including functions for compressing and uncompressing files with size tracking. Features configurable compression levels and handles file I/O operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/old/visual-basic.txt#2025-04-16_snippet_1\n\nLANGUAGE: visual basic\nCODE:\n```\nOption Explicit\nPrivate lngpvtPcnSml As Long 'Stores value for 'lngPercentSmaller'\nPrivate Const SUCCESS As Long = 0\nPrivate Const strFilExt As String = \".cpr\"\nPrivate Declare Function lngfncCpr Lib \"zlib.dll\" Alias \"compress2\" (ByRef dest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long, ByVal level As Integer) As Long\nPrivate Declare Function lngfncUcp Lib \"zlib.dll\" Alias \"uncompress\" (ByRef dest As Any, ByRef destLen As Any, ByRef src As Any, ByVal srcLen As Long) As Long\n\nPublic Sub subCompressFile(ByVal strargOriFilPth As String, Optional ByVal strargCprFilPth As String, Optional ByVal intLvl As Integer = 9)\n    Dim strCprPth As String\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim bytaryOri() As Byte\n    Dim bytaryCpr() As Byte\n    lngOriSiz = FileLen(strargOriFilPth)\n    ReDim bytaryOri(lngOriSiz - 1)\n    Open strargOriFilPth For Binary Access Read As #1\n        Get #1, , bytaryOri()\n    Close #1\n    strCprPth = IIf(strargCprFilPth = \"\", strargOriFilPth, strargCprFilPth)\n    strCprPth = strCprPth & IIf(Right(strCprPth, Len(strFilExt)) = strFilExt, \"\", strFilExt)\n    lngCprSiz = (lngOriSiz * 1.01) + 12\n    ReDim bytaryCpr(lngCprSiz - 1)\n    If lngfncCpr(bytaryCpr(0), lngCprSiz, bytaryOri(0), lngOriSiz, intLvl) = SUCCESS Then\n        lngpvtPcnSml = (1# - (lngCprSiz / lngOriSiz)) * 100\n        ReDim Preserve bytaryCpr(lngCprSiz - 1)\n        Open strCprPth For Binary Access Write As #1\n            Put #1, , bytaryCpr()\n            Put #1, , lngOriSiz\n        Close #1\n    Else\n        MsgBox \"Compression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n\nPublic Sub subUncompressFile(ByVal strargFilPth As String)\n    Dim bytaryCpr() As Byte\n    Dim bytaryOri() As Byte\n    Dim lngOriSiz As Long\n    Dim lngCprSiz As Long\n    Dim strOriPth As String\n    lngCprSiz = FileLen(strargFilPth)\n    ReDim bytaryCpr(lngCprSiz - 1)\n    Open strargFilPth For Binary Access Read As #1\n        Get #1, , bytaryCpr()\n    Close #1\n    lngOriSiz = bytaryCpr(lngCprSiz - 1) * (2 ^ 24) _\n              + bytaryCpr(lngCprSiz - 2) * (2 ^ 16) _\n              + bytaryCpr(lngCprSiz - 3) * (2 ^ 8) _\n              + bytaryCpr(lngCprSiz - 4)\n    ReDim Preserve bytaryCpr(lngCprSiz - 5)\n    ReDim bytaryOri(lngOriSiz - 1)\n    If lngfncUcp(bytaryOri(0), lngOriSiz, bytaryCpr(0), lngCprSiz) = SUCCESS Then\n        strOriPth = Left(strargFilPth, Len(strargFilPth) - Len(strFilExt))\n        Open strOriPth For Binary Access Write As #1\n            Put #1, , bytaryOri()\n        Close #1\n    Else\n        MsgBox \"Uncompression error\"\n    End If\n    Erase bytaryCpr\n    Erase bytaryOri\nEnd Sub\n\nPublic Property Get lngPercentSmaller() As Long\n    lngPercentSmaller = lngpvtPcnSml\nEnd Property\n```\n\n----------------------------------------\n\nTITLE: INS_COLUMNS Schema Definition\nDESCRIPTION: System table describing column definitions for all tables including names, types, and constraints.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/22-meta.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Column Name   | Data Type    | Description |\n| table_name    | VARCHAR(192) | Table name |\n| db_name       | VARCHAR(64)  | Name of the database the table belongs to |\n| table_type    | VARCHAR(21)  | Table type |\n| col_name      | VARCHAR(64)  | Name of the column |\n| col_type      | VARCHAR(32)  | Type of the column |\n| col_length    | INT          | Length of the column |\n| col_precision | INT          | Precision of the column |\n| col_scale     | INT          | Scale of the column |\n| col_nullable  | INT          | Whether the column can be null |\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on CentOS 8/Rocky Linux\nDESCRIPTION: Commands to enable required repositories and install dependencies on CentOS 8 or Rocky Linux\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install -y epel-release\nsudo yum install -y dnf-plugins-core\nsudo yum config-manager --set-enabled powertools\nsudo yum install -y zlib-devel zlib-static xz-devel snappy-devel jansson jansson-devel pkgconfig libatomic libatomic-static libstdc++-static openssl-devel gawk\n```\n\n----------------------------------------\n\nTITLE: Linking Utility Libraries for Management Module\nDESCRIPTION: Links the node_util library to the mgmt_mnode static library, establishing dependency between libraries\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_mnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    mgmt_mnode node_util\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: Conditionally adds the test subdirectory to the build if BUILD_TEST is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_TEST})\n  add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Building TSIM Executable\nDESCRIPTION: Creates the TSIM executable from main source file and links it with the static library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nLIST(APPEND TSIM_EXE_SRC src/simMain.c)\nADD_EXECUTABLE(tsim ${TSIM_EXE_SRC})\nTARGET_LINK_LIBRARIES(\n    tsim\n    PUBLIC tsim_static\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Synchronization Test Executables - CMake\nDESCRIPTION: This section of the CMake file adds executable targets for various synchronization tests related to the TDengine project. Each test is defined using the 'add_executable' command followed by the name of the test and its respective source file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(syncTest \"\")\nadd_executable(syncRaftIdCheck \"\")\nadd_executable(syncEnvTest \"\")\nadd_executable(syncPingTimerTest \"\")\nadd_executable(syncIOTickQTest \"\")\nadd_executable(syncIOTickPingTest \"\")\nadd_executable(syncIOSendMsgTest \"\")\nadd_executable(syncIOClientTest \"\")\nadd_executable(syncIOServerTest \"\")\nadd_executable(syncRaftStoreTest \"\")\nadd_executable(syncEnqTest \"\")\nadd_executable(syncIndexTest \"\")\nadd_executable(syncInitTest \"\")\nadd_executable(syncUtilTest \"\")\nadd_executable(syncVotesGrantedTest \"\")\nadd_executable(syncVotesRespondTest \"\")\nadd_executable(syncIndexMgrTest \"\")\nadd_executable(syncLogStoreTest \"\")\nadd_executable(syncEntryTest \"\")\nadd_executable(syncEntryCacheTest \"\")\nadd_executable(syncHashCacheTest \"\")\nadd_executable(syncRequestVoteTest \"\")\nadd_executable(syncRequestVoteReplyTest \"\")\nadd_executable(syncAppendEntriesTest \"\")\nadd_executable(syncAppendEntriesBatchTest \"\")\nadd_executable(syncAppendEntriesReplyTest \"\")\nadd_executable(syncTimeoutTest \"\")\nadd_executable(syncPingTest \"\")\nadd_executable(syncPingReplyTest \"\")\nadd_executable(syncRpcMsgTest \"\")\nadd_executable(syncPingTimerTest2 \"\")\nadd_executable(syncPingSelfTest \"\")\nadd_executable(syncElectTest \"\")\nadd_executable(syncEncodeTest \"\")\nadd_executable(syncWriteTest \"\")\nadd_executable(syncReplicateTest \"\")\nadd_executable(syncRefTest \"\")\nadd_executable(syncLogStoreCheck \"\")\nadd_executable(syncLogStoreCheck2 \"\")\nadd_executable(syncRaftCfgTest \"\")\nadd_executable(syncRespMgrTest \"\")\nadd_executable(syncSnapshotTest \"\")\nadd_executable(syncApplyMsgTest \"\")\nadd_executable(syncConfigChangeTest \"\")\nadd_executable(syncConfigChangeSnapshotTest \"\")\nadd_executable(syncSnapshotSendTest \"\")\nadd_executable(syncSnapshotRspTest \"\")\nadd_executable(syncSnapshotSenderTest \"\")\nadd_executable(syncSnapshotReceiverTest \"\")\nadd_executable(syncTestTool \"\")\nadd_executable(syncRaftLogTest \"\")\nadd_executable(syncRaftLogTest2 \"\")\nadd_executable(syncRaftLogTest3 \"\")\nadd_executable(syncLeaderTransferTest \"\")\nadd_executable(syncRestoreFromSnapshot \"\")\nadd_executable(syncRaftCfgIndexTest \"\")\nadd_executable(syncHeartbeatTest \"\")\nadd_executable(syncHeartbeatReplyTest \"\")\nadd_executable(syncLocalCmdTest \"\")\nadd_executable(syncPreSnapshotTest \"\")\nadd_executable(syncPreSnapshotReplyTest \"\")\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files and Creating Static Library in CMake\nDESCRIPTION: Collects source files from the src directory into the MGMT_VNODE variable and creates a static library named mgmt_vnode using these sources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_vnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src MGMT_VNODE)\nadd_library(mgmt_vnode STATIC ${MGMT_VNODE})\n```\n\n----------------------------------------\n\nTITLE: Adding a Test in CMake\nDESCRIPTION: This snippet registers the executable as a test that can be run by CTest, with the test name specified.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tfs/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n    NAME tfs_test\n    COMMAND tfs_test\n)\n```\n\n----------------------------------------\n\nTITLE: Running TDengine Docker Container with Data Persistence\nDESCRIPTION: Docker run command to start TDengine container with volume mapping for data and log persistence\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/01-docker.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -v ~/data/taos/dnode/data:/var/lib/taos \\\n  -v ~/data/taos/dnode/log:/var/log/taos \\\n  -p 6030:6030 -p 6041:6041 -p 6043:6043 -p 6044-6049:6044-6049 -p 6044-6045:6044-6045/udp -p 6060:6060 tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Scheduler Library\nDESCRIPTION: Links multiple libraries to the scheduler library, including system, utility, and other project-specific libraries\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scheduler/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n        scheduler\n        PUBLIC os util nodes planner qcom common catalog transport command qworker executor index\n)\n```\n\n----------------------------------------\n\nTITLE: Suggested TCompressionLevel Enumeration in Delphi\nDESCRIPTION: Current enumeration for compression levels and a suggested alternative using 'z' prefix to avoid naming conflicts with other components like TColor.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/contrib/delphi/readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: Delphi\nCODE:\n```\nTCompressionLevel = (clNone, clFastest, clDefault, clMax);\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Show Test\nDESCRIPTION: Discovers source files in the current directory for the show test executable using CMake's aux_source_directory command\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/show/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_SHOW_TEST_SRC)\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Documentation Cards with Docusaurus in MDX\nDESCRIPTION: This snippet uses Docusaurus components to render a card list of the current sidebar category items. It imports the DocCardList component and the useCurrentSidebarCategory hook to dynamically generate navigation cards for the components documentation section.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/index.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auxiliary Source Directory for Query Node Management\nDESCRIPTION: Sets the source directory for the management query node library, specifying the source files to be compiled\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_qnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src MGMT_QNODE)\n```\n\n----------------------------------------\n\nTITLE: Building Account Test Executable with CMake in TDengine\nDESCRIPTION: CMake configuration that collects source files from the current directory, builds an executable named 'acctTest', links it against the 'sut' library, and registers it as a test case for the testing framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/acct/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_ACCT_TEST_SRC)\nadd_executable(acctTest ${MNODE_ACCT_TEST_SRC})\ntarget_link_libraries(\n    acctTest\n    PUBLIC sut\n)\n\nadd_test(\n    NAME acctTest\n    COMMAND acctTest\n)\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for TDengine testing\nDESCRIPTION: This snippet explains how to set up environment variables to define testing scenarios for TDengine. There are two scripts provided to configure the environment for testing with built binaries or installed packages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ./setenv_build.sh\nsource ./setenv_install.sh\n```\n\n----------------------------------------\n\nTITLE: Using SIGN Function in SQL\nDESCRIPTION: The SIGN function returns the sign of the specified value (-1 for negative, 0 for zero, 1 for positive). It maintains the original data type and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_19\n\nLANGUAGE: SQL\nCODE:\n```\nSIGN(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Package Settings for Avro C Bindings\nDESCRIPTION: Defines CMake package configuration settings including package name, description, version, contact information, and packaging parameters. Sets up packaging generation for TGZ format and configures source package filtering rules.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/CPackConfig.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CPACK_PACKAGE_NAME \"avro-c\")\nset(CPACK_PACKAGE_DESCRIPTION \"C bindings for Avro data serialization framework\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"C bindings for Avro data serialization framework\")\nset(CPACK_PACKAGE_VENDOR \"Apache Software Foundation\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${AVRO_MAJOR_VERSION}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${AVRO_MINOR_VERSION}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${AVRO_PATCH_VERSION}${AVRO_VERSION_EXTENSION}\")\nset(CPACK_PACKAGE_VERSION \"${AVRO_VERSION}\")\nset(CPACK_PACKAGE_CONTACT \"avro-dev@apache.org\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE\")\nset(CPACK_STRIP_FILES true)\n\nset(CPACK_SOURCE_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"/usr\")\nset(CPACK_GENERATOR \"TGZ\")\nset(CPACK_SOURCE_GENERATOR \"TGZ\")\n\nset(CPACK_SOURCE_IGNORE_FILES \"^${CMAKE_BINARY_DIR};/\\\\.gitignore;/\\\\.svn;\\\\.swp$;\\\\.#;/#;.*~\")\n\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Running Crash_Gen Against a Cluster (Bash)\nDESCRIPTION: Command to run Crash_Gen in client mode against a cluster, with 10 threads, 100 steps, and 3 replicas.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/pytest/crash_gen/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./crash_gen.sh -p -t 10 -s 100 -i 3\n```\n\n----------------------------------------\n\nTITLE: Synchronize Entire Database\nDESCRIPTION: This command synchronizes the entire database from one TDengine instance to another using taosX. It uses the `run` command with the `-f` and `-t` parameters to specify the source and target DSNs, respectively, and the `-v` parameter for verbose logging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"taosx run -f 'taos://root:taosdata@localhost:6030/db1' -t 'taos:///db2' -v\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitor Unit Tests with CMake in TDengine\nDESCRIPTION: Enables testing in CMake, creates a test executable from all source files in the current directory, links it against the monitor library and Google Test, and registers it as a test to be run by CTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/monitor/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n\naux_source_directory(. MONITOR_TEST_SRC)\nadd_executable(monitorTest ${MONITOR_TEST_SRC})\ntarget_link_libraries(\n  monitorTest\n  PUBLIC monitor\n  PUBLIC gtest_main\n)\n\nadd_test(\n    NAME monitorTest\n    COMMAND monitorTest\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard for GoogleTest\nDESCRIPTION: Configures the minimum C++ standard required for GoogleTest to C++11, ensuring compatibility with the testing framework\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\n```\n\n----------------------------------------\n\nTITLE: Setting Kafka Environment Variables\nDESCRIPTION: This script sets the `KAFKA_HOME` environment variable and adds the Kafka binary directory to the `PATH`, allowing Kafka commands to be run from any location.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nexport KAFKA_HOME=/opt/kafka\nexport PATH=$PATH:$KAFKA_HOME/bin\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Doxygen for API Documentation Generation in CMake\nDESCRIPTION: This CMake script sets up Doxygen for generating API documentation. It checks for the BUILD_DOCS option, finds Doxygen, configures the Doxyfile, and creates a custom target to run Doxygen. The script also handles cases where Doxygen is not found.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_DOCS})\n    find_package(Doxygen)\n    if (DOXYGEN_FOUND)\n        # Build the doc\n        set(DOXYGEN_IN ${TD_SOURCE_DIR}/docs/doxgen/Doxyfile.in)\n        set(DOXYGEN_OUT ${CMAKE_BINARY_DIR}/Doxyfile)\n\n        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)\n        message(\"Doxygen build start\")\n\n        add_custom_target(\n            tdengine_doxygen ALL\n            COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}\n            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n            COMMENT \"Generating API doxumentation with Doxygen\"\n            VERBATIM\n        )\n    else(DOXYGEN_FOUND)\n        message(\"Doxygen need to be installed to generate the doxygen documentation\")\n    endif(DOXYGEN_FOUND)\nendif(${BUILD_DOCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring GEOS Library Build\nDESCRIPTION: Sets up build configuration for GEOS (Geometry Engine Open Source) library with platform-specific compiler flags and build type settings. Configures as a static library build with custom include directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_GEOS})\n    if(${TD_LINUX})\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS_REL}\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS_REL}\")\n\n        if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n            SET(CMAKE_BUILD_TYPE Release)\n        endif()\n    endif(${TD_LINUX})\n\n    option(BUILD_SHARED_LIBS \"Build GEOS with shared libraries\" OFF)\n    add_subdirectory(geos EXCLUDE_FROM_ALL)\n\n    if(${TD_WINDOWS})\n        SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n        SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n    else()\n        unset(CMAKE_CXX_STANDARD CACHE)\n    endif(${TD_WINDOWS})\n\n    target_include_directories(\n        geos_c\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/geos/include>\n    )\nendif(${BUILD_GEOS})\n```\n\n----------------------------------------\n\nTITLE: CentOS 8 Repository Fix\nDESCRIPTION: Commands to fix repository URLs for CentOS 8 EOL issues\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*\nsed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*\n```\n\n----------------------------------------\n\nTITLE: Deleting a Replication Task (taosx)\nDESCRIPTION: This shell command deletes stopped replication tasks, either for a specific replica ID or all stopped tasks on the instance. It can also force deletion without stopping the tasks first.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica remove [id] [--force]\n```\n\n----------------------------------------\n\nTITLE: Setting Source Directory for Decimal Library\nDESCRIPTION: This command defines the source directory for the decimal library.  The variable DECIMAL_SRC will contain the list of source files located in the specified directory (DECIMAL_SRC).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"aux_source_directory(src DECIMAL_SRC)\"\n```\n\n----------------------------------------\n\nTITLE: Listing Cluster Directories (Bash)\nDESCRIPTION: Command to list the directories created for each DNode in the TDengine cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/pytest/crash_gen/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls build/cluster*\n```\n\n----------------------------------------\n\nTITLE: Defining and linking arrayTest executable\nDESCRIPTION: This creates an executable named `arrayTest` from `arrayTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `arrayTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"# arrayTest\nadd_executable(arrayTest \\\"arrayTest.cpp\\\")\ntarget_link_libraries(arrayTest os util gtest_main)\nadd_test(\n    NAME arrayTest\n    COMMAND arrayTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Example Binaries Configuration\nDESCRIPTION: Sets up example and test binary targets linking against the ZLib library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(example test/example.c)\ntarget_link_libraries(example zlib)\nadd_test(example example)\n\nadd_executable(minigzip test/minigzip.c)\ntarget_link_libraries(minigzip zlib)\n\nif(HAVE_OFF64_T)\n    add_executable(example64 test/example.c)\n    target_link_libraries(example64 zlib)\n    set_target_properties(example64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\n    add_test(example64 example64)\n\n    add_executable(minigzip64 test/minigzip.c)\n    target_link_libraries(minigzip64 zlib)\n    set_target_properties(minigzip64 PROPERTIES COMPILE_FLAGS \"-D_FILE_OFFSET_BITS=64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: TDengine Node Information Query\nDESCRIPTION: SQL query to view the most recent monitoring record from the taosd_dnodes_info table\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/06-taoskeeper.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntaos> select last_row(*) from taosd_dnodes_info;\n      last_row(_ts)      |   last_row(disk_engine)   |  last_row(system_net_in)  |   last_row(vnodes_num)    | last_row(system_net_out)  |     last_row(uptime)      |    last_row(has_mnode)    |  last_row(io_read_disk)   | last_row(error_log_count) |     last_row(io_read)     |    last_row(cpu_cores)    |    last_row(has_qnode)    |    last_row(has_snode)    |   last_row(disk_total)    |   last_row(mem_engine)    | last_row(info_log_count)  |   last_row(cpu_engine)    |  last_row(io_write_disk)  | last_row(debug_log_count) |    last_row(disk_used)    |    last_row(mem_total)    |    last_row(io_write)     |     last_row(masters)     |   last_row(cpu_system)    | last_row(trace_log_count) |    last_row(mem_free)     |\nn 2024-08-07 14:54:09.174 |         0.000000000000000 |      3379.093240947399863 |        37.000000000000000 |      5265.998201139278535 |     64402.000000000000000 |         1.000000000000000 |      8323.261934108399146 |         6.000000000000000 |     40547.386655118425551 |        16.000000000000000 |         0.000000000000000 |         0.000000000000000 |     5.272955781120000e+11 |   2443032.000000000000000 |       423.000000000000000 |         0.556269622200215 |    677731.836503547732718 |    356380.000000000000000 |     4.997186764800000e+10 |  65557284.000000000000000 |    714177.054532129666768 |        37.000000000000000 |         2.642280705451021 |         0.000000000000000 |  11604276.000000000000000 |\nQuery OK, 1 row(s) in set (0.003168s)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake C++ Standard for GoogleTest in C++\nDESCRIPTION: This snippet sets the CMake C++ standard to 11, which is a requirement for using GoogleTest in the project. It ensures compatibility with features used in test files. There are no parameters or inputs; it directly sets the compiler standard for the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Static Library Build\nDESCRIPTION: Sets up SQLite as a static imported library with necessary linking configurations for different platforms. Includes pthread and math library dependencies, with conditional dl library linking for non-Windows systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_WITH_SQLITE})\n    add_library(sqlite STATIC IMPORTED GLOBAL)\n    set_target_properties(sqlite PROPERTIES\n        IMPORTED_LOCATION \"${CMAKE_CURRENT_SOURCE_DIR}/sqlite/.libs/libsqlite3.a\"\n        INTERFACE_INCLUDE_DIRECTORIES \"${CMAKE_CURRENT_SOURCE_DIR}/sqlite\"\n    )\n    target_link_libraries(sqlite\n        INTERFACE m\n        INTERFACE pthread\n    )\n\n    if(NOT TD_WINDOWS)\n        target_link_libraries(sqlite\n            INTERFACE dl\n        )\n    endif(NOT TD_WINDOWS)\nendif(${BUILD_WITH_SQLITE})\n```\n\n----------------------------------------\n\nTITLE: Creating Meter Tables in TDengine\nDESCRIPTION: This SQL command creates a stable and a regular table in the TDengine database for storing meter data, including timestamps, numerical values, temperature, and tags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE STABLE meters (ts TIMESTAMP, num INT, temperature FLOAT, goods INT) TAGS (device NCHAR(20));\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE goods (ts1 TIMESTAMP, ts2 TIMESTAMP, goods FLOAT);\n```\n\n----------------------------------------\n\nTITLE: Building Snappy with CMake\nDESCRIPTION: Commands to build the Snappy library using CMake build system\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build && cmake ../ && make\n```\n\n----------------------------------------\n\nTITLE: Creating Database Test Executable\nDESCRIPTION: Generates executable target from collected source files with the name 'dbTest'\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/db/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dbTest ${MNODE_DB_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Restarting taosAdapter Service\nDESCRIPTION: Command to restart the taosAdapter service using systemctl\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/08-tcollector.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart taosadapter\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Page for Perspective Viewer\nDESCRIPTION: The HTML configuration for Perspective Viewer embeds the viewer into a webpage, connects to the Perspective server via WebSocket, and configures charts for real-time data display.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/02-perspective.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{#include docs/examples/perspective/prsp-viewer.html:perspective_viewer}}\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Array Structure in C\nDESCRIPTION: Code that checks if the parsed JSON root is an array as expected according to the GitHub API response structure. Shows proper error handling and cleanup with json_decref when the validation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nif(!json_is_array(root))\n{\n    fprintf(stderr, \"error: root is not an array\\n\");\n    json_decref(root);\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docusaurus Card List for TDengine Documentation\nDESCRIPTION: MDX code block that implements a documentation card list component using Docusaurus theme components. The code imports necessary components and renders a card list based on the current sidebar category items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/index.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Basic Package Requirements without Version\nDESCRIPTION: Lists Python packages without specific version constraints, indicating a flexible dependency approach\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/python/taosdemo/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrequests\nmultipledispatch\n```\n\n----------------------------------------\n\nTITLE: Configuring a Static Library with CMake\nDESCRIPTION: This CMake file configures a static library named 'tcs' using sources from the 'src' directory. The configuration specifies include directories and links other libraries such as 'az' and 'common'. It supports conditional inclusion of testing directories based on the 'BUILD_TEST' flag. Prerequisites include having a CMake project setup and relevant source files in the 'src' directory. Key parameters include TD_SOURCE_DIR and CMAKE_CURRENT_SOURCE_DIR for determining paths.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tcs/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src TCS_SRC)\n\nadd_library(tcs STATIC ${TCS_SRC})\ntarget_include_directories(\n    tcs\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/tcs\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n    tcs\n    PUBLIC az\n    PUBLIC common\n\n    # PUBLIC cjson\n    # PUBLIC os\n    # PUBLIC util\n    # PUBLIC crypt\n)\n\nif(${BUILD_TEST})\n    add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring UDF Library Path\nDESCRIPTION: Configuration entry to add to TDengine configuration file to set the Python library search path for UDFs. This allows UDFs to find third-party modules installed in the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nUdfdLdLibPath /usr/lib/python3.8:/usr/lib/python3.8/lib-dynload:/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages\n```\n\n----------------------------------------\n\nTITLE: Generating Autotools Configuration for Jansson in Bash\nDESCRIPTION: This snippet shows how to generate the ./configure script using autoreconf when working with a Git checkout of Jansson.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/README.rst#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ autoreconf -i\n```\n\n----------------------------------------\n\nTITLE: Configuring GTest Include Directories\nDESCRIPTION: Configures include directories for Google Test if the library is found in the system. Sets up source directories for compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(HEADER_GTEST_INCLUDE_DIR AND(LIB_GTEST_STATIC_DIR OR LIB_GTEST_SHARED_DIR))\n    MESSAGE(STATUS \"gTest library found, build os test\")\n\n    INCLUDE_DIRECTORIES(${HEADER_GTEST_INCLUDE_DIR})\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Test Targets in CMake\nDESCRIPTION: Sets up test targets for Snappy if testing is enabled, including necessary dependencies and compilation options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(SNAPPY_BUILD_TESTS)\n  enable_testing()\n\n  add_executable(snappy_unittest \"\")\n  target_sources(snappy_unittest\n    PRIVATE\n      \"snappy_unittest.cc\"\n      \"snappy-test.cc\"\n  )\n  target_compile_definitions(snappy_unittest PRIVATE -DHAVE_CONFIG_H)\n  target_link_libraries(snappy_unittest snappy ${GFLAGS_LIBRARIES})\n\n  if(HAVE_LIBZ)\n    target_link_libraries(snappy_unittest z)\n  endif(HAVE_LIBZ)\n  if(HAVE_LIBLZO2)\n    target_link_libraries(snappy_unittest lzo2)\n  endif(HAVE_LIBLZO2)\n\n  target_include_directories(snappy_unittest\n    BEFORE PRIVATE\n      \"${PROJECT_SOURCE_DIR}\"\n      \"${GTEST_INCLUDE_DIRS}\"\n      \"${GFLAGS_INCLUDE_DIRS}\"\n  )\n\n  add_test(\n    NAME snappy_unittest\n    WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n    COMMAND \"${PROJECT_BINARY_DIR}/snappy_unittest\")\nendif(SNAPPY_BUILD_TESTS)\n```\n\n----------------------------------------\n\nTITLE: Creating Avro Static Library in CMake\nDESCRIPTION: This snippet creates a static library target for Avro, sets its output name, and links necessary dependencies. It's a crucial step in building the Avro C library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/src/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(avro-static STATIC ${AVRO_SRC})\ntarget_link_libraries(avro-static ${JANSSON_LIBRARIES} ${CODEC_LIBRARIES} ${THREADS_LIBRARIES})\nset_target_properties(avro-static PROPERTIES OUTPUT_NAME avro)\n```\n\n----------------------------------------\n\nTITLE: Building Filter Unit Test Executable with CMake\nDESCRIPTION: This CMake snippet defines the build process for the `filterTest` executable. It sets the C++ standard to 11, adds source files from the current directory, links necessary libraries including Google Test (gtest) and TDengine modules, and configures include directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/filter/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"build filter unit test\")\n\n# GoogleTest requires at least C++11\nSET(CMAKE_CXX_STANDARD 11)\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\nADD_EXECUTABLE(filterTest ${SOURCE_LIST})\nTARGET_LINK_LIBRARIES(\n        filterTest\n        PUBLIC os util common gtest qcom function nodes scalar parser catalog transport\n)\n\nTARGET_INCLUDE_DIRECTORIES(\n        filterTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/scalar/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/libs/scalar/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Zlib with Visual Studio 2008 Command Line\nDESCRIPTION: Command line instruction for building Zlib using Visual Studio 2008 vcbuild tool. This command rebuilds the solution targeting Win32 Release configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/contrib/vstudio/readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nvcbuild /rebuild contrib\\vstudio\\vc9\\zlibvc.sln \"Release|Win32\"\n```\n\n----------------------------------------\n\nTITLE: Defining File Concatenation Function in CMake\nDESCRIPTION: Defines a CMake function 'cat' to read contents from one file and append them to another file. This is used throughout the script to combine multiple CMakeLists.txt files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(cat IN_FILE OUT_FILE)\n    file(READ ${IN_FILE} CONTENTS)\n    file(APPEND ${OUT_FILE} \"${CONTENTS}\")\nendfunction(cat IN_FILE OUT_FILE)\n```\n\n----------------------------------------\n\nTITLE: Getting ResultSet Holdability in Java\nDESCRIPTION: Retrieves the default holdability for `ResultSet` objects. It throws `SQLException` if the operation fails. This indicates if the result sets will remain open after a commit.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n\"`int getHoldability() throws SQLException`\"\n```\n\n----------------------------------------\n\nTITLE: Linking Utility Libraries for Query Node Management\nDESCRIPTION: Links the node_util library to the mgmt_qnode library, enabling access to utility functions\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_qnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    mgmt_qnode node_util\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Mono Environment for C#\nDESCRIPTION: Command to install the complete Mono build environment required for compiling and running C# applications like Taosdemo. Mono is a cross-platform, open-source .NET framework required to build and run C# applications.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/C#/taosdemo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyum/apt install mono-complete\n```\n\n----------------------------------------\n\nTITLE: Adding Scalar Subdirectory - CMake\nDESCRIPTION: Similar to the previous snippet, this command adds the 'scalar' subdirectory into the CMake build process. It serves to modularize the codebase by allowing separate compilation of the 'scalar' component. A valid CMakeLists.txt should exist in the 'scalar' directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(scalar)\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components in MDX\nDESCRIPTION: This code snippet imports Docusaurus components for rendering a dynamic documentation list. It uses DocCardList to display documentation cards and useCurrentSidebarCategory to retrieve the current sidebar category items. This allows to display documentation links related to the current section.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/07-tool/index.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Adding source files to AZ_SRC variable\nDESCRIPTION: This command uses the aux_source_directory function to find all source files in the 'src' directory and store them in the AZ_SRC variable.  This variable is then used in the add_library command to specify the source files for the 'az' library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src AZ_SRC)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building TDengine Stream Test Module with CMake\nDESCRIPTION: This CMake script configures the build process for a stream test module in the TDengine project. It sets C++11 as the standard, collects all source files from the current directory, creates an executable named 'streamTest', links it with required libraries (dnode, nodes, planner, gtest, qcom), and registers it as a test to be run by the testing framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/stream/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\n\naux_source_directory(. MNODE_STREAM_TEST_SRC)\nadd_executable(streamTest ${MNODE_STREAM_TEST_SRC})\ntarget_link_libraries(\n        streamTest\n        PRIVATE dnode nodes planner gtest qcom\n)\n\nadd_test(\n        NAME streamTest\n        COMMAND streamTest\n)\n```\n\n----------------------------------------\n\nTITLE: Executable Creation (tdbPageRecycleTest)\nDESCRIPTION: This CMake snippet creates an executable named 'tdbPageRecycleTest' and links it against the 'tdb' and 'gtest_main' libraries. The executable is designed for page recycling testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tdbPageRecycleTest \"tdbPageRecycleTest.cpp\")\ntarget_link_libraries(tdbPageRecycleTest tdb gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Setting up Telegraf HTTP Output Template for TDengine\nDESCRIPTION: Template configuration for Telegraf's outputs.http module showing the required parameters to connect to TDengine. The configuration includes placeholder values that need to be replaced with actual server details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_telegraf.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[outputs.http]]\n  url = \"http://<taosAdapter's host>:<REST service port>/influxdb/v1/write?db=<database name>\"\n  ...\n  username = \"<TDengine's username>\"\n  password = \"<TDengine's password>\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running Apache Yetus Test Plugin with Docker\nDESCRIPTION: Command to execute the Apache Yetus test-patch utility with custom plugins, Docker configuration, and test parameters. Uses buildtest plugin and custom precommit plugins while enabling verbose output and dirty workspace mode.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/share/precommit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntest-patch --plugins=buildtest --user-plugins=share/precommit/ --run-tests --empty-patch --docker --dockerfile=share/docker/Dockerfile --dirty-workspace --verbose=true\n```\n\n----------------------------------------\n\nTITLE: Getting ResultSet Type in Java\nDESCRIPTION: Method for retrieving the type of the ResultSet. Always returns ResultSet.TYPE_FORWARD_ONLY, indicating that the cursor can only move forward. Throws SQLException if the result set is closed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_59\n\nLANGUAGE: Java\nCODE:\n```\nint getType() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library with CMake\nDESCRIPTION: This CMake configuration file sets up the static library 'sync' from source files located in the 'src' directory. It links necessary libraries such as 'common', 'transport', 'util', and 'wal', and respects platform-specific compile options for macOS (TD_DARWIN). The file also determines whether to include a subdirectory for tests based on build flags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src SYNC_SRC)\nadd_library(sync STATIC ${SYNC_SRC})\n\nif(${TD_DARWIN})\n    target_compile_options(sync PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\n\ntarget_link_libraries(\n    sync\n    PUBLIC common\n    PUBLIC transport\n    PUBLIC util\n    PUBLIC wal\n)\n\ntarget_include_directories(\n    sync\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/sync\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\nif(BUILD_TEST AND BUILD_SYNC_TEST)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Utility Tests for TDengine Executor in CMake\nDESCRIPTION: Creates an execUtilTests executable for testing utility functions in TDengine's executor module. Links required libraries and configures include paths for the test environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/executor/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(execUtilTests execUtilTests.cpp)\nTARGET_LINK_LIBRARIES(\n        execUtilTests\n        PRIVATE os util common executor gtest_main qcom function planner scalar nodes vnode\n)\n\nTARGET_INCLUDE_DIRECTORIES(\n        execUtilTests\n        PUBLIC \"${TD_SOURCE_DIR}/include/common\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: CMake: Link libraries (commented out)\nDESCRIPTION: This commented-out block intends to link the `mqnodeTest` executable with necessary libraries. It links against a target named `sut` as a public dependency. Public dependencies are transitively included by anything that links against `mqnodeTest`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/qnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n\"# target_link_libraries(\n#     mqnodeTest\n#     PUBLIC sut\n# )\"\n```\n\n----------------------------------------\n\nTITLE: Follower Processing Eventual Consistency Write Request in TDengine (PlantUML)\nDESCRIPTION: Sequence diagram illustrating how a follower node processes an eventual consistency write request in TDengine, including replication and application of changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/scratch.md#2025-04-16_snippet_4\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml follower_process_eventual_consistency\nparticipant SYNC as sync\nparticipant VNODE as vnode\n\ngroup #pink \"SYNC threads\"\n    -> sync: replication rsp\n\n    sync -> sync: syncProcessReqs()\n\n    sync -> vnode: notify VNODE \\nthread to process\\n the reqs\nend\n\ngroup #lightblue \"VNODE worker threads\"\n    vnode -> vnode: vnodeApplyReqs()\nend\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Target Library\nDESCRIPTION: This snippet sets the include directories for the `sync_test_lib` library using the `target_include_directories` command. It specifies the directories where the compiler should look for header files when compiling code that uses `sync_test_lib`. It includes the sync library's include directory, the parent directory's inc directory, and the current directory's inc directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/sync_test_lib/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n    sync_test_lib\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/sync\"\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/../../inc\"\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring pthread for Windows in TDengine\nDESCRIPTION: Sets up the pthreads library for Windows environment, defining it as a static library and creating an interface library to facilitate linking. It sets the build type to Release if not specified.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_PTHREAD})\n    if(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n        SET(CMAKE_BUILD_TYPE Release)\n    endif()\n\n    add_definitions(-DPTW32_STATIC_LIB)\n    add_subdirectory(pthread EXCLUDE_FROM_ALL)\n    set_target_properties(libpthreadVC3 PROPERTIES OUTPUT_NAME pthread)\n    add_library(pthread INTERFACE)\n    target_link_libraries(pthread INTERFACE libpthreadVC3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Starting/Stopping taosAdapter Service\nDESCRIPTION: This snippet provides the commands to start and stop the taosAdapter service using the Windows Service Control Manager (sc). It requires administrator privileges to execute.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/packaging/tools/windows_before_install.txt#2025-04-16_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\n\"sc start/stop taosadapter\"\n```\n\n----------------------------------------\n\nTITLE: Applying Ingress Configuration - Shell\nDESCRIPTION: This shell command applies the ingress configuration previously defined in the YAML file, making the Ingress resource active in the Kubernetes cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f replica3-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Detail Implementation Subdirectory\nDESCRIPTION: This command adds the 'src/detail' subdirectory to the build. This subdirectory likely contains implementation details that are internal to the decimal library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n\"ADD_SUBDIRECTORY(src/detail)\"\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Cluster with Crash_Gen (Bash)\nDESCRIPTION: Commands to clean up previous cluster data and start a new 3-node TDengine cluster using Crash_Gen. The -e option starts the service without running tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/pytest/crash_gen/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf ../../build/cluster_dnode_?; ./crash_gen.sh -e -o 3\n```\n\n----------------------------------------\n\nTITLE: Including Directories for C++ Unit Test with CMake\nDESCRIPTION: Shows how to include directories for the backendTest target using CMake. Paths are specified for both public and private inclusion, aiding in the locating of header files during the compilation process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/stream/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\nbackendTest\nPUBLIC \"${TD_SOURCE_DIR}/include/libs/stream/\"\nPRIVATE \"${TD_SOURCE_DIR}/source/libs/stream/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing pkg-config File for Avro\nDESCRIPTION: This snippet configures and installs a pkg-config file for Avro. It sets up variables for prefix and version, then installs the configured file to the appropriate location.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/src/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(prefix ${CMAKE_INSTALL_PREFIX})\nset(VERSION ${AVRO_VERSION})\nconfigure_file(avro-c.pc.in avro-c.pc)\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/avro-c.pc\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n```\n\n----------------------------------------\n\nTITLE: Releasing Parser Memory in C\nDESCRIPTION: This function frees up the memory allocated to the parser object created previously. It takes a pointer to the parser object, ensuring that resources are properly released to prevent memory leaks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nvoid parser_free(void* parser);\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring APR in CMake\nDESCRIPTION: This section finds the APR (Apache Portable Runtime) configuration binary and executes it to get the include directory. It then adds this directory to the include paths.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/cos/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_PROGRAM(APR_CONFIG_BIN NAMES apr-config apr-1-config PATHS /usr/bin /usr/local/bin /usr/local/apr/bin/)\n\nIF (APR_CONFIG_BIN)\n  EXECUTE_PROCESS(\n    COMMAND ${APR_CONFIG_BIN} --includedir\n    OUTPUT_VARIABLE APR_INCLUDE_DIR\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\nENDIF()\n\ninclude_directories (${APR_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Library or Executable for taosd in CMake\nDESCRIPTION: This snippet conditionally adds a library or executable target named 'taosd' based on the state of the TAOSD_INTEGRATED variable. It organizes the source files for this target based on whether it is a library or an executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(exe EXEC_SRC)\nif(${TAOSD_INTEGRATED})\n  add_library(taosd ${EXEC_SRC})\nelse()\n  add_executable(taosd ${EXEC_SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing the taosws module in Python\nDESCRIPTION: This Python code snippet demonstrates how to import the `taosws` module. Successful import verifies the correct installation of the TDengine Python connector for WebSocket connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"import taosws\"\n```\n\n----------------------------------------\n\nTITLE: TDengine Power Meters Alert Query\nDESCRIPTION: SQL query for monitoring power meters data, calculating average current grouped by groupid with time-based partitioning and interval filling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/01-grafana.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect _wstart as ts, groupid, avg(current) as current from power.meters where ts > $from and ts < $to partition by groupid interval($interval) fill(null)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Libraries and Tools in CMake\nDESCRIPTION: Adds configuration for additional libraries and tools like GEOS, PCRE2, and Lemon parser generator based on build options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# geos\nif(${BUILD_GEOS})\n    cat(\"${TD_SUPPORT_DIR}/geos_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n#\nif(${BUILD_PCRE2})\n    cat(\"${TD_SUPPORT_DIR}/pcre2_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# lemon\nif(${BUILD_WITH_LEMON})\n    if(${TD_ACORE})\n        set(C_COMPILER_LEMON ${CMAKE_C_COMPILER})\n    else()\n        find_program(C_COMPILER_LEMON NAMES gcc)\n    endif()\n    if(C_COMPILER_LEMON)\n        message(STATUS \"LEMON C compiler: ${C_COMPILER_LEMON}\")\n    else()\n        set(C_COMPILER_LEMON ${CMAKE_C_COMPILER})\n        message(STATUS \"LEMON C compiler: ${C_COMPILER_LEMON}\")\n    endif()\n\n    cat(\"${TD_SUPPORT_DIR}/lemon_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: UDF Error Log Output\nDESCRIPTION: Error messages from the UDF log file showing that the Python plugin could not be loaded due to missing permissions or configuration issues. These logs help diagnose UDF execution failures.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n05/24 22:46:28.733545 01665799 UDF ERROR can not load library libtaospyudf.so. error: operation not permitted\n05/24 22:46:28.733561 01665799 UDF ERROR can not load python plugin. lib path libtaospyudf.so\n```\n\n----------------------------------------\n\nTITLE: Importing Data from CSV File in TDengine\nDESCRIPTION: SQL command demonstrating how to import data back into a TDengine table from a previously exported CSV file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/02-tools/08-taos-cli.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ninsert into d0 file '/root/d0.csv';\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Cryptography Library\nDESCRIPTION: Sets public and private include directories for the crypt library to ensure proper header resolution\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/crypt/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  crypt\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/crypt\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Restarting taosAdapter Service\nDESCRIPTION: Command to restart the taosAdapter service, which enables data collection from Icinga2 to TDengine\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/07-icinga2.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart taosadapter\n```\n\n----------------------------------------\n\nTITLE: Getting Field Lengths in TDengine Query Result in C\nDESCRIPTION: Get the length of each field in the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nint* taos_fetch_lengths(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: MDX DocCardList Component\nDESCRIPTION: Imports and implements DocCardList component to display documentation cards using the current sidebar category items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/index.md#2025-04-16_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checksum Masking for Snappy Framing Format in C\nDESCRIPTION: C function to mask a CRC-32C checksum as specified in the Snappy framing format. The masking process rotates the checksum by 15 bits and adds the constant 0xa282ead8 using wraparound for unsigned integers, making the process reversible.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/framing_format.txt#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nuint32_t mask_checksum(uint32_t x) {\n  return ((x >> 15) | (x << 17)) + 0xa282ead8;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine from Extracted Archive on Linux\nDESCRIPTION: Command to run the installation script after extracting the TDengine .tar.gz package on Linux systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./install.sh\n```\n\n----------------------------------------\n\nTITLE: Basic Snappy Decompression in C++\nDESCRIPTION: Simple example of decompressing data using Snappy's C++ interface. Takes compressed input data and decompresses it into an output string.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nsnappy::Uncompress(input.data(), input.size(), &output)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu/Debian\nDESCRIPTION: Command to install required system packages and development libraries on Ubuntu/Debian systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install libjansson-dev libsnappy-dev liblzma-dev libz-dev zlib1g pkg-config libssl-dev gawk\n```\n\n----------------------------------------\n\nTITLE: UDF Module Import Error\nDESCRIPTION: TDengine CLI output showing an error when the UDF cannot find the required Python module. This occurs when the UDF tries to use a module that's not in its search path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\ntaos> select ts, nextsunday(ts) from t;\n\nDB error: udf function execution failure (1.123615s)\n```\n\n----------------------------------------\n\nTITLE: Running TDengine Installation Script on Linux\nDESCRIPTION: Command to execute the TDengine installation script with administrative privileges. This installs TDengine components to the system directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./install.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Test Build in CMake\nDESCRIPTION: Creates and configures the benchmark test executable with GoogleTest integration. Sets up include directories and links required libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(benchmarkTest benchmarkTest.cpp)\nTARGET_LINK_LIBRARIES(\n        benchmarkTest\n        PRIVATE gtest \n)\n\ntarget_include_directories(\n    benchmarkTest PRIVATE \n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../deps/toolscJson/inc/\"\n)\n\nadd_test(\n    NAME benchmarkTest\n    COMMAND benchmarkTest\n)\n```\n\n----------------------------------------\n\nTITLE: System Dependencies Check Configuration\nDESCRIPTION: Performs system checks for required headers and functions, including large file support configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(stdint.h    HAVE_STDINT_H)\ncheck_include_file(stddef.h    HAVE_STDDEF_H)\n\nset(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)\nif(HAVE_SYS_TYPES_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)\nendif()\nif(HAVE_STDINT_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)\nendif()\nif(HAVE_STDDEF_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Query Hint with Simple Select in TDengine SQL\nDESCRIPTION: This query tests a basic SELECT statement with a query hint to use a specific table. It selects all columns from the 'stb1' table with a hint to use 'stb1_1'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/query/hint.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT /*+ USE_TNAME(stb1_1) */ * FROM stb1;\n```\n\n----------------------------------------\n\nTITLE: Building TDengine with specific cmake options\nDESCRIPTION: This snippet provides commands to build TDengine with specific flags enabled for tools, tests, and contributions. It highlights using cmake with certain options and the make command to compile and install TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd debug\ncmake .. -DBUILD_TOOLS=true -DBUILD_TEST=true -DBUILD_CONTRIB=true\nmake && make install\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Azure SDK Static Library in CMake\nDESCRIPTION: Defines a static library for Azure SDK, sets compile definitions, and configures include directories. This snippet also handles linking against necessary system libraries and setting up conditional linkage for OpenSSL and curl.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/azure-cmake/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(_azure_sdk STATIC ${AZURE_SDK_UNIFIED_SRC})\ntarget_compile_definitions(_azure_sdk PRIVATE BUILD_CURL_HTTP_TRANSPORT_ADAPTER)\n\ntarget_include_directories(\n    _azure_sdk\n    PUBLIC \"$ENV{HOME}/.cos-local.2/include\"\n)\n\nfind_library(CURL_LIBRARY curl $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\nfind_library(SSL_LIBRARY ssl $ENV{HOME}/.cos-local.2/lib64 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\nfind_library(CRYPTO_LIBRARY crypto $ENV{HOME}/.cos-local.2/lib64 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\n\ntarget_link_libraries(\n    _azure_sdk\n    PRIVATE ${CURL_LIBRARY}\n    PRIVATE ${SSL_LIBRARY}\n    PRIVATE ${CRYPTO_LIBRARY}\n\n    PRIVATE _libxml2\n    PRIVATE zlib\n)\n\nif(TARGET OpenSSL::SSL)\n    target_link_libraries(_azure_sdk PRIVATE OpenSSL::Crypto OpenSSL::SSL)\nendif()\n\nif(TARGET td_contrib::curl)\n    target_link_libraries(_azure_sdk PRIVATE td_contrib::curl)\nendif()\n\ntarget_include_directories(_azure_sdk SYSTEM BEFORE PUBLIC ${AZURE_SDK_INCLUDES})\nadd_library(td_contrib::azure_sdk ALIAS _azure_sdk)\n```\n\n----------------------------------------\n\nTITLE: Initializing TDengine Project with CMake\nDESCRIPTION: Sets the minimum required CMake version and initializes the TDengine project. This is the basic setup for the CMake build system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/taosc_test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8...3.20)\nPROJECT(TDengine)\n```\n\n----------------------------------------\n\nTITLE: Running StatsD Node Script\nDESCRIPTION: This code snippet demonstrates how to run the StatsD server using a Node.js script with a specified configuration file. It outputs log information about the server's operation, confirming that it has started correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/06-statsd.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ node stats.js config.js &\n[1] 8546\n$ 20 Apr 09:54:41 - [8546] reading config file: config.js\n20 Apr 09:54:41 - server is up INFO\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for cosTest in CMake\nDESCRIPTION: This snippet sets additional include directories for the cosTest target, specifically including the cos_c_sdk directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/cos/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  cosTest\n  PUBLIC \"${TD_SOURCE_DIR}/contrib/cos-c-sdk-v5/cos_c_sdk\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Running the crash report collection script\nDESCRIPTION: Command to execute the Python script 'CrashCounter.py' which collects crash information from log files and sends reports to the configured FeiShu bot group.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/telemetry/crash-report/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $DIR/telemetry/crash-report\npython3 CrashCounter.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Dependencies in CMake\nDESCRIPTION: Adds platform-specific dependencies and configurations, such as MSVC regex for Windows, wcwidth, wingetopt, and timezone data for non-Windows platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# msvc regex\nif(${BUILD_MSVCREGEX})\n    cat(\"${TD_SUPPORT_DIR}/msvcregex_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# wcwidth\nif(${BUILD_WCWIDTH})\n    cat(\"${TD_SUPPORT_DIR}/wcwidth_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# wingetopt\nif(${BUILD_WINGETOPT})\n    cat(\"${TD_SUPPORT_DIR}/wingetopt_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# ... [other dependencies] ...\n\nif(NOT ${TD_WINDOWS})\n    cat(\"${TD_SUPPORT_DIR}/tz_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(NOT ${TD_WINDOWS})\n```\n\n----------------------------------------\n\nTITLE: MDX Code Block for Document List\nDESCRIPTION: React/MDX code snippet that imports and renders a document card list component using the current sidebar category items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Checking for System Functions and Dependencies in CMake\nDESCRIPTION: Checks for system function availability and external dependencies like Google Test and Google Flags.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckSymbolExists)\ncheck_symbol_exists(\"mmap\" \"sys/mman.h\" HAVE_FUNC_MMAP)\ncheck_symbol_exists(\"sysconf\" \"unistd.h\" HAVE_FUNC_SYSCONF)\n\nfind_package(GTest QUIET)\nif(GTEST_FOUND)\n  set(HAVE_GTEST 1)\nendif(GTEST_FOUND)\n\nfind_package(Gflags QUIET)\nif(GFLAGS_FOUND)\n  set(HAVE_GFLAGS 1)\nendif(GFLAGS_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library for Query Node Management\nDESCRIPTION: Defines a static library named mgmt_qnode using the collected source files from the MGMT_QNODE variable\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_qnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(mgmt_qnode STATIC ${MGMT_QNODE})\n```\n\n----------------------------------------\n\nTITLE: Configuring SingleNode Executable Build with CMake\nDESCRIPTION: Creates a new executable target 'singleNode' and configures its source files and library dependencies. Links against traft, lz4, and static libuv libraries that are required for TDengine single node operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/traft/single_node/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(singleNode \"\")\ntarget_sources(singleNode\n  PRIVATE\n  \"singleNode.c\" \n)\ntarget_link_libraries(singleNode PUBLIC traft lz4 uv_a)\n```\n\n----------------------------------------\n\nTITLE: Creating Management Node in TDengine SQL\nDESCRIPTION: Creates a management node (mnode) on a specified dnode in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE MNODE ON DNODE dnode_id\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Azure Test Executable in CMake\nDESCRIPTION: Links the found libraries and additional dependencies to the 'azure-test' executable. Includes Azure SDK, curl, xml2, ssl, crypto, dl, and pthread libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/azure/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n  azure-test\n  PRIVATE _azure_sdk\n  PRIVATE ${CURL_LIBRARY}\n  PRIVATE ${XML2_LIBRARY}\n  PRIVATE ${SSL_LIBRARY}\n  PRIVATE ${CRYPTO_LIBRARY}\n  PRIVATE dl\n  PRIVATE pthread\n)\n```\n\n----------------------------------------\n\nTITLE: Building Quickstop Executable with Avro\nDESCRIPTION: Creates and configures the quickstop executable by specifying source files and linking against the Avro static library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/examples/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(quickstop quickstop.c)\ntarget_link_libraries(quickstop avro-static)\n```\n\n----------------------------------------\n\nTITLE: Installing promql-cli\nDESCRIPTION: This command installs the `promql-cli` tool, which is used to query Prometheus data. The tool is installed using the `go install` command, requiring Go to be installed and configured.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/02-prometheus.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/nalbury/promql-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Building Simulation Tests for Linux\nDESCRIPTION: Creates and configures the simulation test executable for Linux platforms. Links against required libraries and sets up test command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/src/util/inc)\n\nIF(TD_LINUX)\n    ADD_EXECUTABLE(simTests \"simTests.cpp\")\n    TARGET_LINK_LIBRARIES(simTests os util tsim_static gtest_main)\n\n    ADD_TEST(\n        NAME simTests\n        COMMAND simTests\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to taosd Target in CMake\nDESCRIPTION: This snippet links the 'dnode' and 'crypt' libraries to the 'taosd' target, ensuring that all dependencies are included during the linking stage of the build process. It is crucial for the executable to function correctly with the necessary libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(taosd dnode crypt)\n```\n\n----------------------------------------\n\nTITLE: Running the JDBCDemo Jar File\nDESCRIPTION: This snippet describes how to run the compiled JDBCDemo jar file with the host parameter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/JDBCDemo/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/JDBCDemo-SNAPSHOT-jar-with-dependencies.jar -host [HOSTNAME]\n```\n\n----------------------------------------\n\nTITLE: Accessing Avro Record Fields\nDESCRIPTION: Functions for working with Avro record values, including getting the number of fields and accessing fields by name or index.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#include <stdlib.h>\n#include <avro.h>\n\nint avro_value_get_size(const avro_value_t *record, size_t *size);\nint avro_value_get_by_index(const avro_value_t *record, size_t index,\n                            avro_value_t *element, const char **field_name);\nint avro_value_get_by_name(const avro_value_t *record, const char *field_name,\n                           avro_value_t *element, size_t *index);\n```\n\n----------------------------------------\n\nTITLE: Deleting Management Node in TDengine SQL\nDESCRIPTION: Removes a management node from a specified dnode in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/21-node.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDROP MNODE ON DNODE dnode_id;\n```\n\n----------------------------------------\n\nTITLE: Defining and linking logTest executable\nDESCRIPTION: This creates an executable named `logTest` from `log.cpp` and links it against the `os`, `util`, `common`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `logTest` executable. Additionally, the target include directories are set to include the `../inc` directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_executable(logTest \\\"log.cpp\\\")\ntarget_link_libraries(logTest os util common gtest_main)\nadd_test(\n    NAME logTest\n    COMMAND logTest\n)\ntarget_include_directories(\n  logTest\n  PRIVATE \\\"${CMAKE_CURRENT_SOURCE_DIR}/../inc\\\"\n)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Crash_Gen Help Information (Bash)\nDESCRIPTION: Command to show the full help information for the Crash_Gen tool, listing all available options and their descriptions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/pytest/crash_gen/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./crash_gen.sh -h\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Source Directories with CMake\nDESCRIPTION: Details the inclusion of source directories for the Darwin environment within the TDengine project using CMake. This snippet lacks specific executable targets, focusing solely on preparing the source directories for building.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/c/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_DARWIN)\n  INCLUDE_DIRECTORIES(. ${TD_SOURCE_DIR}/src/inc ${TD_SOURCE_DIR}/src/client/inc ${TD_SOURCE_DIR}/inc)\n  AUX_SOURCE_DIRECTORY(. SRC)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Executable Path\nDESCRIPTION: Configures the executable path differently for Windows and non-Windows platforms using CMake conditionals.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/examples/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n    set(exec_name ${CMAKE_CURRENT_BINARY_DIR}/Debug/quickstop.exe)\nelse (WIN32)\n    set(exec_name ${CMAKE_CURRENT_BINARY_DIR}/quickstop)\nendif (WIN32)\n```\n\n----------------------------------------\n\nTITLE: TMQ Consumer Offset Seek\nDESCRIPTION: Sets the offset for a specific topic and virtual group in a TMQ consumer to a specified position\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nint32_t ws_tmq_offset_seek(ws_tmq_t *tmq, const char *pTopicName, int32_t vgId, int64_t offset)\n```\n\n----------------------------------------\n\nTITLE: Building taosKeeper with Go\nDESCRIPTION: Command to build the taosKeeper project in the TDengine/tools/keeper directory using Go.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/keeper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build\n```\n\n----------------------------------------\n\nTITLE: Generating Jansson Installation Configuration Files in CMake\nDESCRIPTION: Creates version and configuration files for the installed Jansson library using CMake package helpers, ensuring proper versioning and compatibility information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakePackageConfigHelpers)\n\nwrite_basic_package_version_file(\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfigVersion.cmake\"\n  VERSION ${JANSSON_VERSION}\n  COMPATIBILITY ExactVersion\n)\n\nconfigure_package_config_file(\n    \"cmake/janssonConfig.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake/janssonConfig.cmake\"\n    INSTALL_DESTINATION \"${JANSSON_INSTALL_CMAKE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Syntax in TDengine\nDESCRIPTION: Regular expression filtering syntax for table names and binary/nchar values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nWHERE (column|tbname) match/MATCH/nmatch/NMATCH _regex_\n```\n\n----------------------------------------\n\nTITLE: Defining TMQ Configuration Result Enum in C\nDESCRIPTION: Defines an enumeration for possible results when setting TMQ configuration options. It includes values for unknown keys, invalid values, and successful configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_90\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum tmq_conf_res_t {\n     TMQ_CONF_UNKNOWN = -2,  // invalid key\n     TMQ_CONF_INVALID = -1,  // invalid value\n     TMQ_CONF_OK = 0,        // success\n   } tmq_conf_res_t;\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Source List in CMake\nDESCRIPTION: This snippet sets the minimum C++ standard required and gathers all source files in the current directory into a list for the build process. It ensures that the project utilizes C++11 features or later.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"build parser unit test\")\n\n# GoogleTest requires at least C++11\nSET(CMAKE_CXX_STANDARD 11)\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n```\n\n----------------------------------------\n\nTITLE: Restarting collectd Service Shell Command\nDESCRIPTION: This snippet shows the shell command required to restart the collectd service using systemctl. Restarting ensures that collectd begins transmitting performance data post-configuration changes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/05-collectd.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart collectd\n```\n\n----------------------------------------\n\nTITLE: Executing Smoke Tests for TDengine\nDESCRIPTION: Command to run smoke tests, which are a subset of system tests designed to quickly verify critical functionalities of TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd /root/TDengine/packaging/smokeTest\n./test_smoking_selfhost.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on CentOS 8\nDESCRIPTION: Installs required tools and libraries for building TDengine on CentOS 8 using yum.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum update\nyum install -y epel-release gcc gcc-c++ make cmake git perl dnf-plugins-core \nyum config-manager --set-enabled powertools\nyum install -y zlib-static xz-devel snappy-devel jansson-devel pkgconfig libatomic-static libstdc++-static\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared TAOS Library with CMake\nDESCRIPTION: This CMake snippet configures the shared TAOS library for different platforms. It adds source directories and sets platform-specific compile options. Targets include both Windows and non-Windows configurations, with platform-specific include directories being added. The public and private include directories are specified, and the library is linked against the 'os' and 'util' libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/wrapper/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src WRAPPER_SRC)\n\nif(TD_WINDOWS)\n    add_library(${TAOS_LIB} SHARED ${WRAPPER_SRC} ${CMAKE_CURRENT_SOURCE_DIR}/../src/taos.rc.in)\nelse()\n    add_library(${TAOS_LIB} SHARED ${WRAPPER_SRC})\nendif()\n\nif(${TD_DARWIN})\n    target_compile_options(${TAOS_LIB} PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\n\n# jni include\nINCLUDE_DIRECTORIES(jni)\nif(TD_WINDOWS)\n    INCLUDE_DIRECTORIES(jni/windows)\n    INCLUDE_DIRECTORIES(jni/windows/win32)\n    INCLUDE_DIRECTORIES(jni/windows/win32/bridge)\nelse()\n    INCLUDE_DIRECTORIES(jni/linux)\nendif()\n\ntarget_include_directories(\n    ${TAOS_LIB}\n    PUBLIC \"${TD_SOURCE_DIR}/include/client\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n    ${TAOS_LIB}\n    PUBLIC os util\n)\n\nset_target_properties(\n    ${TAOS_LIB}\n    PROPERTIES\n    CLEAN_DIRECT_OUTPUT\n    1\n)\n\nset_target_properties(\n    ${TAOS_LIB}\n    PROPERTIES\n    VERSION ${TD_VER_NUMBER}\n    SOVERSION 1\n)\n```\n\n----------------------------------------\n\nTITLE: Executing System Tests in TDengine\nDESCRIPTION: Commands to run individual system tests or all system tests in TDengine. System tests are end-to-end test cases written in Python from a system perspective.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run single system test\ncd tests/system-test\npython3 ./test.py -f 2-query/avg.py\n\n# Run all system tests\ncd tests\n./run_all_ci_cases.sh -t python # all python cases\n```\n\n----------------------------------------\n\nTITLE: Including Meters Example\nDESCRIPTION: This snippet includes the Meters Java file which likely defines the structure and behavior of meter objects within the application. This file provides the foundational data model necessary for meter operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_java_ws.mdx#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/Meters.java}}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies in CMake\nDESCRIPTION: This snippet links the 'catalog' library with several private dependencies, including 'os', 'util', 'transport', 'qcom', and 'nodes'. This is essential for allowing the library to utilize functionalities offered by these components.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/catalog/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    catalog\n    PRIVATE os util transport qcom nodes\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing in CMake - CMake\nDESCRIPTION: This snippet activates testing for the project using CMake's built-in testing functionality. It is typically used in CMakeLists.txt files to prepare the project for unit tests or integration tests. No additional dependencies are required for this command; just includes 'CMakeLists.txt'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Implementing Header File Guards for C/C++ Compatibility in Windows\nDESCRIPTION: This code snippet demonstrates how to structure header files to ensure proper name mangling and compatibility between C and C++ compilers on Windows.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/README.maintaining_win32.txt#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifndef HEADER_FILE_NAME_H\n#define HEADER_FILE_NAME_H\n#ifdef __cplusplus\nextern \"C\" {\n#define CLOSE_EXTERN }\n#else\n#define CLOSE_EXTERN\n#endif\n\n// Header content goes here\n\nCLOSE_EXTERN\n#endif /* HEADER_FILE_NAME_H */\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for User Operations Test\nDESCRIPTION: This code snippet sets up an executable specifically for user operation tests, using different linking strategies based on the operating system, ensuring compatibility across platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(userOperTest ../../../tests/script/api/passwdTest.c)\nif (TD_WINDOWS)\nTARGET_LINK_LIBRARIES(\n        userOperTest\n        PUBLIC ${TAOS_NATIVE_LIB_STATIC}\n)\nelse()\nTARGET_LINK_LIBRARIES(\n        userOperTest\n\tPUBLIC ${TAOS_NATIVE_LIB}\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Source Files and Creating Static Library\nDESCRIPTION: This snippet uses the `aux_source_directory` CMake command to find all source files in the `src` directory and store them in the `SYNC_TEST_SRC` variable. It then uses the `add_library` command to create a static library named `sync_test_lib` from the files specified in `SYNC_TEST_SRC`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/sync_test_lib/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src SYNC_TEST_SRC)\nadd_library(sync_test_lib STATIC ${SYNC_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Diagramming META Operations in TDengine using PlantUML\nDESCRIPTION: This PlantUML diagram illustrates the process of META operations in TDengine, using create table as an example. It shows the interaction between the application, RPC, VNODE, and SYNC components across multiple dnodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/vnode_write.md#2025-04-16_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml create_table\nskinparam sequenceMessageAlign center\nskinparam responseMessageBelowArrow true\n\nparticipant APP as app\nbox \"dnode1\"\n    participant RPC as rpc\n    participant VNODE as vnode\n    participant SYNC as sync\nend box\n\nbox \"dnode2\"\n    participant SYNC as sync2\n    participant VNODE as vnode2\nend box\n\nbox \"dnode3\"\n    participant SYNC as sync3\n    participant VNODE as vnode3\nend box\n\n' APP send request to dnode and RPC in dnode recv the request\napp ->rpc: create table req\n\n' RPC call vnodeProcessReq() function to process the request\nrpc -> vnode: vnodeProcessReq\nnote right\ncallback function \nrun in RPC module \nthreads. The function\nonly puts the request\nto a vnode queue.\nend note\n\n' VNODE call vnodeProcessReqs() function to integrate requests and process as a whole\nvnode -> vnode: vnodeProcessReqs()\nnote right\nintegrate reqs and \nprocess as a whole\nend note\n\n\n' sync the request to other nodes\nvnode -> sync: syncProcessReqs()\n\n' make request persistent\n' sync -->vnode: walWrite()\\n(callback function)\n\n' replicate requests to other DNODES\nsync -> sync2: replication req\nsync -> sync3: replication req\nsync2 -> vnode2: walWrite()\\n(callback function)\nsync2 --> sync: replication rsp\\n(confirm)\nsync3 -> vnode3: walWrite()\\n(callback function)\n\nsync3 --> sync: replication rsp\\n(confirm)\n\n' send apply request\nsync -> sync2: apply req\nsync -> sync3: apply req\n\n' vnode apply\nsync2 -> vnode2: vnodeApplyReqs()\nsync3 -> vnode3: vnodeApplyReqs()\n\n' call apply request\nsync --> vnode: vnodeApplyReqs()\\n(callback function)\n\n' send response\nvnode --> rpc: rpcSendRsp()\n\n' dnode send response to APP\nrpc --> app: create table rsp\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Finding External Libraries in CMake\nDESCRIPTION: Locates required libraries (curl, xml2, ssl, crypto) in specific paths, prioritizing a local installation directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/azure/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_library(CURL_LIBRARY curl $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\nfind_library(XML2_LIBRARY xml2 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\n\n# find_library(XML2_LIBRARY xml2)\nfind_library(SSL_LIBRARY ssl $ENV{HOME}/.cos-local.2/lib64 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\nfind_library(CRYPTO_LIBRARY crypto $ENV{HOME}/.cos-local.2/lib64 $ENV{HOME}/.cos-local.2/lib NO_DEFAULT_PATH)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jansson-specific Options and Generating Config Files\nDESCRIPTION: Sets Jansson-specific options, checks for atomic operations support, and generates configuration files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset (JANSSON_INITIAL_HASHTABLE_ORDER 3 CACHE STRING \"Number of buckets new object hashtables contain is 2 raised to this power. The default is 3, so empty hashtables contain 2^3 = 8 buckets.\")\n\nconfigure_file (${CMAKE_CURRENT_SOURCE_DIR}/cmake/jansson_config.h.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/include/jansson_config.h)\n\nfile (COPY ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson.h\n           DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/include/)\n\nadd_definitions(-DJANSSON_USING_CMAKE)\n\nconfigure_file (${CMAKE_CURRENT_SOURCE_DIR}/cmake/jansson_private_config.h.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/private_include/jansson_private_config.h)\n\nadd_definitions(-DHAVE_CONFIG_H)\n\ninclude_directories (${CMAKE_CURRENT_BINARY_DIR}/include)\ninclude_directories (${CMAKE_CURRENT_BINARY_DIR}/private_include)\n```\n\n----------------------------------------\n\nTITLE: Installing Jansson using vcpkg in Bash\nDESCRIPTION: This snippet demonstrates how to download and install Jansson using the vcpkg dependency manager. It includes cloning the vcpkg repository, bootstrapping, integrating, and installing Jansson.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\nvcpkg install jansson\n```\n\n----------------------------------------\n\nTITLE: Adding Batch to Statement in TDengine (C)\nDESCRIPTION: Adds the currently bound parameters to the batch. After calling this function, you can call `ws_stmt_bind_param_batch()` again to bind new parameters. This function only supports `INSERT/IMPORT` statements; other SQL statements like `SELECT` will return an error. Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n\"int ws_stmt_add_batch(WS_STMT *stmt)\"\n\n```\n\n----------------------------------------\n\nTITLE: Invalid SQL statement with INTERVAL and SLIDING clauses\nDESCRIPTION: This snippet shows an invalid SQL statement in TDengine because INTERVAL and SLIDING clauses need to be used in conjunction with aggregation and selection functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM temp_tb_1 INTERVAL(1m) SLIDING(2m);\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for TDengine\nDESCRIPTION: This code snippet lists the Python package dependencies required for the TDengine project. It includes libraries for database interactions, data processing, system utilities, and various helper functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ntaospy\nnumpy\nfabric2\npsutil\npandas\ntoml\ndistro\nrequests\npexpect\nfaker\npyopenssl\nhyperloglog\ntzlocal\n```\n\n----------------------------------------\n\nTITLE: Configuring Test UDF Libraries with Different Behaviors\nDESCRIPTION: Defines variable sets for target names and compile definitions, creating different UDF libraries with various behaviors for testing error conditions and normal operation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAMES\n    change_udf_normal\n    change_udf_no_init\n    change_udf_no_process\n    change_udf_no_destroy\n    change_udf_init_failed\n    change_udf_process_failed\n    change_udf_destory_failed\n)\n\nset(COMPILE_DEFINITIONS\n    CHANGE_UDF_NORMAL\n    CHANGE_UDF_NO_INIT\n    CHANGE_UDF_NO_PROCESS\n    CHANGE_UDF_NO_DESTROY\n    CHANGE_UDF_INIT_FAILED\n    CHANGE_UDF_PROCESS_FAILED\n    CHANGE_UDF_DESTORY_FAILED\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Release Versions with Markdown Syntax\nDESCRIPTION: These snippets utilize Markdown to denote various release versions for taosTools. Each version is wrapped in a component that handles the presentation of the version information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/28-releases/02-tools.md#2025-04-16_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.5.2\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.5.1\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.5.0\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.12\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.11\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.10\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.9\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.8\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.6\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.3\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.2\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.1\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.4.0\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.3.3\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.3.2\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.3.0\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.9\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.7\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.6\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.4\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.3\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.2\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.2.0\" />\n\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<Release type=\"tools\" version=\"2.1.3\" />\n\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to mgmt_snode\nDESCRIPTION: This snippet links the node_util library to the mgmt_snode target, enabling it to use the functionalities provided by the node_util library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_snode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    mgmt_snode node_util\n)\n```\n\n----------------------------------------\n\nTITLE: Checking System Endianness and Header Files in CMake\nDESCRIPTION: Performs system checks for endianness and essential header files required by Snappy.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(TestBigEndian)\ntest_big_endian(SNAPPY_IS_BIG_ENDIAN)\n\ninclude(CheckIncludeFile)\ncheck_include_file(\"byteswap.h\" HAVE_BYTESWAP_H)\ncheck_include_file(\"sys/endian.h\" HAVE_SYS_ENDIAN_H)\ncheck_include_file(\"sys/mman.h\" HAVE_SYS_MMAN_H)\ncheck_include_file(\"sys/resource.h\" HAVE_SYS_RESOURCE_H)\ncheck_include_file(\"sys/time.h\" HAVE_SYS_TIME_H)\ncheck_include_file(\"sys/uio.h\" HAVE_SYS_UIO_H)\ncheck_include_file(\"unistd.h\" HAVE_UNISTD_H)\ncheck_include_file(\"windows.h\" HAVE_WINDOWS_H)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine Using Native C# Driver\nDESCRIPTION: Example code demonstrating how to establish a native connection to TDengine database using the C# driver. Uses include directive syntax to reference an external file containing the actual connection code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_cs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{{#include docs/examples/csharp/connect/Program.cs}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icinga2 OpenTSDB Writer Template\nDESCRIPTION: Basic configuration template for Icinga2's OpenTSDB writer feature, showing the structure for connecting to TaosAdapter.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_icinga2.mdx#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nobject OpenTsdbWriter \"opentsdb\" {\n  host = \"<taosAdapter's host>\"\n  port = <port for icinga2>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Library in CMake\nDESCRIPTION: This snippet defines a static library named 'catalog' and specifies its source files and include directories. It sets the library to be built from the source files found in the variable 'CATALOG_SRC' and ensures appropriate include paths are configured based on visibility requirements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/catalog/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src CATALOG_SRC)\nadd_library(catalog STATIC ${CATALOG_SRC})\ntarget_include_directories(\n    catalog\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/catalog\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining TMQ Auto-Commit Callback Function Signature in C\nDESCRIPTION: Specifies the function signature for the auto-commit callback used in TMQ configuration. This callback is called after a message is consumed to confirm its handling status.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_91\n\nLANGUAGE: C\nCODE:\n```\ntypedef void(tmq_commit_cb(tmq_t *tmq, int32_t code, void *param))\n```\n\n----------------------------------------\n\nTITLE: Secondary Image Component Usage\nDESCRIPTION: Additional image component usage showing the composition of stream processing tasks with caption.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/09-stream.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<figure>\n<Image img={imgStep02} alt=\"Composition of stream processing tasks\"/>\n<figcaption>Figure 2. Composition of stream processing tasks</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Configuring TSFM Service Path in INI File\nDESCRIPTION: This INI configuration snippet sets the path for the Time-MoE service within the TDengine configuration file. The key 'timemoe-fc' corresponds to the model name used in the Python code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[tsfm-service]\ntimemoe-fc = http://127.0.0.1:5001/ds_predict\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in MDX\nDESCRIPTION: This code snippet imports the DocCardList component from the \"@theme/DocCardList\" module and the useCurrentSidebarCategory hook from the \"@docusaurus/theme-common\" module. These are used within an MDX (Markdown extended) document to dynamically generate a list of documentation cards based on the current sidebar category. This enables dynamic content rendering within Docusaurus documentation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/index.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Creating Table in TDengine Distributed System (PlantUML)\nDESCRIPTION: Sequence diagram showing the process of creating a table in TDengine, including request handling, replication, and synchronization across multiple dnodes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/scratch.md#2025-04-16_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml create_table\nskinparam sequenceMessageAlign center\nskinparam responseMessageBelowArrow true\n\nparticipant APP as app\nbox \"dnode1\"\n    participant RPC as rpc\n    participant VNODE as vnode\n    participant SYNC as sync\nend box\n\nbox \"dnode2\"\n    participant SYNC as sync2\n    participant VNODE as vnode2\nend box\n\nbox \"dnode3\"\n    participant SYNC as sync3\n    participant VNODE as vnode3\nend box\n\napp ->rpc: create table req\n\nrpc -> vnode: vnodeProcessReq\nnote right\ncallback function \nrun in RPC module \nthreads. The function\nonly puts the request\nto a vnode queue.\nend note\n\nvnode -> vnode: vnodeProcessReqs()\nnote right\nintegrate reqs and \nprocess as a whole\nend note\n\n\nvnode -> sync: syncProcessReqs()\n\nsync -> sync2: replication req\nsync -> sync3: replication req\nsync2 -> vnode2: walWrite()\\n(callback function)\nsync2 --> sync: replication rsp\\n(confirm)\nsync3 -> vnode3: walWrite()\\n(callback function)\n\nsync3 --> sync: replication rsp\\n(confirm)\n\nsync -> sync2: apply req\nsync -> sync3: apply req\n\nsync2 -> vnode2: vnodeApplyReqs()\nsync3 -> vnode3: vnodeApplyReqs()\n\nsync --> vnode: vnodeApplyReqs()\\n(callback function)\n\nvnode --> rpc: rpcSendRsp()\n\nrpc --> app: create table rsp\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Development Tool Build in CMake\nDESCRIPTION: This CMake configuration collects source files from the 'src' directory, creates an executable named 'tdev', and sets up the include directories. It uses aux_source_directory to find all source files and adds them to the executable target.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/tdev/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src TDEV_SRC)\nadd_executable(tdev ${TDEV_SRC})\n\ntarget_include_directories(tdev PUBLIC inc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Adler-32 Checksum Algorithm in C\nDESCRIPTION: This code snippet demonstrates the implementation of the Adler-32 checksum algorithm in C. It updates a running Adler-32 checksum with a buffer of bytes and returns the updated checksum. The function is designed for clarity rather than speed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1950.txt#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define BASE 65521 /* largest prime smaller than 65536 */\n\n/*\n   Update a running Adler-32 checksum with the bytes buf[0..len-1]\n and return the updated checksum. The Adler-32 checksum should be\n initialized to 1.\n\n Usage example:\n\n   unsigned long adler = 1L;\n\n   while (read_buffer(buffer, length) != EOF) {\n     adler = update_adler32(adler, buffer, length);\n   }\n   if (adler != original_adler) error();\n*/\nunsigned long update_adler32(unsigned long adler,\n   unsigned char *buf, int len)\n{\n  unsigned long s1 = adler & 0xffff;\n  unsigned long s2 = (adler >> 16) & 0xffff;\n  int n;\n\n  for (n = 0; n < len; n++) {\n\n```\n\n----------------------------------------\n\nTITLE: Initializing CRC Table in C for GZIP Compression\nDESCRIPTION: This function generates a table for fast CRC calculation used in GZIP compression. It populates a 256-element array with precomputed CRC values for all possible 8-bit messages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nvoid make_crc_table(void)\n{\n  unsigned long c;\n  int n, k;\n  for (n = 0; n < 256; n++) {\n    c = (unsigned long) n;\n    for (k = 0; k < 8; k++) {\n      if (c & 1) {\n        c = 0xedb88320L ^ (c >> 1);\n      } else {\n        c = c >> 1;\n      }\n    }\n    crc_table[n] = c;\n  }\n  crc_table_computed = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python3 and pip on CentOS\nDESCRIPTION: Commands to install Python3 and pip using yum package manager on CentOS.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/telemetry/crash-report/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install python3\nyum install python3-pip\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Source Files for C++ Unit Test\nDESCRIPTION: Illustrates how to set up the backendTest executable and its associated source files in a C++ project using CMake. The backendTest target is designated as an executable type with its source files listed, ensuring the compiler knows what to build.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/stream/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(backendTest \"\")\n\ntarget_sources(backendTest\nPRIVATE\n\"backendTest.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring toolscJson Library Build in CMake\nDESCRIPTION: This CMake snippet collects source files from the src directory, creates the toolscJson library, and configures its include paths. It uses AUX_SOURCE_DIRECTORY to gather all source files and sets up public include directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/toolscJson/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/src SOURCE_LIST)\n\nADD_LIBRARY(toolscJson ${SOURCE_LIST})\nTARGET_INCLUDE_DIRECTORIES(toolscJson PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/inc)\n```\n\n----------------------------------------\n\nTITLE: Initialize and Lock Management in TDengine\nDESCRIPTION: Provides functions for initializing database page locks, unlocking pages, and inserting sorted array elements in TDengine. These functions are essential for maintaining the concurrency and integrity of database operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n(void)TARRAY2_SORT_INSERT\n(void)TDB_INIT_PAGE_LOCK\n(void)TDB_UNLOCK_PAGE\n```\n\n----------------------------------------\n\nTITLE: Configuring Management Module Source Directory\nDESCRIPTION: Identifies the source directory for the management module (MGMT_MNODE) using aux_source_directory CMake command\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_mnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src MGMT_MNODE)\n```\n\n----------------------------------------\n\nTITLE: Working with Avro Union Values\nDESCRIPTION: Functions for manipulating Avro union values, including getting the current branch, setting a branch, and determining the discriminant value.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#include <avro.h>\n\nint avro_value_get_discriminant(const avro_value_t *union_val, int *disc);\nint avro_value_get_current_branch(const avro_value_t *union_val, avro_value_t *branch);\nint avro_value_set_branch(avro_value_t *union_val,\n                          int discriminant, avro_value_t *branch);\n```\n\n----------------------------------------\n\nTITLE: Node.js WebSocket Connector Installation\nDESCRIPTION: Installs TDengine WebSocket connector for Node.js applications\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tdengine/websocket\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for libargp-mingw Project\nDESCRIPTION: Sets up a CMake build configuration for the libargp-mingw project. It specifies the minimum CMake version, defines the project name and language (C), sets the C standard to C99, includes the src directory, collects all source files recursively, and creates an executable that includes the test file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/libargp/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nproject(libargp-mingw C)\n\nset(CMAKE_C_STANDARD 99)\n\ninclude_directories(src)\nfile(GLOB_RECURSE SRC_LIST ${PROJECT_SOURCE_DIR}/src/*.*)\n\nadd_executable(libargp-mingw ${SRC_LIST} argp-test.c)\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query Sorting Configuration\nDESCRIPTION: Examples of sorting query results in MongoDB, demonstrating ascending order by single and multiple fields\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/17-mongodb.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"createtime\":1}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"createdate\":1, \"createtime\":1}\n```\n\n----------------------------------------\n\nTITLE: Add Test Subdirectory (Conditional)\nDESCRIPTION: This CMake conditional statement checks the value of the BUILD_TEST variable. If BUILD_TEST is true, it adds the 'test' subdirectory to the build, enabling the compilation and execution of tests for the 'wal' library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_TEST})\n    add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: TDgpt Analysis Service Error Codes\nDESCRIPTION: Error codes for TDengine's analysis service, covering issues with service accessibility, algorithm loading, data processing, and internal service errors\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/09-error-code.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nError codes for analysis service\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine Database in R using RJDBC\nDESCRIPTION: This snippet demonstrates establishing a connection to a TDengine database using JDBC. The connection parameters include the JDBC driver path, user credentials, and database URL. Successful execution requires the correct driver and network accessibility to the TDengine instance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/R/command.txt#2025-04-16_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ndrv<-JDBC(\"com.taosdata.jdbc.TSDBDriver\",\"JDBCDriver-1.0.0-dist.jar\", identifier.quote=\"\\\"\")\nconn<-dbConnect(drv,\"jdbc:TSDB://192.168.1.114:0/?user=root&password=taosdata\",\"root\",\"taosdata\")\n```\n\n----------------------------------------\n\nTITLE: Building RaftServer Components - Makefile\nDESCRIPTION: Makefile for compiling the raft server implementation. Links against the traft library, libuv, lz4, and pthread with debug symbols enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/traft/help.txt#2025-04-16_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nall:\n\tgcc raftMain.c raftServer.c -I ../../traft/include/ ../../traft/.libs/libraft.a -o raftMain -luv -llz4 -lpthread -g\nclean:\n\trm -f raftMain\n\tsh clear.sh\n```\n\n----------------------------------------\n\nTITLE: Memory Usage Monitoring Query\nDESCRIPTION: SQL query to monitor memory usage of dnode nodes with a 5-minute interval and 60% threshold\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect now(), dnode_id, last(mem_engine) / last(mem_total) * 100 as taosd from log.taosd_dnodes_info where _ts >= (now- 5m) and _ts <now partition by dnode_id\n```\n\n----------------------------------------\n\nTITLE: Installing TaosTools\nDESCRIPTION: Command to install the built TaosTools into the system\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Cluster Data (Bash)\nDESCRIPTION: Command to remove all cluster data directories, useful for resetting the cluster to a clean state.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/pytest/crash_gen/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ rm -rf build/cluster_dnode_*\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine Logging Directory\nDESCRIPTION: Configuration entry for specifying TDengine log directory in taos.cfg file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/06-enterprise.md#2025-04-16_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nlogDir /data/log/\n```\n\n----------------------------------------\n\nTITLE: Suggested TCompressionStrategy Enumeration in Delphi\nDESCRIPTION: Proposed enumeration for compression strategies to be added to the ZLib interface, supporting different compression algorithms including the new RLE strategy.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/contrib/delphi/readme.txt#2025-04-16_snippet_2\n\nLANGUAGE: Delphi\nCODE:\n```\nTCompressionStrategy = (zsDefault, zsFiltered, zsHuffmanOnly, zsRle);\n```\n\n----------------------------------------\n\nTITLE: Rendering Package List Component in React/JSX\nDESCRIPTION: JSX component usage for rendering package list with macOS-specific parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_macos_install.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PkgListV3 type={8} sys=\"macOS\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing TMQ Result Type Enumeration in C\nDESCRIPTION: Definition of the enumeration that represents different types of results returned when consuming data from TMQ. This includes invalid results, data results, table metadata results, and combined metadata and data results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_15\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum ws_tmq_res_t {\n  WS_TMQ_RES_INVALID = -1,   // 无效\n  WS_TMQ_RES_DATA = 1,       // 数据类型\n  WS_TMQ_RES_TABLE_META = 2, // 元数据类型\n  WS_TMQ_RES_METADATA = 3    // 既有元数据类型又有数据类型，即自动建表\n} tmq_res_t;\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalog Unit Test Build with CMake\nDESCRIPTION: Sets up build configuration for catalog unit tests, targeting non-Darwin platforms and using GoogleTest framework. Includes source directory scanning, executable creation, library linking, and test registration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/catalog/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"build catalog unit test\")\n\nIF(NOT TD_DARWIN)\n        # GoogleTest requires at least C++11\n        SET(CMAKE_CXX_STANDARD 11)\n        AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n        ADD_EXECUTABLE(catalogTest ${SOURCE_LIST})\n        TARGET_LINK_LIBRARIES(\n                catalogTest\n                PUBLIC os util common nodes catalog transport gtest qcom ${TAOS_NATIVE_LIB_STATIC}\n        )\n\n        TARGET_INCLUDE_DIRECTORIES(\n                catalogTest\n                PUBLIC \"${TD_SOURCE_DIR}/include/libs/catalog/\"\n                PRIVATE \"${TD_SOURCE_DIR}/source/libs/catalog/inc\"\n        )\n\n        add_test(\n                NAME catalogTest\n                COMMAND catalogTest\n        )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Statement Tests\nDESCRIPTION: This snippet is responsible for creating an executable for statement testing, linking to relevant libraries and ensuring all necessary functionalities are tested efficiently.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(stmt2Test stmt2Test.cpp)\nTARGET_LINK_LIBRARIES(\n        stmt2Test\n        os util common transport parser catalog scheduler gtest ${TAOS_NATIVE_LIB_STATIC} qcom executor function\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(stmtTest stmtTest.cpp)\nTARGET_LINK_LIBRARIES(\n        stmtTest\n        os util common transport parser catalog scheduler gtest ${TAOS_NATIVE_LIB_STATIC} qcom executor function\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files for Snappy in CMake\nDESCRIPTION: Generates configuration header files with platform-specific settings and prepares public headers for installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"cmake/config.h.in\"\n  \"${PROJECT_BINARY_DIR}/config.h\"\n)\n\n# We don't want to define HAVE_ macros in public headers. Instead, we use\n# CMake's variable substitution with 0/1 variables, which will be seen by the\n# preprocessor as constants.\nset(HAVE_SYS_UIO_H_01 ${HAVE_SYS_UIO_H})\nif(NOT HAVE_SYS_UIO_H_01)\n  set(HAVE_SYS_UIO_H_01 0)\nendif(NOT HAVE_SYS_UIO_H_01)\n\nconfigure_file(\n  \"snappy-stubs-public.h.in\"\n  \"${PROJECT_BINARY_DIR}/snappy-stubs-public.h\")\n```\n\n----------------------------------------\n\nTITLE: Alternative Requirements Sources and Package Installation\nDESCRIPTION: Shows methods for referencing external requirements files and specifying package installation from local files or URLs\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/python/taosdemo/requirements.txt#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n#-r other-requirements.txt\n#./downloads/numpy-1.9.2-cp34-none-win32.whl\n#http://wxpython.org/Phoenix/snapshot-builds/wxPython_Phoenix-3.0.3.dev1820+49a8884-cp34-none-win_amd64.whl\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Reference Counting with json_auto_t in C\nDESCRIPTION: Demonstrates how to use the json_auto_t type for automatic cleanup of JSON values at the end of scope. This feature is only available on GCC and Clang compilers and helps prevent memory leaks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid function(void) {\n  json_auto_t *value = NULL;\n  value = json_string(\"foo\");\n  /* json_decref(value) is automatically called. */\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS for taosX API in TDengine\nDESCRIPTION: This code snippet demonstrates how to enable HTTPS for the taosX API in TDengine, starting from version 3.3.6.0. It involves adding SSL certificate, key, and CA certificate paths to the `/etc/taos/taosx.toml` configuration file under the `[serve]` section.  After configuring HTTPS on the taosX side, the Explorer needs to be updated to use HTTPS URLs for API calls.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n\"[serve]\\nssl_cert = \\\"/path/to/server.pem\\\"\\nssl_key =  \\\"/path/to/server.key\\\"\\nssl_ca =   \\\"/path/to/ca.pem\\\"\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n# taosX API 本地连接\nx_api = \\\"https://127.0.01:6050\\\"\\n# Public IP 或者域名地址\ngrpc = \\\"https://public.domain.name:6055\\\"\n```\n\n----------------------------------------\n\nTITLE: Switching to Icinga2 Database\nDESCRIPTION: SQL command to switch context to the Icinga2 database for further inspection\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/07-icinga2.md#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntaos> use icinga2;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library Build in CMake\nDESCRIPTION: Creates a static library target for Jansson when shared library building is disabled. Sets position-independent code property for the static library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nelse()\n   add_library(jansson STATIC\n      ${JANSSON_SRC}\n      ${JANSSON_HDR_PRIVATE}\n      ${JANSSON_HDR_PUBLIC})\n   set_target_properties(jansson PROPERTIES\n      POSITION_INDEPENDENT_CODE true)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Version Component in React\nDESCRIPTION: This snippet imports a Release component and renders it with various version props, specifically for taosTools. This is part of a React application that displays historical release information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/28-releases/02-tools.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Release from \"/components/ReleaseV3\";\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Test Command for the Executable in CMake\nDESCRIPTION: This snippet registers the 'sdbTest' executable as a test in CMake, allowing it to be run as part of the testing process. It specifies the name of the test as 'sdbTest' and the command to execute it.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/sdb/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n    NAME sdbTest\n    COMMAND sdbTest\n)\n```\n\n----------------------------------------\n\nTITLE: Snappy Varint Example\nDESCRIPTION: Example showing how uncompressed lengths are stored as little-endian varints, where an uncompressed length of 64 is stored as 0x40, and 2097150 (0x1FFFFE) is stored as 0xFE 0xFF 0x7F.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/format_description.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0x40            // for length 64\n0xFE 0xFF 0x7F  // for length 2097150 (0x1FFFFE)\n```\n\n----------------------------------------\n\nTITLE: Selecting Last Row from Meters Table in TDengine SQL\nDESCRIPTION: This query retrieves the last row of all columns from the 'meters' table in TDengine. It uses the last_row() function to fetch the most recent entry for each column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/example/query-sqls.txt#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect last_row(*) from meters\n```\n\n----------------------------------------\n\nTITLE: Testing Query Hint with Join in TDengine SQL\nDESCRIPTION: This query tests a JOIN operation with a query hint. It joins 'stb1' and 'stb2' tables, using hints to specify which subtables to use for each.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/query/hint.md#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT /*+ USE_TNAME(stb1_1, stb2_1) */ * FROM stb1, stb2 WHERE stb1.ts = stb2.ts;\n```\n\n----------------------------------------\n\nTITLE: Building DNode Static Library with Dependencies in TDengine\nDESCRIPTION: Compiles source files from the src directory into a static dnode library and links it with various TDengine modules including management nodes, monitoring frameworks, and core services.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/node_mgmt/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src IMPLEMENT_SRC)\nadd_library(dnode STATIC ${IMPLEMENT_SRC})\ntarget_link_libraries(\n  dnode mgmt_mnode mgmt_qnode mgmt_snode mgmt_vnode mgmt_dnode monitorfw tcs\n)\n```\n\n----------------------------------------\n\nTITLE: Binding parameters using Stmt object in ws/stmt package (WebSocket)\nDESCRIPTION: This function binds parameters to the prepared SQL statement via WebSocket. It takes a slice of Param objects containing the parameters and a ColumnType object containing type information as input and returns an error if the operation fails.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n\"func (s *Stmt) BindParam(params []*param.Param, bindType *param.ColumnType) error\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in Markdown for TDinsight Documentation\nDESCRIPTION: Import statements for React components used in the documentation page, including Tabs, TabItem, and Image components to display TDinsight dashboard screenshots.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/12-tdinsight.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs'\nimport TabItem from '@theme/TabItem'\nimport Image from '@theme/IdealImage';\nimport imgStep01 from '../../assets/tdinsight-01.png';\nimport imgStep02 from '../../assets/tdinsight-02.png';\nimport imgStep03 from '../../assets/tdinsight-03.png';\nimport imgStep04 from '../../assets/tdinsight-04.png';\nimport imgStep05 from '../../assets/tdinsight-05.png';\nimport imgStep06 from '../../assets/tdinsight-06.png';\nimport imgStep07 from '../../assets/tdinsight-07.png';\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Services\nDESCRIPTION: These commands use launchctl to start the TDengine server (taosd), Taos Adapter, and Taos Explorer services on macOS with sudo privileges. Launchctl is the preferred way to manage services on macOS. These commands initiate the services, making them accessible for data ingestion and querying.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/packaging/tools/mac_install_summary.txt#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsudo launchctl start com.tdengine.taosd\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo launchctl start com.tdengine.taosadapter\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo launchctl start com.tdengine.taos-explorer\n```\n\n----------------------------------------\n\nTITLE: Marking Unused Functions in TDengine\nDESCRIPTION: This snippet demonstrates how unused functions are marked in the TDengine project using the TAOS_UNUSED macro. These functions are likely implemented but not currently used in the codebase.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nTAOS_UNUSED(metaRehashCache\nTAOS_UNUSED(ttlMgrFlush\nTAOS_UNUSED(taosMkDir\nTAOS_UNUSED(tsdbCommitCloseReader\nTAOS_UNUSED(tsdbCommitCloseIter\nTAOS_UNUSED(tsdbFSCheckCommit\nTAOS_UNUSED(tfsMkdirRecurAt\nTAOS_UNUSED(vHashDrop\nTAOS_UNUSED(tsdbCommitInfoDestroy\nTAOS_UNUSED(vHashGet\nTAOS_UNUSED(tTombBlockGet\nTAOS_UNUSED(tsdbDisableAndCancelAllBgTask\nTAOS_UNUSED(tsdbTbDataIterNext\nTAOS_UNUSED(tsdbCacheDel\nTAOS_UNUSED(tsdbCacheColFormatUpdate\nTAOS_UNUSED(tStatisBlockInit\nTAOS_UNUSED(tStatisBlockClear\nTAOS_UNUSED(tsdbSnapReadFileSetCloseReader\nTAOS_UNUSED(tsdbSnapReadFileSetCloseIter\nTAOS_UNUSED(tsdbSnapReadFileSetCloseReader\nTAOS_UNUSED(tTombBlockClear\nTAOS_UNUSED(tBufferDestroy\nTAOS_UNUSED(tfsMkdirRecurAt\nTAOS_UNUSED(tGetItemFn\nTAOS_UNUSED(tValueColumnDestroy\nTAOS_UNUSED(tBufferClear\nTAOS_UNUSED(tValueColumnClear\nTAOS_UNUSED(taosArrayPush\nTAOS_UNUSED(taosThreadJoin\nTAOS_UNUSED(tdbOsClose\nTAOS_UNUSED(taosThreadMutexInit\nTAOS_UNUSED(taosThreadMutexLock\n```\n\n----------------------------------------\n\nTITLE: Configuring simulate_vnode Executable Build in CMake\nDESCRIPTION: Defines the simulate_vnode executable build target with its source file and dependencies. Includes conditional logic to link the wingetopt library and include its directory when BUILD_WINGETOPT is enabled, which is typically needed for Windows builds.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/craft/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(simulate_vnode \"simulate_vnode.c\")\ntarget_link_libraries(simulate_vnode PUBLIC craft lz4 uv_a)\nif(${BUILD_WINGETOPT})\n    target_link_libraries(simulate_vnode PUBLIC wingetopt)\n    target_include_directories(\n        simulate_vnode\n        PUBLIC \"${TD_SOURCE_DIR}/contrib/wingetopt/src\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executables\nDESCRIPTION: This section details the linking of essential libraries to the executables, which provides them access to necessary functionalities such as OS, utilities, common functionalities, and Google Test framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/transport/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(transportTest\n  os\n  util\n  common\n  gtest_main\n  transport\n  function\n)\ntarget_link_libraries(transUT\n  os\n  util\n  common\n  gtest_main\n  transport\n)\ntarget_link_libraries(transUT2\n  os\n  util\n  common\n  gtest_main\n  transport\n)\ntarget_link_libraries(svrBench\n  os\n  util\n  common\n  gtest_main\n  transport\n)\ntarget_link_libraries(cliBench\n  os\n  util\n  common\n  gtest_main\n  transport\n)\ntarget_link_libraries(httpBench\n  os\n  util\n  common\n  gtest_main\n  transport\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building SDB Static Library in TDengine with CMake\nDESCRIPTION: This CMake snippet collects all source files from the 'src' directory, builds them into a static library named 'sdb', configures include paths, and links the library with several dependencies including os, common, util, wal, sync, and crypt.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/sdb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src MNODE_SRC)\nadd_library(sdb STATIC ${MNODE_SRC})\ntarget_include_directories(\n    sdb\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n    sdb os common util wal sync crypt\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering documentation cards\nDESCRIPTION: Uses the DocCardList component to dynamically render documentation cards based on the items in the current sidebar category.  The useCurrentSidebarCategory hook provides the items to be displayed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/28-releases/03-notes/index.md#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring TFS Library with CMake\nDESCRIPTION: This CMake script sets up the TFS library in the TDengine project by including source directories, adding a static library, and specifying target include directories. It links the TFS library with other components such as os, util, common, and monitor. It conditionally adds test directories based on a build flag (BUILD_TEST).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tfs/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src TFS_SRC)\nadd_library(tfs STATIC ${TFS_SRC})\ntarget_include_directories(\n  tfs\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/tfs\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(tfs os util common monitor)\n\nif(${BUILD_TEST})\n  add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for TDengine Tools in CMake\nDESCRIPTION: Sets up the include directories for building TDengine tools. This includes binary directory headers, project-specific headers, and dependency headers for JSON processing, OS-specific code, utilities, and decimal libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.0)\n\nINCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/build/include)\nINCLUDE_DIRECTORIES(../inc)\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/../deps/toolscJson/inc)\nINCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/os)\nINCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/util)\nINCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/libs/decimal)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags and Include Paths for TDengine Build\nDESCRIPTION: This snippet defines compiler flags and include paths for building the TDengine project. It sets the Linux platform, enables WebSocket support, and specifies paths to system and project-specific include directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/compile_flags.txt#2025-04-16_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n-DLINUX\n-DWEBSOCKET=true\n-I/usr/include\n-Iinc\n-Ideps/toolscJson/inc\n-Ideps/avro/lang/c/src\n```\n\n----------------------------------------\n\nTITLE: TDengine 3.0 Response example\nDESCRIPTION: This is an example of the JSON response when querying information from a TDengine 3.0 database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/60-rest-api.mdx#2025-04-16_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"code\": 0,\n    \"column_meta\": [\n        [\n            \"name\",\n            \"VARCHAR\",\n            64\n        ],\n        [\n            \"ntables\",\n            \"BIGINT\",\n            8\n        ],\n        [\n            \"status\",\n            \"VARCHAR\",\n            10\n        ]\n    ],\n    \"data\": [\n        [\n            \"information_schema\",\n            16,\n            \"ready\"\n        ],\n        [\n            \"performance_schema\",\n            9,\n            \"ready\"\n        ]\n    ],\n    \"rows\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Thread-Safe Reference Counting in C\nDESCRIPTION: Preprocessor constant used to check if thread-safe reference counting is supported by the compiler through built-in atomic functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/threadsafety.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nJANSSON_THREAD_SAFE_REFCOUNT\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregate Values in TDengine\nDESCRIPTION: SQL query to calculate average, maximum, and minimum values from 100 million records in the 'meters' supertable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT AVG(current), MAX(voltage), MIN(phase) FROM test.meters;\n```\n\n----------------------------------------\n\nTITLE: Main Function for GitHub Commits Fetching with Jansson in C\nDESCRIPTION: The main function that handles command-line arguments, constructs the GitHub API URL, makes HTTP requests, parses the JSON response with Jansson, and outputs commit information. It demonstrates JSON array iteration, object property access, and error handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char *argv[])\n{\n    size_t i;\n    char *text;\n    char url[URL_SIZE];\n\n    json_t *root;\n    json_error_t error;\n\n    if(argc != 3)\n    {\n        fprintf(stderr, \"usage: %s USER REPOSITORY\\n\\n\", argv[0]);\n        fprintf(stderr, \"List commits at USER's REPOSITORY.\\n\\n\");\n        return 2;\n    }\n```\n\n----------------------------------------\n\nTITLE: Import MDX Components and Resources\nDESCRIPTION: Imports various React components and resources for documentation, including Tabs, TabItem, Image components and installation/verification guides for different operating systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/index.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport Image from '@theme/IdealImage';\nimport imgClientLib from '../../assets/client-libraries-01.png';\nimport InstallOnLinux from \"../../assets/resources/_linux_install.mdx\";\nimport InstallOnWindows from \"../../assets/resources/_windows_install.mdx\";\nimport InstallOnMacOS from \"../../assets/resources/_macos_install.mdx\";\nimport VerifyWindows from \"../../assets/resources/_verify_windows.mdx\";\nimport VerifyLinux from \"../../assets/resources/_verify_linux.mdx\";\nimport VerifyMacOS from \"../../assets/resources/_verify_macos.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Suggested TCompressionLevel with 'z' Prefix in Delphi\nDESCRIPTION: Proposed alternative enumeration for compression levels using 'z' prefix to avoid naming conflicts with other components.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/contrib/delphi/readme.txt#2025-04-16_snippet_1\n\nLANGUAGE: Delphi\nCODE:\n```\nTCompressionLevel = (zcNone, zcFastest, zcDefault, zcMax);\n```\n\n----------------------------------------\n\nTITLE: Configuring LZ4 Test Executable Build in CMake\nDESCRIPTION: Creates an executable target 'lz4_test', adds main.c as its source file, and links it with the static LZ4 library. This configuration enables building a test program for the LZ4 compression library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/lz4/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(lz4_test \"\")\ntarget_sources(lz4_test\n    PRIVATE\n    \"main.c\"\n)\ntarget_link_libraries(lz4_test lz4_static)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for the qcom Library\nDESCRIPTION: Sets the include directories for the `qcom` library. It defines public include directories using `PUBLIC` and private include directories using `PRIVATE`. Public include directories are accessible to other libraries and executables that link to `qcom`, while private include directories are only accessible within the `qcom` library itself.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n    qcom\n    PUBLIC \"${TD_SOURCE_DIR}/include/libs/qcom\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining and linking heapTest executable\nDESCRIPTION: This creates an executable named `heapTest` from `heapTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `heapTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_executable(heapTest \\\"heapTest.cpp\\\")\ntarget_link_libraries(heapTest os util gtest_main)\nadd_test(\n    NAME heapTest\n    COMMAND heapTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: TDengine Data Subscription Demo in Rust\nDESCRIPTION: This Rust example demonstrates subscribing to data in TDengine. It showcases the usage of the TDengine Rust driver to set up a subscription and receive data updates. The example includes necessary imports and function calls to connect to TDengine and handle subscription events.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_rust.mdx#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\"#[tokio::main]\\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\\n    use futures::StreamExt;\\n    use tdengine::sync::prelude::* ;\\n\\n    let dsn = \"taos://root:taosdata@localhost:6030/subscriptions\";\\n\\n    \\n    let mut client = TaosBuilder::from_dsn(dsn)?\\n        .build()?;\\n\\n    client.exec(\"drop database if exists subscriptions\")?;\\n    client.exec(\"create database if not exists subscriptions\")?;\\n    client.exec(\"use subscriptions\")?;\\n\\n    client.exec(\"create stable if not exists meters (ts timestamp, current float) tags (location varchar(16))\")?;\\n\\n    let mut s = client.subscribe(\"topic_name_rust\")?;\\n    s.create_topic()?;\\n    let mut stream = s.stream()?;\\n    let sql = \"insert into d1 using meters tags('California.SanFrancisco') values (now, 10.0)\";\\n    client.exec(sql)?;\\n    let sql = \"insert into d2 using meters tags('California.LosAngeles') values (now, 12.0)\";\\n    client.exec(sql)?;\\n\\n    match stream.next().await {\\n        Some(Ok(data)) => {\\n            println!(\"{:#?}\", data);\\n        }\\n        Some(Err(err)) => {\\n            eprintln!(\"error: {}\", err);\\n        }\\n        None => {\\n            println!(\"no data\");\\n        }\\n    }\\n\\n    Ok(())\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Traefik redirect-to-https middleware configuration\nDESCRIPTION: This code snippet shows how to configure a Traefik middleware for redirecting HTTP traffic to HTTPS, ensuring that all connections are secure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- \\\"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Avro Source Files in CMake\nDESCRIPTION: This snippet defines a list of source files for the Avro C library. It includes various .c and .h files that make up the library's implementation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/src/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(AVRO_SRC\n    allocation.c\n    array.c\n    avro.h\n    avro/allocation.h\n    avro/basics.h\n    avro/consumer.h\n    avro/data.h\n    avro/errors.h\n    avro/generic.h\n    avro/io.h\n    avro/legacy.h\n    avro/refcount.h\n    avro/resolver.h\n    avro/schema.h\n    avro/value.h\n    avro_generic_internal.h\n    avro_private.h\n    codec.c\n    codec.h\n    consumer.c\n    consume-binary.c\n    datafile.c\n    datum.c\n    datum.h\n    datum_equal.c\n    datum_read.c\n    datum_size.c\n    datum_skip.c\n    datum_validate.c\n    datum_value.c\n    datum_write.c\n    dump.c\n    dump.h\n    encoding.h\n    encoding_binary.c\n    errors.c\n    generic.c\n    io.c\n    map.c\n    memoize.c\n    resolved-reader.c\n    resolved-writer.c\n    resolver.c\n    schema.c\n    schema.h\n    schema_equal.c\n    st.c\n    st.h\n    string.c\n    value.c\n    value-hash.c\n    value-json.c\n    value-read.c\n    value-sizeof.c\n    value-write.c\n    wrapped-buffer.c\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Package List Component in React/JSX\nDESCRIPTION: React component import statement for displaying package download list specific to macOS platform.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_macos_install.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PkgListV3 from \"/components/PkgListV3\";\n```\n\n----------------------------------------\n\nTITLE: Using LAST Function in SQL\nDESCRIPTION: Returns the last (most recent) non-NULL value in a column from a table or super-table. Can return multiple columns with LAST(*).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_55\n\nLANGUAGE: sql\nCODE:\n```\nLAST(expr)\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Synchronized Data in InfluxDB Line Protocol\nDESCRIPTION: Example of the data output in the Kafka topic, showing how TDengine data is formatted in InfluxDB line protocol with measurement name, tags, fields, and timestamp.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n......\nmeters,location=\"California.SanFrancisco\",groupid=2i32 current=10.3f32,voltage=219i32,phase=0.31f32 1538548685000000000\nmeters,location=\"California.SanFrancisco\",groupid=2i32 current=12.6f32,voltage=218i32,phase=0.33f32 1538548695000000000\n......\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Client Tests\nDESCRIPTION: This snippet configures and creates an executable target for client tests, linking it with several required libraries. This setup is essential for ensuring that the test can access necessary functionalities during execution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(clientTest clientTests.cpp)\nTARGET_LINK_LIBRARIES(\n        clientTest\n        os util common transport parser catalog scheduler gtest ${TAOS_NATIVE_LIB_STATIC} qcom executor function\n)\n```\n\n----------------------------------------\n\nTITLE: Including TDengine Python Connection Example\nDESCRIPTION: A documentation placeholder that references an external Python example file for connecting to TDengine database. Uses the include directive to embed the connection example code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_python.mdx#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/connect_example.py}}\n```\n\n----------------------------------------\n\nTITLE: Installing TaosTools\nDESCRIPTION: Command to install the built TaosTools package\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README-CN.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Displaying Package List with PkgListV3 Component\nDESCRIPTION: This snippet uses the PkgListV3 component to display a list of client installation packages for Windows. The \"type\" prop is set to 4, which might indicate a specific version or category of packages to show. It depends on React and the path suggests a directory of components in the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_windows_install.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport PkgListV3 from \"/components/PkgListV3\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PkgListV3 type={4} sys=\"Windows\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring azTest Executable in CMake\nDESCRIPTION: This snippet configures the azTest executable by specifying the source files, including necessary directories, and linking against required libraries while ensuring testing capabilities. It checks if the environment is Linux before proceeding with the configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_LINUX)\n    aux_source_directory(. AZ_TEST_SRC)\n\n    add_executable(azTest ${AZ_TEST_SRC})\n    target_include_directories(azTest\n        PUBLIC\n        \"${TD_SOURCE_DIR}/include/libs/azure\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n    )\n\n    target_link_libraries(azTest\n        az\n        gtest_main\n    )\n    enable_testing()\n    add_test(\n        NAME az_test\n        COMMAND azTest\n    )\nendif(TD_LINUX)\n```\n\n----------------------------------------\n\nTITLE: Conditionally adding S3 definitions and libraries\nDESCRIPTION: This block conditionally adds the -DUSE_S3 definition and links the 'az' library to the '_azure_sdk' and 'crypt' libraries if the BUILD_S3 flag is set. This allows for building the library with or without S3 support.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_S3})\n  add_definitions(-DUSE_S3)\n  target_link_libraries(\n    az\n    PUBLIC _azure_sdk\n    PUBLIC crypt\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Showing Views in TDengine SQL\nDESCRIPTION: This snippet provides commands to show views in the TDengine database. It includes commands to retrieve all views from a specific database, display the creation syntax of a view, describe the columns of a view, and fetch all view information from the information schema.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW [db_name.]VIEWS;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CREATE VIEW [db_name.]view_name;\n```\n\nLANGUAGE: sql\nCODE:\n```\nDESCRIBE [db_name.]view_name;\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ... FROM information_schema.ins_views;\n```\n\n----------------------------------------\n\nTITLE: Viewing Ingress Services - Shell\nDESCRIPTION: This command retrieves the current state of ingress resources in the Kubernetes cluster, allowing users to check the status and configuration of the deployed ingress.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get ingress\n```\n\n----------------------------------------\n\nTITLE: Updating Running CRC for GZIP Compression in C\nDESCRIPTION: This function updates a running CRC with a buffer of bytes. It performs pre- and post-conditioning (one's complement) internally. The function is used to calculate the CRC of a data stream in chunks.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nunsigned long update_crc(unsigned long crc,\n                    unsigned char *buf, int len)\n{\n  unsigned long c = crc ^ 0xffffffffL;\n  int n;\n\n  if (!crc_table_computed)\n    make_crc_table();\n  for (n = 0; n < len; n++) {\n    c = crc_table[(c ^ buf[n]) & 0xff] ^ (c >> 8);\n  }\n  return c ^ 0xffffffffL;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database with TDengine CLI\nDESCRIPTION: Commands to create a test database in TDengine using the CLI and then initialize the application through an HTTP endpoint.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/springbootdemo/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ taos -s 'create database if not exists test'\n\n$ curl http://localhost:8080/weather/init\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList in MDX\nDESCRIPTION: This snippet demonstrates how to import the DocCardList component and use it to render a list of documentation cards based on the current sidebar category in a Docusaurus project. The snippet uses hooks from the Docusaurus theme to access the current category items.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/03-visual/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Defining snprintf and strtoll for Windows Compatibility\nDESCRIPTION: This code snippet shows how to define snprintf and strtoll functions for Windows compatibility when _WIN32 is defined.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/README.maintaining_win32.txt#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef _WIN32\n#define snprintf _snprintf\n#define strtoll _strtoi64\n#endif\n```\n\n----------------------------------------\n\nTITLE: Version Information Collection for TDengine Tools in CMake\nDESCRIPTION: Collects and configures version information for TDengine tools. Checks for required version number, retrieves Git commit ID, and sets up build information with OS type, CPU type, and build date.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# collect --version information\n#\nMESSAGE(\"collect --version show info:\")\n# version\nIF (DEFINED TD_VER_NUMBER)\n    ADD_DEFINITIONS(-DTD_VER_NUMBER=\"${TD_VER_NUMBER}\")\n    MESSAGE(STATUS \"version:${TD_VER_NUMBER}\")\nELSE ()    \n    # abort build\n    MESSAGE(FATAL_ERROR \"build taos-tools not found TD_VER_NUMBER define.\")\nENDIF ()\n\n# commit id\nFIND_PACKAGE(Git)\nIF(GIT_FOUND)\n    # get\n    EXECUTE_PROCESS(\n        COMMAND git log -1 --format=%H\n        WORKING_DIRECTORY ${TD_COMMUNITY_DIR}\n        OUTPUT_VARIABLE GIT_COMMIT_ID\n        )    \n\n    STRING(SUBSTRING \"${GIT_COMMIT_ID}\" 0 40 TAOSBENCHMARK_COMMIT_ID)\n    SET(TAOSDUMP_COMMIT_ID \"${TAOSBENCHMARK_COMMIT_ID}\")\n\n    # show\n    MESSAGE(STATUS \"taosdump commit id: ${TAOSDUMP_COMMIT_ID}\")\n    MESSAGE(STATUS \"taosBenchmark commit id: ${TAOSBENCHMARK_COMMIT_ID}\")\n    # define\n    ADD_DEFINITIONS(-DTAOSDUMP_COMMIT_ID=\"${TAOSDUMP_COMMIT_ID}\")\n    ADD_DEFINITIONS(-DTAOSBENCHMARK_COMMIT_ID=\"${TAOSBENCHMARK_COMMIT_ID}\")        \nELSE()\n    MESSAGE(FATAL_ERROR \"build taos-tools FIND_PACKAGE(Git) failed.\")\nENDIF (GIT_FOUND)\n\n# build info\nSET(BUILD_INFO \"${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}\")\nADD_DEFINITIONS(-DBUILD_INFO=\"${BUILD_INFO}\")\nMESSAGE(STATUS \"build:${BUILD_INFO}\")\nMESSAGE(\"\")\n\n#\n# build proj\n```\n\n----------------------------------------\n\nTITLE: Using ST_AsText Function in SQL\nDESCRIPTION: Converts a geometry data type to its Well-Known Text (WKT) representation as a VARCHAR string.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_80\n\nLANGUAGE: sql\nCODE:\n```\nST_AsText(GEOMETRY geom)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Date Range Filter in TDengine\nDESCRIPTION: Example of creating a stream that processes data within a specific date range, from January 30, 2020 to January 1, 2023.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\ncreate stream if not exists count_history_s fill_history 1 into count_history as select count(*) from power.meters where ts > '2020-01-30' and ts < '2023-01-01' interval(10s)\n```\n\n----------------------------------------\n\nTITLE: Starting and Managing TDgpt Service with Systemd\nDESCRIPTION: Commands for starting, stopping, and checking the status of the taosanoded service using systemd.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/03-management.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start  taosanoded\nsystemctl stop   taosanoded\nsystemctl status taosanoded\n```\n\n----------------------------------------\n\nTITLE: JSON Object Creation Function in C\nDESCRIPTION: Function for creating JSON objects, which implicitly initializes the hash function seed if not already done.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/threadsafety.rst#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\njson_object()\n```\n\n----------------------------------------\n\nTITLE: Installing Python dependencies for crash reporting\nDESCRIPTION: pip command to install required Python libraries 'requests' and 'python-dotenv' for the crash reporting script.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/telemetry/crash-report/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install requests python-dotenv\n```\n\n----------------------------------------\n\nTITLE: Running TDengine vnode Stability Tests in Shell\nDESCRIPTION: Shell commands to execute stability tests for the vnode component of TDengine, focusing on different replication scenarios and dnode configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/jenkins/clusterCase.txt#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./test.sh -f tsim/vnode/stable_dnode2.sim\n./test.sh -f tsim/vnode/stable_dnode3.sim\n./test.sh -f tsim/vnode/stable_replica3_dnode6.sim\n./test.sh -f tsim/vnode/stable_replica3_vnode3.sim\n```\n\n----------------------------------------\n\nTITLE: Testing TDengine Explorer Access via Ingress\nDESCRIPTION: Shell command for testing access to the TDengine Explorer service using the configured domain name. This verifies that the Ingress configuration is working correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://replica3.local.tdengine.com\n```\n\n----------------------------------------\n\nTITLE: Example Directory Description in Markdown\nDESCRIPTION: A markdown header and description explaining the purpose of the examples directory for the Jansson JSON library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/examples/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nJansson examples\n================\n\nThis directory contains simple example programs that use Jansson.\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Sync Library Tests in CMake\nDESCRIPTION: Sets up include directories for various sync library test executables. Each test target includes the sync library headers and local test include directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(syncTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/sync\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding and Configuring Static libz Library in CMake\nDESCRIPTION: This snippet executes gcc to find the libz.a path, strips any whitespace, and sets up libz-static as an imported static library with the discovered path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nEXECUTE_PROCESS (\n        COMMAND gcc -print-file-name=libz.a\n        OUTPUT_VARIABLE LIBZ_PATH\n)\nSTRING(STRIP \"${LIBZ_PATH}\" LIBZ_PATH)\nMESSAGE(\"libza path:\" ${LIBZ_PATH})\nADD_LIBRARY(libz-static STATIC IMPORTED)\nSET_PROPERTY(TARGET libz-static PROPERTY IMPORTED_LOCATION \"${LIBZ_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: Running taosBenchmark with No Parameters\nDESCRIPTION: Runs taosBenchmark without any parameters, using default settings to connect to TDengine and create sample data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/02-tools/10-taosbenchmark.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntaosBenchmark\n```\n\n----------------------------------------\n\nTITLE: Forecasting Evaluation Configuration in INI\nDESCRIPTION: Provides an example configuration for the analytics_compare tool used to evaluate forecasting algorithm effectiveness.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_4\n\nLANGUAGE: INI\nCODE:\n```\n[forecast]\n# number of data points per training period\nperiod = 10\n\n# consider final 10 rows of in-scope data as forecasting results\nrows = 10\n\n# start time of training data\nstart_time = 1949-01-01T00:00:00\n\n# end time of training data\nend_time = 1960-12-01T00:00:00\n\n# start time of results\nres_start_time = 1730000000000\n\n# specify whether to create a graphical chart\ngen_figure = true\n```\n\n----------------------------------------\n\nTITLE: Configuring DataX Job for OpenTSDB to TDengine Migration\nDESCRIPTION: JSON configuration for a DataX job to migrate data from OpenTSDB to TDengine 3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/25-application/_i3-immigrate.md#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"job\":{\n     \"content\":[{\n       \"reader\": {\n         \"name\": \"opentsdbreader\",\n         \"parameter\": {\n           \"endpoint\": \"http://192.168.1.180:4242\",\n           \"column\": [\"weather_temperature\"],\n           \"beginDateTime\": \"2021-01-01 00:00:00\",\n           \"endDateTime\": \"2021-01-01 01:00:00\"\n         }\n       },\n     \"writer\": {\n       \"name\": \"tdengine30writer\",\n       \"parameter\": {\n            \"username\": \"root\",\n            \"password\": \"taosdata\",\n            \"connection\": [\n              {\n                \"table\": [\n                  \"matric1\"\n                ],\n                \"jdbcUrl\": \"jdbc:TAOS://192.168.1.101:6030/test?timestampFormat=TIMESTAMP\"\n              }\n            ],\n            \"batchSize\": 1000,\n            \"ignoreTagsUnmatched\": true\n          }\n       }\n     }],\n     \"setting\": {\n       \"speed\": {\n         \"channel\": 1\n       }\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring TaosKeeper External Project Build in CMake\nDESCRIPTION: This snippet defines an external project configuration for building TaosKeeper, a component of TDengine. It specifies the build process using Go with custom version flags and defines installation paths for the binary and configuration files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nExternalProject_Add(taoskeeper\n    PREFIX \"taoskeeper\"\n    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/keeper\n    BUILD_ALWAYS off\n    BUILD_IN_SOURCE 1\n    CONFIGURE_COMMAND cmake -E echo \"taoskeeper no need cmake to config\"\n    PATCH_COMMAND\n    COMMAND git clean -f -d\n    BUILD_COMMAND\n    COMMAND go build -a -ldflags \"-X 'github.com/taosdata/taoskeeper/version.Version=${taos_version}' -X 'github.com/taosdata/taoskeeper/version.Gitinfo=${taoskeeper_commit_sha1}' -X 'github.com/taosdata/taoskeeper/version.CommitID=${taoskeeper_commit_sha1}' -X 'github.com/taosdata/taoskeeper/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n    INSTALL_COMMAND\n    COMMAND cmake -E echo \"Copy taoskeeper\"\n    COMMAND cmake -E copy taoskeeper ${CMAKE_BINARY_DIR}/build/bin\n    COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/test/cfg/\n    COMMAND cmake -E echo \"Copy taoskeeper.toml\"\n    COMMAND cmake -E copy ./config/taoskeeper.toml ${CMAKE_BINARY_DIR}/test/cfg/\n    COMMAND cmake -E echo \"Copy taoskeeper.service\"\n    COMMAND cmake -E copy ./taoskeeper.service ${CMAKE_BINARY_DIR}/test/cfg/\n```\n\n----------------------------------------\n\nTITLE: Using SQRT Function in SQL\nDESCRIPTION: The SQRT function returns the square root of the specified field. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nSQRT(expr)\n```\n\n----------------------------------------\n\nTITLE: Formatting and Displaying GitHub Commit Information in C\nDESCRIPTION: Code that extracts string values from JSON string objects using json_string_value and formats the output to display the commit ID and message. Uses the newline_offset helper function to extract just the first line of the commit message.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nmessage_text = json_string_value(message);\nprintf(\"%.8s %.*s\\n\",\n       json_string_value(sha),\n       newline_offset(message_text),\n       message_text);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through JSON Array of GitHub Commits with Jansson\nDESCRIPTION: Code that iterates through the JSON array of commits, extracts individual commit data objects, and verifies each object has the expected structure. Uses json_array_size and json_array_get functions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nfor(i = 0; i < json_array_size(root); i++)\n{\n    json_t *data, *sha, *commit, *message;\n    const char *message_text;\n\n    data = json_array_get(root, i);\n    if(!json_is_object(data))\n    {\n        fprintf(stderr, \"error: commit data %d is not an object\\n\", i + 1);\n        json_decref(root);\n        return 1;\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation for Jansson in Bash\nDESCRIPTION: This snippet demonstrates how to generate HTML documentation for Jansson using the make command. It requires Sphinx 1.0 or newer.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/README.rst#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Configuring taosadapter build for non-Windows platforms in CMake\nDESCRIPTION: Sets up an ExternalProject for building taosadapter on non-Windows platforms. It configures the build environment, sets version information, and specifies build and install commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nELSE()\n    MESSAGE(\"Building taosAdapter on non-Windows\")\n    INCLUDE(ExternalProject)\n    ExternalProject_Add(taosadapter\n        PREFIX \"taosadapter\"\n        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/taosadapter\n        BUILD_ALWAYS off\n        DEPENDS ${TAOS_NATIVE_LIB}\n        BUILD_IN_SOURCE 1\n        CONFIGURE_COMMAND cmake -E echo \"taosadapter no need cmake to config\"\n        PATCH_COMMAND\n        COMMAND git clean -f -d\n        BUILD_COMMAND\n        COMMAND tree ${CMAKE_BINARY_DIR}/build/lib\n        COMMAND CGO_CFLAGS=-I${CMAKE_CURRENT_SOURCE_DIR}/../include/client CGO_LDFLAGS=-L${CMAKE_BINARY_DIR}/build/lib go build -a -ldflags \"-X 'github.com/taosdata/taosadapter/v3/version.Version=${taos_version}' -X 'github.com/taosdata/taosadapter/v3/version.CommitID=${taosadapter_commit_sha1}' -X 'github.com/taosdata/taosadapter/v3/version.BuildInfo=${TD_VER_OSTYPE}-${TD_VER_CPUTYPE} ${TD_VER_DATE}'\"\n\n        INSTALL_COMMAND\n        COMMAND cmake -E echo \"Copy taosadapter\"\n        COMMAND cmake -E copy taosadapter ${CMAKE_BINARY_DIR}/build/bin\n        COMMAND cmake -E make_directory ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E echo \"Copy taosadapter.toml\"\n        COMMAND cmake -E copy ./example/config/taosadapter.toml ${CMAKE_BINARY_DIR}/test/cfg/\n        COMMAND cmake -E copy ./taosadapter.service ${CMAKE_BINARY_DIR}/test/cfg/\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Jansson Library Sources and Headers in CMake\nDESCRIPTION: Sets up the source files and header files (both private and public) for the Jansson library build. Uses file globbing to collect source files and explicitly defines header file paths.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Add the lib sources.\nfile(GLOB JANSSON_SRC src/*.c)\n\nset(JANSSON_HDR_PRIVATE\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/hashtable.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson_private.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/strbuffer.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/utf.h\n   ${CMAKE_CURRENT_BINARY_DIR}/private_include/jansson_private_config.h)\n\nset(JANSSON_HDR_PUBLIC\n   ${CMAKE_CURRENT_BINARY_DIR}/include/jansson_config.h\n   ${CMAKE_CURRENT_SOURCE_DIR}/src/jansson.h)\n\nsource_group(\"Library Sources\" FILES ${JANSSON_SRC})\nsource_group(\"Library Private Headers\" FILES ${JANSSON_HDR_PRIVATE})\nsource_group(\"Library Public Headers\" FILES ${JANSSON_HDR_PUBLIC})\n```\n\n----------------------------------------\n\nTITLE: Revoking Data Subscription Permissions in SQL\nDESCRIPTION: This SQL snippet demonstrates how to revoke data subscription permissions from a user in TDengine. It specifically covers the revoke operation for 'subscribe' permissions which is applied to topics, ensuring users cannot subscribe to particular topics.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/14-user.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nrevoke privileges on priv_level from user_name \nprivileges : {\n    all \n | priv_type [, priv_type] ...\n} \npriv_type : { \n subscribe\n} \npriv_level : { \n topic_name\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Libraries in CMake\nDESCRIPTION: Sets up the LZ4 compression library for the TDengine build process if the BUILD_WITH_LZ4 option is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# lz4\nif(${BUILD_WITH_LZ4})\n    add_subdirectory(lz4/build/cmake EXCLUDE_FROM_ALL)\n    target_include_directories(\n        lz4_static\n        PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/lz4/lib\n    )\nendif(${BUILD_WITH_LZ4})\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Stream Information in TDengine\nDESCRIPTION: SQL query to get comprehensive information about streams from the information schema.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * from information_schema.`ins_streams`;\n```\n\n----------------------------------------\n\nTITLE: Importing Images in Markdown for TDengine Architecture Documentation\nDESCRIPTION: This code snippet demonstrates how to import images using the '@theme/IdealImage' component and define image variables for use in the markdown document. It includes imports for architectural diagrams, data flow, and node configuration images.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/01-arch.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Image from '@theme/IdealImage';\nimport imgArch from '../assets/architecture-01.png';\nimport imgFlow from '../assets/architecture-02.png';\nimport imgLeader from '../assets/architecture-03.png';\nimport imgFollower from '../assets/architecture-04.png';\n```\n\n----------------------------------------\n\nTITLE: Cloning TDengine Repository\nDESCRIPTION: Clones the TDengine repository from GitHub and changes to the project directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/taosdata/TDengine.git\ncd TDengine\n```\n\n----------------------------------------\n\nTITLE: Configuring commonTest Executable for Linux\nDESCRIPTION: Creates a test executable for common components, linking against specific libraries and setting include directories for Linux platforms\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_LINUX)\n    add_executable(commonTest \"commonTests.cpp\")\n    target_link_libraries(commonTest os util common gtest_main)\n    target_include_directories(\n        commonTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/common/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/libs/common/inc\"\n    )\n    add_test(\n        NAME commonTest\n        COMMAND commonTest\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TaosAdapter TOML Settings\nDESCRIPTION: TOML configuration for enabling TaosAdapter to receive Icinga2 data. Specifies connection parameters, database settings, and authentication details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_icinga2.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[opentsdb_telnet]\nenable = true\nmaxTCPConnections = 250\ntcpKeepAlive = false\ndbs = [\"opentsdb_telnet\", \"collectd\", \"icinga2\", \"tcollector\"]\nports = [6046, 6047, 6048, 6049]\nuser = \"root\"\npassword = \"taosdata\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SNode Static Library in CMake for TDengine\nDESCRIPTION: This CMake configuration sets up the SNode component as a static library. It collects source files from the src directory, defines include paths for the library, and specifies all required library dependencies for linking.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/snode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src SNODE_SRC)\nadd_library(snode STATIC ${SNODE_SRC})\ntarget_include_directories(\n    snode\n    PUBLIC \"${TD_SOURCE_DIR}/include/dnode/snode\"\n    PUBLIC \"${TD_SOURCE_DIR}/include/dnode/vnode\"\n    private \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n    snode\n    PRIVATE executor\n    PRIVATE transport\n    PRIVATE os\n    PRIVATE common\n    PRIVATE util\n    PRIVATE qcom\n    PRIVATE stream\n    PRIVATE wal\n    PRIVATE index\n    PRIVATE tqCommon\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Void Functions in TDengine\nDESCRIPTION: This snippet shows a collection of void function declarations used in the TDengine project. These functions cover a wide range of functionalities including file system operations, messaging, caching, and database management.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n(void)tfsOpendir\n(void)tfsRmdir\n(void)tfsUnLock\n(void)tfsUnLockTier\n(void)timer_delete\n(void)titoa\n(void)tjsonGetStringValue\n(void)tmqBuildBatchMetaRspFromWrapper\n(void)tmqBuildMetaRspFromWrapper\n(void)tmqBuildRspFromWrapper\n(void)tmsgPutToQueue\n(void)tmsgSendReq\n(void)tmsgSendRsp\n(void)tmsgUpdateDnodeInfo\n(void)toName\n(void)tqMetaGetHandle\n(void)tqProcessTaskConsenChkptIdReq\n(void)tqProcessTaskResetReq\n(void)tqScanWalAsync\n(void)tqStopStreamAllTasksAsync\n(void)tqUpdateTbUidList\n(void)transAcquireExHandle\n(void)transAsyncSend\n(void)transClearBuffer\n(void)transDQSched\n(void)transDestroyBuffer\n(void)transQueuePop\n(void)transQueuePush\n(void)transReleaseExHandle\n(void)transRemoveExHandle\n(void)transSockInfo2Str\n(void)tsCompressInit\n(void)tsDecompressFloatImplAvx2\n(void)tsDecompressFloatImplAvx512\n(void)tsDecompressTimestampAvx2\n(void)tsDecompressTimestampAvx512\n(void)tsdbAcquireReader\n(void)tsdbBeginTaskOnFileSet\n(void)tsdbCacheCommit\n(void)tsdbCacheCommitNoLock\n(void)tsdbCacheDeserialize\n(void)tsdbCacheDropNTableColumn\n(void)tsdbCacheDropSTableColumn\n(void)tsdbCacheDropSubTables\n(void)tsdbCacheDropTable\n(void)tsdbCacheDropTableColumn\n(void)tsdbCacheNewNTableColumn\n(void)tsdbCacheNewSTableColumn\n(void)tsdbCacheNewTable\n(void)tsdbCacheNewTableColumn\n(void)tsdbCacheRelease\n(void)tsdbCacheSetPageS3\n(void)tsdbCacheUpdate\n(void)tsdbCacheUpdateValue\n(void)tsdbDisableAndCancelAllBgTask\n(void)tsdbEnableBgTask\n(void)tsdbFSDestroyCopySnapshot\n(void)tsdbFSDestroyRefSnapshot\n(void)tsdbFSGetFSet\n(void)tsdbFSSetBlockCommit\n(void)tsdbFSToBinary\n(void)tsdbFinishTaskOnFileSet\n(void)tsdbIterMergerClose\n(void)tsdbMergeFileSetEndCloseReader\n(void)tsdbPreCommit\n(void)tsdbRefMemTable\n(void)tsdbRowIterOpen\n(void)tsdbRowMergerInit\n(void)tsdbSetKeepCfg\n(void)tsdbSnapRAWReadFileSetCloseIter\n(void)tsdbSnapRAWReadFileSetCloseReader\n(void)tsdbSnapRAWReaderClose\n(void)tsdbSnapRAWWriterPrepareClose\n(void)tsdbSnapReaderClose\n(void)tsdbSnapWriterPrepareClose\n(void)tsdbStopAllCompTask\n(void)tsdbSttFileReadStatisBlock\n(void)tsdbSttFileReaderClose\n(void)tsdbSttLvlClear\n(void)tsdbTFileLastChunkName\n(void)tsdbTFileName\n(void)tsdbTFileObjRef\n(void)tsdbTFileObjRemove\n(void)tsdbTFileObjRemoveUpdateLC\n(void)tsdbTFileObjUnref\n(void)tsdbTFileSetRangeArrayDestroy\n(void)tsdbTFileSetRangeClear\n(void)tsdbTFileSetRemove\n(void)tsdbTFileUpdVerRange\n(void)tsdbTbDataIterNext\n(void)tsdbWriterUpdVerRange\n(void)tsem2_destroy\n(void)tsem2_post\n(void)tsem2_wait\n(void)tsem_destroy\n(void)tsem_init\n(void)tsem_post\n(void)tsem_timewait\n(void)tsem_wait\n(void)ttlMgrFlush\n(void)udfcClose\n(void)unlink\n(void)updataTableColCmpr\n(void)usleep\n(void)vHashDrop\n(void)vHashGet\n(void)vHashRehash\n(void)varDataCopy\n(void)vmWriteVnodeListToFile\n(void)vnodeAChannelInit\n(void)vnodeAWait\n(void)vnodeAsyncCancelAllTasks\n(void)vnodeAsyncCommit\n(void)vnodeAsyncLaunchWorker\n(void)vnodeAsyncSetWorkers\n(void)vnodeAsyncTaskDone\n(void)vnodeBegin\n(void)vnodeCancelAndDisableAllBgTask\n(void)vnodeCheckAssignedLogSyncd\n(void)vnodeCommitInfo\n(void)vnodeEnableBgTask\n(void)vnodeGetLoad\n(void)vnodeGetPrimaryDir\n(void)vnodeGetStreamProgress\n(void)vnodeGetTableCfg\n(void)vnodeGetTableMeta\n(void)vnodePreCheckAssignedLogSyncd\n(void)vnodeSaveInfo\n(void)vnodeSyncCommit\n(void)walInit\n(void)walLoadMeta\n(void)walSaveMeta\n(void)walkExpr\n(void)walkExprs\n```\n\n----------------------------------------\n\nTITLE: Including TDengine Native C Client Header\nDESCRIPTION: Example showing how to include the TDengine native C client library header file, which is required for using the native connection method to TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n#include <taos.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring taoscTest Executable in CMake\nDESCRIPTION: Sets up the taoscTest executable, linking it with necessary libraries and setting include directories. This block defines how the test executable should be built and linked.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/taosc_test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(taoscTest \"taoscTest.cpp\")\ntarget_link_libraries(taoscTest PUBLIC ${TAOS_NATIVE_LIB} os util common gtest_main)\ntarget_include_directories(\n    taoscTest\n    PUBLIC \"${TD_SOURCE_DIR}/include/os\"\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding a Subdirectory for Testing in CMake\nDESCRIPTION: This code snippet conditionally adds the 'test' subdirectory to the build process if the `BUILD_TEST` variable is set to true. The `ADD_SUBDIRECTORY` command includes the CMakeLists.txt file within the 'test' directory, allowing CMake to build and run the tests. This allows testing code to be kept separate from the main library code, and testing is only included when the BUILD_TEST variable is set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Replication Service (taosx)\nDESCRIPTION: This shell command starts the replication service in TDengine to synchronize data between the primary and secondary nodes in an active-active deployment.  The command takes source and sink endpoints (FQDNs of the TDengine instances), and optionally a database name. When successful, it displays the replica ID.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/18-dual.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosx replica start -f <source-endpoint> -t <sink-endpoint> [database]\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Jansson\nDESCRIPTION: Sets up the CMake project for Jansson, specifying the minimum required CMake version and project name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.1)\nproject(jansson C)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Scripts\nDESCRIPTION: Sets up installation scripts for different operating systems (Linux, Darwin, Windows) using bash or batch files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\" OR ${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    SET(MAKE_INSTALL_SH \"${PROJECT_SOURCE_DIR}/packaging/tools/make_install.sh\")\n    INSTALL(CODE \"execute_process(COMMAND bash ${MAKE_INSTALL_SH} ${CMAKE_BINARY_DIR})\")\nELSEIF (${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n    SET(MAKE_INSTALL_SH \"${PROJECT_SOURCE_DIR}/packaging/tools/make_install.bat\")\n    INSTALL(CODE \"execute_process(COMMAND ${MAKE_INSTALL_SH} :needAdmin ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR} Windows)\")\nENDIF ()\n```\n\n----------------------------------------\n\nTITLE: Restarting Telegraf Service - Shell\nDESCRIPTION: Command to restart the Telegraf service, ensuring changes to the configuration are applied. Requires shell access and appropriate permissions to execute system commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/03-telegraf.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart telegraf\n```\n\n----------------------------------------\n\nTITLE: Conditional building of utilTests executable\nDESCRIPTION: This snippet conditionally builds the `utilTests` executable if the `TD_LINUX` variable is set. It creates the executable from `utilTests.cpp` and links it against the `os`, `util`, `common`, and `gtest_main` libraries. An associated test is then added.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n\"IF($TD_LINUX)\n    add_executable(utilTests \\\"utilTests.cpp\\\")\n    target_link_libraries(utilTests os util common gtest_main)\n    add_test(\n        NAME utilTests\n        COMMAND utilTests\n    )\nENDIF()\"\n```\n\n----------------------------------------\n\nTITLE: Traefik Middleware Configuration for TDengine\nDESCRIPTION: This code snippet demonstrates a Traefik middleware configuration for securing a TDengine API. It includes configurations for redirecting HTTP traffic to HTTPS, checking for a custom header, and implementing an IP whitelist. These measures help to protect the TDengine deployment from unauthorized access and improve overall security.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \\\"traefik.enable=true\\\"\n  - \\\"traefik.http.routers.tdengine.rule=Host(`api.tdengine.example.com`)\\\"\n  - \\\"traefik.http.routers.tdengine.entrypoints=https\\\"\n  - \\\"traefik.http.routers.tdengine.tls.certresolver=default\\\"\n  - \\\"traefik.http.routers.tdengine.service=tdengine\\\"\n  - \\\"traefik.http.services.tdengine.loadbalancer.server.port=6041\\\"\n  - \\\"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\\\"\n  - \\\"traefik.http.middlewares.check-header.headers.customrequestheaders.X-Secret-Header=SecretValue\\\"\n  - \\\"traefik.http.middlewares.check-header.headers.customresponseheaders.X-Header-Check=true\\\"\n  - \\\"traefik.http.middlewares.tdengine-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 192.168.1.7\\\"\n  - \\\"traefik.http.routers.tdengine.middlewares=redirect-to-https,check-header,tdengine-ipwhitelist\\\"\n```\n\n----------------------------------------\n\nTITLE: Configuring zlib libraries in CMake for TDengine\nDESCRIPTION: Sets up zlib static and dynamic libraries with appropriate include directories and platform-specific compiler options. For macOS (Darwin), it adds specific compiler flags to handle deprecated-non-prototype warnings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_PROJECT_INCLUDE_BEFORE \"${TD_SUPPORT_DIR}/EnableCMP0048.txt.in\")\n\nif(${TD_DARWIN})\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wno-error=deprecated-non-prototype\")\n    SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-error=deprecated-non-prototype\")\nendif(${TD_DARWIN})\n\nadd_subdirectory(zlib EXCLUDE_FROM_ALL)\n\nif(${TD_DARWIN})\n    target_compile_options(zlibstatic PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\ntarget_include_directories(\n    zlibstatic\n    PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/zlib\n    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/zlib\n)\n\nif(${TD_DARWIN})\n    target_compile_options(zlib PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\ntarget_include_directories(\n    zlib\n    PUBLIC ${CMAKE_CURRENT_BINARY_DIR}/zlib\n    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/zlib\n)\nunset(CMAKE_PROJECT_INCLUDE_BEFORE)\n```\n\n----------------------------------------\n\nTITLE: Configuring taosX API to listen on localhost in TDengine\nDESCRIPTION: This code snippet demonstrates how to configure the taosX API to listen only on the localhost interface, limiting external access and enhancing security. This is achieved by modifying the `/etc/taos/taosx.toml` configuration file to set the `listen` and `grpc` parameters to `127.0.0.1` along with their respective ports, 6050 and 6055.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/17-security-suggestions.md#2025-04-16_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n\"[serve]\\nlisten = \\\"127.0.0.1:6050\\\"\\ngrpc = \\\"127.0.0.1:6055\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Executing Next Sunday UDF in TDengine using SQL\nDESCRIPTION: This SQL statement selects the timestamp (`ts`) and the result of the `nextsunday` UDF applied to the timestamp from table `t`. It displays the original timestamp alongside the calculated date of the next Sunday.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect ts, nextsunday(ts) from t;\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Subdirectory to TDengine Build (CMake)\nDESCRIPTION: Adds the 'shell' subdirectory to the TDengine build process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(shell)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from TMQ in Java\nDESCRIPTION: This Java snippet demonstrates how to unsubscribe a TMQ consumer, preventing further message consumption from subscribed topics.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n\t\ttry {\n\t\t\tconsumer.unsubscribe();\n\t\t\tlog.info(\"unsubscribe success\");\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"unsubscribe failed\", e);\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Defining and linking tbaseCodecTest executable\nDESCRIPTION: This creates an executable named `tbaseCodecTest` from `tbaseCodecTest.cpp` and links it against the `os`, `util`, `common`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `tbaseCodecTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n\"# tbaseCodecTest\nadd_executable(tbaseCodecTest \\\"tbaseCodecTest.cpp\\\")\ntarget_link_libraries(tbaseCodecTest os util common gtest_main)\nadd_test(\n    NAME tbaseCodecTest\n    COMMAND tbaseCodecTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Inclusion - CMake\nDESCRIPTION: This snippet conditionally adds a subdirectory for testing based on the build configuration. It allows for inclusion of test modules only if the BUILD_TEST variable is set to true.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST})\n        ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring OS Unit Tests for Linux Environment\nDESCRIPTION: This snippet defines and links multiple executables for different OS tests, establishing their dependencies on the gtest framework and the OS functionalities. It also registers them for testing with CMake's add_test function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/os/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_LINUX)\n    add_executable(osAtomicTests \"osAtomicTests.cpp\")\n    target_link_libraries(osAtomicTests os util gtest_main)\n    add_test(\n        NAME osAtomicTests\n        COMMAND osAtomicTests\n    )\n\n    add_executable(osDirTests \"osDirTests.cpp\")\n    target_link_libraries(osDirTests os util gtest_main)\n    add_test(\n        NAME osDirTests\n        COMMAND osDirTests\n    )\n\n    add_executable(osFileTests \"osFileTests.cpp\")\n    target_link_libraries(osFileTests os util gtest_main)\n    add_test(\n        NAME osFileTests\n        COMMAND osFileTests\n    )\n\n    add_executable(osEnvTests \"osEnvTests.cpp\")\n    target_link_libraries(osEnvTests os util gtest_main)\n    add_test(\n        NAME osEnvTests\n        COMMAND osEnvTests\n    )\n\n    add_executable(osTests \"osTests.cpp\")\n    target_link_libraries(osTests os util gtest_main)\n    add_test(\n        NAME osTests\n        COMMAND osTests\n    )\n\n    add_executable(osThreadTests \"osThreadTests.cpp\")\n    target_link_libraries(osThreadTests os util gtest_main)\n    add_test(\n        NAME osThreadTests\n        COMMAND osThreadTests\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Directories for CMake Target\nDESCRIPTION: This snippet specifies the directories to include for the test executable, with some directories publicly available and others private.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tfs/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  tfs_test\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/tfs\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Jansson\nDESCRIPTION: Defines various build options for Jansson, including shared library build, random number generation method, and example compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(JANSSON_BUILD_SHARED_LIBS \"Build shared libraries.\" OFF)\noption(USE_URANDOM \"Use /dev/urandom to seed the hash function.\" ON)\noption(USE_WINDOWS_CRYPTOAPI \"Use CryptGenRandom to seed the hash function.\" ON)\n\nif (MSVC)\n   option(JANSSON_STATIC_CRT \"Link the static CRT libraries\" OFF )\nendif ()\n\noption(JANSSON_EXAMPLES \"Compile example applications\" ON)\n\nif (UNIX)\n   option(JANSSON_COVERAGE \"(GCC Only! Requires gcov/lcov to be installed). Include target for doing coverage analysis for the test suite. Note that -DCMAKE_BUILD_TYPE=Debug must be set\" OFF)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Comparing Queries with Nonexistent and Existent End Times During DST Start (SQL)\nDESCRIPTION: These SQL queries demonstrate the difference in results when querying with a nonexistent end time versus an existent end time during the DST start transition. The first query returns no results, while the second query returns expected data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ts, to_iso8601(ts,'Z') FROM t1 WHERE ts BETWEEN '2024-03-31 01:00:00' AND '2024-03-31 02:00:00';\n\nSELECT ts, to_iso8601(ts,'Z') FROM t1 WHERE ts BETWEEN '2024-03-31 01:00:00' AND '2024-03-31 01:59:59';\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing and Compression Libraries in CMake\nDESCRIPTION: Adds configuration for testing frameworks (GoogleTest) and compression libraries (LZ4, zlib, LZMA) based on build options.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# googletest\nif(${BUILD_TEST})\n    cat(\"${TD_SUPPORT_DIR}/gtest_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n    cat(\"${TD_SUPPORT_DIR}/stub_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(${BUILD_TEST})\n\n# lz4\nif(${BUILD_WITH_LZ4})\n    cat(\"${TD_SUPPORT_DIR}/lz4_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif(${BUILD_WITH_LZ4})\n\n# zlib\ncat(\"${TD_SUPPORT_DIR}/zlib_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n\n# cJson\ncat(\"${TD_SUPPORT_DIR}/cjson_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n\n# lzma2\ncat(\"${TD_SUPPORT_DIR}/lzma_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n```\n\n----------------------------------------\n\nTITLE: Installing Python 3.10 on Ubuntu\nDESCRIPTION: Commands to install Python 3.10 and configure it as the default Python3 version on Ubuntu systems. Includes installation of python3-venv and python3-dev packages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/tdgpt/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.10\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 2\nsudo update-alternatives --config python3\nsudo apt install python3.10-venv\nsudo apt install python3.10-dev\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Configuration\nDESCRIPTION: Sets up platform-specific library configurations for Alpine Linux and Windows environments. Configures different linking options based on the target platform.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/shell/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nIF(TD_LINUX AND TD_ALPINE)\n    SET(LINK_ARGP \"/usr/lib/libargp.a\")\nELSE()\n    SET(LINK_ARGP \"\")\nENDIF()\n\nif(TD_WINDOWS)\n    target_link_libraries(shell PUBLIC ${TAOS_LIB})\nelse()\n    target_link_libraries(shell PUBLIC ${TAOS_LIB} ${LINK_JEMALLOC} ${LINK_ARGP})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Release History List with Docusaurus in MDX\nDESCRIPTION: This code snippet uses Docusaurus components to generate a list of release history items. It imports DocCardList and useCurrentSidebarCategory, then renders the DocCardList with items from the current sidebar category.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/28-releases/index.md#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Building tqCommon Static Library with CMake in TDengine\nDESCRIPTION: Configures and builds the tqCommon static library for the TDengine project. The script collects source files from the current directory, defines the library, sets include paths, and specifies dependencies on other TDengine components.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/src/tqCommon/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(. TQ_SOURCE_FILES)\nadd_library(tqCommon STATIC ${TQ_SOURCE_FILES})\ntarget_include_directories(\n        tqCommon\n        PUBLIC \"../inc\"\n        PUBLIC \"../../inc\"\n)\n\ntarget_link_libraries(\n        tqCommon\n        PRIVATE stream\n        PRIVATE common\n        PRIVATE transport\n        PRIVATE executor\n        PRIVATE index\n        PRIVATE qcom\n        PRIVATE qworker\n        PRIVATE sync\n        PRIVATE tfs\n)\n```\n\n----------------------------------------\n\nTITLE: Message Processing Function for TMQ in C\nDESCRIPTION: This C snippet defines a message processing function that iterates over the blocks in a TMQ message and prints the timestamp and payload size of each block.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint msg_process(tmq_message_t* msg) {\n  for (int i = 0; i < tmq_message_block_count(msg); ++i) {\n    const tmq_block_t* block = tmq_message_get_block(msg, i);\n    if (block) {\n      int64_t ts = tmq_block_get_timestamp(block);\n      size_t len = tmq_block_get_payload_size(block);\n      printf(\"block %d: timestamp=%lld, payload size=%zu\\n\", i, ts, len);\n    }\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Result Timestamp Precision in TDengine C Client\nDESCRIPTION: Get the time precision of timestamp fields in the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nint taos_result_precision(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: TDengine Version Number Format\nDESCRIPTION: The version number format consists of four digits [Major+].[Major].[Feature].[Maintenance] where each segment has specific upgrade implications and compatibility considerations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/28-releases/01-tdengine.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Major+].[Major].[Feature].[Maintenance]\n```\n\n----------------------------------------\n\nTITLE: Connecting and Querying TDengine CLI\nDESCRIPTION: Example showing how to connect to TDengine using the taos command and list available databases using the show databases command. Demonstrates the CLI output format including query execution time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_verify_linux.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ taos\n\ntaos> show databases;\n              name              |\n=================================\n information_schema             |\n performance_schema             |\n db                             |\nQuery OK, 3 rows in database (0.019154s)\n\ntaos>\n```\n\n----------------------------------------\n\nTITLE: Building TDengine Monitor Framework Library in CMake\nDESCRIPTION: Configures the build process for the TDengine monitoring framework static library. It collects source files, sets include directories, adds conditional compilation options for Darwin platforms, and defines library dependencies.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/monitorfw/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src MONITOR2_SRC)\nadd_library(monitorfw STATIC ${MONITOR2_SRC})\ntarget_include_directories(\n  monitorfw\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/monitorfw\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\nif(${TD_DARWIN})\n  target_compile_options(monitorfw PRIVATE -Wno-error=deprecated-pragma)\nendif(${TD_DARWIN})\n\ntarget_link_libraries(monitorfw os util common transport)\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine Enterprise Package\nDESCRIPTION: Commands to extract and install TDengine Enterprise package on Linux systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/06-enterprise.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar xf TDengine-enterprise-<version>-Linux-<arch>.tar.gz\ncd TDengine-enterprise-<version>/\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Test for smaTest (Non-Windows)\nDESCRIPTION: Adds a test case named 'smaTest' that executes the compiled smaTest executable. This test is only added if the TD_WINDOWS variable is not defined (i.e., on non-Windows systems).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/sma/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT ${TD_WINDOWS})\n    add_test(\n        NAME smaTest\n        COMMAND smaTest\n    )\nendif(NOT ${TD_WINDOWS})\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test for ScalarTest\nDESCRIPTION: This snippet registers the 'scalarTest' as a test in the CMake test suite. This allows automated testing of the unit test executable once built.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/scalar/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(\n        NAME scalarTest\n        COMMAND scalarTest\n)\n```\n\n----------------------------------------\n\nTITLE: Restarting Telegraf Service\nDESCRIPTION: Command to restart the Telegraf service after configuration changes\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/03-telegraf.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart telegraf\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Subdirectory for Building\nDESCRIPTION: This snippet conditionally adds a subdirectory for tests if the BUILD_TEST variable is set. This allows for modular testing configurations within the project structure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/parser/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST})\n        ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Setting Character Encoding in Windows for TDengine\nDESCRIPTION: Example of setting the charset parameter in the configuration file, specifically for Windows systems where CP936 is the default encoding for Chinese Windows systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncharset CP936\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies in CMake Build System\nDESCRIPTION: Controls the conditional compilation of various storage backends and utilities through CMake build flags. Includes optional components like RocksDB, COS, Lucene, BDB, SQLite, and required components tdev and lz4.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# rocksdb\nif(${BUILD_WITH_ROCKSDB})\n    add_subdirectory(rocksdb)\nendif(${BUILD_WITH_ROCKSDB})\n\n# cos\nif(${BUILD_WITH_COS})\n    add_subdirectory(cos)\nendif(${BUILD_WITH_COS})\n\nif(${BUILD_WITH_LUCENE})\n    add_subdirectory(lucene)\nendif(${BUILD_WITH_LUCENE})\n\nif(${BUILD_WITH_BDB})\n    add_subdirectory(bdb)\nendif(${BUILD_WITH_BDB})\n\nif(${BUILD_WITH_SQLITE})\n    add_subdirectory(sqlite)\nendif(${BUILD_WITH_SQLITE})\n\n# if(${BUILD_S3})\n#   add_subdirectory(azure)\n# endif()\n\nadd_subdirectory(tdev)\nadd_subdirectory(lz4)\n```\n\n----------------------------------------\n\nTITLE: JSON Path-based Object Accessor\nDESCRIPTION: Implements a function to retrieve JSON objects using dot-separated path notation. Utilizes the string iterator and Jansson's fixed-length key APIs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_21\n\nLANGUAGE: c\nCODE:\n```\njson_t *json_object_get_by_path(json_t *object, const char *path) {\n    struct string str;\n    json_t *out = object;\n\n    str.string = path;\n\n    string_foreach(str, \".\") {\n        out = json_object_getn(out, str.string, str.length);\n        if (out == NULL)\n            return NULL;\n    }\n\n    return out;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Static WAL Library\nDESCRIPTION: This CMake command creates a static library named 'wal'. It uses the source files listed in the WAL_SRC variable to build the library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(wal STATIC ${WAL_SRC})\n```\n\n----------------------------------------\n\nTITLE: Native Connection to TDengine in Go\nDESCRIPTION: Establishes a direct native connection to the TDengine database using the core driver, enabling low-level database interactions and operations\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_go.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{#include docs/examples/go/connect/cgoexample/main.go}}\n```\n\n----------------------------------------\n\nTITLE: Building Avro Utility Executables in CMake\nDESCRIPTION: This snippet builds and installs various Avro utility executables. It includes platform-specific considerations, building additional utilities for non-Windows platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/src/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(avrocat avrocat.c)\ntarget_link_libraries(avrocat avro-static)\ninstall(TARGETS avrocat RUNTIME DESTINATION bin)\n\nadd_executable(avroappend avroappend.c)\ntarget_link_libraries(avroappend avro-static)\ninstall(TARGETS avroappend RUNTIME DESTINATION bin)\n\nif (NOT WIN32)\nadd_executable(avropipe avropipe.c)\ntarget_link_libraries(avropipe avro-static)\ninstall(TARGETS avropipe RUNTIME DESTINATION bin)\n\nadd_executable(avromod avromod.c)\ntarget_link_libraries(avromod avro-static)\ninstall(TARGETS avromod RUNTIME DESTINATION bin)\nendif(NOT WIN32)\n```\n\n----------------------------------------\n\nTITLE: Registering Test with CTest\nDESCRIPTION: Adds the showTest executable as a test case to be run by CTest, enabling automated testing\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/show/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n    NAME showTest\n    COMMAND showTest\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring mnode Functional Test in CMake for TDengine\nDESCRIPTION: This CMake snippet collects all source files in the current directory, creates an executable named 'funcTest', links it with the 'sut' library, and registers it as a test target within the CMake testing framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/func/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_FUNC_TEST_SRC)\nadd_executable(funcTest ${MNODE_FUNC_TEST_SRC})\ntarget_link_libraries(\n    funcTest\n    PUBLIC sut\n)\n\nadd_test(\n    NAME funcTest\n    COMMAND funcTest\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing\nDESCRIPTION: This snippet enables testing for the project using CTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Adding Filter Subdirectory - CMake\nDESCRIPTION: This command adds the 'filter' subdirectory to the build process, allowing CMake to process its own CMakeLists.txt file. This is useful for organizing code into modules or components. Ensure that the 'filter' directory contains its own CMakeLists.txt file to define its build instructions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scalar/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(filter)\n```\n\n----------------------------------------\n\nTITLE: Querying Data from Tables in TDengine\nDESCRIPTION: These SQL queries retrieve data from the tables t1, t2, and t3. They select all columns and limit the results to 10 rows for each table.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/high_availability/2_replica.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM t1 LIMIT 10;\nSELECT * FROM t2 LIMIT 10;\nSELECT * FROM t3 LIMIT 10;\n```\n\n----------------------------------------\n\nTITLE: Creating mmnodeTest executable in CMake\nDESCRIPTION: This CMake command creates an executable named 'mmnodeTest' from the source files listed in the 'MNODE_MNODE_TEST_SRC' variable. This variable typically contains a list of .c or .cpp files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/mnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(mmnodeTest ${MNODE_MNODE_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Obtaining TDengine Storage Space Shell Command\nDESCRIPTION: This shell command snippet is used to flush a TDengine database and check the occupied storage space. \\\\\"flush database\\\\\" ensures data is written to disk while \\\\\"du -hd1\\\\\" checks the disk usage of a vnode directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/02-planning.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntaos> flush database <dbname>;\n$ du -hd1 <dataDir>/vnode --exclude=wal\n```\n\n----------------------------------------\n\nTITLE: Configuring Analysis Support in CMake\nDESCRIPTION: Adds a compiler definition for analytics support when the BUILD_WITH_ANALYSIS option is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_WITH_ANALYSIS})\n  add_definitions(-DUSE_ANALYTICS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Common Methods for Avro Value Interface in C\nDESCRIPTION: Declares common methods that can be used with any Avro value, regardless of its schema type. Includes functions for getting type and schema, comparing values, copying, hashing, and resetting.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <stdint.h>\n#include <avro.h>\n\navro_type_t avro_value_get_type(const avro_value_t *value);\navro_schema_t avro_value_get_schema(const avro_value_t *value);\n\nint avro_value_equal(const avro_value_t *v1, const avro_value_t *v2);\nint avro_value_equal_fast(const avro_value_t *v1, const avro_value_t *v2);\n\nint avro_value_copy(avro_value_t *dest, const avro_value_t *src);\nint avro_value_copy_fast(avro_value_t *dest, const avro_value_t *src);\n\nuint32_t avro_value_hash(avro_value_t *value);\n\nint avro_value_reset(avro_value_t *value);\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Query Worker Library\nDESCRIPTION: Links private library dependencies required by the qworker library, including operating system, utility, transport, and other components\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qworker/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(qworker\n    PRIVATE os util transport nodes planner qcom executor index\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Codec Support (ZLIB, Snappy, LZMA)\nDESCRIPTION: Checks for and enables support for various compression codecs including ZLIB, Snappy, and LZMA.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(ZLIB)\nif (ZLIB_FOUND)\n    set(ZLIB_PKG zlib)\n    add_definitions(-DDEFLATE_CODEC)\n    message(\"Enabled deflate codec\")\nelse (ZLIB_FOUND)\n    set(ZLIB_PKG \"\")\n    set(ZLIB_LIBRARIES \"\")\n    message(\"Disabled deflate codec. zlib not found.\")\nendif (ZLIB_FOUND)\n\nfind_package(Snappy)\nif (TRUE AND ZLIB_FOUND)  # Snappy borrows crc32 from zlib\n    set(SNAPPY_PKG libsnappy)\n    add_definitions(-DSNAPPY_CODEC)\n    message(\"Enabled snappy codec\")\nelse (TRUE AND ZLIB_FOUND)\n    set(SNAPPY_PKG \"\")\n    set(SNAPPY_LIBRARIES \"\")\n    message(\"Disabled snappy codec. libsnappy not found or zlib not found.\")\nendif (TRUE AND ZLIB_FOUND)\n\nfind_package(PkgConfig)\nif (LZMA_FOUND)\n    set(LZMA_PKG liblzma)\n    add_definitions(-DLZMA_CODEC)\n    link_directories(${LZMA_LIBRARY_DIRS})\n    message(\"Enabled lzma codec\")\nelse (LZMA_FOUND)\n    set(LZMA_PKG \"\")\n    set(LZMA_LIBRARIES \"\")\n    message(\"Disabled lzma codec. liblzma not found.\")\nendif (LZMA_FOUND)\n\nset(CODEC_LIBRARIES ${ZLIB_LIBRARIES} ${LZMA_LIBRARIES} ${SNAPPY_LIBRARIES})\nset(CODEC_PKG \"@ZLIB_PKG@ @LZMA_PKG@ @SNAPPY_PKG@\")\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd Configuration for TDengine\nDESCRIPTION: Command to reload systemd configuration after making changes to the TDengine service file, such as modifying StartLimitInterval or StartLimitBurst parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/27-train-faq/01-faq.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Configuring crash dump utility for Windows in TDengine\nDESCRIPTION: Sets up a crash dump utility for Windows, which includes a dumper executable and a library that modifies the main function in crasher.c to integrate with the crash handling system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_CRASHDUMP})\n    add_executable(dumper \"crashdump/dumper/dumper.c\")\n    target_link_libraries(dumper User32.lib dbghelp.lib)\n    file(READ \"crashdump/crasher/crasher.c\" CRASHDUMP_CONTENT)\n    string(REPLACE \"main(\" \"main_crashdump(\" CRASHDUMP_CONTENT \"${CRASHDUMP_CONTENT}\")\n    file(WRITE \"crashdump/crasher/crasher.c\" \"${CRASHDUMP_CONTENT}\")\n    add_library(crashdump STATIC \"crashdump/crasher/crasher.c\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OPC DataIn CSV Header for TDengine\nDESCRIPTION: Specifies the structure and rules for the CSV header in OPC DataIn task configuration. Includes column definitions, data types, and usage guidelines.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/05-opcua.md#2025-04-16_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\npoint_id,enable,stable,tbname,value_col,value_transform,type,quality_col,ts_col,request_ts_col,received_ts_col,ts_transform,request_ts_transform,received_ts_transform,tag::VARCHAR(200)::name\n```\n\n----------------------------------------\n\nTITLE: Configuring TDengine TSZ Compression Static Library with CMake\nDESCRIPTION: This CMake script configures the TSZ compression library for TDengine by compiling SZ and Zstandard (zstd) compression libraries. It collects source files from multiple directories, creates a static library, and sets appropriate include paths. Windows-specific compiler flags are applied to suppress warnings on Windows platforms.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/TSZ/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT \"${TSZ_ENABLED}\" MATCHES \"false\")\n\nCMAKE_MINIMUM_REQUIRED(VERSION 3.0)\nPROJECT(TDengine)\n\n# include\nINCLUDE_DIRECTORIES(sz/inc)\nINCLUDE_DIRECTORIES(zstd/)\nINCLUDE_DIRECTORIES(zstd/common/)\n\n# source\nAUX_SOURCE_DIRECTORY(sz/src SRC1)\nAUX_SOURCE_DIRECTORY(zstd/dictBuilder SRC2)\nAUX_SOURCE_DIRECTORY(zstd/common SRC3)\nAUX_SOURCE_DIRECTORY(zstd/compress SRC4)\nAUX_SOURCE_DIRECTORY(zstd/decompress SRC5)\nAUX_SOURCE_DIRECTORY(zstd/deprecated SRC6)\nAUX_SOURCE_DIRECTORY(zstd/legacy SRC7)\n\n# archive\nADD_LIBRARY(TSZ STATIC ${SRC1} ${SRC2} ${SRC3} ${SRC4} ${SRC5} ${SRC6} ${SRC7})\nTARGET_INCLUDE_DIRECTORIES(TSZ PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/sz/inc ${TD_SOURCE_DIR}/include)\n\n# windows ignore warning\nIF(TD_WINDOWS)\n    SET_TARGET_PROPERTIES(TSZ PROPERTIES COMPILE_FLAGS -w)\nENDIF()\n\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration for taosKeeper\nDESCRIPTION: Shows how to configure taosKeeper component in a TOML file, emphasizing security risks due to plaintext passwords and potential network exposure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/17-security-suggestions.md#2025-04-16_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tdengine]\nhost = \"localhost\"\nport = 6041\nusername = \"root\"\npassword = \"taosdata\"\nusessl = false\n```\n\n----------------------------------------\n\nTITLE: Setting walTest Target Sources\nDESCRIPTION: This snippet specifies the source files for the walTest executable.  It sets walMetaTest.cpp as a private source file, meaning it's only used for building the walTest target.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(walTest\n    PRIVATE\n    \"walMetaTest.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TSIM Source Files in CMake\nDESCRIPTION: Defines the source files for the TSIM framework by appending .c files to the TSIM_SRC variable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nLIST(APPEND TSIM_SRC src/simEntry.c)\nLIST(APPEND TSIM_SRC src/simExec.c)\nLIST(APPEND TSIM_SRC src/simParse.c)\nLIST(APPEND TSIM_SRC src/simSystem.c)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to qcom\nDESCRIPTION: Links the `os`, `util`, and `transport` libraries to the `qcom` library using the `target_link_libraries` command. The `PRIVATE` keyword specifies that these libraries are only needed for building `qcom` and are not exposed to other libraries or executables that link to `qcom`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n    qcom\n    PRIVATE os util transport\n)\n```\n\n----------------------------------------\n\nTITLE: 创建数据库主题的SQL语法\nDESCRIPTION: 创建一个基于数据库的数据订阅主题，订阅整个数据库中的所有表数据，可选择性地包含元数据信息。\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/01-subscription.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TOPIC [IF NOT EXISTS] topic_name [with meta] AS DATABASE db_name;\n```\n\n----------------------------------------\n\nTITLE: Creating walTest Executable\nDESCRIPTION: This snippet defines the creation of an executable named walTest. It doesn't specify any source files initially, which are added in a subsequent command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(walTest \"\")\n```\n\n----------------------------------------\n\nTITLE: Querying Data from TDengine using PHP\nDESCRIPTION: PHP code snippet illustrating how to perform a synchronous query on a TDengine database and process the results.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/45-php.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n{{#include docs/examples/php/query.php}}\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to the Executable\nDESCRIPTION: This code block links necessary libraries to the 'plannerTest' executable, depending on whether TD_GRANT is enabled.  It links libraries such as os, util, common, nodes, planner, parser, catalog, transport, gtest, function, qcom, and grant (if TD_GRANT is enabled).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n    IF (TD_GRANT)\n        TARGET_LINK_LIBRARIES(\n                plannerTest\n                PUBLIC os util common nodes planner parser catalog transport gtest function qcom grant\n        )\n    ELSE ()\n        TARGET_LINK_LIBRARIES(\n                plannerTest\n                PUBLIC os util common nodes planner parser catalog transport gtest function qcom\n        )\n    ENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Executables in CMake\nDESCRIPTION: This snippet demonstrates how to define multiple executables using CMake's add_executable function. Each executable is assigned a unique name, which is essential for managing individual components in the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/transport/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(transportTest \"\")\nadd_executable(transUT \"\")\nadd_executable(transUT2 \"\")\nadd_executable(svrBench \"\")\nadd_executable(cliBench \"\")\nadd_executable(httpBench \"\")\n```\n\n----------------------------------------\n\nTITLE: Running TDengine Docker Container with Port Mapping\nDESCRIPTION: Docker run command to start TDengine container with necessary port mappings for various services\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/01-docker.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -p 6030:6030 -p 6041:6041 -p 6043:6043 -p 6044-6049:6044-6049 -p 6044-6045:6044-6045/udp -p 6060:6060 tdengine/tdengine\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory Conditionally in CMake\nDESCRIPTION: This CMake code snippet conditionally adds the 'taosc_test' subdirectory to the build process. The 'add_subdirectory' command includes the CMakeLists.txt file located in the specified subdirectory, allowing it to be built as part of the main project.  The condition is determined by the boolean value of the BUILD_TEST variable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_TEST})\n    add_subdirectory(taosc_test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring taosAdapter via TOML\nDESCRIPTION: This configuration snippet enables taosAdapter to receive data from collectd. The configuration file at /etc/taos/taosadapter.toml is modified to enable the opentsdb_telnet protocol and set up necessary parameters like TCP connections and port numbers. Modify the 'dbs' field to specify the database name and 'user' and 'password' fields with actual TDengine credentials.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_collectd.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[opentsdb_telnet]\nenable = true\nmaxTCPConnections = 250\ntcpKeepAlive = false\ndbs = [\"opentsdb_telnet\", \"collectd\", \"icinga2\", \"tcollector\"]\nports = [6046, 6047, 6048, 6049]\nuser = \"root\"\npassword = \"taosdata\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for taosd Target in CMake\nDESCRIPTION: This snippet specifies the include directories for the 'taosd' target, making headers in the specified path available for compilation. The PRIVATE visibility restricts the inclusion to the target and not to the links or dependents.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  taosd\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/node_mgmt/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduler Source Directory\nDESCRIPTION: Retrieves source files from the src directory and creates a static library named 'scheduler'\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scheduler/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src SCHEDULER_SRC)\nadd_library(scheduler STATIC ${SCHEDULER_SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Jansson Libraries Cache Variable in CMake\nDESCRIPTION: Defines the JANSSON_LIBRARIES cache variable for parent projects to easily reference the Jansson library when including it as a subproject.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nset(JANSSON_LIBRARIES jansson CACHE STRING \"jansson libraries\")\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to mgmt_dnode\nDESCRIPTION: This snippet links the `node_util` and `dmodule` libraries to the `mgmt_dnode` library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_dnode/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  mgmt_dnode node_util dmodule\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Static Library SM4\nDESCRIPTION: This snippet adds the SM4 static library to the build system using the gathered source files. The 'add_library' command specifies that the library type is STATIC.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sm4/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(sm4 STATIC ${SM4_SRC})\n```\n\n----------------------------------------\n\nTITLE: JSON Object Unpacking in C\nDESCRIPTION: Example showing how to unpack values from a JSON object with string and boolean fields\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_18\n\nLANGUAGE: C\nCODE:\n```\n/* root is the JSON object {\"foo\": \"bar\", \"quux\": true} */\nconst char *str;\nint boolean;\njson_unpack(root, \"{s:s, s:b}\", \"foo\", &str, \"quux\", &boolean);\nassert(strcmp(str, \"bar\") == 0 && boolean == 1);\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Sync Pre-Snapshot Reply Test in CMake\nDESCRIPTION: This snippet links the necessary libraries for the syncPreSnapshotReplyTest target. It uses the sync_test_lib and gtest_main libraries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(syncPreSnapshotReplyTest\n    sync_test_lib\n    gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Restarting Icinga2 Service\nDESCRIPTION: Command to restart the Icinga2 monitoring service after configuration changes\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/07-icinga2.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart icinga2\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific support libraries in TDengine\nDESCRIPTION: Sets up various Windows-specific libraries including iconv (character encoding conversion), wingetopt (getopt for Windows), msvcregex (regex support for MSVC), and wcwidth (Unicode character width).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_ICONV})\n    add_library(iconv STATIC iconv/win_iconv.c)\nendif(${BUILD_WITH_ICONV})\n\nif(${BUILD_WINGETOPT})\n    add_subdirectory(wingetopt EXCLUDE_FROM_ALL)\nendif(${BUILD_WINGETOPT})\n\nif(${BUILD_MSVCREGEX})\n    add_library(msvcregex STATIC \"\")\n    target_sources(msvcregex\n        PRIVATE \"msvcregex/regex.c\"\n    )\n    target_include_directories(msvcregex\n        PRIVATE \"msvcregex\"\n    )\n    target_link_libraries(msvcregex\n        INTERFACE Shell32\n    )\n    SET_TARGET_PROPERTIES(msvcregex PROPERTIES OUTPUT_NAME msvcregex)\nendif(${BUILD_MSVCREGEX})\n\nif(${BUILD_WCWIDTH})\n    add_library(wcwidth STATIC \"\")\n    target_sources(wcwidth\n        PRIVATE \"wcwidth/wcwidth.c\"\n    )\n    target_include_directories(wcwidth\n        PRIVATE \"wcwidth\"\n    )\n    SET_TARGET_PROPERTIES(wcwidth PROPERTIES OUTPUT_NAME wcwidth)\nendif(${BUILD_WCWIDTH})\n```\n\n----------------------------------------\n\nTITLE: Define WAL Source Directory\nDESCRIPTION: This CMake function call defines the source directory for the WAL library. It scans the specified directory (src) and stores the list of source files in the WAL_SRC variable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/wal/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src WAL_SRC)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Byte Representation in GZIP Specification\nDESCRIPTION: Demonstrates how bytes and multi-byte values are represented in diagrams throughout the specification. It shows single byte and variable byte representations, as well as bit ordering within a byte.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n+---+\n|   | <-- the vertical bars might be missing\n+---+\n\n+==============+\n|              |\n+==============+\n\n+--------+\n|76543210|\n+--------+\n\n    0        1\n+--------+--------+\n|00001000|00000010|\n+--------+--------+\n ^        ^\n |        |\n |        + more significant byte = 2 x 256\n + less significant byte = 8\n```\n\n----------------------------------------\n\nTITLE: Finding Required Documentation Tools in CMake\nDESCRIPTION: Searches for required documentation generation tools (asciidoc and source-highlight) in the system path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nmessage(STATUS \"Searching for asciidoc...\")\nfind_program(ASCIIDOC_EXECUTABLE asciidoc)\nfind_program(SOURCE_HIGHLIGHT_EXECUTABLE source-highlight)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Without Table Creation\nDESCRIPTION: This command runs the JDBC demo application but bypasses table creation, directly inserting data into existing tables based on provided parameters. The command requires a host and database name and demarcates configuration for data insertion. Successful execution depends on ensuring the specified tables exist in the database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/taosdemo/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\njava -jar target/taosdemo-2.0.1-jar-with-dependencies.jar -host <hostname> -database <db name> -doCreateTable false -superTableSQL \"create table weather(ts timestamp, f1 int) tags(t1 nchar(4))\" -numOfTables 1000 -numOfRowsPerTable 100000000 -numOfThreadsForInsert 10 -numOfTablesPerSQL 10 -numOfValuesPerSQL 100\n```\n\n----------------------------------------\n\nTITLE: SQL Functions and Keywords Overview\nDESCRIPTION: SQL functions and keywords mentioned in the roadmap including REGEXP, GREATEST, LEAST, CAST, KEEP, JOIN, CSUM, COUNT(DISTINCT), INTERP, and OVER clause implementations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/29-roadmap/index.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nREGEXP\nGREATEST\nLEAST\nCAST\nKEEP\nJOIN\nCSUM\nCOUNT(DISTINCT)\nINTERP\nOVER\n```\n\n----------------------------------------\n\nTITLE: TDengine Local Debug Log Configuration\nDESCRIPTION: SQL syntax for adjusting local logging options in TDengine command line interface.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nALTER LOCAL local_option\n \nlocal_option: {\n    'resetLog'\n  | 'rpcDebugFlag' 'value'\n  | 'tmrDebugFlag' 'value'\n  | 'cDebugFlag' 'value'\n  | 'uDebugFlag' 'value'\n  | 'debugFlag' 'value'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Common Library\nDESCRIPTION: Creates a static library named 'common' using collected source files and adds dependencies\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(common STATIC ${COMMON_SRC})\n\nadd_dependencies(common lemon_sql)\n```\n\n----------------------------------------\n\nTITLE: Using Time-MoE for Forecasting in SQL Queries\nDESCRIPTION: This SQL query demonstrates how to use the Time-MoE model for forecasting. It specifies the model name as part of the FORECAST function.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT FORECAST(i32, 'algo=timemoe-fc') \nFROM foo;\n```\n\n----------------------------------------\n\nTITLE: Building the Parser Library\nDESCRIPTION: This snippet builds a static library named 'parser' using the sources defined earlier. It also establishes dependencies and include directories necessary for building the library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/parser/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(parser STATIC ${PARSER_SRC})\nadd_dependencies(parser lemon_sql)\ntarget_include_directories(\n        parser\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/parser\"\n        PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n        parser\n        PRIVATE os util nodes catalog function scalar geometry transport qcom decimal\n)\n```\n\n----------------------------------------\n\nTITLE: Mock Data Insertion into TDengine\nDESCRIPTION: This shell command and Python script are used to insert mocked power data into the TDengine database. It simulates the power data collection process for analysis.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython mockdata.py\n```\n\nLANGUAGE: shell\nCODE:\n```\ntaos -s \"insert into power.goods select _wstart, _wstart + 10d, avg(goods) from power.meters interval(10d);\"\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard in CMake\nDESCRIPTION: Configures the C++ standard to C++14 and marks it as required for the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/azure/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n```\n\n----------------------------------------\n\nTITLE: Conditional UDF Support Configuration in TDengine\nDESCRIPTION: Conditionally builds the User-Defined Function daemon (taosudf) when UDF support is enabled. Includes platform-specific compiler options for macOS and configuring test compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_UDF})\nadd_executable(taosudf src/udfd.c)\n\nif(${TD_DARWIN})\n    target_compile_options(taosudf PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\n\ntarget_include_directories(\n    taosudf\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/function\"\n    \"${TD_SOURCE_DIR}/contrib/libuv/include\"\n    \"${TD_SOURCE_DIR}/include/util\"\n    \"${TD_SOURCE_DIR}/include/common\"\n    \"${TD_SOURCE_DIR}/include/libs/transport\"\n    \"${TD_SOURCE_DIR}/include/client\"\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n    taosudf\n    PUBLIC uv_a\n    PRIVATE os util common nodes function\n)\n\nif(${BUILD_TEST})\n    add_subdirectory(test)\nendif()\n\nendif(${BUILD_WITH_UDF})\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Test Executable with CMake\nDESCRIPTION: Defines a test executable named 'sqliteTest', specifies its source file, and links it with the SQLite library. This configuration is used to build a test program for SQLite functionality.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/sqlite/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(sqliteTest \"\")\ntarget_sources(\n    sqliteTest PRIVATE\n    \"sqliteTest.c\"\n)\ntarget_link_libraries(sqliteTest sqlite)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable for Decimal Test\nDESCRIPTION: This snippet creates an executable named `decimalTest` from the source files listed in `SOURCE_LIST`. It specifies the target that will be built.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(decimalTest ${SOURCE_LIST})\n```\n\n----------------------------------------\n\nTITLE: Linking Wide Integer Library Dependencies\nDESCRIPTION: Configures public library links for the wide integer library, currently with no explicit dependencies\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/src/detail/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n    wideInteger\n    PUBLIC\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Avro Libraries and Headers in CMake\nDESCRIPTION: This snippet sets up installation rules for Avro libraries and headers. It handles both Windows and non-Windows platforms, installing static and shared libraries as appropriate.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/src/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n        ${CMAKE_CURRENT_SOURCE_DIR}/avro.h\n        DESTINATION include)\ninstall(DIRECTORY\n        ${CMAKE_CURRENT_SOURCE_DIR}/avro\n        DESTINATION include\n        FILES_MATCHING PATTERN \"*.h\")\n\ninclude(GNUInstallDirs)\n\nif (WIN32)\ninstall(TARGETS avro-static\n\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n       )\nelse(WIN32)\ninstall(TARGETS avro-static avro-shared\n\tRUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n\tLIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n       )\nendif(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Setting up MNode Source Files and Conditional Enterprise Files in CMake\nDESCRIPTION: Configures the source directory and conditionally adds enterprise-specific source files to the MNode component. Sets compilation flags for privilege support and storage backends (S3/COS) when building the enterprise version.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src MNODE_SRC)\n\nif(TD_PRIVILEGE)\n  ADD_DEFINITIONS(-D_PRIVILEGE)\nendif()\n\nif(TD_ENTERPRISE)\n  LIST(APPEND MNODE_SRC ${TD_ENTERPRISE_DIR}/src/plugins/privilege/src/privilege.c)\n  LIST(APPEND MNODE_SRC ${TD_ENTERPRISE_DIR}/src/plugins/mnode/src/mndDb.c)\n  LIST(APPEND MNODE_SRC ${TD_ENTERPRISE_DIR}/src/plugins/mnode/src/mndVgroup.c)\n  LIST(APPEND MNODE_SRC ${TD_ENTERPRISE_DIR}/src/plugins/mnode/src/mndDnode.c)\n  LIST(APPEND MNODE_SRC ${TD_ENTERPRISE_DIR}/src/plugins/view/src/mndView.c)\n\n  if(${BUILD_WITH_S3})\n    add_definitions(-DUSE_S3)\n  ELSEIF(${BUILD_WITH_COS})\n    add_definitions(-DUSE_COS)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Switching to a Database in TDengine\nDESCRIPTION: SQL command to switch the current database context to the 'power' database for subsequent operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/01-model.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nuse power;\n```\n\n----------------------------------------\n\nTITLE: Adding Source Directories\nDESCRIPTION: Specifies source directories for the common library, collecting source files from multiple locations\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(src COMMON_SRC)\naux_source_directory(src/msg COMMON_MSG_SRC)\n\nLIST(APPEND COMMON_SRC ${COMMON_MSG_SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for SM4\nDESCRIPTION: This snippet sets the include directories for the SM4 library. It specifies public and private include paths to ensure that proper header files can be found during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sm4/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  sm4\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/sm4\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring libuv for TDengine\nDESCRIPTION: Sets up libuv with a Windows-specific patch to handle the absence of GetHostNameW function on Windows 7, replacing it with GetComputerNameW. It adds libuv as a subproject with appropriate build configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_UV})\n    if(TD_WINDOWS)\n        # There is no GetHostNameW function on win7.\n        file(READ \"libuv/src/win/util.c\" LIBUV_WIN_UTIL_CONTENT)\n        string(REPLACE \"if (GetHostNameW(buf, UV_MAXHOSTNAMESIZE\" \"DWORD  nSize = UV_MAXHOSTNAMESIZE;\\n  if (GetComputerNameW(buf, &nSize\" LIBUV_WIN_UTIL_CONTENT \"${LIBUV_WIN_UTIL_CONTENT}\")\n        file(WRITE \"libuv/src/win/util.c\" \"${LIBUV_WIN_UTIL_CONTENT}\")\n    endif()\n\n    add_subdirectory(libuv EXCLUDE_FROM_ALL)\nendif(${BUILD_WITH_UV})\n```\n\n----------------------------------------\n\nTITLE: Defining and linking bloomFilterTest executable\nDESCRIPTION: This creates an executable named `bloomFilterTest` from `bloomFilterTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `bloomFilterTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n\"# bloomFilterTest\nadd_executable(bloomFilterTest \\\"bloomFilterTest.cpp\\\")\ntarget_link_libraries(bloomFilterTest os util gtest_main)\nadd_test(\n    NAME bloomFilterTest\n    COMMAND bloomFilterTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Linking libraries to the test executable.\nDESCRIPTION: This CMake snippet links several libraries to the `queryUtilTest` executable. These libraries include `os`, `util`, `gtest`, `qcom`, `common`, and `transport`, providing the test with required functionality.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nTARGET_LINK_LIBRARIES(\n        queryUtilTest\n        PUBLIC os util gtest qcom common transport\n)\n```\n\n----------------------------------------\n\nTITLE: TCollector Source Code Modifications\nDESCRIPTION: Git diff showing the required changes to TCollector configuration files for integration with taosAdapter. Modifications include updating default ports and host settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_tcollector.mdx#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nindex e7e7a1c..ec3e23c 100644\n--- a/collectors/etc/config.py\n+++ b/collectors/etc/config.py\n@@ -59,13 +59,13 @@ def get_defaults():\n         'http_password': False,\n         'reconnectinterval': 0,\n         'http_username': False,\n-        'port': 4242,\n+        'port': 6049,\n         'pidfile': '/var/run/tcollector.pid',\n         'http': False,\n         'http_api_path': \"api/put\",\n         'tags': [],\n         'remove_inactive_collectors': False,\n-        'host': '',\n+        'host': '127.0.0.1',\n         'logfile': '/var/log/tcollector.log',\n         'cdir': default_cdir,\n         'ssl': False,\ndiff --git a/tcollector.py b/tcollector.py\nindex 21f9b23..4c71ba2 100755\n--- a/tcollector.py\n+++ b/tcollector.py\n@@ -64,7 +64,7 @@ ALIVE = True\n # exceptions, something is not right and tcollector will shutdown.\n # Hopefully some kind of supervising daemon will then restart it.\n MAX_UNCAUGHT_EXCEPTIONS = 100\n-DEFAULT_PORT = 4242\n+DEFAULT_PORT = 6049\n MAX_REASONABLE_TIMESTAMP = 2209212000  # Good until Tue  3 Jan 14:00:00 GMT 2040\n # How long to wait for datapoints before assuming\n # a collector is dead and restarting it\n@@ -943,13 +943,13 @@ def parse_cmdline(argv):\n             'http_password': False,\n             'reconnectinterval': 0,\n             'http_username': False,\n-            'port': 4242,\n+            'port': 6049,\n             'pidfile': '/var/run/tcollector.pid',\n             'http': False,\n             'http_api_path': \"api/put\",\n             'tags': [],\n             'remove_inactive_collectors': False,\n-            'host': '',\n+            'host': '127.0.0.1',\n             'logfile': '/var/log/tcollector.log',\n             'cdir': default_cdir,\n             'ssl': False,\n```\n\n----------------------------------------\n\nTITLE: UDF Python Module Error Log\nDESCRIPTION: Error message from the UDF log file showing that the 'moment' module could not be found. This indicates a configuration issue with the Python module search path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\ntail -20 taospyudf.log  \n2023-05-25 11:42:34.541 ERROR [1679419] [PyUdf::PyUdf@217] py udf load module failure. error ModuleNotFoundError: No module named 'moment'\n```\n\n----------------------------------------\n\nTITLE: Conditionally adding subdirectory 'test'\nDESCRIPTION: This block conditionally adds the 'test' subdirectory if both the BUILD_S3 and BUILD_TEST flags are set. This allows for building and running unit tests for the library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_S3})\nif(${BUILD_TEST})\n  add_subdirectory(test)\nendif(${BUILD_TEST})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring System File Limits on macOS\nDESCRIPTION: XML configuration file for macOS to increase the maximum open files limit. This resolves the \"Too many open files\" error that can occur when TDengine opens more files than the system's default limit permits.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>Label</key>\n  <string>limit.maxfiles</string>\n<key>ProgramArguments</key>\n<array>\n  <string>launchctl</string>\n  <string>limit</string>\n  <string>maxfiles</string>\n  <string>100000</string>\n  <string>100000</string>\n</array>\n<key>RunAtLoad</key>\n  <true/>\n<key>ServiceIPC</key>\n  <false/>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Windows Client Chinese Character Configuration\nDESCRIPTION: Configuration settings for taos.cfg file to properly handle Chinese characters in Windows client environment.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/index.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlocale C\ncharset UTF-8\n```\n\n----------------------------------------\n\nTITLE: Compiling with Jansson Library\nDESCRIPTION: Command for compiling a program with Jansson library linkage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/gettingstarted.rst#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncc -o prog prog.c -ljansson\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for 'az'\nDESCRIPTION: This command sets the include directories for the 'az' library. It adds the '${TD_SOURCE_DIR}/include/libs/azure' directory as a public include directory and the '${CMAKE_CURRENT_SOURCE_DIR}/inc' directory as a private include directory.  These directories are used to locate header files during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/azure/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  az\n  PUBLIC \"${TD_SOURCE_DIR}/include/libs/azure\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Seeq Query Definition for Goods Data\nDESCRIPTION: This JSON object defines a query for retrieving goods data from TDengine in Seeq. It includes various parameters for data handling and interaction.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"QueryDefinitions\": [\n        {\n            \"Name\": \"PowerGoods\",\n            \"Type\": \"CONDITION\",\n            \"Sql\": \"SELECT ts1, ts2, goods FROM power.goods\",\n            \"Enabled\": true,\n            \"TestMode\": false,\n            \"TestQueriesDuringSync\": true,\n            \"InProgressCapsulesEnabled\": false,\n            \"Variables\": null,\n            \"Properties\": [\n                {\n                    \"Name\": \"Name\",\n                    \"Value\": \"Goods\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                },\n                {\n                    \"Name\": \"Maximum Duration\",\n                    \"Value\": \"10days\",\n                    \"Sql\": null,\n                    \"Uom\": \"string\"\n                }\n            ],\n            \"CapsuleProperties\": [\n                {\n                    \"Name\": \"goods\",\n                    \"Value\": \"${columnResult}\",\n                    \"Column\": \"goods\",\n                    \"Uom\": \"string\"\n                }\n            ]\n        }\n    ],\n    \"Type\": \"GENERIC\",\n    \"Hostname\": null,\n    \"Port\": 0,\n    \"DatabaseName\": null,\n    \"Username\": \"root\",\n    \"Password\": \"taosdata\",\n    \"InitialSql\": null,\n    \"TimeZone\": null,\n    \"PrintRows\": false,\n    \"UseWindowsAuth\": false,\n    \"SqlFetchBatchSize\": 100000,\n    \"UseSSL\": false,\n    \"JdbcProperties\": null,\n    \"GenericDatabaseConfig\": {\n        \"DatabaseJdbcUrl\": \"jdbc:TAOS-RS://127.0.0.1:6041/power?user=root&password=taosdata\",\n        \"SqlDriverClassName\": \"com.taosdata.jdbc.rs.RestfulDriver\",\n        \"ResolutionInNanoseconds\": 1000,\n        \"ZonedColumnTypes\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up the build environment and creating executable\nDESCRIPTION: This CMake snippet sets the C++ standard to 11, includes all source files in the current directory into the SOURCE_LIST variable and then creates an executable named `queryUtilTest` using the source files listed in SOURCE_LIST.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qcom/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"build qcom unit test\")\n\n# GoogleTest requires at least C++11\nSET(CMAKE_CXX_STANDARD 11)\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\nADD_EXECUTABLE(queryUtilTest ${SOURCE_LIST})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Thread Support for Unix Systems\nDESCRIPTION: Configures thread support for Unix systems using pthreads when THREADSAFE is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(THREADS_LIBRARIES)\nif(UNIX AND THREADSAFE AND CMAKE_COMPILER_IS_GNUCC)\n    set(CMAKE_THREAD_PREFER_PTHREAD)\n    find_package(Threads)\n\n    if(NOT CMAKE_USE_PTHREADS_INIT)\n        message(FATAL_ERROR \"pthreads not found\")\n    endif(NOT CMAKE_USE_PTHREADS_INIT)\n\n    add_definitions(-DTHREADSAFE -D_REENTRANT)\n    set(THREADS_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})\nendif(UNIX AND THREADSAFE AND CMAKE_COMPILER_IS_GNUCC)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake project requirements\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name as TDengine. It's the initial setup for the CMake build configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n\"CMAKE_MINIMUM_REQUIRED(VERSION 2.8...3.20)\nPROJECT(TDengine)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Libraries and Definitions for VNode\nDESCRIPTION: Sets up link directories, dependencies, and compiler definitions for the vnode library, including conditional inclusions for grant functionality and feature flags for inverted index and RocksDB.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_directories(\n    vnode\n    PUBLIC \"${CMAKE_BINARY_DIR}/build/lib\"\n)\n\ntarget_link_libraries(\n    vnode\n    PUBLIC os\n    PUBLIC util\n    PUBLIC common\n    PUBLIC tfs\n    PUBLIC wal\n    PUBLIC qworker\n    PUBLIC sync\n    PUBLIC executor\n    PUBLIC scheduler\n    PUBLIC tdb\n    PUBLIC audit\n    PUBLIC crypt\n    PUBLIC tcs\n\n    # PUBLIC bdb\n    # PUBLIC scalar\n    # PUBLIC zstd\n    PUBLIC rocksdb\n    PUBLIC transport\n    PUBLIC stream\n    PUBLIC index\n    PUBLIC tqCommon\n)\n\nif(TD_GRANT)\n    TARGET_LINK_LIBRARIES(vnode PUBLIC grant)\nendif()\n\ntarget_compile_definitions(vnode PUBLIC -DMETA_REFACT)\n\nif(${BUILD_WITH_INVERTEDINDEX})\n    add_definitions(-DUSE_INVERTED_INDEX)\nendif(${BUILD_WITH_INVERTEDINDEX})\n\nif(${BUILD_WITH_ROCKSDB})\n    add_definitions(-DUSE_ROCKSDB)\nendif(${BUILD_WITH_ROCKSDB})\n\nif(${BUILD_TEST})\n    add_subdirectory(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Python Unit Test for Forecast Service\nDESCRIPTION: Illustrates a unit test for the `myfc` forecast service. It sets input data, configures parameters like `fc_rows`, `start_ts`, and `time_step`, executes the forecast, and asserts that the forecast results are equal to the expected value of 1.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/02-forecast.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef test_myfc(self):\n    \"\"\" 测试 myfc 类 \"\"\"\n    s = loader.get_service(\"myfc\")\n\n    # 设置用于预测分析的数据\n    s.set_input_list(self.get_input_list(), None)\n    # 检查预测结果应该全部为 1\n    r = s.set_params(\n        {\"fc_rows\": 10, \"start_ts\": 171000000, \"time_step\": 86400 * 30, \"start_p\": 0}\n    )\n    r = s.execute()\n\n    expected_list = [1] * 10\n    self.assertEqlist(r[\"res\"][0], expected_list)\n```\n\n----------------------------------------\n\nTITLE: Enhanced Scalar UDF in Python with Error and Null Handling\nDESCRIPTION: This improved Python code defines a scalar UDF with stricter input validation and null value handling.  The `process` function now raises an exception if the input `datablock` has more than one column.  It also explicitly checks for `None` values in the input data and returns `None` if a null value is encountered.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/09-udf.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef process(block):\n    rows, cols = block.shape()\n    if cols > 1:\n        raise Exception(f\"require 1 parameter but given {cols}\")\n    return [ None if block.data(i, 0) is None else log(block.data(i, 0) ** 2 + 1) for i in range(rows)]\n```\n\n----------------------------------------\n\nTITLE: Compacting Data in TDengine\nDESCRIPTION: This snippet shows the SQL syntax for compacting data within a TDengine database or specific vgroups. The `compact` command reorganizes data files to improve storage efficiency and query performance by removing empty spaces and invalid data. It supports specifying a database, vgroup list, start/end times, and compacting only metadata.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/04-maintenance.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n\"compact DATABASE db_name [start with 'XXXX'] [end with 'YYYY'] [META_ONLY];\ncompact [db_name.]vgroups IN (vgroup_id1, vgroup_id2, ...) [start with 'XXXX'] [end with 'YYYY'] [META_ONLY];\nshow compacts;\nshow compact compact_id;\nkill compact compact_id;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Test Executable\nDESCRIPTION: This snippet configures CMake to build a test executable named 'msnodeTest' using source files from the 'MNODE_SNODE_TEST_SRC' directory. It links the 'sut' library and sets up the test to run 'msnodeTest'. Dependencies include a proper CMake environment and source availability in 'MNODE_SNODE_TEST_SRC'. The expected output is a compiled test executable ready to be executed.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/snode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# aux_source_directory(. MNODE_SNODE_TEST_SRC)\n# add_executable(msnodeTest ${MNODE_SNODE_TEST_SRC})\n# target_link_libraries(\n#     msnodeTest\n#     PUBLIC sut\n# )\n\n# add_test(\n#     NAME msnodeTest\n#     COMMAND msnodeTest\n# )\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Services on macOS\nDESCRIPTION: Command to start all TDengine services on macOS systems using the provided script.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/04-get-started/03-package.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo start-all.sh\n```\n\n----------------------------------------\n\nTITLE: Finding gTest Libraries and Headers with CMake\nDESCRIPTION: Searches for gTest headers and libraries in various system locations. This is necessary for compiling and linking tests that use the Google Test framework.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/taosc_test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_PATH(HEADER_GTEST_INCLUDE_DIR gtest.h /usr/include/gtest /usr/local/include/gtest /usr/local/taos/include)\nFIND_LIBRARY(LIB_GTEST_STATIC_DIR libgtest.a /usr/lib/ /usr/local/lib /usr/lib64 /usr/local/taos/driver/)\nFIND_LIBRARY(LIB_GTEST_SHARED_DIR libgtest.so /usr/lib/ /usr/local/lib /usr/lib64 /usr/local/taos/driver/)\n```\n\n----------------------------------------\n\nTITLE: Checking for Compiler Intrinsics and SIMD Support in CMake\nDESCRIPTION: Performs compile tests to check for compiler intrinsics and SIMD (Single Instruction, Multiple Data) instruction support.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckCXXSourceCompiles)\ncheck_cxx_source_compiles(\"\nint main() {\n  return __builtin_expect(0, 1);\n}\" HAVE_BUILTIN_EXPECT)\n\ncheck_cxx_source_compiles(\"\nint main() {\n  return __builtin_ctzll(0);\n}\" HAVE_BUILTIN_CTZ)\n\ncheck_cxx_source_compiles(\"\n#include <tmmintrin.h>\n\nint main() {\n  const __m128i *src = 0;\n  __m128i dest;\n  const __m128i shuffle_mask = _mm_load_si128(src);\n  const __m128i pattern = _mm_shuffle_epi8(_mm_loadl_epi64(src), shuffle_mask);\n  _mm_storeu_si128(&dest, pattern);\n  return 0;\n}\" SNAPPY_HAVE_SSSE3)\n\ncheck_cxx_source_compiles(\"\n#include <immintrin.h>\nint main() {\n  return _bzhi_u32(0, 1);\n}\" SNAPPY_HAVE_BMI2)\n```\n\n----------------------------------------\n\nTITLE: Building TaosTools for TDengine 2.x\nDESCRIPTION: Commands to build TaosTools specifically for TDengine version 2.x\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n...\ncmake .. -DTD_VER_COMPATIBLE=2.0.0.0\nmake\n```\n\n----------------------------------------\n\nTITLE: UDF Python Error Log\nDESCRIPTION: Python UDF error log output showing the custom exception message when incorrect parameters are provided. The log includes the error message, location, and context for debugging.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n2023-05-24 23:21:06.790 ERROR [1666188] [doPyUdfScalarProc@507] call pyUdfScalar proc function. context 0x7faade26d180. error: Exception: require 1 parameter but given 2\n\nAt:\n  /var/lib/taos//.udf/myfun_3_1884e1281d9.py(12): process\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Addition\nDESCRIPTION: Adds the test subdirectory only if BUILD_TEST is enabled, allowing optional test compilation\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scheduler/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_TEST})\n        ADD_SUBDIRECTORY(test)\nendif(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Configuring VNode Static Library in CMake\nDESCRIPTION: Sets up the vnode static library with platform-specific compile options for Darwin (macOS) systems and defines the source files from multiple modules (vnd, meta, sma, tsdb, tq).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(src/tqCommon)\nadd_library(vnode STATIC \"\")\n\nif(${TD_DARWIN})\n    target_compile_options(vnode PRIVATE -Wno-error=single-bit-bitfield-constant-conversion)\nendif(${TD_DARWIN})\n\nset(\n    VNODE_SOURCE_FILES\n    \"src/vnd/vnodeOpen.c\"\n    \"src/vnd/vnodeBufPool.c\"\n    \"src/vnd/vnodeCfg.c\"\n    \"src/vnd/vnodeCommit.c\"\n    \"src/vnd/vnodeQuery.c\"\n    \"src/vnd/vnodeModule.c\"\n    \"src/vnd/vnodeSvr.c\"\n    \"src/vnd/vnodeSync.c\"\n    \"src/vnd/vnodeSnapshot.c\"\n    \"src/vnd/vnodeRetention.c\"\n    \"src/vnd/vnodeInitApi.c\"\n    \"src/vnd/vnodeAsync.c\"\n    \"src/vnd/vnodeHash.c\"\n\n    # meta\n    \"src/meta/metaOpen.c\"\n    \"src/meta/metaTable.c\"\n    \"src/meta/metaSma.c\"\n    \"src/meta/metaQuery.c\"\n    \"src/meta/metaCommit.c\"\n    \"src/meta/metaEntry.c\"\n    \"src/meta/metaSnapshot.c\"\n    \"src/meta/metaCache.c\"\n    \"src/meta/metaTtl.c\"\n    \"src/meta/metaEntry2.c\"\n    \"src/meta/metaTable2.c\"\n\n    # sma\n    \"src/sma/smaEnv.c\"\n    \"src/sma/smaUtil.c\"\n    \"src/sma/smaOpen.c\"\n    \"src/sma/smaCommit.c\"\n    \"src/sma/smaRollup.c\"\n    \"src/sma/smaSnapshot.c\"\n    \"src/sma/smaTimeRange.c\"\n\n    # # tsdb\n    # \"src/tsdb/tsdbCommit.c\"\n    # \"src/tsdb/tsdbFile.c\"\n    # \"src/tsdb/tsdbFS.c\"\n    # \"src/tsdb/tsdbOpen.c\"\n    # \"src/tsdb/tsdbMemTable.c\"\n    # \"src/tsdb/tsdbRead.c\"\n    # \"src/tsdb/tsdbCache.c\"\n    # \"src/tsdb/tsdbWrite.c\"\n    # \"src/tsdb/tsdbReaderWriter.c\"\n    # \"src/tsdb/tsdbUtil.c\"\n    # \"src/tsdb/tsdbSnapshot.c\"\n    # \"src/tsdb/tsdbCacheRead.c\"\n    # \"src/tsdb/tsdbRetention.c\"\n    # \"src/tsdb/tsdbDiskData.c\"\n    # \"src/tsdb/tsdbMergeTree.c\"\n    # \"src/tsdb/tsdbDataIter.c\"\n\n    # tq\n    \"src/tq/tq.c\"\n    \"src/tq/tqUtil.c\"\n    \"src/tq/tqScan.c\"\n    \"src/tq/tqMeta.c\"\n    \"src/tq/tqRead.c\"\n    \"src/tq/tqOffset.c\"\n    \"src/tq/tqPush.c\"\n    \"src/tq/tqSink.c\"\n    \"src/tq/tqStreamTask.c\"\n    \"src/tq/tqSnapshot.c\"\n    \"src/tq/tqStreamStateSnap.c\"\n    \"src/tq/tqStreamTaskSnap.c\"\n    \"src/tq/tqStreamNotify.c\"\n)\n\naux_source_directory(\"src/tsdb/\" TSDB_SOURCE_FILES)\nlist(\n    APPEND\n    VNODE_SOURCE_FILES\n    ${TSDB_SOURCE_FILES}\n)\n\ntarget_sources(\n    vnode\n    PRIVATE\n    ${VNODE_SOURCE_FILES}\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Row in TDengine\nDESCRIPTION: This snippet selects the last row of data from column 'c1'. It is useful for getting the most recent entry in the dataset.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/query-error-sqls.txt#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect LAST_ROW(c1) ;\n```\n\n----------------------------------------\n\nTITLE: Extracting TDgpt Package\nDESCRIPTION: Command to extract the downloaded TDgpt package for local installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntar -zxvf TDengine-TDgpt-<version>-Linux-x64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: K-Sigma Anomaly Detection in SQL\nDESCRIPTION: Identifies anomalies based on standard deviations from the mean, with configurable k-value to define deviation threshold\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/06-anomaly-detection/02-statistics-approach.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT _WSTART, COUNT(*)\nFROM foo\nANOMALY_WINDOW(foo.i32, \"algo=ksigma,k=2\")\n```\n\n----------------------------------------\n\nTITLE: Enabling and Executing GoogleTest-based Tests with CMake\nDESCRIPTION: Enables testing capabilities in CMake and sets up the execution of the 'tqTest' test. This command defines test execution through the CMake testing framework, specifically running 'tqTest'. It requires the test executable to be previously built and linked...\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/vnode/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n\nadd_test(\n        NAME tq_test\n        COMMAND tqTest\n)\n```\n\n----------------------------------------\n\nTITLE: Querying with the custom anomaly detection algorithm in SQL\nDESCRIPTION: This SQL code snippet demonstrates how to invoke the custom anomaly detection algorithm (`myad`) within a TDengine query.  It uses the `ANOMALY_WINDOW` function, specifying the column (`col`) to analyze and the algorithm to use (`algo=myad`). This assumes the algorithm has been successfully registered with TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/03-ad.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n--- 对 col 列进行异常检测，通过指定 algo 参数为 myad 来调用新添加的异常检测类\nSELECT COUNT(*) FROM foo ANOMALY_WINDOW(col, 'algo=myad')\n```\n\n----------------------------------------\n\nTITLE: Executable Creation and Test Addition (tdbPageFlushTest)\nDESCRIPTION: This CMake snippet creates an executable named 'tdbPageFlushTest' and links it against the 'tdb' and 'gtest_main' libraries. It also adds a test named 'tdbPageFlushTest' that executes the 'tdbPageFlushTest' executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tdbPageFlushTest \"tdbPageFlushTest.cpp\")\ntarget_link_libraries(tdbPageFlushTest tdb gtest_main)\nadd_test(\n    NAME tdbPageFlushTest\n    COMMAND tdbPageFlushTest\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Sync Test Executables in CMake\nDESCRIPTION: Links the sync test library and Google Test main library to various sync test executables. This ensures each test has access to the necessary dependencies.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(syncTest\n    sync_test_lib\n    gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Adding pip binary path to environment\nDESCRIPTION: Bash command to add the local pip binary path to PATH environment variable in bash profile.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/tdgpt/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:~/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spring JDBC Template Application\nDESCRIPTION: These shell commands demonstrate the process of building the Spring JDBC Template project using Maven and executing the packaged JAR for testing. The commands include cleaning previous builds, packaging the application into a JAR file, and then running that JAR. Ensure that Maven is correctly set up and that you are in the proper directory before executing these commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/examples/JDBC/SpringJdbcTemplate/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\njava -jar target/SpringJdbcTemplate-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Options for Darwin\nDESCRIPTION: This snippet adds conditional compilation options for the mgmt_snode library that only apply when compiling on Darwin OS. Specifically, it suppresses deprecated non-prototype warnings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_snode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${TD_DARWIN})\n    target_compile_options(mgmt_snode PRIVATE -Wno-error=deprecated-non-prototype)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in Docusaurus\nDESCRIPTION: This snippet imports the 'DocCardList' component and the 'useCurrentSidebarCategory' hook from Docusaurus to display documentation cards based on the current sidebar category.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Defining Source Directory and Adding Executable\nDESCRIPTION: Defines the auxiliary source directory for the smaTest project and creates the smaTest executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/sma/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(. MNODE_SMA_TEST_SRC)\nadd_executable(smaTest ${MNODE_SMA_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Running OpenResty Sample\nDESCRIPTION: Start OpenResty server and test the endpoint using curl. This process demonstrates the setup required to integrate TDengine with OpenResty for API access.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/lua/README.md#2025-04-16_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd ..\ncd OpenResty\nsudo openresty -p .\ncurl http://127.0.0.1:7000/api/test\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Test Source Directory\nDESCRIPTION: Collects source files from current directory for database test executable compilation\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/db/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. MNODE_DB_TEST_SRC)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Fuzzing Targets in CMake\nDESCRIPTION: Defines targets for fuzzing Snappy's compression and decompression functionality if fuzzing is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(SNAPPY_FUZZING_BUILD)\n  add_executable(snappy_compress_fuzzer \"\")\n  target_sources(snappy_compress_fuzzer\n    PRIVATE \"snappy_compress_fuzzer.cc\"\n  )\n  target_link_libraries(snappy_compress_fuzzer snappy)\n  set_target_properties(snappy_compress_fuzzer\n    PROPERTIES LINK_FLAGS \"-fsanitize=fuzzer\"\n  )\n\n  add_executable(snappy_uncompress_fuzzer \"\")\n  target_sources(snappy_uncompress_fuzzer\n    PRIVATE \"snappy_uncompress_fuzzer.cc\"\n  )\n  target_link_libraries(snappy_uncompress_fuzzer snappy)\n  set_target_properties(snappy_uncompress_fuzzer\n    PROPERTIES LINK_FLAGS \"-fsanitize=fuzzer\"\n  )\nendif(SNAPPY_FUZZING_BUILD)\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing in CMake\nDESCRIPTION: This snippet enables testing for the project using CMake's testing capabilities.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tfs/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Log Buffer Management in TDengine\nDESCRIPTION: Handles log buffer operations such as resetting, validating, and rollback. Ensures that logging is consistent and can be reverted if needed while maintaining performance.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/ci/func.txt#2025-04-16_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n(void)syncLogBufferReset\n(void)syncLogBufferValidate\n(void)syncLogBufferRollback\n```\n\n----------------------------------------\n\nTITLE: Inserting Schemaless Raw Data with TTL in TDengine (C)\nDESCRIPTION: Performs a schemaless batch insert operation, writing row protocol text data into TDengine.  Similar to `ws_schemaless_insert_raw`, but also accepts a `ttl` parameter to control the table's time-to-live. Returns a pointer to a `WS_RES` structure or NULL on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n\"WS_RES *ws_schemaless_insert_raw_ttl(WS_TAOS *taos,\n                                     const char *lines,\n                                     int len,\n                                     int32_t *totalRows,\n                                     int protocol,\n                                     int precision,\n                                     int ttl)\"\n\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with taosBenchmark\nDESCRIPTION: Command to generate sample time-series data for testing and demonstration purposes in TDengine\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/05-basic/03-query.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntaosBenchmark --start-timestamp=1600000000000 --tables=100 --records=10000000 --time-step=10000\n```\n\n----------------------------------------\n\nTITLE: Defining and linking taosbsearchTest executable\nDESCRIPTION: This creates an executable named `taosbsearchTest` from `taosbsearchTest.cpp` and links it against the `os`, `util`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `taosbsearchTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n\"# taosbsearchTest\nadd_executable(taosbsearchTest \\\"taosbsearchTest.cpp\\\")\ntarget_link_libraries(taosbsearchTest os util gtest_main)\nadd_test(\n    NAME taosbsearchTest\n    COMMAND taosbsearchTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Writing Parameters\nDESCRIPTION: Configuration parameters table for writing-related settings in TDengine client driver\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/02-taosc.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|Parameter Name|Supported Version|Dynamic Modification|Description|\n|----------------------|----------|--------------------|-------------|\n| smlChildTableName               |                   |Supported, effective immediately  | Key for custom child table name in schemaless, no default value |\n| smlAutoChildTableNameDelimiter  |                   |Supported, effective immediately  | Delimiter between schemaless tags, concatenated as the child table name, no default value |\n| smlTagName                      |                   |Supported, effective immediately  | Default tag name when schemaless tag is empty, default value \"_tag_null\" |\n| smlTsDefaultName                |                   |Supported, effective immediately  | Configuration for setting the time column name in schemaless auto table creation, default value \"_ts\" |\n| smlDot2Underline                |                   |Supported, effective immediately  | Converts dots in supertable names to underscores in schemaless |\n| maxInsertBatchRows              |                   |Supported, effective immediately  | Internal parameter, maximum number of rows per batch insert |\n```\n\n----------------------------------------\n\nTITLE: Executable Creation (tdbExOVFLTest)\nDESCRIPTION: This CMake snippet creates an executable named 'tdbExOVFLTest' and links it against the 'tdb' and 'gtest_main' libraries. This executable is designed for overflow pages testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tdbExOVFLTest \"tdbExOVFLTest.cpp\")\ntarget_link_libraries(tdbExOVFLTest tdb gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for DNode Module in TDengine\nDESCRIPTION: Configures the private include directories for the dnode library, pointing to the inc directory within the current source directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/node_mgmt/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  dnode\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Array Data in TDengine\nDESCRIPTION: Example of JSON array format data that can be automatically parsed to extract fields. This demonstrates how TDengine handles multiple data points in a single JSON array structure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/05-data-in/index.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\"groupid\": 170001, \"voltage\": \"221V\", \"current\": 12.3, \"ts\": \"2023-12-18T22:12:00\", \"inuse\": true, \"location\": \"beijing.chaoyang.datun\"},\n{\"groupid\": 170001, \"voltage\": \"220V\", \"current\": 12.2, \"ts\": \"2023-12-18T22:12:02\", \"inuse\": true, \"location\": \"beijing.chaoyang.datun\"},\n{\"groupid\": 170001, \"voltage\": \"216V\", \"current\": 12.5, \"ts\": \"2023-12-18T22:12:04\", \"inuse\": false, \"location\": \"beijing.chaoyang.datun\"}]\n```\n\n----------------------------------------\n\nTITLE: Getter Methods for Scalar Avro Values in C\nDESCRIPTION: Declares getter methods for retrieving the contents of scalar Avro values, including primitive types, enums, and fixed values.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <stdint.h>\n#include <stdlib.h>\n#include <avro.h>\n\nint avro_value_get_boolean(const avro_value_t *value, int *dest);\nint avro_value_get_bytes(const avro_value_t *value,\n                         const void **dest, size_t *size);\nint avro_value_get_double(const avro_value_t *value, double *dest);\nint avro_value_get_float(const avro_value_t *value, float *dest);\nint avro_value_get_int(const avro_value_t *value, int32_t *dest);\nint avro_value_get_long(const avro_value_t *value, int64_t *dest);\nint avro_value_get_null(const avro_value_t *value);\nint avro_value_get_string(const avro_value_t *value,\n                          const char **dest, size_t *size);\nint avro_value_get_enum(const avro_value_t *value, int *dest);\nint avro_value_get_fixed(const avro_value_t *value,\n                         const void **dest, size_t *size);\n```\n\n----------------------------------------\n\nTITLE: Defining and linking decompressTest executable\nDESCRIPTION: This creates an executable named `decompressTest` from `decompressTest.cpp` and links it against the `os`, `util`, `common`, and `gtest_main` libraries. An associated test is then added, which will execute the compiled `decompressTest` executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n\"add_executable(decompressTest \\\"decompressTest.cpp\\\")\ntarget_link_libraries(decompressTest os util common gtest_main)\nadd_test(\n    NAME decompressTest\n    COMMAND decompressTest\n)\"\n```\n\n----------------------------------------\n\nTITLE: Splitting Virtual Group in TDengine\nDESCRIPTION: This snippet shows the SQL syntax for splitting a virtual group (vgroup) in TDengine. The `split vgroup` command divides a vgroup into two, distributing the load across multiple vgroups. This is helpful when a vgroup's CPU or disk usage becomes too high due to a large number of sub-tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/04-maintenance.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n\"split vgroup <vgroup_id>\"\n```\n\n----------------------------------------\n\nTITLE: Linking smaTest against sut Library\nDESCRIPTION: Links the smaTest executable with the sut library, making the sut library's functions and symbols available to smaTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/sma/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n    smaTest\n    PUBLIC sut\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: These CMake commands add specified subdirectories to the current CMake project. Each subdirectory likely contains its own CMakeLists.txt file, defining how it should be built and linked.  This approach promotes modularity and organization within the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(mnode)\nadd_subdirectory(vnode)\nadd_subdirectory(qnode)\nadd_subdirectory(snode)\nadd_subdirectory(mgmt)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding Test Executable in CMake\nDESCRIPTION: This snippet provides the CMake script for configuring the test executable 'tcsTest' by setting source directories, including necessary header files, linking libraries, and enabling testing features. The snippet checks if the build is targeting Linux before executing these commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tcs/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TD_LINUX)\n    aux_source_directory(. TCS_TEST_SRC)\n\n    add_executable(tcsTest ${TCS_TEST_SRC})\n    target_include_directories(tcsTest\n        PUBLIC\n        \"${TD_SOURCE_DIR}/include/libs/tcs\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n    )\n\n    target_link_libraries(tcsTest\n        tcs\n        gtest_main\n    )\n    enable_testing()\n    add_test(\n        NAME tcs_test\n        COMMAND tcsTest\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying Nonexistent Time Range During DST Start (SQL)\nDESCRIPTION: This SQL query attempts to select timestamps between 2:00 AM and 2:59 AM on the day DST starts, which is a nonexistent time range. The result shows undefined behavior where the nonexistent timestamp is converted to -1000.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/27-train-faq/02-dst.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ts FROM t1 WHERE ts BETWEEN '2024-03-31 02:00:00' AND '2024-03-31 02:59:59';\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Testing in CMake\nDESCRIPTION: This snippet creates an executable target for running tests, using all source files within the current directory.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tfs/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. TFS_TEST_SRC)\nadd_executable(tfs_test ${TFS_TEST_SRC})\n```\n\n----------------------------------------\n\nTITLE: Image Component Usage in Markdown\nDESCRIPTION: Usage of imported image components within figure elements to display stream processing architecture diagrams with captions.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/09-stream.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<figure>\n<Image img={imgStep01} alt=\"Stream processing architecture\"/>\n<figcaption>Figure 1. Stream processing architecture</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Connection Options Tests\nDESCRIPTION: This snippet creates an executable for testing connection options, linking against required libraries similar to the client tests. This helps validate configurations related to connection handling.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(connectOptionsTest connectOptionsTest.cpp)\nTARGET_LINK_LIBRARIES(\n        connectOptionsTest\n        os util common transport parser catalog scheduler gtest ${TAOS_NATIVE_LIB_STATIC} qcom executor function\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating CRC of Byte Buffer for GZIP in C\nDESCRIPTION: This function calculates the CRC of a given byte buffer. It utilizes the update_crc function with an initial CRC value of 0L to compute the CRC for the entire buffer at once.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1952.txt#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nunsigned long crc(unsigned char *buf, int len)\n{\n  return update_crc(0L, buf, len);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Management Module\nDESCRIPTION: Sets private include directories for the mgmt_mnode library, specifying the include path relative to the current source directory\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_mnode/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n    mgmt_mnode\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: TDengine Monitoring Tables Schema Definition\nDESCRIPTION: Defines the schema structure for TDengine's monitoring tables including field names, data types, tag indicators, and descriptions for tracking SQL requests and performance metrics.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/01-components/01-taosd.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| field       | type      | is_tag | comment                                   |\n| :---------- | :-------- | :------ | :---------------------------------------- |\n| _ts        | TIMESTAMP |         | timestamp                                 |\n| count       | DOUBLE    |         | sql 数量                                  |\n| result      | VARCHAR   | TAG     | sql 的执行结果，取值范围 Success、Failed  |\n| username    | VARCHAR   | TAG     | 执行 sql 的 user name                        |\n| sql_type   | VARCHAR   | TAG     | sql 类型，取值范围 select、insert、delete |\n| cluster_id | VARCHAR   | TAG     | cluster id                                |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| field       | type      | is_tag | comment                                               |\n| :---------- | :-------- | :------ | :---------------------------------------------------- |\n| _ts        | TIMESTAMP |         | timestamp                                             |\n| count       | DOUBLE    |         | sql 数量                                              |\n| result      | VARCHAR   | TAG     | sql 的执行结果，取值范围 Success、Failed              |\n| username    | VARCHAR   | TAG     | 执行 sql 的 user name                                    |\n| duration    | VARCHAR   | TAG     | sql 执行耗时，取值范围 3-10s,10-100s,100-1000s,1000s- |\n| cluster_id | VARCHAR   | TAG     | cluster id                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| field          | type      | is_tag | comment                                               |\n| :------------- | :-------- | :------ | :---------------------------------------------------- |\n| start_ts      | TIMESTAMP |         | sql 开始执行的客户端时间，单位 ms，主键                     |\n| request_id    | UINT64_T  |         | sql 请求的 request id，为 hash 生产的随机值              |\n| query_time    | INT32_T   |         | sql 执行耗时，单位 ms                                   |\n| code           | INT32_T   |         | sql 执行返回码，0 表示成功                               |\n| error_info    | VARCHAR   |         | sql 执行失败时，记录的错误信息                           |\n| type           | INT8_T    |         | sql 语句的类型（1：查询，2：写入，4：其他）                  |\n| rows_num      | INT64_T   |         | sql 执行结果的记录数目                                   |\n| sql            | VARCHAR   |         | sql 语句的字符串                                       |\n| process_name  | VARCHAR   |         | 进程名称                                              |\n| process_id    | VARCHAR   |         | 进程 id                                              |\n| db             | VARCHAR   | TAG     | 执行 sql 所属数据库                                    |\n| user           | VARCHAR   | TAG     | 执行 sql 语句的用户                                    |\n| ip             | VARCHAR   | TAG     | 记录执行 sql 语句的 client 的 ip 地址                   |\n| cluster_id    | VARCHAR   | TAG     | cluster id                                           |\n```\n\n----------------------------------------\n\nTITLE: TDengine 2.x Response example\nDESCRIPTION: This is an example of the JSON response when querying information from a TDengine 2.x database.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/60-rest-api.mdx#2025-04-16_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"status\": \"succ\",\n  \"head\": [\n    \"name\",\n    \"created_time\",\n    \"ntables\",\n    \"vgroups\",\n    \"replica\",\n    \"quorum\",\n    \"days\",\n    \"keep1,keep2,keep(D)\",\n    \"cache(MB)\",\n    \"blocks\",\n    \"minrows\",\n    \"maxrows\",\n    \"wallevel\",\n    \"fsync\",\n    \"comp\",\n    \"precision\",\n    \"status\"\n  ],\n  \"data\": [\n    [\n      \"log\",\n      \"2020-09-02 17:23:00.039\",\n      4,\n      1,\n      1,\n      1,\n      10,\n      \"30,30,30\",\n      1,\n      3,\n      100,\n      4096,\n      1,\n      3000,\n      2,\n      \"us\",\n      \"ready\"\n    ]\n  ],\n  \"rows\": 1\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n\"data\": [\n        [\n            \"information_schema\",\n            16,\n            \"ready\"\n        ],\n        [\n            \"performance_schema\",\n            9,\n            \"ready\"\n        ]\n    ],\n```\n\n----------------------------------------\n\nTITLE: Verify TDengine HTTP Service in Docker\nDESCRIPTION: This snippet demonstrates how to verify the TDengine HTTP service running inside a Docker container using curl. It sends a show databases SQL query to the /rest/sql endpoint, using the root user with the default password taosdata for authentication. A successful response indicates that the HTTP service is running correctly.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"curl -u root:taosdata -d \\\"show databases\\\" localhost:6041/rest/sql\"\n```\n\n----------------------------------------\n\nTITLE: Windows Dependencies Configuration\nDESCRIPTION: Sets up external dependencies for Windows builds using NMake and JOM. Includes special patches and configurations for Windows-specific compatibility issues.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(\n    tools-zlib\n    PREFIX ${CMAKE_CURRENT_BINARY_DIR}/tools-zlib\n    SOURCE_DIR ${PROJECT_SOURCE_DIR}/deps/zlib-1.2.13\n    CONFIGURE_COMMAND cmake -G \"NMake Makefiles JOM\" -DCMAKE_MAKE_PROGRAM=jom -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}/build/ -S ${PROJECT_SOURCE_DIR}/deps/zlib-1.2.13\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Command Test Executable\nDESCRIPTION: Generates an executable named commandTest using the collected source files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(commandTest ${SOURCE_LIST})\n```\n\n----------------------------------------\n\nTITLE: Compiling with pkg-config\nDESCRIPTION: Command for compiling using pkg-config to handle flags and library linkage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/gettingstarted.rst#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncc -o prog prog.c `pkg-config --cflags --libs jansson`\n```\n\n----------------------------------------\n\nTITLE: Installing taospy connector\nDESCRIPTION: These commands install the `taospy` connector for TDengine, including options for native and REST connections as well as an optional installation for WebSocket connections. The `taospy` package provides access to TDengine databases via Python, while `taos-ws-py` enables WebSocket connectivity.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/30-python.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"# 原生连接和 REST 连接\npip3 install taospy\n\n# WebSocket 连接，可选装\npip3 install taos-ws-py\"\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet links the necessary public libraries to the test executable, specifically the 'tfs' library and the Google Test main library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tfs/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(\n  tfs_test\n  PUBLIC tfs\n  PUBLIC gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Installing TDengine on macOS\nDESCRIPTION: Installs TDengine after successful build using make install with sudo privileges on macOS.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 and Tencent COS Storage for TDengine\nDESCRIPTION: Sets up cloud object storage integration with either S3 or Tencent COS (Cloud Object Storage). For COS, it configures the Tencent COS C SDK with appropriate include directories and disables tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_S3})\n    INCLUDE_DIRECTORIES($ENV{HOME}/.cos-local.2/include)\n    MESSAGE(\"build with s3: ${BUILD_WITH_S3}\")\n\n# cos\nelseif(${BUILD_WITH_COS})\n    if(${TD_LINUX})\n        set(CMAKE_PREFIX_PATH $ENV{HOME}/.cos-local.1)\n\n        # ADD_DEFINITIONS(-DMINIXML_LIBRARY=${CMAKE_BINARY_DIR}/build/lib/libxml.a)\n        option(ENABLE_TEST \"Enable the tests\" OFF)\n        INCLUDE_DIRECTORIES($ENV{HOME}/.cos-local.1/include)\n\n        # MESSAGE(\"$ENV{HOME}/.cos-local.1/include\")\n        set(CMAKE_BUILD_TYPE Release)\n        set(ORIG_CMAKE_PROJECT_NAME ${CMAKE_PROJECT_NAME})\n        set(CMAKE_PROJECT_NAME cos_c_sdk)\n\n        add_subdirectory(cos-c-sdk-v5 EXCLUDE_FROM_ALL)\n        target_include_directories(\n            cos_c_sdk\n            PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/cos-c-sdk-v5/cos_c_sdk>\n        )\n\n        set(CMAKE_PROJECT_NAME ${ORIG_CMAKE_PROJECT_NAME})\n    else()\n    endif(${TD_LINUX})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing TDengine Project with CMake\nDESCRIPTION: Defines the project name, version, and description for TDengine. Sets the minimum required CMake version to 3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nproject(\n  TDengine\n  VERSION 3.0\n  DESCRIPTION\n    \"An open-source big data platform designed and optimized for the Internet of Things(IOT)\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering CTest Configuration\nDESCRIPTION: Adds the database test to the CTest testing framework for automated test execution\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/db/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\\n    NAME dbTest\\n    COMMAND dbTest\\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Quickstop Test Execution\nDESCRIPTION: Adds a test configuration that changes to the examples directory before executing the quickstop program.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/examples/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(quickstop\n    ${CMAKE_COMMAND} -E chdir ${AvroC_SOURCE_DIR}/examples\n    ${exec_name}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting TDengine Directory Structure\nDESCRIPTION: Configures directory paths for community, source, support, and contrib directories when enterprise directory is not defined. Includes necessary CMake configuration files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED TD_ENTERPRISE_DIR)\n  set(TD_COMMUNITY_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n  set(TD_SOURCE_DIR ${TD_COMMUNITY_DIR})\n  set(TD_SUPPORT_DIR \"${TD_SOURCE_DIR}/cmake\")\n  set(TD_CONTRIB_DIR \"${TD_SOURCE_DIR}/contrib\")\n\n  message(STATUS \"Community directory: \" ${TD_COMMUNITY_DIR})\n  message(STATUS \"Source directory: \" ${TD_SOURCE_DIR})\n  message(STATUS \"Support directory: \" ${TD_SUPPORT_DIR})\n  message(STATUS \"Contrib directory: \" ${TD_CONTRIB_DIR})\n\n  include(cmake/preinclude.cmake)\n  include(cmake/cmake.platform)\n  include(cmake/cmake.options)\n  include(cmake/check_env.cmake)\n  include(cmake/cmake.define)\n  include(cmake/cmake.version)\n  include(cmake/external.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring BDB Test Executable with CMake\nDESCRIPTION: Creates and configures a test executable called 'bdbTest' by specifying its source files and linking it against the BDB library. The configuration uses modern CMake syntax with separate target_sources and target_link_libraries commands.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/bdb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(bdbTest \"\")\ntarget_sources(\n    bdbTest PRIVATE\n    \"bdbTest.c\"\n)\n\ntarget_link_libraries(bdbTest bdb)\n```\n\n----------------------------------------\n\nTITLE: Test Definition: Join Query Test Cases\nDESCRIPTION: Test case identifier and metadata for join query testing in TDengine\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/test_new/case_list_docs/query/join.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n::: query.join.test_join\n```\n\n----------------------------------------\n\nTITLE: Run TDengine in Docker with Host Network\nDESCRIPTION: This snippet shows how to run TDengine in a Docker container using the host network mode. By using --network host, the container shares the host's network namespace, allowing it to use the host's IP address and ports directly.  This allows the TDengine CLI to connect directly to the TDengine service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/03-deployment.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"docker run -d --name tdengine --network host tdengine/tdengine\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Remote Storage with TDengine\nDESCRIPTION: Example configuration for setting up remote_write and remote_read in prometheus.yml to connect with TDengine database. Includes basic authentication settings and timeout configurations for the remote connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_prometheus.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nremote_write:\n  - url: \"http://localhost:6041/prometheus/v1/remote_write/prometheus_data\"\n    basic_auth:\n      username: root\n      password: taosdata\n\nremote_read:\n  - url: \"http://localhost:6041/prometheus/v1/remote_read/prometheus_data\"\n    basic_auth:\n      username: root\n      password: taosdata\n    remote_timeout: 10s\n    read_recent: true\n```\n\n----------------------------------------\n\nTITLE: Building Scheduler Unit Test\nDESCRIPTION: This CMake code defines the build process for the scheduler unit test. It sets the C++ standard to 11, adds an executable named 'schedulerTest', links it with necessary libraries including gtest, and defines include directories. The build is skipped on Darwin systems (macOS).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/scheduler/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"build scheduler unit test\")\n\nIF(NOT TD_DARWIN)\n        # GoogleTest requires at least C++11\n        SET(CMAKE_CXX_STANDARD 11)\n        AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n        ADD_EXECUTABLE(schedulerTest ${SOURCE_LIST})\n\n        IF(TD_GRANT)\n                TARGET_LINK_LIBRARIES(\n                        schedulerTest\n                        PUBLIC os util common catalog transport gtest qcom ${TAOS_NATIVE_LIB_STATIC} planner scheduler grant\n                )\n        ELSE()\n                TARGET_LINK_LIBRARIES(\n                        schedulerTest\n                        PUBLIC os util common catalog transport gtest qcom ${TAOS_NATIVE_LIB_STATIC} planner scheduler\n                )\n        ENDIF()\n\n        TARGET_INCLUDE_DIRECTORIES(\n                schedulerTest\n                PUBLIC \"${TD_SOURCE_DIR}/include/libs/scheduler/\"\n                PRIVATE \"${TD_SOURCE_DIR}/source/libs/scheduler/inc\"\n        )\n        add_test(\n                NAME schedulerTest\n                COMMAND schedulerTest\n        )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings and Subdirectories\nDESCRIPTION: Sets global build properties, enables testing if required, and adds various subdirectories to the build. Configures the client API interface library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY GLOBAL_DEPENDS_NO_CYCLES OFF)\nadd_subdirectory(contrib)\n\nif(${BUILD_TEST})\n  include(CTest)\n  enable_testing()\nendif(${BUILD_TEST})\n\nadd_library(api INTERFACE)\ntarget_include_directories(api INTERFACE \"include/client\")\n\nadd_subdirectory(contrib/TSZ)\nadd_subdirectory(source)\nadd_subdirectory(tools)\nadd_subdirectory(utils)\nadd_subdirectory(tests)\nadd_subdirectory(examples/c)\nadd_subdirectory(docs/doxgen)\n\ninclude(cmake/cmake.install)\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment and Core Libraries in CMake\nDESCRIPTION: Sets up the test environment with GoogleTest and configures core libraries like cJSON for the TDengine build process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# googletest\nif(${BUILD_TEST})\n    set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    add_subdirectory(googletest EXCLUDE_FROM_ALL)\n    target_include_directories(\n        gtest\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/cpp-stub/src>\n    )\n\n    if(${TD_WINDOWS})\n        target_include_directories(\n            gtest\n            PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/cpp-stub/src_win>\n        )\n    endif(${TD_WINDOWS})\n\n    if(${TD_LINUX})\n        target_include_directories(\n            gtest\n            PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/cpp-stub/src_linux>\n        )\n    endif(${TD_LINUX})\n\n    if(${TD_DARWIN})\n        target_include_directories(\n            gtest\n            PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/cpp-stub/src_darwin>\n        )\n    endif(${TD_DARWIN})\nendif(${BUILD_TEST})\n\n# cJson\nset(CMAKE_PROJECT_INCLUDE_BEFORE \"${TD_SUPPORT_DIR}/EnableCMP0048.txt.in\")\noption(ENABLE_CJSON_TEST \"Enable building cJSON test\" OFF)\noption(CJSON_OVERRIDE_BUILD_SHARED_LIBS \"Override BUILD_SHARED_LIBS with CJSON_BUILD_SHARED_LIBS\" ON)\noption(CJSON_BUILD_SHARED_LIBS \"Overrides BUILD_SHARED_LIBS if CJSON_OVERRIDE_BUILD_SHARED_LIBS is enabled\" OFF)\nadd_subdirectory(cJson EXCLUDE_FROM_ALL)\ntarget_include_directories(\n    cjson\n    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/cJson>\n)\nunset(CMAKE_PROJECT_INCLUDE_BEFORE)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Cryptography Library\nDESCRIPTION: Generates a static library named 'crypt' using the collected source files\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/crypt/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(crypt STATIC ${CRYPT_SRC})\n```\n\n----------------------------------------\n\nTITLE: Extracting Major, Minor, and Patch Versions from Avro Version Number\nDESCRIPTION: Uses regex to extract major, minor, and patch version numbers from the Avro version string on Unix systems.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (UNIX)\n    string(REGEX REPLACE \"([0-9]+)\\..*\"\n        \"\\\\1\"\n        AVRO_MAJOR_VERSION\n        ${AVRO_VERSION}\n    )\n    string(REGEX REPLACE \".*\\.([0-9]+)\\..*\"\n        \"\\\\1\"\n        AVRO_MINOR_VERSION\n        ${AVRO_VERSION}\n    )\n    string(REGEX REPLACE \".*\\..*\\.([0-9]+).*\"\n        \"\\\\1\"\n        AVRO_PATCH_VERSION\n        ${AVRO_VERSION}\n    )\n    string(REGEX REPLACE \".*\\..*\\.[0-9]+(.*)\"\n        \"\\\\1\"\n        AVRO_VERSION_EXTENSION\n        ${AVRO_VERSION}\n    )\nendif(UNIX)\n```\n\n----------------------------------------\n\nTITLE: Using GREATEST Function in SQL\nDESCRIPTION: The GREATEST function returns the largest value from the list of expressions. It requires at least two arguments and can handle numeric and string types. The comparison and return type depend on the input types and configuration. Available from version 3.3.6.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nGREATEST(expr1, expr2[, expr]...)\n```\n\n----------------------------------------\n\nTITLE: Handling TDengine Errors in Go\nDESCRIPTION: This code snippet demonstrates how to handle TDengine-specific errors in Go using the driver-go library. It checks if an error is a `TaosError` and, if so, prints the error code and message. Otherwise, it prints the generic error message.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/20-go.mdx#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// import \"github.com/taosdata/driver-go/v3/errors\"\n    if err != nil {\n        tError, is := err.(*errors.TaosError)\n        if is {\n            fmt.Println(\"errorCode:\", int(tError.Code))\n            fmt.Println(\"errorMessage:\", tError.ErrStr)\n        } else {\n            fmt.Println(err.Error())\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Memory Allocation Implementation in C\nDESCRIPTION: Example of implementing secure memory allocation with zeroing on free for sensitive data\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nstatic void *secure_malloc(size_t size)\n{\n    /* Store the memory area size in the beginning of the block */\n    void *ptr = malloc(size + 8);\n    *((size_t *)ptr) = size;\n    return ptr + 8;\n}\n\nstatic void secure_free(void *ptr)\n{\n    size_t size;\n\n    ptr -= 8;\n    size = *((size_t *)ptr);\n\n    guaranteed_memset(ptr, 0, size + 8);\n    free(ptr);\n}\n\nint main()\n{\n    json_set_alloc_funcs(secure_malloc, secure_free);\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Adding Executable\nDESCRIPTION: This snippet sets the C++ standard to 11, retrieves source files in the current directory, and creates an executable named 'plannerTest'. It also includes mock catalog cpp files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nMESSAGE(STATUS \"build planner unit test\")\n\nIF(NOT TD_DARWIN)\n    # GoogleTest requires at least C++11\n    SET(CMAKE_CXX_STANDARD 11)\n    AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n    ADD_EXECUTABLE(plannerTest\n        ${SOURCE_LIST}\n        \"${SOURCE_LIST}/../../../parser/test/mockCatalog.cpp\"\n        \"${SOURCE_LIST}/../../../parser/test/mockCatalogService.cpp\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Curl Connection Refused Error\nDESCRIPTION: This snippet represents the error message received when `curl` fails to connect to the anode service.  It signifies that the service is either not running or is not accessible on the specified port, indicating a potential connectivity problem.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/11-faq.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl: (7) Failed to connect to 127.0.0.1 port 6090: Connection refused\n```\n\n----------------------------------------\n\nTITLE: Including Single Node Subdirectory in TDengine CMake Configuration\nDESCRIPTION: This CMake directive adds the 'single_node' subdirectory to the build process. It indicates that there are additional CMake files or source code in the 'single_node' directory that should be included in the project compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/traft/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(single_node)\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Calling Forecast Algorithm\nDESCRIPTION: Shows how to invoke a custom forecast algorithm from a TDengine SQL query using the `FORECAST` function. The `algo` parameter specifies the name of the algorithm to use, which in this case is 'myfc'.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/09-dev/02-algo/02-forecast.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n--- 对 col 列进行异常检测，通过指定 algo 参数为 myfc 来调用新添加的预测类\nSELECT  _flow, _fhigh, _frowts, FORECAST(col_name, \"algo=myfc\")\nFROM foo;\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList in MDX for TDengine Visualization Documentation\nDESCRIPTION: This code snippet uses Docusaurus components to dynamically generate a list of documentation cards related to TDengine visualization integration. It imports the DocCardList component and a hook to access the current sidebar category.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/03-visual/index.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: CSV Mapping File Example\nDESCRIPTION: This CSV file provides an example of the expected format for renaming tables using the `-T rename-child-table:map:@./map.csv` option in taosX. Each line contains an original table name and its corresponding new name, separated by a comma.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_15\n\nLANGUAGE: csv\nCODE:\n```\n\"name1,newname1\nname2,newname2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional OS Unit Tests\nDESCRIPTION: This snippet defines additional executables for OS tests that are not conditional on the platform. It similarly sets their dependencies and registers them to be executed as tests.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/os/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(osMathTests \"osMathTests.cpp\")\ntarget_link_libraries(osMathTests os util gtest_main)\nadd_test(\n    NAME osMathTests\n    COMMAND osMathTests\n)\n\nadd_executable(osSemaphoreTests \"osSemaphoreTests.cpp\")\ntarget_link_libraries(osSemaphoreTests os util gtest_main)\nadd_test(\n    NAME osSemaphoreTests\n    COMMAND osSemaphoreTests\n)\n\nadd_executable(osSleepTests \"osSleepTests.cpp\")\ntarget_link_libraries(osSleepTests os util gtest_main)\nadd_test(\n    NAME osSleepTests\n    COMMAND osSleepTests\n)\n\nif(NOT TD_WINDOWS)\nadd_executable(osStringTests \"osStringTests.cpp\")\ntarget_link_libraries(osStringTests os util gtest_main)\nadd_test(\n    NAME osStringTests\n    COMMAND osStringTests\n)\nendif()\n\nadd_executable(osSystemTests \"osSystemTests.cpp\")\ntarget_link_libraries(osSystemTests os util gtest_main)\nadd_test(\n    NAME osSystemTests\n    COMMAND osSystemTests\n)\n\nadd_executable(osTimeTests \"osTimeTests.cpp\")\ntarget_link_libraries(osTimeTests os util gtest_main)\nadd_test(\n    NAME osTimeTests\n    COMMAND osTimeTests\n)\n```\n\n----------------------------------------\n\nTITLE: Building SUT Static Library with CMake in TDengine\nDESCRIPTION: Configures and builds a static library named 'sut' from source files in the src directory. The configuration includes setting up include paths and linking against the 'dnode' and 'gtest_main' libraries, suggesting this is used for testing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/test/sut/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\naux_source_directory(src DND_SUT_SRC)\nadd_library(sut STATIC STATIC ${DND_SUT_SRC})\ntarget_include_directories(\n    sut\n    PUBLIC \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\n\ntarget_link_libraries(\n    sut dnode gtest_main\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Decimal Library\nDESCRIPTION: This command links the 'decimal' library with other necessary libraries. Specifically, it links against 'os', 'common', and 'wideInteger'.  These linked libraries provide functionalities used by the 'decimal' library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"target_link_libraries(\n    decimal\n    PRIVATE os common wideInteger\n)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories and Dependencies\nDESCRIPTION: Adds subdirectories for deps and src, and sets up dependencies for the taosBenchmark target.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_SUBDIRECTORY(deps)\nADD_SUBDIRECTORY(src)\n\nADD_DEPENDENCIES(taosBenchmark toolscJson)\n```\n\n----------------------------------------\n\nTITLE: Configuring Taosdump Test Build in CMake\nDESCRIPTION: Creates and configures the taosdump test executable with GoogleTest integration. Includes additional source file toolsSys.c and sets up necessary include paths.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nADD_EXECUTABLE(taosdumpTest taosdumpTest.cpp ../src/toolsSys.c)\nTARGET_LINK_LIBRARIES(\n    taosdumpTest\n        PRIVATE gtest \n)\n\ntarget_include_directories(\n    taosdumpTest\n    PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n)\n\nadd_test(\n    NAME taosdumpTest\n    COMMAND taosdumpTest\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Huffman Codes in C\nDESCRIPTION: This algorithm generates Huffman codes as integers, intended to be read from most- to least-significant bit. It takes code lengths as input and produces the corresponding codes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1951.txt#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ncode = 0;\nbl_count[0] = 0;\nfor (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits-1]) << 1;\n    next_code[bits] = code;\n}\n\nfor (n = 0;  n <= max_code; n++) {\n    len = tree[n].Len;\n    if (len != 0) {\n        tree[n].Code = next_code[len];\n        next_code[len]++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring hosts file for TDengine\nDESCRIPTION: This snippet shows how to add an entry to the hosts file to resolve a Fully Qualified Domain Name (FQDN) to an IP address. This is useful if DNS is not configured properly or if you want to override DNS resolution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/_windows_install.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hosts\nCODE:\n```\n\"192.168.1.99 h1.taos.com\"\n```\n\n----------------------------------------\n\nTITLE: TO_UNIXTIMESTAMP Function in TDengine\nDESCRIPTION: The TO_UNIXTIMESTAMP function converts a date/time string to a timestamp. The input string should adhere to ISO8601/RFC3339 standards. The return_timestamp parameter allows the user to specify whether the result should be a BIGINT (0) or a TIMESTAMP (1) type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\n\"TO_UNIXTIMESTAMP(expr [, return_timestamp])\\n\\nreturn_timestamp: {\\n    0\\n  | 1\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Anode in TDengine\nDESCRIPTION: This snippet shows the error message when creating an anode fails because the analysis service cannot be accessed. It indicates a potential issue with the anode service being unavailable or unreachable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/10-faq.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"taos> create anode '127.0.0.1:6090';\n\nDB error: Analysis service can't access[0x80000441] (0.117446s)\"\n```\n\n----------------------------------------\n\nTITLE: TO_JSON Function in TDengine\nDESCRIPTION: The TO_JSON function converts a string literal into a JSON data type within TDengine. The input string must be a valid JSON string, and keys must be string literals. This function applies to tables and super tables, and is supported within nested subqueries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\n\"TO_JSON(str_literal)\"\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet imports and renders a DocCardList component, likely used to display a list of documentation cards. It uses the useCurrentSidebarCategory hook to populate the items prop dynamically.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/index.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet sets the include directories for the project. It adds the directories containing header files for the `util` and `common` modules, using variables `TD_SOURCE_DIR` to locate the correct paths.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/util/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n\"INCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/source/util/inc)\nINCLUDE_DIRECTORIES(${TD_SOURCE_DIR}/include/common)\"\n```\n\n----------------------------------------\n\nTITLE: Executable Creation and Test Addition (tdbUtilTest)\nDESCRIPTION: This CMake snippet creates an executable named 'tdbUtilTest' and links it against the 'tdb' and 'gtest_main' libraries. It also adds a test named 'tdbUtilTest' that executes the 'tdbUtilTest' executable.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/tdb/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tdbUtilTest \"tdbUtilTest.cpp\")\ntarget_link_libraries(tdbUtilTest tdb gtest_main)\nadd_test(\n    NAME tdbUtilTest\n    COMMAND tdbUtilTest\n)\n```\n\n----------------------------------------\n\nTITLE: Using POW Function in SQL\nDESCRIPTION: The POW function returns expr1 raised to the power of expr2. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_15\n\nLANGUAGE: SQL\nCODE:\n```\nPOW(expr1, expr2)\n```\n\n----------------------------------------\n\nTITLE: Configuring taosAdapter TOML Settings\nDESCRIPTION: Configuration settings for taosAdapter to enable TCollector data reception. Includes TCP connection settings, database configurations, and authentication details.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_tcollector.mdx#2025-04-16_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[opentsdb_telnet]\nenable = true\nmaxTCPConnections = 250\ntcpKeepAlive = false\ndbs = [\"opentsdb_telnet\", \"collectd\", \"icinga2\", \"tcollector\"]\nports = [6046, 6047, 6048, 6049]\nuser = \"root\"\npassword = \"taosdata\"\n```\n\n----------------------------------------\n\nTITLE: NAnt Build Command Examples for DotZLib\nDESCRIPTION: Examples of NAnt command-line usage for building the DotZLib library with different configurations. Shows how to build release and debug versions with or without unit tests, and how to clean previous builds.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/contrib/dotzlib/readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnant -D:debug=false -D:nunit=false\n```\n\nLANGUAGE: shell\nCODE:\n```\nnant\n```\n\nLANGUAGE: shell\nCODE:\n```\nnant clean\n```\n\n----------------------------------------\n\nTITLE: Building Taosdemo with .NET\nDESCRIPTION: Command to compile the Taosdemo project using the .NET SDK. Building is performed in Release configuration, creating an executable that can be run with additional options using `--help`.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/C#/taosdemo/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndotnet build -c Release\n./bin/Release/net5.0/taosdemo --help\n```\n\n----------------------------------------\n\nTITLE: OpenTSDB EndPoint Configuration\nDESCRIPTION: This snippet shows the format of the EndPoint URLs for writing OpenTSDB compatible data to TDengine. Two methods, JSON and Telnet, are shown including the database parameter in the endpoint path.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/_05-schemaless.mdx#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"/opentsdb/v1/put/json/<db>\"\n\n```\n\nLANGUAGE: text\nCODE:\n```\n\"/opentsdb/v1/put/telnet/<db>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for TDengine UDF Components\nDESCRIPTION: Sets up the necessary include directories for the TDengine UDF components, including paths to various libraries and headers required for compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/function/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\"${TD_SOURCE_DIR}/include/libs/function\")\ninclude_directories(\"${TD_SOURCE_DIR}/contrib/libuv/include\")\ninclude_directories(\"${TD_SOURCE_DIR}/include/util\")\ninclude_directories(\"${TD_SOURCE_DIR}/include/common\")\ninclude_directories(\"${TD_SOURCE_DIR}/include/client\")\ninclude_directories(\"${TD_SOURCE_DIR}/include/os\")\ninclude_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/../inc\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Date with TODAY() in TDengine SQL\nDESCRIPTION: Returns the system time at 00:00 of the current day on the client side. Result is of TIMESTAMP type and can be used in WHERE or INSERT statements for TIMESTAMP fields. Supports time arithmetic operations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nTODAY()\n```\n\n----------------------------------------\n\nTITLE: TO_TIMESTAMP Function in TDengine\nDESCRIPTION: The TO_TIMESTAMP function converts a string to a timestamp, using a specified format. The format string determines how the input string is parsed and converted to a timestamp. This function is applicable to tables and super tables and is supported within nested subqueries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\n\"TO_TIMESTAMP(ts_str_literal, format_str_literal)\"\n```\n\n----------------------------------------\n\nTITLE: TO_CHAR Function in TDengine\nDESCRIPTION: The TO_CHAR function converts a timestamp to a string based on the specified format. The format string determines how the timestamp is represented in the resulting string. This function is applicable to both tables and super tables and is supported within nested subqueries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\n\"TO_CHAR(ts, format_str_literal)\"\n```\n\n----------------------------------------\n\nTITLE: Target Include Directories for Test Executables\nDESCRIPTION: This code defines the include directories for different test executables, specifying public and private headers for each target. This is important for ensuring correct header file visibility during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        clientTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/client/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/client/inc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        connectOptionsTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/client/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/client/inc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        tmqTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/client/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/client/inc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        smlTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/client/\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/client/inc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        stmt2Test\n        PUBLIC \"${TD_SOURCE_DIR}/include/client/\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/geometry\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/client/inc\"\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_INCLUDE_DIRECTORIES(\n        stmtTest\n        PUBLIC \"${TD_SOURCE_DIR}/include/client/\"\n        PUBLIC \"${TD_SOURCE_DIR}/include/libs/geometry\"\n        PRIVATE \"${TD_SOURCE_DIR}/source/client/inc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building DNode Test Executable in CMake\nDESCRIPTION: This CMake script configures a test executable named 'dsnodeTest' for the TDengine project. It collects all source files from the current directory, builds the executable, and links it with the 'sut' library. There's also a commented-out test command that could be used to run the test with CTest.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/test/snode/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. DND_SNODE_TEST_SRC)\nadd_executable(dsnodeTest ${DND_SNODE_TEST_SRC})\ntarget_link_libraries(\n    dsnodeTest\n    PUBLIC sut\n)\n\n#add_test(\n#    NAME dsnodeTest\n#    COMMAND dsnodeTest\n#)\n```\n\n----------------------------------------\n\nTITLE: Building Traft Library - Shell Commands\nDESCRIPTION: Shell commands for installing dependencies and building the traft library. Includes installing libuv and lz4 development packages, running autotools configuration, and compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/traft/help.txt#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libuv1-dev liblz4-dev\nautoreconf -i\n./configure --enable-example\nmake\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard for GoogleTest\nDESCRIPTION: Explicitly sets the C++ standard to version 11, which is the minimum requirement for GoogleTest\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(CMAKE_CXX_STANDARD 11)\n```\n\n----------------------------------------\n\nTITLE: Configuring transTest1 Executable (Commented Out)\nDESCRIPTION: CMake configuration for building and running the transTest1 executable. This section is commented out, indicating it's disabled or for reference only. It includes setting up the executable, source files, linking libraries, include directories, and adding it as a test.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/trans/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# add_executable(transTest1 \"\")\n# target_sources(transTest1\n#     PRIVATE\n#     \"${CMAKE_CURRENT_SOURCE_DIR}/trans1.cpp\"\n# )\n# target_link_libraries(\n#     transTest1\n#     PUBLIC sut\n# )\n# target_include_directories(\n#     transTest1\n#     PUBLIC \"${TD_SOURCE_DIR}/include/dnode/mnode\"\n#     PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/../../inc\"\n# )\n# add_test(\n#     NAME transTest1\n#     COMMAND transTest1\n# )\n```\n\n----------------------------------------\n\nTITLE: Release Build Configuration\nDESCRIPTION: Configures compiler flags and linking options for release builds, with platform-specific optimizations and static library linking.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nIF (CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n    SET(CMAKE_C_FLAGS \"-Wall -Wshadow -std=c99 -std=gnu11 -g -O3 -DRELEASE -Werror -Wformat=2 -Wno-format-nonliteral -Wno-format-truncation ${GCC_COVERAGE_COMPILE_FLAGS} ${TOOLS_SANITIZE_FLAG}\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Including MetersDeserializer Example\nDESCRIPTION: This snippet includes the MetersDeserializer Java file which is responsible for deserializing meter data from a source format into a usable Java object. This functionality is crucial for transforming raw data into structured data types.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_java_ws.mdx#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/MetersDeserializer.java}}\n```\n\n----------------------------------------\n\nTITLE: Executing Show Dnodes Command in TDengine using kubectl\nDESCRIPTION: This snippet demonstrates how to execute a command in the TDengine pod to display the current data node details. It is executed sequentially for each TDengine node in the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/08-operation/03-deployment/03-kubernetes.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it tdengine-0 -n tdengine-test -- taos -s \"show dnodes\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it tdengine-1 -n tdengine-test -- taos -s \"show dnodes\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it tdengine-2 -n tdengine-test -- taos -s \"show dnodes\"\n```\n\n----------------------------------------\n\nTITLE: Get Column Count using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the total number of columns in a result set. It is part of the ResultSetMetaData interface and is used to determine the structure of the result set.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_62\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `int getColumnCount() throws SQLException`\n  - **Interface Description**: Gets the total number of columns in the result set.\n  - **Return Value**: The number of columns in the result set.\n```\n\n----------------------------------------\n\nTITLE: Creating Anode in TDengine\nDESCRIPTION: This snippet demonstrates the error message received when creating an anode fails in TDengine due to an inability to access the analysis service. It indicates a problem with the anode service's connectivity or availability.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/06-TDgpt/11-faq.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntaos> create anode '127.0.0.1:6090';\n\nDB error: Analysis service can't access[0x80000441] (0.117446s)\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering S3 Migration\nDESCRIPTION: This SQL command allows users to manually trigger the migration of data to S3 for a specific database. This operation moves data older than the s3_keeplocal duration to the configured S3 storage.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/12-multi.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n\"s3migrate database <db_name>;\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream with Custom Subtable Name in TDengine\nDESCRIPTION: Example showing how to create a stream with custom subtable names using the SUBTABLE clause and CONCAT function to generate table names based on the source table name.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE STREAM avg_vol_s INTO avg_vol SUBTABLE(CONCAT('new-', tname)) AS SELECT _wstart, count(*), avg(voltage) FROM meters PARTITION BY tbname tname INTERVAL(1m);\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus components\nDESCRIPTION: Imports necessary Docusaurus components: DocCardList for rendering documentation cards and useCurrentSidebarCategory for accessing the current sidebar category to populate the card list.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/28-releases/03-notes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n```\n\n----------------------------------------\n\nTITLE: Single-line Schemaless Data Writing in TDengine JDBC\nDESCRIPTION: Method for writing a single line of data with specified protocol and timestamp types. Simplifies the insertion of individual data points using supported protocols and timestamp formats.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nvoid write(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Calculating Week of Year with WEEKOFYEAR() in TDengine SQL\nDESCRIPTION: Returns the week number within the year for a given date. Equivalent to WEEK(expr, 3). Accepts timestamp or date string input and returns a BIGINT value representing the week of the year.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_40\n\nLANGUAGE: sql\nCODE:\n```\nWEEKOFYEAR(expr)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for TMQ Tests\nDESCRIPTION: This snippet defines an executable for testing TMQ functionalities and sets up corresponding library links. It is crucial for unit testing TMQ features within the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/client/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(tmqTest tmqTest.cpp)\nTARGET_LINK_LIBRARIES(\n        tmqTest\n        PUBLIC os util common transport parser catalog scheduler function gtest ${TAOS_NATIVE_LIB_STATIC} qcom\n)\n```\n\n----------------------------------------\n\nTITLE: Including Meters Example\nDESCRIPTION: This snippet includes the Meters class, which probably represents the structure of meter data within the TDengine environment. It serves as an example of how to encapsulate and manipulate meter-related information in a Java application.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/_sub_java.mdx#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/Meters.java}}\n```\n\n----------------------------------------\n\nTITLE: Counting Records with COUNT() in TDengine SQL\nDESCRIPTION: Counts the number of records for a specified column or all columns using *. Returns a BIGINT value. Can be used on all data types and applies to tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_43\n\nLANGUAGE: sql\nCODE:\n```\nCOUNT({* | expr})\n```\n\n----------------------------------------\n\nTITLE: Creating Native Consumer in Java\nDESCRIPTION: The Java snippet here demonstrates how to create a native consumer. It sets up necessary parameters for connection and consumption of messages from the specified topic in the Java example file.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/07-tmq.md#2025-04-16_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n{{#include docs/examples/java/src/main/java/com/taos/example/ConsumerLoopFull.java:create_consumer}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler and Platform-Specific Settings\nDESCRIPTION: Sets up compiler flags, definitions, and platform-specific settings for the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro-lang-c-CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n    if (NOT CMAKE_INSTALL_NAME_DIR)\n        set(CMAKE_INSTALL_NAME_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n    endif (NOT CMAKE_INSTALL_NAME_DIR)\nendif(APPLE)\n\nif(CMAKE_COMPILER_IS_GNUCC)\n    add_definitions(-W -Wall)\nendif(CMAKE_COMPILER_IS_GNUCC)\n\nif (WIN32)\n   # Compile win32 in C++ to allow declarations after statements\n   add_definitions(/TP)\nendif(WIN32)\nadd_definitions(/MTd)\n```\n\n----------------------------------------\n\nTITLE: TIMEDIFF Function in TDengine\nDESCRIPTION: The TIMEDIFF function returns the difference between two timestamps.  The result can be negative, and is approximated to the precision of the specified time_unit. If no time_unit is provided, the difference is determined by the database timestamp precision.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\n\"TIMEDIFF(expr1, expr2 [, time_unit])\"\n```\n\nLANGUAGE: sql\nCODE:\n```\n\"taos> select timediff('2022-01-01 08:00:00', '2022-01-01 08:00:01',1s);\\n timediff('2022-01-01 08:00:00', '2022-01-01 08:00:01',1s) |\\n============================================================\\n                                                        -1 |\\n\\ntaos> select timediff('2022-01-01 08:00:01', '2022-01-01 08:00:00',1s);\\n timediff('2022-01-01 08:00:01', '2022-01-01 08:00:00',1s) |\\n============================================================\\n                                                         1 |\"\n```\n\n----------------------------------------\n\nTITLE: Seeking to Beginning of Partitions in TDengine (TypeScript)\nDESCRIPTION: Sets the offset for a set of partitions to the earliest offset. Takes an array of TopicPartition objects representing the partitions to operate on. Throws a TDWebSocketClientError on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/35-node.md#2025-04-16_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync seekToBeginning(partitions:Array<TopicPartition>):Promise<void>\n```\n\n----------------------------------------\n\nTITLE: PERF_CONNECTIONS Table Structure in TDengine\nDESCRIPTION: Defines the structure of the PERF_CONNECTIONS table that stores information about database connections, including connection ID, user details, and access times.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/23-perf.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE PERF_CONNECTIONS (\n  conn_id INT,\n  user BINARY(24),\n  app BINARY(24),\n  pid UINT,\n  end_point BINARY(128),\n  login_time TIMESTAMP,\n  last_access TIMESTAMP\n)\n```\n\n----------------------------------------\n\nTITLE: Unloading Kafka Connectors using cURL in Shell\nDESCRIPTION: These cURL commands demonstrate how to unload (delete) the TDengine Sink and Source connectors by sending DELETE requests to the Kafka Connect REST API.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/10-third-party/01-collection/11-kafka.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://localhost:8083/connectors/TDengineSinkConnector\ncurl -X DELETE http://localhost:8083/connectors/TDengineSourceConnector\n```\n\n----------------------------------------\n\nTITLE: Selecting Bottom K Values with BOTTOM() in TDengine SQL\nDESCRIPTION: Selects the k smallest non-NULL values from a column. Returns the original data type and associated timestamps. Applicable to numeric columns in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_53\n\nLANGUAGE: sql\nCODE:\n```\nBOTTOM(expr, k)\n```\n\n----------------------------------------\n\nTITLE: Using Reserved Keywords as Identifiers in TDengine SQL\nDESCRIPTION: When using reserved keywords as names for databases, tables, columns, or other identifiers, they must be enclosed in backticks (`) regardless of case. For example, using the ADD keyword as an identifier.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/20-keywords.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n`ADD`\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Lemon SQL\nDESCRIPTION: This snippet adds a custom target that depends on the output files generated by the custom command. This ensures that the SQL parser files are built as part of the overall build process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/parser/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(lemon_sql ALL\n    DEPENDS ${TD_SOURCE_DIR}/source/libs/parser/src/sql.c ${TD_SOURCE_DIR}/include/common/ttokenauto.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring tmsgTest Executable for Linux\nDESCRIPTION: Creates a test executable for message handling with custom source files, include directories, and a post-build command to copy a configuration file\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/common/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${TD_LINUX})\n    add_executable(tmsgTest \"\")\n    target_sources(tmsgTest\n        PRIVATE\n        \"tmsgTest.cpp\"\n        \"../src/msg/tmsg.c\"\n    )\n    target_include_directories(tmsgTest PUBLIC \"${TD_SOURCE_DIR}/include/common/\")\n    target_link_libraries(tmsgTest PUBLIC os util gtest gtest_main)\n    add_test(\n        NAME tmsgTest\n        COMMAND tmsgTest\n    )\n\n    SET(MSG_TBL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/msgTypeTable.ini)\n    add_custom_command(TARGET tmsgTest POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E copy_if_different ${MSG_TBL_FILE} $<TARGET_FILE_DIR:tmsgTest>\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including TDengine WebSocket Header in C\nDESCRIPTION: Includes the taosws.h header file required for using the TDengine WebSocket client driver in C programs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <taosws.h>\n```\n\n----------------------------------------\n\nTITLE: Target Sources for Synchronization Tests - CMake\nDESCRIPTION: This segment of the CMake file specifies the source files to be used for each synchronization test executable using the 'target_sources' command. Each test is associated with its respective source code file, allowing for organized compilation of the test suite.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sync/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(syncTest\n    PRIVATE\n    \"syncTest.cpp\"\n)\ntarget_sources(syncRaftIdCheck\n    PRIVATE\n    \"syncRaftIdCheck.cpp\"\n)\ntarget_sources(syncEnvTest\n    PRIVATE\n    \"syncEnvTest.cpp\"\n)\ntarget_sources(syncPingTimerTest\n    PRIVATE\n    \"syncPingTimerTest.cpp\"\n)\ntarget_sources(syncIOTickQTest\n    PRIVATE\n    \"syncIOTickQTest.cpp\"\n)\ntarget_sources(syncIOTickPingTest\n    PRIVATE\n    \"syncIOTickPingTest.cpp\"\n)\ntarget_sources(syncIOSendMsgTest\n    PRIVATE\n    \"syncIOSendMsgTest.cpp\"\n)\ntarget_sources(syncIOClientTest\n    PRIVATE\n    \"syncIOClientTest.cpp\"\n)\ntarget_sources(syncIOServerTest\n    PRIVATE\n    \"syncIOServerTest.cpp\"\n)\ntarget_sources(syncRaftStoreTest\n    PRIVATE\n    \"syncRaftStoreTest.cpp\"\n)\ntarget_sources(syncEnqTest\n    PRIVATE\n    \"syncEnqTest.cpp\"\n)\ntarget_sources(syncIndexTest\n    PRIVATE\n    \"syncIndexTest.cpp\"\n)\ntarget_sources(syncInitTest\n    PRIVATE\n    \"syncInitTest.cpp\"\n)\ntarget_sources(syncUtilTest\n    PRIVATE\n    \"syncUtilTest.cpp\"\n)\ntarget_sources(syncVotesGrantedTest\n    PRIVATE\n    \"syncVotesGrantedTest.cpp\"\n)\ntarget_sources(syncVotesRespondTest\n    PRIVATE\n    \"syncVotesRespondTest.cpp\"\n)\ntarget_sources(syncIndexMgrTest\n    PRIVATE\n    \"syncIndexMgrTest.cpp\"\n)\ntarget_sources(syncLogStoreTest\n    PRIVATE\n    \"syncLogStoreTest.cpp\"\n)\ntarget_sources(syncEntryTest\n    PRIVATE\n    \"syncEntryTest.cpp\"\n)\ntarget_sources(syncEntryCacheTest\n    PRIVATE\n    \"syncEntryCacheTest.cpp\"\n)\ntarget_sources(syncHashCacheTest\n    PRIVATE\n    \"syncHashCacheTest.cpp\"\n)\ntarget_sources(syncRequestVoteTest\n    PRIVATE\n    \"syncRequestVoteTest.cpp\"\n)\ntarget_sources(syncRequestVoteReplyTest\n    PRIVATE\n    \"syncRequestVoteReplyTest.cpp\"\n)\ntarget_sources(syncAppendEntriesTest\n    PRIVATE\n    \"syncAppendEntriesTest.cpp\"\n)\ntarget_sources(syncAppendEntriesBatchTest\n    PRIVATE\n    \"syncAppendEntriesBatchTest.cpp\"\n)\ntarget_sources(syncAppendEntriesReplyTest\n    PRIVATE\n    \"syncAppendEntriesReplyTest.cpp\"\n)\ntarget_sources(syncTimeoutTest\n    PRIVATE\n    \"syncTimeoutTest.cpp\"\n)\ntarget_sources(syncPingTest\n    PRIVATE\n    \"syncPingTest.cpp\"\n)\ntarget_sources(syncPingReplyTest\n    PRIVATE\n    \"syncPingReplyTest.cpp\"\n)\ntarget_sources(syncRpcMsgTest\n    PRIVATE\n    \"syncRpcMsgTest.cpp\"\n)\ntarget_sources(syncPingTimerTest2\n    PRIVATE\n    \"syncPingTimerTest2.cpp\"\n)\ntarget_sources(syncPingSelfTest\n    PRIVATE\n    \"syncPingSelfTest.cpp\"\n)\ntarget_sources(syncElectTest\n    PRIVATE\n    \"syncElectTest.cpp\"\n)\ntarget_sources(syncEncodeTest\n    PRIVATE\n    \"syncEncodeTest.cpp\"\n)\ntarget_sources(syncWriteTest\n    PRIVATE\n    \"syncWriteTest.cpp\"\n)\ntarget_sources(syncReplicateTest\n    PRIVATE\n    \"syncReplicateTest.cpp\"\n)\ntarget_sources(syncRefTest\n    PRIVATE\n    \"syncRefTest.cpp\"\n)\ntarget_sources(syncLogStoreCheck\n    PRIVATE\n    \"syncLogStoreCheck.cpp\"\n)\ntarget_sources(syncLogStoreCheck2\n    PRIVATE\n    \"syncLogStoreCheck2.cpp\"\n)\ntarget_sources(syncRaftCfgTest\n    PRIVATE\n    \"syncRaftCfgTest.cpp\"\n)\ntarget_sources(syncRespMgrTest\n    PRIVATE\n    \"syncRespMgrTest.cpp\"\n)\ntarget_sources(syncSnapshotTest\n    PRIVATE\n    \"syncSnapshotTest.cpp\"\n)\ntarget_sources(syncApplyMsgTest\n    PRIVATE\n    \"syncApplyMsgTest.cpp\"\n)\ntarget_sources(syncConfigChangeTest\n    PRIVATE\n    \"syncConfigChangeTest.cpp\"\n)\ntarget_sources(syncConfigChangeSnapshotTest\n    PRIVATE\n    \"syncConfigChangeSnapshotTest.cpp\"\n)\ntarget_sources(syncSnapshotSendTest\n    PRIVATE\n    \"syncSnapshotSendTest.cpp\"\n)\ntarget_sources(syncSnapshotRspTest\n    PRIVATE\n    \"syncSnapshotRspTest.cpp\"\n)\ntarget_sources(syncSnapshotSenderTest\n    PRIVATE\n    \"syncSnapshotSenderTest.cpp\"\n)\ntarget_sources(syncSnapshotReceiverTest\n    PRIVATE\n    \"syncSnapshotReceiverTest.cpp\"\n)\ntarget_sources(syncTestTool\n    PRIVATE\n    \"syncTestTool.cpp\"\n)\ntarget_sources(syncRaftLogTest\n    PRIVATE\n    \"syncRaftLogTest.cpp\"\n)\ntarget_sources(syncRaftLogTest2\n    PRIVATE\n    \"syncRaftLogTest2.cpp\"\n)\ntarget_sources(syncRaftLogTest3\n    PRIVATE\n    \"syncRaftLogTest3.cpp\"\n)\ntarget_sources(syncLeaderTransferTest\n    PRIVATE\n    \"syncLeaderTransferTest.cpp\"\n)\ntarget_sources(syncRestoreFromSnapshot\n    PRIVATE\n    \"syncRestoreFromSnapshot.cpp\"\n)\ntarget_sources(syncRaftCfgIndexTest\n    PRIVATE\n    \"syncRaftCfgIndexTest.cpp\"\n)\ntarget_sources(syncHeartbeatTest\n    PRIVATE\n    \"syncHeartbeatTest.cpp\"\n)\ntarget_sources(syncHeartbeatReplyTest\n    PRIVATE\n    \"syncHeartbeatReplyTest.cpp\"\n)\ntarget_sources(syncLocalCmdTest\n    PRIVATE\n    \"syncLocalCmdTest.cpp\"\n)\ntarget_sources(syncPreSnapshotTest\n    PRIVATE\n    \"syncPreSnapshotTest.cpp\"\n)\ntarget_sources(syncPreSnapshotReplyTest\n    PRIVATE\n    \"syncPreSnapshotReplyTest.cpp\"\n```\n\n----------------------------------------\n\nTITLE: Configuring cosTest Executable in CMake\nDESCRIPTION: This snippet creates the cosTest executable and specifies its source files. It sets up the main executable target for the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/cos/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(cosTest \"\")\ntarget_sources(cosTest\n  PRIVATE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/main.c\"\n  )\n```\n\n----------------------------------------\n\nTITLE: DELETE Operation Result Output\nDESCRIPTION: Example output showing the execution result of a DELETE operation, indicating the number of rows deleted and tables affected, along with the execution time.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/09-delete-data.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDeleted 102000 row(s) from 1020 table(s) (0.421950s)\n```\n\n----------------------------------------\n\nTITLE: CHAR Function in TDengine SQL\nDESCRIPTION: Converts integer inputs to corresponding ASCII characters. Supports multiple parameters, handles multi-byte characters, and skips NULL values. Useful for character encoding manipulation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nCHAR(expr1 [, expr2] [, epxr3] ...)\n```\n\n----------------------------------------\n\nTITLE: Extended Update Execution with Request ID in TDengine JDBC\nDESCRIPTION: Extended method for executing SQL update statements with request tracking. Allows monitoring and auditing of specific update operations through the system using the request ID.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_32\n\nLANGUAGE: Java\nCODE:\n```\nint executeUpdate(String sql, Long reqId) throws SQLException\n```\n\n----------------------------------------\n\nTITLE: TMQ Message Result Type Enumeration\nDESCRIPTION: Defines the possible types of message results in the TDengine Message Queue consumer API\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/10-cpp.md#2025-04-16_snippet_49\n\nLANGUAGE: cpp\nCODE:\n```\ntypedef enum ws_tmq_res_t {\n    WS_TMQ_RES_INVALID = -1,   // Invalid\n    WS_TMQ_RES_DATA = 1,       // Data type\n    WS_TMQ_RES_TABLE_META = 2, // Metadata type\n    WS_TMQ_RES_METADATA = 3    // Both metadata and data types\n} tmq_res_t;\n```\n\n----------------------------------------\n\nTITLE: Running Crash_Gen as Client Test Tool (Bash)\nDESCRIPTION: Command to run the Crash_Gen tool as a client test with 3 threads and 10 steps. This assumes the taosd service is already running.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/pytest/crash_gen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./crash_gen.sh -p -t 3 -s 10\n```\n\n----------------------------------------\n\nTITLE: Shell Unit Test Library Configuration\nDESCRIPTION: Sets up the shell unit test library configuration for Linux platforms. Includes additional dependencies and directory configurations for testing purposes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/shell/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(TD_LINUX)\n    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/inc)\n\n    add_library(shell_ut STATIC ${SHELL_SRC} ../src/pub.c)\n\n    target_link_libraries(shell_ut PUBLIC ${TAOS_LIB} ${LINK_JEMALLOC} ${LINK_ARGP})\n    target_link_libraries(shell_ut PRIVATE os common transport geometry util)\n\n    target_link_directories(\n        shell_ut\n        PUBLIC \"${TD_SOURCE_DIR}/contrib/lzma2\"\n        PUBLIC \"${TD_SOURCE_DIR}/contrib/pcre2\"\n    )\n\n    IF(${BUILD_TEST})\n        ADD_SUBDIRECTORY(test)\n    ENDIF(${BUILD_TEST})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies Based on Build Options in CMake\nDESCRIPTION: Adds various dependencies to the build configuration based on build options. This includes libraries like WebSocket, HTTP adapter, pthread, iconv, jemalloc, and others.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CONTRIB_TMP_FILE \"${CMAKE_BINARY_DIR}/deps_tmp_CMakeLists.txt.in\")\nconfigure_file(\"${TD_SUPPORT_DIR}/deps_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\n\n# taosws-rs\nif(${WEBSOCKET})\n    cat(\"${TD_SUPPORT_DIR}/taosws_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# taosadapter\nif(${BUILD_HTTP})\n    MESSAGE(\"BUILD_HTTP is on\")\nelse()\n    MESSAGE(\"BUILD_HTTP is off, use taosAdapter\")\n    cat(\"${TD_SUPPORT_DIR}/taosadapter_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# pthread\nif(${BUILD_PTHREAD})\n    cat(\"${TD_SUPPORT_DIR}/pthread_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# iconv\nif(${BUILD_WITH_ICONV})\n    cat(\"${TD_SUPPORT_DIR}/iconv_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n\n# jemalloc\nif(${JEMALLOC_ENABLED})\n    cat(\"${TD_SUPPORT_DIR}/jemalloc_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Rust Example for Parameter Binding\nDESCRIPTION: This Rust code snippet demonstrates how to implement parameter binding for efficient insertion in TDengine, which minimizes the need for re-parsing SQL statements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n{{#include docs/examples/rust/restexample/examples/stmt.rs}}\n```\n\n----------------------------------------\n\nTITLE: Dropping a View in TDengine SQL\nDESCRIPTION: This snippet illustrates the syntax for deleting a view in TDengine SQL. The 'IF EXISTS' clause can prevent errors if the view to be dropped does not exist.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/33-view.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nDROP VIEW [IF EXISTS] [db_name.]view_name;\n```\n\n----------------------------------------\n\nTITLE: SQL Query with Timestamp String in TDengine\nDESCRIPTION: Example of a SQL query using a timestamp string format instead of Unix timestamp. The interpretation of this timestamp depends on the configured timezone of the system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/01-taosd.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT count(*) FROM table_name WHERE TS<'2019-04-11 12:01:08';\n```\n\n----------------------------------------\n\nTITLE: Killing a Query in TDengine\nDESCRIPTION: This SQL command terminates a specific query in TDengine. The `kill_id` parameter identifies the query to be terminated and can be obtained using the `SHOW QUERIES` command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nKILL QUERY 'kill_id';\n```\n\n----------------------------------------\n\nTITLE: Configuring TDgpt Service\nDESCRIPTION: Sample configuration file (taosanode.ini) showing how to configure the HTTP binding address and port for the TDgpt RESTful service.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/tdgpt/README.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n# taosanode service ip:port\nhttp = 127.0.0.1:6090\n```\n\n----------------------------------------\n\nTITLE: Using ST_GeomFromText Function in SQL\nDESCRIPTION: Creates a geometry data type from a Well-Known Text (WKT) representation. Supports various geometry types like POINT, LINESTRING, POLYGON, etc.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_79\n\nLANGUAGE: sql\nCODE:\n```\nST_GeomFromText(VARCHAR WKT expr)\n```\n\n----------------------------------------\n\nTITLE: Killing a Transaction in TDengine\nDESCRIPTION: This SQL command terminates a specific transaction in TDengine. The `trans_id` parameter identifies the transaction to be terminated and can be obtained using the `SHOW TRANSACTIONS` command.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/29-recovery.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nKILL TRANSACTION trans_id\n```\n\n----------------------------------------\n\nTITLE: Compiling Jansson from Source using Autotools in Bash\nDESCRIPTION: This snippet shows the standard autotools commands for compiling and installing Jansson from a source tarball. It includes configuring, building, and installing the library.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Connection String in C#\nDESCRIPTION: Example of creating a connection string for WebSocket TDengine connection with advanced configuration options like SSL, compression, and auto-reconnect\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/40-csharp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n\"protocol=WebSocket;host=127.0.0.1;port=6041;useSSL=false;enableCompression=true;autoReconnect=true;reconnectIntervalMs=10;reconnectRetryCount=5\"\n```\n\n----------------------------------------\n\nTITLE: Using MIN Function in SQL\nDESCRIPTION: Returns the minimum value in a column. Supports numeric types, VARCHAR, and NCHAR data types. String support was added in v3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_58\n\nLANGUAGE: sql\nCODE:\n```\nMIN(expr)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for Linux\nDESCRIPTION: Conditionally adds the test subdirectory for Linux systems if BUILD_TEST is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nIF(TD_LINUX)\n    # unit test\n    IF(${BUILD_TEST})\n        ADD_SUBDIRECTORY(test)\n    ENDIF(${BUILD_TEST})    \nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jansson pkg-config File in CMake\nDESCRIPTION: Sets up variables and generates the pkg-config file for the Jansson library. Defines installation paths and version information needed for the configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(prefix      ${CMAKE_INSTALL_PREFIX})\nset(exec_prefix \"\\${prefix}\")\nset(libdir      \"\\${exec_prefix}/${JANSSON_INSTALL_LIB_DIR}\")\nset(includedir  \"\\${prefix}/${JANSSON_INSTALL_INCLUDE_DIR}\")\nset(VERSION     ${JANSSON_DISPLAY_VERSION})\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/jansson.pc.in\n               ${CMAKE_CURRENT_BINARY_DIR}/jansson.pc @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Get Column Type Name using ResultSetMetaData in Java\nDESCRIPTION: This method retrieves the database-specific type name of a specified column. The column number starts from 1.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/14-java.md#2025-04-16_snippet_74\n\nLANGUAGE: java\nCODE:\n```\n\t\t- `String getColumnTypeName(int column) throws SQLException`\n  - **Interface Description**: Gets the database-specific type name of a specified column.\n  - **Parameter Description**:\n    - `column`: The column number (starting from 1).\n  - **Return Value**: The database-specific type name.\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Audit Library - CMake\nDESCRIPTION: This snippet links several external libraries (os, util, common, transport, mnode) to the 'audit' library. This is essential for allowing the audit library to utilize functionality defined in these libraries, ensuring that the library has all necessary dependencies during compilation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/audit/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(audit os util common transport mnode)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Environment for S3 or COS in CMake\nDESCRIPTION: Sets up the build environment for S3 or COS (Cloud Object Storage) support. It creates necessary directories and configures CMake files based on the selected storage option.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_WITH_S3})\n    file(MAKE_DIRECTORY $ENV{HOME}/.cos-local.2/)\n\nelseif(${BUILD_WITH_COS})\n    set(CONTRIB_TMP_FILE3 \"${CMAKE_BINARY_DIR}/deps_tmp_CMakeLists.txt.in3\")\n    configure_file(\"${TD_SUPPORT_DIR}/deps_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE3})\n\n    if(${BUILD_WITH_COS})\n        file(MAKE_DIRECTORY $ENV{HOME}/.cos-local.1/)\n        cat(\"${TD_SUPPORT_DIR}/mxml_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE3})\n        cat(\"${TD_SUPPORT_DIR}/apr_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE3})\n    endif(${BUILD_WITH_COS})\n\n    configure_file(${CONTRIB_TMP_FILE3} \"${TD_CONTRIB_DIR}/deps-download/CMakeLists.txt\")\n    execute_process(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n        WORKING_DIRECTORY \"${TD_CONTRIB_DIR}/deps-download\")\n    execute_process(COMMAND \"${CMAKE_COMMAND}\" --build .\n        WORKING_DIRECTORY \"${TD_CONTRIB_DIR}/deps-download\")\n\n    set(CONTRIB_TMP_FILE2 \"${CMAKE_BINARY_DIR}/deps_tmp_CMakeLists.txt.in2\")\n    configure_file(\"${TD_SUPPORT_DIR}/deps_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE2})\n\n    if(${BUILD_WITH_COS})\n        cat(\"${TD_SUPPORT_DIR}/apr-util_CMakeLists.txt.in\" ${CONTRIB_TMP_FILE2})\n    endif(${BUILD_WITH_COS})\n\n    configure_file(${CONTRIB_TMP_FILE2} \"${TD_CONTRIB_DIR}/deps-download/CMakeLists.txt\")\n    execute_process(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n        WORKING_DIRECTORY \"${TD_CONTRIB_DIR}/deps-download\")\n    execute_process(COMMAND \"${CMAKE_COMMAND}\" --build .\n        WORKING_DIRECTORY \"${TD_CONTRIB_DIR}/deps-download\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write (Python)\nDESCRIPTION: This Python code snippet shows how to perform schemaless writes to TDengine using the native Python driver. The code is from `schemaless_native.py` example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"{{#include docs/examples/python/schemaless_native.py}}\"\n```\n\n----------------------------------------\n\nTITLE: Connection Retrieval in TDengine JDBC\nDESCRIPTION: Method to get the Connection object that produced this Statement. Useful for accessing connection properties or creating additional statements from the same connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nConnection getConnection() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Compiling extract_avg C Library\nDESCRIPTION: Shows the bash command used to compile the extract_avg UDF implementation into a shared object library with debugging symbols using gcc.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/09-udf.md#2025-04-16_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngcc -g -O0 -fPIC -shared extract_vag.c -o libextract_avg.so\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with AVG() in TDengine SQL\nDESCRIPTION: Computes the average value of a specified numeric column. Returns DOUBLE or DECIMAL type result. Can be used on tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_42\n\nLANGUAGE: sql\nCODE:\n```\nAVG(expr)\n```\n\n----------------------------------------\n\nTITLE: Data Subscription with TmqBuilder in Rust\nDESCRIPTION: Provides connection management and consumer object creation for data subscription, with methods for checking connection status and building connections\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/26-rust.mdx#2025-04-16_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nfn from_dsn<D: IntoDsn>(dsn: D) -> RawResult<Self>\n```\n\nLANGUAGE: Rust\nCODE:\n```\nfn build(&self) -> RawResult<Self::Target>\n```\n\n----------------------------------------\n\nTITLE: Creating Child Tables in TDengine\nDESCRIPTION: SQL syntax for creating child tables using super table templates. Supports single table creation and batch creation methods.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE [IF NOT EXISTS] tb_name USING stb_name TAGS (tag_value1, ...);\n\nCREATE TABLE [IF NOT EXISTS] tb_name USING stb_name (tag_name1, ...) TAGS (tag_value1, ...);\n```\n\n----------------------------------------\n\nTITLE: Schemaless Native Write (Go)\nDESCRIPTION: This Go code snippet demonstrates how to perform schemaless writes to TDengine using the native Go driver. The code is from `main.go` example.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/04-schemaless.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"{{#include docs/examples/go/schemaless/native/main.go}}\"\n```\n\n----------------------------------------\n\nTITLE: Linking Common Library with SM4\nDESCRIPTION: This snippet links the 'common' library to the SM4 library, ensuring that the necessary dependencies are resolved during the linking stage of the build process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/sm4/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(sm4 common)\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation with STDDEV/STDDEV_POP() in TDengine SQL\nDESCRIPTION: Computes the population standard deviation of values in a column. Returns a DOUBLE value. Applicable to numeric columns in tables and super tables.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_50\n\nLANGUAGE: sql\nCODE:\n```\nSTDDEV/STDDEV_POP(expr)\n```\n\n----------------------------------------\n\nTITLE: Configuring addr2line Build Setup\nDESCRIPTION: Configures build settings for addr2line debugging tool with extensive system header checks and libdwarf compilation. Modifies addr2line source to make functions externally accessible and sets up necessary linking.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/CMakeLists.txt#2025-04-16_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(${BUILD_ADDR2LINE})\n    if(NOT ${TD_WINDOWS})\n        check_include_file(\"sys/types.h\" HAVE_SYS_TYPES_H)\n        # ... [additional include checks] ...\n        set(VERSION 0.3.1)\n        set(PACKAGE_VERSION \"\\\"${VERSION}\\\"\")\n        configure_file(libdwarf/cmake/config.h.cmake config.h)\n        file(GLOB_RECURSE LIBDWARF_SOURCES \"libdwarf/src/lib/libdwarf/*.c\")\n        add_library(libdwarf STATIC ${LIBDWARF_SOURCES})\n        set_target_properties(libdwarf PROPERTIES OUTPUT_NAME \"libdwarf\")\n\n        if(HAVE_LIBELF_H OR HAVE_LIBELF_LIBELF_H)\n            target_link_libraries(libdwarf PUBLIC libelf)\n        endif()\n\n        target_include_directories(libdwarf SYSTEM PUBLIC \"libdwarf/src/lib/libdwarf\" ${CMAKE_CURRENT_BINARY_DIR})\n        file(READ \"addr2line/addr2line.c\" ADDR2LINE_CONTENT)\n        string(REPLACE \"static int\" \"int\" ADDR2LINE_CONTENT \"${ADDR2LINE_CONTENT}\")\n        string(REPLACE \"static void\" \"void\" ADDR2LINE_CONTENT \"${ADDR2LINE_CONTENT}\")\n        string(REPLACE \"main(\" \"main_addr2line(\" ADDR2LINE_CONTENT \"${ADDR2LINE_CONTENT}\")\n        file(WRITE \"addr2line/addr2line.c\" \"${ADDR2LINE_CONTENT}\")\n        add_library(addr2line STATIC \"addr2line/addr2line.c\")\n        target_link_libraries(addr2line PUBLIC libdwarf dl z)\n        target_include_directories(addr2line PUBLIC \"libdwarf/src/lib/libdwarf\")\n    endif(NOT ${TD_WINDOWS})\nendif(${BUILD_ADDR2LINE})\n```\n\n----------------------------------------\n\nTITLE: Importing Image Components in Markdown\nDESCRIPTION: Import statements for image components used in the documentation with relative paths to stream processing engine diagrams.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/09-stream.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Image from '@theme/IdealImage';\nimport imgStep01 from '../assets/stream-processing-engine-01.png';\nimport imgStep02 from '../assets/stream-processing-engine-02.png';\nimport imgStep03 from '../assets/stream-processing-engine-03.png';\n```\n\n----------------------------------------\n\nTITLE: Selecting Top N Values in TDengine\nDESCRIPTION: This SQL query selects the top 100 values from the 'c1' column in a TDengine database. The TOP function retrieves the highest values based on the specified column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/taosc_query-kill-slow-query.txt#2025-04-16_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect TOP(c1,100) ; \n```\n\n----------------------------------------\n\nTITLE: Closing TMQ Connection in Go\nDESCRIPTION: This Go snippet demonstrates how to close the TMQ consumer, releasing resources and disconnecting from the TDengine server.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n\terr = consumer.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Information in TDengine\nDESCRIPTION: SQL commands for retrieving table information including listing all tables, showing create statements, and describing table structure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/03-table.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TABLES [LIKE tb_name_wildcard];\nSHOW CREATE TABLE tb_name;\nDESCRIBE [db_name.]tb_name;\n```\n\n----------------------------------------\n\nTITLE: Native Connection Parameter Binding in C\nDESCRIPTION: C code examples illustrating how to use parameter binding with native connections in TDengine, requiring version 3.3.5.0 or higher.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/05-stmt.md#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/stmt2_insert_demo.c}}\n```\n\nLANGUAGE: c\nCODE:\n```\n{{#include docs/examples/c/stmt_insert_demo.c}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories in CMake\nDESCRIPTION: Sets up installation directories for libraries, binaries, header files, and CMake configuration files. Allows users to override default installation directories.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Installation preparation.\n#\n\n# Allow the user to override installation directories.\nset(JANSSON_INSTALL_LIB_DIR       lib CACHE PATH \"Installation directory for libraries\")\nset(JANSSON_INSTALL_BIN_DIR       bin CACHE PATH \"Installation directory for executables\")\nset(JANSSON_INSTALL_INCLUDE_DIR   include CACHE PATH \"Installation directory for header files\")\n\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_INSTALL_CMAKE_DIR cmake)\nelse()\n  set(DEF_INSTALL_CMAKE_DIR lib/cmake/jansson)\nendif()\n\nset(JANSSON_INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH \"Installation directory for CMake files\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Snappy Project with CMake\nDESCRIPTION: Sets up the basic project requirements including minimum CMake version, project name, and C++ standard requirements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1)\nproject(Snappy VERSION 1.1.8 LANGUAGES C CXX)\n\n# C++ standard can be overridden when this is used as a sub-project.\nif(NOT CMAKE_CXX_STANDARD)\n  # This project requires C++11.\n  set(CMAKE_CXX_STANDARD 11)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif(NOT CMAKE_CXX_STANDARD)\n```\n\n----------------------------------------\n\nTITLE: Querying Sample Data in SQL\nDESCRIPTION: Demonstrates a SQL query to select all data from a sample table 'foo' containing timestamp and integer columns.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/05-forecast/index.md#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ntaos> select * from foo;\n           ts            |      i32    |\n========================================\n 2020-01-01 00:00:12.681 |          13 |\n 2020-01-01 00:00:13.727 |          14 |\n 2020-01-01 00:00:14.378 |           8 |\n 2020-01-01 00:00:15.774 |          10 |\n 2020-01-01 00:00:16.170 |          16 |\n 2020-01-01 00:00:17.558 |          26 |\n 2020-01-01 00:00:18.938 |          32 |\n 2020-01-01 00:00:19.308 |          27 |\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a TMQ Topic in Go\nDESCRIPTION: This Go snippet demonstrates subscribing to a TMQ topic using the native client.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/07-tmq.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\tconsumer, err := tmq.NewNative(\n\t\t\"test\",\n\t\t\"test\",\n\t\t[]string{\"topic\"},\n\t\tmap[string]string{\n\t\t\t\"auto.offset.reset\": \"earliest\",\n\t\t},\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer consumer.Close()\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the MNode Library in CMake\nDESCRIPTION: Defines the mnode static library, sets its include directories (public and private), and configures its dependencies on other TDengine components.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mnode STATIC ${MNODE_SRC})\ntarget_include_directories(\n  mnode\n  PUBLIC \"${TD_SOURCE_DIR}/include/dnode/mnode\"\n  PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/inc\"\n)\ntarget_link_libraries(\n  mnode scheduler sdb wal transport cjson sync monitor executor qworker stream parser audit monitorfw\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average in TDengine\nDESCRIPTION: This SQL query calculates the average value of the 't0' column in a TDengine database. It assumes that 't0' is a numerical column.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/army/tools/benchmark/basic/json/taosc_query-kill-slow-query.txt#2025-04-16_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nselect AVG(t0) ; \n```\n\n----------------------------------------\n\nTITLE: Using LAST_ROW Function in SQL\nDESCRIPTION: Returns the last row (with the maximum timestamp) from a table or super-table. Similar to LAST but returns NULL values as well.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_56\n\nLANGUAGE: sql\nCODE:\n```\nLAST_ROW(expr)\n```\n\n----------------------------------------\n\nTITLE: Displaying VNODEs Information in TDengine SQL\nDESCRIPTION: Shows information about all virtual nodes (VNODEs) in the system or the VNODEs of a specific data node (DNODE).\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VNODES [ON DNODE dnode_id];\n```\n\n----------------------------------------\n\nTITLE: ResultSet Concurrency Type in TDengine JDBC\nDESCRIPTION: Method to get the concurrency mode of ResultSet objects generated by this Statement. Determines whether the ResultSet can be updated concurrently.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/14-java.mdx#2025-04-16_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\nint getResultSetConcurrency() throws SQLException\n```\n\n----------------------------------------\n\nTITLE: Running TDengine test coverage locally\nDESCRIPTION: Sets up lcov and runs the local coverage script, specifying the branch and test cases to run.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncd tests\nbash setup-lcov.sh -v 1.16 && ./run_local_coverage.sh -b main -c task\n```\n\n----------------------------------------\n\nTITLE: Modifying Virtual Subtables in TDengine\nDESCRIPTION: SQL syntax for altering virtual subtables including modifying tag values and changing column sources.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/05-virtualtable.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER VTABLE [db_name.]vtb_name alter_table_clause\n\nalter_table_clause: {\n  ALTER COLUMN vtb_col_name SET table_name.col_name\n  | SET TAG tag_name = new_tag_value\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid SQL statement: SLIDING time exceeds window range\nDESCRIPTION: This snippet illustrates an invalid SQL statement where the SLIDING time exceeds the INTERVAL time range in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/05-basic/03-query.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM temp_tb_1 INTERVAL(1m) SLIDING(2m);\n```\n\n----------------------------------------\n\nTITLE: Establishing Native TDengine Connection in R\nDESCRIPTION: Example placeholder for establishing a native connection to TDengine database using R. This appears to be a documentation reference that would be populated with actual connection code.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/assets/resources/_connect_r.mdx#2025-04-16_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n{{#include docs/examples/R/connect_native.r:demo}}\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Source Files in CMake\nDESCRIPTION: Defines the source documentation files to be processed for HTML generation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset (AVRO_DOC_SRC\n    index.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Streaming Computations in TDengine SQL\nDESCRIPTION: Syntax for pausing and resuming streaming computation tasks, with options to ignore data written during pause.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nPAUSE STREAM [IF EXISTS] stream_name;\n\nRESUME STREAM [IF EXISTS] [IGNORE UNTREATED] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Collecting Source Files for Command Test\nDESCRIPTION: Uses AUX_SOURCE_DIRECTORY to automatically collect all source files in the current directory for the test executable\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/command/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nAUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n```\n\n----------------------------------------\n\nTITLE: ZLib Library Target Configuration\nDESCRIPTION: Defines the main ZLib library targets including shared and static libraries, setting up source files and build properties.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(zlib SHARED ${ZLIB_SRCS} ${ZLIB_DLL_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})\nadd_library(zlibstatic STATIC ${ZLIB_SRCS} ${ZLIB_PUBLIC_HDRS} ${ZLIB_PRIVATE_HDRS})\nset_target_properties(zlib PROPERTIES DEFINE_SYMBOL ZLIB_DLL)\nset_target_properties(zlib PROPERTIES SOVERSION 1)\n```\n\n----------------------------------------\n\nTITLE: Using IRATE Function in SQL\nDESCRIPTION: Calculates the instantaneous rate of increase using the last two samples in a time range. Handles decreasing values specially.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_69\n\nLANGUAGE: sql\nCODE:\n```\nIRATE(expr)\n```\n\n----------------------------------------\n\nTITLE: Example: Modifying L2 Norm UDF Buffer Size\nDESCRIPTION: Example of modifying the buffer size of an existing aggregate UDF.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/27-udf.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE AGGREGATE FUNCTION l2norm AS \"/home/taos/udf_example/libl2norm.so\" OUTPUTTYPE DOUBLE bufsize 64;\n```\n\n----------------------------------------\n\nTITLE: Checking for Required Libraries in CMake\nDESCRIPTION: Checks for the availability of compression libraries that Snappy might interact with.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/snappy/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckLibraryExists)\ncheck_library_exists(z zlibVersion \"\" HAVE_LIBZ)\ncheck_library_exists(lzo2 lzo1x_1_15_compress \"\" HAVE_LIBLZO2)\n```\n\n----------------------------------------\n\nTITLE: Connecting to TDengine via REST API\nDESCRIPTION: Establishes a connection to TDengine using the REST API, providing a more flexible and network-friendly connection method\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/01-connect/_connect_node.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{{#include docs/examples/node/restexample/connect.js}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wide Integer Source Files\nDESCRIPTION: Discovers source files in the current directory for the wide integer library using CMake's aux_source_directory command\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/decimal/src/detail/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\naux_source_directory(. WIDE_INTEGER_SRC)\n```\n\n----------------------------------------\n\nTITLE: Detecting Newlines in Text for Commit Message Formatting in C\nDESCRIPTION: A helper function that finds the offset of the first newline character in a text string, or returns the length of the text if no newline is found. This is used to extract the first line of commit messages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic int newline_offset(const char *text)\n{\n    const char *newline = strchr(text, '\\n');\n    if(!newline)\n        return strlen(text);\n    else\n        return (int)(newline - text);\n}\n```\n\n----------------------------------------\n\nTITLE: Indirect Circular Reference Example\nDESCRIPTION: Example showing how to create an indirect circular reference between two arrays, which should be avoided.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_5\n\nLANGUAGE: c\nCODE:\n```\njson_t *arr1 = json_array(), *arr2 = json_array();\njson_array_append(arr1, arr2);\njson_array_append(arr2, arr1);\n```\n\n----------------------------------------\n\nTITLE: TDengine Result Set Column Renaming\nDESCRIPTION: Example showing how to rename result set columns using AS keyword in TDengine queries.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/03-taos-sql/07-select.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ts, ts AS primary_key_ts FROM d1001;\n```\n\n----------------------------------------\n\nTITLE: Configuring Link and Include Directories\nDESCRIPTION: Sets up the basic link and include directories for the TDengine build environment, including paths for libraries and header files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/src/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nLINK_DIRECTORIES(${CMAKE_BINARY_DIR}/build/lib ${CMAKE_BINARY_DIR}/build/lib64)\nLINK_DIRECTORIES(/usr/lib /usr/lib64)\nINCLUDE_DIRECTORIES(/usr/local/taos/include)\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/../deps/avro/lang/c/src)\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/../deps/toolscJson/src)\nINCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/../../inc)\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Test Help Command in TDengine\nDESCRIPTION: Command to display help information and available test scenarios for the TSBS (Time Series Benchmark Suite) test script in TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./tsbs_test.sh -h\n```\n\n----------------------------------------\n\nTITLE: Starting TDengine Service on Linux\nDESCRIPTION: Command to start the TDengine service using systemctl. This launches the taosd daemon process.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/04-get-started/_01-install.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start taosd\n```\n\n----------------------------------------\n\nTITLE: Pausing a Stream in TDengine\nDESCRIPTION: SQL statement for temporarily suspending a stream computing task, with optional IF EXISTS clause to handle non-existent streams.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nPAUSE STREAM [IF EXISTS] stream_name;\n```\n\n----------------------------------------\n\nTITLE: Installing DevToolset on CentOS\nDESCRIPTION: Commands to install and enable developer toolset on CentOS systems\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install centos-release-scl\nsudo yum install devtoolset-9 devtoolset-9-libatomic-devel\nscl enable devtoolset-9 -- bash\n```\n\n----------------------------------------\n\nTITLE: Getting Error Code in TDengine C Client\nDESCRIPTION: Get the error code for the most recent API call failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nint taos_errno(TAOS_RES *res)\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Check in C\nDESCRIPTION: Example of using JANSSON_VERSION_HEX macro to conditionally compile code based on Jansson library version.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/apiref.rst#2025-04-16_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#if JANSSON_VERSION_HEX >= 0x010300\n/* Code specific to version 1.3 and above */\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuration Example for TDengine Compression\nDESCRIPTION: Example YAML frontmatter showing document metadata configuration for the data compression documentation page.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/26-tdinternal/11-compress.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Data Compression\nslug: /inside-tdengine/data-compression\n---\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Configuration\nDESCRIPTION: Conditionally adds the test subdirectory when BUILD_TEST flag is enabled.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/utils/tsim/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(${BUILD_TEST})\n    ADD_SUBDIRECTORY(test)\nENDIF(${BUILD_TEST})\n```\n\n----------------------------------------\n\nTITLE: Deleting and Showing Streaming Computations in TDengine SQL\nDESCRIPTION: Syntax for deleting a streaming computation and displaying information about existing streaming computations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/14-stream.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDROP STREAM [IF EXISTS] stream_name;\n\nSHOW STREAMS;\n\nSELECT * from information_schema.`ins_streams`;\n```\n\n----------------------------------------\n\nTITLE: Generic Value Implementation Functions - C\nDESCRIPTION: Functions for creating and managing generic Avro value implementations that work with any schema type.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#include <avro.h>\n\navro_value_iface_t *avro_generic_class_from_schema(avro_schema_t schema);\nint avro_generic_value_new(const avro_value_iface_t *iface, avro_value_t *dest);\nvoid avro_generic_value_free(avro_value_t *self);\n```\n\n----------------------------------------\n\nTITLE: Setter Methods for Scalar Avro Values in C\nDESCRIPTION: Declares setter methods for setting the contents of scalar Avro values, including primitive types, bytes, and strings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <stdint.h>\n#include <stdlib.h>\n#include <avro.h>\n\nint avro_value_set_boolean(avro_value_t *value, int src);\nint avro_value_set_bytes(avro_value_t *value,\n                         void *buf, size_t size);\nint avro_value_set_double(avro_value_t *value, double src);\nint avro_value_set_float(avro_value_t *value, float src);\nint avro_value_set_int(avro_value_t *value, int32_t src);\nint avro_value_set_long(avro_value_t *value, int64_t src);\nint avro_value_set_null(avro_value_t *value);\nint avro_value_set_string(avro_value_t *value, const char *src);\n```\n\n----------------------------------------\n\nTITLE: Leader Processing Eventual Consistency Write Request in TDengine (PlantUML)\nDESCRIPTION: Sequence diagram depicting how a leader node handles an eventual consistency write request in TDengine, including request processing and replication.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/doxgen/scratch.md#2025-04-16_snippet_3\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml leader_process_eventual_consistency\nbox \"dnode1\"\n    participant CRPC as crpc\n    participant VNODE as vnode\n    participant SYNC as sync\nend box\n\n-> crpc: create table/submit req\n\ngroup #pink \"In CRPC threads\"\n    crpc -> vnode:vnodeProcessReq()\n    note right\n        A callback function\n        run by CRPC thread\n        to put the request\n        to a vnode queue\n    end note\nend\n\ngroup #lightblue \"In VNODE worker threads\"\n    vnode -> vnode: vnodeProcessReqs()\n    note right\n        VNODE process requests\n        accumulated in a \n        vnode write queue and\n        process the batch reqs\n        as a whole\n    end note\n\n    vnode -> sync: syncProcessReqs()\n\n    sync -> : replication req1\n    sync -> : replication req2\n\n    sync -> vnode: notify apply\nend\n\n\ngroup #lightblue \"In VNODE worker threads\"\n    vnode -> vnode: vnodeApplyReqs()\n    vnode -> crpc:\nend\n\n<- crpc: create table/submit rsp\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Index Test Executables with Conditional Platform Check in CMake\nDESCRIPTION: This snippet defines multiple test executables for the TDengine index module, including their source files, include directories, library dependencies, and test targets. The configuration only applies to non-Darwin platforms (i.e., not macOS) as indicated by the IF(NOT TD_DARWIN) conditional statement.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/index/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT TD_DARWIN)\n  add_executable(idxTest \"\")\n  add_executable(idxFstTest \"\")\n  add_executable(idxFstUT \"\")\n  add_executable(idxUtilUT \"\")\n  add_executable(idxJsonUT \"\")\n  add_executable(idxFstUtilUT \"\")\n\n  target_sources(idxTest\n    PRIVATE\n    \"indexTests.cc\"\n  )\n  target_sources(idxFstTest\n    PRIVATE\n    \"fstTest.cc\"\n  )\n\n  target_sources(idxFstUT\n    PRIVATE\n    \"fstUT.cc\"\n  )\n  target_sources(idxUtilUT\n    PRIVATE\n    \"utilUT.cc\"\n  )\n\n  target_sources(idxJsonUT\n    PRIVATE\n    \"jsonUT.cc\"\n  )\n  target_sources(idxFstUtilUT\n    PRIVATE\n    \"fstUtilUT.cc\"\n  )\n\n  target_include_directories(idxTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n  target_include_directories(idxFstTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n  target_sources(idxJsonUT\n    PRIVATE\n    \"jsonUT.cc\"\n  )\n  target_include_directories(idxTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n  target_include_directories(idxFstTest\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n\n  target_include_directories(idxFstUT\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n\n  target_include_directories(idxUtilUT\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n\n  target_include_directories(idxJsonUT\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n  target_include_directories(idxFstUtilUT\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n  target_include_directories(idxJsonUT\n    PUBLIC\n    \"${TD_SOURCE_DIR}/include/libs/index\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/../inc\"\n  )\n\n  target_link_libraries(idxTest\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n  target_link_libraries(idxFstTest\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n  target_link_libraries(idxFstUT\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n\n  target_link_libraries(idxTest\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n  target_link_libraries(idxFstTest\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n  target_link_libraries(idxFstUT\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n\n  target_link_libraries(idxUtilUT\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n\n  target_link_libraries(idxJsonUT\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n  target_link_libraries(idxFstUtilUT\n    os\n    util\n    common\n    gtest_main\n    index\n  )\n\n  add_test(\n    NAME idxJsonUT\n    COMMAND idxJsonUT\n  )\n  add_test(\n    NAME idxFstUtilUT\n    COMMAND idxFstUtilUT\n  )\n\n  add_test(\n    NAME idxTest\n    COMMAND idxTest\n  )\n  add_test(\n    NAME idxUtilUT\n    COMMAND idxUtilUT\n  )\n  add_test(\n    NAME idxFstUT\n    COMMAND idxFstUT\n  )\n  add_test(\n    NAME idxFstTest\n    COMMAND idxFstTest\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Running specific pytest commands\nDESCRIPTION: This snippet provides examples of running pytest with specific command line arguments for specialized testing scenarios in TDengine, demonstrating options like log levels, specific markers, and YAML configurations.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/test/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest cases/data_write/sql_statement/test_insert_double.py\npytest cases/data_write/sql_statement/test_insert_double.py::TestInsertDouble::test_value\npytest -m cluster\npytest --log-level=DEBUG\npytest --yaml_file=ci_default.yaml cases/data_write/sql_statement/test_insert_double.py\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites on macOS\nDESCRIPTION: Installs required tools and libraries for building TDengine on macOS using Homebrew.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install argp-standalone gflags pkgconfig\n```\n\n----------------------------------------\n\nTITLE: Running TDgpt Installation Script\nDESCRIPTION: Commands to navigate to the extracted TDgpt directory and run the installation script.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncd TDengine-TDgpt-<version>\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Version-Specific Package Requirements\nDESCRIPTION: Demonstrates various version specification techniques for Python package dependencies, including exact matching, minimum versions, and version exclusion\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/python/taosdemo/requirements.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n#docopt == 0.6.1\n#keyring >= 4.1.1\n#coverage != 3.5\n#Mopidy-Dirble ~= 1.1\n```\n\n----------------------------------------\n\nTITLE: Showing Streams in TDengine\nDESCRIPTION: SQL statements for viewing stream computing tasks, including basic and detailed information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/06-advanced/03-stream.md#2025-04-16_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW STREAMS;\n```\n\n----------------------------------------\n\nTITLE: Accessing Avro Array Elements\nDESCRIPTION: Functions for working with Avro array values, including getting the size, accessing elements by index, and appending new elements.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#include <stdlib.h>\n#include <avro.h>\n\nint avro_value_get_size(const avro_value_t *array, size_t *size);\nint avro_value_get_by_index(const avro_value_t *array, size_t index,\n                            avro_value_t *element, const char **unused);\nint avro_value_append(avro_value_t *array, avro_value_t *element,\n                      size_t *new_index);\n```\n\n----------------------------------------\n\nTITLE: Conditional Include Directories and Linking for Wingetopt\nDESCRIPTION: This snippet conditionally includes the wingetopt library if BUILD_WINGETOPT is enabled. It adds the wingetopt source directory to the include paths and links the wingetopt library to the 'plannerTest' target.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/planner/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n    if(${BUILD_WINGETOPT})\n        target_include_directories(\n            plannerTest\n            PUBLIC \"${TD_SOURCE_DIR}/contrib/wingetopt/src\"\n        )\n        target_link_libraries(plannerTest PUBLIC wingetopt)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Installing C Compiler on Ubuntu\nDESCRIPTION: Commands to install a C compiler (build-essential) required for TDgpt local installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt install build-essential\n```\n\n----------------------------------------\n\nTITLE: CMake: Add executable (commented out)\nDESCRIPTION: This commented-out line defines an executable named `mqnodeTest` using the source files specified by the variable `MNODE_QNODE_TEST_SRC`. The `add_executable` command is used to create the executable target in the CMake build system.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mnode/impl/test/qnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n\"# add_executable(mqnodeTest ${MNODE_QNODE_TEST_SRC})\"\n```\n\n----------------------------------------\n\nTITLE: Manipulating Avro Map Values\nDESCRIPTION: Functions for working with Avro map values, including getting the map size, retrieving elements by key or index, and adding new key-value pairs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/index.txt#2025-04-16_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include <stdlib.h>\n#include <avro.h>\n\nint avro_value_get_size(const avro_value_t *map, size_t *size);\nint avro_value_get_by_name(const avro_value_t *map, const char *key,\n                           avro_value_t *element, size_t *index);\nint avro_value_get_by_index(const avro_value_t *map, size_t index,\n                            avro_value_t *element, const char **key);\nint avro_value_add(avro_value_t *map,\n                   const char *key, avro_value_t *element,\n                   size_t *index, int *is_new);\n```\n\n----------------------------------------\n\nTITLE: Show Applications Command\nDESCRIPTION: Displays information about client applications connected to the cluster.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW APPS;\n```\n\n----------------------------------------\n\nTITLE: Jansson Header Include\nDESCRIPTION: Required header inclusion for using Jansson in C programs.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/gettingstarted.rst#2025-04-16_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <jansson.h>\n```\n\n----------------------------------------\n\nTITLE: Using CLIENT_VERSION Function in SQL\nDESCRIPTION: Returns the client version information of the TDengine connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_74\n\nLANGUAGE: sql\nCODE:\n```\nSELECT CLIENT_VERSION();\n```\n\n----------------------------------------\n\nTITLE: Defining Non-compressed Block Structure in DEFLATE\nDESCRIPTION: This snippet illustrates the structure of a non-compressed block in the DEFLATE format. It shows the byte-aligned format with LEN (block length) and NLEN (one's complement of LEN) fields followed by literal data.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1951.txt#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  0   1   2   3   4...\n+---+---+---+---+================================+\n|  LEN  | NLEN  |... LEN bytes of literal data...|\n+---+---+---+---+================================+\n```\n\n----------------------------------------\n\nTITLE: Docusaurus DocCardList Rendering in MDX\nDESCRIPTION: Renders a dynamic list of documentation cards based on the current sidebar category using Docusaurus theme utilities\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/05-data-in/index.md#2025-04-16_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Time-Series Foundation Models Using Python\nDESCRIPTION: This snippet provides the necessary shell commands to install dependencies required for running Time-Series Foundation Models in a Python environment. Specifically, it includes installations for PyTorch, Flask, Transformers, and Accelerate packages.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/04-tsfm/index.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install torch==2.4.1+cpu -f https://download.pytorch.org/whl/torch_stable.html\npip install flask==3.0.3\npip install transformers==4.40.0\npip install accelerate\n```\n\n----------------------------------------\n\nTITLE: Add Definitions Based on Grant Configuration\nDESCRIPTION: This snippet checks if `GRANT_CFG_INCLUDE_DIR` is defined. If it is, it adds a compiler definition `-DGRANTS_CFG` to enable grants configuration.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/dnode/mgmt/mgmt_dnode/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED GRANT_CFG_INCLUDE_DIR)\n  add_definitions(-DGRANTS_CFG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Container Status\nDESCRIPTION: Command to list running Docker containers and verify TDgpt container status.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Setting Up Build Configuration for qworker Unit Test with CMake\nDESCRIPTION: This snippet configures the build environment for the qworker unit test. It ensures that C++11 is used, populates the source files, creates an executable target for testing, and links it against various required libraries for functionality such as operating system utilities, common utilities, transport, and GoogleTest framework. Adjustments to include directories are also specified for public and private headers.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/source/libs/qworker/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nMESSAGE(STATUS \"build qworker unit test\")\n\nIF(NOT TD_DARWIN)\n        # GoogleTest requires at least C++11\n        SET(CMAKE_CXX_STANDARD 11)\n        AUX_SOURCE_DIRECTORY(${CMAKE_CURRENT_SOURCE_DIR} SOURCE_LIST)\n\n        ADD_EXECUTABLE(qworkerTest ${SOURCE_LIST})\n        TARGET_LINK_LIBRARIES(\n                qworkerTest\n                PUBLIC os util common transport gtest qcom nodes planner qworker executor index\n        )\n\n        TARGET_INCLUDE_DIRECTORIES(\n                qworkerTest\n                PUBLIC \"${TD_SOURCE_DIR}/include/libs/qworker/\"\n                PRIVATE \"${TD_SOURCE_DIR}/source/libs/qworker/inc\"\n        )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Codes in DEFLATE Compression\nDESCRIPTION: This table defines the distance codes used in DEFLATE compression. It shows the mapping between codes, extra bits, and the resulting distances they represent.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/zlib-1.2.13/doc/rfc1951.txt#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n              Extra           Extra               Extra\n         Code Bits Dist  Code Bits   Dist     Code Bits Distance\n         ---- ---- ----  ---- ----  ------    ---- ---- --------\n           0   0    1     10   4     33-48    20    9   1025-1536\n           1   0    2     11   4     49-64    21    9   1537-2048\n           2   0    3     12   5     65-96    22   10   2049-3072\n           3   0    4     13   5     97-128   23   10   3073-4096\n           4   1   5,6    14   6    129-192   24   11   4097-6144\n           5   1   7,8    15   6    193-256   25   11   6145-8192\n           6   2   9-12   16   7    257-384   26   12  8193-12288\n           7   2  13-16   17   7    385-512   27   12 12289-16384\n           8   3  17-24   18   8    513-768   28   13 16385-24576\n           9   3  25-32   19   8   769-1024   29   13 24577-32768\n```\n\n----------------------------------------\n\nTITLE: Show Cluster Information Command\nDESCRIPTION: Displays current cluster information.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/24-show.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW CLUSTER;\n```\n\n----------------------------------------\n\nTITLE: Installing PiPy on Ubuntu\nDESCRIPTION: Commands to install PiPy (Python package installer) and update PATH for TDgpt local installation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/02-tutorial.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sS https://bootstrap.pypa.io/get-pip.py | python3.10\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:~/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Restarting Seeq Server - Step 3\nDESCRIPTION: This shell command restarts the Seeq server after configuration changes. It is crucial to apply the new settings for the integration with TDengine.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/05-bi/09-seeq.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo seeq restart\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request and Parsing JSON Response with Jansson\nDESCRIPTION: Code that performs the HTTP request, parses the JSON response using Jansson's json_loads function, and handles potential errors. Shows proper memory management by freeing the HTTP response text after parsing.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntext = request(url);\nif(!text)\n    return 1;\n\nroot = json_loads(text, 0, &error);\nfree(text);\n\nif(!root)\n{\n    fprintf(stderr, \"error: on line %d: %s\\n\", error.line, error.text);\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Unix Build Configuration Commands\nDESCRIPTION: Basic commands for configuring and building Jansson on Unix-like systems using GNU Autotools.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/gettingstarted.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./configure\nmake\nmake check\nmake install\n```\n\n----------------------------------------\n\nTITLE: Inserting Schemaless Raw Data with Request ID in TDengine (C)\nDESCRIPTION: Performs a schemaless batch insert operation, writing row protocol text data into TDengine. Similar to `ws_schemaless_insert_raw`, but also accepts a `reqid` parameter to track the function call chain. Returns a pointer to a `WS_RES` structure or NULL on failure.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n\"WS_RES *ws_schemaless_insert_raw_with_reqid(WS_TAOS *taos,\n                                            const char *lines,\n                                            int len,\n                                            int32_t *totalRows,\n                                            int protocol,\n                                            int precision,\n                                            uint64_t reqid)\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and useCurrentSidebarCategory in Docusaurus\nDESCRIPTION: This snippet imports the 'DocCardList' component from Docusaurus and a hook 'useCurrentSidebarCategory'. It facilitates the rendering of a list of documentation cards based on the current sidebar category. Dependencies include '@theme/DocCardList' and '@docusaurus/theme-common'. The input is the current sidebar category items, and the output is a rendered list of documentation cards.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/06-tdgpt/09-dev/02-algo/index.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Importing Components for MDX Integration\nDESCRIPTION: This snippet imports components necessary for creating a document card list in an MDX environment. It specifically uses the DocCardList from the Docusaurus theme and hooks from Docusaurus' common package for current sidebar category context.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/10-third-party/01-collection/index.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for JSON Integer Values in C\nDESCRIPTION: Integer values are mapped to json_int_t type which is typedef'd as either long long or long depending on compiler support.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/conformance.rst#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef long long json_int_t;  // or typedef long json_int_t\n```\n\n----------------------------------------\n\nTITLE: Defining URL Format and Size Constants for GitHub API Requests\nDESCRIPTION: Preprocessor definitions that specify the URL format for GitHub API requests and the buffer size for storing the URL. These constants are used when building the request URL with user and repository parameters.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/jansson/doc/tutorial.rst#2025-04-16_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define URL_FORMAT   \"https://api.github.com/repos/%s/%s/commits\"\n#define URL_SIZE     256\n```\n\n----------------------------------------\n\nTITLE: Rename Table with Prefix using Transform\nDESCRIPTION: This command shows how to rename tables by adding a prefix using the `--transform` option in taosX. It demonstrates the syntax for using `rename-table:prefix:<prefix>` to modify table names.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/01-components/04-taosx.md#2025-04-16_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n\"--transform rename-table:prefix:<prefix>\"\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and Sidebar Category in Docusaurus\nDESCRIPTION: This snippet imports the DocCardList component and the useCurrentSidebarCategory hook from Docusaurus. It utilizes these imports to render a list of document cards based on the current sidebar category, enhancing the navigational elements in the documentation.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/06-advanced/index.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Checking S3 Configuration\nDESCRIPTION: This code snippet demonstrates how to check the availability of the configured S3 service using the taosd command with the --checks3 option. This command will output error messages if the S3 service is not accessible based on the configurations in taos.cfg.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/08-operation/12-multi.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"taosd --checks3\"\n```\n\n----------------------------------------\n\nTITLE: Executing TDengine Sync Tests in Shell\nDESCRIPTION: Shell commands to run sync tests for TDengine, including scenarios with different numbers of replicas and virtual groups for election processes.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tests/script/jenkins/clusterCase.txt#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./test.sh -f tsim/sync/3Replica5VgElect.sim\n./test.sh -f tsim/sync/oneReplica1VgElect.sim\n./test.sh -f tsim/sync/oneReplica5VgElect.sim\n```\n\n----------------------------------------\n\nTITLE: Including Platform-Specific Headers for Windows Compatibility\nDESCRIPTION: This code snippet demonstrates how to include platform-specific headers for Windows compatibility in test files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/README.maintaining_win32.txt#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#ifdef _WIN32\n#include \"msdirent.h\"\n#else\n#include <dirent.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: Importing the taosrest module in Python\nDESCRIPTION: This Python code snippet demonstrates how to import the `taosrest` module. Successful import verifies the correct installation of the TDengine Python connector for REST API connections.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/01-connect.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"import taosrest\"\n```\n\n----------------------------------------\n\nTITLE: Setting a UBigint value in Param object\nDESCRIPTION: This function sets a UBigint value at a specific offset (column or tag) within the `Param` object. It takes the offset (`offset`) and the UBigint value (`value`) as input.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/14-reference/05-connector/20-go.md#2025-04-16_snippet_55\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *Param) SetUBigint(offset int, value uint)\"\n```\n\n----------------------------------------\n\nTITLE: Setting TDengine Connection Options in C\nDESCRIPTION: Set connection-specific options including charset, timezone, user IP, and user app. These settings only affect the current connection.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/05-connector/10-cpp.mdx#2025-04-16_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint taos_options_connection(TAOS *taos, TSDB_OPTION_CONNECTION option, const void *arg, ...)\n```\n\n----------------------------------------\n\nTITLE: Running the TDengine Demo Application\nDESCRIPTION: This command is used to execute the TDengine demonstration script, providing multiple option parameters for customizing the runtime behavior such as host, user credentials, and database settings.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/examples/python/taosdemo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"Usage: ./taosdemo.py [OPTION...]\\n\\nAuthor: Shuduo Sang <sangshuduo@gmail.com>\\n\\n\\t-H, --help                        Show usage.\\n\\t-N, --native                      flag, Use native interface if set. Default is using RESTful interface.\\n\\t-h, --host <hostname>             host, The host to connect to TDengine. Default is localhost.\\n\\t-p, --port <port>                 port, The TCP/IP port number to use for the connection. Default is 0.\\n\\t-u, --user <username>             user, The user name to use when connecting to the server. Default is 'root'.\\n\\t-P, --password <password>         password, The password to use when connecting to the server. Default is 'taosdata'.\\n\\t-l, --colsPerRec <number>         num_of_columns_per_record, The number of columns per record. Default is 3.\\n\\t-d, --dbname <dbname>             database, Destination database. Default is 'test'.\\n\\t-a, --replica <replications>      replica, Set the replica parameters of the database, Default 1, min: 1, max: 5.\\n\\t-m, --tbname <table prefix>       table_prefix, Table prefix name. Default is 't'.\\n\\t-M, --stable                      flag, Use super table. Default is no\\n\\t-s, --stbname <stable prefix>     stable_prefix, STable prefix name. Default is 'st'\\n\\t-Q, --query <DEFAULT | NO | command>   query, Execute query command. set 'DEFAULT' means select * from each table\\n\\t-T, --threads <number>            num_of_threads, The number of threads. Default is 1.\\n\\t-C, --processes <number>          num_of_processes, The number of threads. Default is 1.\\n\\t-r, --batch <number>              num_of_records_per_req, The number of records per request. Default is 1000.\\n\\t-t, --numOfTb <number>            num_of_tables, The number of tables. Default is 1.\\n\\t-n, --numOfRec <number>           num_of_records_per_table, The number of records per table. Default is 1.\\n\\t-c, --config <path>               config_directory, Configuration directory. Default is '/etc/taos/'.\\n\\t-x, --inserOnly                   flag, Insert only flag.\\n\\t-O, --outOfOrder                  out of order data insert, 0: In order, 1: Out of order. Default is in order.\\n\\t-R, --rateOOOO <number>           rate, Out of order data's rate--if order=1 Default 10, min: 0, max: 50.\\n\\t-D, --deleteMethod <number>       Delete data methods 0: don't delete, 1: delete by table, 2: delete by stable, 3: delete by database.\\n\\t-v, --verbose                     Print verbose output\\n\\t-g, --debug                       Print debug output\\n\\t-y, --skipPrompt                  Skip read key for continous test, default is not skip\"\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Generation Configuration in CMake\nDESCRIPTION: Sets up custom build commands and targets for converting asciidoc files to HTML, including version information and table of contents. Handles installation of generated documentation files.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/tools/taos-tools/deps/avro/lang/c/docs/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (ASCIIDOC_EXECUTABLE AND SOURCE_HIGHLIGHT_EXECUTABLE)\n    foreach(_file ${AVRO_DOC_SRC})\n        get_filename_component(_file_we ${_file} NAME_WE)\n        set(_file_path \"${CMAKE_CURRENT_SOURCE_DIR}/${_file}\")\n        set(_html_out \"${CMAKE_CURRENT_BINARY_DIR}/${_file_we}.html\")\n        add_custom_command(\n            OUTPUT \"${_html_out}\"\n            COMMAND ${ASCIIDOC_EXECUTABLE}\n                -a avro_version=${AVRO_VERSION}\n                -a libavro_version=${LIBAVRO_VERSION}\n                -a toc\n                --unsafe -n -o \"${_html_out}\" \"${_file_path}\"\n            DEPENDS \"${_file_path}\"\n            COMMENT \"asciidoc ${_file}\"\n        )\n        install(FILES \"${_html_out}\" DESTINATION share/doc/avro-c)\n        add_custom_target(\"${_file_we}_html\" ALL echo -n\n            DEPENDS \"${_file}\" \"${_html_out}\"\n        )\n        add_custom_target(docs DEPENDS \"${_html_out}\")\n    endforeach(_file)\nelse(ASCIIDOC_EXECUTABLE AND SOURCE_HIGHLIGHT_EXECUTABLE)\n    message(WARNING \"asciidoc and/or source-highlight not found. HTML documentation will *NOT* be built.\")\nendif(ASCIIDOC_EXECUTABLE AND SOURCE_HIGHLIGHT_EXECUTABLE)\n```\n\n----------------------------------------\n\nTITLE: Compiling TDengine with Dependencies\nDESCRIPTION: This snippet shows the process of installing dependencies, configuring, and compiling TDengine. It installs libuv1-dev and liblz4-dev, runs autoreconf, configures with examples enabled, and then builds the project.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/contrib/test/craft/help.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libuv1-dev liblz4-dev\nautoreconf -i\n./configure --enable-example\nmake\n```\n\n----------------------------------------\n\nTITLE: Including Python Native Parameter Binding Example\nDESCRIPTION: This Python snippet demonstrates the use of parameter binding with a native approach for inserting data into TDengine, ensuring efficient SQL execution.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/07-develop/05-stmt.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{{#include docs/examples/python/stmt2_native.py}}\n```\n\n----------------------------------------\n\nTITLE: Meters Class for Data Serialization in Java\nDESCRIPTION: The 'Meters' class provides necessary methods for serialization and deserialization of data records, essential for efficient data transfer to and from Kafka.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/en/07-develop/15-high.md#2025-04-16_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n```java\n{{#include docs/examples/JDBC/highvolume/src/main/java/com/taos/example/highvolume/Meters.java}}\n```\n```\n\n----------------------------------------\n\nTITLE: Using DEGREES Function in SQL\nDESCRIPTION: The DEGREES function converts radians to degrees. It returns a DOUBLE value and works with numeric data types. It can be used in both inner and outer queries for tables and super tables. Available from version 3.3.3.0.\nSOURCE: https://github.com/taosdata/TDengine/blob/main/docs/zh/14-reference/03-taos-sql/10-function.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDEGREES(expr)\n```"
  }
]