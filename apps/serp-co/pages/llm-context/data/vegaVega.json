[
  {
    "owner": "vega",
    "repo": "vega",
    "content": "TITLE: Basic Vega Bar Chart Specification\nDESCRIPTION: A complete Vega specification for a basic bar chart. This JSON defines the structure, data, scales, and visual elements needed to create an interactive bar chart visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{% include_relative bar-chart.vg.json %}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Dataflow Evaluation in Vega\nDESCRIPTION: Evaluates the dataflow graph and returns a Promise that resolves upon completion of processing and rendering. Accepts optional encode, prerun, and postrun arguments for custom behavior.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.runAsync([encode, prerun, postrun])\n```\n\n----------------------------------------\n\nTITLE: Creating Code Generator for Vega Expressions\nDESCRIPTION: Create a new output code generator for Vega expressions with custom configuration options. The generator takes a parsed AST as input and returns eval-able JavaScript code with tracked fields and globals.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-expression/README.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncodegen(options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Transform in Vega JSON\nDESCRIPTION: Example showing how to configure a label transform for a scatter plot with non-overlapping labels. The transform is applied to a text mark that references point data and avoids overlapping with a trend line. The configuration includes positioning anchors, offset settings, and size parameters.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/label.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"marks\": [\n    {\n      \"name\": \"points\",\n      \"type\": \"symbol\",\n      \"from\": {\"data\": \"movies\"},\n      \"encode\": {\n        \"enter\": {\n          \"x\": {\"scale\": \"x\", \"field\": \"Rotten Tomatoes Rating\"},\n          \"y\": {\"scale\": \"y\", \"field\": \"IMDB Rating\"},\n          \"size\": {\"value\": 25},\n          \"fillOpacity\": {\"value\": 0.5}\n        }\n      }\n    },\n    {\n      \"name\": \"trend\",\n      \"type\": \"line\",\n      \"from\": {\"data\": \"fit\"},\n      \"encode\": {\n        \"enter\": {\n          \"x\": {\"scale\": \"x\", \"field\": \"u\"},\n          \"y\": {\"scale\": \"y\", \"field\": \"v\"},\n          \"stroke\": {\"value\": \"firebrick\"}\n        }\n      }\n    },\n    {\n      \"type\": \"text\",\n      \"from\": {\"data\": \"points\"},\n      \"encode\": {\n        \"enter\": {\n          \"text\": {\"field\": \"datum.Title\"},\n          \"fontSize\": {\"value\": 8}\n        }\n      },\n      \"transform\": [\n        {\n          \"type\": \"label\",\n          \"avoidMarks\": [\"trend\"],\n          \"anchor\": [\"top\", \"bottom\", \"right\", \"left\"],\n          \"offset\": [1],\n          \"size\": {\"signal\": \"[width + 60, height]\"}\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Filtering with ResolveFilter Transform in Vega\nDESCRIPTION: This snippet demonstrates how to set up cross-filtering using the resolvefilter transform in Vega. It shows the configuration of signals, data sources, and multiple resolvefilter transforms to filter flight data based on delay, time, and distance.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/resolvefilter.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signals\": [\n    { \"name\": \"delayRange\", \"value\": [-60, 180] },\n    { \"name\": \"timeRange\", \"value\": [0, 24] },\n    { \"name\": \"distanceRange\", \"value\": [0, 2400] },\n  ],\n  \"data\": [\n    {\n      \"name\": \"flights\",\n      \"url\": \"data/flights-200k.json\",\n      \"transform\": [\n        {\n          \"type\": \"crossfilter\",\n          \"signal\": \"xfilter\",\n          \"fields\": [\"delay\", \"time\", \"distance\"],\n          \"query\": [\n            {\"signal\": \"delayRange\"},\n            {\"signal\": \"timeRange\"},\n            {\"signal\": \"distanceRange\"}\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"filterTimeDistance\",\n      \"source\": \"flights\",\n      \"transform\": [\n        {\n          \"type\": \"resolvefilter\",\n          \"filter\": {\"signal\": \"xfilter\"},\n          \"ignore\": 1,\n\n        },\n        ...\n      ]\n    },\n    {\n      \"name\": \"filterDelayDistance\",\n      \"source\": \"flights\",\n      \"transform\": [\n        {\n          \"type\": \"resolvefilter\",\n          \"filter\": {\"signal\": \"xfilter\"},\n          \"ignore\": 2\n        },\n        ...\n      ]\n    },\n    {\n      \"name\": \"filterDelayTime\",\n      \"source\": \"flights\",\n      \"transform\": [\n        {\n          \"type\": \"resolvefilter\",\n          \"filter\": {\"signal\": \"xfilter\"},\n          \"ignore\": 4\n        },\n        ...\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Polynomial Regression in Vega (JavaScript)\nDESCRIPTION: Fits a polynomial regression model of specified order to the input data. Returns an object with coefficients, prediction function, and R-squared value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionPoly(data, x, y, order)\n```\n\n----------------------------------------\n\nTITLE: Configuring GeoJSON Transform in Vega JSON\nDESCRIPTION: This snippet demonstrates how to include a geojson transform in a data transform array and bind it to a new signal name. It specifies the fields for longitude and latitude data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/geojson.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"geojson\",\n  \"fields\": [\"longitude\", \"latitude\"],\n  \"signal\": \"geodata\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Downloading PNG Image from Vega View\nDESCRIPTION: Demonstrates how to generate a PNG snapshot of a Vega visualization and trigger its download using the toImageURL method. Creates a temporary link element to handle the download and includes basic error handling.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// generate a PNG snapshot and then download the image\nview.toImageURL('png').then(function(url) {\n  var link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('target', '_blank');\n  link.setAttribute('download', 'vega-export.png');\n  link.dispatchEvent(new MouseEvent('click'));\n}).catch(function(error) { /* error handling */ });\n```\n\n----------------------------------------\n\nTITLE: Basic Vega Specification Structure in JSON\nDESCRIPTION: This snippet demonstrates the basic outline of a Vega specification in JSON format. It includes placeholders for the main components such as data, scales, axes, and marks that would be defined in a complete visualization specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/specification.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n  \"description\": \"A specification outline example.\",\n  \"width\": 500,\n  \"height\": 200,\n  \"padding\": 5,\n  \"autosize\": \"pad\",\n\n  \"signals\": [],\n  \"data\": [],\n  \"scales\": [],\n  \"projections\": [],\n  \"axes\": [],\n  \"legends\": [],\n  \"marks\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interactive Signal with Event Handling in Vega\nDESCRIPTION: Example showing a complete signal definition that updates based on mousemove events, including its usage in data transformations, scales and marks. The signal 'indexDate' updates in response to mouse movement and drives visualization updates.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signals\": [\n    {\n      \"name\": \"indexDate\",\n      \"description\": \"A date value that updates in response to mousemove.\",\n      \"update\": \"datetime(2005, 0, 1)\",\n      \"on\": [{\"events\": \"mousemove\", \"update\": \"invert('xscale', x())\"}]\n    }\n  ],\n  \"data\": [\n    { \"name\": \"stocks\", ... },\n    {\n      \"name\": \"index\",\n      \"source\": \"stocks\",\n      \"transform\": [\n        {\n          \"type\": \"filter\",\n          \"expr\": \"month(datum.date) === month(indexDate)\"\n        }\n      ]\n    }\n  ],\n  \"scales\": [\n    { \"name\": \"x\", \"type\": \"time\", ... }\n  ],\n  \"marks\": [\n    {\n      \"type\": \"rule\",\n      \"encode\": {\n        \"update\": {\n          \"x\": {\"scale\": \"x\", \"signal\": \"indexDate\"}\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Object Properties in Vega Expressions\nDESCRIPTION: Demonstrates how to access properties of the current input data object (datum) in Vega expressions using JavaScript syntax.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndatum.value\ndatum['My Value']\n```\n\n----------------------------------------\n\nTITLE: Initializing Vega View with Method Chaining\nDESCRIPTION: Creates a new Vega View instance and configures it using method chaining. Sets logging level, renderer type, parent DOM element, and hover processing before running the visualization asynchronously.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar view = new vega.View(runtime)\n  .logLevel(vega.Warn) // set view logging level\n  .renderer('svg')     // set render type (defaults to 'canvas')\n  .initialize('#view') // set parent DOM element\n  .hover();            // enable hover event processing, *only call once*!\n\nview.runAsync(); // evaluate and render the view\n```\n\n----------------------------------------\n\nTITLE: Modified Lookup Transform Result\nDESCRIPTION: Shows the result of the lookup transform when using the values parameter and default value. Demonstrates how specific fields are copied and default values are applied.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/lookup.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"foo\": \"A\", \"bar\": 28, \"obj\": \"label A\"},\n{\"foo\": \"B\", \"bar\": 55, \"obj\": \"label B\"},\n{\"foo\": \"C\", \"bar\": 43, \"obj\": \"label C\"},\n{\"foo\": \"C\", \"bar\": 91, \"obj\": \"label C\"},\n{\"foo\": \"D\", \"bar\": 81, \"obj\": \"some label\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing CrossFilter with ResolveFilter in Vega JSON\nDESCRIPTION: Example demonstrating how to set up cross-filtering for flight data across delay, time, and distance fields. Shows configuration of crossfilter transform with range queries and multiple resolvefilter transforms to filter data while ignoring specific dimensions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/crossfilter.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signals\": [\n    { \"name\": \"delayRange\", \"value\": [-60, 180] },\n    { \"name\": \"timeRange\", \"value\": [0, 24] },\n    { \"name\": \"distanceRange\", \"value\": [0, 2400] }\n  ],\n  \"data\": [\n    {\n      \"name\": \"flights\",\n      \"url\": \"data/flights-200k.json\",\n      \"transform\": [\n        {\n          \"type\": \"crossfilter\",\n          \"signal\": \"xfilter\",\n          \"fields\": [\"delay\", \"time\", \"distance\"],\n          \"query\": [\n            {\"signal\": \"delayRange\"},\n            {\"signal\": \"timeRange\"},\n            {\"signal\": \"distanceRange\"}\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"filterTimeDistance\",\n      \"source\": \"flights\",\n      \"transform\": [\n        {\n          \"type\": \"resolvefilter\",\n          \"filter\": {\"signal\": \"xfilter\"},\n          \"ignore\": 1\n        },\n        ...\n      ]\n    },\n    {\n      \"name\": \"filterDelayDistance\",\n      \"source\": \"flights\",\n      \"transform\": [\n        {\n          \"type\": \"resolvefilter\",\n          \"filter\": {\"signal\": \"xfilter\"},\n          \"ignore\": 2\n        },\n        ...\n      ]\n    },\n    {\n      \"name\": \"filterDelayTime\",\n      \"source\": \"flights\",\n      \"transform\": [\n        {\n          \"type\": \"resolvefilter\",\n          \"filter\": {\"signal\": \"xfilter\"},\n          \"ignore\": 4\n        },\n        ...\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Binning Examples in Vega\nDESCRIPTION: Examples of using the Vega bin() function to create histogram binning schemes with different parameters. Shows three different scenarios with varying extents and maxbins settings.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvega.bin({extent:[0, 1], maxbins:10}); // {start:0, stop:1, step:0.1}\nvega.bin({extent:[0, 1], maxbins:5}); // {start:0, stop:10, step:2}\nvega.bin({extent:[5, 10], maxbins:5}); // {start:5, stop:10, step:1}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pack Transform in Vega JSON\nDESCRIPTION: This snippet demonstrates how to configure the pack transform in Vega. It sets the field for sizing nodes, specifies padding between circles, and uses the full width and height of the view for layout.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/pack.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"pack\",\n  \"field\": \"value\",\n  \"padding\": 4,\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vega View with Constructor Options\nDESCRIPTION: Creates a new Vega View instance using a configuration object to set options like logging level, renderer type, container element, and hover processing.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar view = new vega.View(runtime, {\n    logLevel:  vega.Warn, // view logging level\n    renderer:  'svg',     // render type (defaults to 'canvas')\n    container: '#view',   // parent DOM element\n    hover:     true       // enable hover event processing\n  });\n\nview.runAsync(); // evaluate and render the view\n```\n\n----------------------------------------\n\nTITLE: Defining Scale Properties in Vega JSON\nDESCRIPTION: Example of defining scale properties in a Vega specification, including name, type, domain, and range.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"xScale\",\n  \"type\": \"linear\",\n  \"domain\": [0, 100],\n  \"range\": [0, 500],\n  \"round\": true,\n  \"nice\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vega using npm\nDESCRIPTION: This snippet shows how to install Vega using the npm package manager. It's a simple command that installs Vega for use in third-party libraries or applications.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vega\n```\n\n----------------------------------------\n\nTITLE: Configuring Nest Transform in Vega JSON\nDESCRIPTION: Demonstrates how to configure the nest transform in Vega to build a tree data structure from input data objects. It uses the 'job' and 'region' fields as keys for organizing the data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/nest.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"nest\",\n  \"keys\": [\"job\", \"region\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Heatmap from 2D Densities using KDE2D and Heatmap Transforms in Vega\nDESCRIPTION: This snippet demonstrates how to create a heatmap from 2D kernel density estimates. It uses the kde2d transform to compute densities and the heatmap transform to render the result, with a blue color and normalized opacity.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/heatmap.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"kde2d\",\n  \"x\": \"x_value\",\n  \"y\": \"y_value\",\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}],\n  \"as\": \"grid\"\n},\n{\n  \"type\": \"heatmap\",\n  \"field\": \"grid\",\n  \"color\": \"steelblue\",\n  \"opacity\": {\"expr\": \"datum.$value / datum.$max\"}\n}\n```\n\n----------------------------------------\n\nTITLE: LOESS Regression Implementation in Vega\nDESCRIPTION: Implements locally-estimated scatterplot smoothing (LOESS) regression. Creates non-parametric trend line using local weighted regressions. Takes data array, x and y accessors, and bandwidth parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLoess(data, x, y, bandwidth)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Transform for Horizontal Stacking with Multiple Sort Criteria in Vega\nDESCRIPTION: This example shows how to set up the stack transform for horizontal stacking in Vega. It groups by 'category', uses 'x' for stack widths, applies multiple sort criteria, and specifies custom output fields.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/stack.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stack\",\n  \"groupby\": [\"category\"],\n  \"field\": \"x\",\n  \"sort\": {\n    \"field\": [\"u\", \"v\"],\n    \"order\": [\"ascending\", \"descending\"]\n  },\n  \"as\": [\"x0\", \"x1\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Runtime Scope in Vega\nDESCRIPTION: Shows how to access the internal dataflow graph for advanced debugging. This provides direct access to the operators that compute values and process data in the visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/debugging.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nview._runtime // {signals: {}, data: {}, scales: {}, nodes: {}, subcontext: [], ...}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Vega\nDESCRIPTION: Example demonstrating how to add an event listener for click events in Vega. The handler receives the event instance and the currently active scenegraph item as arguments.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nview.addEventListener('click', function(event, item) {\n  console.log('CLICK', event, item);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Vega View with Async/Await\nDESCRIPTION: Creates and initializes a Vega View instance using async/await syntax, combining construction and execution in a single statement.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar view = await new vega.View(runtime, {\n    logLevel:  vega.Warn, // view logging level\n    renderer:  'svg',     // render type (defaults to 'canvas')\n    container: '#view',   // parent DOM element\n    hover:     true       // enable hover event processing\n  }).runAsync();          // evaluate and render the view\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Transform with Groupby in JSON\nDESCRIPTION: Shows how to use the aggregate transform with a groupby parameter to group data by a specific field.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/aggregate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"aggregate\",\n  \"groupby\": [\"foo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Data in Vega Specification\nDESCRIPTION: Example showing how to define data directly within a Vega specification using the 'values' property. This approach is useful for small datasets that don't require external loading.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/data.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"table\", \"values\": [12, 23, 47, 6, 52, 19]}\n```\n\n----------------------------------------\n\nTITLE: Importing Vega as ES Module\nDESCRIPTION: JavaScript code showing how to import Vega as a module when using bundlers like rollup.js.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/index.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as vega from \"vega\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Aggregate Transform in JSON\nDESCRIPTION: Demonstrates how to set up an aggregate transform with fields, operations, and output field names.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/aggregate.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"aggregate\",\n  \"fields\": [\"foo\", \"bar\", \"bar\"],\n  \"ops\": [\"valid\", \"sum\", \"median\"],\n  \"as\": [\"v\", \"s\", \"m\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Tooltip Signals in Vega\nDESCRIPTION: Implements a signal named 'tooltip' that updates in response to mouse events. When a rectangle is hovered, the signal captures the datum; on mouseout, it resets to an empty object.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n  \"signals\": [\n    {\n      \"name\": \"tooltip\",\n      \"value\": {},\n      \"on\": [\n        {\"events\": \"rect:mouseover\", \"update\": \"datum\"},\n        {\"events\": \"rect:mouseout\",  \"update\": \"{}\"}\n      ]\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Checking Value in Range in JavaScript\nDESCRIPTION: Tests whether a value lies within or is equal to either the first or last values of the range array.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\ninrange(value, range)\n```\n\n----------------------------------------\n\nTITLE: Defining Bar Chart Mark Properties in Vega\nDESCRIPTION: Details the specific encoding properties for rectangle marks in a bar chart. Shows how to position bars with x/width for horizontal placement and y/y2 for vertical placement using scales.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n          \"x\": {\"scale\": \"xscale\", \"field\": \"category\"},\n          \"width\": {\"scale\": \"xscale\", \"band\": 1},\n          \"y\": {\"scale\": \"yscale\", \"field\": \"amount\"},\n          \"y2\": {\"scale\": \"yscale\", \"value\": 0}\n```\n\n----------------------------------------\n\nTITLE: Network Layout Force Transform Configuration\nDESCRIPTION: Configuration for force-directed network layout centered in the view with node repulsion, link constraints, and collision detection.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/force.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"force\",\n  \"forces\": [\n    {\n      \"force\": \"center\",\n      \"x\": {\"signal\": \"width / 2\"},\n      \"y\": {\"signal\": \"height / 2\"}\n    },\n    {\n      \"force\": \"nbody\",\n      \"strength\": -10\n    },\n    {\n      \"force\": \"link\",\n      \"links\": \"edges\",\n      \"distance\": 25\n    },\n    {\n      \"force\": \"collide\",\n      \"radius\": 10\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Beeswarm Layout Force Transform Configuration\nDESCRIPTION: Static force transform configuration for creating a beeswarm layout with x/y focus points and variable node radius collision detection.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/force.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"force\",\n  \"static\": true,\n  \"forces\": [\n    {\n      \"force\": \"x\",\n      \"x\": \"xfocus\"\n    },\n    {\n      \"force\": \"y\",\n      \"y\": \"yfocus\"\n    },\n    {\n      \"force\": \"collide\",\n      \"radius\": {\"field\": \"radius\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Equally-Spaced Quantiles with Quantile Transform in Vega\nDESCRIPTION: This example shows how to use the quantile transform to compute 20 equally-spaced quantiles (from 0.025 to 0.975) for the input data field 'value' using a step size of 0.05.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/quantile.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"quantile\", \"field\": \"value\", \"step\": 0.05}\n```\n\n----------------------------------------\n\nTITLE: Defining Threshold Scale in Vega\nDESCRIPTION: This snippet demonstrates the configuration of a threshold scale named 'threshold' in Vega. It maps a continuous domain with thresholds at 0 and 1 to three discrete color values: red, white, and blue.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"threshold\",\n  \"type\": \"threshold\",\n  \"domain\": [0, 1],\n  \"range\": [\"red\", \"white\", \"blue\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Domain with Multiple Fields in Vega JSON\nDESCRIPTION: This snippet demonstrates how to construct a scale domain using the 'price' and 'cost' fields from two different data sets in Vega JSON configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"domain\": {\n  \"fields\": [\n    {\"data\": \"table1\", \"field\": \"price\"},\n    {\"data\": \"table2\", \"field\": \"cost\"}\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Signal Listener in Vega\nDESCRIPTION: Example showing how to add a signal listener that logs width changes. The listener receives the signal name and new value as arguments, and is triggered when the signal value changes during pulse propagation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nview.addSignalListener('width', function(name, value) {\n  console.log('WIDTH: ' + value);\n});\nview.width(500).run(); // listener logs 'WIDTH: 500'\n```\n\n----------------------------------------\n\nTITLE: Parsing Vega Specifications with JavaScript\nDESCRIPTION: This function parses a Vega JSON specification and produces a reactive dataflow graph description. It accepts an optional configuration object for customizing visual encoding defaults.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-parser/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvega.parse(specification[, config])\n```\n\n----------------------------------------\n\nTITLE: Creating Scales in Vega\nDESCRIPTION: Scale definitions that map data values to visual properties. This includes an ordinal band scale for categories on the x-axis and a linear scale for numeric values on the y-axis.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"scales\": [\n    {\n      \"name\": \"xscale\",\n      \"type\": \"band\",\n      \"domain\": {\"data\": \"table\", \"field\": \"category\"},\n      \"range\": \"width\",\n      \"padding\": 0.05,\n      \"round\": true\n    },\n    {\n      \"name\": \"yscale\",\n      \"domain\": {\"data\": \"table\", \"field\": \"amount\"},\n      \"nice\": true,\n      \"range\": \"height\"\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Creating Ordinal Scales with Custom Range and Color Palette in JavaScript\nDESCRIPTION: Shows how to create ordinal scales with a custom domain and range, as well as using a predefined color palette.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scale/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar ordinal = vega.scale('ordinal');\n\n// ordinal scale\nvar scale1 = ordinal().domain(['a', 'b', 'c']).range([0, 1, 2]);\nscale1.type; // 'ordinal'\n\n// ordinal scale with range set to the 'category20' color palette\nvar scale2 = ordinal().range(vega.scheme('category20'));\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Distribution - JavaScript\nDESCRIPTION: Creates a distribution object representing a discrete uniform probability distribution over integers. Supports sample(), pdf(), cdf() and icdf() methods.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomInteger([min,] max)\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregation Transform in Vega 3 JSON\nDESCRIPTION: Demonstrates the new structure for defining aggregation operations in Vega 3, using flat arrays for fields, operations, and output names instead of the previous 'summarize' block.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/porting-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"aggregate\",\n  \"groupby\": [\"category1\", \"category2\"],\n  \"fields\": [\"measure1\", \"measure1\", \"measure2\"],\n  \"ops\": [\"min\", \"max\", \"median\"],\n  \"as\": [\"min1\", \"max1\", \"median2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Time Format Specifier with timeUnitSpecifier Function in JavaScript\nDESCRIPTION: Returns a time format specifier string for given time units. The resulting string can be used with timeFormat or utcFormat functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimeFormat(date, timeUnitSpecifier('year'))\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimeFormat(date, timeUnitSpecifier(['hours', 'minutes']))\n```\n\n----------------------------------------\n\nTITLE: Linear Regression in Vega (JavaScript)\nDESCRIPTION: Fits a linear regression model (y = a + b * x) to the input data. Returns an object with coefficients, prediction function, and R-squared value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLinear(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Regression in Vega (JavaScript)\nDESCRIPTION: Fits a logarithmic regression model (y = a + b * log(x)) to the input data. Returns an object with coefficients, prediction function, and R-squared value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLog(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Accessing Vega Scale Properties in JavaScript\nDESCRIPTION: Functions for retrieving properties of Vega scales, including domain, range, and bandwidth. These functions help in understanding and manipulating scale configurations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_67\n\nLANGUAGE: JavaScript\nCODE:\n```\ndomain(name[, group])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrange(name[, group])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nbandwidth(name[, group])\n```\n\n----------------------------------------\n\nTITLE: Applying Vega Scale Transforms and Projections in JavaScript\nDESCRIPTION: Functions for working with Vega scale transforms and cartographic projections. Includes 'scale' for applying transforms, 'invert' for inverting transforms, and 'copy' for cloning scale instances.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nscale(name, value[, group])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ninvert(name, value[, group])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ncopy(name[, group])\n```\n\n----------------------------------------\n\nTITLE: Updating Data Set with Changeset in Vega View (JavaScript)\nDESCRIPTION: Demonstrates how to update a data set in a Vega view using a changeset. This example inserts and removes data, then runs the view to apply the changes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nview.change('data', vega.changeset().insert([...]).remove([...]))\n    .run()\n```\n\n----------------------------------------\n\nTITLE: Using Key Function in JavaScript with Vega\nDESCRIPTION: Example showing how to generate a key function that creates string keys from multiple object fields, which is useful for object property names or map keys.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyf = vega.key(['foo', 'bar']);\nkeyf({foo:'hi', bar:5}); // 'hi|5'\nvega.accessorName(keyf); // 'key'\nvega.accessorFields(keyf); // ['foo', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Basic Event Selector Examples\nDESCRIPTION: Examples demonstrating various basic event selector patterns including mouse events, throttling, debouncing, and filtered events.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nmousedown           // capture all mousedown events, regardless of source\n*:mousedown         // mousedown events on marks, but not the view itself\nrect:mousedown      // mousedown events on any rect marks\n@foo:mousedown      // mousedown events on marks named 'foo'\nsymbol:mousedown!   // capture and consume mousedown events on symbol marks\nwindow:mousemove    // capture mousemove events from the browser window\nmousemove{100}      // throttle the stream by 100 ms\nmousemove{100, 200} // also debounce the stream by 200 ms\nmousemove{0, 200}   // debounce by 200 ms, but do not throttle\ntimer{1000}         // capture a timer tick every 1000 ms\nmousemove[event.buttons] // mousemove events with any mouse button pressed\nclick[event.shiftKey]    // click events with the shift key pressed\n```\n\n----------------------------------------\n\nTITLE: Using Vega Scale Registry (JavaScript)\nDESCRIPTION: Shows examples of using Vega's scale registry to create and use different types of scales, including linear, ordinal, and sequential scales. Demonstrates scale properties and methods.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/extensibility.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// linear scale\nvar linear = vega.scale('linear');\nvar scale = linear().domain([0, 10]).range([0, 100]);\nscale.type; // 'linear'\nscale.invertRange([0, 100]); // [0, 10]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ordinal = vega.scale('ordinal');\n\n// ordinal scale\nvar scale1 = ordinal().domain(['a', 'b', 'c']).range([0, 1, 2]);\nscale1.type; // 'ordinal'\n\n// ordinal scale with range set to the 'category20' color palette\nvar scale2 = ordinal().range(vega.scheme('category20'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar seq = vega.scale('sequential');\n\n// sequential scale, using the plasma color palette\nvar scale1 = seq().interpolator(vega.scheme('plasma'));\nscale1.type; // 'sequential'\n```\n\n----------------------------------------\n\nTITLE: Using FastMap for Efficient Key-Value Storage in JavaScript\nDESCRIPTION: Illustrates the usage of vega.fastmap() function to create a fast key-value map. The example demonstrates how to initialize the map, add and retrieve values, check for key existence, delete entries, and perform garbage collection.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar map = vega.fastmap({foo:1, bar:2});\nmap.has('foo'); // -> true\nmap.get('foo'); // -> 1\nmap.delete('bar');\nmap.has('bar'); // -> false\nmap.set('baz', 0);\nmap.get('baz'); // -> 0\nmap.size; // -> 2\nmap.empty; // -> 1 (number of empty entries)\nmap.clean(); // invoke garbage collection, clears empty entries\n```\n\n----------------------------------------\n\nTITLE: Configuring KDE Transform with Grouping in Vega\nDESCRIPTION: This snippet demonstrates how to perform kernel density estimation on the 'value' field, grouped by the 'key' field, using automatically selected bandwidth. It showcases the basic usage of the KDE transform in Vega.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/kde.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"kde\",\n  \"groupby\": [\"key\"],\n  \"field\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Data with Auto Type Inference in Vega\nDESCRIPTION: Demonstrates loading and parsing CSV data with automatic type inference for values using the vega.read() method\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-loader/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = null;\nloader.load('data/stocks.csv').then(function(csv_data) {\n  data = vega.read(csv_data, {type: 'csv', parse: 'auto'});\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Bin-Ordinal Scale with Bin Transform in Vega\nDESCRIPTION: This example illustrates how to set up a bin-ordinal scale named 'color' in Vega, used in conjunction with a bin transform. It creates a binned color encoding using the 'greens' color scheme.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"name\": \"input\",\n      \"transform\": [\n        { \"type\": \"extent\", \"field\": \"value\", \"signal\": \"extent\" },\n        { \"type\": \"bin\", \"extent\": {\"signal\": \"extent\"}, \"signal\": \"bins\" }\n      ]\n    }\n  ],\n  \"scales\": [\n    {\n      \"name\": \"color\",\n      \"type\": \"bin-ordinal\",\n      \"bins\": {\"signal\": \"bins\"},\n      \"range\": {\"scheme\": \"greens\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fitting Polynomial Regression Model with Parameters in Vega\nDESCRIPTION: This snippet shows how to fit a fourth-order polynomial regression model that predicts 'dv' as a function of 'iv', with separate models for each value of the 'key' field. It returns model parameter values instead of trend line points.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/regression.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"regression\",\n  \"method\": \"poly\",\n  \"groupby\": [\"key\"],\n  \"x\": \"dv\",\n  \"y\": \"iv\",\n  \"order\": 4,\n  \"params\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Fill in Vega JSON\nDESCRIPTION: This snippet demonstrates how to define a linear gradient for the 'fill' encoding channel in Vega. It specifies the gradient scale, start and stop coordinates, and sample point count.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"encode\": {\n    \"fill\": {\n      \"gradient\": \"colorScale\",\n      \"start\": [0, 1],\n      \"stop\": [0, 0],\n      \"count\": 10\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Bin Transform in Vega\nDESCRIPTION: Example of a bin transform configuration that bins values in the 'amount' field into 5 bins between 0 and 10.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/bin.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"bin\", \"field\": \"amount\", \"extent\": [0, 10], \"maxbins\": 5}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vega Data Sets in JavaScript\nDESCRIPTION: Functions for retrieving data from Vega data sets and testing data values. Includes 'data' for accessing entire data sets and 'indata' for checking specific field values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\ndata(name)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nindata(name, field, value)\n```\n\n----------------------------------------\n\nTITLE: Creating Kernel Density Estimate in Vega\nDESCRIPTION: Creates a distribution object representing a kernel density estimate for an array of numerical values using a Gaussian kernel. The optional bandwidth parameter determines kernel width. Does not support the icdf method.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvega.randomKDE(values[, bandwidth])\n```\n\n----------------------------------------\n\nTITLE: Configuring GeoPath Transform in Vega JSON\nDESCRIPTION: Demonstrates how to use the geopath transform in a Vega specification. It generates path data for GeoJSON objects using a specified projection, writing results to the default output field 'path'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/geopath.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"geopath\",\n  \"projection\": \"projection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Log-Normal Distribution - JavaScript\nDESCRIPTION: Creates a distribution object representing a log-normal probability distribution with specified log mean and log standard deviation. Supports sample(), pdf(), cdf() and icdf() methods.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomLogNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Parsing Vega JSON specifications with vega.parse()\nDESCRIPTION: Converts a Vega JSON specification into a reactive dataflow graph description. Accepts optional configuration object for visual defaults and options for parser configuration like AST inclusion.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/parser.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvega.parse(specification[, config, options])\n```\n\n----------------------------------------\n\nTITLE: Using Vega View API\nDESCRIPTION: Complete HTML example showing how to use the Vega View API to create interactive visualizations with custom configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/index.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}\"></script>\n</head>\n<body>\n  <div id=\"view\"></div>\n  <script type=\"text/javascript\">\n    var view;\n\n    fetch('https://vega.github.io/vega/examples/bar-chart.vg.json')\n      .then(res => res.json())\n      .then(spec => render(spec))\n      .catch(err => console.error(err));\n\n    function render(spec) {\n      view = new vega.View(vega.parse(spec), {\n        renderer:  'canvas',  // renderer (canvas or svg)\n        container: '#view',   // parent DOM container\n        hover:     true       // enable hover processing\n      });\n      return view.runAsync();\n    }\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Treemap Transform in Vega JSON\nDESCRIPTION: This snippet demonstrates how to configure a treemap transform in Vega. It specifies the field for node values, layout method, aspect ratio, padding, and size of the layout.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/treemap.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"treemap\",\n  \"field\": \"value\",\n  \"method\": \"resquarify\",\n  \"ratio\": 1,\n  \"paddingInner\": 0,\n  \"paddingOuter\": 2,\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Lookup Transform in Vega\nDESCRIPTION: Example showing how to use the lookup transform to match records between two data streams based on key fields. The transform looks up records from 'names' stream where 'foo' matches 'id' field, adding matched records as 'obj' property.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/lookup.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"data\": [\n  {\n    \"name\": \"names\",\n    \"values\": [\n      {\"id\": \"A\", \"name\": \"label A\"},\n      {\"id\": \"B\", \"name\": \"label B\"},\n      {\"id\": \"C\", \"name\": \"label C\"}\n    ]\n  },\n  {\n    \"name\": \"values\",\n    \"values\": [\n      {\"foo\": \"A\", \"bar\": 28},\n      {\"foo\": \"B\", \"bar\": 55},\n      {\"foo\": \"C\", \"bar\": 43},\n      {\"foo\": \"C\", \"bar\": 91},\n      {\"foo\": \"D\", \"bar\": 81}\n    ],\n    \"transform\": [\n      {\n        \"type\": \"lookup\",\n        \"from\": \"names\",\n        \"key\": \"id\",\n        \"fields\": [\"foo\"],\n        \"as\": [\"obj\"]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Loading External JSON Data in Vega\nDESCRIPTION: Example demonstrating how to load data from an external JSON file using the 'url' property. This approach is recommended for larger datasets stored separately from the visualization specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/data.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"points\", \"url\": \"data/points.json\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Linear Regression Transform in Vega\nDESCRIPTION: This snippet demonstrates how to fit a linear regression model that predicts the field 'dv' as a function of 'iv'. It generates a new data stream with points for a regression line extending from -5 to 5 over the domain of 'iv'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/regression.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"regression\",\n  \"method\": \"linear\",\n  \"x\": \"dv\",\n  \"y\": \"iv\",\n  \"extent\": [-5, 5]\n}\n```\n\n----------------------------------------\n\nTITLE: Using GeoJSON Data in Vega Projection\nDESCRIPTION: This example shows how to use the consolidated GeoJSON data (stored in the 'geodata' signal) within a projection definition. It sets up a Mercator projection that fits to the GeoJSON data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/geojson.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"projections\": [\n  {\n    \"name\": \"proj\",\n    \"type\": \"mercator\",\n    \"fit\": {\"signal\": \"geodata\"}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating visitArray Function Usage in JavaScript\nDESCRIPTION: Example showing how to use visitArray to filter and transform array values before visiting them with a callback function.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// console output: 1 0; 3 2\nvega.visitArray([0, -1, 2],\n  function(x) { return x + 1; },\n  function(v, i, array) { console.log(v, i); });\n```\n\n----------------------------------------\n\nTITLE: KDE Distribution Density Transform in Vega\nDESCRIPTION: Sets up kernel density estimation over values in a data table's 'value' field. Generates 200 uniformly-spaced samples with automatically determined bandwidth and extent.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/density.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"density\",\n  \"steps\": 200,\n  \"distribution\": {\n    \"function\": \"kde\",\n    \"from\": \"table\",\n    \"field\": \"value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Axes Configuration in Vega\nDESCRIPTION: Enhanced axes definitions with additional properties for customization. This example shows how to modify tick count, orientation, and positioning of axis elements.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"axes\": [\n    { \"orient\": \"bottom\", \"scale\": \"xscale\" },\n    { \"orient\": \"right\", \"scale\": \"yscale\", \"tickCount\": 5,\"offset\": 6 }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Defining Data Set with Filter and Stack Transforms in Vega JSON\nDESCRIPTION: This snippet demonstrates how to define a new data set in Vega with transforms to filter values and compute a stacked layout. It uses the 'filter' transform to keep only values greater than 5, and the 'stack' transform to create a stacked layout grouped by category.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"name\": \"table\",\n      \"transform\": [\n        { \"type\": \"filter\", \"expr\": \"datum.value > 5\" },\n        { \"type\": \"stack\", \"field\": \"value\", \"groupby\": [\"category\"] }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Zooming Scale Domains in Vega JavaScript\nDESCRIPTION: Functions for zooming domains of different scale types (linear, log, power, symlog) by a scale factor and anchor point. These functions enable interactive zoom operations on visualizations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_71\n\nLANGUAGE: JavaScript\nCODE:\n```\nzoomLinear(domain, anchor, scaleFactor)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nzoomLog(domain, anchor, scaleFactor)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nzoomPow(domain, anchor, scaleFactor, exponent)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nzoomSymlog(domain, anchor, scaleFactor, constant)\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Custom Projections\nDESCRIPTION: Demonstrates how to manually register a custom projection (Winkel3) using vega.projection() and then use it in a Vega specification. Requires d3-geo-projection to be imported.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/projections.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Assumes d3-geo-projection is imported under the d3 variable.\n// To register with Vega, provide a name and projection function.\nvega.projection('winkel3', d3.geoWinkel3);\n\n// Vega parser and runtime now support the 'winkel3' projection\nvar runtime = vega.parse({\n  ...,\n  \"projections\": [\n    { \"name\": \"proj\", \"type\": \"winkel3\" }\n  ],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Signals for Dynamic Styling in Vega\nDESCRIPTION: This example shows how to define signals in the configuration for dynamic styling. It creates a font size scale factor signal and uses it to set a dynamic font size for text elements.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signals\": [\n    {\"name\": \"fontSizeScale\", \"value\": 1}\n  ],\n  \"text\": {\n    \"fontSize\": {\"signal\": \"11 * fontSizeScale\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Axis Encodings in Vega JSON\nDESCRIPTION: This snippet demonstrates how to set custom colors, thickness, text angle, and fonts for various axis elements in Vega. It also shows how to make labels interactive and change text color on hover.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/axes.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"axes\": [\n  {\n    \"orient\": \"bottom\",\n    \"scale\": \"x\",\n    \"title\": \"X-Axis\",\n    \"encode\": {\n      \"ticks\": {\n        \"update\": {\n          \"stroke\": {\"value\": \"steelblue\"}\n        }\n      },\n      \"labels\": {\n        \"interactive\": true,\n        \"update\": {\n          \"text\": {\"signal\": \"format(datum.value, '+,')\"},\n          \"fill\": {\"value\": \"steelblue\"},\n          \"angle\": {\"value\": 50},\n          \"fontSize\": {\"value\": 14},\n          \"align\": {\"value\": \"left\"},\n          \"baseline\": {\"value\": \"middle\"},\n          \"dx\": {\"value\": 3}\n        },\n        \"hover\": {\n          \"fill\": {\"value\": \"firebrick\"}\n        }\n      },\n      \"title\": {\n        \"update\": {\n          \"fontSize\": {\"value\": 16}\n        }\n      },\n      \"domain\": {\n        \"update\": {\n          \"stroke\": {\"value\": \"#333\"},\n          \"strokeWidth\": {\"value\": 1.5}\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Signal Values in Vega\nDESCRIPTION: Demonstrates how to retrieve and modify signal values in a Vega visualization. The first example shows how to get a signal value, and the second shows how to update a signal value and re-run the dataflow.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/debugging.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nview.signal('name') // returns the value of the signal 'name'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nview.signal('name', value).run(); // update signal 'name' and run the dataflow\n```\n\n----------------------------------------\n\nTITLE: Configuring Partition Transform in Vega\nDESCRIPTION: Example configuration for a partition transform that creates a space-filling layout. The transform uses the 'value' field for node sizing, adds 1 pixel padding between nodes, and scales to the full width and height of the view.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/partition.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"partition\",\n  \"field\": \"value\",\n  \"padding\": 1,\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Linear Scale in JavaScript\nDESCRIPTION: Demonstrates how to create and use a linear scale, including accessing the scale type and inverting the range.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scale/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// linear scale\nvar linear = vega.scale('linear');\nvar scale = linear().domain([0, 10]).range([0, 100]);\nscale.type; // 'linear'\nscale.invertRange([0, 100]); // [0, 10]\n```\n\n----------------------------------------\n\nTITLE: Using Mercator Projection in Vega\nDESCRIPTION: Example demonstrating how to create and configure a Mercator projection in Vega. The example shows retrieving the projection constructor, creating a projection instance with a translation, accessing the projection type, and projecting coordinates.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-projection/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// mercator projection\nvar mercator = vega.projection('mercator');\nvar proj = mercator().translate([400, 200]);\nscale.type; // 'mercator'\nscale([0, 0]); // [400, 200] center point\n```\n\n----------------------------------------\n\nTITLE: Configuring KDE2D and Isocontour Transforms in Vega\nDESCRIPTION: Example showing how to set up a two-dimensional kernel density estimation transform followed by an isocontour transform to generate density-based contour plots. The transform uses x_value and y_value fields for coordinates and generates 10 contour levels.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/kde2d.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"kde2d\",\n  \"x\": \"x_value\",\n  \"y\": \"y_value\",\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}],\n  \"as\": \"grid\"\n},\n{\n  \"type\": \"isocontour\",\n  \"field\": \"grid\",\n  \"levels\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Set with Triggers in Vega JSON\nDESCRIPTION: This snippet demonstrates how to update a data set of selected items based on shift-click interactions using triggers in Vega. It shows removal, insertion, and toggling of data objects based on different conditions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/triggers.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"data\": [\n  ...\n  {\n    \"name\": \"selected\",\n    \"on\": [\n      {\"trigger\": \"!shift\", \"remove\": true},\n      {\"trigger\": \"!shift && clicked\", \"insert\": \"clicked\"},\n      {\"trigger\": \"shift && clicked\", \"toggle\": \"clicked\"}\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using the Vega Loader API in JavaScript\nDESCRIPTION: Example of how to use the vega-loader to asynchronously load a JSON file. The example creates a loader instance and then uses the load method which returns a Promise to handle the data or any errors that occur.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-loader/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar loader = vega.loader();\nloader.load('data.json').then(function(data) {\n  // do something with loaded data\n}).catch(function(error) {\n  // error handling here\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Multi-Field Domain by Count in Vega JSON\nDESCRIPTION: This example demonstrates sorting a multi-field domain in descending order based on the counts of each domain value in Vega JSON configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": {\n    \"data\": \"table\",\n    \"fields\": [\"category1\", \"category2\"],\n    \"sort\": {\"op\": \"count\", \"order\": \"descending\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Transform with Field Renaming in Vega JSON\nDESCRIPTION: Shows how to use the project transform to copy fields 'foo' and 'bar' and rename them to 'a' and 'b' respectively.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/project.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"project\", \"fields\": [\"foo\", \"bar\"], \"as\": [\"a\", \"b\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field-Based Pie Transform in Vega\nDESCRIPTION: Demonstrates how to configure a pie transform that computes angular extents based on a specific data field value. This example uses the 'price' field to determine slice sizes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/pie.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"pie\", \"field\": \"price\"}\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering with Logarithmic Expression in Vega (JSON)\nDESCRIPTION: This example shows a more complex filter transform in Vega. It retains only data elements where the base-10 logarithm of the 'y' field is greater than 2, demonstrating the use of mathematical functions in filter expressions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/filter.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"filter\", \"expr\": \"log(datum.y) / LN10 > 2\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Resize Listener in Vega\nDESCRIPTION: Example showing how to add a resize listener that responds to view size changes. The handler receives the new width and height dimensions as arguments.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nview.addResizeListener(function(width, height) {\n  console.log('RESIZE', width, height);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Data in Vega View (JavaScript)\nDESCRIPTION: Demonstrates how to set data in a Vega view using the data method with two arguments. This is equivalent to removing all existing data and inserting new values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nview.change(vega.changeset().remove(vega.truthy).insert(values));\n```\n\n----------------------------------------\n\nTITLE: Using Field Accessor in JavaScript with Vega\nDESCRIPTION: Example demonstrating how to create and use a field accessor function to retrieve values from objects, with support for nested properties and accessor metadata.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fooField = vega.field('foo');\nfooField({foo: 5}); // 5\nvega.accessorName(fooField); // 'foo'\nvega.accessorFields(fooField); // ['foo']\n\nvar pathField = vega.field('foo.bar', 'path');\npathField({foo: {bar: 'vega'}}); // 'vega'\npathField({foo: 5}); // undefined\nvega.accessorName(pathField); // 'path'\nvega.accessorFields(pathField); // ['foo.bar']\n```\n\n----------------------------------------\n\nTITLE: Configuring Tree Transform in Vega\nDESCRIPTION: Example configuration of a tree transform that computes a tidy tree layout using the full width and height of the visualization view. The transform parameters specify the layout method and size dimensions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/tree.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"tree\",\n  \"method\": \"tidy\",\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Quantize Scale for Color Encoding in Vega\nDESCRIPTION: This example shows how to configure a quantize scale named 'color' in Vega. It maps a continuous input domain from a data table to a discrete range of 7 colors using the 'blues' color scheme.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"color\",\n  \"scale\": \"quantize\",\n  \"domain\": {\"data\": \"table\", \"field\": \"value\"},\n  \"range\": {\"scheme\": \"blues\", \"count\": 7}\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Primitive Values to Objects in JSON\nDESCRIPTION: Demonstrates how Vega maps an array of primitive values to an array of objects with a 'data' property. This is useful for understanding how simple data arrays are internally represented in Vega.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/data.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ {\"data\": 5}, {\"data\": 3}, {\"data\": 8}, {\"data\": 1} ]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Random Number Generator in Vega\nDESCRIPTION: This function allows setting a custom random number generator for Vega. It's useful for using alternative sources of randomness or for testing purposes with deterministic functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.setRandom(randfunc)\n```\n\n----------------------------------------\n\nTITLE: Adding Data Listener in Vega View (JavaScript)\nDESCRIPTION: Shows how to add a data listener to a Vega view. The listener function is called when the specified data set changes, receiving the name and new value of the data set.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nview.addDataListener('source', function(name, value) {\n  console.log(name, value);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logarithmic Scale in Vega JSON\nDESCRIPTION: Example of configuring a logarithmic scale in Vega, including the base property specific to log scales.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"yScale\",\n  \"type\": \"log\",\n  \"domain\": [1, 1000],\n  \"range\": [400, 0],\n  \"base\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Data from Vega View (JavaScript)\nDESCRIPTION: Shows how to remove data from a Vega view using a predicate function. This example removes all tuples in the 'table' data set where the count property is less than 5.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nview.remove('table', d => d.count < 5).run();\n```\n\n----------------------------------------\n\nTITLE: Defining a Linear Gradient in Vega JSON\nDESCRIPTION: This snippet demonstrates how to define a linear gradient color pattern in Vega. It specifies the gradient type and an array of color stops with offsets and colors.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gradient\": \"linear\",\n  \"stops\": [\n    {\"offset\": 0.0, \"color\": \"red\"},\n    {\"offset\": 0.5, \"color\": \"white\"},\n    {\"offset\": 1.0, \"color\": \"blue\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Band Scale Spacing in JavaScript\nDESCRIPTION: Function for determining the number of steps needed within a band scale based on domain element count and padding values. Useful for layout calculations in charts.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_68\n\nLANGUAGE: JavaScript\nCODE:\n```\nbandspace(count[, paddingInner, paddingOuter])\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Transform in Vega JSON\nDESCRIPTION: Example configuration for the sample transform that filters a data stream to randomly select up to 500 data objects using reservoir sampling technique.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/sample.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"sample\", \"size\": 500}\n```\n\n----------------------------------------\n\nTITLE: Custom Legend Encoding in Vega JSON\nDESCRIPTION: Example showing how to customize legend appearance including fonts, borders, and interactive behaviors. Demonstrates setting custom styles for legend title, labels, symbols and the legend container itself.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/legends.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"legends\": [\n  {\n    \"fill\": \"color\",\n    \"encode\": {\n      \"title\": {\n        \"update\": {\n          \"fontSize\": {\"value\": 14}\n        }\n      },\n      \"labels\": {\n        \"interactive\": true,\n        \"update\": {\n          \"fontSize\": {\"value\": 12},\n          \"fill\": {\"value\": \"black\"}\n        },\n        \"hover\": {\n          \"fill\": {\"value\": \"firebrick\"}\n        }\n      },\n      \"symbols\": {\n        \"update\": {\n          \"stroke\": {\"value\": \"transparent\"}\n        }\n      },\n      \"legend\": {\n        \"update\": {\n          \"stroke\": {\"value\": \"#ccc\"},\n          \"strokeWidth\": {\"value\": 1.5}\n        }\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Title Encodings in Vega\nDESCRIPTION: Example showing how to customize title and subtitle appearance using custom encodings in Vega. Demonstrates setting custom colors, font properties, and interactive hover states for both title and subtitle elements.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/title.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text\": \"Title Text\",\n  \"subtitle\": \"Subtitle Text\",\n  \"encode\": {\n    \"title\": {\n      \"enter\": {\n        \"fill\": {\"value\": \"purple\"}\n      }\n    },\n    \"subtitle\": {\n      \"interactive\": true,\n      \"update\": {\n        \"fontStyle\": {\"value\": \"italic\"}\n      },\n      \"hover\": {\n        \"fontStyle\": {\"value\": \"normal\"}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap from Mathematical Function in Vega\nDESCRIPTION: This example shows how to generate a heatmap visualization of a 2D sinusoidal function. It uses custom expressions to dynamically calculate color values based on pixel coordinates and a defined color scale.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/heatmap.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signals\": [\n    {\"name\": \"scale\", \"value\": 0.05}\n  ],\n  \"scales\": [\n    {\n      \"name\": \"color\",\n      \"type\": \"linear\",\n      \"domain\": [-1, 1],\n      \"range\": {\"scheme\": \"spectral\"}\n    }\n  ],\n  \"data\": [\n    {\n      \"name\": \"heatmap\",\n      \"values\": [{\"width\": 150, \"height\": 100}],\n      \"transform\": [\n        {\n          \"type\": \"heatmap\",\n          \"color\": {\n            \"expr\": \"scale('color', sin(scale * (datum.$x + datum.$y)) * sin(scale * (datum.$x - datum.$y)))\"\n          },\n          \"opacity\": 1\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SVG and PNG with Vega in Node.js\nDESCRIPTION: Demonstrates how to create a Vega view instance and generate static SVG and PNG images server-side. Uses the 'none' renderer type and shows error handling. Requires node-canvas package for PNG generation and font metrics.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/index.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar vega = require('vega');\n\n// create a new view instance for a given Vega JSON spec\nvar view = new vega.View(vega.parse(spec), {renderer: 'none'});\n\n// generate a static SVG image\nview.toSVG()\n  .then(function(svg) {\n    // process svg string\n  })\n  .catch(function(err) { console.error(err); });\n\n// generate a static PNG image\nview.toCanvas()\n  .then(function(canvas) {\n    // process node-canvas instance\n    // for example, generate a PNG stream to write\n    var stream = canvas.createPNGStream();\n  })\n  .catch(function(err) { console.error(err); });\n```\n\n----------------------------------------\n\nTITLE: Multi-criteria Sort Using Collect Transform in Vega\nDESCRIPTION: JSON configuration for a collect transform that sorts data objects by multiple fields with different sort orders.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/collect.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"collect\",\n  \"sort\": {\n    \"field\": [\"a\", \"b\"],\n    \"order\": [\"descending\", \"ascending\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Layout Recalculation in Vega\nDESCRIPTION: Sets a flag to recalculate layout autosize on the next pulse propagation cycle. Useful when using 'pad' or 'fit' autosize methods.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.resize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Legend Appearance in Vega\nDESCRIPTION: This snippet demonstrates how to customize the appearance of legends in a Vega visualization by setting padding and adding a light gray border.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"legend\": {\n    \"padding\": 10,\n    \"legendStrokeColor\": \"#ccc\",\n    \"legendStrokeWidth\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Interpolators in JavaScript with Vega\nDESCRIPTION: Shows how to access D3 interpolator factories using Vega's interpolate function, including specifying gamma values.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scale/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar rgbBasis = vega.interpolate('rgb-basis'); // d3.interpolateRgbBasis\nvar rgbGamma = vega.interpolate('rgb', 2.2);  // d3.interpolateRgb.gamma(2.2)\n```\n\n----------------------------------------\n\nTITLE: Sampling from Normal Distribution with vega.sampleNormal()\nDESCRIPTION: Returns a random sample from a normal (Gaussian) probability distribution with specified mean and standard deviation. If parameters are omitted, defaults to a standard normal distribution (mean=0, stdev=1).\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Defining Default Time Format Specifiers in JavaScript\nDESCRIPTION: This code snippet defines a default object for time format specifiers used in Vega's timeFormat function. It specifies format strings for various time units and combinations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"year\": \"%Y \",\n  \"year-month\": \"%Y-%m \",\n  \"year-month-date\": \"%Y-%m-%d \",\n  \"quarter\": \"Q%q \",\n  \"month\": \"%b \",\n  \"date\": \"%d \",\n  \"week\": \"W%U \",\n  \"day\": \"%a \",\n  \"hours\": \"%H:00\",\n  \"hours-minutes\": \"%H:%M\",\n  \"minutes\": \"00:%M\",\n  \"seconds\": \":%S\",\n  \"milliseconds\": \".%L\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Fold Transform Configuration in Vega\nDESCRIPTION: Demonstrates the basic configuration for a fold transform that collapses gold and silver fields into key-value pairs.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/fold.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"fold\", \"fields\": [\"gold\", \"silver\"]}\n```\n\n----------------------------------------\n\nTITLE: UTC Date Formatting in JavaScript\nDESCRIPTION: Creates a function that formats dates or timestamps into UTC strings. Accepts d3-time-format specifiers or object-based multi-format configurations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvega.utcFormat([specifier])\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Projection in Vega (JavaScript)\nDESCRIPTION: Demonstrates how to register a custom 'winkel3' projection from d3-geo-projection library with Vega. This allows the projection to be used in Vega specifications.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/extensibility.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// d3-geo-projections must be imported and added to d3 object\n// to register with Vega, provide a name and d3 projection function\nvega.projection('winkel3', d3.geoWinkel3);\n\n// Vega parser and runtime now support the 'winkel3' projection\nvar runtime = vega.parse({\n  ...,\n  \"projections\": [\n    { \"name\": \"proj\", \"type\": \"winkel3\" }\n  ],\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using bin function with various parameters in JavaScript\nDESCRIPTION: Examples of using the vega.bin function with different extent and maxbins configurations to create binning schemes for histograms. The function returns objects containing start, stop, and step values based on the specified parameters.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvega.bin({extent:[0, 1], maxbins:10}); // {start:0, stop:1, step:0.1}\nvega.bin({extent:[0, 1], maxbins:5}); // {start:0, stop:10, step:2}\nvega.bin({extent:[5, 10], maxbins:5}); // {start:5, stop:10, step:1}\n```\n\n----------------------------------------\n\nTITLE: Creating Normal Distribution in Vega\nDESCRIPTION: Creates a normal (Gaussian) probability distribution object with configurable mean and standard deviation. If unspecified, the mean defaults to 0 and standard deviation to 1.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvega.randomNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Sorting Domain by Median Value in Vega JSON\nDESCRIPTION: This example shows how to sort distinct 'category' field values in descending order by the associated median of the 'value' field in Vega JSON configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"domain\": {\n    \"data\": \"table\",\n    \"field\": \"category\",\n    \"sort\": {\"op\": \"median\", \"field\": \"value\", \"order\": \"descending\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wordcloud Transform in Vega JSON\nDESCRIPTION: This snippet demonstrates how to configure the wordcloud transform in Vega. It sets various parameters such as size, text field, font properties, and rotation angle.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/wordcloud.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"wordcloud\",\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}],\n  \"text\": {\"field\": \"text\"},\n  \"font\": \"Helvetica Neue\",\n  \"fontSize\": {\"field\": \"count\"},\n  \"fontWeight\": {\"field\": \"weight\"},\n  \"fontSizeRange\": [10, 56],\n  \"rotate\": {\"field\": \"angle\"},\n  \"padding\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reactive Geometry in Vega JSON\nDESCRIPTION: This snippet demonstrates how to use reactive geometry in Vega by using a set of point marks as the backing data source for text marks. It shows the configuration for both the base point marks and the reactive text marks.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"marks\": [\n    {\n      \"name\": \"baseMarks\",\n      \"type\": \"point\",\n      \"from\": {\"data\": \"source\"},\n      \"encode\": {...}\n    },\n    {\n      \"type\": \"text\",\n      \"from\": {\"data\": \"baseMarks\"},\n      \"encode\": {\n        \"update\": {\n          \"x\": {\"field\": \"x\", \"offset\": 4},\n          \"y\": {\"field\": \"y\"},\n          \"text\": {\"field\": \"datum.label\"}\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Quadratic Regression in Vega (JavaScript)\nDESCRIPTION: Fits a quadratic regression model (y = a + b * x + c * x^2) to the input data. Returns an object with coefficients, prediction function, and R-squared value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLinear(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Creating a State Snapshot in Vega\nDESCRIPTION: Demonstrates how to create a snapshot of the current state of signals and data sets in a Vega visualization. This is useful for inspecting the visualization state and can be used with setState to restore previous states.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/debugging.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nview.getState() // {signals: [...], data: [...], subcontext: [...]}\n```\n\n----------------------------------------\n\nTITLE: Computing Base-10 Logarithm in Vega Formula Transform\nDESCRIPTION: Example showing how to compute the base-10 logarithm of x field using the formula transform and store it in a new logx field.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/formula.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"formula\", \"as\": \"logx\", \"expr\": \"log(datum.x) / LN10\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stratify Transform in Vega\nDESCRIPTION: Basic configuration of a stratify transform that defines key and parentKey fields for building the hierarchy.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/stratify.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stratify\",\n  \"key\": \"id\",\n  \"parentKey\": \"parent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sampling from Normal Distribution in Vega\nDESCRIPTION: This function returns a sample from a univariate normal (Gaussian) probability distribution with specified mean and standard deviation. If unspecified, mean defaults to 0 and standard deviation to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Basic Sequence Generation in Vega\nDESCRIPTION: Demonstrates basic sequence generation from 0 to 5 with default step of 1. The transform generates numeric values starting from 0 up to (but not including) 5.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/sequence.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"sequence\", \"start\": 0, \"stop\": 5}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"data\": 0},\n  {\"data\": 1},\n  {\"data\": 2},\n  {\"data\": 3},\n  {\"data\": 4}\n]\n```\n\n----------------------------------------\n\nTITLE: Extracting Hour from Date in Vega Formula Transform\nDESCRIPTION: Example demonstrating how to extract the hour component from a date field using the formula transform and store it in a new hr field.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/formula.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"formula\", \"as\": \"hr\", \"expr\": \"hours(datum.date)\"}\n```\n\n----------------------------------------\n\nTITLE: Panning Scale Domains in Vega JavaScript\nDESCRIPTION: Functions for panning domains of different scale types (linear, log, power, symlog) by a fractional delta. These functions help in implementing interactive pan operations on visualizations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_70\n\nLANGUAGE: JavaScript\nCODE:\n```\npanLinear(domain, delta)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npanLog(domain, delta)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npanPow(domain, delta, exponent)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\npanSymlog(domain, delta, constant)\n```\n\n----------------------------------------\n\nTITLE: Modifying Mark Items with Triggers in Vega JSON\nDESCRIPTION: This snippet shows how to use triggers to modify the properties of mark items. It sets the 'fx' and 'fy' properties of dragged symbol marks to the current mouse position.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/triggers.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"symbol\",\n  \"from\": {\"data\": \"nodes\"},\n  \"encode\": {...},\n  \"on\": [\n    {\n      \"trigger\": \"dragged\",\n      \"modify\":  \"dragged\",\n      \"values\":  \"{fx: x(), fy: y()}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Color Gradients in Vega JavaScript\nDESCRIPTION: Function for creating linear color gradients based on a color scale and normalized coordinate points. Useful for applying gradients to visual elements in Vega visualizations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\ngradient(scale, p0, p1[, count])\n```\n\n----------------------------------------\n\nTITLE: Multi-Field Flattening in Vega JSON\nDESCRIPTION: Example showing how to flatten multiple array fields simultaneously while maintaining parallel structure.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/flatten.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"flatten\", \"fields\": [\"foo\", \"bar\"]}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\": \"alpha\", \"foo\": [1, 2],    \"bar\": [\"A\", \"B\"]},\n  {\"key\": \"beta\",  \"foo\": [3, 4, 5], \"bar\": [\"C\", \"D\"]}\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\": \"alpha\", \"foo\": 1, \"bar\": \"A\"},\n  {\"key\": \"alpha\", \"foo\": 2, \"bar\": \"B\"},\n  {\"key\": \"beta\",  \"foo\": 3, \"bar\": \"C\"},\n  {\"key\": \"beta\",  \"foo\": 4, \"bar\": \"D\"},\n  {\"key\": \"beta\",  \"foo\": 5, \"bar\": null}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltip Handler in JavaScript\nDESCRIPTION: Defines a custom tooltip handler function for Vega views. The function takes parameters for the handler, event, item, and value, allowing for custom tooltip presentation based on these inputs.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(handler, event, item, value) {\n  // perform custom tooltip presentation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Integer Distribution in Vega\nDESCRIPTION: Creates a discrete uniform probability distribution object over the integer domain [min, max). If only one argument is provided, it is interpreted as the max value. If unspecified, min defaults to 0.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvega.randomInteger([min,] max)\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML with CSP for Vega Interpreter\nDESCRIPTION: HTML structure for loading Vega with its interpreter module and defining a Content Security Policy that restricts script sources without unsafe-eval. The example includes loading necessary scripts from a CDN and creating a container for the visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/interpreter.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <meta http-equiv=\"Content-Security-Policy\" content=\"script-src self cdn.jsdelivr.net\" />\n  <script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega-interpreter@{{ site.data.versions.interpreter }}\"></script>\n</head>\n<body>\n  <div id=\"view\"></div>\n  <script src=\"main.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Deriving New Dataset with Transforms in Vega\nDESCRIPTION: Example demonstrating how to create a derived dataset by applying transformations to an existing data source. This particular example computes aggregate statistics for groups using the 'aggregate' transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/data.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"stats\",\n  \"source\": \"table\",\n  \"transform\": [\n    {\n      \"type\": \"aggregate\",\n      \"groupby\": [\"x\"],\n      \"ops\": [\"average\", \"sum\", \"min\", \"max\"],\n      \"fields\": [\"y\", \"y\", \"y\", \"y\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Production Rules for Mark Properties in Vega JSON\nDESCRIPTION: This example shows how to define production rules for setting a mark's fill color in Vega. It uses an if-then-else style chain to determine the fill color based on a condition, with a default value if the condition is not met.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"fill\": [\n  {\n    \"test\": \"indata('selectedPoints', 'key', datum.key)\",\n    \"scale\": \"c\",\n    \"field\": \"species\"\n  },\n  {\"value\": \"grey\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Quantile Scale for Color Encoding in Vega\nDESCRIPTION: This snippet demonstrates how to set up a quantile scale named 'color' in Vega. It maps input domain values from a data table to a discrete range of 5 colors using the 'plasma' color scheme.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"color\",\n  \"scale\": \"quantile\",\n  \"domain\": {\"data\": \"table\", \"field\": \"value\"},\n  \"range\": {\"scheme\": \"plasma\", \"count\": 5}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CSV Data with Custom Type Specifications in Vega\nDESCRIPTION: Shows how to load and parse CSV data with explicitly defined data types for specific fields using the vega.read() method\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-loader/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar data = null;\nloader.load('data/stocks.csv').then(function(csv_data) {\n  data = vega.read(csv_data, {\n    type: 'csv',\n    parse: {'date': 'date', 'price': 'number'}\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Math Operations in JavaScript\nDESCRIPTION: Core mathematical operations including absolute value, rounding functions (ceil, floor, round), and value clamping.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nabs(value)\nceil(value)\nfloor(value)\nround(value)\nclamp(value, min, max)\n```\n\n----------------------------------------\n\nTITLE: Configuring Voronoi Transform in Vega\nDESCRIPTION: Example configuration of a Voronoi transform that computes cell paths based on layout coordinates. The transform uses x and y coordinates from 'layout_x' and 'layout_y' fields respectively, and outputs the resulting SVG path to a field named 'cell'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/voronoi.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"voronoi\", \"x\": \"layout_x\", \"y\": \"layout_y\", \"as\": \"cell\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequential Scale with Color Interpolator in JavaScript\nDESCRIPTION: Demonstrates how to create a sequential scale using a color interpolator from the 'plasma' scheme.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scale/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar seq = vega.scale('sequential');\n\n// sequential scale, using the plasma color palette\nvar scale1 = seq().interpolator(vega.scheme('plasma'));\nscale1.type; // 'sequential'\n```\n\n----------------------------------------\n\nTITLE: Power Law Regression in Vega (JavaScript)\nDESCRIPTION: Fits a power law regression model (y = a * x^b) to the input data. Returns an object with coefficients, prediction function, and R-squared value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionPow(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Implementing Compare Function in Vega - Single Field\nDESCRIPTION: Example showing how to define a single field comparator for sorting data in ascending order.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"field\": \"amount\", \"order\": \"ascending\"}\n```\n\n----------------------------------------\n\nTITLE: Creating AST Nodes for Vega Expression Parsing\nDESCRIPTION: Constructor for nodes in an expression abstract syntax tree (AST). Takes a type string as input and provides a visit method for AST traversal and static analysis.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-expression/README.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nASTNode(type)\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with Expression in Vega (JSON)\nDESCRIPTION: This snippet demonstrates how to use the filter transform in Vega to retain only data elements where the 'x' field is greater than 10. It shows the basic structure of a filter transform object.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/filter.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"filter\", \"expr\": \"datum.x > 10\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Log-Normal Distribution Quantile in Vega\nDESCRIPTION: This function calculates the quantile value (inverse of cumulative distribution function) for a given probability in a log-normal distribution with specified log mean and log standard deviation. Defaults are 0 for log mean and 1 for log standard deviation if unspecified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.quantileLogNormal(probability[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Output Data After Bin Transform Application\nDESCRIPTION: Example output showing how the bin transform discretizes input values into bin ranges, adding 'bin0' and 'bin1' fields representing the start and end of each bin range.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/bin.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"amount\": 3.7, \"bin0\": 2, \"bin1\": 4},\n  {\"amount\": 6.2, \"bin0\": 6, \"bin1\": 8},\n  {\"amount\": 5.9, \"bin0\": 4, \"bin1\": 6},\n  {\"amount\": 8, \"bin0\": 8, \"bin1\": 10}\n]\n```\n\n----------------------------------------\n\nTITLE: Formatting Number with format Function in JavaScript\nDESCRIPTION: Formats a numeric value as a string using a d3-format specifier. Null values are formatted as \"null\".\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nformat(value, ',.2f')\n```\n\n----------------------------------------\n\nTITLE: Exponential Regression in Vega (JavaScript)\nDESCRIPTION: Fits an exponential regression model (y = a + e^(b * x)) to the input data. Returns an object with coefficients, prediction function, and R-squared value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionExp(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Implementation in Vega\nDESCRIPTION: Implements linear regression with form y = a + b * x. Returns fitted coefficients, prediction function, and R-squared value. Takes data array with x and y accessor functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLinear(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rectangle Marks for Bar Chart in Vega\nDESCRIPTION: Defines a rectangle mark configuration for a bar chart with interactive hover behavior. The mark uses scales to position bars based on category and amount data fields, with steelblue fill that turns red on hover.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"marks\": [\n    {\n      \"type\": \"rect\",\n      \"from\": {\"data\":\"table\"},\n      \"encode\": {\n        \"enter\": {\n          \"x\": {\"scale\": \"xscale\", \"field\": \"category\"},\n          \"width\": {\"scale\": \"xscale\", \"band\": 1},\n          \"y\": {\"scale\": \"yscale\", \"field\": \"amount\"},\n          \"y2\": {\"scale\": \"yscale\", \"value\": 0}\n        },\n        \"update\": {\n          \"fill\": {\"value\": \"steelblue\"}\n        },\n        \"hover\": {\n          \"fill\": {\"value\": \"red\"}\n        }\n      }\n    },\n```\n\n----------------------------------------\n\nTITLE: Using Vega's fastmap Implementation in JavaScript\nDESCRIPTION: Example of creating and using Vega's fastmap, a key/value map data structure for string keys. Shows initialization with values, checking for keys, getting and setting values, deleting entries, and retrieving metadata about the map size.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = vega.fastmap({foo:1, bar:2});\nmap.has('foo'); // -> true\nmap.get('foo'); // -> 1\nmap.delete('bar');\nmap.has('bar'); // -> false\nmap.set('baz', 0);\nmap.get('baz'); // -> 0\nmap.size; // -> 2\nmap.empty; // -> 1 (number of empty entries)\nmap.clean(); // invoke garbage collection, clears empty entries\n```\n\n----------------------------------------\n\nTITLE: Capturing Mousemove Events Between Mousedown and Mouseup in Vega JSON\nDESCRIPTION: Specifies an event stream object for mousemove events that occur only between mousedown and mouseup events, useful for implementing drag interactions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"mousemove\",\n  \"between\": [\n    {\"type\": \"mousedown\"},\n    {\"type\": \"mouseup\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sequence Generation with Step Value\nDESCRIPTION: Shows sequence generation with custom start (1), stop (10), step (2) values and custom output field name 'value'. Generates odd numbers from 1 to 9.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/sequence.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"sequence\", \"start\": 1, \"stop\": 10, \"step\": 2, \"as\": \"value\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"value\": 1},\n  {\"value\": 3},\n  {\"value\": 5},\n  {\"value\": 7},\n  {\"value\": 9}\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Graticule with Custom Step in Vega\nDESCRIPTION: This JSON snippet demonstrates how to use the graticule transform in Vega to generate a new graticule data stream with minor parallels and meridians spaced every 15 degrees.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/graticule.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"graticule\", \"stepMinor\": [15, 15]}\n```\n\n----------------------------------------\n\nTITLE: Basic Cross Transform in Vega\nDESCRIPTION: Demonstrates a simple cross transform that computes the cross-product of a data stream with itself. The input data contains three objects with v properties, and the output shows all possible combinations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/cross.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"cross\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": {\"v\": 1}, \"b\": {\"v\": 1}},\n  {\"a\": {\"v\": 1}, \"b\": {\"v\": 2}},\n  {\"a\": {\"v\": 1}, \"b\": {\"v\": 3}},\n  {\"a\": {\"v\": 2}, \"b\": {\"v\": 1}},\n  {\"a\": {\"v\": 2}, \"b\": {\"v\": 2}},\n  {\"a\": {\"v\": 2}, \"b\": {\"v\": 3}},\n  {\"a\": {\"v\": 3}, \"b\": {\"v\": 1}},\n  {\"a\": {\"v\": 3}, \"b\": {\"v\": 2}},\n  {\"a\": {\"v\": 3}, \"b\": {\"v\": 3}}\n]\n```\n\n----------------------------------------\n\nTITLE: Curve Sampling Utility in Vega\nDESCRIPTION: Generates sample points from interpolation function using adaptive subdivision. Returns array of [x,y] points. Takes interpolation function, domain extent, and optional min/max step parameters.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleCurve(f, extent[, minSteps, maxSteps])\n```\n\n----------------------------------------\n\nTITLE: Modifying Interpolation Range in JavaScript with Vega\nDESCRIPTION: Demonstrates how to create a new interpolator with a modified range using Vega's interpolateRange function.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scale/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar number = d3.interpolateNumber(0, 10);\nnumber(0);   // 0\nnumber(0.5); // 5\nnumber(1);   // 10\n\nvar range = vega.interpolateRange(number, [0.2, 0.8]);\nrange(0);   // 2\nrange(0.5); // 5\nrange(1);   // 8\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega with Expression Interpreter for CSP Compliance\nDESCRIPTION: This snippet demonstrates how to configure Vega to use the interpreter for expression evaluation instead of function generation. It shows parsing a Vega specification with AST output enabled and then initializing a Vega View with the expression interpreter.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-interpreter/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst spec; // Vega specification to show.\n\n// Parse the Vega specification with AST output enabled\n// Pass a null configuration value as the second argument\nconst runtimeSpec = vega.parse(spec, null, { ast: true });\n\n// Call the Vega View constructor with an 'expr' interpreter option\nconst view = new vega.View(runtimeSpec, {\n  expr:      vega.expressionInterpreter, // use interpreter\n  renderer:  'canvas',  // renderer (canvas or svg)\n  container: '#view',   // parent DOM container\n  hover:     true       // enable hover processing\n});\n\nview.runAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining Default Multi-Format Time Specifiers in JavaScript\nDESCRIPTION: This code snippet defines a default object for multi-format time specifiers used in Vega's timeFormat function when no specifier is provided. It specifies format strings for different time granularities.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"year\": \"%Y\",\n  \"quarter\": \"%B\",\n  \"month\": \"%B\",\n  \"week\": \"%b %d\",\n  \"date\": \"%a %d\",\n  \"hours\": \"%I %p\",\n  \"minutes\": \"%I:%M\",\n  \"seconds\": \":%S\",\n  \"milliseconds\": \".%L\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Uniform Distribution in Vega\nDESCRIPTION: Creates a continuous uniform probability distribution object over the interval [min, max). If unspecified, min defaults to 0 and max to 1. If only one argument is provided, it is treated as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvega.randomUniform([min, max])\n```\n\n----------------------------------------\n\nTITLE: Configuring Visualization Size in Vega\nDESCRIPTION: Properties that determine the size and dimensions of the visualization. This includes width, height, padding, and autosize settings that control how the chart is rendered.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"width\": 400,\n  \"height\": 200,\n  \"padding\": 5,\n  \"autosize\": \"pad\",\n```\n\n----------------------------------------\n\nTITLE: Parsing Date String with timeParse Function in JavaScript\nDESCRIPTION: Parses a string value to a Date object according to local time using a d3-time-format specifier.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\ntimeParse('June 30, 2015', '%B %d, %Y')\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Labels and Orientation in Vega\nDESCRIPTION: This example demonstrates how to set the axis label color globally and rotate labels for bottom-oriented axes in Vega. It uses the 'axis' and 'axisBottom' properties to apply these configurations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"axis\": {\n    \"labelColor\": \"#ccc\"\n  },\n  \"axisBottom\": {\n    \"labelAngle\": -90\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exponential Regression Implementation in Vega\nDESCRIPTION: Implements exponential regression with form y = a + e^(b * x). Returns fitted coefficients, prediction function, and R-squared value. Takes data array with x and y accessor functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionExp(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Imputing Missing Data Values Using Vega Transform\nDESCRIPTION: Example showing how to use the impute transform to fill in missing data. The transform is configured to group by 'c', use 'x' as the key field, impute missing 'y' values, and fill them with a constant value of 500.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/impute.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"name\": \"table\",\n      \"values\": [\n        {\"x\": 0, \"y\": 28, \"c\": 0}, {\"x\": 0, \"y\": 55, \"c\": 1},\n        {\"x\": 1, \"y\": 43, \"c\": 0}, {\"x\": 1, \"y\": 91, \"c\": 1},\n        {\"x\": 2, \"y\": 81, \"c\": 0}, {\"x\": 2, \"y\": 53, \"c\": 1},\n        {\"x\": 3, \"y\": 19, \"c\": 0}\n      ],\n      \"transform\": [\n        {\n          \"type\": \"impute\",\n          \"groupby\": [\"c\"],\n          \"key\": \"x\",\n          \"field\": \"y\",\n          \"method\": \"value\",\n          \"value\": 500\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cyclical Time Unit Transform in Vega\nDESCRIPTION: Example showing how to discretize date values by month only, ignoring the year component.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/timeunit.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"timeunit\", \"field\": \"date\", \"units\": [\"month\"]}\n```\n\n----------------------------------------\n\nTITLE: Signal with Custom Mark Encoding Events\nDESCRIPTION: Shows how to define a signal that triggers custom mark encodings on mousedown and mouseup events. Requires corresponding encode definitions in the mark specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"clickEncode\",\n  \"on\": [\n    {\"events\": \"*:mousedown\", \"encode\": \"select\"},\n    {\"events\": \"*:mouseup\", \"encode\": \"release\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Date Components in JavaScript\nDESCRIPTION: Functions to extract various date components like day, month, year, etc. from a datetime value in local time.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\ndate(datetime)\nday(datetime)\ndayofyear(datetime)\nyear(datetime)\nquarter(datetime)\nmonth(datetime)\nweek(date)\nhours(datetime)\nminutes(datetime)\nseconds(datetime)\nmilliseconds(datetime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactive Legend Symbols in Vega 3\nDESCRIPTION: Demonstrates how to enable interaction for legend symbols using the new 'encode' block structure in Vega 3. This allows for custom hover and update behaviors on legend items.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/porting-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"legends\": [\n  {\n    \"fill\": \"colorScale\",\n    \"title\": \"Legend Title\",\n    \"orient\": \"right\",\n    \"encode\": {\n      \"symbols\": {\n        \"interactive\": true,\n        \"hover\": {...},\n        \"update\": {...}\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Project Transform in Vega JSON\nDESCRIPTION: Demonstrates a simple project transform that copies only the 'foo' and 'bar' fields from the source data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/project.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"project\", \"fields\": [\"foo\", \"bar\"]}\n```\n\n----------------------------------------\n\nTITLE: Pivot Transform Configuration in JSON\nDESCRIPTION: Transform configuration that specifies how to pivot the data, grouping by country and creating new columns from medal types.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/pivot.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"pivot\",\n  \"groupby\": [\"country\"],\n  \"field\": \"type\",\n  \"value\": \"count\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading TopoJSON Data with Mesh Extraction in Vega\nDESCRIPTION: Demonstrates loading and parsing TopoJSON data with mesh extraction for country boundaries using the vega.read() method\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-loader/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar topojson = null;\nloader.load('data/world-110m.json').then(function(data) {\n  topojson = vega.read(data, {type: 'topojson', mesh: 'countries'});\n});\n```\n\n----------------------------------------\n\nTITLE: Flooring UTC Dates in Vega\nDESCRIPTION: The utcFloor function returns a function that performs flooring (truncation) of input dates to given time units in UTC. It accepts an array of time unit strings and an optional step argument.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.utcFloor(units[, step])\n```\n\n----------------------------------------\n\nTITLE: Defining Timer Events in Vega JSON\nDESCRIPTION: Creates an event stream object for timer events that occur every 2 seconds (2000 milliseconds), which can be used for animations or periodic updates in a visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"timer\",\n  \"throttle\": 2000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Random Generator with vega.setRandom()\nDESCRIPTION: Sets a custom random number generator function for Vega. Useful for introducing alternative sources of randomness or creating deterministic output for testing purposes.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.setRandom(randfunc)\n```\n\n----------------------------------------\n\nTITLE: Fold Transform Output Data Example\nDESCRIPTION: Resulting data structure after applying the fold transform, showing how the gold and silver fields are converted into key-value pairs while maintaining original data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/fold.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\": \"gold\", \"value\": 10, \"country\": \"USA\", \"gold\": 10, \"silver\": 20},\n  {\"key\": \"silver\", \"value\": 20, \"country\": \"USA\", \"gold\": 10, \"silver\": 20},\n  {\"key\": \"gold\", \"value\": 7, \"country\": \"Canada\", \"gold\": 7, \"silver\": 26},\n  {\"key\": \"silver\", \"value\": 26, \"country\": \"Canada\", \"gold\": 7, \"silver\": 26}\n]\n```\n\n----------------------------------------\n\nTITLE: LOESS Regression in Vega (JavaScript)\nDESCRIPTION: Fits a smoothed, non-parametric trend line using LOESS (locally-estimated scatterplot smoothing) to the input data. The bandwidth parameter determines the size of the sliding window.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLoess(data, x, y, bandwidth)\n```\n\n----------------------------------------\n\nTITLE: Advanced Radial LinkPath Configuration\nDESCRIPTION: Advanced configuration for generating orthogonal link paths in polar coordinates. Uses custom source and target fields for angle and radius values, with results written to the 'linkpath' field.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/linkpath.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"linkpath\",\n  \"orient\": \"radial\",\n  \"sourceX\": \"source.angle\",\n  \"sourceY\": \"source.radius\",\n  \"targetX\": \"target.angle\",\n  \"targetY\": \"target.radius\",\n  \"shape\": \"orthogonal\",\n  \"as\": \"linkpath\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Tree Links with Stratify Transform in Vega\nDESCRIPTION: Example showing how to generate tree links using the treelinks transform in combination with a stratify transform. The stratify transform creates a tree structure using id and parent fields, while treelinks generates the connections between nodes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/treelinks.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"name\": \"tree\",\n      \"url\": \"tree.csv\",\n      \"transform\": [\n        {\n          \"type\": \"stratify\",\n          \"key\": \"id\",\n          \"parentKey\": \"parent\"\n        }\n      ]\n    },\n    {\n      \"name\": \"links\",\n      \"source\": \"tree\",\n      \"transform\": [\n        {\n          \"type\": \"treelinks\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Transform Result Example\nDESCRIPTION: Shows the resulting data structure after applying the lookup transform to the input data. Each record from the primary stream is enriched with matching data from the secondary stream.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/lookup.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"foo\": \"A\", \"bar\": 28, \"obj\": {\"id\": \"A\", \"name\": \"label A\"}},\n{\"foo\": \"B\", \"bar\": 55, \"obj\": {\"id\": \"B\", \"name\": \"label B\"}},\n{\"foo\": \"C\", \"bar\": 43, \"obj\": {\"id\": \"C\", \"name\": \"label C\"}},\n{\"foo\": \"C\", \"bar\": 91, \"obj\": {\"id\": \"C\", \"name\": \"label C\"}},\n{\"foo\": \"D\", \"bar\": 81, \"obj\": null}\n```\n\n----------------------------------------\n\nTITLE: Output Data Stream with Generated Nodes in JavaScript\nDESCRIPTION: Illustrates the output data stream when the 'generate' parameter is set to true. It includes both the original input nodes and the generated internal nodes with 'key' and 'values' properties.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/nest.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n[\n  // original input nodes\n  {\"id\": \"A\", \"job\": \"Doctor\", \"region\": \"East\"},\n  {\"id\": \"B\", \"job\": \"Doctor\", \"region\": \"East\"},\n  {\"id\": \"C\", \"job\": \"Lawyer\", \"region\": \"East\"},\n  {\"id\": \"D\", \"job\": \"Lawyer\", \"region\": \"East\"},\n  {\"id\": \"E\", \"job\": \"Doctor\", \"region\": \"West\"},\n  {\"id\": \"F\", \"job\": \"Doctor\", \"region\": \"West\"},\n  {\"id\": \"G\", \"job\": \"Lawyer\", \"region\": \"West\"},\n  {\"id\": \"H\", \"job\": \"Lawyer\", \"region\": \"West\"},\n\n  // generated internal nodes\n  // for the root node, key is undefined\n  // values arrays contain nested groups of objects\n  {\"values\": [ ... ] },\n  {\"key\": \"Doctor\", \"values\": [ ... ]},\n  {\"key\": \"Lawyer\", \"values\": [ ... ] },\n  {\"key\": \"East\", \"values\": [ ... ]},\n  {\"key\": \"West\", \"values\": [ ... ]},\n  {\"key\": \"East\", \"values\": [ ... ]},\n  {\"key\": \"West\", \"values\": [ ... ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Tree Links with Nest Transform in Vega\nDESCRIPTION: Example demonstrating tree link generation using the treelinks transform with a nest transform. The nest transform creates a hierarchical structure based on category fields with generated internal nodes, and treelinks creates the connections.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/treelinks.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"name\": \"tree\",\n      \"url\": \"tree.csv\",\n      \"transform\": [\n        {\n          \"type\": \"nest\",\n          \"keys\": [\"categoryA\", \"categoryB\"],\n          \"generate\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"links\",\n      \"source\": \"tree\",\n      \"transform\": [\n        {\n          \"type\": \"treelinks\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Encoding Transforms in Vega\nDESCRIPTION: Example demonstrating how to use post-encoding transforms for direct manipulation of scenegraph item properties, showing a wordcloud layout transform applied after encoding.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/porting-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"marks\": [{\n  \"type\": \"text\",\n  \"from\": {\"data\": \"table\"},\n  \"encode\": {...},\n  \"transform\": [\n    {\n      \"type\": \"wordcloud\",\n      \"size\": [800, 400],\n      \"text\": {\"field\": \"text\"},\n      ...\n    }\n  ]\n}]\n```\n\n----------------------------------------\n\nTITLE: UTC Date Offset Calculation in JavaScript\nDESCRIPTION: Creates a new Date by offsetting an input date by specified UTC time units and steps.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvega.utcOffset(unit, date[, step])\n```\n\n----------------------------------------\n\nTITLE: Generating Isocontours from 2D Kernel Density Estimate in Vega\nDESCRIPTION: This example demonstrates how to generate 10 levels of contours from a 2D kernel density estimate of source data. It uses the kde2d transform to compute the density grid, which is then passed to the isocontour transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/isocontour.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"kde2d\",\n  \"x\": \"x_value\",\n  \"y\": \"y_value\",\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}],\n  \"as\": \"grid\"\n},\n{\n  \"type\": \"isocontour\",\n  \"field\": \"grid\",\n  \"levels\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Data Field Extent in Vega JSON\nDESCRIPTION: Example showing how to compute the minimum and maximum values for a data field named 'value' and bind the resulting [min, max] array to a signal named 'extent'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/extent.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"extent\", \"field\": \"value\", \"signal\": \"extent\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions for Vega Expression\nDESCRIPTION: Given a codegen instance, returns an object defining all valid function names for use within Vega expressions. Maps function names to either string templates or generator functions.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-expression/README.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunctions(codegen)\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Palettes in Vega\nDESCRIPTION: This snippet demonstrates how to set new default color palettes for different types of data in Vega. It defines custom colors for categorical data and uses predefined color schemes for ordinal and sequential data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"range\": {\n    \"category\": [\n      \"#5079a5\",\n      \"#ef8e3b\",\n      \"#dd565c\",\n      \"#79b7b2\",\n      \"#5da052\",\n      \"#ecc853\",\n      \"#ad7aa1\",\n      \"#ef9ba7\",\n      \"#9b7461\",\n      \"#bab0ac\"\n    ],\n    \"ordinal\": {\"scheme\": \"greens\"},\n    \"ramp\": {\"scheme\": \"purples\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating extentIndex with Arrays in JavaScript\nDESCRIPTION: Examples of using the extentIndex function to find array indices of minimum and maximum values in both simple arrays and arrays of objects with an accessor function.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvega.extentIndex([1,5,3,0,4,2]); // [3, 1]\nvega.extentIndex([\n  {a: 3, b:2},\n  {a: 2, b:1},\n  {a: 1, b:3}\n], vega.field('b')); // [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Fill Color and Size for Symbol Marks in Vega\nDESCRIPTION: This snippet demonstrates how to set a default fill color and size for 'symbol' marks in a Vega visualization. It uses the 'symbol' property to define these default values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"symbol\": {\n    \"fill\": \"steelblue\",\n    \"size\": 64\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Data Structure After Pivot Transform in JSON\nDESCRIPTION: Resulting data structure after applying the pivot transform, showing medal counts as columns for each country.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/pivot.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"country\": \"Norway\",  \"gold\": 14, \"silver\": 14, \"bronze\": 11},\n  {\"country\": \"Germany\", \"gold\": 14, \"silver\": 10, \"bronze\":  7},\n  {\"country\": \"Canada\",  \"gold\": 11, \"silver\":  8, \"bronze\": 10},\n]\n```\n\n----------------------------------------\n\nTITLE: External Element Binding Properties Documentation\nDESCRIPTION: Documentation table showing properties for binding Vega signals to external HTML elements, including element selection and event handling configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description  |\n| :------------------ | :----------------------------: | :------------|\n| element             | {% include type t=\"String\" %}  | {% include required %} An input element that exposes a *value* property and supports the [EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) interface, or a CSS selector string to such an element. When the element updates and dispatches an event, the *value* property will be used as the new, bound signal value. When the signal updates independent of the element, the *value* property will be set to the signal value and a new event will be dispatched on the element. |\n| event               | {% include type t=\"String\" %}  | The event (default `\"input\"`) to listen for to track changes on the external element. |\n| debounce            | {% include type t=\"Number\" %}  | If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.|\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Named Styles for Symbol Marks in Vega\nDESCRIPTION: This snippet illustrates how to define a custom named style for symbol marks in Vega. It creates a style named 'square' with specific shape and stroke width properties. These styles can be invoked using a 'style' directive within mark definitions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"style\": {\n  \"square\": {\n    \"shape\": \"square\",\n    \"strokeWidth\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ordinal Color Scale in Vega\nDESCRIPTION: Example showing how to configure an ordinal scale for mapping categorical data to colors using a color scheme with up to 20 unique colors.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/scales.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scales\": [\n    {\n      \"name\": \"color\",\n      \"type\": \"ordinal\",\n      \"domain\": {\"data\": \"table\", \"field\": \"category\"},\n      \"range\": {\"scheme\": \"category20\"}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GeoShape Transform in Vega JSON\nDESCRIPTION: This snippet demonstrates how to configure the geoshape transform in a Vega specification. It sets up the transform to use a specified projection for GeoJSON objects.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/geoshape.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"geoshape\",\n  \"projection\": \"projection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Compare Function with Signals\nDESCRIPTION: Example showing how to use signals for dynamic field and order specification in comparators.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": {\"signal\": \"sortField\"},\n  \"order\": {\"signal\": \"sortOrder\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Signal with Mouseover Event\nDESCRIPTION: Demonstrates a signal that increments a counter value when the mouse moves over rectangle elements. Shows basic event handling with a numeric value update.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"count\",\n  \"value\": 0,\n  \"on\": [\n    {\"events\": \"rect:mouseover\", \"update\": \"count + 1\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Text Marks for Tooltips in Vega\nDESCRIPTION: Configures a text mark that acts as a tooltip, using signal values to dynamically position and show text. The fillOpacity production rule controls visibility based on whether tooltip data exists.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"marks\": [\n    ...,\n    {\n      \"type\": \"text\",\n      \"encode\": {\n        \"enter\": {\n          \"align\": {\"value\": \"center\"},\n          \"baseline\": {\"value\": \"bottom\"},\n          \"fill\": {\"value\": \"#333\"}\n        },\n        \"update\": {\n          \"x\": {\"scale\": \"xscale\", \"signal\": \"tooltip.category\", \"band\": 0.5},\n          \"y\": {\"scale\": \"yscale\", \"signal\": \"tooltip.amount\", \"offset\": -2},\n          \"text\": {\"signal\": \"tooltip.amount\"},\n          \"fillOpacity\": [\n            {\"test\": \"isNaN(tooltip.amount)\", \"value\": 0},\n            {\"value\": 1}\n          ]\n        }\n      }\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: JoinAggregate Transform Configuration\nDESCRIPTION: Transform configuration that specifies aggregation operations on multiple fields with custom output names.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/joinaggregate.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"joinaggregate\",\n  \"fields\": [\"foo\", \"bar\", \"bar\"],\n  \"ops\": [\"valid\", \"sum\", \"median\"],\n  \"as\": [\"v\", \"s\", \"m\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Un-nested Output Data in Vega JSON\nDESCRIPTION: Shows the result of applying the un-nesting project transform to the sample input data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/project.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"bar\":0, \"a\":5, \"b\":\"abc\"},\n  {\"bar\":1, \"a\":6, \"b\":\"def\"},\n  {\"bar\":2, \"a\":7, \"b\":\"ghi\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Normal Distribution Density Transform in Vega\nDESCRIPTION: Configures a density transform to generate samples from a normal distribution with mean 5 and standard deviation 2. Samples 100 points along the domain [0, 10].\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/density.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"density\",\n  \"extent\": [0, 10],\n  \"distribution\": {\n    \"function\": \"normal\",\n    \"mean\": 5,\n    \"stdev\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Number Sequence in JavaScript\nDESCRIPTION: Returns an array containing an arithmetic sequence of numbers with optional start, stop, and step parameters.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nsequence([start, ]stop[, step])\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for CountPattern Transform\nDESCRIPTION: Example input data showing text content with numbers to be processed by the countpattern transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/countpattern.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"comment\": \"between 12 and 12.43\"},\n  {\"comment\": \"43 minutes past 12 o'clock (and 13 seconds)\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Simple Sort Using Collect Transform in Vega\nDESCRIPTION: JSON configuration for a collect transform that sorts data objects by the field 'a' in ascending order.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/collect.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"collect\",\n  \"sort\": {\"field\": \"a\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Log-Normal Quantile with vega.quantileLogNormal()\nDESCRIPTION: Returns the quantile value (inverse of CDF) for a log-normal distribution at a given probability. Optional parameters specify the log mean and log standard deviation.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.quantileLogNormal(probability[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Configuring Equal-Width Pie Transform in Vega\nDESCRIPTION: Shows how to configure a pie transform that creates equal-sized slices without using a field value. This results in evenly distributed pie segments.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/pie.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"pie\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expression Reference - Per-Datum Evaluation\nDESCRIPTION: Example showing expression reference that evaluates for each datum in a wordcloud transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"wordcloud\",\n  \"rotate\": {\"expr\": \"datum.minAngle + round(90*random() - 45)\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessibility Properties Configuration - Vega\nDESCRIPTION: ARIA accessibility configuration options for SVG output to improve chart accessibility.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/axes.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\naria: Boolean - Enable/disable ARIA attributes\ndescription: String - ARIA description text\n```\n\n----------------------------------------\n\nTITLE: Configuring GeoPoint Transform in Vega\nDESCRIPTION: Example configuration of the geopoint transform that projects longitude and latitude values from 'lon' and 'lat' fields to 'x' and 'y' coordinates using a specified projection. The transform requires a projection name and source data fields.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/geopoint.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"geopoint\",\n  \"projection\": \"myprojection\",\n  \"fields\": [\"lon\", \"lat\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Offsetting UTC Dates in Vega\nDESCRIPTION: The utcOffset function returns a new Date instance that offsets the given date by the specified time unit in UTC. It accepts a time unit, a date, and an optional step argument.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.utcOffset(unit, date[, step])\n```\n\n----------------------------------------\n\nTITLE: Configuring CountPattern Transform in Vega\nDESCRIPTION: Example configuration of the countpattern transform to count digit sequences in a comment field while excluding the number 13.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/countpattern.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"countpattern\",\n  \"field\": \"comment\",\n  \"pattern\": \"\\\\d+\",\n  \"stopwords\": \"13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Normal PDF with vega.densityNormal()\nDESCRIPTION: Computes the probability density function (PDF) for a normal distribution at a given value. Optional parameters specify the mean and standard deviation, defaulting to standard normal if omitted.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.densityNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Polynomial Regression Implementation in Vega\nDESCRIPTION: Implements polynomial regression of specified order. Returns array of polynomial coefficients, prediction function, and R-squared value. Takes data array with x and y accessor functions and order parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionPoly(data, x, y, order)\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived Event Stream in Vega JSON\nDESCRIPTION: Demonstrates how to create a derived event stream by modifying an existing stream with additional parameters like filters and debounce.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stream\": {\"marktype\": \"rect\", \"type\": \"click\"},\n  \"filter\": \"event.shiftKey\",\n  \"debounce\": 500\n}\n```\n\n----------------------------------------\n\nTITLE: Logarithmic Regression Implementation in Vega\nDESCRIPTION: Implements logarithmic regression with form y = a + b * log(x). Returns fitted coefficients, prediction function, and R-squared value. Takes data array with x and y accessor functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionLog(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: Calculating Log-Normal Distribution Quantile in JavaScript\nDESCRIPTION: Returns the quantile value (the inverse of the cumulative distribution function) for the given input probability, for a log-normal distribution with specified log mean and log standard deviation. If unspecified, the log mean defaults to 0 and the log standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nquantileLogNormal(probability[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Calculating Uniform PDF with vega.densityUniform()\nDESCRIPTION: Computes the probability density function (PDF) for a uniform distribution at a given value. Optional parameters specify the min and max bounds of the distribution.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.densityUniform(value[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Configuring View Padding in Vega\nDESCRIPTION: Gets or sets the view padding in pixels. Accepts a padding object or a numeric value. Returns the current padding if no arguments are provided, or sets the padding and returns the view instance if padding is specified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.padding([padding])\n```\n\n----------------------------------------\n\nTITLE: UTC Date Sequence Generation in JavaScript\nDESCRIPTION: Generates an array of dates between start and stop dates, separated by specified UTC time units.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvega.utcSequence(unit, start, stop[, step])\n```\n\n----------------------------------------\n\nTITLE: Loading Vega with D3 Dependencies\nDESCRIPTION: HTML code showing how to load Vega alongside D3.js and TopoJSON client, using a minimal core bundle to avoid duplicate dependencies.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/index.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"https://cdn.jsdelivr.net/npm/d3@{{ site.data.versions.d3 }}\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/topojson-client@{{ site.data.versions.topojson }}\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}/build/vega-core.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Combined Signal and Event Stream Configuration\nDESCRIPTION: Example demonstrating how to combine signal references with event stream objects in a single event configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"on\": [\n  {\n    \"events\": [{\"signal\": \"foo\"}, {\"type\": \"click\", \"marktype\": \"rect\"}],\n    \"update\": \"...\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating UTC Week Number in Vega\nDESCRIPTION: The utcweek function returns the week number of the year for the given date in UTC. It assumes Sunday-based weeks and accepts a Date object or timestamp value as an argument.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.utcweek(date)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Projection Type in Vega\nDESCRIPTION: This example shows how to set the default projection type for cartographic projections in Vega. It sets the default projection to 'equalEarth'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projection\": {\n    \"type\": \"equalEarth\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Contours for 2D Kernel Density Estimate in Vega\nDESCRIPTION: This snippet demonstrates how to use the contour transform to generate 10 levels of contours for a 2D kernel density estimate of a source data stream. It uses pre-computed pixel coordinates and configures the area for contour computation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/contour.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"contour\",\n  \"x\": \"x_value\",\n  \"y\": \"y_value\",\n  \"size\": [{\"signal\": \"width\"}, {\"signal\": \"height\"}],\n  \"count\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scenegraph in Vega\nDESCRIPTION: Returns the Vega scenegraph instance for the view.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.scenegraph()\n```\n\n----------------------------------------\n\nTITLE: Power Law Regression Implementation in Vega\nDESCRIPTION: Implements power law regression with form y = a * x^b. Returns fitted coefficients, prediction function, and R-squared value. Takes data array with x and y accessor functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.regressionPow(data, x, y)\n```\n\n----------------------------------------\n\nTITLE: UTC Week Number Calculation in JavaScript\nDESCRIPTION: Calculates the week number of the year for a given date in UTC, using Sunday-based weeks.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvega.utcweek(date)\n```\n\n----------------------------------------\n\nTITLE: Loading Extended Projections via CDN\nDESCRIPTION: Imports the vega-projection-extended library via CDN to add all extended projections from d3-geo-projection to Vega.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/projections.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vega-projection-extended@2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Field Accessor Functions in JavaScript\nDESCRIPTION: Examples showing how to use Vega's field accessor functions to retrieve object properties. Demonstrates basic field access and nested property access with optional naming.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar fooField = vega.field('foo');\nfooField({foo: 5}); // 5\nvega.accessorName(fooField); // 'foo'\nvega.accessorFields(fooField); // ['foo']\n\nvar pathField = vega.field('foo.bar', 'path');\npathField({foo: {bar: 'vega'}}); // 'vega'\npathField({foo: 5}); // undefined\nvega.accessorName(pathField); // 'path'\nvega.accessorFields(pathField); // ['foo.bar']\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Grid Lines in Vega\nDESCRIPTION: Example of configuring light gray axis grid lines using the config property in a Vega specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 500,\n  \"height\": 200,\n  \"config\": {\n    \"axis\": {\n      \"grid\": true,\n      \"gridColor\": \"#dedede\"\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Rule Mark Example in Markdown\nDESCRIPTION: This snippet embeds a specification example for the Rule mark using a custom Jekyll include directive.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/rule.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include embed spec=\"rule\" %}\n```\n\n----------------------------------------\n\nTITLE: Calculating Array Extent in JavaScript\nDESCRIPTION: Returns a new [min, max] array with the minimum and maximum values of the input array, ignoring null, undefined, and NaN values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nextent(array)\n```\n\n----------------------------------------\n\nTITLE: Importing Core Extended Projections with Standalone D3 in HTML\nDESCRIPTION: This code snippet shows how to include the vega-projections-core.min.js file in an HTML document when using a standalone version of D3. This smaller file contains only the extended projections and assumes D3 is already imported.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-projection-extended/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"vega-projections-core.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Generating UTC Date Sequences in Vega\nDESCRIPTION: The utcSequence function returns an array of Date instances from start to stop, with each entry separated by the given time unit in UTC. It takes a time unit, start date, stop date, and an optional step argument.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.utcSequence(unit, start, stop[, step])\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for Nest Transform in JSON\nDESCRIPTION: Provides an example of input data that can be used with the nest transform. The data includes 'id', 'job', and 'region' fields for each object.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/nest.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"id\": \"A\", \"job\": \"Doctor\", \"region\": \"East\"},\n  {\"id\": \"B\", \"job\": \"Doctor\", \"region\": \"East\"},\n  {\"id\": \"C\", \"job\": \"Lawyer\", \"region\": \"East\"},\n  {\"id\": \"D\", \"job\": \"Lawyer\", \"region\": \"East\"},\n  {\"id\": \"E\", \"job\": \"Doctor\", \"region\": \"West\"},\n  {\"id\": \"F\", \"job\": \"Doctor\", \"region\": \"West\"},\n  {\"id\": \"G\", \"job\": \"Lawyer\", \"region\": \"West\"},\n  {\"id\": \"H\", \"job\": \"Lawyer\", \"region\": \"West\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Signals in Vega Expressions\nDESCRIPTION: Shows how to reference in-scope signal values directly by name within Vega expressions, including accessing object properties using signal-bound names.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nhover.value\ndatum[property_name]\n```\n\n----------------------------------------\n\nTITLE: Creating Mixture Distribution in Vega\nDESCRIPTION: Creates a distribution object representing a weighted mixture of probability distributions. Takes an array of distribution objects and optional weights array. The weights are normalized to sum to 1. Does not support the icdf method.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvega.randomMixture(distributions[, weights])\n```\n\n----------------------------------------\n\nTITLE: Synchronous Dataflow Evaluation Request in Vega\nDESCRIPTION: Requests asynchronous view evaluation and returns the view instance immediately. Arguments are identical to runAsync, but doesn't wait for evaluation to complete.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.run([encode, prerun, postrun])\n```\n\n----------------------------------------\n\nTITLE: Generating Loess Trend Line in Vega\nDESCRIPTION: This snippet demonstrates how to use the loess transform in Vega to generate a trend line. It models the field 'dv' as a function of 'iv' using a bandwidth parameter of 0.2. The resulting data stream can be visualized with a line mark.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/loess.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"regression\",\n  \"method\": \"loess\",\n  \"x\": \"dv\",\n  \"y\": \"iv\",\n  \"bandwidth\": 0.2\n}\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation in JavaScript\nDESCRIPTION: Returns the linearly interpolated value between the first and last entries in the array for the provided interpolation fraction.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nlerp(array, fraction)\n```\n\n----------------------------------------\n\nTITLE: Creating Canvas Object in JavaScript\nDESCRIPTION: Creates a new Canvas instance with optional width, height, and type parameters. Attempts to use DOM methods first, then falls back to node-canvas if available.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-canvas/README.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.canvas([width, height, type])\n```\n\n----------------------------------------\n\nTITLE: Number Validation Functions in JavaScript\nDESCRIPTION: Functions for validating number types - isNaN() checks if a value is not a number, while isFinite() verifies if a value is a finite number.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nisNaN(value)\nisFinite(value)\n```\n\n----------------------------------------\n\nTITLE: Input Data Structure for Pivot Transform in JSON\nDESCRIPTION: Example input data structure showing country medal counts before pivot transformation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/pivot.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"country\": \"Norway\",  \"type\": \"gold\",   \"count\": 14},\n  {\"country\": \"Norway\",  \"type\": \"silver\", \"count\": 14},\n  {\"country\": \"Norway\",  \"type\": \"bronze\", \"count\": 11},\n  {\"country\": \"Germany\", \"type\": \"gold\",   \"count\": 14},\n  {\"country\": \"Germany\", \"type\": \"silver\", \"count\": 10},\n  {\"country\": \"Germany\", \"type\": \"bronze\", \"count\":  7},\n  {\"country\": \"Canada\",  \"type\": \"gold\",   \"count\": 11},\n  {\"country\": \"Canada\",  \"type\": \"silver\", \"count\":  8},\n  {\"country\": \"Canada\",  \"type\": \"bronze\", \"count\": 10}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Seeded Random Generator with vega.randomLCG()\nDESCRIPTION: Creates a linear congruential generator (LCG) with a specified seed value. Returns a function that generates random values in the domain [0, 1), providing deterministic sequences for testing or reproducible outputs.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomLCG(seed)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating extentIndex Function Usage in JavaScript\nDESCRIPTION: Examples showing how to use the extentIndex function to find array indices of minimum and maximum values, both with direct values and with accessor functions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvega.extentIndex([1,5,3,0,4,2]); // [3, 1]\nvega.extentIndex([\n  {a: 3, b:2},\n  {a: 2, b:1},\n  {a: 1, b:3}\n], vega.field('b')); // [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Calculating Normal Distribution Density in Vega\nDESCRIPTION: This function calculates the probability density function at a given value for a normal distribution with specified mean and standard deviation. Defaults are 0 for mean and 1 for standard deviation if unspecified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.densityNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Filtered Cross Transform in Vega\nDESCRIPTION: Shows how to use the filter parameter to exclude self-pairs from the cross-product results. The filter expression 'datum.a !== datum.b' removes cases where the same object is paired with itself.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/cross.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"cross\", \"filter\": \"datum.a !== datum.b\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": {\"v\": 1}, \"b\": {\"v\": 2}},\n  {\"a\": {\"v\": 1}, \"b\": {\"v\": 3}},\n  {\"a\": {\"v\": 2}, \"b\": {\"v\": 1}},\n  {\"a\": {\"v\": 2}, \"b\": {\"v\": 3}},\n  {\"a\": {\"v\": 3}, \"b\": {\"v\": 1}},\n  {\"a\": {\"v\": 3}, \"b\": {\"v\": 2}}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating UTC Time Intervals in Vega\nDESCRIPTION: The utcInterval function returns a d3-time interval for the given time unit in UTC. It takes a single time unit as an argument.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.utcInterval(unit)\n```\n\n----------------------------------------\n\nTITLE: Registering Discrete Color Scheme in Vega\nDESCRIPTION: Example showing how to register a new discrete color scheme named 'basic' with an array of hex color values that can be used in Vega specifications.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvega.scheme('basic', ['#f00', '#0f0', '#00f', '#ff0', '#f0f', '#0ff']);\n```\n\n----------------------------------------\n\nTITLE: Defining Arc Mark Properties in Markdown\nDESCRIPTION: A markdown table defining the type-specific properties for Arc marks in Vega. It includes properties such as startAngle, endAngle, padAngle, innerRadius, outerRadius, and cornerRadius, along with their types and descriptions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/arc.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description   |\n| :------------------ | :----------------------------: | :------------ |\n| startAngle          | {% include type t=\"Number\" %}  | The start angle in radians. A value of `0` indicates up or \"north\", increasing values proceed clockwise. |\n| endAngle            | {% include type t=\"Number\" %}  | The end angle in radians. A value of `0` indicates up or \"north\", increasing values proceed clockwise. |\n| padAngle            | {% include type t=\"Number\" %}  | The angular padding applied to sides of the arc, in radians. |\n| innerRadius         | {% include type t=\"Number\" %}  | The inner radius in pixels. |\n| outerRadius         | {% include type t=\"Number\" %}  | The outer radius in pixels. |\n| cornerRadius        | {% include type t=\"Number\" %}  | The radius in pixels of rounded arc corners (default `0`). |\n```\n\n----------------------------------------\n\nTITLE: Calculating Uniform Distribution Quantile in Vega\nDESCRIPTION: This function calculates the quantile value (inverse of cumulative distribution function) for a given probability in a uniform distribution over the interval [min, max). If unspecified, min defaults to 0 and max to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.quantileUniform(probability[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Computing Quartile Boundaries with Quantile Transform in Vega\nDESCRIPTION: This example demonstrates how to use the quantile transform to compute the quartile boundaries (25th, 50th, and 75th percentiles) for the input data field 'value'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/quantile.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"quantile\", \"field\": \"value\", \"probs\": [0.25, 0.50, 0.75]}\n```\n\n----------------------------------------\n\nTITLE: Curve Sampling in Vega (JavaScript)\nDESCRIPTION: Generates sample points from an interpolation function for a given domain extent. Uses adaptive subdivision to sample more points in regions of higher curvature.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleCurve(f, extent[, minSteps, maxSteps])\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Locale Objects in Vega\nDESCRIPTION: Creates a combined locale object with methods for both number and time formatting based on provided definitions. Uses d3-format and d3-time-format internally to handle the locale configurations.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-format/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvega.locale(numberDefinition, timeDefinition)\n```\n\n----------------------------------------\n\nTITLE: Getting or Setting Default Locale in Vega\nDESCRIPTION: Gets the current default locale when called without arguments, or sets new default locales for number and time formatting when provided with definition objects. Returns the resulting combined locale object.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-format/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvega.defaultLocale([numberDefinition, timeDefinition])\n```\n\n----------------------------------------\n\nTITLE: Creating RGB Color with rgb Function in JavaScript\nDESCRIPTION: Constructs a new RGB color object using channel values or a CSS color specifier string.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\nrgb(r, g, b[, opacity])\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrgb(specifier)\n```\n\n----------------------------------------\n\nTITLE: Aggregating Nested Fields in JSON\nDESCRIPTION: Illustrates how to aggregate data using nested field references in the groupby parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/aggregate.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"aggregate\",\n  \"groupby\": [\"foo.baz\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Input Data Example for JoinAggregate Transform\nDESCRIPTION: Sample input data array containing objects with foo and bar properties.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/joinaggregate.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"foo\": 1, \"bar\": 1},\n  {\"foo\": 1, \"bar\": 2},\n  {\"foo\": null, \"bar\": 3}\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating Normal Probability Density in JavaScript\nDESCRIPTION: Returns the value of the probability density function at the given input domain value, for a normal distribution with specified mean and standard deviation. If unspecified, the mean defaults to 0 and the standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndensityNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Log-Normal Distribution in Vega\nDESCRIPTION: This function calculates the cumulative distribution function at a given value for a log-normal distribution with specified log mean and log standard deviation. Defaults are 0 for log mean and 1 for log standard deviation if unspecified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.cumulativeLogNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Parsing Float in JavaScript\nDESCRIPTION: Parses the input string to a floating-point value. Same as JavaScript's parseFloat.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseFloat(string)\n```\n\n----------------------------------------\n\nTITLE: Accessing Constants in Vega Expression\nDESCRIPTION: Reference to an object defining default constant values for the Vega expression language. Maps constant identifiers to JavaScript code that defines their values.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-expression/README.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstants\n```\n\n----------------------------------------\n\nTITLE: Output Data After JoinAggregate Transform\nDESCRIPTION: Resulting data after applying the joinaggregate transform, showing original data extended with aggregate values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/joinaggregate.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"foo\": 1, \"bar\": 1, \"v\": 2, \"s\": 6, \"m\": 2},\n  {\"foo\": 1, \"bar\": 2, \"v\": 2, \"s\": 6, \"m\": 2},\n  {\"foo\": null, \"bar\": 3, \"v\": 2, \"s\": 6, \"m\": 2}\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Uniform Distribution in Vega\nDESCRIPTION: This function calculates the cumulative distribution function at a given value for a uniform distribution over the interval [min, max). If unspecified, min defaults to 0 and max to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.cumulativeUniform(value[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Chronological Time Unit Transform in Vega\nDESCRIPTION: Example showing how to discretize date values by year and week number using two-week intervals. Transform configuration specifies the date field and time units to use.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/timeunit.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"timeunit\", \"field\": \"date\", \"units\": [\"year\", \"week\"], \"step\": 2}\n```\n\n----------------------------------------\n\nTITLE: UTC Date Floor Operation in JavaScript\nDESCRIPTION: Creates a function that floors dates to specified UTC time units. Accepts an array of time unit strings and optional step size.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvega.utcFloor(units[, step])\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Layout for Bottom-Oriented Legends in Vega\nDESCRIPTION: This example shows how to customize the layout of legends with 'orient' value 'bottom', including vertical stacking, margin settings, anchoring, and centering within the layout area.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"legend\": {\n    \"layout\": {\n      \"bottom\": {\n        \"anchor\": \"middle\",\n        \"direction\": \"vertical\",\n        \"center\": true,\n        \"margin\": 2\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Normal CDF with vega.cumulativeNormal()\nDESCRIPTION: Computes the cumulative distribution function (CDF) for a normal distribution at a given value. Optional parameters specify the mean and standard deviation, defaulting to standard normal if omitted.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.cumulativeNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Debugging Expressions in Vega\nDESCRIPTION: Shows how to set the logging level on a Vega view to ensure that warning messages from expressions are displayed in the console.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/debugging.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nview.logLevel(vega.Warn);\n```\n\n----------------------------------------\n\nTITLE: Configuring German Locale Settings\nDESCRIPTION: Example of setting number and time format locale to German with custom formatting options.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"locale\": {\n    \"number\": {\n      \"decimal\": \",\",\n      \"thousands\": \".\",\n      \"grouping\": [3],\n      \"currency\": [\"\", \" €\"]\n    },\n    \"time\": {\n      \"dateTime\": \"%A, der %e. %B %Y, %X\",\n      \"date\": \"%d.%m.%Y\",\n      \"time\": \"%H:%M:%S\",\n      \"periods\": [\"AM\", \"PM\"],\n      \"days\": [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n      \"shortDays\": [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n      \"months\": [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n      \"shortMonths\": [ \"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sampling from Log-Normal Distribution with vega.sampleLogNormal()\nDESCRIPTION: Returns a random sample from a log-normal probability distribution with specified log mean and log standard deviation. Defaults to standard parameters (log mean=0, log stdev=1) if omitted.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleLogNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Reversing Array in JavaScript\nDESCRIPTION: Returns a new array with elements in reverse order of the input array.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nreverse(array)\n```\n\n----------------------------------------\n\nTITLE: Converting Array to Set Object in JavaScript\nDESCRIPTION: Demonstrates the toSet function which converts an array into an object where each array value becomes a property key with value 1, effectively creating a set-like structure.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvega.toSet([1, 2, 3]); // {'1':1, '2':1, '3':1}\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Specific Properties Table in Markdown\nDESCRIPTION: This code block creates a markdown table listing the type-specific properties for the Line mark, including interpolate, tension, and defined properties with their types and descriptions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/line.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description   |\n| :------------------ | :----------------------------: | :------------ |\n| interpolate         | {% include type t=\"String\" %}  | The interpolation method to use. One of `basis`, `bundle`, `cardinal`, `catmull-rom`, `linear`, `monotone`, `natural`, `step`, `step-after`, `step-before`. The default is `linear`. You can find explanations for these line interpolators in the [d3-shape documentation](https://github.com/d3/d3-shape/blob/master/README.md#curves). |\n| tension             | {% include type t=\"Number\" %}  | The tension value in the range [0, 1] to parameterize `bundle` (default 0.8), `cardinal` (default 0) or `catmull-rom` (default 0.5) interpolation. |\n| defined             | {% include type t=\"Boolean\" %} | A boolean flag indicating if the current data point is defined. If `false`, the corresponding line segment will be omitted, creating a \"break\". |\n```\n\n----------------------------------------\n\nTITLE: Calculating Normal Distribution Quantile in JavaScript\nDESCRIPTION: Returns the quantile value (the inverse of the cumulative distribution function) for the given input probability, for a normal distribution with specified mean and standard deviation. If unspecified, the mean defaults to 0 and the standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nquantileNormal(probability[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Title Properties Configuration - Vega\nDESCRIPTION: Settings for customizing axis title appearance including text, positioning, font properties, and styling options.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/axes.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ntitle: String|String[] - Axis title text\ntitleAnchor: String - Title anchor position (start/middle/end)\ntitleAlign: String - Horizontal text alignment\ntitleAngle: Number - Rotation angle in degrees\ntitleBaseline: String - Vertical text baseline\ntitleColor: Color - Text color\ntitleFont: String - Font family\ntitleFontSize: Number - Font size\ntitleFontStyle: String - Font style\ntitleFontWeight: String|Number - Font weight\ntitleLimit: Number - Maximum title length\ntitleLineHeight: Number - Line height for multi-line text\ntitleOpacity: Number - Title opacity\ntitlePadding: Number|Value - Padding between title and labels\n```\n\n----------------------------------------\n\nTITLE: Creating Normal Distribution - JavaScript\nDESCRIPTION: Creates a distribution object representing a normal (Gaussian) probability distribution with specified mean and standard deviation. Supports sample(), pdf(), cdf() and icdf() methods.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Normal Distribution in JavaScript\nDESCRIPTION: Returns the value of the cumulative distribution function at the given input domain value for a normal distribution with specified mean and standard deviation. If unspecified, the mean defaults to 0 and the standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ncumulativeNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Setting View Height in Vega\nDESCRIPTION: Gets or sets the view height in pixels. Returns the current height if no arguments are provided, or sets the height and returns the view instance if a height is specified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.height([height])\n```\n\n----------------------------------------\n\nTITLE: Creating Mixture Distribution - JavaScript\nDESCRIPTION: Creates a distribution object representing a weighted mixture of probability distributions. Does not support icdf() method. Accepts array of distributions and optional weights.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomMixture(distributions[, weights])\n```\n\n----------------------------------------\n\nTITLE: Creating Uniform Distribution - JavaScript\nDESCRIPTION: Creates a distribution object representing a continuous uniform probability distribution over a specified interval. Supports sample(), pdf(), cdf() and icdf() methods.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomUniform([min, max])\n```\n\n----------------------------------------\n\nTITLE: Inspecting Data Sets in Vega\nDESCRIPTION: Shows how to access a data set from a Vega visualization. This method returns the output of any data transforms that have been applied to the named data set.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/debugging.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nview.data('name') // return a data object array for the data set 'name'\n```\n\n----------------------------------------\n\nTITLE: Initializing Vega Runtime with Config\nDESCRIPTION: Shows how to pass a configuration object when parsing a Vega specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar runtime = vega.parse(spec, config);\n```\n\n----------------------------------------\n\nTITLE: Calculating Dot Plot Positions with Dotbin and Stack Transforms in JSON\nDESCRIPTION: This snippet demonstrates how to use the dotbin transform to compute dot plot locations for the 'amount' field, followed by the stack transform to calculate stacked positions. The dotbin parameters are bound to a signal named 'dotbins'.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/dotbin.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"type\": \"dotbin\", \"field\": \"amount\", \"as\": \"bin\", \"signal\": \"dotbins\"},\n  {\"type\": \"stack\", \"field\": \"amount\", \"groupby\": [\"bin\"], \"as\": [\"y0\", \"y1\"]}\n]\n```\n\n----------------------------------------\n\nTITLE: UTC Time Interval Creation in JavaScript\nDESCRIPTION: Returns a d3-time interval for specified UTC time unit.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/time.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvega.utcInterval(unit)\n```\n\n----------------------------------------\n\nTITLE: Replacing String Pattern in JavaScript\nDESCRIPTION: Returns a new string with some or all matches of pattern replaced by a replacement string.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nreplace(string, pattern, replacement)\n```\n\n----------------------------------------\n\nTITLE: Basic Input Data Example - JSON\nDESCRIPTION: Sample input data structure showing key-value pairs for window transform operations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/window.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\":0, \"value\":1},\n  {\"key\":1, \"value\":3},\n  {\"key\":2, \"value\":2},\n  {\"key\":2, \"value\":4},\n  {\"key\":3, \"value\":3}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Current Timestamp in JavaScript\nDESCRIPTION: Returns the timestamp for the current time.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nnow()\n```\n\n----------------------------------------\n\nTITLE: Configuring Title Properties in Vega\nDESCRIPTION: This snippet demonstrates how to set default properties for titles in Vega, such as offset and font size. It applies a 10-pixel offset and 18-pixel font size to all titles.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": {\n    \"offset\": 10,\n    \"fontSize\": 18\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KDE Distribution - JavaScript\nDESCRIPTION: Creates a distribution object representing a kernel density estimate using Gaussian kernels. Accepts array of values and optional bandwidth parameter. Does not support icdf() method.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomKDE(values[, bandwidth])\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Uniform Distribution in JavaScript\nDESCRIPTION: Returns the value of the cumulative distribution function at the given input domain value for a uniform distribution over the interval [min, max). If unspecified, min defaults to 0 and max defaults to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ncumulativeUniform(value[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers with vega.random()\nDESCRIPTION: Returns a uniform pseudo-random number in the range [0, 1). By default, this uses JavaScript's built-in Math.random function. All Vega routines requiring random numbers use this function.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.random()\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Coordinates with xy Function in JavaScript\nDESCRIPTION: Returns the x- and y-coordinates for the current event as a two-element array, optionally in the coordinate space of a specified group item.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\nxy([item])\n```\n\n----------------------------------------\n\nTITLE: Computing Normal Quantile with vega.quantileNormal()\nDESCRIPTION: Returns the quantile value (inverse of CDF) for a normal distribution at a given probability. Optional parameters specify the mean and standard deviation, defaulting to standard normal if omitted.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.quantileNormal(probability[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Scenegraph in Vega\nDESCRIPTION: Shows how to access the scenegraph to inspect visual values and associated data objects. This provides access to the rendered visual elements of the visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/debugging.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar root = view.scenegraph().root; // {marktype: \"group\", items: [...], ...}\n```\n\n----------------------------------------\n\nTITLE: Missing Values Transform Configuration - JSON\nDESCRIPTION: Window transform configuration for handling missing values using prev_value operation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/window.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"window\",\n  \"sort\": {\"field\": \"key\", \"order\": \"ascending\"},\n  \"ops\": [\"prev_value\"],\n  \"fields\": [\"value\"],\n  \"as\": [\"value\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Log-Normal PDF with vega.densityLogNormal()\nDESCRIPTION: Computes the probability density function (PDF) for a log-normal distribution at a given value. Optional parameters specify the log mean and log standard deviation.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.densityLogNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating toSet Function Usage in JavaScript\nDESCRIPTION: Example showing how to convert an array of values into an object with those values as keys, each mapped to a value of 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvega.toSet([1, 2, 3]); // {'1':1, '2':1, '3':1}\n```\n\n----------------------------------------\n\nTITLE: Splitting Access Paths in JavaScript\nDESCRIPTION: Demonstrates the vega.splitAccessPath() function, which splits a string representing an object property access path into an array of path elements.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvega.splitAccessPath('foo'); // ['foo']\nvega.splitAccessPath('foo.bar'); // ['foo', 'bar']\nvega.splitAccessPath('foo[\"bar\"]'); // ['foo', 'bar']\nvega.splitAccessPath('foo[0].bar'); // ['foo', '0', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Array Element in JavaScript\nDESCRIPTION: Returns the last element in the input array without removing it.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\npeek(array)\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase in JavaScript\nDESCRIPTION: Transforms string to upper-case letters.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nupper(string)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for Vega Regression\nDESCRIPTION: Lists the available regression transforms provided by the vega-regression package, including links to documentation and source code for Loess and Regression transforms.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-regression/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# vega-regression\n\nRegression model fitting for Vega dataflows.\n\nThis package provides the following Vega data transforms:\n\n- [**Loess**](https://vega.github.io/vega/docs/transforms/loess/) [&lt;&gt;](https://github.com/vega/vega/blob/master/packages/vega-regression/src/Loess.js \"Source\")\n- [**Regression**](https://vega.github.io/vega/docs/transforms/regression/) [&lt;&gt;](https://github.com/vega/vega/blob/master/packages/vega-regression/src/Regression.js \"Source\")\n```\n\n----------------------------------------\n\nTITLE: Joining Array Elements in JavaScript\nDESCRIPTION: Returns a new string by concatenating all elements of the input array, separated by commas or a specified separator string.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\njoin(array[, separator])\n```\n\n----------------------------------------\n\nTITLE: Basic LinkPath Transform Configuration\nDESCRIPTION: Basic configuration of the linkpath transform that computes straight-line paths between nodes using default source and target coordinate fields. The result is written to the 'path' field.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/linkpath.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"linkpath\"}\n```\n\n----------------------------------------\n\nTITLE: Time Offset and Sequence Operations in JavaScript\nDESCRIPTION: Functions for creating new Date instances based on offsets and generating sequences of dates.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ntimeOffset(unit, date[, step])\ntimeSequence(unit, start, stop[, step])\n```\n\n----------------------------------------\n\nTITLE: Using Geographic Functions in Vega\nDESCRIPTION: Functions for analyzing geographic regions as GeoJSON features, including calculation of area, bounds, centroid, and projection scale.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\ngeoArea(projection, feature[, group])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngeoBounds(projection, feature[, group])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngeoCentroid(projection, feature[, group])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngeoScale(projection[, group])\n```\n\n----------------------------------------\n\nTITLE: Plucking Object Property in JavaScript\nDESCRIPTION: Retrieves the value for the specified field from a given array of objects. Supports nested properties.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\npluck(array, field)\n```\n\n----------------------------------------\n\nTITLE: Calculating Uniform Distribution Quantile in JavaScript\nDESCRIPTION: Returns the quantile value (the inverse of the cumulative distribution function) for the given input probability, for a uniform distribution over the interval [min, max). If unspecified, min defaults to 0 and max defaults to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nquantileUniform(probability[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Using Vega-Embed Module\nDESCRIPTION: Complete HTML example demonstrating how to use the Vega-Embed module to add visualizations to a web page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/index.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega@{{ site.data.versions.vega }}\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega-lite@{{ site.data.versions.vega-lite }}\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/vega-embed@{{ site.data.versions.vega-embed }}\"></script>\n</head>\n<body>\n  <div id=\"view\"></div>\n  <script>\n    vegaEmbed(\n      '#view',\n      'https://vega.github.io/vega/examples/bar-chart.vg.json'\n    );\n  </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Transform for Vertical Stacking in Vega\nDESCRIPTION: This snippet demonstrates how to configure the stack transform in Vega for vertical stacking. It groups data by the 'x' field, uses 'y' for stack heights, and sorts each stack by the 'v' field in descending order.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/stack.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"stack\",\n  \"groupby\": [\"x\"],\n  \"field\": \"y\",\n  \"sort\": {\"field\": \"v\", \"order\": \"descending\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Array Span in JavaScript\nDESCRIPTION: Returns the span of array: the difference between the last and first elements.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nspan(array)\n```\n\n----------------------------------------\n\nTITLE: Merging Objects in JavaScript\nDESCRIPTION: Merges the input objects into a new output object, with later arguments overwriting earlier ones.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nmerge(object1[, object2, ...])\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Color Gradient with SVG in HTML\nDESCRIPTION: SVG implementation of a continuous color gradient for the 'redblue' scheme. The code uses a linearGradient with multiple color stops to create a smooth transition between red and blue hues.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_67\n\nLANGUAGE: HTML\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-redblue\">\n      <stop offset=\"0%\" stop-color=\"#8c0d25\"></stop>\n      <stop offset=\"10%\" stop-color=\"#bf363a\"></stop>\n      <stop offset=\"20%\" stop-color=\"#df745e\"></stop>\n      <stop offset=\"30%\" stop-color=\"#f4ae91\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fbdbc9\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f2efee\"></stop>\n      <stop offset=\"60%\" stop-color=\"#d2e5ef\"></stop>\n      <stop offset=\"70%\" stop-color=\"#9dcae1\"></stop>\n      <stop offset=\"80%\" stop-color=\"#5da2cb\"></stop>\n      <stop offset=\"90%\" stop-color=\"#2f78b3\"></stop>\n      <stop offset=\"100%\" stop-color=\"#134b85\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-redblue)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using visitArray with Filter and Visitor Functions in JavaScript\nDESCRIPTION: Shows how to use the visitArray function to iterate through an array with optional filtering and transformation. The filter function can transform values before passing them to the visitor function.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// console output: 1 0; 3 2\nvega.visitArray([0, -1, 2],\n  function(x) { return x + 1; },\n  function(v, i, array) { console.log(v, i); });\n```\n\n----------------------------------------\n\nTITLE: Setting Global Opacity for All Mark Types in Vega\nDESCRIPTION: This code shows how to set a global opacity value that applies to all mark types in a Vega visualization. It uses the 'mark' property to define this global setting.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mark\": {\n    \"opacity\": 0.8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LRU Cache in JavaScript\nDESCRIPTION: Demonstrates the usage of vega.lruCache() function to create a least recently used (LRU) cache with a maximum size of 1 element. The example shows how to set, get, and check for values in the cache, as well as how eviction works when the cache is full.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar cache = vega.lruCache(1); // use 1-element cache to demonstrate\ncache.set('a', 1); // current cache has a->1\ncache.set('b', 2); // current cache has b->2, previous cache has a->1\ncache.get('a');    // -> 1 (a now in current cache, b in previous cache)\ncache.set('c', 3); // current cache has c->3, previous cache has a->1\ncache.has('c');    // -> true  (c is in the current cache)\ncache.has('b');    // -> false (b has been evicted)\ncache.has('a');    // -> true  (a is in the previous cache)\ncache.get('c');    // -> 3\ncache.clear();\n```\n\n----------------------------------------\n\nTITLE: Calculating Uniform CDF with vega.cumulativeUniform()\nDESCRIPTION: Computes the cumulative distribution function (CDF) for a uniform distribution at a given value. Optional parameters specify the min and max bounds of the distribution.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.cumulativeUniform(value[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Sampling from Uniform Distribution in JavaScript\nDESCRIPTION: Returns a sample from a univariate continuous uniform probability distribution over the interval [min, max). If unspecified, min defaults to 0 and max defaults to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nsampleUniform([min, max])\n```\n\n----------------------------------------\n\nTITLE: Sorting Array in JavaScript\nDESCRIPTION: Sorts the array in natural order using ascending from Vega Utils.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nsort(array)\n```\n\n----------------------------------------\n\nTITLE: Calculating Log-Normal Probability Density in JavaScript\nDESCRIPTION: Returns the value of the probability density function at the given input domain value, for a log-normal distribution with specified log mean and log standard deviation. If unspecified, the log mean defaults to 0 and the log standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ndensityLogNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Scheduling Post-Evaluation Callback in Vega\nDESCRIPTION: Schedules a callback function to be invoked after the current dataflow evaluation completes. The callback receives the view instance as its argument.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.runAfter(callback)\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Vega View in JavaScript\nDESCRIPTION: Shows how to parse a Vega specification, create a View instance, and initialize it with various settings. This demonstrates the updated process which no longer requires asynchronous callbacks.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/porting-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nvar runtime = vega.parse(spec); // may throw an Error if parsing fails\nvar view = new vega.View(runtime)\n  .logLevel(vega.Warn) // set view logging level\n  .initialize(document.querySelector('#view')) // set parent DOM element\n  .renderer('svg') // set render type (defaults to 'canvas')\n  .hover() // enable hover event processing\n  .run(); // update and render the view\n```\n\n----------------------------------------\n\nTITLE: Parsing JavaScript Expressions into AST in Vega\nDESCRIPTION: Parse a JavaScript expression string into an abstract syntax tree (AST) in the ESTree format. The parser is a stripped-down version of the Esprima parser that supports a limited subset of JavaScript expressions.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-expression/README.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nparse(expression)\n```\n\n----------------------------------------\n\nTITLE: Window Transform Configuration - JSON\nDESCRIPTION: Configuration for window transform showing sort, operations, fields, and output field naming.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/window.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"window\",\n  \"sort\": {\"field\": \"key\", \"order\": \"ascending\"},\n  \"ops\": [\"rank\", \"dense_rank\", \"sum\", \"mean\"],\n  \"fields\": [null, null, \"value\", \"value\"],\n  \"as\": [\"rank\", \"drank\", \"sum\", \"mean\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Regular Expression with test Function in JavaScript\nDESCRIPTION: Evaluates a regular expression against an input string, returning true if the string matches the pattern, false otherwise.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest(/\\d{3}/, \"32-21-9483\") -> true\n```\n\n----------------------------------------\n\nTITLE: Defining BrownBlueGreen Gradient in SVG\nDESCRIPTION: HTML and SVG code for defining a brown-to-blue-green diverging color gradient using linearGradient. The gradient transitions from brown (#704108) through a neutral color (#eef1ea) to blue-green (#025147), useful for visualizing data with a meaningful midpoint.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_58\n\nLANGUAGE: HTML\nCODE:\n```\n<linearGradient id=\"gradient-brownbluegreen\">\n  <stop offset=\"0%\" stop-color=\"#704108\"></stop>\n  <stop offset=\"10%\" stop-color=\"#a0651a\"></stop>\n  <stop offset=\"20%\" stop-color=\"#c79548\"></stop>\n  <stop offset=\"30%\" stop-color=\"#e3c78a\"></stop>\n  <stop offset=\"40%\" stop-color=\"#f3e6c6\"></stop>\n  <stop offset=\"50%\" stop-color=\"#eef1ea\"></stop>\n  <stop offset=\"60%\" stop-color=\"#c9e9e4\"></stop>\n  <stop offset=\"70%\" stop-color=\"#8ed1c7\"></stop>\n  <stop offset=\"80%\" stop-color=\"#4da79e\"></stop>\n  <stop offset=\"90%\" stop-color=\"#187a72\"></stop>\n  <stop offset=\"100%\" stop-color=\"#025147\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Cyclical Time Unit Input Data Example\nDESCRIPTION: Sample input data for cyclical time unit transformation showing dates across different months.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/timeunit.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"date\": Date(2018,  0,  4)},\n  {\"date\": Date(2018,  4, 12)},\n  {\"date\": Date(2018,  8,  7)},\n  {\"date\": Date(2018, 11, 23)}\n]\n```\n\n----------------------------------------\n\nTITLE: Calculating Log-Normal Distribution Density in Vega\nDESCRIPTION: This function calculates the probability density function at a given value for a log-normal distribution with specified log mean and log standard deviation. Defaults are 0 for log mean and 1 for log standard deviation if unspecified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.densityLogNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Event Streams in Vega JSON\nDESCRIPTION: Shows how to merge multiple event streams into a single stream, combining mousedown and touchstart events on symbol marks.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"merge\": [\n    {\"marktype\": \"symbol\", \"type\": \"mousedown\"},\n    {\"marktype\": \"symbol\", \"type\": \"touchstart\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Time Unit Specifiers in JSON\nDESCRIPTION: A JSON object that defines default time format specifiers for various time unit combinations. These specifiers are used in the timeUnitSpecifier method for formatting dates according to specified time units.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"year\": \"%Y \",\n  \"year-month\": \"%Y-%m \",\n  \"year-month-date\": \"%Y-%m-%d \",\n  \"quarter\": \"Q%q \",\n  \"month\": \"%b \",\n  \"date\": \"%d \",\n  \"week\": \"W%U \",\n  \"day\": \"%a \",\n  \"hours\": \"%H:00\",\n  \"hours-minutes\": \"%H:%M\",\n  \"minutes\": \"00:%M\",\n  \"seconds\": \":%S\",\n  \"milliseconds\": \".%L\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sampling from Normal Distribution in JavaScript\nDESCRIPTION: Returns a sample from a univariate normal (Gaussian) probability distribution with specified mean and standard deviation. If unspecified, the mean defaults to 0 and the standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsampleNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Getting View Origin Coordinates in Vega\nDESCRIPTION: Returns the [x, y] origin coordinates for the current view, including padding and autosize calculations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.origin()\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Locale Object for German Formatting in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a combined locale object for number and time formatting in German using Vega's locale method. It specifies number formatting rules (decimal separator, thousands separator, etc.) and time formatting rules (date formats, day names, month names, etc.).\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/locale.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst deDE = vega.locale(\n  {\n    decimal: ',',\n    thousands: '.',\n    grouping: [3],\n    currency: ['', '\\u00a0€']\n  },\n  {\n    dateTime: '%A, der %e. %B %Y, %X',\n    date: '%d.%m.%Y',\n    time: '%H:%M:%S',\n    periods: ['AM', 'PM'],\n    days: [\n      'Sonntag', 'Montag', 'Dienstag', 'Mittwoch',\n      'Donnerstag', 'Freitag', 'Samstag'\n    ],\n    shortDays: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],\n    months: [\n      'Januar', 'Februar', 'März',\n      'April', 'Mai', 'Juni',\n      'Juli', 'August', 'September',\n      'Oktober', 'November', 'Dezember'\n    ],\n    shortMonths: [\n      'Jan', 'Feb', 'Mrz', 'Apr', 'Mai', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'\n    ]\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using parseSelector Method in Vega\nDESCRIPTION: Method signature for parsing event selector strings into event stream objects. Takes a selector string as required input, with optional source and marks parameters. The source parameter defaults to 'view' and marks parameter defines valid mark types.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-event-selector/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvega.parseSelector(selector[, source, marks])\n```\n\n----------------------------------------\n\nTITLE: Calculating Normal Distribution Quantile in Vega\nDESCRIPTION: This function calculates the quantile value (inverse of cumulative distribution function) for a given probability in a normal distribution with specified mean and standard deviation. Defaults are 0 for mean and 1 for standard deviation if unspecified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.quantileNormal(probability[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Defining a Rectangle Mark in Vega JSON\nDESCRIPTION: Example of a mark definition for a rectangle (rect) type in Vega. It shows how to specify the data source, encoding rules for enter, update, exit, and hover states, and visual properties like y-position and fill color.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"rect\",\n  \"from\": {\"data\": \"table\"},\n  \"encode\": {\n    \"enter\": {\n      \"y\": {\"scale\": \"yscale\", \"field\": \"value\"},\n      \"y2\": {\"scale\": \"yscale\", \"value\": 0},\n      \"fill\": {\"value\": \"steelblue\"}\n    },\n    \"update\": {...},\n    \"exit\": {...},\n    \"hover\": {...}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Channel References\nDESCRIPTION: Example demonstrating how to specify individual RGB color channels using value references.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fill\": {\n    \"color\": {\n      \"r\": {\"value\": 255},\n      \"g\": {\"scale\": \"green\", \"field\": \"g\"},\n      \"b\": {\"value\": 0}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating UTC Day of Year in Vega\nDESCRIPTION: The utcdayofyear function returns the one-based day of the year for the given date in UTC. It accepts a Date object or timestamp value as an argument.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-time/README.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.utcdayofyear(date)\n```\n\n----------------------------------------\n\nTITLE: Implementing Purple-Green Color Gradient in SVG\nDESCRIPTION: SVG linear gradient definition for the purple-green color scheme with color stops at specific percentages. The gradient is applied to a rectangle that fills the SVG viewport.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_61\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-purplegreen\">\n      <stop offset=\"0%\" stop-color=\"#7a0177\"></stop>\n      <stop offset=\"10%\" stop-color=\"#af46bb\"></stop>\n      <stop offset=\"20%\" stop-color=\"#cc91c1\"></stop>\n      <stop offset=\"30%\" stop-color=\"#e2c7df\"></stop>\n      <stop offset=\"40%\" stop-color=\"#efedf0\"></stop>\n      <stop offset=\"50%\" stop-color=\"#eff0ef\"></stop>\n      <stop offset=\"60%\" stop-color=\"#d9efd5\"></stop>\n      <stop offset=\"70%\" stop-color=\"#aedda9\"></stop>\n      <stop offset=\"80%\" stop-color=\"#71bb75\"></stop>\n      <stop offset=\"90%\" stop-color=\"#368e49\"></stop>\n      <stop offset=\"100%\" stop-color=\"#0e5e29\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-purplegreen)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Cyclical Time Unit Output Data\nDESCRIPTION: Resulting output after applying the cyclical timeunit transform, showing how dates are normalized to the year 2012.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/timeunit.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"date\": Date(2018,  0,  4), \"unit0\": Date(2012,  0, 1), \"unit1\": Date(2012, 1, 1)},\n  {\"date\": Date(2018,  4, 12), \"unit0\": Date(2012,  4, 1), \"unit1\": Date(2012, 5, 1)}},\n  {\"date\": Date(2018,  8,  7), \"unit0\": Date(2012,  8, 1), \"unit1\": Date(2012, 9, 1)}},\n  {\"date\": Date(2018, 11, 23), \"unit0\": Date(2012, 11, 1), \"unit1\": Date(2013, 0, 1)}}\n]\n```\n\n----------------------------------------\n\nTITLE: Clamping Range in JavaScript\nDESCRIPTION: Clamps a two-element range array in a span-preserving manner within specified min and max bounds.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nclampRange(range, min, max)\n```\n\n----------------------------------------\n\nTITLE: Capturing Click Events on Rect Marks in Vega JSON\nDESCRIPTION: Defines an event stream object to capture click events specifically on rectangular marks in a Vega visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"click\", \"marktype\": \"rect\"}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding in JavaScript\nDESCRIPTION: Creates a Base64-encoded ASCII string. Same as JavaScript's Window.btoa().\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\nbtoa(string)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Log-Normal Distribution in JavaScript\nDESCRIPTION: Returns the value of the cumulative distribution function at the given input domain value for a log-normal distribution with specified log mean and log standard deviation. If unspecified, the log mean defaults to 0 and the log standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ncumulativeLogNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Default Time Format Specifier Configuration in JSON\nDESCRIPTION: Default configuration object for multi-format time formatting, specifying different format patterns for various time units from years to milliseconds. Used when no specific format specifier is provided to timeFormat() or utcFormat() methods.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-format/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"year\": \"%Y\",\n  \"quarter\": \"%B\",\n  \"month\": \"%B\",\n  \"week\": \"%b %d\",\n  \"date\": \"%a %d\",\n  \"hours\": \"%I %p\",\n  \"minutes\": \"%I:%M\",\n  \"seconds\": \":%S\",\n  \"milliseconds\": \".%L\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Default Locale in Vega\nDESCRIPTION: Resets the default locale for both number and time formatting to match the current default locales of the underlying d3-format and d3-time-format libraries. Returns the resulting combined locale object.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-format/README.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvega.resetDefaultLocale()\n```\n\n----------------------------------------\n\nTITLE: Advanced Math Operations in JavaScript\nDESCRIPTION: Advanced mathematical operations including exponential functions, logarithms, power operations, and square root calculations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nexp(exponent)\nlog(value)\npow(value, exponent)\nsqrt(value)\nhypot(value)\nrandom()\n```\n\n----------------------------------------\n\nTITLE: Creating Object Keys with Vega Key Function\nDESCRIPTION: Example demonstrating how to generate unique key strings from object fields using Vega's key function. Shows key generation and accessor metadata access.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar keyf = vega.key(['foo', 'bar']);\nkeyf({foo:'hi', bar:5}); // 'hi|5'\nvega.accessorName(keyf); // 'key'\nvega.accessorFields(keyf); // ['foo', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Chronological Time Unit Output Data\nDESCRIPTION: Resulting output after applying the timeunit transform, showing the original date and the computed unit intervals.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/timeunit.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"date\": Date(2018,  0, 11), \"unit0\": Date(2018,  0,  7), \"unit1\": Date(2018,  0, 21)},\n  {\"date\": Date(2018,  4, 12), \"unit0\": Date(2018,  3, 29), \"unit1\": Date(2018,  4, 13)}},\n  {\"date\": Date(2018,  8,  7), \"unit0\": Date(2018,  8,  2), \"unit1\": Date(2018,  8, 16)}},\n  {\"date\": Date(2018, 11, 23), \"unit0\": Date(2018, 11, 23), \"unit1\": Date(2019,  0,  6)}}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Viridis Color Gradient in SVG\nDESCRIPTION: SVG implementation of the viridis color scheme using a linear gradient with 11 color stops. This gradient transitions from dark purple through blue and green to yellow.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<linearGradient id=\"gradient-viridis\">\n  <stop offset=\"0%\" stop-color=\"#440154\"></stop>\n  <stop offset=\"10%\" stop-color=\"#482575\"></stop>\n  <stop offset=\"20%\" stop-color=\"#414487\"></stop>\n  <stop offset=\"30%\" stop-color=\"#35608d\"></stop>\n  <stop offset=\"40%\" stop-color=\"#2a788e\"></stop>\n  <stop offset=\"50%\" stop-color=\"#21918d\"></stop>\n  <stop offset=\"60%\" stop-color=\"#22a884\"></stop>\n  <stop offset=\"70%\" stop-color=\"#43bf71\"></stop>\n  <stop offset=\"80%\" stop-color=\"#7ad151\"></stop>\n  <stop offset=\"90%\" stop-color=\"#bcdf27\"></stop>\n  <stop offset=\"100%\" stop-color=\"#fde725\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vega Specification for Group Mark Example\nDESCRIPTION: This snippet demonstrates how to embed a Vega specification for a Group mark example in the documentation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/group.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include embed spec=\"group\" %}\n```\n\n----------------------------------------\n\nTITLE: Marking Scenegraph Item as Dirty in Vega\nDESCRIPTION: Reports a 'dirty' scenegraph item to be re-drawn on the next dataflow evaluation completion. Typically used by dataflow operators for incremental rendering.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.dirty(item)\n```\n\n----------------------------------------\n\nTITLE: Combined Scale and Signal Reference Configuration\nDESCRIPTION: Example showing how to combine scale and signal references in a single event configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"on\": [\n  {\n    \"events\": [{\"scale\": \"xscale\"}, {\"signal\": \"foo\"}],\n    \"update\": \"...\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Vega's LRU Cache Implementation in JavaScript\nDESCRIPTION: Example of creating and using Vega's Least Recently Used (LRU) cache with a size of 1 element. Demonstrates setting values, checking existence, retrieving values, and clearing the cache, showing the behavior of cache eviction.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar cache = vega.lruCache(1); // use 1-element cache to demonstrate\ncache.set('a', 1); // current cache has a->1\ncache.set('b', 2); // current cache has b->2, previous cache has a->1\ncache.get('a');    // -> 1 (a now in current cache, b in previous cache)\ncache.set('c', 3); // current cache has c->3, previous cache has a->1\ncache.has('c');    // -> true  (c is in the current cache)\ncache.has('b');    // -> false (b has been evicted)\ncache.has('a');    // -> true  (a is in the previous cache)\ncache.get('c');    // -> 3\ncache.clear();\n```\n\n----------------------------------------\n\nTITLE: UTC Date-Time Operations in JavaScript\nDESCRIPTION: Functions for working with UTC date-time values, including creation and component extraction.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nutc(year, month[, day, hour, min, sec, millisec])\nutcdate(datetime)\nutcday(datetime)\nutcdayofyear(datetime)\nutcyear(datetime)\nutcquarter(datetime)\nutcmonth(datetime)\nutcweek(date)\nutchours(datetime)\nutcminutes(datetime)\nutcseconds(datetime)\nutcmilliseconds(datetime)\n```\n\n----------------------------------------\n\nTITLE: Setting View Background Colors\nDESCRIPTION: Example showing how to set default view background and chart plotting area background colors.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"background\": \"white\",\n  \"group\": {\n    \"fill\": \"#dedede\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting String in JavaScript\nDESCRIPTION: Returns an array of tokens created by splitting the input string according to a provided separator pattern.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nsplit(string, separator[, limit])\n```\n\n----------------------------------------\n\nTITLE: Creating Date Object in JavaScript\nDESCRIPTION: Returns a new Date instance. The month is 0-based, such that 1 represents February.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ndatetime(year, month[, day, hour, min, sec, millisec])\n```\n\n----------------------------------------\n\nTITLE: SVG Linear Gradient Definition - Purple Blue\nDESCRIPTION: SVG gradient definition with color stops transitioning from purple to blue shades, used for continuous color visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_33\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-purpleblue\">\n      <stop offset=\"60%\" stop-color=\"#3a90c0\"></stop>\n      <stop offset=\"70%\" stop-color=\"#1e7fb7\"></stop>\n      <stop offset=\"80%\" stop-color=\"#0b70ab\"></stop>\n      <stop offset=\"90%\" stop-color=\"#056199\"></stop>\n      <stop offset=\"100%\" stop-color=\"#045281\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Example TimeMultiFormat Object\nDESCRIPTION: Example of a TimeMultiFormat object syntax that can be used for time-based legends to specify different formats based on scale.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/legends.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\"interval\": \"month\", \"step\": 3}\n```\n\n----------------------------------------\n\nTITLE: Identifier Transform Configuration\nDESCRIPTION: Transform configuration that specifies the output field name for the unique identifier.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/identifier.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"identifier\", \"as\": \"id\"}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date with dayFormat Function in JavaScript\nDESCRIPTION: Formats a weekday number (0-6) as a full week day name according to the current locale.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\ndayFormat(0) -> \"Sunday\"\n```\n\n----------------------------------------\n\nTITLE: Defining Trail Mark Properties Table in Markdown\nDESCRIPTION: Markdown table defining the specific properties available for Trail marks, including size and defined flags.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/trail.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description   |\n| :------------------ | :----------------------------: | :------------ |\n| size                | {% include type t=\"Number\" %}  | The width in pixels of the trail at the given data point. |\n| defined             | {% include type t=\"Boolean\" %} | A boolean flag indicating if the current data point is defined. If `false`, the corresponding trail segment will be omitted, creating a \"break\". |\n```\n\n----------------------------------------\n\nTITLE: Implementing Inferno Color Gradient in SVG\nDESCRIPTION: SVG implementation of the inferno color scheme using a linear gradient with 11 color stops. This gradient transitions from black through purple and red to light yellow.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_20\n\nLANGUAGE: HTML\nCODE:\n```\n<linearGradient id=\"gradient-inferno\">\n  <stop offset=\"0%\" stop-color=\"#000004\"></stop>\n  <stop offset=\"10%\" stop-color=\"#170c3b\"></stop>\n  <stop offset=\"20%\" stop-color=\"#420a68\"></stop>\n  <stop offset=\"30%\" stop-color=\"#6b176e\"></stop>\n  <stop offset=\"40%\" stop-color=\"#932667\"></stop>\n  <stop offset=\"50%\" stop-color=\"#bb3755\"></stop>\n  <stop offset=\"60%\" stop-color=\"#dd513a\"></stop>\n  <stop offset=\"70%\" stop-color=\"#f3771a\"></stop>\n  <stop offset=\"80%\" stop-color=\"#fca50a\"></stop>\n  <stop offset=\"90%\" stop-color=\"#f6d645\"></stop>\n  <stop offset=\"100%\" stop-color=\"#fcffa4\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Sampling from Uniform Distribution with vega.sampleUniform()\nDESCRIPTION: Returns a random sample from a continuous uniform distribution over the interval [min, max). If min is omitted, it defaults to 0; if max is omitted, it defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleUniform([min, max])\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Dataset in Vega\nDESCRIPTION: Example showing how to declare a data set without providing values. This pattern allows data to be dynamically provided when the visualization is instantiated through the View API.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/data.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"table\"}\n```\n\n----------------------------------------\n\nTITLE: Area Mark Properties Table Definition in Markdown\nDESCRIPTION: Markdown table defining the specific properties available for Area marks in Vega, including orient, interpolate, tension, and defined properties.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/area.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description   |\n| :------------------ | :----------------------------: | :------------ |\n| orient              | {% include type t=\"String\" %}  | The orientation of the area mark. One of `horizontal` or `vertical` (the default). With a vertical orientation, an area mark is defined by the `x`, `y`, and (`y2` or `height`) properties; with a horizontal orientation, the `y`, `x` and (`x2` or `width`) properties must be specified instead. |\n| interpolate         | {% include type t=\"String\" %}  | The interpolation method to use. One of `basis`, `cardinal`, `catmull-rom`, `linear`, `monotone`, `natural`, `step`, `step-after`, `step-before`. The default is `linear`. |\n| tension             | {% include type t=\"Number\" %}  | The tension value in the range [0, 1] to parameterize `cardinal` (default 0) or `catmull-rom` (default 0.5) interpolation. |\n| defined             | {% include type t=\"Boolean\" %} | A boolean flag indicating if the current data point is defined. If `false`, the corresponding area segment will be omitted, creating a \"break\". |\n```\n\n----------------------------------------\n\nTITLE: Creating Node Canvas in JavaScript\nDESCRIPTION: Creates a new Canvas instance using node-canvas library with optional width, height, and type parameters. Returns null if node-canvas is not available.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-canvas/README.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.nodeCanvas([width, height, type])\n```\n\n----------------------------------------\n\nTITLE: UTC Time Offset and Sequence Operations in JavaScript\nDESCRIPTION: Functions for creating new Date instances based on UTC offsets and generating sequences of UTC dates.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nutcOffset(unit, date[, step])\nutcSequence(unit, start, stop[, step])\n```\n\n----------------------------------------\n\nTITLE: Parsing Integer in JavaScript\nDESCRIPTION: Parses the input string to an integer value. Same as JavaScript's parseInt.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nparseInt(string)\n```\n\n----------------------------------------\n\nTITLE: Splitting Access Paths in JavaScript\nDESCRIPTION: Illustrates the usage of vega.splitAccessPath() to split a string representing an object property access path into an array of path elements.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvega.splitAccessPath('foo'); // ['foo']\nvega.splitAccessPath('foo.bar'); // ['foo', 'bar']\nvega.splitAccessPath('foo[\"bar\"]'); // ['foo', 'bar']\nvega.splitAccessPath('foo[0].bar'); // ['foo', '0', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Padding String in JavaScript\nDESCRIPTION: Pads a string value with repeated instances of a character up to a specified length, with optional alignment.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\npad(string, length[, character, align])\n```\n\n----------------------------------------\n\nTITLE: Using Tree Functions in Vega\nDESCRIPTION: Functions for processing hierarchical data sets created with stratify or nest transforms, allowing traversal between nodes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\ntreePath(name, source, target)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntreeAncestors(name, node)\n```\n\n----------------------------------------\n\nTITLE: HTML Form Input Properties Documentation\nDESCRIPTION: Documentation table showing the core properties for HTML input element binding in Vega, including input type, element selector, custom name, and debounce settings.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description  |\n| :------------------ | :----------------------------: | :------------|\n| input               | {% include type t=\"String\" %}  | {% include required %} The type of input element to use. The valid values are `checkbox`, `radio`, `range`, `select`, and any other legal [HTML form input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input).|\n| element             | {% include type t=\"String\" %}  | An optional CSS selector string indicating the parent element to which the input element should be added. By default, all input elements are added within the parent container of the Vega view.|\n| name                | {% include type t=\"String\" %}  | By default, the signal name is used to label input elements. This `name` property can be used to specify a custom label instead for the bound signal. |\n| debounce            | {% include type t=\"Number\" %}  | If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.|\n```\n\n----------------------------------------\n\nTITLE: Defining Spectral Continuous Color Gradient in SVG\nDESCRIPTION: SVG code that defines a linear gradient for the spectral color scheme, transitioning through 11 color stops from dark red to purple. This gradient can be applied to visualizations that require a continuous color scale.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_73\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-spectral\">\n  <stop offset=\"0%\" stop-color=\"#9e0142\"></stop>\n  <stop offset=\"10%\" stop-color=\"#d13c4b\"></stop>\n  <stop offset=\"20%\" stop-color=\"#f0704a\"></stop>\n  <stop offset=\"30%\" stop-color=\"#fcac63\"></stop>\n  <stop offset=\"40%\" stop-color=\"#fedd8d\"></stop>\n  <stop offset=\"50%\" stop-color=\"#fbf8b0\"></stop>\n  <stop offset=\"60%\" stop-color=\"#e0f3a1\"></stop>\n  <stop offset=\"70%\" stop-color=\"#a9dda2\"></stop>\n  <stop offset=\"80%\" stop-color=\"#69bda9\"></stop>\n  <stop offset=\"90%\" stop-color=\"#4288b5\"></stop>\n  <stop offset=\"100%\" stop-color=\"#5e4fa2\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Padding Strings in JavaScript\nDESCRIPTION: Demonstrates the usage of the vega.pad() function to add padding to strings. This function allows specifying the padding character, length, and alignment.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvega.pad('15', 5, '0', 'left'); // '00015'\n```\n\n----------------------------------------\n\nTITLE: Including Mark Properties Documentation\nDESCRIPTION: This snippet includes a separate file containing general mark properties documentation, likely common across different mark types in Vega.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/group.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include properties.md %}\n```\n\n----------------------------------------\n\nTITLE: Defining Turbo Color Gradient in SVG\nDESCRIPTION: SVG gradient definition for the 'turbo' color scheme using linearGradient with color stops from dark purple to red. This gradient is used in data visualizations with a smooth transition across the color spectrum.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<linearGradient id=\"gradient-turbo\">\n    <stop offset=\"0%\" stop-color=\"#23171b\"></stop>\n    <stop offset=\"10%\" stop-color=\"#4a58dd\"></stop>\n    <stop offset=\"20%\" stop-color=\"#2f9df5\"></stop>\n    <stop offset=\"30%\" stop-color=\"#27d7c4\"></stop>\n    <stop offset=\"40%\" stop-color=\"#4df884\"></stop>\n    <stop offset=\"50%\" stop-color=\"#95fb51\"></stop>\n    <stop offset=\"60%\" stop-color=\"#dedd32\"></stop>\n    <stop offset=\"70%\" stop-color=\"#ffa423\"></stop>\n    <stop offset=\"80%\" stop-color=\"#f65f18\"></stop>\n    <stop offset=\"90%\" stop-color=\"#ba2208\"></stop>\n    <stop offset=\"100%\" stop-color=\"#900c00\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: CountPattern Transform Output Example\nDESCRIPTION: Example output showing counted occurrences of number patterns after processing by the transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/countpattern.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"text\": \"12\", \"count\": 3},\n  {\"text\": \"43\", \"count\": 2}\n]\n```\n\n----------------------------------------\n\nTITLE: Project Transform for Un-nesting Properties in Vega JSON\nDESCRIPTION: Demonstrates how to use the project transform to extract nested properties and rename fields in a single operation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/project.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"project\",\n  \"fields\": [\"bar\", \"foo.a\", \"foo.b\"],\n  \"as\": [\"bar\", \"a\", \"b\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Transform with Values and Default\nDESCRIPTION: Demonstrates lookup transform configuration using the values parameter to copy specific fields and providing a default value for unmatched records.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/lookup.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"lookup\",\n  \"from\": \"names\",\n  \"key\": \"id\",\n  \"fields\": [\"foo\"],\n  \"values\": [\"name\"],\n  \"as\": [\"obj\"],\n  \"default\": \"some label\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Faceted Groups in Vega\nDESCRIPTION: Example showing how to configure faceted group marks using the new facet directive within a mark 'from' block. The snippet demonstrates grouping data by site using the 'facet' property.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/porting-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"from\": {\n  \"facet\": {\n    \"name\": \"sites\",\n    \"data\": \"barley\",\n    \"groupby\": \"site\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Accessibility Properties\nDESCRIPTION: Table documenting ARIA accessibility properties for SVG output in Vega marks, including options for enabling/disabling ARIA attributes and providing accessible descriptions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/_includes/properties.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Property          | Type                          | Description  |\n| :---------------- | :---------------------------: | :------------|\n| aria              | {% include type t=\"Boolean\" %}| A boolean flag (default `true`) indicating if ARIA attributes should be included (SVG output only). If `false`, the \"aria-hidden\" attribute will be set on the output SVG element, removing the mark item from the ARIA accessibility tree. |\n| description       | {% include type t=\"String\" %} | A text description of the mark item for ARIA accessibility (SVG output only). If specified, this property determines the [\"aria-label\" attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute). |\n```\n\n----------------------------------------\n\nTITLE: Calculating Log-Normal CDF with vega.cumulativeLogNormal()\nDESCRIPTION: Computes the cumulative distribution function (CDF) for a log-normal distribution at a given value. Optional parameters specify the log mean and log standard deviation.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.cumulativeLogNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Finding Substring Index in JavaScript\nDESCRIPTION: Returns the first index of substring in the input string.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nindexof(string, substring)\n```\n\n----------------------------------------\n\nTITLE: Finding Last Substring Index in JavaScript\nDESCRIPTION: Returns the last index of substring in the input string.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\nlastindexof(string, substring)\n```\n\n----------------------------------------\n\nTITLE: Using Logging Functions in Vega\nDESCRIPTION: Functions for writing messages to the console at different logging levels, helpful for debugging expressions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nwarn(value1[, value2, ...])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninfo(value1[, value2, ...])\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndebug(value1[, value2, ...])\n```\n\n----------------------------------------\n\nTITLE: Fold Transform Input Data Example\nDESCRIPTION: Sample input data showing the structure before applying the fold transform with country, gold, and silver properties.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/fold.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"country\": \"USA\", \"gold\": 10, \"silver\": 20},\n  {\"country\": \"Canada\", \"gold\": 7, \"silver\": 26}\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for Bin Transform\nDESCRIPTION: Example input data with numeric values in the 'amount' field that will be discretized by the bin transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/bin.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"amount\": 3.7},\n  {\"amount\": 6.2},\n  {\"amount\": 5.9},\n  {\"amount\": 8}\n]\n```\n\n----------------------------------------\n\nTITLE: Repeating Strings in JavaScript\nDESCRIPTION: Shows how to use the vega.repeat() function to create a new string by repeating an input string a specified number of times.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/util.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvega.repeat('0', 5); // '00000'\n```\n\n----------------------------------------\n\nTITLE: Embedding Line Mark Example in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a line mark example specification in the documentation using a custom Jekyll include.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/line.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include embed spec=\"line\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for Darkmulti Color Scheme in HTML\nDESCRIPTION: This code defines an SVG linear gradient for the 'darkmulti' color scheme that transitions through multiple colors from dark gray to white. The gradient includes stops at 10% intervals with specific color values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_43\n\nLANGUAGE: html\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-darkmulti\">\n      <stop offset=\"0%\" stop-color=\"#373737\"></stop>\n      <stop offset=\"10%\" stop-color=\"#294767\"></stop>\n      <stop offset=\"20%\" stop-color=\"#1e5b88\"></stop>\n      <stop offset=\"30%\" stop-color=\"#1a748b\"></stop>\n      <stop offset=\"40%\" stop-color=\"#1f8e7e\"></stop>\n      <stop offset=\"50%\" stop-color=\"#29a869\"></stop>\n      <stop offset=\"60%\" stop-color=\"#6abf50\"></stop>\n      <stop offset=\"70%\" stop-color=\"#aad332\"></stop>\n      <stop offset=\"80%\" stop-color=\"#eae30d\"></stop>\n      <stop offset=\"90%\" stop-color=\"#fff166\"></stop>\n      <stop offset=\"100%\" stop-color=\"#ffffff\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-darkmulti)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Slicing String in JavaScript\nDESCRIPTION: Returns a section of string between the start and end indices, with support for negative end index.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nslice(string, start[, end])\n```\n\n----------------------------------------\n\nTITLE: Sampling from Log-Normal Distribution in JavaScript\nDESCRIPTION: Returns a sample from a univariate log-normal probability distribution with specified log mean and log standard deviation. If unspecified, the log mean defaults to 0 and the log standard deviation defaults to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsampleLogNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Event Behavior\nDESCRIPTION: Example of preventing default behavior for all events in a Vega view.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"events\": {\n  \"defaults\": {\n    \"prevent\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tick Properties Configuration - Vega\nDESCRIPTION: Configuration options for axis ticks including count, styling, positioning and formatting. Includes properties for controlling tick marks, intervals, dash patterns and spacing.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/axes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntickCount: Number|String|Object - Controls number of ticks or time interval\ntickDash: Number[] - Stroke dash pattern for tick marks\ntickDashOffset: Number - Pixel offset for dash pattern start\ntickMinStep: Number - Minimum step between ticks\ntickExtra: Boolean - Add extra tick at initial position\ntickOffset: Number - Position offset in pixels\ntickOpacity: Number - Opacity of ticks\ntickRound: Boolean - Round positions to integers\ntickSize: Number - Length of ticks in pixels\ntickWidth: Number - Width of ticks in pixels\n```\n\n----------------------------------------\n\nTITLE: Example Input Data Structure for Identifier Transform\nDESCRIPTION: Sample input data structure showing objects before applying the identifier transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/identifier.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"foo\": \"a\"},\n  {\"foo\": \"b\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Compare Function in Vega - Multiple Fields\nDESCRIPTION: Example demonstrating multi-field comparator configuration with different sort orders for each field.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": [\"amount\", \"date\"],\n  \"order\": [\"descending\", \"ascending\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring in JavaScript\nDESCRIPTION: Returns a section of string between the start and end indices.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nsubstring(string, start[, end])\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for 'lighttealblue' Color Scheme in Vega\nDESCRIPTION: HTML and SVG code that defines a linear gradient for the 'lighttealblue' color scheme in Vega 5.0. The gradient transitions from light green (#e3e9e0) to dark blue (#255988) through various teal and blue hues, used for continuous data visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scheme continuous\">\n<a name=\"lighttealblue\" href=\"#lighttealblue\">#</a> <strong>lighttealblue</strong> {% include tag ver=\"5.0\" %} <a class=\"toggle\" href='javascript:toggle(\"#discrete-lighttealblue\")'>View Discrete</a>\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-lighttealblue\">\n      <stop offset=\"0%\" stop-color=\"#e3e9e0\"></stop>\n      <stop offset=\"10%\" stop-color=\"#c4ddd1\"></stop>\n      <stop offset=\"20%\" stop-color=\"#a2d1cb\"></stop>\n      <stop offset=\"30%\" stop-color=\"#84c4c9\"></stop>\n      <stop offset=\"40%\" stop-color=\"#66b5c3\"></stop>\n      <stop offset=\"50%\" stop-color=\"#49a7bd\"></stop>\n      <stop offset=\"60%\" stop-color=\"#3698b4\"></stop>\n      <stop offset=\"70%\" stop-color=\"#3188a9\"></stop>\n      <stop offset=\"80%\" stop-color=\"#2d799e\"></stop>\n      <stop offset=\"90%\" stop-color=\"#276994\"></stop>\n      <stop offset=\"100%\" stop-color=\"#255988\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-lighttealblue)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Axis Orientation Options - Vega\nDESCRIPTION: Valid orientation settings for axis placement around the chart.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/axes.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nleft - Y-axis on left edge\nright - Y-axis on right edge\ntop - X-axis on top edge\nbottom - X-axis on bottom edge\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Errors in JavaScript\nDESCRIPTION: Shows how to use the vega.error() function to throw custom errors. This function provides a convenient way to include error conditions in expression chains.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvega.error('Uh oh'); // equivalent to: throw Error('Uh oh')\n\n// embed error in an expression\nreturn isOk ? returnValue : vega.error('Not OK');\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for Lightgreyteal Color Scheme\nDESCRIPTION: SVG code that defines a linear gradient for the 'lightgreyteal' color scheme. This gradient transitions from light grey to teal/blue colors and is used as a continuous color scale in Vega visualizations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_48\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-lightgreyteal\">\n  <stop offset=\"0%\" stop-color=\"#e4eaea\"></stop>\n  <stop offset=\"10%\" stop-color=\"#d7ddde\"></stop>\n  <stop offset=\"20%\" stop-color=\"#cbd1d4\"></stop>\n  <stop offset=\"30%\" stop-color=\"#bcc6ca\"></stop>\n  <stop offset=\"40%\" stop-color=\"#adbac0\"></stop>\n  <stop offset=\"50%\" stop-color=\"#85b2be\"></stop>\n  <stop offset=\"60%\" stop-color=\"#4aacc1\"></stop>\n  <stop offset=\"70%\" stop-color=\"#22a1c2\"></stop>\n  <stop offset=\"80%\" stop-color=\"#2192c0\"></stop>\n  <stop offset=\"90%\" stop-color=\"#1e84be\"></stop>\n  <stop offset=\"100%\" stop-color=\"#1876bc\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Trimming String in JavaScript\nDESCRIPTION: Returns a trimmed string with preceding and trailing whitespace removed.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\ntrim(string)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Normal Distribution in Vega\nDESCRIPTION: This function calculates the cumulative distribution function at a given value for a normal distribution with specified mean and standard deviation. Defaults are 0 for mean and 1 for standard deviation if unspecified.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.cumulativeNormal(value[, mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listeners\nDESCRIPTION: Example of disabling selector events and limiting window events to specific types.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"events\": {\n  \"selector\": false,\n  \"window\": [\"mousemove\", \"mouseup\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Legend Types\nDESCRIPTION: The supported legend type values that can be specified in the 'type' property.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/legends.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"symbol\", \"gradient\", \"discrete\"\n```\n\n----------------------------------------\n\nTITLE: Symbol Mark Properties Table in Markdown\nDESCRIPTION: Markdown table defining the specific properties available for Symbol marks in Vega, including angle, size, and shape configurations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/symbol.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description   |\n| :------------------ | :----------------------------: | :------------ |\n| angle               | {% include type t=\"Number\" %}  | The angle (in degrees) by which to rotate the symbol (default `0`). {% include tag ver=\"5.0\" %} |\n| size                | {% include type t=\"Number\" %}  | The area in pixels of the symbols bounding box. Note that this value sets the _area_ of the symbol; the side lengths will increase with the square root of this value. |\n| shape               | {% include type t=\"String\" %}  | The symbol shape. One of the plotting shapes `circle` (default), `square`, `cross`, `diamond`, `triangle-up`, `triangle-down`, `triangle-right`, or `triangle-left`, the line symbol `stroke`, or one of the centered directional shapes `arrow`, `wedge`, or `triangle`. Alternatively, a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) can be provided. For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions. |\n```\n\n----------------------------------------\n\nTITLE: Implementing Expression Reference - Field Lookup\nDESCRIPTION: Example of field reference usage in a wordcloud transform for angle lookup.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/types.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"wordcloud\",\n  \"rotate\": {\"field\": \"angle\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Continuous Color Interpolator in Vega\nDESCRIPTION: Demonstrates how to create and register a custom continuous grayscale color interpolator function that maps values from [0,1] to RGB colors.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction grey(f) {\n  var g = Math.max(0, Math.min(255, Math.round(255 * f))) + '';\n  return 'rgb(' + g + ', ' + g + ', ' + g + ')';\n}\n\n// Register the interpolator. Now the scheme \"mygrey\" can be used in Vega specs\nvega.scheme(\"mygrey\", grey);\n```\n\n----------------------------------------\n\nTITLE: Getting Array Length in JavaScript\nDESCRIPTION: Returns the length of the input array.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nlength(array)\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration for Temperature Visualization\nDESCRIPTION: YAML front matter configuration for a Jekyll page that defines the example's metadata, including layout, title, permalink, specification reference, and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/annual-temperature.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Annual Temperature Example\npermalink: /examples/annual-temperature/index.html\nspec: annual-temperature\nimage: /examples/img/annual-temperature.png\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving View Container in Vega\nDESCRIPTION: Returns the DOM container element for the view, if it exists.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/view.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.container()\n```\n\n----------------------------------------\n\nTITLE: Defining BlueOrange Gradient in SVG\nDESCRIPTION: HTML and SVG code for defining a blue-to-orange diverging color gradient using linearGradient. The gradient transitions from blue (#134b85) through a neutral color (#f2f0eb) to orange (#994a07), making it suitable for visualizing diverging data.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_57\n\nLANGUAGE: HTML\nCODE:\n```\n<linearGradient id=\"gradient-blueorange\">\n  <stop offset=\"0%\" stop-color=\"#134b85\"></stop>\n  <stop offset=\"10%\" stop-color=\"#2f78b3\"></stop>\n  <stop offset=\"20%\" stop-color=\"#5da2cb\"></stop>\n  <stop offset=\"30%\" stop-color=\"#9dcae1\"></stop>\n  <stop offset=\"40%\" stop-color=\"#d2e5ef\"></stop>\n  <stop offset=\"50%\" stop-color=\"#f2f0eb\"></stop>\n  <stop offset=\"60%\" stop-color=\"#fce0ba\"></stop>\n  <stop offset=\"70%\" stop-color=\"#fbbf74\"></stop>\n  <stop offset=\"80%\" stop-color=\"#e8932f\"></stop>\n  <stop offset=\"90%\" stop-color=\"#c5690d\"></stop>\n  <stop offset=\"100%\" stop-color=\"#994a07\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: SVG Linear Gradient Definition - Red Purple\nDESCRIPTION: SVG gradient definition transitioning from red to purple shades with 11 color stops for smooth color transitions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_35\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-redpurple\">\n      <stop offset=\"0%\" stop-color=\"#fccfcc\"></stop>\n      <stop offset=\"10%\" stop-color=\"#fcbec0\"></stop>\n      <stop offset=\"20%\" stop-color=\"#faa9b8\"></stop>\n      <stop offset=\"30%\" stop-color=\"#f98faf\"></stop>\n      <stop offset=\"40%\" stop-color=\"#f571a5\"></stop>\n      <stop offset=\"50%\" stop-color=\"#ec539d\"></stop>\n      <stop offset=\"60%\" stop-color=\"#db3695\"></stop>\n      <stop offset=\"70%\" stop-color=\"#c41b8a\"></stop>\n      <stop offset=\"80%\" stop-color=\"#a90880\"></stop>\n      <stop offset=\"90%\" stop-color=\"#8d0179\"></stop>\n      <stop offset=\"100%\" stop-color=\"#700174\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Padding Strings in JavaScript\nDESCRIPTION: Demonstrates the use of the vega.pad() function to add padding to a string. The function allows specifying the padding character and alignment.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvega.pad('15', 5, '0', 'left'); // '00015'\n```\n\n----------------------------------------\n\nTITLE: Sampling from Uniform Distribution in Vega\nDESCRIPTION: This function returns a sample from a univariate continuous uniform probability distribution over the interval [min, max). If unspecified, min defaults to 0 and max to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleUniform([min, max])\n```\n\n----------------------------------------\n\nTITLE: Importing Vega Basic Bundle\nDESCRIPTION: Basic HTML code to import the complete Vega JavaScript bundle into a web page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/index.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"https://vega.github.io/vega/vega.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vega\nDESCRIPTION: Command to install dependencies for all packages in the Vega monorepo using npm workspaces.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for Lightmulti Color Scheme\nDESCRIPTION: SVG code that defines a linear gradient for the 'lightmulti' color scheme. This gradient transitions through multiple colors (blue, green, yellow, orange, red) and is used as a continuous color scale in Vega visualizations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_49\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-lightmulti\">\n  <stop offset=\"0%\" stop-color=\"#e0f1f2\"></stop>\n  <stop offset=\"10%\" stop-color=\"#caebd7\"></stop>\n  <stop offset=\"20%\" stop-color=\"#b8e2b3\"></stop>\n  <stop offset=\"30%\" stop-color=\"#bddf93\"></stop>\n  <stop offset=\"40%\" stop-color=\"#d8e17e\"></stop>\n  <stop offset=\"50%\" stop-color=\"#f6e072\"></stop>\n  <stop offset=\"60%\" stop-color=\"#f6c659\"></stop>\n  <stop offset=\"70%\" stop-color=\"#f4a946\"></stop>\n  <stop offset=\"80%\" stop-color=\"#f58a3f\"></stop>\n  <stop offset=\"90%\" stop-color=\"#f56c3f\"></stop>\n  <stop offset=\"100%\" stop-color=\"#ef4a3c\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Range Input Properties Documentation\nDESCRIPTION: Documentation table detailing properties specific to range slider inputs in Vega, including min/max values and step size configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description  |\n| :------------------ | :----------------------------: | :------------|\n| max                 | {% include type t=\"Number\" %}  | For `range` inputs, sets the maximum slider value. Defaults to the larger of the signal value and `100`.|\n| min                 | {% include type t=\"Number\" %}  | For `range` inputs, sets the minimum slider value. Defaults to the smaller of the signal value and `0`.|\n| step                | {% include type t=\"Number\" %}  | For `range` inputs, sets the minimum slider increment. If undefined, the step size will be automatically determined based on the _min_ and _max_ values.|\n| name                | {% include type t=\"String\" %}  | By default, the signal name is used to label input elements. This `name` property can be used to specify a custom label instead for the bound signal. |\n| debounce            | {% include type t=\"Number\" %}  | If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.|\n```\n\n----------------------------------------\n\nTITLE: Scale Reference Event Configuration\nDESCRIPTION: Example showing how to configure event streams using scale references to monitor scale modifications.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"on\": [\n  {\n    \"events\": {\"scale\": \"xscale\"},\n    \"update\": \"...\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Capturing Window Resize Events in Vega JSON\nDESCRIPTION: Specifies an event stream object to capture resize events on the browser window, which can be used to update a Vega visualization in response to window size changes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"source\": \"window\", \"type\": \"resize\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Magma Color Gradient in SVG\nDESCRIPTION: SVG implementation of the magma color scheme using a linear gradient with 11 color stops. This gradient transitions from black through purple and red to light yellow.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<linearGradient id=\"gradient-magma\">\n  <stop offset=\"0%\" stop-color=\"#000004\"></stop>\n  <stop offset=\"10%\" stop-color=\"#150e37\"></stop>\n  <stop offset=\"20%\" stop-color=\"#3b0f70\"></stop>\n  <stop offset=\"30%\" stop-color=\"#651a80\"></stop>\n  <stop offset=\"40%\" stop-color=\"#8c2981\"></stop>\n  <stop offset=\"50%\" stop-color=\"#b6377a\"></stop>\n  <stop offset=\"60%\" stop-color=\"#de4968\"></stop>\n  <stop offset=\"70%\" stop-color=\"#f76f5c\"></stop>\n  <stop offset=\"80%\" stop-color=\"#fe9f6d\"></stop>\n  <stop offset=\"90%\" stop-color=\"#fece91\"></stop>\n  <stop offset=\"100%\" stop-color=\"#fcfdbf\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Base64 Decoding in JavaScript\nDESCRIPTION: Decodes an ASCII string that was encoded with Base64. Same as JavaScript's Window.atob().\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\natob(string)\n```\n\n----------------------------------------\n\nTITLE: Radio and Select Input Properties Documentation\nDESCRIPTION: Documentation table showing specific properties for radio button and select dropdown inputs in Vega, including options array and label customization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/signals.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Property            | Type                           | Description  |\n| :------------------ | :----------------------------: | :------------|\n| options             | {% include type t=\"Array\" %}   | {% include required %} An array of options to select from.|\n| labels              | {% include type t=\"String[]\" %}| {% include tag ver=\"5.9\" %} An array of label strings to represent the *options* values. If unspecified, the *options* value will be coerced to a string and used as the label. |\n| name                | {% include type t=\"String\" %}  | By default, the signal name is used to label input elements. This `name` property can be used to specify a custom label instead for the bound signal. |\n| debounce            | {% include type t=\"Number\" %}  | If defined, delays event handling until the specified milliseconds have elapsed since the last event was fired.|\n```\n\n----------------------------------------\n\nTITLE: SVG Linear Gradient Definition - Orangered\nDESCRIPTION: Defines a linear gradient color scheme named 'orangered' transitioning from light orange to dark red in 11 steps.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_30\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-orangered\">\n      <stop offset=\"0%\" stop-color=\"#fddcaf\"></stop>\n      <stop offset=\"10%\" stop-color=\"#fdcf9b\"></stop>\n      <stop offset=\"20%\" stop-color=\"#fdc18a\"></stop>\n      <stop offset=\"30%\" stop-color=\"#fdad77\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fb9562\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f67d53\"></stop>\n      <stop offset=\"60%\" stop-color=\"#ee6545\"></stop>\n      <stop offset=\"70%\" stop-color=\"#e24932\"></stop>\n      <stop offset=\"80%\" stop-color=\"#d32d1e\"></stop>\n      <stop offset=\"90%\" stop-color=\"#bf130d\"></stop>\n      <stop offset=\"100%\" stop-color=\"#a70403\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Continuous Yellow-Orange-Brown Gradient Definition\nDESCRIPTION: SVG linear gradient definition for a continuous color transition from yellow through orange to brown, with 11 color stops.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_38\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-yelloworangebrown\">\n  <stop offset=\"0%\" stop-color=\"#feeaa1\"></stop>\n  <stop offset=\"10%\" stop-color=\"#fedd84\"></stop>\n  <stop offset=\"20%\" stop-color=\"#fecc63\"></stop>\n  <stop offset=\"30%\" stop-color=\"#feb746\"></stop>\n  <stop offset=\"40%\" stop-color=\"#fca031\"></stop>\n  <stop offset=\"50%\" stop-color=\"#f68921\"></stop>\n  <stop offset=\"60%\" stop-color=\"#eb7215\"></stop>\n  <stop offset=\"70%\" stop-color=\"#db5e0b\"></stop>\n  <stop offset=\"80%\" stop-color=\"#c54c05\"></stop>\n  <stop offset=\"90%\" stop-color=\"#ab3d03\"></stop>\n  <stop offset=\"100%\" stop-color=\"#8f3204\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Bluepurple Linear Gradient in SVG\nDESCRIPTION: SVG linear gradient definition that transitions from light blue (#ccddec) to purple (#730f71) through 11 color stops\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_25\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-bluepurple\">\n  <stop offset=\"0%\" stop-color=\"#ccddec\"></stop>\n  <stop offset=\"10%\" stop-color=\"#bad0e4\"></stop>\n  <stop offset=\"20%\" stop-color=\"#a8c2dd\"></stop>\n  <stop offset=\"30%\" stop-color=\"#9ab0d4\"></stop>\n  <stop offset=\"40%\" stop-color=\"#919cc9\"></stop>\n  <stop offset=\"50%\" stop-color=\"#8d85be\"></stop>\n  <stop offset=\"60%\" stop-color=\"#8b6db2\"></stop>\n  <stop offset=\"70%\" stop-color=\"#8a55a6\"></stop>\n  <stop offset=\"80%\" stop-color=\"#873c99\"></stop>\n  <stop offset=\"90%\" stop-color=\"#822287\"></stop>\n  <stop offset=\"100%\" stop-color=\"#730f71\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Flatten Transform with Index Field in Vega JSON\nDESCRIPTION: Example demonstrating flattening with an additional index field that tracks the original array positions.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/flatten.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"flatten\", \"fields\": [\"foo\"], \"index\": \"idx\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"name\": \"alpha\", \"data\": 123, \"foo\": [1, 2]},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": [3, 4, 5]}\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"name\": \"alpha\", \"data\": 123, \"foo\": 1, \"idx\": 0},\n  {\"name\": \"alpha\", \"data\": 123, \"foo\": 2, \"idx\": 1},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": 3, \"idx\": 0},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": 4, \"idx\": 1},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": 5, \"idx\": 2}\n]\n```\n\n----------------------------------------\n\nTITLE: Comparison Functions in JavaScript\nDESCRIPTION: Functions for finding minimum and maximum values among multiple inputs.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmin(value1, value2, ...)\nmax(value1, value2, ...)\n```\n\n----------------------------------------\n\nTITLE: Cloning Vega Repository\nDESCRIPTION: Command to clone the Vega repository from GitHub.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/vega/vega\n```\n\n----------------------------------------\n\nTITLE: Color Gradient Definition in SVG - YellowGreenBlue\nDESCRIPTION: SVG linear gradient definition for a continuous color transition from yellow through green to blue. The gradient uses 11 color stops from #eff9bd to #1c3185.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_36\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-yellowgreenblue\">\n  <stop offset=\"0%\" stop-color=\"#eff9bd\"></stop>\n  <stop offset=\"10%\" stop-color=\"#dbf1b4\"></stop>\n  <stop offset=\"20%\" stop-color=\"#bde5b5\"></stop>\n  <stop offset=\"30%\" stop-color=\"#94d5b9\"></stop>\n  <stop offset=\"40%\" stop-color=\"#69c5be\"></stop>\n  <stop offset=\"50%\" stop-color=\"#45b4c2\"></stop>\n  <stop offset=\"60%\" stop-color=\"#2c9ec0\"></stop>\n  <stop offset=\"70%\" stop-color=\"#2182b8\"></stop>\n  <stop offset=\"80%\" stop-color=\"#2163aa\"></stop>\n  <stop offset=\"90%\" stop-color=\"#23479c\"></stop>\n  <stop offset=\"100%\" stop-color=\"#1c3185\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Window Transform Output - JSON\nDESCRIPTION: Example output showing the results of window transform operations including ranking and aggregations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/window.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\":0, \"value\":1, \"rank\":1, \"drank\":1, \"sum\":1, \"mean\":1},\n  {\"key\":1, \"value\":3, \"rank\":2, \"drank\":2, \"sum\":4, \"mean\":2},\n  {\"key\":2, \"value\":2, \"rank\":3, \"drank\":3, \"sum\":10, \"mean\":2.5},\n  {\"key\":2, \"value\":4, \"rank\":3, \"drank\":3, \"sum\":10, \"mean\":2.5},\n  {\"key\":3, \"value\":3, \"rank\":5, \"drank\":4, \"sum\":13, \"mean\":2.6}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Data in Vega\nDESCRIPTION: Data definition for a bar chart using inline values. This creates a named data table with category-amount pairs that will be visualized in the chart.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"data\": [\n    {\n      \"name\": \"table\",\n      \"values\": [\n        {\"category\": \"A\", \"amount\": 28},\n        {\"category\": \"B\", \"amount\": 55},\n        {\"category\": \"C\", \"amount\": 43},\n        {\"category\": \"D\", \"amount\": 91},\n        {\"category\": \"E\", \"amount\": 81},\n        {\"category\": \"F\", \"amount\": 53},\n        {\"category\": \"G\", \"amount\": 19},\n        {\"category\": \"H\", \"amount\": 87}\n      ]\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Simple Rectangle Scenegraph Example in JSON\nDESCRIPTION: This snippet demonstrates a basic Vega scenegraph structure containing three rectangle marks with different positions and colors. It shows the fundamental structure of a mark definition with an array of item instances.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scenegraph/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"marktype\": \"rect\",\n  \"items\": [\n    {\"x\": 0, \"y\": 0, \"width\": 50, \"height\": 50, \"fill\": \"steelblue\"},\n    {\"x\": 100, \"y\": 50, \"width\": 50, \"height\": 50, \"fill\": \"firebrick\"},\n    {\"x\": 50, \"y\": 100, \"width\": 50, \"height\": 50, \"fill\": \"forestgreen\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Rect Mark Example in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a specification for a Rect mark example in the documentation using a custom include directive.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/rect.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include embed spec=\"rect\" %}\n```\n\n----------------------------------------\n\nTITLE: Signal Reference Event Configuration\nDESCRIPTION: Example showing how to configure event streams using signal references in Vega. This allows triggering updates when specific signals change.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"on\": [\n  {\n    \"events\": {\"signal\": \"foo\"},\n    \"update\": \"...\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Blues Color Gradient in SVG\nDESCRIPTION: SVG linear gradient definition for the blues color scheme, ranging from light blue (#cfe1f2) to dark blue (#0a4a90). Used for continuous color encoding.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_4\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-blues\">\n  <stop offset=\"0%\" stop-color=\"#cfe1f2\"></stop>\n  <stop offset=\"10%\" stop-color=\"#bed8ec\"></stop>\n  <stop offset=\"20%\" stop-color=\"#a8cee5\"></stop>\n  <stop offset=\"30%\" stop-color=\"#8fc1de\"></stop>\n  <stop offset=\"40%\" stop-color=\"#74b2d7\"></stop>\n  <stop offset=\"50%\" stop-color=\"#5ba3cf\"></stop>\n  <stop offset=\"60%\" stop-color=\"#4592c6\"></stop>\n  <stop offset=\"70%\" stop-color=\"#3181bd\"></stop>\n  <stop offset=\"80%\" stop-color=\"#206fb2\"></stop>\n  <stop offset=\"90%\" stop-color=\"#125ca4\"></stop>\n  <stop offset=\"100%\" stop-color=\"#0a4a90\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Goldgreen Linear Gradient in SVG\nDESCRIPTION: SVG linear gradient definition that transitions from gold (#f4d166) to green (#146c36) through 11 color stops\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_26\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-goldgreen\">\n  <stop offset=\"0%\" stop-color=\"#f4d166\"></stop>\n  <stop offset=\"10%\" stop-color=\"#d5ca60\"></stop>\n  <stop offset=\"20%\" stop-color=\"#b6c35c\"></stop>\n  <stop offset=\"30%\" stop-color=\"#98bb59\"></stop>\n  <stop offset=\"40%\" stop-color=\"#7cb257\"></stop>\n  <stop offset=\"50%\" stop-color=\"#60a656\"></stop>\n  <stop offset=\"60%\" stop-color=\"#4b9c53\"></stop>\n  <stop offset=\"70%\" stop-color=\"#3f8f4f\"></stop>\n  <stop offset=\"80%\" stop-color=\"#33834a\"></stop>\n  <stop offset=\"90%\" stop-color=\"#257740\"></stop>\n  <stop offset=\"100%\" stop-color=\"#146c36\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Dark Blue Color Scheme Gradient\nDESCRIPTION: SVG linear gradient definition for the darkblue color scheme, ranging from dark gray (#323232) to white with blue tones in between.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_40\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-darkblue\">\n      <stop offset=\"0%\" stop-color=\"#323232\"></stop>\n      <stop offset=\"10%\" stop-color=\"#2e4463\"></stop>\n      <stop offset=\"20%\" stop-color=\"#1e588a\"></stop>\n      <stop offset=\"30%\" stop-color=\"#086da7\"></stop>\n      <stop offset=\"40%\" stop-color=\"#0082b9\"></stop>\n      <stop offset=\"50%\" stop-color=\"#039ac7\"></stop>\n      <stop offset=\"60%\" stop-color=\"#12b1d4\"></stop>\n      <stop offset=\"70%\" stop-color=\"#2bc8e2\"></stop>\n      <stop offset=\"80%\" stop-color=\"#3ddff0\"></stop>\n      <stop offset=\"90%\" stop-color=\"#61f4fb\"></stop>\n      <stop offset=\"100%\" stop-color=\"#ffffff\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Gradient Definition for Greens\nDESCRIPTION: SVG linear gradient definition that creates a continuous green color spectrum from light (#d3eecd) to dark (#036429) green.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_7\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-greens\">\n  <stop offset=\"0%\" stop-color=\"#d3eecd\"></stop>\n  <stop offset=\"10%\" stop-color=\"#c0e6ba\"></stop>\n  <stop offset=\"20%\" stop-color=\"#abdda5\"></stop>\n  <stop offset=\"30%\" stop-color=\"#94d391\"></stop>\n  <stop offset=\"40%\" stop-color=\"#7bc77d\"></stop>\n  <stop offset=\"50%\" stop-color=\"#60ba6c\"></stop>\n  <stop offset=\"60%\" stop-color=\"#46ab5e\"></stop>\n  <stop offset=\"70%\" stop-color=\"#329a51\"></stop>\n  <stop offset=\"80%\" stop-color=\"#208943\"></stop>\n  <stop offset=\"90%\" stop-color=\"#0e7735\"></stop>\n  <stop offset=\"100%\" stop-color=\"#036429\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Single-Field Flattening in Vega JSON\nDESCRIPTION: Example showing how to flatten a single array field 'foo' into individual data objects while preserving other fields.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/flatten.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"type\": \"flatten\", \"fields\": [\"foo\"]}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"name\": \"alpha\", \"data\": 123, \"foo\": [1, 2]},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": [3, 4, 5]}\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"name\": \"alpha\", \"data\": 123, \"foo\": 1},\n  {\"name\": \"alpha\", \"data\": 123, \"foo\": 2},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": 3},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": 4},\n  {\"name\": \"beta\",  \"data\": 456, \"foo\": 5}\n]\n```\n\n----------------------------------------\n\nTITLE: Finding Array Index in JavaScript\nDESCRIPTION: Returns the first index of a value in the input array.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nindexof(array, value)\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Color Gradient for RedGrey Scheme\nDESCRIPTION: SVG implementation of a continuous color gradient for the 'redgrey' scheme. The linearGradient transitions from red to grey with multiple color stops defining the progression between these color families.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_68\n\nLANGUAGE: HTML\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-redgrey\">\n      <stop offset=\"0%\" stop-color=\"#8c0d25\"></stop>\n      <stop offset=\"10%\" stop-color=\"#bf363a\"></stop>\n      <stop offset=\"20%\" stop-color=\"#df745e\"></stop>\n      <stop offset=\"30%\" stop-color=\"#f4ae91\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fcdccb\"></stop>\n      <stop offset=\"50%\" stop-color=\"#faf4f1\"></stop>\n      <stop offset=\"60%\" stop-color=\"#e2e2e2\"></stop>\n      <stop offset=\"70%\" stop-color=\"#c0c0c0\"></stop>\n      <stop offset=\"80%\" stop-color=\"#969696\"></stop>\n      <stop offset=\"90%\" stop-color=\"#646464\"></stop>\n      <stop offset=\"100%\" stop-color=\"#343434\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-redgrey)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Continuous Yellow-Orange-Red Gradient Definition\nDESCRIPTION: SVG linear gradient definition for a continuous color transition from yellow through orange to red, with 11 color stops.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_39\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-yelloworangered\">\n  <stop offset=\"0%\" stop-color=\"#fee087\"></stop>\n  <stop offset=\"10%\" stop-color=\"#fed16f\"></stop>\n  <stop offset=\"20%\" stop-color=\"#febd59\"></stop>\n  <stop offset=\"30%\" stop-color=\"#fea849\"></stop>\n  <stop offset=\"40%\" stop-color=\"#fd903e\"></stop>\n  <stop offset=\"50%\" stop-color=\"#fc7335\"></stop>\n  <stop offset=\"60%\" stop-color=\"#f9522b\"></stop>\n  <stop offset=\"70%\" stop-color=\"#ee3423\"></stop>\n  <stop offset=\"80%\" stop-color=\"#de1b20\"></stop>\n  <stop offset=\"90%\" stop-color=\"#ca0b22\"></stop>\n  <stop offset=\"100%\" stop-color=\"#af0225\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Generating Vega JSON Schema\nDESCRIPTION: Function that generates a JSON schema for Vega visualizations. Takes transform definitions as input and returns a schema object that can be serialized to JSON. The schema includes entries for the provided transform definitions.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-schema/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.schema(definitions)\n```\n\n----------------------------------------\n\nTITLE: Result of Simple Sort in JSON\nDESCRIPTION: The resulting JSON array after applying the simple sort collect transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/collect.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": 1, \"b\": 4},\n  {\"a\": 1, \"b\": 3},\n  {\"a\": 2, \"b\": 2},\n  {\"a\": 3, \"b\": 1}\n]\n```\n\n----------------------------------------\n\nTITLE: Legend Time Interval Values\nDESCRIPTION: Valid time interval string values that can be used for temporal scale tick counts.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/legends.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"\n```\n\n----------------------------------------\n\nTITLE: Time Operations in JavaScript\nDESCRIPTION: Functions for working with time values, including getting timestamps and timezone offsets.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ntime(datetime)\ntimezoneoffset(datetime)\n```\n\n----------------------------------------\n\nTITLE: Using Browser Functions in Vega\nDESCRIPTION: Functions for accessing web browser facilities such as container dimensions, screen properties, and window size.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\ncontainerSize()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nscreen()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwindowSize()\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Definition for Plasma Scheme\nDESCRIPTION: SVG linear gradient definition that creates a smooth transition between colors for the plasma color scheme, ranging from dark purple to yellow.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_21\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-plasma\">\n      <stop offset=\"0%\" stop-color=\"#0d0887\"></stop>\n      <stop offset=\"10%\" stop-color=\"#42039d\"></stop>\n      <stop offset=\"20%\" stop-color=\"#6a00a8\"></stop>\n      <stop offset=\"30%\" stop-color=\"#900da4\"></stop>\n      <stop offset=\"40%\" stop-color=\"#b12a90\"></stop>\n      <stop offset=\"50%\" stop-color=\"#cb4779\"></stop>\n      <stop offset=\"60%\" stop-color=\"#e16462\"></stop>\n      <stop offset=\"70%\" stop-color=\"#f2834c\"></stop>\n      <stop offset=\"80%\" stop-color=\"#fca636\"></stop>\n      <stop offset=\"90%\" stop-color=\"#fcce25\"></stop>\n      <stop offset=\"100%\" stop-color=\"#f0f921\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Color Swatch Grid with Grayscale Values\nDESCRIPTION: HTML markup that creates a grid of color swatches using div elements. Each swatch is numbered and contains multiple color blocks with hex values defined in both title attributes and background styles. The colors follow a grayscale progression from light (#d4d4d4) to dark (#353535).\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"swatch\">\n  <strong>6</strong>\n  <div title=\"#cdcdcd\" style=\"background: #cdcdcd;\"></div>\n  <div title=\"#b4b4b4\" style=\"background: #b4b4b4;\"></div>\n  <div title=\"#979797\" style=\"background: #979797;\"></div>\n  <div title=\"#7a7a7a\" style=\"background: #7a7a7a;\"></div>\n  <div title=\"#5f5f5f\" style=\"background: #5f5f5f;\"></div>\n  <div title=\"#3f3f3f\" style=\"background: #3f3f3f;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>7</strong>\n  <div title=\"#d0d0d0\" style=\"background: #d0d0d0;\"></div>\n  <div title=\"#bbbbbb\" style=\"background: #bbbbbb;\"></div>\n  <div title=\"#a2a2a2\" style=\"background: #a2a2a2;\"></div>\n  <div title=\"#888888\" style=\"background: #888888;\"></div>\n  <div title=\"#707070\" style=\"background: #707070;\"></div>\n  <div title=\"#585858\" style=\"background: #585858;\"></div>\n  <div title=\"#3b3b3b\" style=\"background: #3b3b3b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>8</strong>\n  <div title=\"#d2d2d2\" style=\"background: #d2d2d2;\"></div>\n  <div title=\"#c0c0c0\" style=\"background: #c0c0c0;\"></div>\n  <div title=\"#aaaaaa\" style=\"background: #aaaaaa;\"></div>\n  <div title=\"#949494\" style=\"background: #949494;\"></div>\n  <div title=\"#7d7d7d\" style=\"background: #7d7d7d;\"></div>\n  <div title=\"#686868\" style=\"background: #686868;\"></div>\n  <div title=\"#525252\" style=\"background: #525252;\"></div>\n  <div title=\"#383838\" style=\"background: #383838;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#d4d4d4\" style=\"background: #d4d4d4;\"></div>\n  <div title=\"#c4c4c4\" style=\"background: #c4c4c4;\"></div>\n  <div title=\"#b1b1b1\" style=\"background: #b1b1b1;\"></div>\n  <div title=\"#9d9d9d\" style=\"background: #9d9d9d;\"></div>\n  <div title=\"#888888\" style=\"background: #888888;\"></div>\n  <div title=\"#757575\" style=\"background: #757575;\"></div>\n  <div title=\"#626262\" style=\"background: #626262;\"></div>\n  <div title=\"#4d4d4d\" style=\"background: #4d4d4d;\"></div>\n  <div title=\"#353535\" style=\"background: #353535;\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: SVG Linear Gradient Definition - Purpleblue\nDESCRIPTION: Defines a linear gradient color scheme named 'purpleblue' transitioning from purple to blue tones.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_32\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-purpleblue\">\n      <stop offset=\"0%\" stop-color=\"#dbdaeb\"></stop>\n      <stop offset=\"10%\" stop-color=\"#c8cee4\"></stop>\n      <stop offset=\"20%\" stop-color=\"#b1c3de\"></stop>\n      <stop offset=\"30%\" stop-color=\"#97b7d8\"></stop>\n      <stop offset=\"40%\" stop-color=\"#7bacd1\"></stop>\n      <stop offset=\"50%\" stop-color=\"#5b9fc9\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Tealblues Color Gradient in SVG\nDESCRIPTION: SVG linear gradient definition for the tealblues color scheme, ranging from light teal (#bce4d8) to dark blue (#2c5985). Used for continuous color encoding.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_5\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-tealblues\">\n  <stop offset=\"0%\" stop-color=\"#bce4d8\"></stop>\n  <stop offset=\"10%\" stop-color=\"#a3d6d2\"></stop>\n  <stop offset=\"20%\" stop-color=\"#8cc9cd\"></stop>\n  <stop offset=\"30%\" stop-color=\"#76bdc7\"></stop>\n  <stop offset=\"40%\" stop-color=\"#5fb0c0\"></stop>\n  <stop offset=\"50%\" stop-color=\"#45a2b9\"></stop>\n  <stop offset=\"60%\" stop-color=\"#3993b0\"></stop>\n  <stop offset=\"70%\" stop-color=\"#3584a6\"></stop>\n  <stop offset=\"80%\" stop-color=\"#32759b\"></stop>\n  <stop offset=\"90%\" stop-color=\"#2f6790\"></stop>\n  <stop offset=\"100%\" stop-color=\"#2c5985\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Trigonometric Functions in JavaScript\nDESCRIPTION: Standard trigonometric functions including sine, cosine, tangent and their inverse operations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsin(value)\ncos(value)\ntan(value)\nasin(value)\nacos(value)\natan(value)\natan2(dy, dx)\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index in Array in JavaScript\nDESCRIPTION: Returns the last index of a value in the input array.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nlastindexof(array, value)\n```\n\n----------------------------------------\n\nTITLE: Defining Sinebow Cyclical Color Gradient in SVG\nDESCRIPTION: SVG code that defines a linear gradient for the sinebow cyclical color scheme with 11 color stops. This gradient provides a smoother periodic color transition than the rainbow scheme, with more uniform brightness.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_76\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-sinebow\">\n  <stop offset=\"0%\" stop-color=\"#ff4040\"></stop>\n  <stop offset=\"10%\" stop-color=\"#e78d0b\"></stop>\n  <stop offset=\"20%\" stop-color=\"#a7d503\"></stop>\n  <stop offset=\"30%\" stop-color=\"#58fc2a\"></stop>\n  <stop offset=\"40%\" stop-color=\"#18f472\"></stop>\n  <stop offset=\"50%\" stop-color=\"#00bfbf\"></stop>\n  <stop offset=\"60%\" stop-color=\"#1872f4\"></stop>\n  <stop offset=\"70%\" stop-color=\"#582afc\"></stop>\n  <stop offset=\"80%\" stop-color=\"#a703d5\"></stop>\n  <stop offset=\"90%\" stop-color=\"#e70b8d\"></stop>\n  <stop offset=\"100%\" stop-color=\"#ff4040\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Truncating String in JavaScript\nDESCRIPTION: Truncates an input string to a target length with optional alignment and ellipsis.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\ntruncate(string, length[, align, ellipsis])\n```\n\n----------------------------------------\n\nTITLE: Including Additional Properties in Markdown\nDESCRIPTION: This snippet includes a reference to additional properties for the Line mark, likely defined in a separate file or template.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/line.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% include properties.md %}\n```\n\n----------------------------------------\n\nTITLE: Missing Values Transform Output - JSON\nDESCRIPTION: Result of applying window transform to fill missing values with previous valid values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/window.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\":0, \"value\":1},\n  {\"key\":1, \"value\":1},\n  {\"key\":2, \"value\":2},\n  {\"key\":3, \"value\":2},\n  {\"key\":4, \"value\":3}\n]\n```\n\n----------------------------------------\n\nTITLE: Gradient Definition for Browns\nDESCRIPTION: SVG linear gradient definition that creates a continuous brown color spectrum from light (#eedbbd) to dark (#9f3632) brown.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_8\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-browns\">\n  <stop offset=\"0%\" stop-color=\"#eedbbd\"></stop>\n  <stop offset=\"10%\" stop-color=\"#ecca96\"></stop>\n  <stop offset=\"20%\" stop-color=\"#e9b97a\"></stop>\n  <stop offset=\"30%\" stop-color=\"#e4a865\"></stop>\n  <stop offset=\"40%\" stop-color=\"#dc9856\"></stop>\n  <stop offset=\"50%\" stop-color=\"#d18954\"></stop>\n  <stop offset=\"60%\" stop-color=\"#c7784c\"></stop>\n  <stop offset=\"70%\" stop-color=\"#c0673f\"></stop>\n  <stop offset=\"80%\" stop-color=\"#b85536\"></stop>\n  <stop offset=\"90%\" stop-color=\"#ad4433\"></stop>\n  <stop offset=\"100%\" stop-color=\"#9f3632\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Including a Vega Specification Example Using Liquid Template Tag\nDESCRIPTION: Demonstrates how to include a Vega specification example in a Jekyll page using the Liquid template language. The example references the specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/tree-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient for GoldRed Color Scheme - SVG\nDESCRIPTION: SVG gradient definition that creates a continuous color transition from gold to red hues. Uses linearGradient with color stops defined at 10% intervals.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_28\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-goldred\">\n  <stop offset=\"0%\" stop-color=\"#f4d166\"></stop>\n  <stop offset=\"10%\" stop-color=\"#f6be59\"></stop>\n  <stop offset=\"20%\" stop-color=\"#f9aa51\"></stop>\n  <stop offset=\"30%\" stop-color=\"#fc964e\"></stop>\n  <stop offset=\"40%\" stop-color=\"#f6834b\"></stop>\n  <stop offset=\"50%\" stop-color=\"#ee734a\"></stop>\n  <stop offset=\"60%\" stop-color=\"#e56249\"></stop>\n  <stop offset=\"70%\" stop-color=\"#db5247\"></stop>\n  <stop offset=\"80%\" stop-color=\"#cf4244\"></stop>\n  <stop offset=\"90%\" stop-color=\"#c43141\"></stop>\n  <stop offset=\"100%\" stop-color=\"#b71d3e\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Applying Spectral Gradient to Rectangle in SVG\nDESCRIPTION: SVG code that applies the spectral gradient to a rectangle element, creating a visual representation of the continuous color scheme that spans from 0 to 1 on both axes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_74\n\nLANGUAGE: SVG\nCODE:\n```\n<rect fill=\"url(#gradient-spectral)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n```\n\n----------------------------------------\n\nTITLE: Displaying Discrete Color Swatches in HTML\nDESCRIPTION: Renders discrete color swatches for different levels of the color schemes using HTML div elements with inline styles.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_72\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#d4322c\" style=\"background: #d4322c;\"></div>\n  <div title=\"#f16e43\" style=\"background: #f16e43;\"></div>\n  <div title=\"#fcac64\" style=\"background: #fcac64;\"></div>\n  <div title=\"#fedd90\" style=\"background: #fedd90;\"></div>\n  <div title=\"#faf8c1\" style=\"background: #faf8c1;\"></div>\n  <div title=\"#dcf1ec\" style=\"background: #dcf1ec;\"></div>\n  <div title=\"#abd6e8\" style=\"background: #abd6e8;\"></div>\n  <div title=\"#75abd0\" style=\"background: #75abd0;\"></div>\n  <div title=\"#4a74b4\" style=\"background: #4a74b4;\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Color Swatches for Purple-Green Gradient in HTML\nDESCRIPTION: HTML structure for displaying discrete color swatches of the purple-green color scheme at different quantization levels from 1 to 9 colors. Each swatch displays a specific color with its hex code as a tooltip.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_62\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"discrete-purplegreen\" style=\"display: none;\">\n<div class=\"swatch\">\n  <strong>1</strong>\n  <div></div> <div></div> <div></div> <div></div>\n  <div title=\"#eff0ef\" style=\"background: #eff0ef;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>2</strong>\n  <div></div> <div></div> <div></div>\n  <div title=\"#d3bbda\" style=\"background: #d3bbda;\"></div>\n  <div></div>\n  <div title=\"#bce3b8\" style=\"background: #bce3b8;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>3</strong>\n  <div></div> <div></div> <div></div>\n  <div title=\"#b897c5\" style=\"background: #b897c5;\"></div>\n  <div title=\"#eff0ef\" style=\"background: #eff0ef;\"></div>\n  <div title=\"#90cc8f\" style=\"background: #90cc8f;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>4</strong>\n  <div></div> <div></div>\n  <div title=\"#a67fb6\" style=\"background: #a67fb6;\"></div>\n  <div title=\"#e6d6e8\" style=\"background: #e6d6e8;\"></div>\n  <div></div>\n  <div title=\"#d9efd5\" style=\"background: #d9efd5;\"></div>\n  <div title=\"#71bb75\" style=\"background: #71bb75;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>5</strong>\n  <div></div> <div></div>\n  <div title=\"#9a6caa\" style=\"background: #9a6caa;\"></div>\n  <div title=\"#d3bbda\" style=\"background: #d3bbda;\"></div>\n  <div title=\"#eff0ef\" style=\"background: #eff0ef;\"></div>\n  <div title=\"#bce3b8\" style=\"background: #bce3b8;\"></div>\n  <div title=\"#5dac66\" style=\"background: #5dac66;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>6</strong>\n  <div></div>\n  <div title=\"#925fa1\" style=\"background: #925fa1;\"></div>\n  <div title=\"#c4a7cf\" style=\"background: #c4a7cf;\"></div>\n  <div title=\"#e9ddea\" style=\"background: #e9ddea;\"></div>\n  <div></div>\n  <div title=\"#dfefdc\" style=\"background: #dfefdc;\"></div>\n  <div title=\"#a5d8a2\" style=\"background: #a5d8a2;\"></div>\n  <div title=\"#4fa15c\" style=\"background: #4fa15c;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>7</strong>\n  <div></div>\n  <div title=\"#8c559b\" style=\"background: #8c559b;\"></div>\n  <div title=\"#b897c5\" style=\"background: #b897c5;\"></div>\n  <div title=\"#dfcce3\" style=\"background: #dfcce3;\"></div>\n  <div title=\"#eff0ef\" style=\"background: #eff0ef;\"></div>\n  <div title=\"#ceebca\" style=\"background: #ceebca;\"></div>\n  <div title=\"#90cc8f\" style=\"background: #90cc8f;\"></div>\n  <div title=\"#459954\" style=\"background: #459954;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>8</strong>\n  <div title=\"#874d96\" style=\"background: #874d96;\"></div>\n  <div title=\"#ae89bc\" style=\"background: #ae89bc;\"></div>\n  <div title=\"#d3bbda\" style=\"background: #d3bbda;\"></div>\n  <div title=\"#eae2eb\" style=\"background: #eae2eb;\"></div>\n  <div></div>\n  <div title=\"#e3efe1\" style=\"background: #e3efe1;\"></div>\n  <div title=\"#bce3b8\" style=\"background: #bce3b8;\"></div>\n  <div title=\"#7fc381\" style=\"background: #7fc381;\"></div>\n  <div title=\"#3d934e\" style=\"background: #3d934e;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#834792\" style=\"background: #834792;\"></div>\n  <div title=\"#a67fb6\" style=\"background: #a67fb6;\"></div>\n  <div title=\"#c9aed3\" style=\"background: #c9aed3;\"></div>\n  <div title=\"#e6d6e8\" style=\"background: #e6d6e8;\"></div>\n  <div title=\"#eff0ef\" style=\"background: #eff0ef;\"></div>\n  <div title=\"#d9efd5\" style=\"background: #d9efd5;\"></div>\n  <div title=\"#aedda9\" style=\"background: #aedda9;\"></div>\n  <div title=\"#71bb75\" style=\"background: #71bb75;\"></div>\n  <div title=\"#368e49\" style=\"background: #368e49;\"></div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Purples Color Scheme SVG Gradient in Vega\nDESCRIPTION: Beginning of SVG code that defines a linear gradient for the 'purples' color scheme in Vega. The partial gradient shows the initial color stops from light purple (#e2e1ef) to medium purple (#c4c5e0).\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_11\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-purples\">\n      <stop offset=\"0%\" stop-color=\"#e2e1ef\"></stop>\n      <stop offset=\"10%\" stop-color=\"#d4d4e8\"></stop>\n      <stop offset=\"20%\" stop-color=\"#c4c5e0\"></stop>\n```\n\n----------------------------------------\n\nTITLE: Slicing Array in JavaScript\nDESCRIPTION: Returns a section of array between the start and end indices, with support for negative end index.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nslice(array, start[, end])\n```\n\n----------------------------------------\n\nTITLE: Getting String Length in JavaScript\nDESCRIPTION: Returns the length of the input string.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nlength(string)\n```\n\n----------------------------------------\n\nTITLE: Rendering Oranges Color Scheme SVG Gradient in Vega\nDESCRIPTION: SVG code that defines a linear gradient for the 'oranges' color scheme in Vega. The gradient contains 11 color stops from light orange (#fdd8b3) to dark orange (#9f3303), creating a smooth transition for continuous data visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_9\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-oranges\">\n      <stop offset=\"0%\" stop-color=\"#fdd8b3\"></stop>\n      <stop offset=\"10%\" stop-color=\"#fdc998\"></stop>\n      <stop offset=\"20%\" stop-color=\"#fdb87b\"></stop>\n      <stop offset=\"30%\" stop-color=\"#fda55e\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fc9244\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f87f2c\"></stop>\n      <stop offset=\"60%\" stop-color=\"#f06b18\"></stop>\n      <stop offset=\"70%\" stop-color=\"#e4580b\"></stop>\n      <stop offset=\"80%\" stop-color=\"#d14904\"></stop>\n      <stop offset=\"90%\" stop-color=\"#b93d02\"></stop>\n      <stop offset=\"100%\" stop-color=\"#9f3303\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-oranges)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase in JavaScript\nDESCRIPTION: Transforms string to lower-case letters.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nlower(string)\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient for GreenBlue Color Scheme - SVG\nDESCRIPTION: SVG gradient definition that creates a continuous color transition from green to blue hues. Uses linearGradient with color stops defined at 10% intervals.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_29\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-greenblue\">\n  <stop offset=\"0%\" stop-color=\"#d3eece\"></stop>\n  <stop offset=\"10%\" stop-color=\"#c5e8c3\"></stop>\n  <stop offset=\"20%\" stop-color=\"#b1e1bb\"></stop>\n  <stop offset=\"30%\" stop-color=\"#9bd8bb\"></stop>\n  <stop offset=\"40%\" stop-color=\"#82cec2\"></stop>\n  <stop offset=\"50%\" stop-color=\"#69c2ca\"></stop>\n  <stop offset=\"60%\" stop-color=\"#51b2cd\"></stop>\n  <stop offset=\"70%\" stop-color=\"#3c9fc7\"></stop>\n  <stop offset=\"80%\" stop-color=\"#288abd\"></stop>\n  <stop offset=\"90%\" stop-color=\"#1675b1\"></stop>\n  <stop offset=\"100%\" stop-color=\"#0b60a1\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Missing Values Input Example - JSON\nDESCRIPTION: Sample input data with null and missing values for demonstrating value filling operations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/window.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"key\":0, \"value\":1},\n  {\"key\":1, \"value\":null},\n  {\"key\":2, \"value\":2},\n  {\"key\":3 },\n  {\"key\":4, \"value\":3}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Color Swatches for Pink-Yellow-Green Gradient in HTML\nDESCRIPTION: HTML structure for displaying discrete color swatches of the pink-yellow-green color scheme at different quantization levels from 1 to 9 colors. Each swatch represents a specific color with its hex code as a tooltip.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_64\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"discrete-pinkyellowgreen\" style=\"display: none;\">\n<div class=\"swatch\">\n  <strong>1</strong>\n  <div></div> <div></div> <div></div> <div></div>\n  <div title=\"#f5f3ef\" style=\"background: #f5f3ef;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>2</strong>\n  <div></div> <div></div> <div></div>\n  <div title=\"#f3c1de\" style=\"background: #f3c1de;\"></div>\n  <div></div>\n  <div title=\"#c4e59d\" style=\"background: #c4e59d;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>3</strong>\n  <div></div> <div></div> <div></div>\n  <div title=\"#e793c2\" style=\"background: #e793c2;\"></div>\n  <div title=\"#f5f3ef\" style=\"background: #f5f3ef;\"></div>\n  <div title=\"#9bcd67\" style=\"background: #9bcd67;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>4</strong>\n  <div></div> <div></div>\n  <div title=\"#dd72ad\" style=\"background: #dd72ad;\"></div>\n  <div title=\"#fadded\" style=\"background: #fadded;\"></div>\n  <div></div>\n  <div title=\"#e1f2ca\" style=\"background: #e1f2ca;\"></div>\n  <div title=\"#80bb47\" style=\"background: #80bb47;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>5</strong>\n  <div></div> <div></div>\n  <div title=\"#d3599d\" style=\"background: #d3599d;\"></div>\n  <div title=\"#f3c1de\" style=\"background: #f3c1de;\"></div>\n  <div title=\"#f5f3ef\" style=\"background: #f5f3ef;\"></div>\n  <div title=\"#c4e59d\" style=\"background: #c4e59d;\"></div>\n  <div title=\"#70ad3c\" style=\"background: #70ad3c;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>6</strong>\n  <div></div>\n  <div title=\"#cc4792\" style=\"background: #cc4792;\"></div>\n  <div title=\"#edaad0\" style=\"background: #edaad0;\"></div>\n  <div title=\"#f9e3ee\" style=\"background: #f9e3ee;\"></div>\n  <div></div>\n  <div title=\"#e7f2d5\" style=\"background: #e7f2d5;\"></div>\n  <div title=\"#aed97e\" style=\"background: #aed97e;\"></div>\n  <div title=\"#64a334\" style=\"background: #64a334;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>7</strong>\n  <div></div>\n  <div title=\"#c7398a\" style=\"background: #c7398a;\"></div>\n  <div title=\"#e793c2\" style=\"background: #e793c2;\"></div>\n  <div title=\"#f8d3e7\" style=\"background: #f8d3e7;\"></div>\n  <div title=\"#f5f3ef\" style=\"background: #f5f3ef;\"></div>\n  <div title=\"#d6edb9\" style=\"background: #d6edb9;\"></div>\n  <div title=\"#9bcd67\" style=\"background: #9bcd67;\"></div>\n  <div title=\"#5b9c2e\" style=\"background: #5b9c2e;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>8</strong>\n  <div title=\"#c32e83\" style=\"background: #c32e83;\"></div>\n  <div title=\"#e180b6\" style=\"background: #e180b6;\"></div>\n  <div title=\"#f3c1de\" style=\"background: #f3c1de;\"></div>\n  <div title=\"#f8e7ee\" style=\"background: #f8e7ee;\"></div>\n  <div></div>\n  <div title=\"#eaf2da\" style=\"background: #eaf2da;\"></div>\n  <div title=\"#c4e59d\" style=\"background: #c4e59d;\"></div>\n  <div title=\"#8cc355\" style=\"background: #8cc355;\"></div>\n  <div title=\"#549629\" style=\"background: #549629;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#c0267e\" style=\"background: #c0267e;\"></div>\n  <div title=\"#dd72ad\" style=\"background: #dd72ad;\"></div>\n  <div title=\"#f0b3d6\" style=\"background: #f0b3d6;\"></div>\n  <div title=\"#fadded\" style=\"background: #fadded;\"></div>\n  <div title=\"#f5f3ef\" style=\"background: #f5f3ef;\"></div>\n  <div title=\"#e1f2ca\" style=\"background: #e1f2ca;\"></div>\n  <div title=\"#b6de87\" style=\"background: #b6de87;\"></div>\n  <div title=\"#80bb47\" style=\"background: #80bb47;\"></div>\n  <div title=\"#4f9125\" style=\"background: #4f9125;\"></div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Properties Section in Markdown\nDESCRIPTION: This snippet includes a separate file containing properties information, likely detailing the available properties for Rule marks.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/rule.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include properties.md %}\n```\n\n----------------------------------------\n\nTITLE: Defining Rainbow Cyclical Color Gradient in SVG\nDESCRIPTION: SVG code that defines a linear gradient for the rainbow cyclical color scheme with 11 color stops. This gradient forms a complete color cycle, making it suitable for visualizing periodic data patterns.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_75\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-rainbow\">\n  <stop offset=\"0%\" stop-color=\"#6e40aa\"></stop>\n  <stop offset=\"10%\" stop-color=\"#bf3caf\"></stop>\n  <stop offset=\"20%\" stop-color=\"#fe4b83\"></stop>\n  <stop offset=\"30%\" stop-color=\"#ff7847\"></stop>\n  <stop offset=\"40%\" stop-color=\"#e2b72f\"></stop>\n  <stop offset=\"50%\" stop-color=\"#aff05b\"></stop>\n  <stop offset=\"60%\" stop-color=\"#52f667\"></stop>\n  <stop offset=\"70%\" stop-color=\"#1ddfa3\"></stop>\n  <stop offset=\"80%\" stop-color=\"#23abd8\"></stop>\n  <stop offset=\"90%\" stop-color=\"#4c6edb\"></stop>\n  <stop offset=\"100%\" stop-color=\"#6e40aa\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Implementing Discrete Color Swatches with HTML and CSS\nDESCRIPTION: HTML structure for displaying discrete color swatches. Each swatch div contains colored cells representing specific colors in the palette, with a number indicating how many colors are in that particular discrete version.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_69\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#bf363a\" style=\"background: #bf363a;\"></div>\n  <div title=\"#df745e\" style=\"background: #df745e;\"></div>\n  <div title=\"#f4ae91\" style=\"background: #f4ae91;\"></div>\n  <div title=\"#fbdbc9\" style=\"background: #fbdbc9;\"></div>\n  <div title=\"#f2efee\" style=\"background: #f2efee;\"></div>\n  <div title=\"#d2e5ef\" style=\"background: #d2e5ef;\"></div>\n  <div title=\"#9dcae1\" style=\"background: #9dcae1;\"></div>\n  <div title=\"#5da2cb\" style=\"background: #5da2cb;\"></div>\n  <div title=\"#2f78b3\" style=\"background: #2f78b3;\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML iframe elements used to embed YouTube video presentations about Vega and data visualization. Each iframe is configured with standard dimensions of 560x315 pixels and includes frameborder and allowfullscreen attributes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/about/video.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9uaHRWj04D4\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Color Swatch Displays in Vega\nDESCRIPTION: This HTML code displays a color swatch component with a labeled number and a series of color blocks. Each div contains a hex color value and applies that color as the background. This pattern is used throughout the document to showcase discrete color palettes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"swatch\">\n  <strong>4</strong>\n  <div title=\"#076a4c\" style=\"background: #076a4c;\"></div>\n  <div title=\"#2d9642\" style=\"background: #2d9642;\"></div>\n  <div title=\"#89bb3f\" style=\"background: #89bb3f;\"></div>\n  <div title=\"#dbdc34\" style=\"background: #dbdc34;\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient for Warmgreys Color Scheme in SVG\nDESCRIPTION: This SVG code defines a linear gradient for the 'warmgreys' color scheme, using multiple stop colors to create a smooth transition from light to dark warm grey tones.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_15\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-warmgreys\">\n      <stop offset=\"0%\" stop-color=\"#dcd4d0\"></stop>\n      <stop offset=\"10%\" stop-color=\"#cec5c1\"></stop>\n      <stop offset=\"20%\" stop-color=\"#c0b8b4\"></stop>\n      <stop offset=\"30%\" stop-color=\"#b3aaa7\"></stop>\n      <stop offset=\"40%\" stop-color=\"#a59c99\"></stop>\n      <stop offset=\"50%\" stop-color=\"#98908c\"></stop>\n      <stop offset=\"60%\" stop-color=\"#8b827f\"></stop>\n      <stop offset=\"70%\" stop-color=\"#7e7673\"></stop>\n      <stop offset=\"80%\" stop-color=\"#726866\"></stop>\n      <stop offset=\"90%\" stop-color=\"#665c5a\"></stop>\n      <stop offset=\"100%\" stop-color=\"#59504e\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining a Signal with Event Stream in Vega JSON\nDESCRIPTION: Demonstrates the basic structure for defining a signal with an event stream in Vega. The event stream definition is a placeholder to be replaced with actual event stream syntax.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"signalName\",\n  \"on\": [\n    {\n      \"events\": <<event-stream-definition>>,\n      \"update\": ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pre-Faceted Data in Vega\nDESCRIPTION: Example showing how to work with pre-faceted data where input data contains nested records. The facet directive references a 'children' field containing the nested dataset.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/porting-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"from\": {\n  \"facet\": {\n    \"name\":  \"facets\",\n    \"data\":  \"input\",\n    \"field\": \"children\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dark Green Color Scheme Gradient\nDESCRIPTION: SVG linear gradient definition for the darkgreen color scheme, ranging from dark gray (#3a3a3a) to light yellow with green tones in between.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_42\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-darkgreen\">\n      <stop offset=\"0%\" stop-color=\"#3a3a3a\"></stop>\n      <stop offset=\"10%\" stop-color=\"#245447\"></stop>\n      <stop offset=\"20%\" stop-color=\"#076a4c\"></stop>\n      <stop offset=\"30%\" stop-color=\"#038145\"></stop>\n      <stop offset=\"40%\" stop-color=\"#2d9642\"></stop>\n      <stop offset=\"50%\" stop-color=\"#5fa941\"></stop>\n      <stop offset=\"60%\" stop-color=\"#89bb3f\"></stop>\n      <stop offset=\"70%\" stop-color=\"#b3cb3b\"></stop>\n      <stop offset=\"80%\" stop-color=\"#dbdc34\"></stop>\n      <stop offset=\"90%\" stop-color=\"#ffed39\"></stop>\n      <stop offset=\"100%\" stop-color=\"#ffffaa\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Chronological Time Unit Input Data Example\nDESCRIPTION: Sample input data showing date values across different months in 2018 that will be transformed using the timeunit transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/timeunit.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"date\": Date(2018,  0, 11)},\n  {\"date\": Date(2018,  4, 12)},\n  {\"date\": Date(2018,  8,  7)},\n  {\"date\": Date(2018, 11, 23)}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient for Purples Color Scheme in SVG\nDESCRIPTION: This SVG code defines a linear gradient for the 'purples' color scheme, using multiple stop colors to create a smooth transition from light to dark purple.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_13\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-purples\">\n      <stop offset=\"30%\" stop-color=\"#b4b3d6\"></stop>\n      <stop offset=\"40%\" stop-color=\"#a3a0cc\"></stop>\n      <stop offset=\"50%\" stop-color=\"#928ec3\"></stop>\n      <stop offset=\"60%\" stop-color=\"#827cb9\"></stop>\n      <stop offset=\"70%\" stop-color=\"#7566ae\"></stop>\n      <stop offset=\"80%\" stop-color=\"#684ea2\"></stop>\n      <stop offset=\"90%\" stop-color=\"#5c3696\"></stop>\n      <stop offset=\"100%\" stop-color=\"#501f8c\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Linear Gradient for Greys Color Scheme in SVG\nDESCRIPTION: This SVG code defines a linear gradient for the 'greys' color scheme, using multiple stop colors to create a smooth transition from light to dark grey tones.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_16\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-greys\">\n      <stop offset=\"0%\" stop-color=\"#e2e2e2\"></stop>\n      <stop offset=\"10%\" stop-color=\"#d4d4d4\"></stop>\n      <stop offset=\"20%\" stop-color=\"#c4c4c4\"></stop>\n      <stop offset=\"30%\" stop-color=\"#b1b1b1\"></stop>\n      <stop offset=\"40%\" stop-color=\"#9d9d9d\"></stop>\n      <stop offset=\"50%\" stop-color=\"#888888\"></stop>\n      <stop offset=\"60%\" stop-color=\"#757575\"></stop>\n      <stop offset=\"70%\" stop-color=\"#626262\"></stop>\n      <stop offset=\"80%\" stop-color=\"#4d4d4d\"></stop>\n      <stop offset=\"90%\" stop-color=\"#353535\"></stop>\n      <stop offset=\"100%\" stop-color=\"#1e1e1e\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Implementing Purple-Orange Color Gradient in SVG\nDESCRIPTION: SVG linear gradient definition for the purple-orange color scheme with color stops at specific percentages. The gradient transitions from purple through neutral tones to orange and is applied to a rectangle.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_65\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-purpleorange\">\n      <stop offset=\"0%\" stop-color=\"#411469\"></stop>\n      <stop offset=\"10%\" stop-color=\"#664796\"></stop>\n      <stop offset=\"20%\" stop-color=\"#8f83b7\"></stop>\n      <stop offset=\"30%\" stop-color=\"#b9b4d6\"></stop>\n      <stop offset=\"40%\" stop-color=\"#dadbeb\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f3eeea\"></stop>\n      <stop offset=\"60%\" stop-color=\"#fce0ba\"></stop>\n      <stop offset=\"70%\" stop-color=\"#fbbf74\"></stop>\n      <stop offset=\"80%\" stop-color=\"#e8932f\"></stop>\n      <stop offset=\"90%\" stop-color=\"#c5690d\"></stop>\n      <stop offset=\"100%\" stop-color=\"#994a07\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-purpleorange)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Statement\nDESCRIPTION: Liquid template include statement that renders the visualization example using the specified configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/barley-trellis-plot.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for Darkred Color Scheme in HTML\nDESCRIPTION: This code defines an SVG linear gradient for the 'darkred' color scheme that transitions from dark gray through reds and oranges to yellow. The gradient includes stops at 10% intervals with specific color values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_44\n\nLANGUAGE: html\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-darkred\">\n      <stop offset=\"0%\" stop-color=\"#343434\"></stop>\n      <stop offset=\"10%\" stop-color=\"#643633\"></stop>\n      <stop offset=\"20%\" stop-color=\"#8c3a36\"></stop>\n      <stop offset=\"30%\" stop-color=\"#b03e38\"></stop>\n      <stop offset=\"40%\" stop-color=\"#d14632\"></stop>\n      <stop offset=\"50%\" stop-color=\"#e75d1e\"></stop>\n      <stop offset=\"60%\" stop-color=\"#eb7e20\"></stop>\n      <stop offset=\"70%\" stop-color=\"#ed9c25\"></stop>\n      <stop offset=\"80%\" stop-color=\"#efb92d\"></stop>\n      <stop offset=\"90%\" stop-color=\"#f3d431\"></stop>\n      <stop offset=\"100%\" stop-color=\"#ffeb2c\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-darkred)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Defining Discrete 'lightorange' Color Swatches in Vega\nDESCRIPTION: HTML code that defines discrete color swatches for the 'lightorange' scheme with cardinalities from 1 to 9. Each swatch shows the specific hex colors that would be used when the scheme is applied with that number of categories.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_52\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"discrete-lightorange\" style=\"display: none;\">\n<div class=\"swatch\">\n  <strong>1</strong>\n  <div title=\"#f8936d\" style=\"background: #f8936d;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>2</strong>\n  <div title=\"#fab184\" style=\"background: #fab184;\"></div>\n  <div title=\"#ef7860\" style=\"background: #ef7860;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>3</strong>\n  <div title=\"#f9bf94\" style=\"background: #f9bf94;\"></div>\n  <div title=\"#f8936d\" style=\"background: #f8936d;\"></div>\n  <div title=\"#ea695c\" style=\"background: #ea695c;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>4</strong>\n  <div title=\"#f9c7a0\" style=\"background: #f9c7a0;\"></div>\n  <div title=\"#faa47a\" style=\"background: #faa47a;\"></div>\n  <div title=\"#f38264\" style=\"background: #f38264;\"></div>\n  <div title=\"#e6605b\" style=\"background: #e6605b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>5</strong>\n  <div title=\"#f8cdaa\" style=\"background: #f8cdaa;\"></div>\n  <div title=\"#fab184\" style=\"background: #fab184;\"></div>\n  <div title=\"#f8936d\" style=\"background: #f8936d;\"></div>\n  <div title=\"#ef7860\" style=\"background: #ef7860;\"></div>\n  <div title=\"#e35b5b\" style=\"background: #e35b5b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>6</strong>\n  <div title=\"#f8d0b1\" style=\"background: #f8d0b1;\"></div>\n  <div title=\"#fab98d\" style=\"background: #fab98d;\"></div>\n  <div title=\"#fa9f75\" style=\"background: #fa9f75;\"></div>\n  <div title=\"#f58766\" style=\"background: #f58766;\"></div>\n  <div title=\"#ec6f5e\" style=\"background: #ec6f5e;\"></div>\n  <div title=\"#e1565b\" style=\"background: #e1565b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>7</strong>\n  <div title=\"#f7d3b6\" style=\"background: #f7d3b6;\"></div>\n  <div title=\"#f9bf94\" style=\"background: #f9bf94;\"></div>\n  <div title=\"#faa97e\" style=\"background: #faa97e;\"></div>\n  <div title=\"#f8936d\" style=\"background: #f8936d;\"></div>\n  <div title=\"#f27e63\" style=\"background: #f27e63;\"></div>\n  <div title=\"#ea695c\" style=\"background: #ea695c;\"></div>\n  <div title=\"#df535b\" style=\"background: #df535b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>8</strong>\n  <div title=\"#f7d5ba\" style=\"background: #f7d5ba;\"></div>\n  <div title=\"#f9c499\" style=\"background: #f9c499;\"></div>\n  <div title=\"#fab184\" style=\"background: #fab184;\"></div>\n  <div title=\"#fa9c73\" style=\"background: #fa9c73;\"></div>\n  <div title=\"#f68967\" style=\"background: #f68967;\"></div>\n  <div title=\"#ef7860\" style=\"background: #ef7860;\"></div>\n  <div title=\"#e8645b\" style=\"background: #e8645b;\"></div>\n  <div title=\"#de515b\" style=\"background: #de515b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#f7d7bd\" style=\"background: #f7d7bd;\"></div>\n  <div title=\"#f9c7a0\" style=\"background: #f9c7a0;\"></div>\n  <div title=\"#fab78a\" style=\"background: #fab78a;\"></div>\n  <div title=\"#faa47a\" style=\"background: #faa47a;\"></div>\n  <div title=\"#f8936d\" style=\"background: #f8936d;\"></div>\n  <div title=\"#f38264\" style=\"background: #f38264;\"></div>\n  <div title=\"#ed725f\" style=\"background: #ed725f;\"></div>\n  <div title=\"#e6605b\" style=\"background: #e6605b;\"></div>\n  <div title=\"#dd4f5b\" style=\"background: #dd4f5b;\"></div>\n</div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Color Swatch Implementation with RGB Values\nDESCRIPTION: HTML and CSS implementation of color swatches displaying various categorical color schemes. Each swatch contains div elements with background colors specified in both hex and RGB format.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"swatch\">\n  <div title=\"#7fc97f\" style=\"background: rgb(127, 201, 127);\"></div>\n  <div title=\"#beaed4\" style=\"background: rgb(190, 174, 212);\"></div>\n  <div title=\"#fdc086\" style=\"background: rgb(253, 192, 134);\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Log-Normal Distribution in Vega\nDESCRIPTION: Creates a log-normal probability distribution object with configurable log mean and log standard deviation. If unspecified, the log mean defaults to 0 and log standard deviation to 1.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvega.randomLogNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Defining Teals Color Gradient in SVG\nDESCRIPTION: SVG linear gradient definition for the teals color scheme, ranging from light teal (#bbdfdf) to dark teal (#006667). Used for continuous color encoding.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_6\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-teals\">\n  <stop offset=\"0%\" stop-color=\"#bbdfdf\"></stop>\n  <stop offset=\"10%\" stop-color=\"#a2d4d5\"></stop>\n  <stop offset=\"20%\" stop-color=\"#8ac9c9\"></stop>\n  <stop offset=\"30%\" stop-color=\"#75bcbb\"></stop>\n  <stop offset=\"40%\" stop-color=\"#61b0af\"></stop>\n  <stop offset=\"50%\" stop-color=\"#4da5a4\"></stop>\n  <stop offset=\"60%\" stop-color=\"#379998\"></stop>\n  <stop offset=\"70%\" stop-color=\"#2b8b8c\"></stop>\n  <stop offset=\"80%\" stop-color=\"#1e7f7f\"></stop>\n  <stop offset=\"90%\" stop-color=\"#127273\"></stop>\n  <stop offset=\"100%\" stop-color=\"#006667\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Discrete 'lighttealblue' Color Swatches in Vega\nDESCRIPTION: HTML code that defines discrete color swatches for the 'lighttealblue' scheme with cardinalities from 1 to 7. Each swatch shows the specific hex colors that would be used when the scheme is applied with that number of categories.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"discrete-lighttealblue\" style=\"display: none;\">\n<div class=\"swatch\">\n  <strong>1</strong>\n  <div title=\"#49a7bd\" style=\"background: #49a7bd;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>2</strong>\n  <div title=\"#7abfc8\" style=\"background: #7abfc8;\"></div>\n  <div title=\"#328dad\" style=\"background: #328dad;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>3</strong>\n  <div title=\"#92caca\" style=\"background: #92caca;\"></div>\n  <div title=\"#49a7bd\" style=\"background: #49a7bd;\"></div>\n  <div title=\"#3080a3\" style=\"background: #3080a3;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>4</strong>\n  <div title=\"#a2d1cb\" style=\"background: #a2d1cb;\"></div>\n  <div title=\"#66b5c3\" style=\"background: #66b5c3;\"></div>\n  <div title=\"#3698b4\" style=\"background: #3698b4;\"></div>\n  <div title=\"#2d799e\" style=\"background: #2d799e;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>5</strong>\n  <div title=\"#add5cd\" style=\"background: #add5cd;\"></div>\n  <div title=\"#7abfc8\" style=\"background: #7abfc8;\"></div>\n  <div title=\"#49a7bd\" style=\"background: #49a7bd;\"></div>\n  <div title=\"#328dad\" style=\"background: #328dad;\"></div>\n  <div title=\"#2b749b\" style=\"background: #2b749b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>6</strong>\n  <div title=\"#b5d8ce\" style=\"background: #b5d8ce;\"></div>\n  <div title=\"#88c5c9\" style=\"background: #88c5c9;\"></div>\n  <div title=\"#5eb1c1\" style=\"background: #5eb1c1;\"></div>\n  <div title=\"#379cb7\" style=\"background: #379cb7;\"></div>\n  <div title=\"#3186a7\" style=\"background: #3186a7;\"></div>\n  <div title=\"#297098\" style=\"background: #297098;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>7</strong>\n  <div title=\"#bbdace\" style=\"background: #bbdace;\"></div>\n  <div title=\"#92caca\" style=\"background: #92caca;\"></div>\n  <div title=\"#6eb9c5\" style=\"background: #6eb9c5;\"></div>\n  <div title=\"#49a7bd\" style=\"background: #49a7bd;\"></div>\n  <div title=\"#3494b2\" style=\"background: #3494b2;\"></div>\n  <div title=\"#3080a3\" style=\"background: #3080a3;\"></div>\n```\n\n----------------------------------------\n\nTITLE: Imputed Result Example\nDESCRIPTION: Shows the resulting tuple that gets imputed by the transform for the missing combination of x=3 and c=1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/impute.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"x\": 3, \"c\": 1, \"y\": 500}\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for 'lightorange' Color Scheme in Vega\nDESCRIPTION: HTML and SVG code that defines a linear gradient for the 'lightorange' color scheme in Vega 5.0. The gradient transitions from light cream (#f2e7da) to dark red (#d43d5b) through various orange hues, used for continuous data visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"scheme continuous\">\n<a name=\"lightorange\" href=\"#lightorange\">#</a> <strong>lightorange</strong> {% include tag ver=\"5.0\" %} <a class=\"toggle\" href='javascript:toggle(\"#discrete-lightorange\")'>View Discrete</a>\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-lightorange\">\n      <stop offset=\"0%\" stop-color=\"#f2e7da\"></stop>\n      <stop offset=\"10%\" stop-color=\"#f7d7bd\"></stop>\n      <stop offset=\"20%\" stop-color=\"#f9c7a0\"></stop>\n      <stop offset=\"30%\" stop-color=\"#fab78a\"></stop>\n      <stop offset=\"40%\" stop-color=\"#faa47a\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f8936d\"></stop>\n      <stop offset=\"60%\" stop-color=\"#f38264\"></stop>\n      <stop offset=\"70%\" stop-color=\"#ed725f\"></stop>\n      <stop offset=\"80%\" stop-color=\"#e6605b\"></stop>\n      <stop offset=\"90%\" stop-color=\"#dd4f5b\"></stop>\n      <stop offset=\"100%\" stop-color=\"#d43d5b\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-lightorange)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Linear Gradient Definition for Cividis Scheme\nDESCRIPTION: SVG linear gradient definition that creates a smooth transition between colors for the cividis color scheme, ranging from dark blue to yellow.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_22\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-cividis\">\n        <stop offset=\"0%\" stop-color=\"#002051\"></stop>\n        <stop offset=\"10%\" stop-color=\"#0a326a\"></stop>\n        <stop offset=\"20%\" stop-color=\"#2b446e\"></stop>\n        <stop offset=\"30%\" stop-color=\"#4d566d\"></stop>\n        <stop offset=\"40%\" stop-color=\"#696970\"></stop>\n        <stop offset=\"50%\" stop-color=\"#7f7c75\"></stop>\n        <stop offset=\"60%\" stop-color=\"#948f78\"></stop>\n        <stop offset=\"70%\" stop-color=\"#ada476\"></stop>\n        <stop offset=\"80%\" stop-color=\"#caba6a\"></stop>\n        <stop offset=\"90%\" stop-color=\"#ead156\"></stop>\n        <stop offset=\"100%\" stop-color=\"#fdea45\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Running Vega Test Cases\nDESCRIPTION: Command to run test cases for the Vega project.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Calculating Uniform Probability Density in JavaScript\nDESCRIPTION: Returns the value of the probability density function at the given input domain value, for a uniform distribution over the interval [min, max). If unspecified, min defaults to 0 and max defaults to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/expressions.md#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ndensityUniform(value[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Swatches in HTML with Inline CSS\nDESCRIPTION: HTML markup that creates a visual display of color swatches organized in numbered groups. Each div element uses inline CSS to show a colored square with its corresponding hex color code as a title attribute.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_56\n\nLANGUAGE: HTML\nCODE:\n```\n<div title=\"#286d96\" style=\"background: #286d96;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>8</strong>\n  <div title=\"#c0dccf\" style=\"background: #c0dccf;\"></div>\n  <div title=\"#9aceca\" style=\"background: #9aceca;\"></div>\n  <div title=\"#7abfc8\" style=\"background: #7abfc8;\"></div>\n  <div title=\"#59afc0\" style=\"background: #59afc0;\"></div>\n  <div title=\"#389fb9\" style=\"background: #389fb9;\"></div>\n  <div title=\"#328dad\" style=\"background: #328dad;\"></div>\n  <div title=\"#2f7ca0\" style=\"background: #2f7ca0;\"></div>\n  <div title=\"#276b95\" style=\"background: #276b95;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#c4ddd1\" style=\"background: #c4ddd1;\"></div>\n  <div title=\"#a2d1cb\" style=\"background: #a2d1cb;\"></div>\n  <div title=\"#84c4c9\" style=\"background: #84c4c9;\"></div>\n  <div title=\"#66b5c3\" style=\"background: #66b5c3;\"></div>\n  <div title=\"#49a7bd\" style=\"background: #49a7bd;\"></div>\n  <div title=\"#3698b4\" style=\"background: #3698b4;\"></div>\n  <div title=\"#3188a9\" style=\"background: #3188a9;\"></div>\n  <div title=\"#2d799e\" style=\"background: #2d799e;\"></div>\n  <div title=\"#276994\" style=\"background: #276994;\"></div>\n</div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Discrete Color Swatches for Purples Scheme in HTML\nDESCRIPTION: This HTML code creates a series of color swatches representing discrete steps in the 'purples' color scheme. Each swatch contains multiple color divisions with their corresponding hex codes.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_14\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"discrete-purples\" style=\"display: none;\">\n<div class=\"swatch\">\n  <strong>1</strong>\n  <div title=\"#928ec3\" style=\"background: #928ec3;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>2</strong>\n  <div title=\"#aeadd3\" style=\"background: #aeadd3;\"></div>\n  <div title=\"#796db2\" style=\"background: #796db2;\"></div>\n</div>\n<!-- Additional swatch divisions omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Histogram Specification in Jekyll Template\nDESCRIPTION: Liquid template syntax for including a histogram specification from Jekyll page variables. Uses the include directive to embed the visualization spec defined in the page's frontmatter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/histogram.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Example Output Data with Identifiers\nDESCRIPTION: Resulting data structure after applying the identifier transform, showing the added unique identifier values.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/identifier.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"foo\": \"a\", \"id\": 1},\n  {\"foo\": \"b\", \"id\": 2}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Dark Gold Color Scheme Gradient\nDESCRIPTION: SVG linear gradient definition for the darkgold color scheme, ranging from dark gray (#3c3c3c) to white with gold tones in between.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_41\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-darkgold\">\n      <stop offset=\"0%\" stop-color=\"#3c3c3c\"></stop>\n      <stop offset=\"10%\" stop-color=\"#554a38\"></stop>\n      <stop offset=\"20%\" stop-color=\"#6d5a35\"></stop>\n      <stop offset=\"30%\" stop-color=\"#846f32\"></stop>\n      <stop offset=\"40%\" stop-color=\"#a0832d\"></stop>\n      <stop offset=\"50%\" stop-color=\"#bf9828\"></stop>\n      <stop offset=\"60%\" stop-color=\"#dbb022\"></stop>\n      <stop offset=\"70%\" stop-color=\"#f0cb23\"></stop>\n      <stop offset=\"80%\" stop-color=\"#fae241\"></stop>\n      <stop offset=\"90%\" stop-color=\"#fff290\"></stop>\n      <stop offset=\"100%\" stop-color=\"#ffffff\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pink-Yellow-Green Color Gradient in SVG\nDESCRIPTION: SVG linear gradient definition for the pink-yellow-green color scheme with color stops at specific percentages. The gradient transitions from pink through yellow to green and is applied to a rectangle.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_63\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-pinkyellowgreen\">\n      <stop offset=\"0%\" stop-color=\"#8e0152\"></stop>\n      <stop offset=\"10%\" stop-color=\"#c0267e\"></stop>\n      <stop offset=\"20%\" stop-color=\"#dd72ad\"></stop>\n      <stop offset=\"30%\" stop-color=\"#f0b3d6\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fadded\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f5f3ef\"></stop>\n      <stop offset=\"60%\" stop-color=\"#e1f2ca\"></stop>\n      <stop offset=\"70%\" stop-color=\"#b6de87\"></stop>\n      <stop offset=\"80%\" stop-color=\"#80bb47\"></stop>\n      <stop offset=\"90%\" stop-color=\"#4f9125\"></stop>\n      <stop offset=\"100%\" stop-color=\"#276419\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-pinkyellowgreen)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Filtered Mousedown Events on Image Marks in Vega JSON\nDESCRIPTION: Defines an event stream object for mousedown events on image marks, with additional filters for the control key and left mouse button. This allows for more specific interaction handling.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/event-streams.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"mousedown\",\n  \"marktype\": \"image\",\n  \"filter\": [\"event.ctrlKey\", \"event.button === 0\"]\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Linear Gradient Definition - Purplebluegreen\nDESCRIPTION: Defines a linear gradient color scheme named 'purplebluegreen' transitioning from purple through blue to green in 11 steps.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_31\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-purplebluegreen\">\n      <stop offset=\"0%\" stop-color=\"#dbd8ea\"></stop>\n      <stop offset=\"10%\" stop-color=\"#c8cee4\"></stop>\n      <stop offset=\"20%\" stop-color=\"#b0c3de\"></stop>\n      <stop offset=\"30%\" stop-color=\"#93b7d8\"></stop>\n      <stop offset=\"40%\" stop-color=\"#72acd1\"></stop>\n      <stop offset=\"50%\" stop-color=\"#549fc8\"></stop>\n      <stop offset=\"60%\" stop-color=\"#3892bb\"></stop>\n      <stop offset=\"70%\" stop-color=\"#1c88a3\"></stop>\n      <stop offset=\"80%\" stop-color=\"#097f87\"></stop>\n      <stop offset=\"90%\" stop-color=\"#02736b\"></stop>\n      <stop offset=\"100%\" stop-color=\"#016353\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Defining Goldorange Linear Gradient in SVG\nDESCRIPTION: SVG linear gradient definition that transitions from gold (#f4d166) to orange (#9e3a26) through 11 color stops\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_27\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-goldorange\">\n  <stop offset=\"0%\" stop-color=\"#f4d166\"></stop>\n  <stop offset=\"10%\" stop-color=\"#f8be5c\"></stop>\n  <stop offset=\"20%\" stop-color=\"#f8aa4c\"></stop>\n  <stop offset=\"30%\" stop-color=\"#f5983b\"></stop>\n  <stop offset=\"40%\" stop-color=\"#f3852a\"></stop>\n  <stop offset=\"50%\" stop-color=\"#ef701b\"></stop>\n  <stop offset=\"60%\" stop-color=\"#e2621f\"></stop>\n  <stop offset=\"70%\" stop-color=\"#d65322\"></stop>\n  <stop offset=\"80%\" stop-color=\"#c54923\"></stop>\n  <stop offset=\"90%\" stop-color=\"#b14223\"></stop>\n  <stop offset=\"100%\" stop-color=\"#9e3a26\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Markdown Layout Configuration for Platformer Example\nDESCRIPTION: YAML front matter configuration for a platformer game example page, defining layout, title, permalink, specification reference and preview image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/platformer.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Platformer Example\npermalink: /examples/platformer/index.html\nspec: platformer\nimage: /examples/img/platformer.png\n---\n```\n\n----------------------------------------\n\nTITLE: Calculating Uniform Distribution Density in Vega\nDESCRIPTION: This function calculates the probability density function at a given value for a uniform distribution over the interval [min, max). If unspecified, min defaults to 0 and max to 1. If only one argument is provided, it is interpreted as the max value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.densityUniform(value[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Color Gradient Definition in SVG - YellowGreen\nDESCRIPTION: SVG linear gradient definition for a continuous color transition from yellow to green. The gradient uses 11 color stops from #e4f4ac to #036034.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_37\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-yellowgreen\">\n  <stop offset=\"0%\" stop-color=\"#e4f4ac\"></stop>\n  <stop offset=\"10%\" stop-color=\"#d1eca0\"></stop>\n  <stop offset=\"20%\" stop-color=\"#b9e294\"></stop>\n  <stop offset=\"30%\" stop-color=\"#9ed688\"></stop>\n  <stop offset=\"40%\" stop-color=\"#80c97c\"></stop>\n  <stop offset=\"50%\" stop-color=\"#62bb6e\"></stop>\n  <stop offset=\"60%\" stop-color=\"#47aa5e\"></stop>\n  <stop offset=\"70%\" stop-color=\"#329750\"></stop>\n  <stop offset=\"80%\" stop-color=\"#208344\"></stop>\n  <stop offset=\"90%\" stop-color=\"#0e723b\"></stop>\n  <stop offset=\"100%\" stop-color=\"#036034\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Zoomable Scatter Plot Example Using Liquid Template\nDESCRIPTION: This code snippet uses Liquid templating to include the zoomable scatter plot example specification. It references the spec defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/zoomable-scatter-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification in Markdown\nDESCRIPTION: This snippet uses a Liquid template tag to include a Vega specification file. The specification is referenced by the 'spec' variable from the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/probability-density.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining Color Swatch Grid HTML\nDESCRIPTION: HTML markup that creates a grid of color swatches using div elements. Each swatch has a title attribute with the hex color code and inline styling with the corresponding RGB value.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scheme\">\n<a name=\"set1\" href=\"#set1\">#</a> <strong>set1</strong>\n<div class=\"swatch\">\n  <div title=\"#e41a1c\" style=\"background: rgb(228, 26, 28);\"></div>\n  <div title=\"#377eb8\" style=\"background: rgb(55, 126, 184);\"></div>\n  <div title=\"#4daf4a\" style=\"background: rgb(77, 175, 74);\"></div>\n  <div title=\"#984ea3\" style=\"background: rgb(152, 78, 163);\"></div>\n  <div title=\"#ff7f00\" style=\"background: rgb(255, 127, 0);\"></div>\n  <div title=\"#ffff33\" style=\"background: rgb(255, 255, 51);\"></div>\n  <div title=\"#a65628\" style=\"background: rgb(166, 86, 40);\"></div>\n  <div title=\"#f781bf\" style=\"background: rgb(247, 129, 191);\"></div>\n  <div title=\"#999999\" style=\"background: rgb(153, 153, 153);\"></div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Continuous RedYellowBlue Color Gradient in SVG\nDESCRIPTION: Creates a linear gradient definition for the 'redyellowblue' color scheme, specifying color stops from red to yellow to blue.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_70\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-redyellowblue\">\n  <stop offset=\"0%\" stop-color=\"#a50026\"></stop>\n  <stop offset=\"10%\" stop-color=\"#d4322c\"></stop>\n  <stop offset=\"20%\" stop-color=\"#f16e43\"></stop>\n  <stop offset=\"30%\" stop-color=\"#fcac64\"></stop>\n  <stop offset=\"40%\" stop-color=\"#fedd90\"></stop>\n  <stop offset=\"50%\" stop-color=\"#faf8c1\"></stop>\n  <stop offset=\"60%\" stop-color=\"#dcf1ec\"></stop>\n  <stop offset=\"70%\" stop-color=\"#abd6e8\"></stop>\n  <stop offset=\"80%\" stop-color=\"#75abd0\"></stop>\n  <stop offset=\"90%\" stop-color=\"#4a74b4\"></stop>\n  <stop offset=\"100%\" stop-color=\"#313695\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Including Temperature Visualization Template\nDESCRIPTION: Liquid template inclusion tag that renders a temperature visualization using the specified spec parameter from the page metadata.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/weekly-temperature.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: SVG Linear Gradient Definition - Purple Red\nDESCRIPTION: SVG gradient definition transitioning from purple to red colors with 11 color stops for smooth color interpolation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_34\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-purplered\">\n      <stop offset=\"0%\" stop-color=\"#dcc9e2\"></stop>\n      <stop offset=\"10%\" stop-color=\"#d3b3d7\"></stop>\n      <stop offset=\"20%\" stop-color=\"#ce9ecc\"></stop>\n      <stop offset=\"30%\" stop-color=\"#d186c0\"></stop>\n      <stop offset=\"40%\" stop-color=\"#da6bb2\"></stop>\n      <stop offset=\"50%\" stop-color=\"#e14da0\"></stop>\n      <stop offset=\"60%\" stop-color=\"#e23189\"></stop>\n      <stop offset=\"70%\" stop-color=\"#d91e6f\"></stop>\n      <stop offset=\"80%\" stop-color=\"#c61159\"></stop>\n      <stop offset=\"90%\" stop-color=\"#ab0749\"></stop>\n      <stop offset=\"100%\" stop-color=\"#8f023a\"></stop>\n    </linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Color Swatch Display with JavaScript Toggle in Vega\nDESCRIPTION: HTML structure for displaying color swatches in both continuous and discrete modes. Includes anchor tags with JavaScript toggle functionality to switch between display modes for the 'oranges' color scheme.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"scheme continuous\">\n<a name=\"oranges\" href=\"#oranges\">#</a> <strong>oranges</strong> <a class=\"toggle\" href='javascript:toggle(\"#discrete-oranges\")'>View Discrete</a>\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-oranges\">\n      <stop offset=\"0%\" stop-color=\"#fdd8b3\"></stop>\n      <stop offset=\"10%\" stop-color=\"#fdc998\"></stop>\n      <stop offset=\"20%\" stop-color=\"#fdb87b\"></stop>\n      <stop offset=\"30%\" stop-color=\"#fda55e\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fc9244\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f87f2c\"></stop>\n      <stop offset=\"60%\" stop-color=\"#f06b18\"></stop>\n      <stop offset=\"70%\" stop-color=\"#e4580b\"></stop>\n      <stop offset=\"80%\" stop-color=\"#d14904\"></stop>\n      <stop offset=\"90%\" stop-color=\"#b93d02\"></stop>\n      <stop offset=\"100%\" stop-color=\"#9f3303\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-oranges)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n<div id=\"discrete-oranges\" style=\"display: none;\">\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification in Markdown\nDESCRIPTION: This snippet demonstrates how to include a Vega specification for a quantile dot plot example in a markdown file. It uses a Liquid template tag to insert the example based on the page's spec variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/quantile-dot-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Arc Diagram Example\nDESCRIPTION: YAML configuration block that defines metadata for the arc diagram example page, including layout type, title, permalink, specification reference, and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/arc-diagram.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Arc Diagram Example\npermalink: /examples/arc-diagram/index.html\nspec: arc-diagram\nimage: /examples/img/arc-diagram.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Bluegreen Color Gradient in SVG\nDESCRIPTION: SVG gradient definition for the 'bluegreen' color scheme using linearGradient with color stops ranging from light blue-green to dark green. This gradient provides a smooth transition for visualizations requiring a single-hue progression.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<linearGradient id=\"gradient-bluegreen\">\n  <stop offset=\"0%\" stop-color=\"#d5efed\"></stop>\n  <stop offset=\"10%\" stop-color=\"#c1e8e0\"></stop>\n  <stop offset=\"20%\" stop-color=\"#a7ddd1\"></stop>\n  <stop offset=\"30%\" stop-color=\"#8bd2be\"></stop>\n  <stop offset=\"40%\" stop-color=\"#70c6a9\"></stop>\n  <stop offset=\"50%\" stop-color=\"#58ba91\"></stop>\n  <stop offset=\"60%\" stop-color=\"#44ad77\"></stop>\n  <stop offset=\"70%\" stop-color=\"#319c5d\"></stop>\n  <stop offset=\"80%\" stop-color=\"#208946\"></stop>\n  <stop offset=\"90%\" stop-color=\"#0e7736\"></stop>\n  <stop offset=\"100%\" stop-color=\"#036429\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Toggle Function Reference for Discrete Color Views\nDESCRIPTION: HTML anchor tags that reference a JavaScript toggle function to switch between continuous and discrete color swatch views for each color scheme. The function is called using inline JavaScript.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_50\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"toggle\" href='javascript:toggle(\"#discrete-lightgreyred\")'>View Discrete</a>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification in Markdown\nDESCRIPTION: This code snippet uses a Liquid template tag to include the Vega specification file for the county unemployment example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/county-unemployment.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Spec in Markdown\nDESCRIPTION: This Liquid template tag includes the Vega specification for the donut chart example, referenced by the 'spec' variable defined in the front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/donut-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for Stratify Transform\nDESCRIPTION: Example input data showing flat structure with parent-child relationships using ID references.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/stratify.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"id\": \"A\", \"parent\": null},\n  {\"id\": \"B\", \"parent\": \"A\"},\n  {\"id\": \"C\", \"parent\": \"A\"},\n  {\"id\": \"D\", \"parent\": \"C\"},\n  {\"id\": \"E\", \"parent\": \"C\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Continuous RedYellowGreen Color Gradient in SVG\nDESCRIPTION: Creates a linear gradient definition for the 'redyellowgreen' color scheme, specifying color stops from red to yellow to green.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_71\n\nLANGUAGE: SVG\nCODE:\n```\n<linearGradient id=\"gradient-redyellowgreen\">\n  <stop offset=\"0%\" stop-color=\"#a50026\"></stop>\n  <stop offset=\"10%\" stop-color=\"#d4322c\"></stop>\n  <stop offset=\"20%\" stop-color=\"#f16e43\"></stop>\n  <stop offset=\"30%\" stop-color=\"#fcac63\"></stop>\n  <stop offset=\"40%\" stop-color=\"#fedd8d\"></stop>\n  <stop offset=\"50%\" stop-color=\"#f9f7ae\"></stop>\n  <stop offset=\"60%\" stop-color=\"#d7ee8e\"></stop>\n  <stop offset=\"70%\" stop-color=\"#a4d86e\"></stop>\n  <stop offset=\"80%\" stop-color=\"#64bc61\"></stop>\n  <stop offset=\"90%\" stop-color=\"#22964f\"></stop>\n  <stop offset=\"100%\" stop-color=\"#006837\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Pie Chart Example in Jekyll Template\nDESCRIPTION: Uses a Jekyll include tag to render the pie chart example, referencing the spec defined in the front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/pie-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Reds Color Scheme SVG Gradient in Vega\nDESCRIPTION: SVG code that defines a linear gradient for the 'reds' color scheme in Vega. The gradient contains 11 color stops from light pink (#fdc9b4) to dark red (#970b13), creating a smooth transition for continuous data visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_10\n\nLANGUAGE: SVG\nCODE:\n```\n<svg viewBox=\"0,0,1,1\" preserveAspectRatio=\"none\">\n  <defs>\n    <linearGradient id=\"gradient-reds\">\n      <stop offset=\"0%\" stop-color=\"#fdc9b4\"></stop>\n      <stop offset=\"10%\" stop-color=\"#fcb49a\"></stop>\n      <stop offset=\"20%\" stop-color=\"#fc9e80\"></stop>\n      <stop offset=\"30%\" stop-color=\"#fc8767\"></stop>\n      <stop offset=\"40%\" stop-color=\"#fa7051\"></stop>\n      <stop offset=\"50%\" stop-color=\"#f6573f\"></stop>\n      <stop offset=\"60%\" stop-color=\"#ec3f2f\"></stop>\n      <stop offset=\"70%\" stop-color=\"#dc2a25\"></stop>\n      <stop offset=\"80%\" stop-color=\"#c81b1d\"></stop>\n      <stop offset=\"90%\" stop-color=\"#b21218\"></stop>\n      <stop offset=\"100%\" stop-color=\"#970b13\"></stop>\n    </linearGradient>\n  </defs>\n  <rect fill=\"url(#gradient-reds)\" x=\"0\" y=\"0\" width=\"1\" height=\"1\"></rect>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Swatches with Hex Colors in HTML\nDESCRIPTION: HTML markup for displaying color swatches using div elements. Each swatch has a title attribute containing the hex color code and inline styling to set the background color. The swatches are organized in sets of 7 and 9 colors showing a gradient progression.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_46\n\nLANGUAGE: HTML\nCODE:\n```\n<div title=\"#943b37\" style=\"background: #943b37;\"></div>\n<div title=\"#bd3f37\" style=\"background: #bd3f37;\"></div>\n<div title=\"#db5029\" style=\"background: #db5029;\"></div>\n<div title=\"#e96f1f\" style=\"background: #e96f1f;\"></div>\n<div title=\"#ed9223\" style=\"background: #ed9223;\"></div>\n<div title=\"#eeb32b\" style=\"background: #eeb32b;\"></div>\n<div title=\"#f2d131\" style=\"background: #f2d131;\"></div>\n</div>\n<div class=\"swatch\">\n<strong>9</strong>\n<div title=\"#643633\" style=\"background: #643633;\"></div>\n<div title=\"#8c3a36\" style=\"background: #8c3a36;\"></div>\n<div title=\"#b03e38\" style=\"background: #b03e38;\"></div>\n<div title=\"#d14632\" style=\"background: #d14632;\"></div>\n<div title=\"#e75d1e\" style=\"background: #e75d1e;\"></div>\n<div title=\"#eb7e20\" style=\"background: #eb7e20;\"></div>\n<div title=\"#ed9c25\" style=\"background: #ed9c25;\"></div>\n<div title=\"#efb92d\" style=\"background: #efb92d;\"></div>\n<div title=\"#f3d431\" style=\"background: #f3d431;\"></div>\n</div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Visualization Example Using Liquid Template\nDESCRIPTION: Liquid template include statement that renders the visualization example by referencing the specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/wheat-and-wages.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification in Markdown\nDESCRIPTION: This snippet uses a Liquid template tag to include a Vega specification for the heatmap example. The specification is referenced by the 'spec' variable from the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/heatmap.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Layout Configuration for Loess Regression Example\nDESCRIPTION: YAML frontmatter configuration for a Vega example page that demonstrates loess regression visualization. Specifies the layout, title, permalink, specification reference and preview image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/loess-regression.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Loess Regression Example\npermalink: /examples/loess-regression/index.html\nspec: loess-regression\nimage: /examples/img/loess-regression.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Line Chart Example in Markdown\nDESCRIPTION: This snippet uses a Liquid template tag to include a Vega specification for a line chart example. The specification is referenced using the 'page.spec' variable, which is likely defined in the front matter of the markdown file.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/line-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Include Template for Vega Specification\nDESCRIPTION: Template include statement that renders the Vega specification defined in the page's spec variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/error-bars.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Template for Vega Spec\nDESCRIPTION: Jekyll template include statement that renders the Vega visualization specification using the page's spec parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/brushing-scatter-plots.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in HTML\nDESCRIPTION: This Liquid template tag includes the Vega specification file for the regression example, allowing the visualization to be rendered on the page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/regression.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Default Behavior Exceptions\nDESCRIPTION: Example of preventing default behavior for all events except wheel events.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/config.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"events\": {\n  \"defaults\": {\n    \"allow\": [\"wheel\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for Un-nesting in Vega JSON\nDESCRIPTION: Provides an example of nested input data that can be un-nested using the project transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/project.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"foo\": {\"a\": 5, \"b\": \"abc\"}, \"bar\": 0},\n  {\"foo\": {\"a\": 6, \"b\": \"def\"}, \"bar\": 1},\n  {\"foo\": {\"a\": 7, \"b\": \"ghi\"}, \"bar\": 2}\n]\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification for Radar Chart\nDESCRIPTION: This snippet uses a Liquid template tag to include the Vega specification for the radar chart. The specification is referenced by the 'spec' variable defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/radar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Vega CLI Commands Reference\nDESCRIPTION: Reference for the three main command line utilities provided by vega-cli package for converting Vega specifications to different output formats.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-cli/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nvg2pdf, vg2png, vg2svg\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Swatches in HTML\nDESCRIPTION: HTML code that defines discrete color swatches with different hex colors. Each swatch includes a numerical indicator showing the cardinality and divs with background colors set to specific hex values. This is part of a larger color scheme documentation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_55\n\nLANGUAGE: html\nCODE:\n```\n  <div title=\"#f6e072\" style=\"background: #f6e072;\"></div>\n  <div title=\"#f3993e\" style=\"background: #f3993e;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>4</strong>\n  <div title=\"#b8e2b3\" style=\"background: #b8e2b3;\"></div>\n  <div title=\"#d8e17e\" style=\"background: #d8e17e;\"></div>\n  <div title=\"#f6c659\" style=\"background: #f6c659;\"></div>\n  <div title=\"#f58a3f\" style=\"background: #f58a3f;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>5</strong>\n  <div title=\"#bde5c0\" style=\"background: #bde5c0;\"></div>\n  <div title=\"#c5e08b\" style=\"background: #c5e08b;\"></div>\n  <div title=\"#f6e072\" style=\"background: #f6e072;\"></div>\n  <div title=\"#f5b34c\" style=\"background: #f5b34c;\"></div>\n  <div title=\"#f6803f\" style=\"background: #f6803f;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>6</strong>\n  <div title=\"#c1e7c9\" style=\"background: #c1e7c9;\"></div>\n  <div title=\"#b9df96\" style=\"background: #b9df96;\"></div>\n  <div title=\"#e0e17b\" style=\"background: #e0e17b;\"></div>\n  <div title=\"#f6ce60\" style=\"background: #f6ce60;\"></div>\n  <div title=\"#f4a444\" style=\"background: #f4a444;\"></div>\n  <div title=\"#f67940\" style=\"background: #f67940;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>7</strong>\n  <div title=\"#c4e9d0\" style=\"background: #c4e9d0;\"></div>\n  <div title=\"#b0de9f\" style=\"background: #b0de9f;\"></div>\n  <div title=\"#d0e181\" style=\"background: #d0e181;\"></div>\n  <div title=\"#f6e072\" style=\"background: #f6e072;\"></div>\n  <div title=\"#f6c053\" style=\"background: #f6c053;\"></div>\n  <div title=\"#f3993e\" style=\"background: #f3993e;\"></div>\n  <div title=\"#f77440\" style=\"background: #f77440;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>8</strong>\n  <div title=\"#c7ead4\" style=\"background: #c7ead4;\"></div>\n  <div title=\"#b4e0aa\" style=\"background: #b4e0aa;\"></div>\n  <div title=\"#c5e08b\" style=\"background: #c5e08b;\"></div>\n  <div title=\"#e5e079\" style=\"background: #e5e079;\"></div>\n  <div title=\"#f6d264\" style=\"background: #f6d264;\"></div>\n  <div title=\"#f5b34c\" style=\"background: #f5b34c;\"></div>\n  <div title=\"#f4913e\" style=\"background: #f4913e;\"></div>\n  <div title=\"#f66f40\" style=\"background: #f66f40;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>9</strong>\n  <div title=\"#caebd7\" style=\"background: #caebd7;\"></div>\n  <div title=\"#b8e2b3\" style=\"background: #b8e2b3;\"></div>\n  <div title=\"#bddf93\" style=\"background: #bddf93;\"></div>\n  <div title=\"#d8e17e\" style=\"background: #d8e17e;\"></div>\n  <div title=\"#f6e072\" style=\"background: #f6e072;\"></div>\n  <div title=\"#f6c659\" style=\"background: #f6c659;\"></div>\n  <div title=\"#f4a946\" style=\"background: #f4a946;\"></div>\n  <div title=\"#f58a3f\" style=\"background: #f58a3f;\"></div>\n  <div title=\"#f56c3f\" style=\"background: #f56c3f;\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Jekyll Template\nDESCRIPTION: Uses a Jekyll include tag to embed the Vega specification for the histogram example. The 'spec' parameter is dynamically set based on the page's frontmatter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/histogram-null-values.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll Dependencies for Vega Documentation\nDESCRIPTION: Command to install necessary Jekyll libraries for building the Vega documentation website.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: This snippet demonstrates how to include a Vega specification in a markdown file using a custom include tag. It references the specification defined in the page metadata.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/parallel-coordinates.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Earthquake Visualization Example\nDESCRIPTION: This snippet includes a Vega specification for visualizing earthquake data on a globe. It uses a custom Jekyll include statement to render the visualization based on the page's spec parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/earthquakes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Beeswarm Plot Example Template\nDESCRIPTION: Jekyll include statement to embed the beeswarm plot specification using the page's spec variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/beeswarm-plot.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification using Liquid\nDESCRIPTION: This snippet uses Liquid templating to include the Vega specification for the crossfilter flights example. It references the spec variable defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/crossfilter-flights.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Visualization Example\nDESCRIPTION: Liquid template tag that includes a Vega visualization example specified by the page's spec parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/stock-index-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Basic Axes Configuration in Vega\nDESCRIPTION: Simple axes definitions that visualize scales with basic orientation settings. This creates bottom x-axis and left y-axis elements for the chart.\nSOURCE: https://github.com/vega/vega/blob/main/docs/tutorials/bar-chart/index.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n  \"axes\": [\n    { \"orient\": \"bottom\", \"scale\": \"xscale\" },\n    { \"orient\": \"left\", \"scale\": \"yscale\" }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - General Mark Properties\nDESCRIPTION: Table documenting the core visual and spatial properties available for Vega marks, including coordinate systems, dimensions, colors, stroke properties, and interaction settings.\nSOURCE: https://github.com/vega/vega/blob/main/docs/_includes/properties.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Property          | Type                          | Description  |\n| :---------------- | :---------------------------: | :------------|\n| x                 | {% include type t=\"Number\" %} | The primary x-coordinate in pixels.|\n| x2                | {% include type t=\"Number\" %} | The secondary x-coordinate in pixels.|\n| xc                | {% include type t=\"Number\" %} | The center x-coordinate. Incompatible with `x` and `x2`.|\n| width             | {% include type t=\"Number\" %} | The width of the mark in pixels, if supported.|\n| y                 | {% include type t=\"Number\" %} | The primary y-coordinate in pixels.|\n| y2                | {% include type t=\"Number\" %} | The secondary y-coordinate in pixels.|\n| yc                | {% include type t=\"Number\" %} | The center y-coordinate. Incompatible with `y` and `y2`.|\n| height            | {% include type t=\"Number\" %} | The height of the mark in pixels, if supported.|\n| opacity           | {% include type t=\"Number\" %} | The mark opacity from 0 (transparent) to 1 (opaque).|\n| fill              | {% include type t=\"Color\" %}  | The fill color.|\n| fillOpacity       | {% include type t=\"Number\" %} | The fill opacity from 0 (transparent) to 1 (opaque).|\n| stroke            | {% include type t=\"Color\" %}  | The stroke color.|\n| strokeOpacity     | {% include type t=\"Number\" %} | The stroke opacity from 0 (transparent) to 1 (opaque).|\n| strokeWidth       | {% include type t=\"Number\" %} | The stroke width in pixels.|\n| strokeCap         | {% include type t=\"String\" %} | The stroke cap for line ending style. One of `butt` (default), `round` or `square`.|\n| strokeDash        | {% include type t=\"Number[]\" %} | An array of [stroke, space] lengths for creating dashed or dotted lines.|\n| strokeDashOffset  | {% include type t=\"Number\" %} | The pixel offset at which to start the stroke dash array.|\n| strokeJoin        | {% include type t=\"String\" %} | The stroke line join method. One of `miter` (default), `round` or `bevel`.|\n| strokeMiterLimit  | {% include type t=\"Number\" %} | The miter limit at which to bevel a line join.|\n| blend             | {% include type t=\"String\" %} | The color blend mode for drawing an item on its current background.|\n| cursor            | {% include type t=\"String\" %} | The mouse cursor used over the mark.|\n| href              | {% include type t=\"URL\" %}    | A URL to load upon mouse click.|\n| tooltip           | {% include type t=\"Any\" %} | The tooltip text to show upon mouse hover.|\n| zindex            | {% include type t=\"Number\" %} | An integer z-index indicating the layering order of sibling mark items.|\n```\n\n----------------------------------------\n\nTITLE: Sample Data for Collect Transform in JSON\nDESCRIPTION: Example JSON data used to demonstrate the collect transform in Vega.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/collect.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": 3, \"b\": 1},\n  {\"a\": 2, \"b\": 2},\n  {\"a\": 1, \"b\": 4},\n  {\"a\": 1, \"b\": 3}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Vega Example Page\nDESCRIPTION: YAML front matter that specifies the layout, title, permalink, spec file, and image for a Vega example page showcasing annual precipitation data visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/annual-precipitation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Annual Precipitation Example\npermalink: /examples/annual-precipitation/index.html\nspec: annual-precipitation\nimage: /examples/img/annual-precipitation.png\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Vega with Interpreter in JavaScript\nDESCRIPTION: JavaScript implementation that fetches a Vega specification and renders it using the expression interpreter. The code demonstrates enabling AST output during parsing and configuring the View constructor with the expressionInterpreter to ensure CSP compliance.\nSOURCE: https://github.com/vega/vega/blob/main/docs/usage/interpreter.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet view;\n\nfetch('https://vega.github.io/vega/examples/bar-chart.vg.json')\n  .then(res => res.json())\n  .then(spec => render(spec))\n  .catch(err => console.error(err));\n\nfunction render(spec) {\n  // Parse the Vega specification with AST output enabled\n  // Pass a null configuration value as the second argument\n  const runtime = vega.parse(spec, null, { ast: true });\n\n  // Call Vega View constructor with an 'expr' interpreter option\n  view = new vega.View(runtime, {\n    expr:      vega.expressionInterpreter,\n    renderer:  'svg',    // renderer (canvas or svg)\n    container: '#view',  // parent DOM container\n    hover:     true      // enable hover processing\n  });\n\n  return view.runAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Discrete Color Swatches for Purple-Orange Gradient in HTML\nDESCRIPTION: HTML structure for displaying discrete color swatches of the purple-orange color scheme at different quantization levels. The code shows the beginning of the swatches implementation with 1-3 color options.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_66\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"discrete-purpleorange\" style=\"display: none;\">\n<div class=\"swatch\">\n  <strong>1</strong>\n  <div></div> <div></div> <div></div> <div></div>\n  <div title=\"#f3eeea\" style=\"background: #f3eeea;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>2</strong>\n  <div></div> <div></div> <div></div>\n  <div title=\"#c4c1dd\" style=\"background: #c4c1dd;\"></div>\n  <div></div>\n  <div title=\"#fbca8b\" style=\"background: #fbca8b;\"></div>\n</div>\n<div class=\"swatch\">\n  <strong>3</strong>\n  <div></div> <div></div> <div></div>\n  <div title=\"#a49cc7\" style=\"background: #a49cc7;\"></div>\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Radial Plot Example Page\nDESCRIPTION: YAML frontmatter configuration for a Jekyll-based example page that defines the layout, title, permalink, specification reference, and associated image path for a radial plot visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/radial-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Radial Plot Example\npermalink: /examples/radial-plot/index.html\nspec: radial-plot\nimage: /examples/img/radial-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification\nDESCRIPTION: This Liquid template tag includes the Vega specification for the density heatmaps example. It uses the 'spec' variable from the page's front matter to reference the correct specification file.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/density-heatmaps.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification\nDESCRIPTION: Liquid template include statement to embed the force-directed layout specification using the page's spec variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/force-directed-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: Markdown syntax to include the Vega specification file for the binned scatter plot example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/binned-scatter-plot.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Dot Plot Example in Markdown\nDESCRIPTION: This snippet demonstrates how to include a Vega specification example in a markdown file. It uses a Liquid template tag to render the example based on the page's spec variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/dot-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Template for Visualization Spec\nDESCRIPTION: Liquid template include statement that renders the visualization using the specification defined in the page's frontmatter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/job-voyager.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Canvas in JavaScript\nDESCRIPTION: Creates a new Canvas instance using DOM methods with optional width and height parameters. Returns null if DOM creation fails.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-canvas/README.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.domCanvas([width, height])\n```\n\n----------------------------------------\n\nTITLE: Result of Multi-criteria Sort in JSON\nDESCRIPTION: The resulting JSON array after applying the multi-criteria sort collect transform.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/transforms/collect.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"a\": 3, \"b\": 1},\n  {\"a\": 2, \"b\": 2},\n  {\"a\": 1, \"b\": 3},\n  {\"a\": 1, \"b\": 4}\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration for Vega Example\nDESCRIPTION: YAML front matter configuration for a Vega visualization example page, specifying layout, title, permalink, spec name and preview image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/brushing-scatter-plots.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Brushing Scatter Plots Example\npermalink: /examples/brushing-scatter-plots/index.html\nspec: brushing-scatter-plots\nimage: /examples/img/brushing-scatter-plots.png\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Extended Projections with Standard Vega Build in HTML\nDESCRIPTION: This code snippet demonstrates how to include the vega-projections.min.js file in an HTML document after importing the standard Vega library. This file contains all extended projections and required methods from d3-array and d3-geo.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-projection-extended/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"vega-projections.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Generating Vega Example Gallery with Jekyll Liquid Templates\nDESCRIPTION: This code snippet uses Jekyll Liquid templating to iterate through groups of Vega examples and generate previews for each specification. It creates a structured gallery layout with section headers for each group.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/index.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% for group in site.data.examples %}\n## {{ group[0] }}\n{% for spec in group[1] %}\n{% include preview spec=spec.name %}\n{% endfor %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Statement for Vega Example\nDESCRIPTION: Liquid template include statement to embed the Vega example specification into the page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/earthquakes-globe.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Vega Map Example\nDESCRIPTION: Configuration metadata for a Vega map example page, specifying the layout, title, permalink, specification file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/map-with-tooltip.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Custom Tooltip\npermalink: /examples/map-with-tooltip/index.html\nspec: map-with-tooltip\nimage: /examples/img/map-with-tooltip.png\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Job Voyager Example\nDESCRIPTION: YAML configuration block that defines the page layout, title, permalink, specification reference and associated image for the Job Voyager visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/job-voyager.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Job Voyager Example\npermalink: /examples/job-voyager/index.html\nspec: job-voyager\nimage: /examples/img/job-voyager.png\n---\n```\n\n----------------------------------------\n\nTITLE: Launching Local Web Server for Vega\nDESCRIPTION: Command to launch a local web server for viewing Vega test specifications.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Jekyll Page\nDESCRIPTION: Liquid template tag to include the Vega specification for the flight passengers example in the Jekyll page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/flight-passengers.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Include for Vega Example\nDESCRIPTION: Template code for including a Vega visualization example using Liquid templating syntax, passing the specification parameter from the page metadata.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/stacked-area-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining Vega Example Metadata in Markdown\nDESCRIPTION: This code snippet defines the metadata for a Vega example page, including layout, title, permalink, specification file, and image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/county-unemployment.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: County Unemployment Example\npermalink: /examples/county-unemployment/index.html\nspec: county-unemployment\nimage: /examples/img/county-unemployment.png\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Seeded Random Number Generator in Vega\nDESCRIPTION: This function creates a new random number generator with a given seed using a linear congruential generator (LCG). It's helpful for generating stable outputs and testing.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.randomLCG(seed)\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Constructor in JavaScript\nDESCRIPTION: Returns a reference to the Image constructor, using the browser's built-in Image object or the node-canvas Image instance if available.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-canvas/README.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.image()\n```\n\n----------------------------------------\n\nTITLE: Markdown Layout Configuration for HOPs Example\nDESCRIPTION: Front matter configuration for a Jekyll page defining the example's metadata, including layout, title, permalink, specification reference and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/hypothetical-outcome-plots.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Hypothetical Outcome Plots (HOPs) Example\npermalink: /examples/hypothetical-outcome-plots/index.html\nspec: hypothetical-outcome-plots\nimage: /examples/img/hypothetical-outcome-plots.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Sunburst Example Page Metadata in Markdown\nDESCRIPTION: This code snippet defines the metadata for a Vega example page showing a sunburst diagram. It specifies the layout, title, permalink, spec name, and associated image for the example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/sunburst.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Sunburst Example\npermalink: /examples/sunburst/index.html\nspec: sunburst\nimage: /examples/img/sunburst.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification\nDESCRIPTION: This snippet uses a Liquid template tag to include a Vega specification file for the interactive legend example. The specification is referenced using the 'spec' variable from the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/interactive-legend.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Packed Bubble Chart\nDESCRIPTION: YAML configuration block that defines the metadata and properties for the packed bubble chart example page, including layout, title, permalink, specification reference and preview image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/packed-bubble-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Packed Bubble Chart Example\npermalink: /examples/packed-bubble-chart/index.html\nspec: packed-bubble-chart\nimage: /examples/img/packed-bubble-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: Repeating Strings in JavaScript\nDESCRIPTION: Shows how to use the vega.repeat() function to create a new string by repeating an input string a specified number of times.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-util/README.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvega.repeat('0', 5); // '00000'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega Example Layout in Markdown\nDESCRIPTION: This snippet sets up the layout and metadata for a Vega example page. It specifies the title, permalink, spec file, and associated image for the crossfilter flights example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/crossfilter-flights.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Crossfilter Flights Example\npermalink: /examples/crossfilter-flights/index.html\nspec: crossfilter-flights\nimage: /examples/img/crossfilter-flights.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification Using Liquid Template\nDESCRIPTION: Liquid template include statement that renders the Vega visualization specification referenced in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/budget-forecasts.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Layout and Metadata in Markdown\nDESCRIPTION: Sets up the Jekyll page layout, title, permalink, associated specification file, and image for the warming stripes example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/warming-stripes.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Warming Stripes\npermalink: /examples/warming-stripes/index.html\nspec: warming-stripes\nimage: /examples/img/warming-stripes.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Vega Example Page\nDESCRIPTION: YAML front matter block that specifies metadata for a Vega example page, including layout, title, permalink, spec name, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/global-development.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Global Development Example\npermalink: /examples/global-development/index.html\nspec: global-development\nimage: /examples/img/global-development.png\n---\n```\n\n----------------------------------------\n\nTITLE: Front Matter Configuration for Top-K Plot Example in YAML\nDESCRIPTION: YAML front matter for a web page displaying a Top-K plot example. It specifies the layout, title, permalink, specification reference, and associated image path for the visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/top-k-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Top-K Plot Example\npermalink: /examples/top-k-plot/index.html\nspec: top-k-plot\nimage: /examples/img/top-k-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers in JavaScript with Vega\nDESCRIPTION: This snippet demonstrates how to generate random numbers using Vega's random function. It returns a uniform pseudo-random number in the domain [0, 1).\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.random()\n```\n\n----------------------------------------\n\nTITLE: Including Extended Projections in Vega\nDESCRIPTION: Script tag to import the vega-projection-extended library which provides additional cartographic projections not included in the standard Vega release. This library extends Vega's built-in projection capabilities with implementations from d3-geo-projection.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/projections.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vega-projection-extended@2\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Specification in Markdown\nDESCRIPTION: This code snippet includes the Vega specification for the sunburst diagram example. It uses a Liquid template tag to include the example based on the spec name defined in the page metadata.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/sunburst.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration for Radial Tree Example\nDESCRIPTION: YAML front matter configuration for a Vega visualization example page, specifying the layout, title, permalink, specification reference and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/radial-tree-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Radial Tree Layout Example\npermalink: /examples/radial-tree-layout/index.html\nspec: radial-tree-layout\nimage: /examples/img/radial-tree-layout.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Liquid Template\nDESCRIPTION: Liquid template tag that includes the Vega specification for the global development example, using the spec variable defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/global-development.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining Circle Packing Example Page in Markdown\nDESCRIPTION: This markdown snippet defines the layout, title, permalink, specification, and image for a circle packing example page. It includes YAML front matter for page metadata and uses Liquid templating to include the example specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/circle-packing.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Circle Packing Example\npermalink: /examples/circle-packing/index.html\nspec: circle-packing\nimage: /examples/img/circle-packing.png\n---\n\nA circle packing layout uses containment to convey hierarchical relationships. The layout is computed using Vega's [pack](../../docs/transforms/pack) transform. This example shows the software class hierarchy of the Flare visualization toolkit; node areas are proportional to the file size in bytes of each source code file.\n\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration for Bar Chart Example\nDESCRIPTION: YAML front matter configuration for a Jekyll-based documentation page, defining the page layout, title, permalink, specification reference and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/bar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Bar Chart Example\npermalink: /examples/bar-chart/index.html\nspec: bar-chart\nimage: /examples/img/bar-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: Example Include Template\nDESCRIPTION: Template include statement that renders the visualization example using the specified configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/zoomable-circle-packing.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Page Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for a Jekyll page that defines the example's metadata including layout, title, permalink, specification reference and preview image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/barley-trellis-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Barley Trellis Plot Example\npermalink: /examples/barley-trellis-plot/index.html\nspec: barley-trellis-plot\nimage: /examples/img/barley-trellis-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Time Units Example Page Structure in Jekyll Markdown\nDESCRIPTION: Jekyll frontmatter and content for a Vega example page that showcases time units functionality. The page includes layout configuration, title, permalink, specification reference, and an image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/time-units.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Time Units Example\npermalink: /examples/time-units/index.html\nspec: time-units\nimage: /examples/img/time-units.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Wind Vectors Example\nDESCRIPTION: YAML front matter block defining metadata for the wind vectors example page. It specifies the layout, title, permalink, spec file, and image path for the example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/wind-vectors.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Wind Vectors Example\npermalink: /examples/wind-vectors/index.html\nspec: wind-vectors\nimage: /examples/img/wind-vectors.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including a Vega Visualization Example in Jekyll\nDESCRIPTION: This Liquid template tag includes a Vega visualization example using the page's spec variable. The code embeds the U-District cuisine ridgeline plot into the Jekyll-based page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/u-district-cuisine.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Template for Vega Specification\nDESCRIPTION: Jekyll template include statement that renders the Vega specification referenced in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/radial-tree-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: Markdown snippet that includes the Vega specification for the world map example using a custom Jekyll include tag.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/world-map.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Vega Calendar Example\nDESCRIPTION: This YAML front matter defines metadata for a Vega example page, including layout, title, permalink, specification file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/calendar-view.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Calendar Example\npermalink: /examples/calendar-view/index.html\nspec: calendar-view\nimage: /examples/img/calendar-view.png\n---\n```\n\n----------------------------------------\n\nTITLE: Error Bars Example Page Layout in Markdown\nDESCRIPTION: Markdown frontmatter configuration for an error bars visualization example page, including layout settings, title, permalink, and associated specification and image files.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/error-bars.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Error Bars Example\npermalink: /examples/error-bars/index.html\nspec: error-bars\nimage: /examples/img/error-bars.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Population Pyramid Example\nDESCRIPTION: YAML configuration for a Jekyll-based webpage, specifying layout, title, permalink, Vega specification file, and associated image for a population pyramid visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/population-pyramid.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Population Pyramid Example\npermalink: /examples/population-pyramid/index.html\nspec: population-pyramid\nimage: /examples/img/population-pyramid.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification Using Liquid Template\nDESCRIPTION: Liquid template tag to include the Vega specification file for the Falkensee population example. The 'spec' parameter is dynamically set using the 'page.spec' variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/falkensee-population.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining the page metadata including layout, title, permalink, specification reference, and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/stacked-area-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Stacked Area Chart Example\npermalink: /examples/stacked-area-chart/index.html\nspec: stacked-area-chart\nimage: /examples/img/stacked-area-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Dorling Cartogram Example Metadata in Markdown\nDESCRIPTION: This code snippet defines the metadata for a Dorling cartogram example page using YAML front matter in Markdown. It specifies the layout, title, permalink, spec file, and associated image for the example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/dorling-cartogram.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Dorling Cartogram Example\npermalink: /examples/dorling-cartogram/index.html\nspec: dorling-cartogram\nimage: /examples/img/dorling-cartogram.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Vega Example\nDESCRIPTION: YAML front matter defining metadata for the Vega example page, including layout, title, permalink, specification file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/falkensee-population.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Falkensee Population Example\npermalink: /examples/falkensee-population/index.html\nspec: falkensee-population\nimage: /examples/img/falkensee-population.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Chart Spec in Jekyll Template\nDESCRIPTION: Liquid template include statement that renders a Vega specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/nested-bar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification Template\nDESCRIPTION: Liquid template include statement that renders the Vega specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/annual-temperature.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for Vega Watch Example\nDESCRIPTION: YAML front matter that defines metadata for a Jekyll-based web page showcasing a Vega visualization example of a watch face. It specifies the page layout, title, permalink, spec name, and a thumbnail image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/watch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Watch Example\npermalink: /examples/watch/index.html\nspec: watch\nimage: /examples/img/watch.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Bar and Line Chart Example\nDESCRIPTION: YAML front matter for a Jekyll-based example page, specifying layout, title, permalink, spec file, and image path for a bar and line chart toggle visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/bar-line-toggle.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Bar and Line Chart\npermalink: /examples/bar-line-toggle/index.html\nspec: bar-line-toggle\nimage: /examples/img/bar-line-toggle.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Contour Plot Example in Jekyll\nDESCRIPTION: Jekyll include statement that renders a contour plot visualization example using the page's spec variable.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/contour-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification with Jekyll\nDESCRIPTION: Jekyll include statement that embeds the time units visualization example using the spec variable defined in the page's frontmatter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/time-units.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for Wheat and Wages Visualization Example\nDESCRIPTION: Front matter YAML block that configures the Jekyll page with title, permalink, specification reference, and image path for the wheat and wages visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/wheat-and-wages.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Wheat and Wages Example\npermalink: /examples/wheat-and-wages/index.html\nspec: wheat-and-wages\nimage: /examples/img/wheat-and-wages.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Box Plot Example Metadata in YAML\nDESCRIPTION: This YAML front matter defines metadata for a box plot example page, including layout, title, permalink, specification file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/box-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Box Plot Example\npermalink: /examples/box-plot/index.html\nspec: box-plot\nimage: /examples/img/box-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Layout Configuration\nDESCRIPTION: Front matter configuration for a Jekyll-based example page, defining the layout, title, permalink, spec name and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/clock.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Clock Example\npermalink: /examples/clock/index.html\nspec: clock\nimage: /examples/img/clock.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: Markdown instruction to include the Vega specification file for the population pyramid example, using a Jekyll include tag with the spec parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/population-pyramid.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter for Vega Table Scrollbar Example\nDESCRIPTION: YAML front matter that configures the Jekyll page for a Vega table with scrollbar example. It defines the layout, title, permalink, spec file reference, and example image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/table-scrollbar.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Table with a Scrollbar\npermalink: /examples/table-scrollbar/index.html\nspec: table-scrollbar\nimage: /examples/img/table-scrollbar.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for Vega Visualization\nDESCRIPTION: Jekyll front matter configuration for a Vega visualization example, specifying layout, title, permalink, spec name and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/volcano-contours.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Volcano Contours Example\npermalink: /examples/volcano-contours/index.html\nspec: volcano-contours\nimage: /examples/img/volcano-contours.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Parallel Coordinates Example Metadata in Markdown\nDESCRIPTION: This snippet defines the metadata for a parallel coordinates example page in Vega documentation. It specifies the layout, title, permalink, specification file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/parallel-coordinates.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Parallel Coordinates Example\npermalink: /examples/parallel-coordinates/index.html\nspec: parallel-coordinates\nimage: /examples/img/parallel-coordinates.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Zoomable Binned Plot Example\nDESCRIPTION: YAML front matter for a Vega example page, specifying layout, title, permalink, spec name, and associated image. This configuration is used to set up the page metadata and content structure for the zoomable binned plot example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/zoomable-binned-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Zoomable Binned Plot Example\npermalink: /examples/zoomable-binned-plot/index.html\nspec: zoomable-binned-plot\nimage: /examples/img/zoomable-binned-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Package Badge\nDESCRIPTION: NPM version badge for the vega-typings package using shield.io\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-typings/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![npm version](https://img.shields.io/npm/v/vega-typings.svg)](https://www.npmjs.com/package/vega-typings)\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Include for Treemap Specification\nDESCRIPTION: Liquid template syntax to include the treemap specification, referencing the spec parameter defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/treemap.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Group Mark Scenegraph Example in JSON\nDESCRIPTION: This snippet illustrates how group marks function as containers for other marks in the Vega scenegraph. The example shows a top-level group containing a single group item with specific dimensions, which can then contain other nested marks.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-scenegraph/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"marktype\": \"group\",\n  \"items\": [\n    {\n      \"x\": 0,\n      \"y\": 0,\n      \"width\": 200,\n      \"height\": 200,\n      \"items\": [...] // array of contained mark instances\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification\nDESCRIPTION: Liquid template include statement that renders the Vega specification for the airport connections visualization using the spec parameter defined in the page front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/airport-connections.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration for Budget Forecast Example\nDESCRIPTION: YAML front matter configuration block that defines the page layout, title, permalink, specification reference, and associated image path for a Vega visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/budget-forecasts.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Budget Forecasts Example\npermalink: /examples/budget-forecasts/index.html\nspec: budget-forecasts\nimage: /examples/img/budget-forecasts.png\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the example page, defining layout, title, permalink, specification reference and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/zoomable-circle-packing.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Zoomable Circle Packing Example\npermalink: /examples/zoomable-circle-packing/index.html\nspec: zoomable-circle-packing\nimage: /examples/img/zoomable-circle-packing.png\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Treemap Example\nDESCRIPTION: YAML configuration block that defines the page metadata including layout, title, permalink, specification reference, and associated image path for a treemap visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/treemap.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Treemap Example\npermalink: /examples/treemap/index.html\nspec: treemap\nimage: /examples/img/treemap.png\n---\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Statement\nDESCRIPTION: Template include directive that renders the clock example using the specified spec parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/clock.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Embedding Vega Specification for Text Mark Example\nDESCRIPTION: This snippet demonstrates how to embed a Vega specification for a Text mark example using a Liquid template tag.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/text.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include embed spec=\"text\" %}\n```\n\n----------------------------------------\n\nTITLE: Beeswarm Plot Page Front Matter in Markdown\nDESCRIPTION: Jekyll front matter configuration for the beeswarm plot example page, defining the layout, title, permalink, specification reference and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/beeswarm-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Beeswarm Plot Example\npermalink: /examples/beeswarm-plot/index.html\nspec: beeswarm-plot\nimage: /examples/img/beeswarm-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Donut Chart Example Page\nDESCRIPTION: This YAML block specifies metadata for the donut chart example page, including layout, title, permalink, spec name, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/donut-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Donut Chart Example\npermalink: /examples/donut-chart/index.html\nspec: donut-chart\nimage: /examples/img/donut-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: Area Chart Jekyll Page Front Matter\nDESCRIPTION: Jekyll front matter configuration for an area chart example page, defining the layout, title, permalink, specification reference and preview image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/area-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Area Chart Example\npermalink: /examples/area-chart/index.html\nspec: area-chart\nimage: /examples/img/area-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: Building Vega Output Files\nDESCRIPTION: Command to build output files for all packages in the Vega project.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Q-Q Plot Example\nDESCRIPTION: YAML configuration block that defines metadata for the Q-Q plot example page, including layout, title, permalink, specification reference, and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/quantile-quantile-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Quantile-Quantile Plot Example\npermalink: /examples/quantile-quantile-plot/index.html\nspec: quantile-quantile-plot\nimage: /examples/img/quantile-quantile-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Timeline Example Page\nDESCRIPTION: YAML configuration block defining the page layout, title, permalink, specification reference and associated image for a timeline visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/timelines.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Timelines Example\npermalink: /examples/timelines/index.html\nspec: timelines\nimage: /examples/img/timelines.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega Example Page for Regression Visualization\nDESCRIPTION: This YAML front matter sets up the Vega example page, specifying the layout, title, permalink, spec file, and associated image for the regression analysis visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/regression.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Regression Example\npermalink: /examples/regression/index.html\nspec: regression\nimage: /examples/img/regression.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega Example Page Layout in Markdown\nDESCRIPTION: Sets up the layout and metadata for a Vega example page, including title, permalink, specification reference, and image path. This frontmatter configuration is used to generate the example page within a static site generator.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/histogram-null-values.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Histogram Null Values Example\npermalink: /examples/histogram-null-values/index.html\nspec: histogram-null-values\nimage: /examples/img/histogram-null-values.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Vega Scatter Plot Example\nDESCRIPTION: YAML front matter for a Vega scatter plot example page. It specifies the layout, title, permalink, spec file, and associated image for the example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/scatter-plot-null-values.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Scatter Plot Null Values Example\npermalink: /examples/scatter-plot-null-values/index.html\nspec: scatter-plot-null-values\nimage: /examples/img/scatter-plot-null-values.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Front Matter for Vega Pie Chart Example\nDESCRIPTION: Sets up the Jekyll page metadata for a Vega pie chart example, including layout, title, permalink, spec name, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/pie-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Pie Chart Example\npermalink: /examples/pie-chart/index.html\nspec: pie-chart\nimage: /examples/img/pie-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Rotating Globe Vega Example\nDESCRIPTION: YAML configuration for a Vega example page, specifying layout, title, permalink, and associated specification file.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/earthquakes-globe.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Rotating Globe\npermalink: /examples/earthquakes-globe/index.html\nspec: earthquakes-globe\nimage: /examples/img/earthquakes-globe.png\n---\n```\n\n----------------------------------------\n\nTITLE: Function Categories Overview - Vega Expression Language\nDESCRIPTION: This documentation outlines the complete set of functions available in the Vega expression language, extending beyond the basic utilities in vega-expression to include custom functions specific to Vega dataflows. Functions are grouped into categories like Type Checking, Math, Array Functions, Color Functions, etc.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-functions/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Function Categories\n- Type Checking Functions (isArray, isBoolean, etc.)\n- Type Coercion Functions (toBoolean, toDate, etc.)\n- Math Functions (random)\n- Date/Time Functions (quarter, utcquarter)\n- Array Functions (clampRange, extent, etc.)\n- String Functions (pad, truncate)\n- Object Functions (merge)\n- Formatting Functions (format, timeFormat, etc.)\n- Color Functions (rgb, lab, hcl, hsl)\n- Event Functions (pinchDistance, pinchAngle)\n- Scale and Projection Functions (bandspace, gradient, etc.)\n- Geographic Functions (geoArea, geoBounds, etc.)\n- Data Functions (indata, data)\n- Tree Functions (treePath, treeAncestors)\n- Browser Functions (screen, containerSize)\n- Logging Functions (warn, info, debug)\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration for Force Directed Layout\nDESCRIPTION: YAML front matter configuration for a force-directed layout example page, specifying the layout, title, permalink, specification reference and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/force-directed-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Force Directed Layout Example\npermalink: /examples/force-directed-layout/index.html\nspec: force-directed-layout\nimage: /examples/img/force-directed-layout.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Vega Example Page\nDESCRIPTION: Sets up the YAML front matter for a Vega example page, specifying the layout, title, permalink, spec file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/overview-plus-detail.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Overview Plus Detail Example\npermalink: /examples/overview-plus-detail/index.html\nspec: overview-plus-detail\nimage: /examples/img/overview-plus-detail.png\n---\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot Page Template in Markdown with Liquid\nDESCRIPTION: Jekyll/Liquid template for a scatter plot example page that includes front matter configuration and description text. The template references a scatter plot specification and includes an example component.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/scatter-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: example\ntitle: Scatter Plot Example\npermalink: /examples/scatter-plot/index.html\nspec: scatter-plot\nimage: /examples/img/scatter-plot.png\n---\n\n[Scatter plots](https://en.wikipedia.org/wiki/Scatter_plot) are ideal for visualizing the relationship between two quantitative variables. This example plots horsepower vs. mileage for a data set of cars. A size encoding is used to additionally depict acceleration.\n\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Visualization Example using Liquid Template\nDESCRIPTION: Uses Liquid template syntax to include a visualization example. The template references the page's spec parameter to render the stacked bar chart visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/stacked-bar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Embedding Vega Grouped Bar Chart Specification in Jekyll\nDESCRIPTION: This snippet demonstrates how to include a Vega specification for a grouped bar chart in a Jekyll-powered website. It uses a Liquid template tag to insert the chart specification defined elsewhere.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/grouped-bar-chart.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Binned Scatter Plot Example\nDESCRIPTION: YAML configuration for the example page, specifying layout, title, permalink, spec file, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/binned-scatter-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Binned Scatter Plot Example\npermalink: /examples/binned-scatter-plot/index.html\nspec: binned-scatter-plot\nimage: /examples/img/binned-scatter-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Defining SVG Linear Gradient for Lightgreyred Color Scheme\nDESCRIPTION: SVG code that defines a linear gradient for the 'lightgreyred' color scheme. This gradient transitions from light grey to red colors and is used as a continuous color scale in Vega visualizations.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_47\n\nLANGUAGE: svg\nCODE:\n```\n<linearGradient id=\"gradient-lightgreyred\">\n  <stop offset=\"0%\" stop-color=\"#efe9e6\"></stop>\n  <stop offset=\"10%\" stop-color=\"#e2dcd9\"></stop>\n  <stop offset=\"20%\" stop-color=\"#d7cecb\"></stop>\n  <stop offset=\"30%\" stop-color=\"#ccc1be\"></stop>\n  <stop offset=\"40%\" stop-color=\"#c0b4af\"></stop>\n  <stop offset=\"50%\" stop-color=\"#c4a293\"></stop>\n  <stop offset=\"60%\" stop-color=\"#d38b66\"></stop>\n  <stop offset=\"70%\" stop-color=\"#de7336\"></stop>\n  <stop offset=\"80%\" stop-color=\"#e15917\"></stop>\n  <stop offset=\"90%\" stop-color=\"#df3a10\"></stop>\n  <stop offset=\"100%\" stop-color=\"#dc000b\"></stop>\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Template\nDESCRIPTION: A Jekyll include statement that renders the watch visualization example using the spec defined in the front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/watch.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vega Example Page for Density Heatmaps\nDESCRIPTION: This YAML front matter configures the example page for density heatmaps in Vega. It sets the layout, title, permalink, specification file, and image path for the example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/density-heatmaps.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Density Heatmaps Example\npermalink: /examples/density-heatmaps/index.html\nspec: density-heatmaps\nimage: /examples/img/density-heatmaps.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: Markdown code to include the Vega specification file in the example page, using a Jekyll include tag with the spec parameter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/bar-line-toggle.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Area Chart Include Statement\nDESCRIPTION: Jekyll include statement that renders the area chart example using the specified chart specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/area-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Visualization Example in Markdown\nDESCRIPTION: This snippet includes a Vega visualization example using a Liquid template tag. It references a specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/labeled-scatter-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Vega World Map Example\nDESCRIPTION: YAML front matter block that specifies metadata for the world map example, including layout, title, permalink, spec name, and associated image.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/world-map.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: World Map Example\npermalink: /examples/world-map/index.html\nspec: world-map\nimage: /examples/img/world-map.png\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for Vega Example\nDESCRIPTION: YAML front matter block defining metadata for a Jekyll-based Vega example page. It specifies the layout, title, permalink, spec file, and associated image for the connected scatter plot example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/connected-scatter-plot.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Connected Scatter Plot Example\npermalink: /examples/connected-scatter-plot/index.html\nspec: connected-scatter-plot\nimage: /examples/img/connected-scatter-plot.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: Markdown snippet that includes the Vega specification for the wind vectors example. It uses a custom include tag to embed the specification defined in the YAML front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/wind-vectors.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification Template\nDESCRIPTION: Jekyll include statement to embed the Vega specification defined in the front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/volcano-contours.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining Jekyll Page Front Matter\nDESCRIPTION: YAML front matter configuration for a Jekyll page that defines the example's metadata, including layout, title, permalink, specification reference and associated image path.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/airport-connections.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Airport Connections Example\npermalink: /examples/airport-connections/index.html\nspec: airport-connections\nimage: /examples/img/airport-connections.png\n---\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration\nDESCRIPTION: YAML front matter block that defines the page layout, title, permalink, specification reference, and associated image for the nested bar chart example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/nested-bar-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Nested Bar Chart Example\npermalink: /examples/nested-bar-chart/index.html\nspec: nested-bar-chart\nimage: /examples/img/nested-bar-chart.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Component in Jekyll Layout\nDESCRIPTION: A Jekyll include tag that renders a Vega specification example. The tag passes the page's spec parameter to the example component, which will render the word cloud visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/word-cloud.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: Markdown code to include the Vega specification for the Pi Monte Carlo example. It uses a custom include tag that references the specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/pi-monte-carlo.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Defining PurpleGreen Gradient in SVG (Partial)\nDESCRIPTION: Partial HTML and SVG code for defining a purple-to-green diverging color gradient using linearGradient. The gradient begins transitioning from purple (#5b1667) through intermediate colors toward a neutral midpoint (#e6d6e8), but the code is incomplete.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_59\n\nLANGUAGE: HTML\nCODE:\n```\n<linearGradient id=\"gradient-purplegreen\">\n  <stop offset=\"0%\" stop-color=\"#5b1667\"></stop>\n  <stop offset=\"10%\" stop-color=\"#834792\"></stop>\n  <stop offset=\"20%\" stop-color=\"#a67fb6\"></stop>\n  <stop offset=\"30%\" stop-color=\"#c9aed3\"></stop>\n  <stop offset=\"40%\" stop-color=\"#e6d6e8\"></stop>\n\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Statement for Visualization Example\nDESCRIPTION: Template include statement that renders the visualization example using the specified configuration.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/radial-plot.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Pi Monte Carlo Vega Example\nDESCRIPTION: YAML front matter configuration for a Vega example page. It sets the layout, title, permalink, specification file, and image path for the Pi Monte Carlo estimation visualization.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/pi-monte-carlo.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Pi Monte Carlo\npermalink: /examples/pi-monte-carlo/index.html\nspec: pi-monte-carlo\nimage: /examples/img/pi-monte-carlo.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Markdown\nDESCRIPTION: This code snippet uses a Liquid template tag to include the Vega specification for the Dorling cartogram example. It references the spec defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/dorling-cartogram.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Example Template in Jekyll\nDESCRIPTION: Liquid template tag that includes the Vega example using the spec defined in the page's front matter. This renders the visualization on the page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/table-scrollbar.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Jekyll Template\nDESCRIPTION: Uses a Jekyll include tag to embed the Vega specification for the warming stripes chart into the page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/warming-stripes.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Building and Launching Vega Documentation Website\nDESCRIPTION: Command to build the Vega documentation and launch a local webserver for viewing.\nSOURCE: https://github.com/vega/vega/blob/main/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Embedding Vega Specification for Distortion Comparison\nDESCRIPTION: This code snippet includes a Vega specification for the distortion comparison visualization. It uses a Liquid template tag to embed the specification defined in the page's front matter.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/distortion-comparison.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Describing Vega Runtime Package in Markdown\nDESCRIPTION: This snippet provides a brief description of the vega-runtime package, its purpose, and its relationship with other Vega packages. It explains that vega-runtime parses dataflow descriptions from vega-parser to create live vega-dataflow instances.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-runtime/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# vega-runtime\n\nRuntime support for Vega dataflows. Parses a runtime dataflow description produced by [vega-parser](https://github.com/vega/vega/tree/master/packages/vega-parser) to instantiate a live [vega-dataflow](https://github.com/vega/vega/tree/master/packages/vega-dataflow) instance.\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Jekyll Template\nDESCRIPTION: Uses a Liquid template tag to include the Vega specification file for rendering the overview plus detail visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/overview-plus-detail.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Template for Bar Chart Specification\nDESCRIPTION: Liquid template syntax to include the bar chart specification using a page variable reference.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/bar-chart.md#2025-04-16_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Functionality with JavaScript\nDESCRIPTION: JavaScript function reference for toggling the display of discrete color palettes. This onclick event handler is used to show or hide alternative discrete palettes for each diverging color scheme.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/schemes.md#2025-04-16_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\njavascript:toggle(\"#discrete-blueorange\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Front Matter for Flight Passengers Example\nDESCRIPTION: YAML front matter for a Jekyll page, specifying layout, title, permalink, spec name, and associated image for a flight passengers visualization example.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/flight-passengers.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: example\ntitle: Flight Passengers Example\npermalink: /examples/flight-passengers/index.html\nspec: flight-passengers\nimage: /examples/img/flight-passengers.png\n---\n```\n\n----------------------------------------\n\nTITLE: Including Vega Specification in Jekyll Template\nDESCRIPTION: Liquid template tag to include the Vega specification file for the connected scatter plot example. It uses the 'spec' variable defined in the front matter to dynamically insert the correct specification.\nSOURCE: https://github.com/vega/vega/blob/main/docs/examples/connected-scatter-plot.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% include example spec=page.spec %}\n```\n\n----------------------------------------\n\nTITLE: Computing Uniform Quantile with vega.quantileUniform()\nDESCRIPTION: Returns the quantile value (inverse of CDF) for a uniform distribution at a given probability. Optional parameters specify the min and max bounds of the distribution.\nSOURCE: https://github.com/vega/vega/blob/main/packages/vega-statistics/README.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.quantileUniform(probability[, min, max])\n```\n\n----------------------------------------\n\nTITLE: Sampling from Log-Normal Distribution in Vega\nDESCRIPTION: This function returns a sample from a univariate log-normal probability distribution with specified log mean and log standard deviation. If unspecified, log mean defaults to 0 and log standard deviation to 1.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/api/statistics.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nvega.sampleLogNormal([mean, stdev])\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Frontmatter Configuration\nDESCRIPTION: Jekyll frontmatter configuration defining the page layout, title, and permalink for the About page of the Vega project documentation.\nSOURCE: https://github.com/vega/vega/blob/main/docs/about/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: about\ntitle: About the Vega Project\npermalink: /about/index.html\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure\nDESCRIPTION: Markdown table listing additional resources and links related to the Vega project, including videos, projects, research, and community guidelines.\nSOURCE: https://github.com/vega/vega/blob/main/docs/about/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| :------------------------- | :------------------ |\n| [Video](video)             | Videos of presentations about Vega and related topics.|\n| [Projects](projects)       | Other languages, tools and models built on Vega.|\n| [Research](research)       | Research publications from the Vega project.|\n| [Vega and D3](vega-and-d3) | On the relationship between Vega and D3.|\n| [Code of Conduct](https://github.com/vega/.github/blob/master/CODE_OF_CONDUCT.md) | The Vega project is governed by a code of conduct to foster an inclusive community.|\n```\n\n----------------------------------------\n\nTITLE: Example Image Mark Usage in Vega\nDESCRIPTION: An embedded example showing how to use the Image mark in Vega. The actual code is not visible in the content, but is referenced through an include directive.\nSOURCE: https://github.com/vega/vega/blob/main/docs/docs/marks/image.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include embed spec=\"image\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Code of Conduct Page\nDESCRIPTION: This YAML frontmatter defines metadata for a Jekyll-based page about the Vega project's code of conduct. It specifies the layout, title, and permalink for the page.\nSOURCE: https://github.com/vega/vega/blob/main/docs/about/code-of-conduct.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: about\ntitle: Code of Conduct\npermalink: /about/code-of-conduct/index.html\n---\n```"
  }
]