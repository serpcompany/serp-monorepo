[
  {
    "owner": "bluesky-social",
    "repo": "indigo",
    "content": "TITLE: Installing Goat CLI Tool\nDESCRIPTION: Instructions for installing the goat CLI tool using Go toolchain or manual installation method.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/bluesky-social/indigo/cmd/goat@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bluesky-social/indigo\ngo build ./cmd/goat\nsudo cp goat /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Defining Feed Data Structures in Go\nDESCRIPTION: Defines the core data structures for representing social media feeds with optimization for data deduplication and flexible information retrieval. The structure allows for efficient storage of feed items, their associated records, and metadata about posts and actors.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/docs/feed-proposal.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Feed struct {\n  Items []FeedItem\n  Values map[Cid]Record\n  ItemInfos map[Uri]ItemInfo\n  ActorInfos map[Did]ActorInfo\n}\n\ntype FeedItem struct {\n  Uri string\n  Replies []Uri\n  ReplyTo Uri\n  RepostedBy Did\n}\n\ntype ItemInfo struct {\n  Cid Cid\n  Upvotes int\n  Reposts int\n  Replies int\n  Author Did\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Function Types in Golang\nDESCRIPTION: Core type definitions for different kinds of moderation rule functions, including identity, record, post, and profile rules. Each type receives a context parameter and handles different aspects of content moderation.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/automod/HOWTO_write_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype IdentityRuleFunc = func(c *AccountContext) error\ntype RecordRuleFunc = func(c *RecordContext) error\ntype PostRuleFunc = func(c *RecordContext, post *appbsky.FeedPost) error\ntype ProfileRuleFunc = func(c *RecordContext, profile *appbsky.ActorProfile) error\n```\n\n----------------------------------------\n\nTITLE: Testing Palomar Search Functionality via CLI\nDESCRIPTION: Commands to test Palomar's search functionality for posts and profiles from the command line, including a typeahead example.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/palomar search-post \"hello\"\ngo run ./cmd/palomar search-profile \"hello\"\ngo run ./cmd/palomar search-profile -typeahead \"h\"\n\nFor more commands and args:\n\ngo run ./cmd/palomar --help\n```\n\n----------------------------------------\n\nTITLE: SQLite Schema and Queries for Block Storage\nDESCRIPTION: SQL schema and operations for SQLiteStore implementation. Includes table creation with indexes, and essential queries for inserting, selecting, and deleting blocks. The schema stores user blocks with CID, revision, root, and block data.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/carstore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS blocks (uid int, cid blob, rev varchar, root blob, block blob, PRIMARY KEY(uid,cid))\nCREATE INDEX IF NOT EXISTS blocx_by_rev ON blocks (uid, rev DESC)\n\nINSERT INTO blocks (uid, cid, rev, root, block) VALUES (?, ?, ?, ?, ?) ON CONFLICT (uid,cid) DO UPDATE SET rev=excluded.rev, root=excluded.root, block=excluded.block\n\nSELECT rev, root FROM blocks WHERE uid = ? ORDER BY rev DESC LIMIT 1\n\nSELECT cid,rev,root,block FROM blocks WHERE uid = ? AND rev > ? ORDER BY rev DESC\n\nDELETE FROM blocks WHERE uid = ?\n\nSELECT rev, root FROM blocks WHERE uid = ? AND cid = ? LIMIT 1\n\nSELECT block FROM blocks WHERE uid = ? AND cid = ? LIMIT 1\n\nSELECT length(block) FROM blocks WHERE uid = ? AND cid = ? LIMIT 1\n```\n\n----------------------------------------\n\nTITLE: PLC Operations\nDESCRIPTION: Commands for working with PLC records including history viewing, snapshot creation, and monitoring.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ goat plc history atproto.com\n[...]\n\n$ goat plc dump | pv -l | gzip > plc_snapshot.json.gz\n[...]\n\n$ goat plc dump --cursor now --tail\n[...]\n```\n\n----------------------------------------\n\nTITLE: Full-Text Search Query\nDESCRIPTION: Example of a full-text query string search with field boosting and various search parameters\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.opensearch.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"blood\",\n      \"analyzer\": \"textIcuSearch\",\n      \"default_operator\": \"AND\",\n      \"analyze_wildcard\": true,\n      \"lenient\": true,\n      \"fields\": [\"handle^5\", \"text\"]\n    }\n  },\n  \"size\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Firehose Stream Processing\nDESCRIPTION: Commands for subscribing to and processing the repo commit stream from a Relay.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# possible handle updates\n$ goat firehose --account-events | jq .payload.handle\n[...]\n\n# text of posts (empty lines for post-deletions)\n$ goat firehose - app.bsky.feed.post --ops | jq .record.text\n[...]\n\n# sample ratio of languages in current posts\n$ goat firehose --ops -c app.bsky.feed.post | head -n100 | jq .record.langs[0] -c | sort | uniq -c | sort -nr\n     51 \"en\"\n     33 \"ja\"\n      7 null\n      3 \"pt\"\n      2 \"ko\"\n      1 \"th\"\n      1 \"id\"\n      1 \"es\"\n      1 \"am\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Access Token JWT for Bluesky Social Authentication\nDESCRIPTION: Defines the JSON Web Token (JWT) structure for the access token used in Bluesky Social authentication. It includes the scope, subject (user's DID), issued at time, and expiration time.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/docs/auth.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"scope\": \"com.atproto.access\",\n\"sub\": \"<the users DID>\",\n\"iat\": \"the current time, in unix epoch seconds\",\n\"exp\": \"the expiry date, usually around an hour, but at least 15 minutes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running OpenSearch with Docker for Palomar Development\nDESCRIPTION: Commands to build and run an ephemeral OpenSearch instance for local development with SSL disabled and required plugins installed.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f Dockerfile.opensearch . -t opensearch-palomar\n\n# in any non-development system, obviously change this default password\ndocker run -p 9200:9200 -p 9600:9600 -e \"discovery.type=single-node\" -e \"plugins.security.disabled=true\" -e OPENSEARCH_INITIAL_ADMIN_PASSWORD=0penSearch-Pal0mar opensearch-palomar\n```\n\n----------------------------------------\n\nTITLE: Structuring Refresh Token JWT for Bluesky Social Authentication\nDESCRIPTION: Defines the JSON Web Token (JWT) structure for the refresh token used in Bluesky Social authentication. It includes the scope, subject (user's DID), issued at time, expiration time, and a unique identifier for the token.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/docs/auth.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"scope\": \"com.atproto.refresh\",\n\"sub\": \"<the users DID>\",\n\"iat\": \"the current time, in unix epoch seconds\",\n\"exp\": \"the expiry date, usually around a week, must be significantly longer than the access token\",\n\"jti\": \"a unique identifier for this token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Test Commands\nDESCRIPTION: Basic Makefile commands for building, testing, formatting and linting the codebase using Go toolchain.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: makefile\nCODE:\n```\nmake build\nmake test\nmake fmt\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Running Rainbow Service with Help Option\nDESCRIPTION: This command runs the Rainbow service directly from the source code, displaying the available configuration options and help information.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/rainbow/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd/rainbow --help\n```\n\n----------------------------------------\n\nTITLE: Implementing GTUBE Spam Detection Rule in Go for Bluesky Social Posts\nDESCRIPTION: This function implements a simple spam detection rule for Bluesky Social posts. It checks if the post text contains the GTUBE (Generic Test for Unsolicited Bulk Email) string, which is commonly used for testing spam filters. If found, the post is labeled as spam.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/automod/HOWTO_write_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// the GTUBE string is a special value historically used to test email spam filtering behavior\nvar gtubeString = \"XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X\"\n\nfunc GtubePostRule(c *automod.RecordContext, post *appbsky.FeedPost) error {\n\tif strings.Contains(post.Text, gtubeString) {\n\t\tc.AddRecordLabel(\"spam\")\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Account Data\nDESCRIPTION: Commands for creating a public snapshot of an account and downloading associated blobs.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ goat repo export jay.bsky.team\ndownloading from https://morel.us-east.host.bsky.network to: jay.bsky.team.20240811183155.car\n\n$ downloading blobs to: jay.bsky.team_blobs\njay.bsky.team_blobs/bafkreia2x4faux5y7v7v54yl5ebkbaek7z7nhmsd4cooubz3yj4zox34cq\tdownloaded\njay.bsky.team_blobs/bafkreia3qgbww7odprmysd6jcyxoh5sczkwoxinnmzpsp73gs623fqfm3a\tdownloaded\njay.bsky.team_blobs/bafkreia3rgnywdrysy65vid42ulyno2cybxhxrn3ragm7cw3smmsxzvbs4\tdownloaded\n```\n\n----------------------------------------\n\nTITLE: Managing Index Operations\nDESCRIPTION: Commands for index management including deletion, creation, and single object operations\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.opensearch.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttp delete :9200/palomar_post\nhttp delete :9200/palomar_profile\nhttp put :9200/palomar_post < post_schema.json\nhttp put :9200/palomar_profile < profile_schema.json\n\nhead -n1 examples.json | http post :9200/palomar_post/_doc/0\nhttp get :9200/palomar_post/_doc/0\n\nesbulk -verbose -id ident -index palomar_post -type _doc examples.json\n```\n\n----------------------------------------\n\nTITLE: Posting to Bluesky\nDESCRIPTION: Simple command for posting content to Bluesky (requires account login).\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ goat bsky post \"hello from goat\"\n```\n\n----------------------------------------\n\nTITLE: Administrative API Request Examples\nDESCRIPTION: Curl commands demonstrating how to interact with the relay's admin API endpoints using authentication.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRELAY_ADMIN_PASSWORD=$(openssl rand --hex 16)\nbigsky  --api-listen :2470 --admin-key ${RELAY_ADMIN_PASSWORD} ...\n\ncurl -H 'Authorization: Bearer '${RELAY_ADMIN_PASSWORD} -H 'Content-Type: application/x-www-form-urlencoded' --data '' http://127.0.0.1:2470/admin/repo/compactAll\n```\n\n----------------------------------------\n\nTITLE: Fetching Network Records\nDESCRIPTION: Example of fetching a specific record from the network as JSON.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ goat get at://dril.bsky.social/app.bsky.feed.post/3kkreaz3amd27\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$type\": \"app.bsky.feed.post\",\n  \"createdAt\": \"2024-02-06T18:15:19.802Z\",\n  \"langs\": [\n    \"en\"\n  ],\n  \"text\": \"I do not Fucking recall them asking the blue sky elders permission to open registration to commoners .\"\n}\n```\n\n----------------------------------------\n\nTITLE: PDS List Response Schema\nDESCRIPTION: JSON schema for the /admin/pds/list endpoint response showing PDS server status and metrics.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"Host\": string,\n  \"Did\": string,\n  \"SSL\": bool,\n  \"Cursor\": int,\n  \"Registered\": bool,\n  \"Blocked\": bool,\n  \"RateLimit\": float,\n  \"CrawlRateLimit\": float,\n  \"RepoCount\": int,\n  \"RepoLimit\": int,\n  \"HourlyEventLimit\": int,\n  \"DailyEventLimit\": int,\n\n  \"HasActiveConnection\": bool,\n  \"EventsSeenSinceStartup\": int,\n  \"PerSecondEventRate\": {\"Max\": float, \"Window\": float seconds},\n  \"PerHourEventRate\": {\"Max\": float, \"Window\": float seconds},\n  \"PerDayEventRate\": {\"Max\": float, \"Window\": float seconds},\n  \"CrawlRate\": {\"Max\": float, \"Window\": float seconds},\n  \"UserCount\": int,\n}, ...]\n```\n\n----------------------------------------\n\nTITLE: Real-World DID Examples in Plaintext\nDESCRIPTION: Examples of real-world DID (Decentralized Identifier) formats for various DID methods. Includes examples for onion, example, plc, web, and key DID methods that might be used in actual implementations within the Indigo project.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/did_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:onion:2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid\ndid:example:123456789abcdefghi\ndid:plc:7iza6de2dwap2sbkpav7c6c6\ndid:web:example.com\ndid:web:localhost%3A1234\ndid:key:zQ3shZc2QzApp2oymGvQbzP8eKheVshBHbU4ZYjeXqwSKEn6N\ndid:ethr:0xb9c5714089478a327f09197987f16f9e5d936e8a\n```\n\n----------------------------------------\n\nTITLE: Resolving Account Identity\nDESCRIPTION: Example of resolving an account's identity in the AT protocol network with JSON output.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ goat resolve wyden.senate.gov\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"did:plc:ydtsvzzsl6nlfkmnuooeqcmc\",\n  \"alsoKnownAs\": [\n    \"at://wyden.senate.gov\"\n  ],\n  \"verificationMethod\": [\n    {\n      \"id\": \"did:plc:ydtsvzzsl6nlfkmnuooeqcmc#atproto\",\n      \"type\": \"Multikey\",\n      \"controller\": \"did:plc:ydtsvzzsl6nlfkmnuooeqcmc\",\n      \"publicKeyMultibase\": \"zQ3shuMW7q4KBdsFcdvebGi2EVv8KcqS24tF9Pg7Wh5NLB2NM\"\n    }\n  ],\n  \"service\": [\n    {\n      \"id\": \"#atproto_pds\",\n      \"type\": \"AtprotoPersonalDataServer\",\n      \"serviceEndpoint\": \"https://shimeji.us-east.host.bsky.network\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Repository Listing by Collection in ATProto Network\nDESCRIPTION: An example of using the com.atproto.sync.listReposByCollection API endpoint to retrieve DIDs that have specific collection data. The response includes a list of DIDs and a pagination cursor.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/collectiondir/README.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /xrpc/com.atproto.sync.listReposByCollection?collection=com.atproto.sync.listReposByCollection?collection=com.atproto.lexicon.schema&limit=3\n\n{\n    \"repos\": [\n        { \"did\": \"did:plc:4sm3vprfyl55ui3yhjd7w4po\" },\n        { \"did\": \"did:plc:xhkqwjmxuo65vwbwuiz53qor\" },\n        { \"did\": \"did:plc:w3aonw33w3mz3mwws34x5of6\" }\n    ],\n    \"cursor\": \"QQAAAEkAAAGVgFFLb2RpZDpwbGM6dzNhb253MzN3M216M213d3MzNHg1b2Y2AA==\"\n}\n```\n\n----------------------------------------\n\nTITLE: IPFS CID Examples from Documentation and Custom Sources\nDESCRIPTION: A collection of IPFS Content Identifiers (CIDs) from official IPFS documentation, GitHub repositories, and custom examples. Includes both CIDv0 (starting with 'Qm') and CIDv1 (starting with 'baf' or 'z') formats that are used for content addressing in IPFS.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/cid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# examples from https://docs.ipfs.tech/concepts/content-addressing\nbafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\n\n# https://github.com/ipfs-shipyard/is-ipfs/blob/master/test/test-cid.spec.ts\nzdj7WWeQ43G6JJvLWQWZpyHuAMq6uYWRjkBXFad11vE2LHhQ7\nbafybeie5gq4jxvzmsym6hjlwxej4rwdoxt7wadqvmmwbqi7r27fclha2va\n\n# more contrived examples\nmBcDxtdWx0aWhhc2g+\nz7x3CtScH765HvShXT\nzdj7WhuEjrB52m1BisYCtmjH1hSKa7yZ3jEZ9JcXaFRD51wVz\n7134036155352661643226414134664076\nf017012202c5f688262e0ece8569aa6f94d60aad55ca8d9d83734e4a7430d0cff6588ec2b\n```\n\n----------------------------------------\n\nTITLE: Analytics Endpoint for Collection Statistics\nDESCRIPTION: Documentation for the listCollections endpoint that returns statistical data about collections in the ATProto network. It provides approximate counts of DIDs implementing each collection with options for filtering and pagination.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/collectiondir/README.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n/v1/listCollections?c={}&cursor={}&limit={50<=limit<=1000}\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Server for Reverse Proxy and SSL\nDESCRIPTION: Caddyfile configuration for setting up a reverse proxy to the Astrolabe server with automatic SSL certificate management using Let's Encrypt. This setup enables HTTPS access to the Astrolabe server.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/astrolabe/README.md#2025-04-22_snippet_1\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n  on_demand_tls {\n    interval 1h\n    burst 8\n  }\n}\n\n:443 {\n  reverse_proxy localhost:8400\n  tls YOUREMAIL@example.com {\n    on_demand\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consumer List Response Schema\nDESCRIPTION: JSON schema for the /admin/consumers/list endpoint response showing active firehose consumers.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"id\": int,\n  \"remote_addr\": string,\n  \"user_agent\": string,\n  \"events_consumed\": int,\n  \"connected_at\": time,\n}, ...]\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Relay\nDESCRIPTION: Commands for building and running the bigsky relay service in development mode with environment configuration.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run-dev-relay\n\nRELAY_ADMIN_KEY=localdev go run ./cmd/bigsky/ --help\n```\n\n----------------------------------------\n\nTITLE: Docker Container Operations\nDESCRIPTION: Commands for pulling and running relay Docker containers from GitHub container registry\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/relay/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/bluesky-social/indigo:relay-fd66f93ce1412a3678a1dd3e6d53320b725978a6\ndocker run ghcr.io/bluesky-social/indigo:relay-fd66f93ce1412a3678a1dd3e6d53320b725978a6\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Proxying to Athome\nDESCRIPTION: Nginx configuration snippet that demonstrates how to proxy requests from the /bsky path to an athome service while preserving headers for proper forwarding.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/athome/README.md#2025-04-22_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /bsky {\n    // in theory https:// should work, on default port?\n    proxy_pass      http://athome.example.com:8200;\n    proxy_set_header    X-Real-IP $remote_addr;\n    proxy_set_header    Host      $http_host;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Setup\nDESCRIPTION: SQL commands for setting up PostgreSQL database and user privileges for relay operation\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/relay/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE relay;\n\nCREATE USER ${username} WITH PASSWORD '${password}';\nGRANT ALL PRIVILEGES ON DATABASE relay TO ${username};\n```\n\n----------------------------------------\n\nTITLE: Running Fakermaker for Data Generation\nDESCRIPTION: Series of commands to use the fakermaker tool for generating and injecting test data into the local Bluesky ecosystem.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir data/fakermaker/\nexport GOLOG_LOG_LEVEL=info\ngo run ./cmd/fakermaker/ gen-accounts > data/fakermaker/accounts.json\n\ngo run ./cmd/fakermaker/ gen-profiles\n\ngo run ./cmd/fakermaker/ gen-graph\n\ngo run ./cmd/fakermaker/ gen-posts\n\ngo run ./cmd/fakermaker/ gen-interactions\n\ngo run ./cmd/fakermaker/ run-browsing\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Database Setup\nDESCRIPTION: SQL commands for creating necessary databases and user permissions for the relay service.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE bgs;\nCREATE DATABASE carstore;\n\nCREATE USER ${username} WITH PASSWORD '${password}';\nGRANT ALL PRIVILEGES ON DATABASE bgs TO ${username};\nGRANT ALL PRIVILEGES ON DATABASE carstore TO ${username};\n```\n\n----------------------------------------\n\nTITLE: PDS Resync Status Response Schema\nDESCRIPTION: JSON schema for the /admin/pds/resync GET endpoint response showing resync progress and status.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"resync\": {\n  \"pds\": {\n    \"Host\": string,\n    \"Did\": string,\n    \"SSL\": bool,\n    \"Cursor\": int,\n    \"Registered\": bool,\n    \"Blocked\": bool,\n    \"RateLimit\": float,\n    \"CrawlRateLimit\": float,\n    \"RepoCount\": int,\n    \"RepoLimit\": int,\n    \"HourlyEventLimit\": int,\n    \"DailyEventLimit\": int,\n  },\n  \"numRepoPages\": int,\n  \"numRepos\": int,\n  \"numReposChecked\": int,\n  \"numReposToResync\": int,\n  \"status\": string,\n  \"statusChangedAt\": time,\n}}\n```\n\n----------------------------------------\n\nTITLE: Managing Index Aliases\nDESCRIPTION: JSON configuration for atomic index alias updates and management\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.opensearch.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"actions\": [\n        { \"remove\": { \"index\": \"palomar_post_v05\", \"alias\": \"palomar_post\" }},\n        { \"add\":    { \"index\": \"palomar_post_v06\", \"alias\": \"palomar_post\" }}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: PDS Limits Update Request Schema\nDESCRIPTION: JSON schema for the /admin/pds/changeLimits POST endpoint request body to update PDS rate limits.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": string,\n  \"per_second\": int,\n  \"per_hour\": int,\n  \"per_day\": int,\n  \"crawl_rate\": int,\n  \"repo_limit\": int,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Palomar Service in Development Mode\nDESCRIPTION: Make commands to run Palomar in development mode, either as a combined indexing and search service or as a readonly search service.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run combined indexing and search service\nmake run-dev-search\n\n# run just the search service\nREADONLY=true make run-dev-search\n```\n\n----------------------------------------\n\nTITLE: Installing Elasticsearch Plugins\nDESCRIPTION: Commands for installing ICU and Kuromoji analysis plugins for Elasticsearch 7.10\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.opensearch.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu\nsudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-kuromoji\nsudo service elasticsearch restart\n```\n\n----------------------------------------\n\nTITLE: Supported ISO 8601 DateTime Formats\nDESCRIPTION: Additional datetime formats that are supported by the system, including timezone offsets and varying precisions. These formats include examples with explicit timezone offsets and special cases.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/datetime_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.1235678912345Z\n1985-04-12T23:20:50.100Z\n1985-04-12T23:20:50Z\n1985-04-12T23:20:50.0Z\n1985-04-12T23:20:50.123+00:00\n1985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123+07:00\n1985-04-12T23:20:50.123+01:45\n0985-04-12T23:20:50.123-07:00\n1985-04-12T23:20:50.123-07:00\n0123-01-01T00:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Running Fakermaker Commands in Indigo\nDESCRIPTION: A series of shell commands to run various fakermaker operations, including generating accounts, profiles, follow graphs, posts, interactions, and browsing simulations.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/fakermaker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p data/fakermaker\nexport GOLOG_LOG_LEVEL=info\n\n# setup and create initial accounts; 100 by default\n# supply --use-invite-code and/or --domain-suffix SUFFIX as needed\ngo run ./cmd/fakermaker/ gen-accounts > data/fakermaker/accounts.json\n\n# create or update profiles for all the accounts\ngo run ./cmd/fakermaker/ gen-profiles\n\n# create follow graph between accounts\ngo run ./cmd/fakermaker/ gen-graph\n\n# create posts, including mentions and image uploads\ngo run ./cmd/fakermaker/ gen-posts\n\n# create more interactions, such as likes, between accounts\ngo run ./cmd/fakermaker/ gen-interactions\n\n# lastly, read-only queries, including timelines, notifications, and post threads\ngo run ./cmd/fakermaker/ run-browsing\n```\n\n----------------------------------------\n\nTITLE: Generating Server Stubs and Handlers in Go\nDESCRIPTION: Command for generating server stubs and handlers for the PDS (Personal Data Server) component using the lexgen tool.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tmppds\ngo run ./cmd/lexgen/ --package pds --gen-server --types-import com.atproto:github.com/bluesky-social/indigo/api/atproto --types-import app.bsky:github.com/bluesky-social/indigo/api/bsky --outdir tmppds --gen-handlers ../atproto/lexicons\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for Fakermaker in Indigo\nDESCRIPTION: Sets up the environment variables for connecting to a local atproto Typescript PDS implementation in development mode.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/fakermaker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nATP_PDS_HOST=http://localhost:2583\nATP_AUTH_HANDLE=\"admin.test\"\nATP_AUTH_PASSWORD=\"admin\"\nATP_AUTH_ADMIN_PASSWORD=\"admin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Slack Notification Bot for Moderation Reports (Bash)\nDESCRIPTION: This snippet demonstrates how to set up environment variables for Slack webhook URL and authentication, and how to run the 'beemo' bot for notifying about moderation reports. It includes options for using a password manager or directly setting the admin token.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/beemo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# configure a slack webhook\nexport SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T028K87/B04NBDB/oWbsHasdf23r2d\n\n# example pulling admin token out of `pass` password manager\nexport ATP_AUTH_ADMIN_PASSWORD=`pass bsky/pds-admin-staging | head -n1`\n\n# example just setting admin token directly\nexport ATP_AUTH_ADMIN_PASSWORD=\"someinsecurething123\"\n\n# run the bot\nGOLOG_LOG_LEVEL=debug go run ./cmd/beemo/ --pds https://pds.staging.example.com --auth bsky.auth notify-reports\n```\n\n----------------------------------------\n\nTITLE: Collection Statistics JSON Response Format\nDESCRIPTION: Example JSON response from the listCollections endpoint showing collection names mapped to approximate counts of DIDs implementing each collection. Includes a cursor for pagination.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/collectiondir/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"collections\":{\"app.bsky.feed.post\": 123456789, \"some collection\": 42},\n\"cursor\":\"opaque text\"}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Services\nDESCRIPTION: Example command for running a specific service (bigsky) using Go run command.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run ./cmd/bigsky\n```\n\n----------------------------------------\n\nTITLE: Running Sonar with Docker\nDESCRIPTION: Command to start a Sonar instance using Docker, connecting to the Bluesky-operated Relay firehose and exposing metrics on localhost.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/sonar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake sonar-up\n```\n\n----------------------------------------\n\nTITLE: Using Websocat for Debugging WebSocket Streams\nDESCRIPTION: Examples of using the websocat tool to debug WebSocket streams from PDS and Relay components.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# consume repo events from PDS\nwebsocat ws://localhost:4989/events\n\n# consume repo events from Relay\nwebsocat ws://localhost:2470/events\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Integration Tests in Indigo\nDESCRIPTION: Commands for running Docker Compose services, executing integration tests, and cleaning up volumes for the Indigo project.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/fakermaker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up\n\n# from top-level directory of this repo\nmake test-interop\n\n# If you need to wipe volumes (all databases):\ndocker-compose down -v\n```\n\n----------------------------------------\n\nTITLE: Running Lexicon Code Generation in Go\nDESCRIPTION: Commands for generating code from Lexicon JSON files using the lexgen tool. This process creates Go packages for different components of the atproto ecosystem.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/lexgen/ --package bsky --prefix app.bsky --outdir api/bsky ../atproto/lexicons/app/bsky/\ngo run ./cmd/lexgen/ --package atproto --prefix com.atproto --outdir api/atproto ../atproto/lexicons/com/atproto/\n```\n\n----------------------------------------\n\nTITLE: Building and Running Astrolabe Server in Go\nDESCRIPTION: Instructions for building the Astrolabe application from source and running it as a server. The server will listen on port 8400 by default.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/astrolabe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build ./cmd/astrolabe\n\n# will listen on :8400 by default\n./astrolabe serve\n```\n\n----------------------------------------\n\nTITLE: Docker Container Management\nDESCRIPTION: Commands for pulling and running the bigsky relay service Docker container from GitHub Container Registry.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/bigsky/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/bluesky-social/indigo:bigsky-fd66f93ce1412a3678a1dd3e6d53320b725978a6\ndocker run ghcr.io/bluesky-social/indigo:bigsky-fd66f93ce1412a3678a1dd3e6d53320b725978a6\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for Go Application\nDESCRIPTION: Example of setting the log level for a Go application (PDS in this case) using an environment variable.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGOLOG_LOG_LEVEL=info go run ./cmd/pds\n```\n\n----------------------------------------\n\nTITLE: Building and Running Athome in Go\nDESCRIPTION: Commands to build and run the athome service. The service will listen on port 8200 by default and serve Bluesky profile and feed data.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/athome/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build ./cmd/athome\n\n# will listen on :8200 by default\n./athome serve\n```\n\n----------------------------------------\n\nTITLE: Inspecting SQLite Database\nDESCRIPTION: Command to inspect the SQLite database schema when the daemon is not running\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/relay/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 data/relay/relay.sqlite\n[...]\nsqlite> .schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy for HTTPS with Automatic SSL Certificates\nDESCRIPTION: Caddy configuration file that sets up reverse proxy to the athome service with automatic SSL certificate registration from Let's Encrypt using on-demand TLS.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/athome/README.md#2025-04-22_snippet_1\n\nLANGUAGE: caddy\nCODE:\n```\n{\n  on_demand_tls {\n    interval 1h\n    burst 8\n  }\n}\n\n:443 {\n  reverse_proxy localhost:8200\n  tls YOUREMAIL@example.com {\n    on_demand\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid and Invalid IPFS CIDs and URIs\nDESCRIPTION: This snippet shows examples of valid domain names, URIs, and IPFS CIDs (Content Identifiers). It includes a valid CIDv1, examples with whitespace, and an unsupported CIDv0. The content is useful for testing CID validation functions.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/cid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com\nhttps://example.com\ncid:bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\n.\n12345\n\n# whitespace\n bafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\nbafybeigdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi \nbafybe igdyrzt5sfp7udm7hu76uh7y26nf3efuylqabf3oclgtqy55fbzdi\n\n# old CIDv0 not supported\nQmbWqxBEKC3P8tqsKc98xmWNzrzDtRLMiMPL8wBuTGsMnR\n\n# https://github.com/ipfs-shipyard/is-ipfs/blob/master/test/test-cid.spec.ts\nnoop\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request to Relay in Bash\nDESCRIPTION: Command to send an HTTP POST request to the Relay service, instructing it to consume events from a PDS.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttp --json post localhost:2470/add-target host=\"localhost:4989\"\n```\n\n----------------------------------------\n\nTITLE: Context API Method Signatures\nDESCRIPTION: Method signatures for the Context API showing the available operations for counters, sets, and moderation actions. These methods are used within rule implementations to track state and apply moderation effects.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/automod/HOWTO_write_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nc.GetCount(<namespace-string>, <value-string>, <time-period>)\nc.Increment(<namespace-string>, <value-string>)\nc.IncrementPeriod(<namespace-string>, <value-string>, <time-period>)\nc.GetCountDistinct(<namespace>, <bucket>, <time-period>)\nc.IncrementDistinct(<namespace>, <bucket>, <value>)\nc.InSet(<set-name>, <value>)\nc.AddAccountFlag(val string)\nc.AddAccountLabel(val string)\nc.ReportAccount(reason string, comment string)\nc.TakedownAccount()\n```\n\n----------------------------------------\n\nTITLE: Using Gosky CLI for Account Creation\nDESCRIPTION: Example of using the gosky command-line tool to create a session for a user account on a local PDS.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/gosky/ --pds-host http://localhost:2583 account create-session alice.test hunter2 > bsky.auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Crawler Rules in robots.txt for Bluesky Social Indigo\nDESCRIPTION: Standard robots.txt configuration that allows all user agents to crawl the entire domain with a note about rate limiting through HTTP 429 status codes. It also suggests using the atproto.com API for bulk or automated crawling.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/athome/static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# Hello Friends!\n# If you are considering bulk or automated crawling, you may want to look in\n# to our protocol (API), including a firehose of updates. See: https://atproto.com/\n\n# By default, may crawl anything on this domain. HTTP 429 (\"backoff\") status\n# codes are used for rate-limiting. Up to a handful concurrent requests should\n# be ok.\nUser-Agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSearch Plugins\nDESCRIPTION: Commands for installing required ICU and Kuromoji analysis plugins for OpenSearch 2.13+\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/palomar/README.opensearch.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo /usr/share/opensearch/bin/opensearch-plugin install analysis-icu\nsudo /usr/share/opensearch/bin/opensearch-plugin install analysis-kuromoji\nsudo service opensearch restart\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Rules for Bluesky Social\nDESCRIPTION: Defines crawling permissions for web robots, suggesting API usage for bulk operations while allowing general access with rate limiting through HTTP 429 responses. Permits concurrent requests in moderation.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/astrolabe/static/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# Hello Friends!\n# If you are considering bulk or automated crawling, you may want to look in\n# to our protocol (API), including a firehose of updates. See: https://atproto.com/\n\n# By default, may crawl anything on this domain. HTTP 429 (\"backoff\") status\n# codes are used for rate-limiting. Up to a handful concurrent requests should\n# be ok.\nUser-Agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Running Local Relay Development Build\nDESCRIPTION: Commands for building and running the relay locally in development mode\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/relay/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run-dev-relay\n```\n\n----------------------------------------\n\nTITLE: Building Rainbow Service in Go\nDESCRIPTION: This command builds the Rainbow service from the source code, creating an executable binary named 'rainbow' in the current directory.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/rainbow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build ./cmd/rainbow -o rainbow\n```\n\n----------------------------------------\n\nTITLE: Validating No Trailing Slashes in AT Protocol URIs\nDESCRIPTION: These examples test that AT Protocol URIs are not allowed to have trailing slashes, ensuring proper formatting.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://user.bsky.social\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post/record\n```\n\n----------------------------------------\n\nTITLE: Running Relay with Admin Configuration\nDESCRIPTION: Command to run the relay with admin password configuration and help flag\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/relay/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRELAY_ADMIN_PASSWORD=dummy go run ./cmd/relay/ --help\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Paths in AT Protocol URIs\nDESCRIPTION: This example tests that AT Protocol URIs enforce strict path structures, particularly for collection and record components.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/asdf123\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL for Local Development\nDESCRIPTION: Commands for creating a PostgreSQL user and databases for local PLC and PDS development.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/HACKING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres createuser -P -s bsky\n\nsudo -u postgres createdb plc_dev -O bsky\nsudo -u postgres createdb pds_dev -O bsky\n```\n\n----------------------------------------\n\nTITLE: Handling AT URI Edge Cases\nDESCRIPTION: Examples of edge cases with specified behaviors, including double slashes, extra path segments, and non-standard path formats that may have special handling in the specification.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n# has specified behavior on edge cases\nat://user.bsky.social//\nat://user.bsky.social//com.atproto.feed.post\nat://user.bsky.social/com.atproto.feed.post//\nat://did:plc:asdf123/com.atproto.feed.post/asdf123/more/more',\nat://did:plc:asdf123/short/stuff\nat://did:plc:asdf123/12345\n```\n\n----------------------------------------\n\nTITLE: Basic Goat CLI Usage Commands\nDESCRIPTION: Basic help commands to get started with the goat CLI tool.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoat --help\ngoat bsky -h\ngoat help bsky\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Relay Data\nDESCRIPTION: Command to remove all local relay data\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/relay/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ./data/relay/*\n```\n\n----------------------------------------\n\nTITLE: Testing URI Length Constraints\nDESCRIPTION: Example of an AT URI that exceeds length constraints with a very long path segment of repeating 'o' characters, which would typically be used to test length validation.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n# too long: 'at://did:plc:asdf123/com.atproto.feed.post/' + 'o'.repeat(8200)\nat://did:plc:asdf123/com.atproto.feed.\n```\n\n----------------------------------------\n\nTITLE: Listing Record Collections\nDESCRIPTION: Command to list record collection types for a specific account.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ goat ls -c dril.bsky.social\napp.bsky.actor.profile\napp.bsky.feed.post\napp.bsky.feed.repost\napp.bsky.graph.follow\nchat.bsky.actor.declaration\n```\n\n----------------------------------------\n\nTITLE: Valid NSID Examples\nDESCRIPTION: This section provides examples of valid NSIDs, including standard domain-like formats, internationalized domain names, and various segment combinations.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/nsid_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.example.fooBar\ncom.example.fooBarV2\nnet.users.bob.ping\na.b.c\nm.xn--masekowski-d0b.pl\none.two.three\none.two.three.four-and.FiVe\none.2.three\na-0.b-1.c\na0.b1.cc\ncn.8.lex.stuff\ntest.12345.record\na01.thing.record\na.0.c\nxn--fiqs8s.xn--fiqa61au8b7zsevnm8ak20mc4a87e.record.two\na0.b1.c3\ncom.example.f00\n```\n\n----------------------------------------\n\nTITLE: Syntax Verification and TID Generation\nDESCRIPTION: Commands for verifying syntax and generating/inspecting TIDs (Transaction IDs).\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/goat/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ goat syntax handle check xn--fiqa61au8b7zsevnm8ak20mc4a87e.xn--fiqs8s\nvalid\n\n$ goat syntax rkey check dHJ1ZQ==\nerror: recordkey syntax didn't validate via regex\n\n$ goat syntax tid inspect 3kzifvcppte22\nTimestamp (UTC): 2024-08-12T02:08:03.29Z\nTimestamp (Local): 2024-08-11T19:08:03-07:00\nClockID: 0\nuint64: 0x187dcbda2b5ca800\n```\n\n----------------------------------------\n\nTITLE: Numeric-Starting Segment NSID Examples\nDESCRIPTION: This section shows that NSIDs are allowed to have segments starting with numeric characters, similar to domain name rules. It includes examples of valid NSIDs with numeric-starting segments.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/nsid_syntax_valid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\norg.4chan.lex.getThing\ncn.8.lex.stuff\nonion.2gzyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Server\nDESCRIPTION: Command to start the Caddy server using the configuration defined in the Caddyfile, which will handle HTTPS and proxy requests to the athome service.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/athome/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Identifying Invalid Domain Names and NSIDs in Plaintext\nDESCRIPTION: This snippet provides examples of invalid domain names and NSIDs, including those with wildcards, emojis, invalid characters, and incorrect formats. It serves as a reference for implementing validation checks.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/nsid_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# invalid examples\ncom.example.foo.*\ncom.example.foo.blah*\ncom.example.foo.*blah\ncom.exa💩ple.thing\na-0.b-1.c-3\na-0.b-1.c-o\n1.0.0.127.record\n0two.example.foo\nexample.com\ncom.example\na.\n.one.two.three\none.two.three \none.two..three\none .two.three\n one.two.three\ncom.exa💩ple.thing\ncom.atproto.feed.p@st\ncom.atproto.feed.p_st\ncom.atproto.feed.p*st\ncom.atproto.feed.po#t\ncom.atproto.feed.p!ot\ncom.example-.foo\ncom.example.fooBar.2\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Server\nDESCRIPTION: Command to start the Caddy server using the configured Caddyfile. This will set up the reverse proxy and handle SSL certificate management.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/cmd/astrolabe/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Valid DID Format Examples - Plaintext\nDESCRIPTION: Examples of valid Decentralized Identifier (DID) formats showing allowed method names and identifier values including letters, numbers and hyphens.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/atidentifier_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# allows valid DIDs\ndid:method:val\ndid:method:VAL\ndid:method:val123\ndid:method:123\ndid:method:val-two\n```\n\n----------------------------------------\n\nTITLE: Invalid DID Format Examples\nDESCRIPTION: Examples of malformed Decentralized Identifier (DID) formats showing incorrect syntax, missing components, and invalid characters.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/atidentifier_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndid\ndidmethodval\nmethod:did:val\ndid:method:\ndidmethod:val\ndid:methodval)\n:did:method:val\ndid:method:val:\ndid:method:val%\nDID:method:val\n```\n\n----------------------------------------\n\nTITLE: Other Invalid Identifier Examples\nDESCRIPTION: Additional examples of invalid identifiers including email addresses and malformed handle formats.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/atidentifier_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nemail@example.com\n@handle@example.com\n@handle\nblah\n```\n\n----------------------------------------\n\nTITLE: Invalid Handle Examples\nDESCRIPTION: A collection of invalid handle formats that should throw errors during validation. These include handles with invalid characters, formatting issues, invalid segments, or other structural problems.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/handle_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# throws on invalid handles\ndid:thing.test\ndid:thing\njohn-.test\njohn.0\njohn.-\nxn--bcher-.tld\njohn..test\njo_hn.test\n-john.test\n.john.test\njo!hn.test\njo%hn.test\njo&hn.test\njo@hn.test\njo*hn.test\njo|hn.test\njo:hn.test\njo/hn.test\njohn💩.test\nbücher.test\njohn .test\njohn.test.\njohn\njohn.\n.john\njohn.test.\n.john.test\n john.test\njohn.test \njoh-.test\njohn.-est\njohn.tes-\n```\n\n----------------------------------------\n\nTITLE: Testing DID Format Variations in Plaintext\nDESCRIPTION: A collection of DID (Decentralized Identifier) format examples showing different variations of method-specific identifiers. These examples demonstrate various characters and patterns allowed in DID formats, including alphabetic, numeric, special characters, and length variations.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/did_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:method:val\ndid:method:VAL\ndid:method:val123\ndid:method:123\ndid:method:val-two\ndid:method:val_two\ndid:method:val.two\ndid:method:val:two\ndid:method:val%BB\ndid:method:vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\ndid:m:v\ndid:method::::val\ndid:method:-\ndid:method:-:_:.:%ab\ndid:method:.\ndid:method:_\ndid:method::.\n```\n\n----------------------------------------\n\nTITLE: Tor Onion Address NSID Examples\nDESCRIPTION: These examples demonstrate that Tor onion addresses are allowed as valid NSIDs, showcasing the inclusion of .onion domains in the NSID format.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/nsid_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nonion.expyuzz4wqqyqhjn.spec.getThing\nonion.g2zyxa5ihm7nsggfxnu52rck2vv4rvmdlkiu3zzui5du4xyclen53wid.lex.deleteThing\n```\n\n----------------------------------------\n\nTITLE: Maximum Length Handle Examples\nDESCRIPTION: Examples of handles at the maximum allowed length. These test cases verify that validation correctly enforces length limits for both total handle length and individual segment length.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/handle_syntax_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# max over all handle: 'shoooort' + '.loooooooooooooooooooooooooong'.repeat(9) + '.test'\nshoooort.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.loooooooooooooooooooooooooong.test\n\n# max segment: 'short.' + 'o'.repeat(64) + '.test'\nshort.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.test\n```\n\n----------------------------------------\n\nTITLE: Dotless TLD Handle Examples\nDESCRIPTION: Examples of handles that consist only of a top-level domain without subdomains. These should throw validation errors as they are not considered valid handles.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/handle_syntax_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# throws on \"dotless\" TLD handles\norg\nai\ngg\nio\n```\n\n----------------------------------------\n\nTITLE: Validating Basic AT Protocol URI Structures\nDESCRIPTION: These examples test the basic structure of AT Protocol URIs, including DIDs, handles, and collection/record paths.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123\nat://user.bsky.social\nat://did:plc:asdf123/com.atproto.feed.post\nat://did:plc:asdf123/com.atproto.feed.post/record\n```\n\n----------------------------------------\n\nTITLE: Corner Case RFC Handle Examples\nDESCRIPTION: Test cases for corner cases in handle validation according to modern vs. old RFCs. These examples help verify that the validation follows the correct RFC specifications.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/handle_syntax_invalid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# correctly validates corner cases (modern vs. old RFCs)\ncn.8\nthing.0aa\nthing.0aa\n```\n\n----------------------------------------\n\nTITLE: Testing Permissive Record Keys in AT Protocol URIs\nDESCRIPTION: These examples demonstrate the permissive nature of record keys in AT Protocol URIs, allowing various characters and formats.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_valid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/asdf123\nat://did:plc:asdf123/com.atproto.feed.post/a\n\nat://did:plc:asdf123/com.atproto.feed.post/asdf-123\nat://did:abc:123\nat://did:abc:123/io.nsid.someFunc/record-key\n\nat://did:abc:123/io.nsid.someFunc/self.\nat://did:abc:123/io.nsid.someFunc/lang:\nat://did:abc:123/io.nsid.someFunc/:\nat://did:abc:123/io.nsid.someFunc/-\nat://did:abc:123/io.nsid.someFunc/_\nat://did:abc:123/io.nsid.someFunc/~\nat://did:abc:123/io.nsid.someFunc/...\nat://did:plc:asdf123/com.atproto.feed.postV2\n```\n\n----------------------------------------\n\nTITLE: Invalid Handle Format Examples\nDESCRIPTION: Examples of invalid handle formats including malformed DIDs, invalid characters, consecutive dots, and incorrect prefix/suffix patterns.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/atidentifier_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndid:thing.test\ndid:thing\njohn-.test\njohn.0\njohn.-\nxn--bcher-.tld\njohn..test\njo_hn.test\n```\n\n----------------------------------------\n\nTITLE: Preferred ISO 8601 DateTime Formats\nDESCRIPTION: Examples of preferred datetime format patterns with different millisecond precisions. These formats represent the standard recommended way of representing dates in the system.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/datetime_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.000Z\n2000-01-01T00:00:00.000Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.120Z\n1985-04-12T23:20:50.120000Z\n```\n\n----------------------------------------\n\nTITLE: DID Format Test Cases in Plaintext\nDESCRIPTION: A comprehensive set of test cases for DID format validation covering different syntax variations, special characters, casing, and length limits. Includes examples of both valid and invalid DID formats.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/did_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndid\ndidmethodval\nmethod:did:val\ndid:method:\ndidmethod:val\ndid:methodval)\n:did:method:val\ndid.method.val\ndid:method:val:\ndid:method:val%\nDID:method:val\ndid:METHOD:val\ndid:m123:val\ndid:method:val/two\ndid:method:val?two\ndid:method:val#two\ndid:method:val%\ndid:method:vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n```\n\n----------------------------------------\n\nTITLE: Precision Variations in DateTime Formats\nDESCRIPTION: Examples showing datetime formats with increasing precision from 1 to 12 digits in the fractional seconds portion. Demonstrates the range of precision supported in timestamp representations.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/datetime_syntax_valid.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-04-12T23:20:50.1Z\n1985-04-12T23:20:50.12Z\n1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.1234Z\n1985-04-12T23:20:50.12345Z\n1985-04-12T23:20:50.123456Z\n1985-04-12T23:20:50.1234567Z\n1985-04-12T23:20:50.12345678Z\n1985-04-12T23:20:50.123456789Z\n1985-04-12T23:20:50.1234567890Z\n1985-04-12T23:20:50.12345678901Z\n1985-04-12T23:20:50.123456789012Z\n```\n\n----------------------------------------\n\nTITLE: Additional Invalid Handle Examples\nDESCRIPTION: Additional examples of invalid handles from external sources. These provide more edge cases for testing handle validation, particularly with international characters and invalid formatting.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/handle_syntax_invalid.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# examples from stackoverflow   \n-notvalid.at-all\n-thing.com\nwww.masełkowski.pl.com\n```\n\n----------------------------------------\n\nTITLE: Invalid ISO 8601 Datetime Examples in Plaintext\nDESCRIPTION: A collection of ISO 8601 datetime strings that have correct syntax but invalid semantic values. Examples include month zero, day zero, month 13, hour 25, minute 99, and second 61, all of which would fail validation in a proper datetime parser.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/datetime_parse_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1985-00-12T23:20:50.123Z\n1985-04-00T23:20:50.123Z\n1985-13-12T23:20:50.123Z\n1985-04-12T25:20:50.123Z\n1985-04-12T23:99:50.123Z\n1985-04-12T23:20:61.123Z\n```\n\n----------------------------------------\n\nTITLE: IP Address Handle Examples\nDESCRIPTION: Examples of IP addresses that should not be allowed as handles. These include both IPv4 and IPv6 format addresses which should be rejected by handle validation.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/handle_syntax_invalid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# does not allow IP addresses as handles\n127.0.0.1\n192.168.0.142\nfe80::7325:8a97:c100:94b\n2600:3c03::f03c:9100:feb0:af1f\n```\n\n----------------------------------------\n\nTITLE: Validating ISO-8601 Datetime Format in Plaintext\nDESCRIPTION: This snippet presents a comprehensive set of test cases for validating ISO-8601 datetime format strings. It includes examples of subtle changes, formatting variations, and common errors to test parsing and validation logic.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/datetime_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# subtle changes to: 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123z\n01985-04-12T23:20:50.123Z\n985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.Z\n1985-04-32T23;20:50.123Z\n1985-04-32T23;20:50.123Z\n\n# en-dash and em-dash\n1985—04-32T23;20:50.123Z\n1985–04-32T23;20:50.123Z\n\n# whitespace\n 1985-04-12T23:20:50.123Z\n1985-04-12T23:20:50.123Z \n1985-04-12T 23:20:50.123Z\n\n# not enough zero padding\n1985-4-12T23:20:50.123Z\n1985-04-2T23:20:50.123Z\n1985-04-12T3:20:50.123Z\n1985-04-12T23:0:50.123Z\n1985-04-12T23:20:5.123Z\n\n# too much zero padding\n01985-04-12T23:20:50.123Z\n1985-004-12T23:20:50.123Z\n1985-04-012T23:20:50.123Z\n1985-04-12T023:20:50.123Z\n1985-04-12T23:020:50.123Z\n1985-04-12T23:20:050.123Z\n\n# strict capitalization (ISO-8601)\n1985-04-12t23:20:50.123Z\n1985-04-12T23:20:50.123z\n\n# RFC-3339, but not ISO-8601\n1985-04-12T23:20:50.123-00:00\n1985-04-12_23:20:50.123Z\n1985-04-12 23:20:50.123Z\n\n# ISO-8601, but weird\n1985-04-274T23:20:50.123Z\n\n# timezone is required\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50\n\n1985-04-12\n1985-04-12T23:20Z\n1985-04-12T23:20:5Z\n1985-04-12T23:20:50.123\n+001985-04-12T23:20:50.123Z\n23:20:50.123Z\n\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+00:0\n1985-04-12T23:20:50.123+0:00\n1985-04-12T23:20:50.123\n1985-04-12T23:20:50.123+0000\n1985-04-12T23:20:50.123+00\n1985-04-12T23:20:50.123+\n1985-04-12T23:20:50.123-\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NSID Length Checks\nDESCRIPTION: These examples show NSIDs that are likely too long and would fail validation checks. They illustrate the maximum length constraints for NSIDs.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/nsid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncom.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Test Cases for Bluesky Social Identifiers and Input Validation\nDESCRIPTION: A collection of test cases for various identifier formats, special characters, and input validation. Includes handles, spaces in text, special characters, and a base64 encoded string. Also demonstrates a string length test using repeated characters.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/recordkey_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# specs\nalpha/beta\n.\n..\n#extra\n@handle\nany space\nany+space\nnumber[3]\nnumber(3)\n\"quote\"\ndHJ1ZQ==\n\n# too long: 'o'.repeat(513)\nooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Valid Handle Format Examples - Plaintext\nDESCRIPTION: Examples of valid handle formats including domains, usernames with numbers, and hyphenated handles. Shows allowed character patterns and length restrictions.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/atidentifier_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# allows valid handles\nXX.LCS.MIT.EDU\njohn.test\njan.test\na234567890123456789.test\njohn2.test\njohn-john.test\n```\n\n----------------------------------------\n\nTITLE: Base32 Encoding Examples in Plaintext\nDESCRIPTION: This snippet shows examples of 13-digit base32 encoded values. The first two lines are comments indicating the length and character set, followed by four sample encoded values.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/tid_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# 13 digits\n# 234567abcdefghijklmnopqrstuvwxyz\n\n3jzfcijpj2z2a\n7777777777777\n3zzzzzzzzzzzz\n2222222222222\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AT Protocol URI Specification Basics\nDESCRIPTION: Examples showing valid and invalid AT URI formats according to spec basics, including authority checks, path formats, and character validation.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n# enforces spec basics\na://did:plc:asdf123\nat//did:plc:asdf123\nat:/a/did:plc:asdf123\nat:/did:plc:asdf123\nAT://did:plc:asdf123\nhttp://did:plc:asdf123\n://did:plc:asdf123\nat:did:plc:asdf123\nat:/did:plc:asdf123\nat:///did:plc:asdf123\nat://:/did:plc:asdf123\nat:/ /did:plc:asdf123\nat://did:plc:asdf123 \nat://did:plc:asdf123/ \n at://did:plc:asdf123\nat://did:plc:asdf123/com.atproto.feed.post \nat://did:plc:asdf123/com.atproto.feed.post# \nat://did:plc:asdf123/com.atproto.feed.post#/ \nat://did:plc:asdf123/com.atproto.feed.post#/frag \nat://did:plc:asdf123/com.atproto.feed.post#fr ag\n//did:plc:asdf123\nat://name\nat://name.0\nat://diD:plc:asdf123\nat://did:plc:asdf123/com.atproto.feed.p@st\nat://did:plc:asdf123/com.atproto.feed.p$st\nat://did:plc:asdf123/com.atproto.feed.p%st\nat://did:plc:asdf123/com.atproto.feed.p&st\nat://did:plc:asdf123/com.atproto.feed.p()t\nat://did:plc:asdf123/com.atproto.feed_post\nat://did:plc:asdf123/-com.atproto.feed.post\nat://did:plc:asdf@123/com.atproto.feed.post\nat://DID:plc:asdf123\nat://user.bsky.123\nat://bsky\nat://did:plc:\nat://did:plc:\nat://frag\n```\n\n----------------------------------------\n\nTITLE: Testing AT Protocol URI Fragment Handling\nDESCRIPTION: Test cases demonstrating fragment handling in AT Protocol URIs, showing that the protocol is permissive with fragments including multiple hash symbols and fragments within paths.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123#\nat://did:plc:asdf123##\n#at://did:plc:asdf123\nat://did:plc:asdf123#/asdf#/asdf\n```\n\n----------------------------------------\n\nTITLE: Generating Long URL with Python\nDESCRIPTION: Creates a long URL by concatenating a base URL with 5000 'x' characters. This is likely used for testing URL length handling capabilities.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/uri_syntax_valid.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"https://example.com/\" + 5000*\"x\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing No Trailing Slashes in AT URIs\nDESCRIPTION: Examples demonstrating enforcement of no trailing slashes in AT URIs, showing various invalid cases where trailing slashes appear at different path segments.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n# enforces no trailing slashes\nat://did:plc:asdf123/\nat://user.bsky.social/\nat://did:plc:asdf123/com.atproto.feed.post/\nat://did:plc:asdf123/com.atproto.feed.post/record/\nat://did:plc:asdf123/com.atproto.feed.post/record/#/frag\n```\n\n----------------------------------------\n\nTITLE: Enforcing Strict Path Structure in AT URIs\nDESCRIPTION: Example demonstrating strict path enforcement where nested path segments are not permitted beyond certain depths according to the AT Protocol specification.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_4\n\nLANGUAGE: plain\nCODE:\n```\n# enforces strict paths\nat://did:plc:asdf123/com.atproto.feed.post/asdf123/asdf\n```\n\n----------------------------------------\n\nTITLE: Testing AT Protocol Record Key Validation\nDESCRIPTION: Test cases for record key validation in AT Protocol URIs, specifically testing various special characters and URL-encoded values in the record key position.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/%23\nat://did:plc:asdf123/com.atproto.feed.post/$@!*)(:,;~.sdf123\nat://did:plc:asdf123/com.atproto.feed.post/~'sdf123\nat://did:plc:asdf123/com.atproto.feed.post/$\nat://did:plc:asdf123/com.atproto.feed.post/@\nat://did:plc:asdf123/com.atproto.feed.post/!\nat://did:plc:asdf123/com.atproto.feed.post/*\nat://did:plc:asdf123/com.atproto.feed.post/(\nat://did:plc:asdf123/com.atproto.feed.post/,\nat://did:plc:asdf123/com.atproto.feed.post/;\nat://did:plc:asdf123/com.atproto.feed.post/abc%30123\nat://did:plc:asdf123/com.atproto.feed.post/%30\nat://did:plc:asdf123/com.atproto.feed.post/%3\nat://did:plc:asdf123/com.atproto.feed.post/%\nat://did:plc:asdf123/com.atproto.feed.post/%zz\nat://did:plc:asdf123/com.atproto.feed.post/%%%\n```\n\n----------------------------------------\n\nTITLE: Testing Maximum Length AT Protocol URI\nDESCRIPTION: This example tests an AT Protocol URI with a very long record key, approaching the maximum allowed length.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_valid.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n```\n\n----------------------------------------\n\nTITLE: Testing AT Protocol Path Traversal Prevention\nDESCRIPTION: Test cases demonstrating that dot and double-dot path segments are disallowed in AT Protocol URIs to prevent directory traversal attacks.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/aturi_syntax_invalid.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nat://did:plc:asdf123/com.atproto.feed.post/.\nat://did:plc:asdf123/com.atproto.feed.post/..\n```\n\n----------------------------------------\n\nTITLE: Validating Domain Name and NSID Length in Plaintext\nDESCRIPTION: This snippet demonstrates examples of domain names and NSIDs that are likely too long to be considered valid. It checks the maximum allowed length for different parts of the identifier.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/nsid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# length checks\ncom.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.foo\ncom.example.oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\ncom.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.middle.foo\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Base32 Encoding Rules in Plaintext\nDESCRIPTION: This snippet illustrates various cases of base32 encoded strings, including valid and invalid examples. It covers scenarios such as case sensitivity, length requirements, and character set restrictions.\nSOURCE: https://github.com/bluesky-social/indigo/blob/main/atproto/syntax/testdata/tid_syntax_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# not base32\n3jzfcijpj2z21\n0000000000000\n\n# case-sensitive\n3JZFCIJPJ2Z2A\n\n# too long/short\n3jzfcijpj2z2aa\n3jzfcijpj2z2\n222\n\n# old dashes syntax not actually supported (TTTT-TTT-TTTT-CC)\n3jzf-cij-pj2z-2a\n\n# high bit can't be high\nzzzzzzzzzzzzz\nkjzfcijpj2z2a\n```"
  }
]