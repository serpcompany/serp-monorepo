[
  {
    "owner": "hxf31891",
    "repo": "react-gradient-color-picker",
    "content": "TITLE: Custom Gradient Controls React\nDESCRIPTION: This example demonstrates how to create custom gradient controls using the `useColorPicker` hook. It allows users to switch between linear and radial gradients, adjust the degree of the gradient, add and delete color points, and use the ColorPicker component.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const { gradientType, setLinear, setRadial, addPoint, deletePoint, degrees, setDegrees, setPointLeft, currentLeft, selectedPoint } = useColorPicker(color, setColor);\n\n  return(\n    <div>\n      <button onClick={setLinear}>Linear</button>\n      <button onClick={setRadial}>Radial</button>\n      {gradientType === 'linear-gradient' && <input value={degrees} onChange={(e) => setDegrees(e.target.value)} />}\n      <input value={currentLeft} onChange={(e) => setPointLeft(e.target.value)} />\n      <button onClick={() => addPoint(50)}>Add Color</button>\n      <button onClick={() => deletePoint(selectedPoint)}>Delete Color</button>\n      <ColorPicker value={color} onChange={setColor} hideControls={true} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Color Conversions React\nDESCRIPTION: This example demonstrates how to use the `useColorPicker` hook to get color conversions in HSL, HSV, Hex, and CMYK formats. It retrieves the converted color values and displays them, while using the ColorPicker component for color selection.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const { valueToHSL, valueToHSV, valueToHex, valueToCmyk, rgbaArr, hslArr } = useColorPicker(color, setColor);\n\n  const hslString = valueToHSL();\n  const hsvString = valueToHSV();\n  const hexString = valueToHex();\n  const cmykString = valueToCmyk();\n  const rgbaArray = rgbaArr;\n  const hslArray = hslArr;\n\n  return(\n    <div>\n      <ColorPicker value={color} onChange={setColor} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic useColorPicker Hook Example in React\nDESCRIPTION: Illustrates how to use the useColorPicker hook to gain more control over the ColorPicker component.  It shows how to initialize the hook with a color value and onChange handler, and then use the setSolid and setGradient functions to control the color mode of the picker.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const { setSolid, setGradient } = useColorPicker(color, setColor);\n\n  return(\n    <div>\n      <button onClick={setSolid}>Solid</button>\n      <button onClick={setGradient}>Gradient</button>\n      <ColorPicker value={color} onChange={setColor} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Linear-Gradient Degrees Input - React\nDESCRIPTION: This code snippet demonstrates how to create a custom input for controlling the degrees of a linear gradient.  It includes parsing the current degrees value, handling input changes, and updating the color state with the new degree value. The degrees are clamped between 0 and 360.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = React.useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const degrees = parseInt(color?.split(',')[0]?.split('(')[1])\n  \n  const handleDegrees = (val) => {\n    let num = parseInt(val)\n    let nans = isNaN(num) ? 0 : num\n    let min = Math.max(nans, 0)\n    let max = Math.min(min, 360)\n    const remaining = color.split(/,(.+)/)[1]\n    setColor(`linear-gradient(${max}deg, ${remaining}`)\n  }\n\n  return(\n    <div>\n      <input value={degrees} onChange={(e) => handleDegrees(e.target.value)} />\n      <ColorPicker value={color} onChange={setColor} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom RGBA Inputs React\nDESCRIPTION: This example demonstrates how to implement custom RGBA inputs using the `useColorPicker` hook. It allows users to control the red, green, blue, and alpha values of the color, updating the color picker accordingly. The `ColorPicker` component's default inputs are hidden.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const { setR, setG, setB, setA, rgbaArr } = useColorPicker(color, setColor);\n\n  return(\n    <div>\n      <input value={rgbaArr[0]} onChange={(e) => setR(e.target.value)} />\n      <input value={rgbaArr[1]} onChange={(e) => setG(e.target.value)} />\n      <input value={rgbaArr[2]} onChange={(e) => setB(e.target.value)} />\n      <input value={rgbaArr[3]} onChange={(e) => setA(e.target.value)} />\n      <ColorPicker value={color} onChange={setColor} hideInputs={true} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Gradient Object React\nDESCRIPTION: This example demonstrates how to retrieve the gradient value as an object using the `getGradientObject` function returned by the `useColorPicker` hook. This allows for easier manipulation of the gradient properties.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const { getGradientObject } = useColorPicker(color, setColor);\n  const gradientObject = getGradientObject();\n  \n  // example value\n  // {\n  //   \"isGradient\": true,\n  //   \"gradientType\": \"linear-gradient\",\n  //   \"degrees\": \"40deg\",\n  //   \"colors\": [\n  //       {\n  //           \"value\": \"rgba(27,107,235,1)\",\n  //           \"left\": 0\n  //       },\n  //       {\n  //           \"value\": \"rgba(25,245,157,1)\",\n  //           \"left\": 100\n  //       }\n  //     ]\n  // }\n\n  return(\n    <div>\n      <ColorPicker value={color} onChange={setColor} presets={previousColors} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Presets Example React\nDESCRIPTION: This example demonstrates how to use custom color presets with the `ColorPicker` component.  A custom array of color values is defined and passed to the `presets` prop of the `ColorPicker`.  The `useState` hook is used to manage the selected color.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker from 'react-best-gradient-color-picker'\n\nconst customPresets = [\n  'rgba(34, 164, 65, 1)',\n  'rgba(210, 18, 40, .5)',\n  'rgba(90, 110, 232, 1)',\n  'rgba(65, 89, 56, 1)',\n  'rgba(98, 189, 243, 1)',\n  'rgba(255, 210, 198, 1)',\n  'rgba(94, 94, 94, 1)'\n] //max 18 colors, you can pass in more but the array will be sliced to the first 18\n\nfunction MyApp() {\n  const [color, setColor] = useState('rgba(255,255,255,1');\n\n  return <ColorPicker value={color} onChange={setColor} presets={customPresets} />\n}\n```\n\n----------------------------------------\n\nTITLE: Only Gradients Example React\nDESCRIPTION: This example demonstrates how to restrict the `ColorPicker` component to only allow selection of gradient colors. This is achieved by setting the initial value to a gradient and hiding the color type buttons using the `hideColorTypeBtns` prop.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');  \n\n  return(\n    <div>\n      <ColorPicker\n        value={color}\n        onChange={setColor}\n        hideColorTypeBtns={true}\n      />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ColorPicker Example in React\nDESCRIPTION: Demonstrates a basic implementation of the ColorPicker component in a React application. It initializes a color state and uses the ColorPicker component to allow users to select a color, updating the state with the onChange prop.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('rgba(255,255,255,1)');\n\n  return <ColorPicker value={color} onChange={setColor} />\n}\n```\n\n----------------------------------------\n\nTITLE: Recently Used Colors as Presets React\nDESCRIPTION: This example demonstrates how to use the `previousColors` property from the `useColorPicker` hook to display recently used colors as presets. This provides the user with quick access to colors they have used before.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  const { previousColors } = useColorPicker(color, setColor);\n\n  return(\n    <div>\n      <ColorPicker value={color} onChange={setColor} presets={previousColors} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Gradient Type - React\nDESCRIPTION: This code snippet showcases how to toggle between linear and radial gradient types by updating the value prop of the ColorPicker component. It defines two functions, `setLinear` and `setRadial`, which update the color state with the corresponding gradient type. The component will re-render with the selected gradient type.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst setLinear = () => {\n    setColor('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)')\n  }\n  \n  const setRadial = () => {\n    setColor('radial-gradient(circle, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)')\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Solid Color Type - React\nDESCRIPTION: This code snippet demonstrates how to change the color type from gradient to solid by updating the value prop of the ColorPicker component. It uses React's useState hook to manage the color and updates it with an rgba value when the button is clicked.  The component re-renders and displays the new color.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const [color, setColor] = React.useState('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)');\n  \n  const setSolid = () => {\n    setColor('rgba(255,255,255,1)') //color could be any rgba value\n  }\n\n  return(\n    <div>\n      <button onClick={setSolid}>Solid</button>\n      <ColorPicker value={color} onChange={setColor} />\n    </div>\n   )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gradient Color Type - React\nDESCRIPTION: This code snippet demonstrates how to change the color type from solid to gradient by updating the value prop of the ColorPicker component.  It uses a linear-gradient string as the new color value.  Clicking the button triggers the state update and a re-render of the component.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst setGradient = () => {\n    setColor('linear-gradient(90deg, rgba(96,93,93,1) 0%, rgba(255,255,255,1) 100%)')\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom Locales Example React\nDESCRIPTION: This example shows how to customize the locales of the ColorPicker using the `locales` prop. It provides a custom object with translations for different parts of the ColorPicker component, for example translating `SOLID` and `GRADIENT`.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport ColorPicker, { useColorPicker } from 'react-best-gradient-color-picker'\n\nfunction MyApp() {\n  const customLocales = {\n    CONTROLS: {\n      SOLID: 'Obične',\n      GRADIENT: 'Gradijent',\n    },\n  }\n  return (\n    <div>\n      <ColorPicker locales={customLocales} />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-best-gradient-color-picker with npm\nDESCRIPTION: Installs the react-best-gradient-color-picker package using npm. This command adds the library to your project's dependencies.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-best-gradient-color-picker\n```\n\n----------------------------------------\n\nTITLE: Installing react-best-gradient-color-picker with yarn\nDESCRIPTION: Installs the react-best-gradient-color-picker package using yarn. This command adds the library to your project's dependencies.\nSOURCE: https://github.com/hxf31891/react-gradient-color-picker/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-best-gradient-color-picker\n```"
  }
]