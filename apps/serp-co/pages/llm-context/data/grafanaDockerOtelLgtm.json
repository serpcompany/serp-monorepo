[
  {
    "owner": "grafana",
    "repo": "docker-otel-lgtm",
    "content": "TITLE: Running the Docker Image with Shell Scripts\nDESCRIPTION: Commands to run the grafana/otel-lgtm Docker image using shell scripts or mise on different platforms. This starts the containerized OpenTelemetry backend with all integrated components.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Unix/Linux\n./run-lgtm.sh\n\n# Windows (PowerShell)\n./run-lgtm\n\n# Using mise (Unix/Linux)\nmise run lgtm\n```\n\n----------------------------------------\n\nTITLE: Starting OpenTelemetry eBPF Profiler Docker Environment\nDESCRIPTION: Commands to start the Docker Compose environment with the OpenTelemetry eBPF profiler, collector, and Pyroscope visualization through Grafana. Includes both startup and cleanup commands.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/examples/ebpf-profiler/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Start all services\ndocker compose up --build\n\n# To clean up\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application\nDESCRIPTION: Commands to run the example REST service that's included with the repository. This service is instrumented with OpenTelemetry to demonstrate the capabilities of the backend.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Unix/Linux\n./run-example.sh\n\n# Windows (PowerShell)\n./run-example\n\n# Using mise (Unix/Linux)\nmise run example\n```\n\n----------------------------------------\n\nTITLE: Deploying LGTM in Kubernetes\nDESCRIPTION: Commands to deploy the LGTM stack to a Kubernetes cluster and set up port forwarding. This makes the OpenTelemetry backend available on localhost ports for testing and development.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# create k8s resources\nkubectl apply -f k8s/lgtm.yaml\n\n# port forwarding\nkubectl port-forward service/lgtm 3000:3000 4317:4317 4318:4318\n\n# Using mise\nmise k8s-apply\nmise k8s-port-forward\n```\n\n----------------------------------------\n\nTITLE: Generating Traffic for the Example Application\nDESCRIPTION: Commands to generate traffic to the example application. This helps to create telemetry data (metrics, logs, traces) that can be viewed in the Grafana dashboards.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Unix/Linux\n./generate-traffic.sh\n\n# Windows (PowerShell)\n./generate-traffic\n\n# Using mise (Unix/Linux)\nmise run generate-traffic\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Environment Variables\nDESCRIPTION: Environment variable exports for configuring OpenTelemetry. These are shown as optional since the Docker image works with OpenTelemetry's default settings.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Not needed as these are the defaults in OpenTelemetry:\nexport OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\n```\n\n----------------------------------------\n\nTITLE: Deploying and Accessing JSON Logs in Kubernetes with Grafana\nDESCRIPTION: A series of commands for building a Docker image, deploying it to Kubernetes, generating traffic, and accessing the logs in Grafana using Loki as a data source.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/examples/java/json-logging-otlp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f k8s/\n```\n\nLANGUAGE: bash\nCODE:\n```\nk3d.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n../../../generate-traffic.sh\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying JSON Logging Application in Kubernetes\nDESCRIPTION: Instructions for building a Docker image using a build script, deploying Kubernetes manifests, generating test traffic, and accessing logs through Grafana using Loki as a data source.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/examples/java/json-logging-logback/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f k8s/\n```\n\nLANGUAGE: bash\nCODE:\n```\nk3d.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n../../../generate-traffic.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing Grafana UI for OpenTelemetry eBPF Profiler Visualization\nDESCRIPTION: URL to access the Grafana dashboard where system-wide profiles collected by OpenTelemetry eBPF profiler are visualized.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/examples/ebpf-profiler/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Access Grafana\nhttp://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Login and Exploration Steps for Kubernetes JSON Logs\nDESCRIPTION: Steps for accessing and exploring JSON logs after deployment. This includes building and deploying the application, generating traffic, logging into Grafana, and selecting Loki as the data source for log visualization.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/examples/java/json-logging-ecs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Build the Docker image using using `build.sh`\n2. Deploy the manifest using `kubectl apply -f k8s/` (e.g. using [k3d.sh](k3d.sh))\n3. Generate traffic using [generate-traffic.sh](../../../generate-traffic.sh)\n4. Log in to [http://localhost:3000](http://localhost:3000) with user _admin_ and password _admin_.\n5. Go to \"Explore\"\n6. Select \"Loki\" as data source\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Image from Source\nDESCRIPTION: Commands to build the grafana/otel-lgtm Docker image from the source code. This creates a custom build of the OpenTelemetry backend with all integrated components.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd docker/\ndocker build . -t grafana/otel-lgtm\n\n# Using mise\nmise build-lgtm\n```\n\n----------------------------------------\n\nTITLE: Testing OTel Collector Combined Configuration in Shell\nDESCRIPTION: Command to merge and print the initial combined configuration for the OpenTelemetry Collector by combining multiple configuration files and enabling the print feature gate. The output is redirected to a merged.yaml file.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./otelcol-contrib --config docker/otelcol-config.yaml --config docker/otelcol-export-http.yaml print-initial-config --feature-gates otelcol.printInitialConfig > merged.yaml\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements\nDESCRIPTION: Lists required Python packages and their versions. Includes Flask web framework and its dependencies like Werkzeug, Jinja2, and other supporting packages. Each package is pinned to a specific version for reproducibility.\nSOURCE: https://github.com/grafana/docker-otel-lgtm/blob/main/examples/python/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblinker==1.9.0\nclick==8.1.8\nFlask==3.1.0\nitsdangerous==2.2.0\nJinja2==3.1.6\nMarkupSafe==3.0.2\nWerkzeug==3.1.3\n```"
  }
]