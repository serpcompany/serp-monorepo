[
  {
    "owner": "pizzajsdev",
    "repo": "pizzajs",
    "content": "TITLE: Using the useI18n Hook in React Components\nDESCRIPTION: Shows how to use the useI18n hook to access translation functions and language information within React components.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useI18n } from '@pizzajsdev/i18n/react'\n\nexport function Greeting() {\n  const { t, lang } = useI18n()\n\n  return (\n    <div>\n      <h1>{t('greeting')}</h1>\n      <p>{t('nested.subtitle')}</p>\n      <p>Current language: {lang.id}</p>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating I18nProvider with React Router Root Component\nDESCRIPTION: Demonstrates how to use the resolved language in a React Router root component by implementing the loader function and wrapping the app with I18nProvider.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Route } from './+types/root'\nimport { I18nProvider } from '@pizzajsdev/i18n/react'\nimport { getAbsUrlUtil } from '@pizzajsdev/utils/urls'\n// ... other react-router imports\n\nexport async function loader({ context }: Route.LoaderArgs) {\n  const { lang, langConfig } = context\n\n  if (lang.shouldRedirect) {\n    // Optional, if you want to force the language in the URL depending on the preferred language.\n    return Response.redirect(lang.canonicalUrl.toString())\n  }\n\n  const langId = lang.resolved.id\n  const fallbackLangId = langConfig.default.id\n\n  // Load translations for the current language.\n  // For optimal performance, you should cache them instead of flattening them on every request.\n  const translations = buildFlattenedTranslations(langId, fallbackLangId, allTranslationsByLang)\n\n  // WARNING: the returned data is sent to the client on hydration! Never expose sensitive data in loaders.\n  return {\n    lang,\n    langConfig,\n    warnOnMissingTranslations: process.env.NODE_ENV === 'development',\n    translations,\n    baseUrl: getBaseUrl(), // Optional, if you want to build canonical links. It assumes you have a `getBaseUrl` function.\n  }\n}\n\nexport function Layout({ children }: { children: React.ReactNode }) {\n  const loaderData = useRouteLoaderData<typeof loader>('root')\n  const location = useLocation()\n  const cleanAbsUrl = getAbsUrlUtil(location.pathname, loaderData?.baseUrl)\n  const canonicalLinks = buildCanonicalLinks(cleanAbsUrl, location.search)\n\n  return (\n    <html lang={loaderData?.lang.resolved.locale}>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        {canonicalLinks.map((linkProps) => (\n          <link key={linkProps.href} {...linkProps} />\n        ))}\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>\n  )\n}\n\nexport default function App({ loaderData }: Route.ComponentProps) {\n  return (\n    <I18nProvider\n      lang={loaderData.lang.resolved}\n      defaultLangId={loaderData.langConfig.default.id}\n      translations={loaderData.translations}\n      warnIfMissing={loaderData.warnOnMissingTranslations}\n    >\n      <Outlet />\n    </I18nProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server Entry for React Router Hono\nDESCRIPTION: Server entry point configuration for handling requests using the React Router Hono adapter.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/react-router-hono/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleRequest } from '@pizzajsdev/react-router-hono/server-entry'\n\nexport default handleRequest\n```\n\n----------------------------------------\n\nTITLE: Creating App Context with Language Resolution for React Router\nDESCRIPTION: Shows how to create a server-side context for React Router that resolves the user's language from the request and makes it available to all loaders and actions.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpBindings } from '@hono/node-server'\nimport type { Context } from 'hono'\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from 'react-router'\nimport { resolveLangFromRequest } from '@pizzajsdev/i18n/resolver'\nimport { createAppLangHashMap } from '@pizzajsdev/i18n/utils'\n\nconst supportedLangs = [\n  { id: 'en', locale: 'en-US', isDefault: true },\n  { id: 'es', locale: 'es-ES' },\n]\nconst defaultLang = supportedLangs[0]\nconst supportedLangsHashMap = createAppLangHashMap(supportedLangs)\nconst langConfig = {\n  all: supportedLangsHashMap,\n  default: defaultLang,\n}\n\nexport const getLoadContext = async (ctx: Context<{ Bindings: HttpBindings }>) => {\n  return {\n    langConfig,\n    lang: resolveLangFromRequest(ctx.req.raw, langConfig),\n    // other data, e.g.:\n    // url: new URL(ctx.req.raw.url),\n    // session: loadSession(ctx.req.raw.headers.get('Cookie')),\n  }\n}\n\nexport interface LoadContext extends Awaited<ReturnType<typeof getLoadContext>> {}\n\ndeclare module 'react-router' {\n  interface AppLoadContext extends LoadContext {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Context for React Router Hono\nDESCRIPTION: TypeScript file for setting up the server context, including load context and type definitions for loader and action functions.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/react-router-hono/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpBindings } from '@hono/node-server'\nimport type { Context } from 'hono'\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from 'react-router'\n\nexport const getLoadContext = async (ctx: Context<{ Bindings: HttpBindings }>) => {\n  const req = ctx.req.raw\n  const url = new URL(req.url)\n  const cookie = req.headers.get('Cookie') ?? ''\n  const userAgent = req.headers.get('User-Agent')\n\n  return {\n    url,\n    userAgent,\n    cookie,\n    // other data, e.g.:\n    // lang,\n    // session\n  }\n}\n\nexport interface LoadContext extends Awaited<ReturnType<typeof getLoadContext>> {}\nexport type LoaderFunctionArgsWithContext = LoaderFunctionArgs<LoadContext>\nexport type ActionFunctionArgsWithContext = ActionFunctionArgs<LoadContext>\nexport type ServerFunctionArgsWithContext = LoaderFunctionArgsWithContext | ActionFunctionArgsWithContext\n\ndeclare module 'react-router' {\n  interface AppLoadContext extends LoadContext {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router v7+ with app-router-fs\nDESCRIPTION: Code for creating and exporting route configurations using the app-router-fs collector. This snippet shows how to collect routes from a directory and create a compatible router configuration.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/app-router-fs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { collectRoutes } from '@pizzajsdev/app-router-fs'\nimport { createRouterConfig } from '@pizzajsdev/app-router-fs/adapters/react-router'\n\nexport const collectedRoutes = collectRoutes('app/routes', ['.tsx', '.ts', '.md', '.mdx'], process.cwd())\nconst routes = createRouterConfig(collectedRoutes)\n\nexport default routes\n```\n\n----------------------------------------\n\nTITLE: Configuring React Router for Hono\nDESCRIPTION: TypeScript configuration file for React Router, using the automatic preset from the Hono adapter.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/react-router-hono/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from '@react-router/dev/config'\nimport { createAutomaticPreset } from '@pizzajsdev/react-router-hono/presets'\n\nexport default {\n  presets: [createAutomaticPreset()],\n} satisfies Config\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Type Definitions for Translations\nDESCRIPTION: Shows how to create TypeScript type definitions for translation keys, which can be saved to a global declaration file for type safety.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateTranslationTypesCode } from '@pizzajsdev/i18n/utils'\n\nconst tsCode = generateTranslationTypesCode(defaultLangId, allTranslationsByLang)\n// Save it in your project, as `global.d.ts`\nfs.writeFileSync('global.d.ts', tsCode)\n```\n\n----------------------------------------\n\nTITLE: Building Flattened Translations with TypeScript\nDESCRIPTION: Demonstrates how to create flattened translation objects from a nested structure using the buildFlattenedTranslations utility function.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildFlattenedTranslations } from '@pizzajsdev/i18n/utils'\n\nconst allTranslationsByLang = {\n  /* ... */\n} // same structure as in the example above\nconst langId = 'de'\nconst fallbackLangId = 'en'\nconst flattenedTranslations_DE = buildFlattenedTranslations(langId, fallbackLangId, allTranslationsByLang)\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Server for React Router Hono\nDESCRIPTION: TypeScript file for setting up a Hono server compatible with Node.js, using the React Router Hono adapter.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/react-router-hono/README.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHonoNodeServer } from '@pizzajsdev/react-router-hono/presets/node/server'\nimport { getLoadContext } from './context.server'\n\nexport default await createHonoNodeServer({\n  getLoadContext: getLoadContext,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Server for React Router Hono\nDESCRIPTION: TypeScript file for setting up a Hono server compatible with Vercel, using the React Router Hono adapter.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/react-router-hono/README.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHonoVercelServer } from '@pizzajsdev/react-router-hono/presets/vercel/server'\nimport { getLoadContext } from './context.server'\n\nexport default await createHonoVercelServer({\n  getLoadContext: getLoadContext,\n})\n```\n\n----------------------------------------\n\nTITLE: Example Translation Structure in JSON\nDESCRIPTION: Shows the expected format for translation objects that the library uses, with examples in English and Spanish with nested keys.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"en\": {\n    \"greeting\": \"Hello, world!\",\n    \"nested\": {\n      \"subtitle\": \"This is a subtitle\"\n    }\n  },\n  \"es\": {\n    \"greeting\": \"Hola, mundo!\",\n    \"nested\": {\n      \"subtitle\": \"Este es un subtítulo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PizzaJS i18n Package\nDESCRIPTION: Commands to configure npm registry for @pizzajsdev packages and install the i18n library using pnpm.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/i18n/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"@pizzajsdev:registry=https://npm.pkg.github.com\" >> .npmrc\npnpm add @pizzajsdev/i18n\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Hono Adapter with npm\nDESCRIPTION: Commands to set up the npm registry and install the React Router Hono adapter package.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/react-router-hono/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"@pizzajsdev:registry=https://npm.pkg.github.com\" >> .npmrc\npnpm add @pizzajsdev/react-router-hono\n```\n\n----------------------------------------\n\nTITLE: Installing app-router-fs Package\nDESCRIPTION: Terminal commands to set up the package registry and install the app-router-fs package using pnpm.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/app-router-fs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"@pizzajsdev:registry=https://npm.pkg.github.com\" >> .npmrc\npnpm add @pizzajsdev/app-router-fs\n```\n\n----------------------------------------\n\nTITLE: Setting up PizzaJS Utils with GitHub Packages\nDESCRIPTION: Instructions for configuring npm to use GitHub Packages registry and installing the PizzaJS Utils package using pnpm. This setup adds the required registry configuration to .npmrc and then installs the package.\nSOURCE: https://github.com/pizzajsdev/pizzajs/blob/main/packages/utils/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"@pizzajsdev:registry=https://npm.pkg.github.com\" >> .npmrc\npnpm add @pizzajsdev/utils\n```"
  }
]