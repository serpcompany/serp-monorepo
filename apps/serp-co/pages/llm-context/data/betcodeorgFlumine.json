[
  {
    "owner": "betcode-org",
    "repo": "flumine",
    "content": "TITLE: Initializing Flumine Framework with Betfair Client\nDESCRIPTION: Sets up the flumine framework by importing required packages, creating a Betfair API client, and initializing the Flumine framework with that client.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport betfairlightweight\nfrom flumine import Flumine, clients\n\ntrading = betfairlightweight.APIClient(\"username\")\nclient = clients.BetfairClient(trading)\n\nframework = Flumine(client=client)\n```\n\n----------------------------------------\n\nTITLE: Advanced Flumine Strategy with Order Execution\nDESCRIPTION: Comprehensive example demonstrating a trading strategy that places, cancels, updates, and replaces orders based on market conditions. Includes handling of trade creation, order management, and market interactions.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import BaseStrategy\nfrom flumine.order.trade import Trade\nfrom flumine.order.order import LimitOrder, OrderStatus\nfrom flumine.markets.market import Market\nfrom betfairlightweight.filters import streaming_market_filter\nfrom betfairlightweight.resources import MarketBook\n\n\nclass ExampleStrategy(BaseStrategy):\n    def start(self, flumine) -> None:\n        print(\"starting strategy 'ExampleStrategy'\")\n\n    def check_market_book(self, market: Market, market_book: MarketBook) -> bool:\n        # process_market_book only executed if this returns True\n        if market_book.status != \"CLOSED\":\n            return True\n\n    def process_market_book(self, market: Market, market_book: MarketBook) -> None:\n        # process marketBook object\n        for runner in market_book.runners:\n            if runner.status == \"ACTIVE\" and runner.last_price_traded < 1.5:\n                trade = Trade(\n                    market_id=market_book.market_id,\n                    selection_id=runner.selection_id,\n                    handicap=runner.handicap,\n                    strategy=self\n                )\n                order = trade.create_order(\n                    side=\"LAY\",\n                    order_type=LimitOrder(price=1.01, size=2.00)\n                )\n                market.place_order(order)\n\n    def process_orders(self, market: Market, orders: list) -> None:\n        for order in orders:\n            if order.status == OrderStatus.EXECUTABLE:\n                if order.size_remaining == 2.00:\n                    market.cancel_order(order, 0.02)  # reduce size to 1.98\n                if order.order_type.persistence_type == \"LAPSE\":\n                    market.update_order(order, \"PERSIST\")\n                if order.size_remaining > 0:\n                    market.replace_order(order, 1.02)  # move\n\n\n# Initialize the framework\nframework = Flumine()\n\n# Add your strategy to the framework\nframework.add_strategy(\n    ExampleStrategy(\n        market_filter=streaming_market_filter(\n            event_type_ids=[\"7\"],\n            country_codes=[\"GB\"],\n            market_types=[\"WIN\"],\n        )\n    )\n)\n\n# Start the trading framework\nframework.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Betting Strategy\nDESCRIPTION: Complete example showing how to create a custom betting strategy class that implements market monitoring and order management logic\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import BaseStrategy\nfrom flumine.order.trade import Trade\nfrom flumine.order.order import LimitOrder, OrderStatus\nfrom flumine.markets.market import Market\nfrom betfairlightweight.filters import streaming_market_filter\nfrom betfairlightweight.resources import MarketBook\n\n\nclass ExampleStrategy(BaseStrategy):\n    def start(self, flumine) -> None:\n        print(\"starting strategy 'ExampleStrategy'\")\n\n    def check_market_book(self, market: Market, market_book: MarketBook) -> bool:\n        # process_market_book only executed if this returns True\n        if market_book.status != \"CLOSED\":\n            return True\n\n    def process_market_book(self, market: Market, market_book: MarketBook) -> None:\n        # process marketBook object\n        for runner in market_book.runners:\n            if runner.status == \"ACTIVE\" and runner.last_price_traded < 1.5:\n                trade = Trade(\n                    market_id=market_book.market_id,\n                    selection_id=runner.selection_id,\n                    handicap=runner.handicap,\n                    strategy=self,\n                )\n                order = trade.create_order(\n                    side=\"LAY\", order_type=LimitOrder(price=1.01, size=2.00)\n                )\n                market.place_order(order)\n\n    def process_orders(self, market: Market, orders: list) -> None:\n        for order in orders:\n            if order.status == OrderStatus.EXECUTABLE:\n                if order.size_remaining == 2.00:\n                    market.cancel_order(order, 0.02)  # reduce size to 1.98\n                if order.order_type.persistence_type == \"LAPSE\":\n                    market.update_order(order, \"PERSIST\")\n                if order.size_remaining > 0:\n                    market.replace_order(order, 1.02)  # move\n\n\n# Add your strategy to the framework\nframework.add_strategy(\n    ExampleStrategy(\n        market_filter=streaming_market_filter(\n            event_type_ids=[\"7\"],\n            country_codes=[\"GB\"],\n            market_types=[\"WIN\"],\n        )\n    )\n)\n\n# Start the trading framework\nframework.run()\n```\n\n----------------------------------------\n\nTITLE: Basic Flumine Framework Setup with Strategy Implementation\nDESCRIPTION: Example showing how to initialize the Flumine framework and add a basic trading strategy. The strategy filters for horse racing markets in Great Britain.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import Flumine, BaseStrategy\nfrom betfairlightweight.filters import streaming_market_filter\n\n# Define your strategy here\nclass ExampleStrategy(BaseStrategy):\n    def check_market_book(self, market, market_book) -> bool:\n        # process_market_book only executed if this returns True\n        return True\n\n    def process_market_book(self, market, market_book):\n        # Your strategy logic\n        pass\n\n# Initialize the framework\nframework = Flumine()\n\n# Add your strategy to the framework\nframework.add_strategy(\n    ExampleStrategy(\n        market_filter=streaming_market_filter(\n            event_type_ids=[\"7\"],\n            country_codes=[\"GB\"],\n            market_types=[\"WIN\"],\n        )\n    )\n)\n\n# Start the trading framework\nframework.run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Strategy Class in Flumine\nDESCRIPTION: Demonstrates how to create a strategy by subclassing BaseStrategy and implementing required methods including start(), check_market_book(), and process_market_book().\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import BaseStrategy\n\n\nclass ExampleStrategy(BaseStrategy):\n    def start(self, flumine):\n        # subscribe to streams\n        print(\"starting strategy 'ExampleStrategy'\")\n        \n    def check_market_book(self, market, market_book):\n        # process_market_book only executed if this returns True\n        if market_book.status != \"CLOSED\":\n            return True\n\n    def process_market_book(self, market, market_book):\n        # process marketBook object\n        print(market_book.status)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flumine Framework with Betfair Client\nDESCRIPTION: Basic setup code showing how to initialize the Flumine framework with a Betfair API client\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport betfairlightweight\nfrom flumine import Flumine, clients\n\ntrading = betfairlightweight.APIClient(\"username\")\nclient = clients.BetfairClient(trading)\n\nframework = Flumine(\n    client=client,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Placement in a Strategy\nDESCRIPTION: Extends the ExampleStrategy to place a limit order when a specific runner ID is found in the market book data.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.order.trade import Trade\nfrom flumine.order.order import LimitOrder\n\n\nclass ExampleStrategy(BaseStrategy):\n    def process_market_book(self, market, market_book):\n        for runner in market_book.runners:\n            if runner.selection_id == 123:\n                trade = Trade(\n                    market_id=market_book.market_id, \n                    selection_id=runner.selection_id,\n                    handicap=runner.handicap,\n                    strategy=self\n                )\n                order = trade.create_order(\n                    side=\"LAY\", \n                    order_type=LimitOrder(price=1.01, size=2.00)\n                )\n                market.place_order(order)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Trades in Python using Flumine\nDESCRIPTION: This snippet demonstrates how to create a Trade object, add an order to it, and access trade properties. It uses the Flumine framework for betting operations.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/trades.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.order.trade import Trade\nfrom flumine.order.ordertype import LimitOrder\n\ntrade = Trade(\n    market_id=\"1.2345678\",\n    selection_id=123456,\n    handicap=1.0,\n    strategy=strategy\n)\ntrade.orders  # []\ntrade.status  # TradeStatus.LIVE\n\norder = trade.create_order(\n    side=\"LAY\",\n    order_type=LimitOrder(price=1.01, size=2.00)\n)\ntrade.orders  # [<BetfairOrder>]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flumine for Strategy Simulation\nDESCRIPTION: Demonstrates how to configure Flumine for simulation using SimulatedClient and historical market data.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import FlumineSimulation, clients\n\nclient = clients.SimulatedClient()\nframework = FlumineSimulation(client=client)\n\nstrategy = ExampleStrategy(\n    market_filter={\"markets\": [\"/tmp/marketdata/1.170212754\"]}\n)\nframework.add_strategy(strategy)\n\nframework.run()\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing BetfairOrders in Python using Flumine\nDESCRIPTION: This snippet shows how to create a BetfairOrder object, which is used to store order data locally. It demonstrates how to check the order status and execute order-related operations.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/trades.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.order.order import BetfairOrder, LimitOrder\n\norder = BetfairOrder(\n    trade=trade,\n    side=\"LAY\",\n    order_type=LimitOrder(price=1.01, size=2.00)\n)\n\norder.status  # OrderStatus.PENDING\norder.executable()\norder.execution_complete()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding Strategy to Flumine Framework\nDESCRIPTION: Shows how to configure a strategy with market filters for event types, country codes, and market types, then add it to the framework.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom betfairlightweight.filters import (\n    streaming_market_filter, \n    streaming_market_data_filter,\n)\n\nstrategy = ExampleStrategy(\n    market_filter=streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\"],\n        market_types=[\"WIN\"],\n    ),\n    market_data_filter=streaming_market_data_filter(fields=[\"EX_ALL_OFFERS\"])\n)\n\nframework.add_strategy(strategy)\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Batching for Orders in Flumine\nDESCRIPTION: Demonstrates how to use transaction context managers to batch and execute multiple orders together or in sequence.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith market.transaction() as t:\n    market.place_order(order)  # executed immediately in separate transaction\n    t.place_order(order)  # executed on transaction __exit__\n\nwith market.transaction() as t:\n    t.place_order(order)\n    \n    t.execute()  # above order executed\n    \n    t.cancel_order(order)\n    t.place_order(order)  # both executed on transaction __exit__\n```\n\n----------------------------------------\n\nTITLE: Adding a Betfair Client to Flumine Framework\nDESCRIPTION: Demonstrates how to initialize the Flumine framework and add a Betfair client to it. This allows accessing the client through the framework or strategy objects.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/clients.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import Flumine, clients\n\nframework = Flumine()\n\nclient = clients.BetfairClient(trading)\nframework.add_client(client)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flumine for Paper Trading\nDESCRIPTION: Shows how to set up Flumine for paper trading by creating a BetfairClient with paper_trade flag enabled.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import clients\n\nclient = clients.BetfairClient(trading, paper_trade=True)\n```\n\n----------------------------------------\n\nTITLE: Accessing Runner Context in Flumine BaseStrategy\nDESCRIPTION: Demonstrates how to retrieve and use the RunnerContext object within a strategy to access runner-specific data such as investment, trade counts, and orders. This context is crucial for implementing trading controls and managing exposure.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/strategies.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nrunner_context = self.get_runner_context(\n    market.market_id, runner.selection_id, runner.handicap\n)\n\nrunner_context.invested\nrunner_context.trade_count\nrunner_context.live_trade_count\nrunner_context.executable_orders\nrunner_context.placed_elapsed_seconds\nrunner_context.trades\nrunner_context.live_trades\n```\n\n----------------------------------------\n\nTITLE: Running the Flumine Framework\nDESCRIPTION: Starts the Flumine framework to process market data according to the configured strategies.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nframework.run()\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions in Flumine Markets (Python)\nDESCRIPTION: Demonstrates how to use the transaction class to control order execution behavior in Flumine markets. It shows immediate execution and delayed execution examples using context managers.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/markets.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith market.transaction() as t:\n    market.place_order(order)  # executed immediately in separate transaction\n    t.place_order(order)  # executed on transaction __exit__\n\nwith market.transaction() as t:\n    t.place_order(order)\n    ..\n    t.execute()  # above order executed\n    ..\n    t.cancel_order(order)\n    t.place_order(order)  # both executed on transaction __exit__\n```\n\n----------------------------------------\n\nTITLE: Processing Sports Data in Flumine Strategy\nDESCRIPTION: This snippet defines the process_sports_data function in a strategy class that handles updates from the sports-data-stream. It receives market data and sports-specific data (either Race or CricketMatch objects) on each update.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/sportsdata.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleStrategy(BaseStrategy):\n    def process_sports_data(\n        self, market: Market, sports_data: Union[Race, CricketMatch]\n    ) -> None:\n        # called on each update from sports-data-stream\n        print(market, sports_data)\n```\n\n----------------------------------------\n\nTITLE: Specifying Client for Market Order Placement\nDESCRIPTION: Shows how to specify a particular client when placing an order on a market, rather than using the default client.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/clients.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = self.clients.get_client(ExchangeType.SIMULATED, username=\"123\")\n\nmarket.place_order(order, client=client)\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Client in a Transaction\nDESCRIPTION: Demonstrates how to use a specific client within a market transaction context, allowing for multiple operations with the same client.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/clients.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient = self.clients.get_client(ExchangeType.SIMULATED, username=\"123\")\n\nwith market.transaction(client=client) as t:\n    t.place_order(order)\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Stream Strategy in Flumine\nDESCRIPTION: Shows how to create a strategy that processes raw data instead of market books by using the DataStream class.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import BaseStrategy\nfrom flumine.streams.datastream import DataStream\n\n\nclass ExampleDataStrategy(BaseStrategy):\n    def process_raw_data(self, publish_time, data):\n        print(publish_time, data)\n        \nstrategy = ExampleDataStrategy(\n    market_filter=streaming_market_filter(\n        event_type_ids=[\"7\"],\n        country_codes=[\"GB\"],\n        market_types=[\"WIN\"],\n    ),\n    stream_class=DataStream\n)\n\nflumine.add_strategy(strategy)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Order Data Stream Recording\nDESCRIPTION: Configures a strategy with OrderDataStream to record order data per market.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.streams.datastream import OrderDataStream\n\nstrategy = ExampleDataStrategy(\n    market_filter=None,\n    stream_class=OrderDataStream\n)\n\nflumine.add_strategy(strategy)\n```\n\n----------------------------------------\n\nTITLE: Configuring Race Subscription in Flumine Strategy\nDESCRIPTION: This code shows how to add a race subscription to a strategy using the sports_data_filter parameter. It configures the strategy to receive data for horse racing events with market type WIN.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/sportsdata.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter=streaming_market_filter(\n        event_type_ids=[\"7\"], market_types=[\"WIN\"]\n    ),\n    sports_data_filter=[\"raceSubscription\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiprocessing for Flumine Simulation\nDESCRIPTION: This comprehensive example shows how to implement multiprocessing for Flumine simulations. It distributes market processing across multiple CPU cores, processes markets in small batches to prevent memory leaks, and uses a ProcessPoolExecutor to manage the workload efficiently.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/performance.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport math\nimport smart_open\nfrom concurrent import futures\nfrom unittest.mock import patch as mock_patch\nfrom flumine import FlumineSimulation, clients, utils\nfrom strategies.lowestlayer import LowestLayer\n\n\ndef run_process(markets):\n    client = clients.SimulatedClient()\n    framework = FlumineSimulation(client=client)\n    strategy = LowestLayer(\n        market_filter={\"markets\": markets},\n        context={\"stake\": 2},\n    )\n    with mock_patch(\"builtins.open\", smart_open.open):\n        framework.add_strategy(strategy)\n        framework.run()\n\n\nif __name__ == \"__main__\":\n    all_markets = [...]\n    processes = os.cpu_count()\n    markets_per_process = 8  # optimal\n\n    _process_jobs = []\n    with futures.ProcessPoolExecutor(max_workers=processes) as p:\n        chunk = min(\n            markets_per_process, math.ceil(len(all_markets) / processes)\n        )\n        for m in (utils.chunks(all_markets, chunk)):\n            _process_jobs.append(\n                p.submit(\n                    run_process,\n                    markets=m,\n                )\n            )\n        for job in futures.as_completed(_process_jobs):\n            job.result()  # wait for result\n```\n\n----------------------------------------\n\nTITLE: Forcing Order Execution in Flumine\nDESCRIPTION: Demonstrates how to bypass trading controls when placing or modifying orders by using the force parameter. This is useful for operations that need to execute regardless of control validations.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/controls.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmarket.place_order(order, force=True)\ntransaction.place_order(order, force=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware in Flumine (Python)\nDESCRIPTION: Shows how to create a custom middleware class in Flumine. The middleware can perform analysis on markets before they are passed to strategies. It includes methods for handling market addition, removal, and updates.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/markets.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.markets.middleware import Middleware\n\nclass CustomMiddleware(Middleware):\n    def __call__(self, market) -> None:\n        pass  # called on each MarketBook update\n\n    def add_market(self, market) -> None:\n        print(\"market {0} added\".format(market.market_id))\n\n    def remove_market(self, market) -> None:\n        print(\"market {0} removed\".format(market.market_id))\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Middleware to Flumine Framework (Python)\nDESCRIPTION: Demonstrates how to add a custom middleware to the Flumine framework. This allows the middleware to be executed on market updates before strategies are processed.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/markets.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nframework.add_logging_control(CustomMiddleware())\n```\n\n----------------------------------------\n\nTITLE: Configuring Listener Parameters for Simulation\nDESCRIPTION: Shows how to optimize simulation by filtering market data based on specific conditions like inplay status and timing.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter={\n        \"markets\": [\"/tmp/marketdata/1.170212754\"],\n        \"listener_kwargs\": {\"inplay\": False, \"seconds_to_start\": 600},\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Processing in Simulation\nDESCRIPTION: Demonstrates how to enable event processing to handle multiple markets within the same event during simulation.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter={\"markets\": [..], \"event_processing\": True}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Simulated Client to Flumine Simulation\nDESCRIPTION: Shows how to initialize a simulation environment using FlumineSimulation and add a SimulatedClient with a specific username.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/clients.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine import FlumineSimulation, clients\n\nframework = FlumineSimulation()\n\nclient = clients.SimulatedClient(username=\"123\")\nframework.add_client(client)\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Custom Background Worker in Flumine\nDESCRIPTION: This snippet demonstrates how to create a custom background worker and add it to the Flumine framework. It defines a simple function that prints its name parameter, then creates a BackgroundWorker instance with a 10-second interval, and finally registers the worker with the framework.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/workers.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.worker import BackgroundWorker\n\ndef func(context: dict, flumine, name=\"\"):\n    print(name)\n\n    \nworker = BackgroundWorker(\n    framework, interval=10, function=func, func_args=(\"hello\",)\n)\n\nframework.add_worker(\n    worker\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Race Data Recorder in Flumine\nDESCRIPTION: This code shows how to set up a MarketRecorder strategy for recording race data streams. It uses the RaceDataStream class and configures local storage options for the recorded data.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/sportsdata.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.streams.datastream import RaceDataStream\n\nstrategy= MarketRecorder(\n    market_filter=None,\n    stream_class=RaceDataStream,\n    context={\n        \"local_dir\": \"/tmp\",\n        \"force_update\": False,\n        \"remove_file\": True,\n        \"remove_gz_file\": False,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Event Group Processing\nDESCRIPTION: Shows how to group events for parallel processing during simulation by creating event groups.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter={\"markets\": [..], \"event_processing\": True, \"event_groups\": {\"123\": \"A\", \"456\": \"A\"}}\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Event Markets in Flumine\nDESCRIPTION: Shows how to access other markets related to the current event.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nplace_market = market.event[\"PLACE\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logging Control in Flumine\nDESCRIPTION: Shows how to implement custom logging by creating and adding a LoggingControl instance to the framework. This enables debug logging functionality and can be combined with other logging controls.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/controls.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.controls.loggingcontrols import LoggingControl\n\ncontrol = LoggingControl()\n\nframework.add_logging_control(control)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stream in Flumine\nDESCRIPTION: Example of creating a custom stream by extending BaseStream class. Shows how to implement a custom event handling system with API calls and callback functions.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.streams.basestream import BaseStream\nfrom flumine.events.events import CustomEvent\n\n\nclass CustomStream(BaseStream):\n    def run(self) -> None:\n        # connect to stream / make API requests etc.\n        response = api_call()\n\n        # callback func\n        def callback(framework, event):\n            for strategy in framework.strategies:\n                strategy.process_my_event(event)\n\n        # push results through using custom event\n        event = CustomEvent(response, callback)\n\n        # put in main queue\n        self.flumine.handler_queue.put(event)\n\n\ncustom_stream = CustomStream(framework, custom=True)\nframework.streams.add_custom_stream(custom_stream)\n```\n\n----------------------------------------\n\nTITLE: Accessing Real DateTime During Simulation\nDESCRIPTION: Example of using context manager to access actual datetime when running simulations, bypassing the patched utcnow.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/advanced.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\n\nwith framework.simulated_datetime.real_time():\n    print(datetime.datetime.utcnow())\n```\n\n----------------------------------------\n\nTITLE: Accessing Clients Within a Strategy\nDESCRIPTION: Demonstrates helper functions for accessing clients from within a strategy implementation, including getting the default Betfair client or a specific client by exchange type and username.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/clients.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbetfair_client = self.clients.get_betfair_default()\n\nclient = self.clients.get_client(ExchangeType.SIMULATED, username=\"123\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy with Time Constraints in Flumine\nDESCRIPTION: This snippet demonstrates how to limit market updates by setting time constraints (600 seconds before start) and disabling in-play updates in a Flumine strategy. These listener_kwargs are passed to betfairlightweight to reduce processing load.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/performance.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter={\n        \"markets\": [\"/tmp/marketdata/1.170212754\"],\n        \"listener_kwargs\": {\"seconds_to_start\": 600, \"inplay\": False},\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy for In-Play Markets Only in Flumine\nDESCRIPTION: This code shows how to configure a Flumine strategy to only process in-play market updates. Using the listener_kwargs parameter with inplay=True filters out all pre-play market data, significantly reducing processing overhead.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/performance.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter={\n        \"markets\": [\"/tmp/marketdata/1.170212754\"],\n        \"listener_kwargs\": {\"inplay\": True},\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Markets for Simulation\nDESCRIPTION: Demonstrates how to filter markets during simulation based on market types and country codes.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/quickstart.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter={\n        \"markets\": [..], \n        \"market_types\": [\"MATCH_ODDS\"], \n        \"country_codes\": [\"GB\"]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cricket Data Recorder in Flumine\nDESCRIPTION: This code demonstrates how to set up a MarketRecorder strategy for recording cricket data streams. It uses the CricketDataStream class and configures local storage options for the recorded data.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/sportsdata.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flumine.streams.datastream import CricketDataStream\n\nstrategy= MarketRecorder(\n    market_filter=None,\n    stream_class=CricketDataStream,\n    context={\n        \"local_dir\": \"/tmp\",\n        \"force_update\": False,\n        \"remove_file\": True,\n        \"remove_gz_file\": False,\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flumine via pip\nDESCRIPTION: Command line instruction for installing the Flumine package using pip package manager\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install flumine\n```\n\n----------------------------------------\n\nTITLE: Installing Flumine via pip\nDESCRIPTION: Command to install the Flumine framework using pip. Requires Python 3.8 or higher.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install flumine\n```\n\n----------------------------------------\n\nTITLE: Reducing Logging Overhead in Flumine\nDESCRIPTION: This snippet shows how to reduce the overhead from logging by setting the log level to CRITICAL. This eliminates most log output, which can significantly improve performance in Python applications.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/performance.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogger.setLevel(logging.CRITICAL)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Logging in Flumine\nDESCRIPTION: Setup for JSON-formatted logging using pythonjsonlogger with custom formatting and GMT time conversion.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport logging\nfrom pythonjsonlogger import jsonlogger\n\nlogger = logging.getLogger()\n\ncustom_format = \"%(asctime) %(levelname) %(message)\"\nlog_handler = logging.StreamHandler()\nformatter = jsonlogger.JsonFormatter(custom_format)\nformatter.converter = time.gmtime\nlog_handler.setFormatter(formatter)\nlogger.addHandler(log_handler)\nlogger.setLevel(logging.INFO)\n```\n\n----------------------------------------\n\nTITLE: Using cprofilev for Performance Profiling in Flumine\nDESCRIPTION: This command demonstrates how to use cprofilev to profile a Flumine simulation script. Profiling helps identify performance bottlenecks by providing detailed information about function call frequencies and execution times.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/performance.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m cprofilev examples/simulate.py\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Creating DataFrames in Python\nDESCRIPTION: Imports required libraries (json, pandas, seaborn, matplotlib) and creates three DataFrames (df_strategies, df_markets, df_orders) from a JSON file containing backtest results.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/examples/controls/analysis.ipynb#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.set_theme(style=\"darkgrid\")\n\nfilename = \"/tmp/orders.json\"\n\nwith open(filename, \"r\") as f:\n    data = json.load(f)\n    df_strategies = pd.DataFrame(data[\"strategies\"])\n    df_markets = pd.DataFrame(data[\"markets\"])\n    df_orders = pd.DataFrame(data[\"orders\"])\n```\n\n----------------------------------------\n\nTITLE: Merging DataFrames in Python\nDESCRIPTION: Joins the previously created DataFrames (df_orders, df_markets, df_strategies) into a single DataFrame 'df' using market_id and strategy_name as join keys.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/examples/controls/analysis.ipynb#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = pd.merge(df_orders, df_markets, left_on=\"market_id\", right_on=\"market_id\", how=\"left\")\ndf = pd.merge(df, df_strategies, left_on=\"trade__strategy\", right_on=\"strategy_name\", how=\"left\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cumulative Profit and ROI in Python\nDESCRIPTION: Creates a visualization of cumulative profit and ROI across different race types using seaborn and matplotlib. The plot shows two subplots: cumulative profit and cumulative ROI, both plotted against the average price matched.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/examples/controls/analysis.ipynb#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngroup_by = \"race_type\"\nx_axis = \"info__average_price_matched\"\nxlim = None\nylim = None\npalette = \"ch:r=-.5,l=.75\"\n\ndf = df.sort_values(x_axis)\ndf['cum_profit'] = df.simulated__profit.groupby(df[group_by]).cumsum()\ndf['cum_roi'] = df.simulated__profit.groupby(df[group_by]).cumsum() / df.info__size_matched.groupby(df[group_by]).cumsum()\n\nf, ax = plt.subplots(figsize=(16, 7), nrows=2, gridspec_kw={'height_ratios':[3, 1]})\n\n# Profit\nsns.lineplot(\n    ax=ax[0], x=x_axis, y=\"cum_profit\", hue=group_by, data=df, palette=palette, legend=False\n)\nax[0].set(xlabel=None, ylabel=\"Profit (£)\")\n\n# ROI\nsns.lineplot(\n    ax=ax[1], x=x_axis, y=\"cum_roi\", hue=group_by, data=df, palette=palette\n)\nax[1].set(xlabel=\"Average Price Matched\", ylabel=\"ROI (%)\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Listing Project Dependencies for Flumine\nDESCRIPTION: A requirements file that specifies all the necessary packages and their versions for the Flumine project. It includes core operational dependencies, testing tools, documentation tools, and packaging utilities.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbetfairlightweight==2.20.4\ntenacity>=7.0.0,<8.3.1\npython-json-logger==2.0.7\nrequests\nbetconnect==0.2.2\nsmart-open>=6,<8\nbetdaq-retail==0.1.1\n\n# Tests & Linting\nblack==24.8.0\ncoverage\npre-commit\n\n# Documentation\nmkdocs\nmkdocs-material\n\n# Packaging\nbuild\ntwine\n```\n\n----------------------------------------\n\nTITLE: Specifying betfairlightweight Dependency Version with Speed Qualifier\nDESCRIPTION: Defines a specific version requirement for the betfairlightweight package with a speed qualifier. This format appears to be for a dependency management system, specifying that version 2.20.4 of the betfairlightweight package should be used with the speed feature or configuration.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/requirements-speed.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbetfairlightweight[speed]==2.20.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Cricket Subscription in Flumine Strategy\nDESCRIPTION: This code demonstrates how to add a cricket subscription to a strategy using the sports_data_filter parameter. It configures the strategy to receive data for cricket matches with market type MATCH_ODDS.\nSOURCE: https://github.com/betcode-org/flumine/blob/master/docs/sportsdata.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstrategy = ExampleStrategy(\n    market_filter=streaming_market_filter(\n        event_type_ids=[\"4\"], market_types=[\"MATCH_ODDS\"]\n    ),\n    sports_data_filter=[\"cricketSubscription\"],\n)\n```"
  }
]