[
  {
    "owner": "ddsjoberg",
    "repo": "gtsummary.git",
    "content": "TITLE: Creating Customized Summary Table in R\nDESCRIPTION: Advanced example demonstrating custom summary table creation with group comparisons and formatting options.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ntable2 <-\n  tbl_summary(\n    trial,\n    include = c(age, grade, response),\n    by = trt, # split table by group\n    missing = \"no\" # don't list missing data separately\n  ) |> \n  add_n() |> # add column with total number of non-missing observations\n  add_p() |> # test for a difference between groups\n  modify_header(label = \"**Variable**\") |> # update the column header\n  bold_labels()\n```\n\n----------------------------------------\n\nTITLE: Creating Regression Model Summary in R\nDESCRIPTION: Example showing how to create a regression model summary table using tbl_regression().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nmod1 <- glm(response ~ trt + age + grade, trial, family = binomial)\n\nt1 <- tbl_regression(mod1, exponentiate = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Basic Univariate Regression Output in R\nDESCRIPTION: Demonstrates basic usage of tbl_uvregression() function outputting beta coefficients and confidence intervals for marker level and age outcomes.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_uvregression.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl1)\n```\n\n----------------------------------------\n\nTITLE: New Functions Added in gtsummary v1.0.0\nDESCRIPTION: Lists new functions introduced in version 1.0.0 after major refactoring to use the gt package as the print engine. These functions expand the package's capabilities for table creation and formatting.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_26\n\nLANGUAGE: r\nCODE:\n```\ntbl_survival()          as_gt()  \ntbl_merge()             style_sigfig()  \nadd_nevent()            gtsummary_logo()\n```\n\n----------------------------------------\n\nTITLE: Basic usage of tbl_continuous() function in R\nDESCRIPTION: Demonstrates basic usage of tbl_continuous() function and how to display the results as a data frame. The output shows a summary of continuous variables split by treatment groups.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Summary Table in R\nDESCRIPTION: Example showing how to create a basic summary table using tbl_summary() function with the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nlibrary(gtsummary)\n\n# summarize the data with our package\ntable1 <-\n  trial |> \n  tbl_summary(include = c(age, grade, response))\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Regression Tables in R\nDESCRIPTION: Example demonstrating how to create and merge multiple regression model tables side by side.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nlibrary(survival)\n\n# build survival model table\nt2 <-\n  coxph(Surv(ttdeath, death) ~ trt + grade + age, trial) |> \n  tbl_regression(exponentiate = TRUE)\n\n# merge tables\ntbl_merge_ex1 <-\n  tbl_merge(\n    tbls = list(t1, t2),\n    tab_spanner = c(\"**Tumor Response**\", \"**Time to Death**\")\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing gtsummary Package in R\nDESCRIPTION: Basic installation command for the gtsummary package from CRAN repository.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ninstall.packages(\"gtsummary\")\n```\n\n----------------------------------------\n\nTITLE: Linear Regression with Parsnip Model\nDESCRIPTION: Creates a regression table using parsnip's linear regression model to analyze age based on grade and stage variables using the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(parsnip::fit(parsnip::set_mode(parsnip::set_engine(parsnip::linear_reg(), \"lm\"), \"regression\"), age ~ grade + stage, data = trial)))\n```\n\n----------------------------------------\n\nTITLE: Basic tbl_summary Usage with Trial Dataset\nDESCRIPTION: Demonstrates basic usage of tbl_summary() function with the trial dataset, showing descriptive statistics for all variables including demographics and clinical outcomes.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_summary(data = trial))\n```\n\n----------------------------------------\n\nTITLE: Grouped Summaries Using tbl_summary by Variable\nDESCRIPTION: Demonstrates creating grouped summary statistics using the 'by' parameter with different datasets including trial, mtcars, and iris.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_summary(data = trial, by = trt))\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_summary(data = mtcars, by = am))\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_summary(data = iris, by = Species))\n```\n\n----------------------------------------\n\nTITLE: Testing Value Parameter in tbl_summary\nDESCRIPTION: Shows how to use the value parameter in tbl_summary() to specify reference levels for dichotomous variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary(trial, value = \"grade\" ~ \"IV\", include = c(grade, response))\n```\n\n----------------------------------------\n\nTITLE: Mixed Effects Model with lme4\nDESCRIPTION: Fits a linear mixed effects model using lme4 package to analyze mpg based on horsepower with cylinder as random effect using the mtcars dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(lme4::lmer(mpg ~ hp + (1 | cyl), mtcars)))\n```\n\n----------------------------------------\n\nTITLE: tbl_summary with iris Dataset\nDESCRIPTION: Illustrates tbl_summary() usage with the iris dataset, summarizing flower measurements across different species.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_summary(data = iris))\n```\n\n----------------------------------------\n\nTITLE: Testing Variable Type Specifications in tbl_summary\nDESCRIPTION: Demonstrates how to specify different variable types (continuous, continuous2, dichotomous, categorical) in tbl_summary() function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ndplyr::select(getElement(tbl_summary(trial, include = c(age, marker, response, stage), type = list(age = \"continuous\", marker = \"continuous2\", response = \"dichotomous\", state = \"categorical\"), missing = \"no\"), \"table_body\"), variable, var_type, row_type, label)\n```\n\n----------------------------------------\n\nTITLE: Using tbl_summary with Variable Labels in R\nDESCRIPTION: These examples demonstrate the various ways to specify variable labels when using the tbl_summary function in gtsummary. The syntax allows for bare/symbol inputs, character inputs, stored variables, and tidyselect helpers.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_22\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary(trial, label = age ~ \"NEW LABEL\"))\ntbl_summary(trial, label = \"age\" ~ \"NEW LABEL\"))\ntbl_summary(trial, label = c(\"age\", \"trt\") ~ \"NEW LABEL\"))\ntbl_summary(trial, label = c(age, trt) ~ \"NEW LABEL\"))\ntbl_summary(trial, label = vars(age, trt) ~ \"NEW LABEL\"))\ntbl_summary(trial, label = vars(everything(), -age, -trt) ~ \"NEW LABEL\"))\n\nage_column = \"age\"\ntbl_summary(trial, label = age_column ~ \"NEW LABEL\"))\ntbl_summary(trial, label = vars(age_column) ~ \"NEW LABEL\")\n\npurrr::map(c(\"trt\", \"grade\"), ~tbl_summary(trial, by = .x))\n```\n\n----------------------------------------\n\nTITLE: Survival Analysis with Survreg\nDESCRIPTION: Performs survival analysis using survreg to examine the relationship between survival time and age plus ECOG performance status using the lung cancer dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(survival::survreg(survival::Surv(time, status) ~ age + ph.ecog, data = survival::lung)))\n```\n\n----------------------------------------\n\nTITLE: Modifying Headers in tbl_summary with by Variable\nDESCRIPTION: Example of using modify_header() with tbl_summary() to customize column headers. Shows usage of {level} and {n} placeholders to display group levels and sample sizes.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\ntrial %>%\n    tbl_summary(by = trt) %>%\n    add_overall() %>%\n    modify_header(all_stat_cols() ~ \"**{level}**, N = {n}\")\n```\n\n----------------------------------------\n\nTITLE: Continuous Variable Analysis with P-Values\nDESCRIPTION: Shows p-value calculation for continuous variables using the continuous2 type specification, including age, marker, and response variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nselect(as.data.frame(add_p(tbl_summary(trial, by = grade, include = c(age, marker, response), type = all_continuous() ~ \"continuous2\")), col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Regression with Intercept Display\nDESCRIPTION: Testing regression output with explicit intercept display.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(lm(age ~ marker, trial), intercept = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Testing Column Hiding and Unhiding in gtsummary Regression Tables in R\nDESCRIPTION: This code tests the modify_column_hide() and modify_column_unhide() functions with a regression table. It creates a linear regression model of age vs marker and grade from the trial dataset, hides the conf.low column, then unhides the std.error column, and converts the result to a data frame for display.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_column_hide.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_unhide(modify_column_hide(tbl_regression(lm(age ~\n  marker + grade, trial)), column = conf.low), column = std.error))\n```\n\n----------------------------------------\n\nTITLE: Adding observation counts to tbl_summary with custom statistics\nDESCRIPTION: Demonstrates successful usage of add_n() with tbl_summary() to add observation counts. Uses custom statistic format '{N_nonmiss} / {N_obs}' with footnote enabled and positioned last.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_n.tbl_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_n(tbl_summary(trial, include = c(age, grade, response)), statistic = \"{N_nonmiss} / {N_obs}\", footnote = TRUE, last = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Multinomial Regression\nDESCRIPTION: Fits a multinomial regression model using nnet package to analyze cylinder categories based on transmission type in the mtcars dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(nnet::multinom(cyl ~ am, mtcars)))\n```\n\n----------------------------------------\n\nTITLE: Logistic Regression with Workflow\nDESCRIPTION: Implements a logistic regression using workflows package to analyze response factor based on age and stage predictors.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(parsnip::fit(workflows::add_formula(workflows::add_model(workflows::workflow(), parsnip::set_engine(parsnip::logistic_reg(), \"glm\")), factor(response) ~ age + stage), data = trial)))\n```\n\n----------------------------------------\n\nTITLE: Creating Statistical Summary Table with tbl_wide_summary in R\nDESCRIPTION: Generates a wide-format summary table for continuous variables (age and marker) showing mean and standard deviation. Shows how to customize statistics using the statistic parameter.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_wide_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_wide_summary(trial, include = c(age, marker), statistic = c(\"{mean}\", \"{sd}\")))\n```\n\n----------------------------------------\n\nTITLE: Univariate Regression Results Table in R\nDESCRIPTION: Presents univariate regression analysis results including beta coefficients, confidence intervals and p-values for various clinical predictors.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_kable.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nkbl_uvregression\n```\n\n----------------------------------------\n\nTITLE: Standardizing Linear Regression Results with tidy_standardize() in R\nDESCRIPTION: This snippet demonstrates the use of tidy_standardize() function to standardize the results of a linear regression model. It fits a model predicting age based on grade and marker variables from the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/custom_tidiers.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ntidy_standardize(lm(age ~ grade + marker, trial))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_merge Results Display\nDESCRIPTION: Shows the data frame conversion of merged table results, displaying marker level statistics with beta coefficients and confidence intervals.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Adding Overall Column to tbl_hierarchical in R\nDESCRIPTION: This code demonstrates applying the add_overall() function to a hierarchical table, creating a summary column of adverse events across all treatment groups. It displays the result as a data frame for easy viewing, showing adverse events by system organ class with counts and percentages.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_hierarchical.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_overall(tbl))\n```\n\n----------------------------------------\n\nTITLE: Saving gtsummary Tables in R\nDESCRIPTION: Example showing how to save gtsummary tables to various file formats using gt package.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\ntbl |> \n  as_gt() |> \n  gt::gtsave(filename = \".\") # use extensions .png, .html, .docx, .rtf, .tex, .ltx\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary with Formatted Statistical Values and Differences\nDESCRIPTION: Displays a custom summary table for Grade and T Stage variables with formatted statistical values showing high/low indicators and difference calculations across three stat columns.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ntbl\n```\n\n----------------------------------------\n\nTITLE: tbl_summary with mtcars Dataset\nDESCRIPTION: Shows how tbl_summary() handles the built-in mtcars dataset, providing summary statistics for automotive measurements and specifications.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_summary(data = mtcars))\n```\n\n----------------------------------------\n\nTITLE: Handling Dichotomous Variables with CIs in gtsummary (R)\nDESCRIPTION: This code demonstrates how add_ci() correctly handles dichotomous variables in a gtsummary table. It shows the confidence intervals for both tumor response and grade variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Removing Bold Formatting from Regression Output in R\nDESCRIPTION: Creates a logistic regression model with gtsummary, applies bold formatting to p-values, then removes it. The example demonstrates the workflow of formatting and unformatting in the gtsummary package.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_bold_italic.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(remove_bold(bold_p(tbl_regression(glm(response ~ death, trial, family = binomial())))), col_labels = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Variable Type Specification\nDESCRIPTION: Demonstrates specifying variable types for customized summary statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ndplyr::select(getElement(tbl_svysummary(svy_trial, include = c(age, marker, response, stage), type = list(age = \"continuous\", marker = \"continuous2\", response = \"dichotomous\", state = \"categorical\"), missing = \"no\"), \"table_body\"), variable, var_type, row_type, label)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Percent Formatting in tbl_summary with Curly Brackets\nDESCRIPTION: Example showing how to use curly brackets in the statistic parameter of tbl_summary() to format mean values. Double curly brackets are escaped to a single bracket, resulting in the mean value being displayed within curly braces in the final table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ntbl_summary(statistic=~\"{{{mean}}}\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Statistical Replication in add_difference.tbl_summary() in R\nDESCRIPTION: This snippet tests whether various statistical methods (t-test, Wilcoxon test, proportion test, ANCOVA, Cohen's d, Hedges' g, SMD) are correctly replicated within add_difference.tbl_summary().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(tbl_test.args, all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Exponentiated Logistic Regression with Custom Formatting\nDESCRIPTION: Testing logistic regression with exponentiated results (odds ratios) and custom digit formatting using label_style_ratio.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(mod_logistic, exponentiate = TRUE, estimate_fun = label_style_ratio(digits = 1)))\n```\n\n----------------------------------------\n\nTITLE: Summarizing Categorical Data with Missing Values in R\nDESCRIPTION: Creates a wide summary table of dichotomous and categorical variables from trial data, including missing values and attributes. Shows response and grade statistics with percentages.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_wide_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_wide_summary(cards::ard_stack(trial, cards::ard_dichotomous(\n        variables = response), cards::ard_categorical(variables = grade), .missing = TRUE,\n      .attributes = TRUE)))\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Linear Regression Results with tidy_bootstrap() in R\nDESCRIPTION: This snippet shows the output of the tidy_bootstrap() function applied to a linear regression model. It provides bootstrapped estimates, confidence intervals, and p-values for the model parameters.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/custom_tidiers.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ndf\n```\n\n----------------------------------------\n\nTITLE: Processing Difference Estimates with Confidence Intervals in R\nDESCRIPTION: Shows the handling of statistical differences with confidence intervals and p-values. Includes formatting for both t-test and standardized mean difference results.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/separate_p_footnotes.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(dplyr::mutate(dplyr::filter(getElement(getElement(separate_p_footnotes(add_difference(tbl)), \"table_styling\"), \"footnote_body\"), dplyr::row_number() %in% seq(dplyr::n(), dplyr::n() - 4L)), rows = map_chr(rows, ~ expr_deparse(quo_squash(.x)))))\n```\n\n----------------------------------------\n\nTITLE: Adding Overall Column to tbl_hierarchical_count in R\nDESCRIPTION: This code shows how add_overall() works with a tbl_hierarchical_count object, creating a summary column counting adverse events across all treatment groups. The resulting table shows counts stratified by severity/intensity and organized hierarchically by organ system.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_hierarchical.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_overall(tbl))\n```\n\n----------------------------------------\n\nTITLE: Linear Regression Basic Test\nDESCRIPTION: Basic test of stats::lm() linear regression output formatting.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(mod_lm))\n```\n\n----------------------------------------\n\nTITLE: Testing add_difference.tbl_summary() with Grouped Data in R\nDESCRIPTION: This code checks the functionality of add_difference.tbl_summary() when applied to grouped data, testing various statistical methods including ANCOVA with lme4, paired t-test, and paired effect sizes.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(tbl_groups, all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Basic Survey Summary - Titanic Dataset\nDESCRIPTION: Generates a basic statistical summary of survey data from the Titanic dataset using tbl_svysummary(). Shows counts and percentages for categorical variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(data = svy_titanic))\n```\n\n----------------------------------------\n\nTITLE: Customizing CI Statistics in gtsummary Table (R)\nDESCRIPTION: This code customizes the confidence interval statistics for continuous and categorical variables in a gtsummary table. It uses different formats for displaying CIs based on variable type.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(add_ci(tbl_summary(trial, include = c(age, grade), by = trt,\nmissing = \"no\"), statistic = list(all_continuous() ~ \"{conf.low} - {conf.high}\",\nall_categorical() ~ \"{conf.low}% - {conf.high}%\")))\n```\n\n----------------------------------------\n\nTITLE: Basic Survey Summary - MTCars Dataset\nDESCRIPTION: Creates a statistical summary of the mtcars survey dataset, including numeric summaries and categorical breakdowns.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(data = svy_mtcars))\n```\n\n----------------------------------------\n\nTITLE: tbl_svysummary Percentage Calculations in R\nDESCRIPTION: Demonstrates different percentage calculation methods (column, row, cell) in summary tables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_10\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(svy_trial, by = trt, include = grade, percent = \"column\", statistic = ~\"{p}%\"), col_labels = FALSE)\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(svy_trial, by = trt, include = grade, percent = \"row\", statistic = ~\"{p}%\"), col_labels = FALSE)\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(svy_trial, by = trt, include = grade, percent = \"cell\", statistic = ~\"{p}%\"), col_labels = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Linear Regression with Interactions Test\nDESCRIPTION: Testing linear regression output with multiple interaction terms and custom treatment label.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(mod_lm_interaction, label = list(trt = \"Tx\")))\n```\n\n----------------------------------------\n\nTITLE: Basic Likert Table Generation with N Count\nDESCRIPTION: Creates a basic Likert scale table with added N count column using add_n() function. Shows response distributions for recommend_friend and regret_purchase variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_likert.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_n(tbl_likert(df_likert)))\n```\n\n----------------------------------------\n\nTITLE: Custom Statistics in tbl_hierarchical\nDESCRIPTION: Shows how to use custom statistics formatting in the output using the statistic parameter\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_hierarchical(data = trial2, variables = c(stage, grade), denominator = trial2, id = id, statistic = ~\"{n}, {N}, {p}\"))\n```\n\n----------------------------------------\n\nTITLE: Method-Specific Univariate Regression in R\nDESCRIPTION: Shows how to use tbl_uvregression with different methods, outputting results for marker level and grade categories.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_uvregression.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl1)\n```\n\n----------------------------------------\n\nTITLE: Customizing statistics in tbl_continuous() with R\nDESCRIPTION: Shows how to customize the statistics displayed for different variables using the 'statistic' parameter. The example uses different statistics for treatment and grade variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_continuous(trial, variable = age, include = c(trt, grade),\nstatistic = list(trt = \"{var}\", grade = \"{sd}\")))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical with Ordered Variables\nDESCRIPTION: Test case showing hierarchical table output for medical disorders with severity levels and treatment groups.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res_o)\n```\n\n----------------------------------------\n\nTITLE: Customizing Summary Statistics Display\nDESCRIPTION: Demonstrates custom formatting of summary statistics using the statistic parameter to modify how continuous and categorical results are displayed.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_summary(ard, statistic = list(all_continuous() ~\n\"{median}\", all_categorical() ~ \"{n} / {N} (Total {N_obs})\")))\n```\n\n----------------------------------------\n\nTITLE: Adding Model Fit Statistics using add_glance_table in R\nDESCRIPTION: Demonstrates adding model fit statistics to a regression table by combining add_glance_table() with tbl_regression(). The example uses a linear model examining the relationship between age and treatment in the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_glance.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_glance_table(tbl_regression(lm(age ~ trt, trial))))\n```\n\n----------------------------------------\n\nTITLE: Testing NEJM Journal Theme in R\nDESCRIPTION: Demonstrates New England Journal of Medicine theme with age data analysis.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/theme_gtsummary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nwith_gtsummary_theme(theme_gtsummary_journal(\"nejm\"), expr = as.data.frame(modify_column_hide(add_difference(tbl_summary(trial, by = trt, include = age, label = age ~ \"Age\", missing = \"no\")), c(\"stat_2\"))))\n```\n\n----------------------------------------\n\nTITLE: Formatted VIF Output with Custom Precision\nDESCRIPTION: Demonstrates adding VIF statistics with custom number formatting using estimate_fun parameter. Uses label_style_sigfig to display VIF values with 5 significant digits.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_vif.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_vif(tbl_regression(lm(age ~ marker + response, trial)), statistic = \"VIF\", estimate_fun = label_style_sigfig(digits = 5)))\n```\n\n----------------------------------------\n\nTITLE: Testing theme_gtsummary_eda Implementation in R\nDESCRIPTION: Demonstrates the usage of theme_gtsummary_eda() with tbl_summary for age and grade data visualization.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/theme_gtsummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(with_gtsummary_theme(theme_gtsummary_eda(), expr = tbl_summary(trial, include = c(age, grade))))\n```\n\n----------------------------------------\n\nTITLE: Logistic Regression Output Test in R\nDESCRIPTION: Testing stats::glm() logistic regression output formatting with gtsummary. Shows log odds ratios with confidence intervals and p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(mod_logistic))\n```\n\n----------------------------------------\n\nTITLE: Basic VIF Addition to Regression Table\nDESCRIPTION: Adds basic VIF statistics to a linear regression model analyzing age against marker and grade variables. Demonstrates the default output format with GVIF and Adjusted GVIF columns.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_vif.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_vif(tbl_regression(lm(age ~ marker + grade, trial))))\n```\n\n----------------------------------------\n\nTITLE: Testing JAMA Journal Theme in R\nDESCRIPTION: Shows multiple implementations of JAMA journal theme with various data analyses.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/theme_gtsummary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nwith_gtsummary_theme(theme_gtsummary_journal(\"jama\"), expr = as.data.frame(modify_column_hide(add_difference(tbl_summary(trial, by = trt, include = age, label = age ~ \"Age\", missing = \"no\")), c(\"stat_2\"))))\n```\n\nLANGUAGE: r\nCODE:\n```\nwith_gtsummary_theme(theme_gtsummary_journal(\"jama\"), expr = as.data.frame(tbl_regression(lm(hp ~ am, mtcars))))\n```\n\n----------------------------------------\n\nTITLE: Exponentiated Poisson Regression Test\nDESCRIPTION: Testing Poisson regression with exponentiated results showing incidence rate ratios (IRR).\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(mod_poisson, exponentiate = TRUE, show_single_row = \"trt\", estimate_fun = label_style_ratio(digits = 1)))\n```\n\n----------------------------------------\n\nTITLE: Basic P-Value Addition to Summary Table\nDESCRIPTION: Creates a summary table with p-values for trial data grouped by grade. Selects specific columns and removes statistical columns from output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nselect(as.data.frame(add_p(tbl_summary(trial, by = grade), col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting with Digits Parameter in tbl_cross\nDESCRIPTION: Shows advanced formatting using the digits parameter to control decimal places in different statistics, including counts and percentages.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_cross.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_cross(dplyr::bind_rows(rep(list(trial), 11L)), row = grade, col = trt, statistic = \"{n}/{N_nonmiss}/{N} ({p}%)\", digits = c(0, 0, 0, 4)))\n```\n\n----------------------------------------\n\nTITLE: Filtering values with tbl_continuous() in R\nDESCRIPTION: Shows how to filter the values displayed in the table using the 'value' parameter. The example filters to only show the 'Drug B' treatment group.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ndf <- as.data.frame(tbl_continuous(trial, variable = age, include = c(trt,\n  grade), value = trt ~ \"Drug B\"))\ndf\n```\n\nLANGUAGE: r\nCODE:\n```\ndf <- as.data.frame(tbl_continuous(trial, variable = age, include = c(trt,\n  grade), by = response, value = trt ~ \"Drug B\"))\ndf\n```\n\n----------------------------------------\n\nTITLE: Viewing Group Table Data Frame\nDESCRIPTION: Displays group comparison table results as a data frame.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_groups)\n```\n\n----------------------------------------\n\nTITLE: Merge Table Output in R using gtsummary\nDESCRIPTION: Displays a merged statistical table comparing tumor response and time to death across different characteristics. Shows odds ratios, hazard ratios, confidence intervals and p-values organized in a formatted layout.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_hux_table.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nht_merge\n# Output shows a merged table with columns:\n# label, estimate_1, conf.low_1, p.value_1, estimate_2, conf.low_2, p.value_2\n```\n\n----------------------------------------\n\nTITLE: Custom VIF Statistics Selection\nDESCRIPTION: Adds specific VIF statistics (degrees of freedom and adjusted GVIF) to regression output using the statistic parameter. Shows how to customize which VIF-related statistics are displayed.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_vif.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_vif(tbl_regression(lm(age ~ marker + grade, trial)), statistic = c(\"df\", \"aGVIF\")))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating tbl_summary Dichotomous Change in R\nDESCRIPTION: Example of how dichotomous variables are handled in tbl_summary(). Shows that c(0, 1), c(\"no\", \"yes\"), c(\"No\", \"Yes\"), and c(\"NO\", \"YES\") patterns now require observed values or explicit factor/logical definitions.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nc(0, 1)\nc(\"no\", \"yes\")\nc(\"No\", \"Yes\")\nc(\"NO\", \"YES\")\n```\n\n----------------------------------------\n\nTITLE: Likert Table with Custom Digit Formatting\nDESCRIPTION: Creates a Likert table with custom digit formatting using label_style_sigfig to display percentages with 3 significant figures scaled by 100.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_likert.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_likert(df_likert, digits = ~ list(p = label_style_sigfig(digits = 3, scale = 100))))\n```\n\n----------------------------------------\n\nTITLE: Testing add_p.tbl_survfit() with Different Table Types\nDESCRIPTION: Shows how add_p() handles a survival fit table with different type specifications, displaying percentage differences instead of survival probabilities.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_survfit.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_p(tbl))\n```\n\n----------------------------------------\n\nTITLE: Testing add_difference() with Categorical Variables in R\nDESCRIPTION: This code tests add_difference() with categorical variables, using row percentages. It includes a warning about potential compatibility issues with row percentages.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_difference(tbl_summary(select(trial, trt,\n        response, grade), by = trt, percent = \"row\")), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Adding P-values to Summary Table with Multiple Test Types\nDESCRIPTION: Creates a summary table from mtcars dataset grouped by 'am' with different statistical tests (t.test, oneway.test, chisq.test, mood.test) for various columns.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_p(tbl_summary(mtcars, by = am), test = list(mpg = \"t.test\", hp = \"oneway.test\", cyl = \"chisq.test.no.correct\", carb = \"mood.test\")))\n```\n\n----------------------------------------\n\nTITLE: Generating Robust Standard Errors with tidy_robust() in R\nDESCRIPTION: This snippet uses the tidy_robust() function to compute robust standard errors for a linear regression model. It includes exponentiated estimates and confidence intervals. Note that the function warns about unspecified vcov and vcov_args arguments.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/custom_tidiers.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\ntidy_robust(lm(age ~ grade + marker, trial), exponentiate = TRUE)\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary Helper Functions with Proportions and Confidence Intervals\nDESCRIPTION: Shows how helper functions work with tbl_custom_summary to display proportions with confidence intervals and raw counts for T Stage categories.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\ntbl\n```\n\n----------------------------------------\n\nTITLE: Summarizing Categorical and Continuous Data with Groups\nDESCRIPTION: Creates a summary table of age groups and continuous age data stratified by ARM treatment groups using cards package ARD functions.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_summary(cards::ard_stack(data = cards::ADSL, .by = ARM,\ncards::ard_categorical(variables = \"AGEGR1\"), cards::ard_continuous(variables = \"AGE\"),\n.attributes = TRUE, .missing = TRUE), by = ARM))\n```\n\n----------------------------------------\n\nTITLE: Performing Wald Test on Linear Regression with tidy_wald_test() in R\nDESCRIPTION: This code applies the tidy_wald_test() function to a linear regression model, with exponentiated results. It provides Wald test statistics and p-values for each term in the model.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/custom_tidiers.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ntidy_wald_test(lm(age ~ grade + marker, trial), exponentiate = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Creating Categorical Summary Table with tbl_wide_summary in R\nDESCRIPTION: Creates a wide-format summary table for categorical variables (response and grade) showing counts and percentages. Demonstrates basic usage of tbl_wide_summary for frequency tables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_wide_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_wide_summary(trial, include = c(response, grade)))\n```\n\n----------------------------------------\n\nTITLE: Adding P-Values to Titanic Survey Data by Survival Status\nDESCRIPTION: Shows the addition of p-values to Titanic survey data grouped by survival status, with warnings about chi-squared approximation accuracy.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nselect(as.data.frame(add_p(tbl_svysummary(svy_titanic, by = Survived)), col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Statistic Labels to Continuous Variables in R\nDESCRIPTION: This code demonstrates using add_stat_label to customize labels for continuous variables. It applies specific labels to the 'AGE' variable, showing median, IQR, and range statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_ard_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(add_stat_label(tbl_ard_summary(cards::ard_stack(data = cards::ADSL,\ncards::ard_categorical(variables = \"AGEGR1\"), cards::ard_continuous(variables = \"AGE\"),\n.attributes = TRUE, .missing = TRUE, .total_n = TRUE), type = all_continuous() ~\n  \"continuous2\", statistic = all_continuous() ~ c(\"{median} ({p25}, {p75})\",\n  \"{min} - {max}\")), label = AGE ~ c(\"Median (IQR)\", \"Range\")))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Summary Table with Overall Statistics in R using gtsummary\nDESCRIPTION: This code creates a custom summary table for a clinical trial dataset, including overall statistics. It uses the tbl_custom_summary() function with custom statistic functions and formatting, and then adds an overall column with add_overall(). The result is converted to a data frame for display.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_custom_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(add_overall(tbl_custom_summary(trial, include = c(\"stage\", \"grade\"), by = \"trt\", stat_fns = everything() ~\n  my_stats, type = everything() ~ \"continuous2\", statistic = everything() ~ \"S: {marker_sum}\")))\n```\n\n----------------------------------------\n\nTITLE: Adding Confidence Intervals After add_overall() in R\nDESCRIPTION: Example of using add_ci() after add_overall() with tbl_svysummary, showing how CIs are displayed for continuous and categorical variables across different treatment groups.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ndplyr::select(as.data.frame(add_ci(add_overall(tbl_svysummary(svy_trial, by = trt,\n  include = c(age, grade), missing = \"no\", statistic = list(all_continuous() ~\n    \"{mean}\", all_categorical() ~ \"{p}%\"))))), col_label = FALSE),\n-all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Converting Extended Statistics to Data Frame in R\nDESCRIPTION: Demonstrates converting detailed statistical analysis to data frame format including sample sizes, odds ratios, confidence intervals and p-values for multiple variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_tibble.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\n----------------------------------------\n\nTITLE: Using Label Style Prefix and Suffix Parameters\nDESCRIPTION: Example of using the prefix and suffix parameters in label style functions to add text before or after formatted results.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nlabel_style_*(prefix, suffix)\n```\n\n----------------------------------------\n\nTITLE: Testing Difference Analysis with Titanic Survey Data\nDESCRIPTION: Shows difference analysis for Titanic survival data including class, sex, age and frequency variables. Includes handling of zero-weight observations.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nselect(as.data.frame(add_difference(tbl_svysummary(svy_titanic, by = Survived)),\n      col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Using tbl_continuous() with 'by' parameter in R\nDESCRIPTION: Demonstrates how to use the 'by' parameter to stratify results by treatment group. The example summarizes age across different grade levels, split by treatment.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_continuous(trial, variable = age, include = grade, by = trt))\n```\n\n----------------------------------------\n\nTITLE: Testing add_difference() with Standardized Mean Difference (SMD) in R\nDESCRIPTION: This snippet tests the add_difference() function when used with standardized mean difference (SMD) as the effect size measure, checking output format and content.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\ntbl\n```\n\n----------------------------------------\n\nTITLE: Complex Table Modification with gtsummary in R\nDESCRIPTION: Demonstrates chaining multiple table modifications including hiding columns, adding calculated columns, and modifying headers. Creates a regression summary table with custom case and control counts.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_table_body.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_header(modify_table_body(modify_table_body(\n        modify_column_hide(tbl_regression(glm(response ~ trt + marker, trial, family = binomial)),\n        c(\"conf.low\", \"conf.high\")), ~ dplyr::mutate(.x, n_nonevent = N - nevent)),\n      dplyr::relocate, nevent, n_nonevent, .after = label), n_nonevent = \"**Control N**\",\n      nevent = \"**Case N**\"))\n```\n\n----------------------------------------\n\nTITLE: Basic tbl_custom_summary Output Structure for Mixed Variable Types\nDESCRIPTION: Shows the output structure of a basic tbl_custom_summary table containing categorical variables (grade), dichotomous variables (response), and continuous variables (marker) along with their labels and statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ntbl1\n```\n\n----------------------------------------\n\nTITLE: Sorted Likert Table Generation\nDESCRIPTION: Demonstrates creating a Likert table with descending sort order of response categories, reordering from Strongly Agree to Strongly Disagree.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_likert.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_likert(df_likert, sort = \"descending\"))\n```\n\n----------------------------------------\n\nTITLE: Using modify_table_styling with text_format\nDESCRIPTION: Example showing how to use modify_table_styling() to double indent a row with the text_format argument.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_14\n\nLANGUAGE: R\nCODE:\n```\nmodify_table_styling(text_format = \"indent2\")\n```\n\n----------------------------------------\n\nTITLE: Regression with Reference Row Estimates\nDESCRIPTION: Testing regression output with estimates added to reference rows for both linear and logistic models.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(lm(age ~ marker, trial), add_estimate_to_reference_rows = TRUE))\n```\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(glm(response ~ trt, trial, family = binomial()), add_estimate_to_reference_rows = TRUE, exponentiate = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Adding CIs to Specific Variables in gtsummary Table (R)\nDESCRIPTION: This snippet demonstrates adding confidence intervals to a specific variable (age) in a gtsummary table. It also includes an overall summary and handles missing data.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(add_ci(add_overall(tbl_summary(trial, include = c(age, grade),\nby = trt, missing = \"no\")), include = age))\n```\n\n----------------------------------------\n\nTITLE: Complex Statistical Labeling in Survey Data Analysis\nDESCRIPTION: Demonstrates advanced usage of add_stat_label() with survey data, including custom continuous variable statistics and labels.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_svysummary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_stat_label(tbl_svysummary(svy_trial, include = c(age, grade, trt), by = trt, type = all_continuous() ~ \"continuous2\", statistic = all_continuous() ~ c(\"{median} ({p25}, {p75})\", \"{min} - {max}\")), label = age ~ c(\"Median (IQR)\", \"Range\")))\n```\n\n----------------------------------------\n\nTITLE: Basic tbl_cross Data Frame Generation in R\nDESCRIPTION: Demonstrates basic usage of tbl_cross() function to create a cross-tabulation of trial2 data, showing the relationship between treatments and categories.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_cross.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_cross(trial2))\n```\n\n----------------------------------------\n\nTITLE: Add P-value Test Configuration\nDESCRIPTION: Example showing how to configure statistical tests in add_p() using the all_tests() selector function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_16\n\nLANGUAGE: R\nCODE:\n```\nadd_p(test = c(age, marker) ~ \"t.test\", test.args = all_tests(\"t.test\") ~ list(var.equal = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Testing Data Ordering in add_difference.tbl_summary() with Paired Tests in R\nDESCRIPTION: These snippets test how add_difference.tbl_summary() handles different data orderings when performing paired tests, ensuring correct calculation and presentation of differences.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_difference(mutate(mtcars, .by = am, id = dplyr::row_number(),\n      am = factor(am, levels = c(0, 1))) %>% tbl_summary(by = am, include = mpg),\n      test = ~\"paired.t.test\", group = id), all_stat_cols()))\n```\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_difference(tbl_summary(mutate(mtcars, .by = am,\n        id = dplyr::row_number(), am = factor(am, levels = c(1, 0))), by = am,\n      include = mpg), test = ~\"paired.t.test\", group = id), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary with Age and Class Categories Showing Percentages\nDESCRIPTION: Demonstrates tbl_custom_summary displaying percentages with raw counts and confidence intervals for Age (Child/Adult) and Class (1st/2nd/3rd/Crew) categories.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ntbl\n```\n\n----------------------------------------\n\nTITLE: Customizing CI Display Pattern in gtsummary Table (R)\nDESCRIPTION: This snippet shows how to customize the pattern for displaying confidence intervals in a gtsummary table. It uses a specific format to combine the statistic and CI.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(add_ci(tbl_summary(trial, include = c(age, grade), missing = \"no\",\nstatistic = list(age = \"{mean}\")), include = age, pattern = \"{stat} [{ci}]\"))\n```\n\n----------------------------------------\n\nTITLE: Displaying Table Body Data Frame in R\nDESCRIPTION: Converts and displays a hierarchical table body result to a data frame format. Shows the organization of adverse events by system organ class (AESOC) and preferred terms (AEDECOD) with corresponding statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_20\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res$table_body)\n```\n\n----------------------------------------\n\nTITLE: Row and Column Specification in tbl_cross\nDESCRIPTION: Shows how to create a cross-tabulation by explicitly specifying row and column variables using the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_cross.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_cross(trial, row = trt, col = grade))\n```\n\n----------------------------------------\n\nTITLE: Converting Odds Ratio Analysis to Data Frame in R\nDESCRIPTION: Shows conversion of odds ratio analysis results to a data frame format. Output displays odds ratios, confidence intervals and p-values for age and grade variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_tibble.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\n----------------------------------------\n\nTITLE: Adding Global P-value with Formula Syntax in R\nDESCRIPTION: Example showing how to use the test.args parameter in add_p() to pass additional arguments to statistical tests using formula notation. This allows customizing test parameters like setting var.equal=TRUE for t-tests.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_17\n\nLANGUAGE: R\nCODE:\n```\nadd_p(test = c(age, marker) ~ \"t.test\", test.args = c(age, marker) ~ list(var.equal = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Stack Table Output in R using gtsummary\nDESCRIPTION: Demonstrates a stacked table format showing statistics grouped by drug type (Drug A and Drug B), including age distributions, tumor response rates, and mortality data.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_hux_table.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nht_stack\n# Output shows a stacked table with columns:\n# groupname_col, label, stat_0\n```\n\n----------------------------------------\n\nTITLE: Converting Hierarchical Table to Data Frame in R\nDESCRIPTION: Example showing the conversion of a hierarchical table object (res) to a data frame format using as.data.frame(). The output displays a structure with multiple hierarchy levels (x1-x9) and single letter values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_15\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(res)\n```\n\n----------------------------------------\n\nTITLE: Generalized Additive Model\nDESCRIPTION: Implements a GAM to model mpg based on smoothed horsepower and cylinder factors using the mtcars dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(gam(mpg ~ s(hp) + factor(cyl), data = mtcars)))\n```\n\n----------------------------------------\n\nTITLE: Installing Specific gt Package Version in R\nDESCRIPTION: Code snippet showing how to install a specific version of the gt package that is compatible with gtsummary using the package's stored SHA reference for the gt commit.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_23\n\nLANGUAGE: r\nCODE:\n```\nremotes::install_github(\"rstudio/gt\", ref = gt_sha)\n```\n\n----------------------------------------\n\nTITLE: Adding Row-Based Statistical Labels in gtsummary\nDESCRIPTION: Demonstrates using add_stat_label() with location='row' to incorporate statistical descriptions directly into the row labels of a gtsummary table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl, location = \"row\"),\nall_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Adding P-Values to Continuous Variable Summary in R gtsummary\nDESCRIPTION: Creates a summary table comparing continuous age variable across treatment groups, with grade and stage variables included. Uses custom p-value formatting function s_ns to display non-significant results as 'N.S.'\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_continuous.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_p(tbl_continuous(trial, variable = age, by = trt, include = c(grade, stage)), pvalue_fun = s_ns))\n```\n\n----------------------------------------\n\nTITLE: Converting Treatment Summary to Data Frame in R\nDESCRIPTION: Demonstrates converting a gtsummary object to a data frame showing treatment distribution and age statistics with as.data.frame(). Output includes treatment groups, percentages, and summary statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_tibble.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\n----------------------------------------\n\nTITLE: Competing Risks Regression\nDESCRIPTION: Performs competing risks regression analysis using simulated data with multiple covariates.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(crr(ftime, fstatus, cov)))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical with Multiple Variables and Include Parameter\nDESCRIPTION: Demonstrates creating hierarchical tables with multiple variables and using the include parameter to filter results\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_hierarchical(data = trial2, variables = c(stage, grade), denominator = trial2, id = id, include = grade))\n```\n\n----------------------------------------\n\nTITLE: Testing Complex Table Merge in R gtsummary\nDESCRIPTION: Demonstrates merging tables with modify_spanning_header function and converting result to data frame. Shows handling of age and tumor response statistics with confidence intervals.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_spanning_header(tbl_merge(tbls = list(t1, t2)), everything() ~ NA))\n```\n\n----------------------------------------\n\nTITLE: Treatment Group Comparison with P-Values\nDESCRIPTION: Creates a summary table comparing treatment groups with p-values, focusing on select columns and removing statistical calculations.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nselect(as.data.frame(add_p(tbl_summary(trial, by = trt)), col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Grouped Survey Summary by Variable\nDESCRIPTION: Creates survey summaries split by a grouping variable using the by parameter.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(data = svy_mtcars, by = am))\nas.data.frame(tbl_svysummary(data = svy_titanic, by = Survived))\n```\n\n----------------------------------------\n\nTITLE: Testing Lancet Journal Theme in R\nDESCRIPTION: Shows application of Lancet journal theme with difference analysis on marker data.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/theme_gtsummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nwith_gtsummary_theme(theme_gtsummary_journal(\"lancet\"), expr = as.data.frame(modify_column_hide(add_difference(tbl_summary(trial, by = trt, include = marker, label = marker ~ \"marker\", missing = \"no\")), c(\"stat_2\"))))\n```\n\n----------------------------------------\n\nTITLE: Survival Analysis Results Table in R\nDESCRIPTION: Displays survival probability estimates at 12 and 24 months by treatment group with confidence intervals.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_kable.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nkbl_survfit\n```\n\n----------------------------------------\n\nTITLE: P-Value Testing with mtcars Dataset\nDESCRIPTION: Generates a summary table with p-values for the mtcars dataset grouped by transmission type (am). Includes handling of tied values and warning messages.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(add_p(tbl_summary(mtcars, by = am)))\n```\n\n----------------------------------------\n\nTITLE: Custom Statistics Format in Likert Table\nDESCRIPTION: Generates a Likert table with custom statistics format showing counts and percentages as 'n / N (p%)'. Uses a custom formatting string for the display of statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_likert.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_likert(df_likert, statistic = ~\"{n} / {N} ({p}%)\"))\n```\n\n----------------------------------------\n\nTITLE: Testing add_difference.tbl_summary() with emmeans() in R\nDESCRIPTION: This code tests the integration of add_difference.tbl_summary() with the emmeans() function for estimated marginal means, verifying correct calculation and presentation of adjusted differences.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(res, all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Testing QJEcon Journal Theme in R\nDESCRIPTION: Demonstrates Quarterly Journal of Economics theme with regression analysis.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/theme_gtsummary.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nwith_gtsummary_theme(theme_gtsummary_journal(\"qjecon\"), expr = as.data.frame(tbl_regression(lm(mpg ~ factor(cyl) + hp, mtcars))))\n```\n\n----------------------------------------\n\nTITLE: Basic add_p.tbl_survfit() Test\nDESCRIPTION: Tests the basic functionality of add_p() with a survival fit table, showing percentage survival with confidence intervals and p-value formatting.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_survfit.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_p(tbl))\n```\n\n----------------------------------------\n\nTITLE: Merged Analysis Results Table in R\nDESCRIPTION: Shows combined results from multiple analyses, presenting odds ratios and hazard ratios side by side with confidence intervals and p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_kable.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nkbl_merge\n```\n\n----------------------------------------\n\nTITLE: Customizing Confidence Interval Statistics in R\nDESCRIPTION: Shows how to customize the display of confidence intervals using the statistic parameter, with different formats for continuous and categorical variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_ci(tbl_svysummary(svy_trial, include = c(age, grade),\nmissing = \"no\"), statistic = list(all_continuous() ~ \"{conf.low} - {conf.high}\",\nall_categorical() ~ \"{conf.low}% - {conf.high}%\")))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count with 'denominator' Parameter in R\nDESCRIPTION: Tests the denominator parameter functionality, including valid data frame input and error handling for invalid input type.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_11\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = trial, variables = trt, denominator = \"test\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Imputation Regression Analysis\nDESCRIPTION: Conducts regression analysis with multiple imputation using the mice package to handle missing data in the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression_methods.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(with(suppressWarnings(mice::mice(trial, m = 2)), lm(age ~ marker + grade))))\n```\n\n----------------------------------------\n\nTITLE: Stacked Results by Treatment Group in R\nDESCRIPTION: Presents statistics grouped by treatment (Drug A vs Drug B), showing age, tumor response and mortality data for each group.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_kable.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nkbl_stack\n```\n\n----------------------------------------\n\nTITLE: Testing add_stat() with missing arguments\nDESCRIPTION: This snippet demonstrates error handling when using add_stat() with missing arguments in the mean function. It shows how the function reports errors when required arguments are not provided.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nresult <- add_stat(tbl, fns = everything() ~ mean)\n```\n\n----------------------------------------\n\nTITLE: Basic Significance Stars Example in R\nDESCRIPTION: Demonstrates adding significance stars to a table containing statistical results including sex and ph.ecog variables. Shows Beta coefficients, standard errors, confidence intervals and p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_significance_stars.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_stars)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Patterns with add_ci() in R\nDESCRIPTION: Example of using a custom pattern to format how confidence intervals appear in the output table, showing how to integrate the statistic and CI values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_ci(tbl_svysummary(svy_trial, include = c(age, grade),\nmissing = \"no\", statistic = list(age = \"{mean}\")), include = age, pattern = \"{stat} [{ci}]\"))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count with 'by' Parameter in R\nDESCRIPTION: Demonstrates creating hierarchical count tables with grouping by treatment variable. Shows both successful execution with 'trt' variable and error handling for non-existent column.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_10\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_hierarchical_count(data = trial, variables = stage, by = trt))\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = trial, variables = stage, by = name)\n```\n\n----------------------------------------\n\nTITLE: Displaying Single-Arm Hierarchical Count Data with gtsummary in R\nDESCRIPTION: This code snippet shows the output of a tbl_hierarchical function from gtsummary for a single treatment arm. It creates a table displaying adverse event data grouped by primary system organ class and dictionary-derived terms for the placebo group.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_19\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(res)\n  **Primary System Organ Class**  \\n    **Dictionary-Derived Term** **Placebo**  \\nN = 86\n1                                                     EYE DISORDERS              1 (1.2%)\n2                                                       EYE ALLERGY              1 (1.2%)\n3                                                      EYE SWELLING              1 (1.2%)\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Applications of add_stat_label in R gtsummary\nDESCRIPTION: This snippet shows how the add_stat_label function handles multiple applications. It demonstrates that when the function is applied to a table that already has stat labels, it returns the table unaltered and displays a message.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_ard_summary.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\ninvisible(add_stat_label(add_stat_label(tbl_ard_summary(cards::ard_stack(data = cards::ADSL,\ncards::ard_categorical(variables = \"AGEGR1\"), cards::ard_continuous(variables = \"AGE\"),\n.attributes = TRUE, .missing = TRUE, .total_n = TRUE), type = all_continuous() ~\n  \"continuous2\", statistic = all_continuous() ~ c(\"{median} ({p25}, {p75})\",\n  \"{min} - {max}\")))))\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Usage of add_difference.tbl_summary() in R\nDESCRIPTION: This snippet tests the basic functionality of add_difference() applied to a tbl_summary object, checking the output format and content for a simple case with continuous variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(tbl_diff, all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Error when using add_overall after modifying variable labels\nDESCRIPTION: This snippet shows the error that occurs when trying to use add_overall() after potentially changing variable labels with add_stat_label(). The function cannot add an overall column when variable labels have been modified after the initial table creation.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nadd_overall(add_stat_label(tbl_svysummary(svy_mtcars, by = am, include = \"mpg\",\n  type = all_continuous() ~ \"continuous2\"), label = mpg ~ \"UPDATED!\"))\n```\n\n----------------------------------------\n\nTITLE: Testing error handling for invalid statistic name\nDESCRIPTION: Tests error handling when an invalid statistic name is provided. Shows proper error message listing valid statistics options.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_n.tbl_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nadd_n(tbl_summary(trial, by = trt, include = c(trt, age, grade, response)), statistic = \"{not_a_stat}\")\n```\n\n----------------------------------------\n\nTITLE: Handling Dichotomous Variables with add_ci() in R\nDESCRIPTION: Demonstrates how add_ci() correctly handles dichotomous variables in survey data, showing confidence intervals for tumor response and grade variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Overall Row Implementation in tbl_hierarchical\nDESCRIPTION: Demonstrates adding an overall summary row to the hierarchical table output\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_hierarchical(data = trial2, variables = trt, denominator = trial2, id = id, overall_row = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Creating Overall Summary Statistics\nDESCRIPTION: Generates overall summary statistics for age groups and continuous age data without stratification.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_summary(cards::ard_stack(data = cards::ADSL, cards::ard_categorical(\nvariables = \"AGEGR1\"), cards::ard_continuous(variables = \"AGE\"), .attributes = TRUE,\n.missing = TRUE, .total_n = TRUE)))\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Difference Analysis with Survey Trial Data\nDESCRIPTION: Demonstrates adding difference statistics to survey summary table for trial data comparing treatment groups. Includes age, marker levels, T stage, grade, tumor response and survival data.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nselect(as.data.frame(add_difference(tbl_svysummary(svy_trial, by = trt),\n      col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with tbl_regression\nDESCRIPTION: Displays header names for a logistic regression summary table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(tbl_regression(mod_logistic))\n```\n\n----------------------------------------\n\nTITLE: Error Handling in tbl_svysummary\nDESCRIPTION: Demonstrates error cases for tbl_svysummary() when called with invalid arguments or missing data.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ntbl_svysummary()\ntbl_svysummary(data = letters)\ntbl_svysummary(data = dplyr::tibble())\n```\n\n----------------------------------------\n\nTITLE: Custom Data Selection in Univariate Regression\nDESCRIPTION: Demonstrates variable selection and renaming using dplyr with tbl_uvregression.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_uvregression.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_uvregression(dplyr::select(mtcars, `M P G` = mpg, hp), y = hp, method = lm))\n```\n\n----------------------------------------\n\nTITLE: Testing Row Percentage Warning\nDESCRIPTION: Shows warning message when using row percentages with categorical variables in difference analysis.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_svysummary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\ntbl <- add_difference(tbl_svysummary(svy_trial, by = trt, percent = \"row\",\n        include = grade))\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with tbl_survfit\nDESCRIPTION: Demonstrates header names display for a survival analysis table with 50th percentile probability.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(tbl_survfit(trial, include = trt, y = \"Surv(ttdeath, death)\", probs = 0.5))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_ard_continuous with Multiple 'by' Variables in R\nDESCRIPTION: This snippet tests the tbl_ard_continuous function with multiple 'by' variables (trt and grade) and combines continuous and categorical ARD objects.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_continuous(cards::bind_ard(cards::ard_continuous(trial,\n  by = c(trt, grade), variables = age), cards::ard_categorical(trial, trt)),\nvariable = \"age\", include = \"grade\", by = \"trt\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Statistical Labels with no. (%) in R gtsummary\nDESCRIPTION: Example of customizing statistical labels for categorical variables using 'no. (%)' format in column location.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_svysummary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl, location = \"column\", label = all_categorical() ~ \"no. (%)\"), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Testing Combined Difference and P-value Analysis\nDESCRIPTION: Demonstrates combining add_difference() and add_p() functions with standardized mean difference testing.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_svysummary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ndplyr::select(as.data.frame(add_p(add_difference(tbl_svysummary(svy_trial, by = trt,\n        include = c(age, response, grade), missing = \"no\"), test = ~\"smd\"))),\n      col_label = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid CI Method in gtsummary (Categorical Variable) (R)\nDESCRIPTION: This snippet shows error handling when an invalid confidence interval method is specified for a categorical variable in add_ci(). It lists the allowed methods for categorical variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nadd_ci(tbl_summary(trial, include = grade), method = list(grade = \"t.test\"))\n```\n\n----------------------------------------\n\nTITLE: Testing add_stat() with duplicate column names\nDESCRIPTION: This code demonstrates the error condition when attempting to add new columns that already exist in the gtsummary table. The function prevents overwriting existing columns.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nadd_stat(add_stat(tbl_summary(trial, include = age, type = age ~ \"continuous2\",\nstatistic = everything() ~ c(\"{mean}\", \"{sd}\")), fns = everything() ~\n  return_two_by_two_10s, location = everything() ~ \"level\"), fns = everything() ~\n  return_two_by_two_10s, location = everything() ~ \"level\")\n```\n\n----------------------------------------\n\nTITLE: Adding Observation Counts to Survey Summary Table in R\nDESCRIPTION: Creates a survey summary table with age, grade, and response variables, adding observation counts with customized statistics display. The statistics show total non-missing counts, total observations, and unweighted non-missing counts.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_n.tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_n(tbl_svysummary(svy_trial, include = c(age, grade, response)),\nstatistic = \"{N_nonmiss} / {N_obs} ({N_nonmiss_unweighted})\", footnote = TRUE,\nlast = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names Alignment\nDESCRIPTION: Shows header names alignment for a complex table with multiple treatment groups and adverse events.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(test_table)\n```\n\n----------------------------------------\n\nTITLE: Custom Tidy Function in Univariate Regression\nDESCRIPTION: Shows how to use a custom tidy function with additional output messaging.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_uvregression.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ntbl1 <- tbl_uvregression(trial, y = age, method = lm, include = marker, tidy_fun = function(x, ...) { cat(\"THIS IS MY CUSTOM MESSAGE!\") broom::tidy(x, ...) })\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_ard_continuous with Single 'by' Variable in R\nDESCRIPTION: This snippet tests the tbl_ard_continuous function with a single 'by' variable (grade) and a continuous variable (age) from the trial dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_continuous(cards::ard_continuous(trial, by = grade,\n  variables = age), variable = \"age\", include = \"grade\"))\n```\n\n----------------------------------------\n\nTITLE: Error handling in tbl_continuous() with categorical variable in R\nDESCRIPTION: Shows what happens when attempting to use tbl_continuous() with a categorical variable (grade). The function returns error messages about using non-numeric data with median and percentile statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_continuous(trial, variable = grade, include = trt))\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Summary Types\nDESCRIPTION: Shows how to display multiple summary statistics for continuous variables using the type parameter to include both median and mean values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_summary(ard, type = list(all_continuous() ~ \"continuous2\"),\nstatistic = list(all_continuous() ~ c(\"{median}\", \"{mean}\"))))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Statistic Name in R\nDESCRIPTION: Shows error handling when an invalid statistic name is provided. Includes helpful error message listing all valid statistics that can be used.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_n.tbl_svysummary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nadd_n(tbl_svysummary(svy_trial, by = trt, include = c(trt, age, grade, response)),\nstatistic = \"{not_a_stat}\")\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with Hidden Columns\nDESCRIPTION: Shows header names including hidden columns in a tbl_summary table by setting show_hidden parameter to TRUE.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(tbl_summary(trial, include = age, by = trt, missing = \"no\"), show_hidden = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Basic tbl_svysummary Value Test in R\nDESCRIPTION: Tests the basic functionality of tbl_svysummary by converting results to a data frame. Shows summary statistics for Grade and Tumor Response.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Labels with add_stat_label in gtsummary\nDESCRIPTION: Demonstrates customizing the statistical labels for categorical variables when using add_stat_label() with location='column'.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl, location = \"column\",\n  label = all_categorical() ~ \"no. (%)\"), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_ard_continuous with Specified 'by' and 'include' Variables in R\nDESCRIPTION: This snippet tests the tbl_ard_continuous function with specified 'by' (trt) and 'include' (grade) variables for the age continuous variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_continuous(cards::ard_continuous(trial, by = c(trt, grade),\nvariables = age), by = trt, variable = age, include = grade))\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Mismatched Label Length in gtsummary\nDESCRIPTION: Demonstrates the error message when the number of labels doesn't match the number of statistics displayed.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nadd_stat_label(tbl_summary(trial, include = c(age, grade, trt), by = trt, type = all_continuous() ~\n  \"continuous2\", statistic = all_continuous() ~ c(\"{median} ({p25}, {p75})\",\n  \"{min} - {max}\"), ), label = age ~ c(\"Median (IQR)\", \"Range\", \"TOO LONG!\"))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Methods in add_ci() in R\nDESCRIPTION: Shows error messages when providing invalid method arguments to add_ci(), demonstrating validation for both continuous and categorical variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nadd_ci(tbl_svysummary(svy_trial, include = age, missing = \"no\", statistic = list(\n  age = \"{mean}\")), method = list(age = \"xxxxxxxxxx\"))\n```\n\nLANGUAGE: r\nCODE:\n```\nadd_ci(tbl_svysummary(svy_trial, include = grade), method = list(grade = \"svymean\"))\n```\n\n----------------------------------------\n\nTITLE: Adding P-Values to Survey Summary Table with Grade Grouping\nDESCRIPTION: Demonstrates adding p-values to a survey summary table grouped by grade, selecting specific columns and removing statistical columns from the output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nselect(as.data.frame(add_p(tbl_svysummary(svy_trial, by = grade)), col_labels = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Summarizing Continuous Data by Treatment Group\nDESCRIPTION: Creates a summary of continuous age data stratified by treatment group without missing value handling.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_summary(cards::ard_stack(data = cards::ADSL, .by = ARM,\ncards::ard_continuous(variables = \"AGE\"), .attributes = FALSE, .missing = FALSE),\nby = ARM, missing = \"no\"))\n```\n\n----------------------------------------\n\nTITLE: Using the include Parameter with add_ci() in R\nDESCRIPTION: Demonstrates how to add confidence intervals only for specific variables using the include parameter. Also shows a warning message when requesting CI for a statistic not in the primary table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ndplyr::select(as.data.frame(add_ci(add_overall(tbl_svysummary(svy_trial,\n  include = c(age, grade), by = trt, missing = \"no\")), include = age),\ncol_label = FALSE), -all_stat_cols())\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_ard_continuous for Invalid Variable Specification in R\nDESCRIPTION: This snippet tests the error handling of tbl_ard_continuous when an invalid variable is specified in the 'variable' argument.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_continuous(cards::bind_ard(cards::ard_continuous(trial, by = c(trt,\n  grade), variables = age)), variable = \"trt\", include = \"grade\", by = \"age\")\n```\n\n----------------------------------------\n\nTITLE: Error handling with invalid label in tbl_continuous() in R\nDESCRIPTION: Demonstrates the error that occurs when providing a non-string value to the 'label' parameter. The function expects string values for labels.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ntbl_continuous(trial, variable = age, include = c(trt, grade), label = list(\n  trt = mean))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Test Specification\nDESCRIPTION: Shows error handling when an invalid test specification is provided for a variable in the test parameter.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_svysummary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nadd_p(tbl_svysummary(svy_trial, by = trt, include = age), test = age ~ letters)\n```\n\n----------------------------------------\n\nTITLE: Column Margin Display in tbl_cross\nDESCRIPTION: Demonstrates the use of the margin parameter to display column margins in the cross-tabulation output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_cross.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_cross(trial2, margin = \"column\"))\n```\n\n----------------------------------------\n\nTITLE: Merging Tables with Significance Stars in R\nDESCRIPTION: Shows how to merge two identical tables with significance stars using tbl_merge(). The result contains duplicated columns with stars indicating statistical significance.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_significance_stars.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_merge(list(tbl_stars, tbl_stars)))\n```\n\n----------------------------------------\n\nTITLE: Setting Default Statistics Type for Continuous Variables in R\nDESCRIPTION: Example of a theme function that changes the default summary type for continuous variables to 'continuous2', which allows displaying multiple statistics (like mean, median, etc.) in the same table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_18\n\nLANGUAGE: R\nCODE:\n```\ntheme_gtsummary_continuous2()\n```\n\n----------------------------------------\n\nTITLE: Testing Edge Cases with Missing Data\nDESCRIPTION: Shows behavior of tbl_summary() when handling missing data in continuous variables across different cohorts.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nas_kable(tbl_summary(dplyr::tibble(by_var = as.factor(c(rep(\"cohort_1\", 3), rep(\"cohort_2\", 3))), continuous_var = c(NA, NA, NA, 1, 2, 3)), by = by_var, type = continuous_var ~ \"continuous\", statistic = continuous_var ~ \"{min}, {max}\"), format = \"pipe\")\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with tbl_uvregression\nDESCRIPTION: Shows header names for a univariate regression analysis table using linear model.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(tbl_uvregression(trial, x = trt, include = c(marker, age), show_single_row = trt, method = lm))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_ard_continuous for Invalid Statistic Specification in R\nDESCRIPTION: This snippet tests the error handling of tbl_ard_continuous when an invalid statistic specification is provided.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_continuous(cards::ard_continuous(trial, by = grade, variables = age),\nvariable = \"age\", include = \"grade\", statistic = everything() ~ c(\"{mean}\",\n  \"{median}\"))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Invalid By Groups\nDESCRIPTION: Demonstrates error handling when attempting to run add_difference() without exactly two comparison groups.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_svysummary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nadd_difference(tbl_svysummary(svy_trial, include = age))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_merge with No Common Columns\nDESCRIPTION: Demonstrates error handling when attempting to merge tables with no common columns specified in merge_vars.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ntbl_merge(list(tbl, tbl))\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Invalid Labels in gtsummary\nDESCRIPTION: Shows the error message when providing an invalid label format (using a vector instead of a string).\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nadd_stat_label(tbl_summary(trial, include = c(age, trt), by = trt, ), label = age ~\n  letters)\n```\n\n----------------------------------------\n\nTITLE: Testing add_difference() Handling of Missing Data in R\nDESCRIPTION: This code checks that add_difference() handles missing data correctly without producing errors, verifying the output format and content when data contains NA values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(t1, all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with tbl_summary\nDESCRIPTION: Demonstrates basic usage of show_header_names() with tbl_summary table showing age by treatment group.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(tbl_summary(trial, include = age, by = trt, missing = \"no\"))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count with 'include' Parameter in R\nDESCRIPTION: Validates the include parameter functionality with various combinations of stage and grade variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_12\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_hierarchical_count(data = trial, variables = c(stage, grade), include = grade))\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_hierarchical_count(data = trial, variables = c(stage, grade), by = trt, include = NULL))\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = trial, variables = c(stage, grade), include = name)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_ard_continuous for Invalid Include Variable in R\nDESCRIPTION: This snippet tests the error handling of tbl_ard_continuous when an invalid variable is specified in the 'include' argument.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_continuous(cards::bind_ard(cards::ard_continuous(trial, by = c(trt,\n  grade), variables = age)), variable = \"age\", include = \"trt\", by = \"grade\")\n```\n\n----------------------------------------\n\nTITLE: Adding Statistic Labels to Columns in R using gtsummary\nDESCRIPTION: This code shows the use of add_stat_label with location='column'. It applies the function to a table and then modifies it to hide all statistic columns, demonstrating how labels are added as a separate column.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_ard_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl_ard, location = \"column\"),\nall_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Customizing Statistic Labels in Columns with gtsummary in R\nDESCRIPTION: This snippet illustrates customizing labels for categorical variables when using add_stat_label with location='column'. It changes the label for all categorical variables to 'no. (%)'.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_ard_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl_ard, location = \"column\",\n  label = all_categorical() ~ \"no. (%)\"), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Verifying Row Formatting in add_difference() Output in R\nDESCRIPTION: This snippet tests the row formatting of differences and confidence intervals in the output of add_difference(), checking for correct alignment and presentation of statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ntbl1\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary Handling Character and Date Data Types\nDESCRIPTION: Shows how tbl_custom_summary handles character and date data types without errors, converting the table to a data frame with formatted T Stage categories and dates.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary with Confidence Intervals for Continuous Variables\nDESCRIPTION: Shows a summary table for continuous variables (Marker Level and Months to Death/Censor) with confidence intervals in brackets and handling of missing values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ntbl\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count with 'label' and 'digits' Parameters in R\nDESCRIPTION: Validates custom labeling and numeric formatting options, including error handling for invalid inputs.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_14\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = trial, variables = c(stage, grade), label = \"Stages\")\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = trial, variables = c(stage, grade), digits = n ~ 2)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_ard_continuous for Invalid Value Specification in R\nDESCRIPTION: This snippet tests the error handling of tbl_ard_continuous when an invalid value specification is provided for a variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_continuous(cards::ard_continuous(trial, by = c(trt, grade), variables = age),\nby = \"trt\", variable = \"age\", include = \"grade\", value = grade ~ \"XXXXXXX\")\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_ard_continuous for Non-Scalar Value Specification in R\nDESCRIPTION: This snippet tests the error handling of tbl_ard_continuous when a non-scalar value is specified for a variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_continuous.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_continuous(cards::ard_continuous(trial, by = c(trt, grade), variables = age),\nby = \"trt\", variable = \"age\", include = \"grade\", value = grade ~ letters)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in add_stat_label Function for R gtsummary\nDESCRIPTION: These snippets showcase error handling in the add_stat_label function. They demonstrate how the function responds to incorrect label specifications, such as using non-string values or providing too many label elements.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_ard_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nadd_stat_label(tbl_ard_summary(cards::ard_stack(data = cards::ADSL, cards::ard_categorical(\n  variables = \"AGEGR1\"), cards::ard_continuous(variables = \"AGE\"), .attributes = TRUE,\n.missing = TRUE, .total_n = TRUE), type = all_continuous() ~ \"continuous2\",\nstatistic = all_continuous() ~ c(\"{median} ({p25}, {p75})\", \"{min} - {max}\")),\nlabel = AGE ~ letters)\n```\n\nLANGUAGE: R\nCODE:\n```\nadd_stat_label(tbl_ard_summary(cards::ard_stack(data = cards::ADSL, cards::ard_categorical(\n  variables = \"AGEGR1\"), cards::ard_continuous(variables = \"AGE\"), .attributes = TRUE,\n.missing = TRUE, .total_n = TRUE), type = all_continuous() ~ \"continuous2\",\nstatistic = all_continuous() ~ c(\"{median} ({p25}, {p75})\", \"{min} - {max}\")),\nlabel = AGE ~ c(\"Median (IQR)\", \"Range\", \"TOO LONG!\"))\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary Including All Observations with Missing Values\nDESCRIPTION: Demonstrates how full_data option in tbl_custom_summary includes all observations including missing values, showing the count of available values versus total observations.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nres\n```\n\n----------------------------------------\n\nTITLE: Legacy Function Name Mapping in gtsummary v1.0.0\nDESCRIPTION: Maps old function names from pre-1.0 versions to new function names after major refactoring. This provides backward compatibility for users transitioning to the gt-based implementation.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_25\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary()       <-  fmt_table1()  \ntbl_regression()    <-  fmt_regression()  \ntbl_uvregression()  <-  fmt_uni_regression()  \nstyle_pvalue()      <-  fmt_pvalue()  \nstyle_percent       <-  fmt_percent()  \nstyle_ratio         <-  fmt_beta()  \n```\n\n----------------------------------------\n\nTITLE: Generating Hierarchical Count Table with gtsummary in R\nDESCRIPTION: This code snippet shows the output of a tbl_hierarchical_count function from gtsummary. It creates a table displaying adverse event data grouped hierarchically by sex, system organ class, and specific terms. The table includes counts and percentages for three different groups or time points.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_18\n\nLANGUAGE: R\nCODE:\n```\nres$table_body\n# A tibble: 21 x 11\n   row_type group1                       group1_level group2 group2_level                                         var_label variable                     label                                                stat_1   stat_2   stat_3  \n   <chr>    <chr>                        <chr>        <chr>  <chr>                                                <chr>     <chr>                        <chr>                                                <chr>    <chr>    <chr>   \n 1 level    ..ard_hierarchical_overall.. <NA>         <NA>   <NA>                                                 <NA>      ..ard_hierarchical_overall.. Number of patients with event                        26 (30%) 42 (50%) 40 (48%)\n 2 level    SEX                          F            <NA>   <NA>                                                 <NA>      SEX                          F                                                    13 (25%) 18 (45%) 23 (46%)\n 3 level    SEX                          F            AESOC  CARDIAC DISORDERS                                    <NA>      AESOC                        CARDIAC DISORDERS                                    0 (0%)   1 (2.5%) 0 (0%)  \n 4 level    SEX                          F            AESOC  CARDIAC DISORDERS                                    <NA>      AETERM                       ATRIOVENTRICULAR BLOCK SECOND DEGREE                 0 (0%)   1 (2.5%) 0 (0%)  \n 5 level    SEX                          F            AESOC  GASTROINTESTINAL DISORDERS                           <NA>      AESOC                        GASTROINTESTINAL DISORDERS                           3 (5.7%) 0 (0%)   3 (6.0%)\n 6 level    SEX                          F            AESOC  GASTROINTESTINAL DISORDERS                           <NA>      AETERM                       DIARRHOEA                                            3 (5.7%) 0 (0%)   3 (6.0%)\n 7 level    SEX                          F            AESOC  GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS <NA>      AESOC                        GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS 5 (9.4%) 11 (28%) 13 (26%)\n 8 level    SEX                          F            AESOC  GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS <NA>      AETERM                       APPLICATION SITE ERYTHEMA                            2 (3.8%) 5 (13%)  5 (10%) \n 9 level    SEX                          F            AESOC  GENERAL DISORDERS AND ADMINISTRATION SITE CONDITIONS <NA>      AETERM                       APPLICATION SITE PRURITUS                            4 (7.5%) 10 (25%) 12 (24%)\n10 level    SEX                          F            AESOC  SKIN AND SUBCUTANEOUS TISSUE DISORDERS               <NA>      AESOC                        SKIN AND SUBCUTANEOUS TISSUE DISORDERS               6 (11%)  7 (18%)  9 (18%) \n# i 11 more rows\n```\n\n----------------------------------------\n\nTITLE: Testing modify_column_merge() with Non-existent Column\nDESCRIPTION: This code tests the error handling of modify_column_merge() when a column name specified in the pattern parameter doesn't exist in the table. It verifies that the function correctly identifies and reports the missing column.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_column_merge.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify_column_merge(mod, pattern = \"{not_a_column} ({conf.low}, {conf.high})\",\n  rows = !is.na(estimate))\n```\n\n----------------------------------------\n\nTITLE: Summary Table with Specific Columns and Tests\nDESCRIPTION: Generates a focused summary table including only mpg and disp columns, using t.test and oneway.test respectively.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_p(tbl_summary(mtcars, by = am, include = c(mpg, disp)), test = list(mpg = t.test, disp = oneway.test)))\n```\n\n----------------------------------------\n\nTITLE: Adding Row-based Statistical Labels in R gtsummary\nDESCRIPTION: Demonstrates adding statistical labels in row location to a gtsummary table and converting to data frame. Modifies column visibility using modify_column_hide().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl, location = \"row\"), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Adding Statistic Labels to Rows in R using gtsummary\nDESCRIPTION: This snippet demonstrates the use of add_stat_label with location='row'. It applies the function to a table and then modifies it to hide all statistic columns, showing how labels are added to the characteristic column.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_ard_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl_ard, location = \"row\"),\nall_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Function Name Mapping in gtsummary v1.2.0\nDESCRIPTION: Assigns legacy function names as aliases to newer function names, maintaining backward compatibility for users migrating from earlier versions of the package.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_24\n\nLANGUAGE: r\nCODE:\n```\nbold_p()            <-  tab_style_bold_p()  \nbold_labels()       <-  tab_style_bold_labels()  \nbold_levels()       <-  tab_style_bold_levels()  \nitalicize_labels()  <-  tab_style_italicize_labels()  \nitalicize_levels()  <-  tab_style_italicize_levels()  \n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical with T Stage Data\nDESCRIPTION: Test case showing hierarchical table output for T Stage and Grade data with percentage formatting.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\n----------------------------------------\n\nTITLE: Adding Column-based Statistical Labels in R gtsummary\nDESCRIPTION: Shows how to add statistical labels in column location to a gtsummary table and convert to data frame format.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl, location = \"column\"), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Invalid Column Name Error in tbl_strata_nested_stack\nDESCRIPTION: Demonstrates error handling when using restricted column names in the strata argument. Shows that columns cannot be named 'stat', 'stat_name', 'n', 'N', 'p', or 'strata'.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_strata_nested_stack.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ntbl_strata_nested_stack(dplyr::rename(trial, strata = trt), strata = strata,\n~ modify_header(tbl_summary(.x, include = c(age, grade), missing = \"no\"),\nall_stat_cols() ~ \"**Summary Statistics**\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Summary Table Output in R\nDESCRIPTION: Displays a summary statistics table showing treatment distribution, age statistics and mortality data from a clinical trial with 200 participants.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_kable.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nkbl_summary\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid CI Method in gtsummary (Continuous Variable) (R)\nDESCRIPTION: This code demonstrates error handling when an invalid confidence interval method is specified for a continuous variable in add_ci(). It shows the allowed methods for continuous variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nadd_ci(tbl_summary(trial, include = age, missing = \"no\", statistic = list(age = \"{mean}\")),\nmethod = list(age = \"wilson\"))\n```\n\n----------------------------------------\n\nTITLE: Poisson Regression Output Test\nDESCRIPTION: Testing stats::glm() Poisson regression output with single row display for treatment variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_regression.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_regression(mod_poisson, show_single_row = \"trt\", estimate_fun = label_style_ratio(digits = 1)))\n```\n\n----------------------------------------\n\nTITLE: Testing Theme Check and Management Functions in R\nDESCRIPTION: Demonstrates various theme checking and management functions including error handling.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/theme_gtsummary.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ncheck_gtsummary_theme(mean)\n```\n\nLANGUAGE: r\nCODE:\n```\ncheck_gtsummary_theme(list(not_a_theme_element = letters))\n```\n\nLANGUAGE: r\nCODE:\n```\ncheck_gtsummary_theme(list(`add_global_p-str:type` = letters))\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Parameters in tbl_survfit\nDESCRIPTION: Shows error handling when multiple conflicting parameters are specified.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ninline_text(tbl1, time = 24, column = \"stat_2\", level = \"Drug A\")\n```\n\n----------------------------------------\n\nTITLE: Method Arguments in Univariate Regression\nDESCRIPTION: Example of using method.args parameter in tbl_uvregression to specify additional modeling parameters.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_uvregression.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl2)\n```\n\n----------------------------------------\n\nTITLE: Cross Tabulation Table Output in R\nDESCRIPTION: Shows a cross-tabulation of drug treatments against grade levels, with row and column totals included.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/as_kable.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nkbl_cross\n```\n\n----------------------------------------\n\nTITLE: Testing Various Filter Conditions in R\nDESCRIPTION: Shows filter_hierarchical() functionality with different filtering conditions applied to the same data structure.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/filter_hierarchical.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_f)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of tbl_hierarchical with Single Variable\nDESCRIPTION: Demonstrates basic usage of tbl_hierarchical() function with a single variable (trt) and denominator specification\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_hierarchical(data = trial2, variables = trt, denominator = trial2, id = id))\n```\n\n----------------------------------------\n\nTITLE: tbl_custom_summary Handling Factor Levels with No Observations\nDESCRIPTION: Demonstrates how tbl_custom_summary handles factor levels with missing observations (level IV) by showing NA in the corresponding cells while still displaying the level in the table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_custom_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ntbl\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Invalid 'indent' Parameter in modify_table_styling\nDESCRIPTION: Tests that proper error messages are shown when a non-integer value is passed to the 'indent' parameter of the modify_table_styling function. The test creates a summary table with trial data filtered by grade, then attempts to modify it with an invalid indent value.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_table_styling.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify_table_styling(tbl_summary(trial, include = grade), columns = \"label\",\nrows = !row_type %in% \"label\", indent = \"not an integer\")\n```\n\n----------------------------------------\n\nTITLE: Adding Overall Statistics with Modified Labels in R\nDESCRIPTION: This snippet demonstrates an error that occurs when trying to add overall statistics to a tbl_summary object where variable labels may have been changed. It creates a stratified summary table, modifies a label, and then attempts to add overall statistics, resulting in an error.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nadd_overall(add_stat_label(tbl_summary(mtcars, by = am, include = \"mpg\", type = all_continuous() ~\n  \"continuous2\"), label = mpg ~ \"UPDATED!\"))\n```\n\n----------------------------------------\n\nTITLE: Testing combine_terms with Incompatible Model Types in R\nDESCRIPTION: This snippet tests the combine_terms function with a regression model where the full and reduced models have different numbers of observations, expecting an error.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/combine_terms.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ncombine_terms(tbl_regression(lm(age ~ marker + stage, trial)), formula = . ~ . - marker)\n```\n\n----------------------------------------\n\nTITLE: Using New Function Signatures in R\nDESCRIPTION: Example function signatures and methods added to the gtsummary package for table formatting and analysis.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_9\n\nLANGUAGE: R\nCODE:\n```\nas_hux_xlsx()\ntbl_regression.tidycrr()\ntidy_wald_test()\nget_gtsummary_theme()\nwith_gtsummary_theme()\nmodify_column_indent()\n.table_styling_expr_to_row_number()\ncheck_gtsummary_theme()\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with Single Class Value\nDESCRIPTION: Demonstrates header names display with a single class value table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_6\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(test_table)\n```\n\n----------------------------------------\n\nTITLE: Testing add_stat() with functions producing errors with curly braces\nDESCRIPTION: This code tests how add_stat() handles functions that produce errors containing curly braces. It defines a custom function that triggers an error message with curly braces and passes it to add_stat().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ncurly_error <- (function(x, ...) {\n  stop(\"{curly} error\")\n})\nas.data.frame(add_stat(tbl, fns = ~curly_error))\n```\n\n----------------------------------------\n\nTITLE: Processing P-Value Footnotes with t-test in R\nDESCRIPTION: Demonstrates filtering and displaying footnotes for p-values from t-test results. Shows footnote handling for age and grade variables with different statistical tests.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/separate_p_footnotes.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(dplyr::mutate(dplyr::filter(getElement(getElement(separate_p_footnotes(add_p(tbl, test = list(age = function(data, variable, by, ...) broom::tidy(t.test(data[[variable]] ~ data[[by]]))))), \"table_styling\"), \"footnote_body\"), dplyr::row_number() %in% c(dplyr::n(), dplyr::n() - 1L)), rows = map_chr(rows, ~ expr_deparse(quo_squash(.x)))))\n```\n\n----------------------------------------\n\nTITLE: Testing combine_terms with Invalid Label Argument in R\nDESCRIPTION: This snippet tests the combine_terms function with an incorrect label argument (character vector instead of a string), expecting an error.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/combine_terms.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ncombine_terms(tbl_regression(lm(age ~ marker + stage, trial)), formula = . ~ . - marker, label = c(\"marker\", \"marker2\"))\n```\n\n----------------------------------------\n\nTITLE: R Package Update Example - Function Call\nDESCRIPTION: Example showing updated theme function call syntax without set_gtsummary_theme()\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_19\n\nLANGUAGE: R\nCODE:\n```\ntheme_gtsummary_journal()\n```\n\n----------------------------------------\n\nTITLE: Removing Italic Formatting from Summary Statistics in R\nDESCRIPTION: Creates a summary table of age statistics using tbl_summary(), applies italic formatting to specific rows and columns, then removes it. This example shows targeted formatting and unformatting in gtsummary.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_bold_italic.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(remove_italic(modify_italic(tbl_summary(trial, include = age, missing = \"no\"), columns = label, rows = variable == \"age\")), col_labels = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Testing sort_hierarchical Basic Functionality in R\nDESCRIPTION: Test case showing the output of converting a sorted hierarchical table to a data frame. The table contains patient event data organized by sex, race, and adverse events.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/sort_hierarchical.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: tbl_svysummary Missing Parameter Test in R\nDESCRIPTION: Tests error handling for invalid missing parameter value.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\ntbl_svysummary(svy_trial, missing = \"NOT AN OPTION\")\n```\n\n----------------------------------------\n\nTITLE: Testing combine_terms with Missing ANOVA P-value in R\nDESCRIPTION: This snippet tests the combine_terms function with a model that results in an ANOVA output without a p-value, expecting an error and suggesting the use of a specific test method.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/combine_terms.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ncombine_terms(tbl_regression(lm(mpg ~ disp + am * factor(cyl), data = mtcars)), . ~ . - am)\n```\n\n----------------------------------------\n\nTITLE: Reproducing Error in add_overall Function with Unknown Object in R\nDESCRIPTION: This code snippet demonstrates an error case with the gtsummary package when trying to use add_overall() with tbl_ard_summary(). The error occurs because the 'ard_overall' object is referenced but has not been defined in the environment.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_ard_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nadd_overall(tbl_ard_summary(ard_overall), cards = ard_overall)\n```\n\n----------------------------------------\n\nTITLE: Testing Missing Level 1 Spanning Header\nDESCRIPTION: Tests error handling when level 1 spanning header is missing but level 2 is present. Demonstrates validation of header level continuity.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_spanning_header.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas_gt(remove_spanning_header(modify_spanning_header(modify_spanning_header(tbl_summary(trial, by = trt, include = age), all_stat_cols() ~ \"**Treatments**\", level = 1), all_stat_cols() ~ \"**Treatments**\", level = 2), columns = everything(), level = 1))\n```\n\n----------------------------------------\n\nTITLE: Custom Significance Thresholds in R\nDESCRIPTION: Applies custom significance thresholds (1e-07, 0.55, 0.9, 1) to add stars to statistical results while keeping p-values visible in the output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_significance_stars.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_significance_stars(tbl1, thresholds = c(1e-07, 0.55, 0.9, 1), hide_p = FALSE))\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Hierarchical Filtering in R\nDESCRIPTION: Demonstrates basic usage of filter_hierarchical() function by displaying a filtered data frame with adverse event statistics grouped by sex and race.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/filter_hierarchical.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Missing Spanning Header Levels\nDESCRIPTION: Tests error handling when multiple header levels (1 and 2) are missing but level 3 is present. Validates proper level sequence checking.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_spanning_header.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nas_gt(remove_spanning_header(remove_spanning_header(modify_spanning_header(modify_spanning_header(modify_spanning_header(tbl_summary(trial, by = trt, include = age), all_stat_cols() ~ \"**Treatments**\", level = 1), all_stat_cols() ~ \"**Treatments**\", level = 2), all_stat_cols() ~ \"**Treatments**\", level = 3), columns = everything(), level = 1), columns = everything(), level = 2))\n```\n\n----------------------------------------\n\nTITLE: Using Style Prefix and Suffix Parameters\nDESCRIPTION: Example of using the prefix and suffix parameters in style functions to add text before or after formatted results.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nstyle_*(prefix, suffix)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in separate_p_footnotes Function\nDESCRIPTION: Demonstrates error handling when attempting to use both add_p() and add_difference() simultaneously with separate_p_footnotes(). Shows proper function usage requirements.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/separate_p_footnotes.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nseparate_p_footnotes(add_p(add_difference(tbl_summary(trial, by = trt, include = grade))))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Header Footnote Modification in gtsummary\nDESCRIPTION: This code tests that proper error messages are displayed when a non-positive integer is passed to the level argument of modify_footnote_spanning_header and remove_footnote_spanning_header functions.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_footnote_spanning_header.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify_footnote_spanning_header(base_tbl_summary, footnote = \"Treatment as of June\",\n  columns = all_stat_cols(), level = 0L)\n```\n\nLANGUAGE: r\nCODE:\n```\nremove_footnote_spanning_header(base_tbl_summary, columns = all_stat_cols(),\nlevel = 0L)\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count Basic Usage\nDESCRIPTION: Test cases for the count function with different datasets including trial data and iris dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_hierarchical_count(data = trial, variables = trt))\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_hierarchical_count(data = iris, variables = Species))\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Dynamic Header in tbl_summary\nDESCRIPTION: Tests error handling when attempting to use an invalid dynamic header template with modify_spanning_header(). Demonstrates how the function handles invalid {element} placeholder.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_spanning_header.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify_spanning_header(tbl_summary(trial, include = marker), label = \"This is not a valid {element}.\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid CI Pattern in gtsummary (R)\nDESCRIPTION: This code demonstrates error handling when an invalid pattern is provided for confidence interval display in add_ci(). It shows that only 'stat' and 'ci' are allowed in the pattern.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nadd_ci(tbl_summary(trial, include = age, missing = \"no\", statistic = list(age = \"{mean}\")),\npattern = \"{not_a_stat} [{ci}]\")\n```\n\n----------------------------------------\n\nTITLE: Double P-value Addition Error Example\nDESCRIPTION: Demonstrates error handling when attempting to add p-values twice to the same summary table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nadd_p(add_p(tbl_summary(select(trial, age, trt), by = trt)))\n```\n\n----------------------------------------\n\nTITLE: Adding Column-Based Statistical Labels in gtsummary\nDESCRIPTION: Shows how to use add_stat_label() with location='column' to create a separate column for statistical descriptions in a gtsummary table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(modify_column_hide(add_stat_label(tbl, location = \"column\"),\nall_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: R Package Function Calls\nDESCRIPTION: Various R function calls demonstrating features like tbl_regression(), broom.helpers::tidy_group_by(), and modify_post_fmt_fun() used throughout the changelog.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ntbl_regression()\nbroom.helpers::tidy_group_by()\ngather_ard()\ntbl_merge(merge_vars)\nmodify_post_fmt_fun()\nadd_p()\nadd_difference()\nadd_variable_group_header()\nadd_significance_stars()\nremove_spanning_headers()\ntbl_strata_nested_stack()\ntbl_hierarchical()\ntbl_cross()\ntbl_likert()\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Mixed Summary Types in R\nDESCRIPTION: Demonstrates error handling when mixing continuous with categorical/dichotomous summary types.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_wide_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_wide_summary(cards::ard_stack(trial, cards::ard_dichotomous(variables = response),\n      cards::ard_continuous(variables = age), .missing = TRUE, .attributes = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Incomplete CI Pattern in gtsummary (R)\nDESCRIPTION: This snippet shows error handling when the pattern for confidence interval display is incomplete. It requires both 'stat' and 'ci' to be included in the pattern.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_summary.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nadd_ci(tbl_summary(trial, include = age, missing = \"no\", statistic = list(age = \"{mean}\")),\npattern = \"{ci}\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Formula with Hard-coded Variable in tbl_uvregression\nDESCRIPTION: Example of using the formula parameter in tbl_uvregression() with both dynamic placeholders and a hard-coded variable name.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nformula='{y} ~ {x} + grade'\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Group Header Length in tbl_stack\nDESCRIPTION: Tests error handling when providing incorrect length for group_header parameter. Should throw error indicating group_header must be length 2 or empty.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_stack.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ntbl_stack(tbls = list(t1_summary, t2_summary), group_header = c(\"Table\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Digits in tbl_summary\nDESCRIPTION: Example showing how to specify different precision levels for specific statistics using a named list in the digits parameter of tbl_summary().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_4\n\nLANGUAGE: R\nCODE:\n```\ntbl_summary(digits = age ~ list(sd = 2))\n```\n\n----------------------------------------\n\nTITLE: Testing sort_hierarchical Invalid Sort Parameter in R\nDESCRIPTION: Test case verifying error handling when passing an invalid sort parameter to sort_hierarchical function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/sort_hierarchical.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nsort_hierarchical(tbl, \"10\")\n```\n\n----------------------------------------\n\nTITLE: Adding Overall Statistics to Unstratified tbl_summary in R\nDESCRIPTION: This snippet attempts to add overall statistics to an unstratified tbl_summary object, which is not allowed. The error message indicates that add_overall() can only be used when the original table is stratified using the 'by' parameter in tbl_summary().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_summary.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nadd_overall(tbl_summary(mtcars))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_merge - Invalid Input\nDESCRIPTION: Shows error when trying to merge non-gtsummary objects.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ntbl_merge(list(mtcars))\n```\n\n----------------------------------------\n\nTITLE: Custom P-value Formatting with add_p.tbl_survfit()\nDESCRIPTION: Demonstrates using add_p() with a custom p-value formatting function (s_ns) to display 'N.S.' instead of numeric p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_survfit.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_p(tbl, pvalue_fun = s_ns))\n```\n\n----------------------------------------\n\nTITLE: Adding P-values with oneway.test in R\nDESCRIPTION: Demonstrates the replacement for deprecated aov test in add_p(), showing how to use oneway.test with var.equal parameter instead.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_7\n\nLANGUAGE: R\nCODE:\n```\nadd_p(test = ~'oneway.test', test.args = ~list(var.equal = TRUE))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical with Invalid Digits Parameter\nDESCRIPTION: Error case demonstrating proper error handling when digits parameter is incorrectly specified.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical(data = trial2, variables = c(stage, grade), denominator = trial2, id = id, digits = \"0\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Level in tbl_regression\nDESCRIPTION: Shows error handling for invalid level specification in regression output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ninline_text(test_inline3, variable = \"stage\", level = \"Tsdfgsdfg1\")\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count with 'overall_row' Parameter in R\nDESCRIPTION: Tests the overall row functionality including boolean parameter validation and different display formats.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_13\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_hierarchical_count(data = trial, variables = trt, overall_row = TRUE))\n```\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = trial, variables = trt, overall_row = \"test\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Column Selection in tbl_summary\nDESCRIPTION: Demonstrates error handling when trying to access non-existent columns in a tbl_summary object.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninline_text(test_inline2, variable = \"age\", column = \"Pla5cebo\")\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration Functions in R\nDESCRIPTION: Functions for managing gtsummary themes and table styling options.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_10\n\nLANGUAGE: R\nCODE:\n```\nbold_labels()\nbold_levels()\nitalicize_labels()\nitalicize_levels()\nmodify_header()\nmodify_spanning_header()\nmodify_footnote()\nmodify_caption()\n```\n\n----------------------------------------\n\nTITLE: tbl_svysummary Value Error Handling in R\nDESCRIPTION: Demonstrates error handling when an invalid value is provided for the grade variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ntbl_svysummary(svy_trial, value = \"grade\" ~ \"IV\", include = c(grade, response))\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid List Content in tbl_stack\nDESCRIPTION: Tests error handling when passing a list containing non-gtsummary objects. Should throw error indicating list elements must be gtsummary class.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_stack.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ntbl_stack(list(mtcars))\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Level Selection in tbl_summary\nDESCRIPTION: Shows error handling when specifying an invalid level for a categorical variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ninline_text(test_inline2, variable = \"stage\", level = \"Tsdfgsdfg1\", column = \"Drug B\")\n```\n\n----------------------------------------\n\nTITLE: Custom Labels in Survey Summary\nDESCRIPTION: Shows how to use custom variable labels in the summary output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl)\n```\n\n----------------------------------------\n\nTITLE: Implementing McNemar Test in R with Updated Syntax\nDESCRIPTION: Example showing the updated syntax for McNemar test in add_p.tbl_summary() function, requiring the group parameter for alignment with other paired test syntaxes.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_11\n\nLANGUAGE: R\nCODE:\n```\nadd_p.tbl_summary(test = . ~ \"mcnemar.test\", group = id)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Variable Selection in tbl_summary\nDESCRIPTION: Demonstrates error handling when trying to access a non-existent variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ninline_text(test_inline2, variable = \"st55age\", level = \"T1\", column = \"Drug B\")\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_merge with Mismatched Arguments\nDESCRIPTION: Shows error when tab_spanner length doesn't match the number of tables being merged.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\ntbl_merge(tbls = list(t0, t1), tab_spanner = c(\"Table\"))\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical with 'by' Parameter\nDESCRIPTION: Shows how to create hierarchical tables with stratification using the 'by' parameter\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_hierarchical(data = trial2, variables = stage, by = trt, denominator = trial2, id = id))\n```\n\n----------------------------------------\n\nTITLE: Testing Missing Parameters in tbl_cross\nDESCRIPTION: Demonstrates error handling for missing required parameters in cross tables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\ninline_text(tbl_cross, row_level = \"Drug A\")\n```\n\n----------------------------------------\n\nTITLE: R Package Citation Implementation\nDESCRIPTION: Code example showing how to cite the gtsummary R Journal manuscript using the citation function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_12\n\nLANGUAGE: R\nCODE:\n```\ncitation(\"gtsummary\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Variable in tbl_regression\nDESCRIPTION: Demonstrates error handling for non-existent variable in regression output.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\ninline_text(test_inline3, variable = \"st55age\")\n```\n\n----------------------------------------\n\nTITLE: Testing show_header_names with Unknown Class\nDESCRIPTION: Shows fallback behavior when dealing with an unknown table class.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/show_header_names.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nshow_header_names(test_table)\n```\n\n----------------------------------------\n\nTITLE: Testing filter_p() Error Message in R\nDESCRIPTION: Tests error handling when attempting to filter p-values that don't exist in a summary table. Demonstrates the expected error message when filter_p() is called on a tbl_summary object without p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/sort_filter_p.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nfilter_p(tbl_summary(trial, by = trt, include = c(response, marker, trt), missing = \"no\"))\n```\n\n----------------------------------------\n\nTITLE: Line-Character Mapping Data\nDESCRIPTION: Sequential mapping of line numbers to single character values, possibly used for encoding or mapping purposes. Contains line numbers 144-179 with corresponding uppercase letters.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n144 T\n145 D\n146 E\n147 H\n148 J\n149 K\n150 N\n151 O\n152 Q\n153 T\n154 L\n155 M\n156 P\n157 Q\n158 T\n159 F\n160 G\n161 I\n162 K\n163 N\n164 O\n165 Q\n166 T\n167 L\n168 M\n169 O\n170 R\n171 T\n172 J\n173 K\n174 M\n175 O\n176 R\n177 T\n178 L\n179 M\n```\n\n----------------------------------------\n\nTITLE: Using add_stat_label() with tbl_merge() in gtsummary\nDESCRIPTION: Demonstrates how add_stat_label() works when applied to tables that are subsequently merged using tbl_merge().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl1)\n```\n\n----------------------------------------\n\nTITLE: Workflow Model Extraction Update\nDESCRIPTION: Updated code showing the transition from deprecated workflows::pull_workflow_fit() to the new workflows::extract_fit_parsnip() function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_13\n\nLANGUAGE: R\nCODE:\n```\nworkflows::extract_fit_parsnip(x)\n```\n\n----------------------------------------\n\nTITLE: Testing add_stat() with incorrect input class\nDESCRIPTION: This snippet shows the error message when providing an incorrect input class to add_stat(). The function requires a tbl_summary, tbl_svysummary, or tbl_continuous object as input, not a data frame.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nadd_stat(mtcars, fns = everything() ~ my_ttest2)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling - Invalid Input Type\nDESCRIPTION: Demonstrates error handling when passing an invalid input type (data.frame instead of gtsummary object) to filter_hierarchical().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/filter_hierarchical.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nfilter_hierarchical(data.frame(), sum(n) > 10)\n```\n\n----------------------------------------\n\nTITLE: Adding Variable Group Header to Modified Summary Table in R (gtsummary)\nDESCRIPTION: This code snippet attempts to create a summary table using tbl_summary(), modify it with modify_table_body(), and then add a variable group header. It results in an error because the table structure doesn't meet the requirements of add_variable_group_header().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_variable_group_header.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nadd_variable_group_header(modify_table_body(tbl_summary(trial, include = c(age,\n  response, death, marker), missing = \"no\"), ~ dplyr::relocate(.x, label,\n  .after = \"stat_0\")), header = \"the header row\", variables = c(response, death))\n```\n\n----------------------------------------\n\nTITLE: Testing remove_abbreviation() function with non-existent abbreviations in gtsummary\nDESCRIPTION: This code tests the error handling when attempting to remove an abbreviation that doesn't exist in the tbl_summary object. The function correctly throws an error stating there are no abbreviations to remove.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_abbreviation.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nremove_abbreviation(tbl_summary(trial, include = marker), \"Q3 = Third Quartile\")\n```\n\n----------------------------------------\n\nTITLE: Tidyverse Style Function Specification in tbl_survfit\nDESCRIPTION: Example demonstrating tidyverse shortcut notation in tbl_survfit's estimate_fun parameter to style and format percentages.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_15\n\nLANGUAGE: R\nCODE:\n```\ntbl_survfit(estimate_fun= ~style_sigfig(.x * 100))\n```\n\n----------------------------------------\n\nTITLE: Converting modified tbl_uvregression with custom tidy_fun to data frame in R\nDESCRIPTION: Converts a tbl_uvregression object (res6) with a modified tidy_fun that alters p-value display to a data frame using pipe operator. The output shows age and grade variables with their statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_global_p.tbl_uvregression.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nres6 %>% as.data.frame()\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Missing By Parameter\nDESCRIPTION: Demonstrates error handling when attempting to add p-values without specifying a grouping variable in the by parameter.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_svysummary.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nadd_p(tbl_svysummary(svy_trial))\n```\n\n----------------------------------------\n\nTITLE: Setting NA for Categorical Labels in gtsummary\nDESCRIPTION: Demonstrates using NA values to selectively apply labels only to continuous variables in a gtsummary table.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_stat_label(tbl_summary(trial, type = age ~ \"continuous2\",\ninclude = c(age, response), missing = \"no\"), label = list(all_continuous() ~\n  \"Median (IQR)\", all_categorical() ~ NA_character_), location = \"row\"))\n```\n\n----------------------------------------\n\nTITLE: Testing error handling for invalid statistic format\nDESCRIPTION: Tests error handling when statistic argument doesn't contain curly braces. Demonstrates proper error message when format is incorrect.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_n.tbl_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nadd_n(tbl_summary(trial, by = trt, include = c(trt, age, grade, response)), statistic = \"no_curlies\")\n```\n\n----------------------------------------\n\nTITLE: Testing add_p.tbl_cross() Error Handling with NA source_note in R\nDESCRIPTION: This code snippet tests the error handling of the add_p() function when applied to a tbl_cross object with NA passed to the source_note parameter. The function correctly raises an error indicating it can't convert a logical vector to a function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_cross.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nadd_p(tbl_cross(trial, row = stage, col = trt), source_note = NA)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in tbl_summary\nDESCRIPTION: Shows proper error handling for invalid tbl_summary() calls including missing data argument, incorrect data type, and empty dataset.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary()\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary(data = letters)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary(data = dplyr::tibble())\n```\n\n----------------------------------------\n\nTITLE: Error Handling for add_overall with Unstratified tbl_continuous Table in R\nDESCRIPTION: This code demonstrates the error that occurs when attempting to use the add_overall() function with a tbl_continuous table that is not stratified. The function requires a stratified table created with the 'by' parameter but receives an unstratified one instead.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_continuous.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nadd_overall(tbl_continuous(mtcars, include = gear, variable = mpg))\n```\n\n----------------------------------------\n\nTITLE: Testing remove_abbreviation() with mismatched abbreviation specifications in gtsummary\nDESCRIPTION: This code tests the error handling when trying to remove an abbreviation that doesn't match the ones previously added. It first adds a 'Q1' abbreviation, then attempts to remove 'Q3', resulting in an appropriate error message.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_abbreviation.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nremove_abbreviation(modify_abbreviation(tbl_summary(trial, include = marker),\n\"Q1 = First Quartile\"), \"Q3 = Third Quartile\")\n```\n\n----------------------------------------\n\nTITLE: Basic Categorical Summary Without Missing Values in R\nDESCRIPTION: Generates a wide summary table of dichotomous and categorical variables without missing values. Displays response and grade statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_wide_summary.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(tbl_ard_wide_summary(cards::ard_stack(trial, cards::ard_dichotomous(\n        variables = response), cards::ard_categorical(variables = grade))))\n```\n\n----------------------------------------\n\nTITLE: Testing add_p.tbl_cross() Error Handling with NULL source_note in R\nDESCRIPTION: This code snippet tests the error handling of the add_p() function when applied to a tbl_cross object with NULL passed to the source_note parameter. The function correctly raises an error indicating that the source_note argument must be a logical scalar, not NULL.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_cross.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nadd_p(tbl_cross(trial, row = stage, col = trt), source_note = NULL)\n```\n\n----------------------------------------\n\nTITLE: Error handling with invalid statistics in tbl_continuous() in R\nDESCRIPTION: Shows the error messages that occur when providing invalid statistics to the 'statistic' parameter. The function requires glue elements referring to functions.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ntbl_continuous(trial, variable = age, include = grade, statistic = ~letters)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_continuous(trial, variable = age, include = grade, statistic = ~\"mean\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Statistical Label Assignment\nDESCRIPTION: Shows error cases when invalid labels are provided to add_stat_label() function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.tbl_svysummary.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nadd_stat_label(tbl_svysummary(svy_trial, include = c(age, trt), by = trt,), label = age ~ letters)\n```\n\n----------------------------------------\n\nTITLE: Testing Percentage Calculations in tbl_summary\nDESCRIPTION: Demonstrates different percentage calculation methods (column, row, cell) in tbl_summary() with custom statistics display.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_summary.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ntbl_summary(trial, by = trt, include = grade, percent = \"column\", statistic = ~\"{p}%\")\ntbl_summary(trial, by = trt, include = grade, percent = \"row\", statistic = ~\"{p}%\")\ntbl_summary(trial, by = trt, include = grade, percent = \"cell\", statistic = ~\"{p}%\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Footnote Body with Invalid Rows Argument in R\nDESCRIPTION: This code snippet attempts to modify the footnote body of a gtsummary table using the modify_footnote_body() function. It demonstrates an error case where an invalid rows predicate is provided, resulting in an error message.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_footnote_body.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nmodify_footnote_body(base_tbl_summary, footnote = \"this will not appear\",\n  columns = label, rows = not_a_predicate)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Invalid 'rows' Parameter in modify_table_styling\nDESCRIPTION: Tests that proper error messages are shown when an invalid predicate is passed to the 'rows' parameter of the modify_table_styling function. The test creates a summary table with trial data filtered by grade, then attempts to modify it with an invalid rows specification.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_table_styling.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nmodify_table_styling(tbl_summary(trial, include = grade), columns = \"label\",\nrows = \"not_a_predicate\", indent = 8L)\n```\n\n----------------------------------------\n\nTITLE: Testing add_stat() with dimension mismatch\nDESCRIPTION: This snippet illustrates the error message produced when there is a dimension mismatch between the input data and the added statistic. The function expects statistics with matching dimensions to the original data.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nadd_stat(tbl_summary(trial, include = age, type = age ~ \"continuous2\",\nstatistic = everything() ~ c(\"{mean}\", \"{sd}\")), fns = everything() ~\n  return_two_by_two_10s, location = everything() ~ \"label\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Test Specification\nDESCRIPTION: Shows error handling when an invalid test specification is provided to add_difference().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_difference.tbl_svysummary.md#2025-04-23_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nadd_difference(tbl_svysummary(svy_trial, by = trt, include = age), test = age ~\n        letters)\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_survfit Error with Multiple Stratification Variables in R\nDESCRIPTION: Demonstrates the error case when attempting to create a survival table with tbl_survfit() using multiple stratifying variables (trt and grade). The function is designed to work with at most one stratifying variable.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_survfit.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ntbl_survfit(survival::survfit(survival::Surv(ttdeath, death) ~ trt + grade, trial), times = c(12, 24))\n```\n\n----------------------------------------\n\nTITLE: Testing add_stat() with functions producing warnings with curly braces\nDESCRIPTION: This code tests how add_stat() handles functions that produce warnings containing curly braces. It defines a custom function that triggers a warning message with curly braces and passes it to add_stat().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\ncurly_warning <- (function(x, ...) {\n  warning(\"{curly} warning\")\n  10\n})\nas.data.frame(add_stat(tbl, fns = ~curly_warning))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in add_global_p Function with Invalid anova_fun in R\nDESCRIPTION: This code tests the error handling of the add_global_p function when an unsupported anova_fun named 'not_anova' is provided. The function is expected to throw an error indicating that there was an issue running the anova_fun, specifically mentioning a non-numeric argument to a binary operator.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_global_p.tbl_regression.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nres <- add_global_p(tbl, anova_fun = not_anova)\n```\n\n----------------------------------------\n\nTITLE: tbl_svysummary Missing Text Parameter Tests in R\nDESCRIPTION: Tests various scenarios for the missing_text parameter including valid and invalid inputs.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_svysummary.md#2025-04-23_snippet_9\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(tbl_svysummary(svy_trial, include = response, missing_text = \"(MISSING)\"), col_label = FALSE)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_svysummary(svy_trial, include = response, missing_text = letters)\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_svysummary(svy_trial, include = response, missing_text = 10L)\n```\n\n----------------------------------------\n\nTITLE: Nested Execution Restriction in tbl_strata_nested_stack\nDESCRIPTION: Illustrates error handling when attempting to nest tbl_strata_nested_stack() calls. Shows that the function can only be executed once on a table due to the presence of 'tbl_indent_id1' column.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_strata_nested_stack.md#2025-04-23_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ntbl_strata_nested_stack(trial, strata = trt, function(.x) {\n  tbl_strata_nested_stack(.x, strata = grade, function(.y) {\n    modify_header(tbl_summary(.y, include = age, missing = \"no\"), all_stat_cols() ~\n      \"**Summary Statistics**\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Testing modify_column_merge() with Linear Regression and Missing Column\nDESCRIPTION: This code tests the error handling when applying modify_column_merge() to a regression table created with tbl_regression() where the pattern includes a non-existent column. It confirms proper error reporting when referencing columns that don't exist.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_column_merge.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nmodify_column_merge(tbl_regression(lm(mpg ~ factor(am), mtcars)), rows = !is.na(\n  conf.low), pattern = \"{conf.low}:::{not_in_table}\")\n```\n\n----------------------------------------\n\nTITLE: Data Type Validation in tbl_strata_nested_stack\nDESCRIPTION: Shows error handling when the first printed column is not of character type. Validates that the first column must be character data type.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_strata_nested_stack.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ntbl_strata_nested_stack(mtcars, strata = am, ~ as_gtsummary(.x))\n```\n\n----------------------------------------\n\nTITLE: Error handling with invalid value filtering in tbl_continuous() in R\nDESCRIPTION: Shows the errors that occur when providing invalid values to the 'value' parameter, either non-existent values or non-scalar values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_8\n\nLANGUAGE: r\nCODE:\n```\ntbl_continuous(trial, variable = age, include = c(trt, grade), value = trt ~\n  \"XXXXXXXXXX\")\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_continuous(trial, variable = age, include = c(trt, grade), value = trt ~\n  letters)\n```\n\n----------------------------------------\n\nTITLE: Testing sort_hierarchical Invalid Input Error in R\nDESCRIPTION: Test case verifying error handling when passing an invalid data frame input to sort_hierarchical function.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/sort_hierarchical.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nsort_hierarchical(data.frame())\n```\n\n----------------------------------------\n\nTITLE: Error handling with multiple 'by' variables in tbl_continuous() in R\nDESCRIPTION: Shows the error that occurs when trying to use multiple variables in the 'by' parameter. The function suggests using tbl_strata() for stratifying by multiple variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_continuous.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ntbl_continuous(trial, variable = age, include = grade, by = c(stage, trt))\n```\n\n----------------------------------------\n\nTITLE: Duplicate add_stat_label() Warning Message in gtsummary\nDESCRIPTION: Shows the warning message displayed when attempting to apply add_stat_label() to a table that already has it applied.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ninvisible(add_stat_label(add_stat_label(tbl_summary(trial, include = c(age, trt),\n))))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in modify_footnote() with Invalid Placeholder in gtsummary\nDESCRIPTION: This code tests how modify_footnote() handles an invalid template placeholder '{element}' when working with a tbl_summary() object. The test correctly shows that an error is produced with helpful guidance to use show_header_names() to find valid placeholders.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_footnote.md#2025-04-23_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nmodify_footnote(tbl_summary(trial, include = marker), label = \"This is not a valid {element}.\")\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_hierarchical_count Error Cases\nDESCRIPTION: Error handling test cases for missing data argument and invalid input type.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_9\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count()\n```\n\nLANGUAGE: r\nCODE:\n```\ntbl_hierarchical_count(data = letters)\n```\n\n----------------------------------------\n\nTITLE: Testing sort_p() Error Message in R\nDESCRIPTION: Tests error handling when attempting to sort p-values that don't exist in a summary table. Demonstrates the expected error message when sort_p() is called on a tbl_summary object without p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/sort_filter_p.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nsort_p(tbl_summary(trial, by = trt, include = c(response, marker, trt), missing = \"no\"))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Grouped Continuous Data in R\nDESCRIPTION: Demonstrates error handling when attempting to summarize continuous data with grouping variables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_wide_summary.md#2025-04-23_snippet_2\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_wide_summary(cards::ard_continuous(trial, by = trt, variables = age))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating add_q() Error When Missing p.value Column in R\nDESCRIPTION: This code snippet shows an error that occurs when the add_q() function from the gtsummary package is called on a table that doesn't have a p.value column. The add_q() function specifically requires the presence of this column to calculate q-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_q.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nadd_q(table1)\n```\n\n----------------------------------------\n\nTITLE: Error Example: Invalid Element Reference in modify_header() with tbl_summary\nDESCRIPTION: Demonstrates the error that occurs when trying to use an undefined {element} placeholder in modify_header()'s label parameter. The code attempts to modify a table header with an invalid template string.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_header.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify_header(tbl_summary(trial, include = marker), label = \"This is not a valid {element}.\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling in modify_table_body Function\nDESCRIPTION: Shows how modify_table_body handles errors by demonstrating intentional error generation and the resulting error message format.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/modify_table_body.md#2025-04-23_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nmodify_table_body(tbl_summary(trial, include = marker), ~ stop(\n        \"I made an error.\"))\n```\n\n----------------------------------------\n\nTITLE: Error when using add_overall with unstratified tbl_svysummary\nDESCRIPTION: This snippet demonstrates the error that occurs when attempting to use add_overall() on a tbl_svysummary object that was not created with a 'by' variable. The function requires stratification to be able to add an overall column.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_overall.tbl_svysummary.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nadd_overall(tbl_svysummary(svy_mtcars))\n```\n\n----------------------------------------\n\nTITLE: Failing bold_p() Call with tbl_summary\nDESCRIPTION: Example showing error handling when bold_p() is called on a tbl_summary object that doesn't contain p-values. The error occurs because the required 'p.value' column is missing from the table body.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/bold_p.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nbold_p(tbl_summary(trial, by = trt, include = c(response, marker, trt), missing = \"no\"))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in tbl_merge - Single Table\nDESCRIPTION: Demonstrates error handling when attempting to merge a single table instead of a list of tables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ntbl_merge(t1)\n```\n\n----------------------------------------\n\nTITLE: Testing tbl_merge with Invalid Tab Spanner Type\nDESCRIPTION: Demonstrates error handling when tab_spanner argument is numeric instead of NULL, FALSE, or character.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_merge.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ntbl_merge(tbls = list(t0, t1), tab_spanner = 1)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Statistics Format in R\nDESCRIPTION: Demonstrates error handling when the statistic parameter is incorrectly formatted without curly braces. Shows proper error message suggesting the correct syntax.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_n.tbl_svysummary.md#2025-04-23_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nadd_n(tbl_svysummary(svy_trial, by = trt, include = c(trt, age, grade, response)),\nstatistic = \"no_curlies\")\n```\n\n----------------------------------------\n\nTITLE: Using Custom Labels with Continuous Variables in gtsummary\nDESCRIPTION: Shows how to apply custom labels to specific continuous variables, displaying both median/IQR and range statistics.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_stat_label.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(add_stat_label(tbl_summary(trial, include = c(age, grade, trt),\nby = trt, type = all_continuous() ~ \"continuous2\", statistic = all_continuous() ~\n  c(\"{median} ({p25}, {p75})\", \"{min} - {max}\")), label = age ~ c(\n  \"Median (IQR)\", \"Range\")))\n```\n\n----------------------------------------\n\nTITLE: Removing Reference Rows from tbl_summary in R\nDESCRIPTION: Demonstrates an error case when trying to remove reference rows from a tbl_summary object. The code fails because the 'reference_row' column is not present in the table_body of the summary object.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/remove_row_type.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nremove_row_type(tbl_summary(trial, include = c(response, age, grade)), type = \"reference\")\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling - Invalid Filter Expression\nDESCRIPTION: Shows error handling when providing an invalid filter expression (numeric instead of logical expression) to filter_hierarchical().\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/filter_hierarchical.md#2025-04-23_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nfilter_hierarchical(tbl, 10)\n```\n\n----------------------------------------\n\nTITLE: Linear Mixed Effects Model Testing\nDESCRIPTION: Demonstrates p-value calculation using lme4 package for mixed effects models, with group response modification.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_p.tbl_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nas.data.frame(modify_column_hide(add_p(tbl_summary(trial, by = trt), test = everything() ~ \"lme4\", group = response), all_stat_cols()))\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Patterns in add_ci() in R\nDESCRIPTION: Demonstrates error messages when providing invalid pattern arguments to add_ci(), showing validation for both non-existent elements and missing required elements.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_ci.tbl_svysummary.md#2025-04-23_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nadd_ci(tbl_svysummary(svy_trial, include = age, missing = \"no\", statistic = list(\n  age = \"{mean}\")), pattern = \"{not_a_stat} [{ci}]\")\n```\n\nLANGUAGE: r\nCODE:\n```\nadd_ci(tbl_svysummary(svy_trial, include = age, missing = \"no\", statistic = list(\n  age = \"{mean}\")), pattern = \"{ci}\")\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Type Specification in R\nDESCRIPTION: Shows error handling when attempting to use incorrect summary types or incompatible variable specifications.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_ard_wide_summary.md#2025-04-23_snippet_3\n\nLANGUAGE: R\nCODE:\n```\ntbl_ard_wide_summary(cards::ard_stack(trial, cards::ard_continuous(variables = age),\n      .missing = TRUE, .attributes = TRUE), type = age ~ \"categorical\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid P-value Formatting in R\nDESCRIPTION: Shows the error message produced when style_pvalue() function is called with an invalid digits parameter value of 8. The function only accepts digits values of 1, 2, or 3.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/style_pvalue.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nstyle_pvalue(0.05, digits = 8)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Direct Object Input in tbl_stack\nDESCRIPTION: Tests error handling when passing tbl_summary objects directly instead of as a list. Should throw error indicating tbls argument must be a list.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_stack.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ntbl_stack(t1_summary, t2_summary)\n```\n\n----------------------------------------\n\nTITLE: Testing Duplicate Variables Warning\nDESCRIPTION: Shows warning message when dealing with duplicate variables in stacked tables.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_9\n\nLANGUAGE: r\nCODE:\n```\ntbl_stack(list(t1, t1)) %>% inline_text(variable = marker, column = estimate)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Probability in tbl_survfit\nDESCRIPTION: Shows error handling for invalid probability value specification.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ninline_text(tbl2, prob = 0.2, level = \"Drug A\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Time in tbl_survfit\nDESCRIPTION: Demonstrates error handling for invalid time point specification.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/inline_text.md#2025-04-23_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ninline_text(tbl1, time = 10000, level = \"Drug A\")\n```\n\n----------------------------------------\n\nTITLE: Character Sequence\nDESCRIPTION: A sequence of single uppercase letters, one per line, spanning from line numbers 36 to 71\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/tbl_hierarchical.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nR\nT\nH\nI\nK\nM\nO\nQ\nS\nJ\nL\nN\nP\nR\nT\nD\nE\nG\nI\nL\nM\nO\nQ\nT\nN\nP\nQ\nT\nJ\nK\nN\nP\nQ\nT\nL\nN\n```\n\n----------------------------------------\n\nTITLE: R Package Update Example - Formula String\nDESCRIPTION: Example showing formula syntax with adjustment variables\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_21\n\nLANGUAGE: R\nCODE:\n```\n\"{y} ~ {x} + age\"\n```\n\n----------------------------------------\n\nTITLE: R Package Update Example - Anonymous Function\nDESCRIPTION: Example showing tidyverse shortcut notation for anonymous functions\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/NEWS.md#2025-04-23_snippet_20\n\nLANGUAGE: R\nCODE:\n```\n~style_pvalue(.x, digits = 2)\n```\n\n----------------------------------------\n\nTITLE: Converting tbl_uvregression with global p-values to data frame in R\nDESCRIPTION: Converts a tbl_uvregression object with global p-values to a data frame for inspection. The result shows age and grade variables with their respective statistics and p-values.\nSOURCE: https://github.com/ddsjoberg/gtsummary.git/blob/main/tests/testthat/_snaps/add_global_p.tbl_uvregression.md#2025-04-23_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nas.data.frame(res)\n```"
  }
]