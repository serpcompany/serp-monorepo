[
  {
    "owner": "finos",
    "repo": "perspective",
    "content": "TITLE: Embedding and Loading <perspective-viewer> Web Component in HTML and JavaScript\nDESCRIPTION: Demonstrates embedding the <perspective-viewer> custom Web Component in an HTML page and asynchronously loading a data table into it using JavaScript. Requires the Perspective library to be imported and initialized beforehand. The snippet creates a <perspective-viewer> element, assigns it an ID, and calls its async load method with a data table object as input. This setup enables dynamic data visualization configuration and rendering inside the viewer element.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/viewer.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer id=\"view1\"></perspective-viewer>\n<script type=\"module\">\n    const viewer = document.createElement(\"perspective-viewer\");\n    await viewer.load(table);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Split-By View with Perspective Table Using JavaScript\nDESCRIPTION: Creates a Perspective table view that splits data into multiple columns based on unique values of the columns \"a\" and \"c\". Requires the Perspective JS library with async handling as `table.view` returns a Promise. The `split_by` parameter is an array of strings defining columns used to pivot the view. The resulting view contains additional columns for each unique value in the specified columns.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/split_by.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = await table.view({ split_by: [\"a\", \"c\"] });\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying a View from a Perspective Table in Python\nDESCRIPTION: This snippet shows how to generate a View from an existing Perspective Table using the view() method, specifying grouping and filtering criteria. The example groups data by the \"float\" column and filters rows where the \"bool\" column equals True. The snippet retrieves data from the View in both columnar and JSON formats via to_columns() and to_json() methods respectively. Inputs include grouping and filtering parameters; outputs are data representations of the filtered and grouped View.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/table.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(group_by=[\"float\"], filter=[[\"bool\", \"==\", True]])\ncolumn_data = view.to_columns()\nrow_data = view.to_json()\n```\n\n----------------------------------------\n\nTITLE: Serializing Viewer State with save() - JavaScript\nDESCRIPTION: Serializes the state of a `<perspective-viewer>` element into a JSON object or a base64-encoded string. The `save()` method is asynchronous and returns a Promise that resolves with the serialized state. This token can then be stored and used to restore the viewer's state later using `restore()`.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/save_restore.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst json_token = await elem.save();\nconst string_token = await elem.save(\"string\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a Perspective Table from a Pandas DataFrame in Python\nDESCRIPTION: This snippet demonstrates the initialization of a Perspective Table from a pandas DataFrame containing various data types such as integers, floats, booleans, dates, datetimes, and strings. It shows importing necessary libraries and creating a DataFrame with 100 rows, then passing it to Perspective with an index set to the \"float\" column. Dependencies include pandas, numpy, datetime, and perspective Python packages. The input is a DataFrame and the output is a Perspective Table object ready for further operations.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/table.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date, datetime\nimport numpy as np\nimport pandas as pd\nimport perspective\n\ndata = pd.DataFrame({\n    \"int\": np.arange(100),\n    \"float\": [i * 1.5 for i in range(100)],\n    \"bool\": [True for i in range(100)],\n    \"date\": [date.today() for i in range(100)],\n    \"datetime\": [datetime.now() for i in range(100)],\n    \"string\": [str(i) for i in range(100)]\n})\n\ntable = perspective.table(data, index=\"float\")\n```\n\n----------------------------------------\n\nTITLE: Creating Expression-Based Columns in Perspective Views Using JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new view on a Perspective table that includes a new column defined by an expression combining existing columns 'a' and 'b'. The expressions property is set to an object where the key and value represent the expression to be evaluated. Required dependencies include the Perspective JavaScript library and an existing table object. The input is the table instance, and the output is a view including the new computed column.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/expressions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = await table.view({\n    expressions: { '\"a\" + \"b\"': '\"a\" + \"b\"' },\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing and Replacing Data in Perspective Table - JavaScript\nDESCRIPTION: This snippet shows how to use the clear and replace methods on a Perspective Table instance in JavaScript. It demonstrates removing all existing data with table.clear(), then replacing it by passing a new dataset, 'json', to table.replace(). Requires the Perspective JavaScript library and a pre-existing Table object. The parameter 'json' should conform to the table's schema and data types. The methods perform in-place mutation without returning a value.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/clear_and_replace.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntable.clear();\ntable.replace(json);\n```\n\n----------------------------------------\n\nTITLE: Creating and Serializing a Perspective View in JavaScript\nDESCRIPTION: This snippet demonstrates creating a Perspective Table with sample data, establishing a view that selects the 'name' column, converting the view to JSON format, and cleaning up by deleting the view. It showcases how to interact with Perspective's API asynchronously in JavaScript, focusing on data querying and serialization.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst table = await perspective.table({\n    id: [1, 2, 3, 4],\n    name: [\"a\", \"b\", \"c\", \"d\"]\n});\n\nconst view = await table.view({ columns: [\"name\"] });\nconst json = await view.to_json();\nawait view.delete();\n```\n\n----------------------------------------\n\nTITLE: Setting up Perspective Tornado Server in Python\nDESCRIPTION: This snippet demonstrates how to set up a Perspective server using Python and Tornado. It initializes the server, creates a local client, adds a table using CSV data, defines a websocket route, and starts the Tornado application.  It requires the `perspective`, `tornado`, and `csv` modules.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/architecture/client_server.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom perspective import Server, PerspectiveTornadoHandler\n\nserver = Server()\nclient = server.new_local_client()\nclient.table(csv, name=\"my_table\")\nroutes = [(\n    r\"/websocket\",\n    perspective.handlers.tornado.PerspectiveTornadoHandler,\n    {\"perspective_server\": server},\n)]\n\napp = tornado.web.Application(routes)\napp.listen(8080)\nloop = tornado.ioloop.IOLoop.current()\nloop.start()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Perspective Server (Server-only Mode) in JavaScript\nDESCRIPTION: Demonstrates the JavaScript code for connecting to a Perspective WebSocket server in Server-only Mode. It establishes a WebSocket connection, obtains a proxy handle to the remote table ('data_source') using `websocket.open_table()`, and then directly loads this table proxy into the `<perspective-viewer>` element. Operations performed on the client-side proxy are executed on the server.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/websocket.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst websocket = perspective.websocket(\"ws://localhost:8888/websocket\");\nconst table = websocket.open_table(\"data_source\");\ndocument.getElementById(\"viewer\").load(table);\n```\n\n----------------------------------------\n\nTITLE: Sharing a Table Across Multiple Perspective Viewers in JavaScript\nDESCRIPTION: This snippet illustrates creating a WebWorker and a table, then loading the same table into multiple <perspective-viewer> elements. Updates to the table are reflected across viewers, and table deletion is prevented until all viewers referencing it are removed. Dependencies include the perspective library and DOM elements with specific IDs.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/loading_data.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst viewer1 = document.getElementById(\"viewer1\");\nconst viewer2 = document.getElementById(\"viewer2\");\n\n// Create a new WebWorker\nconst worker = await perspective.worker();\n\n// Create a table in this worker\nconst table = await worker.table(data);\n\n// Load the same table in 2 different <perspective-viewer> elements\nawait viewer1.load(table);\nawait viewer2.load(table);\n\n// Both `viewer1` and `viewer2` will reflect this update\nawait table.update([{ x: 5, y: \"e\", z: true }]);\n```\n\n----------------------------------------\n\nTITLE: Performing Partial Updates on an Indexed Perspective Table (JavaScript/Python)\nDESCRIPTION: Illustrates how to perform partial, in-place updates on an indexed `Table`. The `update()` method uses the provided index values (e.g., `id: [1, 4]`) to identify rows and updates only the specified columns (e.g., `name`) for those rows. Requires an existing indexed `Table` instance.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/update_and_remove.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nindexed_table.update({ id: [1, 4], name: [\"x\", \"y\"] });\n```\n\nLANGUAGE: python\nCODE:\n```\nindexed_table.update({\"id\": [1, 4], \"name\": [\"x\", \"y\"]})\n```\n\n----------------------------------------\n\nTITLE: Initializing PerspectiveWidget with data and configuration in Python\nDESCRIPTION: This snippet shows how to create a PerspectiveWidget instance in Python by importing the class and passing various parameters like a dataset, plugin type, aggregation settings, and sorting rules. The widget accepts a data source along with keyword arguments to configure the visualization plugin (e.g., \"X Bar\"), specify aggregation logic for columns, and provide sorting directives. The data parameter can be a dataset or other supported input, and the widget integrates the Perspective API functionality within JupyterLab. Dependencies include the perspective Python package and its widget module.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/jupyterlab.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective.widget import PerspectiveWidget\nw = perspective.PerspectiveWidget(\n    data,\n    plugin=\"X Bar\",\n    aggregates={\"datetime\": \"any\"},\n    sort=[[\"date\", \"desc\"]]\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering with Perspective (Python)\nDESCRIPTION: This Python code snippet shows how to filter a Perspective table using the `table.view()` method with the `filter` parameter. The `filter` parameter is set to an array of arrays, where each inner array defines a filtering condition: the column name, the operator, and the operand.  This example sets a filter for column \"a\" where the value is less than 100. It assumes the Perspective table has been initialized.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/filter.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(filter=[[\"a\", \"<\", 100]])\n```\n\n----------------------------------------\n\nTITLE: Creating PerspectiveWidget in Python\nDESCRIPTION: This snippet demonstrates how to create a `PerspectiveWidget` in JupyterLab. It initializes the widget with data, specifies a plugin, sets aggregates, and defines sorting criteria.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective.widget import PerspectiveWidget\nw = perspective.PerspectiveWidget(\n    data,\n    plugin=\"X Bar\",\n    aggregates={\"datetime\": \"any\"},\n    sort=[[\"date\", \"desc\"]]\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Perspective Table Data with Filters, Aggregates, and Group By in Rust\nDESCRIPTION: Creates a View on a Perspective Table using Rust with optional configuration. The configuration specifies columns, aggregates, group by columns, and filters. Uses the ViewConfigUpdate struct and the Filter abstraction. Requires importing crate::config and handling await returns.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::config::*;\nlet view = table\n    .view(Some(ViewConfigUpdate {\n        columns: Some(vec![Some(\"Sales\".into())]),\n        aggregates: Some(HashMap::from_iter(vec![(\"Sales\".into(), \"sum\".into())])),\n        group_by: Some(vec![\"Region\".into(), \"Country\".into()]),\n        filter: Some(vec![Filter::new(\"Category\", \"in\", &[\n            \"Furniture\",\n            \"Technology\",\n        ])]),\n        ..ViewConfigUpdate::default()\n    }))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Querying Perspective Table - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a `view` on a Perspective table. It configures the view to select the \"Sales\" column, aggregate the \"Sales\" column using the \"sum\" function, group the data by \"Region\" and \"Country\", and filter the data to include only rows where the \"Category\" is either \"Furniture\" or \"Technology\".  This requires a pre-existing `table` object (likely an instance of a Perspective `Table`). The output is a view object that can be used for data manipulation and display.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/querying.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    columns: [\"Sales\"],\n    aggregates: { Sales: \"sum\" },\n    group_by: [\"Region\", \"Country\"],\n    filter: [[\"Category\", \"in\", [\"Furniture\", \"Technology\"]]],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Perspective WebSocket Server with Tornado in Python\nDESCRIPTION: Illustrates how to create and run a Perspective WebSocket server using Python and the Tornado framework. It initializes a `Server`, hosts a `Table` named 'data_source' via a local `Client`, and then configures a Tornado web application to expose this server through a WebSocket endpoint ('/websocket') using `PerspectiveTornadoHandler`. The server listens on port 8888.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/websocket.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective import Server\nfrom perspective.hadnlers.tornado import PerspectiveTornadoHandler\n\n# Create an instance of Server, and host a Table\nSERVER = Server()\nCLIENT = SERVER.new_local_client()\n\n# The Table is exposed at `localhost:8888/websocket` with the name `data_source`\nclient.table(data, name = \"data_source\")\n\napp = tornado.web.Application([\n    # create a websocket endpoint that the client JavaScript can access\n    (r\"/websocket\", PerspectiveTornadoHandler, {\"perspective_server\": SERVER})\n])\n\n# Start the Tornado server\napp.listen(8888)\nloop = tornado.ioloop.IOLoop.current()\nloop.start()\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective ESM with Webpack - JavaScript\nDESCRIPTION: Demonstrates importing WASM binaries using `import * as ... from ...`. The imported modules are directly passed to the `init_server` and `init_client` initialization methods. This approach leverages Webpack's handling of WebAssembly modules, which requires specific experimental features enabled in the Webpack configuration.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as SERVER_WASM from \"@finos/perspective/dist/wasm/perspective-server.wasm\";\nimport * as CLIENT_WASM from \"@finos/perspective-viewer/dist/wasm/perspective-viewer.wasm\";\n\nawait Promise.all([\n    perspective.init_server(SERVER_WASM),\n    perspective_viewer.init_client(CLIENT_WASM),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Worker Perspective Server and Client - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new Web Worker instance of perspective_server::Server in a browser environment and asynchronously obtain a Client connected to it using the perspective JavaScript library. Requires @finos/perspective as a dependency and must be run in a browser context. The function perspective.worker() is asynchronous and resolves to a connected Client object.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport perspective from \"@finos/perspective\";\nconst client = await perspective.worker();\n```\n\n----------------------------------------\n\nTITLE: Updating Viewer Properties via restore() in JavaScript\nDESCRIPTION: Provides multiple examples of using the `restore()` method with partial configuration objects to update specific properties like plugin, columns, settings (config panel visibility), expressions, filters, and sorts. Also demonstrates resetting individual properties (like `filter`) or the entire viewer configuration using `elem.reset()`.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the plugin (will also update `columns` to plugin-defaults)\nawait elem.restore({ plugin: \"X Bar\" });\n\n// Update plugin and columns (only draws once)\nawait elem.restore({ plugin: \"X Bar\", columns: [\"Sales\"] });\n\n// Open the config panel\nawait elem.restore({ settings: true });\n\n// Create an expression\nawait elem.restore({\n    columns: ['\"Sales\" + 100'],\n    expressions: { \"New Column\": '\"Sales\" + 100' },\n});\n\n// ERROR if the column does not exist in the schema or expressions\n// await elem.restore({columns: [\"\\\"Sales\\\" + 100\"], expressions: {}});\n\n// Add a filter\nawait elem.restore({ filter: [[\"Sales\", \"<\", 100]] });\n\n// Add a sort, don't remove filter\nawait elem.restore({ sort: [[\"Prodit\", \"desc\"]] });\n\n// Reset just filter, preserve sort\nawait elem.restore({ filter: undefined });\n\n// Reset all properties to default e.g. after `load()`\nawait elem.reset();\n```\n\n----------------------------------------\n\nTITLE: Restoring Viewer State with restore() - JavaScript\nDESCRIPTION: Restores the state of a `<perspective-viewer>` element from a JSON object or a base64-encoded string. The `restore()` method is asynchronous and takes the serialized state as input.  It updates the viewer's properties and settings based on the provided token, ensuring the schema is identical to avoid errors.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/save_restore.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait elem.restore(json_token);\nawait elem.restore(string_token);\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective in Node.js (JavaScript)\nDESCRIPTION: This snippet shows the standard way to import the `@finos/perspective` library in a Node.js environment using `require`. Unlike browser environments, the Node.js engine runs in-process by default, meaning factory functions like `worker()` are not needed. The imported module directly exposes the main Perspective API.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/worker.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = require(\"@finos/perspective\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective Client and Grouping Arrow Data in Python\nDESCRIPTION: This snippet demonstrates creating a local Perspective client, loading data from an Apache Arrow byte stream (`arrow_bytes_data`) into a Perspective table, creating a view that groups the data by 'CounterParty' and 'Security', and finally exporting the grouped data back into Arrow format. It requires the `perspective` library to be installed.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/python.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective import Server\n\nclient = Server().new_local_client()\ntable = client.table(arrow_bytes_data)\nview = table.view(group_by = [\"CounterParty\", \"Security\"])\narrow = view.to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Creating Table from Pandas DataFrame in Python\nDESCRIPTION: This code demonstrates how to load a Pandas DataFrame into a Perspective Table. It creates a sample DataFrame with various data types and then initializes a Perspective Table using this data, specifying the 'float' column as the index.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom datetime import date, datetime\nimport numpy as np\nimport pandas as pd\nimport perspective\n\ndata = pd.DataFrame({\n    \"int\": np.arange(100),\n    \"float\": [i * 1.5 for i in range(100)],\n    \"bool\": [True for i in range(100)],\n    \"date\": [date.today() for i in range(100)],\n    \"datetime\": [datetime.now() for i in range(100)],\n    \"string\": [str(i) for i in range(100)]\n})\n\ntable = perspective.table(data, index=\"float\")\n```\n\n----------------------------------------\n\nTITLE: Setting WebAssembly Linker Flags in Perspective Build (CMake)\nDESCRIPTION: This snippet configures linker flags for compiling Perspective to WebAssembly via CMake. It conditionally applies memory settings, export options, and customizes the build based on variables like PSP_WASM64 and PSP_WASM_EXCEPTIONS. Key parameters include memory limits, exported JavaScript API, and environment constraints. Designed to integrate with Emscripten, this block expects defined variables holding source files and dependencies.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(PSP_WASM_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} \\\n    --no-entry \\\n    --closure=1 \\\n    -s NO_FILESYSTEM=1 \\\n    -s ALLOW_MEMORY_GROWTH=1 \\\n    -s MODULARIZE=1 \\\n    -s WASM_BIGINT=1 \\\n    -s INCOMING_MODULE_JS_API=locateFile,psp_heap_size,psp_stack_trace,HEAPU8,HEAPU32,instantiateWasm \\\n    -s TEXTDECODER=2 \\\n    -s STANDALONE_WASM=1 \\\n    -s DYNAMIC_EXECUTION=0 \\\n    -s POLYFILL=0 \\\n    -s EXPORT_NAME=\\\"load_perspective\\\" \\\n    -s ERROR_ON_UNDEFINED_SYMBOLS=0 \\\n    -s NODEJS_CATCH_EXIT=0 \\\n    -s NODEJS_CATCH_REJECTION=0 \\\n    -s USE_ES6_IMPORT_META=1 \\\n    -s EXPORT_ES6=1 \\\n    -s EXPORTED_FUNCTIONS=${PSP_EXPORTED_FUNCTIONS_JOINED} \\\n\")\n\nif(PSP_WASM64)\n    set(PSP_WASM_LINKER_FLAGS \"${PSP_WASM_LINKER_FLAGS} \\\n        -s MAXIMUM_MEMORY=16gb \\\n    \")\nelse()\n    set(PSP_WASM_LINKER_FLAGS \"${PSP_WASM_LINKER_FLAGS} \\\n        -s MAXIMUM_MEMORY=4gb \\\n    \")\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hosted Table Names - Perspective - Rust\nDESCRIPTION: Calls the `get_hosted_table_names` method on a client instance and awaits the result. This asynchronous method fetches the names of all tables available to the client. The result is stored in the `tables` variable. The method returns a future that resolves to a collection of strings, where each string is the unique name of a table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/get_hosted_table_names.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet tables = client.get_hosted_table_names().await;\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocketServer and Hosting Arrow File in Node.js using Perspective\nDESCRIPTION: This snippet sets up a WebSocket server in Node.js using Perspective, serving static assets and hosting an Arrow file as a named table. It requires the Perspective library and filesystem access, enabling remote data management with large datasets.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/nodejs_server.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { WebSocketServer, table } = require(\"@finos/perspective\");\nconst fs = require(\"fs\");\n\n// Start a WS/HTTP host on port 8080.  The `assets` property allows\n// the `WebSocketServer()` to also serve the file structure rooted in this\n// module's directory.\nconst host = new WebSocketServer({ assets: [__dirname], port: 8080 });\n\n// Read an arrow file from the file system and host it as a named table.\nconst arr = fs.readFileSync(__dirname + \"/superstore.lz4.arrow\");\nawait table(arr, { name: \"table_one\" });\n```\n\n----------------------------------------\n\nTITLE: Creating and Loading a Table into Perspective Viewer using JavaScript\nDESCRIPTION: This snippet demonstrates creating a new WebWorker, initializing a table with data, and loading it into a <perspective-viewer> element. It requires the perspective library and proper data input to function. The table object manages data operations, and load() binds it to the viewer for visualization.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/loading_data.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a new worker, then a new table promise on that worker.\nconst worker = await perspective.worker();\nconst table = await worker.table(data);\n\n// Bind a viewer element to this table.\nawait viewer.load(table);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Perspective Server (Replicated Mode) in JavaScript/HTML\nDESCRIPTION: Shows the client-side HTML structure and JavaScript logic for connecting to a Perspective WebSocket server in Replicated Mode. The HTML defines a `<perspective-viewer>` element. The JavaScript connects to the WebSocket endpoint, opens the remote server table ('data_source_one'), creates a view on it, creates a local table mirrored from the server view using a worker, and loads this local table into the viewer. This ensures the client's table automatically reflects server-side updates.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/websocket.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer id=\"viewer\" editable></perspective-viewer>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a client that expects a Perspective server\n// to accept connections at the specified URL.\nconst websocket = await perspective.websocket(\n    \"ws://localhost:8888/websocket\"\n);\n\n// Get a handle to the Table on the server\nconst server_table = await websocket.open_table(\"data_source_one\");\n\n// Create a new view\nconst server_view = await table.view();\n\n// Create a Table on the client using `perspective.worker()`\nconst worker = await perspective.worker();\nconst client_table = await worker.table(view);\n\n// Load the client table in the `<perspective-viewer>`.\ndocument.getElementById(\"viewer\").load(client_table);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Theme via HTML Attribute\nDESCRIPTION: Shows how to set the default theme for a `<perspective-viewer>` element directly when declaring it in HTML by using the `theme` attribute.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer theme=\"Pro Light\"></perspective-viewer>\n```\n\n----------------------------------------\n\nTITLE: Creating a Perspective Table from a Polars DataFrame in Python\nDESCRIPTION: This snippet demonstrates the creation of a Perspective Table from a Polars DataFrame, illustrating Perspective's interoperability with the Polars library via Apache Arrow underpinnings. The example creates a simple Polars DataFrame and converts it directly into a Perspective Table without explicit indexing. Dependencies include the polars and perspective Python packages. Input is a Polars DataFrame; output is a Perspective Table object representing the same data.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/table.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = polars.DataFrame({\"a\": [1,2,3,4,5]})\ntable = perspective.table(df)\n```\n\n----------------------------------------\n\nTITLE: Building Static Library Dependencies and Special Build Flags with CMake\nDESCRIPTION: This snippet configures additional dependencies that require static library compilation such as Boost, Apache Arrow, re2, and exprtk using the psp_build_dep function. Apache Arrow is noted as building its own dependencies internally. The snippet adds the include directories for each dependency to the cumulative all_deps_INCLUDE_DIRS list. It also applies specific compiler definitions (e.g., -DTARGET_OS_OSX=1 for re2) and manages dependency build via add_subdirectory for Protobuf. This step ensures necessary libraries are correctly compiled and linked according to platform specifics.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\npsp_build_dep(\"Boost\" \"${PSP_CMAKE_MODULE_PATH}/Boost.txt.in\")\nlist(APPEND all_deps_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})\n\npsp_build_message(\"${Cyan}Building Apache Arrow${ColorReset}\")\npsp_build_dep(\"arrow\" \"${PSP_CMAKE_MODULE_PATH}/arrow.txt.in\")\nlist(APPEND all_deps_INCLUDE_DIRS\n    ${arrow_INCLUDE_DIRS})\n\nadd_definitions(-DTARGET_OS_OSX=1)\npsp_build_dep(\"re2\" \"${PSP_CMAKE_MODULE_PATH}/re2.txt.in\")\nlist(APPEND all_deps_INCLUDE_DIRS\n    ${re2_INCLUDE_DIRS})\n\npsp_build_dep(\"exprtk\" \"${PSP_CMAKE_MODULE_PATH}/exprtk.txt.in\")\nlist(APPEND all_deps_INCLUDE_DIRS\n    ${exprtk_INCLUDE_DIRS})\n\nadd_subdirectory(${PSP_CMAKE_MODULE_PATH}/../cpp/protos \"${CMAKE_BINARY_DIR}/protos-build\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Server and Table in Python\nDESCRIPTION: This code snippet initializes the server and a table, establishing a connection and configuring a websocket endpoint for the client to access the Perspective server.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nSERVER = Server()\nCLIENT = SERVER.new_local_client()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Perspective Server from Javascript Client\nDESCRIPTION: This snippet shows how to connect to a Perspective server using Javascript and replicate the server-side table on the client. It establishes a websocket connection, opens the specified table, creates a view, and then loads the data into a Perspective viewer element. It requires the `perspective` library and a running Perspective server.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/architecture/client_server.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst websocket = await perspective.websocket(\"ws://localhost:8080\");\nconst server_table = await websocket.open_table(\"my_table\");\nconst server_view = await server_table.view();\n\nconst worker = await perspective.worker();\nconst client_table = await worker.table(server_view);\n\nconst viewer = document.createElement(\"perspective-viewer\");\ndocument.body.appendChild(viewer);\nawait viewer.load(client_table);\n```\n\n----------------------------------------\n\nTITLE: Creating and Serializing a Perspective View in Rust\nDESCRIPTION: This code example shows initializing a Perspective Table using the Rust API with CSV data input, creating a view, converting the view to Arrow format asynchronously, and then deleting the view. It highlights how to manage data querying and serialization within a Rust environment, leveraging asynchronous operations for efficiency.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet opts = TableInitOptions::default();\nlet data = TableData::Update(UpdateData::Csv(\"x,y\\n1,2\\n3,4\".into()));\nlet table = client.table(data, opts).await?\n\nlet view = table.view(None).await?;\nlet arrow = view.to_arrow().await?;\nview.delete().await?;\n```\n\n----------------------------------------\n\nTITLE: Sharing a Table Between Multiple Perspective Viewers in JavaScript\nDESCRIPTION: Shows how to load the same `Table` instance (created on a worker) into multiple `<perspective-viewer>` elements identified by their IDs. Updates made to the underlying table will automatically reflect in all connected viewers. Deleting the table requires deleting all referencing viewers first.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer1 = document.getElementById(\"viewer1\");\nconst viewer2 = document.getElementById(\"viewer2\");\n\n// Create a new WebWorker\nconst worker = await perspective.worker();\n\n// Create a table in this worker\nconst table = await worker.table(data);\n\n// Load the same table in 2 different <perspective-viewer> elements\nawait viewer1.load(table);\nawait viewer2.load(table);\n\n// Both `viewer1` and `viewer2` will reflect this update\nawait table.update([{ x: 5, y: \"e\", z: true }]);\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Theme via restore() in JavaScript\nDESCRIPTION: Demonstrates how to programmatically set the theme of an existing `<perspective-viewer>` element after initialization using the `restore()` method with a configuration object.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = document.querySelector(\"perspective-viewer\");\nawait viewer.restore({ theme: \"Pro Dark\" });\n```\n\n----------------------------------------\n\nTITLE: Querying Perspective Table Data with Filters, Aggregates, and Group By in Python\nDESCRIPTION: Shows how to create a Perspective Table View in Python with specific columns selected, grouped by region and country, filtered by category membership, and aggregating Sales with a sum function. Assumes Perspective Python library usage.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(\n  columns=[\"Sales\"],\n  aggregates={\"Sales\": \"sum\"},\n  group_by=[\"Region\", \"Country\"],\n  filter=[[\"Category\", \"in\", [\"Furniture\", \"Technology\"]]]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Build Environment for Perspective Project in CMake\nDESCRIPTION: This snippet initializes the CMake environment by specifying the required minimum version, project name, C++ standard version (17), and build type (Release). It sets policies related to option behavior, environment variable handling, and package discovery to ensure compatibility and expected behavior during configuration. These foundational settings enable downstream build customization and environment-based overrides.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.2)\nproject(psp)\ninclude(CheckCCompilerFlag)\n\nset(CMAKE_BUILD_TYPE \"Release\")\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n# CMAKE POLICIES\n# option() should use new cmake behavior wrt variable clobbering\ncmake_policy(SET CMP0077 NEW)\n\n# BOOST_ROOT has been removed on Windows VMs in Azure:\n#\n# - https://github.com/actions/virtual-environments/issues/687\n# - https://github.com/actions/virtual-environments/issues/319\n#\n# `BOOST_ROOT` must be set in the environment, and policy CMP0074\n# must be set to `NEW` to allow BOOST_ROOT to be defined by env var\ncmake_policy(SET CMP0074 NEW)\n\n# Set CMP0094 to NEW - find the first version that matches constraints,\n# instead of the latest version installed.\ncmake_policy(SET CMP0094 NEW)\n```\n\n----------------------------------------\n\nTITLE: Initializing an Indexed Perspective Table in JavaScript\nDESCRIPTION: Creates a Perspective Table instance in JavaScript with a specified column as a primary key index, enabling in-place updates, partial updates, and row removals based on the index. Requires the Perspective library, and the index property must be a single column name of any type used for identifying rows uniquely. Input is the data and index column name; output is the created indexed Table instance. The `limit` option cannot be combined with `index`.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/options.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst indexed_table = await perspective.table(data, { index: \"a\" });\n```\n\n----------------------------------------\n\nTITLE: Instantiating Perspective Web Worker Client (JavaScript)\nDESCRIPTION: This snippet demonstrates how to instantiate the Web Worker client for Perspective in a browser environment. This method automatically creates a dedicated Web Worker process that hosts a Perspective server and loads the WebAssembly binary, enabling in-browser data processing.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/worker.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = await perspective.worker();\n```\n\n----------------------------------------\n\nTITLE: Loading Table into Perspective Viewer in JavaScript\nDESCRIPTION: This JavaScript code snippet loads a `Table` into a `<perspective-viewer>` instance. This enables virtual rendering and data visualization within the browser, powered by the server-side Perspective engine.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nawait viewer.load(table);\n```\n\n----------------------------------------\n\nTITLE: Grouping Data by Columns in Perspective View in JavaScript\nDESCRIPTION: Demonstrates creating a Perspective View grouped by columns 'a' and 'c'. Group By operation aggregates dataset values hierarchically as per specified columns order. Requires Perspective JavaScript library.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({ group_by: [\"a\", \"c\"] });\n```\n\n----------------------------------------\n\nTITLE: Connecting to Perspective Server via WebSocket - JavaScript\nDESCRIPTION: This example shows how to establish a WebSocket connection to a remote perspective_server::Server using the perspective library in JavaScript. The perspective.websocket(url) function asynchronously connects to the specified WebSocket endpoint and returns a connected Client. Requires @finos/perspective to be installed and is compatible with both browser and Node.js environments. The url parameter specifies the WebSocket server location.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport perspective from \"@finos/perspective\";\nconst client = await perspective.websocket(\"ws://locahost:8080/ws\");\n```\n\n----------------------------------------\n\nTITLE: Splitting Data by Columns in Perspective View in JavaScript\nDESCRIPTION: Shows creation of a View with split_by applied to columns 'a' and 'c'. Split By pivots the dataset into multiple columns corresponding to unique values. Requires Perspective JavaScript library.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({ split_by: [\"a\", \"c\"] });\n```\n\n----------------------------------------\n\nTITLE: Querying Perspective Table Data with Filters, Aggregates, and Group By in JavaScript\nDESCRIPTION: Illustrates creating a View on a Table filtered by category, grouped by region and country, selecting the \"Sales\" column, and aggregating the Sales column using sum. Requires Perspective JavaScript library and supports asynchronous API calls.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    columns: [\"Sales\"],\n    aggregates: { Sales: \"sum\" },\n    group_by: [\"Region\", \"Country\"],\n    filter: [[\"Category\", \"in\", [\"Furniture\", \"Technology\"]]],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for Pyodide/WebAssembly Builds in Perspective CMake\nDESCRIPTION: This snippet configures linker flags specifically for Pyodide or general WASM builds, including setting the exported functions and marking the module as a side module with no entry point. The flags ensure that the WASM build exports the required functions for external calls and is linked properly as a side module to allow dynamic linking of multiple modules. This setup is conditional on the PSP_PYODIDE variable being set, with a placeholder else branch for non-Pyodide configurations.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(PSP_PYODIDE)\n    set(PSP_WASM_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} \\\n        --no-entry \\\n        -s EXPORTED_FUNCTIONS=${PSP_EXPORTED_FUNCTIONS_JOINED} \\\n        -s SIDE_MODULE=2 \\\n    \")\nelse()\n# -s MEMORY_GROWTH_GEOMETRIC_STEP=1.0 \\\n\n```\n\n----------------------------------------\n\nTITLE: Load Arrow from ArrayBuffer - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates loading Apache Arrow data from an `ArrayBuffer` into a Perspective `Table`. It uses `node:fs/promises` to read the Arrow file and then passes the buffer to `client.table()`.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/table.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as fs from \"node:fs/promises\";\nconst table2 = await client.table(await fs.readFile(\"superstore.arrow\"));\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective in Node.js - JavaScript\nDESCRIPTION: Demonstrates importing the `@finos/perspective` module using the CommonJS `require` syntax, which is typical for Node.js environments. In Node.js, Perspective runs in-process and does not use WebWorkers, meaning the imported `perspective` object directly exposes the full API without needing an explicit worker instantiation.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst perspective = require(\"@finos/perspective\");\n```\n\n----------------------------------------\n\nTITLE: Unsetting Values and Handling Missing Columns in Updates (JavaScript/Python)\nDESCRIPTION: Shows how to unset a value within a `Table` by passing `null` (JavaScript) or `None` (Python) during an update. Also demonstrates that columns not included in the update data object/dictionary (like `z` in this example) will retain their existing values or remain unset in the updated rows.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/update_and_remove.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntable.update([{ x: 3, y: null }]); // `z` missing\n```\n\nLANGUAGE: python\nCODE:\n```\ntable.update([{\"x\": 3, \"y\": None}]) // `z` missing\n```\n\n----------------------------------------\n\nTITLE: Connecting to Perspective WebSocket Server from Browser in JavaScript\nDESCRIPTION: This snippet demonstrates connecting a browser client to the Perspective WebSocket server, establishing a virtual table instance on the server. It utilizes the Perspective library to replace Web Workers with a WebSocket connection, enabling remote data manipulation.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/nodejs_server.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst elem = document.getElementsByTagName(\"perspective-viewer\")[0];\n\n// Bind to the server's worker instead of instantiating a Web Worker.\nconst websocket = await perspective.websocket(\n    window.location.origin.replace(\"http\", \"ws\")\n);\n\n// Create a virtual `Table` to the preloaded data source.  `table` and `view`\n// objects live on the server.\nconst server_table = await websocket.open_table(\"table_one\");\n```\n\n----------------------------------------\n\nTITLE: Setting Update and Delete Callbacks on a View in Python\nDESCRIPTION: This code demonstrates how to attach Python functions as event handlers to a Perspective View. It sets up `on_update` and `on_delete` callbacks, which are triggered when the underlying data or the view's structure changes. It also shows setting a lambda function as a callback.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef update_callback():\n    print(\"Updated!\")\n\n# set the update callback\non_update_id = view.on_update(update_callback)\n\ndef delete_callback():\n    print(\"Deleted!\")\n\n# set the delete callback\non_delete_id = view.on_delete(delete_callback)\n\n# set a lambda as a callback\nview.on_delete(lambda: print(\"Deleted x2!\"))\n```\n\n----------------------------------------\n\nTITLE: Specifying Columns in Perspective View - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to specify the columns to be included in a Perspective View. It utilizes the `table.view()` method and sets the `columns` property to an array containing a single column name \"a\".  This means only column \"a\" will be displayed in the output view.  It uses an `await` keyword to handle the asynchronous operation.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/columns.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    columns: [\"a\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Data in Perspective using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a Perspective view with a group by clause. The `group_by` parameter is an array of column names used to aggregate the data. This example groups the data by columns 'a' and 'c'.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/group_by.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({ group_by: [\"a\", \"c\"] });\n```\n\n----------------------------------------\n\nTITLE: Linking Perspective Viewer Theme via CDN (HTML)\nDESCRIPTION: This code snippet illustrates linking a specific theme from a CDN (Content Delivery Network) in an HTML file. It uses the `<link>` tag with `rel=\"stylesheet\"` to include the 'pro.css' theme from the jsDelivr CDN.  The `crossorigin=\"anonymous\"` attribute is included to handle cross-origin requests and enable theme detection within the perspective-viewer component.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/theming.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<link\n    rel=\"stylesheet\"\n    crossorigin=\"anonymous\"\n    href=\"https://cdn.jsdelivr.net/npm/@finos/perspective-viewer/dist/css/pro.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating PerspectiveWidget from dataset or schema in Python\nDESCRIPTION: These snippets demonstrate different ways to instantiate a PerspectiveWidget in Python, highlighting its flexibility. The first example constructs a widget using a dataset with an optional group_by parameter indicating columns to group on. The second shows creation from a schema dictionary specifying data types for columns. Both approaches facilitate defining the widget's data source either by passing in raw data or explicitly by schema, enabling interaction with the Perspective API within JupyterLab. Ensuring proper data formats and types is required for successful widget construction.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/jupyterlab.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective.widget import PerspectiveWidget\nPerspectiveWidget(data, group_by=[\"date\"])\n```\n\nLANGUAGE: python\nCODE:\n```\nPerspectiveWidget({\"a\": int, \"b\": str})\n```\n\n----------------------------------------\n\nTITLE: Appending Data to a Perspective Table (JavaScript/Python)\nDESCRIPTION: Demonstrates how to append new data to an existing Perspective `Table`. This example initializes a table with a simple schema and then calls the `update()` method with new data. When the table does not have an index set, `update()` appends the data.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/update_and_remove.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst schema = {\n    a: \"integer\",\n    b: \"float\",\n};\n\nconst table = await perspective.table(schema);\ntable.update(new_data);\n```\n\nLANGUAGE: python\nCODE:\n```\nschema = {\"a\": \"integer\", \"b\": \"float\"}\n\ntable = perspective.Table(schema)\ntable.update(new_data)\n```\n\n----------------------------------------\n\nTITLE: Handling Perspective Click Event to Capture User Interaction in JavaScript\nDESCRIPTION: This snippet adds an event listener for 'perspective-click' events on a Perspective viewer element. When a user clicks within the view, it accesses event.detail.config containing the current configuration, and calls restore() to update the view with the filtered data based on the click. This facilitates interactive data exploration, depending on the Perspective API and DOM event handling.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nelem.addEventListener(\"perspective-click\", function (event) {\n    var config = event.detail.config;\n    elem.restore(config);\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Perspective WebSocket Server in JavaScript\nDESCRIPTION: Creates a Perspective WebSocket client that connects to the server URL. Uses the 'perspective' library to initiate the connection, enabling real-time communication with the Python server for data operations. Needs the appropriate Perspective JavaScript modules.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/tutorials/python/tornado.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@finos/perspective-viewer\";\nimport \"@finos/perspective-viewer-datagrid\";\nimport perspective from \"@finos/perspective\";\n\nconst websocket = await perspective.websocket(\"ws://localhost:8888/websocket\");\n```\n\n----------------------------------------\n\nTITLE: Removing Update and Delete Callbacks from a View in Python\nDESCRIPTION: This snippet shows how to detach event handlers from a Perspective View. Callbacks previously set using `on_update` or `on_delete` with a named function can be removed using the returned ID and the `remove_update` or `remove_delete` methods.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nview.remove_update(on_update_id)\nview.remove_delete(on_delete_id)\n```\n\n----------------------------------------\n\nTITLE: Querying Best Market Price with Perspective JSON\nDESCRIPTION: This JSON configuration is used to compute the best open price on either side of a market order book in Perspective, using the \"max\" aggregate. It requires a Perspective Table containing at least the columns 'security', 'side', 'status', and 'price'. The payload groups by security, aggregates on price, and filters for open buy-side orders; it can be customized for sell-side with minor adjustments. The expected output is a grouped best price for each security and only includes rows matching the filter conditions.\nSOURCE: https://github.com/finos/perspective/blob/master/examples/blocks/src/market/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    columns: [\"price\"],\n    group_by: [\"security\"],\n    aggregates: { price: \"max\" },\n    filter: [\n        [\"side\", \"==\", \"buy\"],\n        [\"status\", \"==\", \"open\"],\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Server-side Perspective Table via WebSocket in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to establish a WebSocket connection to a Perspective server, open a remote table ('my_table'), and load it into a Perspective viewer element on a web page. It requires Perspective's JavaScript client library and a running Python or Node.js Perspective server hosting the table over WebSocket at the specified URL. Key steps include connecting to the WebSocket, opening the named table, creating the viewer UI element, and loading the server table into the viewer for interactive use. Limitations include dependency on network latency for responsiveness and the requirement that clients remain connected for continued operation.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/architecture/server_only.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst websocket = await perspective.websocket(\"ws://localhost:8080\");\nconst server_table = await websocket.open_table(\"my_table\");\n\nconst viewer = document.createElement(\"perspective-viewer\");\ndocument.body.appendChild(viewer);\nawait viewer.load(server_table);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Serializing Perspective View in JavaScript\nDESCRIPTION: Demonstrates creating a Perspective Table from an object, then obtaining a View that includes only the \"name\" column. The example fetches serialized JSON from the View and then deletes the View to free resources. Requires the Perspective JavaScript library with asynchronous APIs for table and view creation, and JSON serialization.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = await perspective.table({\n    id: [1, 2, 3, 4],\n    name: [\"a\", \"b\", \"c\", \"d\"],\n});\n\nconst view = await table.view({ columns: [\"name\"] });\nconst json = await view.to_json();\nawait view.delete();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Updating Table with CSV Data\nDESCRIPTION: Shows how to perform a table update in JavaScript by passing CSV formatted string to the `update` method. This triggers view callbacks and updates the table data accordingly.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/update.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait table.update(\"x,y\\n1,2\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ESBuild Loader for WASM - JavaScript\nDESCRIPTION: Shows a snippet of an ESBuild configuration structure, likely within a JavaScript config file. It specifies a loader rule for `.wasm` files, setting it to `\"file\"`. This configuration ensures that ESBuild treats `.wasm` files as assets and copies them to the output directory, providing a path that can be used with `fetch`.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    // ...\n    \"loader\": {\n        // ...\n        \".wasm\": \"file\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Example for Updating Table with CSV Data\nDESCRIPTION: Demonstrates how to update a Perspective table in Python using the `update` method with a CSV string. The operation triggers view notifications and updates the data.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/update.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntable.update(\"x,y\\n1,2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Local Perspective Server and Client - Python\nDESCRIPTION: This Python example illustrates how to create a local perspective_server::Server and obtain a synchronous Client connected to it by using the perspective Python package. The server object is instantiated directly, and client creation is performed with server.new_local_client(). It requires the perspective Python package and executes synchronously, returning a connected Client instance. No network transport is involved; all operations are local to the process.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport perspective;\nserver = perspective.Server()\nclient = server.new_local_client();\n```\n\n----------------------------------------\n\nTITLE: Creating View and Exporting Data in Python\nDESCRIPTION: This snippet shows how to create a Perspective View from an existing Table. It applies grouping and filtering operations. The data from the created View is then exported into two different formats: columns (dictionary of arrays) and JSON (list of dictionaries).\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nview = table.view(group_by=[\"float\"], filter=[[\"bool\", \"==\", True]])\ncolumn_data = view.to_columns()\nrow_data = view.to_json()\n```\n\n----------------------------------------\n\nTITLE: Initializing Dedicated Worker with Perspective Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a dedicated Web Worker by passing a new Worker instance to the Perspective Client's worker constructor asynchronously. It requires a valid worker script URL to instantiate the dedicated Worker, which will run in a separate thread bound to the page context, facilitating off-main-thread computation. The snippet returns a worker instance that can be used by Perspective for processing tasks. No special dependencies beyond Perspective and browser Web Worker API are required.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/custom_worker.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = await perspective.worker(new Worker(url));\n```\n\n----------------------------------------\n\nTITLE: Preserving pandas DataFrame Index when Creating a Perspective Table in Python\nDESCRIPTION: This snippet shows how to preserve the index of a pandas DataFrame when converting it into a Perspective Table. By setting the DataFrame's index explicitly (e.g., to the \"datetime\" column) and passing the \"index='index'\" argument to the perspective.table constructor, the index is treated as the primary key. This leverages Perspective's internal conversion using pyarrow from_pandas and ensures proper indexing behavior identical to the original DataFrame. The input is a pandas DataFrame with an index set; the output is a Perspective Table with that index preserved.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/table.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata.set_index(\"datetime\")\ntable = perspective.table(data, index=\"index\")\n```\n\n----------------------------------------\n\nTITLE: Initializing an Indexed Perspective Table in Python\nDESCRIPTION: Creates a Perspective Table instance in Python with a specified column as a primary key index, enabling in-place updates, partial updates, and row removals by index. Requires the Perspective Python package, where the index parameter is a single string column name used as the primary key. The data and index name are inputs; the resulting Table supports keyed row operations. Note that this is mutually exclusive with the `limit` parameter.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/options.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nindexed_table = perspective.Table(data, index=\"a\");\n```\n\n----------------------------------------\n\nTITLE: Creating Table from Pandas DataFrame with Index Preservation in Python\nDESCRIPTION: This example shows how to load a Pandas DataFrame into a Perspective Table while preserving the DataFrame's index. By setting the DataFrame index and then specifying 'index' as the `index` keyword argument for `perspective.table`, Perspective treats the index as the primary key.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndata.set_index(\"datetime\")\ntable = perspective.table(data, index=\"index\")\n```\n\n----------------------------------------\n\nTITLE: Load CSV from String - Python\nDESCRIPTION: This Python snippet shows how to create a Perspective `Table` by directly loading a CSV formatted string using the `client.table()` method. It assumes that the `client` object is already initialized.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/table.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntable = client.table(\"x,y\\n1,2\\n3,4\")\n```\n\n----------------------------------------\n\nTITLE: Load CSV from String - Rust\nDESCRIPTION: This Rust snippet shows how to load a CSV string into a Perspective `Table`. It initializes `TableInitOptions` and uses `TableData::Update` with `UpdateData::Csv` to pass the CSV data to `client.table()`. The snippet requires the `TableData`, `UpdateData` and `TableInitOptions` types, as well as an initialized `client`.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/table.md#_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet opts = TableInitOptions::default();\nlet data = TableData::Update(UpdateData::Csv(\"x,y\\n1,2\\n3,4\".into()));\nlet table = client.table(data, opts).await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Exported WebAssembly Functions for Perspective with CMake\nDESCRIPTION: This snippet declares a list of exported functions for the WASM/WebAssembly build of the Perspective project, preparing them for JavaScript interoperability and linking. The exported functions include lifecycle management of Perspective servers and sessions, memory handling, and optionally heap instrumentation functions when enabled by PSP_HEAP_INSTRUMENTS. The exported function names are joined into a comma-separated string used in linker flags to ensure proper export in the WASM module.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(PSP_EXPORTED_FUNCTIONS \n    _psp_poll\n    _psp_new_server\n    _psp_free\n    _psp_alloc\n    _psp_handle_request\n    _psp_new_session\n    _psp_close_session\n    _psp_delete_server\n    _psp_is_memory64\n)\n\nif(PSP_HEAP_INSTRUMENTS)\n    list(APPEND PSP_EXPORTED_FUNCTIONS\n        _psp_print_used_memory\n        _psp_dump_stack_traces\n        _psp_clear_stack_traces\n    )\nendif()\n\nstring(JOIN \",\" PSP_EXPORTED_FUNCTIONS_JOINED ${PSP_EXPORTED_FUNCTIONS})\n```\n\n----------------------------------------\n\nTITLE: Creating Tornado WebSocket endpoint with Perspective handler in Python\nDESCRIPTION: Sets up a Tornado web application with a WebSocket route that utilizes the PerspectiveTornadoHandler, linking it to the Perspective server instance. Parameters include the server reference and origin check configuration, which controls cross-origin WebSocket requests. This enables real-time data communication between server and clients.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/tutorials/python/tornado.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom perspective.handlers.tornado import PerspectiveTornadoHandler\n\napp = tornado.web.Application([\n\n    # ... other handlers ...\n\n    # WebSocket endpoint with server reference and origin check\n    (r\"/websocket\", PerspectiveTornadoHandler, {\"perspective_server\": SERVER, \"check_origin\": True})\n])\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Properties with restore() - JavaScript\nDESCRIPTION: Demonstrates how to update individual properties of a `<perspective-viewer>` using the `restore()` method with a JSON object. This allows for targeted modifications of specific settings without affecting others. Properties like `plugin`, `columns`, `settings`, `expressions`, `filter`, and `sort` can be updated.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/save_restore.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the plugin (will also update `columns` to plugin-defaults)\nawait elem.restore({ plugin: \"X Bar\" });\n\n// Update plugin and columns (only draws once)\nawait elem.restore({ plugin: \"X Bar\", columns: [\"Sales\"] });\n\n// Open the config panel\nawait elem.restore({ settings: true });\n\n// Create an expression\nawait elem.restore({\n    columns: ['\"Sales\" + 100'],\n    expressions: { \"New Column\": '\"Sales\" + 100' },\n});\n\n// ERROR if the column does not exist in the schema or expressions\n// await elem.restore({columns: [\"\\\"Sales\\\" + 100\"], expressions: {}});\n\n// Add a filter\nawait elem.restore({ filter: [[\"Sales\", \"<\", 100]] });\n\n// Add a sort, don't remove filter\nawait elem.restore({ sort: [[\"Prodit\", \"desc\"]] });\n\n// Reset just filter, preserve sort\nawait elem.restore({ filter: undefined });\n```\n\n----------------------------------------\n\nTITLE: Applying Aggregates in Perspective View in JavaScript\nDESCRIPTION: Demonstrates constructing a View applying aggregates to columns 'a' and 'b', specifically average and distinct count respectively. Useful when Group By is enabled to calculate summarized metrics per group. Requires Perspective JavaScript library.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    aggregates: {\n        a: \"avg\",\n        b: \"distinct count\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Arrow Data into Perspective Table (Rust)\nDESCRIPTION: Opens an Arrow file, reads its content into a byte vector, converts it into `UpdateData::Arrow`, creates `TableInitOptions` with a name, and then uses the `client` to create a new table with the loaded data. Requires error handling (`?`) and awaits the async `client.table` call. Assumes `ROOT_PATH` and `ARROW_FILE_PATH` are defined.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/rust.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet mut file = File::open(std::path::Path::new(ROOT_PATH).join(ARROW_FILE_PATH))?;\nlet mut feather = Vec::with_capacity(file.metadata()?.len() as usize);\nfile.read_to_end(&mut feather)?;\nlet data = UpdateData::Arrow(feather.into());\nlet mut options = TableInitOptions::default();\noptions.set_name(\"my_data_source\");\nclient.table(data.into(), options).await?;\n```\n\n----------------------------------------\n\nTITLE: Importing All Perspective Viewer Themes (JavaScript)\nDESCRIPTION: This snippet shows how to import all default themes bundled in a single CSS file named 'themes.css'.  This approach simplifies importing all available themes for perspective-viewer by using a single import statement. This is an alternative to importing individual theme files.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/theming.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@finos/perspective-viewer/dist/css/themes.css\";\n```\n\n----------------------------------------\n\nTITLE: Aggregating Apache Arrow Data with Perspective.js\nDESCRIPTION: This JavaScript snippet demonstrates initializing a Perspective table from existing Apache Arrow data (`apache_arrow_data`). It then creates a view configured to group the data by 'CounterParty' and 'Security' columns using the `group_by` option. Finally, it asynchronously converts the aggregated data within the view back into the Apache Arrow binary format using `view.to_arrow()`. Requires the '@finos/perspective' library and an existing variable `apache_arrow_data` containing the Arrow data.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/javascript.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport perspective from \"@finos/perspective\";\n\nconst table = await perspective.table(apache_arrow_data);\nconst view = await table.view({ group_by: [\"CounterParty\", \"Security\"] });\nconst arrow = await view.to_arrow();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Perspective View and Table in JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a Perspective `view` and `table` object using the `delete()` method. It is crucial to delete views before deleting the tables they depend on, otherwise an exception will be thrown.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/deleting.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait view.delete();\n\n// This method will throw an exception if there are still `view()`s depending\n// on this `table()`!\nawait table.delete();\n```\n\n----------------------------------------\n\nTITLE: Registering and Initializing Service Worker with Perspective Client in JavaScript\nDESCRIPTION: This snippet illustrates how to register a ServiceWorker in the browser with a specified scope and subsequently pass the active service worker registration to the Perspective Client's worker constructor asynchronously. It emphasizes the need to specify a valid service worker script URL and scope. The ServiceWorker lifecycle is more involved, requiring registration and activation before use. The snippet enables Perspective to leverage service worker capabilities for background data processing or caching but requires understanding of service worker lifecycle and constraints.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/custom_worker.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst registration = await navigator.serviceWorker.register(url, {\n    scope: \"\", // Your scope here\n});\n\nconst worker = await perspective.worker(registration.active);\n```\n\n----------------------------------------\n\nTITLE: Selecting Columns in Perspective View in Python\nDESCRIPTION: Creates a Perspective View selecting only the column 'a' for inclusion in the View output result.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(columns=[\"a\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregates in Perspective View (Python)\nDESCRIPTION: This Python snippet shows how to create a Perspective `View` from a `table` object, configuring specific aggregate functions. The `aggregates` parameter accepts a dictionary mapping column names ('a', 'b') to the aggregate function names ('avg', 'distinct count') to be applied when grouping.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/aggregates.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(\n  aggregates={\n    \"a\": \"avg\",\n    \"b\": \"distinct count\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Table Instance with Name in Python\nDESCRIPTION: This snippet creates a `Table` instance with a specified name, essential for accessing the table from the JavaScript side.  It is a crucial step in setting up the Perspective server for client access.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nTABLE = client.table(data, name=\"data_source_one\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Operating System and Setting Platform-Specific Flags in CMake\nDESCRIPTION: This code detects the target operating system (Windows, macOS, or Linux) using the CMAKE_SYSTEM_NAME variable and sets corresponding boolean flags (WIN32, MACOS, LINUX). Depending on the OS, it configures compiler options such as exception handling flags for MSVC on Windows, and sets multi-threaded runtime options. It ensures platform-specific build behaviors are properly applied.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n    set(WIN32 ON)\n    set(MACOS OFF)\n    set(LINUX OFF)\nelseif(${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    set(WIN32 OFF)\n    set(MACOS ON)\n    set(LINUX OFF)\nelse()\n    set(WIN32 OFF)\n    set(MACOS OFF)\n    set(LINUX ON)\nendif()\n\nif (WIN32)\n    add_compile_options(\"/EHsc\")\n    set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\nendif()\n\n\nif(WIN32)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc /MP /MT /c /bigobj\")\nelse()\n    # set(CMAKE_CXX_FLAGS \" ${CMAKE_CXX_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying Perspective Table - Python\nDESCRIPTION: This Python snippet demonstrates how to create a `view` on a Perspective table. It configures the view to select the \"Sales\" column, aggregate the \"Sales\" column using the \"sum\" function, group the data by \"Region\" and \"Country\", and filter the data to include only rows where the \"Category\" is either \"Furniture\" or \"Technology\". This assumes you have a Perspective `table` object. The result is a view object that can be used to further process and use the data.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/querying.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(\n  columns=[\"Sales\"],\n  aggregates={\"Sales\": \"sum\"},\n  group_by=[\"Region\", \"Country\"],\n  filter=[[\"Category\", \"in\", [\"Furniture\", \"Technology\"]]]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective Server and Client (Rust)\nDESCRIPTION: Creates a default instance of the `Server` and then obtains a local `Client` instance from it. The `Server` manages the perspective data, and the `Client` is used to interact with the server, e.g., creating tables. Requires the `perspective` crate.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/rust.md#_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet server = Server::default();\nlet client = server.new_local_client();\n```\n\n----------------------------------------\n\nTITLE: Load CSV from String - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to load a CSV string into a Perspective `Table` using the `client.table()` method. It shows the basic usage of the function with a simple CSV input.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/table.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = await client.table(\"x,y\\n1,2\\n3,4\");\n```\n\n----------------------------------------\n\nTITLE: Customizing Build for Python Bindings on macOS in CMake\nDESCRIPTION: This section applies special configurations for building Python bindings on macOS. It enables POSIX pthreads, sets threading flags, and modifies linker flags to use \"-undefined dynamic_lookup\". These settings prevent linking issues with macOS Python extensions by avoiding linking against the system Python library directly.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(PSP_PYTHON_BUILD AND MACOS)\n    # fix for threads on osx\n    # assume built-in pthreads on MacOS\n    set(CMAKE_THREAD_LIBS_INIT \"-lpthread\")\n    set(CMAKE_HAVE_THREADS_LIBRARY 1)\n    set(CMAKE_USE_WIN32_THREADS_INIT 0)\n    set(CMAKE_USE_PTHREADS_INIT 1)\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n\n    # don't link against build python\n    # https://blog.tim-smith.us/2015/09/python-extension-modules-os-x/\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating PerspectiveWidget with Table in Python\nDESCRIPTION: This snippet shows how to create a `PerspectiveWidget` from an existing `perspective.Table` instance in Python.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntable = perspective.table(data)\nPerspectiveWidget(table)\n```\n\n----------------------------------------\n\nTITLE: Opening a Hosted Table in Python\nDESCRIPTION: Shows how to access a table named \"table_one\" from a Perspective Client instance in Python. The method returns the table object that can be used for further operations.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/open_table.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntables = client.open_table(\"table_one\");\n```\n\n----------------------------------------\n\nTITLE: Creating a View with Configuration in JavaScript\nDESCRIPTION: Defines a new view from a table with specified columns, aggregation functions, groupings, and filters using asynchronous JavaScript. It depends on the async environment and the table object from the relevant library. Key parameters include 'columns', 'aggregates', 'group_by', and 'filter', with expected output being a configured view object.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/view.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = await table.view({\n    columns: [\"Sales\"],\n    aggregates: { Sales: \"sum\" },\n    group_by: [\"Region\", \"Country\"],\n    filter: [[\"Category\", \"in\", [\"Furniture\", \"Technology\"]]]\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Synchronous Default Client in Node.js - JavaScript\nDESCRIPTION: This snippet demonstrates how to access a pre-instantiated synchronous Client, provided as the default export by the @finos/perspective Node.js module. No explicit connection parameters are required, as the module synchronously connects to a global singleton perspective_server::Server. This example is specific to the Node.js environment and relies on module import compatibility.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { default as client } from \"@finos/perspective\";\n```\n\n----------------------------------------\n\nTITLE: Handling 'perspective-click' Event to Restore Filtered Data\nDESCRIPTION: This code attaches an event listener for 'perspective-click' on a `<perspective-viewer>`. When a user clicks on a chart or grid, the event captures details like filters, column names, and row data. It then restores the viewer's state with the filtered configuration, enabling interactive data exploration.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/events.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nelem.addEventListener(\"perspective-click\", function (event) {\n    var config = event.detail.config;\n    elem.restore(config);\n});\n```\n\n----------------------------------------\n\nTITLE: Hosting Table and Streaming Updates on Server in Python\nDESCRIPTION: This snippet shows how to host a Perspective Table instance using a Server client and provide it with a name for external access (e.g., from a JavaScript client). It then demonstrates how updating the Table using `.update()` automatically propagates changes, making it suitable for streaming data.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nserver = perspective.Server()\nclient = server.new_local_client()\ntable = client.table(data, name=\"data_source\")\n\nfor i in range(10):\n    # updates continue to propagate automatically\n    table.update(new_data)\n```\n\n----------------------------------------\n\nTITLE: Register and Manage Hosted Tables Update Callback - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates registering and managing a callback function to monitor updates to hosted tables within a Perspective client. The callback is triggered when `Client::table` or `Table::delete` methods are called, indicating changes in the hosted tables. It uses `client.on_hosted_tables_update()` to register, demonstrates triggers and uses `client.remove_hosted_tables_update()` for cleanup. It requires an active Perspective client instance.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/on_hosted_tables_update.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sub = await client.on_hosted_tables_update(() => {\n    console.log(\"Tables have updated!\", await client.get_hosted_table_names());\n});\n\n// This invokes the handler\nconst table = await client.table(\"x\\n1\", {name: \"test\"});\n\n// So does this\nawait table.delete();\n\n// cleanup\nawait client.remove_hosted_tables_update(sub);\n```\n\n----------------------------------------\n\nTITLE: Building and Managing Header-only Dependencies with CMake\nDESCRIPTION: This snippet uses custom CMake macros/functions like psp_build_dep to download and extract header-only dependencies such as 'date', 'hopscotch', 'ordered-map', and 'rapidjson'. It accumulates their include directories in the all_deps_INCLUDE_DIRS list for later use in the build. This pattern centralizes dependency management for third-party headers without creating separate static libraries. Required context includes the PSP_CMAKE_MODULE_PATH variable pointing to dependency definition files.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(all_deps_INCLUDE_DIRS \"\")\npsp_build_dep(\"date\" \"${PSP_CMAKE_MODULE_PATH}/date.txt.in\")\npsp_build_dep(\"hopscotch\" \"${PSP_CMAKE_MODULE_PATH}/hopscotch.txt.in\")\npsp_build_dep(\"ordered-map\" \"${PSP_CMAKE_MODULE_PATH}/ordered-map.txt.in\")\npsp_build_dep(\"rapidjson\" \"${PSP_CMAKE_MODULE_PATH}/rapidjson.txt.in\")\nlist(APPEND all_deps_INCLUDE_DIRS\n    ${date_INCLUDE_DIRS}\n    ${hopscotch_INCLUDE_DIRS}\n    ${ordered-map_INCLUDE_DIRS}\n    ${rapidjson_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Replace Table data with CSV in Python\nDESCRIPTION: Replaces the entire data of a Perspective Table with the provided CSV string.  This method maintains derived views and update callbacks. The input is a CSV string, and the data is coerced to the existing table schema.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/replace.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable.replace(\"x,y\\n1,2\")\n```\n\n----------------------------------------\n\nTITLE: Rust Example for Updating a Table with Csv Data and Options\nDESCRIPTION: Provides a Rust example where CSV data is wrapped into an `UpdateData` object, options are set via `UpdateOptions`, and the `update` method is called asynchronously. This supports partial updates with omitted columns.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/update.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet data = UpdateData::Csv(\"x,y\\n1,2\".into());\nlet opts = UpdateOptions::default();\ntable.update(data, opts).await?;\n```\n\n----------------------------------------\n\nTITLE: Splitting Data by Columns in Perspective View in Rust\nDESCRIPTION: Rust example configuring a View asynchronously with split_by set to 'a' and 'c' columns using ViewConfigUpdate and default parameters for other options.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nlet view = table.view(Some(ViewConfigUpdate {\n    split_by: Some(vec![\"a\".into(), \"c\".into()]),\n    ..ViewConfigUpdate::default()\n})).await?;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-threaded Perspective Server Loop in Python\nDESCRIPTION: This code demonstrates how to configure a Perspective Server to use a multi-threaded executor for handling operations, improving concurrency and server performance. It integrates with a Tornado IOLoop and a ThreadPoolExecutor.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef perspective_thread():\n    server = perspective.Server()\n    loop = tornado.ioloop.IOLoop()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        server.set_loop_callback(loop.run_in_executor, executor)\n        loop.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring a View with Specified Parameters in Python\nDESCRIPTION: Creates a new view object configured with columns, aggregation methods, groupings, and filters using Python syntax. It assumes the existence of a 'table' object and illustrates setting parameters via keyword arguments. Inputs include list-based parameters for columns, groupings, and filters, with an output being the configured view instance.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/view.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nview = table.view(\n  columns=[\"Sales\"],\n  aggregates={\"Sales\": \"sum\"},\n  group_by=[\"Region\", \"Country\"],\n  filter=[[\"Category\", \"in\", [\"Furniture\", \"Technology\"]]]\n)\n```\n\n----------------------------------------\n\nTITLE: Create Table with Index - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to create a Perspective `Table` with a specified index column using the `index` option. The `data` variable is assumed to hold the input data.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/table.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = await client.table(data, { index: \"Row ID\" });\n```\n\n----------------------------------------\n\nTITLE: Installing Perspective and Viewer UI Packages (JavaScript)\nDESCRIPTION: This snippet demonstrates the npm command for installing the core Perspective package and the Perspective Viewer UI.  It is intended for use in browser environments and installs the necessary dependencies for utilizing Perspective's WebAssembly data engine and its UI framework. No parameters are required. The output is the successful installation of the packages, allowing for usage of the Perspective library and viewer.  There are no significant limitations.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @finos/perspective @finos/perspective-viewer\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Inline Builds - JavaScript\nDESCRIPTION: Demonstrates importing the `perspective-viewer.inline.js` and `perspective.inline.js` files. These inline builds contain the WebAssembly code embedded within the JavaScript, removing the need for separate WASM file loading and the explicit `init` calls required by the standard ESM builds.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"@finos/perspective-viewer/dist/esm/perspective-viewer.inline.js\";\nimport psp from \"@finos/perspective/dist/esm/perspective.inline.js\";\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows in Perspective View in Python\nDESCRIPTION: Creates a Perspective View with a filter condition on the 'a' column for values less than 100 using Python Perspective API conventions.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(filter=[[\"a\", \"<\", 100]])\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Perspective Viewer from a Worker Table in JavaScript\nDESCRIPTION: Illustrates the asynchronous process of creating a Perspective worker, creating a table on that worker with provided data, and then loading this table into a `<perspective-viewer>` element using its `load()` method. Requires the `perspective` library.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a new worker, then a new table promise on that worker.\nconst worker = await perspective.worker();\nconst table = await worker.table(data);\n\n// Bind a viewer element to this table.\nawait viewer.load(table);\n```\n\n----------------------------------------\n\nTITLE: Running the Full Perspective Test Suite using PNPM\nDESCRIPTION: Executes the main test script defined in the project's package.json using pnpm. This command builds and runs the test suites for all packages, including both Node.js tests for `@finos/perspective` and Playwright tests for UI components, according to the currently configured toolchain (JS or Python).\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test\n```\n\n----------------------------------------\n\nTITLE: Handling Boost Dependencies on Ubuntu/Debian for Emscripten Build\nDESCRIPTION: Installs the Boost development libraries using apt-get and then copies the Boost headers from the system include directory (`/usr/include/boost`) into the Perspective source tree (`./packages/perspective/src/include/`). This workaround prevents CMake from mistakenly using system headers instead of Emscripten-provided ones during the WebAssembly build process on Ubuntu/Debian systems.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\napt-get install libboost-all-dev\ncp -r /usr/include/boost ./packages/perspective/src/include/\n```\n\n----------------------------------------\n\nTITLE: Selecting Columns in Perspective View in JavaScript\nDESCRIPTION: Shows how to create a View specifying a subset of columns to include in the output, here selecting only column 'a'. This controls visibility and ordering of columns.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    columns: [\"a\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Apache Arrow Data in JavaScript\nDESCRIPTION: This JavaScript snippet fetches data in Apache Arrow IPC format from a URL. The `fetch` API is used to retrieve the data, which is then converted into an `ArrayBuffer`. This `ArrayBuffer` can then be used by Perspective to load the data. There is a dependency on the data being available at the specified URL.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/loading_data.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await fetch(\n    \"https://cdn.jsdelivr.net/npm/superstore-arrow/superstore.lz4.arrow\"\n);\n\nconst arrow = await resp.arrayBuffer();\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective Server and Updating Table in Python\nDESCRIPTION: Demonstrates the basic setup of a Perspective Server in Python. It creates a server instance, connects a local client, hosts a table with sample data and a specific name ('data_source'), and shows how to push updates to the hosted table within a loop. The 'name' is crucial for identifying the table over the network.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/websocket.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nserver = perspective.Server()\nclient = server.new_local_client()\ntable = client.table(data, name=\"data_source\")\n\nfor i in range(10):\n    # updates continue to propagate automatically\n    table.update(new_data)\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows in Perspective View in JavaScript\nDESCRIPTION: Illustrates filtering rows of the View where the 'a' column value is less than 100. Multiple filters can be combined with AND semantics represented as an array of arrays.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    filter: [[\"a\", \"<\", 100]],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective ESM with Bundler (Generic) - JavaScript\nDESCRIPTION: Imports the core `perspective` library and `perspective-viewer`. Demonstrates the required asynchronous initialization calls (`init_server`, `init_client`) which depend on providing the paths to the respective WebAssembly binaries. This step must be completed before the library can be used, e.g., by creating a worker. The WASM paths need to be handled by the bundler setup.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport perspective_viewer from \"@finos/perspective-viewer\";\nimport perspective from \"@finos/perspective\";\n\n// TODO These paths must be provided by the bundler!\nconst SERVER_WASM = ... // \"@finos/perspective/dist/wasm/perspective-server.wasm\"\nconst CLIENT_WASM = ... // \"@finos/perspective-viewer/dist/wasm/perspective-viewer.wasm\"\n\nawait Promise.all([\n    perspective.init_server(SERVER_WASM),\n    perspective_viewer.init_client(CLIENT_WASM),\n]);\n\n// Now Perspective API will work!\nconst worker = await perspective.worker();\nconst viewer = document.createElement(\"perspective-viewer\");\n```\n\n----------------------------------------\n\nTITLE: Filtering with Perspective (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to filter a Perspective table. It uses the `table.view()` method with the `filter` option. The `filter` option takes an array of arrays, where each inner array defines a filter condition: the column name (`\"a\"`), the operator (`\"<\"`), and the operand (`100`).  The code retrieves rows where column \"a\"'s value is less than 100.  It relies on the Perspective library being properly initialized and a table already existing.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/filter.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    filter: [[\"a\", \"<\", 100]],\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Data to pandas.DataFrame for Perspective\nDESCRIPTION: This code snippet illustrates the process of transforming data into a pandas DataFrame, which is a core data structure used for analysis and visualization in Perspective. It requires the pandas library and handles data inputs, converting them into DataFrame format for further processing or visualization.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/client/to_pandas.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nSerialize the data to a `pandas.DataFrame`.\n```\n\n----------------------------------------\n\nTITLE: Creating and Serializing a Perspective View in Python\nDESCRIPTION: This snippet illustrates initializing a Perspective Table with a dataset, creating a view selecting specific columns, converting the view to Arrow format for efficient columnar serialization, and deleting the view. It demonstrates basic data querying and serialization in Python, emphasizing ease of use and integration.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntable = perspective.Table({\n  \"id\": [1, 2, 3, 4],\n  \"name\": [\"a\", \"b\", \"c\", \"d\"]\n});\n\nview = table.view(columns=[\"name\"])\narrow = view.to_arrow()\nview.delete()\n```\n\n----------------------------------------\n\nTITLE: Loading Data via WebSocket Server in JavaScript (Client-Side)\nDESCRIPTION: Demonstrates the client-side JavaScript code for connecting to a Perspective WebSocket server using `perspective.websocket()`. It shows opening a remote table (`server_table`) hosted on the server and loading it directly into the viewer. Alternatively, it shows creating a view on the server table, creating a client-side table from that view, and loading the client table, which syncs updates via Apache Arrow.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst elem = document.getElementsByTagName(\"perspective-viewer\")[0];\n\n// Bind to the server's worker instead of instantiating a Web Worker.\nconst websocket = await perspective.websocket(\n    window.location.origin.replace(\"http\", \"ws\")\n);\n\n// Bind the viewer to the preloaded data source.  `table` and `view` objects\n// live on the server.\nconst server_table = await websocket.open_table(\"table_one\");\nawait elem.load(server_table);\n\n// Or load data from a table using a view. The browser now also has a copy of\n// this view in its own `table`, as well as its updates transferred to the\n// browser using Apache Arrow.\nconst worker = await perspective.worker();\nconst server_view = await server_table.view();\nconst client_table = worker.table(server_view);\nawait elem.load(client_table);\n```\n\n----------------------------------------\n\nTITLE: Constructing an Empty Perspective Table from Schema in Python\nDESCRIPTION: Initializes an empty Perspective table in Python using a dictionary as the schema. The schema specifies column names as keys and their corresponding data types ('integer', 'string', 'boolean') as values. Requires the `perspective` library to be imported and uses the `perspective.table()` function.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/constructing_schema.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date, datetime\n\nschema = {\n    \"x\": \"integer\",\n    \"y\": \"string\",\n    \"z\": \"boolean\",\n}\n\ntable2 = perspective.table(schema)\n```\n\n----------------------------------------\n\nTITLE: Applying Memory and Exception Flags for WebAssembly Build (CMake)\nDESCRIPTION: This code conditionally expands linker flags to support exception stack traces and sets specific memory sizes for sanitized builds. It adapts based on options like PSP_WASM_EXCEPTIONS and PSP_SANITIZE, ensuring correct initialization for debugging and memory analysis. Requires CMake variables representative of the user's environment, and must be included before building WASM targets.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (PSP_WASM_EXCEPTIONS)\n    set(PSP_WASM_LINKER_FLAGS \"${PSP_WASM_LINKER_FLAGS} -s EXCEPTION_STACK_TRACES=1 \")\nendif()\n\nif(PSP_SANITIZE)\n    set(PSP_SANITIZE_FLAGS\n        -sINITIAL_MEMORY=640mb\n        -sTOTAL_MEMORY=640mb\n        -sALLOW_MEMORY_GROWTH=1\n    )\nelse()\n    set(PSP_SANITIZE_FLAGS)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Opening a hosted table by name in JavaScript Perspective client\nDESCRIPTION: Uses the Perspective WebSocket client to open a table hosted on the server by its designated name. Returns a proxy object representing the server-side table, which can be used to perform various data operations like view, schema, and update, with changes reflected across the client and server.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/tutorials/python/tornado.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst table = await websocket.open_table(\"data_source_one\");\n```\n\n----------------------------------------\n\nTITLE: Creating Distributed Perspective Viewer in HTML/JavaScript\nDESCRIPTION: This snippet creates a `perspective-viewer` component and initializes a Perspective client using JavaScript to connect to a Perspective server via a websocket.  It retrieves the `Table` from the server and configures the `perspective-viewer` to display the data.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer id=\"viewer\" editable></perspective-viewer>\n\n<script type=\"module\">\n    // Create a client that expects a Perspective server\n    // to accept connections at the specified URL.\n    const websocket = await perspective.websocket(\n        \"ws://localhost:8888/websocket\"\n    );\n\n    // Get a handle to the Table on the server\n    const server_table = await websocket.open_table(\"data_source_one\");\n\n    // Create a new view\n    const server_view = await table.view();\n\n    // Create a Table on the client using `perspective.worker()`\n    const worker = await perspective.worker();\n    const client_table = await worker.table(view);\n\n    // Load the client table in the `<perspective-viewer>`.\n    document.getElementById(\"viewer\").load(client_table);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating and loading a Perspective table into a viewer in JavaScript\nDESCRIPTION: Creates a <perspective-viewer> element, sets its style, appends it to the DOM, and loads the server-hosted table into it. This allows visualization of real-time data updates from the server table with graphical rendering capabilities.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/tutorials/python/tornado.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst viewer = document.createElement(\"perspective-viewer\");\nviewer.style.height = \"500px\";\ndocument.body.appendChild(viewer);\nawait viewer.load(table);\n```\n\n----------------------------------------\n\nTITLE: Grouping Data by Columns in Perspective View in Python\nDESCRIPTION: Creates a Perspective View grouped by columns 'a' and 'c' using Python Perspective APIs. This groups the data hierarchically by these columns for aggregation.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(group_by=[\"a\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective Server and Client in Python\nDESCRIPTION: Creates a Perspective Server instance, a local client, and a data table with a specified name. This setup is essential for hosting data and establishing a WebSocket server for real-time updates. Dependencies include the 'perspective' library and its components.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/tutorials/python/tornado.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport perspective\n\nSERVER = perspective.Server()\nCLIENT = SERVER.new_local_client()\n\n# Creating a table with data and a specific name for access\nTABLE = CLIENT.table(data, name=\"data_source_one\")\n```\n\n----------------------------------------\n\nTITLE: Removing Rows from Perspective Table - Python\nDESCRIPTION: This Python code snippet demonstrates removing rows from a Perspective table. It initializes a Table with some data, specifying 'a' as the index column. The code then removes rows with index values 2 and 3. It relies on the Perspective library for Python. The expected output is a modified table where the rows with indices 2 and 3 are removed from the table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/remove.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntbl = Table({\"a\": [1, 2, 3]}, index=\"a\")\ntbl.remove([2, 3])\n```\n\n----------------------------------------\n\nTITLE: Rendering Perspective View as JSON String in JavaScript\nDESCRIPTION: This snippet serializes a Perspective View object into a JSON string. It enables exporting or transmitting the view data in JSON format, which can be useful for visualization or data exchange. Dependencies include the Perspective library or relevant view object instance; the core operation is the 'to_json' method, which converts the view into JSON.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/to_json_string.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nview.to_json()\n```\n\n----------------------------------------\n\nTITLE: Creating Websocket Endpoint in Python\nDESCRIPTION: This Python snippet establishes a websocket endpoint using `PerspectiveTornadoHandler`, enabling client-side JavaScript to interact with the server-side `Table`. It's essential to pass the configuration object including `perspective_server`.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective.handlers.tornado import PerspectiveTornadoHandler\n\napp = tornado.web.Application([\n\n    # ... other handlers ...\n\n    # Create a websocket endpoint that the client JavaScript can access\n    (r\"/websocket\", PerspectiveTornadoHandler, {\"perspective_server\": SERVER, \"check_origin\": True})\n])\n```\n\n----------------------------------------\n\nTITLE: Handling Perspective View Configuration Update Event in JavaScript\nDESCRIPTION: This snippet attaches an event listener for 'perspective-config-update' events on a Perspective viewer element. When the view's configuration changes due to data loading or user interaction, it retrieves the current configuration using the save() method and logs the updated config in JSON format. It relies on the Perspective JavaScript API and DOM event handling.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nelem.addEventListener(\"perspective-config-update\", function (event) {\n    var config = elem.save();\n    console.log(\"The view() config has changed to \" + JSON.stringify(config));\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pnpm - Shell\nDESCRIPTION: This shell snippet executes the test suite using pnpm. It runs all integration and smoke tests within the project, requiring that the setup and build steps have completed successfully and that all dependencies are available in the virtual environment. The test results can be used to validate the Pyodide wheel build.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/pyodide-tests/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm -w test\n```\n\n----------------------------------------\n\nTITLE: Restoring Perspective Viewer State in JavaScript\nDESCRIPTION: Explains how to use the asynchronous `restore()` method to apply a previously saved configuration token (obtained via `save()`) to a `<perspective-viewer>` element. The method accepts different token types (e.g., object, base64 string) and requires the target table to have an identical schema to the one used when saving.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait elem.restore(json_token);\nawait elem.restore(string_token);\n```\n\n----------------------------------------\n\nTITLE: Splitting Data by Columns in Perspective View in Python\nDESCRIPTION: Creates a Perspective View with split_by configuration including columns 'a' and 'c'. The split splits dataset rows into separate columns for each unique value of those columns.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(split_by=[\"a\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Deleting a Perspective Viewer Custom Element in JavaScript\nDESCRIPTION: This snippet shows how to delete a `<perspective-viewer>` Custom Element using the `delete()` method. This is necessary to reclaim the memory allocated for the UI when the viewer is removed from the DOM.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/deleting.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait viewer.delete();\n```\n\n----------------------------------------\n\nTITLE: Copying Viewer State from Developer Console in JavaScript\nDESCRIPTION: Shows a convenient way to obtain the current configuration of a `<perspective-viewer>` element as a JSON object. This involves selecting the element in the browser's developer console and calling its asynchronous `save()` method, then copying the result using the `copy()` console command.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy to clipboard\ncopy(await document.querySelector(\"perspective-viewer\").save());\n```\n\n----------------------------------------\n\nTITLE: Installing Perspective Package for Node.js (JavaScript)\nDESCRIPTION: This snippet outlines how to install the Perspective package for use within a Node.js server environment.  It installs the core `@finos/perspective` package, making the Perspective functionality available within the server. The output is the successful installation of the package. The main limitation is that this installation method is specific to Node.js server environments.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @finos/perspective\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Local perspective-jupyterlab Extension\nDESCRIPTION: Builds the `perspective-jupyterlab` extension using pnpm, performs an editable install of the `@finos/perspective-python` package using Maturin via pnpm, and creates a symlink for the built labextension into the Jupyter shared directory. This sequence allows for local development and testing of the JupyterLab plugin. Requires JupyterLab to be installed.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# builds labextension to the perspective-python python package root directory\nPACKAGE=perspective-jupyterlab pnpm run build\n# editable install of the python package\npnpm -F @finos/perspective-python develop:maturin\n# set up symlink of our labextension to jupyter share directory\n# this directory's path is in the output of `jupyter labextension list`\npnpm -F @finos/perspective-python develop:labextension\n```\n\n----------------------------------------\n\nTITLE: Creating PerspectiveWidget from perspective.Table instance in Python\nDESCRIPTION: This snippet illustrates initializing a PerspectiveWidget using an existing perspective.Table instance. After importing perspective and creating a table from a dataset via perspective.table(), the table is passed directly to the PerspectiveWidget constructor. This method leverages the underlying Perspective Table API to allow more advanced data management before visualization within JupyterLab widgets. It requires the perspective Python package and a valid table instance as input.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/jupyterlab.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable = perspective.table(data)\nPerspectiveWidget(table)\n```\n\n----------------------------------------\n\nTITLE: Loading Server Table Directly in Perspective Viewer (JavaScript)\nDESCRIPTION: Demonstrates how to establish a websocket connection to a Perspective server and directly load a virtual (server-side) `Table` into a client-side `perspective-viewer` element. The viewer interacts with the server table over the websocket.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/loading_virtual_data.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst elem = document.getElementsByTagName(\"perspective-viewer\")[0];\n\n// Bind to the server's worker instead of instantiating a Web Worker.\nconst websocket = await perspective.websocket(\n    window.location.origin.replace(\"http\", \"ws\")\n);\n\n// Bind the viewer to the preloaded data source.  `table` and `view` objects\n// live on the server.\nconst server_table = await websocket.open_table(\"table_one\");\nawait elem.load(server_table);\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective ESM with Vite - JavaScript\nDESCRIPTION: Demonstrates importing WASM binaries using Vite's `?url` suffix to get the public URL. The `fetch` function is used to load the binary data, which is then passed to the `init_server` and `init_client` initialization methods. This shows the Vite-specific way to provide the required WASM asset to the initialization functions.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SERVER_WASM from \"@finos/perspective/dist/wasm/perspective-server.wasm?url\";\nimport CLIENT_WASM from \"@finos/perspective-viewer/dist/wasm/perspective-viewer.wasm?url\";\n\nawait Promise.all([\n    perspective.init_server(fetch(SERVER_WASM)),\n    perspective_viewer.init_client(fetch(CLIENT_WASM)),\n]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Columns in Perspective View - Python\nDESCRIPTION: This Python snippet demonstrates how to specify the columns in a Perspective View. It calls the `table.view()` method and passes the `columns` parameter as a list, containing only \"a\". This will cause the view to display only the column named \"a\".  The input should be a valid Perspective table object, which this code assumes has been created already.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/columns.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(columns=[\"a\"])\n```\n\n----------------------------------------\n\nTITLE: Constructing a View with Configuration in Rust\nDESCRIPTION: Builds a view with specific configurations in Rust, utilizing the 'ViewConfigUpdate' struct with optional parameters. Dependencies include the 'crate::config::*' module, and the process involves setting fields like 'columns', 'aggregates', 'group_by', and 'filter'. The operation is asynchronous, returning a result of the configured view or error.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/view.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse crate::config::*;\nlet view = table\n    .view(Some(ViewConfigUpdate {\n        columns: Some(vec![Some(\"Sales\".into())]),\n        aggregates: Some(HashMap::from_iter(vec![(\"Sales\".into(), \"sum\".into())])),\n        group_by: Some(vec![\"Region\".into(), \"Country\".into()]),\n        filter: Some(vec![Filter::new(\"Category\", \"in\", &[\"Furniture\", \"Technology\"])]),\n        ..ViewConfigUpdate::default()\n    }))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Apache License Boilerplate Notice\nDESCRIPTION: This snippet provides the boilerplate notice required for applying the Apache License to a work. It includes copyright information, the license text, and disclaimers. To use it, replace the bracketed placeholders with your own identifying information, then include the notice at the top of your file using the comment syntax appropriate for your file format. The notice is essential for compliance with the terms of the Apache License, ensuring proper attribution and outlining the user's rights and limitations.\nSOURCE: https://github.com/finos/perspective/blob/master/LICENSE.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2019 The Perspective Authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Copying Serialized State to Clipboard - JavaScript\nDESCRIPTION: Copies the serialized state of a `<perspective-viewer>` to the clipboard. This allows users to easily save and share their current view configuration.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/save_restore.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Copy to clipboard\ncopy(await document.querySelector(\"perspective-viewer\").save());\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies on macOS using Homebrew\nDESCRIPTION: Installs required system dependencies (CMake and LLVM version 17) on macOS using the Homebrew package manager. The `brew link llvm@17` command makes this version of LLVM available system-wide, though it's noted as optional. This step is necessary before attempting to build Perspective on macOS.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install cmake llvm@17\nbrew link llvm@17 # optional, see below\n```\n\n----------------------------------------\n\nTITLE: Adding Expression-Defined Columns in Perspective Views Using Python\nDESCRIPTION: This snippet shows how to create a Perspective table view with new columns defined by expressions provided as a list of strings. The example creates a new column by evaluating the expression '\"a\" + \"b\"'. Prerequisites include the Perspective Python library and a table object. The snippet inputs a table and returns a view with the computed column resulting from the expression.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/expressions.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nview = table.view(expressions=['\"a\" + \"b\"'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Client-Only Perspective in JavaScript\nDESCRIPTION: This JavaScript snippet initializes a client-only Perspective workflow by creating a WebWorker-backed Perspective Table from a CSV dataset and binding it to a Perspective Viewer web component appended to the DOM. Dependencies include the Perspective library (providing perspective.worker and perspective-viewer) and a compatible data format (like CSV). The main parameter is 'csv', representing the dataset to load; the output is the loaded data rendered in the Perspective Viewer. This setup is ideal for static, read-only web applications where all interactions are performed locally in the browser, and it requires no backend server after initial load.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/architecture/client_only.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst worker = await perspective.worker();\nconst table = await worker.table(csv);\n\nconst viewer = document.createElement(\"perspective-viewer\");\ndocument.body.appendChild(viewer);\nawait viewer.load(table);\n```\n\n----------------------------------------\n\nTITLE: Resetting and Managing Perspective Viewer Themes (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to manually reset and manage themes in the perspective-viewer component. The `.resetThemes()` method is used to re-detect themes and to explicitly set available themes, which is useful when automatic theme detection fails or when themes are added dynamically.  This snippet shows two examples, one to auto-detect and another to define the themes.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/theming.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// re-auto-detect themes\nviewer.resetThemes();\n\n// Set available themes explicitly (they still must be imported as CSS!)\nviewer.resetThemes([\"Pro Light\", \"Pro Dark\"]);\n```\n\n----------------------------------------\n\nTITLE: Removing Rows from Perspective Table - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates removing rows from a Perspective table. It takes an array of index values and removes the corresponding rows from the table. It requires an initialized Perspective table object. The expected output is that the rows with indices 1, 2, and 3 are removed from the table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/remove.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait table.remove([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Creating a View and Retrieving Schema - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a view from a table object, specifying the columns to include in the view. It then retrieves the schema of the created view.  Dependencies include a valid `table` object, and the Perspective library must be loaded. The `columns` parameter specifies the columns to include in the view.  The expected output is a schema object that defines the data types of the columns in the view (e.g., {a: \"float\", b: \"string\"}).  The `table` object should be initialized before use.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/schema.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [`View`] = await table.view({ columns: [\"a\", \"b\"] });\nconst schema = await view.schema(); // {a: \"float\", b: \"string\"}\n```\n\n----------------------------------------\n\nTITLE: Grouping Data in Perspective using Rust\nDESCRIPTION: This Rust snippet illustrates how to create a Perspective view with a group by.  It uses `ViewConfigUpdate` to specify the `group_by` as a vector of column names. The data will be grouped by columns 'a' and 'c'. Requires the `ViewConfigUpdate` struct and appropriate async context.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/group_by.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet view = table.view(Some(ViewConfigUpdate {\n    group_by: Some(vec![\"a\".into(), \"c\".into()]),\n    ..ViewConfigUpdate::default()\n})).await?;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table in JavaScript\nDESCRIPTION: This snippet shows how to delete a table object using asynchronous methods in JavaScript. It assumes an existing table and calls the delete() method to free associated resources. Dependencies include a client object with a table method returning a table instance that supports delete().\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/delete.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst table = await client.table(\"x,y\\n1,2\\n3,4\");\n\n// ...\n\nawait table.delete();\n```\n\n----------------------------------------\n\nTITLE: Sorting Data in Perspective View in Python\nDESCRIPTION: Creates a Python Perspective View sorted by column 'a' ascending, specifying sort as a list of [column, direction] pairs.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(sort=[[\"a\", \"asc\"]])\n```\n\n----------------------------------------\n\nTITLE: Removing Update Callbacks from Perspective View in JavaScript\nDESCRIPTION: This snippet demonstrates how to unregister an update callback from a Perspective View using JavaScript. It uses an asynchronous workflow where 'on_update' registers a callback and returns an ID, which is then supplied to 'remove_update' to unregister. The view instance, 'callback' function, and returned 'id' are key, with proper async/await usage required. The output shows removal of the callback; there is no output if successful.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/remove_update.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst callback = () => console.log(\"Updated!\");\nconst id = await view.on_update(callback);\nawait view.remove_update(id);\n```\n\n----------------------------------------\n\nTITLE: Setting up Perspective with ThreadPoolExecutor in Python\nDESCRIPTION: This code snippet demonstrates how to configure the Perspective server to utilize a thread pool executor for parallel query processing. It initializes a Perspective server, creates a Tornado IOLoop, and configures the server's loop callback to use `concurrent.futures.ThreadPoolExecutor`.  The `loop.start()` begins the IOLoop which facilitates the concurrency.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/multithreading.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef perspective_thread():\n    server = perspective.Server()\n    loop = tornado.ioloop.IOLoop()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        server.set_loop_callback(loop.run_in_executor, executor)\n        loop.start()\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Expressions in Perspective View in JavaScript\nDESCRIPTION: Shows specifying a new computed column in a Perspective View via an expression, here adding columns \"a\" and \"b\". The expressions property accepts a dictionary mapping expressions to their labels or formulas. Used for creating derived columns.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    expressions: { '\"a\" + \"b\"': '\"a\" + \"b\"' },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering on_update Callback with Perspective View – JavaScript\nDESCRIPTION: This snippet demonstrates how to register a basic update callback to a Perspective View using the on_update method in JavaScript. The callback receives an object containing a port_id to identify which port triggered the update. Dependencies include a constructed Perspective View instance. The input is an update event and the output is a console log of the port_id. This approach does not handle row-level granularity.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/on_update.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Attach an `on_update` callback\nview.on_update((updated) => console.log(updated.port_id));\n```\n\n----------------------------------------\n\nTITLE: Creating Local Perspective Server and Client - Rust\nDESCRIPTION: This Rust snippet demonstrates instantiating a perspective_server::Server and a synchronous LocalClient connected to it using the perspective crate. The Server is created with its default configuration, and the client is connected via LocalClient::new(&server). Requires the perspective crate, with use statements for both server and LocalClient modules. All operations occur in-memory and synchronously.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client.md#_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nuse perspective::server::Server;\nuse perspective::LocalClient;\n\nlet server = Server::default();\nlet client = perspective::LocalClient::new(&server);\n```\n\n----------------------------------------\n\nTITLE: Parsing and Bucketing Date Column Using Perspective ExprTK Expression\nDESCRIPTION: This snippet defines an ExprTK expression to convert a raw integer date in YYYYMMDD format into a typed date object by extracting year, month, and day components through arithmetic operations. It then buckets the resulting date by week using Perspective's bucket function. This expression is used within Perspective's data transformation pipeline to clean and reformat the 'date' column for better visualization grouping. Dependencies include the Perspective library and that the input 'date' field is numeric. The output is a weekly bucketed date suitable for grouping in charts.\nSOURCE: https://github.com/finos/perspective/blob/master/examples/blocks/src/covid/README.md#_snippet_0\n\nLANGUAGE: exprtk\nCODE:\n```\nvar year := integer(floor(\"date\" / 10000));\nvar month := integer(floor(\"date\" / 100)) - year * 100;\nvar day := integer(\"date\" % 100);\nbucket(date(year, month, day), 'W')\n```\n\n----------------------------------------\n\nTITLE: Creating Table and View from Arrow Bytes in Python\nDESCRIPTION: This snippet demonstrates the basic workflow of using `perspective-python`. It initializes a local server client, loads data from Apache Arrow bytes into a Table, creates a View with grouping operations, and exports the resulting data back into Apache Arrow format.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom perspective import Server\n\nclient = Server().new_local_client()\ntable = client.table(arrow_bytes_data)\nview = table.view(group_by = [\"CounterParty\", \"Security\"])\narrow = view.to_arrow()\n```\n\n----------------------------------------\n\nTITLE: Applying Ascending Sort in Perspective (JavaScript)\nDESCRIPTION: Demonstrates creating a Perspective view from a table in JavaScript. The `sort` property is configured as an array containing `[\"a\", \"asc\"]`, instructing the view to sort the data based on column 'a' in ascending ('asc') order.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/sort.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    sort: [[\"a\", \"asc\"]],\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting and Sorting Matched Orders with Perspective JSON\nDESCRIPTION: This snippet targets the selection of open buy-side orders in a Perspective Table whose price exceeds a dynamic threshold, typically the current best price from a prior query. The configuration returns the IDs of such orders, sorted first by highest price and then by oldest timestamp, guaranteeing correct priority when closing or matching orders. Dependencies include a functioning Table with the relevant columns and the dynamic 'price' parameter inserted before use. The output is a sequenced ID list for subsequent status updates.\nSOURCE: https://github.com/finos/perspective/blob/master/examples/blocks/src/market/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    columns: [\"id\"],\n    filter: [\n        [\"side\", \"==\", \"buy\"],\n        [\"status\", \"==\", \"open\"],\n        [\"price\", \">\", price],\n    ],\n    sort: [\n        [\"price\", \"desc\"],\n        [\"timestamp\", \"asc\"],\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Only Perspective Viewer JavaScript\nDESCRIPTION: This JavaScript snippet connects to a Perspective server via websocket, opens a table, and loads it into a `perspective-viewer`.  It utilizes `perspective.websocket` and `open_table` to interact with the server-side table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst websocket = perspective.websocket(\"ws://localhost:8888/websocket\");\nconst table = websocket.open_table(\"data_source\");\ndocument.getElementById(\"viewer\").load(table);\n```\n\n----------------------------------------\n\nTITLE: Grouping Data by Columns in Perspective View in Rust\nDESCRIPTION: Illustrates an asynchronous Rust call to create a View with group_by configuration specifying columns 'a' and 'c'. Utilizes ViewConfigUpdate struct with default fallback for other options.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet view = table.view(Some(ViewConfigUpdate {\n    group_by: Some(vec![\"a\".into(), \"c\".into()]),\n    ..ViewConfigUpdate::default()\n})).await?;\n```\n\n----------------------------------------\n\nTITLE: Removing Rows from an Indexed Perspective Table (JavaScript/Python)\nDESCRIPTION: Demonstrates how to remove specific rows from an indexed `Table`. The `remove()` method takes an array or list of index values corresponding to the rows that should be deleted. Requires an existing indexed `Table` instance.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/update_and_remove.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nindexed_table.remove([1, 4]);\n```\n\nLANGUAGE: python\nCODE:\n```\n// Python\n\nindexed_table.remove([1, 4])\n```\n\n----------------------------------------\n\nTITLE: Creating Split-By View with Perspective Table Using Rust\nDESCRIPTION: Asynchronously creates a Perspective table view split by columns \"a\" and \"c\" in Rust. Uses the Rust Perspective API where `table.view` accepts an optional `ViewConfigUpdate` struct with a `split_by` field containing a vector of column names. Returns a Future that resolves to the view. The underlying dataset is not aggregated, and new columns are created for each unique value in the split columns.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/split_by.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet view = table.view(Some(ViewConfigUpdate {\n    split_by: Some(vec![\"a\".into(), \"c\".into()]),\n    ..ViewConfigUpdate::default()\n})).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating Websocket Client in JavaScript\nDESCRIPTION: This snippet creates a JavaScript client using `perspective.websocket` to connect to a Perspective server at a specified URL.  This connection facilitates the exchange of data and commands between the client and server.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst websocket = await perspective.websocket(\"ws://localhost:8888/websocket\");\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Theme in Perspective Viewer (JavaScript)\nDESCRIPTION: This JavaScript code shows how to set the initial theme of the perspective-viewer using the `.restore()` method. This is especially useful for dynamic theme selection or when the theme needs to be applied after the component has been rendered. The `theme` property within the `restore` function accepts the theme name as a string.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/theming.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst viewer = document.querySelector(\"perspective-viewer\");\nawait viewer.restore({ theme: \"Pro Dark\" });\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective from CDN in HTML - HTML/JavaScript\nDESCRIPTION: Demonstrates loading Perspective components (viewer, datagrid, d3fc plugins, and the core library) directly from a Content Delivery Network (CDN) within an HTML document. This is achieved using `<script type=\"module\">` tags containing standard ES Module import statements, which allows the browser to fetch and execute the modules directly from the CDN URLs.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"module\">\n    import \"https://cdn.jsdelivr.net/npm/@finos/perspective-viewer/dist/cdn/perspective-viewer.js\";\n    import \"https://cdn.jsdelivr.net/npm/@finos/perspective-viewer-datagrid/dist/cdn/perspective-viewer-datagrid.js\";\n    import \"https://cdn.jsdelivr.net/npm/@finos/perspective-viewer-d3fc/dist/cdn/perspective-viewer-d3fc.js\";\n    import perspective from \"https://cdn.jsdelivr.net/npm/@finos/perspective/dist/cdn/perspective.js\";\n\n    // .. Do stuff here ..\n</script>\n```\n\n----------------------------------------\n\nTITLE: Replace Table data with CSV in JavaScript\nDESCRIPTION: Replaces the entire data of a Perspective Table with the provided CSV string. This method preserves derived views and update callbacks, coercing the data to the existing table schema.  The input is a CSV string.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/replace.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait table.replace(\"x,y\\n1,2\");\n```\n\n----------------------------------------\n\nTITLE: Opening Table on Server in JavaScript\nDESCRIPTION: This snippet opens a `Table` on the server by name using `websocket.open_table()`. It retrieves a proxy for the server-side `Table`, allowing JavaScript to interact with the data.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst table = await websocket.open_table(\"data_source_one\");\n```\n\n----------------------------------------\n\nTITLE: Getting Table Column Names with Perspective Python\nDESCRIPTION: This Python snippet demonstrates how to retrieve a list of column names from a Perspective Table instance using the 'columns' method. The method returns a list of strings in the same order as the input data. Requires the Perspective Python API and a created Table object. Inputs include a valid Table object and no parameters; outputs a list of strings.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/columns.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncolumns = table.columns()\n```\n\n----------------------------------------\n\nTITLE: Installing Perspective Plugins via NPM (JavaScript)\nDESCRIPTION: This snippet details the installation of Perspective plugins which provide visualizations within the Perspective Viewer UI. It relies on the packages installed previously, and it installs specific plugin packages, in this case `d3fc`, `datagrid` and `openlayers`.  The output is the successful installation of plugin packages, allowing for custom visualization options. There are no significant limitations, all plugins are optional.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @finos/perspective-viewer-d3fc @finos/perspective-viewer-datagrid @finos/perspective-viewer-openlayers\n```\n\n----------------------------------------\n\nTITLE: Initializing and Serializing Perspective View in Python\nDESCRIPTION: Creates a Perspective Table from a dictionary, obtains a View including only the \"name\" column, serializes the View to Apache Arrow format, and then deletes the View. Assumes the Python Perspective library is imported and available. The example shows synchronous-style API calls typical in Python bindings.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable = perspective.Table({\n  \"id\": [1, 2, 3, 4],\n  \"name\": [\"a\", \"b\", \"c\", \"d\"]\n});\n\nview = table.view(columns=[\"name\"])\narrow = view.to_arrow()\nview.delete()\n```\n\n----------------------------------------\n\nTITLE: Accessing Table Column Names with Perspective Rust\nDESCRIPTION: This Rust code example illustrates how to asynchronously obtain the column names from a Perspective Table using the 'columns' method. The call returns a future, so '.await' is used to retrieve the result. Requires the Perspective Rust crate and a valid Table instance. The input is a Table object; the result is a vector of strings with column names.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/columns.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet columns = table.columns().await;\n```\n\n----------------------------------------\n\nTITLE: Installing Perspective JupyterLab Extension via npm/JupyterLab\nDESCRIPTION: These shell commands use the 'jupyter labextension install' utility to install the Jupyter Widgets manager and the Perspective JupyterLab frontend extension. This requires Node.js, npm, and JupyterLab to be pre-installed on the system.\nSOURCE: https://github.com/finos/perspective/blob/master/packages/perspective-jupyterlab/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install @finos/perspective-jupyterlab\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for perspective-python\nDESCRIPTION: Installs the Python package dependencies required for building and running `perspective-python`. It uses pip to install packages listed in the `requirements.txt` file located within the `rust/perspective-python` directory. Ensure the correct Python environment (3.8+) is active and the project is configured for Python builds via `pnpm run setup`.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -r rust/perspective-python/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Applying Aggregates in Perspective View in Python\nDESCRIPTION: Creates a Perspective View in Python specifying aggregates for columns 'a' as average and 'b' as distinct count. These aggregates calculate summary metrics aggregated by groups.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(\n  aggregates={\n    \"a\": \"avg\",\n    \"b\": \"distinct count\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Column Name with Perspective Table in JavaScript\nDESCRIPTION: Initializes a Perspective table with columns 'x' and 'y', explicitly setting 'x' as the index column. Demonstrates retrieving the index column name using the get_index() method. Requires the Perspective library to be available and a client instance; expected input is CSV-formatted string data and an options object. Outputs the name of the index column as a string.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/get_index.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst table = await client.table(\"x,y\\n1,2\\n3,4\", { index: \"x\" });\nconst index = table.get_index(); // \"x\"\n```\n\n----------------------------------------\n\nTITLE: Creating Perspective Viewer Programmatically in JavaScript\nDESCRIPTION: Shows how to create a `<perspective-viewer>` element dynamically using the `document.createElement` method in JavaScript.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst viewer = document.createElement(\"perspective-viewer\");\n```\n\n----------------------------------------\n\nTITLE: Installing perspective-python with Verbose Output\nDESCRIPTION: Installs the `perspective-python` package from a source distribution using pip with the verbose flag (`-vv`). This provides detailed output during the installation process, which is helpful for troubleshooting build failures related to missing dependencies (like CMake or Boost) or configuration issues.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install -vv perspective-python\n```\n\n----------------------------------------\n\nTITLE: Sorting Data in Perspective View in JavaScript\nDESCRIPTION: Configures a View sorted by column 'a' in ascending order. Sorting supports multiple columns and directions (asc/desc), analogous to SQL ORDER BY.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    sort: [[\"a\", \"asc\"]],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Serializing Perspective View in Rust\nDESCRIPTION: Shows asynchronous Rust code that initializes a Perspective Table using CSV data wrapped in update data options. It then creates a View on the Table without configuration, serializes the View to Arrow format, and deletes the View. Requires the Perspective Rust client and futures support with proper error handling for await calls.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet opts = TableInitOptions::default();\nlet data = TableData::Update(UpdateData::Csv(\"x,y\\n1,2\\n3,4\".into()));\nlet table = client.table(data, opts).await?;\n\nlet view = table.view(None).await?;\nlet arrow = view.to_arrow().await?;\nview.delete().await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Expressions in Perspective View in Python\nDESCRIPTION: Creates a Perspective View in Python with a computed expression that sums columns \"a\" and \"b\" using Perspective's expression syntax.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(expressions=['\"a\" + \"b\"'])\n```\n\n----------------------------------------\n\nTITLE: Creating Table from View\nDESCRIPTION: Creates a new Perspective `Table` from a `View` instance in Javascript.  The `Table` is constructed on the `Table::view`'s dataset, and all future updates that affect the `Table::view` will be forwarded to the new `Table`. Requires the `perspective` library.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/flattening.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker1 = perspective.worker();\nconst table = await worker.table(data);\nconst view = await table.view({ filter: [[\"State\", \"==\", \"Texas\"]] });\nconst table2 = await worker.table(view);\ntable.update([{ State: \"Texas\", City: \"Austin\" }]);\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Perspective Viewer (Server-only Mode)\nDESCRIPTION: Defines the basic HTML structure containing a `<perspective-viewer>` element with the ID 'viewer'. This element will be used to display data loaded directly from the server table proxy when operating in server-only mode.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/websocket.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer id=\"viewer\" editable></perspective-viewer>\n```\n\n----------------------------------------\n\nTITLE: Installing perspective-python via Pip\nDESCRIPTION: This bash command installs the `perspective-python` library from the Python Package Index (PyPI) using the pip package manager. This provides the core library, JupyterLab widget, and server handlers.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install perspective-python\n```\n\n----------------------------------------\n\nTITLE: Creating Table from View\nDESCRIPTION: Creates a new Perspective `Table` from a `View` instance in Rust.  The `Table` is constructed from `TableData::View(view)`.  Requires the `perspective` library and Tokio runtime.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/flattening.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet opts = TableInitOptions::default();\nlet data = TableData::Update(UpdateData::Csv(\"x,y\\n1,2\\n3,4\".into()));\nlet table = client.table(data, opts).await?;\nlet view = table.view(None).await?;\nlet table2 = client.table(TableData::View(view)).await?;\ntable.update(data).await?;\n```\n\n----------------------------------------\n\nTITLE: Creating PerspectiveWidget with Data in Python\nDESCRIPTION: This snippet demonstrates creating a `PerspectiveWidget` in Python with a dataset, specifying `group_by` parameter.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective.widget import PerspectiveWidget\nPerspectiveWidget(data, group_by=[\"date\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Perspective Library (Bash)\nDESCRIPTION: Adds the `perspective` crate as a dependency to the current Rust project using the Cargo package manager. This command downloads and includes the library in the project's `Cargo.toml` file. Requires Cargo to be installed.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/rust.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo add perspective\n```\n\n----------------------------------------\n\nTITLE: Building Pyodide Wheel with Environment Variable - Shell\nDESCRIPTION: This command builds the pyodide wheel, required for the subsequent tests to run. It sets the PSP_BUILD_WHEEL environment variable to 1 and executes the build script via pnpm. The process requires prior installation of both Python and Node.js dependencies and assumes that all prior setup steps have been performed.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/pyodide-tests/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPSP_BUILD_WHEEL=1 pnpm -w run build\n```\n\n----------------------------------------\n\nTITLE: Creating PerspectiveWidget with Schema in Python\nDESCRIPTION: This snippet creates a `PerspectiveWidget` using a schema definition in Python, specifying the data types for columns 'a' and 'b'.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nPerspectiveWidget({\"a\": int, \"b\": str})\n```\n\n----------------------------------------\n\nTITLE: Esbuild Configuration with PerspectiveEsbuildPlugin (JavaScript)\nDESCRIPTION: Configures `esbuild` to bundle a Perspective application using the `PerspectiveEsbuildPlugin`. The plugin automatically handles Perspective's internal dependencies. The configuration specifies the entry point, plugin, output format (ESM), bundling options, and file loaders for TTF fonts and WASM files.  Requires `esbuild` and `@finos/perspective-esbuild-plugin` as dependencies.\nSOURCE: https://github.com/finos/perspective/blob/master/tools/perspective-esbuild-plugin/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst esbuild = require(\"esbuild\");\nconst {\n    PerspectiveEsbuildPlugin,\n} = require(\"@finos/perspective-esbuild-plugin\");\n\nesbuild.build({\n    entryPoints: [\"src/index.js\"],\n    plugins: [PerspectiveEsbuildPlugin()],\n    format: \"esm\",\n    bundle: true,\n    loader: {\n        \".ttf\": \"file\",\n        \".wasm\": \"file\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Theme in Perspective Viewer (HTML)\nDESCRIPTION: This snippet demonstrates how to set the initial theme for the `perspective-viewer` component by using the `theme` attribute directly in the HTML tag.  By setting the `theme` attribute to a valid theme name (e.g., \"Pro Light\"), the perspective-viewer will load with the specified theme when it initializes.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/theming.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<perspective-viewer theme=\"Pro Light\"></perspective-viewer>\n```\n\n----------------------------------------\n\nTITLE: Removing Update Callbacks from Perspective View in Rust\nDESCRIPTION: This Rust snippet demonstrates unregistering an update callback from a Perspective View asynchronously. The callback is registered with 'on_update', returning a callback ID, which is passed to 'remove_update' to deregister the listener. This requires an async context, a Perspective View instance, OnUpdateOptions for configuration, and uses Rust's Result handling for errors. The removal produces no output if successful.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/remove_update.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet callback = |_| async { print!(\"Updated!\") };\nlet cid = view.on_update(callback, OnUpdateOptions::default()).await?;\nview.remove_update(cid).await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective ESM with ESBuild - JavaScript\nDESCRIPTION: Demonstrates importing WASM binaries directly. Similar to the Vite example, `fetch` is used to load the binary data, which is then passed to the `init_server` and `init_client` initialization methods. This approach requires a specific ESBuild loader configuration for `.wasm` files.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SERVER_WASM from \"@finos/perspective/dist/wasm/perspective-server.wasm\";\nimport CLIENT_WASM from \"@finos/perspective-viewer/dist/wasm/perspective-viewer.wasm\";\n\nawait Promise.all([\n    perspective.init_server(fetch(SERVER_WASM)),\n    perspective_viewer.init_client(fetch(CLIENT_WASM)),\n]);\n```\n\n----------------------------------------\n\nTITLE: Activating Local Emscripten SDK Environment\nDESCRIPTION: Sources the `emsdk_env.sh` script to activate and export environment variables for a locally installed Emscripten SDK. This allows using a system-wide Emscripten installation instead of the one bundled with the project for building the WebAssembly components. Requires a prior local Emscripten SDK installation.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource emsdk/emsdk_env.sh\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table in Python\nDESCRIPTION: This snippet demonstrates how to delete a table object in Python. It initializes a table with sample CSV data and calls the delete() method to clean up resources. The example assumes a client object that creates the table and that the delete() method is available on the table object.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/delete.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntable = client.table(\"x,y\\n1,2\\n3,4\")\n\n// ...\n\ntable.delete()\n```\n\n----------------------------------------\n\nTITLE: Adding Specific LLVM Version to PATH on macOS\nDESCRIPTION: Prepends the binary directory of the Homebrew-installed LLVM version 17 to the system's PATH environment variable for the current shell session. This is an alternative to linking the keg system-wide (`brew link llvm@17`) and ensures the correct compiler tools are found during the build process.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPATH=$(brew --prefix llvm@17)/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for WebAssembly - JavaScript\nDESCRIPTION: Shows a snippet of a Webpack configuration file. It enables experimental features for handling WebAssembly by setting `experiments.asyncWebAssembly` to `true` and `experiments.syncWebAssembly` to `false`. This configuration is necessary for Webpack to correctly load and process the Perspective library's WebAssembly dependencies.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    // ...\n    experiments: {\n        asyncWebAssembly: true,\n        syncWebAssembly: false,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Table in Rust\nDESCRIPTION: This Rust example illustrates creating a table with CSV data and then invoking the delete() method asynchronously to clean up resources. It requires a client with a table method, and the delete() method is called with await to handle asynchronous cleanup.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/delete.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet opts = TableInitOptions::default();\nlet data = TableData::Update(UpdateData::Csv(\"x,y\\n1,2\\n3,4\".into()));\nlet table = client.table(data, opts).await?;\n\n// ...\n\ntable.delete().await?;\n```\n\n----------------------------------------\n\nTITLE: Example: Defining Variables and String Manipulation in Expressions\nDESCRIPTION: Demonstrates variable assignment, string operations, and concatenation within an expression. Utilizes Perspective's extended functions to create complex derived columns for display or analysis.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/expressions.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n// My Column Name\nvar incrementedBy200 := \"Sales\" + 200;\nvar half := incrementedBy200 / 2;\nhalve\n```\n\nLANGUAGE: text\nCODE:\n```\n// Complex Expression\nvar upperCustomer := upper(\"Customer Name\");\nvar separator := concat(upperCustomer, ' | ');\nvar profitRatio := floor(percent_of(\"Profit\", \"Sales\")); // Remove trailing decimal.\nvar combined := concat(separator, string(profitRatio));\nvar percentDisplay := concat(combined, '%');\npercentDisplay\n```\n\n----------------------------------------\n\nTITLE: Querying Perspective Table - Rust\nDESCRIPTION: This Rust snippet shows how to create a view on a Perspective table with configuration options. It selects \"Sales\" as the column, aggregates \"Sales\" using \"sum\", groups by \"Region\" and \"Country\", and filters the \"Category\" to include only \"Furniture\" and \"Technology\". It also utilizes the `ViewConfigUpdate` struct and `HashMap` to construct the configuration object. This depends on the Perspective Rust bindings and requires a `table` and `ViewConfigUpdate` to be available within the scope.  The `await?` indicates this is an asynchronous operation. The result is the View object.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/querying.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::config::*;\nlet view = table\n    .view(Some(ViewConfigUpdate {\n        columns: Some(vec![Some(\"Sales\".into())]),\n        aggregates: Some(HashMap::from_iter(vec![(\"Sales\".into(), \"sum\".into())])),\n        group_by: Some(vec![\"Region\".into(), \"Country\".into()]),\n        filter: Some(vec![Filter::new(\"Category\", \"in\", &[\n            \"Furniture\",\n            \"Technology\",\n        ])]),\n        ..ViewConfigUpdate::default()\n    }))\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing Perspective Table with Index Option in Rust\nDESCRIPTION: Defines table initialization options using TableInitOptions, setting the 'index' field to 'x'. Initializes a Perspective table with CSV-formatted data and specified options asynchronously. Also demonstrates opening a table by name. Requires the Perspective Rust client with a compatible async runtime. Key input parameters include CSV string and TableInitOptions; outputs a handle to the initialized or opened table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/get_index.md#_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet options = TableInitOptions {index: Some(\"x\".to_string()), ..default() };\nlet table = client.table(\"x,y\\n1,2\\n3,4\", options).await;\nlet tables = client.open_table(\"table_one\").await;\n```\n\n----------------------------------------\n\nTITLE: Expiring Aged Open Orders with Perspective JSON\nDESCRIPTION: This JSON query is used to retrieve the IDs of all open orders in a Perspective Table whose IDs are less than a specified expiration threshold. Intended for use in simulating order expiry, this configuration assumes availability of columns 'id' and 'status', and applies a filter to extract records older than a dynamically supplied cutoff (e.g., 'id' < 12345). It returns the IDs of orders to be marked as expired, facilitating automated status transitions for stale orders.\nSOURCE: https://github.com/finos/perspective/blob/master/examples/blocks/src/market/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    columns: [\"id\"],\n    filter: [\n        [\"status\", \"==\", \"open\"],\n        [\"id\", \"<\", 12345],\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Functions for String Operations and Build Messages in CMake\nDESCRIPTION: Defines two CMake functions: `string_starts_with` checks whether a string starts with a specified substring by using string find operations. `psp_build_message` appends custom messages to a BUILD_MESSAGE variable, accumulating build configuration notes. These functions simplify repeated operations for later use in the build process.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(string_starts_with str search)\n    string(FIND \"${str}\" \"${search}\" out)\n\n    if(\"${out}\" EQUAL 0)\n        return(true)\n    endif()\n    return(false)\nendfunction()\n\nfunction(psp_build_message message)\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${message}\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Update and Delete Event Callbacks in Perspective Table using Python\nDESCRIPTION: This snippet demonstrates how to assign callback functions to 'on_update' and 'on_delete' events of a Perspective view object in Python. It uses both named functions (for later removal) and lambdas (as simple, non-removable callbacks). The required dependency is the Perspective library and an existing 'view' object. Functions are registered as event handlers by passing them to 'view.on_update' or 'view.on_delete'. No parameters are passed to callbacks. Removal of callbacks is only available for named functions, not lambdas.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/callbacks.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef update_callback():\n    print(\"Updated!\")\n\n# set the update callback\non_update_id = view.on_update(update_callback)\n\n\ndef delete_callback():\n    print(\"Deleted!\")\n\n# set the delete callback\non_delete_id = view.on_delete(delete_callback)\n\n# set a lambda as a callback\nview.on_delete(lambda: print(\"Deleted x2!\"))\n```\n\n----------------------------------------\n\nTITLE: Building the Perspective Project using PNPM\nDESCRIPTION: Executes the main build script defined in the project's package.json using pnpm. This command compiles both JavaScript (including WebAssembly) and Python components based on the current configuration set by `pnpm run setup`. Assumes system dependencies (CMake, pnpm) are installed.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Serializing Perspective View Data to Multiple Formats - JavaScript\nDESCRIPTION: This snippet demonstrates usage of various Perspective view serialization methods in JavaScript, including to_json(), to_columns(), to_csv(), to_ndjson(), and to_arrow(). It assumes you have already created a Perspective 'table' object and called table.view(), grouping by 'State' and selecting the 'Sales' column. Each method returns a promise for the resulting format: JSON and columns return JavaScript objects, CSV and NDJSON return strings, and Arrow returns an ArrayBuffer. The outputs are logged directly to the console for inspection.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/serializing.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = await table.view({ group_by: [\"State\"], columns: [\"Sales\"] });\n\n// JavaScript Objects\nconsole.log(await view.to_json());\nconsole.log(await view.to_columns());\n\n// String\nconsole.log(await view.to_csv());\nconsole.log(await view.to_ndjson());\n\n// ArrayBuffer\nconsole.log(await view.to_arrow());\n```\n\n----------------------------------------\n\nTITLE: Running a Perspective Example Application using PNPM\nDESCRIPTION: Executes the start script for a specific example package (e.g., 'blocks') within the Perspective monorepo using pnpm. This command demonstrates how to run example applications after a successful build.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run start blocks\n```\n\n----------------------------------------\n\nTITLE: Flattening Table View into Table in Python\nDESCRIPTION: Creates a new Perspective Table from a filtered view using Arrow serialization. Implements an update callback to forward changes from the original table to the new one when they affect the view's dataset.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntable = perspective.Table(data);\nview = table.view(filter=[[\"State\", \"==\", \"Texas\"]])\ntable2 = perspective.Table(view.to_arrow());\n\ndef updater(port, delta):\n    table2.update(delta)\n\nview.on_update(updater, mode=\"Row\")\ntable.update([{\"State\": \"Texas\", \"City\": \"Austin\"}])\n```\n\n----------------------------------------\n\nTITLE: Creating Table from View\nDESCRIPTION: Creates a new Perspective `Table` from a `View` instance in Python. The code constructs a `Table` from the arrow representation of a `View` and sets up an update callback to keep the new `Table` synchronized with updates to the original `Table`. Requires the `perspective` library.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/flattening.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable = perspective.Table(data);\nview = table.view(filter=[[\"State\", \"==\", \"Texas\"]])\ntable2 = perspective.Table(view.to_arrow());\n\ndef updater(port, delta):\n    table2.update(delta)\n\nview.on_update(updater, mode=\"Row\")\ntable.update([{\"State\": \"Texas\", \"City\": \"Austin\"}])\n```\n\n----------------------------------------\n\nTITLE: Using Perspective CLI Commands and Options in Bash\nDESCRIPTION: This snippet shows the complete usage of the Perspective CLI, including available commands (convert and host) and their options. The convert command transforms files between formats, while the host command serves files on a local server with Perspective's server-side functionality.\nSOURCE: https://github.com/finos/perspective/blob/master/packages/perspective-cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUsage: perspective [options] [command]\n\nA convenient command-line client for Perspective.js.  Can convert between Perspective supported format, or host a local web server.\n\nOptions:\n  -V, --version                 output the version number\n  -h, --help                    output usage information\n\nCommands:\n  convert [options] [filename]  Convert a file into a new format.  Reads from STDIN if no filename is provided\n    Options:\n    -f, --format <format>    Which output format to use:  arrow, csv, columns, json.\n    -o, --output <filename>  Filename to write to.  If not supplied, writes to STDOUT\n    -h, --help               output usage information\n\n  host [options] [filename]     Host a file on a local Websocket/HTTP server using a server-side Perspective.  Reads from STDIN if no filename is provided\n    Options:\n      -p, --port <port>  Which port to bind to (default: 8080)\n      -o, --open         Open a browser automagically\n      -h, --help         output usage information\n```\n\n----------------------------------------\n\nTITLE: Initializing RE2 Library Build with CMake in CMake Language\nDESCRIPTION: This snippet sets the minimum required CMake version, declares the RE2 project using C++ (CXX), and configures the C++ standard to C++11 with mandatory enforcement. It also includes standard CMake modules for testing and GNU install directories. These configurations set the foundational environment for building the RE2 project.\nSOURCE: https://github.com/finos/perspective/blob/master/cmake/re2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5.1)  \nproject(RE2 CXX)  \ninclude(CTest)  \ninclude(GNUInstallDirs)  \n\nif(NOT CMAKE_CXX_STANDARD)  \n  set(CMAKE_CXX_STANDARD 11)  \n  set(CMAKE_CXX_STANDARD_REQUIRED ON)  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Running pnpm Setup for Perspective-Pyodide Target - Shell\nDESCRIPTION: This shell snippet initiates the setup process for the perspective-pyodide target using pnpm. It ensures that all necessary project dependencies are installed and any preparatory scripts are executed. This step must be completed before attempting to build or test; it depends on pnpm being installed globally.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/pyodide-tests/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm -w run setup\n```\n\n----------------------------------------\n\nTITLE: Registering on_update Callback with Row Delta Option – Perspective View – JavaScript\nDESCRIPTION: This snippet shows how to register an update callback that receives row-level delta information using the on_update method in JavaScript. The options parameter specifies { mode: \"row\" }, enabling the callback to access the delta property, which contains updated rows formatted as Arrow data. Prerequisites include a valid Perspective View instance and support for the row mode option. Inputs are update events and the output is logging the delta object. This usage is limited to cases where row-level change tracking is desired.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/on_update.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// `on_update` with row deltas\nview.on_update((updated) => console.log(updated.delta), { mode: \"row\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler and Build Options for RE2 in CMake\nDESCRIPTION: Defines build options including shared library and PCRE support flags, and a dedicated testing option for RE2. It configures ABI versioning with SONAME set to 9. For MSVC compilers, it enforces minimum Visual Studio 2015, sets export symbols for shared builds, disables certain warnings, and enables UTF-8 source encoding. These settings ensure compatibility and proper build behavior across platforms.\nSOURCE: https://github.com/finos/perspective/blob/master/cmake/re2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"build shared libraries\" OFF)  \noption(USEPCRE \"use PCRE in tests and benchmarks\" OFF)  \noption(RE2_BUILD_TESTING \"enable testing for RE2\" ON)  \n\nset(SONAME 9)  \n\nif(CMAKE_CXX_COMPILER_ID MATCHES \"MSVC\")  \n  if(MSVC_VERSION LESS 1900)  \n    message(FATAL_ERROR \"you need Visual Studio 2015 or later\")  \n  endif()  \n  if(BUILD_SHARED_LIBS)  \n    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)  \n  endif()  \n  add_compile_options(/wd4100 /wd4201 /wd4456 /wd4457 /wd4702 /wd4815)  \n  add_compile_options(/utf-8)  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Browsers in Virtual Environment - Shell\nDESCRIPTION: If prompted, this command installs the required browsers for Playwright to run browser-based tests. It uses the Python Playwright module to download all necessary browser binaries and should be executed within the Python virtual environment. This step is only necessary if browser support is missing on the system.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/pyodide-tests/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m playwright install\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build and Protobuf Compilation in CMake\nDESCRIPTION: This CMake code snippet sets the minimum required CMake version and project details, configures the C++ standard to C++17 with no extensions, and exports compile commands. It manages module paths and includes a custom function to accumulate build messages. The snippet finds required packages such as Protoc and an installation dependency, then appends protobuf dependencies to the build system. It lists protobuf definition files, invokes protobuf generation macros to produce C++ source and header files, and creates a static library 'protos' composed of the generated protobuf sources and headers. Finally, it sets include directories for both public and private consumption and links the protobuf library as a dependency.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/protos/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18.2)\nproject(perspective-protos)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(NOT DEFINED psp_build_message)\n    function(psp_build_message message)\n        set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${message}\")\n    endfunction()\nendif()\n\n# Include the FindProtobuf.cmake module\nlist(APPEND CMAKE_MODULE_PATH \"../../cmake/modules\")\n\nfind_package(Protoc REQUIRED)\nfind_package(InstallDependency REQUIRED)\n\nif(NOT DEFINED PSP_CMAKE_MODULE_PATH)\n    set(PSP_CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/../../cmake\")\n    message(STATUS \"PSP_CMAKE_MODULE_PATH not defined, using ${PSP_CMAKE_MODULE_PATH}\")\nendif()\n\npsp_build_dep(\"protobuf\" \"${PSP_CMAKE_MODULE_PATH}/protobuf.txt.in\")\n\nset(PROTO_FILES perspective.proto)\n\nprotobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${PROTO_FILES})\nadd_library(protos STATIC ${PROTO_SRCS} ${PROTO_HDRS})\ntarget_include_directories(protos PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/protobuf-src/src)\ntarget_include_directories(protos PUBLIC ${CMAKE_BINARY_DIR}/protos-build)\ntarget_link_libraries(protos protobuf::libprotobuf)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options and Conditional Compilation Flags in CMake\nDESCRIPTION: This snippet sets build options controlling whether to build WebAssembly, C++, and Python components along with flags for sanitizers, heap instrumentation, and strict warnings. It validates mutual exclusivity between Emscripten and C++ builds, sets debug or release modes based on environment variables, and establishes default build source directories. It also appends informative build messages based on the enabled options, providing transparent feedback on the build configuration.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# OPTIONS\noption(CMAKE_BUILD_TYPE \"Release/Debug build\" RELEASE)\noption(PSP_WASM_BUILD \"Build the WebAssembly Project\" ON)\noption(PSP_CPP_BUILD \"Build the C++ Project\" OFF)\noption(PSP_PYTHON_BUILD \"Build the Python Bindings\" OFF)\noption(PSP_CPP_BUILD_STRICT \"Build the C++ with strict warnings\" OFF)\noption(PSP_SANITIZE \"Build with sanitizers\" OFF)\noption(PSP_HEAP_INSTRUMENTS \"Build with heap inspection tooling\" OFF)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Emscripten\")\n    set(PSP_WASM_BUILD ON)\n    set(PSP_CPP_BUILD OFF)\nelse()\n    set(PSP_WASM_BUILD OFF)\n    set(PSP_CPP_BUILD ON)\nendif()\n\nif(PSP_WASM_BUILD AND PSP_CPP_BUILD)\n    message(FATAL_ERROR \"${Red}CPP and Emscripten builds must be done separately${ColorReset}\")\nendif()\n\nif(DEFINED ENV{PSP_DEBUG})\n    set(CMAKE_BUILD_TYPE DEBUG)\nelse()\n    if(NOT DEFINED CMAKE_BUILD_TYPE)\n        set(CMAKE_BUILD_TYPE RELEASE)\n    endif()\nendif()\n\nif(DEFINED ENV{PSP_HEAP_INSTRUMENTS})\n    set(PSP_HEAP_INSTRUMENTS ON)\nelse()\n    set(PSP_HEAP_INSTRUMENTS OFF)\nendif()\n\nif(DEFINED ENV{PSP_MANYLINUX})\n    set(MANYLINUX ON)\nelse()\n    set(MANYLINUX OFF)\nendif()\n\nif(DEFINED ENV{PSP_USE_CCACHE})\n    set(CMAKE_C_COMPILE_LAUNCHER ccache)\n    set(CMAKE_CXX_COMPILER_LAUNCHER ccache)\nendif()\n\nif(NOT DEFINED PSP_CPP_BUILD)\n    set(PSP_CPP_BUILD ON)\nendif()\n\nif(NOT DEFINED PSP_PYTHON_BUILD)\n    set(PSP_PYTHON_BUILD OFF)\nelseif(PSP_PYTHON_BUILD)\n    if(NOT DEFINED PSP_PYTHON_VERSION)\n        set(PSP_PYTHON_VERSION 3.10)\n    endif()\n    if(PSP_WASM_BUILD)\n        set(PSP_PYODIDE 1)\n    else()\n        set(PSP_PYODIDE 0)\n    endif()\nendif()\n\nif(NOT DEFINED PSP_CPP_BUILD_STRICT)\n    set(PSP_CPP_BUILD_STRICT OFF)\nendif()\n\nif(PSP_WASM_BUILD)\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Cyan}Building WASM binding${ColorReset}\")\nelse()\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Yellow}Skipping WASM binding${ColorReset}\")\nendif()\n\nif(NOT DEFINED PSP_CPP_SRC)\n    set(PSP_CPP_SRC \"${CMAKE_CURRENT_SOURCE_DIR}\")\nendif()\n\nif(PSP_CPP_BUILD)\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Cyan}Building C++ binding${ColorReset}\")\nelse()\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Yellow}Skipping C++ binding${ColorReset}\")\nendif()\n\nif(PSP_PYTHON_BUILD)\n    if(NOT DEFINED PSP_PYTHON_SRC)\n        set(PSP_PYTHON_SRC \"${CMAKE_CURRENT_SOURCE_DIR}/../../python/perspective/perspective\")\n    endif()\n\n    # set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Cyan}Building Python ${Red}${PSP_PYTHON_VERSION}${Cyan} binding${ColorReset}\")\nelse()\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Yellow}Skipping Python binding${ColorReset}\")\nendif()\n\nif(PSP_CPP_BUILD AND NOT PSP_CPP_BUILD_STRICT)\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Yellow}Building C++ without strict warnings${ColorReset}\")\nelse()\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Cyan}Building C++ with strict warnings${ColorReset}\")\nendif()\n\nstring(TOLOWER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_LOWER)\n\nif(CMAKE_BUILD_TYPE_LOWER STREQUAL debug)\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Red}Building DEBUG${ColorReset}\")\n    add_definitions(-DPSP_DEBUG)\nelse()\n    set(BUILD_MESSAGE \"${BUILD_MESSAGE}\\n${Cyan}Building RELEASE${ColorReset}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and Native Builds for Perspective (CMake)\nDESCRIPTION: This comprehensive block sets up the build system to handle both Python and native (C++) builds. It manages shared library suffixes, rpath settings, symbol visibility, and conditional compilation for platforms like macOS, Linux, and Windows. For Python targets, it distinguishes between Pyodide (WASM) and CPython. It links external static libraries as dependencies and applies strict compilation flags when requested. Requires detailed CMake and environment variables to be defined.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(PSP_CPP_BUILD OR PSP_PYTHON_BUILD)\n    if(NOT WIN32)\n        set(CMAKE_SHARED_LIBRARY_SUFFIX .so)\n\n        # Look for the binary using @loader_path (relative to binary location)\n        set(CMAKE_MACOSX_RPATH TRUE)\n        set(CMAKE_SKIP_BUILD_RPATH FALSE)\n        set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)\n        set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n        set(CMAKE_INSTALL_NAME_DIR \"@rpath/\")\n\n        # module_origin_path is the location of the binary\n        if(MACOS)\n            set(module_origin_path \"@loader_path/\")\n        else()\n            set(module_origin_path \"\\$ORIGIN\")\n        endif()\n    else()\n        set(CMAKE_SHARED_LIBRARY_PREFIX lib)\n    endif()\n\n    if(PSP_PYTHON_BUILD)\n        # #######################\n        # Python extra targets #\n        # #######################\n        if(PSP_WASM_BUILD)\n            # Pyodide\n            set(CMAKE_EXECUTABLE_SUFFIX \".wasm\")\n            set(CMAKE_EXE_LINKER_FLAGS \"${PSP_WASM_LINKER_FLAGS} --pre-js \\\"${PSP_CPP_SRC}/env.js\\\" \")\n            add_library(psp STATIC ${PYTHON_SOURCE_FILES})\n            target_include_directories(psp PRIVATE ${psp_INCLUDE_DIRS})\n            target_include_directories(psp SYSTEM PRIVATE ${all_deps_INCLUDE_DIRS})\n            target_compile_definitions(psp PRIVATE PSP_ENABLE_PYTHON=1 PSP_ENABLE_WASM=1)\n        else()\n            # Cpython\n            add_library(psp STATIC ${PYTHON_SOURCE_FILES})\n            target_include_directories(psp PRIVATE ${psp_INCLUDE_DIRS})\n            target_include_directories(psp SYSTEM PRIVATE ${all_deps_INCLUDE_DIRS})\n            target_compile_definitions(psp PRIVATE PSP_ENABLE_PYTHON=1 PSP_PARALLEL_FOR=1)\n        endif()\n\n        if(MACOS OR NOT MANYLINUX)\n            set_property(TARGET psp PROPERTY INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${module_origin_path})\n\n            target_compile_options(psp PRIVATE -fvisibility=hidden)\n        elseif(MANYLINUX)\n            # intentionally blank\n        else()\n            target_compile_options(psp PRIVATE -fvisibility=hidden)\n        endif()\n\n        # Linking against arrow_static also links against its bundled dependencies\n        target_link_libraries(psp PRIVATE arrow_static re2 protos)\n    else()\n        add_library(psp STATIC ${WASM_SOURCE_FILES})\n        target_include_directories(psp PRIVATE ${psp_INCLUDE_DIRS})\n        target_include_directories(psp SYSTEM PRIVATE ${all_deps_INCLUDE_DIRS})\n        target_compile_options(psp PRIVATE -fvisibility=hidden)\n        target_link_libraries(psp PRIVATE arrow_static re2 protos)\n    endif()\n\n    if(PSP_CPP_BUILD_STRICT AND NOT WIN32)\n        target_compile_options(psp PRIVATE -Wall -Werror)\n        target_compile_options(psp PRIVATE $<$<CONFIG:DEBUG>:-fPIC -O0>)\n        if(PSP_PYTHON_BUILD)\n            target_compile_options(psppy PRIVATE $<$<CONFIG:DEBUG>:-fPIC -O0>)\n        endif()\n    elseif(WIN32)\n        target_compile_definitions(psp PRIVATE PERSPECTIVE_EXPORTS=1)\n        target_compile_definitions(psp PRIVATE WIN32=1)\n        target_compile_definitions(psp PRIVATE _WIN32=1)\n    endif()\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Compilation Definitions and Threading for RE2 in CMake\nDESCRIPTION: Adds platform-dependent compile definitions and threading configurations. For Windows, various Unicode and security macros are defined to control compilation behavior. For Apple and Emscripten targets, OSX macro definitions and pthreads linkage settings are set. Unix platforms prefer pthread flags and use the Threads package, ensuring RE2 builds correctly across different operating systems.\nSOURCE: https://github.com/finos/perspective/blob/master/cmake/re2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)  \n  add_definitions(-DUNICODE -D_UNICODE -DSTRICT -DNOMINMAX)  \n  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)  \nelseif(APPLE OR (${CMAKE_SYSTEM_NAME} MATCHES \"Emscripten\"))  \n  add_definitions(-DTARGET_OS_OSX=1)  \n  set(CMAKE_THREAD_LIBS_INIT \"-lpthread\")  \n  set(CMAKE_HAVE_THREADS_LIBRARY 1)  \n  set(CMAKE_USE_WIN32_THREADS_INIT 0)  \n  set(CMAKE_USE_PTHREADS_INIT 1)  \n  set(THREADS_PREFER_PTHREAD_FLAG ON)  \n  find_package(Threads REQUIRED)  \nelseif(UNIX)  \n  set(THREADS_PREFER_PTHREAD_FLAG ON)  \n  find_package(Threads REQUIRED)  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining RE2 Source Files and Creating the Static Library Target in CMake\nDESCRIPTION: Enumerates all RE2 source files for compilation and creates a 're2' static or shared library target with the selected sources. It sets the public include directory to the current source directory and applies versioning properties including SONAME. An alias 're2::re2' is created for use in other CMake projects. If on Unix-like systems, RE2 target links against Threads::Threads to incorporate threading support.\nSOURCE: https://github.com/finos/perspective/blob/master/cmake/re2/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(RE2_SOURCES  \n    re2/bitstate.cc  \n    re2/compile.cc  \n    re2/dfa.cc  \n    re2/filtered_re2.cc  \n    re2/mimics_pcre.cc  \n    re2/nfa.cc  \n    re2/onepass.cc  \n    re2/parse.cc  \n    re2/perl_groups.cc  \n    re2/prefilter.cc  \n    re2/prefilter_tree.cc  \n    re2/prog.cc  \n    re2/re2.cc  \n    re2/regexp.cc  \n    re2/set.cc  \n    re2/simplify.cc  \n    re2/stringpiece.cc  \n    re2/tostring.cc  \n    re2/unicode_casefold.cc  \n    re2/unicode_groups.cc  \n    util/rune.cc  \n    util/strutil.cc  \n    )  \n\nadd_library(re2 ${RE2_SOURCES})  \ntarget_include_directories(re2 PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)  \nset_target_properties(re2 PROPERTIES SOVERSION ${SONAME} VERSION ${SONAME}.0.0)  \nadd_library(re2::re2 ALIAS re2)  \n\nif(UNIX)  \n  target_link_libraries(re2 PUBLIC Threads::Threads)  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Update and Delete Callbacks in Perspective Table using Python\nDESCRIPTION: This snippet shows how to remove existing update and delete event callbacks from a Perspective view object in Python. The callbacks can only be removed if they were registered using named functions, not lambdas. It requires storing the callback identifiers returned from 'on_update' and 'on_delete', which are then passed to 'view.remove_update' and 'view.remove_delete' for unregistration. This ensures that event resources are properly managed and prevents potential memory leaks.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/callbacks.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview.remove_update(on_update_id)\nview.remove_delete(on_delete_id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Column Names with Perspective JavaScript\nDESCRIPTION: This JavaScript example shows how to use the Perspective Table object's 'columns' method to obtain column names in their natural input order. The method returns a promise, so it must be awaited. Requires Perspective.js and an instantiated table object. The main input is an initialized Perspective Table instance, and the output is an array of column name strings.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/columns.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst columns = await table.columns();\n```\n\n----------------------------------------\n\nTITLE: Resetting All Properties to Default - JavaScript\nDESCRIPTION: Resets all properties of the `<perspective-viewer>` to their default values, effectively undoing any previous customizations. This is typically done after loading new data with `load()` to ensure a clean slate.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/save_restore.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Reset all properties to default e.g. after `load()`\nawait elem.reset();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hosted Table Names - Perspective - Python\nDESCRIPTION: Calls the `get_hosted_table_names` method on a client instance. This method synchronously fetches the names of all tables available to the client. The result is stored in the `tables` variable. The method returns a list of strings, where each string is the unique name of a table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/get_hosted_table_names.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntables = client.get_hosted_table_names();\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Worker with Perspective Client in JavaScript\nDESCRIPTION: This snippet shows how to create a SharedWorker by passing a SharedWorker instance to the Perspective Client's worker constructor asynchronously. The SharedWorker runs in a single instance shared across multiple scripts or windows, allowing shared communication and resource usage. The snippet highlights that SharedWorker behavior is more complex than dedicated workers and may require additional setup or debugging. The shared worker script URL must be supplied, and the resulting worker instance can be used by Perspective for shared processing workloads.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/custom_worker.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = await perspective.worker(new SharedWorker(url));\n```\n\n----------------------------------------\n\nTITLE: Initializing a Limited Perspective Table in JavaScript\nDESCRIPTION: Creates a Perspective Table instance in JavaScript that restricts the total row count to a specified limit. When updates cause the Table size to exceed this limit, the oldest rows are overwritten to maintain the row cap. Requires the Perspective library; the limit parameter is an integer specifying the maximum rows allowed. The input includes data and the limit option; output is the limited Table instance. It cannot be used together with the `index` option.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/options.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst limit_table = await perspective.table(data, { limit: 1000 });\n```\n\n----------------------------------------\n\nTITLE: Removing Rows from Perspective Table - Rust\nDESCRIPTION: This Rust code snippet shows how to remove rows from a Perspective table. The `remove` function accepts an `UpdateData::Csv` which specifies the index values of rows to be deleted in CSV format. It calls the `remove` method on a `table` object (assumed to be a Perspective table instance). The function is asynchronous, and `await` is required. Error handling via `?` is included.  The expected output is the removal of rows with indices 1, 2 and 3.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/remove.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ntable.remove(UpdateData::Csv(\"index\\n1\\n2\\n3\")).await?;\n```\n\n----------------------------------------\n\nTITLE: Register View Delete Callback - JavaScript\nDESCRIPTION: Registers a callback function to be executed when the Perspective `View` is deleted. This callback is useful for performing cleanup tasks or logging when a view is no longer valid. The `view` object is assumed to be an existing Perspective `View` instance.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/on_delete.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// attach an `on_delete` callback\nview.on_delete(() => console.log(\"Deleted!\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Index Column Name with Perspective Table in Python\nDESCRIPTION: Creates a Perspective table from CSV-formatted string data by specifying 'x' as the index column. Utilizes the get_index() method to fetch the index column name. Requires perspective-python installed and a client instance; input parameters are similar to the JavaScript API. Returns the index name as a string.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/get_index.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntable = client.table(\"x,y\\n1,2\\n3,4\", index=\"x\");\nindex = table.get_index() # \"x\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Limited Perspective Table in Python\nDESCRIPTION: Creates a Perspective Table in Python with a maximum allowed number of rows controlled by the limit parameter. If table updates exceed the row limit, the oldest rows are overwritten to maintain this maximum. Requires the Perspective Python library; limit is an integer value defining max rows. Inputs include table data and a limit option; output is a Table instance enforcing row limits. The limit option cannot be combined with the `index` option.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/options.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nlimit_table = perspective.Table(data, limit=1000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Server and Table in Python\nDESCRIPTION: This snippet demonstrates the server-side setup using Python, creating a `Server` instance, a `Client` instance, and hosting a `Table` using `PerspectiveTornadoHandler`. The `Table` is exposed at a specified websocket endpoint, which can be accessed by client JavaScript.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom perspective import Server\nfrom perspective.hadnlers.tornado import PerspectiveTornadoHandler\n\n# Create an instance of Server, and host a Table\nSERVER = Server()\nCLIENT = SERVER.new_local_client()\n\n# The Table is exposed at `localhost:8888/websocket` with the name `data_source`\nclient.table(data, name = \"data_source\")\n\napp = tornado.web.Application([\n    # create a websocket endpoint that the client JavaScript can access\n    (r\"/websocket\", PerspectiveTornadoHandler, {\"perspective_server\": SERVER})\n])\n\n# Start the Tornado server\napp.listen(8888)\nloop = tornado.ioloop.IOLoop.current()\nloop.start()\n```\n\n----------------------------------------\n\nTITLE: Saving Perspective Viewer State in JavaScript\nDESCRIPTION: Shows how to use the asynchronous `save()` method to serialize the current configuration state of a `<perspective-viewer>` element. The default format is a JSON-ready JavaScript object, but it also supports other formats like `\"string\"` (base64-encoded msgpack) for potentially smaller size.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst json_token = await elem.save();\nconst string_token = await elem.save(\"string\");\n```\n\n----------------------------------------\n\nTITLE: Validating expressions using Python client\nDESCRIPTION: This snippet illustrates how to validate expressions with a Python client by passing an expression object containing a computed expression. It demonstrates invoking the validate_expressions method with the required data structure. Dependencies include the client library that provides the validate_expressions method.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/validate_expressions.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nexprs = client.validate_expressions({\"computed\": '\"Quantity\" + 4'})\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Viewer Themes (JavaScript)\nDESCRIPTION: This snippet demonstrates importing various themes available for the perspective-viewer component using JavaScript. It imports themes such as 'pro.css', 'pro-dark.css', 'solarized.css', 'solarized-dark.css', 'monokai.css', and 'vaporwave.css' directly from their respective CSS files within the perspective-viewer distribution.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/theming.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Themes based on Thought Merchants's Prospective design\nimport \"@finos/perspective-viewer/dist/css/pro.css\";\nimport \"@finos/perspective-viewer/dist/css/pro-dark.css\";\n\n// Other themes\nimport \"@finos/perspective-viewer/dist/css/solarized.css\";\nimport \"@finos/perspective-viewer/dist/css/solarized-dark.css\";\nimport \"@finos/perspective-viewer/dist/css/monokai.css\";\nimport \"@finos/perspective-viewer/dist/css/vaporwave.css\";\n```\n\n----------------------------------------\n\nTITLE: Clearing and Replacing Data in Perspective Table - Python\nDESCRIPTION: This snippet demonstrates clearing and replacing the contents of a Perspective Table in Python. The table.clear() call removes all rows from the Table, and table.replace(df) repopulates it using a new DataFrame 'df' that matches the existing schema. Requires the perspective-python library and an initialized Table object. DataFrame input must be schema-compatible; these are in-place methods and do not return a result.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/clear_and_replace.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ntable.clear()\ntable.replace(df)\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregates in Perspective View (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to create a Perspective `View` from an existing `table` object, specifying custom aggregate functions. The `aggregates` option is a dictionary where keys are column names ('a', 'b') and values are the desired aggregate function names ('avg', 'distinct count'). This overrides the default aggregation behavior.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/aggregates.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = await table.view({\n    aggregates: {\n        a: \"avg\",\n        b: \"distinct count\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing an Empty Perspective Table from Schema in Rust\nDESCRIPTION: Creates an empty Perspective table in Rust by defining the schema using `TableData::Schema` with a vector of tuples, where each tuple contains the column name (String) and its `ColumnType`. It utilizes default `TableInitOptions` and requires an active `client` instance to call the asynchronous `table()` method, which returns a Result containing the table.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/constructing_schema.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet data = TableData::Schema(vec![(\" a\".to_string(), ColumnType::FLOAT)]);\nlet options = TableInitOptions::default();\nlet table = client.table(data.into(), options).await?;\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Restoring State with JSON String in JavaScript\nDESCRIPTION: Highlights a common error when using `restore()`: passing a JSON string (result of `JSON.stringify()`) directly. The `restore()` method expects either a JavaScript object or a base64-encoded string token, not a JSON-formatted string.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// This will error!\nawait elem.restore(JSON.stringify(json_token));\n```\n\n----------------------------------------\n\nTITLE: Creating Split-By View with Perspective Table Using Python\nDESCRIPTION: Generates a Perspective table view split by the unique values of columns \"a\" and \"c\" using Python. Depends on the Perspective Python API where `table.view` accepts a `split_by` keyword argument with a list of column names to pivot the data. Returns a view object with separate columns representing each unique element in the specified columns without aggregating the underlying dataset.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/split_by.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nview = table.view(split_by=[\"a\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Instantiating Perspective Viewer in HTML\nDESCRIPTION: Demonstrates the simplest way to add a `<perspective-viewer>` element to an HTML page using its custom tag.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer id=\"view1\"></perspective-viewer>\n```\n\n----------------------------------------\n\nTITLE: Linking Perspective Viewer Themes via CDN in HTML\nDESCRIPTION: Demonstrates how to link a theme CSS file directly in an HTML `<head>` section using a CDN URL. Highlights the importance of the `crossorigin=\"anonymous\"` attribute for cross-origin theme detection.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link\n    rel=\"stylesheet\"\n    crossorigin=\"anonymous\"\n    href=\"https://cdn.jsdelivr.net/npm/@finos/perspective-viewer/dist/css/pro.css\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Perspective Viewer Modules in JavaScript\nDESCRIPTION: Shows how to import the core `perspective-viewer` and plugin modules (datagrid, d3fc) in an ES6 environment using bundlers like esbuild. These imports register the custom elements for use in HTML without exporting specific objects.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@finos/perspective-viewer\";\nimport \"@finos/perspective-viewer-datagrid\";\nimport \"@finos/perspective-viewer-d3fc\";\n```\n\n----------------------------------------\n\nTITLE: Handling 'perspective-config-update' Event to Detect View Configuration Changes\nDESCRIPTION: This snippet adds an event listener for the 'perspective-config-update' event on a `<perspective-viewer>` element. When triggered, it retrieves the current configuration via the `save()` method and logs it. This allows detection of changes in the layout or view settings initiated through attribute or UI interactions.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/events.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nelem.addEventListener(\"perspective-config-update\", function (event) {\n    var config = elem.save();\n    console.log(\"The view() config has changed to \" + JSON.stringify(config));\n});\n```\n\n----------------------------------------\n\nTITLE: Constructing an Empty Perspective Table from Schema in JavaScript\nDESCRIPTION: Creates an empty Perspective table using a JavaScript object defining the schema (column names and data types like 'integer', 'string', 'boolean'). This asynchronous operation requires an initialized Perspective `worker` instance and uses its `table()` method, returning a Promise that resolves to the newly created table.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/table/constructing_schema.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar schema = {\n    x: \"integer\",\n    y: \"string\",\n    z: \"boolean\",\n};\n\nconst table2 = await worker.table(schema);\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Perspective Viewer Themes in JavaScript\nDESCRIPTION: Explains how to import specific CSS theme files directly into a JavaScript application to style `<perspective-viewer>` elements. Includes examples for various bundled themes like Pro, Solarized, Monokai, and Vaporwave.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Themes based on Thought Merchants's Prospective design\nimport \"@finos/perspective-viewer/dist/css/pro.css\";\nimport \"@finos/perspective-viewer/dist/css/pro-dark.css\";\n\n// Other themes\nimport \"@finos/perspective-viewer/dist/css/solarized.css\";\nimport \"@finos/perspective-viewer/dist/css/solarized-dark.css\";\nimport \"@finos/perspective-viewer/dist/css/monokai.css\";\nimport \"@finos/perspective-viewer/dist/css/vaporwave.css\";\n```\n\n----------------------------------------\n\nTITLE: Removing Update Callbacks from Perspective View in Python\nDESCRIPTION: This Python snippet shows how to unregister an update callback from a Perspective View using asynchronous methods. The callback is registered using 'on_update', which returns an ID used with 'remove_update' to remove the listener. The snippet requires an async Perspective View instance and outputs any result of the operation or fails silently if removal is successful.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/remove_update.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncallback = lambda x: print(x)\ncid = await view.on_update(callback)\nawait view.remove_update(cid)\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Delete Callback in JavaScript\nDESCRIPTION: This example demonstrates how to remove a previously registered `on_delete` callback function from a Perspective `View` object. The `remove_delete` method is called on the `view` instance, passing the specific callback function (`callback`) that needs to be unregistered. This ensures the provided function will no longer be executed when the `view` is deleted.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view/remove_delete.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// remove an `on_delete` callback\nconst callback = () => console.log(\"Deleted!\");\nview.remove_delete(callback);\n```\n\n----------------------------------------\n\nTITLE: Manually Resetting Themes in JavaScript\nDESCRIPTION: Explains how to use the `resetThemes()` method on a `<perspective-viewer>` instance. This can re-trigger auto-detection of loaded themes or allow explicitly setting the list of available theme names (which must still be imported via CSS).\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// re-auto-detect themes\nviewer.resetThemes();\n\n// Set available themes explicitly (they still must be imported as CSS!)\nviewer.resetThemes([\"Pro Light\", \"Pro Dark\"]);\n```\n\n----------------------------------------\n\nTITLE: Example: Conditional Logic in Expression Columns\nDESCRIPTION: Illustrates the use of `if` statements for conditional calculations within an expression. Modifies the final value based on the comparison of the order date with a set date, demonstrating decision-making capabilities.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/expressions.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n// Conditional\nvar priceAdjustmentDate := date(2016, 6, 18);\nvar finalPrice := \"Sales\" - \"Discount\";\nvar additionalModifier := 0;\n\nif(\"Order Date\" > priceAdjustmentDate) {\n  finalPrice -= 5;\n  additionalModifier -= 2;\n}\nelse\n  finalPrice += 5;\n\nfinalPrice + additionalModifier\n```\n\n----------------------------------------\n\nTITLE: Listing Pyodide Testing Dependencies - Python\nDESCRIPTION: This snippet specifies the exact versions of Python packages necessary for executing pyodide tests. These dependencies include pytest and related plugins for test execution and browser automation, ensuring a consistent testing environment when installed via package managers like pip.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/requirements-pyodide.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npytest==8.2.2\npytest-playwright==0.5.2\npytest-pyodide==0.58.4\npytest-timeout==2.3.1\n```\n\n----------------------------------------\n\nTITLE: Flattening Table View into Table in Rust\nDESCRIPTION: Demonstrates creating a Perspective Table from a view in Rust. The example initializes a table with CSV data, creates a view, and then uses that view to create a new table that receives updates from the original table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\nlet opts = TableInitOptions::default();\nlet data = TableData::Update(UpdateData::Csv(\"x,y\\n1,2\\n3,4\".into()));\nlet table = client.table(data, opts).await?;\nlet view = table.view(None).await?;\nlet table2 = client.table(TableData::View(view)).await?;\ntable.update(data).await?;\n```\n\n----------------------------------------\n\nTITLE: Fetching System Information from Perspective Server Using JavaScript\nDESCRIPTION: This snippet demonstrates asynchronously invoking the `system_info()` method on a Perspective client instance to obtain runtime metadata including memory and CPU usage. Specifically tailored for WebAssembly server environments, the returned data includes WebAssembly heap size information. The snippet requires a previously instantiated Perspective client with connectivity to the server. The output is a Promise resolving to system information data structured according to the `SystemInfo` schema.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/system_info.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst info = await client.system_info();\n```\n\n----------------------------------------\n\nTITLE: Flattening Table View into Table in JavaScript\nDESCRIPTION: Creates a new Perspective Table from a filtered view of an original table. Updates to the original table that affect the view will be forwarded to the new table. This is useful for client/server replicated designs.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/view.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker1 = perspective.worker();\nconst table = await worker.table(data);\nconst view = await table.view({ filter: [[\"State\", \"==\", \"Texas\"]] });\nconst table2 = await worker.table(view);\ntable.update([{ State: \"Texas\", City: \"Austin\" }]);\n```\n\n----------------------------------------\n\nTITLE: Cloning Server View Data to Client Table in Perspective (JavaScript)\nDESCRIPTION: Illustrates how to create a local, client-side WebAssembly `Table` by cloning data from a view of a server-side `Table`. This allows client-side processing of the data while maintaining synchronization via delta updates using Apache Arrow IPC.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/loading_virtual_data.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = await perspective.worker();\nconst server_view = await server_table.view();\nconst client_table = worker.table(server_view);\nawait elem.load(client_table);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hosted Table Names - Perspective - JavaScript\nDESCRIPTION: Calls the `get_hosted_table_names` method on a client instance. This method asynchronously fetches the names of all tables available to the client. The result is awaited and stored in the `tables` variable. The method returns an array of strings, where each string is the unique name of a table.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/get_hosted_table_names.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tables = await client.get_hosted_table_names();\n```\n\n----------------------------------------\n\nTITLE: Connecting Perspective Websocket Client (JavaScript)\nDESCRIPTION: This snippet creates a virtual Perspective Client instance designed to connect to an external server (running in Node.js, Python, or Rust) via the Websocket protocol. The server's URL is provided as the argument to the `websocket()` method, facilitating interaction with a remote engine.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/worker.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = perspective.websocket(\"http://localhost:8080/\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Perspective ESM Build - JavaScript\nDESCRIPTION: Specifies the `build.target` option in the Vite configuration file (`vite.config.js`) to `esnext`. This setting is required to enable the necessary features for running the build step correctly when using Perspective's ESM modules with WASM.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/importing.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nexport default defineConfig({\n    build: {\n        target: \"esnext\",\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Perspective Python Package via pip\nDESCRIPTION: This shell command uses 'pip', the Python package installer, to install the 'perspective-python' library. This library provides the Python backend necessary for using Perspective within Python environments, including JupyterLab. Requires Python and pip to be installed.\nSOURCE: https://github.com/finos/perspective/blob/master/packages/perspective-jupyterlab/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install perspective-python\n```\n\n----------------------------------------\n\nTITLE: Applying Ascending Sort in Perspective (Python)\nDESCRIPTION: Demonstrates creating a Perspective view from a table in Python. The `sort` parameter is passed a list containing `[\"a\", \"asc\"]`, instructing the view to sort the data based on column 'a' in ascending ('asc') order.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/sort.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(sort=[[\"a\", \"asc\"]])\n```\n\n----------------------------------------\n\nTITLE: Load CSV from UInt8Array with format override - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to load a CSV string from a `Uint8Array` into a Perspective `Table`. It overrides the default Arrow format by explicitly setting the `format` option to \"csv\".\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/table.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst enc = new TextEncoder();\nconst table = await client.table(enc.encode(\"x,y\\n1,2\\n3,4\"), {\n    format: \"csv\",\n});\n```\n\n----------------------------------------\n\nTITLE: Grouping Data in Perspective using Python\nDESCRIPTION: This Python snippet shows how to create a Perspective view with a group by clause. The `group_by` parameter is a list of column names for aggregation. This example groups the dataset by columns 'a' and 'c'.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/explanation/view/config/group_by.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nview = table.view(group_by=[\"a\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Installing perspective-python via pip\nDESCRIPTION: Installs the perspective-python package from PyPI using pip. This command provides access to the full Perspective API, JupyterLab widgets, and WebSocket handlers for server-side Python.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/python/installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install perspective-python\n```\n\n----------------------------------------\n\nTITLE: Example: Casting a Literal to Integer in Expression\nDESCRIPTION: Shows how to cast a numeric literal to an integer type using Perspective's extended ExprTK syntax. This is useful for enforcing specific data types within expressions.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/expressions.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ninteger(2)\n```\n\n----------------------------------------\n\nTITLE: Importing All Perspective Viewer Themes in JavaScript\nDESCRIPTION: Shows how to import a single CSS file (`themes.css`) that bundles all default themes for `<perspective-viewer>`, simplifying theme management.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-viewer/docs/viewer.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@finos/perspective-viewer/dist/css/themes.css\";\n```\n\n----------------------------------------\n\nTITLE: Replace Table data with CSV in Rust\nDESCRIPTION: Replaces all rows in a Perspective Table with data from a CSV string. This method uses `UpdateData::Csv` and `UpdateOptions` to manage the data and update process. The `await?` syntax indicates this is an asynchronous operation, handled within a Rust async context.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/table/replace.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet data = UpdateData::Csv(\"x,y\\n1,2\".into());\nlet opts = UpdateOptions::default();\ntable.replace(data, opts).await?;\n```\n\n----------------------------------------\n\nTITLE: Opening a Hosted Table in JavaScript\nDESCRIPTION: Demonstrates how to retrieve a virtual Table named \"table_one\" from a Perspective Client instance in JavaScript. The method returns a Promise that resolves to the table object.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/open_table.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tables = await client.open_table(\"table_one\");\n```\n\n----------------------------------------\n\nTITLE: Opening a Hosted Table in Rust\nDESCRIPTION: Demonstrates how to asynchronously open a table named \"table_one\" from a Perspective Client instance in Rust. The method is awaited and returns the table object.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/open_table.md#_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet tables = client.open_table(\"table_one\").await;\n```\n\n----------------------------------------\n\nTITLE: Removing Hosted Tables Update Callback - Rust\nDESCRIPTION: This snippet demonstrates the removal of a previously registered callback function. It uses a method, likely provided by a client library (`Client`), to unregister a callback that was initially set up to handle updates related to hosted tables. The exact mechanism for removing the callback is not fully clear from the text. It depends on the implementation details of the `Client` object and how callbacks are managed within it. Prerequisites include an instance of the `Client` object and a previously registered callback using `on_hosted_tables_update`.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/client/remove_hosted_tables_update.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining and Managing Expression Columns in Perspective UI\nDESCRIPTION: Describes how to create, edit, delete, and use expression columns within the `<perspective-viewer>` component. Includes UI controls and interaction patterns for managing expression columns, which are calculated virtual columns displayed above table columns and updated when dependencies change.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/expressions.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPerspective supports _expression columns_, which are virtual columns calculated\nas part of the [`crate::View`], optionally using values from its underlying\n[`crate::Table`]'s columns. Such expression columns are defined in Perspective's\nexpression language, an extended version of\n[ExprTK](https://github.com/ArashPartow/exprtk), which is itself quite similar\n(in design and features) to expressions in Excel.\n\n## UI\n\nExpression columns can be created in `<perspective-viewer>` by clicking the \"New\nColumn\" button at the bottom of the column list, or via the API by adding the\nexpression to the `expressions` config key when calling `viewer.restore()`.\n\nBy default, such expression columns are not \"used\", and will appear above the\n`Table`'s other deselected columns in the column list, with an additional set of\nbuttons for:\n\n- _Editing_ the column's expression. Doing so will update the definitions of\n  _all_ usage of the expression column.\n- _Deleting_ the column. Clicking `Reset` (or calling the `reset()` method)\n  will not delete expressions unless the `Shift` key is held (or `true`\n  parameter supplied, respectively). This button only appears if the\n  expression column i unused.\n\nTo use the column, just drag/select the column as you would a normal column,\n e.g. as a \"Filter\", \"Group By\", etc. Expression columns will recalculate\n whenever their dependent columns update.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of restore() with JSON.stringify - JavaScript\nDESCRIPTION: Illustrates an incorrect usage of the `restore()` method. Passing a JSON-stringified token will lead to errors as `restore()` will misinterpret it as base64-encoded msgpack, when a string token is expected.\nSOURCE: https://github.com/finos/perspective/blob/master/docs/md/how_to/javascript/save_restore.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This will error!\nawait elem.restore(JSON.stringify(json_token));\n```\n\n----------------------------------------\n\nTITLE: Server-Only Perspective Viewer HTML\nDESCRIPTION: This snippet sets up a `perspective-viewer` in HTML.  It doesn't include any specific initialization, as the setup is handled through JavaScript.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/docs/lib.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<perspective-viewer id=\"viewer\" editable></perspective-viewer>\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Tests and Updating Snapshots using PNPM\nDESCRIPTION: Executes the JavaScript test suite (Node.js and Playwright) using pnpm and includes the `--update-snapshots` flag. This is used to automatically update any snapshot files generated by the tests, typically used after intended UI or output changes.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm run test --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip - Shell\nDESCRIPTION: This shell snippet demonstrates installing the required Python dependencies for perspective-python and pyodide-only requirements using pip. The commands must be run inside an activated Python virtual environment. The requirements.txt and requirements-pyodide.txt files are essential and should be available under the 'rust/perspective-python' directory. It installs all needed packages before building or testing.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-python/pyodide-tests/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r rust/perspective-python/requirements.txt\npip install -r rust/perspective-python/requirements-pyodide.txt\n```\n\n----------------------------------------\n\nTITLE: Perspective's Extensions and Syntax of ExprTK Language\nDESCRIPTION: Explains the additional features, syntax, and extensions that Perspective adds to the core ExprTK language, including static typing, column naming, referencing table columns, string literals, and custom functions. Highlights how these enhancements enable more robust and descriptive expression writing.\nSOURCE: https://github.com/finos/perspective/blob/master/rust/perspective-client/docs/expressions.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nPerspective extends ExprTK with custom syntax and features:\n- Supports static types like `date`, `datetime`, `integer`, `boolean` in addition to `float`. Includes rudimentary type-checking and `cast` functions such as `string(x)`.\n- Allows naming expressions via a comment on the first line, which appears in the UI and API.\n- References columns from the [`crate::Table`] by double quotes.\n- Uses single quotes for string literals unlike standard ExprTK.\n- Adds functions like `substring()`, `bucket()`, `day_of_week()`, among others.\n\nThese extensions improve expression clarity, type safety, and functionality within Perspective.\n```\n\n----------------------------------------\n\nTITLE: Configuring Perspective Build Toolchain using PNPM\nDESCRIPTION: Runs the setup script using pnpm to configure the development environment. This involves a survey to generate a `.perspectiverc` file, specifying whether to set up for JavaScript or Python development. This command switches the toolchain used by subsequent commands like `pnpm run build` and `pnpm run test`.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run setup\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Optimization Levels Based on Build and Platform in CMake\nDESCRIPTION: This snippet establishes compilation flags, optimization levels, and debug symbol generation depending on the build type (debug or release), platform (Windows, non-Windows), and whether WebAssembly or Python bindings are being built. It conditionally enables sanitizers, wasm exceptions, link-time optimization, and disables specific MSVC warnings. It also sets up flags for WASM memory64 and SIMD extensions when enabled.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(PSP_WASM_BUILD)\n    ####################\n    # EMSCRIPTEN BUILD #\n    ####################\n    set(CMAKE_EXECUTABLE_SUFFIX \".js\")\n    list(APPEND CMAKE_PREFIX_PATH /usr/local)\n\n    set(EXTENDED_FLAGS \" \\\n        -Wall \\\n        -fcolor-diagnostics \\\n    \")\n\n    if(CMAKE_BUILD_TYPE_LOWER STREQUAL debug)\n        # Pyodide DEBUG block\n        set(OPT_FLAGS \" \\\n            -O0 \\\n            -g3 \\\n            -Wcast-align \\\n            -Wover-aligned \\\n            --emit-tsd=perspective-server.d.ts \\\n            \")\n        if (PSP_WASM_EXCEPTIONS)\n            set(OPT_FLAGS \"${OPT_FLAGS} -fwasm-exceptions \")\n        endif()\n        if(PSP_SANITIZE)\n            set(OPT_FLAGS \"${OPT_FLAGS} \\\n                -fsanitize=undefined \\\n                -fsanitize=address \\\n            \")\n        endif()\n    else()\n        set(OPT_FLAGS \" -O3 -g${DEBUG_LEVEL} \")\n        if (PSP_WASM_EXCEPTIONS)\n            set(OPT_FLAGS \"${OPT_FLAGS} -fwasm-exceptions -flto --emit-tsd=perspective-server.d.ts \")\n        endif()\n    endif()\nelseif(PSP_CPP_BUILD OR PSP_PYTHON_BUILD)\n    if(WIN32)\n        if(CMAKE_BUILD_TYPE_LOWER STREQUAL debug)\n            set(OPT_FLAGS \" \\\n                /DEBUG \\\n                /Z7 \\\n                /Zi\n                \")\n        else()\n            set(OPT_FLAGS \" \\\n                /NDEBUG \\\n                /O2 \\\n                \")\n        endif()\n    else()\n        if(CMAKE_BUILD_TYPE_LOWER STREQUAL debug)\n            if (PSP_PYODIDE)\n                set(OPT_FLAGS \" \\\n                    -O0 \\\n                    -g3 \\\n                    -gsource-map \\\n                    --profiling \\\n                    -Wcast-align \\\n                    -Wover-aligned \\\n                    \")\n            else ()\n                set(OPT_FLAGS \" \\\n                    -O0 \\\n                    -fexceptions \\\n                    -g3 \\\n                    \")\n                if (PSP_WASM_EXCEPTIONS)\n                    set(OPT_FLAGS \"${OPT_FLAGS} -fwasm-exceptions \")\n                endif()\n            endif ()\n        else()\n            set(OPT_FLAGS \" \\\n                -O3 \\\n                -fexceptions \\\n                -g1 \\\n                \")\n            if (PSP_WASM_EXCEPTIONS)\n                set(OPT_FLAGS \"${OPT_FLAGS} -fwasm-exceptions \")\n            endif()\n        endif()\n    endif()\n\n    set(ASYNC_MODE_FLAGS \"\")\n\n    if(WIN32)\n        foreach(warning 4244 4251 4267 4275 4290 4786 4305 4996)\n            SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /wd${warning}\")\n        endforeach(warning)\n    else()\n    endif()\n\n    if(PSP_PYTHON_BUILD)\n        set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n    endif()\nendif()\n\n\nif (PSP_WASM_EXCEPTIONS)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} \\\n        -O3 \\\n        -g${DEBUG_LEVEL} \\\n    \")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \\\n        -fwasm-exceptions \\\n        -O3 \\\n        -g${DEBUG_LEVEL} \\\n    \")\nelse()\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \\\n    -O3 \\\n    \")\nendif()\n\nif (PSP_WASM64)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} \\\n        -mbulk-memory \\\n        -msimd128 \\\n        -mrelaxed-simd \\\n        -s MEMORY64=1 \\\n    \")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} \\\n        -mbulk-memory \\\n        -msimd128 \\\n        -mrelaxed-simd \\\n        -s MEMORY64=1 \\\n    \")\nendif()\n\nset(RAPIDJSON_BUILD_TESTS OFF CACHE BOOL \"Disable rapidjson tests\")\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Emscripten SDK Version\nDESCRIPTION: Uses the `emsdk` command-line tool to install a specific version (e.g., 2.0.6) of the Emscripten SDK. This is useful when needing to match the exact Emscripten version specified in the project's `package.json` or managing multiple versions locally. Requires the Emscripten SDK management tools to be installed.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./emsdk install 2.0.6\n```\n\n----------------------------------------\n\nTITLE: Configuring Emscripten Pyodide Build Flags for WebAssembly in CMake\nDESCRIPTION: When building Pyodide (Python WebAssembly binding), this snippet adds relocatable and side-module linker flags to support shared WASM modules. It also sets WASM_BIGINT support and hides symbol visibility. If exceptions are not enabled for WASM, it enables standard C++ exceptions to ensure compatibility in Emscripten builds.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(PSP_PYODIDE)\n    set(RELOCATABLE_FLAGS \" -sRELOCATABLE=1 -sSIDE_MODULE=2 \")\n    string(APPEND CMAKE_EXE_LINKER_FLAGS \"${RELOCATABLE_FLAGS} -sWASM_BIGINT=1 \")\n    string(APPEND CMAKE_C_FLAGS \"${RELOCATABLE_FLAGS}\")\n    string(APPEND CMAKE_CXX_FLAGS \"${RELOCATABLE_FLAGS}\")\nendif()\n\nif(PSP_PYODIDE)\n    string(APPEND CMAKE_CXX_FLAGS \" -fvisibility=hidden\")\nendif()\n\nif (PSP_PYODIDE AND NOT PSP_WASM_EXCEPTIONS)\n    # Emscripten exceptions\n    string(APPEND CMAKE_CXX_FLAGS \" -fexceptions\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating and Viewing Perspective Benchmarks using PNPM\nDESCRIPTION: Runs the project's benchmark suite using the `pnpm run bench` command. This generates performance benchmarks specific to the local machine's hardware, outputs the results to a `benchmark.arrow` file, and hosts a live dashboard displaying the results at `http://localhost:8080`.\nSOURCE: https://github.com/finos/perspective/blob/master/DEVELOPMENT.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run bench\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Flags and Source Files for Perspective C++ Build with CMake\nDESCRIPTION: This snippet adjusts C and C++ compiler flags including release optimizations, extended flags, and option flags. For GNU compilers, it adds the C++14 standard flag. It defines a large list of source files spanning multiple platforms and implementations (Linux, OSX, Windows, WASM). Conditional inclusion of heap instrumentation files is handled via PSP_HEAP_INSTRUMENTS. The snippet also modifies C++ flags specifically for the Windows platform to set exception handling and compilation options. This section centralizes build options for consistent compilation across supported environments.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_FLAGS \" \\\n    ${CMAKE_C_FLAGS} \\\n    ${CMAKE_C_FLAGS_RELEASE} \\\n    ${EXTENDED_FLAGS} \\\n    ${OPT_FLAGS} \\\n    \")\n\nset(CMAKE_CXX_FLAGS \" \\\n    ${CMAKE_CXX_FLAGS} \\\n    ${CMAKE_CXX_FLAGS_RELEASE} \\\n    ${EXTENDED_FLAGS} \\\n    ${OPT_FLAGS} \\\n    \")\n\nif(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=c++1y\")\nendif()\n\nset(SOURCE_FILES\n    ${PSP_CPP_SRC}/src/cpp/aggregate.cpp\n    ${PSP_CPP_SRC}/src/cpp/aggspec.cpp\n    ${PSP_CPP_SRC}/src/cpp/arg_sort.cpp\n    ${PSP_CPP_SRC}/src/cpp/arrow_loader.cpp\n    ${PSP_CPP_SRC}/src/cpp/arrow_writer.cpp\n    ${PSP_CPP_SRC}/src/cpp/base.cpp\n    ${PSP_CPP_SRC}/src/cpp/base_impl_linux.cpp\n    ${PSP_CPP_SRC}/src/cpp/base_impl_osx.cpp\n    ${PSP_CPP_SRC}/src/cpp/base_impl_wasm.cpp\n    ${PSP_CPP_SRC}/src/cpp/base_impl_win.cpp\n    # ${PSP_CPP_SRC}/src/cpp/binding.cpp\n\n    # ${PSP_CPP_SRC}/src/cpp/build_filter.cpp\n    # ${PSP_CPP_SRC}/src/cpp/calc_agg_dtype.cpp\n    ${PSP_CPP_SRC}/src/cpp/column.cpp\n    ${PSP_CPP_SRC}/src/cpp/comparators.cpp\n    ${PSP_CPP_SRC}/src/cpp/compat.cpp\n    ${PSP_CPP_SRC}/src/cpp/compat_impl_linux.cpp\n    ${PSP_CPP_SRC}/src/cpp/compat_impl_osx.cpp\n    ${PSP_CPP_SRC}/src/cpp/compat_impl_wasm.cpp\n    ${PSP_CPP_SRC}/src/cpp/compat_impl_win.cpp\n    ${PSP_CPP_SRC}/src/cpp/computed_expression.cpp\n    ${PSP_CPP_SRC}/src/cpp/computed_function.cpp\n    ${PSP_CPP_SRC}/src/cpp/config.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_base.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_grouped_pkey.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_handle.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_one.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_two.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_zero.cpp\n    ${PSP_CPP_SRC}/src/cpp/context_unit.cpp\n    ${PSP_CPP_SRC}/src/cpp/data.cpp\n    ${PSP_CPP_SRC}/src/cpp/data_slice.cpp\n    ${PSP_CPP_SRC}/src/cpp/data_table.cpp\n    ${PSP_CPP_SRC}/src/cpp/date.cpp\n    ${PSP_CPP_SRC}/src/cpp/dense_nodes.cpp\n    ${PSP_CPP_SRC}/src/cpp/dense_tree_context.cpp\n    ${PSP_CPP_SRC}/src/cpp/dense_tree.cpp\n    ${PSP_CPP_SRC}/src/cpp/dependency.cpp\n    ${PSP_CPP_SRC}/src/cpp/expression_tables.cpp\n    ${PSP_CPP_SRC}/src/cpp/expression_vocab.cpp\n    ${PSP_CPP_SRC}/src/cpp/extract_aggregate.cpp\n    ${PSP_CPP_SRC}/src/cpp/filter.cpp\n    ${PSP_CPP_SRC}/src/cpp/flat_traversal.cpp\n    ${PSP_CPP_SRC}/src/cpp/get_data_extents.cpp\n    ${PSP_CPP_SRC}/src/cpp/gnode.cpp\n    ${PSP_CPP_SRC}/src/cpp/gnode_state.cpp\n    ${PSP_CPP_SRC}/src/cpp/mask.cpp\n    ${PSP_CPP_SRC}/src/cpp/multi_sort.cpp\n    ${PSP_CPP_SRC}/src/cpp/none.cpp\n    ${PSP_CPP_SRC}/src/cpp/path.cpp\n    ${PSP_CPP_SRC}/src/cpp/pivot.cpp\n    ${PSP_CPP_SRC}/src/cpp/pool.cpp\n    ${PSP_CPP_SRC}/src/cpp/port.cpp\n    ${PSP_CPP_SRC}/src/cpp/process_state.cpp\n    ${PSP_CPP_SRC}/src/cpp/pyutils.cpp\n    ${PSP_CPP_SRC}/src/cpp/raii.cpp\n    ${PSP_CPP_SRC}/src/cpp/raii_impl_linux.cpp\n    ${PSP_CPP_SRC}/src/cpp/raii_impl_osx.cpp\n    ${PSP_CPP_SRC}/src/cpp/raii_impl_win.cpp\n    ${PSP_CPP_SRC}/src/cpp/range.cpp\n    ${PSP_CPP_SRC}/src/cpp/regex.cpp\n    ${PSP_CPP_SRC}/src/cpp/rlookup.cpp\n    ${PSP_CPP_SRC}/src/cpp/scalar.cpp\n    ${PSP_CPP_SRC}/src/cpp/schema_column.cpp\n    ${PSP_CPP_SRC}/src/cpp/schema.cpp\n    ${PSP_CPP_SRC}/src/cpp/slice.cpp\n    ${PSP_CPP_SRC}/src/cpp/sort_specification.cpp\n    ${PSP_CPP_SRC}/src/cpp/sparse_tree.cpp\n    ${PSP_CPP_SRC}/src/cpp/sparse_tree_node.cpp\n    ${PSP_CPP_SRC}/src/cpp/step_delta.cpp\n    ${PSP_CPP_SRC}/src/cpp/storage.cpp\n    ${PSP_CPP_SRC}/src/cpp/storage_impl_linux.cpp\n    ${PSP_CPP_SRC}/src/cpp/storage_impl_osx.cpp\n    ${PSP_CPP_SRC}/src/cpp/storage_impl_win.cpp\n    ${PSP_CPP_SRC}/src/cpp/sym_table.cpp\n    ${PSP_CPP_SRC}/src/cpp/table.cpp\n    ${PSP_CPP_SRC}/src/cpp/time.cpp\n    ${PSP_CPP_SRC}/src/cpp/traversal.cpp\n    ${PSP_CPP_SRC}/src/cpp/traversal_nodes.cpp\n    ${PSP_CPP_SRC}/src/cpp/tree_context_common.cpp\n    ${PSP_CPP_SRC}/src/cpp/utils.cpp\n    ${PSP_CPP_SRC}/src/cpp/update_task.cpp\n    ${PSP_CPP_SRC}/src/cpp/view.cpp\n    ${PSP_CPP_SRC}/src/cpp/view_config.cpp\n    ${PSP_CPP_SRC}/src/cpp/vocab.cpp\n    ${PSP_CPP_SRC}/src/cpp/arrow_csv.cpp\n    ${PSP_CPP_SRC}/src/cpp/server.cpp\n    ${PSP_CPP_SRC}/src/cpp/binding_api.cpp\n)\n\nif(PSP_HEAP_INSTRUMENTS)\n    list(APPEND SOURCE_FILES ${PSP_CPP_SRC}/src/cpp/heap_instruments.cpp)\n    add_compile_definitions(HEAP_INSTRUMENTS=1)\nendif()\n\nset(PYTHON_SOURCE_FILES ${SOURCE_FILES})\nset(WASM_SOURCE_FILES ${SOURCE_FILES})\n\nmessage(\"${BUILD_MESSAGE}\\n\")\n\nif(WIN32)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc /MP /MT /c /bigobj\")\nelse()\n    # set(CMAKE_CXX_FLAGS \" ${CMAKE_CXX_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding WASM and Native Libraries and Executables (CMake)\nDESCRIPTION: This block adds Perspective's libraries and executables depending on build context—either for WASM or native environments. It includes target setup such as include directories, compile definitions, and linking static libraries (arrow_static, re2, protos). The configuration also assigns output directories and build output naming. Inputs include defined WASM, Python, and general source file variables.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(PSP_WASM_BUILD AND NOT PSP_PYTHON_BUILD)\n    set(CMAKE_EXE_LINKER_FLAGS \"${PSP_WASM_LINKER_FLAGS} --pre-js \\\"${PSP_CPP_SRC}/env.js\\\" \")\n\n    add_library(psp ${WASM_SOURCE_FILES})\n    target_include_directories(psp PRIVATE ${psp_INCLUDE_DIRS})\n    target_include_directories(psp SYSTEM PRIVATE ${all_deps_INCLUDE_DIRS})\n    target_compile_definitions(psp PRIVATE PSP_ENABLE_WASM=1)\n    set_target_properties(psp PROPERTIES COMPILE_FLAGS \"\")\n    target_link_libraries(psp PRIVATE arrow_static re2 protos)\n\n    add_executable(perspective_esm src/cpp/binding_api.cpp)\n    message(STATUS \"all_deps_INCLUDE_DIRS ${all_deps_INCLUDE_DIRS}\")\n    target_include_directories(perspective_esm PRIVATE ${psp_INCLUDE_DIRS})\n    target_include_directories(perspective_esm SYSTEM PRIVATE ${all_deps_INCLUDE_DIRS})\n    target_link_libraries(perspective_esm psp protos)\n    target_compile_definitions(perspective_esm PRIVATE PSP_ENABLE_WASM=1)\n    target_link_options(perspective_esm PUBLIC -sENVIRONMENT=\"web\"  ${PSP_SANITIZE_FLAGS})\n    set_target_properties(perspective_esm PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"./web/\")\n    set_target_properties(perspective_esm PROPERTIES OUTPUT_NAME \"perspective-server\")\n\n```\n\n----------------------------------------\n\nTITLE: Including Clangd LSP Setup Conditionally (CMake)\nDESCRIPTION: This snippet includes the SetupClangd module for LSP support if PSP_DISABLE_CLANGD is unset in the environment. It is meant only for developer environments and avoids unnecessary .clangd file generation in Rust-based CI. Depends on correct `${CMAKE_SOURCE_DIR}/SetupClangd.cmake` location.\nSOURCE: https://github.com/finos/perspective/blob/master/cpp/perspective/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ENV{PSP_DISABLE_CLANGD})\n    include(SetupClangd)\nendif()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring RE2 Testing and Benchmarking Targets in CMake\nDESCRIPTION: When RE2 testing is enabled, defines testing source files and creates a static 'testing' library linked against the RE2 library. It enumerates multiple test executable targets and benchmark targets, each linking against 'testing' and any extra libraries. Tests are registered with CTest using add_test, facilitating automated testing. This enables comprehensive unit and benchmark testing integrated within the build system.\nSOURCE: https://github.com/finos/perspective/blob/master/cmake/re2/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(RE2_BUILD_TESTING)  \n  set(TESTING_SOURCES  \n      re2/testing/backtrack.cc  \n      re2/testing/dump.cc  \n      re2/testing/exhaustive_tester.cc  \n      re2/testing/null_walker.cc  \n      re2/testing/regexp_generator.cc  \n      re2/testing/string_generator.cc  \n      re2/testing/tester.cc  \n      util/pcre.cc  \n      )  \n\n  add_library(testing STATIC ${TESTING_SOURCES})  \n  target_link_libraries(testing PUBLIC re2)  \n\n  set(TEST_TARGETS  \n      charclass_test  \n      compile_test  \n      filtered_re2_test  \n      mimics_pcre_test  \n      parse_test  \n      possible_match_test  \n      re2_test  \n      re2_arg_test  \n      regexp_test  \n      required_prefix_test  \n      search_test  \n      set_test  \n      simplify_test  \n      string_generator_test  \n\n      dfa_test  \n      exhaustive1_test  \n      exhaustive2_test  \n      exhaustive3_test  \n      exhaustive_test  \n      random_test  \n      )  \n\n  set(BENCHMARK_TARGETS  \n      regexp_benchmark  \n      )  \n\n  foreach(target ${TEST_TARGETS})  \n    add_executable(${target} re2/testing/${target}.cc util/test.cc)  \n    target_link_libraries(${target} testing ${EXTRA_TARGET_LINK_LIBRARIES})  \n    add_test(NAME ${target} COMMAND ${target})  \n  endforeach()  \n\n  foreach(target ${BENCHMARK_TARGETS})  \n    add_executable(${target} re2/testing/${target}.cc util/benchmark.cc)  \n    target_link_libraries(${target} testing ${EXTRA_TARGET_LINK_LIBRARIES})  \n  endforeach()  \nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing RE2 Headers and Library Targets Using CMake Install Commands\nDESCRIPTION: Specifies installation of RE2 public headers to the standard include directory and the RE2 static/shared library targets to the appropriate library and binary directories. It exports the RE2 configuration for CMake consumption and sets an installation namespace 're2::' for imported targets. This facilitates ease of use by other projects and proper packaging of the RE2 library.\nSOURCE: https://github.com/finos/perspective/blob/master/cmake/re2/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(RE2_HEADERS  \n    re2/filtered_re2.h  \n    re2/re2.h  \n    re2/set.h  \n    re2/stringpiece.h  \n    )  \n\ninstall(FILES ${RE2_HEADERS}  \n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/re2)  \ninstall(TARGETS re2 EXPORT re2Config  \n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}  \n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  \n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}  \n        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})  \ninstall(EXPORT re2Config  \n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/re2 NAMESPACE re2::)\n```"
  }
]