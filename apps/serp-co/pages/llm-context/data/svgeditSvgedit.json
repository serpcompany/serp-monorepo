[
  {
    "owner": "svg-edit",
    "repo": "svgedit",
    "content": "TITLE: Embedding and Initializing SVGEdit Editor with Custom Configuration - HTML & JavaScript\nDESCRIPTION: This snippet demonstrates how to embed SVGEdit into a web page, apply required CSS, and initialize the editor within a specific container. It includes sample HTML markup for the container `div` and a JavaScript module import for programmatically creating and configuring the SVGEdit Editor instance. Required dependencies include the SVGEdit editor JavaScript file and CSS, and the `Editor` class is instantiated with a target DOM element. The configuration supports custom options and extension loading. Inputs are the container DOM element and config parameters; output is a running, customized SVGEdit instance. The container element must have explicit width and height.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\\n   <!-- You need to include the CSS for SVGEdit somewhere in your application -->\\n  <link href=\\\"./svgedit.css\\\" rel=\\\"stylesheet\\\" media=\\\"all\\\"></link>\\n</head>\\n\\n<body>\\n  <!-- svgedit container can be positioned anywhere in the DOM\\n       but it must have a width and a height -->\\n  <div id=\\\"container\\\" style=\\\"width:100%;height:100vh\\\"></div>\\n</body>\\n<script type=\\\"module\\\">\\n  /* You need to call the Editor and load it in the <div> */\\n  import Editor from './Editor.js'\\n  /* for available options see the file `docs/tutorials/ConfigOptions.md` */\\n  const svgEditor = new Editor(document.getElementById('container'))\\n  /* set the configuration */\\n  svgEditor.setConfig({\\n          allowInitialUserOverride: true,\\n          extensions: [],\\n          noDefaultExtensions: false,\\n          userExtensions: []\\n  })\\n  /* initialize the Editor */\\n  svgEditor.init()\\n</script>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring SVGEdit to Load a React-based Extension - JavaScript\nDESCRIPTION: This snippet shows how to extend SVGEdit functionality by setting the editor configuration to load a user-defined extension, specifically a React-based extension. It uses the `setConfig` method to specify paths for `userExtensions`, with other options like `allowInitialUserOverride`, `extensions`, and `noDefaultExtensions`. This requires building the extension bundle and ensuring its path is correct relative to the hosting HTML file. Inputs include the extension path in the configuration; output is a running SVGEdit instance with the React extension loaded.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsvgEditor.setConfig({\\n          allowInitialUserOverride: true,\\n          extensions: [],\\n          noDefaultExtensions: false,\\n          userExtensions: ['./react-extensions/react-test/dist/react-test.js']\\n        })\n```\n\n----------------------------------------\n\nTITLE: Preloading SVG Files Using Various Methods - JavaScript\nDESCRIPTION: This snippet provides three ways to preload SVG content into SVG-Edit: loading from a serialized SVG string, from a data URI, and from a local URL. Each method uses a specific svgEditor API (loadFromString, loadFromDataURI, or loadFromURL) and should be executed according to the application's requirements. Dependencies include svgEditor being initialized, and the input (SVG data or URI) provided as a string.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ConfigOptions.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Serialized string:\nsvgEditor.loadFromString('<svg xmlns=\"...\">...</svg>')\n\n// Data URI:\nsvgEditor.loadFromDataURI('data:image/svg+xml;base64,...')\n\n// Local URL:\nsvgEditor.loadFromURL('images/logo.svg')\n```\n\n----------------------------------------\n\nTITLE: Preloading SVG Files via URL Parameters - JavaScript\nDESCRIPTION: This snippet demonstrates how to preload SVG files in SVG-Edit using URL parameters. By appending the appropriate encoded source or url parameter to the SVG-Edit page location, users can load SVG content from a data URI, data URI (base64), or local file path. The inputs are the SVG text or its base64 encoding, and the resulting output is the preloaded SVG in the editor upon navigation to the constructed URL.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ConfigOptions.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Data URI\nlocation.href += '?source=' + encodeURIComponent('data:image/svg+xml;utf8,' + svgText)\n\n// Data URI (base 64):\nlocation.href += '?source=' + encodeURIComponent('data:image/svg+xml;base64,' + svgTextAsBase64) // data%3Aimage%2Fsvg%2Bxml%3Bbase64%2C ...\n\n// Local URL:\nlocation.href += '?url=' + encodeURIComponent('images/logo.svg') // images%2Flogo.svg\n```\n\n----------------------------------------\n\nTITLE: Returning Configuration and Callbacks from an SVG-Edit Extension's `init` Method in JavaScript\nDESCRIPTION: This example demonstrates the typical object returned by an extension's `init` function, exemplified by the 'helloworld' extension. It shows how to specify the path to SVG icon files (`svgicons`), define UI buttons (`buttons`), and provide callback functions (`mouseDown`, `mouseUp`) that respond to specific canvas events. This structure allows the extension to integrate with the SVG-Edit UI and interact with user actions.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ExtensionDocs.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  name: 'helloworld',\n  init () {\n    return {\n      svgicons: 'extensions/helloworld-icon.xml',\n      buttons: [ { /* ... */ } ],\n      mouseDown () {\n        // ...\n      },\n      mouseUp (_opts) {\n        // ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SVG-Edit Stylesheets Programmatically - JavaScript\nDESCRIPTION: This snippet shows how to configure SVG-Edit to load additional CSS stylesheets dynamically via the stylesheets setting in svgEditor.setConfig(). By including '@default' and user-specified stylesheets in the array, default and custom CSS files will be applied sequentially. The dependency is that SVG-Edit v3.0 or higher is used, and the input parameter is an array of stylesheet names.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ConfigOptions.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsvgEditor.setConfig({ stylesheets: [ '@default', 'myStylesheet.css' ] })\n```\n\n----------------------------------------\n\nTITLE: Building Core Source Files using npm\nDESCRIPTION: Runs the main Rollup routine to compile and bundle the ESM-based svgedit source files into distributable formats.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nnpm run rollup\n```\n\n----------------------------------------\n\nTITLE: Setting SVG-Edit Configuration Programmatically - JavaScript\nDESCRIPTION: This snippet shows how to set initial configuration properties for SVG-Edit using svgEditor.setConfig(). It configures the default canvas dimensions, expansion size, and initial fill color by passing an object literal. The method must be called before the DOM is loaded to take effect, and can reside in a separate config file such as svgedit-config-iife.js. Inputs are config options as key-value pairs, and there are no direct outputs, only configuration effects.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ConfigOptions.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsvgEditor.setConfig({\n  dimensions: [ 320, 240 ],\n  canvas_expansion: 5,\n  initFill: {\n    color: '0000FF'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading Extension Locale Data Using `importSetGlobalDefault` in JavaScript\nDESCRIPTION: This snippet illustrates an alternative method for loading extension-specific internationalization strings, particularly useful if needing more control or for compatibility. It uses `importSetGlobalDefault` from a polyfill to asynchronously load a locale file based on the current language and extension name. A specific global variable format (`svgEditorExtensionLocale_<extName>_<lang>`) is suggested for ensuring compatibility in non-modular versions of SVG-Edit.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ExtensionDocs.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { importSetGlobalDefault } from '../external/dynamic-import-polyfill/importModule.js';\n\n// ...\n\n(async () => {\n\n  const url = `${svgEditor.curConfig.extPath}ext-locale/<extNameWithoutExtPrefix>/<lang>.js`\n  const localeStrings = await importSetGlobalDefault(url, {\n    global: 'svgEditorExtensionLocale_imagelib_' + lang\n  })\n\n  // Use `localeStrings`\n  console.info(localeStrings)\n\n})()\n```\n\n----------------------------------------\n\nTITLE: Handling Editor Ready Event in Parent Window (JavaScript/jQuery)\nDESCRIPTION: Illustrates using jQuery to bind to the 'svgEditorReady' event on the parent document. When the editor within an iframe signals readiness, this code retrieves the editor's content window and uses the `svgCanvas.setSvgString` method to load specific SVG content into the editor. Requires jQuery library.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/Events.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$(document).bind('svgEditorReady', function () {\n  const svg = `\n    <!DOCTYPE svg PUBLIC \\\"-//W3C//DTD SVG 1.1//EN\\\"\n      \\\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\\\">\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"100\\\" height=\\\"50\\\">\n      <ellipse cx=\\\"50\\\" cy=\\\"25\\\" rx=\\\"50\\\" ry=\\\"25\\\" style=\\\"fill:blue;\\\"/>\n    </svg>`\n  $('iframe.svgedit')[0].contentWindow.svgCanvas.setSvgString(svg)\n})\n```\n\n----------------------------------------\n\nTITLE: Running Project Preparation Steps using npm\nDESCRIPTION: Executes a series of preparation steps required before testing or creating a production build. It includes linting, building HTML, building config files, and running Rollup for the core source. This is run automatically during 'npm test'.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnpm run prep\n```\n\n----------------------------------------\n\nTITLE: Binding to Canvas Events in SVG-Edit (JavaScript)\nDESCRIPTION: Shows the syntax for listening to events originating from the SVG-Edit canvas object using `canvas.bind(eventName, callback)`. The callback function typically receives the window object and event-specific arguments. This allows reacting to canvas changes such as element selection, modification, or zoom events.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/Events.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ncanvas.bind(eventName, callback)\n```\n\n----------------------------------------\n\nTITLE: Initializing Submodules (Non-Recursive) using npm\nDESCRIPTION: Initializes Git submodules non-recursively. This prevents the submodules from initializing their own nested submodules, which is needed for the project's release structure.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run submodules-init\n```\n\n----------------------------------------\n\nTITLE: Updating Submodules (Non-Recursive) using npm\nDESCRIPTION: Fetches and merges changes from the remote repositories of the Git submodules into the local 'master' branch, operating non-recursively. Useful for updating added version branches.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run submodules-update\n```\n\n----------------------------------------\n\nTITLE: Linting Code Files using npm\nDESCRIPTION: Runs ESLint to check JavaScript code files for linting errors and style issues. This script is automatically executed as part of the test process.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Linting Errors using npm\nDESCRIPTION: Runs ESLint with the '--fix' flag to automatically fix detected linting errors and style issues in JavaScript code files where possible.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm run eslint-fix\n```\n\n----------------------------------------\n\nTITLE: Setting Stylesheet Configuration in SVG-Edit Editor (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to configure custom and default stylesheets for the SVG-Edit editor using the setConfig API. Developers can specify which stylesheets to load, allowing for full customization by modifying the stylesheets array. The '@default' entry loads all built-in stylesheets, while the second entry loads the user-defined 'svgedit-custom.css'. The input parameter is an object with a 'stylesheets' array, and the function expects that the provided CSS files exist and are accessible. This configuration is essential for customizing the appearance of SVG-Edit, with changes taking effect upon initialization.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/versions/3.0.0.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsvgEditor.setConfig({\n  stylesheets: [ '@default', '../svgedit-custom.css' ]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Main License Badge using npm\nDESCRIPTION: Builds the primary license badge, which includes information about the project's license(s) and those of its runtime 'dependencies' and bundled 'devDependencies'.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm run license-badge\n```\n\n----------------------------------------\n\nTITLE: Generating Dev Dependencies License Badge using npm\nDESCRIPTION: Builds a separate license badge specifically for the project's 'devDependencies' that are not bundled. Useful for checking license compatibility during development.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm run license-badge-dev\n```\n\n----------------------------------------\n\nTITLE: Copying Dependency Files using npm\nDESCRIPTION: Copies necessary files from 'devDependencies' into the SVG-Edit repository. This allows the project to run on hosting services like GitHub Pages or npm without needing the full 'node_modules' directory.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run copy\n```\n\n----------------------------------------\n\nTITLE: Updating License Badges using npm\nDESCRIPTION: Updates the project's aggregate license information by running both 'license-badge' and 'license-badge-dev' scripts. This should be run after updating dependencies.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm run license-badges\n```\n\n----------------------------------------\n\nTITLE: Building Documentation using npm\nDESCRIPTION: Builds the project documentation. This script is automatically run before publishing but can be used manually for testing purposes.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build-docs\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Save Handler in SVG-Edit (JavaScript)\nDESCRIPTION: Demonstrates how to override the default save behavior in SVG-Edit by providing a custom function to the `svgEditor.setCustomHandlers` method. The provided function receives the window (`_win`) and data (`_data`) arguments, allowing custom save logic implementation. Similar handlers can be set for 'open' and 'exportImage'.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/Events.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nsvgEditor.setCustomHandlers({\n  save (_win, _data) {\n    // Save svg\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building and Opening Documentation (Server Running) using npm\nDESCRIPTION: Executes the documentation build process ('npm run build-docs') and opens the newly built docs in a web browser. Assumes a development server is already running.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build-and-open-docs-no-start\n```\n\n----------------------------------------\n\nTITLE: Building and Opening Documentation using npm\nDESCRIPTION: Executes the documentation build process ('npm run build-docs'), starts a development server, and then opens the newly built docs in a web browser.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build-and-open-docs\n```\n\n----------------------------------------\n\nTITLE: Opening Built Documentation (Server Running) using npm\nDESCRIPTION: Opens the previously built documentation in a web browser. This variant assumes a development server process (like 'npm start') is already running in another terminal.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-docs-no-start\n```\n\n----------------------------------------\n\nTITLE: Building HTML for Compiled Version using npm\nDESCRIPTION: Copies HTML pages intended for ESM usage and modifies them to reference the compiled/rolled-up JavaScript bundles instead of the original ESM scripts.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build-html\n```\n\n----------------------------------------\n\nTITLE: Defining the Basic Structure of an SVG-Edit Extension in JavaScript\nDESCRIPTION: This snippet shows the basic ES module export structure for an SVG-Edit extension. It includes a `name` property (which can be omitted to derive from the filename) and an `init` function. The `init` function receives an object containing methods and variables from `svgCanvas` and should return an object (`ExtensionInitResponse`) with extension-specific data and callbacks. The `init` function's `this` context is bound to the SVGEditor instance.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/tutorials/ExtensionDocs.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nexport default {\n  name: 'extensionname',\n  init (_methods) {\n    return extensionData\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Compiled Editor using npm\nDESCRIPTION: Starts a development server and opens the pre-compiled (rolled-up) version of the SVG editor. This version is suitable for older browsers or production. Requires running 'npm run prep' beforehand.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-compiled\n```\n\n----------------------------------------\n\nTITLE: Opening Compiled Editor (Server Running) using npm\nDESCRIPTION: Opens the pre-compiled (rolled-up) version of the SVG editor. Assumes a development server is already running. Requires running 'npm run prep' beforehand.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-compiled-no-start\n```\n\n----------------------------------------\n\nTITLE: Opening Embedded ESM Editor (Server Running) using npm\nDESCRIPTION: Opens the embedded version of the ESM editor. Assumes the main development server is already running, but still starts the secondary server ('start-allow-origin') for cross-origin testing.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-embedded-no-start\n```\n\n----------------------------------------\n\nTITLE: Opening ESM Editor (All Extensions, Server Running) using npm\nDESCRIPTION: Opens the ESM SVG editor with all extensions loaded. Assumes a development server is already running.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-all-ext-no-start\n```\n\n----------------------------------------\n\nTITLE: Opening ESM Editor (Default Extensions) using npm\nDESCRIPTION: Starts a development server and opens the SVG editor running directly from its ES Modules source files with only the default extensions loaded.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Coverage Report (Detailed) using npm\nDESCRIPTION: Displays the test coverage report generated by testing or 'npm run instrument' directly in the command line, including some line number information.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nnpm run report\n```\n\n----------------------------------------\n\nTITLE: Displaying Test Coverage Report (Summary) using npm\nDESCRIPTION: Displays a summary of the test coverage report in the command line, without line number details.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nnpm run report-summary\n```\n\n----------------------------------------\n\nTITLE: Opening HTML Test Coverage Report using npm\nDESCRIPTION: Starts a development server and opens the generated HTML test coverage report in the default web browser. This report provides detailed line-by-line coverage information.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-cov\n```\n\n----------------------------------------\n\nTITLE: Replacing jQuery Methods with VanillaJS\nDESCRIPTION: Refactoring: Instances of jQuery methods like `$.isArray` are replaced with their native JavaScript equivalents (e.g., `Array.isArray`) to reduce dependency on jQuery core for simple tasks.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Before\n$.isArray(myVar);\n\n// After\nArray.isArray(myVar);\n```\n\n----------------------------------------\n\nTITLE: Using Native String StartsWith/Trim Methods\nDESCRIPTION: Refactoring: Code utilizes native `String.prototype.startsWith` and `String.prototype.trim` methods for improved readability and performance compared to older or custom implementations.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmyString.startsWith(prefix);\nmyString.trim();\n```\n\n----------------------------------------\n\nTITLE: Throwing Error Objects\nDESCRIPTION: Refactoring: Code is updated to throw `Error` objects instead of plain strings for better error handling and debugging. This applies to core code and plugins like jgraduate/jpicker.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthrow new Error('Something went wrong');\n```\n\n----------------------------------------\n\nTITLE: Renaming Configuration File (ES Module)\nDESCRIPTION: Breaking change: The configuration file for the ES Module version of SVG-Edit is renamed. This requires updating references in projects using the module-based setup. It is expected to be located one directory higher than before.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsvgedit-config-es.js\n```\n\n----------------------------------------\n\nTITLE: Instantiating Embedded SVG-Edit\nDESCRIPTION: Breaking change: The `EmbeddedSVGEdit` class now requires instantiation using the `new` keyword. This change allows the internal implementation to use ES6 `class` syntax.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnew EmbeddedSVGEdit\n```\n\n----------------------------------------\n\nTITLE: Setting UI Strings for Path Module\nDESCRIPTION: Breaking change related to internationalization (i18n): If using the `path.js` module independently, its own `setUiStrings` method must also be called to ensure its strings are properly loaded and localized.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsetUiStrings // (within path.js context)\n```\n\n----------------------------------------\n\nTITLE: Moving Sample Configuration File\nDESCRIPTION: Enhancement: The sample configuration file `config-sample.js` is moved out of the `editor` directory to improve project structure.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig-sample.js\n```\n\n----------------------------------------\n\nTITLE: Modular Stylesheet Loading Configuration\nDESCRIPTION: Enhancement: Introduces a `stylesheets` configuration option for defining stylesheets in a modular way while allowing parallel loading. This config uses the `loadStylesheets` utility and supports an `@default` keyword for managing default stylesheet inclusion/exclusion.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  stylesheets: ['path/to/style.css', '@default'] // Example configuration\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nloadStylesheets\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit Log Diff Between Releases with Git - Shell Command - console\nDESCRIPTION: This snippet shows how to retrieve a formatted list of commits between two specific git commit hashes using the 'git log' command. This shell command depends on the Git version control system. Users supply two commit hashes separated by double dots (..) to fetch the history between those revisions. Outputs a detailed changelog to the terminal for auditing or release documentation. Usage is for shell environments with Git installed; replace commit hashes as appropriate.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ngit log 81afaa9..5986f1e\n```\n\n----------------------------------------\n\nTITLE: Viewing Commit Log Diff Between Releases with Git - Shell Command - console\nDESCRIPTION: This snippet demonstrates the use of 'git log' to display the sequence of commits between two different commit hashes. It is intended for developers to review all changes between the specified revisions. Requires Git to be installed and initialized in the relevant repository. Replace the commit hashes as necessary for your use case. Output is a detailed history useful for changelogs or code review.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ngit log 4bb15e0..253b4bf\n```\n\n----------------------------------------\n\nTITLE: Tagging a Release Version with git - Bash\nDESCRIPTION: Creates a version tag for the new release using git's tagging command. The tag follows the convention of prefixing the version number with 'v' (e.g., v6.0.0) and is used to identify the release point in history. Requires existing staged or committed changes and git initialized.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v6.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch with git - Bash\nDESCRIPTION: This command creates a new branch for the release and pushes it to the remote origin. The branch follows the naming convention 'release-vX.Y.Z', which helps in isolating changes relevant to the release. Requires remote 'origin' to be set up and user to have push access.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit branch release-v6.0.0\n# push it to origin\n```\n\n----------------------------------------\n\nTITLE: Dry-run npm Publish for Release Validation - Bash\nDESCRIPTION: This command runs npm's publish process in dry-run mode to simulate which files would be published and to validate preparatory scripts. It takes into account .npmignore settings and outputs a list of files to be included in the release package. Requires a valid project configured with npm, including package.json.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --dry-run\n```\n\n----------------------------------------\n\nTITLE: Pack Project for File Listing without Preparation - Bash\nDESCRIPTION: This command creates a tarball of the npm package in dry-run mode, showing exactly which files would be packed without running preparatory scripts. Useful for reviewing the effect of .npmignore separately from release preparations. Requires a valid npm project structure.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm pack --dry-run\n```\n\n----------------------------------------\n\nTITLE: Pushing Master Branch Updates with git - Bash\nDESCRIPTION: Uploads local changes on the master branch (including release-related modifications) to the remote repository. Ensures that release updates are visible to collaborators and triggers any automated deployment or CI/CD jobs. Assumes 'origin' remote is set up and push permissions are available.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with npm install (Shell)\nDESCRIPTION: Executes the `npm install` command. This step is performed after updating the version number in `package.json` to ensure the `package-lock.json` file is updated accordingly, reflecting any changes in dependencies or locking the dependency tree for the new version.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/packages/svgcanvas/publish.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Publishing the Package with npm publish (Shell)\nDESCRIPTION: Runs the `npm publish` command to release the package to the npm registry. As noted, this command is configured to automate the build process before publishing the updated package version.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/packages/svgcanvas/publish.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Committing Release Changes (Git/Shell)\nDESCRIPTION: Specifies the recommended format for the Git commit message when committing all the changes related to the release (updated `package.json`, `package-lock.json`, `CHANGES.md`). 'x.y.z' should be replaced with the actual version number being released. This creates a clear marker in the version history.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/packages/svgcanvas/publish.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrelease x.y.z\n```\n\n----------------------------------------\n\nTITLE: Installing/Updating npm Dependencies for svgedit (Shell)\nDESCRIPTION: Runs the npm install command to download and install project dependencies specified in `package.json` and updates the `package-lock.json` file accordingly. This step is crucial after modifying dependency versions in `package.json` (like svgcanvas or svgedit itself) before publishing the package.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/publish.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Headless and Instrumented Tests with npm scripts - Bash\nDESCRIPTION: This set of bash commands demonstrates various npm scripts designed to run tests and measure code coverage within the svgedit project. Dependencies include Node.js, npm, and Cypress, along with project-specific scripts defined in package.json. The main commands (`npm test`, `npm run test-only`, etc.) automate tasks like instrumenting source files, preparing test environments, and running Cypress in headless or open mode. Inputs are triggered from the CLI; outputs appear in the terminal and as merged Mocha/Cypress reports.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run instrument\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-no-cov\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prep\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-only\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-only-no-report\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:run\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run report\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-no-core-rollup\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-no-cov-no-core-rollup\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run open-tests\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:open\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run cypress:open-no-start\n```\n\n----------------------------------------\n\nTITLE: Providing Utilities to Callback Extensions\nDESCRIPTION: Enhancement: Callback-style extensions now receive a configuration object containing various utilities and context information, such as `buildCanvgCallback`, `canvg`, encoding/decoding functions (`decode64`, `encode64`), `executeAfterLoads`, `getTypeMap`, browser checks (`isChrome`, `isIE`), `NS` constants, and `text2xml`.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Example config object passed to extension callback\n{\n  buildCanvgCallback,\n  canvg,\n  decode64,\n  encode64,\n  executeAfterLoads,\n  getTypeMap,\n  isChrome,\n  isIE, // Note: variable name might be different, e.g., `isIE`\n  NS,\n  text2xml\n}\n```\n\n----------------------------------------\n\nTITLE: Testing and Building with npm - Bash\nDESCRIPTION: This command runs all test and build steps for the svg-edit project using npm. It ensures that the codebase passes unit and accessibility tests (noting that accessibility tests are currently failing). Prerequisites include having Node.js and npm installed. The expected output is success/failure for all scripts and a completed build directory.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Using Native String/Array Includes Method\nDESCRIPTION: Refactoring: Code is updated to use modern JavaScript methods like `Array.prototype.includes` and `String.prototype.includes` for checking membership, replacing older techniques.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmyArray.includes(element);\nmyString.includes(substring);\n```\n\n----------------------------------------\n\nTITLE: Publishing Project to npm - Bash\nDESCRIPTION: This command publishes the svg-edit project to the npm registry, making the current version available to all npm users. Prerequisites include being a member of the npm project group and authentication with npm. Any local changes should be committed prior to publishing.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Publishing the svgedit Package to npm (Shell)\nDESCRIPTION: Executes the npm publish command to upload the current package version to the npm registry, making it available for others to install. The command automatically triggers any configured build scripts (as mentioned in the context) before publishing. Requires prior authentication with npm (`npm login`) and appropriate permissions.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/publish.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Setting UI Strings for SVGCanvas\nDESCRIPTION: Breaking change: The `svgcanvas.setUiStrings` method must now be explicitly called to load UI strings, especially when not using the full editor interface or for internationalization (i18n) purposes. This is necessary for the canvas to display localized text.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsvgcanvas.setUiStrings\n```\n\n----------------------------------------\n\nTITLE: Running Preparation Steps (Excluding Core Rollup) using npm\nDESCRIPTION: Executes linting ('npm run lint'), HTML building ('npm run build-html'), and config file building ('npm run build-by-config'). This excludes the main Rollup compilation of the svgedit source.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpm run prep-no-core-rollup\n```\n\n----------------------------------------\n\nTITLE: Opening Embedded ESM Editor using npm\nDESCRIPTION: Starts the main development server and an additional server on a different port ('start-allow-origin'). Opens the embedded version of the ESM editor to test cross-origin communication via the embedded API.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-embedded\n```\n\n----------------------------------------\n\nTITLE: Opening ESM Editor (All Extensions) using npm\nDESCRIPTION: Starts a development server and opens the ESM SVG editor with all available extensions loaded.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-all-ext\n```\n\n----------------------------------------\n\nTITLE: Opening ESM Editor (Default Extensions, Server Running) using npm\nDESCRIPTION: Opens the ESM SVG editor with default extensions. Assumes a development server is already running.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-no-start\n```\n\n----------------------------------------\n\nTITLE: Building Configuration Files using npm\nDESCRIPTION: Runs Rollup to compile the ESM-based configuration files. This is necessary for a non-ESM build as user config files import svgedit.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build-by-config\n```\n\n----------------------------------------\n\nTITLE: Managing Submodules using npm\nDESCRIPTION: Runs both 'submodules-init' and 'submodules-update' scripts to initialize and update Git submodules non-recursively. This is used to manage different versions hosted on GitHub Pages.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run submodules\n```\n\n----------------------------------------\n\nTITLE: Commit Submodule or Release Changes with git - Bash\nDESCRIPTION: Commits updates related to submodule and release configuration after running relevant npm scripts. Uses a standardized commit message indicating 'Updating for release X.Y.Z'. Should be run after modifying the release process or submodule tracking files.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Updating for release X.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Commit Release Updates with git - Bash\nDESCRIPTION: This command creates a git commit for all staged changes related to a release, typically after updating CHANGES, README, and version information. It uses a conventionally formatted commit message to document the update. Requires git to be initialized and configured within the project.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Updating CHANGES for release X.Y.Z\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Custom CSS via Configuration (Sample)\nDESCRIPTION: Breaking change: Custom CSS (`custom.css`) is no longer referenced directly in HTML. Instead, it should be referenced via the JavaScript configuration file. Sample configuration files (`svgedit-config-sample-iife.js`/`svgedit-config-sample-es.js`) provide an example using the namespaced filename `svgedit-custom.css`.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsvgedit-config-sample-iife.js\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nsvgedit-config-sample-es.js\n```\n\nLANGUAGE: css\nCODE:\n```\nsvgedit-custom.css\n```\n\n----------------------------------------\n\nTITLE: Renaming Configuration File (IIFE)\nDESCRIPTION: Breaking change: The configuration file for the IIFE (Immediately Invoked Function Expression) version of SVG-Edit is renamed. This change requires updating references to the configuration file in projects using this version. It is expected to be located one directory higher than before.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsvgedit-config-iife.js\n```\n\n----------------------------------------\n\nTITLE: Adding or Removing Releases via npm Scripts - Bash\nDESCRIPTION: Runs specialized npm scripts to add or remove release branches in the svg-edit project. 'npm run add-new-release' adds the current version, while 'npm run add-release --release=6.0.0' or 'npm run remove-release --release=6.0.0' targets a specific version. These scripts update .gitsubmodules and set 'latest' in package.json, requiring project-specific configuration.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/ReleaseInstructions.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run add-new-release\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run add-release --release=6.0.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run remove-release --release=6.0.0\n```\n\n----------------------------------------\n\nTITLE: Opening HTML Test Coverage Report (Server Running) using npm\nDESCRIPTION: Opens the generated HTML test coverage report in the default web browser. Assumes a development server is already running.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-cov-no-start\n```\n\n----------------------------------------\n\nTITLE: Opening Built Documentation using npm\nDESCRIPTION: Starts a development server (if not already running) and opens the previously built documentation in a web browser.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run open-docs\n```\n\n----------------------------------------\n\nTITLE: Formatting the Git Commit Message for svgedit Release (Text)\nDESCRIPTION: Specifies the recommended format for the Git commit message when releasing a new version of the svgedit package. 'x.y.z' should be replaced with the actual version number being released (e.g., 'release 5.1.0'). This commit typically includes updates to `package.json`, `package-lock.json`, and `CHANGES.md` related to the release.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/publish.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrelease x.y.z\n```\n\n----------------------------------------\n\nTITLE: Removing Scoped Attribute from Style Tag\nDESCRIPTION: Breaking change: The `scoped` attribute is removed from `<style>` tags as it is deprecated and obsolete in HTML standards. Styles formerly using this attribute are moved to the document `<head>`.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<style scoped>\n```\n\n----------------------------------------\n\nTITLE: Renaming jQuery File\nDESCRIPTION: Breaking change: The core jQuery library file included in the project is renamed from `jquery.js` to `jquery.min.js` to accurately reflect that it is a minified version.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/CHANGES.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\njquery.js\n```\n\nLANGUAGE: plaintext\nCODE:\n```\njquery.min.js\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: This is the standard boilerplate text recommended for inclusion in source files when applying the Apache License 2.0. It includes placeholders for the copyright year and owner, references the license terms, and disclaims warranties. This text should be enclosed in the appropriate comment syntax for the specific file format.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/src/editor/components/jgraduate/LICENSE-Apache2.0.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Linting Markdown Files using npm\nDESCRIPTION: Runs the Remark tool to lint Markdown files in the project. This is considered a lower priority and is not part of automated build or test routines.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm run remark\n```\n\n----------------------------------------\n\nTITLE: Compressing Project Images using npm\nDESCRIPTION: Compresses image assets within the project. This is a time-consuming process and is not part of automated routines, intended to be run manually when needed.\nSOURCE: https://github.com/svg-edit/svgedit/blob/master/docs/Development.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm run compress-images\n```"
  }
]