[
  {
    "owner": "docker",
    "repo": "compose",
    "content": "TITLE: Basic Docker Compose Configuration Example\nDESCRIPTION: A sample Docker Compose configuration file that defines two services: a web application with build context, port mapping, and volume mounting, and a Redis service using the official Redis image.\nSOURCE: https://github.com/docker/compose/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - .:/code\n  redis:\n    image: redis\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Run Command\nDESCRIPTION: Demonstrates the basic usage of docker compose run command to start a web service and run bash\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_run.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run web bash\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Web Service in Docker Compose (YAML)\nDESCRIPTION: Example of a simple Docker Compose service definition for a web application, specifying image, ports, and volume configuration.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - \"/data\"\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Compose Command (Text)\nDESCRIPTION: Basic syntax for running Docker Compose commands, allowing for multiple configuration files, options, and subcommands with arguments.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndocker compose [-f <arg>...] [options] [COMMAND] [ARGS...]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Build Command Usage\nDESCRIPTION: Shell command for building Docker services using docker compose. Services are built and tagged as project-service by default, unless a specific image name is provided in the Compose file.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_build.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# docker compose build\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Linked Services\nDESCRIPTION: Example of running a PostgreSQL shell command in a linked database container\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_run.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run db psql -h db -U docker\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Up Command\nDESCRIPTION: Basic usage of the 'docker compose up' command which builds, creates, starts, and attaches to containers for services defined in a Compose file. The command will aggregate outputs from containers and stop them when the command exits unless run in detached mode.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_up.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker compose up\n```\n\n----------------------------------------\n\nTITLE: Using Dry Run Mode in Docker Compose\nDESCRIPTION: Shows how to use the --dry-run flag with Docker Compose to test commands without changing the application stack state. The example demonstrates the output of a dry run for the 'up' command with build and detach options.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose --dry-run up --build -d\n[+] Pulling 1/1\n ✔ DRY-RUN MODE -  db Pulled                                                                                                                                                                                                               0.9s\n[+] Running 10/8\n ✔ DRY-RUN MODE -    build service backend                                                                                                                                                                                                 0.0s\n ✔ DRY-RUN MODE -  ==> ==> writing image dryRun-754a08ddf8bcb1cf22f310f09206dd783d42f7dd                                                                                                                                                   0.0s\n ✔ DRY-RUN MODE -  ==> ==> naming to nginx-golang-mysql-backend                                                                                                                                                                            0.0s\n ✔ DRY-RUN MODE -  Network nginx-golang-mysql_default                                    Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Healthy                                                                                                                                           0.5s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Started                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Started                                     Started\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Down Command Usage\nDESCRIPTION: The 'docker compose down' command stops and removes resources created by 'up'. It provides options for dry run mode, removing orphans, removing images, specifying shutdown timeout, and removing volumes.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_down.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker compose down\n\n### Options\n\n| Name               | Type     | Default | Description                                                                                                             |\n|:-------------------|:---------|:--------|:------------------------------------------------------------------------------------------------------------------------|\n| `--dry-run`        | `bool`   |         | Execute command in dry run mode                                                                                         |\n| `--remove-orphans` | `bool`   |         | Remove containers for services not defined in the Compose file                                                          |\n| `--rmi`            | `string` |         | Remove images used by services. \"local\" remove only images that don't have a custom tag (\"local\"|\"all\")                |\n| `-t`, `--timeout`  | `int`    | `0`     | Specify a shutdown timeout in seconds                                                                                   |\n| `-v`, `--volumes`  | `bool`   |         | Remove named volumes declared in the \"volumes\" section of the Compose file and anonymous volumes attached to containers |\n```\n\n----------------------------------------\n\nTITLE: Filtering containers by exited status\nDESCRIPTION: Using the '--status=exited' flag to filter containers by their exited status, showing only containers that have exited in the Compose project.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --status=exited\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-bar-1   alpine    \"/entrypoint.…\"   bar        4 seconds ago   exited (0)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run Without Dependencies\nDESCRIPTION: Shows how to run a command without starting linked services using --no-deps flag\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_run.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --no-deps web python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Overriding Web Service Configuration in Docker Compose (YAML)\nDESCRIPTION: Example of overriding and extending a Docker Compose service configuration, demonstrating how to specify a build context and add environment variables.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build: .\n    environment:\n      - DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Compose YAML Configuration\nDESCRIPTION: A sample compose.yaml file defining two services: a Postgres database and a web application. The db service uses a pulled image while the web service is built from a local Dockerfile.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_pull.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres\n  web:\n    build: .\n    command: bundle exec rails s -p 3000 -b '0.0.0.0'\n    volumes:\n      - .:/myapp\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n```\n\n----------------------------------------\n\nTITLE: Pretty-printing JSON output with jq\nDESCRIPTION: Piping the JSON output from 'docker compose ps' to the jq utility to format the JSON in a more readable way for easier inspection of container details.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --format json | jq .\n[\n  {\n    \"ID\": \"1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a\",\n    \"Name\": \"example-bar-1\",\n    \"Command\": \"/docker-entrypoint.sh nginx -g 'daemon off;'\",\n    \"Project\": \"example\",\n    \"Service\": \"bar\",\n    \"State\": \"exited\",\n    \"Health\": \"\",\n    \"ExitCode\": 0,\n    \"Publishers\": null\n  },\n  {\n    \"ID\": \"f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0\",\n    \"Name\": \"example-foo-1\",\n    \"Command\": \"/docker-entrypoint.sh nginx -g 'daemon off;'\",\n    \"Project\": \"example\",\n    \"Service\": \"foo\",\n    \"State\": \"running\",\n    \"Health\": \"\",\n    \"ExitCode\": 0,\n    \"Publishers\": [\n      {\n        \"URL\": \"0.0.0.0\",\n        \"TargetPort\": 80,\n        \"PublishedPort\": 8080,\n        \"Protocol\": \"tcp\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Exec to Access Interactive Shell\nDESCRIPTION: Example of using the docker compose exec command to open an interactive shell in a web service container. The command allocates a TTY by default, allowing for interactive usage.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_exec.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose exec web sh\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Pull Command Example Output\nDESCRIPTION: Example console output when running `docker compose pull db` to pull the Postgres image defined in the compose.yaml file. Shows the download progress of the image layers.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_pull.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose pull db\n[+] Running 1/15\n ⠸ db Pulling                                                             12.4s\n   ⠿ 45b42c59be33 Already exists                                           0.0s\n   ⠹ 40adec129f1a Downloading  3.374MB/4.178MB                             9.3s\n   ⠹ b4c431d00c78 Download complete                                        9.3s\n   ⠹ 2696974e2815 Download complete                                        9.3s\n   ⠹ 564b77596399 Downloading  5.622MB/7.965MB                             9.3s\n   ⠹ 5044045cf6f2 Downloading  216.7kB/391.1kB                             9.3s\n   ⠹ d736e67e6ac3 Waiting                                                  9.3s\n   ⠹ 390c1c9a5ae4 Waiting                                                  9.3s\n   ⠹ c0e62f172284 Waiting                                                  9.3s\n   ⠹ ebcdc659c5bf Waiting                                                  9.3s\n   ⠹ 29be22cb3acc Waiting                                                  9.3s\n   ⠹ f63c47038e66 Waiting                                                  9.3s\n   ⠹ 77a0c198cde5 Waiting                                                  9.3s\n   ⠹ c8752d5b785c Waiting                                                  9.3s\n```\n\n----------------------------------------\n\nTITLE: Listing running containers with Docker Compose PS\nDESCRIPTION: Basic usage of the 'docker compose ps' command which lists running containers for a Compose project, showing their names, images, commands, services, creation time, status, and exposed ports.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Wait Command Options Table\nDESCRIPTION: Markdown table showing the available options for the 'docker compose wait' command, including '--down-project' for dropping the project when containers stop and '--dry-run' for test execution.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_wait.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type   | Default | Description                                  |\n|:-----------------|:-------|:--------|:---------------------------------------------|\n| `--down-project` | `bool` |         | Drops project when the first container stops |\n| `--dry-run`      | `bool` |         | Execute command in dry run mode              |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Build Command Options Table\nDESCRIPTION: Markdown table listing all available options for the docker compose build command, including build arguments, builder selection, memory limits, caching controls, and SSH authentication settings.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_build.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Type          | Default | Description                                                                                                 |\n|:----------------------|:--------------|:--------|:------------------------------------------------------------------------------------------------------------|\n| `--build-arg`         | `stringArray` |         | Set build-time variables for services                                                                       |\n| `--builder`           | `string`      |         | Set builder to use                                                                                          |\n| `--dry-run`           | `bool`        |         | Execute command in dry run mode                                                                             |\n| `-m`, `--memory`      | `bytes`       | `0`     | Set memory limit for the build container. Not supported by BuildKit.                                        |\n| `--no-cache`          | `bool`        |         | Do not use cache when building the image                                                                    |\n| `--print`             | `bool`        |         | Print equivalent bake file                                                                                  |\n| `--pull`              | `bool`        |         | Always attempt to pull a newer version of the image                                                         |\n| `--push`              | `bool`        |         | Push service images                                                                                         |\n| `-q`, `--quiet`       | `bool`        |         | Don't print anything to STDOUT                                                                              |\n| `--ssh`               | `string`      |         | Set SSH authentications used when building service images. (use 'default' for using your default SSH Agent) |\n| `--with-dependencies` | `bool`        |         | Also build dependencies (transitively)                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Documenting Docker Compose Scale Command Options in Markdown\nDESCRIPTION: This markdown snippet outlines the options available for the 'docker compose scale' command. It includes a table with option names, types, default values, and descriptions for the '--dry-run' and '--no-deps' flags.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_scale.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n| `--no-deps` | `bool` |         | Don't start linked services     |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Service Ports\nDESCRIPTION: Shows how to run a command while mapping all service ports to the host using --service-ports flag\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_run.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --service-ports web python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Documenting Docker Compose Images Command Options in Markdown\nDESCRIPTION: This snippet presents a table of options for the 'docker compose images' command. It includes option names, types, default values, and descriptions for each available flag.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_images.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Type     | Default | Description                                |\n|:----------------|:---------|:--------|:-------------------------------------------|\n| `--dry-run`     | `bool`   |         | Execute command in dry run mode            |\n| `--format`      | `string` | `table` | Format the output. Values: [table \\| json] |\n| `-q`, `--quiet` | `bool`   |         | Only display IDs                           |\n```\n\n----------------------------------------\n\nTITLE: Displaying Options Table for Docker Compose Logs Command in Markdown\nDESCRIPTION: This code snippet presents a markdown table listing all available options for the 'docker compose logs' command. It includes option names, types, default values, and descriptions for each parameter.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_logs.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | Type     | Default | Description                                                                                    |\n|:---------------------|:---------|:--------|:-----------------------------------------------------------------------------------------------|\n| `--dry-run`          | `bool`   |         | Execute command in dry run mode                                                                |\n| `-f`, `--follow`     | `bool`   |         | Follow log output                                                                              |\n| `--index`            | `int`    | `0`     | index of the container if service has multiple replicas                                        |\n| `--no-color`         | `bool`   |         | Produce monochrome output                                                                      |\n| `--no-log-prefix`    | `bool`   |         | Don't print prefix in logs                                                                     |\n| `--since`            | `string` |         | Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)    |\n| `-n`, `--tail`       | `string` | `all`   | Number of lines to show from the end of the logs for each container                            |\n| `-t`, `--timestamps` | `bool`   |         | Show timestamps                                                                                |\n| `--until`            | `string` |         | Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes) |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Watch Command Options Table\nDESCRIPTION: Markdown table showing available options for the docker compose watch command, including dry-run mode, no-up flag, and quiet mode settings.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha_watch.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type | Default | Description                                   |\n|:------------|:-----|:--------|:----------------------------------------------|\n| `--dry-run` |      |         | Execute command in dry run mode               |\n| `--no-up`   |      |         | Do not build & start services before watching |\n| `--quiet`   |      |         | hide build output                             |\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Stop Command\nDESCRIPTION: The 'docker compose stop' command stops running containers without removing them. These containers can be started again with 'docker compose start' command. The command supports timeout options for shutdown.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_stop.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose stop\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Command Structure\nDESCRIPTION: Markdown table defining experimental subcommands for Docker Compose alpha, including viz for graphviz generation and watch for file monitoring.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                              | Description                                                                                          |\n|:----------------------------------|:-----------------------------------------------------------------------------------------------------|\n| [`viz`](compose_alpha_viz.md)     | EXPERIMENTAL - Generate a graphviz graph from your compose file                                      |\n| [`watch`](compose_alpha_watch.md) | EXPERIMENTAL - Watch build context for service and rebuild/refresh containers when files are updated |\n```\n\n----------------------------------------\n\nTITLE: Removing Stopped Containers with Docker Compose\nDESCRIPTION: This snippet demonstrates the basic usage of the 'docker compose rm' command to remove stopped service containers. It shows the interactive prompt for confirmation and the output of successfully removing a container.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_rm.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose rm\nGoing to remove djangoquickstart_web_run_1\nAre you sure? [yN] y\nRemoving djangoquickstart_web_run_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Specifying Compose File Path (Text)\nDESCRIPTION: Example of using the -f flag to specify a Docker Compose file located in a different directory, allowing for flexible project organization.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker compose -f ~/sandbox/rails/compose.yaml pull db\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Compose Kill Command with Custom Signal in Console\nDESCRIPTION: This snippet demonstrates how to use the 'docker compose kill' command with a custom signal (SIGINT) to forcefully stop running containers.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_kill.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose kill -s SIGINT\n```\n\n----------------------------------------\n\nTITLE: Building and Running Plugin End-to-End Tests\nDESCRIPTION: Command to build the CLI and run plugin-specific end-to-end tests.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nmake build-and-e2e-compose\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Create Command Usage and Options\nDESCRIPTION: Detailed table of options available for the 'docker compose create' command, including build controls, container recreation settings, image pulling preferences, and scaling parameters.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_create.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker compose create\n\n<!---MARKER_GEN_START-->\nCreates containers for a service\n\n### Options\n\n| Name               | Type          | Default  | Description                                                                                   |\n|:-------------------|:--------------|:---------|:----------------------------------------------------------------------------------------------|\n| `--build`          | `bool`        |          | Build images before starting containers                                                       |\n| `--dry-run`        | `bool`        |          | Execute command in dry run mode                                                               |\n| `--force-recreate` | `bool`        |          | Recreate containers even if their configuration and image haven't changed                     |\n| `--no-build`       | `bool`        |          | Don't build an image, even if it's policy                                                     |\n| `--no-recreate`    | `bool`        |          | If containers already exist, don't recreate them. Incompatible with --force-recreate.         |\n| `--pull`           | `string`      | `policy` | Pull image before running (\"always\"\\|\"missing\"\\|\"never\"\\|\"build\")                             |\n| `--quiet-pull`     | `bool`        |          | Pull without printing progress information                                                    |\n| `--remove-orphans` | `bool`        |          | Remove containers for services not defined in the Compose file                                |\n| `--scale`          | `stringArray` |          | Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present. |\n| `-y`, `--yes`      | `bool`        |          | Assume \"yes\" as answer to all prompts and run non-interactively                               |\n\n\n<!---MARKER_GEN_END-->\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Auto-remove\nDESCRIPTION: Demonstrates running a command with automatic container removal using --rm flag\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_run.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --rm web python manage.py db upgrade\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Manual Port Mapping\nDESCRIPTION: Demonstrates manual port mapping using --publish/-p flags to specify custom port bindings\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_run.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Listing all containers with Docker Compose PS\nDESCRIPTION: Using the '--all' flag with 'docker compose ps' to include stopped containers in the output, showing both running and exited containers in the project.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --all\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\nexample-bar-1   alpine    \"/entrypoint.…\"   bar        4 seconds ago   exited (0)\n```\n\n----------------------------------------\n\nTITLE: Formatting Docker Compose PS output as JSON\nDESCRIPTION: Using the '--format json' flag to output container information in JSON format, which can be used for further processing by other tools.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --format json\n[{\"ID\":\"1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a\",\"Name\":\"example-bar-1\",\"Command\":\"/docker-entrypoint.sh nginx -g 'daemon off;'\",\"Project\":\"example\",\"Service\":\"bar\",\"State\":\"exited\",\"Health\":\"\",\"ExitCode\":0,\"Publishers\":null},{\"ID\":\"f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0\",\"Name\":\"example-foo-1\",\"Command\":\"/docker-entrypoint.sh nginx -g 'daemon off;'\",\"Project\":\"example\",\"Service\":\"foo\",\"State\":\"running\",\"Health\":\"\",\"ExitCode\":0,\"Publishers\":[{\"URL\":\"0.0.0.0\",\"TargetPort\":80,\"PublishedPort\":8080,\"Protocol\":\"tcp\"}]}]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose ls Command with Options Table in Markdown\nDESCRIPTION: Markdown table displaying the options available for the 'docker compose ls' command, including flags for showing all projects, dry run mode, filtering, formatting output, and quiet mode.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ls.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker compose ls\n\n<!---MARKER_GEN_START-->\nLists running Compose projects\n\n### Options\n\n| Name            | Type     | Default | Description                                |\n|:----------------|:---------|:--------|:-------------------------------------------|\n| `-a`, `--all`   | `bool`   |         | Show all stopped Compose projects          |\n| `--dry-run`     | `bool`   |         | Execute command in dry run mode            |\n| `--filter`      | `filter` |         | Filter output based on conditions provided |\n| `--format`      | `string` | `table` | Format the output. Values: [table \\| json] |\n| `-q`, `--quiet` | `bool`   |         | Only display project names                 |\n\n\n<!---MARKER_GEN_END-->\n\n## Description\n\nLists running Compose projects\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Compose Files (Text)\nDESCRIPTION: Example command demonstrating how to use multiple Docker Compose configuration files, combining and overriding settings as needed.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker compose -f compose.yaml -f compose.admin.yaml run backup_db\n```\n\n----------------------------------------\n\nTITLE: Using Project Name Flag in Docker Compose\nDESCRIPTION: Demonstrates how to use the -p flag to specify a project name in Docker Compose commands. The example shows using the flag with 'ps' and 'logs' commands.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -p my_project ps -a\nNAME                 SERVICE    STATUS     PORTS\nmy_project_demo_1    demo       running\n\n$ docker compose -p my_project logs\ndemo_1  | PING localhost (127.0.0.1): 56 data bytes\ndemo_1  | 64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.095 ms\n```\n\n----------------------------------------\n\nTITLE: Streaming Container Events in JSON Format with Docker Compose\nDESCRIPTION: This code snippet demonstrates the JSON output format when using the '--json' flag with the 'docker compose events' command. It shows the structure of event data including timestamp, event type, action, container ID, service name, and container attributes.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_events.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": \"2015-11-20T18:01:03.615550\",\n    \"type\": \"container\",\n    \"action\": \"create\",\n    \"id\": \"213cf7...5fc39a\",\n    \"service\": \"web\",\n    \"attributes\": {\n      \"name\": \"application_web_1\",\n      \"image\": \"alpine:edge\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Running Processes with Docker Compose Top\nDESCRIPTION: This example demonstrates the usage of the 'docker compose top' command. It shows the output of running processes for a service named 'example_foo_1', including details such as UID, PID, PPID, CPU usage, start time, TTY, execution time, and the command being run.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_top.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose top\nexample_foo_1\nUID    PID      PPID     C    STIME   TTY   TIME       CMD\nroot   142353   142331   2    15:33   ?     00:00:00   ping localhost -c 5\n```\n\n----------------------------------------\n\nTITLE: Filtering Docker Compose Containers by Status with --filter Flag\nDESCRIPTION: This example demonstrates how to use the --filter flag to show only running containers in Docker Compose. The command filters the output of docker compose ps to display only containers with 'running' status, showing container name, image, command, service, creation time, status, and port mappings.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --filter status=running\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Filtering containers by running status\nDESCRIPTION: Using the '--status=running' flag to filter containers by their running status, showing only containers that are currently running in the Compose project.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_ps.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --status=running\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Defining Service Image Destinations in Docker Compose\nDESCRIPTION: YAML configuration example showing how to specify destination registries for Docker images in a compose file. The first service pushes to a local registry while the second pushes to Docker Hub.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_push.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service1:\n    build: .\n    image: localhost:5000/yourimage  ## goes to local registry\n\n  service2:\n    build: .\n    image: your-dockerid/yourimage  ## goes to your repository on Docker Hub\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Stats Command Options Table\nDESCRIPTION: Markdown table displaying the available options for the docker compose stats command, including flags for all containers, dry run mode, custom formatting, streaming control, and output truncation settings.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_stats.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Type     | Default | Description                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|:--------------|:---------|:--------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `-a`, `--all` | `bool`   |         | Show all containers (default shows just running)                                                                                                                                                                                                                                                                                                                                                                             |\n| `--dry-run`   | `bool`   |         | Execute command in dry run mode                                                                                                                                                                                                                                                                                                                                                                                              |\n| `--format`    | `string` |         | Format output using a custom template:<br>'table':            Print output in table format with column headers (default)<br>'table TEMPLATE':   Print output in table format using the given Go template<br>'json':             Print in JSON format<br>'TEMPLATE':         Print output using the given Go template.<br>Refer to https://docs.docker.com/engine/cli/formatting/ for more information about formatting output with templates |\n| `--no-stream` | `bool`   |         | Disable streaming stats and only pull the first result                                                                                                                                                                                                                                                                                                                                                                       |\n| `--no-trunc`  | `bool`   |         | Do not truncate output                                                                                                                                                                                                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Compose Start Command Options in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the options available for the 'docker compose start' command. It includes the option name, type, default value, and description.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_start.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Port Command Options Table\nDESCRIPTION: A markdown table documenting the available options for the docker compose port command, including dry-run mode, container index selection, and protocol specification.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_port.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name         | Type     | Default | Description                                             |\n|:-------------|:---------|:--------|:--------------------------------------------------------|\n| `--dry-run`  | `bool`   |         | Execute command in dry run mode                         |\n| `--index`    | `int`    | `0`     | Index of the container if service has multiple replicas |\n| `--protocol` | `string` | `tcp`   | tcp or udp                                              |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Pause Command Options Table\nDESCRIPTION: A markdown table describing the options available for the 'docker compose pause' command. It includes the option name, type, default value, and description.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_pause.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Docker Compose Watch Options\nDESCRIPTION: A markdown table documenting the available options for the Docker Compose watch command, including dry-run mode, no-up flag, pruning configuration, and quiet mode settings.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_watch.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                                   |\n|:------------|:-------|:--------|:----------------------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode               |\n| `--no-up`   | `bool` |         | Do not build & start services before watching |\n| `--prune`   | `bool` | `true`  | Prune dangling images on rebuild              |\n| `--quiet`   | `bool` |         | hide build output                             |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Export Command Options Table in Markdown\nDESCRIPTION: A markdown table showing the available options for the 'docker compose export' command, including their names, types, default values, and descriptions.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_export.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type     | Default | Description                                              |\n|:-----------------|:---------|:--------|:---------------------------------------------------------|\n| `--dry-run`      | `bool`   |         | Execute command in dry run mode                          |\n| `--index`        | `int`    | `0`     | index of the container if service has multiple replicas. |\n| `-o`, `--output` | `string` |         | Write to a file, instead of STDOUT                       |\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Compose Version Information Options\nDESCRIPTION: This markdown table outlines the options available for the 'docker compose version' command. It includes options for dry run mode, output formatting, and displaying only the version number.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_version.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type     | Default | Description                                                    |\n|:-----------------|:---------|:--------|:---------------------------------------------------------------|\n| `--dry-run`      | `bool`   |         | Execute command in dry run mode                                |\n| `-f`, `--format` | `string` |         | Format the output. Values: [pretty \\| json]. (Default: pretty) |\n| `--short`        | `bool`   |         | Shows only Compose's version number                            |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Attach Command Options Table in Markdown\nDESCRIPTION: A markdown table showing all available options for the 'docker compose attach' command, including option names, types, default values, and descriptions for each parameter.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_attach.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Type     | Default | Description                                               |\n|:----------------|:---------|:--------|:----------------------------------------------------------|\n| `--detach-keys` | `string` |         | Override the key sequence for detaching from a container. |\n| `--dry-run`     | `bool`   |         | Execute command in dry run mode                           |\n| `--index`       | `int`    | `0`     | index of the container if service has multiple replicas.  |\n| `--no-stdin`    | `bool`   |         | Do not attach STDIN                                       |\n| `--sig-proxy`   | `bool`   | `true`  | Proxy all received signals to the process                 |\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin Text\nDESCRIPTION: The standard Developer Certificate of Origin (DCO) text that contributors must agree to when making contributions. This document outlines the terms under which code contributions are made.\nSOURCE: https://github.com/docker/compose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\\nVersion 1.1\\n\\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\\n660 York Street, Suite 102,\\nSan Francisco, CA 94110 USA\\n\\nEveryone is permitted to copy and distribute verbatim copies of this\\nlicense document, but changing it is not allowed.\\n\\nDeveloper's Certificate of Origin 1.1\\n\\nBy making a contribution to this project, I certify that:\\n\\n(a) The contribution was created in whole or in part by me and I\\n    have the right to submit it under the open source license\\n    indicated in the file; or\\n\\n(b) The contribution is based upon previous work that, to the best\\n    of my knowledge, is covered under an appropriate open source\\n    license and I have the right under that license to submit that\\n    work with modifications, whether created in whole or in part\\n    by me, under the same open source license (unless I am\\n    permitted to submit under a different license), as indicated\\n    in the file; or\\n\\n(c) The contribution was provided directly to me by some other\\n    person who certified (a), (b) or (c) and I have not modified\\n    it.\\n\\n(d) I understand and agree that this project and the contribution\\n    are public and that a record of the contribution (including all\\n    personal information I submit with it, including my sign-off) is\\n    maintained indefinitely and may be redistributed consistent with\\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Commit Command Options Table in Markdown\nDESCRIPTION: A markdown table listing the available options for the 'docker compose commit' command. It includes option names, types, default values, and descriptions for each parameter.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_commit.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name              | Type     | Default | Description                                                |\n|:------------------|:---------|:--------|:-----------------------------------------------------------|\n| `-a`, `--author`  | `string` |         | Author (e.g., \"John Hannibal Smith <hannibal@a-team.com>\") |\n| `-c`, `--change`  | `list`   |         | Apply Dockerfile instruction to the created image          |\n| `--dry-run`       | `bool`   |         | Execute command in dry run mode                            |\n| `--index`         | `int`    | `0`     | index of the container if service has multiple replicas.   |\n| `-m`, `--message` | `string` |         | Commit message                                             |\n| `-p`, `--pause`   | `bool`   | `true`  | Pause container during commit                              |\n```\n\n----------------------------------------\n\nTITLE: Git Commit Sign-off Format\nDESCRIPTION: The required format for signing off on git commits using the contributor's real name and email address.\nSOURCE: https://github.com/docker/compose/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Publish Command Options Table in Markdown\nDESCRIPTION: A markdown table displaying the available options for the 'docker compose publish' command, including option names, types, default values, and descriptions.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_publish.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Type     | Default | Description                                                                    |\n|:--------------------------|:---------|:--------|:-------------------------------------------------------------------------------|\n| `--dry-run`               | `bool`   |         | Execute command in dry run mode                                                |\n| `--oci-version`           | `string` |         | OCI image/artifact specification version (automatically determined by default) |\n| `--resolve-image-digests` | `bool`   |         | Pin image tags to digests                                                      |\n| `--with-env`              | `bool`   |         | Include environment variables in the published OCI artifact                    |\n| `-y`, `--yes`             | `bool`   |         | Assume \"yes\" as answer to all prompts                                          |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Generate Command Reference in Markdown\nDESCRIPTION: A markdown table documenting the options available for the experimental 'docker compose alpha generate' command, which generates a Compose file from existing containers. Options include dry run mode, output format selection, project naming, and project directory specification.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha_generate.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker compose alpha generate\n\n<!---MARKER_GEN_START-->\nEXPERIMENTAL - Generate a Compose file from existing containers\n\n### Options\n\n| Name            | Type     | Default | Description                               |\n|:----------------|:---------|:--------|:------------------------------------------|\n| `--dry-run`     | `bool`   |         | Execute command in dry run mode           |\n| `--format`      | `string` | `yaml`  | Format the output. Values: [yaml \\| json] |\n| `--name`        | `string` |         | Project name to set in the Compose file   |\n| `--project-dir` | `string` |         | Directory to use for the project          |\n\n\n<!---MARKER_GEN_END-->\n```\n\n----------------------------------------\n\nTITLE: Documenting Docker Compose Alpha Viz Command Options in Markdown\nDESCRIPTION: A markdown table listing the options available for the 'docker compose alpha viz' command. It includes option names, types, default values, and descriptions for customizing the Graphviz graph output.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha_viz.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | Type   | Default | Description                                                                                        |\n|:---------------------|:-------|:--------|:---------------------------------------------------------------------------------------------------|\n| `--dry-run`          | `bool` |         | Execute command in dry run mode                                                                    |\n| `--image`            | `bool` |         | Include service's image name in output graph                                                       |\n| `--indentation-size` | `int`  | `1`     | Number of tabs or spaces to use for indentation                                                    |\n| `--networks`         | `bool` |         | Include service's attached networks in output graph                                                |\n| `--ports`            | `bool` |         | Include service's exposed ports in output graph                                                    |\n| `--spaces`           | `bool` |         | If given, space character ' ' will be used to indent,<br>otherwise tab character '\\t' will be used |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Publish Command Options Table\nDESCRIPTION: Markdown table documenting the available options for the docker compose alpha publish command, including flags for dry-run mode, OCI versioning, image digest resolution, environment variable inclusion, and confirmation prompts.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha_publish.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Type     | Default | Description                                                                    |\n|:--------------------------|:---------|:--------|:-------------------------------------------------------------------------------|\n| `--dry-run`               | `bool`   |         | Execute command in dry run mode                                                |\n| `--oci-version`           | `string` |         | OCI image/artifact specification version (automatically determined by default) |\n| `--resolve-image-digests` | `bool`   |         | Pin image tags to digests                                                      |\n| `--with-env`              | `bool`   |         | Include environment variables in the published OCI artifact                    |\n| `-y`, `--yes`             | `bool`   |         | Assume \"yes\" as answer to all prompts                                          |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Scale Command Options Table in Markdown\nDESCRIPTION: A markdown table showing the available options for the Docker Compose alpha scale command. It includes options for dry run mode and controlling dependency service startup.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha_scale.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type | Default | Description                     |\n|:------------|:-----|:--------|:--------------------------------|\n| `--dry-run` |      |         | Execute command in dry run mode |\n| `--no-deps` |      |         | Don't start linked services     |\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Options Table\nDESCRIPTION: Markdown table defining available options for Docker Compose alpha commands, currently documenting the --dry-run option.\nSOURCE: https://github.com/docker/compose/blob/main/docs/reference/compose_alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type | Default | Description                     |\n|:------------|:-----|:--------|:--------------------------------|\n| `--dry-run` |      |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Building Docker Compose CLI\nDESCRIPTION: Command to build the Docker Compose CLI plugin for the host machine. Outputs the binary in ./bin/build directory.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Building and Running End-to-End Tests\nDESCRIPTION: Command to first build the CLI and then run all end-to-end tests.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmake build-and-e2e\n```\n\n----------------------------------------\n\nTITLE: Running Complete End-to-End Tests\nDESCRIPTION: Command to run both CLI and standalone end-to-end tests for Docker Compose.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmake e2e\n```\n\n----------------------------------------\n\nTITLE: Building and Running Standalone End-to-End Tests\nDESCRIPTION: Command to build the CLI and run standalone end-to-end tests.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nmake build-and-e2e-compose-standalone\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Docker Compose\nDESCRIPTION: Command to execute all unit tests for the Docker Compose project.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Running Plugin End-to-End Tests\nDESCRIPTION: Command to execute CLI plugin-specific end-to-end tests.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nmake e2e-compose\n```\n\n----------------------------------------\n\nTITLE: Running Standalone End-to-End Tests\nDESCRIPTION: Command to execute standalone CLI end-to-end tests.\nSOURCE: https://github.com/docker/compose/blob/main/BUILDING.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmake e2e-compose-standalone\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT Token in JSON Format\nDESCRIPTION: This code snippet represents a JSON Web Token (JWT) used for authentication. It consists of three parts: header, payload, and signature, each base64url encoded and separated by dots.\nSOURCE: https://github.com/docker/compose/blob/main/pkg/e2e/fixtures/publish/config.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw\n```\n\n----------------------------------------\n\nTITLE: DSA Private Key in PEM Format\nDESCRIPTION: A DSA private key stored in PEM (Privacy Enhanced Mail) format. This format uses Base64 encoding with specific header and footer markers to identify the key type. The actual key content appears to be truncated or simplified.\nSOURCE: https://github.com/docker/compose/blob/main/pkg/e2e/fixtures/publish/secret.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN DSA PRIVATE KEY-----\nwxyz+ABC=\n-----END DSA PRIVATE KEY-----\n```"
  }
]