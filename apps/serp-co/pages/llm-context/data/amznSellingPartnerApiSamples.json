[
  {
    "owner": "amzn",
    "repo": "selling-partner-api-samples",
    "content": "TITLE: Vendor Direct Fulfillment IAM Policy for Deployment\nDESCRIPTION: JSON IAM policy that defines the permissions needed for the deployment user to create and manage the necessary AWS resources. This policy allows specific IAM actions on users and policies in your AWS account.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/vendor-direct-fulfillment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \t\"Version\": \"2012-10-17\",\n \t\"Statement\": [\n \t\t{\n \t\t\t\"Sid\": \"SPAPIAppIAMPolicy\",\n \t\t\t\"Effect\": \"Allow\",\n \t\t\t\"Action\": [\n \t\t\t\t\"iam:CreateUser\",\n \t\t\t\t\"iam:DeleteUser\",\n \t\t\t\t\"iam:CreatePolicy\",\n \t\t\t\t\"iam:DeletePolicy\",\n \t\t\t\t\"iam:AttachUserPolicy\",\n \t\t\t\t\"iam:DetachUserPolicy\",\n \t\t\t\t\"iam:CreateAccessKey\",\n \t\t\t\t\"iam:DeleteAccessKey\"\n \t\t\t],\n \t\t\t\"Resource\": [\n \t\t\t\t\"arn:aws:iam::<aws_account_id_number>:user/*\",\n \t\t\t\t\"arn:aws:iam::<aws_account_id_number>:policy/*\"\n \t\t\t]\n \t\t}\n \t]\n }\n```\n\n----------------------------------------\n\nTITLE: Calculate New Price Lambda Handler - Python\nDESCRIPTION: Python Lambda handler that processes pricing offers to calculate new listing prices. Handles competitive price thresholds, minimum thresholds, and applies percentage or fixed price change rules. Returns formatted price results or error messages.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef lambda_handler(event, context):\n    try:\n        # Instantiate PricingOfferLambdaInput object from the input event\n        pricing_offer = PricingOfferLambdaInput(**event)\n\n        # Calculate the landed price by summing listing price and shipping price\n        landed_price = pricing_offer.sellerOffer.listingPrice.amount + pricing_offer.sellerOffer.shippingPrice.amount\n\n        new_item_price = None\n\n        # Condition to check if competitivePriceThreshold is present. Pricing Health flow\n        if pricing_offer.sellerOffer.referencePrice and pricing_offer.useCompetitivePrice:\n\n            new_item_price = pricing_offer.sellerOffer.referencePrice[\"competitivePriceThreshold\"][\n                \"amount\"]\n            result = calculate_price(new_item_price, pricing_offer,\n                                     pricing_offer.sellerOffer.referencePrice[\"competitivePriceThreshold\"][\n                                         \"currency_code\"])\n\n        # Check conditions to determine whether to skip new price calculation\n        # Check if buy box price is less than the minimum threshold\n        elif pricing_offer.buyBox.price.amount < pricing_offer.minThreshold:\n            # Return indicating skipping new price calculation\n            return {\n                \"newListingPrice\": {\n                    \"amount\": -1\n                },\n                \"issues\": f\"Buy Box Price: {pricing_offer.buyBox.price.amount} is less than threshold\"\n            }\n\n        # Check if buy box price is greater than landed price\n        elif pricing_offer.buyBox.price.amount > landed_price:\n            # Return indicating skipping new price calculation\n            return {\n                \"newListingPrice\": {\n                    \"amount\": -1\n                },\n                \"issues\": f\"Landed Price: {landed_price} is already less than Buy Box Price\"\n            }\n\n        # Calculate the new item price based on different price change rules (percentage or fixed)\n        elif pricing_offer.priceChangeRule.rule == constants.PriceChangeRule.PERCENTAGE.value:\n            new_item_price = (pricing_offer.buyBox.price.amount - pricing_offer.sellerOffer.shippingPrice.amount - (\n                    pricing_offer.priceChangeRule.value / 100)\n                              * pricing_offer.buyBox.price.amount)\n        elif pricing_offer.priceChangeRule.rule == constants.PriceChangeRule.FIXED.value:\n            new_item_price = pricing_offer.buyBox.price.amount - pricing_offer.priceChangeRule.value - pricing_offer.sellerOffer.shippingPrice.amount\n        else:\n            # Return indicating invalid price change rule\n            return {\n                \"newListingPrice\": {\n                    \"amount\": -1\n                },\n                \"issues\": f\"Price Change Rule: {pricing_offer.priceChangeRule.rule} is Invalid.\"\n            }\n\n        # Assign new listing price to the calculate item price\n        new_listing_price = new_item_price\n        result = calculate_price(new_listing_price, pricing_offer, pricing_offer.sellerOffer.listingPrice.currency_code)\n\n        return result\n    except Exception as e:\n        # Raise an exception if there's an error during the process\n        raise Exception(\"Calling Pricing API failed\", e)\n\n\ndef calculate_price(new_listing_price, pricing_offer, currency_code):\n    # Check if the new listing price is less than the minimum threshold\n    if new_listing_price < pricing_offer.minThreshold:\n        # Return indicating skipping new price calculation\n        return {\n            \"newListingPrice\": {\n                \"amount\": -1\n            },\n            \"issues\": f\"Buy Box Price: {pricing_offer.buyBox.price.amount} is less than threshold\"\n        }\n\n    # Create a Money object with the new listing price and currency code\n    new_listing_price = Money(amount=new_listing_price,\n                              currency_code=currency_code)\n    # Prepare the result dictionary with the new listing price\n    result = {\n        \"newListingPrice\": new_listing_price.__dict__\n    }\n    return result\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details with Orders API in Java\nDESCRIPTION: This code snippet demonstrates how to retrieve order details using the Orders API in Java. It initializes the API client, gets the order and order items, and creates an MfnOrder object with the retrieved information.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOrdersV0Api ordersApi = getOrdersApi(input.getRegionCode(), input.getRefreshToken());\n\n// Get order and order items\nGetOrderResponse order = ordersApi.getOrder(input.getOrderId());\nGetOrderItemsResponse orderItems = ordersApi.getOrderItems(input.getOrderId(), null);\n\nMfnOrder mfnOrder = new MfnOrder();\nmfnOrder.setOrderItems(getOrderItemList(orderItems));\nmfnOrder.setShipFromAddress(mapAddress(order.getPayload().getDefaultShipFromLocationAddress()));\n\nreturn mfnOrder;\n```\n\n----------------------------------------\n\nTITLE: Updating Product Prices with Python using Amazon Selling Partner API\nDESCRIPTION: This Python Lambda function retrieves listing information for a specific product, updates its price, and submits the changes through the Amazon Selling Partner API. It first fetches the current product details to preserve existing discount information before applying the price update.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef lambda_handler(event, context):\n    # Extract region code from lambda environment variables\n    region_code = os.environ.get(constants.REGION_CODE_ARN_ENV_VARIABLE)\n\n    try:\n        # Instantiate PricingOfferLambdaInput object from the input event\n        pricing_offer = PricingOfferLambdaInput(**event)\n\n        # Create an instance of the ApiUtils class for interacting with the Listings API\n        api_utils = ApiUtils(pricing_offer.credentials.refreshToken,\n                             region_code,\n                             constants.LISTINGS_API_TYPE)\n\n        # Prepare data and call the Listings API to retrieve specific item details\n        marketplace_ids = [pricing_offer.credentials.marketplaceId]\n\n        params = {\n            'issue_locale': 'en_US',\n            'included_data': ['attributes']\n        }\n\n        # Get details of the item from the Listings API\n        get_listing_response = api_utils.call_listings_api(method='get_listings_item',\n                                                           marketplace_ids=marketplace_ids,\n                                                           seller_id=pricing_offer.sellerId,\n                                                           sku=pricing_offer.itemSku, **params)\n        get_listing_response = get_listing_response.to_dict()\n            \n\n        # Extract purchasable_offer details from the Listings API response\n        # Note: we are fetching purchasable offer attribute in order not to override any existing discounts via the patch\n        purchasable_offer = get_listing_response['attributes'].get('purchasable_offer')\n\n        # Prepare and send a PATCH request to update item details in the Listings API\n        patch_listings_response = api_utils.call_listings_api(method='patch_listings_item',\n                                                              marketplace_ids=marketplace_ids,\n                                                              seller_id=pricing_offer.sellerId,\n                                                              sku=pricing_offer.itemSku,\n                                                              body=get_patch_listings_body(\n                                                                  new_listing_price=pricing_offer.newListingPrice,\n                                                                  purchasable_offer=purchasable_offer))\n\n        return f\"Finished submitting price update. New price is {pricing_offer.newListingPrice}\"\n    except Exception as e:\n        # Raise an exception if there's an error during the process\n        raise Exception(\"Calling Listings API failed\", e)\n\n\ndef get_patch_listings_body(new_listing_price, purchasable_offer):\n    # Determine the value_with_tax based on the type of new_listing_price (if fetched from Pricing or Notification)\n    value_with_tax = new_listing_price.amount\n    \n    # Set the value_with_tax in the Listings API PATCH request body\n    purchasable_offer[0]['our_price'][0]['schedule'][0]['value_with_tax'] = value_with_tax\n    \n    # Construct and return the body for the Listings API PATCH request\n    body = {\n        \"productType\": \"PRODUCT\",\n        \"patches\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"/attributes/purchasable_offer\",\n                \"value\": purchasable_offer\n            }\n        ]\n    }\n    \n    return body\n```\n\n----------------------------------------\n\nTITLE: Purchasing Shipment with SP-API in Python\nDESCRIPTION: Handles the creation of shipment orders using the Shipping V2 API, including storing shipment information in DynamoDB and processing the shipping label response.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n        api_utils = ApiUtils(region_code=region_code,\n                             refresh_token=refresh_token,\n                             api_type=constants.SHIPPING_API_TYPE)\n\n        # Create shipment for the selected shipping service\n        purchase_shipment_request = get_purchase_shipment_request_body(payload=purchase_shipment_lambda_input)\n\n        logger.info(f\"Shipping API - PurchaseShipment request: {purchase_shipment_request}\")\n\n        purchase_shipment_result = api_utils.call_shipping_api('purchase_shipment', body=purchase_shipment_request)\n\n        logger.info(f\"Shipping API - PurchaseShipment response: {purchase_shipment_result}\")\n\n        # Store ShipmentId in DynamoDB\n        # Update this section to match your product's logic\n        shipment_id = purchase_shipment_result.payload.shipment_id\n        tracking_id = purchase_shipment_result.payload.package_document_details[0][\"trackingId\"]\n        carrier_id = purchase_shipment_lambda_input.rates.preferredRate.carrierId\n        store_shipment_information(purchase_shipment_lambda_input.credentials.orderId,\n                                   shipment_id, tracking_id, carrier_id)\n\n        # Generating Label format\n        label = purchase_shipment_result.payload.package_document_details[0][\"packageDocuments\"][0]\n        result = {\n            constants.LABEL_FORMAT_KEY_NAME: label[\"format\"],\n            constants.LABEL_DIMENSIONS_KEY_NAME: label[\"type\"],\n            constants.LABEL_FILE_CONTENTS_KEY_NAME: label[\"contents\"]\n        }\n        return result\n```\n\n----------------------------------------\n\nTITLE: Initializing SP-API OAuth Authorization Flow\nDESCRIPTION: JavaScript function that initiates the OAuth authorization process by making an API call and redirecting to Amazon's authorization URL.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function initializeAuth(partnerId) {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/partners/${partnerId}/oauth/init`, {\n      method: 'POST'\n    });\n    const data = await response.json();\n    window.location.href = data.authorizationUrl;\n  } catch (error) {\n    console.error('Authorization failed:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Secret Expiry Notification and Rotation in Java\nDESCRIPTION: This code demonstrates how to handle client secret expiry notifications, validate client IDs, check if secrets are expiring within a threshold timeframe, and rotate application client secrets using the Applications API.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic String handleRequest(SQSEvent event, Context context) {\n    for (SQSEvent.SQSMessage message : event.getRecords()) {\n        // Parse the notification payload\n        NotificationPayload notificationPayload = mapNotification(message.getBody());\n\n        // Validate the notification type\n        if (!\"APPLICATION_OAUTH_CLIENT_SECRET_EXPIRY\".equals(notificationPayload.getNotificationType())) {\n            continue;\n        }\n\n        // Validate the clientId\n        String clientId = notificationPayload.getPayload().getApplicationOAuthClientSecretExpiry().getClientId();\n        if (!clientId.equals(storedClientId)) {\n            continue;\n        }\n\n        // Check if the client secret is expiring within the threshold\n        final int expiryThresholdDays = 7;\n        ZonedDateTime clientSecretExpiryTime = notificationPayload.getPayload().getApplicationOAuthClientSecretExpiry().getClientSecretExpiryTime().atZoneSameInstant(ZoneId.of(\"UTC\"));\n        ZonedDateTime currentTime = ZonedDateTime.now(ZoneId.of(\"UTC\"));\n        long daysBetween = ChronoUnit.DAYS.between(currentTime, clientSecretExpiryTime);\n        if (daysBetween > expiryThresholdDays) {\n            continue;\n        }\n\n        // Rotate the application client secret\n        ApplicationsApi applicationsApi = ApiUtils.getApplicationsApi(regionCode, true);\n        applicationsApi.rotateApplicationClientSecretCall(null, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Order using Orders API in Java\nDESCRIPTION: This code demonstrates how to retrieve an order and its items using the Orders V0 API. It validates if the order is an Easy Ship order and creates an EasyShipOrder object with the order items for further processing in the workflow.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Get Order V0 API instance\nOrdersV0Api OrdersApi = ApiUtils.getOrdersV0Api(input);\n\n// API calls to retrieve order and order items\nGetOrderResponse orderResponse = OrdersApi.getOrder(input.getAmazonOrderId());\nGetOrderItemsResponse orderItemsResponse = OrdersApi.getOrderItems(input.getAmazonOrderId(), null);\n\nif (!EasyShipShipmentStatus.PENDINGSCHEDULE.equals(orderResponse.getPayload().getEasyShipShipmentStatus())) {\n        throw new IllegalArgumentException(\n        String.format(\"Amazon Order Id : %s is not EasyShip order\", input.getAmazonOrderId()));\n}\n\nEasyShipOrder easyShipOrder = new EasyShipOrder();\neasyShipOrder.setOrderItems(getOrderItemList(orderItemsResponse));\n\ninput.setEasyShipOrder(easyShipOrder);\n\nreturn input;\n```\n\n----------------------------------------\n\nTITLE: IAM Policy JSON for SP-API Sample App Deployment\nDESCRIPTION: IAM policy with required permissions for deploying the SP-API sample application. Includes permissions for IAM user/role management, CloudFormation stack creation, ECR repository access, and S3 bucket operations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/error-monitoring/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppIAMPolicy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"iam:CreateUser\",\n\t\t\t\t\"iam:DeleteUser\",\n\t\t\t\t\"iam:CreatePolicy\",\n\t\t\t\t\"iam:DeletePolicy\",\n\t\t\t\t\"iam:AttachUserPolicy\",\n\t\t\t\t\"iam:DetachUserPolicy\",\n\t\t\t\t\"iam:CreateAccessKey\",\n\t\t\t\t\"iam:DeleteAccessKey\",\n                \"iam:GetRole\",\n                \"iam:CreateRole\",\n                \"iam:TagRole\",\n                \"iam:AttachRolePolicy\",\n                \"iam:PutRolePolicy\",\n                \"iam:DeleteRole\",\n                \"iam:DeleteRolePolicy\",\n                \"iam:DetachRolePolicy\",\n                \"iam:PassRole\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t    \"arn:aws:iam::<aws_account_id_number>:user/*\",\n                \"arn:aws:iam::<aws_account_id_number>:policy/*\",\n                \"arn:aws:iam::<aws_account_id_number>:role/*\"\n\t\t\t]\n\t\t},\n\t\t{\n            \"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:*\",\n                \"ecr:*\",\n                \"ssm:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n                \"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n                \"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n                \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n            ]\n        },\n        {\n            \"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::cdk*\",\n                \"arn:aws:s3:::sp-api-app-bucket*\"\n            ]\n        }\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Shipping Label in S3 and Generating Presigned URL in Python\nDESCRIPTION: This snippet demonstrates the process of storing a shipping label in an Amazon S3 bucket and then generating a presigned URL to access it. The code logs successful operations and returns the presigned URL to be used in subsequent steps such as printing or notification delivery via SNS to email.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Store the label in S3\nstore_label(s3_bucket_name, object_key, label)\nlogger.info(\"Label successfully stored\")\n\n# Generate a presigned URL to browse the label\npresigned_url = generate_presigned_url(s3_bucket_name, object_key)\nlogger.info(\"Presigned URL successfully generated\")\n\nreturn presigned_url\n```\n\n----------------------------------------\n\nTITLE: Initiating Client Secret Rotation with SP-API\nDESCRIPTION: Function that calls Amazon's Application Management API to initiate a credential rotation process. It sends a POST request to the client secret endpoint and handles the 204 success response, indicating rotation was started successfully.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function rotateSecret(partnerId) {\n    try {\n        // Call SP-API endpoint with required scope\n        const response = await fetch(`${SP_API_ENDPOINT}/applications/2023-11-30/clientSecret`, {\n            method: 'POST',\n            headers: {\n                'x-amz-access-token': accessToken\n            }\n        });\n\n        if (response.status === 204) {\n            showSuccess(\"Secret rotation initiated - check SQS for new credentials\");\n        }\n    } catch (error) {\n        handleError(\"Secret rotation failed\", error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details with Orders API in Python\nDESCRIPTION: This code snippet shows how to retrieve order details using the Orders API in Python. It initializes the API utility, gets the order and order items, and creates an MfnOrder object with the retrieved information.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi_utils = ApiUtils(refresh_token, region_code, constants.ORDERS_API_TYPE)\n\norder_id = event[constants.STATE_MACHINE_ORDER_ID_KEY_NAME]\nmfn_email = os.environ.get(constants.SHIP_FROM_EMAIL_ENV_VARIABLE)\n\n# Get order and order items\norder_response = api_utils.call_orders_api(method='get_order', order_id=order_id)\norder_items_response = api_utils.call_orders_api(method='get_order_items', order_id=order_id)\n\nlogger.info(f\"Orders API Response: {order_response}\")\nlogger.info(f\"Order Items API  Response: {order_items_response}\")\n\nmfn_order_items = get_order_item_list(order_items=order_items_response)\nmfn_ship_from_address = map_address(order_response.payload.default_ship_from_location_address, mfn_email=mfn_email)\n\nmfn_order = MfnOrder(order_items=mfn_order_items, ship_from_address=mfn_ship_from_address)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details with Amazon SP-API in Python\nDESCRIPTION: Implements order retrieval functionality using Amazon's SP-API Orders endpoint. The code initializes the API client, retrieves order details, shipping addresses, and maps the response to internal data structures. It handles both shipping addresses and order items mapping with proper error handling and data validation.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n        # Create an instance of the ApiUtils class\n        api_utils = ApiUtils(region_code,\n                             refresh_token,\n                             constants.ORDERS_API_TYPE)\n\n        # Retrieve email address for the label sending\n        ship_from_email = os.environ.get(constants.SHIP_FROM_EMAIL_ENV_VARIABLE)\n\n        # API calls to retrieve order and order items\n        order_response = api_utils.call_orders_api(method='get_order',\n                                                   order_id=get_order_lambda_input.credentials.orderId)\n        order_items_response = api_utils.call_orders_api(method='get_order_items',\n                                                         order_id=get_order_lambda_input.credentials.orderId)\n\n        order_address_response = api_utils.call_orders_api(method='get_order_address',\n                                                           order_id=get_order_lambda_input.credentials.orderId)\n\n        # Check if the response has a payload attribute and use it directly\n        if hasattr(order_address_response, 'payload'):\n            ship_to_address = map_address(order_address_response.payload.shipping_address)\n            ship_from_address = map_address(order_response.payload.default_ship_from_location_address, ship_from_email)\n\n        # Return the ShippingOrder object in JSON format\n        get_order_lambda_input.mfnOrder = MfnOrder()\n        get_order_lambda_input.mfnOrder.orderItems = map_order_items(order_items_response.payload.order_items)\n        get_order_lambda_input.mfnOrder.shipFromAddress = ship_from_address\n        get_order_lambda_input.mfnOrder.shipToAddress = ship_to_address\n\n        result = asdict(get_order_lambda_input)\n        return result\n\ndef map_address(order_address, ship_from_email=None):\n    # Initialize OrdersApiAddress object with available attributes\n    address_mapping = {\n        'name': order_address.name,\n        'addressLine1': order_address.address_line1,\n        'addressLine2': order_address.address_line2,\n        'addressLine3': order_address.address_line3,\n        'city': order_address.city,\n        'countryCode': order_address.country_code,\n        'postalCode': order_address.postal_code,\n        'stateOrRegion': order_address.state_or_region,\n        'phoneNumber': re.sub(r'[^0-9]', '', order_address.phone or ''),\n        'email': ship_from_email\n    }\n\n    return Address(**address_mapping)\n\ndef map_order_items(order_items_list):\n    order_items = []\n    for item_dict in order_items_list:\n        item_price_dict = item_dict.get(\"ItemPrice\", {})\n        currency_code = item_price_dict.get(\"CurrencyCode\", \"USD\")  # Default to USD if not specified\n        amount_str = item_price_dict.get(\"Amount\")\n        if amount_str is None:\n            logging.error(f\"Amount not found for OrderItemId: {item_dict.get('OrderItemId')}\")\n            continue\n        try:\n            amount = float(amount_str)\n        except ValueError:\n            logging.error(f\"Invalid amount value '{amount_str}' for OrderItemId: {item_dict.get('OrderItemId')}\")\n            continue\n\n        value = Currency(value=amount, unit=currency_code)\n        order_item = OrderItem(\n            orderItemId=item_dict.get(\"OrderItemId\"),\n            sku=item_dict.get(\"SellerSKU\"),\n            quantity=int(item_dict.get(\"QuantityOrdered\", 0)),  # Default to 0 if not specified\n            value=value\n        )\n        order_items.append(order_item)\n    return order_items\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduled Package with EasyShip API in Java\nDESCRIPTION: This snippet shows how to create a scheduled package with preferred shipment handover slots using the EasyShip API. It prepares the request with order details and preferred time slot, initializes the API client, calls the createScheduledPackage operation, and returns the scheduled package ID.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    //Get list of handover shipment slot for the order\n    CreateScheduledPackageRequest request = new CreateScheduledPackageRequest()\n        .amazonOrderId(input.getAmazonOrderId())\n        .marketplaceId(input.getMarketplaceId())\n        .packageDetails(new PackageDetails()\n                .packageTimeSlot(input.getTimeSlots().get(0)));\n\n    logger.log(\"EasyShip API -  CreateScheduledPackage request: \" + new Gson().toJson(request));\n\n    EasyShipApi easyShipApi = ApiUtils.getEasyShipApi(input);\n    ModelPackage response = easyShipApi.createScheduledPackage(request);\n    logger.log(\"EasyShip API -  CreateScheduledPackage response: \" + new Gson().toJson(response));\n\n    // Store ScheduledPackageId to validate scheduled correctly using this information on the next step\n    input.setScheduledPackageId(response.getScheduledPackageId());\n    return input;\n```\n\n----------------------------------------\n\nTITLE: Processing New Secret Notifications from SQS Queue\nDESCRIPTION: Function that processes SQS messages containing new client secrets. It parses the notification, verifies it's a new secret notification, extracts the relevant data, and handles storage, transition configuration, and validation of the new secret.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleNewSecretNotification(sqsMessage) {\n    try {\n        const notification = JSON.parse(sqsMessage.Body);\n        \n        // Verify it's a new secret notification\n        if (notification.notificationType !== 'APPLICATION_OAUTH_CLIENT_NEW_SECRET') {\n            return;\n        }\n\n        const {\n            clientId,\n            newClientSecret,\n            newClientSecretExpiryTime,\n            oldClientSecretExpiryTime\n        } = notification.payload.applicationOAuthClientNewSecret;\n\n        // 1. Store new secret securely\n        await storeNewSecret({\n            clientId,\n            secret: newClientSecret,\n            expiryTime: newClientSecretExpiryTime\n        });\n\n        // 2. Configure transition period\n        await configureSecretTransition({\n            oldExpiryTime: oldClientSecretExpiryTime,\n            newSecret: newClientSecret\n        });\n\n        // 3. Validate new secret works\n        await validateNewSecret(clientId, newClientSecret);\n\n    } catch (error) {\n        handleSecretUpdateError(error);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Eligible Offers for Re-pricing Using Python\nDESCRIPTION: This function processes pricing notifications by fetching SKUs from a DynamoDB database, matching them with notification data, and preparing a consolidated list of offers eligible for price adjustments. It maps database SKU attributes and notification offer attributes to create a complete view of each offer for further processing.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef lambda_handler(event, context):\n    # Instantiate PricingOfferLambdaInput object from the input event\n    lambda_input = PricingOfferLambdaInput(**event)\n    \n    # Create an empty list to append updated offers here\n    final_offer_list = []\n\n    # Fetch SKUs from query result\n    database_sku_offers = fetch_sku_list_from_db(lambda_input.asin,\n                                                 lambda_input.buyBox.condition.lower(),\n                                                 lambda_input.seller.sellerId,\n                                                 lambda_input.credentials.marketplaceId)\n\n    # Map SKUs from query result with Notification Offers\n    for database_offer in database_sku_offers:\n        pricing_offer = PricingOfferLambdaInput()\n\n        # Mapping information fetched from DB\n        pricing_offer.isFulfilledByAmazon = database_offer[constants.SELLER_TABLE_IS_FULFILLED_BY_AMAZON_KEY_NAME]\n        pricing_offer.itemSku = database_offer[constants.SELLER_TABLE_HASH_KEY_NAME]\n        pricing_offer.minThreshold = database_offer[constants.SELLER_TABLE_THRESHOLD_KEY_NAME]\n        pricing_offer.useCompetitivePrice = database_offer[constants.SELLER_TABLE_USE_COMPETITIVE_PRICE]\n        pricing_offer.priceChangeRule = PriceChangeRule(\n            value=database_offer[constants.SELLER_TABLE_PRICE_CHANGE_AMOUNT_KEY_NAME],\n            rule=database_offer[constants.SELLER_TABLE_PRICE_CHANGE_RULE_KEY_NAME])\n\n        # Mapping information fetched from Notification\n        pricing_offer.buyBox = lambda_input.buyBox\n        pricing_offer.sellerId = lambda_input.seller.sellerId\n        pricing_offer.asin = lambda_input.asin\n        pricing_offer.credentials = lambda_input.credentials\n\n        # Matching Notification Offers from notification based on isFBA Attribute\n        matching_notification_offer = next((offer for offer in lambda_input.seller.offers\n                                            if pricing_offer.isFulfilledByAmazon == offer.isFulfilledByAmazon), None)\n\n        # Map listing and shipping price if mapping was successful\n        if matching_notification_offer:\n            pricing_offer.sellerOffer = matching_notification_offer\n\n        # Append to general list\n        final_offer_list.append(asdict(pricing_offer))\n\n    # Prepare and return the final result containing updated offers\n    result = {\n        \"offers\": final_offer_list\n    }\n\n    return result\n```\n\n----------------------------------------\n\nTITLE: Creating Data Kiosk Query in Python\nDESCRIPTION: Demonstrates how to set up the API client, build the request body, and execute the createQuery operation using the Data Kiosk API in Python.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi_utils = ApiUtils(refresh_token, region_code, constants.DATA_KIOSK_API_TYPE)\n\nbody = {\n    \"query\": query_code\n}\n\ncreate_query_result = api_utils.call_datakiosk_api('create_query', body=body)\n\nlogger.info(f\"CreateQuery API Response: {create_query_result}\")\n```\n\n----------------------------------------\n\nTITLE: Downloading and Storing Shipping Labels with Java SP-API\nDESCRIPTION: Handles the process of downloading shipping labels using the Report API, storing them in S3, and generating pre-signed URLs. Initializes the Report API client, retrieves the report document, downloads it, stores in S3 bucket, and generates a pre-signed URL for access.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n    //Initialize API Client\n    ReportsApi reportsApi = ApiUtils.getReportsApi(input);\n    \n    // Get reportDocumentId from ReportAPI\n    String reportDocumentId = waitForReportCompletion(reportsApi, input, logger);\n    \n    // Get Report Document\n    String documentUrl = getReportDocumentUrl(reportsApi, reportDocumentId, logger);\n    \n    // Download Report Document\n    InputStream documentStream = HttpFileTransferUtil.download(documentUrl, null);\n    // Get S3 bucket name from environment variables\n    String s3BucketName = System.getenv(EASYSHIP_LABEL_S3_BUCKET_NAME_ENV_VARIABLE);\n    // Generate S3 key for the document\n    String objectKey = generateObjectKey(input);\n    logger.log(\"S3 Bucket Name: \" + s3BucketName + \" S3 Object Key: \" + objectKey);\n\n    //Store into S3 bucket\n    storeDocumentInS3(s3BucketName, objectKey, documentStream);\n    \n    //Generate a presigned url to browse the label\n    return generatePresignedUrl(s3BucketName, objectKey, logger);\n```\n\n----------------------------------------\n\nTITLE: Handling New Client Secret Notification and Update in Java\nDESCRIPTION: This code shows how to process new client secret notifications received after rotation, validate client IDs, and update the client secret in AWS Secrets Manager. This is the final step in the LWA credential rotation workflow.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic String handleRequest(SQSEvent event, Context context) {\n    for (SQSEvent.SQSMessage message : event.getRecords()) {\n        // Parse the notification payload\n        NotificationPayload notificationPayload = mapNotification(message.getBody());\n\n        // Validate the notification type\n        if (!\"APPLICATION_OAUTH_CLIENT_NEW_SECRET\".equals(notificationPayload.getNotificationType())) {\n            continue;\n        }\n\n        // Validate the clientId\n        String clientId = notificationPayload.getPayload().getApplicationOAuthClientNewSecret().getClientId();\n        if (!clientId.equals(storedClientId)) {\n            continue;\n        }\n\n        // Update the new client secret in Secrets Manager\n        // Update this section to align with your secret storage logic\n        String newClientSecret = notificationPayload.getPayload().getApplicationOAuthClientNewSecret().getNewClientSecret();\n        String secretArn = System.getenv(SP_API_APP_CREDENTIALS_SECRET_ARN_ENV_VARIABLE);\n        SecretsManagerClient client = SecretsManagerClient.builder().build();\n        PutSecretValueRequest request = PutSecretValueRequest.builder()\n                .secretId(secretArn)\n                .secretString(String.format(\"{\\\"AppClientId\\\":\\\"%s\\\",\\\"AppClientSecret\\\":\\\"%s\\\"}\", clientId, newClientSecret))\n                .build();\n        client.putSecretValue(request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Package Tracking Details Request in Java using Amazon Selling Partner API\nDESCRIPTION: This code snippet demonstrates how to handle a request for package tracking details using the FBA Outbound API. It initializes the API client, iterates through package numbers, and calls the getPackageTrackingDetails method for each package.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic MCFTrackingDetailsLambdaInput handleRequest(MCFTrackingDetailsLambdaInput input, Context context) {\n    \n    try {\n        FbaOutboundApi fbaoApi = getFbaOutboundApi(input.getRegionCode(), input.getRefreshToken());\n        \n        for (Integer packageNumber : input.getPackageNumbers()) {\n            GetPackageTrackingDetailsResponse getPackageTrackingDetailsResponse = fbaoApi.getPackageTrackingDetails(packageNumber);\n            \n            // Examine and continue processing package tracking details\n            // ...\n        }\n\n    } catch (Exception e) {\n        throw new InternalError(\"Calling FBAOutbound GetPackageTrackingDetails failed\", e);\n    }\n\n    return input;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Order Items and Checking Inventory in Python\nDESCRIPTION: This snippet processes order items, checks inventory levels in DynamoDB, calculates package weight and dimensions, and updates the MFN order object. It requires boto3 for AWS interactions and custom constants for table names and attributes.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    # Initialize package weight and dimensions\n    package_weight_value = 0\n    package_weight_unit = \"LB\"\n\n    package_length = 0\n    package_width = 0\n    package_height = 0\n    package_size_unit = \"GM\"\n\n    get_order_lambda_input = ShippingLambdaInput(**event)\n\n    # Check if mfnOrder is not None\n    if get_order_lambda_input.mfnOrder:\n        # Check if orderItems is not None\n        if get_order_lambda_input.mfnOrder.orderItems:\n            # Iterate over all order items and retrieve stock, size, and weight from the database\n            for order_item in get_order_lambda_input.mfnOrder.orderItems:\n                # Retrieve the item from DynamoDB by SKU\n                # Update this section to match your product's logic\n                key = {constants.INVENTORY_TABLE_HASH_KEY_NAME: {\"S\": order_item.sku}}\n\n                dynamodb = boto3.client(constants.AWS_DYNAMO_DB_CLIENT_KEY_NAME)\n                get_item_result = dynamodb.get_item(TableName=os.environ.get(constants.INVENTORY_TABLE_NAME_ENV_VARIABLE),\n                                                    Key=key)\n                item = get_item_result.get(\"Item\", {})\n\n                stock = int(item.get(constants.INVENTORY_TABLE_STOCK_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n                if stock < order_item.quantity:\n                    raise Exception(f\"Stock level for SKU {order_item.sku} \"\n                                    f\"is not enough to fulfill the requested quantity\")\n\n                item_weight_value = int(item.get(constants.INVENTORY_TABLE_WEIGHT_VALUE_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n\n                # Valid values for the database records are uppercase: [OZ, G]\n                item_weight_unit = item.get(constants.INVENTORY_TABLE_WEIGHT_UNIT_ATTRIBUTE_NAME, {\"S\": \"\"})[\"S\"]\n\n                item_length = int(item.get(constants.INVENTORY_TABLE_LENGTH_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n                item_width = int(item.get(constants.INVENTORY_TABLE_WIDTH_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n                item_height = int(item.get(constants.INVENTORY_TABLE_HEIGHT_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n\n                # Valid values for the database records are uppercase: [INCHES, CENTIMETERS]\n                item_size_unit = item.get(constants.INVENTORY_TABLE_SIZE_UNIT_ATTRIBUTE_NAME, {\"S\": \"\"})[\"S\"]\n\n                # Create a Dimensions object for the item weight\n                item_dimensions = Dimensions(unit=item_size_unit, length=item_length, width=item_width,\n                                             height=item_height)\n\n                # Create a Weight object for the item weight\n                item_weight = Weight(unit=item_weight_unit, value=float(str(item_weight_value)))\n\n                # Update the order item with the retrieved weight\n                order_item.itemWeight = item_weight\n                order_item.dimensions = item_dimensions\n\n                # Package weight is calculated by adding the individual weights\n                # Update this section to match your selling partners' logic\n                package_weight_value += item_weight_value\n                package_weight_unit = item_weight_unit\n\n                # Package size is calculated by adding the individual sizes\n                # Update this section to match your selling partners' logic\n                package_length += item_length\n                package_width += item_width\n                package_height += item_height\n                package_size_unit = item_size_unit\n\n            get_order_lambda_input.mfnOrder.weight = Weight(unit=package_weight_unit,\n                                                            value=float(str(package_weight_value)))\n\n            get_order_lambda_input.mfnOrder.dimensions = Dimensions(length=package_length, width=package_width,\n                                                                    height=package_height, unit=package_size_unit)\n            \n    return asdict(get_order_lambda_input)\n```\n\n----------------------------------------\n\nTITLE: Creating Fulfillment Orders with Amazon FBA Outbound API in Java\nDESCRIPTION: This snippet demonstrates how to create a fulfillment order through the Amazon FBA Outbound API. It initializes the API client, builds the CreateFulfillmentOrderRequest object with all necessary order details, and executes the call to create the fulfillment order.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic MCFCreateOrderLambdaInput handleRequest(MCFCreateOrderLambdaInput input, Context context) {\n    try {\n        FbaOutboundApi fbaoApi = getFbaOutboundApi(input.getRegionCode(), input.getRefreshToken());\n        \n        CreateFulfillmentOrderRequest createFulfillmentOrderRequest = buildCreateFulfillmentOrderRequest(input.getCreateFulfillmentOrderNotification());\n        \n        fbaoApi.createFulfillmentOrder(createFulfillmentOrderRequest);\n    } catch (Exception e) {\n        throw new InternalError(\"Calling FBAOutbound CreateOrder failed\", e);\n    }\n    \n    return input;\n}\n\nprivate CreateFulfillmentOrderRequest buildCreateFulfillmentOrderRequest(CreateFulfillmentOrderNotification createFulfillmentOrderNotification) {\n    return new CreateFulfillmentOrderRequest()\n            .marketplaceId(createFulfillmentOrderNotification.getMarketplaceId())\n            .sellerFulfillmentOrderId(createFulfillmentOrderNotification.getSellerFulfillmentOrderId())\n            .displayableOrderId(createFulfillmentOrderNotification.getDisplayableOrderId())\n            .displayableOrderDate(createFulfillmentOrderNotification.getDisplayableOrderDate())\n            .displayableOrderComment(createFulfillmentOrderNotification.getDisplayableOrderComment())\n            .shippingSpeedCategory(buildShippingSpeedCategory(createFulfillmentOrderNotification.getShippingSpeedCategory()))\n            .deliveryWindow(buildDeliveryWindow(createFulfillmentOrderNotification.getDeliveryWindow()))\n            .destinationAddress(buildRequestAddress(createFulfillmentOrderNotification.getDestinationAddress()))\n            .fulfillmentAction(buildFulfillmentAction(createFulfillmentOrderNotification.getFulfillmentAction()))\n            .fulfillmentPolicy(buildFulfillmentPolicy(createFulfillmentOrderNotification.getFulfillmentPolicy()))\n            .codSettings(buildCODSettings(createFulfillmentOrderNotification.getCodSettings()))\n            .shipFromCountryCode(createFulfillmentOrderNotification.getShipFromCountryCode())\n            .notificationEmails(buildNotificationEmails(createFulfillmentOrderNotification.getNotificationEmails()))\n            .featureConstraints(buildFeatureConstraints(createFulfillmentOrderNotification.getFeatureConstraints()))\n            .items(buildOrderItems(createFulfillmentOrderNotification.getItems()));\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Processing for RDT Generation\nDESCRIPTION: Server-side function that generates a Restricted Data Token by validating the partner, refreshing access tokens if needed, and making a request to Amazon's SP-API. It handles the complete backend flow for RDT generation.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function generateRDTToken(partnerId, resources) {\n  const partner = await getPartnerDetails(partnerId);\n  const accessToken = await refreshAccessTokenIfNeeded(partner);\n  \n  const response = await axios.post(\n    `${partner.apiEndpoint}/tokens/2021-03-01/restrictedDataToken`,\n    { restrictedResources: resources },\n    {\n      headers: {\n        'x-amz-access-token': accessToken,\n        'Content-Type': 'application/json'\n      }\n    }\n  );\n  \n  return response.data;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Input Structure for Amazon SP-API Inbound Shipment\nDESCRIPTION: Complete JSON structure for creating inbound shipments through SP-API. Includes API credentials, inbound plan details, packing information, transportation options, and label generation parameters.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiCredentials\": {\n    \"refreshToken\": \"Atzr|Abc123def456xyz789\",\n    \"regionCode\": \"NA\"\n  },\n  \"createInboundPlanRequest\": {\n    \"destinationMarketplace\": \"ATVPDKIKX0DER\",\n    \"msku\": \"XX-XXXX-XXXX\",\n    \"labelOwner\": \"AMAZON or SELLER or NONE\",\n    \"prepOwner\": \"AMAZON or SELLER or NONE\",\n    \"sourceAddress\": {\n      \"addressLine1\": \"xxx xxx\",\n      \"addressLine2\": \"xxx\",\n      \"city\": \"xxx\",\n      \"stateOrProvinceCode\": \"xx\",\n      \"countryCode\": \"xx\",\n      \"postalCode\": \"xxxxx\",\n      \"name\": \"Test\",\n      \"phoneNumber\": \"xxxxxxxxxx\",\n      \"companyName\": \"Testing\",\n      \"email\": \"test@email.com\"\n    },\n    \"inboundPlanName\": \"SPD_PCP_TestInboundPlan\"\n  },\n  \"setPackingInformationRequest\": {\n    \"weight\": {\n      \"unit\": \"LB\",\n      \"value\": 1\n    },\n    \"dimensions\": {\n      \"unitOfMeasurement\": \"IN\",\n      \"length\": 5,\n      \"width\": 5,\n      \"height\": 5\n    }\n  },\n  \"generateTransportationOptionsRequest\": {\n    \"readyToShipWindow\": \"yyyy-mm-ddT00:00:00Z\"\n  },\n  \"getLabelsRequest\": {\n    \"PageType\": \"PackageLabel_Letter_2\",\n    \"PageSize\": 1,\n    \"LabelType\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Price Data with Python SP-API\nDESCRIPTION: Python implementation for fetching pricing data using the SP-API Pricing API. Handles API client creation, request preparation, error checking, and price data extraction.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the ApiUtils class for calling the Pricing API\napi_utils = ApiUtils(pricing_offer_input.credentials.refreshToken,\n                     region_code,\n                     constants.PRICING_API_TYPE)\n\n# Prepare request content - a list of SKUs\nsku_list = {\n    'skus': [pricing_offer_input.itemSku]\n}\n\n# Call the pricing API to get pricing information for the specified SKU\nget_pricing_response = api_utils.call_pricing_api(method='get_pricing',\n                                                  marketplace_id=pricing_offer_input.credentials.marketplaceId,\n                                                  item_type=\"Sku\", **sku_list)\n\n# Check for a client error response from the pricing API\nif get_pricing_response.payload[0][\"status\"] == \"ClientError\":\n    # Return placeholders for listing and shipping price\n    return {\n        \"listingPrice\": {\n            \"amount\": -1\n        },\n        \"shippingPrice\": {\n            \"amount\": -1\n        },\n        \"issues\": \"ClientError received from Pricing API\"\n    }\n\n# Extract pricing data from the API response\npricing_payload = get_pricing_response.payload[0]\noffer_data = pricing_payload['Product']['Offers'][0]['BuyingPrice']\n\n# Extract listing and shipping prices from the offer data\nlisting_price = camel_to_snake_case_dict(offer_data['LandedPrice'])\nshipping_price = camel_to_snake_case_dict(offer_data['Shipping'])\n\n# Prepare and return the result containing listing and shipping prices\nresult = {\n    \"listingPrice\": listing_price,\n    \"shippingPrice\": shipping_price,\n}\nreturn result\n```\n\n----------------------------------------\n\nTITLE: Implementing LWA Token Exchange (Python)\nDESCRIPTION: Function to perform the Login with Amazon token exchange, converting the authorization code to a refresh token using HTTP requests.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef _get_lwa_refresh_token(spapi_oauth_code):\n        code_exchange_grant_type = \"authorization_code\"\n        url = Constants.LWA_ENDPOINT\n        http = urllib3.PoolManager()\n        payload = {\n            'client_id': Constants.CLIENT_ID,\n            'client_secret': Constants.CLIENT_SECRET,\n            'code': spapi_oauth_code,\n            'grant_type': code_exchange_grant_type\n        }\n        \n        data = urllib.parse.urlencode(payload)\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        try:\n            response = http.request('POST', url, headers=headers, body=data)\n            print('Status code:', response.status)\n            json_response = json.loads(response.data)\n        except Exception as e:\n            print(str(e))\n        else:\n            selling_partner_refresh_token = json_response.get('refresh_token')\n            # Store refresh token in safe storage\n            # Retrieve and exhange with access_token as needed\n            return selling_partner_refresh_token\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Consent Authorization Redirect (Python Flask)\nDESCRIPTION: Flask route to handle the redirect after user consent, extracting the authorization code and other parameters.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@application.route(f\"{APPLICATION_REDIRECT_URI}\")\ndef handle_authorization_redirect():\n    spapi_oauth_code = request.args[\"spapi_oauth_code\"]\n    state = request.args[\"state\"] #Verify the state token for cross-site request forgery\n    selling_partner_id = request.args[\"selling_partner_id\"] # Store the selling partner merchant token or vendor group code\n    ...\n```\n\n----------------------------------------\n\nTITLE: Generating Restricted Data Tokens (RDT) in Frontend\nDESCRIPTION: Function to request a Restricted Data Token from a backend service. It specifies the partner ID and the API resource (Orders API in this example) for which the token is needed, then displays the resulting token to the user.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function generateRDT(partnerId, resource) {\n  try {\n    const response = await fetch(`${API_ENDPOINT}/partners/${partnerId}/tokens/rdt`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        restrictedResources: [{\n          method: 'GET',\n          path: '/orders/v0/orders'  // Example for Orders API\n        }]\n      })\n    });\n    const data = await response.json();\n    displayRDTToken(data.restrictedDataToken);\n  } catch (error) {\n    console.error('RDT generation failed:', error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SKU Checks in Java with SP-API\nDESCRIPTION: Java implementation for retrieving and processing SKU data from DynamoDB based on ASIN, seller ID, condition and marketplace ID. Includes functionality to build pricing offers and handle seller notifications.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic PricingOffers handleRequest(StateMachineInput input, Context context) {\n    List<PricingLambdaInput> sellerOffers = Lists.newArrayList();\n\n    //Retrieve the items from DynamoDB by ASIN, seller ID, condition, and marketplace ID\n    //Update this section to match your product's logic\n    List<Map<String, AttributeValue>> skus = retrieveSKUs(\n            input.getAsin(),\n            input.getSeller().getSellerId(),\n            input.getBuyBox().getCondition(),\n            input.getCredentials().getMarketplaceId());\n\n    for (Map<String, AttributeValue> sku : skus) {\n        try {\n            PricingLambdaInput pricingOffer = PricingLambdaInput.builder()\n                    .isFulfilledByAmazon(sku.get(SELLER_ITEMS_TABLE_IS_FULFILLED_BY_AMAZON_KEY_NAME).bool())\n                    .itemSku(sku.get(SELLER_ITEMS_TABLE_SKU_KEY_NAME).s())\n                    .minThreshold(Float.parseFloat(sku.get(SELLER_ITEMS_TABLE_MIN_THRESHOLD_KEY_NAME).n()))\n                    .priceChangeRule(PriceChangeRule.builder()\n                            .value(Float.parseFloat(sku.get(SELLER_ITEMS_TABLE_PRICE_CHANGE_RULE_AMOUNT_KEY_NAME).n()))\n                            .rule(sku.get(SELLER_ITEMS_TABLE_PRICE_CHANGE_RULE_KEY_NAME).s())\n                            .build())\n\n                    .useCompetitivePrice(sku.get(SELLER_ITEMS_TABLE_USE_COMPETITIVE_PRICE).bool())\n                    .buyBox(input.getBuyBox())\n                    .sellerId(input.getSeller().getSellerId())\n                    .asin(input.getAsin())\n                    .credentials(input.getCredentials())\n                    .build();\n\n            List<Offer> notificationOffers = input.getSeller().getOffers().stream()\n                    .filter(o -> o.isFulfilledByAmazon() == pricingOffer.isFulfilledByAmazon())\n                    .collect(Collectors.toList());\n\n            if (notificationOffers.size() == 1) {\n                pricingOffer.setSellerOffer(notificationOffers.get(0));\n            } else if (notificationOffers.size() > 1) {\n                throw new InternalError(String.format(\"Error: %d offers where found in the notification for SKU %s\",\n                        notificationOffers.size(),\n                        sku.get(SELLER_ITEMS_TABLE_SKU_KEY_NAME).s()));\n            }\n\n            sellerOffers.add(pricingOffer);\n        } catch (Exception e) {\n            throw new InternalError(\"CheckSku Lambda failed\", e);\n        }\n    }\n\n    return PricingOffers.builder()\n            .offers(sellerOffers)\n            .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Shipping Rates using Amazon Shipping API V2 in Python\nDESCRIPTION: This snippet demonstrates how to get shipping rates using the Amazon Shipping API V2. It initializes the API client, prepares the request, calls the API, and processes the shipment services. It requires the ApiUtils class and custom constants for API configuration.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n        # Create an instance of the ApiUtils class\n        api_utils = ApiUtils(region_code=region_code,\n                             refresh_token=refresh_token,\n                             api_type=constants.SHIPPING_API_TYPE)\n\n        # Get eligible shipment services for the order\n        get_rates_request = get_rates_request_body(mfn_order=get_rates_lambda_input.mfnOrder,\n                                                   order_id=get_rates_lambda_input.credentials.orderId)\n\n        get_rates_response = api_utils.call_shipping_api('get_rates', body=json.dumps(get_rates_request))\n\n        if get_rates_response and hasattr(get_rates_response, 'payload') and get_rates_response.payload:\n            get_rates_lambda_input.rates = Rates()\n            get_rates_lambda_input.rates.requestToken = get_rates_response.payload.request_token\n            get_rates_lambda_input.rates = get_rates_response.payload.rates\n        else:\n            error_msg = \"No rates found in the response\"\n            raise Exception(error_msg)\n\n        return get_rates_response.payload.to_dict()\n\n    except Exception as e:\n        raise Exception(\"Calling Shipping API failed\") from e\n\n\ndef get_rates_request_body(mfn_order, order_id):\n    # Prepare items list\n    items_list = [{\n        \"itemValue\": asdict(item.value),\n        \"description\": shipping_preferences.ITEM_DESCRIPTION,\n        \"itemIdentifier\": item.orderItemId,\n        \"quantity\": item.quantity,\n        \"weight\": asdict(item.itemWeight)\n    } for item in mfn_order.orderItems]\n\n    # Define requested document specification\n    requested_document_specification = {\n        \"format\": shipping_preferences.LABEL_FORMAT_PDF,\n        \"size\": shipping_preferences.LABEL_SIZE,\n        \"printOptions\": shipping_preferences.PRINT_OPTIONS\n    }\n\n    # Prepare packages\n    package_data = {\n        \"dimensions\": asdict(mfn_order.dimensions),\n        \"weight\": asdict(mfn_order.weight),\n        \"items\": items_list,\n        \"insuredValue\": shipping_preferences.PACKAGES_INSURED_VALUE,\n        \"packageClientReferenceId\": f\"Order_{order_id}_Package_1\"\n    }\n\n    # Prepare request body\n    request_body = {\n        \"shipFrom\": asdict(mfn_order.shipFromAddress),\n        \"shipTo\": asdict(mfn_order.shipToAddress),\n        \"returnTo\": mfn_order.returnToAddress if getattr(mfn_order, 'returnToAddress', None) else None,\n        \"packages\": [package_data],\n        \"channelDetails\": {\n            \"channelType\": shipping_preferences.CHANNEL_TYPE,\n            \"amazonOrderDetails\": {\"orderId\": order_id}\n        },\n        \"labelSpecifications\": requested_document_specification,\n        \"shipmentType\": shipping_preferences.SHIPMENT_TYPE,\n        \"serviceSelection\": shipping_preferences.SERVICE_SELECTION\n    }\n\n    return request_body\n```\n\n----------------------------------------\n\nTITLE: Calling Sellers API and Rendering Results (Python Flask)\nDESCRIPTION: Flask route to get an access token using the refresh token, call the Sellers API to retrieve marketplace participations, and render the results.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@application.route(f\"{APPLICATION_REDIRECT_URI}\")\ndef handle_authorization_redirect():\n    ...\n    if \"sellercentral\" in SELLER_VENDOR_CENTRAL_URL:\n        marketplaceParticipations = getMarketplaceParticipations(refresh_token)\n        return render_template(\"authorized.html\", response=marketplaceParticipations)\n    else:\n        # Sellers API is for sellers only. Vendors APIs can be called at this point.\n        return render_template(\"authorized.html\", response=None)\n\ndef getMarketplaceParticipations(refresh_token):\n    region_code = Constants.NA_REGION_CODE\n    use_sandbox = \"No\"\n    api_utils = ApiUtils(refresh_token, region_code, 'sellers', use_sandbox)\n    return api_utils.call_sellers_api(method='get_marketplace_participations')\n```\n\n----------------------------------------\n\nTITLE: Creating Data Kiosk Query in Java\nDESCRIPTION: Shows how to initialize the Data Kiosk API client, create the request specification, and call the createQuery method in Java.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nQueriesApi dataKioskApi = ApiUtils.getDataKioskApi(regionCode, refreshToken);\n\nCreateQuerySpecification request = new CreateQuerySpecification();\nrequest.setQuery(queryCode);\n\nCreateQueryResponse response = dataKioskApi.createQuery(request);\nlogger.log(String.format(\"CreateQuery API response: %s\", new Gson().toJson(response)));\n```\n\n----------------------------------------\n\nTITLE: Checking Inventory for Easy Ship Orders in Java\nDESCRIPTION: This code handles inventory verification for Easy Ship orders. It queries DynamoDB to check stock levels and retrieves product dimensions and weight for each ordered item. The code calculates total package weight and dimensions, which are required for scheduling shipments.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    // Iterate over all order items and retrieve stock, size and weight from the database\n    for (EasyShipOrderItem orderItem : input.getEasyShipOrder().getOrderItems()) {\n    //Retrieve the item from DynamoDB by SKU\n    //Update this section to match your product's logic\n        Map<String, AttributeValue> key = new HashMap<>();\n        key.put(INVENTORY_TABLE_HASH_KEY_NAME, AttributeValue.fromS(orderItem.getSku()));\n        GetItemRequest getItemRequest = GetItemRequest.builder()\n            .tableName(System.getenv(INVENTORY_TABLE_NAME_ENV_VARIABLE))\n            .key(key)\n            .build();\n    \n        DynamoDbClient dynamoDB = DynamoDbClient.builder().build();\n        GetItemResponse getItemResult = dynamoDB.getItem(getItemRequest);\n        Map<String, AttributeValue> item = getItemResult.item();\n        \n        String stock = item.get(INVENTORY_TABLE_STOCK_ATTRIBUTE_NAME).n();\n    \n        if (parseLong(stock) < orderItem.getQuantity()) {\n            throw new InternalError(\n            String.format(\"Stock level for SKU {%s} is not enough to fulfill the requested quantity\",\n            orderItem.getSku()));\n        }\n    \n        long itemWeightValue = parseLong(item.get(INVENTORY_TABLE_WEIGHT_VALUE_ATTRIBUTE_NAME).n());\n        //Valid values for the database records are uppercase: [OZ, G]\n        String itemWeightUnit = item.get(INVENTORY_TABLE_WEIGHT_UNIT_ATTRIBUTE_NAME).s();\n        \n        long itemLength = parseLong(item.get(INVENTORY_TABLE_LENGTH_ATTRIBUTE_NAME).n());\n        long itemWidth = parseLong(item.get(INVENTORY_TABLE_WIDTH_ATTRIBUTE_NAME).n());\n        long itemHeight = parseLong(item.get(INVENTORY_TABLE_HEIGHT_ATTRIBUTE_NAME).n());\n        //Valid values for the database records are uppercase: [INCHES, CENTIMETERS]\n        String itemSizeUnit = item.get(INVENTORY_TABLE_SIZE_UNIT_ATTRIBUTE_NAME).s();\n        \n        Weight itemWeight = new Weight();\n        itemWeight.setValue(BigDecimal.valueOf(itemWeightValue));\n        itemWeight.setUnit(UnitOfWeight.valueOf(itemWeightUnit));\n    \n        //Package weight is calculated by adding the individual weights\n        //Update this section to match your selling partners' logic\n        packageWeightValue += itemWeightValue;\n        packageWeightUnit = itemWeightUnit;\n        \n        //Package size is calculated by adding the individual sizes\n        //Update this section to match your selling partners' logic\n        packageLength += itemLength;\n        packageWidth += itemWidth;\n        packageHeight += itemHeight;\n        packageSizeUnit = itemSizeUnit;\n    }\n\n    input.getEasyShipOrder().setPackageWeight(new Weight()\n        .value(BigDecimal.valueOf(packageWeightValue))\n        .unit(UnitOfWeight.valueOf(packageWeightUnit)));\n\n    input.getEasyShipOrder().setPackageDimensions(new Dimensions()\n        .length(BigDecimal.valueOf(packageLength))\n        .width(BigDecimal.valueOf(packageWidth))\n        .height(BigDecimal.valueOf(packageHeight))\n        .unit(UnitOfLength.valueOf(packageSizeUnit)));\n    return input;\n```\n\n----------------------------------------\n\nTITLE: Configuring Ngrok for Local HTTPS Tunneling\nDESCRIPTION: Bash commands for setting up Ngrok to create a secure HTTPS tunnel to the locally running Flask application. This allows the application to be accessed over the internet with HTTPS, which is required for the OAuth redirect URL.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nngrok config add-authtoken <token>\nngrok http 5000\n```\n\n----------------------------------------\n\nTITLE: Getting Eligible Shipment Services in Python\nDESCRIPTION: The Python implementation for retrieving eligible shipping services from the Merchant Fulfillment API. It initializes the API client with refresh token and region code, prepares the request with order details, calls the API, and stores the shipping service list in the order object.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the ApiUtils class\napi_utils = ApiUtils(refresh_token, region_code, constants.MFN_API_TYPE)\n\n# Get eligible shipment services for the order\neligible_shipment_request = get_eligible_shipment_request_body(mfn_order=mfn_order, order_id=order_id)\nlogger.info(f\"Merchant Fulfillment API - GetEligibleShipmentServices request: {eligible_shipment_request}\")\n\neligible_shipment_response = api_utils.call_mfn_api('get_eligible_shipment_services', body=eligible_shipment_request)\nmfn_order.shippingServiceList = [item for item in eligible_shipment_response.payload.shipping_service_list]\n\nreturn mfn_order.to_json()\n```\n\n----------------------------------------\n\nTITLE: Creating Shipments in Java\nDESCRIPTION: Creates a shipment using the MFN API by preparing the shipment request with order details, calling the API, and storing the shipment ID in DynamoDB.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nCreateShipmentRequest request = new CreateShipmentRequest()\n  .shipmentRequestDetails(new ShipmentRequestDetails()\n    .amazonOrderId(input.getOrderId())\n    .itemList(getItemList(input.getMfnOrder().getOrderItems()))\n    .shipFromAddress(input.getMfnOrder().getShipFromAddress())\n    .packageDimensions(input.getMfnOrder().getPackageDimensions())\n    .weight(input.getMfnOrder().getWeight())\n    .shippingServiceOptions(getDefaultShippingServiceOptions()))\n  .shippingServiceId(input.getMfnOrder().getPreferredShippingService().getShippingServiceId())\n  .shippingServiceOfferId(input.getMfnOrder().getPreferredShippingService().getShippingServiceOfferId());\n\nlogger.log(\"API Request: \" + new Gson().toJson(request));\n\nMerchantFulfillmentApi mfnApi = getMFNApi(input.getRegionCode(), input.getRefreshToken());\nCreateShipmentResponse response = mfnApi.createShipment(request);\n\nString shipmentId = response.getPayload().getShipmentId();\nstoreShipmentInformation(input.getOrderId(), shipmentId);\n\nreturn response.getPayload().getLabel();\n```\n\n----------------------------------------\n\nTITLE: Confirming Scheduled Shipment with EasyShip API in Java\nDESCRIPTION: This snippet demonstrates how to confirm a scheduled shipment using the EasyShip API. It initializes the API client, calls the getScheduledPackage operation with the Amazon Order ID and Marketplace ID, and validates the returned Scheduled Package ID against the one from the previous step.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    EasyShipApi easyShipApi = ApiUtils.getEasyShipApi(input);\n    ModelPackage response = easyShipApi.getScheduledPackage(input.getAmazonOrderId(), input.getMarketplaceId());\n    logger.log(\"EasyShip API -  CreateScheduledPackage response: \" + new Gson().toJson(response));\n    // Validate if scheduled correctly using ScheduledPackageId\n    if (!response.getScheduledPackageId().equals(input.getScheduledPackageId())) {\n        throw new IllegalArgumentException(\n        String.format(\"Amazon Order Id : %s was not scheduled correctly\", input.getAmazonOrderId()));\n    }\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Refresh Token (Python Flask)\nDESCRIPTION: Flask route to exchange the authorization code for a refresh token, which should be securely stored for future use.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@application.route(f\"{APPLICATION_REDIRECT_URI}\")\ndef handle_authorization_redirect():\n    ...\n    refresh_token = ApiUtils._get_lwa_refresh_token(spapi_oauth_code=spapi_oauth_code) # Store the refresh token safely for further authorizations.\n```\n\n----------------------------------------\n\nTITLE: Getting Eligible Shipment Services in Java\nDESCRIPTION: This Java code retrieves eligible shipping services using the Merchant Fulfillment API. It creates a request with order details, shipment dimensions, and weight, then calls the API to get available shipping options. The response is added to the order object for later processing.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Get eligible shipment services for the order\nGetEligibleShipmentServicesRequest request = new GetEligibleShipmentServicesRequest()\n  .shipmentRequestDetails(new ShipmentRequestDetails()\n    .amazonOrderId(input.getOrderId())\n    .itemList(getItemList(mfnOrder.getOrderItems()))\n    .shipFromAddress(mfnOrder.getShipFromAddress())\n    .packageDimensions(mfnOrder.getPackageDimensions())\n    .weight(mfnOrder.getWeight())\n    .shippingServiceOptions(getDefaultShippingServiceOptions()));\n\nlogger.log(\"API Request: \" + new Gson().toJson(request));\n\nMerchantFulfillmentApi mfnApi = getMFNApi(input.getRegionCode(), input.getRefreshToken());\nGetEligibleShipmentServicesResponse response = mfnApi.getEligibleShipmentServices(request);\n\nmfnOrder.setShippingServiceList(response.getPayload().getShippingServiceList());\nreturn mfnOrder;\n```\n\n----------------------------------------\n\nTITLE: Fetching SKUs from DynamoDB for Product Pricing\nDESCRIPTION: This function queries a DynamoDB table to retrieve SKUs associated with a specific ASIN, condition, seller ID, and marketplace ID. It uses boto3 to interact with DynamoDB and returns the matching items that meet the specified filtering criteria.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef fetch_sku_list_from_db(asin, condition, seller_id, marketplace_id):\n    # Initialize a session using Amazon DynamoDB\n    dynamodb = boto3.resource(constants.AWS_DYNAMO_DB_CLIENT_KEY_NAME)\n\n    # Create a DynamoDB table resource\n    table = dynamodb.Table(os.environ.get(constants.SELLER_TABLE_NAME_ENV_VARIABLE))\n\n    # Query DynamoDB table based on Filters provided\n    response = table.query(\n        KeyConditionExpression=Key(constants.SELLER_TABLE_ASIN_KEY_NAME).eq(asin),\n        FilterExpression=Attr(constants.SELLER_TABLE_SELLER_ID_KEY_NAME).eq(seller_id)\n                         & Attr(constants.SELLER_TABLE_CONDITION_KEY_NAME).eq(condition)\n                         & Attr(constants.SELLER_TABLE_MARKETPLACE_KEY_NAME).eq(marketplace_id)\n    )\n\n    return response['Items']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fulfillment Orders with Amazon FBA Outbound API in Java\nDESCRIPTION: This snippet shows how to retrieve information about a fulfillment order using the Amazon FBA Outbound API. It initializes the API client and calls the getFulfillmentOrder operation with the seller's fulfillment order ID to obtain order details.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic MCFCreateOrderLambdaInput handleRequest(MCFCreateOrderLambdaInput input, Context context) {\n\n    try {\n        FbaOutboundApi fbaoApi = getFbaOutboundApi(input.getRegionCode(), input.getRefreshToken());\n\n        GetFulfillmentOrderResponse getFulfillmentOrderResponse = fbaoApi.getFulfillmentOrder(input.getCreateFulfillmentOrderNotification().getSellerFulfillmentOrderId());\n    } catch (Exception e) {\n        throw new InternalError(\"Calling FBAOutbound GetOrder failed\", e);\n    }\n\n    return input;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing OAuth URL and Redirecting (Python Flask)\nDESCRIPTION: Flask route to handle the 'Authorize' button click, construct the OAuth URL, and redirect the user to Amazon's authorization page.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nSELLER_VENDOR_CENTRAL_URL_NA = \"https://sellercentral.amazon.com\"\nAPP_AUTH_PATH = f\"/apps/authorize/consent?application_id={APPLICATION_ID}&state={uuid.uuid4()}&version=beta\"\n\n@application.route(\"/authorize\")\ndef redirect_oauth():\n    return redirect(f\"{SELLER_VENDOR_CENTRAL_URL_NA}{APP_AUTH_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Details in Java\nDESCRIPTION: Demonstrates how to initialize the Data Kiosk API client, call the getDocument method, and handle the response, including empty document cases, in Java.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nQueriesApi dataKioskApi = ApiUtils.getDataKioskApi(regionCode, refreshToken);\n\nGetDocumentResponse response = dataKioskApi.getDocument(input.getDocument().getDocumentId());\nlogger.log(\"Data Kiosk API Response: \" + new Gson().toJson(response));\n\nif (response  != null) {\n    return Document.builder()\n            .documentId(response.getDocumentId())\n            .documentUrl(response.getDocumentUrl())\n            .build();\n} else {\n    return Document.builder()\n            .issues(\"DOCUMENT IS EMPTY, NO DATA IS AVAILABLE FOR THE GIVEN TIME RANGE\")\n            .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Preferred Shipment Method in Python\nDESCRIPTION: Implements logic to select preferred shipping service based on environment settings (cheapest/fastest). Includes comparator functions for sorting shipping services by price and delivery speed.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n        shipping_service_list = shipping_lambda_input.rates.rates\n\n        if len(shipping_service_list) == 0:\n            raise Exception(\"There are no shipping services to fulfill the order\")\n\n        # Select the shipping service based on the preference (cheapest/fastest)\n        shipping_lambda_input.rates.preferredRate = get_preferred_shipment(shipping_service_list)\n\n        return asdict(shipping_lambda_input)\n\ndef get_preferred_shipment(shipping_services):\n    # Get the shipping preference from the Lambda function's environment variable\n    # Update this section to match your product's logic\n    shipment_filter_type = os.environ.get(constants.SHIPMENT_FILTER_TYPE_ENV_VARIABLE)\n\n    if shipment_filter_type == constants.SHIPMENT_FILTER_TYPE_CHEAPEST:\n        shipping_services.sort(key=cmp_to_key(price_comparator))\n    elif shipment_filter_type == constants.SHIPMENT_FILTER_TYPE_FASTEST:\n        shipping_services.sort(key=cmp_to_key(speed_comparator))\n\n    return shipping_services[0]\n\ndef price_comparator(ship_service1, ship_service2):\n    return ship_service1.totalCharge.value - ship_service2.totalCharge.value\n\ndef speed_comparator(ship_service1, ship_service2):\n    promise_date1 = datetime.strptime(ship_service1.promise.deliveryWindow.start, '%Y-%m-%dT%H:%M:%SZ')\n    promise_date2 = datetime.strptime(ship_service2.promise.deliveryWindow.start, '%Y-%m-%dT%H:%M:%SZ')\n\n    return -1 if promise_date1 < promise_date2 else 1 if promise_date1 > promise_date2 else 0\n```\n\n----------------------------------------\n\nTITLE: Handling SP-API Reauthorization Callback\nDESCRIPTION: Backend function for processing the OAuth callback during reauthorization, including state validation, token exchange, and storage of token history.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handleReauthorizationCallback(params, stateData) {\n  const { spapi_oauth_code, state } = params;\n  \n  // Verify the state matches our records\n  if (!await verifyState(state)) {\n    throw new Error('Invalid state token');\n  }\n  \n  // Exchange the code for new tokens\n  const tokens = await exchangeAuthorizationCode(spapi_oauth_code);\n  \n  // Store token history\n  await storeTokenHistory(\n    stateData.partnerId,\n    stateData.previousRefreshToken,\n    tokens.refresh_token,\n    'reauthorization'\n  );\n  \n  // Update partner with new tokens\n  await updatePartnerTokens(stateData.partnerId, tokens);\n  \n  return {\n    status: 'AUTHORIZED',\n    message: 'Reauthorization successful'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Feed Request for Shipping Label with Feed API in Java\nDESCRIPTION: This snippet shows how to submit a feed request for printing a shipping label using the Feed API. It initializes the API client, creates a feed document, prepares and uploads the feed content, and creates a feed request. The process involves multiple API calls including createFeedDocument and createFeed operations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n    // Create Feeds document\n    FeedsApi feedsApi = ApiUtils.getFeedsApi(input);\n    String contentType = String.format(\"text/xml; charset=%s\", StandardCharsets.UTF_8);\n    CreateFeedDocumentSpecification createFeedDocumentbody = new CreateFeedDocumentSpecification().contentType(contentType);\n    CreateFeedDocumentResponse createFeedDocumentresponse = feedsApi.createFeedDocument(createFeedDocumentbody);\n    logger.log(\"Feed API -  Create Feeds document response: \" + new Gson().toJson(createFeedDocumentresponse));\n    \n    // Upload Feeds Document\n    String url = createFeedDocumentresponse.getUrl();\n    String content = XmlUtil.generateEasyShipAmazonEnvelope(\n            input.getSellerId(),input.getAmazonOrderId(), FEED_OPTIONS_DOCUMENT_TYPE_VALUE);\n            HttpFileTransferUtil.upload(content.getBytes(StandardCharsets.UTF_8), url);\n            \n    // Create Feeds\n    FeedOptions feedOptions = new FeedOptions();\n    feedOptions.put(FEED_OPTIONS_KEY_AMAZON_ORDER_ID, input.getAmazonOrderId());\n    feedOptions.put(FEED_OPTIONS_KEY_DOCUMENT_TYPE, FEED_OPTIONS_DOCUMENT_TYPE_VALUE);\n    String feedDocumentId = createFeedDocumentresponse.getFeedDocumentId();\n    CreateFeedSpecification createFeedbody = new CreateFeedSpecification()\n            .feedType(POST_EASYSHIP_DOCUMENTS)\n            .marketplaceIds(Collections.singletonList(input.getMarketplaceId()))\n            .feedOptions(feedOptions)\n            .inputFeedDocumentId(feedDocumentId);\n    logger.log(\"Feed API -  Create Feeds  request body: \" + new Gson().toJson(createFeedbody));\n    CreateFeedResponse createFeedResponse = feedsApi.createFeed(createFeedbody);\n    logger.log(\"Feed API -  Create Feeds  response: \" + new Gson().toJson(createFeedDocumentresponse));\n    input.setFeedId(createFeedResponse.getFeedId());\n    return input;\n```\n\n----------------------------------------\n\nTITLE: Updating Product Prices with Java using Amazon Selling Partner API\nDESCRIPTION: This Java Lambda handler updates product prices through the Amazon Selling Partner API. It retrieves current listing information, extracts pricing details, updates the price value while preserving existing discount information, and submits the changes back to Amazon.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic String handleRequest(PricingLambdaInput input, Context context) {\n    try {\n        String sellerId = input.getSellerId();\n        String itemSku = input.getItemSku();\n        List<String> marketplaceIds = Lists.newArrayList(input.getCredentials().getMarketplaceId());\n        String issueLocale = \"en_US\";\n        List<String> includedData = Lists.newArrayList(\"attributes\");\n\n        ListingsApi listingsApi = getListingsApi(System.getenv(REGION_CODE_ENV_VARIABLE), input.getCredentials().getRefreshToken());\n\n        Item listingsItem = listingsApi.getListingsItem(sellerId, itemSku, marketplaceIds, issueLocale, includedData);\n\n        ListingsItemPatchRequest patchRequestBody = getPatchListingsRequestBody(input.getNewListingPrice(), listingsItem);\n        ListingsItemSubmissionResponse response = listingsApi.patchListingsItem(sellerId, itemSku, marketplaceIds, patchRequestBody, issueLocale);\n    } catch (Exception e) {\n        throw new InternalError(\"SubmitPrice Lambda failed\", e);\n    }\n\n    return String.format(\"Finished submitting price update. New price is %f\", input.getNewListingPrice().getAmount());\n}\n\npublic ListingsItemPatchRequest getPatchListingsRequestBody(Amount newListingPrice, Item listingsItem) {\n    JsonObject attributes = listingsItem.getAttributes();\n    JsonArray purchasableOffer = attributes.getAsJsonArray(\"purchasable_offer\");\n\n    //Set the new value_with_tax to the purchasable offer\n    purchasableOffer.get(0).getAsJsonObject()\n            .getAsJsonArray(\"our_price\")\n            .get(0).getAsJsonObject()\n            .getAsJsonArray(\"schedule\")\n            .get(0).getAsJsonObject()\n            .addProperty(\"value_with_tax\", newListingPrice.amount);\n\n    PatchOperation patchOperation = new PatchOperation()\n            .op(PatchOperation.OpEnum.REPLACE)\n            .path(\"/attributes/purchasable_offer\")\n            .value(Lists.newArrayList(purchasableOffer));\n\n    return new ListingsItemPatchRequest()\n            .productType(\"PRODUCT\")\n            .patches(Lists.newArrayList(patchOperation));\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Shipment Services in Java\nDESCRIPTION: Filters available shipping services based on environmental preferences (cheapest or fastest) using custom comparators. Returns the preferred shipping service.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString shipmentFilterType = System.getenv(SHIPMENT_FILTER_TYPE_ENV_VARIABLE);\n\nif (shipmentFilterType.equals(SHIPMENT_FILTER_TYPE_CHEAPEST)) {\n    Collections.sort(shippingServices, new PriceComparator());\n} else if (shipmentFilterType.equals(SHIPMENT_FILTER_TYPE_FASTEST)){\n    Collections.sort(shippingServices, new SpeedComparator());\n}\n\nreturn shippingServices.get(0);\n```\n\n----------------------------------------\n\nTITLE: Calculate New Price Lambda Handler - Java\nDESCRIPTION: Java Lambda handler that calculates new listing prices based on pricing offers. Implements price calculations using percentage or fixed rules, validates thresholds, and handles competitive pricing scenarios. Returns formatted price results with currency codes.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic PricingLambdaInput handleRequest(PricingLambdaInput input, Context context) {\n    try {\n        //Calculate the landed price by summing listing price and shipping price\n        Offer sellerOffer = input.getSellerOffer();\n        float landedPrice = sellerOffer.getListingPrice().getAmount() + sellerOffer.getShippingPrice().getAmount();\n\n        float buyBoxPrice = input.getBuyBox().getPrice().getAmount();\n\n        //Check conditions to determine whether to skip new price calculation\n\n        //Pricing Health Workflow - Check whether competitivePriceThreshold is present\n        if (sellerOffer.getReferencePrice() != null && input.isUseCompetitivePrice()) {\n            float newItemPrice = sellerOffer.getReferencePrice().getCompetitivePriceThreshold().getAmount().floatValue();\n            return createNewPrice(newItemPrice, input.getMinThreshold(), buyBoxPrice, sellerOffer.getReferencePrice().getCompetitivePriceThreshold().getCurrencyCode(), logger);\n        }\n\n        //Check if buy box price is less than the minimum threshold\n        if (buyBoxPrice < input.getMinThreshold()) {\n            //Return indicating skipping new price calculation\n            return PricingLambdaInput.builder()\n                    .newListingPrice(Amount.builder()\n                            .amount(-1)\n                            .build())\n                    .issues(String.format(\"Buy Box Price: %s is less than threshold\", buyBoxPrice))\n                    .build();\n        }\n\n        //Check if buy box price is greater than landed price\n        if (buyBoxPrice > landedPrice) {\n            return PricingLambdaInput.builder()\n                    .newListingPrice(Amount.builder()\n                            .amount(-1)\n                            .build())\n                    .issues(String.format(\"Landed Price: %f is already less than Buy Box Price\", landedPrice))\n                    .build();\n        }\n\n        //Calculate the new item price based on different price change rules (percentage or fixed)\n        PriceChangeRule priceChangeRule = input.getPriceChangeRule();\n        float newItemPrice;\n        float buyBoxPriceExcludingShipping = buyBoxPrice - sellerOffer.getShippingPrice().getAmount();\n        if (PRICE_CHANGE_RULE_PERCENTAGE.equals(priceChangeRule.getRule())) {\n            newItemPrice = subtractPercentage(buyBoxPriceExcludingShipping, priceChangeRule.getValue());\n        } else if (PRICE_CHANGE_RULE_FIXED.equals(priceChangeRule.getRule())) {\n            newItemPrice = subtractFixed(buyBoxPriceExcludingShipping, priceChangeRule.getValue());\n        } else {\n            newItemPrice = -1;\n            return PricingLambdaInput.builder()\n                    .newListingPrice(Amount.builder()\n                            .amount(newItemPrice)\n                            .build())\n                    .issues(String.format(\"Price Change Rule: %s is Invalid.\", priceChangeRule.getRule()))\n                    .build();\n        }\n\n        //Calculate the new listing price by subtracting shipping price from the new item price\n        float newListingPrice = newItemPrice;\n        return createNewPrice(newListingPrice, input.getMinThreshold(), buyBoxPrice, input.getSellerOffer().getListingPrice().getCurrencyCode(), logger);\n    } catch (Exception e) {\n        throw new InternalError(\"CalculateNewPrice Lambda failed\", e);\n    }\n}\n\nprivate PricingLambdaInput createNewPrice(float newListingPrice, float minThreshold, float buyBoxPrice, String offerCurrency, LambdaLogger logger) {\n    //Check if the new listing price is less than the minimum threshold\n    PricingLambdaInput.PricingLambdaInputBuilder pricingLambdaBuilder = PricingLambdaInput.builder();\n    if (newListingPrice < minThreshold) {\n        pricingLambdaBuilder\n                .newListingPrice(Amount.builder()\n                        .amount(-1)\n                        .build())\n                .issues(String.format(\"Buy Box Price: %f is less than threshold\", buyBoxPrice));\n    } else {\n        pricingLambdaBuilder.newListingPrice(Amount.builder()\n                        .currencyCode(offerCurrency)\n                        .amount(newListingPrice)\n                        .build())\n                .build();\n    }\n    return pricingLambdaBuilder.build();\n}\n\nprivate float subtractPercentage(float n1, float percentage) {\n    return BigDecimal.valueOf(n1)\n            .subtract(BigDecimal.valueOf(n1)\n                    .multiply(BigDecimal.valueOf(percentage / 100)))\n            .floatValue();\n}\n\nprivate float subtractFixed(float n1, float n2) {\n    return BigDecimal.valueOf(n1)\n            .subtract(BigDecimal.valueOf(n2))\n            .floatValue();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed Label URLs in Python\nDESCRIPTION: Handles the storage and pre-signing of shipping labels in S3, including label content decoding and format-specific content type handling.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n        # Create S3 Bucket Name\n        s3_bucket_name = os.environ.get(constants.LABELS_S3_BUCKET_NAME_ENV_VARIABLE)\n\n        # Extract order ID from event\n        order_id = presign_label_lambda_input.credentials.orderId\n\n        object_key = f\"{order_id}/{uuid.uuid4()}\"\n\n        label = presign_label_lambda_input.label.fileContents\n        label_format = presign_label_lambda_input.label.labelFormat\n\n        # Store the label in S3\n        store_label(s3_bucket_name, object_key, label, label_format)\n\n        # Generate a presigned URL to browse the label\n        presigned_url = generate_presigned_url(s3_bucket_name, object_key)\n\n        return presigned_url\n\ndef generate_presigned_url(s3_bucket_name, object_key):\n    s3 = boto3.client('s3', config=Config(signature_version=constants.AWS_SIGNATURE_VERSION))\n    presigned_url = s3.generate_presigned_url(\n        'get_object',\n        Params={'Bucket': s3_bucket_name, 'Key': object_key},\n        ExpiresIn=3600  # 1 hour in seconds\n    )\n    return presigned_url\n```\n\nLANGUAGE: python\nCODE:\n```\ndef store_label(s3_bucket_name, object_key, label_content, label_format):\n    label_content_bytes = decode_label_content(label_content)\n    input_stream = io.BytesIO(label_content_bytes)\n\n    content_type = 'application/octet-stream'  # Default content type\n\n    if label_format == 'PDF':\n        content_type = 'application/pdf'\n    elif label_format == 'PNG':\n        content_type = 'image/png'\n    elif label_format == 'ZPL':\n        content_type = 'application/x-zpl'\n\n    metadata = {\n        'ContentType': content_type\n    }\n\n    s3 = boto3.client('s3', config=Config(signature_version=constants.AWS_SIGNATURE_VERSION))\n    s3.upload_fileobj(input_stream, s3_bucket_name, object_key, ExtraArgs=metadata)\n\n\ndef decode_label_content(label_content):\n    label_content_decoded = base64.b64decode(label_content)\n    return label_content_decoded\n```\n\n----------------------------------------\n\nTITLE: Canceling Data Kiosk Query in Python\nDESCRIPTION: Shows how to set up the API client and call the cancelQuery operation using the Data Kiosk API in Python.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi_utils = ApiUtils(refresh_token, region_code, constants.DATA_KIOSK_API_TYPE)\n\napi_utils.call_datakiosk_api('cancel_query', query_id=query_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Shipments in Python\nDESCRIPTION: Python implementation for creating shipments through the MFN API, including request preparation, API calls, and shipment ID storage in DynamoDB.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napi_utils = ApiUtils(refresh_token, region_code, constants.MFN_API_TYPE)\n\ncreate_shipment_request = get_create_shipment_request_body(payload=event[constants.MFN_ORDER_KEY_NAME], order_id=order_id)\n\nlogger.info(f\"Merchant Fulfillment API - CreateShipment request: {create_shipment_request}\")\n\ncreate_shipment_result = api_utils.call_mfn_api('create_shipment', body=create_shipment_request)\n\nlogger.info(f\"Merchant Fulfillment API - CreateShipment response: {create_shipment_result}\")\n\nshipment_id = create_shipment_result.payload.shipment_id\nstore_shipment_information(order_id, shipment_id)\n\nlabel = create_shipment_result.payload.label\nresult = {\n    constants.LABEL_FORMAT_KEY_NAME: label.label_format,\n    constants.LABEL_DIMENSIONS_KEY_NAME: label.dimensions.to_dict(),\n    constants.LABEL_FILE_CONTENTS_KEY_NAME: label.file_contents.to_dict()\n}\n\nreturn result\n```\n\nLANGUAGE: python\nCODE:\n```\ndef get_create_shipment_request_body(payload, order_id):\n    order_item_list = json.loads(mfn_utils.transform_keys_to_uppercase_first_letter(json.dumps([item for item in payload[\"orderItems\"]])))    \n    ship_from_address = json.loads(mfn_utils.snake_to_pascal_case(json.dumps(payload[\"shipFromAddress\"])))\n    package_dimensions = json.loads(mfn_utils.snake_to_pascal_case(json.dumps(payload[\"packageDimensions\"])))\n    weight = json.loads(mfn_utils.snake_to_pascal_case(json.dumps(payload[\"weight\"])))\n\n    shipping_service_options = payload[\"preferredShippingService\"][\"ShippingServiceOptions\"]\n    shipping_service_id = payload[\"preferredShippingService\"][\"ShippingServiceId\"]\n    shipping_service_offer_id = payload[\"preferredShippingService\"][\"ShippingServiceOfferId\"]\n\n    request = {\n        \"ShipmentRequestDetails\": {\n            \"AmazonOrderId\": order_id,\n            \"ItemList\": order_item_list,\n            \"ShipFromAddress\": ship_from_address,\n            \"PackageDimensions\": package_dimensions,\n            \"Weight\": weight,\n            \"ShippingServiceOptions\": shipping_service_options\n        },\n        \"ShippingServiceId\": shipping_service_id,\n        \"ShippingServiceOfferId\": shipping_service_offer_id\n    }\n\n    return json.dumps(request)\n\ndef store_shipment_information(order_id, shipment_id):\n    item = {\n        constants.SHIPMENTS_TABLE_HASH_KEY_NAME: {'S': order_id},\n        constants.SHIPMENTS_TABLE_SHIPMENT_ID_ATTRIBUTE_NAME: {'S': shipment_id}\n    }\n\n    put_item_request = {\n        'TableName': os.environ.get(constants.SHIPMENTS_TABLE_NAME_ENV_VARIABLE),\n        'Item': item\n    }\n\n    dynamodb = boto3.client(constants.AWS_DYNAMO_DB_CLIENT_KEY_NAME)\n    dynamodb.put_item(**put_item_request)\n```\n\n----------------------------------------\n\nTITLE: Processing Shipping Labels in Python\nDESCRIPTION: Python implementation for handling shipping labels, including base64 decoding, GZIP decompression, and S3 storage operations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlabel_content_decoded = base64.b64decode(label.file_contents.contents)\ntry:\n    with gzip.GzipFile(fileobj=io.BytesIO(label_content_decoded), mode='rb') as gz:\n        uncompressed = gz.read()\n    return uncompressed\nexcept Exception as e:\n    raise Exception(\"Decoding and decompressing label failed\", e)\n```\n\nLANGUAGE: python\nCODE:\n```\ns3_bucket_name = os.environ.get(constants.LABELS_S3_BUCKET_NAME_ENV_VARIABLE)\nobject_key = f\"{order_id}/{uuid.uuid4()}\"\n\nlabel = get_label_content(label_content=event[constants.LABEL_NAME_KEY])\n```\n\n----------------------------------------\n\nTITLE: Processing Order Items and Checking Inventory in Java\nDESCRIPTION: This code iterates through order items, checks inventory stock in DynamoDB, validates stock levels, and calculates the total weight and dimensions for merchant fulfillment. It requires access to a DynamoDB inventory table with product details including SKU, stock quantity, weight, and dimensions.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Iterate over all order items and retrieve stock, size and weight from the database\nfor (MfnOrderItem orderItem : input.getOrderItems()) {\n  // Retrieve the item from DynamoDB by SKU\n  // Update this section to match your product's logic\n  Map<String, AttributeValue> key = new HashMap<>();\n  key.put(INVENTORY_TABLE_HASH_KEY_NAME, new AttributeValue(orderItem.getSku()));\n\n  GetItemRequest getItemRequest = new GetItemRequest()\n    .withTableName(System.getenv(INVENTORY_TABLE_NAME_ENV_VARIABLE))\n    .withKey(key);\n\n  AmazonDynamoDB dynamoDB = AmazonDynamoDBClientBuilder.defaultClient();\n  GetItemResult getItemResult = dynamoDB.getItem(getItemRequest);\n  Map<String, AttributeValue> item = getItemResult.getItem();\n\n  String stock = item.get(INVENTORY_TABLE_STOCK_ATTRIBUTE_NAME).getN();\n  if (parseLong(stock) < orderItem.getQuantity()) {\n    throw new InternalError(\n      String.format(\"Stock level for SKU {%s} is not enough to fulfill the requested quantity\",\n      orderItem.getSku()));\n  }\n\n  long itemWeightValue = parseLong(item.get(INVENTORY_TABLE_WEIGHT_VALUE_ATTRIBUTE_NAME).getN());\n  // Valid values for the database records are uppercase: [OZ, G]\n  String itemWeightUnit = item.get(INVENTORY_TABLE_WEIGHT_UNIT_ATTRIBUTE_NAME).getS();\n\n  long itemLength = parseLong(item.get(INVENTORY_TABLE_LENGTH_ATTRIBUTE_NAME).getN());\n  long itemWidth = parseLong(item.get(INVENTORY_TABLE_WIDTH_ATTRIBUTE_NAME).getN());\n  long itemHeight = parseLong(item.get(INVENTORY_TABLE_HEIGTH_ATTRIBUTE_NAME).getN());\n  // Valid values for the database records are uppercase: [INCHES, CENTIMETERS]\n  String itemSizeUnit = item.get(INVENTORY_TABLE_SIZE_UNIT_ATTRIBUTE_NAME).getS();\n\n  Weight itemWeight = new Weight();\n  itemWeight.setValue(BigDecimal.valueOf(itemWeightValue));\n  itemWeight.setUnit(UnitOfWeight.valueOf(itemWeightUnit));\n  orderItem.setItemWeight(itemWeight);\n\n  // Package weight is calculated by adding the individual weights\n  // Update this section to match your selling partners' logic\n  packageWeightValue += itemWeightValue;\n  packageWeightUnit = itemWeightUnit;\n\n  // Package size is calculated by adding the individual sizes\n  // Update this section to match your selling partners' logic\n  packageLength += itemLength;\n  packageWidth += itemWidth;\n  packageHeight += itemHeight;\n  packageSizeUnit = itemSizeUnit;\n}\n\ninput.setWeight(new Weight()\n  .value(BigDecimal.valueOf(packageWeightValue))\n  .unit(UnitOfWeight.valueOf(packageWeightUnit)));\n\ninput.setPackageDimensions(new PackageDimensions()\n  .length(BigDecimal.valueOf(packageLength))\n  .width(BigDecimal.valueOf(packageWidth))\n  .height(BigDecimal.valueOf(packageHeight))\n  .unit(UnitOfLength.valueOf(packageSizeUnit)));\n\nreturn input;\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Item Creation - AWS CLI Command\nDESCRIPTION: AWS CLI command to create an inventory item in DynamoDB table with specified attributes\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws dynamodb put-item --table-name SPAPIInventory-updateRandomSuffix --item '{\"SKU\":{\"S\":\"updateWithTestSku\"},\"Height\":{\"N\":\"10\"},\"Length\":{\"N\":\"10\"},\"SizeUnit\":{\"S\":\"INCH\"},\"Stock\":{\"N\":\"10\"},\"WeightUnit\":{\"S\":\"GRAM\"},\"WeightValue\":{\"N\":\"10\"},\"Width\":{\"N\":\"10\"}}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Details in Python\nDESCRIPTION: Illustrates how to set up the API client, call the getDocument operation, and handle empty document responses using the Data Kiosk API in Python.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi_utils = ApiUtils(refresh_token, region_code, constants.DATA_KIOSK_API_TYPE)\n\nget_document_response = api_utils.call_datakiosk_api(method='get_document',\n                                                     document_id=dk_lambda_input.document.documentId)\n\nlogger.info(f\"Data Kiosk API Response: {get_document_response}\")\n\nissues_str = \"\" if get_document_response else (f\"DOCUMENT IS EMPTY, \"\n                                               f\"NO DATA IS AVAILABLE FOR THE GIVEN TIME RANGE\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Price Data with Java SP-API\nDESCRIPTION: Java implementation for fetching pricing data using the SP-API Pricing API. Handles creation of pricing API client, making API requests, error handling, and price data processing.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic PricingLambdaInput handleRequest(PricingLambdaInput input, Context context) {\n    List<String> skus = Lists.newArrayList(input.getItemSku());\n\n    try {\n        ProductPricingApi pricingApi = getProductPricingApi(System.getenv(REGION_CODE_ENV_VARIABLE), input.getCredentials().getRefreshToken());\n        GetPricingResponse getPricingResponse = pricingApi.getPricing(\n                input.getCredentials().getMarketplaceId(),\n                \"Sku\",\n                null,\n                skus,\n                null,\n                null);\n\n        //Check for a client error response from the pricing API\n        if (\"ClientError\".equals(getPricingResponse.getPayload().get(0).getStatus())) {\n            //Return placeholders for listing and shipping price\n            return PricingLambdaInput.builder()\n                    .listingPrice(Amount.builder().amount(-1).build())\n                    .shippingPrice(Amount.builder().amount(-1).build())\n                    .build();\n        }\n\n        PriceType skuPrices = getPricingResponse.getPayload().get(0).getProduct().getOffers().get(0).getBuyingPrice();\n\n        return PricingLambdaInput.builder()\n                .listingPrice(Amount.builder()\n                        .currencyCode(skuPrices.getLandedPrice().getCurrencyCode())\n                        .amount(skuPrices.getLandedPrice().getAmount().floatValue())\n                        .build())\n                .shippingPrice(Amount.builder()\n                        .currencyCode(skuPrices.getShipping().getCurrencyCode())\n                        .amount(skuPrices.getShipping().getAmount().floatValue())\n                        .build())\n                .build();\n\n    } catch (Exception e) {\n        throw new InternalError(\"FetchPrice Lambda failed\", e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Data Kiosk Query in Java\nDESCRIPTION: Demonstrates how to initialize the Data Kiosk API client and call the cancelQuery method in Java.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nQueriesApi dataKioskApi = ApiUtils.getDataKioskApi(regionCode, refreshToken);\n\ndataKioskApi.cancelQuery(queryId);\n```\n\n----------------------------------------\n\nTITLE: Rendering Landing Page with Authorization Button (Python Flask)\nDESCRIPTION: Flask route to render the landing page with an 'Authorize' button for initiating the OAuth process.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@application.route(\"/\")\ndef hello():\n    return render_template(\"index.html\")\n```\n\n----------------------------------------\n\nTITLE: Listing Handover Slots with EasyShip API in Java\nDESCRIPTION: This snippet demonstrates how to list handover slots for an order using the EasyShip API. It initializes the API client, prepares the request with order details, calls the listHandoverSlots operation, and sets the retrieved time slots for the order.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n    //Get list of handover shipment slot for the order\n    ListHandoverSlotsRequest request = new ListHandoverSlotsRequest()\n        .amazonOrderId(input.getAmazonOrderId())\n        .marketplaceId(input.getMarketplaceId())\n        .packageDimensions(input.getEasyShipOrder().getPackageDimensions())\n        .packageWeight(input.getEasyShipOrder().getPackageWeight());\n\n        logger.log(\"EasyShip API -  listHandoverSlots request: \" + new Gson().toJson(request));\n\n    EasyShipApi easyShipApi = ApiUtils.getEasyShipApi(input);\n    ListHandoverSlotsResponse response = easyShipApi.listHandoverSlots(request);\n\n    input.setTimeSlots((response.getTimeSlots()));\n    return input;\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Creating Data Kiosk Queries\nDESCRIPTION: JSON input payload for the SPAPICreateQueryLambdaFunction. This payload contains a GraphQL query string that should be created in the Schema Explorer and properly escaped to ensure it's a valid JSON string.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Query\": \"query MyQuery{analytics_salesAndTraffic_2023_11_15{salesAndTrafficByAsin(endDate:\\\"2024-01-31\\\" marketplaceIds:[\\\"A2Q3Y263D00KWC\\\"]aggregateBy:CHILD ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tenant Definition in SP-API Authorization Context\nDESCRIPTION: Defines what a tenant is in the context of SP-API authorization. A tenant refers to a seller or vendor who authorizes a public developer to access the SP-API on their behalf, representing an independent business entity granting permission for the application to interact with their Amazon selling account data.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTenant: A seller or vendor who authorizes a public developer to access the Selling Partner API (SP-API) on their behalf.\nEach tenant represents an independent business entity that grants permission for the application to interact with their\nAmazon selling account data.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Defining API Workflow Steps\nDESCRIPTION: A detailed table outlining each step in the inbound shipment workflow, including API operations, descriptions, Lambda handlers, and expected outputs. The table maps the complete process from creating an inbound plan to generating shipment labels.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Step | API Operation                                                                                                                                                | Description                                                                                          | Lambda Handler                                                                                                               | Output                                             |\n|------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Processing Order Items and Checking Inventory in Python\nDESCRIPTION: The Python version of the inventory check handler that iterates through order items, validates inventory levels in DynamoDB, and calculates package dimensions and weight. It uses boto3 to interact with DynamoDB and raises an exception if stock levels are insufficient.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfor order_item in mfn_order.orderItems:\n    # Retrieve the item from DynamoDB by SKU\n    # Update this section to match your product's logic\n    key = {constants.INVENTORY_TABLE_HASH_KEY_NAME: {\"S\": order_item.sku}}\n\n    dynamodb = boto3.client(constants.AWS_DYNAMO_DB_CLIENT_KEY_NAME)\n    get_item_result = dynamodb.get_item(TableName=os.environ.get(constants.INVENTORY_TABLE_NAME_ENV_VARIABLE),\n                                        Key=key)\n    item = get_item_result.get('Item', {})\n\n    stock = int(item.get(constants.INVENTORY_TABLE_STOCK_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n    if stock < order_item.quantity:\n        raise Exception(f\"Stock level for SKU {order_item.sku} is not enough to fulfill the requested quantity\")\n\n    item_weight_value = int(item.get(constants.INVENTORY_TABLE_WEIGHT_VALUE_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n\n    # Valid values for the database records are uppercase: [OZ, G]\n    item_weight_unit = item.get(constants.INVENTORY_TABLE_WEIGHT_UNIT_ATTRIBUTE_NAME, {\"S\": \"\"})[\"S\"]\n\n    item_length = int(item.get(constants.INVENTORY_TABLE_LENGTH_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n    item_width = int(item.get(constants.INVENTORY_TABLE_WIDTH_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n    item_height = int(item.get(constants.INVENTORY_TABLE_HEIGHT_ATTRIBUTE_NAME, {\"N\": \"0\"})[\"N\"])\n\n    # Valid values for the database records are uppercase: [INCHES, CENTIMETERS]\n    item_size_unit = item.get(constants.INVENTORY_TABLE_SIZE_UNIT_ATTRIBUTE_NAME, {\"S\": \"\"})[\"S\"]\n\n    unit_of_weight_enum = UnitOfWeight.G if item_weight_unit == \"G\" else UnitOfWeight.OZ if item_weight_unit == \"OZ\" else None\n    item_weight = Weight(unit=unit_of_weight_enum, value=Decimal(str(item_weight_value)))\n\n    order_item.itemWeight = item_weight\n\n    # Package weight is calculated by adding the individual weights\n    # Update this section to match your selling partners' logic\n    package_weight_value += item_weight_value\n    package_weight_unit = item_weight_unit\n\n    # Package size is calculated by adding the individual sizes\n    # Update this section to match your selling partners' logic\n    package_length += item_length\n    package_width += item_width\n    package_height += item_height\n    package_size_unit = item_size_unit\n\nevent_unit_of_weight_enum = UnitOfWeight.G if package_weight_unit == \"G\" else UnitOfWeight.OZ if package_weight_unit == \"OZ\" else None\nevent_unit_of_length_enum = UnitOfLength.INCHES if package_size_unit == \"INCHES\" else UnitOfLength.CENTIMETERS if package_size_unit == \"CENTIMETERS\" else None\n\nmfn_order.weight = Weight(unit=event_unit_of_weight_enum, value=Decimal(str(package_weight_value)))\nmfn_order.packageDimensions = PackageDimensions(\n    length=package_length,\n    width=package_width,\n    height=package_height,\n    unit=event_unit_of_length_enum\n)\nreturn mfn_order.to_json()\n```\n\n----------------------------------------\n\nTITLE: Parsing OfferChangeTrigger Data in AOC Notifications\nDESCRIPTION: This JSON snippet shows the structure of the OfferChangeTrigger object in AOC notifications, which contains information about which ASIN had pricing changes, its marketplace, condition, and timestamp.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/docs/blog-post/AB-pricing-blog-post.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n      \"OfferChangeTrigger\" : {\n        \"MarketplaceId\" : \"A2Q3Y263D00KWC\",\n        \"ASIN\" : \"B092CZXSZB\",\n        \"ItemCondition\" : \"new\",\n        \"TimeOfOfferChange\" : \"2023-07-31T20:40:53.101Z\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring SP-API Application Settings in app.config\nDESCRIPTION: Sample configuration file for the SP-API application, including client credentials, refresh token, region code, and notification email.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\nRegionCode=NA\nEmail=login@mydomain.com\n```\n\n----------------------------------------\n\nTITLE: Analyzing BuyBoxPrices in B2B AOC Notifications\nDESCRIPTION: This JSON snippet demonstrates the BuyBoxPrices array structure which contains tiered pricing information for the current Buy Box winner, including condition, fulfillment channel, offer type, and quantity-based discount tiers.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/docs/blog-post/AB-pricing-blog-post.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nBuyBoxPrices\" : [  {\n            \"condition\": \"New\",\n            \"fulfillmentChannel\": \"Merchant\",\n            \"offerType\": \"B2B\",\n            \"quantityTier\": 1,\n            \"listingPrice\": {\n                \"amount\": 334.23,\n                \"currencyCode\": \"USD\"\n            },\n            \"shipping\": {\n                \"amount\": 4.49,\n                \"currencyCode\": \"USD\"\n            },\n            \"landedPrice\": {\n                \"amount\": 338.72,\n                \"currencyCode\": \"USD\"\n            }\n        },\n        {\n            \"condition\": \"New\",\n            \"fulfillmentChannel\": \"Merchant\",\n            \"offerType\": \"B2B\",\n            \"quantityTier\": 2,\n            \"listingPrice\": {\n                \"amount\": 332.99,\n                \"currencyCode\": \"USD\"\n            },\n            \"shipping\": {\n                \"amount\": 4.49,\n                \"currencyCode\": \"USD\"\n            }\n        },\n        {\n            \"condition\": \"New\",\n            \"fulfillmentChannel\": \"Merchant\",\n            \"offerType\": \"B2B\",\n            \"quantityTier\": 5,\n            \"discountType\": \"QUANTITY_DISCOUNT\",\n            \"listingPrice\": {\n                \"amount\": 330.99,\n                \"currencyCode\": \"USD\"\n            },\n            \"shipping\": {\n                \"amount\": 4.49,\n                \"currencyCode\": \"USD\"\n            }\n        } ],\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Item for SP-API Sample Solution\nDESCRIPTION: JSON structure for creating a DynamoDB item containing ASIN, SKU, seller details, and price rules for the SP-API sample solution. Includes B2B pricing tiers and threshold configurations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"ASIN\":{\"S\":\"B08R3V9XXX\"},\"SKU\":{\"S\":\"SKU1\"},\"Condition\":{\"S\":\"New\"},\"IsFulfilledByAmazon\":{\"BOOL\":false},\"MarketplaceId\":{\"S\":\"ATVPDKIKX0DER\"},\"PriceRule\":{\"L\":[{\"M\":{\"OfferType\":{\"S\":\"B2B\"},\"QuantityTier\":{\"N\":\"1\"},\"MinThreshold\":{\"N\":\"9\"},\"PriceChangeRule\":{\"S\":\"PERCENTAGE\"},\"PriceChangeRuleAmount\":{\"N\":\"1\"}}},{\"M\":{\"OfferType\":{\"S\":\"B2B\"},\"QuantityTier\":{\"N\":\"2\"},\"MinThreshold\":{\"N\":\"7\"},\"PriceChangeRule\":{\"S\":\"FIXED\"},\"PriceChangeRuleAmount\":{\"N\":\"1\"}}}]},\"SellerId\":{\"S\":\"AMY6FXXABCD\"}}\n```\n\n----------------------------------------\n\nTITLE: Processing Shipping Labels in Java\nDESCRIPTION: Handles shipping label processing including base64 decoding, GZIP decompression, S3 storage, and presigned URL generation for label access.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nbyte[] labelContentDecoded = Base64.getDecoder().decode(label.getFileContents().getContents());\n\ntry {\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(labelContentDecoded);\n    GZIPInputStream gzipInputStream = new GZIPInputStream(inputStream);\n    ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream();\n    \n    int res = 0;\n    byte buf[] = new byte[1024];\n    while (res >= 0) {\n      res = gzipInputStream.read(buf, 0, buf.length);\n      if (res > 0) {\n        byteArrayOutputStream.write(buf, 0, res);\n      }\n    }\n    \n    byte uncompressed[] = byteArrayOutputStream.toByteArray();\n    return uncompressed;\n} catch (IOException e) {\n    throw new InternalError(\"Decoding and decompressing label failed\", e);\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nString s3BucketName = System.getenv(LABELS_S3_BUCKET_NAME_ENV_VARIABLE);\nString objectKey = String.format(\"%s/%s\", input.getOrderId(), UUID.randomUUID());\n\nstoreLabel(s3BucketName, objectKey, input.getLabel());\nlogger.log(\"Label successfully stored\");\n\nString presignedUrl = generatePresignedUrl(s3BucketName, objectKey);\nlogger.log(\"Presigned Url successfully generated\");\n\nreturn presignedUrl;\n```\n\n----------------------------------------\n\nTITLE: Parsing Competitor Offers in AOC Notifications\nDESCRIPTION: This JSON snippet shows the structure of the Offers array which contains details about up to 20 active seller offers for the same ASIN, including seller information, pricing, shipping details, and Buy Box status.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/docs/blog-post/AB-pricing-blog-post.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n \"Offers\" : [ {\n        \"SellerId\" : \"A2ZPJ4TLUOSWY8\",\n        \"SubCondition\" : \"new\",\n        \"SellerFeedbackRating\" : {\n          \"FeedbackCount\" : 35,\n          \"SellerPositiveFeedbackRating\" : 63\n        },\n        \"ShippingTime\" : {\n          \"MinimumHours\" : 24,\n          \"MaximumHours\" : 48,\n          \"AvailabilityType\" : \"NOW\",\n          \"AvailableDate\" : \"\"\n        },\n        \"ListingPrice\" : {\n          \"Amount\" : 50.00,\n          \"CurrencyCode\" : \"BRL\"\n        },\n        \"Shipping\" : {\n          \"Amount\" : 4.43,\n          \"CurrencyCode\" : \"BRL\"\n        },\n        \"ShipsFrom\" : {\n          \"Country\" : \"BR\",\n          \"State\" : \"\"\n        },\n        \"IsFulfilledByAmazon\" : false,\n        \"IsBuyBoxWinner\" : false,\n        \"PrimeInformation\" : {\n          \"IsOfferPrime\" : false,\n          \"IsOfferNationalPrime\" : false\n        },\n        \"ShipsDomestically\" : true\n      } ]\n```\n\n----------------------------------------\n\nTITLE: Configuring EasyShip Sample App Settings\nDESCRIPTION: Configuration file for connecting the Sample Solution App to SP-API. It includes client credentials, refresh token, region code, and notification email settings required for the application to authenticate and function properly.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789......\nRegionCode=FE\nNotificationEmail=login@mydomain.com\n```\n\n----------------------------------------\n\nTITLE: Lambda Notification Subscription Test Event\nDESCRIPTION: JSON payload for testing the notification subscription Lambda function. Includes refresh token, region code, and notification type parameters required for SP-API subscription.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"RefreshToken\": \"Atzr|Iw...\",\n    \"RegionCode\": \"NA|EU|FE\",\n    \"NotificationType\": \"ORDER_CHANGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Fulfillment Preview in Java using Amazon Selling Partner API\nDESCRIPTION: This code snippet shows how to get a fulfillment preview using the FBA Outbound API. It sets up the API client, builds the GetFulfillmentPreviewRequest object with necessary data, and executes the getFulfillmentPreview operation. It also includes a helper method to build the request object.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic MCFCreateOrderLambdaInput handleRequest(MCFCreateOrderLambdaInput input, Context context) {\n\n    try {\n        FbaOutboundApi fbaoApi = getFbaOutboundApi(input.getRegionCode(), input.getRefreshToken());\n        \n        GetFulfillmentPreviewRequest getFulfillmentPreviewRequest = buildGetFulfillmentPreviewRequest(input.getCreateFulfillmentOrderNotification());\n\n        GetFulfillmentPreviewResponse getFulfillmentPreviewResponse = fbaoApi.getFulfillmentPreview(getFulfillmentPreviewRequest);\n    } catch (Exception e) {\n        throw new InternalError(\"Calling GetFulfillmentPreview failed\", e);\n    }\n\n    return input;\n}\n\nprivate GetFulfillmentPreviewRequest buildGetFulfillmentPreviewRequest(CreateFulfillmentOrderNotification createFulfillmentOrderNotification) {\n    Boolean includeCOD = createFulfillmentOrderNotification.getCodSettings() != null;\n    Boolean includeDeliveryWindows = createFulfillmentOrderNotification.getDeliveryWindow() != null;\n\n    return new GetFulfillmentPreviewRequest()\n            .marketplaceId(createFulfillmentOrderNotification.getMarketplaceId())\n            .address(buildRequestAddress(createFulfillmentOrderNotification.getDestinationAddress()))\n            .items(buildPreviewItems(createFulfillmentOrderNotification.getItems()))\n            .includeCODFulfillmentPreview(includeCOD)\n            .includeDeliveryWindows(includeDeliveryWindows)\n            .featureConstraints(buildFeatureConstraints(createFulfillmentOrderNotification.getFeatureConstraints()));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Order Notification Payload in JSON\nDESCRIPTION: JSON payload structure for creating a fulfillment order notification. It includes order details, shipping information, and item data. The 'fulfillmentAction' must be set to 'Hold' for the UpdateOrder function to succeed.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CREATION\",\n    \"EventTime\": \"2023-07-01T15:30:00.000Z\",\n    \"Payload\": {\n        \"createFulfillmentOrderNotification\": {\n            \"marketplaceId\": \"<marketplaceId>\",\n            \"sellerFulfillmentOrderId\": \"<sellerFulfillmentOrderId>\",\n            \"displayableOrderId\": \"<displayableOrderId>\",\n            \"displayableOrderDate\": \"<displayableOrderDate>\",\n            \"displayableOrderComment\": \"<displayableOrderComment>\",\n            \"shippingSpeedCategory\": \"<shippingSpeedCategory>\",\n            \"destinationAddress\": {\n                \"name\": \"<name>\",\n                \"addressLine1\": \"<addressLine1>\",\n                \"city\": \"<city>\",\n                \"stateOrRegion\": \"<stateOrRegion>\",\n                \"postalCode\": \"<postalCode>\",\n                \"countryCode\": \"<countryCode>\",\n                \"phone\": \"<phone>\"\n            },\n            \"fulfillmentAction\": \"Hold\",\n            \"items\": [\n                {\n                    \"sellerSku\": \"<sellerSku>\",\n                    \"sellerFulfillmentOrderItemId\": \"<sellerFulfillmentOrderItemId>\",\n                    \"quantity\": <quantity>\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SP-API Credentials in app.config\nDESCRIPTION: Sample configuration file for setting up SP-API credentials required to connect to the API. It includes ClientId, ClientSecret, and RefreshToken fields that must be populated with your SP-API application's credentials and a selling partner's refresh token.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Test Event for SP-API Notification Subscription\nDESCRIPTION: JSON payload for testing the Lambda function that subscribes selling partners to notifications. Requires RefreshToken, RegionCode, and NotificationType parameters.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\",\n    \"RegionCode\": \"NA|EU|FE\",\n    \"RefreshToken\": \"Atzr|Iw...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Fulfillment Orders with Amazon FBA Outbound API in Java\nDESCRIPTION: This snippet demonstrates how to update an existing fulfillment order through the Amazon FBA Outbound API. It initializes the API client, creates an UpdateFulfillmentOrderRequest object with specified fulfillment action, and executes the call to update the order.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic MCFCreateOrderLambdaInput handleRequest(MCFCreateOrderLambdaInput input, Context context) {\n\n    try {\n        FbaOutboundApi fbaoApi = getFbaOutboundApi(input.getRegionCode(), input.getRefreshToken());\n        \n        UpdateFulfillmentOrderRequest updateFulfillmentOrderRequest = new UpdateFulfillmentOrderRequest()\n                .fulfillmentAction(FulfillmentAction.SHIP);\n\n        UpdateFulfillmentOrderResponse updateFulfillmentOrderResponse = fbaoApi.updateFulfillmentOrder(updateFulfillmentOrderRequest, input.getCreateFulfillmentOrderNotification().getSellerFulfillmentOrderId());\n    } catch (Exception e) {\n        throw new InternalError(\"Calling FBAOutbound UpdateOrder failed\", e);\n    }\n\n    return input;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Setup - Application Properties\nDESCRIPTION: Sample configuration file for SP-API application credentials and region settings. Contains client ID, client secret and region code specifications.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nClientId=amzn1.application-oa2-client.XXXXXXXXXXXX\nClientSecret=*********-******************\n%% Possible values NA, EU, FE\nRegionCode=NA\n```\n\n----------------------------------------\n\nTITLE: Configuring SP-API Application Credentials\nDESCRIPTION: Sample configuration file for storing SP-API application credentials securely. These credentials are used to authenticate API requests.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\nRegionCode=NA\n```\n\n----------------------------------------\n\nTITLE: Configuring SP-API Application Settings\nDESCRIPTION: This code snippet shows the structure of the app.config file used to configure the SP-API application settings. It includes placeholders for ClientId, ClientSecret, RefreshToken, and RegionCode.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\nRegionCode=NA_SANDBOX\n```\n\n----------------------------------------\n\nTITLE: Filtering Shipment Services in Python\nDESCRIPTION: Python implementation of shipment service filtering with custom comparator functions for price and speed sorting. Includes helper functions for comparing prices and delivery dates.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nshipment_filter_type = os.environ.get(constants.SHIPMENT_FILTER_TYPE_ENV_VARIABLE)\n\nif shipment_filter_type == constants.SHIPMENT_FILTER_TYPE_CHEAPEST:\n    shipping_services.sort(key=cmp_to_key(price_comparator))\nelif shipment_filter_type == constants.SHIPMENT_FILTER_TYPE_FASTEST:\n    shipping_services.sort(key=cmp_to_key(speed_comparator))\n\nreturn shipping_services[0]\n\n\ndef price_comparator(ship_service1, ship_service2):\n    return ship_service1['Rate']['Amount'] - ship_service2['Rate']['Amount']\n\n\ndef speed_comparator(ship_service1, ship_service2):\n    date_format = '%Y-%m-%dT%H:%M:%SZ'\n    date_key = 'EarliestEstimatedDeliveryDate'\n\n    return datetime.strptime(ship_service1[date_key], date_format) - datetime.strptime(ship_service2[date_key], date_format)\n```\n\n----------------------------------------\n\nTITLE: Configuring SP-API Application Credentials in INI Format\nDESCRIPTION: Sample configuration file for storing SP-API application credentials and region code. This includes the Client ID, Client Secret, Refresh Token, and Region Code required to authenticate and interact with the Selling Partner API.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\nRegionCode=NA_SANDBOX\n```\n\n----------------------------------------\n\nTITLE: Sample Config File for SP-API Error Monitoring\nDESCRIPTION: Configuration file for the SP-API application with required credentials and settings including ClientId, ClientSecret, RefreshToken, EmailId, and Schedule for triggering the Lambda function.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/error-monitoring/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|IQEBLzAtAhexamplewVz2Nn6f2y-tpJX2DeX...\nEmailId=user@domain.com\nSchedule=rate(1 minute)\n```\n\n----------------------------------------\n\nTITLE: Canceling Fulfillment Orders with Amazon FBA Outbound API in Java\nDESCRIPTION: This snippet shows how to cancel a fulfillment order using the Amazon FBA Outbound API. It initializes the API client and calls the cancelFulfillmentOrder operation with the seller's fulfillment order ID to cancel the specified order.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic MCFCancelOrderLambdaInput handleRequest(MCFCancelOrderLambdaInput input, Context context) {\n\n    try {\n        FbaOutboundApi fbaoApi = getFbaOutboundApi(input.getRegionCode(), input.getRefreshToken());\n\n        CancelFulfillmentOrderResponse cancelFulfillmentOrderResponse = fbaoApi.cancelFulfillmentOrder(input.getCancelFulfillmentOrderNotification().getSellerFulfillmentOrderId());\n    } catch (Exception e) {\n        throw new InternalError(\"Calling FBAOutbound CancelOrder failed\", e);\n    }\n\n    return input;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Query Schedule in AWS Lambda\nDESCRIPTION: Payload structure for creating a scheduled query in AWS Lambda. Includes query string, schedule dates, rate configuration and account identifier.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"query\": \"query MyQuery{analytics_salesAndTraffic_2023_11_15{salesAndTrafficByAsin(endDate:\\\"2024-01-31\\\" marketplaceIds:[\\\"A2Q3Y263D00KWC\\\"]aggregateBy:CHILD ...\",\n  \"scheduleStartDate\": \"2024-07-09T14:34:00\",\n  \"scheduleEndDate\": \"2024-07-23T08:00:00\",\n  \"minuteRate\": \"2\",\n  \"accountId\": \"ABC123DE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Settings for SP-API Application\nDESCRIPTION: Sample configuration file showing required SP-API credentials including Client ID, Client Secret, and Refresh Token. These values must be updated with actual SP-API application credentials.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/solicitations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudWatch Alarm Settings in YAML\nDESCRIPTION: This YAML snippet shows the configuration for CloudWatch Alarms to monitor 4xx errors. It sets the period, evaluation periods, and threshold for triggering alerts.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/error-monitoring/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPeriod: 300\nEvaluationPeriods: 1\nThreshold: 5\n```\n\n----------------------------------------\n\nTITLE: Notification Subscription Request - Lambda Test Event\nDESCRIPTION: JSON payload for testing the notification subscription Lambda function with notification type\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Partner Activity Status\nDESCRIPTION: Example code for checking a partner's activity status and sending inactive warnings if needed. Demonstrates how to implement monitoring for partners who haven't been active for an extended period.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Example status check\nconst partnerStatus = await checkPartnerStatus(partnerId);\nif (partnerStatus.daysSinceLastActivity > 90) {\n    await sendInactiveWarning(partnerId);\n}\n```\n\n----------------------------------------\n\nTITLE: Track Shipment Request - Lambda Test Event\nDESCRIPTION: JSON payload for testing the shipment tracking Lambda function with tracking and carrier IDs\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TrackingId\": \"1Z---\",\n    \"CarrierId\": \"UPS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Essential CDK Commands for Development and Deployment\nDESCRIPTION: A set of commonly used npm and CDK commands for building, watching, deploying, comparing, and synthesizing the CDK stack for the Data Kiosk solution.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpx cdk deploy  deploy this stack to your default AWS account/region\nnpx cdk diff    compare deployed stack with current state\nnpx cdk synth   emits the synthesized CloudFormation template\n```\n\n----------------------------------------\n\nTITLE: Configuring SP-API Sample App Settings\nDESCRIPTION: Sample configuration file for the SP-API Sample Solution App. It includes settings for ClientId, ClientSecret, RefreshToken, RegionCode, Email, and OneClickShipment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\nRegionCode=NA\nEmail=login@mydomain.com\n%% Add OneclickShipment input param (choose between y or n)\nOneClickShipment=n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Fulfillment Inbound App Settings\nDESCRIPTION: Configuration file format for setting up SP-API application credentials and notification email settings. Requires valid SP-API Client ID, Client Secret, and notification email address.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Non_Partnered_Carrier/docs/Deployment_Guide.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nEmail=test@test.com\n```\n\n----------------------------------------\n\nTITLE: Partner Inactive Status Tracking JSON\nDESCRIPTION: JSON format for tracking partner inactivity status. Contains the partner ID, current status, timestamp when marked inactive, and last reminder sent date.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"partnerId\": \"PRTNR-12345-ABC\",\n    \"status\": \"MARKED_INACTIVE\",\n    \"markedInactiveAt\": \"2025-03-24T10:30:00Z\",\n    \"lastReminderSent\": \"2025-03-24T10:30:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for SP-API Sample App Deployment\nDESCRIPTION: This JSON snippet defines an IAM policy with the necessary permissions for deploying the SP-API Sample App. It includes permissions for IAM, CloudFormation, ECR, SSM, and S3 resources.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n     {\n         \"Sid\": \"SPAPISampleAppIAMPolicy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"iam:CreateUser\",\n             \"iam:DeleteUser\",\n             \"iam:CreatePolicy\",\n             \"iam:DeletePolicy\",\n             \"iam:AttachUserPolicy\",\n             \"iam:DetachUserPolicy\",\n             \"iam:CreateAccessKey\",\n             \"iam:DeleteAccessKey\",\n             \"iam:GetRole\",\n             \"iam:CreateRole\",\n             \"iam:TagRole\",\n             \"iam:AttachRolePolicy\",\n             \"iam:PutRolePolicy\",\n             \"iam:DeleteRole\",\n             \"iam:DeleteRolePolicy\",\n             \"iam:DetachRolePolicy\",\n             \"iam:PassRole\"\n         ],\n         \"Resource\": [\n             \"arn:aws:iam::<aws_account_id_number>:user/*\",\n             \"arn:aws:iam::<aws_account_id_number>:policy/*\",\n             \"arn:aws:iam::<aws_account_id_number>:role/*\"\n         ]\n     },\n     {\n         \"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"cloudformation:*\",\n             \"ecr:*\",\n             \"ssm:*\"\n         ],\n         \"Resource\": [\n             \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n             \"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n             \"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n             \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n         ]\n     },\n     {\n         \"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"s3:*\"\n         ],\n         \"Resource\": [\n             \"arn:aws:s3:::cdk*\",\n             \"arn:aws:s3:::sp-api-app-bucket*\"\n         ]\n     }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Tracking JSON Input Structure for SPAPI Workflow\nDESCRIPTION: JSON input structure for updating shipment tracking IDs. This includes API credentials, inbound plan ID, shipment ID, and freight bill number required to update Amazon with tracking information from the carrier.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiCredentials\": {\n    \"refreshToken\": \"Atzr|Abc123def456xyz789\",\n    \"regionCode\": \"NA\"\n  },\n  \"updateShipmentTrackingRequest\": {\n    \"inboundPlanId\": \"wfxxxxxxxxxxxxxxxxxxx\",\n    \"shipmentId\": \"shxxxxxxxxxxxxxxxxxxxx\",\n    \"freightBillNumber\": \"xxxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Revocation Status JSON\nDESCRIPTION: JSON format for tracking when a partner revokes their authorization. Includes the current status, timestamp of revocation, and previous status information.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n// System automatically updates status\n{\n    \"status\": \"AUTHORIZATION_REVOKED\",\n    \"authorizationRevokedAt\": \"2025-03-24T15:45:00Z\",\n    \"previousStatus\": \"MARKED_INACTIVE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for SP-API Sample App\nDESCRIPTION: JSON policy document for creating an IAM policy with necessary permissions to deploy and manage the SP-API Sample Solution App. It includes permissions for IAM, CloudFormation, ECR, SSM, and S3 resources.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n     {\n         \"Sid\": \"SPAPISampleAppIAMPolicy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"iam:CreateUser\",\n             \"iam:DeleteUser\",\n             \"iam:CreatePolicy\",\n             \"iam:DeletePolicy\",\n             \"iam:AttachUserPolicy\",\n             \"iam:DetachUserPolicy\",\n             \"iam:CreateAccessKey\",\n             \"iam:DeleteAccessKey\",\n             \"iam:GetRole\",\n             \"iam:CreateRole\",\n             \"iam:TagRole\",\n             \"iam:AttachRolePolicy\",\n             \"iam:PutRolePolicy\",\n             \"iam:DeleteRole\",\n             \"iam:DeleteRolePolicy\",\n             \"iam:DetachRolePolicy\",\n             \"iam:PassRole\"\n         ],\n         \"Resource\": [\n             \"arn:aws:iam::<aws_account_id_number>:user/*\",\n             \"arn:aws:iam::<aws_account_id_number>:policy/*\",\n             \"arn:aws:iam::<aws_account_id_number>:role/*\"\n         ]\n     },\n     {\n         \"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"cloudformation:*\",\n             \"ecr:*\",\n             \"ssm:*\"\n         ],\n         \"Resource\": [\n             \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n             \"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n             \"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n             \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n         ]\n     },\n     {\n         \"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"s3:*\"\n         ],\n         \"Resource\": [\n             \"arn:aws:s3:::cdk*\",\n             \"arn:aws:s3:::sp-api-app-bucket*\"\n         ]\n     }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Secret Expiry Warning Notification JSON Format\nDESCRIPTION: Sample JSON payload for client secret expiry warning notifications. Provides information about the upcoming expiration of a client secret, including the client ID, expiry time, and reason for expiry.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notificationType\": \"APPLICATION_OAUTH_CLIENT_SECRET_EXPIRY\",\n  \"payload\": {\n    \"applicationOAuthClientSecretExpiry\": {\n      \"clientId\": \"amzn1.application-oa2-client.xxx\",\n      \"clientSecretExpiryTime\": \"2024-03-03T22:06:39.224Z\",\n      \"clientSecretExpiryReason\": \"PERIODIC_ROTATION\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Inbound Plan Request Structure\nDESCRIPTION: JSON structure for creating a new inbound plan. Includes API credentials, marketplace destination, source address, packing information, transportation options, and label generation parameters. Uses regionCode values (NA, EU, FE) and requires specific marketplace IDs.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Non_Partnered_Carrier/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiCredentials\": {\n    \"refreshToken\": \"Atzr|Abc123def456xyz789\",\n    \"regionCode\": \"NA\"\n  },\n  \"createInboundPlanRequest\": {\n    \"destinationMarketplace\": \"ATVPDKIKX0DER\",\n    \"msku\": \"XX-XXXX-XXXX\",\n    \"labelOwner\": \"AMAZON or SELLER or NONE\",\n    \"prepOwner\": \"AMAZON or SELLER or NONE\",\n    \"sourceAddress\": {\n      \"addressLine1\": \"xxx xxx\",\n      \"addressLine2\": \"xxx\",\n      \"city\": \"xxx\",\n      \"stateOrProvinceCode\": \"xx\",\n      \"countryCode\": \"xx\",\n      \"postalCode\": \"xxxxx\",\n      \"name\": \"Test\",\n      \"phoneNumber\": \"xxxxxxxxxx\",\n      \"companyName\": \"Testing\",\n      \"email\": \"test@email.com\"\n    },\n    \"inboundPlanName\": \"SPD_nPCP_TestInboundPlan\"\n  },\n  \"setPackingInformationRequest\": {\n    \"weight\": {\n      \"unit\": \"LB\",\n      \"value\": 1\n    },\n    \"dimensions\": {\n      \"unitOfMeasurement\": \"IN\",\n      \"length\": 5,\n      \"width\": 5,\n      \"height\": 5\n    }\n  },\n  \"generateTransportationOptionsRequest\": {\n    \"readyToShipWindow\": \"yyyy-mm-ddT00:00:00Z\"\n  },\n  \"getLabelsRequest\": {\n    \"PageType\": \"PackageLabel_Plain_Paper\",\n    \"PageSize\": 1,\n    \"LabelType\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Secret Rotation Notification JSON Format\nDESCRIPTION: Sample JSON payload delivered to the SQS queue after initiating secret rotation. Contains the new client secret, its expiry time, and the old secret's expiry time for the transition period.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notificationType\": \"APPLICATION_OAUTH_CLIENT_NEW_SECRET\",\n  \"payload\": {\n    \"applicationOAuthClientNewSecret\": {\n      \"clientId\": \"amzn1.application-oa2-client.xxx\",\n      \"newClientSecret\": \"amzn1.oa2-cs.v1.xxx\",\n      \"newClientSecretExpiryTime\": \"2024-07-08T22:09:17.198Z\",\n      \"oldClientSecretExpiryTime\": \"2024-01-17T22:09:17.180Z\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for SP-API Sample App Deployment in JSON\nDESCRIPTION: IAM policy JSON defining the necessary permissions for deploying the SP-API Sample Application. This policy grants access to IAM, CloudFormation, ECR, SSM, and S3 resources required for the deployment process.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppIAMPolicy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"iam:CreateUser\",\n\t\t\t\t\"iam:DeleteUser\",\n\t\t\t\t\"iam:CreatePolicy\",\n\t\t\t\t\"iam:DeletePolicy\",\n\t\t\t\t\"iam:AttachUserPolicy\",\n\t\t\t\t\"iam:DetachUserPolicy\",\n\t\t\t\t\"iam:CreateAccessKey\",\n\t\t\t\t\"iam:DeleteAccessKey\",\n\t\t\t\t\"iam:GetRole\",\n\t\t\t\t\"iam:CreateRole\",\n\t\t\t\t\"iam:TagRole\",\n\t\t\t\t\"iam:AttachRolePolicy\",\n\t\t\t\t\"iam:PutRolePolicy\",\n\t\t\t\t\"iam:DeleteRole\",\n\t\t\t\t\"iam:DeleteRolePolicy\",\n\t\t\t\t\"iam:DetachRolePolicy\",\n\t\t\t\t\"iam:PassRole\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:user/*\",\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:policy/*\",\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:role/*\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"cloudformation:*\",\n\t\t\t\t\"ecr:*\",\n\t\t\t\t\"ssm:*\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n\t\t\t\t\"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n\t\t\t\t\"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n\t\t\t\t\"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"s3:*\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:s3:::cdk*\",\n\t\t\t\t\"arn:aws:s3:::sp-api-app-bucket*\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Inbound Plan Request Structure\nDESCRIPTION: JSON structure for canceling an existing inbound plan. Requires API credentials and the inbound plan ID to be canceled.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Non_Partnered_Carrier/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiCredentials\": {\n    \"refreshToken\": \"Atzr|Abc123def456xyz789\",\n    \"regionCode\": \"NA\"\n  },\n  \"inboundPlanId\": \"wxxxxxxxxxxxxxxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tracking Information Request Structure\nDESCRIPTION: JSON structure for updating tracking information of an existing inbound plan. Contains API credentials and requests for listing inbound plan boxes and updating shipment tracking details.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Non_Partnered_Carrier/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiCredentials\": {\n    \"refreshToken\": \"Atzr|Abc123def456xyz789\",\n    \"regionCode\": \"NA\"\n  },\n  \"listInboundPlanBoxesRequest\": {\n    \"inboundPlanId\": \"wxxxxxxxxxxxxxxxxxxxx\"\n  },\n  \"updateShipmentTrackingRequest\": {\n    \"shipmentId\": \"shxxxxxxxxxxxxxxxxxxxx\",\n    \"trackingId\": \"xxxxxxxxxxxxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Application Dependencies\nDESCRIPTION: Commands for cloning the repository and installing necessary Node.js dependencies for both the main application and Lambda functions.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [repository-url]\ncd [project-directory]\nnpm install\ncd lambda\nnpm install\ncd ..\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Definition for SP-API Application\nDESCRIPTION: AWS IAM policy JSON that defines required permissions for deploying and managing the SP-API application. Includes permissions for IAM, CloudFormation, ECR, SSM, and S3 resources.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppIAMPolicy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"iam:CreateUser\",\n\t\t\t\t\"iam:DeleteUser\",\n\t\t\t\t\"iam:CreatePolicy\",\n\t\t\t\t\"iam:DeletePolicy\",\n\t\t\t\t\"iam:AttachUserPolicy\",\n\t\t\t\t\"iam:DetachUserPolicy\",\n\t\t\t\t\"iam:CreateAccessKey\",\n\t\t\t\t\"iam:DeleteAccessKey\",\n\t\t\t\t\"iam:GetRole\",\n\t\t\t\t\"iam:CreateRole\",\n\t\t\t\t\"iam:TagRole\",\n\t\t\t\t\"iam:AttachRolePolicy\",\n\t\t\t\t\"iam:PutRolePolicy\",\n\t\t\t\t\"iam:DeleteRole\",\n\t\t\t\t\"iam:DeleteRolePolicy\",\n\t\t\t\t\"iam:DetachRolePolicy\",\n\t\t\t\t\"iam:PassRole\",\n\t\t\t\t\"sts:AssumeRole\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:user/*\",\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:policy/*\",\n\t\t\t    \"arn:aws:iam::<aws_account_id_number>:role/*\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"cloudformation:*\",\n\t\t\t\t\"ecr:*\",\n\t\t\t\t\"ssm:*\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:cloudformation:*:<aws_account_id_number>:stack/CDKToolkit/*\",\n\t\t\t\t\"arn:aws:ecr:*:<aws_account_id_number>:repository/cdk*\",\n\t\t\t\t\"arn:aws:ssm:*:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n\t\t\t\t\"arn:aws:cloudformation:*:<aws_account_id_number>:stack/sp-api-app*\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"s3:*\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:s3:::cdk*\",\n\t\t\t\t\"arn:aws:s3:::sp-api-app-bucket*\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Amazon SP-API Inbound Shipment\nDESCRIPTION: Core constants used in the workflow for quantity and content information source. These values are hardcoded and should not be included in the JSON input.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nQUANTITY = 1;                                         // Single Box and Single Item.\nCONTENT_INFORMATION_SOURCE = \"BOX_CONTENT_PROVIDED\"; // Box contents have been provided by the seller.\n```\n\n----------------------------------------\n\nTITLE: Create Inbound Plan JSON Input Structure for SPAPI Workflow\nDESCRIPTION: JSON input structure for creating an inbound plan using the Selling Partner API. This includes API credentials, marketplace details, source address, packing information, transportation options, and label generation requirements.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiCredentials\": {\n    \"refreshToken\": \"Atzr|Abc123def456xyz789\",\n    \"regionCode\": \"NA\"\n  },\n  \"createInboundPlanRequest\": {\n    \"destinationMarketplace\": \"ATVPDKIKX0DER\",\n    \"msku\": \"XX-XXXX-XXXX\",\n    \"labelOwner\": \"AMAZON or SELLER or NONE\",\n    \"prepOwner\": \"AMAZON or SELLER or NONE\",\n    \"sourceAddress\": {\n      \"addressLine1\": \"xxx xxx\",\n      \"addressLine2\": \"xxx\",\n      \"city\": \"xxx\",\n      \"stateOrProvinceCode\": \"xx\",\n      \"countryCode\": \"xx\",\n      \"postalCode\": \"xxxxx\",\n      \"name\": \"Test\",\n      \"phoneNumber\": \"xxxxxxxxxx\",\n      \"companyName\": \"Testing\",\n      \"email\": \"test@email.com\"\n    },\n    \"inboundPlanName\": \"Pallet_Pack_Later_TestPlan\"\n  },\n  \"setPackingInformationRequest\": {\n    \"boxWeight\": {\n      \"unit\": \"LB\",\n      \"value\": 1\n    },\n    \"boxDimensions\": {\n      \"unitOfMeasurement\": \"IN\",\n      \"length\": 20,\n      \"width\": 20,\n      \"height\": 20\n    }\n  },\n  \"generateTransportationOptionsRequest\": {\n    \"readyToShipWindow\": \"yyyy-mm-ddT00:00:00Z\",\n    \"contactInformation\": {\n      \"name\": \"TestName\",\n      \"phoneNumber\": \"1234567890\",\n      \"email\": \"test@email.com\"\n    },\n    \"freightInformation\": {\n      \"declaredValue\": {\n        \"amount\": 10,\n        \"code\": \"USD\"\n      },\n      \"freightClass\": \"FC_XX\"\n    },\n    \"palletDimensions\": {\n      \"unitOfMeasurement\": \"IN\",\n      \"length\": 40,\n      \"width\": 40,\n      \"height\": 40\n    },\n    \"stackability\": \"STACKABLE\",\n    \"palletWeight\": {\n      \"unit\": \"LB\",\n      \"value\": 20\n    }\n  },\n  \"getLabelsRequest\": {\n    \"PageType\": \"PackageLabel_A4_4\",\n    \"PageSize\": 4,\n    \"NumberOfPallets\": 1,\n    \"LabelType\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Subscribing to Data Kiosk Notifications\nDESCRIPTION: JSON input payload for the SPAPISubscribeNotificationsLambdaFunction. This payload specifies the notification type to subscribe to, which in this case is DATA_KIOSK_QUERY_PROCESSING_FINISHED.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"DATA_KIOSK_QUERY_PROCESSING_FINISHED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending ORDER_CHANGE Notification via SQS in JSON\nDESCRIPTION: JSON payload for sending an ORDER_CHANGE notification through Amazon SQS to test the sample solution. It includes order details and a sandbox flag for testing purposes.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/solicitations/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\",\n    \"Payload\": {\n        \"OrderChangeNotification\": {\n            \"SellerId\": \"ABCDEF12345678\",\n            \"AmazonOrderId\": \"123-1234567-1234567\",\n            \"Summary\": {\n                \"MarketplaceId\": \"ATVPDKIKX0DER\",\n                \"OrderStatus\": \"Shipped\",\n                \"EarliestDeliveryDate\": \"2024-01-01T13:30:00.000Z\",\n                \"LatestDeliveryDate\": \"2024-12-31T13:30:00.000Z\"\n            }\n        }\n    },\n    \"Sandbox\": \"Yes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lambda Function Resources in CloudFormation\nDESCRIPTION: CloudFormation template snippet for creating a new Lambda function resource with appropriate naming, permissions, and configuration. The template includes function code location, handler reference, execution role, and environment variables for SP-API integration.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-lambda.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOLambdaFunction:\n  Type: 'AWS::Lambda::Function'\n  Properties:\n    FunctionName: !Join\n      - '-'\n      - - SPAPIDEMOFunction\n        - !Ref RandomSuffix\n    Description: DEMO Lambda function\n    Code:\n      S3Bucket: !Ref ArtifactsS3BucketName\n      S3Key: !Ref LambdaFunctionsCodeS3Key\n    Handler: !Ref DEMOLambdaFunctionHandler\n    Role: !GetAtt\n      - DEMOLambdaExecutionRole\n      - Arn\n    Runtime: !Ref ProgrammingLanguage\n    MemorySize: 512\n    Timeout: 60\n    Environment:\n      Variables:\n        IAM_USER_CREDENTIALS_SECRET_ARN: !Ref SPAPIUserCredentials\n        SP_API_APP_CREDENTIALS_SECRET_ARN: !Ref SPAPIAppCredentials\n        ROLE_ARN: !Ref RoleArn\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket Resource in CloudFormation Template\nDESCRIPTION: CloudFormation YAML definition for creating a new S3 bucket with proper security configurations including public access blocking and encryption. The bucket name is generated dynamically using a prefix and a random suffix.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-s3.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOS3Bucket:\n    Type: 'AWS::S3::Bucket'\n    Properties:\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        IgnorePublicAcls: true\n        BlockPublicPolicy: true\n        RestrictPublicBuckets: true\n      BucketName: !Join\n        - '-'\n        - - sp-api-DOCDESCRIPTION-s3-bucket\n          - !Ref RandomSuffix\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n```\n\n----------------------------------------\n\nTITLE: Marking a Partner as Inactive\nDESCRIPTION: API call example for marking a partner's integration status as inactive. Used when a partner hasn't been actively using the integration, which triggers automated communication and status tracking.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Example API call to mark a partner inactive\nawait fetch(`${API_ENDPOINT}/partners/${partnerId}/status`, {\n    method: 'PUT',\n    body: JSON.stringify({ status: 'inactive' })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS Queue Policy for SP-API Notifications\nDESCRIPTION: This snippet defines an SQS queue policy that allows SP-API to send messages to the queue. It grants the SP-API service principal (437568002678) permission to send messages and get queue attributes.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-sqs.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOQueuePolicy:\n  Type: 'AWS::SQS::QueuePolicy'\n  Properties:\n    Queues:\n      - !Ref DEMOQueue\n    PolicyDocument:\n      Statement:\n        - Effect: Allow\n          Action:\n            - 'SQS:SendMessage'\n            - 'SQS:GetQueueAttributes'\n          Resource: !GetAtt\n            - DEMOQueue\n            - Arn\n          Principal:\n            AWS:\n              - '437568002678'\n```\n\n----------------------------------------\n\nTITLE: PRICING_HEALTH Notification Test Payload\nDESCRIPTION: Sample JSON payload for testing PRICING_HEALTH notification type in SQS. Includes pricing health indicators, offer details, and competitive price thresholds.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notificationVersion\": \"1.0\",\n  \"notificationType\": \"PRICING_HEALTH\",\n  \"payloadVersion\": \"1.0\",\n  \"eventTime\": \"2020-09-23T21:30:13.713Z\",\n  \"payload\":\n  {\n    \"issueType\": \"BuyBoxDisqualification\",\n    \"sellerId\": \"AMY6FKRUBY7XV\",\n    \"offerChangeTrigger\":\n    {\n      \"marketplaceId\": \"ATVPDKIKX0DER\",\n      \"asin\": \"B00V5DG6IQ\",\n      \"itemCondition\": \"new\",\n      \"timeOfOfferChange\": \"2020-09-23T21:30:13.409Z\"\n    },\n    \"merchantOffer\":\n    {\n      \"condition\": \"new\",\n      \"fulfillmentType\": \"MFN\",\n      \"listingPrice\":\n      {\n        \"amount\": 1200,\n        \"currencyCode\": \"USD\"\n      },\n      \"shipping\":\n      {\n        \"amount\": 100,\n        \"currencyCode\": \"USD\"\n      },\n      \"landedPrice\":\n      {\n        \"amount\": 1300,\n        \"currencyCode\": \"USD\"\n      },\n      \"points\":\n      {\n        \"pointsNumber\": 0\n      }\n    },\n    \"summary\":\n    {\n      \"numberOfOffers\": [\n        {\n          \"condition\": \"new\",\n          \"fulfillmentType\": \"MFN\",\n          \"offerCount\": 3\n        }\n      ],\n      \"buyBoxEligibleOffers\": [\n        {\n          \"condition\": \"new\",\n          \"fulfillmentType\": \"MFN\",\n          \"offerCount\": 3\n        }\n      ],\n      \"buyBoxPrices\": [\n        {\n          \"condition\": \"new\",\n          \"listingPrice\":\n          {\n            \"amount\": 900,\n            \"currencyCode\": \"USD\"\n          },\n          \"shipping\":\n          {\n            \"amount\": 100,\n            \"currencyCode\": \"USD\"\n          },\n          \"landedPrice\":\n          {\n            \"amount\": 1000,\n            \"currencyCode\": \"USD\"\n          },\n          \"points\":\n          {\n            \"pointsNumber\": 0\n          }\n        }\n      ],\n      \"referencePrice\":\n      {\n        \"averageSellingPrice\":\n        {\n          \"amount\": 1050,\n          \"currencyCode\": \"USD\"\n        },\n        \"competitivePriceThreshold\":\n        {\n          \"amount\": 980,\n          \"currencyCode\": \"USD\"\n        },\n        \"msrpPrice\":\n        {\n          \"amount\": 1300,\n          \"currencyCode\": \"USD\"\n        },\n        \"retailOfferPrice\":\n        {\n          \"amount\": 1000,\n          \"currencyCode\": \"USD\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Amazon Notifications Payload in JSON\nDESCRIPTION: JSON payload structure for subscribing to Amazon notifications. It includes the refresh token, region code, and notification type to subscribe to.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"RefreshToken\": \"Atzr|Iw...\",\n    \"RegionCode\": \"NA|EU|FE\",\n    \"NotificationType\": \"FULFILLMENT_ORDER_STATUS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Test Item for SP-API Sample Solution\nDESCRIPTION: JSON structure for creating a test item in DynamoDB table for sandbox environment testing. Contains essential attributes like ASIN, SKU, Condition, and pricing rules.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"ASIN\":{\"S\":\"B00V5DG6IQ\"},\"SKU\":{\"S\":\"NABetaASINB00V5DG6IQ\"},\"Condition\":{\"S\":\"new\"},\"IsFulfilledByAmazon\":{\"BOOL\":false},\"MarketplaceId\":{\"S\":\"ATVPDKIKX0DER\"},\"MinThreshold\":{\"N\":\"5\"},\"PriceChangeRule\":{\"S\":\"FIXED\"},\"PriceChangeRuleAmount\":{\"N\":\"1\"},\"SellerId\":{\"S\":\"AMY6FKRUBY7XV\"},\"UseCompetitivePrice\":{\"BOOL\":true}}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Policy for DynamoDB Table Access (YAML)\nDESCRIPTION: This snippet shows how to define an IAM policy that grants write access (PutItem) to the DynamoDB table for a Lambda function's execution role.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-dynamodb.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- PolicyName: DynamoDBDEMOPolicy\n  PolicyDocument:\n    Version: 2012-10-17\n    Statement:\n      - Effect: Allow\n        Action: 'dynamodb:PutItem'\n        Resource: !GetAtt\n          - DEMOTable\n          - Arn\n```\n\n----------------------------------------\n\nTITLE: B2B Offer Change Notification Sample for SQS\nDESCRIPTION: Sample SQS message body representing a B2B offer change notification. Contains detailed pricing information across different quantity tiers and shipping details.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"notificationType\": \"B2B_ANY_OFFER_CHANGED\",\n    \"payload\": {\n        \"b2bAnyOfferChangedNotification\": {\n            \"sellerId\": \"ABCDEFGH\",\n            \"offerChangeTrigger\": {\n                \"marketplaceId\": \"ATVPDKIKX0DER\",\n                \"asin\": \"ASIN1234\",\n                \"itemCondition\": \"New\",\n                \"timeOfOfferChange\": \"2020-09-23T21:30:13.409Z\"\n            },\n            \"summary\": {\n                \"numberOfOffers\": [\n                    {\n                        \"condition\": \"New\",\n                        \"fulfillmentChannel\": \"Merchant\",\n                        \"offerCount\": 3\n                    }\n                ],\n                \"buyBoxEligibleOffers\": [\n                    {\n                        \"condition\": \"New\",\n                        \"fulfillmentChannel\": \"Merchant\",\n                        \"offerCount\": 3\n                    }\n                ],\n                \"buyBoxPrices\": [\n                        {\n                        \"condition\": \"New\",\n                        \"fulfillmentChannel\": \"Merchant\",\n                        \"offerType\": \"B2B\",\n                        \"quantityTier\": 1,\n                        \"listingPrice\": {\n                            \"amount\": 334.23,\n                            \"currencyCode\": \"USD\"\n                        },\n                        \"shipping\": {\n                            \"amount\": 4.49,\n                            \"currencyCode\": \"USD\"\n                        },\n                        \"landedPrice\": {\n                            \"amount\": 338.72,\n                            \"currencyCode\": \"USD\"\n                        }\n                    },\n                    {\n                        \"condition\": \"New\",\n                        \"fulfillmentChannel\": \"Merchant\",\n                        \"offerType\": \"B2B\",\n                        \"quantityTier\": 2,\n                        \"listingPrice\": {\n                            \"amount\": 332.99,\n                            \"currencyCode\": \"USD\"\n                        },\n                        \"shipping\": {\n                            \"amount\": 4.49,\n                            \"currencyCode\": \"USD\"\n                        }\n                    },\n                    {\n                        \"condition\": \"New\",\n                        \"fulfillmentChannel\": \"Merchant\",\n                        \"offerType\": \"B2B\",\n                        \"quantityTier\": 5,\n                        \"discountType\": \"QUANTITY_DISCOUNT\",\n                        \"listingPrice\": {\n                            \"amount\": 330.99,\n                            \"currencyCode\": \"USD\"\n                        },\n                        \"shipping\": {\n                            \"amount\": 4.49,\n                            \"currencyCode\": \"USD\"\n                        }\n                    }\n                ]\n            },\n            \"offers\": [\n                {\n                    \"sellerId\": \"ABCDEFGH\",\n                    \"subCondition\": \"New\",\n                    \"sellerFeedbackRating\": {\n                        \"feedbackCount\": 1,\n                        \"sellerPositiveFeedbackRating\": 0\n                    },\n                    \"shippingTime\": {\n                        \"minimumHours\": 24,\n                        \"maximumHours\": 48,\n                        \"availabilityType\": \"available\",\n                        \"availableDate\": \"2020-07-13T19:42:04.284Z\"\n                    },\n                    \"listingPrice\": {\n                        \"amount\": 550.99,\n                        \"currencyCode\": \"USD\"\n                    },\n                    \"shipping\": {\n                        \"amount\": 4.49,\n                        \"currencyCode\": \"USD\"\n                    },\n                    \"shipsFrom\": {\n                        \"country\": \"US\"\n                    },\n                    \"isFulfilledByAmazon\": false,\n                    \"isBuyBoxWinner\": false,\n                    \"conditionNotes\": \"New in box\",\n                    \"primeInformation\": {\n                        \"isPrime\": true,\n                        \"isNationalPrime\": true\n                    },\n                    \"isFeaturedMerchant\": true\n                }\n            ]\n        }\n    }}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to ORDER_CHANGE Notification in AWS Lambda\nDESCRIPTION: JSON payload for subscribing to ORDER_CHANGE notifications using a Lambda function. This is used to test the notification subscriber functionality of the Sample Solution App.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\"\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for SP-API Sample Application Deployment\nDESCRIPTION: AWS IAM policy JSON defining permissions required for deploying the SP-API sample application. Includes permissions for IAM user management, CloudFormation, ECR, SSM, and S3 operations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/solicitations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \t\"Version\": \"2012-10-17\",\n \t\"Statement\": [\n \t\t{\n \t\t\t\"Sid\": \"SPAPISampleAppIAMPolicy\",\n \t\t\t\"Effect\": \"Allow\",\n \t\t\t\"Action\": [\n \t\t\t\t\"iam:CreateUser\",\n \t\t\t\t\"iam:DeleteUser\",\n \t\t\t\t\"iam:CreatePolicy\",\n \t\t\t\t\"iam:DeletePolicy\",\n \t\t\t\t\"iam:AttachUserPolicy\",\n \t\t\t\t\"iam:DetachUserPolicy\",\n \t\t\t\t\"iam:CreateAccessKey\",\n \t\t\t\t\"iam:DeleteAccessKey\",\n\t\t\t\t\"iam:GetRole\",\n\t\t\t\t\"iam:CreateRole\",\n\t\t\t\t\"iam:TagRole\",\n\t\t\t\t\"iam:AttachRolePolicy\",\n\t\t\t\t\"iam:PutRolePolicy\",\n\t\t\t\t\"iam:DeleteRole\",\n\t\t\t\t\"iam:DeleteRolePolicy\",\n\t\t\t\t\"iam:DetachRolePolicy\",\n\t\t\t\t\"iam:PassRole\"\n \t\t\t],\n \t\t\t\"Resource\": [\n \t\t\t\t\"arn:aws:iam::<aws_account_id_number>:user/*\",\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:policy/*\",\n\t\t\t\t\"arn:aws:iam::<aws_account_id_number>:role/*\"\n \t\t\t]\n \t\t},\n \t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"cloudformation:*\",\n\t\t\t\t\"ecr:*\",\n\t\t\t\t\"ssm:*\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n\t\t\t\t\"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n\t\t\t\t\"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n\t\t\t\t\"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"s3:*\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:s3:::cdk*\",\n\t\t\t\t\"arn:aws:s3:::sp-api-app-bucket*\"\n\t\t\t]\n\t\t}\n \t]\n }\n```\n\n----------------------------------------\n\nTITLE: Updating IAM Policy for DynamoDB Resource Creation (JSON)\nDESCRIPTION: This snippet illustrates how to update the IAM policy to include permissions for creating, deleting, and describing DynamoDB tables. This is necessary when adding the first DynamoDB table to the CloudFormation template.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-dynamodb.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"DynamoDBPermissions\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"dynamodb:CreateTable\",\n    \"dynamodb:DeleteTable\",\n    \"dynamodb:DescribeTable\"\n  ],\n  \"Resource\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample ORDER_CHANGE Notification for SQS Testing\nDESCRIPTION: JSON payload representing a sample ORDER_CHANGE notification. This is used to test the Sample Solution App by sending it to the SQS queue created during deployment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/docs/DEPLOYMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"NotificationType\":\"ORDER_CHANGE\",\n    \"EventTime\":\"2024-11-18T05:30:00.000Z\",\n    \"Payload\":{\n       \"OrderChangeNotification\":{\n          \"NotificationLevel\":\"OrderLevel\",\n          \"AmazonOrderId\":\"503-0151506-6094220\",\n          \"Summary\":{\n             \"MarketplaceID\":\"A1VC38T7YXB528\",\n             \"OrderStatus\":\"Unshipped\",\n             \"FulfillmentType\":\"MFN\"\n          }\n       }\n    }\n }\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Landing Page with Authorization Button\nDESCRIPTION: HTML template for the landing page, including an 'Authorize' button that triggers the OAuth process.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <div class=\"container\">\n        Welcome to SP-API Auth Sample Application\n        <p><a href=\"https://developer-docs.amazon.com/sp-api/docs/website-authorization-workflow\">Read more on the website authorization workflow here</a></p>\n    </div>\n\n    <div class=\"container\">\n        <h2>Click the Authorize button below to start the process</h1>\n        <a href=\"{{ url_for('redirect_oauth') }}\">\n            <button>Authorize</button>\n        </a>\n    </div>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for Sample App Deployment\nDESCRIPTION: JSON policy document that grants the necessary IAM permissions for deploying the SP-API Sample Application. It allows creating users, policies, roles, and managing CloudFormation stacks and related resources.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SPAPISampleAppIAMPolicy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateUser\",\n                \"iam:DeleteUser\",\n                \"iam:CreatePolicy\",\n                \"iam:DeletePolicy\",\n                \"iam:AttachUserPolicy\",\n                \"iam:DetachUserPolicy\",\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\",\n                \"iam:GetRole\",\n                \"iam:CreateRole\",\n                \"iam:TagRole\",\n                \"iam:AttachRolePolicy\",\n                \"iam:PutRolePolicy\",\n                \"iam:DeleteRole\",\n                \"iam:DeleteRolePolicy\",\n                \"iam:DetachRolePolicy\",\n                \"iam:PassRole\",\n                \"sts:AssumeRole\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::417650863749:user/*\",\n                \"arn:aws:iam::417650863749:policy/*\",\n                \"arn:aws:iam::417650863749:role/*\"\n            ]\n        },\n        {\n            \"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:*\",\n                \"ecr:*\",\n                \"ssm:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:cloudformation:*:417650863749:stack/CDKToolkit/*\",\n                \"arn:aws:ecr:*:417650863749:repository/cdk*\",\n                \"arn:aws:ssm:*:417650863749:parameter/cdk-bootstrap/*\",\n                \"arn:aws:cloudformation:*:417650863749:stack/sp-api-app*\"\n            ]\n        },\n        {\n            \"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:*\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::cdk*\",\n                \"arn:aws:s3:::sp-api-app-bucket*\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Policy for AWS Elastic Beanstalk Deployment\nDESCRIPTION: JSON policy document that grants necessary permissions for deploying and managing an Elastic Beanstalk application. This policy allows actions related to Elastic Beanstalk, EC2, load balancing, auto-scaling, CloudWatch, CloudFormation, S3, and other AWS services.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/docs/DEPLOYMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"elasticbeanstalk:*\",\n        \"ec2:*\",\n        \"elasticloadbalancing:*\",\n        \"autoscaling:*\",\n        \"cloudwatch:*\",\n        \"cloudformation:*\",\n        \"s3:*\",\n        \"logs:*\",\n        \"cloudtrail:*\",\n        \"iam:*\",\n        \"kms:Decrypt\",\n        \"kms:Encrypt\",\n        \"kms:GenerateDataKey\",\n        \"kms:DescribeKey\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DynamoDB Inventory Item - JSON Structure\nDESCRIPTION: JSON structure for creating an inventory item in DynamoDB with required attributes including SKU, dimensions, weight, and stock information\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SKU\": {\n    \"S\": \"updateWithTestSku\"\n  },\n  \"Height\": {\n    \"N\": \"10\"\n  },\n  \"Length\": {\n    \"N\": \"10\"\n  },\n  \"SizeUnit\": {\n    \"S\": \"INCH\"\n  },\n  \"Stock\": {\n    \"N\": \"10\"\n  },\n  \"WeightUnit\": {\n    \"S\": \"GRAM\"\n  },\n  \"WeightValue\": {\n    \"N\": \"10\"\n  },\n  \"Width\": {\n    \"N\": \"10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for SP-API Application\nDESCRIPTION: IAM policy JSON that defines permissions required for the SP-API application deployment. Includes permissions for managing IAM users, policies, and access keys. Requires AWS account ID replacement.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Non_Partnered_Carrier/docs/Deployment_Guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SPAPIAppIAMPolicy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateUser\",\n                \"iam:DeleteUser\",\n                \"iam:CreatePolicy\",\n                \"iam:DeletePolicy\",\n                \"iam:AttachUserPolicy\",\n                \"iam:DetachUserPolicy\",\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::<aws_account_id_number>:user/*\",\n                \"arn:aws:iam::<aws_account_id_number>:policy/*\"\n            ]\n        }\n    ]\n }\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for SP-API Sample App Deployment\nDESCRIPTION: JSON policy document defining the necessary permissions for deploying the SP-API sample application, including IAM, CloudFormation, ECR, SSM, and S3 actions.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n     {\n         \"Sid\": \"SPAPISampleAppIAMPolicy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"iam:CreateUser\",\n             \"iam:DeleteUser\",\n             \"iam:CreatePolicy\",\n             \"iam:DeletePolicy\",\n             \"iam:AttachUserPolicy\",\n             \"iam:DetachUserPolicy\",\n             \"iam:CreateAccessKey\",\n             \"iam:DeleteAccessKey\",\n             \"iam:GetRole\",\n             \"iam:CreateRole\",\n             \"iam:TagRole\",\n             \"iam:AttachRolePolicy\",\n             \"iam:PutRolePolicy\",\n             \"iam:DeleteRole\",\n             \"iam:DeleteRolePolicy\",\n             \"iam:DetachRolePolicy\",\n             \"iam:PassRole\"\n         ],\n         \"Resource\": [\n             \"arn:aws:iam::<aws_account_id_number>:user/*\",\n             \"arn:aws:iam::<aws_account_id_number>:policy/*\",\n             \"arn:aws:iam::<aws_account_id_number>:role/*\"\n         ]\n     },\n     {\n         \"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"cloudformation:*\",\n             \"ecr:*\",\n             \"ssm:*\"\n         ],\n         \"Resource\": [\n             \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n             \"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n             \"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n             \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n         ]\n     },\n     {\n         \"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n         \"Effect\": \"Allow\",\n         \"Action\": [\n             \"s3:*\"\n         ],\n         \"Resource\": [\n             \"arn:aws:s3:::cdk*\",\n             \"arn:aws:s3:::sp-api-app-bucket*\"\n         ]\n     }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQS Permissions to IAM Policy\nDESCRIPTION: This snippet shows the IAM policy statement to include in the app's policy file. It grants permissions to create, delete, and manage SQS queues, which are needed for deploying SQS resources through CloudFormation.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-sqs.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"SQSPermissions\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"sqs:CreateQueue\",\n    \"sqs:DeleteQueue\",\n    \"sqs:SetQueueAttributes\",\n    \"sqs:GetQueueAttributes\"\n  ],\n  \"Resource\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Policy for S3 Bucket Access\nDESCRIPTION: CloudFormation YAML snippet that defines an IAM policy allowing Lambda functions to access the S3 bucket. This example specifically grants write access through the s3:PutObject permission.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-s3.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- PolicyName: S3DEMOPolicy\n  PolicyDocument:\n    Version: 2012-10-17\n    Statement:\n        - Effect: Allow\n          Action:\n            - 's3:PutObject'\n          Resource: !Sub\n            - '${BucketArn}/*'\n            - BucketArn: !GetAtt\n                - DEMOS3Bucket\n                - Arn\n```\n\n----------------------------------------\n\nTITLE: Executing Python Clean-up Script in Unix or Git Bash\nDESCRIPTION: This command demonstrates how to run the Python clean-up script for the Sample Solution App deployed to AWS cloud. It uses bash to execute the script located in the app/scripts/python directory.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbash python-app-clean.sh\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Displaying API Results\nDESCRIPTION: HTML template to display the results of the Sellers API call, showing marketplace participations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n    <p class=\"highlight\">Thanks for authorizing the SP-API Sample App</p>\n\n    {% if response.payload %}\n    <div class=\"response\">\n        <p>Your marketplace participations are:</p>\n        <ul>\n            {% for item in response.payload %}\n            <li>\n                <strong>ID:</strong> {{ item.marketplace.id }}<br>\n                <strong>Name:</strong> {{ item.marketplace.name }}<br>\n                <strong>Country Code:</strong> {{ item.marketplace.countryCode }}\n            </li>\n            {% endfor %}\n        </ul>\n    </div>\n    {% endif %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Test Event for SP-API Notification Subscription\nDESCRIPTION: JSON payload for testing the Lambda function that subscribes selling partners to notifications. Requires RefreshToken, RegionCode, and NotificationType parameters.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/DEPLOYMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"PRICING_HEALTH\",\n    \"RegionCode\": \"NA|EU|FE\",\n    \"RefreshToken\": \"Atzr|Iw...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Bucket Environment Variable to Lambda Functions\nDESCRIPTION: CloudFormation YAML snippet that defines an environment variable for Lambda functions to reference the S3 bucket. This variable provides the Lambda function with the bucket name at runtime.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-s3.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nDEMO_S3_BUCKET_NAME: !Ref DEMOS3Bucket\n```\n\n----------------------------------------\n\nTITLE: Creating Sample DynamoDB Item for SP-API Inventory\nDESCRIPTION: JSON representation of a sample inventory item to be added to the DynamoDB table. This includes SKU, dimensions, weight, and stock information for testing the Sample Solution App.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"SKU\":{\n      \"S\":\"TEST-SKU-001\"\n   },\n   \"Height\":{\n      \"N\":\"12\"\n   },\n   \"Length\":{\n      \"N\":\"10\"\n   },\n   \"SizeUnit\":{\n      \"S\":\"CM\"\n   },\n   \"Stock\":{\n      \"N\":\"10\"\n   },\n   \"WeightUnit\":{\n      \"S\":\"GRAMS\"\n   },\n   \"WeightValue\":{\n      \"N\":\"100\"\n   },\n   \"Width\":{\n      \"N\":\"20\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample Solution App in app.config\nDESCRIPTION: This snippet shows how to configure the app.config file with the necessary credentials and email for the Sample Solution App to connect to SP-API.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/docs/Deployment_Guide.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nEmail=test@test.com\n```\n\n----------------------------------------\n\nTITLE: ANY_OFFER_CHANGED Notification Test Payload\nDESCRIPTION: Sample JSON payload for testing ANY_OFFER_CHANGED notification type in SQS. Contains offer details including pricing, shipping, and marketplace information.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EventTime\": \"2023-07-31T20:41:15.002Z\",\n  \"PayloadVersion\": \"1.0\",\n  \"NotificationType\": \"ANY_OFFER_CHANGED\",\n  \"NotificationVersion\": \"1.0\",\n  \"Payload\": {\n    \"AnyOfferChangedNotification\": {\n      \"SellerId\": \"AMY6FKRUBY7XV\",\n      \"OfferChangeTrigger\": {\n        \"MarketplaceId\": \"ATVPDKIKX0DER\",\n        \"ASIN\": \"B00V5DG6IQ\",\n        \"ItemCondition\": \"new\",\n        \"TimeOfOfferChange\": \"2023-07-31T20:40:53.101Z\",\n        \"OfferChangeType\": \"Internal\"\n      },\n      \"Summary\": {\n        \"BuyBoxPrices\": [\n          {\n            \"Condition\": \"New\",\n            \"LandedPrice\": {\n              \"Amount\": 10.00,\n              \"CurrencyCode\": \"USD\"\n            },\n            \"ListingPrice\": {\n              \"Amount\": 9.00,\n              \"CurrencyCode\": \"USD\"\n            },\n            \"Shipping\": {\n              \"Amount\": 1.00,\n              \"CurrencyCode\": \"USD\"\n            }\n          }\n        ]\n      },\n      \"Offers\": [\n        {\n          \"SellerId\": \"AMY6FKRUBY7XV\",\n          \"SubCondition\": \"new\",\n          \"ListingPrice\": {\n            \"Amount\": 20.00,\n            \"CurrencyCode\": \"USD\"\n          },\n          \"Shipping\": {\n            \"Amount\": 1.00,\n            \"CurrencyCode\": \"USD\"\n          },\n          \"ShipsFrom\": {\n            \"Country\": \"US\",\n            \"State\": \"WA\"\n          },\n          \"IsFulfilledByAmazon\": false,\n          \"IsBuyBoxWinner\": false\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying CDK TypeScript Project\nDESCRIPTION: Common commands for managing a CDK TypeScript project, including building, watching for changes, deploying, comparing changes, and generating CloudFormation templates.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Maven Package Command for Java SDK\nDESCRIPTION: Command to build and verify the Java SDK package after importing the API SDK.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/code/java/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn package\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Inbound Management in Java\nDESCRIPTION: Constants defined for the inbound management workflow, including quantity, content information source, and page size. These are handled as constants in the workflow and should not be included in the JSON input.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Non_Partnered_Carrier/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nQUANTITY = 1;                                         // Single Box and Single Item.\nCONTENT_INFORMATION_SOURCE = \"BOX_CONTENT_PROVIDED\"; // Box contents have been provided by the seller.\nPAGE_SIZE = 20;\n```\n\n----------------------------------------\n\nTITLE: Sending LWA New Secret Notification JSON Payload to SQS\nDESCRIPTION: JSON payload for simulating an LWA new secret notification. This payload is sent to the SQS queue to trigger the secret update process. It includes client ID, application ID, new client secret, and expiry time information for both old and new secrets.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notificationVersion\": \"1.0\",\n  \"notificationType\": \"APPLICATION_OAUTH_CLIENT_NEW_SECRET\",\n  \"payloadVersion\": \"2023-11-30\",\n  \"eventTime\": \"2024-01-10T22:09:17.456Z\",\n  \"payload\": {\n    \"applicationOAuthClientNewSecret\": {\n      \"clientId\": \"amzn1.application-oa2-client.6XXXXXXXXXXXXXXXXXXXXXXXXX\",\n      \"newClientSecret\": \"amzn1.oa2-cs.v1.8b6XXXXXXXXXXXXXXXXXXXXXXXXX\",\n      \"newClientSecretExpiryTime\": \"2024-07-08T22:09:17.198Z\",\n      \"oldClientSecretExpiryTime\": \"2024-01-17T22:09:17.180Z\"\n    }\n  },\n  \"notificationMetadata\": {\n    \"applicationId\": \"amzn1.sp.solution.6XXXXXXXXXXXXXXXXXXXXXXXXX\",\n    \"subscriptionId\": \"8594dc0e-78dc-4b05-83a4-a6XXXXXXXXXXXXXX\",\n    \"publishTime\": \"2024-01-10T22:09:18.706Z\",\n    \"notificationId\": \"b0805eb9-78f7-49bb-ac0e-XXXXXXXXXXX\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Essential CDK TypeScript Commands\nDESCRIPTION: List of common NPM and CDK commands for building, watching, deploying, comparing and synthesizing CDK stacks.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/error-monitoring/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpx cdk deploy  deploy this stack to your default AWS account/region\nnpx cdk diff    compare deployed stack with current state\nnpx cdk synth   emits the synthesized CloudFormation template\n```\n\n----------------------------------------\n\nTITLE: Canceling Query in AWS Lambda\nDESCRIPTION: Payload structure for canceling an existing query using AWS Lambda function. Requires the query ID to be canceled.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/data-kiosk/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"QueryId\": \"1232942023\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running CDK Commands for TypeScript Project\nDESCRIPTION: Common CDK and npm commands for developing, compiling, deploying, and managing the Merchant Fulfilment API sample solution. Includes commands for building TypeScript code, watching for changes, deploying the stack, comparing changes, and generating CloudFormation templates.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Order Change Notification - SQS Message Format\nDESCRIPTION: JSON structure for sending order change notifications to SQS queue with order details and marketplace information\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\",\n    \"EventTime\": \"2023-07-01T15:30:00.000Z\",\n    \"Payload\": {\n        \"OrderChangeNotification\": {\n            \"NotificationLevel\": \"OrderLevel\",\n            \"AmazonOrderId\": \"123-4566876-1233504309\",\n            \"Summary\": {\n                \"MarketplaceId\": \"ATVPDKIKX0DER\",\n                \"OrderStatus\": \"Unshipped\",\n                \"FulfillmentType\": \"MFN\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials and Deployment\nDESCRIPTION: Commands for configuring AWS credentials and deploying the application stack, with optional instance-specific deployment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/auth-lifecycle-management/QuickStart.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws configure\nnpm run deploy\nnpm run deploy [instance-name]\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Data Collection Opt-Out\nDESCRIPTION: Modify the OPT_OUT variable in ApiUtils.cs to disable data collection for C# implementations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/METRICS_GUIDE.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nOPT_OUT = true;\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Inbound Fulfillment Workflow in Java\nDESCRIPTION: Constants declaration for the inbound fulfillment workflow including quantity, content information source and page size settings. These values are hardcoded in the Constants.java file and should not be included in the JSON input.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nQUANTITY = 1;                                         // Single Box, Single Item and Single Pallet.\nCONTENT_INFORMATION_SOURCE = \"BOX_CONTENT_PROVIDED\"; // Box contents have been provided by the seller.\nPAGE_SIZE = 20;\n```\n\n----------------------------------------\n\nTITLE: Adding DynamoDB Item Using AWS CLI\nDESCRIPTION: AWS CLI command to add a sample inventory item to the DynamoDB table. This command is an alternative to manually creating the item through the AWS console.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/docs/DEPLOYMENT.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws dynamodb put-item --table-name SPAPIInventory-updateRandomSuffix --item '{\"SKU\":{\"S\":\"TEST-SKU-001\"},\"Height\":{\"N\":\"12\"},\"Length\":{\"N\":\"10\"},\"SizeUnit\":{\"S\":\"INCH\"},\"Stock\":{\"N\":\"10\"},\"WeightUnit\":{\"S\":\"GRAMS\"},\"WeightValue\":{\"N\":\"100\"},\"Width\":{\"N\":\"20\"}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for Local Deployment\nDESCRIPTION: Bash commands for creating and activating a Python virtual environment before installing the application dependencies for local deployment. This isolates the application dependencies from the system Python installation.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .\nsource bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Data Collection Opt-Out\nDESCRIPTION: Modify the OPT_OUT variable in ApiUtils.java to disable data collection for Java implementations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/METRICS_GUIDE.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOPT_OUT = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Order Change Notification Test Message for SQS\nDESCRIPTION: JSON structure for simulating an order change notification message to be sent to SQS queue. Contains order status information and basic order details for testing purposes.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\",\n    \"EventTime\": \"2023-07-01T15:30:00.000Z\",\n    \"Payload\": {\n        \"OrderChangeNotification\": {\n            \"NotificationLevel\": \"OrderLevel\",\n            \"AmazonOrderId\": \"123-1234567-1234567\",\n            \"Summary\": {\n                \"OrderStatus\": \"Unshipped\",\n                \"FulfillmentType\": \"MFN\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Java Cleanup Script in Unix/Git Bash\nDESCRIPTION: Command to execute the Java application cleanup script that removes AWS resources deployed during testing. This should be run from the terminal or Git Bash environment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app-clean.sh\n```\n\n----------------------------------------\n\nTITLE: Comparing Deployed CDK Stack with Current State\nDESCRIPTION: Compares the deployed CDK stack with the current state of the project.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/app/sp-api-app-cdk/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx cdk diff\n```\n\n----------------------------------------\n\nTITLE: Deploying CDK Stack to AWS\nDESCRIPTION: Deploys the current CDK stack to the default AWS account and region.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/app/sp-api-app-cdk/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpx cdk deploy\n```\n\n----------------------------------------\n\nTITLE: Package Tracking Notification Payload in JSON\nDESCRIPTION: JSON payload structure for triggering package tracking. It includes order status details and the seller fulfillment order ID to be tracked.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationVersion\": \"1.0\",\n    \"NotificationType\": \"FULFILLMENT_ORDER_STATUS\",\n    \"PayloadVersion\": \"1.0\",\n    \"EventTime\": \"2020-01-11T00:09:53.109Z\",\n    \"Payload\":\n    {\n        \"FulfillmentOrderStatusNotification\":\n        {\n            \"SellerId\": \"SellerId\",\n            \"EventType\": \"Order\",\n            \"StatusUpdatedDateTime\": \"2020-01-11T00:09:53.109Z\",\n            \"SellerFulfillmentOrderId\": \"<SellerFulfillmentOrderId>\",\n            \"FulfillmentOrderStatus\": \"Complete\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying CDK TypeScript Project for Pricing B2B API\nDESCRIPTION: This snippet provides a set of npm and CDK commands for managing the project. It includes commands for compiling TypeScript to JavaScript, watching for changes, deploying the stack, comparing the deployed stack with the current state, and synthesizing the CloudFormation template.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpx cdk deploy  deploy this stack to your default AWS account/region\nnpx cdk diff    compare deployed stack with current state\nnpx cdk synth   emits the synthesized CloudFormation template\n```\n\n----------------------------------------\n\nTITLE: Executing Java Deployment Script for SP-API Sample App\nDESCRIPTION: Command to run the deployment script for the Java version of the SP-API sample application using Bash or Git Bash.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/merchant-fulfillment/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying CDK Stack to AWS\nDESCRIPTION: This command deploys the CDK stack to the default AWS account and region specified in the configuration.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/app/sp-api-app-cdk/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx cdk deploy\n```\n\n----------------------------------------\n\nTITLE: Basic CDK Project Commands\nDESCRIPTION: A list of essential commands for working with a CDK TypeScript project, including building, watching for changes, deploying, comparing, and synthesizing the CloudFormation template.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build   compile typescript to js\nnpm run watch   watch for changes and compile\nnpx cdk deploy  deploy this stack to your default AWS account/region\nnpx cdk diff    compare deployed stack with current state\nnpx cdk synth   emits the synthesized CloudFormation template\n```\n\n----------------------------------------\n\nTITLE: Executing Java Clean-up Script in Bash\nDESCRIPTION: Bash command to execute the Java clean-up script for the Sample Solution App. This script removes all AWS resources created during deployment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app-clean.sh\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Notifications using Lambda Function in JSON\nDESCRIPTION: JSON payload for testing the Lambda function that subscribes selling partners to notifications. It includes the notification type, region code, and refresh token for authentication.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/solicitations/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CHANGE\",\n    \"RegionCode\": \"NA|EU|FE\",\n    \"RefreshToken\": \"Atzr|Iw...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Shipment Request - Lambda Test Event\nDESCRIPTION: JSON payload for testing the cancel shipment Lambda function with shipment ID\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/docs/DEPLOYMENT.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ShipmentId\": \"1232ndaodn9314etc..\"\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes in TypeScript Project\nDESCRIPTION: Watches for changes in the TypeScript files and automatically compiles them.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/app/sp-api-app-cdk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CloudFormation Template\nDESCRIPTION: This command synthesizes and outputs the AWS CloudFormation template for the CDK stack.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/app/sp-api-app-cdk/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Canceling Order Notification Payload in JSON\nDESCRIPTION: JSON payload structure for canceling a fulfillment order. It includes the order ID to be canceled. Only orders in the 'Received' or 'Planning' status can be canceled.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"NotificationType\": \"ORDER_CANCEL\",\n    \"EventTime\": \"2023-07-01T15:30:00.000Z\",\n    \"Payload\": {\n        \"cancelFulfillmentOrderNotification\": {\n            \"sellerFulfillmentOrderId\": \"<sellerFulfillmentOrderId>\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for Sample Solution Deployment\nDESCRIPTION: JSON policy document that defines the necessary IAM permissions for deploying the SP-API sample solution. The policy grants permissions to create/delete users, policies, access keys, and to attach/detach policies.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/docs/Deployment_Guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SPAPIAppIAMPolicy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateUser\",\n                \"iam:DeleteUser\",\n                \"iam:CreatePolicy\",\n                \"iam:DeletePolicy\",\n                \"iam:AttachUserPolicy\",\n                \"iam:DetachUserPolicy\",\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::<aws_account_id_number>:user/*\",\n                \"arn:aws:iam::<aws_account_id_number>:policy/*\"\n            ]\n        }\n    ]\n }\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Project with npm\nDESCRIPTION: Compiles TypeScript code to JavaScript using npm.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building and Compiling TypeScript CDK Project\nDESCRIPTION: Commands for building, watching, and deploying a CDK TypeScript project for the Solicitations API. These commands help with compiling TypeScript to JavaScript, watching for changes, deploying to AWS, comparing stack states, and generating CloudFormation templates.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/solicitations/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Local Deployment\nDESCRIPTION: Bash command for installing the required Python packages listed in the requirements.txt file, which contains all dependencies needed for the sample solution application.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for SP-API Sample App Deployment\nDESCRIPTION: JSON policy document defining the necessary IAM permissions for deploying and managing the SP-API sample application resources in AWS.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Sid\": \"SPAPISampleAppIAMPolicy\",\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"iam:CreateUser\",\n    \"iam:DeleteUser\",\n    \"iam:CreatePolicy\",\n    \"iam:DeletePolicy\",\n    \"iam:AttachUserPolicy\",\n    \"iam:DetachUserPolicy\",\n    \"iam:CreateAccessKey\",\n    \"iam:DeleteAccessKey\",\n    \"iam:GetRole\",\n    \"iam:CreateRole\",\n    \"iam:TagRole\",\n    \"iam:AttachRolePolicy\",\n    \"iam:PutRolePolicy\",\n    \"iam:DeleteRole\",\n    \"iam:DeleteRolePolicy\",\n    \"iam:DetachRolePolicy\",\n    \"iam:PassRole\"\n   ],\n   \"Resource\": [\n    \"arn:aws:iam::<aws_account_id_number>:user/*\",\n    \"arn:aws:iam::<aws_account_id_number>:policy/*\",\n    \"arn:aws:iam::<aws_account_id_number>:role/*\"\n   ]\n  },\n  {\n   \"Sid\": \"SPAPISampleAppCloudFormationPolicy\",\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"cloudformation:*\",\n    \"ecr:*\",\n    \"ssm:*\"\n   ],\n   \"Resource\": [\n    \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/CDKToolkit/*\",\n    \"arn:aws:ecr:us-east-1:<aws_account_id_number>:repository/cdk*\",\n    \"arn:aws:ssm:us-east-1:<aws_account_id_number>:parameter/cdk-bootstrap/*\",\n    \"arn:aws:cloudformation:us-east-1:<aws_account_id_number>:stack/sp-api-app*\"\n   ]\n  },\n  {\n   \"Sid\": \"SPAPISampleAppCloudFormationS3Policy\",\n   \"Effect\": \"Allow\",\n   \"Action\": [\n    \"s3:*\"\n   ],\n   \"Resource\": [\n    \"arn:aws:s3:::cdk*\",\n    \"arn:aws:s3:::sp-api*\"\n   ]\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Java Deployment Script in Bash\nDESCRIPTION: Bash command to execute the Java deployment script for the Sample Solution App. This script creates the necessary AWS resources and deploys the application.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-outbound/docs/DEPLOYMENT.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app.sh\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CloudFormation Template from CDK\nDESCRIPTION: Generates and outputs the synthesized CloudFormation template from the CDK project.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/app/sp-api-app-cdk/README.md#2025-04-23_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Running the Flask Application Locally\nDESCRIPTION: Bash command to start the Flask web application locally. By default, the application will run on port 5000 and can be accessed via a web browser at localhost:5000.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/docs/DEPLOYMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 application.py\n```\n\n----------------------------------------\n\nTITLE: Sending LWA Secret Expiry Notification JSON Payload to SQS\nDESCRIPTION: JSON payload for simulating an LWA secret expiry notification. This payload is sent to the SQS queue to trigger the secret rotation process. It includes client ID, application ID, and expiry time information.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/lwa-rotation/docs/DEPLOYMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notificationVersion\":\"1.0\",\n  \"notificationType\":\"APPLICATION_OAUTH_CLIENT_SECRET_EXPIRY\",\n  \"payloadVersion\":\"2023-11-30\",\n  \"eventTime\":\"2024-01-10T02:15:10.045Z\",\n  \"payload\":{\n    \"applicationOAuthClientSecretExpiry\":{\n      \"clientId\":\"amzn1.application-oa2-client.xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"clientSecretExpiryTime\":\"2024-03-03T22:06:39.224Z\",\n      \"clientSecretExpiryReason\":\"PERIODIC_ROTATION\"\n    }\n  },\n  \"notificationMetadata\":{\n    \"applicationId\":\"amzn1.sp.solution.xxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"subscriptionId\":\"a275c00d-260c-4xxxxxxxxxxxf25\",\n    \"publishTime\":\"2024-01-10T02:15:14.269Z\",\n    \"notificationId\":\"e7e27216-4970-477a-882c-e4xxxxxxxxxxxxxdc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Deployed Stack with Current State\nDESCRIPTION: This command compares the deployed stack with the current state of the CDK application, showing any differences.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/app/sp-api-app-cdk/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx cdk diff\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript to JavaScript\nDESCRIPTION: This command compiles the TypeScript code to JavaScript, preparing it for deployment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feed Document Results with Java SP-API\nDESCRIPTION: Demonstrates the process of retrieving feed documents using the Selling Partner API Feed service. Initializes the Feed API client, retrieves feed results, downloads the feed document, and extracts the document reference ID.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n    //Initialize API Client\n    FeedsApi feedsApi = ApiUtils.getFeedsApi(input);\n\n    // Get Feeds\n    String resultFeedDocumentId = waitForFeedCompletion(feedsApi, input.getFeedId(), logger);\n    \n    // Get Feed Document\n    FeedDocument document = getFeedDocument(feedsApi, resultFeedDocumentId, logger);\n    \n    // Download Document\n    InputStream documentStream = HttpFileTransferUtil.download(document.getUrl(), null);\n    \n    // Extract documentReportReferenceId from the document\n    String documentReportReferenceId = XmlUtil.getXmlDocumentTag(documentStream, FEED_DOCUMENT_REPORT_REFERENCE_ID);\n    input.setReportId(documentReportReferenceId);\n\n    return input;\n```\n\n----------------------------------------\n\nTITLE: Configuring Step Functions Input Parameters for SPAPI Testing\nDESCRIPTION: JSON input configuration for the Step Functions state machine execution. Specifies the region code and limit parameters for processing DF Orders in the testing workflow.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/vendor-direct-fulfillment/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"regionCode\": \"NA\",\n   \"limit\":\"2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes and Compiling\nDESCRIPTION: This command watches for changes in the TypeScript files and automatically compiles them to JavaScript.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/shipping-v2/app/sp-api-app-cdk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Updating B2B Pricing with Listings API patchListingsItem\nDESCRIPTION: This JSON payload demonstrates how to update B2B pricing including quantity discounts using the patchListingsItem operation of the Listings API. It shows how to set a base price and create tiered quantity discount plans.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing-b2b/docs/blog-post/AB-pricing-blog-post.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productType\": \"PRODUCT\",\n  \"patches\": [\n    {\n      \"op\": \"REPLACE\",\n      \"path\": \"/attributes/purchasable_offer\",\n      \"value\": [\n        {\n          \"audience\": \"B2B\",\n          \"currency\": \"USD\",\n          \"marketplace_id\": \"XXXXXXXXXXXX\",\n          \"our_price\": [\n            {\n              \"schedule\": [\n                {\n                  \"value_with_tax\": 40\n                }\n              ]\n            }\n          ],\n          \"quantity_discount_plan\": [\n            {\n              \"schedule\": [\n                {\n                  \"discount_type\": \"fixed\",\n                  \"levels\": [\n                    {\n                      \"lower_bound\": 2,\n                      \"value\": 20\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Data Collection Opt-Out\nDESCRIPTION: Modify the OPT_OUT variable in api_utils.py to disable data collection for Python implementations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/METRICS_GUIDE.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nOPT_OUT = True\n```\n\n----------------------------------------\n\nTITLE: Running CDK Commands with npm and npx\nDESCRIPTION: Common CLI commands for building, deploying, and managing AWS CDK stacks using npm and npx. These commands help developers compile TypeScript code, watch for changes, deploy stacks, compare changes, and generate CloudFormation templates.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/easy-ship/app/sp-api-app-cdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk diff\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx cdk synth\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Data Collection Opt-Out\nDESCRIPTION: Modify the OPT_OUT constant in global.ts to disable data collection for the Listings use case.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/METRICS_GUIDE.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst OPT_OUT = true;\n```\n\n----------------------------------------\n\nTITLE: Executing Java Application Cleanup Script\nDESCRIPTION: This bash command demonstrates how to run the cleanup script for a Java-based sample solution application in a Unix-based system or Git Bash.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/error-monitoring/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app-clean.sh\n```\n\n----------------------------------------\n\nTITLE: Patch Request for Listings Item API\nDESCRIPTION: Sample JSON structure for updating product prices using the patchListingsItem operation in the Listings Item API. Shows how to specify marketplace ID, currency and price updates.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/pricing/docs/blog-post/pricing-blog-post.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"productType\":\"PRODUCT\",\n  \"patches\":[\n    {\n      \"op\":\"replace\",\n      \"path\":\"/attributes/purchasable_offer\",\n      \"value\":[\n        {\n          \"marketplace_id\": \"A2Q3Y263D00KWC\",\n          \"currency\": \"USD\",\n          \"our_price\": [\n            {\n              \"schedule\": [\n                {\n                  \"value_with_tax\": 15.00\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sample App Config File\nDESCRIPTION: Example configuration file for the SP-API application showing the format for ClientId, ClientSecret, and Email settings. This configuration is necessary for the application to connect to SP-API.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/docs/Deployment_Guide.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nEmail=test@test.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Execution Role for SQS Access\nDESCRIPTION: This snippet defines an IAM policy to be attached to a Lambda function's execution role. It grants the necessary permissions for the Lambda function to process messages from the SQS queue, including receiving, deleting messages, and getting queue attributes.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-sqs.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- PolicyName: SQSDEMOPolicy\n  PolicyDocument:\n    Version: 2012-10-17\n    Statement:\n      - Effect: Allow\n        Action:\n          - 'SQS:DeleteMessage'\n          - 'SQS:GetQueueAttributes'\n          - 'SQS:ReceiveMessage'\n        Resource: !GetAtt\n          - DEMOQueue\n          - Arn\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy for Sample Solution App Deployment\nDESCRIPTION: This JSON defines an IAM policy with the necessary permissions for deploying the Sample Solution App. It allows actions related to user and policy management in IAM.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/docs/Deployment_Guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SPAPIAppIAMPolicy\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateUser\",\n                \"iam:DeleteUser\",\n                \"iam:CreatePolicy\",\n                \"iam:DeletePolicy\",\n                \"iam:AttachUserPolicy\",\n                \"iam:DetachUserPolicy\",\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::<aws_account_id_number>:user/*\",\n                \"arn:aws:iam::<aws_account_id_number>:policy/*\"\n            ]\n        }\n    ]\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Event Source Mapping for SQS Queue\nDESCRIPTION: This snippet shows how to configure a Lambda Event Source Mapping that triggers a Lambda function when new messages arrive in the SQS queue. It processes one message at a time (BatchSize: 1) and references the SQS queue ARN and Lambda function.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-sqs.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOEventSourceMapping:\n  Type: 'AWS::Lambda::EventSourceMapping'\n  Properties:\n    BatchSize: 1\n    Enabled: true\n    EventSourceArn: !GetAtt\n      - DEMOQueue\n      - Arn\n    FunctionName: !GetAtt\n      - LAMBDA\n      - Arn\n```\n\n----------------------------------------\n\nTITLE: Defining SQS Queue Resource in CloudFormation\nDESCRIPTION: This snippet shows how to define an SQS queue resource in the CloudFormation template. The queue name is prefixed with 'sp-api-' followed by the queue type name and a random suffix for uniqueness. The visibility timeout is set to 300 seconds.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-sqs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOQueue:\n  Type: 'AWS::SQS::Queue'\n  Properties:\n    QueueName: !Join\n      - '-'\n      - - sp-api-DEMO-queue\n        - !Ref RandomSuffix\n    VisibilityTimeout: 300\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Permissions in IAM Policy JSON\nDESCRIPTION: JSON policy statement that grants permissions for various S3 operations. This needs to be added to the application's IAM policy file to allow the SP-API app to create and manage S3 resources.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-s3.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Sid\": \"S3Permissions\",\n   \"Effect\": \"Allow\",\n   \"Action\": [\n     \"s3:CreateBucket\",\n     \"s3:DeleteBucket\",\n     \"s3:ListBucket\",\n     \"s3:PutBucketPublicAccessBlock\",\n     \"s3:PutEncryptionConfiguration\",\n     \"s3:PutObject\",\n     \"s3:DeleteObject\",\n     \"s3:GetObject\"\n   ],\n   \"Resource\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DynamoDB Table in CloudFormation Template (YAML)\nDESCRIPTION: This snippet shows how to define a new DynamoDB table in the CloudFormation template. It includes table name, attribute definitions, key schema, and billing mode configurations.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-dynamodb.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOTable:\n  Type: 'AWS::DynamoDB::Table'\n  Properties:\n    TableName: !Join\n      - '-'\n      - - SPAPIDEMO\n        - !Ref RandomSuffix\n    AttributeDefinitions:\n      - AttributeName: KEY\n        AttributeType: S\n    KeySchema:\n      - AttributeName: KEY\n        KeyType: HASH\n    BillingMode: PAY_PER_REQUEST\n    PointInTimeRecoverySpecification:\n      PointInTimeRecoveryEnabled: true\n```\n\n----------------------------------------\n\nTITLE: SP-API Application Configuration File Example\nDESCRIPTION: Sample configuration file for the SP-API application showing the required parameters: ClientId, ClientSecret, RefreshToken, and notification Email. These credentials are necessary for authenticating with the SP-API.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/vendor-direct-fulfillment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nClientId=amzn1.application-oa2-client.abc123def456xyz789\nClientSecret=amzn1.oa2-cs.v1.abc123def456xyz789\nRefreshToken=Atzr|Abc123def456xyz789\nEmail=login@mydomain.com\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Version Numbers\nDESCRIPTION: Specifies the exact versions of Python packages required for the project including AWS SDK (boto3), HTTP libraries (requests, urllib3), and Flask web framework\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/website-authorization/code/python/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nboto3==1.26.11\nrequests==2.28.1\nflask==2.3.2\nurllib3==1.26.12\n```\n\n----------------------------------------\n\nTITLE: Defining CloudFormation Parameters for Lambda Handler\nDESCRIPTION: CloudFormation template snippet for defining the Lambda function handler parameter. This parameter will be used during deployment to specify the entry point to the Lambda function code.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-lambda.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOLambdaFunctionHandler:\n  Type: String\n  MinLength: 1\n  Description: Handler of DEMO Lambda Function\n```\n\n----------------------------------------\n\nTITLE: Adding Lambda Handler Parameter to CloudFormation Deployment Command\nDESCRIPTION: Shell script snippet for the CloudFormation deployment command, specifying the Lambda function handler parameter. This passes the handler path to CloudFormation during stack creation or update.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-lambda.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nParameterKey=\"DEMOLambdaFunctionHandler\",ParameterValue=\"${DEMO_lambda_func_handler}\" \\\n```\n\n----------------------------------------\n\nTITLE: Adding Lambda Function ARN to Step Functions Definition Substitutions\nDESCRIPTION: CloudFormation template snippet for adding the Lambda function's ARN as a definition substitution for the Step Functions state machine. This allows the state machine to reference the Lambda function.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-lambda.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOLambdaFunctionArn: !GetAtt\n  - DEMOLambdaFunction\n  - Arn\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Execution Permissions for Step Functions\nDESCRIPTION: CloudFormation template snippet for adding the Lambda function's ARN to the Step Functions state machine execution role. This policy grants the state machine permissions to invoke the Lambda function.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-lambda.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- !GetAtt\n  - DEMOLambdaFunction\n  - Arn\n```\n\n----------------------------------------\n\nTITLE: Executing Java Deployment Script\nDESCRIPTION: This bash command executes the deployment script for the Java-based Sample Solution App. It sets up the necessary AWS resources and deploys the application.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/docs/Deployment_Guide.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Java Clean-up Script\nDESCRIPTION: This bash command executes the clean-up script for the Java-based Sample Solution App. It removes the AWS resources created during deployment.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Small_Parcel_Delivery_with_Amazon_Partnered_Carrier/docs/Deployment_Guide.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash java-app-clean.sh\n```\n\n----------------------------------------\n\nTITLE: Adding CloudFormation Parameter Labels for Lambda Handler\nDESCRIPTION: CloudFormation template snippet for creating parameter labels in the interface section. This defines how the Lambda function handler parameter will appear in the CloudFormation console.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-lambda.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nDEMOLambdaFunctionHandler:\n  default: Handler of DEMO Lambda Function\n```\n\n----------------------------------------\n\nTITLE: Adding DynamoDB Table Environment Variable to Lambda Function (YAML)\nDESCRIPTION: This snippet demonstrates how to add an environment variable for the DynamoDB table name to a Lambda function configuration in the CloudFormation template.\nSOURCE: https://github.com/amzn/selling-partner-api-samples/blob/main/use-cases/fulfillment-inbound/Pack_Later_Flow_Carton_Unknown/app/toolbox/aws-dynamodb.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nDEMO_TABLE_NAME: !Ref DEMOTable\n```"
  }
]