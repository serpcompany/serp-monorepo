[
  {
    "owner": "ecyrbe",
    "repo": "zodios",
    "content": "TITLE: Setting up Zodios for User Fetching and Mutation in React\nDESCRIPTION: This TypeScript snippet demonstrates setting up a Zodios client and using ZodiosHooks to query and mutate user data. It imports necessary modules, initializes Zodios and ZodiosHooks with a base URL, and defines a React component to display a list of users fetched from an API. The component uses hooks to manage loading states and handle mutations. Key dependencies include React, Zodios, ZodiosHooks, and zod. The users.tsx component fetches data from '/users' endpoint and allows adding new users to the list.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { Zodios } from \"@zodios/core\";\nimport { ZodiosHooks } from \"@zodios/react\";\nimport { z } from \"zod\";\n\nconst baseUrl = \"https://jsonplaceholder.typicode.com\";\nconst zodios = new Zodios(baseUrl, [...]);\nconst zodiosHooks = new ZodiosHooks(\"jsonplaceholder\", zodios);\n\nconst Users = () => {\n  const {\n    data: users,\n    isLoading,\n    error,\n    invalidate: invalidateUsers, // zodios also provides invalidation helpers\n    key // zodios also returns the generated key\n  } = zodiosHooks.useQuery(\"/users\"); // or useGetUsers();\n  const { mutate } = zodiosHooks.useMutation(\"post\", \"/users\", undefined, {\n    onSuccess: () => invalidateUsers(),\n  }); // or .useCreateUser(...);\n\n  return (\n    <>\n      <h1>Users</h1>\n      <button onClick={() => mutate({ name: \"john doe\" })}>add user</button>\n      {isLoading && <div>Loading...</div>}\n      {error && <div>Error: {(error as Error).message}</div>}\n      {users && (\n        <ul>\n          {users.map((user) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Expanded CRUD API Definition in Zodios for TypeScript\nDESCRIPTION: This code snippet provides a detailed example of the CRUD API definitions that are equivalent to using the makeCrudApi helper. It includes endpoints for getting all users, getting a single user, creating, updating, patching, and deleting users with their respective schemas and parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios(BASE_URL, [\n  {\n    method: \"get\",\n    path: \"/users\",\n    alias: \"getUsers\",\n    description: \"Get all users\",\n    response: z.array(userSchema),\n  },\n  {\n    method: \"get\",\n    path: \"/users/:id\",\n    alias: \"getUser\",\n    description: \"Get a user\",\n    response: userSchema,\n  },\n  {\n    method: \"post\",\n    path: \"/users\",\n    alias: \"createUser\",\n    description: \"Create a user\",\n    parameters: [\n      {\n        name: \"body\",\n        type: \"Body\",\n        description: \"The object to create\",\n        schema: userSchema.partial(),\n      },\n    ],\n    response: userSchema,\n  },\n  {\n    method: \"put\",\n    path: \"/users/:id\",\n    alias: \"updateUser\",\n    description: \"Update a user\",\n    parameters: [\n      {\n        name: \"body\",\n        type: \"Body\",\n        description: \"The object to update\",\n        schema: userSchema,\n      },\n    ],\n    response: userSchema,\n  },\n  {\n    method: \"patch\",\n    path: \"/users/:id\",\n    alias: \"patchUser\",\n    description: \"Patch a user\",\n    parameters: [\n      {\n        name: \"body\",\n        type: \"Body\",\n        description: \"The object to patch\",\n        schema: userSchema.partial(),\n      },\n    ],\n    response: userSchema,\n  },\n  {\n    method: \"delete\",\n    path: \"/users/:id\",\n    alias: \"deleteUser\",\n    description: \"Delete a user\",\n    response: userSchema,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Providing React Query Client with Zodios Integration\nDESCRIPTION: This TypeScript snippet shows the setup of a React application using a QueryClientProvider from React Query to incorporate Zodios for API interactions. The snippet demonstrates creating a QueryClient and wrapping the Users component within a QueryClientProvider to manage API requests effectively. It requires react-query for data fetching and caching in combination with Zodios. The App component provides query client context to handle global data state management.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Users } from \"./users\";\n\nconst queryClient = new QueryClient();\n\nexport const App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Users />\n    </QueryClientProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of Zodios Type Helpers with CRUD API\nDESCRIPTION: A complete example showcasing various Zodios type helpers with a CRUD API for user management. The example demonstrates how to define a schema and extract different types for various API operations.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  makeCrudApi,\n  ZodiosBodyByPath,\n  ZodiosResponseByPath,\n  ZodiosPathParamsByPath,\n  ZodiosQueryParamsByPath,\n} from \"@zodios/code\";\nimport z from \"zod\";\n\nconst user = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n});\n\nconst api = makeCrudApi(\"user\", user);\n\ntype User = z.infer<typeof user>;\ntype Api = typeof api;\n\ntype Users = ZodiosResponseByPath<Api, \"get\", \"/users\">;\n//    ^? type Users = { id: number; name: string; email: string; phone: string; }[]\ntype UserById = ZodiosResponseByPath<Api, \"get\", \"/users/:id\">;\n//    ^? type UserById = { id: number; name: string; email: string; phone: string; }\ntype GetUserParams = ZodiosPathParamsByPath<Api,'get',\"/users/:id\">;\n//    ^? type GetUserParams = { id: number; }\ntype GetUserQueries = ZodiosQueryParamsByPath<Api, \"get\", \"/users/:id\">;\n//    ^? type GetUserQueries = never\ntype CreateUserBody = ZodiosBodyByPath<Api, \"post\", \"/users\">;\n//    ^? type CreateUserBody = { name: string; email: string; phone: string; }\ntype CreateUserResponse = ZodiosResponseByPath<Api, \"post\", \"/users\">;\n//    ^? type CreateUserResponse = { id: number; name: string; email: string; phone: string; }\ntype UpdateUserBody = ZodiosBodyByPath<Api, \"put\", \"/users/:id\">;\n//    ^? type UpdateUserBody = { name: string; email: string; phone: string; }\ntype PatchUserBody = ZodiosBodyByPath<Api, \"patch\", \"/users/:id\">;\n//    ^? type PatchUserBody = { name?: string | undefined; email?: string | undefined; phone?: string | undefined; }\n```\n\n----------------------------------------\n\nTITLE: Example of Typesafe Error Handling with Zodios\nDESCRIPTION: Complete example showing how to define an API with error schemas using makeApi, create a client with Zodios, and handle errors in a typesafe manner using isErrorFromPath. The example demonstrates type narrowing based on error status codes.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/error.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isErrorFromPath, makeApi, Zodios } from \"@zodios/core\";\n\nconst api = makeApi([\n  {\n    path: \"/users/:id\",\n    method: \"get\",\n    alias: \"getUser\",\n    response: z.object({\n      id: z.number(),\n      name: z.string(),\n    }),\n    errors: [\n      {\n        status: 404,\n        schema: z.object({\n          message: z.string(),\n          specificTo404: z.string(),\n        }),\n      },\n      {\n        status: 'default',\n        schema: z.object({\n          message: z.string(),\n        }),\n      }\n    ],\n  },\n]);\n\nconst apiClient = new Zodios(api);\n\ntry {\n  const response = await apiClient.getUser({ params: { id: 1 } });\n} catch (error) {\n  // you can also do:\n  // - isErrorFromPath(zodios.api, \"get\", \"/users/:id\", error)\n  // - isErrorFromAlias(api, \"getUser\", error)\n  // - isErrorFromAlias(zodios.api, \"getUser\", error)\n  if(isErrorFromPath(api, \"get\", \"/users/:id\", error)){\n    // error type is now narrowed to an axios error with a response from the ones defined in the api\n    if(error.response.status === 404) {\n      // error.response.data is guaranteed to be of type { message: string, specificTo404: string }\n    } else {\n      // error.response.data is guaranteed to be of type { message: string }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll and Mutation with ZodiosHooks in SolidJS (TSX)\nDESCRIPTION: This TSX snippet demonstrates a full example using ZodiosHooks within a SolidJS application, integrated with @tanstack/solid-query. It defines user-related Zod schemas, constructs a Zodios API definition (`makeApi`), initializes Zodios and ZodiosHooks instances, and implements a `Users` component. The component uses `createInfiniteQuery` for fetching a paginated list of users with infinite scroll capabilities and `createCreateUser` (a mutation hook derived from the 'createUser' API alias) to add new users, invalidating the user list on success. It also includes the necessary setup with `QueryClientProvider`.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"users.tsx\"\nimport { createSignal, For, Match, Show, Switch } from \"solid-js\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/solid-query\";\nimport { makeApi, Zodios } from \"@zodios/core\";\nimport { ZodiosHooks } from \"../src\";\nimport { z } from \"zod\";\n\n// you can define schema before declaring the API to get back the type\nconst userSchema = z\n  .object({\n    id: z.number(),\n    name: z.string(),\n  })\n  .required();\n\nconst createUserSchema = z\n  .object({\n    name: z.string(),\n  })\n  .required();\n\nconst usersSchema = z.array(userSchema);\n\n// you can then get back the types\ntype User = z.infer<typeof userSchema>;\ntype Users = z.infer<typeof usersSchema>;\n\nconst api = makeApi([\n  {\n    method: \"get\",\n    path: \"/users\",\n    alias: \"getUsers\",\n    description: \"Get all users\",\n    parameters: [\n      {\n        name: \"page\",\n        type: \"Query\",\n        schema: z.number().positive().optional(),\n      },\n      {\n        name: \"limit\",\n        type: \"Query\",\n        schema: z.number().positive().optional(),\n      },\n    ],\n    response: usersSchema,\n  },\n  {\n    method: \"get\",\n    path: \"/users/:id\",\n    description: \"Get a user\",\n    response: userSchema,\n  },\n  {\n    method: \"post\",\n    path: \"/users\",\n    alias: \"createUser\",\n    description: \"Create a user\",\n    parameters: [\n      {\n        name: \"body\",\n        type: \"Body\",\n        schema: createUserSchema,\n      },\n    ],\n    response: userSchema,\n  },\n]);\nconst baseUrl = \"https://jsonplaceholder.typicode.com\";\n\nconst zodios = new Zodios(baseUrl, api);\nconst zodiosHooks = new ZodiosHooks(\"jsonplaceholder\", zodios);\n\nconst Users = () => {\n  const [page, setPage] = createSignal(0);\n  const users = zodiosHooks.createInfiniteQuery(\n    \"/users\",\n    { queries: { limit: 10 } },\n    {\n      getPageParamList: () => {\n        return [\"page\"];\n      },\n      getNextPageParam: () => {\n        return {\n          queries: {\n            get page() {\n              return page() + 1;\n            },\n          },\n        };\n      },\n    }\n  );\n  const user = zodiosHooks.createCreateUser(undefined, {\n    onSuccess: () => users.invalidate(),\n  });\n\n  return (\n    <>\n      <button onClick={() => user.mutate({ name: \"john\" })}>create user</button>\n      <Show when={users.hasNextPage}>\n        <button onClick={() => users.fetchNextPage()}>next</button>\n      </Show>\n      <Switch>\n        <Match when={users.isLoading}>Loading...</Match>\n        <Match when={users.isFetchingNextPage}>Fetching...</Match>\n        <Match when={!users.isFetching}>\n          <ul>\n            <For each={users.data?.pages}>\n              {(user) => (\n                <For each={user}>{(user) => <li>{user.name}</li>}</For>\n              )}\n            </For>\n          </ul>\n        </Match>\n      </Switch>\n    </>\n  );\n};\n\n// on another file\nconst queryClient = new QueryClient();\n\nexport const App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Users />\n    </QueryClientProvider>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Zodios Express Application\nDESCRIPTION: Example of creating a basic Zodios application using the zodiosApp function. This shows how to define routes with type-safe parameters and responses.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-app.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosApp } from \"@zodios/express\";\nimport { userApi } from \"../../common/api\";\n\n// just an express adapter that is aware of  your api, app is just an express app with type annotations and validation middlewares\nconst app = zodiosApp(userApi);\n\n//  auto-complete path  fully typed and validated input params (body, query, path, header)\n//          ▼           ▼    ▼\napp.get(\"/users/:id\", (req, res) => {\n  // res.json is typed thanks to zod\n  res.json({\n    //   auto-complete req.params.id\n    //              ▼\n    id: req.params.id,\n    name: \"John Doe\",\n  });\n})\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context-Aware Express Application\nDESCRIPTION: Example of creating a Zodios application with context awareness. This demonstrates how to define a context schema, apply middleware, and build typed route handlers with auto-completion.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-app.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosContext } from \"@zodios/express\";\nimport z from \"zod\";\nimport { userApi } from \"../../common/api\";\nimport { userMiddleware } from \"./userMiddleware\";\n\nconst ctx = zodiosContext(z.object({\n  user: z.object({\n    id: z.number(),\n    name: z.string(),\n    isAdmin: z.boolean(),\n  }),\n}));\n\nconst app = ctx.app(userApi);\n// middleware that adds the user to the context\napp.use(userMiddleware);\n\n//  auto-complete path  fully typed and validated input params (body, query, path, header)\n//          ▼           ▼    ▼\napp.get(\"/users/:id\", (req, res) => {\n  //  auto-complete user  fully typed\n  //      ▼\n  if(req.user.isAdmin) {\n    // res.json is typed thanks to zod\n    return res.json({\n      //   auto-complete req.params.id\n      //              ▼\n      id: req.params.id,\n      name: \"John Doe\",\n    });    \n  }\n  return res.status(403).end();\n})\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Zodios Hooks Instance with React Query Support - TypeScript\nDESCRIPTION: Demonstrates instantiation of a Zodios API client and its associated hooks. Requires the Zodios npm package and a valid API definition. The provided example shows how to create a hooks instance with a named client, intended to be used with the rest of the documented hooks. 'apiClient' is initialized with the API base URL and definitions, and 'apiHooks' is assigned created hooks.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios(baseUrl, [...]);\nconst apiHooks = new ZodiosHooks(\"myAPI\", apiClient);\n```\n\n----------------------------------------\n\nTITLE: Configuring API Endpoints in Zodios Constructor\nDESCRIPTION: Defines API endpoints directly in the Zodios constructor with methods, paths, aliases, responses, and error handling.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios('/api', [\n  {\n    method: \"get\",\n    path: \"/users\",\n    alias: \"getUsers\",\n    response: z.array(user),\n  },\n  {\n    method: \"get\",\n    path: \"/users/:id\",\n    alias: \"getUser\",\n    response: user,\n    errors,\n  },\n  {\n    method: \"post\",\n    path: \"/users\",\n    alias: \"createUser\",\n    parameters: [\n      {\n        name: \"user\",\n        type: \"Body\",\n        schema: user.omit({ id: true }),\n      },\n    ],\n    response: user,\n    errors,\n  },  \n]);\n```\n\n----------------------------------------\n\nTITLE: Using makeApi for API Definition\nDESCRIPTION: Example showing how to use makeApi to define API endpoints with methods, paths, responses, and descriptions.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeApi } from \"@zodios/core\";\n\nconst api = makeApi([\n  {\n    method: \"get\",\n    path: \"/users/:id\",\n    response: user,\n    alias: \"getUser\",\n    description: \"Get user\",\n  },\n  {\n    method: \"get\",\n    path: \"/users\",\n    response: z.array(user),\n    alias: \"getUsers\",\n    description: \"Get users\",\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Zodios Client with Zod Transformation in TypeScript\nDESCRIPTION: Illustrates the creation of a Zodios API client that uses Zod schemas with transformations for the response. The API definition includes a GET endpoint for a user, whose response is transformed to split a name field into firstname and lastname. Zod and Zodios must be installed. Input parameters include the user ID, and the output is a user object with separated name fields.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios(\n  \"https://jsonplaceholder.typicode.com\",\n  [\n    {\n      method: \"get\",\n      path: \"/users/:id\",\n      alias: \"getUser\",\n      description: \"Get a user\",\n      response: z.object({\n        id: z.number(),\n        name: z.string(),\n      }).transform(({ name,...rest }) => ({\n        ...rest,\n        firstname: name.split(\" \")[0],\n        lastname: name.split(\" \")[1],\n      })),\n    },\n  ]\n);\n\nconst user = await apiClient.getUser({ params: { id: 7 } });\n\nconsole.log(user);\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Zodios Express\nDESCRIPTION: Comprehensive example showing how to implement type-safe error handling in a Zodios Express application. This demonstrates defining error responses in the API schema and using them in route handlers.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-app.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeApi } from \"@zodios/core\";\nimport { zodiosApp } from \"@zodios/express\";\nimport { z } from \"zod\";\n\nconst userApi = makeApi([\n  {\n    method: \"get\",\n    path: \"/users/:id\",\n    alias: \"getUser\",\n    description: \"Get a user\",\n    response: z.object({\n      id: z.number(),\n      name: z.string(),\n    }),\n    errors: [\n      {\n        status: 404,\n        response: z.object({\n          code: z.string(),\n          message: z.string(),\n          id: z.number(),\n        }),\n      }, {\n        status: 'default', // default status code will be used if error is not 404\n        response: z.object({\n          code: z.string(),\n          message: z.string(),\n        }),\n      },\n    ],\n  },\n]);\n\nconst app = zodiosApp(userApi);\napp.get(\"/users/:id\", (req, res) => {\n  try {\n    const id = +req.params.id;\n    const user = service.findUser(id);\n    if(!user) {\n      // match error 404 schema with auto-completion\n      res.status(404).json({\n        code: \"USER_NOT_FOUND\",\n        message: \"User not found\",\n        id, // compile time error if you forget to add id\n      });\n    } else {\n      // match response schema with auto-completion\n      res.json(user);\n    }\n  } catch(err) {\n    // match default error schema with auto-completion\n    res.status(500).json({\n      code: \"INTERNAL_ERROR\",\n      message: \"Internal error\",\n    });\n  }\n})\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Routers with Type-Safe API Endpoints\nDESCRIPTION: This code shows how to create and configure a sub-router for user management with typed endpoints. It implements GET and POST methods for user operations with proper typing for request parameters, body, and responses.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/next.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosRouter } from \"@zodios/express\";\nimport { userService } from \"../services/users\";\nimport { userApi } from \"../../common/api\";\n\nexport const userRouter = zodiosRouter(userApi);\n\nuserRouter.get(\"/users\", async (req, res) => {\n  const users = await userService.getUsers();\n  res.status(200).json(users);\n});\n\nuserRouter.get(\"/users/:id\", async (req, res, next) => {\n  const user = await userService.getUser(req.params.id);\n  if (!user) {\n    return res.status(404).json({\n      error: {\n        code: 404,\n        message: \"User not found\",\n      },\n    });\n  }\n  return res.status(200).json(user);\n});\n\nuserRouter.post(\"/users\", async (req, res) => {\n  const createdUser = await userService.createUser(req.body);\n  res.status(201).json(createdUser);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating CRUD API with Zodios Helper in TypeScript\nDESCRIPTION: This snippet showcases the use of Zodios' makeCrudApi helper function to generate basic CRUD API definitions. It creates endpoints for getting all users, getting a single user, creating, updating, patching, and deleting users.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Zodios, makeCrudApi } from '@zodios/core';\n\nconst apiClient = new Zodios(BASE_URL,\n  makeCrudApi(\n    'user',\n    z.object({\n      id: z.number(),\n      name: z.string(),\n    })\n  ));\n```\n\n----------------------------------------\n\nTITLE: Creating Context-Aware Express Router with Zodios in TypeScript\nDESCRIPTION: Example of creating a context-aware router that includes user information. Demonstrates how to define a typed context with Zod schemas and attach middleware for user authentication.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-router.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosContext } from \"@zodios/express\";\nimport z from \"zod\";\nimport { userApi } from \"../../common/api\";\nimport { userMiddleware } from \"./userMiddleware\";\n\nconst ctx = zodiosContext(z.object({\n  user: z.object({\n    id: z.number(),\n    name: z.string(),\n    isAdmin: z.boolean(),\n  }),\n}));\n\nconst router = ctx.router();\n\n// middleware that adds the user to the context\nrouter.use(userMiddleware);\n```\n\n----------------------------------------\n\nTITLE: useInfiniteQuery with Pagination - TypeScript\nDESCRIPTION: Demonstrates use of the infinite query hook for paginated data fetching. The options include a 'getPageParamList' function specifying which parameters are used for pagination, and a 'getNextPageParam' function to determine the next page from the API response. This setup enables infinite scrolling patterns. It requires that pagination parameters are well-defined.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: userPages, isFectching, fetchNextPage } = apiHooks.useInfiniteQuery(\n  \"/users\",\n  {\n    // request 10 users per page\n    queries: { limit: 10 },\n  },\n  {\n    // tell zodios to not use page as query key to allow infinite loading\n    getPageParamList: () => [\"page\"],\n    // get next page param has to return the next page as a query or path param\n    getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n        queries: {\n          page: lastPage.nextPage,\n        },\n      }: undefined;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Zodios API Definition Type Format\nDESCRIPTION: TypeScript type definition for Zodios API endpoints, showing the structure for defining methods, paths, parameters, response schemas, and error handling.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ZodiosEndpointDescriptions = Array<{\n  method: 'get'|'post'|'put'|'patch'|'delete';\n  path: string; // example: /posts/:postId/comments/:commentId\n  alias?: string; // example: getPostComments\n  immutable?: boolean; // flag a post request as immutable to allow it to be cached with react-query\n  description?: string;\n  requestFormat?: 'json'|'form-data'|'form-url'|'binary'|'text'; // default to json if not set\n  parameters?: Array<{\n    name: string;\n    description?: string;\n    type: 'Path'|'Query'|'Body'|'Header';\n    schema: ZodSchema; // you can use zod `transform` to transform the value of the parameter before sending it to the server\n  }>;\n  response: ZodSchema; // you can use zod `transform` to transform the value of the response before returning it\n  status?: number; // default to 200, you can use this to override the sucess status code of the response (only usefull for openapi and express)\n  responseDescription?: string; // optional response description of the endpoint\n  errors?: Array<{\n    status: number | 'default';\n    description?: string;\n    schema: ZodSchema; // transformations are not supported on error schemas\n  }>;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Serving OpenAPI Documentation with Swagger-UI-Express - Zodios - TypeScript\nDESCRIPTION: Example for exposing OpenAPI documentation generated via Zodios, integrating with swagger-ui-express in a Node.js/Express context. Bundles together security schemes, multiple APIs, and serves documentation endpoints. Requires packages: @zodios/express, @zodios/openapi, swagger-ui-express, and the relevant API/router definitions. It creates routes for both the JSON specification and interactive docs.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { serve, setup } from \"swagger-ui-express\";\nimport { zodiosApp } from \"@zodios/express\";\nimport { openApiBuilder } from \"@zodios/openapi\";\nimport { userApi, adminApi } from \"./api\";\nimport { userRouter } from './userRouter';\nimport { adminRouter } from './adminRouter';\n\nconst app = zodiosApp();\n\n// expose user api endpoints\napp.use('/api/v1', userRouter);\napp.use('/api/v1', adminRouter);\n\n// expose openapi documentation\nconst document = openApiBuilder({\n  title: \"User API\",\n  version: \"1.0.0\",\n  description: \"A simple user API\",\n})\n  // you can declare as many security servers as you want\n  .addServer({ url: \"/api/v1\" })\n  // you can declare as many security schemes as you want\n  .addSecurityScheme(\"admin\", bearerAuthScheme())\n  // you can declare as many apis as you want\n  .addPublicApi(userApi)\n  // you can declare as many protected apis as you want\n  .addProtectedApi(\"admin\", adminApi)\n  .build();\n\napp.use(`/docs/swagger.json`, (_, res) => res.json(document));\napp.use(\"/docs\", serve);\napp.use(\"/docs\", setup(undefined, { swaggerUrl: \"/docs/swagger.json\" }));\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Zodios Plugins\nDESCRIPTION: Type definition and structure for creating custom Zodios plugins. A plugin can include request interceptors, response interceptors, and error handlers, all of which can modify the request/response or perform side effects.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ZodiosPlugin = {\n  /**\n   * Optional name of the plugin\n   * naming a plugin allows to remove it or replace it later\n   */\n  name?: string;\n  /**\n   * request interceptor to modify or inspect the request before it is sent\n   * @param api - the api description\n   * @param request - the request config\n   * @returns possibly a new request config\n   */\n  request?: (\n    api: ZodiosEnpointDescriptions,\n    config: AnyZodiosRequestOptions\n  ) => Promise<AnyZodiosRequestOptions>;\n  /**\n   * response interceptor to modify or inspect the response before it is returned\n   * @param api - the api description\n   * @param config - the request config\n   * @param response - the response\n   * @returns possibly a new response\n   */\n  response?: (\n    api: ZodiosEnpointDescriptions,\n    config: AnyZodiosRequestOptions,\n    response: AxiosResponse\n  ) => Promise<AxiosResponse>;\n  /**\n   * error interceptor for response errors\n   * there is no error interceptor for request errors\n   * @param api - the api description\n   * @param config - the config for the request\n   * @param error - the error that occured\n   * @returns possibly a new response or throw a new error\n   */\n  error?: (\n    api: ZodiosEnpointDescriptions,\n    config: AnyZodiosRequestOptions,\n    error: Error\n  ) => Promise<AxiosResponse>;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Zodios Client for multipart/form-data Upload in TypeScript\nDESCRIPTION: Demonstrates setting up a Zodios API client for handling multipart/form-data uploads using requestFormat. Requires the 'form-data' package when running on Node.js and a polyfill for FormData. The API expects a file upload in the body and returns an object with an id. Usage includes extracting a file from the DOM and making an upload request.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios(\n  \"https://mywebsite.com\",\n  [{\n    method: \"post\",\n    path: \"/upload\",\n    alias: \"upload\",\n    description: \"Upload a file\",\n    requestFormat: \"form-data\",\n    parameters:[\n      {\n        name: \"body\",\n        type: \"Body\",\n        schema: z.object({\n          file: z.instanceof(File),\n        }),\n      }\n    ],\n    response: z.object({\n      id: z.number(),\n    }),\n  }],\n);\nconst id = await apiClient.upload({ file: document.querySelector('#file').files[0] });\n```\n\n----------------------------------------\n\nTITLE: Generic useQuery Method for Data Fetching - TypeScript\nDESCRIPTION: Depicts the use of Zodios's generic useQuery method to fetch data from any API path. The hook returns the data, loading and error statuses. Requires valid endpoint path and optionally accepts configuration and query options.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: users, isLoading, isError } = hooks.useQuery('/users');\n```\n\n----------------------------------------\n\nTITLE: Declaring an API with Zodios Client\nDESCRIPTION: Example showing how to define an API client with Zodios, including endpoint definition with path parameters, response schema, and optional alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Zodios } from \"@zodios/core\";\nimport { z } from \"zod\";\n\nconst apiClient = new Zodios(\n  \"https://jsonplaceholder.typicode.com\",\n  // API definition\n  [\n    {\n      method: \"get\",\n      path: \"/users/:id\", // auto detect :id and ask for it in apiClient get params\n      alias: \"getUser\", // optional alias to call this endpoint with it\n      description: \"Get a user\",\n      response: z.object({\n        id: z.number(),\n        name: z.string(),\n      }),\n    },\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Calling a Query Alias Hook to Fetch Users - TypeScript\nDESCRIPTION: Illustrates how to call a Zodios hook generated for a 'getUsers' query alias. The hook returns users data, loading and error statuses, an invalidate cache function, and the auto-generated query key. Requires Zodios hooked API initialized. No parameters are needed for this example call.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to hooks.useQuery(\"/users\")\nconst { data: users, isLoading, isError, invalidate, key } =  hooks.useGetUsers();\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Zodios Routers in Express Application in TypeScript\nDESCRIPTION: Example showing how to create and merge multiple Zodios routers into a single Express application. Demonstrates creating type-safe routers for different API domains and attaching them to the main app.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-router.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosApp, zodiosRouter } from \"@zodios/express\";\n\nconst app = zodiosApp(); // just an axpess app with type annotations\nconst userRouter = zodiosRouter(userApi); // just an express router with type annotations and validation middlewares\nconst adminRouter = zodiosRouter(adminApi); // just an express router with type annotations and validation middlewares\n\nconst app.use(userRouter,adminRouter);\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Zodios Client\nDESCRIPTION: Demonstrates how to use the configured Zodios client to make API requests with full type safety for fetching and creating users.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// get all users\nconst users = await apiClient.getUsers();\n// get user by id\nconst user = await apiClient.getUser({ params: { id: 1 } });\n// create user\nconst newUser = await apiClient.createUser({ name: \"John\", age: 20, email: \"jodn@doe.com\"});\n```\n\n----------------------------------------\n\nTITLE: Setting Up File Structure for Zodios in Next.js\nDESCRIPTION: This snippet shows the recommended file structure for integrating Zodios with Next.js. It organizes API definitions, routers, and endpoints in a structured manner to facilitate end-to-end type safety.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/next.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n│\n├── src\n│   ├── common\n│   │   └── api.ts # API definition\n│   ├── pages\n│   │   ├── _app.tsx\n│   │   ├── api\n│   │   │   └── [...zodios].ts # import and re-export your main server app router here\n│   │   └── [..]\n│   ├── server\n│   │   ├── routers\n│   │   │   ├── app.ts   # import your API definition and export your main app router here\n│   │   │   ├── users.ts  # sub routers\n│   │   │   └── [..]\n│   │   ├── context.ts # export your main app context here\n└── [..]\n```\n\n----------------------------------------\n\nTITLE: Making POST Requests with Zodios\nDESCRIPTION: Demonstrates making POST requests with a body payload and optional configuration for parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await api.post(\"/users\", { name: \"John\" });\n```\n\n----------------------------------------\n\nTITLE: Defining Dev.to User API Schema and Endpoints with Zodios and Zod in TypeScript\nDESCRIPTION: This code snippet defines the schema for Dev.to user data, profile images, and API endpoints using Zodios and Zod. It includes type definitions, error handling, and API endpoint configurations for user-related operations.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { makeApi, makeErrors } from \"@zodios/core\";\n\nexport const devUser = z.object({\n  id: z.number(),\n  type_of: z.string(),\n  name: z.string(),\n  username: z.string(),\n  summary: z.string().or(z.null()),\n  twitter_username: z.string().or(z.null()),\n  github_username: z.string().or(z.null()),\n  website_url: z.string().or(z.null()),\n  location: z.string().or(z.null()),\n  joined_at: z.string(),\n  profile_image: z.string(),\n  profile_image_90: z.string(),\n});\n\nexport type User = z.infer<typeof devUser>;\n\nexport const devProfileImage = z.object({\n  type_of: z.string(),\n  image_of: z.string(),\n  profile_image: z.string(),\n  profile_image_90: z.string(),\n});\n\nexport const userErrors = makeErrors([\n  {\n    status: 404,\n    description: \"User not found\",\n    schema: z.object({\n      error: z.object({\n        code: z.string(),\n        message: z.string(),\n      }),\n    }),\n  },\n  {\n    status: \"default\",\n    description: \"Default error\",\n    schema: z.object({\n      error: z.object({\n        code: z.string(),\n        message: z.string(),\n      }),\n    }),\n  },\n]);\n\n\nexport type ProfileImage = z.infer<typeof devProfileImage>;\n\nexport const userApi = makeApi([\n  {\n    method: \"get\",\n    path: \"/users/:id\",\n    alias: \"getUser\",\n    description: \"Get a user\",\n    response: devUser,\n    errors: userErrors,\n  },\n  {\n    method: \"get\",\n    path: \"/users/me\",\n    alias: \"getMe\",\n    description: \"Get current user\",\n    response: devUser,\n    errors: userErrors,\n  },\n  {\n    method: \"get\",\n    path: \"/profile_image/:username\",\n    alias: \"getProfileImage\",\n    description: \"Get a user's profile image\",\n    response: devProfileImage,\n    errors: userErrors,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Zodios for Form-URL Encoded Requests in TypeScript\nDESCRIPTION: This snippet shows how to configure a Zodios API client to handle application/x-www-form-urlencoded requests using the built-in requestFormat option. It defines a login endpoint that accepts a username and password.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios(\n  \"https://mywebsite.com\",\n  [{\n    method: \"post\",\n    path: \"/login\",\n    alias: \"login\",\n    description: \"Submit a form\",\n    requestFormat: \"form-url\",\n    parameters:[\n      {\n        name: \"body\",\n        type: \"Body\",\n        schema: z.object({\n          userName: z.string(),\n          password: z.string(),\n        }),\n      }\n    ],\n    response: z.object({\n      id: z.number(),\n    }),\n  }],\n);\nconst id = await apiClient.login({ userName: \"user\", password: \"password\" });\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters with Zodios\nDESCRIPTION: Shows how to make API requests with path parameters using aliases, which translates to properly formatted URL paths.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to api.get(\"/users\", { params: { id: 1 } })\nconst user = await api.getUser({ params: { id: 1 } }); // GET /users/1\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Authorization Plugin\nDESCRIPTION: Example of using the token plugin to inject and automatically renew authentication tokens for API requests. This plugin simplifies authorization management across API calls.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginToken } from '@zodios/plugins';\n\napiClient.use(pluginToken({\n  getToken: async () => \"token\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Applying Plugins to Specific Endpoints\nDESCRIPTION: Demonstrates how to apply plugins to specific endpoints rather than globally. Plugins can be applied by endpoint alias or by HTTP method and path, similar to middleware in Express.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginToken } from '@zodios/plugins';\n\n// apply a plugin by alias\napiClient.use(\"getUser\", pluginToken({\n  getToken: async () => \"token\"\n}));\n// apply a plugin by endpoint\napiClient.use(\"get\",\"/users/:id\", pluginToken({\n  getToken: async () => \"token\"\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters with Zodios\nDESCRIPTION: Demonstrates how to add query parameters to API requests, which are automatically converted to URL query strings.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to api.get(\"/users\", { queries: { limit: 10 } })\nconst users = await api.getUsers({ queries: { limit: 10 } }); // GET /users?limit=10\n```\n\n----------------------------------------\n\nTITLE: Defining makeApi Helper Function\nDESCRIPTION: Helper function to narrow API definitions and perform runtime checks. Takes an array of endpoint descriptions and returns a properly typed API definition.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeApi(api: ZodiosEndpointDescriptions): ZodiosEndpointDescriptions;\n```\n\n----------------------------------------\n\nTITLE: Understanding Plugin Execution Order\nDESCRIPTION: Example showing the execution order of Zodios plugins. Global plugins are executed first, followed by endpoint-specific plugins. Plugins are executed in declaration order for requests and in reverse order for responses.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napiClient.use(\"getUser\", pluginLog('2'));\napiClient.use(pluginLog('1'));\napiClient.use(\"get\",\"/users/:id\", pluginLog('3'));\n\napiClient.get(\"/users/:id\", { params: { id: 7 } });\n\n// output :\n// request 1 \n// request 2\n// request 3\n// response 3\n// response 2\n// response 1\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication Scheme - Zodios OpenAPI - TypeScript\nDESCRIPTION: Shows how to utilize the oauth2Scheme helper from Zodios for specifying an OAuth2 security scheme in the OpenAPI builder. The scheme is configured with an implicit flow, custom scopes, registered as 'oauth2', and then used to protect an API. Requires @zodios/openapi.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { oauth2Scheme } from \"@zodios/openapi\";\n\nconst doc = openApiBuilder(info)\n            .addSecurityScheme('oauth2',oauth2Scheme({\n              implicit: {\n                authorizationUrl: \"https://example.com/oauth2/authorize\",\n                scopes: {\n                  \"read:users\": \"read users\",\n                  \"write:users\": \"write users\",\n                },\n              },\n            }))\n            .addProtectedApi('oauth2', api)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Creating a Zodios Client Instance in TypeScript\nDESCRIPTION: Shows the constructor signature for creating a new Zodios client instance with optional base URL and configuration options.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Zodios(baseURL: string, api: ZodiosEnpointDescriptions, options?: ZodiosOptions)\n// or\nnew Zodios(api: ZodiosEnpointDescriptions, options?: ZodiosOptions)\n```\n\n----------------------------------------\n\nTITLE: Generating Zodios API Definitions from OpenAPI - openapi-zod-client - Bash\nDESCRIPTION: Demonstrates usage of the openapi-zod-client CLI tool to generate a Zodios client TypeScript source file from a OpenAPI (swagger.json) specification. Requires npm package openapi-zod-client, and an available swagger.json file. Output file will be named zodios-client.ts.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nnpx openapi-zod-client \"swagger.json\" -o \"zodios-client.ts\"\n```\n\n----------------------------------------\n\nTITLE: Generic useGet Query Hook with Parameters - TypeScript\nDESCRIPTION: An example for using the generic useGet hook to fetch a resource by ID. The parameters are supplied in a config object. The hook returns the resource, loading and error states, and helper functions/fields for cache management.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: user, isLoading, isError, invalidate, key } = hooks.useGet(\"/users/:id\", { params: { id: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Generic useImmutableQuery Method with POST Body - TypeScript\nDESCRIPTION: An example of using the generic useImmutableQuery method for POST endpoints. The body parameter is used for making the request with POST semantics. Returns result data with loading and error states. The endpoint must support immutable queries in its API definition.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: users, isLoading, isError } = hooks.useImmutableQuery('/users/search', { name: \"John\" });\n```\n\n----------------------------------------\n\nTITLE: Creating Main Router with Zodios Next App\nDESCRIPTION: This snippet demonstrates how to create a main router using zodiosNextApp. It also shows how to mount a sub-router at a specific path prefix ('/api').\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/next.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosNextApp } from \"@zodios/express\";\nimport { userRouter } from \"./users\";\n\nexport const app = zodiosNextApp();\napp.use(\"/api\", userRouter);\n```\n\n----------------------------------------\n\nTITLE: Generic useMutation for Custom Mutations - TypeScript\nDESCRIPTION: Demonstrates use of the generic mutation hook for executing arbitrary mutation requests. The first parameter is the HTTP method, followed by the API path and request configuration. Returns the mutate function to trigger the mutation. Proper setup for mutation endpoints is required.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate } = hooks.useMutation('post','/users');\n```\n\n----------------------------------------\n\nTITLE: Creating Context with Zodios in TypeScript\nDESCRIPTION: This snippet illustrates how to create a context in Zodios using the `zodiosContext` function. It involves defining a context schema using `zod` for type-safe access to properties like `req.user`. Dependencies include the `@zodios/express` and `zod` packages.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-context.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { zodiosContext } from \"@zodios/express\";\nimport z from \"zod\";\n\nconst ctx = zodiosContext(z.object({\n  user: z.object({\n    id: z.number(),\n    name: z.string(),\n  }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios Core for Frontend Development\nDESCRIPTION: Installs the core Zodios packages and dependencies required for frontend development without a specific framework. It includes @zodios/core, axios, and zod which are the essential packages for basic Zodios functionality.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zodios/core axios zod\n```\n\n----------------------------------------\n\nTITLE: usePut Mutation Hook with Parameters - TypeScript\nDESCRIPTION: Illustrates updating a resource via the usePut mutation hook, supplying the resource ID as a parameter. The mutate function issues the PUT request. Resource identification through the 'params' object is required.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate } = hooks.usePut(\"/users/:id\", { params: { id: 1 } });\n```\n\n----------------------------------------\n\nTITLE: GET Requests with Path Parameters\nDESCRIPTION: Demonstrates making GET requests with path parameters that are substituted into the URL path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await api.get(\"/users/:id\", { params: { id: 1 } }); // GET /users/1\n```\n\n----------------------------------------\n\nTITLE: Initializing ZodiosHooks with API Client in TypeScript\nDESCRIPTION: Example of creating a Zodios API client and initializing ZodiosHooks with it. The name parameter 'myAPI' will be used as the query key prefix.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiClient = new Zodios(baseUrl, [...]);\nconst apiHooks = new ZodiosHooks(\"myAPI\", apiClient);\n```\n\n----------------------------------------\n\nTITLE: usePatch Mutation Hook Example - TypeScript\nDESCRIPTION: Shows how to use the usePatch hook to partially update a resource. The params field specifies which resource to patch by ID. The hook returns a mutate function for executing the PATCH request.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate } = hooks.usePatch(\"/users/:id\", {params: {id: 1}});\n```\n\n----------------------------------------\n\nTITLE: Using makeEndpoint for Single Endpoint\nDESCRIPTION: Example demonstrating how to use makeEndpoint to define a single API endpoint.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeEndpoint } from \"@zodios/core\";\n\nconst getUser = makeEndpoint({\n  method: \"get\",\n  path: \"/users/:id\",\n  response: user,\n  alias: \"getUser\",\n  description: \"Get user\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios with React Support\nDESCRIPTION: Installs Zodios packages with React integration. Includes React Query for data fetching, Zodios core and React-specific packages, along with React and its dependencies.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/react-query @zodios/core @zodios/react axios react react-dom zod\n```\n\n----------------------------------------\n\nTITLE: Making GET Requests with Zodios\nDESCRIPTION: Shows how to make GET requests using the direct get method with path and optional configuration parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await api.get(\"/users\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication Scheme - Zodios OpenAPI - TypeScript\nDESCRIPTION: Illustrates how to use the Zodios-provided basicAuthScheme helper when generating an OpenAPI document. This code imports the basicAuthScheme, sets up a security scheme named 'auth', attaches it to a protected API, and then builds the OpenAPI documentation. Requires @zodios/openapi.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { basicAuthScheme } from \"@zodios/openapi\";\n\nconst doc = openApiBuilder(info)\n            .addSecurityScheme('auth',basicAuthScheme())\n            .addProtectedApi('auth', api)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Zodios Client\nDESCRIPTION: Shows how to add plugins to the Zodios client instance using the use method, with an example of the fetch plugin.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginFetch } from \"@zodios/plugins\";\n\napiClient.use(pluginFetch({\n  keepAlive: true,\n}));\n```\n\n----------------------------------------\n\nTITLE: Using makeParameters Helper Function\nDESCRIPTION: Helper function to define and validate parameter definitions for API endpoints.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeParameters(params: ZodiosEndpointParameters): ZodiosEndpointParameters;\n```\n\n----------------------------------------\n\nTITLE: useDelete Mutation Hook Example - TypeScript\nDESCRIPTION: Presents how to use the useDelete hook for deleting a resource by ID. The mutate field is used to trigger the delete operation. The parameters must be supplied in a config object.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate } = hooks.useDelete(\"/users/:id\", { params: {id: 1 }});\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Query in TypeScript\nDESCRIPTION: Function signature and example for the createQuery method, which allows generic GET queries with a path, configuration options, and query options.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQuery(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateQueryResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createQuery('/users');\n```\n\n----------------------------------------\n\nTITLE: Creating ZodiosHooks Instance in TypeScript\nDESCRIPTION: Shows how to initialize a ZodiosHooks instance by providing a name (used as Solid-query key prefix) and a Zodios API client instance.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ZodiosHooks(name: string, client: Zodios)\n```\n\n----------------------------------------\n\nTITLE: Calling DELETE Endpoint with Path Parameters Using Zodios in TypeScript\nDESCRIPTION: Invokes the DELETE operation for a specific resource using Zodios, targeting the '/users/:id' endpoint, with path parameters provided in the configuration. The body is set to undefined, and the user ID is supplied via the params object. Returns a Promise indicating the result of the deletion.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await api.delete(\"/users/:id\", undefined, {params: {id: 1}});\n```\n\n----------------------------------------\n\nTITLE: Generating Query Key by Alias for Invalidation - TypeScript\nDESCRIPTION: Shows how to generate a query key using an endpoint alias for cache invalidation, regardless of specific parameters. Pass the alias only and use with QueryClient to invalidate relevant queries.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByAlias('getUser');\nqueryClient.invalidateQueries(key);\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Aliases with Zodios\nDESCRIPTION: Shows how to use alias methods for mutation operations like POST, with automatic type checking for request bodies.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to api.post(\"/users\", { name: \"John\" })\nconst user = await api.createUser({ name: \"John\" });\n```\n\n----------------------------------------\n\nTITLE: Extracting Response Type by Path with ZodiosResponseByPath\nDESCRIPTION: ZodiosResponseByPath extracts the response type from an API definition using the HTTP method and endpoint path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosResponseByPath } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype Users = ZodiosResponseByPath<MyApi,'get','/users'>;\n```\n\n----------------------------------------\n\nTITLE: Calling PATCH Endpoint with Path Parameters Using Zodios in TypeScript\nDESCRIPTION: Demonstrates making a PATCH request to the '/users/:id' endpoint using Zodios, with path parameter substitution. Requires instantiation of a Zodios API instance and expects the user to pass the new data in the body and the path parameter in the 'params' object of the config. Returns the updated user as a Promise.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await api.patch(\"/users/:id\", {name: \"John\" }, {params: {id: 1}});\n```\n\n----------------------------------------\n\nTITLE: Creating Infinite Query in TypeScript\nDESCRIPTION: Function signature for the createInfiniteQuery method, which allows loading pages indefinitely using paginated API endpoints.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nuseInfiniteQuery(path: string, config?: ZodiosRequestOptions, infiniteQueryOptions?: CreateInfiniteQueryOptions): CreateInfiniteQueryResult<Response>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Plugin with Zodios\nDESCRIPTION: Example of using the fetch plugin to replace Axios's default XHR implementation with the standard fetch API. This plugin allows access to fetch-specific options that might be needed for browser applications.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { pluginFetch } from \"@zodios/plugins\";\n\napiClient.use(pluginFetch({\n  // all fetch options are supported\n  keepAlive: true,\n}));\n```\n\n----------------------------------------\n\nTITLE: Extracting Response Type by Alias with ZodiosResponseByAlias\nDESCRIPTION: ZodiosResponseByAlias extracts the response type from an API definition using the endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosResponseByAlias } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype Users = ZodiosResponseByAlias<MyApi,'getUsers'>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable Infinite Query with Search in TypeScript\nDESCRIPTION: Example of using createImmutableInfiniteQuery to search users with pagination through POST requests, specifying search parameters and page handling.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  const state = apiHooks.createImmutableInfiniteQuery(\n    \"/users/search\",\n    {\n      // search for users named John\n      name: \"John\",\n      // request 10 users per page\n      limit: 10,\n    },\n    undefined,\n    {\n      // tell zodios to not use page as query key to allow infinite loading\n      getPageParamList: () => [\"page\"],\n      // get next page param has to return the next page as a query or path param\n      getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n          body: {\n            page: lastPage.nextPage,\n          },\n        }: undefined;\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Generating Query Key by Path for Cache Operations - TypeScript\nDESCRIPTION: Demonstrates generating a query key for a parameterized endpoint using getKeyByPath. The produced key is used to fetch cached data directly from React Query's QueryClient. Requires knowledge of the target endpoint's parameterization.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByPath('get', '/users/:id', { params: { id: 1 } });\nconst user = queryClient.getQueryData<User>(key);\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters by Alias with ZodiosPathParamByAlias\nDESCRIPTION: ZodiosPathParamByAlias extracts the path parameters type from an API definition using the endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosPathParamByAlias } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype GetUserPathParams = ZodiosPathParamByAlias<MyApi,'getUser'>;\n```\n\n----------------------------------------\n\nTITLE: Using the Generic Request Method in Zodios\nDESCRIPTION: Demonstrates using the generic request method for more control over API requests with explicit method, URL, and data specification.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await api.request({\n  method: \"post\",\n  url: \"/users\",\n  data: { name: \"John\" },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Mutation in TypeScript\nDESCRIPTION: Function signature and example for the createMutation method, which allows generic mutations with specified HTTP method, path, and configuration options.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMutation(method: string, path: string, config: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateMutationResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createMutation('post','/users');\n```\n\n----------------------------------------\n\nTITLE: Extracting Query Parameters by Alias with ZodiosQueryParamsByAlias\nDESCRIPTION: ZodiosQueryParamsByAlias extracts the query parameters type from an API definition using the endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosQueryParamsByAlias } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype GetUsersQueryParams = ZodiosQueryParamsByAlias<MyApi,'getUsers'>;\n```\n\n----------------------------------------\n\nTITLE: GET Requests with Query Parameters\nDESCRIPTION: Shows how to make GET requests with query parameters that are converted to URL query strings.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await api.get(\"/users\", { queries: { limit: 10 } }); // GET /users?limit=10\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios with NextJS Support\nDESCRIPTION: Installs Zodios packages for backend development with NextJS. Includes Zodios core and Express integration for API routes, along with NextJS and React dependencies.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zodios/core @zodios/express next zod axios react react-dom\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Schemas for API Definitions in TypeScript\nDESCRIPTION: Creates reusable Zod schemas for error handling and user object validation that can be used in API endpoint definitions.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Zodios, makeErrors } from \"@zodios/core\";\nimport z from \"zod\";\n\nconst errors = makeErrors([\n  {\n    status: \"default\",\n    schema: z.object({\n      error: z.object({\n        code: z.number(),\n        message: z.string(),\n      }),\n    }),\n  },\n]);\n\nconst user = z.object({\n  id: z.number(),\n  name: z.string(),\n  age: z.number().positive(),\n  email: z.string().email(),\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Request Body Type by Path with ZodiosBodyByPath\nDESCRIPTION: ZodiosBodyByPath extracts the body type of a request from an API definition using the HTTP method and endpoint path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosBodyByPath } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype User = ZodiosBodyByPath<MyApi,'post','/users'>;\n```\n\n----------------------------------------\n\nTITLE: Creating POST Request in TypeScript\nDESCRIPTION: Function signature and example for the createPost method, which allows making POST requests to specified endpoints.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePost(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateMutationResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createPost(\"/users\");\n```\n\n----------------------------------------\n\nTITLE: Using mergeApis Helper Function\nDESCRIPTION: Helper function to combine multiple API definitions in a router-friendly way.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mergeApis(apis: Record<string,ZodiosEndpointDescriptions>): ZodiosEndpointDescriptions;\n```\n\n----------------------------------------\n\nTITLE: Creating GET Request in TypeScript\nDESCRIPTION: Function signature and examples for the createGet method, including usage with regular and reactive parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncreateGet(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateQueryResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createGet(\"/users/:id\", { params: { id: 1 } });\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createGet(\"/users/:id\", { params: { get id() { return id()} } });\n```\n\n----------------------------------------\n\nTITLE: Extracting Error Type by Path with ZodiosErrorByPath\nDESCRIPTION: ZodiosErrorByPath extracts the error type for a specific status code from an API definition using the HTTP method and endpoint path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosErrorByPath } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype NotFoundUsersError = ZodiosErrorByPath<MyApi,'get','/users',404>;\n```\n\n----------------------------------------\n\nTITLE: useImmutableInfiniteQuery with POST Body and Pagination - TypeScript\nDESCRIPTION: Shows how to use the immutable infinite query hook for APIs that page through POST request bodies. The configuration includes a body describing the query, an optional config, and infinite query options including page parameter management. Suitable for infinite scrolling with complex search endpoints.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: userPages, isFectching, fetchNextPage } = apiHooks.useImmutableInfiniteQuery(\n  \"/users/search\",\n  {\n    // search for users named John\n    name: \"John\",\n    // request 10 users per page\n    limit: 10,\n  },\n  undefined,\n  {\n    // tell zodios to not use page as query key to allow infinite loading\n    getPageParamList: () => [\"page\"],\n    // get next page param has to return the next page as a query or path param\n    getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n        body: {\n          page: lastPage.nextPage,\n        },\n      }: undefined;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating PATCH Request in TypeScript\nDESCRIPTION: Function signature and examples for the createPatch method, including usage with regular and reactive parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePatch(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateMutationResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createPatch(\"/users/:id\", {params: {id: 1}});\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createPatch(\"/users/:id\", { params: { get id() { return id()} } });\n```\n\n----------------------------------------\n\nTITLE: Extracting Query Parameters by Path with ZodiosQueryParamsByPath\nDESCRIPTION: ZodiosQueryParamsByPath extracts the query parameters type from an API definition using the HTTP method and endpoint path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosQueryParamsByPath } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype GetUsersQueryParams = ZodiosQueryParamsByPath<MyApi,'get','/users'>;\n```\n\n----------------------------------------\n\nTITLE: Calling an Immutable Query Alias Hook with POST Body - TypeScript\nDESCRIPTION: Shows how to use an alias hook configured for an immutable POST endpoint. A search users operation is performed by passing a request body. Returns users data and status fields. The endpoint must have the 'immutable' option set in the API definition for this alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to hooks.useImmutableQuery(\"/users/search\")\nconst { data: users, isLoading, isError } =  hooks.useSearchUsers({ name: \"John\" });\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Query Alias Hook in TypeScript\nDESCRIPTION: Example of using an immutable query alias hook for searching users. This is identical to hooks.createImmutableQuery(\"/users/search\").\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to hooks.createImmutableQuery(\"/users/search\")\nconst state =  hooks.createSearchUsers({ name: \"John\" });\n```\n\n----------------------------------------\n\nTITLE: Creating DELETE Request in TypeScript\nDESCRIPTION: Function signature and examples for the createDelete method, including usage with regular and reactive parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDelete(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateReactMutationResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createDelete(\"/users/:id\", { params: {id: 1 }});\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createDelete(\"/users/:id\", { params: { get id() { return id()} } });\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable Query in TypeScript\nDESCRIPTION: Function signature and example for the createImmutableQuery method, which allows queries using POST requests with a body payload.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncreateImmutableQuery(path: string, body: Body ,config?: ZodiosRequestOptions, queryOptions?: CreateQueryOptions): CreateQueryResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createImmutableQuery('/users/search', { name: \"John\" });\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT Request Format Example\nDESCRIPTION: Shows the equivalent HTTP request format for a Zodios PUT operation, including path parameters, headers, and body content.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPUT /users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"id\": 1,\n  \"name\": \"John\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making PUT Requests with Zodios\nDESCRIPTION: Demonstrates making PUT requests with a body payload and path parameters for resource updates.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await api.put(\"/users/:id\", {id: 1, name: \"John\" }, { params: { id: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Getting Query Key by Alias in TypeScript\nDESCRIPTION: Function signature and examples for getting a query key by endpoint alias, used for cache invalidation or direct data access.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ngetKeyByAlias(alias: string, config?: ZodiosRequestOptions): QueryKey;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByAlias('getUser', { params: { id: 1 } });\nconst user = queryClient.getQueryData<User>(key);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByAlias('getUser');\nqueryClient.invalidateQueries(key);\n```\n\n----------------------------------------\n\nTITLE: HTTP PATCH Request Example Generated by Zodios\nDESCRIPTION: Shows the raw HTTP PATCH request that will be sent when using the corresponding Zodios patch call. Outlines the HTTP headers and the JSON body that is transmitted, illustrating how path parameters are replaced and JSON content is sent.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPATCH /users/1 HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"name\": \"John\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring PATCH Method with Zodios in TypeScript\nDESCRIPTION: Defines the 'patch' method signature for making HTTP PATCH requests using Zodios. Requires dependencies on Zodios types (BodyParam, ZodiosRequestOptions, Response) and expects a URL path, a request body, and optional configuration. The method returns a Promise resolving to the API response, and uses 'params' in the config to substitute path parameters dynamically.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\npatch(path: string, body: BodyParam, config?: ZodiosRequestOptions): Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Getting Query Key by Path in TypeScript\nDESCRIPTION: Function signature and examples for getting a query key by path, used for cache invalidation or direct data access.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ngetKeyByPath(method: string, path: string, config?: ZodiosRequestOptions): QueryKey;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByPath('get', '/users/:id', { params: { id: 1 } });\nconst user = queryClient.getQueryData<User>(key);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByPath('get', '/users/:id');\nqueryClient.invalidateQueries(key);\n```\n\n----------------------------------------\n\nTITLE: HTTP DELETE Request Example Generated by Zodios\nDESCRIPTION: Demonstrates the raw HTTP DELETE request issued when the corresponding Zodios delete call is made. Shows how the Accept header is set to application/json and how path parameters are inserted into the URL.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nDELETE /users/1 HTTP/1.1\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Merging Context-Aware Zodios Routers in TypeScript\nDESCRIPTION: Example showing how to create and merge multiple context-aware Zodios routers. Demonstrates creating a shared context with typed user information that's available across different router modules.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-router.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodiosContext } from \"@zodios/express\";\n\nconst ctx = zodiosContext(z.object({\n  user: z.object({\n    id: z.number(),\n    name: z.string(),\n    isAdmin: z.boolean(),\n  }),\n}));\n\nconst app = ctx.app();\nconst userRouter = ctx.router(userApi);\nconst adminRouter = ctx.router(adminApi);\n\napp.use(userRouter,adminRouter);\n\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Example with Zodios\nDESCRIPTION: Shows the equivalent HTTP request that would be sent by a Zodios POST operation, including headers and body content.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /users HTTP/1.1\nContent-Type: application/json\n\n{\n  \"name\": \"John\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Error Handler Type Definition\nDESCRIPTION: Type definition for custom validation error handlers in Zodios applications. This handler processes Zod validation errors and determines how they're presented to clients.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-app.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype RouterValidationErrorHandler = (\n  err: {\n      context: string;\n      error: z.ZodIssue[];\n  },\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void;\n```\n\n----------------------------------------\n\nTITLE: Initializing Zodios Client with form-data Library for Upload in TypeScript\nDESCRIPTION: Demonstrates how to use the 'form-data' Node.js library with Zodios for multipart uploads. Requires importing FormData from 'form-data', setting up a compatible Zodios endpoint, and supplying request headers compatible with form-data. The method appends a file from the DOM to FormData and submits it via Zodios.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport FormData from 'form-data';\n\nconst apiClient = new Zodios(\n  \"https://mywebsite.com\",\n  [{\n    method: \"post\",\n    path: \"/upload\",\n    alias: \"upload\",\n    description: \"Upload a file\",\n    parameters:[\n      {\n        name: \"body\",\n        type: \"Body\",\n        schema: z.instanceof(FormData),\n      }\n    ],\n    response: z.object({\n      id: z.number(),\n    }),\n  }],\n);\nconst form = new FormData();\nform.append('file', document.querySelector('#file').files[0]);\nconst id = await apiClient.upload(form, { headers: form.getHeaders() });\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters by Path with ZodiosPathParamsByPath\nDESCRIPTION: ZodiosPathParamsByPath extracts the path parameters type from an API definition using the HTTP method and endpoint path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosPathParamsByPath } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype GetUserPathParams = ZodiosPathParamsByPath<MyApi,'get','/users/:id'>;\n```\n\n----------------------------------------\n\nTITLE: Declaring DELETE Method with Zodios in TypeScript\nDESCRIPTION: Defines the 'delete' method signature for making HTTP DELETE requests in Zodios, accepting a path, an optional body, and an optional configuration. Dependencies include Zodios types. Uses path parameters via the 'params' object in the config and returns a Promise resolving to the API response.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(path: string, body: BodyParam, config?: ZodiosRequestOptions): Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Custom Form-URL Encoding with QS Library for IE Support in TypeScript\nDESCRIPTION: This example demonstrates how to use a custom approach for handling application/x-www-form-urlencoded requests, specifically for IE support using the 'qs' library. It transforms the request data and sets the appropriate Content-Type header.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport qs from 'qs';\n\nconst apiClient = new Zodios(\n  \"https://mywebsite.com\",\n  [{\n    method: \"post\",\n    path: \"/login\",\n    alias: \"login\",\n    description: \"Submit a form\",\n    parameters:[\n      {\n        name: \"body\",\n        type: \"Body\",\n        schema: z.object({\n          userName: z.string(),\n          password: z.string(),\n        }).transform(data=> qs.stringify(data)),\n      }\n    ],\n    response: z.object({\n      id: z.number(),\n    }),\n  }],\n);\nconst id = await apiClient.login({ userName: \"user\", password: \"password\" },\n  { headers: \n      { \n        'Content-Type': 'application/x-www-form-urlencoded' \n      }\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Query Alias Hook in TypeScript\nDESCRIPTION: Example of using a query alias hook to fetch users. This is identical to calling hooks.createQuery(\"/users\").\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to hooks.createQuery(\"/users\")\nconst state =  hooks.createGetUsers();\n```\n\n----------------------------------------\n\nTITLE: Generating Query Key by Alias with Parameters - TypeScript\nDESCRIPTION: Generates a cache query key for an endpoint using an alias and parameters, and fetches the corresponding cached data. Useful when using alias-based hooks and cache operations.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByAlias('getUser', { params: { id: 1 } });\nconst user = queryClient.getQueryData<User>(key);\n```\n\n----------------------------------------\n\nTITLE: Extracting Header Parameters by Path with ZodiosHeaderParamsByPath\nDESCRIPTION: ZodiosHeaderParamsByPath extracts the header parameters type from an API definition using the HTTP method and endpoint path.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosHeaderParamsByPath } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype CreateUsersHeaderParams = ZodiosHeaderParamsByPath<MyApi,'post','/users'>;\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Query Alias Function Signature in TypeScript\nDESCRIPTION: Type definition for creating an immutable query hook using an alias. This is typically used for POST endpoints marked as immutable.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create[Alias](body: Body, config?: ZodiosRequestOptions, queryOptions: CreateQueryOptions): CreateQueryResult<Response>;\n```\n\n----------------------------------------\n\nTITLE: Extracting API Definition Type with ApiOf\nDESCRIPTION: ApiOf is a type helper that extracts the API definition type from a Zodios client instance.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiOf, Zodios } from '@zodios/core';;\nimport { myApiDefinition } from './api-definition';\n\nconst client = new Zodios(myApiDefinition);\n\ntype MyApi = ApiOf<typeof client>;\n```\n\n----------------------------------------\n\nTITLE: Extracting Error Type by Alias with ZodiosErrorByAlias\nDESCRIPTION: ZodiosErrorByAlias extracts the error type for a specific status code from an API definition using the endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosErrorByAlias } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype NotFoundUsersError = ZodiosErrorByAlias<MyApi,'getUsers',404>;\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios with Solid.js Support\nDESCRIPTION: Installs Zodios packages with Solid.js integration. Includes Solid Query for data fetching, Zodios core and Solid-specific packages, along with Solid.js and its dependencies.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @tanstack/solid-query @zodios/core @zodios/solid axios solid-js zod\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Query with Pagination in TypeScript\nDESCRIPTION: Example of using createInfiniteQuery to load paginated users data, with configuration for page parameters and next page fetching logic.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n  const state = apiHooks.createInfiniteQuery(\n    \"/users\",\n    {\n      // request 10 users per page\n      queries: { limit: 10 },\n    },\n    {\n      // tell zodios to not use page as query key to allow infinite loading\n      getPageParamList: () => [\"page\"],\n      // get next page param has to return the next page as a query or path param\n      getNextPageParam: (lastPage, pages) => lastPage.nextPage ? {\n          queries: {\n            page: lastPage.nextPage,\n          },\n        }: undefined;\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Overriding Per-endpoint Plugins\nDESCRIPTION: Demonstrates how to override plugins that are registered per-endpoint, such as the formDataPlugin. This requires iterating through the API endpoints and applying the override to specific endpoint types.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { formDataPlugin } from '@zodios/core';\nimport { myFormDataPlugin } from './my-custom-formdata';\n \nfor(const endpoint of apiClient.api) {\n  if(endpoint.requestFormat === 'form-data') {\n    apiClient.use(endpoint.alias, {\n      name: formDataPlugin().name, // using the same name as an already existing plugin will override it\n      request: myFormDataPlugin\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAPI Builder - Zodios - TypeScript\nDESCRIPTION: Defines the TypeScript function signature for creating an OpenAPI builder using Zodios. The function takes an OpenAPIV3.InfoObject as input and returns an OpenApiBuilder. Requires the appropriate OpenAPI typings, usually available via packages like openapi-types.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction openApiBuilder(info: OpenAPIV3.InfoObject): OpenApiBuilder\n```\n\n----------------------------------------\n\nTITLE: Creating Immutable Infinite Query in TypeScript\nDESCRIPTION: Function signature for the createImmutableInfiniteQuery method, which allows searching pages indefinitely using POST requests.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nuseImmutableInfiniteQuery(path: string, body: Body ,config?: ZodiosRequestOptions, infiniteQueryOptions?: CreateInfiniteQueryOptions): CreateInfiniteQueryResult<Response>;\n```\n\n----------------------------------------\n\nTITLE: Using makeErrors Helper Function\nDESCRIPTION: Helper function to define and validate error definitions for API endpoints.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeErrors(errors: ZodiosEndpointErrors): ZodiosEndpointErrors;\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-in Plugins\nDESCRIPTION: Shows how to override Zodios built-in plugins with custom implementations by using the same name. This example overrides the default zod validation plugin with a custom validation interceptor.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { zodValidationPlugin } from '@zodios/core';\nimport { myValidationInterceptor } from './my-custom-validation';\n \napiClient.use({\n  name: zodValidationPlugin().name, // using the same name as an already existing plugin will override it\n  response: myValidationInterceptor,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Alias Function Signature in TypeScript\nDESCRIPTION: Type definition for creating a query hook using an alias. Returns a QueryResult object from solid-query with the response data, generated key, and invalidate helper.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create[Alias](config?: ZodiosRequestOptions, queryOptions: CreateQueryOptions): CreateQueryResult<Response>;\n```\n\n----------------------------------------\n\nTITLE: Using apiBuilder Helper Function\nDESCRIPTION: Function that creates a builder instance for constructing API definitions with improved type autocompletion.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction apiBuilder(endpoint: ZodiosEndpointDescription): ApiBuilder;\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Type Definitions\nDESCRIPTION: Installs type definitions for backend frameworks (Express and/or NextJS) as development dependencies. These are recommended even for JavaScript projects to enable better developer tooling and editor support.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n// if you use express\nnpm install --dev @types/express\n// or with nextjs\nnpm install --dev @types/express @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Alias Hook in TypeScript\nDESCRIPTION: Example of using a mutation alias hook to create a user. This is identical to createPost(\"/users\") or createMutation(\"post\",\"/users\").\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to createPost(\"/users\") or createMutation(\"post\",\"/users\")\nconst state = hooks.useCreateUser();\n```\n\n----------------------------------------\n\nTITLE: Using Aliases for API Endpoint Calls\nDESCRIPTION: Demonstrates using predefined aliases to make API calls with parameters, providing a cleaner and more type-safe interface.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to api.get(\"/users\")\nconst users = await api.getUsers();\n```\n\n----------------------------------------\n\nTITLE: Generating Query Key by Path for Invalidation - TypeScript\nDESCRIPTION: Shows how to generate a cache key for a route, applicable to invalidate all parameterizations for that endpoint. The produced key is used to instruct QueryClient to invalidate cached queries matching it.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = zodios.getKeyByPath('get', '/users/:id');\nqueryClient.invalidateQueries(key);\n```\n\n----------------------------------------\n\nTITLE: Creating PUT Request in TypeScript\nDESCRIPTION: Function signature and examples for the createPut method, including usage with regular and reactive parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePut(path: string, config?: ZodiosRequestOptions, queryOptions?: CreateMutationOptions): CreateMutationResult<Response>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hooks.createPut(\"/users/:id\", { params: { id: 1 } });\n// reactive example\nconst [id, setId] = createSignal(1);\nconst state = hooks.createPut(\"/users/:id\", { params: { get id() { return id()} } });\n```\n\n----------------------------------------\n\nTITLE: Installing React Type Definitions\nDESCRIPTION: Installs type definitions for React and React DOM as development dependencies. These are recommended even for JavaScript projects to enable better developer tooling and editor support.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n// if you use react\nnpm install --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Creating a Zodios Application with Express\nDESCRIPTION: Basic function signature for creating a Zodios application that wraps Express with type safety and validation.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-app.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction zodiosApp(api?: ZodiosEndpointDescriptions, options?: ZodiosAppOptions): ZodiosApp\n```\n\n----------------------------------------\n\nTITLE: Example Output of Zodios Client with Zod Transformation in JavaScript\nDESCRIPTION: Shows the JavaScript object output after querying the Zodios client with a transformation applied to the response. The output includes the user ID along with separated firstname and lastname fields.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: 7, firstname: 'Kurtis', lastname: 'Weissnat' }\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Generation Support for Express\nDESCRIPTION: Installs optional packages for OpenAPI documentation generation with Zodios and Express. These packages allow for automatic generation of OpenAPI specifications and Swagger UI integration.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zodios/openapi swagger-ui-express\n```\n\n----------------------------------------\n\nTITLE: Extracting Header Parameters by Alias with ZodiosHeaderParamsByAlias\nDESCRIPTION: ZodiosHeaderParamsByAlias extracts the header parameters type from an API definition using the endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosHeaderParamsByAlias } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype CreateUsersHeaderParams = ZodiosHeaderParamsByAlias<MyApi,'createUsers'>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Context-Aware Zodios Application\nDESCRIPTION: Function signature for creating a context-aware Zodios application that extends Express with contextual information.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-app.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nContext.app(api?: ZodiosEndpointDescriptions, options?: ZodiosAppOptions): ZodiosApp\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Alias Function Signature in TypeScript\nDESCRIPTION: Type definition for creating a mutation hook using an alias for POST, PUT, PATCH, or DELETE endpoints.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/solid.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction create[Alias](config?: ZodiosRequestOptions, mutationOptions?: CreateMutationOptions): MutationResult<Response>;\n```\n\n----------------------------------------\n\nTITLE: Extracting Request Body Type by Alias with ZodiosBodyByAlias\nDESCRIPTION: ZodiosBodyByAlias extracts the body type of a request from an API definition using the endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZodiosBodyByAlias } from '@zodios/core';\nimport { MyApi } from './my-api';\n\ntype User = ZodiosBodyByAlias<MyApi,'createUsers'>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Context-Aware App in TypeScript with Zodios\nDESCRIPTION: This snippet shows how to create a context-aware app using the `app()` method on the Zodios context object. It requires a previously defined context object and is essential for integrating context into an application.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-context.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst app = ctx.app();\n```\n\n----------------------------------------\n\nTITLE: Creating Context-Aware Router in TypeScript with Zodios\nDESCRIPTION: This snippet demonstrates how to create a context-aware router using the `router()` method from the Zodios context object. A context object initialized with `zodiosContext` is a prerequisite.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-context.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst router = ctx.router();\n```\n\n----------------------------------------\n\nTITLE: Defining makeEndpoint Helper Function\nDESCRIPTION: Helper function to narrow a single endpoint definition and perform runtime checks.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeEndpoint(endpoint: ZodiosEndpointDescription): ZodiosEndpointDescription;\n```\n\n----------------------------------------\n\nTITLE: Exporting Main Router in Next.js API Route\nDESCRIPTION: This code exports the main Zodios app router inside a Next.js API route using a catch-all slug. This connects the Next.js API system with the Zodios router configuration.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/next.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { app } from \"../../server/routers/app\";\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: RouterValidationErrorHandler Type Definition in TypeScript\nDESCRIPTION: Type definition for custom validation error handlers in Zodios Router. Defines the function signature for handling validation errors with access to the error context and Express request/response objects.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/server/express-router.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RouterValidationErrorHandler = (\n  err: {\n      context: string;\n      error: z.ZodIssue[];\n  },\n  req: Request,\n  res: Response,\n  next: NextFunction\n): void;\n```\n\n----------------------------------------\n\nTITLE: usePost Mutation Hook Example - TypeScript\nDESCRIPTION: Demonstrates the use of the usePost hook to perform a POST request mutation, such as creating a resource. The mutate function from the returned object is used to submit the mutation request. No parameters are passed here, but they may be used depending on the API definition.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate } = hooks.usePost(\"/users\");\n```\n\n----------------------------------------\n\nTITLE: Using parametersBuilder Helper Function\nDESCRIPTION: Function that returns a builder instance for creating parameter definitions with improved type autocompletion.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/helpers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parametersBuilder(): ParametersBuilder;\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Authentication Scheme - Zodios OpenAPI - TypeScript\nDESCRIPTION: Demonstrates usage of the bearerAuthScheme helper from Zodios to add a bearer token authentication security scheme when building OpenAPI documentation. The security scheme is named 'bearer', attached to a protected API, and then the OpenAPI document is generated. Requires @zodios/openapi.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { bearerAuthScheme } from \"@zodios/openapi\";\n\nconst doc = openApiBuilder(info)\n            .addSecurityScheme('bearer',bearerAuthScheme())\n            .addProtectedApi('bearer', api)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Using a Mutation Alias Hook for User Creation - TypeScript\nDESCRIPTION: Examples invoking a mutation alias hook to create a user. The mutate function is used to execute the mutation. The alias correlates to a POST operation such as creating a resource. No explicit parameters are shown, but these would typically be provided to the mutate call.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/react.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// identical to usePost(\"/users\") or useMutation(\"post\",\"/users\")\nconst { mutate } = hooks.useCreateUser();\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios with Express Support\nDESCRIPTION: Installs Zodios packages for backend development with Express. Includes Zodios core and Express-specific packages, along with Express itself and other dependencies.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zodios/core @zodios/express express zod axios\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI from Zodios API Definition (Deprecated) - TypeScript\nDESCRIPTION: Defines the now-deprecated toOpenApi function signature for generating an OpenAPI document from a ZodiosApiDefinition. Accepts options for info, servers, securityScheme, and custom tag mapping. Requires @zodios/openapi and OpenAPI typings. Outputs an OpenAPIV3.Document.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction toOpenApi(\n  api: ZodiosApiDefinition,\n  options?: {\n    info?: OpenAPIV3.InfoObject\n    servers?: OpenAPIV3.ServerObject[];\n    securityScheme?: OpenAPIV3.SecuritySchemeObject;\n    tagsFromPathFn?: (path: string) => string[];\n  }\n): OpenAPIV3.Document;\n```\n\n----------------------------------------\n\nTITLE: Example API Response Output\nDESCRIPTION: Example of the JSON response output from the API call to get a user.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: 7, name: 'Kurtis Weissnat' }\n```\n\n----------------------------------------\n\nTITLE: Using isErrorFromPath Type Guard Function in Zodios\nDESCRIPTION: Function signature for isErrorFromPath, which checks if an error matches expected errors for a specific API path and method.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/error.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isErrorFromPath(api: ZodiosEndpointDefinitions, method: string, path: string, error: unknown): error is AxiosError<ErrorsFromDefinition>\n```\n\n----------------------------------------\n\nTITLE: Using Zodios Client with Aliases\nDESCRIPTION: Example of calling an API endpoint using an alias with Zodios client, which provides auto-completion for parameters.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//   typed                     alias   auto-complete params\n//     ▼                        ▼                ▼\nconst user = await apiClient.getUser({ params: { id: 7 } });\nconsole.log(user);\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios Client with NPM\nDESCRIPTION: Command to install the Zodios client and core API definitions using npm package manager.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @zodios/core\n```\n\n----------------------------------------\n\nTITLE: Building Zodios Website for Production\nDESCRIPTION: Command to generate static content for the Zodios website into the build directory, ready for deployment to any static hosting service.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Using Zodios Client with Path Parameters\nDESCRIPTION: Example of calling an API endpoint with Zodios client using path parameters with auto-completion features.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//   typed                     auto-complete path   auto-complete params\n//     ▼                               ▼                   ▼\nconst user = await apiClient.get(\"/users/:id\", { params: { id: 7 } });\nconsole.log(user);\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Format Example\nDESCRIPTION: Shows the equivalent HTTP request format for a Zodios POST operation, including headers and content formatting.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/client.md#2025-04-22_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /users HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n  \"name\": \"John\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios Server with Yarn\nDESCRIPTION: Command to install the Zodios server components (core and express) using yarn package manager.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> yarn add @zodios/core @zodios/express\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios Server with NPM\nDESCRIPTION: Command to install the Zodios server components (core and express) using npm package manager.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> npm install @zodios/core @zodios/express\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios Client with Yarn\nDESCRIPTION: Command to install the Zodios client and core API definitions using yarn package manager.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> yarn add @zodios/core\n```\n\n----------------------------------------\n\nTITLE: Using isErrorFromAlias Type Guard Function in Zodios\nDESCRIPTION: Function signature for isErrorFromAlias, which checks if an error matches expected errors for a specific API endpoint alias.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/client/error.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isErrorFromAlias(api: ZodiosEndpointDefinitions, alias: string, error: unknown): error is AxiosError<ErrorsFromDefinition>\n```\n\n----------------------------------------\n\nTITLE: Deploying Zodios Website with GitHub Authentication\nDESCRIPTION: Command to deploy the Zodios website using GitHub authentication, requiring the user to specify their GitHub username as an environment variable.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Zodios Website Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window for real-time preview of the Zodios website.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Zodios Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the Zodios website using Yarn package manager.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Deploying Zodios Website with SSH Authentication\nDESCRIPTION: Command to deploy the Zodios website using SSH authentication, building the site and pushing to the gh-pages branch.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Customizing Tags from Paths - Zodios OpenAPI - TypeScript\nDESCRIPTION: Provides an example of overriding the default path-to-tags function in the OpenApiBuilder with setCustomTagsFn. A custom mapping is implemented to specify which tags are attached to each API endpoint path. This allows precise grouping of endpoints in the generated documentation. Requires Zodios and OpenAPI typings.\nSOURCE: https://github.com/ecyrbe/zodios/blob/main/website/docs/api/openapi.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst doc = openApiBuilder(info)\n            .addPublicApi(api)\n            .setCustomTagsFn((path) => ({\n                '/users': ['users'],\n                '/users/:id': ['users'],\n                '/users/:id/comments': ['users'],\n              }[path])\n            .build();\n```"
  }
]