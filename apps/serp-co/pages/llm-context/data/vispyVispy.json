[
  {
    "owner": "vispy",
    "repo": "vispy",
    "content": "TITLE: Implementing Rotating Quad Canvas in Python with Vispy\nDESCRIPTION: This Python class defines a Canvas for rendering a rotating quad using Vispy. It sets up the shader program, initializes vertex data, and handles drawing and animation through timer events.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass Canvas(app.Canvas):\n    def __init__(self):\n        super().__init__(size=(512, 512), title='Rotating quad',\n                         keys='interactive')\n        # Build program & data\n        self.program = Program(vertex, fragment, count=4)\n        self.program['color'] = [(1, 0, 0, 1), (0, 1, 0, 1),\n                                 (0, 0, 1, 1), (1, 1, 0, 1)]\n        self.program['position'] = [(-1, -1), (-1, +1),\n                                    (+1, -1), (+1, +1)]\n        self.program['theta'] = 0.0\n\n        gloo.set_viewport(0, 0, *self.physical_size)\n        gloo.set_clear_color('white')\n\n        self.timer = app.Timer('auto', self.on_timer)\n        self.clock = 0\n        self.timer.start()\n\n        self.show()\n\n    def on_draw(self, event):\n        gloo.clear()\n        self.program.draw('triangle_strip')\n\n    def on_resize(self, event):\n        gloo.set_viewport(0, 0, *event.physical_size)\n\n    def on_timer(self, event):\n        self.clock += 0.001 * 1000.0 / 60.\n        self.program['theta'] = self.clock\n        self.update()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic VisPy Application with gloo\nDESCRIPTION: This snippet demonstrates how to create a basic VisPy application using the gloo interface. It sets up a Canvas, defines a draw function, and runs the application to display a solid color background.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom vispy import app, gloo\n\ncanvas = app.Canvas(keys='interactive')\n\n@canvas.connect\ndef on_draw(event):\n    gloo.set_clear_color((0.2, 0.4, 0.6, 1.0))\n    gloo.clear()\n\ncanvas.show()\n\nif __name__ == '__main__' and sys.flags.interactive == 0:\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating OpenGL Program with VisPy gloo\nDESCRIPTION: This example demonstrates how to create an OpenGL Program using VisPy's gloo interface. It defines vertex and fragment shaders, sets up a Canvas subclass, and draws a colored quad using the Program.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vispy import app, gloo\nfrom vispy.gloo import Program\n\nvertex = \"\"\"\n    attribute vec4 color;\n    attribute vec2 position;\n    varying vec4 v_color;\n    void main()\n    {\n        gl_Position = vec4(position, 0.0, 1.0);\n        v_color = color;\n    } \"\"\"\n\nfragment = \"\"\"\n    varying vec4 v_color;\n    void main()\n    {\n        gl_FragColor = v_color;\n    } \"\"\"\n\nclass Canvas(app.Canvas):\n    def __init__(self):\n        super().__init__(size=(512, 512), title='Colored quad',\n                         keys='interactive')\n\n        # Build program\n        self.program = Program(vertex, fragment, count=4)\n\n        # Set uniforms and attributes\n        self.program['color'] = [(1, 0, 0, 1), (0, 1, 0, 1),\n                                 (0, 0, 1, 1), (1, 1, 0, 1)]\n        self.program['position'] = [(-1, -1), (-1, +1),\n                                    (+1, -1), (+1, +1)]\n\n        gloo.set_viewport(0, 0, *self.physical_size)\n\n        self.show()\n\n    def on_draw(self, event):\n        gloo.clear()\n        self.program.draw('triangle_strip')\n\n    def on_resize(self, event):\n        gloo.set_viewport(0, 0, *event.physical_size)\n\nif __name__ == '__main__':\n    c = Canvas()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Defining Vertex Shader for Rotating Quad in GLSL\nDESCRIPTION: This GLSL vertex shader defines the position and color of each vertex for a rotating quad. It uses a uniform variable 'theta' for rotation and passes the color to the fragment shader.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_4\n\nLANGUAGE: GLSL\nCODE:\n```\nuniform float theta;\nattribute vec2 position;\nattribute vec4 color;\nvarying vec4 v_color;\nvoid main()\n{\n    float ct = cos(theta);\n    float st = sin(theta);\n    mat2 rot = mat2(ct, st, -st, ct);\n    gl_Position = vec4(rot * position, 0.0, 1.0);\n    v_color = color;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Off-screen with VisPy\nDESCRIPTION: Demonstrates how to render a VisPy canvas to an image file without displaying a window. This code snippet shows the process of capturing the canvas content and saving it as a PNG file using the imageio library.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimage = canvas.render()\nimport imageio\nimageio.imwrite(\"rendered.png\", image)\n```\n\n----------------------------------------\n\nTITLE: Running Vispy Rotating Quad Example in Python\nDESCRIPTION: This Python code creates an instance of the Canvas class and runs the Vispy application, resulting in a 2D square that rotates for every timer event.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == '__main__':\n    c = Canvas()\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing Rotating Cube Visualization with Vispy\nDESCRIPTION: Creates a Canvas class that renders a rotating 3D cube using Vispy. It sets up the cube visual, implements transformation logic, and uses a timer for continuous rotation updates.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/Rotating Cube.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nfrom vispy import app, gloo\nfrom vispy.visuals import CubeVisual, transforms\n\n\nclass Canvas(app.Canvas):\n    def __init__(self):\n        app.Canvas.__init__(self, 'Cube', keys='interactive',\n                            size=(400, 400))\n\n        self.cube = CubeVisual((1.0, 0.5, 0.25), color='red', edge_color=\"k\")\n        self.theta = 0\n        self.phi = 0\n\n        # Create a TransformSystem that will tell the visual how to draw\n        self.cube_transform = transforms.MatrixTransform()\n        self.cube.transform = self.cube_transform\n\n        self.timer = app.Timer('auto', connect=self.on_timer, start=True)\n\n    def on_resize(self, event):\n        # Set canvas viewport and reconfigure visual transforms to match.\n        vp = (0, 0, self.physical_size[0], self.physical_size[1])\n        self.context.set_viewport(*vp)\n        self.cube.transforms.configure(canvas=self, viewport=vp)\n\n    def on_draw(self, event):\n        gloo.set_viewport(0, 0, *self.physical_size)\n        gloo.clear('white', depth=True)\n\n        self.cube.draw()\n\n    def on_timer(self, event):\n        self.theta += .5\n        self.phi += .5\n        self.cube_transform.reset()\n        self.cube_transform.rotate(self.theta, (0, 0, 1))\n        self.cube_transform.rotate(self.phi, (0, 1, 0))\n        self.cube_transform.scale((100, 100, 0.001))\n        self.cube_transform.translate((200, 200))\n        self.update()\n\n\nwin = Canvas()\nwin.show()\nwin\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL vertex and fragment shaders for molecular rendering\nDESCRIPTION: Defines the GLSL vertex and fragment shaders used to render the molecules with lighting and depth effects.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_molecular_viewer.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nvertex = \"\"\"\n#version 120\n\nuniform mat4 u_model;\nuniform mat4 u_view;\nuniform mat4 u_projection;\nuniform vec3 u_light_position;\nuniform vec3 u_light_spec_position;\n\nattribute vec3  a_position;\nattribute vec3  a_color;\nattribute float a_radius;\n\nvarying vec3  v_color;\nvarying vec4  v_eye_position;\nvarying float v_radius;\nvarying vec3  v_light_direction;\n\nvoid main (void) {\n    v_radius = a_radius;\n    v_color = a_color;\n\n    v_eye_position = u_view * u_model * vec4(a_position,1.0);\n    v_light_direction = normalize(u_light_position);\n    float dist = length(v_eye_position.xyz);\n\n    gl_Position = u_projection * v_eye_position;\n\n    // stackoverflow.com/questions/8608844/...\n    //  ... resizing-point-sprites-based-on-distance-from-the-camera\n    vec4  proj_corner = u_projection * vec4(a_radius, a_radius, v_eye_position.z, v_eye_position.w);  // # noqa\n    gl_PointSize = 512.0 * proj_corner.x / proj_corner.w;\n}\n\"\"\"\n```\n\nLANGUAGE: glsl\nCODE:\n```\nfragment = \"\"\"\n#version 120\n\nuniform mat4 u_model;\nuniform mat4 u_view;\nuniform mat4 u_projection;\nuniform vec3 u_light_position;\nuniform vec3 u_light_spec_position;\n\nvarying vec3  v_color;\nvarying vec4  v_eye_position;\nvarying float v_radius;\nvarying vec3  v_light_direction;\nvoid main()\n{\n    // r^2 = (x - x0)^2 + (y - y0)^2 + (z - z0)^2\n    vec2 texcoord = gl_PointCoord* 2.0 - vec2(1.0);\n    float x = texcoord.x;\n    float y = texcoord.y;\n    float d = 1.0 - x*x - y*y;\n    if (d <= 0.0)\n        discard;\n\n    float z = sqrt(d);\n    vec4 pos = v_eye_position;\n    pos.z += v_radius*z;\n    vec3 pos2 = pos.xyz;\n    pos = u_projection * pos;\n    //gl_FragDepth = 0.5*(pos.z / pos.w)+0.5;\n    vec3 normal = vec3(x,y,z);\n    float diffuse = clamp(dot(normal, v_light_direction), 0.0, 1.0);\n\n    // Specular lighting.\n    vec3 M = pos2.xyz;\n    vec3 O = v_eye_position.xyz;\n    vec3 L = u_light_spec_position;\n    vec3 K = normalize(normalize(L - M) + normalize(O - M));\n    // WARNING: abs() is necessary, otherwise weird bugs may appear with some\n    // GPU drivers...\n    float specular = clamp(pow(abs(dot(normal, K)), 40.), 0.0, 1.0);\n    vec3 v_light = vec3(1., 1., 1.);\n    gl_FragColor.rgba = vec4(.15*v_color + .55*diffuse * v_color\n                        + .35*specular * v_light, 1.0);\n}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking System Information with VisPy\nDESCRIPTION: Command to print system information and verify VisPy installation status, including OpenGL version and graphics capabilities.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> print(vispy.sys_info())\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Vertex and Fragment Shaders\nDESCRIPTION: Creates custom GLSL shaders for rendering 3D geometry with position and ID-based rendering logic\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_display_lines.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: glsl\nCODE:\n```\nVERT_SHADER = \"\"\"\\nuniform mat4 u_model;\\nuniform mat4 u_view;\\nuniform mat4 u_projection;\\nattribute vec3 a_position;\\nattribute float a_id;\\nvarying float v_id;\\nvoid main (void) {\\n    v_id = a_id;\\n    gl_Position = u_projection * u_view * u_model * vec4(a_position,1.0);\\n}\\n\"\"\"\n```\n\nLANGUAGE: glsl\nCODE:\n```\nFRAG_SHADER = \"\"\"\\nvarying float v_id;\\nvoid main()\\n{\\n    float f = fract(v_id);\\n    // The second useless test is needed on OSX 10.8 (fuck)\\n    if( (f > 0.0001) && (f < .9999) )\\n        discard;\\n    else\\n        gl_FragColor = vec4(0,0,0,1);\\n}\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking VisPy System Information using Python\nDESCRIPTION: Code to print system information including backend details and GPU information from OpenGL. This is useful for verifying VisPy installation and debugging.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/_canvas_app.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vispy\nprint(vispy.sys_info())\n```\n\n----------------------------------------\n\nTITLE: Using Uniforms for Constant Variables in GLSL\nDESCRIPTION: This snippet demonstrates the usage of uniforms in a vertex shader, specifically to apply a scaling factor to all vertices. Uniforms are used for values that remain constant across all processed vertices.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_4\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float scale;\nattribute vec2 position;\nattribute vec4 color;\nvoid main()\n{\n    gl_Position = vec4(position*scale, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timers for Animation in VisPy gloo\nDESCRIPTION: This snippet shows how to use VisPy's Timer class to create animations. It updates a uniform variable in the shader program based on a clock, causing the quad to rotate over time.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vispy import gloo, app\nfrom vispy.gloo import Program\n\nvertex = \"\"\"\n    uniform float theta;\n    attribute vec4 color;\n    attribute vec2 position;\n    varying vec4 v_color;\n    void main()\n    {\n        float ct = cos(theta);\n        float st = sin(theta);\n        float x = 0.75* (position.x*ct - position.y*st);\n        float y = 0.75* (position.x*st + position.y*ct);\n        gl_Position = vec4(x, y, 0.0, 1.0);\n        v_color = color;\n    } \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Vertex Shader in GLSL\nDESCRIPTION: This snippet illustrates a minimal vertex shader that outputs a vertex position. It sets the vertex position to the null vertex (0,0,0,1), which is useful for understanding the vertex shader structure.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main()\n{\n    gl_Position = vec4(0.0,0.0,0.0,1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Canvas class for molecular visualization\nDESCRIPTION: Defines a Canvas class that handles the initialization, data loading, and rendering of the molecular viewer using VisPy's gloo interface.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_molecular_viewer.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Canvas(app.Canvas):\n\n    def __init__(self):\n        app.Canvas.__init__(self, title='Molecular viewer',\n                            keys='interactive', size=(640, 480))\n        self.ps = self.pixel_scale\n\n        self.translate = 40\n        self.program = gloo.Program(vertex, fragment)\n        self.view = translate((0, 0, -self.translate))\n        self.model = np.eye(4, dtype=np.float32)\n        self.projection = np.eye(4, dtype=np.float32)\n\n        self.apply_zoom()\n\n        fname = load_data_file('molecular_viewer/micelle.npz')\n        self.load_molecule(fname)\n        self.load_data()\n\n        self.theta = 0\n        self.phi = 0\n\n        gloo.set_state(depth_test=True, clear_color='black')\n        self.timer = app.Timer('auto', connect=self.on_timer, start=True)\n\n        self.show()\n\n    def load_molecule(self, fname):\n        molecule = np.load(fname)['molecule']\n        self._nAtoms = molecule.shape[0]\n\n        # The x,y,z values store in one array\n        self.coords = molecule[:, :3]\n\n        # The array that will store the color and alpha scale for all the atoms\n        self.atomsColours = molecule[:, 3:6]\n\n        # The array that will store the scale for all the atoms.\n        self.atomsScales = molecule[:, 6]\n\n    def load_data(self):\n        n = self._nAtoms\n\n        data = np.zeros(n, [('a_position', np.float32, 3),\n                            ('a_color', np.float32, 3),\n                            ('a_radius', np.float32)])\n\n        data['a_position'] = self.coords\n        data['a_color'] = self.atomsColours\n        data['a_radius'] = self.atomsScales*self.ps\n\n        self.program.bind(gloo.VertexBuffer(data))\n\n        self.program['u_model'] = self.model\n        self.program['u_view'] = self.view\n        self.program['u_light_position'] = 0., 0., 2.\n        self.program['u_light_spec_position'] = -5., 5., -5.\n\n    def on_key_press(self, event):\n        if event.text == ' ':\n            if self.timer.running:\n                self.timer.stop()\n            else:\n                self.timer.start()\n\n    def on_timer(self, event):\n        self.theta += .25\n        self.phi += .25\n        self.model = np.dot(rotate(self.theta, (0, 0, 1)),\n                            rotate(self.phi, (0, 1, 0)))\n        self.program['u_model'] = self.model\n        self.update()\n\n    def on_resize(self, event):\n        width, height = event.physical_size\n        gloo.set_viewport(0, 0, width, height)\n        self.projection = perspective(25.0, width / float(height), 2.0, 100.0)\n        self.program['u_projection'] = self.projection\n\n    def apply_zoom(self):\n        width, height = self.physical_size\n        gloo.set_viewport(0, 0, width, height)\n        self.projection = perspective(25.0, width / float(height), 2.0, 100.0)\n        self.program['u_projection'] = self.projection\n\n    def on_mouse_wheel(self, event):\n        self.translate -= event.delta[1]\n        self.translate = max(-1, self.translate)\n        self.view = translate((0, 0, -self.translate))\n\n        self.program['u_view'] = self.view\n        self.update()\n\n    def on_draw(self, event):\n        gloo.clear()\n        self.program.draw('points')\n```\n\n----------------------------------------\n\nTITLE: Positioning VisPy Visuals at Different Depth Levels\nDESCRIPTION: Shows how to position VisPy visual objects at different z-levels for proper layering. This code uses the STTransform to set the z-position of two visual objects.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vispy.visuals import transforms\nvisual1.transform = transforms.STTransform(translate=(0, 0, 1))\nvisual2.transform = transforms.STTransform(translate=(0, 0, 2))\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Vispy Canvas Class\nDESCRIPTION: Defines a custom Canvas class with OpenGL rendering, timer-based animation, and interactive controls for rotation and zooming\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_display_lines.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Canvas(app.Canvas):\\n\\n    def __init__(self, size=None, show=True):\\n        app.Canvas.__init__(self, keys='interactive', size=size)\\n\\n        self.program = gloo.Program(VERT_SHADER, FRAG_SHADER)\\n\\n        self.program['a_id'] = gloo.VertexBuffer(a_id)\\n        self.program['a_position'] = gloo.VertexBuffer(a_position)\\n\\n        # Additional initialization methods for view, projection, and rendering...\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent 2D Images in VisPy\nDESCRIPTION: Demonstrates how to create two Image visual nodes with different opacity levels. This snippet shows the creation of a white and a blue image with varying levels of transparency using numpy arrays.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# A white image with integer values between 0 and 255.\nimage_data1 = np.ones((200, 300, 4), dtype='uint8')\n# Half translucent.\nimage_data1[..., 3] = 128\n\n# A blue image with float values between 0 and 1.\nimage_data2 = np.zeros((200, 300, 4), dtype='np.float32')\nimage_data2[..., 2]  = 1.0  # Blue.\n# A bit more translucent.\nimage_data2[..., 3] = 0.25\n\nvisual1 = Image(image_data1)\nvisual2 = Image(image_data2)\n```\n\n----------------------------------------\n\nTITLE: Setting Draw Order for VisPy Visuals\nDESCRIPTION: Demonstrates how to set the draw order of VisPy visual objects to ensure proper rendering of transparent layers. This snippet sets the order property of two visual objects.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvisual2.order = 1  # Furthest, drawn first.\nvisual1.order = 2  # Closest, drawn second.\n```\n\n----------------------------------------\n\nTITLE: Configuring GL State for Translucent VisPy Visuals\nDESCRIPTION: Shows how to set the OpenGL state for translucent rendering in VisPy. This code sets up depth testing, blending, and the blend function for a visual object.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvisual1.set_gl_state('translucent')\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Event Handling for Pause Functionality in Python\nDESCRIPTION: This Python method handles keyboard events in the Canvas class, allowing the user to pause and resume the animation by pressing the spacebar.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef on_key_press(self, event):\n    if event.text == ' ':\n        if self.timer.running:\n            self.timer.stop()\n        else:\n            self.timer.start()\n```\n\n----------------------------------------\n\nTITLE: Generating Random Vertex Data\nDESCRIPTION: Creates random position and ID arrays for vertex shader input, used to generate geometric data with random characteristics\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_display_lines.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nn = 100\\na_position = np.random.uniform(-1, 1, (n, 3)).astype(np.float32)\\na_id = np.random.randint(0, 30, (n, 1))\\na_id = np.sort(a_id, axis=0).astype(np.float32)\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertex Buffer with NumPy in Python\nDESCRIPTION: This Python snippet creates a structured array using NumPy to represent vertex data. Each vertex has a position (3D coordinates) and a color (RGBA). This is essential for uploading vertex data to the GPU in OpenGL.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndata = numpy.zeros(4, dtype = [ (\"position\", np.float32, 3),\n                                  (\"color\",    np.float32, 4)] )\n```\n\n----------------------------------------\n\nTITLE: Displaying All Available Colormaps\nDESCRIPTION: Iterates through all available colormaps and displays them using IPython HTML display.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor cmap in get_colormaps():\n    display_html('<h3>%s</h3>' % cmap, raw=True)\n    display_html(get_colormap(cmap))\n```\n\n----------------------------------------\n\nTITLE: Passing Varying Variables Between Vertex and Fragment Shaders in GLSL\nDESCRIPTION: This GLSL snippet showcases how to pass varying variables (color) from the vertex shader to the fragment shader. It demonstrates how to interpolate vertex colors for fragments based on their position.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_5\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float scale;\nattribute vec2 position;\nattribute vec4 color;\nvarying vec4 v_color;\n\nvoid main()\n{\n    gl_Position = vec4(position*scale, 0.0, 1.0);\n    v_color = color;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hex Color Discrete Colormap\nDESCRIPTION: Creates a discrete colormap using a mix of color names and hexadecimal color values with zero interpolation.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nColormap(['r', 'g', '#123456'],\n         interpolation='zero')\n```\n\n----------------------------------------\n\nTITLE: Defining Fragment Shader for Colored Quad in GLSL\nDESCRIPTION: This GLSL fragment shader sets the output color of each fragment to the interpolated color passed from the vertex shader.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_5\n\nLANGUAGE: GLSL\nCODE:\n```\nvarying vec4 v_color;\nvoid main()\n{\n    gl_FragColor = v_color;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Numpy Array-based Discrete Colormap\nDESCRIPTION: Creates a discrete colormap using numpy arrays for color values and control points with zero interpolation.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nColormap(np.array([[0, .75, 0],\n                   [.75, .25, .5]]), \n         [0., .25, 1.], \n         interpolation='zero')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Linear Gradient Colormap\nDESCRIPTION: Creates a linear gradient colormap using red, green, and hexadecimal colors with default interpolation.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nColormap(['r', 'g', '#123456'])\n```\n\n----------------------------------------\n\nTITLE: Creating RGB-Yellow Discrete Colormap\nDESCRIPTION: Creates a discrete colormap using red, green, and yellow colors with zero interpolation.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nColormap(['r', 'g', 'y'], interpolation='zero')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Linear Gradient with Control Points\nDESCRIPTION: Creates a linear gradient colormap using RGB arrays with custom control points for color transitions.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nColormap([[1,0,0], [1,1,1], [1,0,1]], \n               [0., .75, 1.])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic RGB Discrete Colormap\nDESCRIPTION: Creates a discrete colormap using red, green, and blue colors with zero interpolation.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nColormap(['r', 'g', 'b'], interpolation='zero')\n```\n\n----------------------------------------\n\nTITLE: Testing Vispy Installation\nDESCRIPTION: This snippet shows how to test the Vispy installation by importing the `vispy` module and calling the `vispy.test()` function. This initiates the Vispy test suite to verify the installation and identify potential issues.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/raspberry.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import vispy\n>>> vispy.test()\n...\n```\n\n----------------------------------------\n\nTITLE: Creating VisPy Application with Canvas Subclass\nDESCRIPTION: This snippet shows an alternative way to structure a VisPy application by subclassing the Canvas class. It overrides the on_draw method to set the clear color and clear the canvas.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/gloo.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom vispy import app, gloo\n\nclass MyCanvas(app.Canvas):\n    def on_draw(self, event):\n        gloo.set_clear_color((0.2, 0.4, 0.6, 1.0))\n        gloo.clear()\n\ncanvas = MyCanvas(keys='interactive')\ncanvas.show()\n\nif __name__ == '__main__' and sys.flags.interactive == 0:\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Conda Installation Command\nDESCRIPTION: Command to install VisPy using conda package manager from conda-forge channel.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge vispy\n```\n\n----------------------------------------\n\nTITLE: Testing VisPy Installation\nDESCRIPTION: Commands to import VisPy and run its test suite to verify proper installation.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import vispy\n>>> vispy.test()\n...\n```\n\n----------------------------------------\n\nTITLE: Setting OSMesa Backend for VisPy\nDESCRIPTION: Shows how to configure VisPy to use the OSMesa backend for off-screen rendering. This snippet demonstrates importing VisPy and setting the backend to 'osmesa'.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vispy\nvispy.use(\"osmesa\")\n```\n\n----------------------------------------\n\nTITLE: GitHub Installation Commands\nDESCRIPTION: Commands for installing VisPy directly from GitHub repository in development mode.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/vispy/vispy.git\ncd vispy\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating and displaying the molecular viewer canvas\nDESCRIPTION: Instantiates the Canvas class to create the molecular viewer and displays it in the Jupyter notebook.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_molecular_viewer.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nc = Canvas()\nc\n```\n\n----------------------------------------\n\nTITLE: PyPI Installation Commands\nDESCRIPTION: Various commands for installing VisPy using pip, including stable and development versions.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade vispy\n```\n\n----------------------------------------\n\nTITLE: Instantiating Canvas and Demonstrating Interactions\nDESCRIPTION: Creates a Vispy canvas instance with specific size and demonstrates timer start/stop interactions\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_display_lines.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nc = Canvas(size=(300, 300))\\nc\n```\n\nLANGUAGE: python\nCODE:\n```\nc.timer.stop()\n```\n\nLANGUAGE: python\nCODE:\n```\nc.timer.start()\n```\n\n----------------------------------------\n\nTITLE: Jupyter Kernel Configuration JSON\nDESCRIPTION: Example JSON configuration for setting up a Jupyter kernel with Nvidia graphics support.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"argv\": [\n    \"primusrun\",\n    \"python\",\n    \"-m\",\n    \"ipykernel_launcher\",\n    \"-f\",\n    \"{connection_file}\"\n  ],\n  \"language\": \"python\",\n  \"display_name\": \"Python 3\"\n}\n```\n\n----------------------------------------\n\nTITLE: IPython Magic Command for Qt\nDESCRIPTION: IPython magic command to enable Qt event loop integration for interactive use.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> %gui qt\n```\n\n----------------------------------------\n\nTITLE: Installing Vispy from Github Repository\nDESCRIPTION: This snippet demonstrates how to install Vispy from the Github repository. It involves cloning the repository, navigating into the cloned directory, and using `python3 setup.py develop` to install Vispy in development mode. This allows for easy updating to the latest main branch.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/raspberry.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git://github.com/vispy/vispy.git  # creates \"vispy\" folder\n$ cd vispy\n$ python3 setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Controlling molecular viewer rotation\nDESCRIPTION: Demonstrates how to pause and resume the rotation of the molecular viewer using timer methods.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_molecular_viewer.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nc.timer.stop()\n```\n\nLANGUAGE: python\nCODE:\n```\nc.timer.start()\n```\n\n----------------------------------------\n\nTITLE: Configuring GL Driver on Raspberry Pi using raspi-config\nDESCRIPTION: This snippet shows how to configure the OpenGL driver on a Raspberry Pi using the `raspi-config` tool. It specifies navigating to the Advanced Options and selecting the GL Driver to enable either Full KMS or Fake KMS. It ensures the proper rendering context is set for vispy.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/raspberry.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n7 Advanced Options\n    A1 Expand Filesystem - resize root partition to use all SD space\n    A7 GL Driver\n        G1 (Full KMS) OpenGL desktop driver with full KMS\n```\n\n----------------------------------------\n\nTITLE: Fragment Shader Using Varying Color in GLSL\nDESCRIPTION: This fragment shader snippet receives the varying color value from the vertex shader and outputs it as the fragment's color, showcasing how vertex attributes influence rendered fragments.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_6\n\nLANGUAGE: glsl\nCODE:\n```\nvarying vec4 v_color;\n\nvoid main()\n{\n    gl_FragColor = v_color;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting EGL Backend for VisPy\nDESCRIPTION: Illustrates how to set up VisPy to use the EGL backend for off-screen rendering. This code imports VisPy and configures it to use the 'egl' backend.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vispy\nvispy.use(\"egl\")\n```\n\n----------------------------------------\n\nTITLE: Updating a Vertex Shader to Handle Attributes in GLSL\nDESCRIPTION: This updated vertex shader includes attributes for position and color, allowing it to process vertex data passed from the CPU buffer. It expects the attributes to be bound manually in the program.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nattribute vec2 position;\nattribute vec4 color;\nvoid main()\n{\n    gl_Position = vec4(position, 0.0, 1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Cube Rotation in Vispy Visualization\nDESCRIPTION: Stops the rotation of the cube by halting the timer that updates its position.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/Rotating Cube.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwin.timer.stop()\n```\n\n----------------------------------------\n\nTITLE: Restarting Cube Rotation in Vispy Visualization\nDESCRIPTION: Restarts the rotation of the cube by reactivating the timer that updates its position.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/Rotating Cube.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwin.timer.start()\n```\n\n----------------------------------------\n\nTITLE: Running VisPy Tests on Multiple Backends\nDESCRIPTION: Executes VisPy tests on multiple backends using the make command.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython make test unit\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Fragment Shader in GLSL\nDESCRIPTION: This snippet demonstrates a simple fragment shader that outputs the color black for each fragment processed. This shader serves as a basic introduction to fragment shaders.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/modern-gl.rst#2025-04-21_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nvoid main()\n{\n    gl_FragColor = vec4(0.0,0.0,0.0,1.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Running VisPy Example Scripts\nDESCRIPTION: Attempts to run all VisPy example scripts as part of testing.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython make test examples\n```\n\n----------------------------------------\n\nTITLE: Initializing Vispy for Jupyter Notebook\nDESCRIPTION: Sets up Vispy to use the Jupyter RFB backend for rendering in a notebook environment.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/Rotating Cube.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vispy\nvispy.use(\"jupyter_rfb\")\n```\n\n----------------------------------------\n\nTITLE: Running Full VisPy Test Suite\nDESCRIPTION: Executes the full VisPy test suite including nobackend, unit, and extra tests.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython make test full\n```\n\n----------------------------------------\n\nTITLE: Test PyPI Installation Command\nDESCRIPTION: Command to install the development version of VisPy from Test PyPI repository.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/installation.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre -i https://test.pypi.org/simple/ vispy\n```\n\n----------------------------------------\n\nTITLE: Building Documentation without Gallery Generation - Sphinx\nDESCRIPTION: This code snippet shows how to build the Sphinx documentation for the VisPy project without generating gallery examples. It uses the SPHINXOPTS option to skip gallery generation, which is useful for faster builds when gallery modifications are not needed.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake html SPHINXOPTS=\"-D plot_gallery=0\"\n```\n\n----------------------------------------\n\nTITLE: Importing VisPy Colormap Dependencies\nDESCRIPTION: Imports required modules for working with VisPy colormaps and IPython display functionality.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/colormaps.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom vispy.color import (get_colormap, get_colormaps, Colormap)\nfrom IPython.display import display_html\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for VisPy\nDESCRIPTION: Generates HTML documentation for VisPy using Sphinx in the doc directory.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd doc\nmake html\n```\n\n----------------------------------------\n\nTITLE: Importing required libraries for VisPy molecular viewer\nDESCRIPTION: Imports necessary modules from VisPy and NumPy for creating the molecular viewer.\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_molecular_viewer.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nfrom vispy import gloo\nfrom vispy import app\nfrom vispy.util.transforms import perspective, translate, rotate\nfrom vispy.io import load_data_file\n```\n\n----------------------------------------\n\nTITLE: Running Flake8 for Python Code Style Check\nDESCRIPTION: Executes flake8 to check the code style of the entire VisPy Python package directory.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython make test flake\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports necessary NumPy, Vispy, and transformation utilities for creating an interactive OpenGL canvas\nSOURCE: https://github.com/vispy/vispy/blob/main/examples/jupyter/gloo_display_lines.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\\nimport vispy\\nimport vispy.gloo as gloo\\nfrom vispy import app\\nfrom vispy.util.transforms import perspective, translate, rotate\n```\n\n----------------------------------------\n\nTITLE: Installing Flake8 for Python Code Style Checking\nDESCRIPTION: Installs the flake8 utility for checking Python code style adherence to PEP 8 guidelines.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install flake8\n```\n\n----------------------------------------\n\nTITLE: Installing Vispy from Github using pip\nDESCRIPTION: This snippet shows the command to install Vispy directly from the Github repository using pip. It uses the `git+` prefix to specify the repository URL. This method installs Vispy without requiring a local clone of the repository.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/raspberry.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pip3 install git+https://github.com/vispy/vispy.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Exported Images for Gallery\nDESCRIPTION: Example comment indicating that the scraper should use image files created by the example instead of taking screenshots.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/writing_examples.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# vispy: gallery-exports animation.gif\n```\n\n----------------------------------------\n\nTITLE: Installing Vispy using pip\nDESCRIPTION: This snippet shows the command to install the latest release version of Vispy using pip3. It directly fetches the package from PyPI and installs it on the system. This assumes pip3 is correctly configured and available in the system's PATH.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/raspberry.rst#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip3 install --upgrade vispy\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Frames for Gallery\nDESCRIPTION: Example comment showing how to specify a range of frames to capture for creating an animation in the gallery.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/writing_examples.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# vispy: gallery 10:50:10\n```\n\n----------------------------------------\n\nTITLE: Defining VisPy Documentation Structure using reStructuredText\nDESCRIPTION: This reStructuredText snippet defines the structure of the VisPy documentation, including sections for installation, getting started, additional help, and API reference. It uses toctree directives to organize the documentation hierarchy.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n  :caption: Getting VisPy\n  :maxdepth: 1\n\n  installation\n\n.. toctree::\n  :caption: Learning VisPy\n  :maxdepth: 2\n\n  getting_started/index\n\n.. toctree::\n  :caption: Additional Help\n  :maxdepth: 2\n\n  Documentation <overview>\n\n.. toctree::\n  :hidden:\n\n  gallery/index\n  API <api/modules>\n  news\n  Code of Conduct <https://github.com/vispy/vispy/blob/main/CODE_OF_CONDUCT.md>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for vispy Project\nDESCRIPTION: A list of required Python packages for the vispy project, including Cython for performance optimization, sphinx_bootstrap_theme for documentation styling, and numpydoc for NumPy-style docstring parsing.\nSOURCE: https://github.com/vispy/vispy/blob/main/rtd_requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncython\nsphinx_bootstrap_theme\nnumpydoc\n```\n\n----------------------------------------\n\nTITLE: Command Line VisPy System Information Check\nDESCRIPTION: One-line command to print VisPy system information directly from the command line interface.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/_canvas_app.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -c \"import vispy; print(vispy.sys_info())\"\n```\n\n----------------------------------------\n\nTITLE: Vispy Dependencies Configuration\nDESCRIPTION: List of required Python packages and build dependencies for the Vispy project. Notable exclusions include jupyter and matplotlib (full) to avoid PyQt5 dependencies. Includes build tools (cmake, cython), testing frameworks (pytest), and scientific computing packages (numpy, scipy).\nSOURCE: https://github.com/vispy/vispy/blob/main/ci/requirements/linux_full_newqtdeps_conda.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncmake\ncython\ncoveralls\ndecorator\nfreetype-py\nimageio\n# Do NOT include jupyter as it depends on qtconsole which pulls in PyQt5\n# Do NOT depend on 'matplotlib' as it currently depends on PyQt5\nmatplotlib-base\nmeshio\nnetworkx\nnumpy\npillow\npytest\npytest-cov\npytest-sugar\npyopengl\nscikit-image\nscipy\nnetworkx\nhsluv\nkiwisolver\nsphinx-gallery\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Vispy Project in Plain Text\nDESCRIPTION: This snippet enumerates the required dependencies for the Vispy project. It includes libraries for scientific computing, visualization, testing, and various Python utilities. Some dependencies have specific version requirements or exclusions.\nSOURCE: https://github.com/vispy/vispy/blob/main/ci/requirements/linux_full_deps_conda.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmake\ncython\ncoveralls\ndecorator\nfreetype-py\nglfw!=3.3.1\nimageio\njupyter\nmatplotlib-base\nmeshio\nnetworkx\nnumpy\npillow\npyqt=5\npysdl2\npytest\npytest-cov\npytest-sugar\npyopengl!=3.1.7\nscikit-image\nscipy\nnetworkx\nhsluv\nkiwisolver\nsphinx-gallery\njupyter-rfb\n```\n\n----------------------------------------\n\nTITLE: Importing pyopengltk Module in Python\nDESCRIPTION: This snippet imports the pyopengltk module, which provides OpenGL functionality within a Tk GUI environment. It allows developers to create OpenGL-accelerated graphics applications using Python and Tk.\nSOURCE: https://github.com/vispy/vispy/blob/main/ci/requirements/linux_full_deps_pip.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npyopengltk\n```\n\n----------------------------------------\n\nTITLE: Installing VisPy Linux Dependencies\nDESCRIPTION: List of required Linux system packages that need to be installed for VisPy to function properly. Includes OpenGL, Mesa, X11, XCB, and related development libraries necessary for graphics rendering and window management.\nSOURCE: https://github.com/vispy/vispy/blob/main/ci/requirements/linux_full_newqtdeps_apt.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nlibglu1-mesa-dev\nlibgl1-mesa-dev\nlibxi-dev\nlibglfw3-dev\nlibgles2-mesa-dev\nlibsdl2-2.0-0\nmesa-utils\nlibxkbcommon-dev\nlibxkbcommon-x11-dev\nlibxcb1\nlibxcb1-dev\nlibxcb-randr0\nlibxcb-render-util0\nlibxcb-xinerama0\nlibxcb-icccm4-dev\nlibxcb-image0-dev\nlibxcb-keysyms1\nlibegl1\nx11-utils\n```\n\n----------------------------------------\n\nTITLE: Defining Steering Committee Members Table in Markdown\nDESCRIPTION: Creates a markdown table listing the Steering Committee members, their GitHub handles, and affiliated organizations. This table provides a clear overview of the current committee composition.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/org/STEERING-COMMITTEE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **NAME**        | **Handle**  | **Affiliated Organization** |\n|-----------------|-------------|-----------------------------|\n| David Hoese     | @djhoese    | N/A                         |\n| Almar Klein     | @almarklein | N/A                         |\n| Cyrille Rossant | @rossant    | N/A                         |\n| Nicolas Rougier | @rougier    | N/A                         |\n```\n\n----------------------------------------\n\nTITLE: Writing a Python Test Requiring Application\nDESCRIPTION: Demonstrates how to write a test function that requires a VisPy Application, using the requires_application decorator.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vispy.testing import requires_application\n\n@requires_application()\ndef test_my_change():\n    with app.Canvas() as c:\n        # do something with the Canvas 'c'\n```\n\n----------------------------------------\n\nTITLE: Defining RST Document Structure with Toctree\nDESCRIPTION: RST markup defining the document structure and hidden toctree with links to gallery subsections.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/gallery/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :hidden:\n\n  gloo/index\n  scene/index\n  plotting/index\n```\n\n----------------------------------------\n\nTITLE: Running Pytest for VisPy Module Testing\nDESCRIPTION: Executes pytest to run tests for a specific VisPy module.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest vispy/plot/tests/test_plot.py\n```\n\n----------------------------------------\n\nTITLE: RST Container Layout\nDESCRIPTION: RST container structure for creating a columned layout with centered icons and descriptive text.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/community.rst#2025-04-21_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. container:: row\n\n   .. container:: col-md-1 text-center\n\n      .. raw:: html\n\n         <i class=\"fa fa-comment fa-4x\"></i>\n\n\n   .. container:: col-md-4\n```\n\n----------------------------------------\n\nTITLE: Running VisPy Tests Without Backend\nDESCRIPTION: Executes VisPy tests without any backend selected.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython make test nobackend\n```\n\n----------------------------------------\n\nTITLE: Defining VisPy Documentation Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the VisPy documentation using Markdown and reStructuredText directives. It includes headings, descriptions, and table of contents for different user categories and interfaces.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGetting Started\n===============\n\nVisPy strives to provide an easy path for users to make fast interactive\nvisualizations. To serve as many users as possible VisPy provides different\ninterfaces for differing levels of experience. While one interface may be\nenough to build a simple visualization, knowing all the interfaces can provide\nthe most flexibility for fully customizing your visualization.\n\nThe below pages are meant to provide an introduction to these interfaces and\nhelp guide you into what interface might be best for your experience and the\nfinal visualization you are looking to achieve. Additionally, the\n:doc:`../gallery/index` can be used for inspiration. Further low-level details can\nbe found in the :doc:`API documentation <../api/modules>` and existing\nexamples.\n\nVisPy targets two primary categories of users:\n\n1. **Users knowing OpenGL**, or willing to learn OpenGL, who want to\n   create beautiful and fast interactive 2D/3D visualizations in Python\n   as easily as possible. Users in this category can write their own\n   visualizations with :mod:`vispy.gloo` (requires knowing OpenGL/GLSL).\n   Another option with VisPy development is to encapsulate gloo-based\n   visualizations into re-usable `Visual` classes. The below pages will\n   provide an introduction of these interfaces.\n\n.. toctree::\n  :maxdepth: 1\n\n  modern-gl\n  Gloo <gloo>\n  Visuals <visuals>\n\n2. **Scientists without any knowledge of OpenGL**, who are seeking a\n   high-level, high-performance plotting toolkit. Use the :mod:`vispy.plot`\n   and :mod:`vispy.scene` interfaces for high-level work. The below pages\n   provide an introduction into these interfaces.\n\n.. toctree::\n  :maxdepth: 1\n\n  Scene <scene>\n  Plotting <plot>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Carousel in HTML for VisPy Documentation\nDESCRIPTION: This HTML snippet creates an interactive carousel showcasing different VisPy visualizations. It includes navigation indicators, image slides with captions, and control buttons for previous and next slides.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"HomeCarousel\" class=\"carousel slide\" data-ride=\"carousel\">\n      <ol class=\"carousel-indicators\">\n        <li data-target=\"#HomeCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n        <li data-target=\"#HomeCarousel\" data-slide-to=\"1\" class=\"\"></li>\n        <li data-target=\"#HomeCarousel\" data-slide-to=\"2\" class=\"\"></li>\n        <li data-target=\"#HomeCarousel\" data-slide-to=\"3\" class=\"\"></li>\n      </ol>\n\n      <div class=\"carousel-inner\">\n\n        <div class=\"carousel-item active\">\n          <img src=\"_static/carousel/galaxy.png\" alt=\"Galaxy\" style=\"width:100%\">\n          <div class=\"container\">\n            <div class=\"carousel-caption\">\n\n              <h1>Spiral galaxy simulation</h1>\n              <p> Simulation of a spiral galaxy using the density wave theory.</p>\n              <p><a class=\"btn btn-primary\" href=\"gallery/index.html\" role=\"button\">Check it out</a></p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"carousel-item\">\n          <img src=\"_static/carousel/high-frequency.png\" alt=\"High-frequency signal\" style=\"width:100%\">\n          <div class=\"container\">\n            <div class=\"carousel-caption\">\n              <h1>High frequency signals</h1>\n              <p>GPU multisampled high-frequency signal</p>\n              <p><a class=\"btn btn-primary\" href=\"gallery/index.html\" role=\"button\">Browse gallery</a></p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"carousel-item\">\n          <img src=\"_static/carousel/mandelbrot.png\" alt=\"Mandelbrot\" style=\"width:100%\">\n          <div class=\"container\">\n            <div class=\"carousel-caption\">\n              <h1>Mandelbrot set</h1>\n              <p>GPU computed fractals</p>\n              <p><a class=\"btn btn-primary\" href=\"gallery/index.html\" role=\"button\">Show me more</a></p>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"carousel-item\">\n          <img src=\"_static/carousel/signals.png\" alt=\"Signals\" style=\"width:100%\">\n          <div class=\"container\">\n            <div class=\"carousel-caption\">\n              <h1>Realtime signals</h1>\n              <p>320 signals with 10 000 points each</p>\n              <p><a class=\"btn btn-primary\" href=\"gallery/index.html\" role=\"button\">Wow!</a></p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <a class=\"carousel-control-prev\" href=\"#HomeCarousel\" role=\"button\"\n         data-slide=\"prev\">\n         <span class=\"carousel-control-prev-icon glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n         <span class=\"sr-only\">Previous</span>\n         </a>\n\n      <a class=\"carousel-control-next\" href=\"#HomeCarousel\" role=\"button\"\n         data-slide=\"next\">\n         <span class=\"carousel-control-next-icon glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>\n         <span class=\"sr-only\">Next</span>\n         </a>\n\n    </div>\n    <br>\n```\n\n----------------------------------------\n\nTITLE: Configuring VisPy Scraper in sphinx-gallery\nDESCRIPTION: Code snippet showing how to configure the sphinx-gallery to use VisPy's image scraper in the conf.py file of a documentation project.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/writing_examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsphinx_gallery_conf = {\n    'image_scrapers': ('vispy',),\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Fork's Branch from master to main - Git\nDESCRIPTION: This code snippet provides commands to update a forked VisPy repository to reflect the change from 'master' to 'main' as the primary branch. It renames the local branch, fetches updates, sets the upstream branch, and adjusts the remote head.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -m master main\n    git fetch origin\n    git branch -u origin/main main\n    git remote set-head origin -a\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies for Vispy Project\nDESCRIPTION: This code snippet lists the required dependencies for the Vispy project. It includes libraries for scientific computing (cython, numpy), documentation generation (sphinx and related packages), testing (pytest), and graphical processing (pillow, pyopengl).\nSOURCE: https://github.com/vispy/vispy/blob/main/ci/requirements/linux_website_deps_pip.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncython\nnumpy\nnumpydoc\nsphinx\nsphinx_bootstrap_theme\nsphinx_gallery\nsphinxcontrib-apidoc\nmyst-parser\npydata-sphinx-theme!=0.10.*\npytest\npillow\npyopengl\n```\n\n----------------------------------------\n\nTITLE: Installing Flake8 with Docstring Checking\nDESCRIPTION: Installs flake8 with the flake8-docstrings plugin to check both code style and docstring style.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install flake8-docstrings\n```\n\n----------------------------------------\n\nTITLE: Specifying Frame Count for Gallery Screenshots\nDESCRIPTION: Example comment to specify how many times the Canvas should be drawn before a screenshot is taken for the gallery.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/writing_examples.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# vispy: gallery 30\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Sphinx Documentation\nDESCRIPTION: Opens the generated HTML documentation in Firefox browser.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/dev_guide/contributor_guide.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfirefox _build/html/index.html\n```\n\n----------------------------------------\n\nTITLE: RST Tree Structure Definition\nDESCRIPTION: Defines the document tree structure and hidden glob patterns for organization and governance documentation.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/community.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n  :hidden:\n  :glob:\n\n  org/*\n  governance/*\n```\n\n----------------------------------------\n\nTITLE: RST HTML Icon Embedding\nDESCRIPTION: Raw HTML snippet for embedding Font Awesome icons in the documentation layout.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/community.rst#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"fa fa-comment fa-4x\"></i>\n```\n\n----------------------------------------\n\nTITLE: Git Attributes Format Strings\nDESCRIPTION: Git format strings configuration that defines how various git metadata like commit hashes, dates, tags and references should be formatted when exported\nSOURCE: https://github.com/vispy/vispy/blob/main/.git_archival.txt#2025-04-21_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nnode: $Format:%H$\nnode-date: $Format:%cI$\ndescribe-name: $Format:%(describe:tags=true,match=*[0-9]*)$\nref-names: $Format:%D$\n```\n\n----------------------------------------\n\nTITLE: Including Canvas Application RST Documentation\nDESCRIPTION: RST include directive to import canvas application documentation content from an external file.\nSOURCE: https://github.com/vispy/vispy/blob/main/doc/getting_started/scene.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: _canvas_app.rst\n```"
  }
]