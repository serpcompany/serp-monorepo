[
  {
    "owner": "binance",
    "repo": "binance-connector-python",
    "content": "TITLE: Basic REST API Usage with Binance Spot Client\nDESCRIPTION: Examples of using the Spot client to interact with Binance REST API, including retrieving server time, klines data, and account information.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot\n\nclient = Spot()\n\n# Get server timestamp\nprint(client.time())\n# Get klines of BTCUSDT at 1m interval\nprint(client.klines(\"BTCUSDT\", \"1m\"))\n# Get last 10 klines of BNBUSDT at 1h interval\nprint(client.klines(\"BNBUSDT\", \"1h\", limit=10))\n\n# API key/secret are required for user data endpoints\nclient = Spot(api_key='<api_key>', api_secret='<api_secret>')\n\n# Get account and balance information\nprint(client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 9500\n}\n\nresponse = client.new_order(**params)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket API Client in Python\nDESCRIPTION: Demonstrates how to create a WebSocket API client connection to Binance. The example shows importing the client, setting up a message handler, configuring proxies, making a request, and properly closing the connection.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\nproxies = { 'http': 'http://1.2.3.4:8080' }\n\nmy_client = SpotWebsocketAPIClient(on_message=message_handler, proxies=proxies, timeout=10)\n\nmy_client.ticker(symbol=\"BNBBUSD\", type=\"FULL\")\n\ntime.sleep(5)\nlogging.info(\"closing ws connection\")\nmy_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Stream Client in Python\nDESCRIPTION: Shows how to set up a WebSocket Stream client for subscribing to real-time data streams from Binance. The example demonstrates client initialization, subscribing to an aggregated trade stream for a specific symbol, and proper connection handling.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.websocket.spot.websocket_stream import SpotWebsocketStreamClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\nproxies = { 'http': 'http://1.2.3.4:8080' }\n\nmy_client = SpotWebsocketStreamClient(on_message=message_handler, proxies=proxies, timeout=10)\n\n# Subscribe to a single symbol stream\nmy_client.agg_trade(symbol=\"bnbusdt\")\ntime.sleep(5)\nlogging.info(\"closing ws connection\")\nmy_client.stop()\n```\n\n----------------------------------------\n\nTITLE: WebSocket API Implementation Example\nDESCRIPTION: Demonstrates how to implement WebSocket API connections for real-time data streaming with custom message handling and connection management.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/getting_started.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClient\n\ndef on_close(_):\n    logging.info(\"Do custom stuff when connection is closed\")\n\ndef message_handler(message):\n    logging.info(message)\n\nws_client = SpotWebsocketAPIClient(on_message=message_handler, on_close=on_close)\n\nws_client.ticker(\n    symbol='bnbusdt',\n    type=\"FULL\",\n)\n\n# Combine selected streams\nws_client.ticker(\n    symbols=[\"BNBBUSD\", \"BTCUSDT\"],\n    type=\"MINI\",\n    windowSize=\"2h\",\n)\n\nws_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket Stream Client\nDESCRIPTION: Example of setting up a WebSocket Stream client to subscribe to Binance's WebSocket market data streams.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# WebSocket Stream Client\nfrom binance.websocket.spot.websocket_stream import SpotWebsocketStreamClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\nmy_client = SpotWebsocketStreamClient(on_message=message_handler)\n\n# Subscribe to a single symbol stream\nmy_client.agg_trade(symbol=\"bnbusdt\")\ntime.sleep(5)\nlogging.info(\"closing ws connection\")\nmy_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Accessing Binance Spot WebSocket API Methods in Python\nDESCRIPTION: This snippet demonstrates how to access various methods of the SpotWebsocketAPIClient class for interacting with the Binance Spot WebSocket API. These methods cover a wide range of functionalities including market data retrieval, account management, order placement and management, and user data stream operations.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.websocket_api.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClient\n\nclient = SpotWebsocketAPIClient()\n\n# Test connectivity\nclient.ping_connectivity()\n\n# Get server time\nclient.server_time()\n\n# Get exchange information\nclient.exchange_info()\n\n# Get order book\nclient.order_book()\n\n# Get historical trades\nclient.historical_trades()\n\n# Get aggregate trades\nclient.aggregate_trades()\n\n# Get klines data\nclient.klines()\n\n# Get UI klines\nclient.ui_klines()\n\n# Get average price\nclient.avg_price()\n\n# Get 24hr ticker\nclient.ticker_24hr()\n\n# Get rolling window ticker\nclient.ticker()\n\n# Get symbol price ticker\nclient.ticker_price()\n\n# Get order book ticker\nclient.ticker_book()\n\n# Get account information\nclient.account()\n\n# Get order rate limits\nclient.order_rate_limit()\n\n# Get order history\nclient.order_history()\n\n# Get OCO history\nclient.oco_history()\n\n# Get trade history\nclient.my_trades()\n\n# Get prevented matches\nclient.prevented_matches()\n\n# Place new order\nclient.new_order()\n\n# Test new order\nclient.new_order_test()\n\n# Get order details\nclient.get_order()\n\n# Cancel order\nclient.cancel_order()\n\n# Cancel and replace order\nclient.cancel_replace_order()\n\n# Get open orders\nclient.get_open_orders()\n\n# Cancel all open orders\nclient.cancel_open_orders()\n\n# Place new OCO order\nclient.new_oco_order()\n\n# Get OCO order\nclient.get_oco_order()\n\n# Cancel OCO order\nclient.cancel_oco_order()\n\n# Get all OCO orders\nclient.get_open_oco_orders()\n\n# Start user data stream\nclient.user_data_start()\n\n# Ping user data stream\nclient.user_data_ping()\n\n# Stop user data stream\nclient.user_data_stop()\n```\n\n----------------------------------------\n\nTITLE: Basic REST API Usage with Binance Spot Client\nDESCRIPTION: Demonstrates common REST API operations including server time retrieval, klines data fetching, account information, and order placement using the Spot client.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/getting_started.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot\n\nclient = Spot()\n# Get server timestamp\nprint(client.time())\n# Get klines of BTCUSDT at 1m interval\nprint(client.klines(\"BTCUSDT\", \"1m\"))\n# Get last 10 klines of BNBUSDT at 1h interval\nprint(client.klines(\"BNBUSDT\", \"1h\", limit=10))\n\n# api key/secret are required for user data endpoints\nclient = Spot(api_key='<api_key>', api_secret='<api_secret>')\n\n# Get account and balance information\nprint(client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 9500\n}\n\nresponse = client.new_order(**params)\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Stream Implementation Example\nDESCRIPTION: Shows how to implement WebSocket streams for real-time market data with custom message handling.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/getting_started.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom binance.websocket.spot.websocket_stream import SpotWebsocketStreamClient as Client\n\ndef message_handler(message):\n    logging.info(message)\n\nws_client = Client(on_message=message_handler)\n\nws_client.ticker(symbol=\"bnbusdt\")\n\nlogging.debug(\"closing ws connection\")\nws_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Managing Request IDs in WebSocket API Calls\nDESCRIPTION: Demonstrates how to use request IDs when making WebSocket API calls. Shows both client-provided and automatically generated request IDs, which help track and match responses to requests.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# id provided by client\nmy_client.ping_connectivity(id=\"my_request_id\")\n\n# library will generate a random uuid string\nmy_client.ping_connectivity()\n```\n\n----------------------------------------\n\nTITLE: Using WebSocket API Client\nDESCRIPTION: Example of setting up a WebSocket API client to interact with Binance's WebSocket API endpoints.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# WebSocket API Client\nfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\nmy_client = SpotWebsocketAPIClient(on_message=message_handler)\n\nmy_client.ticker(symbol=\"BNBBUSD\", type=\"FULL\")\n\ntime.sleep(5)\nlogging.info(\"closing ws connection\")\nmy_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Using Binance RESTful APIs with Python\nDESCRIPTION: Example demonstrating how to use the Binance Spot API to fetch time, account information, and place orders. This includes configuration of logging and handling API requests with authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/intro.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom binance.spot import Spot\nfrom binance.lib.utils import config_logging\n\nconfig_logging(logging, logging.DEBUG)\n\nclient = Spot()\nlogging.info(client.time())\n\nclient = Spot(api_key='<api_key>', api_secret='<api_secret>')\n\n# Get account information\nlogging.info(client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 9500\n}\n\nresponse = client.new_order(**params)\nlogging.info(response)\n```\n\n----------------------------------------\n\nTITLE: Using Binance Websocket API with Python\nDESCRIPTION: Example showing how to establish a Websocket connection to Binance API for streaming ticker data. Includes setup of message handlers, subscribing to single and multiple streams, and properly closing the connection.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/intro.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClient\n\ndef on_close(_):\n    logging.info(\"Do custom stuff when connection is closed\")\n\ndef message_handler(message):\n    print(message)\n\nws_client = SpotWebsocketAPIClient(on_message=message_handler, on_close=on_close)\n\nws_client.ticker(\n    symbol='bnbusdt',\n    type=\"FULL\",\n)\n\n# Combine selected streams\nws_client.ticker(\n    symbols=[\"BNBBUSD\", \"BTCUSDT\"],\n    type=\"MINI\",\n    windowSize=\"2h\",\n)\n\nws_client.stop()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Binance Testnet with WebSocket Client\nDESCRIPTION: Demonstrates how to initialize a WebSocket client that connects to Binance's testnet environment instead of the production environment. This is useful for testing implementations without using real funds.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClient\n\nws_client = WebsocketClient(stream_url='wss://stream.testnet.binance.vision')\n```\n\n----------------------------------------\n\nTITLE: Authentication Methods with Binance Client\nDESCRIPTION: Examples of different authentication methods supported by Binance, including HMAC, RSA, and ED25519 API authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# HMAC: pass API key and secret\nclient = Client(api_key, api_secret)\nprint(client.account())\n\n# RSA Keys\nclient = Client(api_key=api_key, private_key=private_key)\nprint(client.account())\n\n# ED25519 Keys\napi_key = \"\"\nprivate_key = \"./private_key.pem\"\nprivate_key_pass = \"<password_if_applicable>\"\n\nwith open(private_key, 'rb') as f:\n    private_key = f.read()\n\nspot_client = Client(api_key=api_key, private_key=private_key, private_key_pass=private_key_pass)\n\n# Encrypted RSA Key\nclient = Client(api_key=api_key, private_key=private_key, private_key_pass='password')\nprint(client.account())\n```\n\n----------------------------------------\n\nTITLE: Accessing Binance Spot API Wallet Endpoints in Python\nDESCRIPTION: This snippet demonstrates how to access various wallet-related endpoints using the Binance Spot API Python connector. It includes functions for system status, account information, deposits, withdrawals, and other wallet operations.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.wallet.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom binance.spot import Spot\n\n# Initialize Spot client\nspot_client = Spot()\n\n# Example usage of wallet endpoints\nsystem_status = spot_client.system_status()\ncoin_info = spot_client.coin_info()\naccount_snapshot = spot_client.account_snapshot()\nwithdraw_history = spot_client.withdraw_history()\ndeposit_address = spot_client.deposit_address()\nuser_asset = spot_client.user_asset()\nbalance = spot_client.balance()\n```\n\n----------------------------------------\n\nTITLE: Setting Time Unit for WebSocket Clients\nDESCRIPTION: Examples of setting the time unit parameter for WebSocket API and Stream clients to control timestamp format.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# WebSocket API Client\nimport logging\nfrom binance.websocket.spot.websocket_api import SpotWebsocketAPIClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\n\nmy_client = SpotWebsocketAPIClient(on_message=message_handler, time_unit='microsecond')\n```\n\nLANGUAGE: python\nCODE:\n```\n# WebSocket Stream Client\nimport logging\nfrom binance.websocket.spot.websocket_stream import SpotWebsocketStreamClient\n\ndef message_handler(_, message):\n    logging.info(message)\n\nmy_client = SpotWebsocketStreamClient(on_message=message_handler, time_unit=\"microsecond\")\n```\n\n----------------------------------------\n\nTITLE: Connecting to Binance Testnet\nDESCRIPTION: Example of connecting to the Binance Testnet environment for testing API endpoints without affecting real accounts.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nclient = Client(base_url='https://testnet.binance.vision')\nprint(client.time())\n```\n\n----------------------------------------\n\nTITLE: Accessing Binance Spot Market Endpoints in Python\nDESCRIPTION: This snippet demonstrates how to access various market-related endpoints using the Binance Spot API in Python. It includes methods for checking connectivity, server time, exchange information, orderbook data, trade history, candlestick data, ticker information, and more.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.market.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom binance.spot import Spot\n\nclient = Spot()\n\n# Test connectivity\nclient.ping()\n\n# Check server time\nclient.time()\n\n# Get exchange information\nclient.exchange_info()\n\n# Get orderbook\nclient.depth()\n\n# Get recent trades\nclient.trades()\n\n# Get historical trades\nclient.historical_trades()\n\n# Get aggregate trades\nclient.agg_trades()\n\n# Get kline/candlestick data\nclient.klines()\n\n# Get UI klines\nclient.ui_klines()\n\n# Get current average price\nclient.avg_price()\n\n# Get 24hr ticker price change statistics\nclient.ticker_24hr()\n\n# Get trading day ticker\nclient.trading_day_ticker()\n\n# Get symbol price ticker\nclient.ticker_price()\n\n# Get symbol order book ticker\nclient.book_ticker()\n\n# Get rolling window price change statistics\nclient.rolling_window_ticker()\n```\n\n----------------------------------------\n\nTITLE: Auto Invest API Endpoint Documentation\nDESCRIPTION: Collection of Python function documentation for Binance Auto Invest API endpoints. Includes endpoints for asset management, plan operations, transaction handling, and index-related functionalities. All endpoints require appropriate API authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.auto_invest.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.get_target_asset_list # Get target asset list (USER_DATA)\n\nbinance.spot.Spot.get_target_asset_roi_data # Get target asset ROI data (USER_DATA)\n\nbinance.spot.Spot.query_all_source_asset_and_target_asset # Query all source asset and target asset (USER_DATA)\n\nbinance.spot.Spot.query_source_asset_list # Query source asset list (USER_DATA)\n\nbinance.spot.Spot.change_plan_status # Change Plan Status (TRADE)\n\nbinance.spot.Spot.get_list_of_plans # Get list of plans (USER_DATA)\n\nbinance.spot.Spot.query_holding_details_of_the_plan # Query holding details of the plan (USER_DATA)\n\nbinance.spot.Spot.query_subscription_transaction_history # Query subscription transaction history (USER_DATA)\n\nbinance.spot.Spot.query_index_details # Query Index Details (USER_DATA)\n\nbinance.spot.Spot.query_index_linked_plan_position_details # Query Index Linked Plan Position Details (USER_DATA)\n\nbinance.spot.Spot.one_time_transaction # One Time Transaction (TRADE)\n\nbinance.spot.Spot.query_one_time_transaction_status # Query One-Time Transaction Status (USER_DATA)\n\nbinance.spot.Spot.index_linked_plan_redemption # Index Linked Plan Redemption (TRADE)\n\nbinance.spot.Spot.get_index_linked_plan_redemption_history # Index Linked Plan Redemption (USER_DATA)\n\nbinance.spot.Spot.index_linked_plan_rebalance_details # Index Linked Plan Rebalance Details (USER_DATA)\n```\n\n----------------------------------------\n\nTITLE: Accessing Binance Sub-Account API Endpoints in Python\nDESCRIPTION: This documentation outlines the available methods for interacting with Binance sub-account API endpoints using the Python connector. Each method corresponds to a specific API endpoint and is accessed through the binance.spot.Spot class.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.sub_account.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom binance.spot import Spot\n\n# Example usage (not shown in the original content)\nclient = Spot()\n\n# Methods available:\n# client.sub_account_create()\n# client.sub_account_list()\n# client.sub_account_assets()\n# ... (other methods as listed in the documentation)\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Connector Package with pip\nDESCRIPTION: Command to install the Binance Connector Python package using pip package manager.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/getting_started.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install binance-connector\n```\n\n----------------------------------------\n\nTITLE: Defining Spot API Documentation Structure in reStructuredText\nDESCRIPTION: A reStructuredText table of contents that organizes all the Spot API modules available in the Binance Python Connector. This directive creates a hierarchical documentation structure with a maximum depth of 2 levels.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   binance.spot.auto_invest\n   binance.spot.c2c\n   binance.spot.convert\n   binance.spot.data_stream\n   binance.spot.fiat\n   binance.spot.gift_card\n   binance.spot.crypto_loan\n   binance.spot.margin\n   binance.spot.market\n   binance.spot.mining\n   binance.spot.nft\n   binance.spot.pay\n   binance.spot.portfolio_margin\n   binance.spot.rebate\n   binance.spot.staking\n   binance.spot.sub_account\n   binance.spot.trade\n   binance.spot.wallet\n   binance.spot.simple_earn\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Connector v1/v2 WebSocket Client\nDESCRIPTION: Shows how to implement the legacy Connector v1/v2 WebSocket client approach. The example demonstrates initializing the client, subscribing to individual streams, combining multiple streams, and proper connection cleanup.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.websocket.spot.websocket_client import SpotWebsocketClient as WebsocketClient\n\ndef message_handler(message):\n    print(message)\n\nws_client = WebsocketClient()\nws_client.start()\n\nws_client.mini_ticker(\n    symbol='bnbusdt',\n    id=1,\n    callback=message_handler,\n)\n\n# Combine selected streams\nws_client.instant_subscribe(\n    stream=['bnbusdt@bookTicker', 'ethusdt@bookTicker'],\n    callback=message_handler,\n)\n\nws_client.stop()\n```\n\n----------------------------------------\n\nTITLE: ETH Staking API Function References\nDESCRIPTION: Comprehensive list of Python function references for Binance's ETH staking operations including account queries, staking management, rewards tracking, and WBETH operations. All functions are accessed through the binance.spot.Spot class.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.staking.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.eth_staking_account\nbinance.spot.Spot.get_eth_staking_quota\nbinance.spot.Spot.subscribe_eth_staking\nbinance.spot.Spot.redeem_eth\nbinance.spot.Spot.wrap_beth\nbinance.spot.Spot.get_eth_staking_history\nbinance.spot.Spot.get_eth_redemption_history\nbinance.spot.Spot.get_beth_rewards_distribution_history\nbinance.spot.Spot.get_wbeth_rewards_history\nbinance.spot.Spot.get_wbeth_rate_history\nbinance.spot.Spot.get_wbeth_wrap_history\nbinance.spot.Spot.get_wbeth_unwrap_history\n```\n\n----------------------------------------\n\nTITLE: Displaying API Rate Limit Usage\nDESCRIPTION: Example of showing rate limit usage information from Binance API responses to monitor usage limits.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nclient = Client(show_limit_usage=True)\nprint(client.time())\n```\n\n----------------------------------------\n\nTITLE: Placing Orders with Strategy Parameters in Python\nDESCRIPTION: Updated order endpoints to support new optional strategy fields for identifying orders as part of trading strategies.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nPOST /api/v3/order\nPOST /api/v3/order/cancelReplace\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy\nDESCRIPTION: Example of setting up an HTTP proxy for API requests to route traffic through a specific server.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nproxies = { 'https': 'http://1.2.3.4:8080' }\n\nclient= Client(proxies=proxies)\n```\n\n----------------------------------------\n\nTITLE: Setting Time Unit for Timestamps\nDESCRIPTION: Example of setting the time unit parameter to retrieve data with timestamps in microseconds or milliseconds.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nclient = Client(time_unit=\"microsecond\")\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example for API Keys\nDESCRIPTION: Example of a configuration file to store API keys for use with the examples provided in the repository.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# examples/config.ini\n[keys]\napi_key=abc123456\napi_secret=cba654321\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout\nDESCRIPTION: Example of setting a timeout for API requests to control how long to wait for server responses.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nclient= Client(timeout=1)\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Connector Python from GitHub\nDESCRIPTION: Alternative installation method using git repository path. This approach is useful when you need the latest unreleased version.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/intro.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install git+https://github.com/binance/binance-connector-python.git\n```\n\n----------------------------------------\n\nTITLE: Using RecvWindow Parameter\nDESCRIPTION: Example of using the recvWindow parameter for endpoints requiring signatures to specify the window of time a request is valid.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nclient = Client(api_key, api_secret)\nresponse = client.get_order('BTCUSDT', orderId=11, recvWindow=10000)\n```\n\n----------------------------------------\n\nTITLE: Displaying Full Response Headers\nDESCRIPTION: Example of displaying full response headers for debugging API interactions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclient = Client(show_header=True)\nprint(client.time())\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Binance API\nDESCRIPTION: Shows how to configure the base URL for the Binance API client, which can be useful for using alternative API endpoints or connecting to testnet.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/getting_started.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.spot import Spot as Client\n\nclient = Client(base_url='https://api.binance.com')\n```\n\n----------------------------------------\n\nTITLE: Acquiring Mining Algorithm List (Python)\nDESCRIPTION: Retrieves the list of mining algorithms. This endpoint provides market data and does not require authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_algo_list\n```\n\n----------------------------------------\n\nTITLE: Accessing Portfolio Margin Account Information in Python\nDESCRIPTION: Retrieves portfolio margin account information for a user. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.portfolio_margin_account\n```\n\n----------------------------------------\n\nTITLE: Fetching Portfolio Margin Collateral Rate in Python\nDESCRIPTION: Retrieves the portfolio margin collateral rate. This function is part of the Binance spot API and requires MARKET_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.portfolio_margin_collateral_rate\n```\n\n----------------------------------------\n\nTITLE: Querying Portfolio Margin Bankruptcy Loan Amount in Python\nDESCRIPTION: Retrieves the portfolio margin bankruptcy loan amount for a user. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.portfolio_margin_bankruptcy_loan_amount\n```\n\n----------------------------------------\n\nTITLE: Retrieving NFT Deposit History - Binance Python\nDESCRIPTION: Function reference for retrieving NFT deposit history for the authenticated user. Returns deposit data with USER_DATA permission level.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.nft.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.nft_deposit_history\n```\n\n----------------------------------------\n\nTITLE: Fetching Portfolio Margin Pro SPAN Account Information in Python\nDESCRIPTION: Retrieves SPAN account information for portfolio margin pro accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.get_portfolio_margin_span_account_info\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mining Revenue List (Python)\nDESCRIPTION: Retrieves a list of mining revenue entries for the user. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_earnings_list\n```\n\n----------------------------------------\n\nTITLE: Querying Portfolio Margin Asset Index Price in Python\nDESCRIPTION: Retrieves the index price for portfolio margin assets. This function is part of the Binance spot API and requires MARKET_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.query_portfolio_margin_asset_index_price\n```\n\n----------------------------------------\n\nTITLE: Redeeming Binance Gift Code in Python\nDESCRIPTION: Redeems a Binance gift code using the Spot API. This endpoint requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.gift_card.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.gift_card_redeem_code\n```\n\n----------------------------------------\n\nTITLE: Performing BNB Transfer in Python\nDESCRIPTION: Initiates a BNB transfer for portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.bnb_transfer\n```\n\n----------------------------------------\n\nTITLE: Fetching NFT Withdraw History - Binance Python\nDESCRIPTION: Function reference for retrieving NFT withdrawal history for the authenticated user. Returns withdrawal data with USER_DATA permission level.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.nft.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.nft_withdraw_history\n```\n\n----------------------------------------\n\nTITLE: Retrieving Portfolio Margin Pro Account Balance in Python\nDESCRIPTION: Fetches the account balance for portfolio margin pro accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.get_portfolio_margin_account_balance\n```\n\n----------------------------------------\n\nTITLE: Changing Auto-repay-futures Status in Python\nDESCRIPTION: Modifies the auto-repay status for futures in portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.change_auto_repay_futures_status\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fiat Payment History in Binance Python API\nDESCRIPTION: Endpoint for accessing historical fiat payment records from Binance. Requires USER_DATA authentication level.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.fiat.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.fiat_payment_history\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auto-repay-futures Status in Python\nDESCRIPTION: Fetches the current auto-repay status for futures in portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.get_auto_repay_futures_status\n```\n\n----------------------------------------\n\nTITLE: Retrieving Miner List (Python)\nDESCRIPTION: Requests a list of miners associated with the user's account. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_worker_list\n```\n\n----------------------------------------\n\nTITLE: Repaying Futures Negative Balance in Python\nDESCRIPTION: Initiates a repayment for negative balance in futures for portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.repay_futures_negative_balance\n```\n\n----------------------------------------\n\nTITLE: Querying UI Klines in Python\nDESCRIPTION: New endpoint added for Market to get UI klines data. Supports a new 1 second kline interval.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nGET /api/v3/uiKlines\n```\n\n----------------------------------------\n\nTITLE: Collecting Funds by Asset in Python\nDESCRIPTION: Triggers a fund collection for specific assets in portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.fund_collection_by_asset\n```\n\n----------------------------------------\n\nTITLE: Retrieving Portfolio Margin Pro Tiered Collateral Rate in Python\nDESCRIPTION: Fetches the portfolio margin pro tiered collateral rate for a user. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.portfolio_margin_tiered_collateral_rate\n```\n\n----------------------------------------\n\nTITLE: Getting NFT Asset Information - Binance Python\nDESCRIPTION: Function reference for retrieving NFT asset information for the authenticated user. Returns asset data with USER_DATA permission level.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.nft.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.nft_asset\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mining Statistics List (Python)\nDESCRIPTION: Retrieves a list of mining statistics for the user. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_statistics_list\n```\n\n----------------------------------------\n\nTITLE: Accessing NFT Transaction History - Binance Python\nDESCRIPTION: Function reference for retrieving NFT transaction history for the authenticated user. Returns transaction data with USER_DATA permission level.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.nft.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.nft_transaction_history\n```\n\n----------------------------------------\n\nTITLE: Running Test Cases for Binance Connector Python\nDESCRIPTION: Shows how to install test dependencies and run the test suite for the Binance Connector Python library. This is useful for verifying that the library functions correctly in your environment.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# In case packages are not installed yet\npip install -r requirements/requirements-test.txt\n\npython -m pytest tests/\n```\n\n----------------------------------------\n\nTITLE: Verifying Binance Gift Code in Python\nDESCRIPTION: Verifies a Binance gift code using the Spot API. This endpoint requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.gift_card.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.gift_card_verify_code\n```\n\n----------------------------------------\n\nTITLE: Initiating Fund Auto-collection in Python\nDESCRIPTION: Triggers an automatic collection of funds for portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.fund_auto_collection\n```\n\n----------------------------------------\n\nTITLE: Creating Binance Gift Code in Python\nDESCRIPTION: Creates a Binance gift code using the Spot API. This endpoint requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.gift_card.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.gift_card_create_code\n```\n\n----------------------------------------\n\nTITLE: Creating Dual-Token Gift Card in Python\nDESCRIPTION: Creates a dual-token gift card using the Binance Spot API. This endpoint requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.gift_card.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.gift_card_buy_code\n```\n\n----------------------------------------\n\nTITLE: Fetching Binance Gift Card RSA Public Key in Python\nDESCRIPTION: Retrieves the RSA public key for Binance gift cards using the Spot API. This endpoint requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.gift_card.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.gift_card_rsa_public_key\n```\n\n----------------------------------------\n\nTITLE: Retrieving C2C Trade History with Binance Connector Python\nDESCRIPTION: This function retrieves the C2C trade history for a user. It requires USER_DATA permissions and is part of the Binance Spot API. The function is likely to accept parameters for filtering and pagination of the trade history.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.c2c.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autofunction:: binance.spot.Spot.c2c_trade_history\n```\n\n----------------------------------------\n\nTITLE: Acquiring Mining Coin List (Python)\nDESCRIPTION: Retrieves the list of mineable coins. This endpoint provides market data and does not require authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_coin_list\n```\n\n----------------------------------------\n\nTITLE: Repaying Portfolio Margin Bankruptcy Loan in Python\nDESCRIPTION: Initiates a repayment for a portfolio margin bankruptcy loan. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.portfolio_margin_bankruptcy_loan_repay\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mining Account List (Python)\nDESCRIPTION: Retrieves a list of mining accounts associated with the user. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_account_list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extra Bonus List (Python)\nDESCRIPTION: Retrieves a list of extra bonuses for the user's mining activities. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_bonus_list\n```\n\n----------------------------------------\n\nTITLE: Submitting Hashrate Resale Request (Python)\nDESCRIPTION: Submits a request for hashrate resale. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_hashrate_resale_request\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Miner Information (Python)\nDESCRIPTION: Requests detailed information about a specific miner. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_worker\n```\n\n----------------------------------------\n\nTITLE: Cancelling Hashrate Resale Configuration (Python)\nDESCRIPTION: Cancels a previously submitted hashrate resale configuration. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_hashrate_resale_cancellation\n```\n\n----------------------------------------\n\nTITLE: Fetching Ticker Data with Type Parameter in Python\nDESCRIPTION: Updated endpoint for getting ticker data, allowing specification of FULL or MINI response type. MINI omits certain fields from the response.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nGET /api/v3/ticker?type=FULL\nGET /api/v3/ticker?type=MINI\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hashrate Resale List (Python)\nDESCRIPTION: Retrieves a list of hashrate resale entries. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_hashrate_resale_list\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Limit for Gift Cards in Python\nDESCRIPTION: Retrieves the token limit for Binance gift cards using the Spot API. This endpoint requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.gift_card.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.gift_card_token_limit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Hashrate Resale Details (Python)\nDESCRIPTION: Retrieves detailed information about a specific hashrate resale entry. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_hashrate_resale_details\n```\n\n----------------------------------------\n\nTITLE: Querying Gift Card Endpoints in Python\nDESCRIPTION: New endpoints added for Gift Card (Binance Code) operations including creating, redeeming, and verifying Binance Codes.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n\"POST /sapi/v1/giftcard/createCode\" # to create a Binance Code\n\"POST /sapi/v1/giftcard/redeemCode\" # to redeem a Binance Code\n\"GET /sapi/v1/giftcard/verify\" # to verify a Binance Code\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mining Account Earnings (Python)\nDESCRIPTION: Retrieves earnings information for a mining account. This endpoint requires user authentication.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.mining.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.mining_account_earning\n```\n\n----------------------------------------\n\nTITLE: Querying Wallet Dust Conversion Endpoint in Python\nDESCRIPTION: New endpoint added for Wallet to get assets that can be converted into BNB.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"POST /sapi/v1/asset/dust-btc\" # to get assets that can be converted into BNB\n```\n\n----------------------------------------\n\nTITLE: Accessing Fiat Order History in Binance Python API\nDESCRIPTION: Endpoint for retrieving historical fiat orders from Binance. Requires USER_DATA authentication level.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.fiat.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.fiat_order_history\n```\n\n----------------------------------------\n\nTITLE: Querying Classic Portfolio Margin Negative Balance Interest History in Python\nDESCRIPTION: Retrieves the history of negative balance interest for classic portfolio margin accounts. This function is part of the Binance spot API and requires USER_DATA permissions.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.portfolio_margin.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nbinance.spot.Spot.query_classic_portfolio_margin_negative_balance_interest_history\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pay Trade History in Binance API using Python\nDESCRIPTION: This method allows users to retrieve their payment transaction history from Binance Pay. It requires user authentication (USER_DATA) to access the payment records.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.pay.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.pay_history\n```\n\n----------------------------------------\n\nTITLE: Querying Mining Account Earnings in Python\nDESCRIPTION: New endpoint added for Mining to get Mining account earning information.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"GET /sapi/v1/mining/payment/uid\" # to get Mining account earning\n```\n\n----------------------------------------\n\nTITLE: Accessing Spot Rebate History Records through Binance Python Connector\nDESCRIPTION: This function allows users to retrieve their Spot Rebate History Records with USER_DATA permissions. It references the autofunction documentation from the binance.spot.Spot.rebate_spot_history endpoint.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/binance.spot.rebate.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbinance.spot.Spot.rebate_spot_history\n```\n\n----------------------------------------\n\nTITLE: Querying BSwap Rewards and History in Python\nDESCRIPTION: New endpoints added for BSwap to get unclaimed rewards, claim rewards, and view claimed rewards history.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"GET /sapi/v1/bswap/unclaimedRewards\" # to get unclaimed rewards record\n\"POST /sapi/v1/bswap/claimRewards\" # to claim swap rewards or liquidity rewards\n\"GET /sapi/v1/bswap/claimedHistory\" # to get history of claimed rewards\n```\n\n----------------------------------------\n\nTITLE: Listing Simple Earn API Endpoints\nDESCRIPTION: Lists the available Simple Earn API endpoints for flexible and locked products, including positions, account info, subscription records, redemption records, rewards records, auto-subscribe settings, quota info, subscription previews, rate history, and collateral records.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n* ``GET /sapi/v1/simple-earn/locked/position``\n* ``GET /sapi/v1/simple-earn/account``\n* ``GET /sapi/v1/simple-earn/flexible/history/subscriptionRecord``\n* ``GET /sapi/v1/simple-earn/locked/history/subscriptionRecord``\n* ``GET /sapi/v1/simple-earn/flexible/history/redemptionRecord``\n* ``GET /sapi/v1/simple-earn/locked/history/redemptionRecord``\n* ``GET /sapi/v1/simple-earn/flexible/history/rewardsRecord``\n* ``GET /sapi/v1/simple-earn/locked/history/rewardsRecord``\n* ``POST /sapi/v1/simple-earn/flexible/setAutoSubscribe``\n* ``POST /sapi/v1/simple-earn/locked/setAutoSubscribe``\n* ``GET /sapi/v1/simple-earn/flexible/personalLeftQuota``\n* ``GET /sapi/v1/simple-earn/locked/personalLeftQuota``\n* ``GET /sapi/v1/simple-earn/flexible/subscriptionPreview``\n* ``GET /sapi/v1/simple-earn/locked/subscriptionPreview``\n* ``GET /sapi/v1/simple-earn/flexible/history/rateHistory``\n* ``GET /sapi/v1/simple-earn/flexible/history/collateralRecord``\n```\n\n----------------------------------------\n\nTITLE: Querying Portfolio Margin Data in Python\nDESCRIPTION: New endpoints added for Portfolio Margin to get bankruptcy loan records, repay loans, and get collateral rates.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nGET /sapi/v1/portfolio/pmLoan\nPOST /sapi/v1/portfolio/repay\nGET /sapi/v1/portfolio/collateralRate\n```\n\n----------------------------------------\n\nTITLE: Noting Changes to Existing Modules\nDESCRIPTION: Notes changes made to existing modules, including renaming the Loan module to Crypto Loan and updating dependencies.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n* Change ``Loan`` module name to ``Crypto Loan``\n* Pump dependencies\n```\n\n----------------------------------------\n\nTITLE: Fetching User Assets in Python\nDESCRIPTION: New endpoint added for Margin to get user assets.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nPOST /sapi/v3/asset/getUserAsset\n```\n\n----------------------------------------\n\nTITLE: Including Common Dependencies in Python Requirements\nDESCRIPTION: A requirements.txt file directive that includes dependencies from a common.txt file, indicating shared dependencies across the project\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/requirements/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-r common.txt\n```\n\n----------------------------------------\n\nTITLE: Querying Margin Account Dribblet in Python\nDESCRIPTION: New endpoint for Wallet to get historical information of user's margin account small-value asset conversion to BNB.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nGET /sapi/v1/margin/dribblet\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Binance Python Connector\nDESCRIPTION: Requirements file specifying test, linting, documentation, and build dependencies for the Binance Connector Python project. It includes pytest and related plugins for testing, linting tools like black and flake8, Sphinx for documentation, and tools like tox and wheel for building and packaging.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/requirements/requirements-test.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r common.txt\npytest-cov>=2.8.1\npytest>=6.2.5\nsure>=2.0.0\nresponses>=0.10.12\npytest-pep8>=1.0.6\nblack\nflake8\nsphinx\nsphinx_rtd_theme\ntox\ntox-pyenv\nwheel\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure for Binance Connector Python\nDESCRIPTION: This reStructuredText snippet sets up the structure for the Sphinx-generated documentation of the Binance Connector Python library. It includes directives for the table of contents, external file inclusion, and index generation.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. binance-connector documentation master file, created by\n   sphinx-quickstart on Thu Jun  3 10:37:38 2021.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\n.. include:: intro.rst\n\nContents\n=========\n.. toctree::\n   :maxdepth: 3\n\n   CHANGELOG\n   getting_started\n   binance.spot\n   binance.websocket_stream.spot\n   binance.websocket_api\n\nIndices and tables\n==================\n\n* :ref:`genindex`\n* :ref:`modindex`\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Binance Python Connector\nDESCRIPTION: This requirements file lists the three core dependencies for the Binance Python connector library: requests for HTTP requests, websocket-client for WebSocket connections, and pycryptodome for cryptographic operations. Each dependency specifies a minimum version requirement.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/requirements/common.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests>=2.31.0\nwebsocket-client>=1.6.3\npycryptodome>=3.15.0\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository with Upstream Changes\nDESCRIPTION: Commands to fetch and merge the latest changes from the upstream repository's release candidate branch.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <latest_rc_branch>\ngit pull upstream <latest_rc_branch>\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository Fork for Binance Connector Python\nDESCRIPTION: Commands to clone the forked repository, navigate to the project directory, and set up the upstream remote.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork of the repo into the current directory\ngit clone https://github.com/<your-username>/binance-connector-python.git\n# Navigate to the newly cloned directory\ncd binance-connector-python\n# Assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/binance/binance-connector-python.git\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes into Feature Branch\nDESCRIPTION: Command to merge or rebase the latest upstream changes into the local feature branch.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit pull [--rebase] upstream <latest_rc_branch>\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch for Development\nDESCRIPTION: Command to create and switch to a new topic branch for feature development.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Fork\nDESCRIPTION: Command to push the local feature branch to the forked repository.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Connector Python via pip\nDESCRIPTION: Command for installing the Binance API connector from PyPI using pip. This is the recommended installation method for most users.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/intro.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install binance-connector\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Binance Connector\nDESCRIPTION: This snippet lists the required Python packages for the Binance Connector project. It includes references to test requirements, pre-commit hooks, Sphinx for documentation, and configparser for configuration management.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/requirements/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-r requirements-test.txt\npre-commit\nsphinx\nsphinx_rtd_theme\nconfigparser>=5.3.0\n```\n\n----------------------------------------\n\nTITLE: Listing Deleted API Endpoints\nDESCRIPTION: Lists API endpoints that have been removed, including endpoints for lending, futures loans, and related operations.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/docs/source/CHANGELOG.rst#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n* ``GET /sapi/v1/lending/daily/product/list``\n* ``GET /sapi/v1/lending/daily/userLeftQuota``\n* ``POST /sapi/v1/lending/daily/purchase``\n* ``GET /sapi/v1/lending/daily/userRedemptionQuota``\n* ``POST /sapi/v1/lending/daily/redeem``\n* ``GET /sapi/v1/lending/daily/token/position``\n* ``GET /sapi/v1/lending/union/account``\n* ``GET /sapi/v1/lending/union/purchaseRecord``\n* ``GET /sapi/v1/lending/union/redemptionRecord``\n* ``GET /sapi/v1/lending/union/interestHistory``\n* ``GET /sapi/v1/lending/project/list``\n* ``POST /sapi/v1/lending/customizedFixed/purchase``\n* ``GET /sapi/v1/lending/project/position/list``\n* ``POST /sapi/v1/lending/positionChanged``\n* ``GET /sapi/v1/futures/loan/borrow/history``\n* ``GET /sapi/v1/futures/loan/repay/history``\n* ``GET /sapi/v2/futures/loan/wallet``\n* ``GET /sapi/v1/futures/loan/adjustCollateral/history``\n* ``GET /sapi/v1/futures/loan/liquidationHistory``\n* ``GET /sapi/v1/futures/loan/interestHistory``\n```\n\n----------------------------------------\n\nTITLE: Installing Binance Connector with pip\nDESCRIPTION: Command to install the Binance connector Python package using pip package manager.\nSOURCE: https://github.com/binance/binance-connector-python/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install binance-connector\n```"
  }
]