[
  {
    "owner": "textualize",
    "repo": "rich",
    "content": "TITLE: Rich Print Example\nDESCRIPTION: This snippet demonstrates the use of the Rich print function with console markup for styling text and automatically formatting Python objects. It shows how to print colored and styled text, along with a formatted representation of local variables.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\">>> print(\"[italic red]Hello[/italic red] World!\", locals())\"\n```\n\n----------------------------------------\n\nTITLE: Importing Rich Print as rprint\nDESCRIPTION: This snippet shows how to import the Rich print function as 'rprint' to avoid shadowing the built-in Python print function. It provides an alternative way to use Rich's printing capabilities without overriding the standard print.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n\"from rich import print as rprint\"\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print Function with Markup\nDESCRIPTION: Example of importing and using Rich's print function that extends Python's built-in print with markup support for styling text with colors and formatting.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Printing with Rich Console in Python\nDESCRIPTION: Demonstrates various ways to use the Console.print() method for outputting rich content to the terminal. This includes printing lists, styled text, and local variables.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nconsole.print([1, 2, 3])\nconsole.print(\"[blue underline]Looks like a link\")\nconsole.print(locals())\nconsole.print(\"FOO\", style=\"white on blue\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Printing a Table using Rich in Python\nDESCRIPTION: This snippet demonstrates how to create a table with the Rich library, add columns and rows, and print it to the terminal. The example creates a table for Star Wars movies, including release dates and box office figures.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tables.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Table\n\ntable = Table(title=\"Star Wars Movies\")\n\ntable.add_column(\"Released\", justify=\"right\", style=\"cyan\", no_wrap=True)\ntable.add_column(\"Title\", style=\"magenta\")\ntable.add_column(\"Box Office\", justify=\"right\", style=\"green\")\n\ntable.add_row(\"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$952,110,690\")\ntable.add_row(\"May 25, 2018\", \"Solo: A Star Wars Story\", \"$393,151,347\")\ntable.add_row(\"Dec 15, 2017\", \"Star Wars Ep. V111: The Last Jedi\", \"$1,332,539,889\")\ntable.add_row(\"Dec 16, 2016\", \"Rogue One: A Star Wars Story\", \"$1,332,439,889\")\n\nconsole = Console()\nconsole.print(table)\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Print Example\nDESCRIPTION: Demonstrates importing and using Rich's enhanced print function with markup and emoji support. The function accepts the same arguments as Python's built-in print but adds formatting capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Printing JSON with Rich Console in Python\nDESCRIPTION: Illustrates how to pretty print JSON using the Console.print_json() method and how to log JSON using the JSON class. It also shows how to use the command-line interface for JSON printing.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconsole.print_json('[false, true, null, \"foo\"]')\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.json import JSON\nconsole.log(JSON('[\"foo\", \"bar\"]'))\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print_json\n```\n\n----------------------------------------\n\nTITLE: Logging with Rich Console\nDESCRIPTION: This snippet demonstrates how to use the `Console` object from the `rich` library for logging data to the console. It highlights features like syntax highlighting, pretty printing of data structures, and displaying local variables. The `log_locals` parameter is used to display a table of local variables where the log function is called, useful for debugging.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Tracking with Rich in Python\nDESCRIPTION: Demonstrates how to use the track function from rich.progress to display progress for a simple loop. The function automatically handles progress updates and display.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\nfrom rich.progress import track\n\nfor i in track(range(20), description=\"Processing...\"):\n    time.sleep(1)  # Simulate work being done\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to integrate Rich into the Python REPL environment, enabling pretty printing and syntax highlighting for all data structures displayed in the interactive console.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Using Rich's Markup Syntax\nDESCRIPTION: Shows how to use Rich's markup syntax for fine-grained styling within text. The syntax is similar to BBCode with tags for bold, underline, italic, and other formatting options.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Creating Formatted Tables with Rich\nDESCRIPTION: Demonstrates creation of formatted tables using Rich's Table class with custom styling, column alignment, and markup rendering.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Console Logging\nDESCRIPTION: Demonstrates how to use Rich's console logging functionality to display formatted data including timestamps and file locations. Shows logging of Python structures with syntax highlighting and pretty printing of collections.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n----------------------------------------\n\nTITLE: Advanced Progress Display with Multiple Tasks in Python\nDESCRIPTION: Shows how to create a Progress object with multiple tasks, update them concurrently, and use a context manager for automatic start/stop of the display.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom rich.progress import Progress\n\nwith Progress() as progress:\n\n    task1 = progress.add_task(\"[red]Downloading...\", total=1000)\n    task2 = progress.add_task(\"[green]Processing...\", total=1000)\n    task3 = progress.add_task(\"[cyan]Cooking...\", total=1000)\n\n    while not progress.finished:\n        progress.update(task1, advance=0.5)\n        progress.update(task2, advance=0.3)\n        progress.update(task3, advance=0.9)\n        time.sleep(0.02)\n```\n\n----------------------------------------\n\nTITLE: Highlight Code with Rich Syntax in Python\nDESCRIPTION: Demonstrates how to highlight syntax using the Rich library in Python. The snippet reads a file, detects the language, and prints it to the console. Dependencies include the Rich library, specifically the Console and Syntax classes.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/syntax.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nconsole = Console()\nwith open(\"syntax.py\", \"rt\") as code_file:\n    syntax = Syntax(code_file.read(), \"python\")\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Logging Handler Setup in Python\nDESCRIPTION: Demonstrates how to set up a basic Rich logging handler with formatting configuration. This snippet shows the minimal setup required to get started with Rich logging.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/logging.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom rich.logging import RichHandler\n\nFORMAT = \"%(message)s\"\nlogging.basicConfig(\n    level=\"NOTSET\", format=FORMAT, datefmt=\"[%X]\", handlers=[RichHandler()]\n)\n\nlog = logging.getLogger(\"rich\")\nlog.info(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Colorful Input Prompt with Emoji\nDESCRIPTION: This snippet showcases how to use the `input` method of the Rich Console to create a colorful prompt, including inline styles and emoji support. It prompts the user for their name with a styled and emoji-rich message.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\nconsole.input(\"What is [i]your[/i] [bold red]name[/]? :smiley: \")\n```\n\n----------------------------------------\n\nTITLE: Progress Bar with Rich\nDESCRIPTION: This code snippet shows how to use the `track` function from the Rich library to display a progress bar for a loop. The `track` function wraps an iterable and automatically updates the progress bar as the loop iterates.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Console in Python\nDESCRIPTION: Creates a Console instance for use throughout a project. This snippet demonstrates how to create a console.py file with a global Console object that can be imported and used in other parts of the project.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom my_project.console import console\n```\n\n----------------------------------------\n\nTITLE: Justifying Text with Rich Console in Python\nDESCRIPTION: Illustrates how to use the justify parameter in Console.print() and Console.log() methods to align text within the terminal. It shows left, right, center, and full justification options.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console(width=20)\n\nstyle = \"bold white on blue\"\nconsole.print(\"Rich\", style=style)\nconsole.print(\"Rich\", style=style, justify=\"left\")\nconsole.print(\"Rich\", style=style, justify=\"center\")\nconsole.print(\"Rich\", style=style, justify=\"right\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Status with Rich\nDESCRIPTION: This snippet demonstrates how to use the `status` method from the `Console` class to display a status message and a spinner while a task is being performed.  The `status` method displays a message with an animated spinner. The code simulates tasks being completed over time with `sleep` function.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n----------------------------------------\n\nTITLE: Printing/Logging Above Rich Progress Display\nDESCRIPTION: This code demonstrates how to print or log messages above the Rich progress display using the internal Console object accessible via `progress.console`. It adds a task to the progress bar and prints messages for each job.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith Progress() as progress:\n    task = progress.add_task(\"twiddling thumbs\", total=10)\n    for job in range(10):\n        progress.console.print(f\"Working on job #{job}\")\n        # run_job(job) # Placeholder for job execution\n        progress.advance(task)\n```\n\n----------------------------------------\n\nTITLE: Using Live Display with Console Printing in Python\nDESCRIPTION: Illustrates how to use the internal console of a Live object to print messages above the live display. This example combines updating a table with printing status messages.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/live.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom rich.live import Live\nfrom rich.table import Table\n\ntable = Table()\ntable.add_column(\"Row ID\")\ntable.add_column(\"Description\")\ntable.add_column(\"Level\")\n\nwith Live(table, refresh_per_second=4) as live:  # update 4 times a second to feel fluid\n    for row in range(12):\n        live.console.print(f\"Working on row #{row}\")\n        time.sleep(0.4)\n        table.add_row(f\"{row}\", f\"description {row}\", \"[red]ERROR\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Rich\nDESCRIPTION: This code snippet demonstrates how to render Markdown content using the Rich library. It imports the `Console` and `Markdown` classes from the `rich` library. It reads the content of a `README.md` file and converts it to a `Markdown` object, which is then printed to the console using `console.print()` for formatted display.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Rich\nDESCRIPTION: This snippet demonstrates how to render Markdown content in the terminal using the `Markdown` class from the `rich` library. It reads Markdown content from a file, creates a `Markdown` object, and prints it to the console, rendering the Markdown formatting.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Rich\nDESCRIPTION: This snippet demonstrates how to create a styled table using the `Table` class from the `rich` library. It sets up column headers, styles, and adds rows with formatted data. The console.print(table) will render the table to the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n----------------------------------------\n\nTITLE: Overlapping Markup Tags - Python\nDESCRIPTION: Shows how markup tags can be combined and overlapped for complex styling.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"[bold]Bold[italic] bold and italic [/bold]italic[/italic]\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid with Rich Table Class\nDESCRIPTION: This snippet creates a grid layout using the Table class, suitable for positioning multiple contents within the terminal. It expands to fit the available size and aligns text to the left and right.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tables.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich import print\nfrom rich.table import Table\n\ngrid = Table.grid(expand=True)\ngrid.add_column()\ngrid.add_column(justify=\"right\")\ngrid.add_row(\"Raising shields\", \"[bold magenta]COMPLETED [green]:heavy_check_mark:\")\n\nprint(grid)\n```\n\n----------------------------------------\n\nTITLE: Using Rich's Print Function\nDESCRIPTION: Example of using Rich's enhanced print function to format text with color, style, and display emoji and variables. This demonstrates the markup syntax with magenta bold text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Contents in Columns with Rich\nDESCRIPTION: This snippet uses the Rich library to display the contents of a directory in columns. It imports necessary modules like `os`, `sys`, `print`, and `Columns` from the `rich` library. The `os.listdir()` function is used to retrieve the list of files and directories, which are then passed to the `Columns` class for formatted output using `print`.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n----------------------------------------\n\nTITLE: Implementing Syntax Highlighting\nDESCRIPTION: Shows how to apply syntax highlighting to code using Rich's Syntax class with custom themes and line numbers.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Implementing __rich_console__ Method for Advanced Custom Formatting in Python\nDESCRIPTION: A more advanced example using a dataclass to implement __rich_console__ method that yields multiple renderable objects. This creates a complex custom representation with a table for a Student class.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/protocol.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom rich.console import Console, ConsoleOptions, RenderResult\nfrom rich.table import Table\n\n@dataclass\nclass Student:\n    id: int\n    name: str\n    age: int\n    def __rich_console__(self, console: Console, options: ConsoleOptions) -> RenderResult:\n        yield f\"[b]Student:[/b] #{self.id}\"\n        my_table = Table(\"Attribute\", \"Value\")\n        my_table.add_row(\"name\", self.name)\n        my_table.add_row(\"age\", str(self.age))\n        yield my_table\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Rich\nDESCRIPTION: This code snippet demonstrates how to create a table using the Rich library, with custom headers, styles, and data. It showcases the `Table` class and its methods for adding columns and rows. It requires the `rich` library.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Rich\nDESCRIPTION: This code snippet demonstrates how to use Rich to perform syntax highlighting of code in the terminal. It uses the `Syntax` class to highlight Python code with a specified theme and line numbers.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Adding Branches to a Rich Tree (Python)\nDESCRIPTION: This snippet shows how to add branches to an existing tree in Rich. After creating a tree, the add method is called to attach additional labels as branches. The updated tree now visually reflects the added branches connected to the main label.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tree.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntree.add(\"foo\")\\ntree.add(\"bar\")\\nprint(tree)\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown in Console using Rich\nDESCRIPTION: This example demonstrates how to create a Markdown object with Rich and print it to the console. The code shows how to format an h1 heading, emphasized text, and a numbered list.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markdown.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nMARKDOWN = \"\"\"\n# This is an h1\n\nRich can do a pretty *decent* job of rendering markdown.\n\n1. This is a list item\n2. This is another list item\n\"\"\"\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nmd = Markdown(MARKDOWN)\nconsole.print(md)\n```\n\n----------------------------------------\n\nTITLE: Paging Console Output\nDESCRIPTION: This code shows how to use a pager to display long output from the Rich Console. It uses a context manager `console.pager()` to send the output of `make_test_card()` to the system's pager.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.__main__ import make_test_card\nfrom rich.console import Console\n\nconsole = Console()\nwith console.pager():\n    console.print(make_test_card())\n```\n\n----------------------------------------\n\nTITLE: Columns Layout with Rich\nDESCRIPTION: This code snippet shows how to display a directory listing in columns using the Rich library. It's a basic clone of the `ls` command found in MacOS/Linux. It utilizes the `Columns` class to format the output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Contents in Columns\nDESCRIPTION: Shows how to create a simple directory listing with content displayed in columns using Rich's Columns class.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Rich\nDESCRIPTION: This snippet demonstrates how to use the `Syntax` class from the `rich` library to highlight Python code syntax in the terminal.  It creates a `Syntax` object with Python code, specifies the language, theme, and line numbers, and then prints it to the console, rendering the code with syntax highlighting.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Defining a Rich Repr for Custom Objects - Python\nDESCRIPTION: This example defines a Bird class with a __rich_repr__ method to customize its representation for Rich. The class shows how Rich can improve readability for complex objects.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/pretty.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nclass Bird:\n    def __init__(self, name, eats=None, fly=True, extinct=False):\n        self.name = name\n        self.eats = list(eats) if eats else []\n        self.fly = fly\n        self.extinct = extinct\n\n    def __rich_repr__(self):\n        yield self.name\n        yield \"eats\", self.eats\n        yield \"fly\", self.fly, True\n        yield \"extinct\", self.extinct, False\n\nBIRDS = {\n    \"gull\": Bird(\"gull\", eats=[\"fish\", \"chips\", \"ice cream\", \"sausage rolls\"]),\n    \"penguin\": Bird(\"penguin\", eats=[\"fish\"], fly=False),\n    \"dodo\": Bird(\"dodo\", eats=[\"fruit\"], fly=False, extinct=True)\n}\nprint(BIRDS)\n```\n\n----------------------------------------\n\nTITLE: Logging to Console - Python\nDESCRIPTION: This snippet illustrates how to use the Console's log method to print messages along with metadata like time and calling file information.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\ntest_log()\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars\nDESCRIPTION: Shows how to create progress bars using Rich's track function for monitoring long-running tasks.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n----------------------------------------\n\nTITLE: Using Alternate Screen\nDESCRIPTION: This code demonstrates using the alternate screen mode in Rich. It displays a pretty printed dictionary on the alternate screen for 5 seconds before returning to the command prompt.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\nwith console.screen():\n    console.print(locals())\n    sleep(5)\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Tables with Custom Styling in Python\nDESCRIPTION: Demonstrates creating a Rich Table with custom headers, styles, and justification for rendering structured data in the console\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Column, Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\"\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\"\n)\n\nconsole.print(table)\n```\n\n----------------------------------------\n\nTITLE: Creating Error Console\nDESCRIPTION: This code snippet demonstrates creating an error console using Rich, directing output to stderr. It initializes a Console object, specifying `stderr=True` to ensure error messages are written to the standard error stream.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nerror_console = Console(stderr=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Fitted Panel in Python\nDESCRIPTION: Demonstrates how to create a panel that fits the content rather than extending to the full width of the terminal. This can be done using the Panel.fit method or by setting expand=False.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/panel.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.panel import Panel\nprint(Panel.fit(\"Hello, [red]World!\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Console Print Usage\nDESCRIPTION: Simple example of using the Console object's print method to output text to the terminal with automatic text wrapping to fit terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Status Spinners\nDESCRIPTION: Demonstrates how to display animated status spinners with custom messages while executing tasks.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n----------------------------------------\n\nTITLE: Suppressing Framework Frames in Traceback\nDESCRIPTION: Excludes specific framework modules from Rich exception rendering\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/traceback.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport click\nfrom rich.traceback import install\ninstall(suppress=[click])\n```\n\n----------------------------------------\n\nTITLE: Custom Column Progress Display in Python\nDESCRIPTION: Demonstrates how to create a Progress object with custom columns, including default columns and additional ones like SpinnerColumn and TimeElapsedColumn.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprogress = Progress(\n    SpinnerColumn(),\n    *Progress.get_default_columns(),\n    TimeElapsedColumn(),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Overflow in Rich Console for Python\nDESCRIPTION: Demonstrates different methods for handling text overflow in Rich, including folding, cropping, and using ellipsis. This is useful when dealing with long text in limited space.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\nfrom rich.console import Console, OverflowMethod\n\nconsole = Console(width=14)\nsupercali = \"supercalifragilisticexpialidocious\"\n\noverflow_methods: List[OverflowMethod] = [\"fold\", \"crop\", \"ellipsis\"]\nfor overflow in overflow_methods:\n    console.rule(overflow)\n    console.print(supercali, overflow=overflow, style=\"bold blue\")\n    console.print()\n```\n\n----------------------------------------\n\nTITLE: Displaying Status with Rich Console in Python\nDESCRIPTION: Demonstrates how to use the Console.status() method to display a status message with a spinner animation that doesn't interfere with regular output.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith console.status(\"Working...\"):\n    do_work()\n```\n\nLANGUAGE: python\nCODE:\n```\nwith console.status(\"Monkeying around...\", spinner=\"monkey\"):\n    do_work()\n```\n\n----------------------------------------\n\nTITLE: Using the @group Decorator for Dynamic Renderables in Python\nDESCRIPTION: This example shows how to use Rich's @group decorator to build a group from an iterator of renderables. This approach is more convenient when dealing with a larger or dynamic number of renderables.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/group.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.console import group\nfrom rich.panel import Panel\n\n@group()\ndef get_panels():\n    yield Panel(\"Hello\", style=\"on blue\")\n    yield Panel(\"World\", style=\"on red\")\n\nprint(Panel(get_panels()))\n```\n\n----------------------------------------\n\nTITLE: Printing Text in Color with Rich\nDESCRIPTION: This snippet demonstrates how to print text in different colors using the Rich library. It includes examples of using a named color, a color number, and both hex and RGB color definitions. The color changes the foreground text color, and prefixes like 'on' or 'default' adjust the background color.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/style.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"Hello\", style=\"magenta\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"Hello\", style=\"color(5)\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"Hello\", style=\"#af00ff\")\nconsole.print(\"Hello\", style=\"rgb(175,0,255)\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"DANGER!\", style=\"red on white\")\n```\n\n----------------------------------------\n\nTITLE: Logging with Rich Console in Python\nDESCRIPTION: Shows how to use the Console.log() method for debugging, which adds timestamps and file/line information to the output. It also demonstrates logging local variables.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> console.log(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Rich Exception Handling in Logging\nDESCRIPTION: Shows how to configure Rich logging handler to use Rich's Traceback class for enhanced exception formatting. Includes try-except example with logging.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/logging.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom rich.logging import RichHandler\n\nlogging.basicConfig(\n    level=\"NOTSET\",\n    format=\"%(message)s\",\n    datefmt=\"[%X]\",\n    handlers=[RichHandler(rich_tracebacks=True)]\n)\n\nlog = logging.getLogger(\"rich\")\ntry:\n    print(1 / 0)\nexcept Exception:\n    log.exception(\"unable print!\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Console Logging in Python\nDESCRIPTION: Demonstrates creating a Rich Console object and logging data with syntax highlighting and local variable tracking\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\"},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\"foo\": \"bar\"}\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\ntest_log()\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Rich\nDESCRIPTION: This snippet demonstrates syntax highlighting using the Rich library and the `Syntax` class. It imports `Console` and `Syntax` from `rich`. A multi-line string containing Python code is defined, and a `Syntax` object is created with specified language, theme and line numbers. Finally, the `Syntax` object is printed to the console for syntax-highlighted output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Combining Style Attributes in Rich\nDESCRIPTION: This example demonstrates combining various style attributes such as bold, blink, and underline with color in the Rich library. Attributes can be negated using '[not XYZ]' syntax for selective styling.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/style.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"Danger, Will Robinson!\", style=\"blink bold red underline on white\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"foo [not bold]bar[/not bold] baz\", style=\"bold\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Progress with Progress Bar - Python\nDESCRIPTION: This snippet demonstrates how to use the Rich library to create a progress bar for tracking long-running tasks by wrapping a sequence with the track function.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n----------------------------------------\n\nTITLE: Using the Style Class\nDESCRIPTION: This snippet illustrates creating a style by instantiating a Style class. Style objects are slightly faster as they avoid parsing overhead, and they can be combined using the '+' operator to add attributes.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/style.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.style import Style\ndanger_style = Style(color=\"red\", blink=True, bold=True)\nconsole.print(\"Danger, Will Robinson!\", style=danger_style)\n```\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.style import Style\nconsole = Console()\n\nbase_style = Style.parse(\"cyan\")\nconsole.print(\"Hello, World\", style = base_style + Style(underline=True))\n```\n\nLANGUAGE: Python\nCODE:\n```\nstyle = Style(color=\"magenta\", bgcolor=\"yellow\", italic=True)\nstyle = Style.parse(\"italic magenta on yellow\")\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompt\nDESCRIPTION: Shows how to use the Confirm class to ask a simple yes/no question from the user\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/prompt.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.prompt import Confirm\nis_rich_great = Confirm.ask(\"Do you like rich?\")\nassert is_rich_great\n```\n\n----------------------------------------\n\nTITLE: Appending Styled Text using Rich\nDESCRIPTION: This snippet illustrates how to append styled text to an existing Text instance, allowing for the creation of complex strings with different styles. It shows the use of the append method from the Text class.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/text.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntext = Text()\ntext.append(\"Hello\", style=\"bold magenta\")\ntext.append(\" World!\")\nconsole.print(text)\n```\n\n----------------------------------------\n\nTITLE: Enabling Rich REPL Formatting\nDESCRIPTION: Code to install Rich in the Python REPL environment. This enhances the default REPL by pretty-printing and syntax highlighting any data structures displayed.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Automatic Rich Repr Generation - Python\nDESCRIPTION: This code demonstrates the use of the @rich.repr.auto decorator for automatically generating a rich representation for a class based on its attributes, thus simplifying the implementation.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/pretty.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport rich.repr\n\n@rich.repr.auto\nclass Bird:\n    def __init__(self, name, eats=None, fly=True, extinct=False):\n        self.name = name\n        self.eats = list(eats) if eats else []\n        self.fly = fly\n        self.extinct = extinct\n\nBIRDS = {\n    \"gull\": Bird(\"gull\", eats=[\"fish\", \"chips\", \"ice cream\", \"sausage rolls\"]),\n    \"penguin\": Bird(\"penguin\", eats=[\"fish\"], fly=False),\n    \"dodo\": Bird(\"dodo\", eats=[\"fruit\"], fly=False, extinct=True)\n}\nfrom rich import print\nprint(BIRDS)\n```\n\n----------------------------------------\n\nTITLE: Markdown Rendering with Rich\nDESCRIPTION: This code snippet shows how to render a Markdown file in the terminal using the Rich library. It reads the content of a Markdown file, creates a `Markdown` object, and prints it to the console.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Display with Rich\nDESCRIPTION: This code shows how to customize the Rich progress display by overriding the `get_renderables` method. It creates a custom `Progress` class that renders a `Panel` around the progress display.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.panel import Panel\nfrom rich.progress import Progress\n\nclass MyProgress(Progress):\n    def get_renderables(self):\n        yield Panel(self.make_tasks_table(self.tasks))\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console Object\nDESCRIPTION: Creates a Console object which provides more control over rich terminal content. The Console is the main interface for creating sophisticated formatted output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Reading Files with Progress Bar using Rich\nDESCRIPTION: This example demonstrates how to generate a progress bar while reading a file using `rich.progress.open`. It opens a JSON file and displays a progress bar while loading the JSON data.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport rich.progress\n\nwith rich.progress.open(\"data.json\", \"rb\") as file:\n    data = json.load(file)\nprint(data)\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Markup Example - Python\nDESCRIPTION: Demonstrates basic usage of Rich's markup syntax for styling text with bold and red colors.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nprint(\"[bold red]alert![/bold red] Something happened\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich's markup for inline styling\nDESCRIPTION: Demonstration of Rich's bbcode-like markup syntax for inline text styling. This allows applying different styles to specific portions of text within a single print statement.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Markup for Advanced Formatting\nDESCRIPTION: Example using Rich's markup syntax for inline styling similar to BBCode. This allows mixing multiple styles within a single string including bold, underline, and italic text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Markup for Detailed Styling\nDESCRIPTION: Example showing Rich's bbcode-like markup syntax for applying multiple styles to different parts of text within a single output string.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich markup for inline styling\nDESCRIPTION: Demonstration of Rich's BBCode-like markup syntax for applying styles to specific portions of text within a console.print call.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Logging with Rich Console\nDESCRIPTION: This code snippet demonstrates how to use the `Console` object from the Rich library to log data with syntax highlighting and pretty formatting. It includes an example of logging a list of dictionaries and local variables.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\n----------------------------------------\n\nTITLE: Applying Style to Text using Rich\nDESCRIPTION: This snippet demonstrates how to create a styled text instance using the Rich library and apply a specific style to a segment of the text. It utilizes the Console and Text classes from the rich module.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/text.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.text import Text\n\nconsole = Console()\ntext = Text(\"Hello, World!\")\ntext.stylize(\"bold magenta\", 0, 6)\nconsole.print(text)\n```\n\n----------------------------------------\n\nTITLE: Rich Logging with Markup and Highlighting\nDESCRIPTION: Examples of how to use markup and custom highlighting in Rich logging messages using the extra parameter.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/logging.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlog.error(\"[bold red blink]Server is shutting down![/]\", extra={\"markup\": True})\n\nlog.error(\"123 will not be highlighted\", extra={\"highlighter\": None})\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Tree in Rich (Python)\nDESCRIPTION: This code snippet demonstrates the creation of a simple tree structure with a single label using the Rich library. It imports the necessary classes from Rich and initializes a Tree instance with a text label. The output is a minimal representation of the tree.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tree.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.tree import Tree\\nfrom rich import print\\n\\ntree = Tree(\"Rich Tree\")\\nprint(tree)\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect Function\nDESCRIPTION: Demonstrates the Rich inspect function which produces a detailed report of any Python object. The example shows inspecting a list with methods=True to include method information.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring sitecustomize.py Traceback Handler\nDESCRIPTION: Automatically installs Rich traceback handler for virtual environment\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/traceback.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.traceback import install\ninstall(show_locals=True)\n```\n\n----------------------------------------\n\nTITLE: Rich Markup Formatting\nDESCRIPTION: Advanced example showing Rich's BBCode-style markup for text formatting\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"[bold red]Mustafa Kemal Atatürk[/bold red] [u](1881 - 10 Kasım 1938)[/u], [i]Türk asker ve devlet adamıdır[/i]. [bold cyan]Türk Kurtuluş Savaşı'nın başkomutanı ve Türkiye Cumhuriyeti'nin kurucusudur[/bold cyan].\")\n```\n\n----------------------------------------\n\nTITLE: Tracking Progress with Rich\nDESCRIPTION: This snippet demonstrates how to use the `track` function from the `rich.progress` module to display a progress bar while iterating over a range of values.  It wraps a loop to visually indicate the progress of the loop's execution, enhancing the user experience during long-running processes.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\n----------------------------------------\n\nTITLE: Highlight Code Using Syntax.from_path in Rich\nDESCRIPTION: Shows the alternative constructor 'Syntax.from_path' for syntax highlighting. This method loads the code directly from the specified file path and auto-detects the file type, simplifying initialization.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/syntax.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nconsole = Console()\nsyntax = Syntax.from_path(\"syntax.py\")\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect for Object Analysis in Python\nDESCRIPTION: Example of using Rich's inspect function to generate a detailed report of a Python object.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Tree Structure - Python\nDESCRIPTION: This snippet demonstrates how to utilize the Rich library to display a tree structure, which can be useful for visualizing hierarchical data.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich.tree\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with Rich\nDESCRIPTION: This snippet demonstrates how to use the Rich library to highlight Python code. It creates a `Syntax` object, specifying the code, language (\"python\"), and theme (\"monokai\"), and then prints it to the console.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Splitting Layout Horizontally into Rows in Python\nDESCRIPTION: Divides the \"lower\" sub-layout horizontally into two parts named \"left\" and \"right\" using the split_row method.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlayout[\"lower\"].split_row(\n    Layout(name=\"left\"),\n    Layout(name=\"right\"),\n)\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Printing to Console - Python\nDESCRIPTION: This example shows how to use the Console object to print styled text to the terminal, demonstrating its similar interface to the built-in print function.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Console Output\nDESCRIPTION: Demonstration of adding color and style to terminal output using the style parameter with Rich's Console.print method.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Console Print with Style Parameter\nDESCRIPTION: Example of using the style parameter to apply bold red formatting to the entire output text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Output with StringIO\nDESCRIPTION: This example shows how to capture console output using a `StringIO` object. It redirects the console's output to a `StringIO` instance, allowing the printed text to be retrieved later with `getvalue()`.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom io import StringIO\nfrom rich.console import Console\nconsole = Console(file=StringIO())\nconsole.print(\"[bold red]Hello[/] World\")\nstr_output = console.file.getvalue()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rainbow Highlighter Using Rich in Python\nDESCRIPTION: This snippet showcases creating a RainbowHighlighter that highlights each character of a string with a random color using the Rich library. Highlighting is implemented by overriding the highlight method of the Highlighter class, applying a different color style to each character. Dependencies include random, rich.print, and rich.highlighter modules. Inputs are strings to be highlighted, and outputs are printed strings with each character styled with variable colors.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/highlighting.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom random import randint\n\nfrom rich import print\nfrom rich.highlighter import Highlighter\n\n\nclass RainbowHighlighter(Highlighter):\n    def highlight(self, text):\n        for index in range(len(text)):\n            text.stylize(f\"color({randint(16, 255)})\", index, index + 1)\n\n\nrainbow = RainbowHighlighter()\nprint(rainbow(\"I must not fear. Fear is the mind-killer.\"))\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Listing with Rich Columns in Python\nDESCRIPTION: A basic implementation of a directory listing program using Rich's Columns class. The script takes a directory path as a command line argument and displays its contents in columns. It uses equal width columns that expand to fill the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/columns.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\nif len(sys.argv) < 2:\n    print(\"Usage: python columns.py DIRECTORY\")\nelse:\n    directory = os.listdir(sys.argv[1])\n    columns = Columns(directory, equal=True, expand=True)\n    print(columns)\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Print Usage with Formatting\nDESCRIPTION: Example of using Rich's print function with formatting markup and emoji support, also demonstrating local variable inspection.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Status Indicator with Rich\nDESCRIPTION: This code snippet demonstrates how to use the `status` method of the Rich `Console` class to display a spinner animation and a message while performing tasks. It simulates a background process with a spinner and log messages upon task completion.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich inspect for object examination\nDESCRIPTION: Example of using Rich's inspect function to produce a detailed report about a Python object, showing its attributes and methods with proper formatting.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Emoji Printing with Rich\nDESCRIPTION: This code snippet shows how to print emojis to the console using Rich by enclosing the emoji name between two colons. This requires the Rich library to be installed.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting Code with Rich in Python\nDESCRIPTION: Demonstrates creating a Syntax object to render code with syntax highlighting and line numbers\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\n----------------------------------------\n\nTITLE: Building a Complex Tree Structure in Rich (Python)\nDESCRIPTION: This code expands the tree structure by adding levels and branches using the Tree's add method. It illustrates how to create a more detailed and complex tree with multiple branches and sub-branches, demonstrating the flexibility of the Tree instance.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tree.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbaz_tree = tree.add(\"baz\")\\nbaz_tree.add(\"[red]Red\").add(\"[green]Green\").add(\"[blue]Blue\")\\nprint(tree)\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Installation\nDESCRIPTION: Command to run a test of Rich after installation. This displays Rich's capabilities in the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect for Object Examination\nDESCRIPTION: Example demonstrating Rich's inspect function which generates a detailed report of any Python object, including its attributes and methods.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Panel with Title and Subtitle in Python\nDESCRIPTION: Shows how to create a panel with both a title at the top and a subtitle at the bottom. This example creates a panel with 'Welcome' as the title and 'Thank you' as the subtitle.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/panel.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.panel import Panel\nprint(Panel(\"Hello, [red]World!\", title=\"Welcome\", subtitle=\"Thank you\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Live Display with Dynamic Table Generation in Python\nDESCRIPTION: Shows how to update a live display by generating a new table in each iteration. This example demonstrates creating random data and updating the display using the update() method.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/live.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport random\nimport time\n\nfrom rich.live import Live\nfrom rich.table import Table\n\n\ndef generate_table() -> Table:\n    \"\"\"Make a new table.\"\"\"\n    table = Table()\n    table.add_column(\"ID\")\n    table.add_column(\"Value\")\n    table.add_column(\"Status\")\n\n    for row in range(random.randint(2, 6)):\n        value = random.random() * 100\n        table.add_row(\n            f\"{row}\", f\"{value:3.2f}\", \"[red]ERROR\" if value < 50 else \"[green]SUCCESS\"\n        )\n    return table\n\n\nwith Live(generate_table(), refresh_per_second=4) as live:\n    for _ in range(40):\n        time.sleep(0.4)\n        live.update(generate_table())\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect Function in Python\nDESCRIPTION: Example of using Rich's inspect function to generate a detailed report of a Python object.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.zh-tw.md#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect to Examine Python Objects\nDESCRIPTION: Example of using Rich's inspect function to produce a detailed report of a Python object, including its methods and properties.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Console with Rich Progress\nDESCRIPTION: This snippet demonstrates how to use a custom Console object with Rich Progress by passing it to the `Progress` constructor. It imports a custom console object and then prints a message using it before starting the progress.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# from my_project import my_console # Placeholder for console import\nfrom rich.console import Console\n\nmy_console = Console()\n\nwith Progress(console=my_console) as progress:\n    my_console.print(\"[bold blue]Starting work!\")\n    # do_work(progress) # Placeholder for work execution\n```\n\n----------------------------------------\n\nTITLE: Highlighting Words and Regular Expressions in Rich Text\nDESCRIPTION: This snippet showcases methods for highlighting specific words or patterns in text using the highlight_words and highlight_regex methods in the Rich library's Text class.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/text.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Here, include the relevant code to demonstrate highlighting methods.\n```\n\n----------------------------------------\n\nTITLE: Using Rich markup for inline styling\nDESCRIPTION: Demonstrates Rich's bbcode-like markup syntax for applying different styles to portions of text within a single string.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Enable Line Numbers with Rich Syntax Highlighting\nDESCRIPTION: Includes line numbers in the output by setting 'line_numbers=True' in the 'Syntax.from_path' method. This feature is useful for enhancing readability and reference purposes.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/syntax.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsyntax = Syntax.from_path(\"syntax.py\", line_numbers=True)\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Columns with Rich\nDESCRIPTION: This code snippet demonstrates how to customize the columns of a Rich progress bar using the `Column` constructor and `table_column` argument. It creates a progress bar where the description takes one-third of the terminal width, and the bar takes up the remaining two-thirds.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\n\nfrom rich.table import Column\nfrom rich.progress import Progress, BarColumn, TextColumn\n\ntext_column = TextColumn(\"{task.description}\", table_column=Column(ratio=1))\nbar_column = BarColumn(bar_width=None, table_column=Column(ratio=2))\nprogress = Progress(text_column, bar_column, expand=True)\n\nwith progress:\n    for n in progress.track(range(100)):\n        progress.print(n)\n        sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Basic Console Printing\nDESCRIPTION: Basic example of using the Console object's print method. This method automatically word-wraps text to fit the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Rich Console Object\nDESCRIPTION: Importing and instantiating a Rich Console object for advanced terminal control. This object provides methods for rich output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Rich Console Object\nDESCRIPTION: These snippets show how to create a Rich Console object and use it to print styled text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.es.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Using Console Status with Spinner - Python\nDESCRIPTION: This code shows how to use the Rich library's status method to display a spinner animation alongside a message while executing tasks in the console.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\n----------------------------------------\n\nTITLE: Adding Panels to Layout Sections in Python\nDESCRIPTION: Divides the \"right\" layout into two Panel objects containing text. This demonstrates adding Rich renderables to layout sections.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.panel import Panel\n\nlayout[\"right\"].split(\n    Layout(Panel(\"Hello\")),\n    Layout(Panel(\"World!\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Styled Console Print\nDESCRIPTION: Example of using Rich Console print with style argument for colored output\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Merhaba\", \"Dünya!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Printing Text with Square Brackets in Rich\nDESCRIPTION: Demonstrates methods to print strings containing square brackets without losing content in Rich library. Provides two primary approaches: disabling markup or escaping strings.\nSOURCE: https://github.com/Textualize/rich/blob/master/questions/square_brackets.question.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Disable markup\nconsole.print(text, markup=False)\n\n# Escape square brackets\nconsole.print(text.replace(\"[\", \"\\\\[\").replace(\"]\", \"\\\\]\"))\n```\n\n----------------------------------------\n\nTITLE: Rich Renderable Example\nDESCRIPTION: This snippet demonstrates using a Rich renderable (Panel) to display styled content in the terminal. It shows how to create a panel with bold yellow text and a red border.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\">>> from rich.panel import Panel\\n>>> Panel.fit(\"[bold yellow]Hi, I'm a Panel\", border_style=\\\"red\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to Console Output\nDESCRIPTION: Demonstration of adding styles to console output using the style parameter. This applies bold red formatting to the entire output string.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Custom Email Syntax Highlighting with RegexHighlighter in Python\nDESCRIPTION: This snippet demonstrates creating a custom regex highlighter to style email-like patterns with Rich. It defines an EmailHighlighter class that matches email patterns in text, highlighting them with a specified style. Dependencies include the rich.console, rich.highlighter, and rich.theme modules. Inputs are strings with potential email addresses, and outputs are strings printed with highlighted email addresses, styled using the defined theme.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/highlighting.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.highlighter import RegexHighlighter\nfrom rich.theme import Theme\n\nclass EmailHighlighter(RegexHighlighter):\n    \"\"\"Apply style to anything that looks like an email.\"\"\"\n\n    base_style = \"example.\"\n    highlights = [r\"(?P<email>[\\w-]+@([\\w-]+\\.)+[\\w-]+)\"]\n\n\ntheme = Theme({\"example.email\": \"bold magenta\"})\nconsole = Console(highlighter=EmailHighlighter(), theme=theme)\nconsole.print(\"Send funds to money@example.org\")\n```\n\n----------------------------------------\n\nTITLE: Styling Error Console\nDESCRIPTION: This example shows how to create an error console and apply a specific style to the output. It sets both `stderr=True` and `style=\"bold red\"` to make error messages visually distinct.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nerror_console = Console(stderr=True, style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Directing Output to File\nDESCRIPTION: This snippet demonstrates directing Rich Console output to a file. It opens a file in write text mode, creates a Console instance directing output to that file, and then prints a formatted rule to the file using the console.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nimport sys\nfrom rich.console import Console\nfrom datetime import datetime\n\nwith open(\"report.txt\", \"wt\") as report_file:\n    console = Console(file=report_file)\n    console.rule(f\"Report Generated {datetime.now().ctime()}\")\n```\n\n----------------------------------------\n\nTITLE: Printing with Rich Console in Python\nDESCRIPTION: Examples of using Rich Console to print formatted text with styles and markup.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console Object\nDESCRIPTION: Code to create a Console object from Rich for more control over terminal output formatting. The Console object provides advanced formatting capabilities beyond the basic print function.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Grouping Renderables with Group Class in Python\nDESCRIPTION: This example demonstrates how to use Rich's Group class to combine multiple Panel objects into a single renderable, which can then be wrapped in another Panel. It shows the basic pattern for when you know the renderables in advance.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/group.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.console import Group\nfrom rich.panel import Panel\n\npanel_group = Group(\n    Panel(\"Hello\", style=\"on blue\"),\n    Panel(\"World\", style=\"on red\"),\n)\nprint(Panel(panel_group))\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Positional Arguments in Rich\nDESCRIPTION: This snippet shows how to create a table by providing column names directly in the constructor. This allows for a simpler initialization of the table without additional attributes.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tables.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ntable = Table(\"Released\", \"Title\", \"Box Office\", title=\"Star Wars Movies\")\n```\n\n----------------------------------------\n\nTITLE: Embedding Pretty Printed Data in a Panel - Python\nDESCRIPTION: This section illustrates how to use the Pretty class from rich.pretty to create a renderable with pretty printed data embedded within a panel using the rich.panel module.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/pretty.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich import print\nfrom rich.pretty import Pretty\nfrom rich.panel import Panel\n\npretty = Pretty(locals())\npanel = Panel(pretty)\nprint(panel)\n```\n\n----------------------------------------\n\nTITLE: Prompt with Choices and Case Sensitivity\nDESCRIPTION: Demonstrates configuring a prompt with a list of valid choices and controlling case sensitivity\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/prompt.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.prompt import Prompt\nname = Prompt.ask(\"Enter your name\", choices=[\"Paul\", \"Jessica\", \"Duncan\"], default=\"Paul\", case_sensitive=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperlinks in Styled Text\nDESCRIPTION: This snippet shows how to create hyperlinks by including a 'link' attribute in the style definition, converting styled text into a clickable link if supported by the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/style.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nconsole.print(\"Google\", style=\"link https://google.com\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Markup for Detailed Styling in Python\nDESCRIPTION: Demonstrates Rich's markup syntax for applying detailed styling to specific parts of the output text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Rich Inspect Usage\nDESCRIPTION: Example demonstrating Rich's inspect function for examining Python objects\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Printing Emoji with Rich Console\nDESCRIPTION: Shows how to print emoji characters in console output using Rich by placing emoji names between colons.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\n----------------------------------------\n\nTITLE: Using Rich Markup for Inline Styling\nDESCRIPTION: Demonstration of Rich's markup syntax for adding inline styling to portions of text, similar to BBCode.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Basic String Prompt Input in Rich\nDESCRIPTION: Demonstrates how to use Rich's Prompt.ask() method to collect a user's name as a string input\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/prompt.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.prompt import Prompt\nname = Prompt.ask(\"Enter your name\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Panel in Python\nDESCRIPTION: Shows how to create a basic panel with text content that includes rich formatting. This example creates a panel with the text 'Hello, World!' where 'World!' is colored red.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/panel.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.panel import Panel\nprint(Panel(\"Hello, [red]World!\"))\n```\n\n----------------------------------------\n\nTITLE: Displaying Text in Rich Panel\nDESCRIPTION: This snippet demonstrates how to utilize a Text instance as content in a Panel while configuring text alignment. The justify parameter controls the alignment of the text within the panel.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/text.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.panel import Panel\nfrom rich.text import Text\npanel = Panel(Text(\"Hello\", justify=\"right\"))\nprint(panel)\n```\n\n----------------------------------------\n\nTITLE: Manual Progress Display Management in Python\nDESCRIPTION: Demonstrates how to manually start and stop a Progress display without using a context manager, ensuring proper cleanup with a try/finally block.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom rich.progress import Progress\n\nprogress = Progress()\nprogress.start()\ntry:\n    task1 = progress.add_task(\"[red]Downloading...\", total=1000)\n    task2 = progress.add_task(\"[green]Processing...\", total=1000)\n    task3 = progress.add_task(\"[cyan]Cooking...\", total=1000)\n\n    while not progress.finished:\n        progress.update(task1, advance=0.5)\n        progress.update(task2, advance=0.3)\n        progress.update(task3, advance=0.9)\n        time.sleep(0.02)\nfinally:\n    progress.stop()\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Style Themes\nDESCRIPTION: The snippet shows how to create a theme using the Theme class and apply it to a Console object. The example demonstrates defining named styles within a theme and highlights the semantic advantage, making the code more understandable.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/style.rst#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.theme import Theme\ncustom_theme = Theme({\n    \"info\": \"dim cyan\",\n    \"warning\": \"magenta\",\n    \"danger\": \"bold red\"\n})\nconsole = Console(theme=custom_theme)\nconsole.print(\"This is information\", style=\"info\")\nconsole.print(\"[warning]The pod bay doors are locked[/warning]\")\nconsole.print(\"Something terrible happened!\", style=\"danger\")\n```\n\n----------------------------------------\n\nTITLE: Wrapping Existing File Objects with Rich Progress\nDESCRIPTION: This code demonstrates how to wrap an existing file object with a progress bar using `rich.progress.wrap_file`. It reads a URL from the internet and displays a progress bar while reading the content.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom time import sleep\nfrom urllib.request import urlopen\n\nfrom rich.progress import wrap_file\n\nresponse = urlopen(\"https://www.textualize.io\")\nsize = int(response.headers[\"Content-Length\"])\n\nwith wrap_file(response, size) as file:\n    for line in file:\n        print(line.decode(\"utf-8\"), end=\"\")\n        sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Using Emojis in Console Output - Python\nDESCRIPTION: This snippet demonstrates how to include emojis in console output using Rich by specifying emoji names enclosed in colons.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n```\n\n----------------------------------------\n\nTITLE: Low-Level Custom Rendering with Segments in Python\nDESCRIPTION: An example showing how to create custom rendering at the segment level for complete control over appearance. It yields individual Segment objects with different styles for each part of the output.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/protocol.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyObject:\n    def __rich_console__(self, console: Console, options: ConsoleOptions) -> RenderResult:\n        yield Segment(\"My\", Style(color=\"magenta\"))\n        yield Segment(\"Object\", Style(color=\"green\"))\n        yield Segment(\"()\", Style(color=\"cyan\"))\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content\nDESCRIPTION: Demonstrates how to render markdown content in the terminal using Rich's Markdown class.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n----------------------------------------\n\nTITLE: Converting ANSI escape codes to Text instance in Rich\nDESCRIPTION: This snippet demonstrates how to convert a string with ANSI escape sequences into a 'Text' instance using the Rich library's 'from_ansi' method. This conversion is crucial for maintaining correct output alignment in UI components like Panel and Table when such escape codes are present.\nSOURCE: https://github.com/Textualize/rich/blob/master/questions/ansi_escapes.question.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nText.from_ansi(\\\"your_string_with_escape_codes\\\")\n```\n\n----------------------------------------\n\nTITLE: Transient Progress Display in Python\nDESCRIPTION: Shows how to create a transient progress display that disappears after completion, useful for more minimal terminal output.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/progress.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith Progress(transient=True) as progress:\n    task = progress.add_task(\"Working\", total=100)\n    do_work(task)\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Ratio in Rich\nDESCRIPTION: Demonstrates how to set layout ratio to control space allocation between different layout sections. By adjusting the ratio, you can define the proportional screen space occupied by each layout component.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlayout[\"upper\"].size = None\nlayout[\"upper\"].ratio = 2\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Truncating Pretty Printed Output - Python\nDESCRIPTION: In this snippet, the max_length and max_string arguments are used to control how much of a data structure or string is shown in the output, effectively truncating long lists or strings for better readability.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/pretty.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> pprint(locals(), max_length=2)\n```\n\nLANGUAGE: Python\nCODE:\n```\n>>> pprint(\"Where there is a Will, there is a Way\", max_string=21)\n```\n\n----------------------------------------\n\nTITLE: Using Rich's inspect function\nDESCRIPTION: Shows how to use Rich's inspect function to generate detailed reports about Python objects. This example displays information about a list, including its methods.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Printing with Rich Console in Python\nDESCRIPTION: Demonstrates using the Rich Console's print method to output text, which automatically handles word wrapping to fit the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Toggling Layout Visibility in Rich\nDESCRIPTION: Illustrates how to dynamically show or hide layout sections by setting the `visible` attribute, allowing for flexible UI configuration based on application state.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayout[\"upper\"].visible = False\nprint(layout)\n\nlayout[\"upper\"].visible = True\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Rich - Python\nDESCRIPTION: This code creates a table using the Rich library, demonstrating how to format table headers, styles, and justify columns while displaying data.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dec 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\n----------------------------------------\n\nTITLE: Creating Rules with Rich Console in Python\nDESCRIPTION: Shows how to use the Console.rule() method to create horizontal lines with optional titles for dividing terminal output into sections.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> console.rule(\"[bold red]Chapter 2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Text from ANSI Codes using Rich\nDESCRIPTION: This snippet illustrates how to convert an ANSI formatted string into a Text object using the from_ansi method. This facilitates the usage of pre-formatted strings within the Rich library.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/text.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntext = Text.from_ansi(\"\\033[1;35mHello\\033[0m, World!\")\nconsole.print(text.spans)\n```\n\n----------------------------------------\n\nTITLE: Basic Padding Example in Python\nDESCRIPTION: Demonstrates how to create basic padding with a single value (1) applied to all sides of the text. This creates a blank line above and below, and a space on the left and right edges.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/padding.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.padding import Padding\ntest = Padding(\"Hello\", 1)\nprint(test)\n```\n\n----------------------------------------\n\nTITLE: Basic Console Print Example\nDESCRIPTION: Simple example showing how to use the console.print method which automatically wraps text to fit terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print for Formatted Output in Python\nDESCRIPTION: Example of using Rich's print function to output formatted text with colors and emojis.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Print Usage\nDESCRIPTION: Demonstrates the basic usage of Rich's print function with text formatting and emoji support\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Hyperlink Markup - Python\nDESCRIPTION: Shows how to create clickable hyperlinks in terminal output using Rich markup.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Visit my [link=https://www.willmcgugan.com]blog[/link]!\")\n```\n\n----------------------------------------\n\nTITLE: Rich Inspect Function Usage\nDESCRIPTION: Demonstrates using Rich's inspect function to examine Python objects\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Attributes in Rich Tables\nDESCRIPTION: This example demonstrates how to create a table with specific column attributes using the Column class. It customizes the header and the justification of columns.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tables.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.table import Column, Table\ntable = Table(\n    \"Released\",\n    \"Title\",\n    Column(header=\"Box Office\", justify=\"right\"),\n    title=\"Star Wars Movies\"\n)\n```\n\n----------------------------------------\n\nTITLE: Assembling Text Instances using Rich\nDESCRIPTION: This snippet shows how to use the assemble method to combine multiple strings and styles into a single Text instance. It reflects the simplicity provided by the Rich library for creating complex styled text.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/text.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntext = Text.assemble((\"Hello\", \"bold magenta\"), \", World!\")\nconsole.print(text)\n```\n\n----------------------------------------\n\nTITLE: Exporting SVG with Theme\nDESCRIPTION: This example demonstrates how to export console output to an SVG file with a custom theme applied. It imports a predefined theme (MONOKAI) and passes it to the `save_svg` method.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.terminal_theme import MONOKAI\n\nconsole = Console(record=True)\nconsole.save_svg(\"example.svg\", theme=MONOKAI)\n```\n\n----------------------------------------\n\nTITLE: Basic Console Printing\nDESCRIPTION: Example of using the Console object's print method for basic output. Unlike the native print function, this will automatically wrap text to fit the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Markdown from Command Line to Display README\nDESCRIPTION: This command-line example shows how to use Rich's Markdown module directly to render a README.md file in the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markdown.rst#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m rich.markdown README.md\n```\n\n----------------------------------------\n\nTITLE: Expanding Pretty Printed Output - Python\nDESCRIPTION: This example demonstrates how to use the expand_all argument in the pprint method to fully expand lists when pretty printing, providing all elements in the output.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/pretty.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> pprint([\"eggs\", \"ham\"], expand_all=True)\n```\n\n----------------------------------------\n\nTITLE: Command Line Interface for Rich Syntax Highlighting\nDESCRIPTION: Explains how to use the Syntax class via the command line to highlight a Python file. It allows users to quickly view syntax highlighting without writing additional code. Users can pass arguments for further customization.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/syntax.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython -m rich.syntax syntax.py\n```\n\n----------------------------------------\n\nTITLE: Using Rich's inspect function for object inspection\nDESCRIPTION: Example of using Rich's inspect function to generate a detailed report about a Python object. The inspect function shows properties, methods, and other details in a formatted display.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Live Display with Table in Python\nDESCRIPTION: Demonstrates how to create a basic live display using a Table renderable. The example shows updating the table within a Live context manager, adding rows with a delay to simulate dynamic content.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/live.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom rich.live import Live\nfrom rich.table import Table\n\ntable = Table()\ntable.add_column(\"Row ID\")\ntable.add_column(\"Description\")\ntable.add_column(\"Level\")\n\nwith Live(table, refresh_per_second=4):  # update 4 times a second to feel fluid\n    for row in range(12):\n        time.sleep(0.4)  # arbitrary delay\n        # update the renderable internally\n        table.add_row(f\"{row}\", f\"description {row}\", \"[red]ERROR\")\n```\n\n----------------------------------------\n\nTITLE: Safe Dynamic Markup - Python\nDESCRIPTION: Shows how to safely handle dynamic text input by escaping potential markup in user-provided strings.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.markup import escape\ndef greet(name):\n    console.print(f\"Hello {escape(name)}!\")\n```\n\n----------------------------------------\n\nTITLE: Basic Console Printing\nDESCRIPTION: Example of using the Console class's print method for basic output, which automatically wraps text to fit terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Single Line Rich Styling - Python\nDESCRIPTION: Shows how to apply multiple styles to a single line of text without closing tags.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint(\"[bold italic yellow on red blink]This text is impossible to read\")\n```\n\n----------------------------------------\n\nTITLE: Custom Padding with Tuple Values in Python\nDESCRIPTION: Shows how to use a tuple of values to set different padding for vertical and horizontal sides. This example creates 2 blank lines above and below the text, with 4 spaces on the left and right sides.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/padding.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.padding import Padding\ntest = Padding(\"Hello\", (2, 4))\nprint(test)\n```\n\n----------------------------------------\n\nTITLE: Using EmailHighlighter as a Callable in Rich Python\nDESCRIPTION: This snippet illustrates how to use a previously defined EmailHighlighter as a callable to highlight emails in strings. After creating the EmailHighlighter object, it is used programmatically to highlight email addresses in text, showcasing the flexibility of applying custom highlighters at various levels of granularity. Dependencies include the rich.console and the custom EmailHighlighter definition. Inputs involve strings containing email addresses, and outputs are printed strings with highlighted emails according to the defined theme.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/highlighting.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nconsole = Console(theme=theme)\nhighlight_emails = EmailHighlighter()\nconsole.print(highlight_emails(\"Send funds to money@example.org\"))\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Content in Python\nDESCRIPTION: Updates the content of the \"left\" layout section with a text string using the update method.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlayout[\"left\"].update(\n    \"The mystery of life isn't a problem to solve, but a reality to experience.\"\n)\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Rich in Python\nDESCRIPTION: Shows how to read a Markdown file and render it in the console using Rich's Markdown rendering capabilities\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\n----------------------------------------\n\nTITLE: Splitting Layout Vertically into Columns in Python\nDESCRIPTION: Divides the layout vertically into two sub-layouts named \"upper\" and \"lower\" using the split_column method.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlayout.split_column(\n    Layout(name=\"upper\"),\n    Layout(name=\"lower\")\n)\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Protocol Method Example\nDESCRIPTION: Example of the Rich library's protocol method for custom object representation, allowing objects to define how they should be displayed.\nSOURCE: https://github.com/Textualize/rich/blob/master/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n__rich_repr__\n```\n\n----------------------------------------\n\nTITLE: Spinner Command with Rich\nDESCRIPTION: This command displays available spinner animations from the `cli-spinners` library that can be used with Rich's status feature.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npython -m rich.spinner\n```\n\n----------------------------------------\n\nTITLE: Printing Layout Tree Structure in Rich\nDESCRIPTION: Demonstrates how to use the `tree` attribute to visualize the hierarchical structure and configuration of complex layouts for debugging and understanding UI composition.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nprint(layout.tree)\n```\n\n----------------------------------------\n\nTITLE: Exporting Console Output\nDESCRIPTION: This example shows how to enable recording of console output and then export it as text. It initializes a Console with `record=True`, allowing subsequent output to be captured for later export.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console(record=True)\n```\n\n----------------------------------------\n\nTITLE: Printing Exceptions with Rich Console\nDESCRIPTION: Demonstrates printing exceptions with local variable context using Rich Console\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/traceback.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\n\ntry:\n    do_something()\nexcept Exception:\n    console.print_exception(show_locals=True)\n```\n\n----------------------------------------\n\nTITLE: Styled Padding with Custom Expansion in Python\nDESCRIPTION: Demonstrates applying a style to padding and using the expand parameter to control width. This example sets blue background for the padding area and prevents it from expanding to the full terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/padding.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.padding import Padding\ntest = Padding(\"Hello\", (2, 4), style=\"on blue\", expand=False)\nprint(test)\n```\n\n----------------------------------------\n\nTITLE: Emoji Markup Usage - Python\nDESCRIPTION: Demonstrates how to use emoji codes in Rich markup, including emoji variants.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import print\n>>> print(\":warning:\")\n>>> print(\":red_heart-emoji:\")\n>>> print(\":red_heart-text:\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Rich Markdown Command Line Help\nDESCRIPTION: This command shows how to access the help information for Rich's Markdown command-line interface, which displays all available arguments and options.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markdown.rst#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m rich.markdown -h\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip in Python\nDESCRIPTION: Command to install the Rich library using pip, Python's package manager. This is the standard method to add Rich to your Python environment.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: Command to install Rich using pip package manager. After installation, you can test the library by running the rich module directly.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: Command to install Rich library using pip package manager\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pl.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Styling Output with Rich Console in Python\nDESCRIPTION: Shows how to add color and style to console output using Rich's style argument in the print method.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Updating Alternate Screen\nDESCRIPTION: This code snippet showcases how to update the alternate screen with a renderable object. It displays a countdown with blinking text centered on a panel in the alternate screen.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nfrom time import sleep\n\nfrom rich.console import Console\nfrom rich.align import Align\nfrom rich.text import Text\nfrom rich.panel import Panel\n\nconsole = Console()\n\nwith console.screen(style=\"bold white on red\") as screen:\n    for count in range(5, 0, -1):\n        text = Align.center(\n            Text.from_markup(f\"[blink]Don't Panic![/blink]\\n{count}\", justify=\"center\"),\n            vertical=\"middle\",\n        )\n        screen.update(Panel(text))\n        sleep(1)\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Styles in Rich\nDESCRIPTION: This snippet shows how to customize default styles by overriding them in a custom Theme. Use \"inherit=False\" to prevent default styles from merging into the custom theme.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/style.rst#2025-04-16_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nfrom rich.theme import Theme\nconsole = Console(theme=Theme({\"repr.number\": \"bold green blink\"}))\nconsole.print(\"The total is 128\")\n```\n\n----------------------------------------\n\nTITLE: Rich REPL Installation\nDESCRIPTION: Code to install Rich in Python REPL for pretty printing of data types\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Capturing Console Output with Context Manager\nDESCRIPTION: This code demonstrates how to capture the output from a Rich Console using a context manager. It uses `console.capture()` to redirect the output, then retrieves the captured string with `capture.get()`.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nconsole = Console()\nwith console.capture() as capture:\n    console.print(\"[bold red]Hello[/] World\")\nstr_output = capture.get()\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print for Formatted Output in Python\nDESCRIPTION: Example of using Rich's print function to output formatted text with colors and emojis.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.zh-tw.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to integrate Rich into the Python REPL environment for pretty-printing and highlighting of data structures.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to configure Rich for use in Python's interactive console (REPL). This enhances the REPL by formatting and highlighting all output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to install Rich in Python REPL for pretty-printing and syntax highlighting of data structures.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.zh-tw.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to install Rich's pretty printing in the Python REPL environment. This enhances the display of all data structures with proper formatting and syntax highlighting.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to install Rich in the Python REPL, which will format all output using Rich's styling capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspector Function\nDESCRIPTION: This example demonstrates the use of Rich's inspect function to display detailed information about a Python object.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.es.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Using Rich Console Markup\nDESCRIPTION: Example of using Rich's markup syntax for inline styling. This demonstrates how to apply multiple styles within a single string.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print Function in Python\nDESCRIPTION: This snippet demonstrates how to use Rich's print function to output styled text and emojis.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.es.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Basic Console Print\nDESCRIPTION: Simple example of using Rich Console print method\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Merhaba\", \"Dünya!\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Layout Size in Rich\nDESCRIPTION: Shows how to set a minimum size for a layout section to prevent it from shrinking below a specified number of rows, ensuring a minimum visibility threshold for UI components.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlayout[\"lower\"].minimum_size = 10\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print Function in Python\nDESCRIPTION: Example of using Rich's print function to output formatted text with colors and emojis, as well as displaying local variables.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Importing Rich Print Function\nDESCRIPTION: This snippet demonstrates how to import the Rich print function, which replaces the built-in Python print function to enable rich text and formatting capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n\"from rich import print\"\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect Function\nDESCRIPTION: Example of using Rich's inspect function to display detailed information about a Python object. This demonstrates Rich's capability to provide rich, formatted output for debugging and exploration.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Styling text with Console print\nDESCRIPTION: Shows how to apply styling to all text in a Console print call using the style parameter. This example applies bold red formatting to the output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Styling Console Output\nDESCRIPTION: Demonstrates adding styles to the entire Console output using the style parameter. This applies bold red formatting to all the text in the print statement.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Installing Rich Library - Python\nDESCRIPTION: The code snippet shows how to install the Rich library using pip, ensuring that the user can utilize its capabilities for enhancing terminal output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Displaying Columns with Rich\nDESCRIPTION: This snippet shows how to display the contents of a directory in columns using the `rich.columns` module. The script takes a directory path as a command-line argument and displays the directory's contents in a formatted column layout using Rich's `Columns` class.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\n----------------------------------------\n\nTITLE: Shorthand Style Closing - Python\nDESCRIPTION: Demonstrates using the shorthand [/] syntax to close the last opened style.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(\"[bold red]Bold and red[/] not bold or red\")\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Python\nDESCRIPTION: Command to test Rich output in the terminal after installation.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Testing Rich output in terminal\nDESCRIPTION: Command to run a demonstration of Rich's capabilities directly in your terminal. This shows various formatting and styling features available in the library.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Console Print with Rich Markup\nDESCRIPTION: Demonstration of Rich's bbcode-like markup for applying different styles to specific portions of text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Styled Console Output - Python\nDESCRIPTION: This code showcases how to print styled text using the Console object, applying the 'bold red' style to the output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Adding Style to Console Output\nDESCRIPTION: Example showing how to apply styles to entire text output using the style keyword argument.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: Command to install the Rich library using pip package manager\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Terminal\nDESCRIPTION: Command to test Rich's formatting capabilities directly in your terminal. Running this will display a showcase of Rich's features.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Suppressing Framework Frames in Rich Logging\nDESCRIPTION: Demonstrates how to configure Rich logging to suppress framework-specific frames in tracebacks, using Click framework as an example.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/logging.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport click\nimport logging\nfrom rich.logging import RichHandler\n\nlogging.basicConfig(\n    level=\"NOTSET\",\n    format=\"%(message)s\",\n    datefmt=\"[%X]\",\n    handlers=[RichHandler(rich_tracebacks=True, tracebacks_suppress=[click])]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Rich Traceback Omission in Python\nDESCRIPTION: Python code blocks can opt out of being rendered in Rich tracebacks by setting a _rich_traceback_omit flag in their local scope.\nSOURCE: https://github.com/Textualize/rich/blob/master/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_rich_traceback_omit = True\n```\n\n----------------------------------------\n\nTITLE: Using Rich's Inspect Function\nDESCRIPTION: Example of using Rich's inspect function to generate a detailed report of a Python object. This shows an enhanced view of a list object including its methods.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Console Instance - Python\nDESCRIPTION: This code creates a Console object from the Rich library, allowing for enhanced control over terminal content output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Initializing Console with Style\nDESCRIPTION: This code snippet demonstrates how to initialize a Rich Console instance with a specific style applied to all printed output. It creates a console that prints text with a white font on a blue background.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\nblue_console = Console(style=\"white on blue\")\nblue_console.print(\"I'm blue. Da ba dee da ba di.\")\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: This snippet shows how to install the Rich library using pip, the Python package installer. The -U flag is used to update Rich if it is already installed.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install rich\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rich Python Library\nDESCRIPTION: Command to install Rich using pip package manager. This installs the latest version of Rich from PyPI.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Rich Console Screen Control Methods\nDESCRIPTION: Control methods for screen manipulation in Rich console, including cursor movement and screen clearing operations.\nSOURCE: https://github.com/Textualize/rich/blob/master/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nControl.segment\nControl.bell\nControl.home\nControl.move_to\nControl.clear\nControl.show_cursor\nControl.alt_screen\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Rich Console Object in Python\nDESCRIPTION: Example of creating a Rich Console object and using it to print formatted text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.zh-tw.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\nconsole.print(\"Hello\", \"World!\")\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Installing Pretty in Python REPL - Python\nDESCRIPTION: This code installs the pretty print functionality of the Rich library in the Python REPL, enabling visually appealing data representations.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Box Styles\nDESCRIPTION: Command to generate a table displaying all available box styles in Rich. Running this command will create a visual reference of the different box drawing options.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/box.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython -m rich.box\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: Command to install Rich Python library using pip package manager\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console Object in Python\nDESCRIPTION: Importing and initializing a Rich Console object for advanced terminal output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Recursive Error with Frame Limit\nDESCRIPTION: Demonstrates handling recursive errors with frame limit configuration\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/traceback.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\ndef foo(n):\n    return bar(n)\n\ndef bar(n):\n    return foo(n)\n\nconsole = Console()\n\ntry:\n    foo(1)\nexcept Exception:\n    console.print_exception(max_frames=20)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Documentation Configuration\nDESCRIPTION: ReStructuredText configuration for automatically generating documentation from the rich.console module, including all members.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/console.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.console\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Printing with Rich Console\nDESCRIPTION: Examples of using the Rich Console object to print text. These demonstrate basic printing and adding styles to the output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print Function for Enhanced Output\nDESCRIPTION: Example of using Rich's print function to display colored and styled text along with emoji and variables in the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Tables in Rich\nDESCRIPTION: This code snippet checks if the table has columns and decides whether to print the table or a message indicating no data. It is useful for scenarios where a table might be dynamically generated.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/tables.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nif table.columns:\n    print(table)\nelse:\n    print(\"[i]No data...[/i]\")\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Terminal\nDESCRIPTION: Command to run a Rich demo that displays various formatting capabilities in the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console Object\nDESCRIPTION: Example of importing and instantiating a Console object from Rich for more control over terminal output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to install Rich in the Python REPL environment, which will automatically format and highlight all data structures in the interactive session.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Color Chart with HTML\nDESCRIPTION: HTML code that renders a formatted table displaying standard terminal colors. The table shows color swatches, numbers, names, hex values, and RGB values for the standard 8-bit colors supported in terminals.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/colors.rst#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<pre style=\"font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">╔════════════╤════════╤═══════════════════════╤═════════╤══════════════════╗\n    ║<span style=\"font-weight: bold\"> Color      </span>│<span style=\"font-weight: bold\"> Number </span>│<span style=\"font-weight: bold\"> Name                  </span>│<span style=\"font-weight: bold\"> Hex     </span>│<span style=\"font-weight: bold\"> RGB              </span>║\n    ╟────────────┼────────┼───────────────────────┼─────────┼──────────────────╢\n    ║ <span style=\"background-color: #000000\">          </span> │<span style=\"color: #808000\">      0 </span>│<span style=\"color: #008000\"> \"black\"               </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #800000\">          </span> │<span style=\"color: #808000\">      1 </span>│<span style=\"color: #008000\"> \"red\"                 </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #008000\">          </span> │<span style=\"color: #808000\">      2 </span>│<span style=\"color: #008000\"> \"green\"               </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #808000\">          </span> │<span style=\"color: #808000\">      3 </span>│<span style=\"color: #008000\"> \"yellow\"              </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #000080\">          </span> │<span style=\"color: #808000\">      4 </span>│<span style=\"color: #008000\"> \"blue\"                </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #800080\">          </span> │<span style=\"color: #808000\">      5 </span>│<span style=\"color: #008000\"> \"magenta\"             </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #008080\">          </span> │<span style=\"color: #808000\">      6 </span>│<span style=\"color: #008000\"> \"cyan\"                </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #c0c0c0\">          </span> │<span style=\"color: #808000\">      7 </span>│<span style=\"color: #008000\"> \"white\"               </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #808080\">          </span> │<span style=\"color: #808000\">      8 </span>│<span style=\"color: #008000\"> \"bright_black\"        </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #ff0000\">          </span> │<span style=\"color: #808000\">      9 </span>│<span style=\"color: #008000\"> \"bright_red\"          </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #00ff00\">          </span> │<span style=\"color: #808000\">     10 </span>│<span style=\"color: #008000\"> \"bright_green\"        </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #ffff00\">          </span> │<span style=\"color: #808000\">     11 </span>│<span style=\"color: #008000\"> \"bright_yellow\"       </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #0000ff\">          </span> │<span style=\"color: #808000\">     12 </span>│<span style=\"color: #008000\"> \"bright_blue\"         </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #ff00ff\">          </span> │<span style=\"color: #808000\">     13 </span>│<span style=\"color: #008000\"> \"bright_magenta\"      </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #00ffff\">          </span> │<span style=\"color: #808000\">     14 </span>│<span style=\"color: #008000\"> \"bright_cyan\"         </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #ffffff\">          </span> │<span style=\"color: #808000\">     15 </span>│<span style=\"color: #008000\"> \"bright_white\"        </span>│<span style=\"color: #000080\">         </span>│<span style=\"color: #800080\">                  </span>║\n    ║ <span style=\"background-color: #000000\">          </span> │<span style=\"color: #808000\">     16 </span>│<span style=\"color: #008000\"> \"grey0\"               </span>│<span style=\"color: #000080\"> #000000 </span>│<span style=\"color: #800080\"> rgb(0,0,0)       </span>║\n    ║ <span style=\"background-color: #00005f\">          </span> │<span style=\"color: #808000\">     17 </span>│<span style=\"color: #008000\"> \"navy_blue\"           </span>│<span style=\"color: #000080\"> #00005f </span>│<span style=\"color: #800080\"> rgb(0,0,95)      </span>║\n    ║ <span style=\"background-color: #000087\">          </span> │<span style=\"color: #808000\">     18 </span>│<span style=\"color: #008000\"> \"dark_blue\"           </span>│<span style=\"color: #000080\"> #000087 </span>│<span style=\"color: #800080\"> rgb(0,0,135)     </span>║\n    ║ <span style=\"background-color: #0000d7\">          </span> │<span style=\"color: #808000\">     20 </span>│<span style=\"color: #008000\"> \"blue3\"               </span>│<span style=\"color: #000080\"> #0000d7 </span>│<span style=\"color: #800080\"> rgb(0,0,215)     </span>║\n    ║ <span style=\"background-color: #0000ff\">          </span> │<span style=\"color: #808000\">     21 </span>│<span style=\"color: #008000\"> \"blue1\"               </span>│<span style=\"color: #000080\"> #0000ff </span>│<span style=\"color: #800080\"> rgb(0,0,255)     </span>║\n    ║ <span style=\"background-color: #005f00\">          </span> │<span style=\"color: #808000\">     22 </span>│<span style=\"color: #008000\"> \"dark_green\"          </span>│<span style=\"color: #000080\"> #005f00 </span>│<span style=\"color: #800080\"> rgb(0,95,0)      </span>║\n    ║ <span style=\"background-color: #005faf\">          </span> │<span style=\"color: #808000\">     25 </span>│<span style=\"color: #008000\"> \"deep_sky_blue4\"      </span>│<span style=\"color: #000080\"> #005faf </span>│<span style=\"color: #800080\"> rgb(0,95,175)    </span>║\n    ║ <span style=\"background-color: #005fd7\">          </span> │<span style=\"color: #808000\">     26 </span>│<span style=\"color: #008000\"> \"dodger_blue3\"        </span>│<span style=\"color: #000080\"> #005fd7 </span>│<span style=\"color: #800080\"> rgb(0,95,215)    </span>║\n    ║ <span style=\"background-color: #005fff\">          </span> │<span style=\"color: #808000\">     27 </span>│<span style=\"color: #008000\"> \"dodger_blue2\"        </span>│<span style=\"color: #000080\"> #005fff </span>│<span style=\"color: #800080\"> rgb(0,95,255)    </span>║\n    ║ <span style=\"background-color: #008700\">          </span> │<span style=\"color: #808000\">     28 </span>│<span style=\"color: #008000\"> \"green4\"              </span>│<span style=\"color: #000080\"> #008700 </span>│<span style=\"color: #800080\"> rgb(0,135,0)     </span>║\n    ║ <span style=\"background-color: #00875f\">          </span> │<span style=\"color: #808000\">     29 </span>│<span style=\"color: #008000\"> \"spring_green4\"       </span>│<span style=\"color: #000080\"> #00875f </span>│<span style=\"color: #800080\"> rgb(0,135,95)    </span>║\n    ║ <span style=\"background-color: #008787\">          </span> │<span style=\"color: #808000\">     30 </span>│<span style=\"color: #008000\"> \"turquoise4\"          </span>│<span style=\"color: #000080\"> #008787 </span>│<span style=\"color: #800080\"> rgb(0,135,135)   </span>║\n    ║ <span style=\"background-color: #0087d7\">          </span> │<span style=\"color: #808000\">     32 </span>│<span style=\"color: #008000\"> \"deep_sky_blue3\"      </span>│<span style=\"color: #000080\"> #0087d7 </span>│<span style=\"color: #800080\"> rgb(0,135,215)   </span>║\n    ║ <span style=\"background-color: #0087ff\">          </span> │<span style=\"color: #808000\">     33 </span>│<span style=\"color: #008000\"> \"dodger_blue1\"        </span>│<span style=\"color: #000080\"> #0087ff </span>│<span style=\"color: #800080\"> rgb(0,135,255)   </span>║\n    ║ <span style=\"background-color: #00af87\">          </span> │<span style=\"color: #808000\">     36 </span>│<span style=\"color: #008000\"> \"dark_cyan\"           </span>│<span style=\"color: #000080\"> #00af87 </span>│<span style=\"color: #800080\"> rgb(0,175,135)   </span>║\n    ║ <span style=\"background-color: #00afaf\">          </span> │<span style=\"color: #808000\">     37 </span>│<span style=\"color: #008000\"> \"light_sea_green\"     </span>│<span style=\"color: #000080\"> #00afaf </span>│<span style=\"color: #800080\"> rgb(0,175,175)   </span>║\n    ║ <span style=\"background-color: #00afd7\">          </span> │<span style=\"color: #808000\">     38 </span>│<span style=\"color: #008000\"> \"deep_sky_blue2\"      </span>│<span style=\"color: #000080\"> #00afd7 </span>│<span style=\"color: #800080\"> rgb(0,175,215)   </span>║\n```\n\n----------------------------------------\n\nTITLE: Rich Console Basic Usage\nDESCRIPTION: Examples of using Rich's Console object for formatted terminal output\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pl.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Basic Rich print example\nDESCRIPTION: Demonstrates how to use Rich's print function with markup for styling text. This example shows bold magenta formatting and includes an emoji and variable output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Prompt with Default Value\nDESCRIPTION: Shows how to set a default value that will be returned if the user presses enter without typing anything\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/prompt.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.prompt import Prompt\nname = Prompt.ask(\"Enter your name\", default=\"Paul Atreides\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Tree Structure with Rich\nDESCRIPTION: This code snippet demonstrates how to display a tree structure using Rich. Running the command `python -m rich.tree` will output a tree representation in the console.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npython -m rich.tree\n```\n\n----------------------------------------\n\nTITLE: Initializing Rich Console in Python\nDESCRIPTION: Example of importing and initializing the Rich Console class for more advanced terminal control and formatting.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to install Rich in Python REPL for pretty-printing data structures.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Previewing Benchmark Dashboard Locally\nDESCRIPTION: Command to launch a local web server to preview the generated benchmark dashboard.\nSOURCE: https://github.com/Textualize/rich/blob/master/benchmarks/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nasv preview\n```\n\n----------------------------------------\n\nTITLE: Using Rich print function with markup\nDESCRIPTION: Example of importing and using Rich's print function to display formatted text with markup. The example shows bold magenta styling, emoji support, and variable inspection capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print Function - Python\nDESCRIPTION: This snippet demonstrates how to import the Rich print function to produce styled text output in the terminal. It showcases bold magenta text output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Installing Global Traceback Handler\nDESCRIPTION: Configures Rich as the default traceback handler for uncaught exceptions\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/traceback.rst#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.traceback import install\ninstall(show_locals=True)\n```\n\n----------------------------------------\n\nTITLE: Rich Layout Methods\nDESCRIPTION: Methods for managing layout splits and updates in Rich's layout system.\nSOURCE: https://github.com/Textualize/rich/blob/master/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLayout.add_split\nLayout.split_column\nLayout.split_row\nlayout.refresh\n```\n\n----------------------------------------\n\nTITLE: Markup Escaping - Python\nDESCRIPTION: Demonstrates how to escape markup tags using backslashes when you want to print literal brackets.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/markup.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import print\n>>> print(r\"foo\\[bar]\")\nfoo[bar]\n```\n\n----------------------------------------\n\nTITLE: Rich REPL Installation\nDESCRIPTION: Shows how to install Rich in Python REPL for pretty printing data structures\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pl.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Rich Print Example\nDESCRIPTION: Demonstrates using Rich's print function with markup formatting and emoji support\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pl.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tree with Rich\nDESCRIPTION: This snippet shows how to execute a Rich module to display a sample tree structure.  The command `python -m rich.tree` demonstrates the `rich.tree` module, showing how to create tree-like structures in the terminal with guides and labels.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npython -m rich.tree\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console instance\nDESCRIPTION: Example of importing and instantiating a Console object from Rich. The Console object provides more control over terminal formatting and output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Running Basic Benchmark on Master Branch\nDESCRIPTION: Command to run benchmarks against the master branch of Rich using Airspeed Velocity.\nSOURCE: https://github.com/Textualize/rich/blob/master/benchmarks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nasv run\n```\n\n----------------------------------------\n\nTITLE: Rich REPL Configuration\nDESCRIPTION: Shows how to install Rich in Python's interactive REPL for pretty printing of data structures\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL for pretty printing\nDESCRIPTION: Code to enable Rich pretty printing in Python's interactive REPL. This allows data structures to be automatically formatted and highlighted when displayed.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console object\nDESCRIPTION: Code that imports and initializes a Console object from Rich, which provides more control over terminal output formatting than the basic print function.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Basic Console print example\nDESCRIPTION: Demonstrates using the Console object's print method to display text in the terminal. This method handles word wrapping to fit the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Print Usage\nDESCRIPTION: Example showing how to import and use Rich's print function with markup formatting\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Merhaba, [bold magenta]Dünya[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Generating Static Benchmark Website\nDESCRIPTION: Command to generate a static website for browsing benchmark results, which will be saved in the benchmarks/html directory.\nSOURCE: https://github.com/Textualize/rich/blob/master/benchmarks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nasv publish\n```\n\n----------------------------------------\n\nTITLE: Inspect Function in Rich - Python\nDESCRIPTION: This snippet utilizes the Rich inspect function to generate reports on Python objects, showcasing methods and attributes.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ja.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import inspect\n>>> inspect(str, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Rich Console Object Usage\nDESCRIPTION: Examples of using Rich's Console object for advanced terminal output formatting\nSOURCE: https://github.com/Textualize/rich/blob/master/README.cn.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n----------------------------------------\n\nTITLE: Using Low-Level Output in Rich Console for Python\nDESCRIPTION: Demonstrates the use of the Console.out() method for lower-level output that bypasses some of Rich's automatic formatting features.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/console.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> console.out(\"Locals\", locals())\n```\n\n----------------------------------------\n\nTITLE: Basic Console printing\nDESCRIPTION: Example of using the Console object's print method to output text to the terminal. Unlike the built-in print function, Rich will automatically wrap text to fit the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: This code installs Rich in the Python REPL for pretty-printing and syntax highlighting of data structures.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.es.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Styling Console output with keywords\nDESCRIPTION: Example of applying styles to Console output using the style keyword argument, which applies the specified style to the entire output line.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Setting Progress Total to None in Python\nDESCRIPTION: Setting the total parameter to None on a Rich progress bar will display a pulsing animation instead of a percentage.\nSOURCE: https://github.com/Textualize/rich/blob/master/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntotal=None\n```\n\n----------------------------------------\n\nTITLE: Printing Emojis to Console\nDESCRIPTION: This snippet showcases how to print emojis in the terminal using the Rich library. Emojis are specified by enclosing their names within colons. The snippet prints a series of emojis including smiley, vampire, pile of poo, thumbs up, and raccoon.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n```\n\n----------------------------------------\n\nTITLE: HTML Terminal Color Palette Display in Rich Library\nDESCRIPTION: A formatted HTML table displaying terminal colors with swatches, indices, names, hex codes, and RGB values. Each row represents a different color in the Rich library's terminal color palette, showing both visual representation and technical color specifications.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/colors.rst#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"background-color: #8700af\">          </span> │<span style=\"color: #808000\">     91 </span>│<span style=\"color: #008000\"> \"dark_magenta\"        </span>│<span style=\"color: #000080\"> #8700af </span>│<span style=\"color: #800080\"> rgb(135,0,175)   </span>\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip in Python\nDESCRIPTION: Command to install Rich library using pip package manager.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.kr.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Rich Inspect Example\nDESCRIPTION: Shows usage of Rich's inspect function for generating detailed object reports\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pl.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console Instance\nDESCRIPTION: Code that shows how to import and create a Console instance for greater control over rich terminal output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in REPL\nDESCRIPTION: This snippet shows how to install Rich for automatic pretty printing and syntax highlighting of Python data structures in the REPL (Read-Eval-Print Loop) environment.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\">>> from rich import pretty\\n>>> pretty.install()\\n>>> [\\\"Rich and pretty\\\", True]\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Box Constants in Rich\nDESCRIPTION: Shows how to import a box constant from rich.box and apply it to a Table. This allows customization of the box drawing characters used for tables and panels.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/box.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import box\ntable = Table(box=box.SQUARE)\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip in Python\nDESCRIPTION: Command to install Rich using pip package manager.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.zh-tw.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Displaying Spinner Options with Rich\nDESCRIPTION: This snippet shows how to execute a Rich module to display available spinner animations. The command `python -m rich.spinner` will render a list of available spinners in the terminal, allowing users to select a spinner for use with Rich's `status` feature.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npython -m rich.spinner\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console Object\nDESCRIPTION: Example of importing and instantiating a Console object from Rich, which provides more control over terminal output formatting and styling.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Styling console output with a keyword argument\nDESCRIPTION: Example of applying styles to console output using the style keyword argument. This applies the specified style (bold red) to the entire printed text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect Function\nDESCRIPTION: Example of Rich's inspect function for creating detailed reports about Python objects, showing method inspection of a list.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Rich Package with pip\nDESCRIPTION: This command installs the Rich package using pip, the Python package installer.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.es.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Implementing __rich_measure__ Method for Width Calculation in Python\nDESCRIPTION: An example showing how to implement the __rich_measure__ method to inform Rich about the space requirements of a custom object. This helps with layout calculations in containers like Table.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/protocol.rst#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass ChessBoard:\n    def __rich_measure__(self, console: Console, options: ConsoleOptions) -> Measurement:\n        return Measurement(8, options.max_width)\n```\n\n----------------------------------------\n\nTITLE: Loading Rich IPython Extension\nDESCRIPTION: This snippet shows how to load the Rich IPython extension, which provides pretty printing and traceback enhancements within an IPython environment.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_7\n\nLANGUAGE: ipython\nCODE:\n```\n\"In [1]: %load_ext rich\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Layout Size in Python\nDESCRIPTION: Sets the \"upper\" layout to have a fixed size of 10 rows, regardless of terminal dimensions.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlayout[\"upper\"].size = 10\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Python Terminal\nDESCRIPTION: Command to test Rich's output capabilities in the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.zh-tw.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL\nDESCRIPTION: Code to install Rich in the Python REPL for pretty-printing of data structures. This enhances the default REPL output.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich using pip\nDESCRIPTION: Command to install the Rich library using pip package manager. This is the primary installation method for adding Rich to your Python environment.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with Jupyter extras\nDESCRIPTION: This snippet shows how to install Rich with additional dependencies needed for using it with Jupyter notebooks. It installs the 'jupyter' extra.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install \\\"rich[jupyter]\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Rich Console object\nDESCRIPTION: Shows how to create a Console object, which is the main interface for Rich's advanced terminal output capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Rich Inspect Function Example\nDESCRIPTION: This snippet demonstrates the use of Rich's inspect function to generate a detailed report on a Python object, including its attributes and methods. It showcases Rich's debugging capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/introduction.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\">>> from rich import inspect\\n>>> from rich.color import Color\\n>>> color = Color.parse(\\\"red\\\")\\n>>> inspect(color, methods=True)\"\n```\n\n----------------------------------------\n\nTITLE: Importing RichHandler from rich.logging in Python\nDESCRIPTION: This code snippet demonstrates how to import the RichHandler class from the rich.logging module. RichHandler is used to enhance logging output with Rich's formatting capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/logging.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.logging import RichHandler\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Terminal\nDESCRIPTION: Command to run a demonstration of Rich's capabilities in your terminal by executing the Rich module directly.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Testing Rich output in terminal\nDESCRIPTION: Command to run Rich's built-in demonstration that shows various formatting capabilities directly in your terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Rich Console Object Creation\nDESCRIPTION: Example showing how to import and create a Rich Console object for terminal output\nSOURCE: https://github.com/Textualize/rich/blob/master/README.tr.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rich.console import Console\n\nconsole = Console()\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Terminal\nDESCRIPTION: Command to run Rich's built-in demo to showcase its terminal output capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Generating Rich Markup Module Documentation with Sphinx\nDESCRIPTION: RST directive for automating documentation generation of the rich.markup module. Uses Sphinx automodule to include all module members in the generated documentation.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/markup.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.markup\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Running Rich Demo\nDESCRIPTION: Command to test Rich output capabilities in terminal\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pl.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Terminal\nDESCRIPTION: This command runs a built-in Rich demo to showcase its capabilities in the terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.es.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Using Rich print function for formatted output\nDESCRIPTION: Example of importing and using Rich's print function to output formatted text with markup, emojis, and Python objects. The function supports Rich's markup syntax for styling text.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Generating RST Documentation for rich.markdown Module\nDESCRIPTION: RST directive to automatically generate documentation for the rich.markdown module including all its members. This is part of the Sphinx documentation system.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/markdown.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.markdown\n    :members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for rich.emoji Module\nDESCRIPTION: ReStructuredText directive for auto-generating documentation from the rich.emoji module, specifically documenting the Emoji class and its members.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/emoji.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.emoji\n    :members: Emoji\n```\n\n----------------------------------------\n\nTITLE: Setting up Sphinx documentation structure for Rich library\nDESCRIPTION: This ReStructuredText code establishes the table of contents structure using the toctree directive. It organizes the documentation into logical sections covering various Rich library features and capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/index.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   introduction.rst\n   console.rst\n   style.rst\n   markup.rst\n   text.rst\n   highlighting.rst\n   pretty.rst\n   logging.rst\n   traceback.rst\n   prompt.rst\n\n   columns.rst\n   group.rst   \n   markdown.rst\n   padding.rst\n   panel.rst\n   progress.rst\n   syntax.rst\n   tables.rst\n   tree.rst\n   live.rst\n   layout.rst\n\n   protocol.rst\n\n   reference.rst\n   appendix.rst\n```\n\n----------------------------------------\n\nTITLE: Testing Rich Output in Terminal\nDESCRIPTION: Command to run Rich's built-in demonstration module that showcases its formatting capabilities directly in your terminal.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Using Rich Print Function\nDESCRIPTION: Example of using Rich's print function to output styled text and emojis. This demonstrates basic text formatting and emoji support.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.id.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for rich.live Module using reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to automatically generate documentation for the rich.live module. It includes all members of the module in the documentation.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/live.rst#2025-04-16_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nrich.live\n=========\n\n.. automodule:: rich.live\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Color Table with HTML Formatting in Rich\nDESCRIPTION: A formatted table displaying terminal color codes (230-255) with their names, hexadecimal values, and RGB equivalents. Each row shows a color swatch, index number, name, hex code, and RGB value in a structured format with styling applied using HTML spans.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/colors.rst#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n║ <span style=\"background-color: #ffffd7\">          </span> │<span style=\"color: #808000\">    230 </span>│<span style=\"color: #008000\"> \"cornsilk1\"           </span>│<span style=\"color: #000080\"> #ffffd7 </span>│<span style=\"color: #800080\"> rgb(255,255,215) </span>║\n    ║ <span style=\"background-color: #ffffff\">          </span> │<span style=\"color: #808000\">    231 </span>│<span style=\"color: #008000\"> \"grey100\"             </span>│<span style=\"color: #000080\"> #ffffff </span>│<span style=\"color: #800080\"> rgb(255,255,255) </span>║\n    ║ <span style=\"background-color: #080808\">          </span> │<span style=\"color: #808000\">    232 </span>│<span style=\"color: #008000\"> \"grey3\"               </span>│<span style=\"color: #000080\"> #080808 </span>│<span style=\"color: #800080\"> rgb(8,8,8)       </span>║\n    ║ <span style=\"background-color: #121212\">          </span> │<span style=\"color: #808000\">    233 </span>│<span style=\"color: #008000\"> \"grey7\"               </span>│<span style=\"color: #000080\"> #121212 </span>│<span style=\"color: #800080\"> rgb(18,18,18)    </span>║\n    ║ <span style=\"background-color: #1c1c1c\">          </span> │<span style=\"color: #808000\">    234 </span>│<span style=\"color: #008000\"> \"grey11\"              </span>│<span style=\"color: #000080\"> #1c1c1c </span>│<span style=\"color: #800080\"> rgb(28,28,28)    </span>║\n    ║ <span style=\"background-color: #262626\">          </span> │<span style=\"color: #808000\">    235 </span>│<span style=\"color: #008000\"> \"grey15\"              </span>│<span style=\"color: #000080\"> #262626 </span>│<span style=\"color: #800080\"> rgb(38,38,38)    </span>║\n    ║ <span style=\"background-color: #303030\">          </span> │<span style=\"color: #808000\">    236 </span>│<span style=\"color: #008000\"> \"grey19\"              </span>│<span style=\"color: #000080\"> #303030 </span>│<span style=\"color: #800080\"> rgb(48,48,48)    </span>║\n    ║ <span style=\"background-color: #3a3a3a\">          </span> │<span style=\"color: #808000\">    237 </span>│<span style=\"color: #008000\"> \"grey23\"              </span>│<span style=\"color: #000080\"> #3a3a3a </span>│<span style=\"color: #800080\"> rgb(58,58,58)    </span>║\n    ║ <span style=\"background-color: #444444\">          </span> │<span style=\"color: #808000\">    238 </span>│<span style=\"color: #008000\"> \"grey27\"              </span>│<span style=\"color: #000080\"> #444444 </span>│<span style=\"color: #800080\"> rgb(68,68,68)    </span>║\n    ║ <span style=\"background-color: #4e4e4e\">          </span> │<span style=\"color: #808000\">    239 </span>│<span style=\"color: #008000\"> \"grey30\"              </span>│<span style=\"color: #000080\"> #4e4e4e </span>│<span style=\"color: #800080\"> rgb(78,78,78)    </span>║\n    ║ <span style=\"background-color: #585858\">          </span> │<span style=\"color: #808000\">    240 </span>│<span style=\"color: #008000\"> \"grey35\"              </span>│<span style=\"color: #000080\"> #585858 </span>│<span style=\"color: #800080\"> rgb(88,88,88)    </span>║\n    ║ <span style=\"background-color: #626262\">          </span> │<span style=\"color: #808000\">    241 </span>│<span style=\"color: #008000\"> \"grey39\"              </span>│<span style=\"color: #000080\"> #626262 </span>│<span style=\"color: #800080\"> rgb(98,98,98)    </span>║\n    ║ <span style=\"background-color: #6c6c6c\">          </span> │<span style=\"color: #808000\">    242 </span>│<span style=\"color: #008000\"> \"grey42\"              </span>│<span style=\"color: #000080\"> #6c6c6c </span>│<span style=\"color: #800080\"> rgb(108,108,108) </span>║\n    ║ <span style=\"background-color: #767676\">          </span> │<span style=\"color: #808000\">    243 </span>│<span style=\"color: #008000\"> \"grey46\"              </span>│<span style=\"color: #000080\"> #767676 </span>│<span style=\"color: #800080\"> rgb(118,118,118) </span>║\n    ║ <span style=\"background-color: #808080\">          </span> │<span style=\"color: #808000\">    244 </span>│<span style=\"color: #008000\"> \"grey50\"              </span>│<span style=\"color: #000080\"> #808080 </span>│<span style=\"color: #800080\"> rgb(128,128,128) </span>║\n    ║ <span style=\"background-color: #8a8a8a\">          </span> │<span style=\"color: #808000\">    245 </span>│<span style=\"color: #008000\"> \"grey54\"              </span>│<span style=\"color: #000080\"> #8a8a8a </span>│<span style=\"color: #800080\"> rgb(138,138,138) </span>║\n    ║ <span style=\"background-color: #949494\">          </span> │<span style=\"color: #808000\">    246 </span>│<span style=\"color: #008000\"> \"grey58\"              </span>│<span style=\"color: #000080\"> #949494 </span>│<span style=\"color: #800080\"> rgb(148,148,148) </span>║\n    ║ <span style=\"background-color: #9e9e9e\">          </span> │<span style=\"color: #808000\">    247 </span>│<span style=\"color: #008000\"> \"grey62\"              </span>│<span style=\"color: #000080\"> #9e9e9e </span>│<span style=\"color: #800080\"> rgb(158,158,158) </span>║\n    ║ <span style=\"background-color: #a8a8a8\">          </span> │<span style=\"color: #808000\">    248 </span>│<span style=\"color: #008000\"> \"grey66\"              </span>│<span style=\"color: #000080\"> #a8a8a8 </span>│<span style=\"color: #800080\"> rgb(168,168,168) </span>║\n    ║ <span style=\"background-color: #b2b2b2\">          </span> │<span style=\"color: #808000\">    249 </span>│<span style=\"color: #008000\"> \"grey70\"              </span>│<span style=\"color: #000080\"> #b2b2b2 </span>│<span style=\"color: #800080\"> rgb(178,178,178) </span>║\n    ║ <span style=\"background-color: #bcbcbc\">          </span> │<span style=\"color: #808000\">    250 </span>│<span style=\"color: #008000\"> \"grey74\"              </span>│<span style=\"color: #000080\"> #bcbcbc </span>│<span style=\"color: #800080\"> rgb(188,188,188) </span>║\n    ║ <span style=\"background-color: #c6c6c6\">          </span> │<span style=\"color: #808000\">    251 </span>│<span style=\"color: #008000\"> \"grey78\"              </span>│<span style=\"color: #000080\"> #c6c6c6 </span>│<span style=\"color: #800080\"> rgb(198,198,198) </span>║\n    ║ <span style=\"background-color: #d0d0d0\">          </span> │<span style=\"color: #808000\">    252 </span>│<span style=\"color: #008000\"> \"grey82\"              </span>│<span style=\"color: #000080\"> #d0d0d0 </span>│<span style=\"color: #800080\"> rgb(208,208,208) </span>║\n    ║ <span style=\"background-color: #dadada\">          </span> │<span style=\"color: #808000\">    253 </span>│<span style=\"color: #008000\"> \"grey85\"              </span>│<span style=\"color: #000080\"> #dadada </span>│<span style=\"color: #800080\"> rgb(218,218,218) </span>║\n    ║ <span style=\"background-color: #e4e4e4\">          </span> │<span style=\"color: #808000\">    254 </span>│<span style=\"color: #008000\"> \"grey89\"              </span>│<span style=\"color: #000080\"> #e4e4e4 </span>│<span style=\"color: #800080\"> rgb(228,228,228) </span>║\n    ║ <span style=\"background-color: #eeeeee\">          </span> │<span style=\"color: #808000\">    255 </span>│<span style=\"color: #008000\"> \"grey93\"              </span>│<span style=\"color: #000080\"> #eeeeee </span>│<span style=\"color: #800080\"> rgb(238,238,238) </span>║\n    ╚════════════╧════════╧═══════════════════════╧═════════╧══════════════════╝\n    </pre>\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Color Swatches with HTML Styling\nDESCRIPTION: An HTML-based representation of a terminal color palette table showing color swatches, indices, names, hex codes, and RGB values. This snippet demonstrates how Rich displays color information in styled HTML output.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/colors.rst#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n║ <span style=\"background-color: #afafaf\">          </span> │<span style=\"color: #808000\">    145 </span>│<span style=\"color: #008000\"> \"grey69\"              </span>│<span style=\"color: #000080\"> #afafaf </span>│<span style=\"color: #800080\"> rgb(175,175,175) </span>║\n║ <span style=\"background-color: #afafd7\">          </span> │<span style=\"color: #808000\">    146 </span>│<span style=\"color: #008000\"> \"light_steel_blue3\"   </span>│<span style=\"color: #000080\"> #afafd7 </span>│<span style=\"color: #800080\"> rgb(175,175,215) </span>║\n║ <span style=\"background-color: #afafff\">          </span> │<span style=\"color: #808000\">    147 </span>│<span style=\"color: #008000\"> \"light_steel_blue\"    </span>│<span style=\"color: #000080\"> #afafff </span>│<span style=\"color: #800080\"> rgb(175,175,255) </span>║\n║ <span style=\"background-color: #afd75f\">          </span> │<span style=\"color: #808000\">    149 </span>│<span style=\"color: #008000\"> \"dark_olive_green3\"   </span>│<span style=\"color: #000080\"> #afd75f </span>│<span style=\"color: #800080\"> rgb(175,215,95)  </span>║\n║ <span style=\"background-color: #afd787\">          </span> │<span style=\"color: #808000\">    150 </span>│<span style=\"color: #008000\"> \"dark_sea_green3\"     </span>│<span style=\"color: #000080\"> #afd787 </span>│<span style=\"color: #800080\"> rgb(175,215,135) </span>║\n║ <span style=\"background-color: #afd7d7\">          </span> │<span style=\"color: #808000\">    152 </span>│<span style=\"color: #008000\"> \"light_cyan3\"         </span>│<span style=\"color: #000080\"> #afd7d7 </span>│<span style=\"color: #800080\"> rgb(175,215,215) </span>║\n║ <span style=\"background-color: #afd7ff\">          </span> │<span style=\"color: #808000\">    153 </span>│<span style=\"color: #008000\"> \"light_sky_blue1\"     </span>│<span style=\"color: #000080\"> #afd7ff </span>│<span style=\"color: #800080\"> rgb(175,215,255) </span>║\n║ <span style=\"background-color: #afff00\">          </span> │<span style=\"color: #808000\">    154 </span>│<span style=\"color: #008000\"> \"green_yellow\"        </span>│<span style=\"color: #000080\"> #afff00 </span>│<span style=\"color: #800080\"> rgb(175,255,0)   </span>║\n║ <span style=\"background-color: #afff5f\">          </span> │<span style=\"color: #808000\">    155 </span>│<span style=\"color: #008000\"> \"dark_olive_green2\"   </span>│<span style=\"color: #000080\"> #afff5f </span>│<span style=\"color: #800080\"> rgb(175,255,95)  </span>║\n║ <span style=\"background-color: #afff87\">          </span> │<span style=\"color: #808000\">    156 </span>│<span style=\"color: #008000\"> \"pale_green1\"         </span>│<span style=\"color: #000080\"> #afff87 </span>│<span style=\"color: #800080\"> rgb(175,255,135) </span>║\n║ <span style=\"background-color: #afffaf\">          </span> │<span style=\"color: #808000\">    157 </span>│<span style=\"color: #008000\"> \"dark_sea_green2\"     </span>│<span style=\"color: #000080\"> #afffaf </span>│<span style=\"color: #800080\"> rgb(175,255,175) </span>║\n║ <span style=\"background-color: #afffff\">          </span> │<span style=\"color: #808000\">    159 </span>│<span style=\"color: #008000\"> \"pale_turquoise1\"     </span>│<span style=\"color: #000080\"> #afffff </span>│<span style=\"color: #800080\"> rgb(175,255,255) </span>║\n║ <span style=\"background-color: #d70000\">          </span> │<span style=\"color: #808000\">    160 </span>│<span style=\"color: #008000\"> \"red3\"                </span>│<span style=\"color: #000080\"> #d70000 </span>│<span style=\"color: #800080\"> rgb(215,0,0)     </span>║\n║ <span style=\"background-color: #d70087\">          </span> │<span style=\"color: #808000\">    162 </span>│<span style=\"color: #008000\"> \"deep_pink3\"          </span>│<span style=\"color: #000080\"> #d70087 </span>│<span style=\"color: #800080\"> rgb(215,0,135)   </span>║\n║ <span style=\"background-color: #d700d7\">          </span> │<span style=\"color: #808000\">    164 </span>│<span style=\"color: #008000\"> \"magenta3\"            </span>│<span style=\"color: #000080\"> #d700d7 </span>│<span style=\"color: #800080\"> rgb(215,0,215)   </span>║\n║ <span style=\"background-color: #d75f00\">          </span> │<span style=\"color: #808000\">    166 </span>│<span style=\"color: #008000\"> \"dark_orange3\"        </span>│<span style=\"color: #000080\"> #d75f00 </span>│<span style=\"color: #800080\"> rgb(215,95,0)    </span>║\n║ <span style=\"background-color: #d75f5f\">          </span> │<span style=\"color: #808000\">    167 </span>│<span style=\"color: #008000\"> \"indian_red\"          </span>│<span style=\"color: #000080\"> #d75f5f </span>│<span style=\"color: #800080\"> rgb(215,95,95)   </span>║\n║ <span style=\"background-color: #d75f87\">          </span> │<span style=\"color: #808000\">    168 </span>│<span style=\"color: #008000\"> \"hot_pink3\"           </span>│<span style=\"color: #000080\"> #d75f87 </span>│<span style=\"color: #800080\"> rgb(215,95,135)  </span>║\n║ <span style=\"background-color: #d75faf\">          </span> │<span style=\"color: #808000\">    169 </span>│<span style=\"color: #008000\"> \"hot_pink2\"           </span>│<span style=\"color: #000080\"> #d75faf </span>│<span style=\"color: #800080\"> rgb(215,95,175)  </span>║\n║ <span style=\"background-color: #d75fd7\">          </span> │<span style=\"color: #808000\">    170 </span>│<span style=\"color: #008000\"> \"orchid\"              </span>│<span style=\"color: #000080\"> #d75fd7 </span>│<span style=\"color: #800080\"> rgb(215,95,215)  </span>║\n║ <span style=\"background-color: #d78700\">          </span> │<span style=\"color: #808000\">    172 </span>│<span style=\"color: #008000\"> \"orange3\"             </span>│<span style=\"color: #000080\"> #d78700 </span>│<span style=\"color: #800080\"> rgb(215,135,0)   </span>║\n║ <span style=\"background-color: #d7875f\">          </span> │<span style=\"color: #808000\">    173 </span>│<span style=\"color: #008000\"> \"light_salmon3\"       </span>│<span style=\"color: #000080\"> #d7875f </span>│<span style=\"color: #800080\"> rgb(215,135,95)  </span>║\n║ <span style=\"background-color: #d78787\">          </span> │<span style=\"color: #808000\">    174 </span>│<span style=\"color: #008000\"> \"light_pink3\"         </span>│<span style=\"color: #000080\"> #d78787 </span>│<span style=\"color: #800080\"> rgb(215,135,135) </span>║\n║ <span style=\"background-color: #d787af\">          </span> │<span style=\"color: #808000\">    175 </span>│<span style=\"color: #008000\"> \"pink3\"               </span>│<span style=\"color: #000080\"> #d787af </span>│<span style=\"color: #800080\"> rgb(215,135,175) </span>║\n║ <span style=\"background-color: #d787d7\">          </span> │<span style=\"color: #808000\">    176 </span>│<span style=\"color: #008000\"> \"plum3\"               </span>│<span style=\"color: #000080\"> #d787d7 </span>│<span style=\"color: #800080\"> rgb(215,135,215) </span>║\n║ <span style=\"background-color: #d787ff\">          </span> │<span style=\"color: #808000\">    177 </span>│<span style=\"color: #008000\"> \"violet\"              </span>│<span style=\"color: #000080\"> #d787ff </span>│<span style=\"color: #800080\"> rgb(215,135,255) </span>║\n║ <span style=\"background-color: #d7af00\">          </span> │<span style=\"color: #808000\">    178 </span>│<span style=\"color: #008000\"> \"gold3\"               </span>│<span style=\"color: #000080\"> #d7af00 </span>│<span style=\"color: #800080\"> rgb(215,175,0)   </span>║\n║ <span style=\"background-color: #d7af5f\">          </span> │<span style=\"color: #808000\">    179 </span>│<span style=\"color: #008000\"> \"light_goldenrod3\"    </span>│<span style=\"color: #000080\"> #d7af5f </span>│<span style=\"color: #800080\"> rgb(215,175,95)  </span>║\n║ <span style=\"background-color: #d7af87\">          </span> │<span style=\"color: #808000\">    180 </span>│<span style=\"color: #008000\"> \"tan\"                 </span>│<span style=\"color: #000080\"> #d7af87 </span>│<span style=\"color: #800080\"> rgb(215,175,135) </span>║\n║ <span style=\"background-color: #d7afaf\">          </span> │<span style=\"color: #808000\">    181 </span>│<span style=\"color: #008000\"> \"misty_rose3\"         </span>│<span style=\"color: #000080\"> #d7afaf </span>│<span style=\"color: #800080\"> rgb(215,175,175) </span>║\n║ <span style=\"background-color: #d7afd7\">          </span> │<span style=\"color: #808000\">    182 </span>│<span style=\"color: #008000\"> \"thistle3\"            </span>│<span style=\"color: #000080\"> #d7afd7 </span>│<span style=\"color: #800080\"> rgb(215,175,215) </span>║\n║ <span style=\"background-color: #d7afff\">          </span> │<span style=\"color: #808000\">    183 </span>│<span style=\"color: #008000\"> \"plum2\"               </span>│<span style=\"color: #000080\"> #d7afff </span>│<span style=\"color: #800080\"> rgb(215,175,255) </span>║\n║ <span style=\"background-color: #d7d700\">          </span> │<span style=\"color: #808000\">    184 </span>│<span style=\"color: #008000\"> \"yellow3\"             </span>│<span style=\"color: #000080\"> #d7d700 </span>│<span style=\"color: #800080\"> rgb(215,215,0)   </span>║\n║ <span style=\"background-color: #d7d75f\">          </span> │<span style=\"color: #808000\">    185 </span>│<span style=\"color: #008000\"> \"khaki3\"              </span>│<span style=\"color: #000080\"> #d7d75f </span>│<span style=\"color: #800080\"> rgb(215,215,95)  </span>║\n║ <span style=\"background-color: #d7d7af\">          </span> │<span style=\"color: #808000\">    187 </span>│<span style=\"color: #008000\"> \"light_yellow3\"       </span>│<span style=\"color: #000080\"> #d7d7af </span>│<span style=\"color: #800080\"> rgb(215,215,175) </span>║\n║ <span style=\"background-color: #d7d7d7\">          </span> │<span style=\"color: #808000\">    188 </span>│<span style=\"color: #008000\"> \"grey84\"              </span>│<span style=\"color: #000080\"> #d7d7d7 </span>│<span style=\"color: #800080\"> rgb(215,215,215) </span>║\n```\n\n----------------------------------------\n\nTITLE: Testing Rich in terminal\nDESCRIPTION: Command to run a demonstration of Rich capabilities directly in your terminal. This shows various formatting features without writing any code.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fa.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m rich\n```\n\n----------------------------------------\n\nTITLE: Initializing a Basic Layout in Python\nDESCRIPTION: Creates a basic Layout object and prints it to the terminal, which will display a box the size of the terminal with layout information.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/layout.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom rich import print\nfrom rich.layout import Layout\n\nlayout = Layout()\nprint(layout)\n```\n\n----------------------------------------\n\nTITLE: Testing Latest Commit on Current Branch\nDESCRIPTION: Command to run benchmarks against the most recent commit on your current branch.\nSOURCE: https://github.com/Textualize/rich/blob/master/benchmarks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nasv run HEAD^!\n```\n\n----------------------------------------\n\nTITLE: Defining Appendix Table of Contents in reStructuredText\nDESCRIPTION: A reStructuredText directive that creates a table of contents for the appendix section, with a maximum depth of 3 levels, linking to box and colors reference documentation.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   appendix/box.rst\n   appendix/colors.rst\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Rich Library\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Rich library project. It includes Sphinx for documentation generation, alabaster and sphinx-rtd-theme for theming, and sphinx-copybutton for enhanced functionality.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nalabaster==1.0.0\nSphinx==8.2.3\nsphinx-rtd-theme==3.0.2\nsphinx-copybutton==0.5.2\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: Command to install the Rich library using pip package manager. This installs the latest version of Rich from PyPI.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.sv.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Installing Rich in Python REPL for Pretty Printing\nDESCRIPTION: Code to install Rich in the Python REPL environment to automatically format and highlight all data structures.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n----------------------------------------\n\nTITLE: Installing Rich Python Library\nDESCRIPTION: Command to install Rich using pip package manager. This installs the Rich library which provides terminal text formatting capabilities.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.pt-br.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributors List\nDESCRIPTION: An alphabetically sorted list of contributors with links to their GitHub profiles or personal websites formatted in Markdown.\nSOURCE: https://github.com/Textualize/rich/blob/master/CONTRIBUTORS.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributors\n\nThe following people have contributed to the development of Rich:\n\n<!-- Add your name below, sort alphabetically by surname. Link to GitHub profile / your home page. -->\n\n- [Patrick Arminio](https://github.com/patrick91)\n- [Gregory Beauregard](https://github.com/GBeauregard/pyffstream)\n- [Artur Borecki](https://github.com/pufereq)\n- [Pedro Aaron](https://github.com/paaaron)\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Reference for Rich Align Module\nDESCRIPTION: ReStructuredText directive for auto-generating documentation for the rich.align module and its members.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/align.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.align\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Installing Rich Python Library\nDESCRIPTION: Command to install Rich using pip. This will install the latest version of Rich from PyPI.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Importing Pretty Print Method - Python\nDESCRIPTION: This code snippet shows how to import the pprint method from the rich.pretty module for pretty printing objects in Python. The pprint function can be customized with various arguments.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/pretty.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from rich.pretty import pprint\n>>> pprint(locals())\n```\n\n----------------------------------------\n\nTITLE: Using Rich Inspect Function in Python\nDESCRIPTION: Example of using Rich's inspect function to display detailed information about a Python object, including its methods.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.ru.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n----------------------------------------\n\nTITLE: Cat ASCII Art Design for Rich Text Library\nDESCRIPTION: An ASCII art representation of a cat, using basic text characters to create a visual design. The cat drawing includes features like eyes, whiskers, and a box-like body structure.\nSOURCE: https://github.com/Textualize/rich/blob/master/assets/logo.txt#2025-04-16_snippet_0\n\nLANGUAGE: ascii-art\nCODE:\n```\n .-----------.\\n/___/__|__\\___\\\\n\\     oo      /\\n \\_o8o888___ /\\n /888888(. .)8.\\n|\\\"\\\"\\\"\\\"\\\"[H]\\\\ /\\\"\\\"|\\n|-- `. - |^| -|\\n|__ _)\\__|_| _|\\n  _(________)_\\n (____________)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for Rich Columns Documentation\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the rich.columns module, including all its members.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/columns.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rich.columns\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting rich.tree module with automodule\nDESCRIPTION: This snippet uses the Sphinx `automodule` directive to automatically generate documentation for the `rich.tree` module.  The `:members:` option ensures that all members of the module are included in the documentation.  This approach simplifies the documentation process by directly extracting information from the code.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/tree.rst#2025-04-16_snippet_0\n\nLANGUAGE: Sphinx\nCODE:\n```\n.. automodule:: rich.tree\n    :members: \n```\n\n----------------------------------------\n\nTITLE: Defining Rich Traceback Omission in Python\nDESCRIPTION: Python code blocks can opt out of being rendered in Rich tracebacks by setting a _rich_traceback_omit flag in their local scope.\nSOURCE: https://github.com/Textualize/rich/blob/master/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n_rich_traceback_omit = True\n```\n\n----------------------------------------\n\nTITLE: Basic printing with Rich Console\nDESCRIPTION: Basic example of using the Console object's print method to output text to the terminal. The console will automatically word-wrap text to fit the terminal width.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconsole.print(\"Hello\", \"World!\")\n```\n\n----------------------------------------\n\nTITLE: Sphinx AutoModule Documentation Configuration for Rich Color Module\nDESCRIPTION: Sphinx configuration directive to automatically generate documentation for the rich.color module, including all members. This uses reStructuredText format to define documentation parameters.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/color.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.color\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Copying Generated HTML to Benchmark Repository\nDESCRIPTION: Command to copy the generated benchmark HTML to the rich-benchmarks repository for publishing.\nSOURCE: https://github.com/Textualize/rich/blob/master/benchmarks/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp -r ../rich/benchmarks/html/* .\n```\n\n----------------------------------------\n\nTITLE: Implementing __rich__ Method for Simple Custom Formatting in Python\nDESCRIPTION: A basic example showing how to implement the __rich__ method in a custom class to return a string with console markup. This allows the object to be rendered with custom formatting when printed with Rich.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/protocol.rst#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyObject:\n    def __rich__(self) -> str:\n        return \"[bold cyan]MyObject()\"\n```\n\n----------------------------------------\n\nTITLE: Installing Rich using pip in Python\nDESCRIPTION: Command to install the Rich library using pip package manager. This installs Rich from PyPI to enable rich text formatting in terminal applications.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.hi.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for Tagged Versions\nDESCRIPTION: Command to run benchmarks for specific tagged versions listed in the asvhashfile.\nSOURCE: https://github.com/Textualize/rich/blob/master/benchmarks/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nasv run HASHFILE:asvhashfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Module Documentation with reStructuredText\nDESCRIPTION: Configuration directive for automatically generating module documentation using Sphinx automodule directive. Includes all members of the rich module in the generated documentation.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/init.rst#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: rich\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for rich.layout\nDESCRIPTION: RST directive to automatically generate documentation from rich.layout module including all members.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/reference/layout.rst#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: rich.layout\n    :members:\n```\n\n----------------------------------------\n\nTITLE: HTML Color Sample Definitions\nDESCRIPTION: HTML table rows showing color definitions with background color samples, color names, hex codes and RGB values. Each row contains styled spans for visual color representation and color code formatting.\nSOURCE: https://github.com/Textualize/rich/blob/master/docs/source/appendix/colors.rst#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span style=\"background-color: #d7d7ff\">          </span> │<span style=\"color: #808000\">    189 </span>│<span style=\"color: #008000\"> \"light_steel_blue1\"   </span>│<span style=\"color: #000080\"> #d7d7ff </span>│<span style=\"color: #800080\"> rgb(215,215,255) </span>\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with Python pip\nDESCRIPTION: Command for installing the Rich Python package using pip package manager.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.fr.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```\n\n----------------------------------------\n\nTITLE: Installing Rich with pip\nDESCRIPTION: Command to install the Rich library using pip package manager.\nSOURCE: https://github.com/Textualize/rich/blob/master/README.de-ch.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install rich\n```"
  }
]