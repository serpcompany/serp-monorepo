[
  {
    "owner": "pypa",
    "repo": "hatch",
    "content": "TITLE: Defining a Custom Hatch Builder Class in Python\nDESCRIPTION: This Python code snippet shows the basic structure for implementing a custom Hatch builder. A class, in this example `CustomBuilder`, must inherit from `hatchling.builders.plugin.interface.BuilderInterface`. The actual build logic needs to be implemented within this class. This file is typically specified via the `path` option in the `pyproject.toml` configuration (defaulting to `hatch_build.py`).\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/builder/custom.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hatchling.builders.plugin.interface import BuilderInterface\n\n\nclass CustomBuilder(BuilderInterface):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatchling as Build Backend in pyproject.toml\nDESCRIPTION: This snippet shows the required configuration in pyproject.toml to use Hatchling as the build backend for a Python project. It specifies Hatchling as a build system requirement and sets it as the build backend.\nSOURCE: https://github.com/pypa/hatch/blob/master/backend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependencies in pyproject.toml\nDESCRIPTION: Example showing how to define optional dependency groups (features) in pyproject.toml, including platform-specific dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[project.optional-dependencies]\ncrypto = [\n  \"PyJWT\",\n  \"cryptography\",\n]\nfastjson = [\n  \"orjson\",\n]\ncli = [\n  \"prompt-toolkit\",\n  \"colorama; platform_system == 'Windows'\",\n]\n```\n\n----------------------------------------\n\nTITLE: Setting UV as Installer in Hatch via TOML\nDESCRIPTION: This code snippet sets the installer for a Hatch environment to \"uv\" using TOML configuration syntax. It is placed within the [tool.hatch.envs.default] section and will prompt Hatch to use the UV tool for creating virtual environments and installing dependencies instead of the default pip and virtualenv. There are no additional dependencies required beyond standard Hatch support, but the UV binary must be accessible to Hatch. The value for 'installer' determines the environment's package installer.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/environment/select-installer.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default]\ninstaller = \"uv\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hatchling Test Project with Pytest Fixture in Python\nDESCRIPTION: This pytest fixture creates a new temporary project directory, writes a minimal pyproject.toml configuration referencing the local plugin under test, and prepares the environment for plugin build testing. It uses the \"tmp_path\" pytest fixture for isolation. The required dependencies include pytest and the pathlib module. The project_dir, project_file, and plugin requirements are dynamically set, allowing for flexible test isolation. Limitations include possible pip caching in subsequent test sessions and the need for plugin code availability at the specified path.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/plugins/testing-builds.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nimport pytest\n\n\n@pytest.fixture\ndef new_project(tmp_path):\n    project_dir = tmp_path / 'my-app'\n    project_dir.mkdir()\n\n    project_file = project_dir / 'pyproject.toml'\n    project_file.write_text(\n        f\"\"\"\\\n[build-system]\nrequires = [\"hatchling\", \"hatch-plugin-name @ {Path.cwd().as_uri()}\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-app\"\nversion = \"0.1.0\"\n\"\"\",\n        encoding='utf-8',\n    )\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Running Hatch Script from Command Line\nDESCRIPTION: This snippet shows the command to run a Python script using Hatch's 'run' command. It demonstrates the output of creating an environment, checking dependencies, and executing the script.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/run/python-scripts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ hatch run /path/to/script.py\nCreating environment: SyB4bPbL\nChecking dependencies\nSyncing dependencies\n[\n│   ('1', 'PEP Purpose and Guidelines'),\n│   ('2', 'Procedure for Adding New Modules'),\n│   ('3', 'Guidelines for Handling Bug Reports'),\n│   ('4', 'Deprecation of Standard Modules'),\n│   ('5', 'Guidelines for Language Evolution'),\n│   ('6', 'Bug Fix Releases'),\n│   ('7', 'Style Guide for C Code'),\n│   ('8', 'Style Guide for Python Code'),\n│   ('9', 'Sample Plaintext PEP Template'),\n│   ('10', 'Voting Guidelines')\n]\n```\n\n----------------------------------------\n\nTITLE: Default Publishing Behavior with Hatch\nDESCRIPTION: Demonstrates the default usage of the `hatch publish` command. It automatically finds and publishes package artifacts (wheel and source distribution) located in the project's `dist` directory to the default package index (PyPI). The output shows the successful upload of each artifact and provides a link to the published project version on PyPI.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/publish.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ hatch publish\ndist/hatch_demo-1rc0-py3-none-any.whl ... success\ndist/hatch_demo-1rc0.tar.gz ... success\n\n[hatch-demo]\nhttps://pypi.org/project/hatch-demo/1rc0/\n```\n\n----------------------------------------\n\nTITLE: Testing without Arguments using Hatch CLI\nDESCRIPTION: This snippet shows how to run tests using the Hatch CLI without additional arguments. By default, the 'tests' directory is passed to pytest. Ensure you have a 'tests' directory in your project.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhatch test\n```\n\nLANGUAGE: shell\nCODE:\n```\npytest tests\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hatch Project (Bash)\nDESCRIPTION: Demonstrates using the `hatch new` command in a shell to create a new Python project structure named 'Hatch Demo'. This command scaffolds a standard project layout including source and test directories, license, README, and a `pyproject.toml` file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/intro.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhatch new \"Hatch Demo\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Name for a Hatch Plugin - TOML\nDESCRIPTION: This TOML snippet demonstrates how to declare the name of a plugin project, following the recommendation to prefix names with 'hatch-'. The '[project]' section's 'name' field is set, which is required for both package publishing and discovery by Hatch. This must be included in the 'pyproject.toml' file of the plugin project.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/about.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\\nname = \"hatch-foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build System in pyproject.toml\nDESCRIPTION: Specifies the required build system configuration in pyproject.toml to ensure compatibility with the Python packaging ecosystem.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to pytest via Hatch CLI\nDESCRIPTION: This snippet demonstrates passing additional arguments to pytest through the Hatch CLI. Append the arguments after the 'test' command for specific test execution or verbosity.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhatch test -vv tests/test_foo.py::test_bar\n```\n\nLANGUAGE: shell\nCODE:\n```\npytest -vv tests/test_foo.py::test_bar\n```\n\n----------------------------------------\n\nTITLE: Managing CLI Applications with hatchling.bridge.app.Application Class (Python)\nDESCRIPTION: Enumerates the \\`Application\\` class within hatchling.bridge.app, listing all methods and properties pertinent to aborting execution, setting verbosity, and displaying messages of various severities. This class underpins user interaction and feedback presentation within CLI utilities and can be extended for customized user-facing command-line applications.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/utilities.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n::: hatchling.bridge.app.Application\n    options:\n      show_source: false\n      members:\n      - abort\n      - verbosity\n      - display_debug\n      - display_error\n      - display_info\n      - display_success\n      - display_waiting\n      - display_warning\n```\n\n----------------------------------------\n\nTITLE: Environment Marker Examples in Python Dependencies\nDESCRIPTION: Examples demonstrating how to use environment markers to conditionally install dependencies based on Python version and platform.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncryptography==3.3.2; python_version < \"3\"\ncryptography>=35.0; python_version > \"3\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncryptography; python_version ~= \"3.0\" and platform_system == \"Windows\"\n```\n\n----------------------------------------\n\nTITLE: Locating the Python Executable within a Hatch Environment Shell\nDESCRIPTION: Demonstrates how to find the path to the Python interpreter being used within the active Hatch environment by running a simple Python command (`python -c \"import sys;print(sys.executable)\"`) inside the environment's shell.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n(hatch-demo) $ python -c \"import sys;print(sys.executable)\"\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Sections in TOML\nDESCRIPTION: Demonstrates how to define environment sections in the pyproject.toml file using the tool.hatch.envs table.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\n```\n\n----------------------------------------\n\nTITLE: Abstracting Platform-specific Operations with hatch.utils.platform.Platform Class (Python)\nDESCRIPTION: Details the \\`Platform\\` class from hatch.utils.platform, presenting all major interface members relevant to formatting commands for subprocesses, running or checking commands, capturing output, shell settings, module access, and system-specific constants. This abstraction allows Hatch plugins and core routines to remain portable across macOS, Linux, and Windows by utilizing these utilities and conditional properties.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/utilities.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n::: hatch.utils.platform.Platform\n    options:\n      show_source: false\n      members:\n      - format_for_subprocess\n      - run_command\n      - check_command\n      - check_command_output\n      - capture_process\n      - exit_with_command\n      - default_shell\n      - modules\n      - home\n      - name\n      - display_name\n      - windows\n      - macos\n      - linux\n```\n\n----------------------------------------\n\nTITLE: Defining Project Dependencies with Version Specifiers in pyproject.toml\nDESCRIPTION: Example showing how to define project dependencies in pyproject.toml using different types of version specifiers such as exact matches, ranges, and compatible releases.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\ndependencies = [\n  \"cryptography\",\n  \"click>=7, <9, != 8.0.0\",\n  \"python-dateutil==2.8.*\",\n  \"numpy~=1.21.4\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Named Hatch Environment with Dependencies and Scripts in pyproject.toml\nDESCRIPTION: Example configuration for `pyproject.toml` defining a custom environment named `docs`. It specifies environment-specific dependencies (`mkdocs`) and defines runnable scripts (`build`, `serve`) under `[tool.hatch.envs.docs.scripts]`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.docs]\ndependencies = [\n  \"mkdocs\"\n]\n[tool.hatch.envs.docs.scripts]\nbuild = \"mkdocs build --clean --strict\"\nserve = \"mkdocs serve --dev-addr localhost:8000\"\n```\n\n----------------------------------------\n\nTITLE: Building Default Targets with Hatch CLI\nDESCRIPTION: Example of using the Hatch CLI to build both sdist and wheel targets without specifying any target options. This shows the default build behavior.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/build.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ hatch build\n[sdist]\ndist/hatch_demo-1rc0.tar.gz\n\n[wheel]\ndist/hatch_demo-1rc0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Specifying Environment Dependencies in TOML\nDESCRIPTION: Demonstrates how to define additional dependencies for a specific environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-mock\",\n]\n```\n\n----------------------------------------\n\nTITLE: Including Documentation for `prepare_environment` Method\nDESCRIPTION: This directive uses a documentation generator syntax (like mkdocstrings for MkDocs) to embed the documentation of the `hatch.project.core.Project.prepare_environment` method. It specifies options to hide the root heading and table of contents entry for the included documentation block, focusing solely on the method's details within the context of the environment lifecycle. Requires a compatible documentation generator.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment/reference.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::: hatch.project.core.Project.prepare_environment\n    options:\n      show_root_heading: false\n      show_root_toc_entry: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for the Default Environment in pyproject.toml (TOML)\nDESCRIPTION: This configuration snippet shows how to specify dependencies for the default Hatch environment by updating the 'tool.hatch.envs.default' table in pyproject.toml. It lists 'pydantic' and 'numpy' as required packages. This config requires no parameters other than being inserted in pyproject.toml; Hatch will automatically install listed dependencies when the environment is created. Dependency versions can be omitted for latest or specified for greater control.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default]\ndependencies = [\n  \"pydantic\",\n  \"numpy\",\n]\n```\n\n----------------------------------------\n\nTITLE: Measuring Code Coverage using Hatch CLI\nDESCRIPTION: This snippet demonstrates how to enable and configure code coverage using the Hatch CLI, with options to run tests across environments and suppress the report for cleaner output.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhatch test --cover\n```\n\nLANGUAGE: shell\nCODE:\n```\ncoverage run -m pytest tests\n```\n\nLANGUAGE: shell\nCODE:\n```\nhatch test --cover-quiet\n```\n\n----------------------------------------\n\nTITLE: Configuring pip Index URLs in Hatch (TOML)\nDESCRIPTION: This TOML snippet configures the default Hatch environment to use specific package indices with `pip`. It sets `PIP_INDEX_URL` to a primary private GitLab index and `PIP_EXTRA_INDEX_URL` to another private GitLab index and the public PyPI index, using an environment variable `GITLAB_API_TOKEN` for authentication via context formatting. This allows `pip` to resolve dependencies from private repositories before falling back to PyPI.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/environment/dependency-resolution.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default.env-vars]\nPIP_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group1_path>/-/packages/pypi/simple/\"\nPIP_EXTRA_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group2_path>/-/packages/pypi/simple/ https://pypi.org/simple/\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Hatch PublisherInterface via MkDocs Directive\nDESCRIPTION: This snippet utilizes an MkDocs (likely with the mkdocstrings extension) directive to automatically generate documentation for the Python class `hatch.publish.plugin.interface.PublisherInterface`. The `options` section specifies that only the listed members (`PLUGIN_NAME`, `app`, `root`, `cache_dir`, `project_config`, `plugin_config`, `disable`, `publish`) should be included in the generated documentation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/publisher/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: mkdocs\nCODE:\n```\n::: hatch.publish.plugin.interface.PublisherInterface\n    options:\n      members:\n      - PLUGIN_NAME\n      - app\n      - root\n      - cache_dir\n      - project_config\n      - plugin_config\n      - disable\n      - publish\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using pipx in Bash\nDESCRIPTION: This command installs Hatch using pipx, which allows for global installation of Python applications in isolated environments, avoiding dependency conflicts.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npipx install hatch\n```\n\n----------------------------------------\n\nTITLE: Running a Script in a Specific Named Hatch Environment via CLI\nDESCRIPTION: Shows how to execute a predefined script (`serve`) within a specific, named environment (`docs`) using the `<ENV_NAME>:<SCRIPT_NAME>` syntax with the `hatch run` command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nhatch run docs:serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatch Settings with Nested Tables (TOML)\nDESCRIPTION: Illustrates how to configure project-specific Hatch settings within `pyproject.toml` or `hatch.toml` using the `[tool.hatch]` table and nested tables (e.g., `[tool.hatch.table1]`). This structure allows organizing various configuration options. Note that top-level keys in `hatch.toml` override those in `pyproject.toml` if defined in both.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/intro.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch]\noption = \"...\"\n\n[tool.hatch.table1]\noption = \"...\"\n\n[tool.hatch.table2]\noption = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Initializing an Existing Project with Hatch (Bash)\nDESCRIPTION: Shows how to initialize Hatch for an existing project by running `hatch new --init` within the project's directory. This command can automatically migrate `setuptools` configuration from a `setup.py` file or guide the user interactively through the setup process if no `setup.py` is found.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/intro.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhatch new --init\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Index URLs in Hatch (TOML)\nDESCRIPTION: This TOML snippet demonstrates configuring the default Hatch environment to use specific package indices with the `uv` installer. It sets the `UV_EXTRA_INDEX_URL` and `UV_INDEX_URL` environment variables to point to private GitLab indices and the public PyPI index, respectively. Authentication is handled using context formatting to inject the `GITLAB_API_TOKEN` environment variable. This configuration directs `uv` on where to search for package dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/environment/dependency-resolution.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default.env-vars]\nUV_EXTRA_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group1_path>/-/packages/pypi/simple/\"\nUV_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/<group2_path>/-/packages/pypi/simple/ https://pypi.org/simple/\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Metadata Hook Path - Hatch - TOML\nDESCRIPTION: This TOML snippet demonstrates how to specify a custom file path for the Hatch custom metadata hook plugin. By adding a 'path' field to [tool.hatch.metadata.hooks.custom], users can instruct Hatch to load the metadata hook from an alternative Python file location instead of the default hatch_build.py. This configuration requires that the file specified in 'path' exists and contains a compliant MetadataHookInterface implementation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/config/dynamic-metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.hatch.metadata.hooks.custom]\npath = \"some/where.py\"\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Environments with Hatch CLI\nDESCRIPTION: This snippet shows how to use the Hatch CLI to include or exclude specific environments by their matrix variables. It highlights the command options to select specific Python versions and features.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\nfeature = [\"foo\", \"bar\", \"baz\"]\n```\n\n----------------------------------------\n\nTITLE: Running a Python Version Command via Hatch Environment (Console)\nDESCRIPTION: This snippet shows how to run a command in the default Hatch environment using the \"hatch run\" command. Specifically, it runs 'python -V' to display the Python interpreter version in use within the managed environment. Requires Hatch installed and an existing (or auto-created) 'default' environment. The expected output indicates Python's version; this command is general-purpose and can be replaced with other commands as needed.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ hatch run python -V\nPython 3.12.1\n```\n\n----------------------------------------\n\nTITLE: Running a Command in a Custom Hatch Environment (Console)\nDESCRIPTION: This snippet shows usage of the 'hatch run' feature to run the 'pytest' command inside a user-defined 'test' environment, without activating it manually. The syntactic form is 'hatch run <ENV_NAME>:command', demonstrating how to use the isolated environment for linting or testing. Output displayed is typical of pytest's session initiation, illustrating the integration and readiness of configurations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ hatch run test:pytest\n============================== test session starts ===============================\nplatform darwin -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0\nrootdir: /your/path/to/yourproject\ncollected 0 items\n```\n\n----------------------------------------\n\nTITLE: Examples of Local Dependency Specifications (Unix/Windows)\nDESCRIPTION: Provides concrete examples of specifying local dependencies for source archives, wheels, and directories on both Unix and Windows platforms using the `file://` scheme. These examples illustrate the format described previously.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n| Type | Unix | Windows |\n| --- | --- | --- |\n| Source archive | `proj @ file:///path/to/pkg.tar.gz` | `proj @ file:///c:/path/to/pkg.tar.gz` |\n| Wheel | `proj @ file:///path/to/pkg.whl` | `proj @ file:///c:/path/to/pkg.whl` |\n| Directory | `proj @ file:///path/to/pkg` | `proj @ file:///c:/path/to/pkg` |\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Entry Points with a Namespace in pyproject.toml - TOML\nDESCRIPTION: Uses [project.entry-points.plugin-namespace] to group plugins for extensibility. Keys are plugin names, values are import paths. Enables plugin discovery by other packages or applications. Limitation: referenced packages/functions must exist.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.plugin-namespace]\nplugin-name1 = \"pkg.subpkg1\"\nplugin-name2 = \"pkg.subpkg2:func\"\n```\n\n----------------------------------------\n\nTITLE: Configuring UV Package Installer using TOML\nDESCRIPTION: Sets the package installer to UV for improved performance in a virtual environment. This configuration can be set in any Hatch environment by altering the 'installer' option. It replaces virtualenv and pip with UV, leading to better performance.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/blog/posts/release-hatch-1100.md#2025-04-22_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.hatch.envs.default]\ninstaller = \"uv\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Artifact Inclusion\nDESCRIPTION: Demonstrates how to include specific artifacts in the build, even if they are ignored by VCS.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel]\nartifacts = [\n  \"*.so\",\n  \"*.dll\",\n  \"!/foo/*.so\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Project Name in pyproject.toml - TOML\nDESCRIPTION: This TOML snippet demonstrates how to set the required 'name' field for a Python project in the [project] section of pyproject.toml. The 'name' should be a unique identifier for the package. No additional dependencies are required beyond having pyproject.toml at the project root. Input: N/A; Output: N/A; Limitation: 'name' is a mandatory field.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"your-app\"\n```\n\n----------------------------------------\n\nTITLE: Run Test Suite with Hatch\nDESCRIPTION: This sequence of commands runs various configurations of the test suite using Hatch. It requires Hatch and the project dependencies to be installed. Commands 'hatch test' runs the test suite, adding '--cover' generates a coverage report, and '--all' executes extended tests.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/community/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhatch test\n```\n\nLANGUAGE: bash\nCODE:\n```\nhatch test --cover\n```\n\nLANGUAGE: bash\nCODE:\n```\nhatch test --cover --all\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatch Static Analysis with Black, isort, and flake8 in TOML\nDESCRIPTION: This TOML configuration demonstrates how to override the default static analysis behavior in Hatch by defining the `hatch-static-analysis` environment. It specifies `black`, `flake8`, and `isort` as dependencies. Custom scripts (`format-check`, `format-fix`, `lint-check`, `lint-fix`) are defined to integrate these tools with the `hatch fmt` command, allowing for separate formatting and linting checks and fixes. The `{args:.}` placeholder passes command-line arguments to the underlying tools.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/static-analysis/behavior.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis]\ndependencies = [\"black\", \"flake8\", \"isort\"]\n\n[tool.hatch.envs.hatch-static-analysis.scripts]\nformat-check = [\n  \"black --check --diff {args:.}\",\n  \"isort --check-only --diff {args:.}\",\n]\nformat-fix = [\n  \"isort {args:.}\",\n  \"black {args:.}\",\n]\nlint-check = \"flake8 {args:.}\"\nlint-fix = \"lint-check\"\n```\n\n----------------------------------------\n\nTITLE: Defining Command-Line Entry Points in pyproject.toml - TOML\nDESCRIPTION: Defines [project.scripts] mapping script names to callable objects as entry points. Each key becomes an executable script post-installation, calling the specified Python function. Requires configuration in pyproject.toml and function availability in the given module.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[project.scripts]\ncli-name = \"pkg.subpkg:func\"\n```\n\n----------------------------------------\n\nTITLE: Example: Configuring Virtual Environment Directory\nDESCRIPTION: Sets a custom location for virtual environments in the user's home directory. Environment variables are expanded, allowing for flexible configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dirs.env]\nvirtual = \"~/.virtualenvs\"\n```\n\n----------------------------------------\n\nTITLE: Setting Static Version in pyproject.toml - TOML\nDESCRIPTION: This snippet demonstrates assigning a fixed version string to the project. It's set directly under the [project] section as 'version'. Appropriate when the version is known during editing and does not change dynamically. No dependencies required; limitation: must be updated manually for new releases.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nversion = \"0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Parallel Test Execution with Hatch CLI\nDESCRIPTION: This snippet shows how to parallelize test execution using the Hatch CLI, distributing tests across multiple workers for faster completion.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhatch test --parallel\n```\n\n----------------------------------------\n\nTITLE: Applying Matrix Variable Overrides in Hatch TOML Configuration\nDESCRIPTION: Shows how to use the `matrix` source within the `overrides` table in `pyproject.toml` to modify options based on the specific matrix variable values used to generate an environment. The example conditionally sets the `env-vars` option based on the `version` variable's value and adds `features` based on the `auth` variable's value, using conditional inline tables with `value` and `if` keys. This allows fine-grained configuration for specific matrix combinations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nmatrix.version.env-vars = \"PRODUCT_VERSION\"\nmatrix.auth.features = [\n  { value = \"oauth\", if = [\"oauth2\"] },\n  { value = \"kerberos\", if = [\"kerberos\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"legacy\", \"latest\"]\nauth = [\"oauth2\", \"kerberos\", \"noauth\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependencies in pyproject.toml - TOML\nDESCRIPTION: Configures [project.optional-dependencies] sections, where each key is an option and value is a package list. Used to support extras and extra requirements during installation. No hard dependencies unless the extra is requested.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[project.optional-dependencies]\noption1 = [\n  \"...\",\n]\noption2 = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Scripts for Environments in TOML\nDESCRIPTION: Shows how to define named scripts that can be executed or referenced in other scripts within an environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-mock\",\n]\n[tool.hatch.envs.test.scripts]\nrun-coverage = \"pytest --cov-config=pyproject.toml --cov=pkg --cov=tests\"\nrun = \"run-coverage --no-cov\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Command Scripts for Environments in TOML\nDESCRIPTION: Demonstrates how to define scripts with multiple commands using an array of strings.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.style]\ndetached = true\ndependencies = [\n  \"flake8\",\n  \"black\",\n  \"isort\",\n]\n[tool.hatch.envs.style.scripts]\ncheck = [\n  \"flake8 .\",\n  \"black --check --diff .\",\n  \"isort --check-only --diff .\",\n]\nfmt = [\n  \"isort .\",\n  \"black .\",\n  \"check\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Argument Separator in Hatch CLI\nDESCRIPTION: This snippet illustrates how to use the '--' separator to treat arguments as positional. Useful when pytest arguments conflict with Hatch CLI flags.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhatch test -r -- -r fE -- tests\n```\n\nLANGUAGE: shell\nCODE:\n```\npytest -r fE -- tests\n```\n\n----------------------------------------\n\nTITLE: Running Test Environments with Hatch CLI\nDESCRIPTION: Shows the command-line invocation (`hatch run test`) used to execute the `test` script within the environments defined in the `pyproject.toml` file using Hatch. This is the Hatch equivalent of running `tox`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhatch run test\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Dependencies with Hash Verification\nDESCRIPTION: Illustrates how to add integrity verification to a remote URL dependency by appending a hash fragment (`#<HASH_ALGORITHM>=<EXPECTED_HASH>`). The installation will fail if the downloaded file's hash does not match the expected value. Recommended hash algorithms like `sha256` are listed.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nrequests @ https://github.com/psf/requests/archive/refs/tags/v2.26.0.zip#sha256=eb729a757f01c10546ebd179ae2aec852dd0d7f8ada2328ccf4558909d859985\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Matrices in Hatch TOML Configuration\nDESCRIPTION: Demonstrates how to define multiple environment matrices for a Hatch environment (`test`) using the `[[tool.hatch.envs.test.matrix]]` table array in `pyproject.toml`. Each table defines variables (like `python`, `version`, `feature`) and their possible values. Hatch generates a separate environment for each unique combination (Cartesian product) of these variable values across all defined matrices for the `test` environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test]\ndependencies = [\n  \"pytest\"\n]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.10\", \"3.11\"]\nversion = [\"42\", \"3.14\"]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using Conda in Bash\nDESCRIPTION: These commands install Hatch using Conda or Mamba package managers. They use the conda-forge channel to install Hatch.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge hatch\n```\n\nLANGUAGE: bash\nCODE:\n```\nmamba install hatch\n```\n\n----------------------------------------\n\nTITLE: Incrementing Project Version Segment with Hatch CLI\nDESCRIPTION: Illustrates how to increment a specific segment of the project version (e.g., `minor`) using the `hatch version` command followed by the segment name. This relies on the configured version scheme (default is PEP 440).\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ hatch version minor\nOld: 0.1.0\nNew: 0.2.0\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Virtual Environment Type in Hatch Configuration (TOML)\nDESCRIPTION: This TOML snippet demonstrates the basic configuration required in `pyproject.toml` to define a Hatch environment that uses the 'virtual' type. Replace `<ENV_NAME>` with the desired name for the environment. This configuration specifies that the environment management should use the virtual environment plugin provided by Hatch.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment/virtual.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.<ENV_NAME>]\ntype = \"virtual\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Wheel Builder with TOML in Python Projects - TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the wheel builder for Hatch in a Python project using the '[tool.hatch.build.targets.wheel]' section. No required dependencies are specified for this configuration block itself, but the context assumes you are using Hatch and want to customize wheel building behavior. Inputs such as 'core-metadata-version', 'shared-data', and others can be further specified under this block as documented above. The snippet serves as an entry point for various build options and should be placed in 'pyproject.toml'.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/builder/wheel.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel]\n```\n\n----------------------------------------\n\nTITLE: Defining Overrides for Literal Types in Hatch TOML\nDESCRIPTION: Illustrates override syntax in `pyproject.toml` for literal type options like `python` (string) or `skip-install`, `dev-mode` (booleans). Overrides can be defined directly using the value, with an inline table specifying `value` and optionally conditions like `if`, or as an array of potential values/conditions where the first applicable one is used. This allows conditional setting of simple configuration values.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nmatrix.foo.python = \"3.10\"\nmatrix.bar.skip-install = { value = true, if = [\"...\"] }\nenv.CI.dev-mode = [\n  { value = false, if = [\"...\"] },\n  true,\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Default Repositories for Hatch Index Publisher (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to define the default `main` (PyPI) and `test` (TestPyPI) repositories within the `config.toml` file for the Hatch `index` publisher. It specifies the required `url` attribute for each repository under the `publish.index.repos` table.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/publisher/package-index.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml tab=\"config.toml\"\n[publish.index.repos.main]\nurl = \"https://upload.pypi.org/legacy/\"\n\n[publish.index.repos.test]\nurl = \"https://test.pypi.org/legacy/\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Targets in TOML for Hatch\nDESCRIPTION: Example of how to configure build targets in Hatch's pyproject.toml file. This snippet shows how to set up sdist and wheel targets with specific exclusion patterns and package locations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/build.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.sdist]\nexclude = [\n  \"/.github\",\n  \"/docs\",\n]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/foo\"]\n```\n\n----------------------------------------\n\nTITLE: Launching a Shell Within a Hatch Environment (Console)\nDESCRIPTION: This snippet demonstrates entering an interactive shell within a specific Hatch environment ('test') using the 'hatch -e test shell' command. Once active, the environment emulates a standard virtual environment shell with access to installed dependencies and Python interpreters. Prerequisites include a previously created environment, and the user can now interactively run Python commands or use command-line tools.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nhatch -e test shell\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Inheritance in TOML\nDESCRIPTION: Shows how to set up environment inheritance using the template option and customize inherited settings.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.foo]\ntype = \"baz\"\nskip-install = true\n\n[tool.hatch.envs.bar]\ntemplate = \"foo\"\nskip-install = false\n```\n\n----------------------------------------\n\nTITLE: Configuring the sdist Builder in TOML\nDESCRIPTION: This code snippet demonstrates how to configure the 'sdist' builder plugin in a Hatch project. Required files such as '/pyproject.toml' and '/hatch.toml' are always included. The configuration is done in the 'hatch.build.targets' section. Ensure the 'tool.hatch.build.targets.sdist' section is correctly defined in the TOML file. Other files should be configured as described in related files.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/builder/sdist.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.sdist]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Build with Hatch pyproject.toml\nDESCRIPTION: Illustrates how to configure a Python project build using Hatch within a `pyproject.toml` file, as an alternative to `setup.py` and `MANIFEST.in`. It defines the build system (`hatchling`), project metadata (name, description, authors, dependencies, etc.), dynamic versioning sourced from `src/foo/__about__.py`, project URLs, optional dependencies (`project.optional-dependencies`), console scripts (`project.scripts`), and specifies files to include in the source distribution target (`tool.hatch.build.targets.sdist`).\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"foo\"\ndescription = \"...\"\nreadme = \"README.md\"\nauthors = [\n  { name = \"...\", email = \"...\" },\n]\nclassifiers = [\n  \"...\",\n]\nkeywords = [\n  \"...\",\n]\nrequires-python = \">=3.8\"\ndependencies = [\n  \"...\",\n]\ndynamic = [\"version\"]\n\n[project.urls]\nDocumentation = \"...\"\nSource = \"...\"\n\n[project.optional-dependencies]\nfeature = [\"...\"]\n\n[project.scripts]\nfoo = \"foo.cli:main\"\n\n[tool.hatch.version]\npath = \"src/foo/__about__.py\"\n\n[tool.hatch.build.targets.sdist]\ninclude = [\n  \"/src\",\n  \"/tests\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Matrices in pyproject.toml\nDESCRIPTION: Example configuration for `pyproject.toml` demonstrating how to define matrices for an environment (`test`). This allows generating multiple environment variations based on combinations of variables like Python version, dependency versions, or features.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test]\ndependencies = [\n  \"pytest\"\n]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.10\", \"3.11\"]\nversion = [\"42\", \"3.14\"]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Randomizing Test Order with Hatch CLI\nDESCRIPTION: This snippet demonstrates how to randomize the order of tests using the Hatch CLI for better coverage and detection of dependencies between tests.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nhatch test --randomize\n```\n\n----------------------------------------\n\nTITLE: Overriding UV Dependency Version in Hatch TOML\nDESCRIPTION: This TOML snippet allows the user to specify a custom version range for the UV dependency within the hatch-uv internal environment. By setting the \"dependencies\" array under [tool.hatch.envs.hatch-uv], users can ensure a compatible or required version of UV is used for all environments that share it. This method is effective when deviating from the default version provided by Hatch, with the constraint that provided versions must remain compatible with core Hatch features.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/environment/select-installer.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-uv]\ndependencies = [\n  \"uv>9000\",\n]\n\n```\n\n----------------------------------------\n\nTITLE: Example Python Script for CLI Entry Point - Python\nDESCRIPTION: Illustrates what happens when the defined CLI script is run: imports the referenced function and passes its result as exit code. Requires 'pkg.subpkg' and 'func' to exist and be importable. Input: N/A. Output: Exit status code from func(); limitation: exit code must be int.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nfrom pkg.subpkg import func\n\nsys.exit(func())\n```\n\n----------------------------------------\n\nTITLE: Appending Values to Array Type Options via Overrides in Hatch TOML\nDESCRIPTION: Shows how to use overrides in `pyproject.toml` to append values to array-type options, such as `dependencies` or `commands`. Values are provided as an array of strings or inline tables (which can include conditional logic). This method adds the specified items to the existing list defined for the option, rather than replacing it.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nmatrix.foo.dependencies = [\n  \"httpx\",\n  { value = \"cryptography\" },\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Build Hook Execution Order - Hatch - TOML\nDESCRIPTION: This snippet shows multiple TOML tables to illustrate the execution order of build hooks in Hatch, combining both target-specific and global hooks. In this configuration, 'hook2' is set for target 'foo', while 'hook3' and 'hook1' are defined globally. When building target 'foo', global hooks are executed in definition order, followed by the target-specific hook. No additional parameters provided; focus is on the structural relationship. Requires proper TOML syntax and Hatch's build system. Limitation: Only the defined hooks in order are executed.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_26\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.foo.hooks.hook2]\n\n[tool.hatch.build.hooks.hook3]\n[tool.hatch.build.hooks.hook1]\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Project Version with Hatch CLI\nDESCRIPTION: Shows how to use the `hatch version` command without arguments to retrieve and display the project's current version as determined by the configured version source.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ hatch version\n0.0.1\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Packages Inside a Hatch Environment Using pip (Console)\nDESCRIPTION: This snippet displays the result of running 'pip list' within a Hatch-managed environment shell. It confirms installation of required test dependencies ('pytest', 'pytest-cov'), an editable install of the project, and third-party packages. Useful for verifying environment provisioning and ensuring the correct project version is linked for development. Output columns include package name, version, and project location if installed in editable mode.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ pip list\nPackage     Version Editable project location\n----------- ------- ----------------------------------------------------\ncoverage    7.4.1\niniconfig   2.0.0\npackaging   23.2\npip         23.3.1\npluggy      1.4.0\npytest      8.0.0\npytest-cov  4.1.0\nyourproject 0.1.0  /your/path/to/yourproject\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Dependencies to Inherited Environments in TOML\nDESCRIPTION: Shows how to add extra dependencies to an environment that inherits from another without redeclaring all dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default]\ndependencies = [\n  \"foo\",\n  \"bar\",\n]\n\n[tool.hatch.envs.experimental]\nextra-dependencies = [\n  \"baz\",\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version for Environments in TOML\nDESCRIPTION: Demonstrates how to specify the Python version or interpreter path for an environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\npython = \"3.10\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Target Versions\nDESCRIPTION: Demonstrates how to specify exact versions for a build target that supports multiple build strategies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.<TARGET_NAME>]\nversions = [\n  \"v1\",\n  \"beta-feature\",\n]\n```\n\n----------------------------------------\n\nTITLE: Executing a Command Directly within a Hatch Environment via CLI\nDESCRIPTION: Shows how to run a command within a specified Hatch environment (default, in this case) without explicitly entering a shell, using `hatch run`. This example executes a Python command to print the interpreter's path.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhatch run python -c \"import sys;print(sys.executable)\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version Requirement in pyproject.toml - TOML\nDESCRIPTION: This defines the minimum Python version required for the project. The 'requires-python' field enforces installation only for compatible Python versions. Format uses version specifiers as in PEP 440. No external dependencies; input: version string.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nrequires-python = \">=3.8\"\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Environments in TOML\nDESCRIPTION: Shows how to define environment variables for a specific environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.docs]\ndependencies = [\n  \"mkdocs\"\n]\n[tool.hatch.envs.docs.env-vars]\nSOURCE_DATE_EPOCH = \"1580601600\"\n```\n\n----------------------------------------\n\nTITLE: Defining Project Dependencies in pyproject.toml\nDESCRIPTION: Example configuration snippet for `pyproject.toml` showing how to add a runtime dependency (`cowsay`) to the project under the `[project]` table's `dependencies` array.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\ndependencies = [\n  \"cowsay\"\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Trove Classifiers in pyproject.toml - TOML\nDESCRIPTION: Lists classifier strings to categorize the project (e.g., development status, license, framework). Used for indexing and search in PyPI. Each classifier is a string per the Trove classifier specification.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nclassifiers = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Requiring Runtime Dependencies for Build Target\nDESCRIPTION: Demonstrates how to declare dependence on the project's runtime dependencies for a build target.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.your-target-name]\nrequire-runtime-dependencies = true\n```\n\n----------------------------------------\n\nTITLE: Displaying Defined Hatch Environments and Matrices via CLI\nDESCRIPTION: Shows the output of the `hatch env show --ascii` command, which lists all defined standalone environments (like `default`) and matrix environments (like those derived from the `test` matrix configuration), including their type and dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ hatch env show --ascii\n     Standalone\n+---------+---------+\n| Name    | Type    |\n+=========+=========+\n| default | virtual |\n+---------+---------+\n                        Matrices\n+------+---------+----------------------+--------------+\n| Name | Type    | Envs                 | Dependencies |\n+======+=========+======================+==============+\n| test | virtual | test.py3.10-42       | pytest       |\n|      |         | test.py3.10-3.14     |              |\n|      |         | test.py3.11-42       |              |\n|      |         | test.py3.11-3.14     |              |\n|      |         | test.py3.11-9000-foo |              |\n|      |         | test.py3.11-9000-bar |              |\n|      |         | test.py3.12-9000-foo |              |\n|      |         | test.py3.12-9000-bar |              |\n+------+---------+----------------------+--------------+\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Python Versions with Hatch CLI (Shell)\nDESCRIPTION: Shows how to install multiple Python distributions (3.12, 3.11, and pypy3.10) at once by providing multiple distribution names to the `hatch python install` command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhatch python install 3.12 3.11 pypy3.10\n```\n\n----------------------------------------\n\nTITLE: Configuring Detached Environments in TOML\nDESCRIPTION: Shows how to create a detached environment that doesn't inherit from others and skips project installation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.lint]\ndetached = true\n```\n\n----------------------------------------\n\nTITLE: Configuring File Inclusion and Exclusion Patterns\nDESCRIPTION: Shows how to specify include and exclude patterns for file selection in the build process.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.sdist]\ninclude = [\n  \"pkg/*.py\",\n  \"/tests\",\n]\nexclude = [\n  \"*.json\",\n  \"pkg/_compat.py\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Output Directory\nDESCRIPTION: Demonstrates how to specify a custom output directory for build artifacts.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build]\ndirectory = \"<PATH>\"\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Python Version with Hatch CLI (Shell)\nDESCRIPTION: Demonstrates how to install a specific Python distribution (version 3.12) using the `hatch python install` command. This command downloads, unpacks the distribution into the configured default directory, and adds it to the user's PATH.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhatch python install 3.12\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Internal Arguments for Hatch Test Scripts in TOML\nDESCRIPTION: This TOML snippet demonstrates how to add extra internal arguments for test scripts using the `extra-args` option under `[tool.hatch.envs.hatch-test]`. These arguments are passed internally, for example, to the underlying test runner like pytest. Here, `\"-vv\"` is added to increase pytest's verbosity.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\nextra-args = [\"-vv\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Analysis Dependencies with Ruff in TOML\nDESCRIPTION: This snippet demonstrates how to configure a Hatch environment to use a specific version of the Ruff static analysis tool. To use this configuration, add the shown section to your project's pyproject.toml or similar Hatch configuration file. The dependency array takes version-pinned packages, enabling you to control when your project upgrades its static analysis tools for reproducibility and stability. Limited to dependency version strings; replace 'X.Y.Z' with the desired Ruff version.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/blog/posts/release-hatch-190.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis]\ndependencies = [\"ruff==X.Y.Z\"]\n```\n\n----------------------------------------\n\nTITLE: Setting License Information for Hatch Templates\nDESCRIPTION: Configures license information for new projects, including whether to add license headers to files and which licenses to use by default. Supports SPDX license identifiers, with multiple licenses stored in a LICENSES directory.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/project-templates.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[template.licenses]\nheaders = true\ndefault = [\n  \"MIT\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Project URLs in pyproject.toml - TOML\nDESCRIPTION: Defines a sub-table [project.urls] mapping descriptive labels to URLs such as documentation or source code. Enables metadata consumers to surface links for users. Limitation: keys should be descriptive; values must be valid URLs.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[project.urls]\nDocumentation = \"...\"\n\"Source code\" = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Self-Referential Feature Groups in pyproject.toml\nDESCRIPTION: Example demonstrating how feature groups can extend other feature groups using self-referential syntax in pyproject.toml.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"awesome-project\"\n\n[project.optional-dependencies]\ncrypto = [\n  \"PyJWT\",\n  \"cryptography\",\n]\ndev = [\n  \"awesome-project[crypto]\",\n  \"black\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Selecting Matrix Environments for Execution in Hatch TOML\nDESCRIPTION: Defines a `test` environment in `pyproject.toml` with dependencies, a script named `cov` (for running pytest with coverage), and a matrix based on `python` and `version` variables. This setup generates four distinct environments (e.g., `test.py3.11-42`, `test.py3.11-3.14`, etc.). Running `hatch run test:cov` targets the root environment `test`, causing Hatch to execute the `cov` script sequentially in all four generated matrix environments.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n]\n\n[tool.hatch.envs.test.scripts]\ncov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"42\", \"3.14\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Local Dependencies with Relative Paths using Context Formatting\nDESCRIPTION: Demonstrates how to specify local dependencies using paths relative to the project's root directory or its parent directory. This utilizes Hatch's context formatting feature (e.g., `{root:uri}`, `{root:parent:uri}`) for platform-independent relative path specification.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n<NAME> @ {root:uri}/pkg_inside_project\n<NAME> @ {root:parent:uri}/pkg_alongside_project\n```\n\n----------------------------------------\n\nTITLE: Defining Build Targets in TOML Configuration\nDESCRIPTION: Shows how to define build targets in the tool.hatch.build.targets section of the TOML configuration file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.<TARGET_NAME>]\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Dependencies in pyproject.toml - TOML\nDESCRIPTION: Lists the mandatory packages required for the project as a string array under 'dependencies' in [project]. Ensures installation will resolve and install listed packages. Use standard version specifiers as needed.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\ndependencies = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Directories\nDESCRIPTION: Specifies custom storage locations for different types of Hatch environments. Each environment type (e.g., virtual) can have its own storage location, either absolute or relative to the project root.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[dirs.env]\n<ENV_TYPE> = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Dependencies via URL\nDESCRIPTION: Shows how to specify remote dependencies (source archives or wheels) by directly providing their HTTPS URLs. This allows installing packages directly from web locations like GitHub releases or package repositories.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nblack @ https://github.com/psf/black/archive/refs/tags/21.10b0.zip\npytorch @ https://download.pytorch.org/whl/cu102/torch-1.10.0%2Bcu102-cp39-cp39-linux_x86_64.whl\n```\n\n----------------------------------------\n\nTITLE: Building Specific Targets with Hatch CLI\nDESCRIPTION: Example of using the Hatch CLI to build only a specific target (wheel) using the -t/--target option.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/build.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ hatch build -t wheel\n[wheel]\ndist/hatch_demo-1rc0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Finding the Filesystem Path of a Hatch Environment (Console)\nDESCRIPTION: This snippet shows how to use the 'hatch env find <ENV_NAME>' command to locate the storage path of a named environment (here, 'test'). It returns an absolute path string, which can differ across OS platforms and user setups. The output is useful for debugging or manual inspection, and the path can be used for further tooling or cleanup.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ hatch env find test\n/your/path/Application Support/hatch/env/virtual/yourproject/twO2iQR3/test\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Dependencies with Features and Environment Markers\nDESCRIPTION: Provides an example of a complex dependency specification that includes optional features (`[feature1,feature2]`) and an environment marker (`python_version < \"3.7\"`). The dependency (with specified features) is only installed if the environment marker evaluates to true. A space before the semicolon is mandatory.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_19\n\nLANGUAGE: text\nCODE:\n```\npkg[feature1,feature2] @ <REFERENCE> ; python_version < \"3.7\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip as the Installer for Hatch Test Environment in TOML\nDESCRIPTION: This TOML configuration overrides the default installer (UV) for the Hatch testing environment and explicitly sets it to `pip`. By specifying `installer = \"pip\"` under `[tool.hatch.envs.hatch-test]`, Hatch will use pip to manage the environment's package installations instead of its default, UV.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\ninstaller = \"pip\"\n```\n\n----------------------------------------\n\nTITLE: Applying Platform-Specific Overrides in Hatch TOML Configuration\nDESCRIPTION: Provides an example of using the `platform` source within the `overrides` table in `pyproject.toml` to modify options based on the current operating system. In this specific case, under the `test` environment, the `scripts` option is modified for the `windows` platform, setting a specific command (`run=pytest -m \"not io_uring\"`). Supported platform conditions are `linux`, `windows`, and `macos`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nplatform.windows.scripts = [\n  'run=pytest -m \"not io_uring\"',\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Local Dependency Format using 'file://' Scheme\nDESCRIPTION: Specifies the general format for declaring a local dependency using the `file://` URI scheme. The `<HOST>` part is primarily for Windows network shares (defaults to `localhost` if omitted), and `<PATH>` points to the source archive, wheel, or package directory. The triple slash `///` is required even when the host is omitted.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n<NAME> @ file://<HOST>/<PATH>\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script with Inline Metadata using Hatch\nDESCRIPTION: This snippet demonstrates a Python script with inline metadata for Hatch. It specifies Python version requirements and dependencies. The script uses httpx to fetch data from the Python PEPs API and rich to pretty-print the results.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/run/python-scripts.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\n#   \"httpx\",\n#   \"rich\",\n# ]\n# ///\n\nimport httpx\nfrom rich.pretty import pprint\n\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Metadata Hook Plugin - Hatch - Python\nDESCRIPTION: This Python code defines a custom metadata plugin for Hatch by subclassing the MetadataHookInterface and implementing its update() method. The plugin reads project metadata such as version, license, and authors from a JSON file and updates the metadata dictionary accordingly. Dependencies include hatchling.metadata.plugin.interface for the MetadataHookInterface, as well as the standard json and os modules; the code expects the JSON metadata file to exist at the specified path relative to the project root. Inputs include the metadata dictionary and an existing JSON file; outputs are direct mutations to the metadata object, setting values in TOML-compatible structures (lists, dicts). Limitations include the necessity of a correctly structured constants JSON file and the presence of the plugin in the expected location unless otherwise configured.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/config/dynamic-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport json\nimport os\n\nfrom hatchling.metadata.plugin.interface import MetadataHookInterface\n\n\nclass JSONMetaDataHook(MetadataHookInterface):\n    def update(self, metadata):\n        src_file = os.path.join(self.root, \"gnumeric\", \".constants.json\")\n        with open(src_file) as src:\n            constants = json.load(src)\n            metadata[\"version\"] = constants[\"__version__\"]\n            metadata[\"license\"] = constants[\"__license__\"]\n            metadata[\"authors\"] = [\n                {\"name\": constants[\"__author__\"], \"email\": constants[\"__author_email__\"]},\n            ]\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration for Hatch Binary Build Target (TOML)\nDESCRIPTION: This TOML snippet shows the essential configuration section within a `pyproject.toml` file required to enable and configure the `binary` build target using the Hatch build system. Options specific to the binary builder, such as `scripts`, `python-version`, and `pyapp-version`, are defined under this table.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/builder/binary.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.build.targets.binary]\n```\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Overriding Default Hatch Test Environment Matrix\nDESCRIPTION: This placeholder indicates where a user can define a custom environment matrix, overriding the default test matrix provided by Hatch for the `hatch-test` environment. Defining a matrix allows running tests against multiple configurations (e.g., different Python versions). The actual matrix definition is not shown here.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n<HATCH_TEST_ENV_MATRIX>\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using Homebrew in Bash\nDESCRIPTION: This command installs Hatch using Homebrew, a package manager for macOS. It's a straightforward method for macOS users.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install hatch\n```\n\n----------------------------------------\n\nTITLE: Specifying Simple Readme File in pyproject.toml - TOML\nDESCRIPTION: Sets the project's readme field to a filename, typically for package display. File must have a .md, .rst, or .txt extension. The build system expects this file at project root; used for long_description during packaging. No external dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nreadme = \"README.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Environments using TOML\nDESCRIPTION: This TOML configuration defines multiple environments for testing using different Python versions and features. It shows how the environments are expanded based on the matrix and the preferred order based on the system's Python version.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\n\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.11\"]\nfeature = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatch Default Environment Collector in TOML\nDESCRIPTION: This TOML snippet shows the configuration structure for Hatch's `default` environment collector within a `pyproject.toml` file. It defines the table `[tool.hatch.env.collectors.default]` where specific options (though none are currently available) would be placed. This collector is implicitly used to provide a default virtual environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment-collector/default.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.env.collectors.default]\n```\n\n----------------------------------------\n\nTITLE: Filtering Environment Variables in TOML\nDESCRIPTION: Demonstrates how to filter environment variables using include and exclude patterns.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\nenv-include = [\n  \"FOO*\",\n]\nenv-exclude = [\n  \"BAR\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable Overrides in Hatch TOML Configuration\nDESCRIPTION: Illustrates using the `env` source in the `overrides` table in `pyproject.toml` to conditionally modify environment options based on environment variables. The example modifies the `dev-mode` option for the `test` environment, setting it to `false` only if the `GITHUB_ACTIONS` environment variable has the value `\"true\"`. This uses an inline table with `value` and `if` keys for conditional setting.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nenv.GITHUB_ACTIONS.dev-mode = { value = false, if = [\"true\"] }\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Build Hook in Python\nDESCRIPTION: Example of a custom build hook class implementation that inherits from BuildHookInterface. The file should be named 'hatch_build.py' by default and can contain multiple subclasses with a get_build_hook function to specify the desired hook.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/build-hook/custom.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hatchling.builders.hooks.plugin.interface import BuildHookInterface\n\n\nclass CustomBuildHook(BuildHookInterface):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Complex Readme Using Text and Content-Type in pyproject.toml - TOML\nDESCRIPTION: This code provides the full project readme inline with specified content-type. The 'content-type' must be text/markdown or text/x-rst for inline text. Used when embedding the full description text rather than referencing a file. Limitation: Large texts may become unwieldy in pyproject.toml.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nreadme = {\"text\" = \"...\", \"content-type\" = \"text/markdown\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using macOS installer in Bash\nDESCRIPTION: This command uses the macOS installer utility to install Hatch from the downloaded package. It requires sudo privileges to install files in system directories.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo installer -pkg ./hatch-universal.pkg -target /\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Inclusion\nDESCRIPTION: Demonstrates how to include specific packages in the build, collapsing the path to the final component.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel]\npackages = [\"src/foo\"]\n```\n\n----------------------------------------\n\nTITLE: Example: Using Project-Relative Environment Directory\nDESCRIPTION: Configures virtual environments to be stored in a .hatch directory within each project's root directory, using a relative path that's resolved per project.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[dirs.env]\nvirtual = \".hatch\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Regex Pattern for Hatch Versioning in TOML\nDESCRIPTION: Sets a custom regular expression (`pattern`) to locate the version string within the specified file (`path`). The pattern must include a named capture group called `version`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.version]\npath = \"pkg/__init__.py\"\npattern = \"BUILD = 'b(?P<version>[^']+)'\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Hatch Builder in pyproject.toml\nDESCRIPTION: This TOML snippet demonstrates how to configure a custom build target named `custom` within the `pyproject.toml` file for the Hatch build system. This section, under `[tool.hatch.build.targets.custom]`, is used to enable the custom builder plugin and specify its options, such as the path to the Python file containing the builder class.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/builder/custom.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.custom]\n```\n\n----------------------------------------\n\nTITLE: Defining Build Dependencies in TOML for Hatch Projects\nDESCRIPTION: This snippet shows how to specify additional dependencies for the build environment in a Hatch project's configuration file. It adds Cython as a build dependency.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/build.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-build]\ndependencies = [\n  \"cython\",\n]\n```\n\n----------------------------------------\n\nTITLE: Generating a Self Report with Hatch CLI - Shell\nDESCRIPTION: Invokes the 'hatch self report' command from the terminal to generate an environment report for troubleshooting. This command automatically opens a pre-filled issue in the default web browser, streamlining the reporting process. Requires the 'hatch' CLI to be installed and in PATH.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/meta/report-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hatch self report\n```\n\n----------------------------------------\n\nTITLE: Skipping Project Installation in Environments in TOML\nDESCRIPTION: Demonstrates how to skip the installation of the project in a specific environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.lint]\nskip-install = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Installations Directory\nDESCRIPTION: Specifies where Hatch should install Python versions. The default 'isolated' value uses a directory within Hatch's data directory.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[dirs]\npython = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Applying Name-Based Overrides with Regex in Hatch TOML\nDESCRIPTION: Demonstrates using the `name` source in the `overrides` table in `pyproject.toml` to modify options by matching a regular expression against the generated environment name. The name matched excludes the environment prefix (e.g., `test.`) for non-default environments. The example sets the `TESTING_UNSTABLE` environment variable to `true` for any generated environment whose name component (derived from matrix variables) starts with `0` (e.g., `0.1.0`, `0.2.0`).\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nname.\"^0\".env-vars = \"TESTING_UNSTABLE=true\"\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"0.1.0\", \"0.2.0\", \"1.0.0\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Hatch Environment Collector Class (Python)\nDESCRIPTION: This Python snippet provides a basic template for creating a custom environment collector in a Python file (e.g., `hatch_plugins.py`). It demonstrates importing the required base class `EnvironmentCollectorInterface` and defining a subclass. The actual implementation logic is represented by `...`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment-collector/custom.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hatch.env.collectors.plugin.interface import EnvironmentCollectorInterface\n\n\nclass CustomEnvironmentCollector(EnvironmentCollectorInterface):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running the Hatch self-update command\nDESCRIPTION: Shell command to update Hatch to the latest version using the built-in management feature available in the new binaries.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/blog/posts/release-hatch-180.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhatch self update\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Python Versions with Hatch CLI (Shell)\nDESCRIPTION: Illustrates how to update specific installed Python distributions (3.12, 3.11, pypy3.10) to their latest available versions using the `hatch python update` command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nhatch python update 3.12 3.11 pypy3.10\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Platforms for Environments in TOML\nDESCRIPTION: Shows how to specify the operating systems that are compatible with an environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\nplatforms = [\"linux\", \"windows\", \"macos\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Reproducible Builds\nDESCRIPTION: Shows how to disable reproducible builds for all build targets.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build]\nreproducible = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Version Scheme in Hatch (TOML)\nDESCRIPTION: Demonstrates how to configure the standard version scheme in Hatch using a TOML snippet for pyproject.toml. The snippet shows the required section and the scheme name that must be set. This configuration enables the use of the standard version plugin and expects users to define it under the [tool.hatch.version] section. No additional dependencies are needed beyond Hatch itself; users should ensure this block is placed in their project's pyproject.toml file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/version-scheme/standard.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.version]\nscheme = \"standard\"\n```\n\n----------------------------------------\n\nTITLE: Running a Command Using a Newly Added Dependency via CLI\nDESCRIPTION: Demonstrates running a command (`cowsay`) using `hatch run`. Because the `cowsay` dependency was newly added in `pyproject.toml`, Hatch first syncs the environment's dependencies before executing the command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ hatch run cowsay -t \"Hello, world!\"\nSyncing dependencies\n  _____________\n| Hello, world! |\n  =============\n             \\\n              \\\n                ^__^\n                (oo)\\_______\n                (__)\\       )\\/\\\n                    ||----w |\n                    ||     ||\n```\n\n----------------------------------------\n\nTITLE: Specifying Complex Readme Using File and Content-Type in pyproject.toml - TOML\nDESCRIPTION: Defines a complex readme configuration with both file path and content-type. Used for precise control over parsing and rendering in package indexes. Content-type must be one of: text/markdown, text/x-rst, or text/plain; optional charset can be added for file encoding. Limitation: file must exist and be readable.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nreadme = {\"file\" = \"README.md\", \"content-type\" = \"text/markdown\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling src-layout in Hatch Templates\nDESCRIPTION: Configures whether to use the src directory layout for new Python packages. This layout places package code in a src directory, which has advantages for testing and package isolation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/project-templates.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[template.plugins.default]\nsrc-layout = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Mode Directories\nDESCRIPTION: Shows how to specify directories to be added to Python's search path in dev mode.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build]\ndev-mode-dirs = [\".\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-Install Commands in TOML\nDESCRIPTION: Demonstrates how to define commands that run before the project is installed in an environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\npre-install-commands = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Module Imports in Python\nDESCRIPTION: This Python code snippet shows the adjustment of import statements to use absolute imports as required by Hatch when dealing with versioned modules. It provides an example of how to transform relative imports into absolute imports and update the corresponding Hatch configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/version-source/code.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom ._version import get_version\n\n__version__ = get_version()\n\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pkg._version import get_version\n\n__version__ = get_version()\n\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.version]\nsource = \"code\"\npath = \"src/pkg/__init__.py\"\nsearch-paths = [\"src\"]\n\n```\n\n----------------------------------------\n\nTITLE: Running Tests in All Compatible Environments using Hatch CLI\nDESCRIPTION: This snippet defines a configuration for running tests in specified environments across different platforms using the 'matrix' and 'overrides' options. The table outlines where tests will run based on platform compatibility.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\nfeature = [\"foo\", \"bar\"]\n\n[tool.hatch.envs.hatch-test.overrides]\nmatrix.feature.platforms = [\n  { value = \"linux\", if = [\"foo\", \"bar\"] },\n  { value = \"windows\", if = [\"foo\"] },\n  { value = \"macos\", if = [\"bar\"] },\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Authors and Maintainers in pyproject.toml - TOML\nDESCRIPTION: Lists individuals or organizations responsible for the project as authors or maintainers. Each entry includes 'name' and 'email'. Use under the [project] section; fields are arrays of tables. Limitation: if identical, use only 'authors'.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nauthors = [\n  { name = \"...\", email = \"...\" },\n]\nmaintainers = [\n  { name = \"...\", email = \"...\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Referential Environments in TOML\nDESCRIPTION: Demonstrates how to create a self-referential environment by setting the template to the environment's own name.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.foo]\ntemplate = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring the Custom Hatch Environment Collector (TOML)\nDESCRIPTION: This TOML snippet shows how to configure the custom environment collector plugin within the `pyproject.toml` file under the `tool.hatch.env.collectors` section. The plugin name is fixed as `custom`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment-collector/custom.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.env.collectors.custom]\n```\n\n----------------------------------------\n\nTITLE: Configuring Explicit Directory Inclusion\nDESCRIPTION: Shows how to explicitly include specific directories in the build process.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.sdist]\nonly-include = [\"pkg\", \"tests/unit\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Version Source in TOML for Hatch (Python)\nDESCRIPTION: This TOML snippet demonstrates how to configure the 'env' version source plugin in Hatch by specifying the source as 'env'. It requires the user to set additional options, such as the 'variable' name, when integrating with build pipeline environments. Inputs include TOML sections under '[tool.hatch.version]', and the configuration is intended for use with Hatch-managed Python projects where the version is propagated via environment variables.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/version-source/env.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.version]\nsource = \"env\"\n```\n\n----------------------------------------\n\nTITLE: Updating Project Version Explicitly with Hatch CLI\nDESCRIPTION: Demonstrates updating the project's version to a specific new value using the `hatch version` command followed by the desired version string. The command outputs the old and new versions.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ hatch version \"0.1.0\"\nOld: 0.0.1\nNew: 0.1.0\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Hatch Build Process in TOML\nDESCRIPTION: This configuration sets environment variables that will be active during the build process. It demonstrates setting the SOURCE_DATE_EPOCH variable for reproducible builds.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/build.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-build.env-vars]\nSOURCE_DATE_EPOCH = \"1580601600\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Build Hook in Hatch Project\nDESCRIPTION: Example TOML configuration for setting up the version build hook in a Hatch project. This can be configured at the build level or for specific build targets.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/build-hook/version.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.version]\n[tool.hatch.build.targets.<TARGET_NAME>.hooks.version]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Versioning in pyproject.toml - TOML\nDESCRIPTION: This snippet configures the 'version' field to be determined dynamically. The 'dynamic' array includes 'version', deferring its value, and [tool.hatch.version] specifies where to read it from. Requires support for dynamic fields via a compatible build backend, such as Hatch. Input: N/A; Output: N/A; Limitation: Proper backend/plugins needed to resolve 'dynamic' fields.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\ndynamic = [\"version\"]\n\n[tool.hatch.version]\npath = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Install Commands in TOML\nDESCRIPTION: Shows how to define commands that run after the project is installed in an environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\npost-install-commands = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Regex Version Source in Hatch (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to configure the Hatch build tool to use the `regex` version source. It sets the `source` key within the `[tool.hatch.version]` table to specify the plugin name. Further options like `path` (required) and `pattern` (optional) are needed for full functionality but are configured separately.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/version-source/regex.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.version]\nsource = \"regex\"\n```\n\n----------------------------------------\n\nTITLE: Installing All Compatible Python Versions with Hatch CLI (Shell)\nDESCRIPTION: Explains how to install all available Python distributions compatible with the system using the special `all` argument with the `hatch python install` command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhatch python install all\n```\n\n----------------------------------------\n\nTITLE: Setting Delay Between Test Retries in Hatch Testing via TOML\nDESCRIPTION: This TOML configuration specifies the delay in seconds between attempts when retrying failed tests. The `retry-delay` option under `[tool.hatch.envs.hatch-test]` corresponds to the `--retry-delay` flag of the `hatch test` command. In this example, there will be a 1-second delay before retrying a failed test.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\nretry-delay = 1\n```\n\n----------------------------------------\n\nTITLE: Enabling the Index Publisher in Global Hatch Configuration (TOML)\nDESCRIPTION: This TOML snippet shows the basic configuration structure required in Hatch's global `config.toml` file to enable and provide settings for the `index` publisher plugin. It establishes the main table for index-specific configurations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/publisher/package-index.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml tab=\"config.toml\"\n[publish.index]\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Project Description in pyproject.toml - TOML\nDESCRIPTION: This code shows how to provide a summary of the project using the 'description' field in [project]. Used for display on package repositories and documentation. Input: text summary; Output: visible project metadata. No external dependencies or constraints.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\ndescription = '...'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Arguments for Hatch Test Command in TOML\nDESCRIPTION: This TOML configuration defines the default arguments passed to the `hatch test` command using the `default-args` option within the `[tool.hatch.envs.hatch-test]` table. In this example, `tests` is specified as the default argument, typically indicating the directory containing the tests. Command-line flags for `hatch test` will override these defaults.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\ndefault-args = [\"tests\"]\n```\n\n----------------------------------------\n\nTITLE: Defining GUI Entry Points in pyproject.toml - TOML\nDESCRIPTION: Defines [project.gui-scripts] mapping GUI script names to importable callables. On Windows, these are installed specially to avoid launching a console on start. Requires compatible platform installer. Key is script command, value is Python object path.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[project.gui-scripts]\ngui-name = \"pkg.subpkg:func\"\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using Windows Installer in PowerShell\nDESCRIPTION: These commands use the Windows msiexec utility to install Hatch from the downloaded MSI file. Two versions are provided for x64 and x86 architectures.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /passive /i https://github.com/pypa/hatch/releases/latest/download/hatch-x64.msi\n```\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /passive /i https://github.com/pypa/hatch/releases/latest/download/hatch-x86.msi\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Hatch Environment Plugins in TOML\nDESCRIPTION: This TOML snippet demonstrates how to specify external Hatch environment plugins required by a project within the `tool.hatch.env.requires` array in the `pyproject.toml` file. This ensures Hatch automatically manages the installation of these plugins alongside the project. Replace \"...\" with the actual package names of the required plugins.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.env]\nrequires = [\n  \"...\",\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying SPDX License Expression in pyproject.toml - TOML\nDESCRIPTION: Declares the project license using an SPDX expression. Placed under the [project] section, this allows multiple licenses and correct SPDX formatting. Prerequisite: choose valid SPDX identifiers per PEP 639. Limitation: string must adhere to SPDX spec.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nlicense = \"Apache-2.0 OR MIT\"\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Projects with Hatchling\nDESCRIPTION: This snippet demonstrates various commands to build or install a project using Hatchling as the backend. It includes examples using pip for installation, the build module for building, and Hatch itself for building.\nSOURCE: https://github.com/pypa/hatch/blob/master/backend/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# install using pip\npip install /path/to/project\n\n# build\npython -m build /path/to/project\n\n# build with Hatch\nhatch build /path/to/project\n```\n\n----------------------------------------\n\nTITLE: Enabling Parallel Test Execution in Hatch Testing via TOML\nDESCRIPTION: This TOML configuration enables parallel test execution within the Hatch testing environment. Setting `parallel = true` under `[tool.hatch.envs.hatch-test]` corresponds to the `--parallel` or `-p` flag of the `hatch test` command, usually leveraging the `pytest-xdist` plugin.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\nparallel = true\n```\n\n----------------------------------------\n\nTITLE: Marking Fields as Dynamically Set in pyproject.toml - TOML\nDESCRIPTION: Declares that specified fields are set at build time using the 'dynamic' array in [project]. Used for things like version, description, etc. Build tools must resolve these fields before packaging. Input: field names as array; Output: unset in source.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\ndynamic = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Environment Plugin Hook - Pluggy - Python\nDESCRIPTION: This snippet illustrates how to define a plugin registration hook for Hatch using Pluggy and Hatch's own hook markers. The function 'hatch_register_environment' is decorated with '@hookimpl' and returns the plugin class to register. Dependencies include 'hatchling.plugin' for hookimpl and the plugin class itself (imported from a local module). This hook enables discovery of new plugin types and must return either a single class or a list of plugin classes, each conforming to the interface required by Hatch.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/about.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hatchling.plugin import hookimpl\\n\\nfrom .plugin import SpecialEnvironment\\n\\n\\n@hookimpl\\ndef hatch_register_environment():\\n    return SpecialEnvironment\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Mode in Hatch\nDESCRIPTION: Configures Hatch to operate in project mode, which works with a specific selected project defined in the configuration. Projects can be defined with their full paths or found in specified directories.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nmode = \"project\"\nproject = \"proj1\"\n\n[projects]\nproj1 = \"/path/to/project1\"\nproj2 = {\"location\": \"/path/to/project2\"}\n\n[dirs]\nproject = [\"/path/to/monorepo1\", \"/path/to/monorepo2\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Author Information in Hatch Templates\nDESCRIPTION: Sets the author's name and email address for new project templates. These values will be used when generating new projects with the 'hatch new' command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/project-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[template]\nname = \"...\"\nemail = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for python_version Environment Marker\nDESCRIPTION: Python code snippet showing how the python_version environment marker is implemented in Python, returning the first two parts of the Python version.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport platform\n'.'.join(platform.python_version_tuple()[:2])\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Retries in Hatch Testing via TOML\nDESCRIPTION: This TOML configuration sets the number of times failed tests should be retried within the Hatch testing environment. The `retries` option in `[tool.hatch.envs.hatch-test]` corresponds to the `--retries` flag of the `hatch test` command, often implemented using the `pytest-rerunfailures` plugin. Here, failed tests will be retried up to 2 times.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\nretries = 2\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Version Segment Updates with Hatch CLI\nDESCRIPTION: Shows how to apply multiple version segment updates simultaneously by providing a comma-separated list of segment names to the `hatch version` command. This example increments the major version and adds a release candidate tag.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ hatch version major,rc\nOld: 0.2.0\nNew: 1.0.0rc0\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch on Fedora using DNF in Bash\nDESCRIPTION: This command installs Hatch on Fedora Linux using the DNF package manager. It requires sudo privileges to install system-wide.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install hatch\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Integration with Custom Arguments\nDESCRIPTION: Specifies a shell to use when entering Hatch environments with custom launch arguments, overriding the default arguments that would normally be used for that shell.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[shell]\nname = \"bash\"\nargs = [\"--login\"]\n```\n\n----------------------------------------\n\nTITLE: Publishing Specific Artifacts with Hatch\nDESCRIPTION: Shows how to publish specific package artifacts using the `hatch publish` command by providing the exact paths to the desired files as arguments. This overrides the default behavior of publishing all artifacts from the `dist` directory. Only files ending with `.whl` or `.tar.gz` will be considered for publishing.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/publish.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhatch publish /path/to/artifacts foo-1.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Target Dependencies\nDESCRIPTION: Shows how to specify additional dependencies for a build target that will be installed in the build environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.your-target-name]\ndependencies = [\n  \"your-builder-plugin\"\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pairs in Mapping Types via Overrides in Hatch TOML\nDESCRIPTION: Demonstrates using overrides in `pyproject.toml` to set key-value pairs within mapping-type options like `env-vars` or `scripts`. Keys can be set using a simple string (`KEY=VALUE`), or an array containing strings or inline tables (with `key` and `value`). If the value part is omitted (no `=` in string, no `value` key in table), the value defaults to the value of the source condition that triggered the override.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nmatrix.foo.env-vars = \"KEY=VALUE\"\nmatrix.bar.env-vars = [\n  \"KEY1=VALUE1\",\n  { key = \"KEY2\", value = \"VALUE2\" },\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Finalizing Project Version Release with Hatch CLI\nDESCRIPTION: Demonstrates using the `release` segment with the `hatch version` command to update the version to its final release form, typically removing any pre-release identifiers like `rc0`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n```console\n$ hatch version release\nOld: 1.0.0rc0\nNew: 1.0.0\n```\n```\n\n----------------------------------------\n\nTITLE: Requiring Runtime Dependencies for Build Hooks - Hatch - TOML\nDESCRIPTION: This snippet configures a build hook to require the project's runtime dependencies by setting require-runtime-dependencies to true. Used in the [tool.hatch.build.hooks.your-hook-name] section. It instructs Hatch to install all regular (runtime) project dependencies in the build environment for this hook. Requires TOML configuration and valid project metadata. Input is a boolean; there are no direct outputs but affects the build environment composition. Limitation: Only effective if runtime dependencies are defined elsewhere.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.your-hook-name]\nrequire-runtime-dependencies = true\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Directory Generation in Hatch Templates\nDESCRIPTION: Adds a tests directory with environments for testing and linting to newly created projects. When set to true, Hatch will automatically create this directory structure when generating projects.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/project-templates.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[template.plugins.default]\ntests = true\n```\n\n----------------------------------------\n\nTITLE: Building Specific Target Versions with Hatch CLI\nDESCRIPTION: Example of using the Hatch CLI to build a specific version of a target by appending a colon and version name to the target option.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/build.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ hatch -v build -t wheel:standard\n[wheel]\nBuilding `wheel` version `standard`\ndist/hatch_demo-1rc0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Customizing Matrix Environment Name Formatting in Hatch TOML\nDESCRIPTION: Illustrates setting the `matrix-name-format` option within the `[tool.hatch.envs.test]` table in `pyproject.toml`. This option controls how generated environment names are constructed from matrix variables, using `{variable}` and `{value}` placeholders. The example uses `\"{variable}_{value}\"`, resulting in names like `test.version_42-feature_foo` and `test.version_42-feature_bar`. The default format is `\"{value}\"`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test]\nmatrix-name-format = \"{variable}_{value}\"\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\"]\nfeature = [\"foo\", \"bar\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Forced File Inclusion\nDESCRIPTION: Shows how to force include specific files or directories from anywhere in the file system and map them to desired paths in the distribution.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel.force-include]\n\"../artifacts\" = \"pkg\"\n\"~/lib.h\" = \"pkg/lib.h\"\n```\n\n----------------------------------------\n\nTITLE: Extending Ruff Configuration in pyproject.toml\nDESCRIPTION: Example showing how to extend Ruff's configuration in pyproject.toml, including format and lint settings with preview features enabled.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.ruff.format]\npreview = true\nquote-style = \"single\"\n\n[tool.ruff.lint]\npreview = true\nextend-select = [\"C901\"]\n\n[tool.ruff.lint.extend-per-file-ignores]\n\"docs/.hooks/*\" = [\"INP001\", \"T201\"]\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatch Settings with Dotted Keys (TOML)\nDESCRIPTION: Presents an alternative, more compact way to define Hatch configuration in TOML files using dotted keys within the `[tool.hatch]` table (e.g., `table1.option = \"...\"`). This achieves the same configuration structure as nested tables but with less verbosity, as per the TOML v1.0.0 specification.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/intro.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch]\noption = \"...\"\ntable1.option = \"...\"\ntable2.option = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Creating the Default Environment Using Hatch CLI (Console)\nDESCRIPTION: This snippet demonstrates how to create the default environment using the \"hatch env create\" command. No dependencies beyond an installed version of Hatch are required. The command automatically sets up a Python virtual environment and installs the current project in development mode. The command does not require additional parameters; it operates on the current project directory and sets up a \"default\" environment for further operations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhatch env create\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Runtime Features for Build Target\nDESCRIPTION: Shows how to declare dependence on specific runtime features of the project for a build target.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.your-target-name]\nrequire-runtime-features = [\n  \"feature1\",\n  \"feature2\",\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Prefix Addition\nDESCRIPTION: Shows how to add a prefix to paths during the build process.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel.sources]\n\"\" = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Installing Python Privately with Hatch CLI (Shell)\nDESCRIPTION: Illustrates installing a Python distribution (3.12) privately using the `--private` flag with `hatch python install`. This prevents the installed distribution from being added to the user's PATH, useful for isolated installations, potentially combined with the directory option.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhatch python install 3.12 --private\n```\n\n----------------------------------------\n\nTITLE: Specifying License Files Glob Pattern in pyproject.toml - TOML\nDESCRIPTION: Defines additional license files to include in source distributions using a glob pattern. Placed as 'license-files' under the [project] section. Ensures compliance with packaging requirements by bundling legal documents. Limitation: files must exist in specified location.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nlicense-files = [\"LICENSES/*\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Build Hook in TOML\nDESCRIPTION: TOML configuration example showing how to set up custom build hooks at both the general and target-specific levels.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/build-hook/custom.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.custom]\n[tool.hatch.build.targets.<TARGET_NAME>.hooks.custom]\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Versions in Default Environment Configuration (TOML)\nDESCRIPTION: This configuration snippet extends the previous example to show how to specify versions for dependencies in the default environment. By indicating 'pydantic>=2.0', Hatch will enforce the minimum version requirement when provisioning the environment. This setup is identical in structure to the previous, but is useful for projects that rely on newer features or fixes within dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default]\ndependencies = [\n  \"pydantic>=2.0\",\n  \"numpy\",\n]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Exit Codes in Scripts in TOML\nDESCRIPTION: Shows how to ignore the exit code of specific commands in a script by prefixing them with a hyphen.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test.scripts]\nerror = [\n  \"- exit 1\",\n  \"exit 3\",\n  \"exit 0\",\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Available and Installed Python Distributions with Hatch CLI (Shell)\nDESCRIPTION: Provides an example output of the `hatch python show` command, displaying tables of installed and available Python distributions with their names and versions.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ hatch python show\n    Installed\n┏━━━━━━┳━━━━━━━━━┓\n┃ Name ┃ Version ┃\n┡━━━━━━╇━━━━━━━━━┩\n│ 3.12 │ 3.12.7  │\n└──────┴─────────┘\n      Available\n┏━━━━━━━━━━┳━━━━━━━━━┓\n┃ Name     ┃ Version ┃\n┡━━━━━━━━━━╇━━━━━━━━━┩\n│ 3.7      │ 3.7.9   │\n├──────────┼─────────┤\n│ 3.8      │ 3.8.20  │\n├──────────┼─────────┤\n│ 3.9      │ 3.9.20  │\n├──────────┼─────────┤\n│ 3.10     │ 3.10.15 │\n├──────────┼─────────┤\n│ 3.11     │ 3.11.10 │\n├──────────┼─────────┤\n│ 3.13     │ 3.13.0  │\n├──────────┼─────────┤\n│ pypy2.7  │ 7.3.15  │\n├──────────┼─────────┤\n│ pypy3.9  │ 7.3.15  │\n├──────────┼─────────┤\n│ pypy3.10 │ 7.3.15  │\n└──────────┴─────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatch Version Source Path in TOML\nDESCRIPTION: Specifies the relative path to the file containing the project's version string within the `pyproject.toml` file. This example uses the default `regex` version source.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/version.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.version]\npath = \"src/hatch_demo/__about__.py\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Special Naming for Python Matrix Variables in Hatch TOML\nDESCRIPTION: Shows a matrix configuration in `pyproject.toml` where the `python` variable is used. This demonstrates the special naming rule: `python` or `py` variables rank first in the generated name, and their values are prefixed with `py` if not already present (e.g., `3.9` becomes `py3.9`). This results in names like `test.py3.9-42` and `test.pypy3-42`. The value of this variable also implicitly sets the Python version for the generated environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\"]\npython = [\"3.9\", \"pypy3\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Test Environment in pyproject.toml (TOML)\nDESCRIPTION: This configuration snippet demonstrates how to create a named custom environment (\"test\") in pyproject.toml using Hatch. It lists 'pytest' and 'pytest-cov' as dependencies for the 'test' environment. Both dependencies are installed into this isolated environment when 'hatch' is instructed to create it, supporting testing and code coverage workflows. Only the environment name should be customized as needed by end users.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test]\ndependencies = [\n  \"pytest\",\n  \"pytest-cov\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Index Repositories in Hatch (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to define a named custom repository (e.g., `private`) within the `[publish.index.repos]` table in Hatch's configuration file (`config.toml`). This allows referencing the repository by its name (`private`) when publishing using the `-r` option or `HATCH_INDEX_REPO` environment variable, instead of using the full URL. The `url` key specifies the target repository URL, and other relevant configuration options can be added.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/publish/repo.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[publish.index.repos.private]\nurl = \"...\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies with Parent URI Path in TOML\nDESCRIPTION: This snippet demonstrates how to use the 'parent' and 'uri' modifiers with the 'root' field to specify a dependency path in a Hatch environment configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/context.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test]\ndependencies = [\n    \"example-project @ {root:parent:parent:uri}/example-project\",\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Dependencies for Hatch Test Environment in TOML\nDESCRIPTION: This TOML snippet shows how to specify additional dependencies required by the tests within the Hatch testing environment. The `extra-dependencies` array under `[tool.hatch.envs.hatch-test]` lists packages that will be installed into the test environment alongside project dependencies and default testing tools. This example includes various common pytest plugins and testing utilities.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\nextra-dependencies = [\n  \"pyfakefs\",\n  \"pytest-asyncio\",\n  \"pytest-benchmark\",\n  \"pytest-memray\",\n  \"pytest-playwright\",\n  \"pytest-print\",\n]\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Overriding Default Hatch Test Environment Scripts\nDESCRIPTION: This placeholder signifies where users can redefine the default scripts executed by the `hatch test` command. By default, Hatch defines scripts like `run` (standard execution), `run-cov` (execution with coverage), `cov-combine` (coverage data combination), and `cov-report` (coverage report generation). Overriding these requires redefining them within the `[tool.hatch.envs.hatch-test.scripts]` table. The actual script definitions are not shown here.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n<HATCH_TEST_ENV_SCRIPTS>\n```\n\n----------------------------------------\n\nTITLE: Overwriting Array/Mapping Options Entirely Using Overrides in Hatch TOML\nDESCRIPTION: Explains how to completely replace the value of an array or mapping option using overrides in `pyproject.toml`, instead of the default behavior of appending or merging. By prefixing the option name with `set-` (e.g., `matrix.foo.set-platforms`), the specified value will overwrite any previously defined value for that option entirely, based on the override condition. The order of application for overwrites follows a specific precedence: platform, environment variables, matrix variables, names.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nmatrix.foo.set-platforms = [\"macos\", \"linux\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Hatch Environment via CLI\nDESCRIPTION: Demonstrates using the `hatch env create` command within a project directory to initialize the default isolated environment. This command sets up the environment, installs the project in development mode, and syncs dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ hatch env create\nCreating environment: default\nInstalling project in development mode\nSyncing dependencies\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Collectors in TOML\nDESCRIPTION: This snippet illustrates the structure of a TOML configuration file where required environment collectors for Hatch are specified. These collectors need to be either manually installed alongside Hatch or listed under `tool.hatch.env.requires` for automatic handling. This setup allows integrating plugins such as hatch-mkdocs.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment-collector/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.env]\nrequires = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Declaring Additional Build Hook Dependencies - Hatch - TOML\nDESCRIPTION: This snippet demonstrates how to add extra dependencies required by a build hook in Hatch. The dependencies key is used within the [tool.hatch.build.hooks.your-hook-name] table, referencing a list of packages to be installed in each build environment. Must be used within a valid Hatch TOML configuration. The example lists 'your-build-hook-plugin' as a dependency. Inputs: list of string package names; output: dependencies installed in build env. Limitation: Dependencies must be available for installation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.your-hook-name]\ndependencies = [\n  \"your-build-hook-plugin\"\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Global Build Hook Configuration - Hatch - TOML\nDESCRIPTION: This snippet shows how to define a global build hook using a TOML table. The hook is configured in the [tool.hatch.build.hooks.<HOOK_NAME>] table, where <HOOK_NAME> is replaced by the desired hook name. Global hooks apply to all build targets unless overridden. No additional parameters are shown here, but options can be added under this table. Requires Hatch's build system and TOML syntax. No explicit inputs or outputs beyond TOML configuration. The main constraint is proper naming and placement within the configuration file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.<HOOK_NAME>]\n```\n\n----------------------------------------\n\nTITLE: Requiring Confirmation for Index Publishing in Global Hatch Config (TOML)\nDESCRIPTION: This TOML snippet, intended for Hatch's global `config.toml`, sets the `disable` option to `true` for the `index` publisher. This configuration change requires users to explicitly confirm publishing actions or use the `-y`/`--yes` command-line flag, preventing accidental publishes.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/publisher/package-index.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n```toml tab=\"config.toml\"\n[publish.index]\ndisable = true\n```\n```\n\n----------------------------------------\n\nTITLE: Entering a Hatch Environment Shell via CLI\nDESCRIPTION: Shows how to spawn a shell within the currently selected Hatch environment (default, unless specified otherwise) using the `hatch shell` command. The prompt changes to indicate the active environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ hatch shell\n(hatch-demo) $\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Mode in Hatch\nDESCRIPTION: Sets Hatch to operate in local mode, which searches for pyproject.toml in the current and parent directories to determine the project root.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmode = \"local\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Builder Behaviors with hatchling BuilderConfig Class (Python)\nDESCRIPTION: Documents the \\`BuilderConfig\\` class from hatchling.builders.config, listing all configurable attributes available for customizing the build process, such as directory layouts, version control ignoring, reproducibility, development-mode settings, dependency lists, and package inclusion or exclusion rules. All configuration options can be specified by end-users or extension authors to tune the build lifecycle.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/utilities.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n::: hatchling.builders.config.BuilderConfig\n    options:\n      show_source: false\n      members:\n      - directory\n      - ignore_vcs\n      - reproducible\n      - dev_mode_dirs\n      - versions\n      - dependencies\n      - default_include\n      - default_exclude\n      - default_packages\n      - default_only_include\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Runtime Features for Build Hooks - Hatch - TOML\nDESCRIPTION: This snippet configures a build hook to require specific project features (optional dependencies) for runtime by setting require-runtime-features to a list. Defined under [tool.hatch.build.hooks.your-hook-name]. This ensures only the listed features are installed when executing the hook. Requires project to define the named features. Input: list of features as strings; no direct output but modifies the build environment for this hook. Limitation: Only features declared in project metadata can be referenced.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_25\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.your-hook-name]\nrequire-runtime-features = [\n  \"feature1\",\n  \"feature2\",\n]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Matrix-Based Environment Naming in Hatch TOML\nDESCRIPTION: Provides a simple matrix configuration for the `test` environment with `version` and `feature` variables within `pyproject.toml`. This configuration results in generated environments named `test.42-foo` and `test.42-bar`, illustrating the default naming convention where variable values are hyphen-separated and prefixed by the base environment name (`test.`).\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\"]\nfeature = [\"foo\", \"bar\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Requiring Confirmation for Index Publishing in Project Config (TOML)\nDESCRIPTION: This TOML configuration snippet, typically placed in a project's `pyproject.toml` file under the `[tool.hatch.publish.index]` table, sets the `disable` option to `true`. This enforces a confirmation prompt or the use of the `-y`/`--yes` flag specifically for publishing operations within this project, taking precedence over global Hatch settings.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/publisher/package-index.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.publish.index]\ndisable = true\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Environments and Their Dependencies Using Hatch CLI (Console)\nDESCRIPTION: This snippet shows the output of the 'hatch env show' command, which lists known environments, their types, and their dependencies in a tabular format. It helps the user see which environments exist, their backing technology ('virtual'), and installed packages for each. Output varies depending on configuration and platform; columns may differ if more features are enabled.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/environment/basic-usage.md#2025-04-22_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ hatch env show\n             Standalone\n┏━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃ Name    ┃ Type    ┃ Dependencies ┃\n┡━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ default │ virtual │              │\n├─────────┼─────────┼──────────────┤\n│ test    │ virtual │ pytest       │\n│         │         │ pytest-cov   │\n└─────────┴─────────┴──────────────┘\n```\n\n----------------------------------------\n\nTITLE: Adding Hatch Project Badge using Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed the official Hatch project badge into documentation, such as a README file. It uses standard Markdown image link syntax: `[![Alt text](Image URL)](Target URL)`. The image is hosted by shields.io, and the link directs to the Hatch project's GitHub repository.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/next-steps.md#2025-04-22_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n[![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg)](https://github.com/pypa/hatch)\n```\n\n----------------------------------------\n\nTITLE: Getting Reproducible Build Timestamps with hatchling (Python)\nDESCRIPTION: Provides a reference to the \\`get_reproducible_timestamp\\` utility function in hatchling.builders.utils, which helps derive reproducible timestamps for builds. This function is essential for controlling build determinism, as it standardizes timestamping regardless of environment. No additional dependencies are required beyond the Hatchling core, and the function likely accepts options related to time sources or build contexts.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/utilities.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: hatchling.builders.utils.get_reproducible_timestamp\n    options:\n      show_root_full_path: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Metadata with Setuptools setup.py\nDESCRIPTION: Demonstrates a standard `setup.py` script using Setuptools to define package metadata (name, version, description, dependencies, etc.), find packages using `find_packages`, specify package data, and define entry points (`console_scripts`). It reads version information dynamically from an `__about__.py` file and the long description from `README.md`. This serves as the baseline for comparison when migrating to Hatch.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom io import open\n\nfrom setuptools import find_packages, setup\n\nabout = {}\nwith open(os.path.join('src', 'foo', '__about__.py'), 'r', 'utf-8') as f:\n    exec(f.read(), about)\n\nwith open('README.md', 'r', 'utf-8') as f:\n    readme = f.read()\n\nsetup(\n    # Metadata\n    name='foo',\n    version=about['__version__'],\n    description='...',\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    author='...',\n    author_email='...',\n    project_urls={\n        'Documentation': '...',\n        'Source': '...',\n    },\n    classifiers=[\n        '...',\n    ],\n    keywords=[\n        '...',\n    ],\n    python_requires='>=3.8',\n    install_requires=[\n        '...',\n    ],\n    extras_require={\n        'feature': ['...'],\n    },\n\n    # Packaging\n    packages=find_packages(where='src'),\n    package_dir={'': 'src'},\n    package_data={\n        'foo': ['py.typed'],\n    },\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'foo = foo.cli:main',\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for platform_system Environment Marker\nDESCRIPTION: Python code snippet showing how the platform_system environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport platform\nplatform.system()\n```\n\n----------------------------------------\n\nTITLE: CMake Build Plugin Configuration in pyproject.toml\nDESCRIPTION: Sets up Hatchling with scikit-build-core as a build backend for building extension modules with CMake. Requires scikit-build-core 0.9.3 and enables an experimental plugin option for future transition to a dedicated package. Intended for projects using CMake to build extension modules.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/blog/posts/release-hatch-1100.md#2025-04-22_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[build-system]\nrequires = [\"hatchling>=1.24.2\", \"scikit-build-core~=0.9.3\"]\nbuild-backend = \"hatchling.build\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.hatch.build.targets.wheel.hooks.scikit-build]\nexperimental = true\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using GitHub Actions in YAML\nDESCRIPTION: This snippet demonstrates how to install Hatch using a GitHub Actions workflow. It uses the official pypa/hatch action with the 'install' parameter.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Hatch\n  uses: pypa/hatch@install\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Integration with Name Only\nDESCRIPTION: Specifies a shell to use when entering Hatch environments by providing just the shell name. The shell must be one of the supported shells and available in the system PATH.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nshell = \"fish\"\n```\n\n----------------------------------------\n\nTITLE: Updating force_include in Build Data - Python\nDESCRIPTION: Demonstrates how to add an entry for 'lib.so' into the 'force_include' mapping in the build_data dictionary. This is intended to force the inclusion of specific files during the build process by updating the build data structure. No external dependencies are required beyond a standard Python mapping; the snippet assumes 'build_data' is already defined in the build environment. Inputs are key-value pairs specifying the source and destination paths for inclusion, with the output being an updated build_data dict. The limitation is that an existing build_data object with a proper structure is needed.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/build-hook/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbuild_data['force_include']['src/lib.so'] = 'src/lib.so'\n```\n\n----------------------------------------\n\nTITLE: Configuring VCS Ignore for Build\nDESCRIPTION: Demonstrates how to disable VCS ignore file (.gitignore or .hgignore) recognition for a specific build target.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.sdist]\nignore-vcs = true\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for os_name Environment Marker\nDESCRIPTION: Python code snippet showing how the os_name environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Prefix Removal\nDESCRIPTION: Demonstrates how to remove path prefixes entirely during the build process.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel]\nsources = [\"src\"]\n```\n\n----------------------------------------\n\nTITLE: Verifying Hatch installation using Bash\nDESCRIPTION: This command checks the installed version of Hatch to verify successful installation. It's used across different installation methods to confirm that Hatch is properly installed and accessible in the system PATH.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ hatch --version\n<HATCH_LATEST_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Configuring Aware Mode in Hatch\nDESCRIPTION: Sets Hatch to operate in aware mode, which combines local mode with a fallback to project mode, offering flexibility in project selection.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nmode = \"aware\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Rewriting for Build\nDESCRIPTION: Shows how to rewrite relative paths to directories during the build process.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel.sources]\n\"src/foo\" = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Exact Dev Mode\nDESCRIPTION: Demonstrates how to enable a more targeted mechanism for dev mode installations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build]\ndev-mode-exact = true\n```\n\n----------------------------------------\n\nTITLE: Copying Plugin Code to Temporary Directory for Test Isolation in Python\nDESCRIPTION: This example defines two pytest fixtures for advanced plugin test isolation. \"plugin_dir\" copies the entire plugin source (excluding .git) to a unique temporary directory using shutil.copytree, to ensure changes are picked up by pip in every test session. The \"new_project\" fixture then generates a test project that references the temporary plugin location using the plugin_dir fixture. Required dependencies include pytest, shutil, pathlib, and tempfile. This approach prevents stale builds by invalidating the pip build cache for each test run; however, it may need customization for different ignore patterns or layout constraints.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/plugins/testing-builds.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport shutil\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\n\nimport pytest\n\n\n@pytest.fixture(scope='session')\ndef plugin_dir():\n    with TemporaryDirectory() as d:\n        directory = Path(d, 'plugin')\n        shutil.copytree(\n            Path.cwd(), directory, ignore=shutil.ignore_patterns('.git')\n        )\n\n        yield directory.resolve()\n\n\n@pytest.fixture\ndef new_project(tmp_path, plugin_dir):\n    project_dir = tmp_path / 'my-app'\n    project_dir.mkdir()\n\n    project_file = project_dir / 'pyproject.toml'\n    project_file.write_text(\n        f\"\"\"\\\n[build-system]\nrequires = [\"hatchling\", \"hatch-plugin-name @ {plugin_dir.as_uri()}\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-app\"\nversion = \"0.1.0\"\n\"\"\",\n        encoding='utf-8',\n    )\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Generating Bash Completion Script for Hatch CLI\nDESCRIPTION: This command generates a Bash completion script for Hatch and saves it to a file. The script needs to be sourced in the Bash configuration file to enable tab completion.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/cli/about.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n_HATCH_COMPLETE=bash_source hatch > ~/.hatch-complete.bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Integration with Custom Path\nDESCRIPTION: Specifies a shell to use when entering Hatch environments by providing both the shell name and custom executable path. Useful when the shell executable has a non-standard name or location.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[shell]\nname = \"bash\"\npath = \"/bin/ash\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatch Environment for Python Script\nDESCRIPTION: This snippet shows how to configure the Hatch environment directly in the script's metadata block. It demonstrates disabling UV and using pip as the installer instead.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/run/python-scripts.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# /// script\n# ...\n# [tool.hatch]\n# installer = \"pip\"\n# ///\n```\n\n----------------------------------------\n\nTITLE: Configuring CI Workflow Generation in Hatch Templates\nDESCRIPTION: Controls the addition of GitHub Actions workflows for continuous integration. When enabled, adds a workflow that runs tests on all platforms using modern Python versions.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/project-templates.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[template.plugins.default]\nci = false\n```\n\n----------------------------------------\n\nTITLE: Extending Ruff Configuration in ruff.toml\nDESCRIPTION: Example showing how to extend Ruff's configuration in a dedicated ruff.toml file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[format]\npreview = true\nquote-style = \"single\"\n\n[lint]\npreview = true\nextend-select = [\"C901\"]\n\n[lint.extend-per-file-ignores]\n\"docs/.hooks/*\" = [\"INP001\", \"T201\"]\n\n[lint.isort]\nknown-first-party = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Checking PATH Environment\nDESCRIPTION: This snippet checks if the Hatch binary path is included in the PATH environment variable for graphical sessions, which is crucial for environments installed via pipx. It shows how to verify environment variables using the terminal.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/integrate/vscode.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pgrep bin/code  # or some other graphical application\n1234\n$ cat /proc/1234/environ | tr '\\0' '\\n' | grep -E '^PATH='\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Distribution Files with MANIFEST.in for Setuptools\nDESCRIPTION: Provides an example `MANIFEST.in` file used with Setuptools to include the `tests` directory using `graft` and exclude specific file types (`*.pyc`, `*.pyo`, `__pycache__`) globally from the source distribution (sdist). This configuration complements the `setup.py` file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngraft tests\n\nglobal-exclude *.py[cod] __pycache__\n```\n\n----------------------------------------\n\nTITLE: Adding Hatch Classifier for PyPI Discovery - TOML\nDESCRIPTION: This TOML snippet adds the 'Framework :: Hatch' classifier to the project's metadata, under the '[project]' section's 'classifiers' array. This classifier allows users to more easily find Hatch plugins via search on PyPI. It should be placed alongside other relevant classifiers within the 'pyproject.toml' metadata.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/about.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[project]\\nclassifiers = [\\n  ...\\n  \"Framework :: Hatch\",\\n  ...\\n]\n```\n\n----------------------------------------\n\nTITLE: Finding Python Executable Parent Directory with Hatch CLI (Shell)\nDESCRIPTION: Shows how to use the `hatch python find` command with the `-p` or `--parent` flag to output the parent directory containing the executable of a specific installed Python distribution (3.12). This is useful when tools need the directory path rather than the executable path itself.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ hatch python find 3.12 --parent\n/home/.local/share/hatch/pythons/3.12/python/bin\n```\n\n----------------------------------------\n\nTITLE: Declaring Conditional Option Overrides in Hatch TOML\nDESCRIPTION: Shows the generic syntax for defining option overrides within a Hatch environment's configuration in `pyproject.toml`. Overrides are placed in the `[tool.hatch.envs.<ENV_NAME>.overrides]` table and use dotted key notation: `<SOURCE>.<CONDITION>.<OPTION> = <VALUE>`. This mechanism allows conditionally modifying environment options based on the specified source (e.g., `platform`, `env`, `matrix`) and condition.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.<ENV_NAME>.overrides]\n<SOURCE>.<CONDITION>.<OPTION> = <VALUE>\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Default Configuration in ruff.toml\nDESCRIPTION: Configuration to extend the default Ruff settings in a dedicated config file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nextend = \"ruff_defaults.toml\"\n```\n\n----------------------------------------\n\nTITLE: Defining Test Environments with Hatch pyproject.toml\nDESCRIPTION: Demonstrates how to configure test environments within `pyproject.toml` using Hatch, as an alternative to `tox.ini`. It defines default dependencies and scripts (`test`). It uses matrix definitions (`[[tool.hatch.envs.default.matrix]]`) to specify combinations of Python versions and custom axes (`version`, `feature`). Overrides (`tool.hatch.envs.default.overrides`) are used to set environment variables (`env-vars`) and conditional dependencies based on matrix features, mirroring the functionality of the `tox.ini` example.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.default]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n]\n\n[tool.hatch.envs.default.scripts]\ntest = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'\n\n[tool.hatch.envs.default.overrides]\nmatrix.version.env-vars = \"PRODUCT_VERSION\"\nmatrix.feature.env-vars = \"EXPERIMENTAL=true\"\nmatrix.feature.dependencies = [\n  { value = \"cryptography\", if = [\"foo\"] },\n]\n\n[[tool.hatch.envs.default.matrix]]\npython = [\"3.8\", \"3.9\"]\nversion = [\"42\", \"3.14\"]\n\n[[tool.hatch.envs.default.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Cache Directory\nDESCRIPTION: Sets a custom location for Hatch's cached data. By default, platform-specific cache directories are used, but this allows specifying an alternative location.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[dirs]\ncache = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Self Report with Browser Disabled - Shell\nDESCRIPTION: Runs the 'hatch self report' command in the terminal with the '--no-open' (or '-n') flag, preventing automatic browser launch. Instead, it outputs a pre-formed GitHub issue URL, including query parameters for copying and manual submission. Requires Hatch CLI installed; useful when a browser is not available.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/meta/report-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hatch self report -n\nhttps://github.com/pypa/hatch/issues/new?body=%23%23+Current+behavior%0A%3C%21--+A+clear+and+concise+description+of+the+behavior.+--%3E%0A%0A%23%23+Expected+behavior%0A%3C%21--+A+clear+and+concise+description+of+what+you+expected+to+happen.+--%3E%0A%0A%23%23+Additional+context%0A%3C%21--+Add+any+other+context+about+the+problem+here.+If+applicable%2C+add+screenshots+to+help+explain.+--%3E%0A%0A%23%23+Debug%0A%0A%23%23%23+Installation%0A%0A-+Source%3A+pip%0A-+Version%3A+1.9.2.dev5%0A-+Platform%3A+Windows%0A-+Python+version%3A%0A++++%60%60%60%0A++++3.11.1+%28tags%2Fv3.11.1%3Aa7a450f%2C+Dec++6+2022%2C+19%3A58%3A39%29+%5BMSC+v.1934+64+bit+%28AMD64%29%5D%0A++++%60%60%60%0A%0A%23%23%23+Configuration%0A%0A%60%60%60toml%0Amode+%3D+%22local%22%0Ashell+%3D+%22nu%22%0A%60%60%60%0A\n```\n\n----------------------------------------\n\nTITLE: Allowing Direct References in Hatch Metadata - TOML\nDESCRIPTION: Enables use of direct references in dependencies using [tool.hatch.metadata] section. By default, this is disallowed for compliance with packaging best practices. Set 'allow-direct-references' to true to remove restrictions.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.metadata]\nallow-direct-references = true\n```\n\n----------------------------------------\n\nTITLE: Handling No Available Updates with Hatch CLI (Shell)\nDESCRIPTION: Provides an example output of the `hatch python update` command when the specified Python distribution (3.12) is already up-to-date. A warning message indicates that the latest version is already installed.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ hatch python update 3.12\nThe latest version is already installed: 3.12.7\n```\n\n----------------------------------------\n\nTITLE: Updating force_include with Absolute Path - Python\nDESCRIPTION: Shows how to set an absolute path for 'lib.so' in the 'force_include' mapping of build_data. This is useful when the file to include resides outside the expected package directory. The snippet requires that build_data is a valid mutable mapping. The key is the absolute filesystem path, and the value is the intended project-relative path, ensuring proper file inclusion during build finalization. The approach is constrained by the necessity of an established build_data structure.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/build-hook/reference.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbuild_data['force_include']['/absolute/path/to/src/lib.so'] = 'src/lib.so'\n```\n\n----------------------------------------\n\nTITLE: Matrix-based Conditional UV Enabling and Alias in Hatch TOML\nDESCRIPTION: This complex TOML configuration demonstrates the use of matrix environments and overrides in Hatch to conditionally enable UV as an installer and alias the ‘uv pip’ command to 'pip'. In the snippet, the matrix iterates over 'tool' values ('uv' or 'pip'), setting 'installer' and, only when 'uv' is selected, setting up the 'pip' script alias with '{env:HATCH_UV} pip {args}'. This approach is suitable for advanced environment setups requiring dynamic installer selection and consistent CLI command experience.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/environment/select-installer.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.hatch.envs.example.matrix]]\ntool = [\"uv\", \"pip\"]\n\n[tool.hatch.envs.example.overrides]\nmatrix.tool.installer = { value = \"{matrix:tool}\" }\nmatrix.tool.scripts = [\n  { key = \"pip\", value = \"{env:HATCH_UV} pip {args}\", if = [\"uv\"] },\n]\n\n```\n\n----------------------------------------\n\nTITLE: Including Documentation for `EnvironmentInterface` Class Members\nDESCRIPTION: This directive uses a documentation generator syntax (like mkdocstrings for MkDocs) to embed the documentation for the `hatch.env.plugin.interface.EnvironmentInterface` class. The `members` option specifies exactly which attributes and methods of the interface should be included in the documentation, providing a reference for implementing Hatch environment plugins. Requires a compatible documentation generator.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/environment/reference.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n::: hatch.env.plugin.interface.EnvironmentInterface\n    options:\n      members:\n      - PLUGIN_NAME\n      - find\n      - create\n      - remove\n      - exists\n      - install_project\n      - install_project_dev_mode\n      - dependencies_in_sync\n      - sync_dependencies\n      - dependency_hash\n      - project_root\n      - sep\n      - pathsep\n      - fs_context\n      - activate\n      - deactivate\n      - app_status_creation\n      - app_status_pre_installation\n      - app_status_post_installation\n      - app_status_project_installation\n      - app_status_dependency_state_check\n      - app_status_dependency_installation_check\n      - app_status_dependency_synchronization\n      - app\n      - root\n      - name\n      - data_directory\n      - isolated_data_directory\n      - config\n      - platform\n      - environment_dependencies\n      - dependencies\n      - env_vars\n      - env_include\n      - env_exclude\n      - platforms\n      - skip_install\n      - dev_mode\n      - description\n      - command_context\n      - enter_shell\n      - run_shell_command\n      - resolve_commands\n      - get_env_vars\n      - apply_features\n      - construct_pip_install_command\n      - join_command_args\n      - check_compatibility\n      - get_option_types\n      - get_env_var_option\n      - get_context\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Order Randomization in Hatch Testing via TOML\nDESCRIPTION: This TOML configuration enables the randomization of test execution order within the Hatch testing environment. Setting `randomize = true` in the `[tool.hatch.envs.hatch-test]` table corresponds to using the `--randomize` or `-r` flag with the `hatch test` command, typically utilizing the `pytest-randomly` plugin.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test]\nrandomize = true\n```\n\n----------------------------------------\n\nTITLE: Running Test Environments with Tox CLI\nDESCRIPTION: Shows the simple command-line invocation (`tox`) used to run the test environments defined in a corresponding `tox.ini` file. This is presented as the standard way to execute Tox environments before migrating to Hatch.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Metadata Hook Class in Python\nDESCRIPTION: This Python snippet demonstrates how to define a custom metadata hook by inheriting from 'MetadataHookInterface' provided by Hatchling. The 'CustomMetadataHook' must be in the file specified by the 'path' option in the configuration (default: 'hatch_build.py'). This class serves as the entry point for project metadata injection or transformation at build time. If multiple subclasses exist, a function called 'get_metadata_hook' must be provided. The code relies on having Hatchling and its metadata interfaces available at runtime.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/metadata-hook/custom.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n\\nclass CustomMetadataHook(MetadataHookInterface):\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests using Hatch CLI\nDESCRIPTION: This snippet provides commands to retry failed tests a specified number of times using the Hatch CLI. It includes options for setting retry delay.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/testing/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhatch test --retries 2\n```\n\nLANGUAGE: shell\nCODE:\n```\nhatch test --retries 2 --retry-delay 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Project Installation within a Hatch Environment Shell\nDESCRIPTION: Illustrates checking if the current project (`hatch-demo`) is installed within the active Hatch environment using the `pip show` command from inside the environment's shell.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/environment.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n(hatch-demo) $ pip show hatch-demo\nName: hatch-demo\nVersion: 0.0.1\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using MacPorts in Bash\nDESCRIPTION: This command installs Hatch using MacPorts, a package manager for macOS. It requires sudo privileges to install.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo port install hatch\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Directory\nDESCRIPTION: Sets a custom location for Hatch's persistent data storage. By default, platform-specific directories are used, but this allows specifying an alternative location.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[dirs]\ndata = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Output Styles\nDESCRIPTION: Customizes the appearance of terminal output for different message types (error, warning, etc.) using Rich formatting styles. Each output level can have its own styling.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[terminal.styles]\nerror = \"...\"\n...\n```\n\n----------------------------------------\n\nTITLE: Formatting Environment Context with EnvironmentContextFormatter (Python)\nDESCRIPTION: Specifies the \\`EnvironmentContextFormatter\\` class from hatch.env.context, highlighting the formatters member used to process or interpolate variables for environment-specific configuration. This utility supports modular context formatting and is designed for extensibility by plugin authors needing custom variable support.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/utilities.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n::: hatch.env.context.EnvironmentContextFormatter\n    options:\n      show_source: false\n      members:\n      - formatters\n```\n\n----------------------------------------\n\nTITLE: Extending Default Configuration in pyproject.toml\nDESCRIPTION: Configuration to extend the default Ruff settings from a separate file.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.ruff]\nextend = \"ruff_defaults.toml\"\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch on Void Linux using XBPS in Bash\nDESCRIPTION: This command installs Hatch on Void Linux using the XBPS package manager. It's a straightforward method for Void Linux users.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nxbps-install hatch\n```\n\n----------------------------------------\n\nTITLE: Downloading Hatch installer package using curl in Bash\nDESCRIPTION: This command downloads the Hatch installer package for macOS using curl. It saves the downloaded file as 'hatch-universal.pkg' in the current directory.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Lo hatch-universal.pkg https://github.com/pypa/hatch/releases/latest/download/hatch-universal.pkg\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for /pypa/hatch\nDESCRIPTION: This configuration snippet lists necessary Python packages for the `/pypa/hatch` project, including `build`, `packaging`, `requests`, `tomli`, and `virtualenv` (version 20.13.1 or higher). These are likely build-time or runtime requirements, typically found in files like `requirements.txt` or specified within `pyproject.toml`.\nSOURCE: https://github.com/pypa/hatch/blob/master/backend/tests/downstream/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild\npackaging\nrequests\ntomli\nvirtualenv>=20.13.1\n```\n\n----------------------------------------\n\nTITLE: Managing Environment File System Contexts with FileSystemContext Interface (Python)\nDESCRIPTION: Lists out the \\`FileSystemContext\\` interface under hatch.env.plugin.interface, enumerating attributes for accessing or synchronizing local and environment paths, joining paths, and interacting with environment instances. These members facilitate plugin authors when writing environment-managing or synchronizing routines that need safe and reproducible file operations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/utilities.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n::: hatch.env.plugin.interface.FileSystemContext\n    options:\n      show_source: false\n      members:\n      - env\n      - sync_local\n      - sync_env\n      - local_path\n      - env_path\n      - join\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Configuration\nDESCRIPTION: Configuration to disable Hatch's default Ruff configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis]\nconfig-path = \"none\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Plugin Class with PLUGIN_NAME - Hatch Environment - Python\nDESCRIPTION: This snippet shows how to define a plugin class that can be registered with Hatch plugins. The class must include a 'PLUGIN_NAME' attribute, which identifies it for users when selecting plugins. The class should inherit from the appropriate Hatch base class (context-specific), and may implement additional methods or attributes as required by the plugin type. This is required for compatibility with the Hatch plugin discovery mechanism.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/about.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n...\\nclass SpecialEnvironment(...):\\n    PLUGIN_NAME = 'special'\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for implementation_name Environment Marker\nDESCRIPTION: Python code snippet showing how the implementation_name environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.implementation.name\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip as Installer for Hatch Build Environment in TOML\nDESCRIPTION: This snippet shows how to configure Pip as the installer for the Hatch build environment, overriding the default UV installer.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/build.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-build]\ninstaller = \"pip\"\n```\n\n----------------------------------------\n\nTITLE: Adding Hatch Project Badge using reStructuredText\nDESCRIPTION: This reStructuredText snippet shows how to include the official Hatch project badge using the `image` directive. It specifies the image URL from shields.io, alternative text (`alt`) for accessibility, and the target URL (`target`) which links to the Hatch GitHub repository. This format is commonly used in Sphinx documentation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/next-steps.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg\n   :alt: Hatch project\n   :target: https://github.com/pypa/hatch\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for sys_platform Environment Marker\nDESCRIPTION: Python code snippet showing how the sys_platform environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.platform\n```\n\n----------------------------------------\n\nTITLE: Customizing Static Analysis Scripts\nDESCRIPTION: Configuration to override default static analysis commands with custom scripts.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis.scripts]\nformat-check = \"...\"\nformat-fix = \"...\"\nlint-check = \"...\"\nlint-fix = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Default Hatch Test Environment Dependencies\nDESCRIPTION: This is a placeholder representing the default set of dependencies automatically included by Hatch in the `hatch-test` environment. The actual dependencies are determined internally by Hatch and are not explicitly listed here in the user's `pyproject.toml` unless overridden.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n<HATCH_TEST_ENV_DEPENDENCIES>\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Spinner Animation\nDESCRIPTION: Sets the animation sequence used for waiting indicators in the terminal. The spinner displays during potentially time-consuming operations.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/hatch.md#2025-04-22_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[terminal.styles]\nspinner = \"...\"\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for platform_python_implementation Environment Marker\nDESCRIPTION: Python code snippet showing how the platform_python_implementation environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport platform\nplatform.python_implementation()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Plugin Entry Points for Hatch - TOML\nDESCRIPTION: This snippet indicates how to add entry points for Hatch plugins using TOML configuration. The '[project.entry-points.hatch]' section declares a mapping from the plugin's name (without the 'hatch-' prefix) to its module path containing the registration hooks. This enables automatic discovery and loading of the plugin by Hatch via entry points in 'pyproject.toml'.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/about.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[project.entry-points.hatch]\\nfoo = \"pkg.hooks\"\n```\n\n----------------------------------------\n\nTITLE: Code Formatting and Linting\nDESCRIPTION: Commands for formatting code and checking code style. Requires Hatch and related tools installed. 'hatch fmt' automatically formats code, 'hatch fmt --check' checks formatting, and 'hatch run types:check' conducts type checking.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/community/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhatch fmt\n```\n\nLANGUAGE: bash\nCODE:\n```\nhatch fmt --check\n```\n\nLANGUAGE: bash\nCODE:\n```\nhatch run types:check\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Python Versions with Hatch CLI (Shell)\nDESCRIPTION: Demonstrates how to remove specific installed Python distributions (3.12, 3.11, pypy3.10) using the `hatch python remove` command.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nhatch python remove 3.12 3.11 pypy3.10\n```\n\n----------------------------------------\n\nTITLE: Allowing Ambiguous Features in Hatch Metadata - TOML\nDESCRIPTION: Disables feature normalization for optional dependency names by setting 'allow-ambiguous-features' to true under [tool.hatch.metadata]. Useful for interoperability with tools not supporting PEP 685. Deprecated—will be removed after Jan 1, 2024.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.metadata]\nallow-ambiguous-features = true\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for python_full_version Environment Marker\nDESCRIPTION: Python code snippet showing how the python_full_version environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport platform\nplatform.python_version()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Environments with Tox tox.ini\nDESCRIPTION: Example `tox.ini` configuration file defining multiple test environments using Tox. It specifies Python versions and matrix axes in `envlist`, common test settings (`testenv`) including dependencies (`deps`) with extras and conditional dependencies (`foo: cryptography`), test execution commands (`commands`), and environment variable settings (`setenv`) specific to matrix factors. This represents the Tox configuration to be migrated to Hatch.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/meta/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[tox]\nenvlist =\n    py{38,39}-{42,3.14}\n    py{39,310}-{9000}-{foo,bar}\n\n[testenv]\nusedevelop = true\ndeps =\n    coverage[toml]\n    pytest\n    pytest-cov\n    foo: cryptography\ncommands =\n    pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests {posargs}\nsetenv =\n    3.14: PRODUCT_VERSION=3.14\n    42: PRODUCT_VERSION=42\n    9000: PRODUCT_VERSION=9000\n    {foo,bar}: EXPERIMENTAL=true\n```\n\n----------------------------------------\n\nTITLE: Sourcing Hatch Completion Script in Bash Configuration\nDESCRIPTION: This line sources the Hatch completion script in the Bash configuration file (.bashrc or .bash_profile), enabling tab completion for Hatch commands.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/cli/about.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n. ~/.hatch-complete.bash\n```\n\n----------------------------------------\n\nTITLE: Sourcing Hatch Completion Script in Zsh Configuration\nDESCRIPTION: This line sources the Hatch completion script in the Zsh configuration file (.zshrc), enabling tab completion for Hatch commands.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/cli/about.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n. ~/.hatch-complete.zsh\n```\n\n----------------------------------------\n\nTITLE: Generating Fish Completion Script for Hatch CLI\nDESCRIPTION: This command generates a Fish completion script for Hatch and saves it directly to the Fish completions directory, enabling tab completion for Hatch commands in Fish shell.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/cli/about.md#2025-04-22_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n_HATCH_COMPLETE=fish_source hatch > ~/.config/fish/completions/hatch.fish\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh Completion Script for Hatch CLI\nDESCRIPTION: This command generates a Zsh completion script for Hatch and saves it to a file. The script needs to be sourced in the Zsh configuration file to enable tab completion.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/cli/about.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n_HATCH_COMPLETE=zsh_source hatch > ~/.hatch-complete.zsh\n```\n\n----------------------------------------\n\nTITLE: Setting Persistent Config Path\nDESCRIPTION: Configuration for specifying the path to store default Ruff configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis]\nconfig-path = \"ruff_defaults.toml\"\n```\n\n----------------------------------------\n\nTITLE: Pinning Ruff Version\nDESCRIPTION: Configuration to specify a particular version of Ruff as a dependency.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis]\ndependencies = [\"ruff==X.Y.Z\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Package-Only Inclusion\nDESCRIPTION: Demonstrates how to exclude non-artifact files that do not reside within a Python package.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.wheel]\nonly-packages = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Installer\nDESCRIPTION: Configuration to specify pip as the package installer instead of the default UV.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/internal/static-analysis.md#2025-04-22_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-static-analysis]\ninstaller = \"pip\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Build Hooks by Default - Hatch - TOML\nDESCRIPTION: This snippet disables a hook by default using the enable-by-default parameter set to false in the [tool.hatch.build.hooks.<HOOK_NAME>] table. This allows the hook to be enabled through other means, such as environment variables. Requires Hatch build system, TOML syntax, and knowledge of hook enabling controls. Input: boolean value (false). Output: the hook is not enabled by default in build environments. Limitation: The hook needs explicit activation to run.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_27\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.hooks.<HOOK_NAME>]\nenable-by-default = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Traversal Optimization\nDESCRIPTION: Demonstrates how to skip excluded directories for improved build performance.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build]\nskip-excluded-dirs = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Target-Specific Build Hooks - Hatch - TOML\nDESCRIPTION: This snippet illustrates how to specify a build hook for a specific build target in Hatch using TOML. It places the hook definition in the [tool.hatch.build.targets.<TARGET_NAME>.hooks.<HOOK_NAME>] table. This configuration allows customizing hooks for individual targets, overriding global hooks if necessary. Requires Hatch build system and proper TOML file structure. No explicit parameters in this example; additional options can be set within the table. Inputs are handled through TOML keys; output is the activation of the specified hook for the named target during builds.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/build.md#2025-04-22_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.build.targets.<TARGET_NAME>.hooks.<HOOK_NAME>]\n```\n\n----------------------------------------\n\nTITLE: Defining a Script with Nested Environment Variables in TOML\nDESCRIPTION: This example shows how to create a script that displays the value of an environment variable with fallback options, demonstrating nested field usage in Hatch configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/context.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.test.scripts]\ndisplay = \"echo {env:FOO:{env:BAR:{home}}}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Overrides Based on Allowed Values (`if`) in Hatch TOML\nDESCRIPTION: Shows how to use the `if` key within an override's inline table definition in `pyproject.toml`. The `if` key takes an array of allowed values for the source condition (e.g., the value of the `version` matrix variable). The override entry (e.g., setting `python` or `env-vars`) is only applied if the actual value of the condition matches one of the values listed in the `if` array.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nmatrix.version.python = { value = \"pypy\", if = [\"3.14\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Overrides Based on Specific Platforms (`platform`) in Hatch TOML\nDESCRIPTION: Illustrates using the `platform` key within an override's inline table definition in `pyproject.toml`. This key takes an array of desired platform names (e.g., `macos`, `linux`). The override entry is only applied if the current operating system matches one of the platforms listed. This allows combining platform checks with other conditions like `if` or `env`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nenv.EXPERIMENTAL.python = { value = \"pypy\", if = [\"1\"], platform = [\"macos\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"], platform = [\"linux\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Overrides Based on Environment Variables (`env`) in Hatch TOML\nDESCRIPTION: Explains how to use the `env` key within an override's inline table definition in `pyproject.toml`. This key takes an array of required environment variable conditions. An entry can be just the variable name (checking for existence) or `NAME=VALUE` (checking for existence and specific value). The override is only applied if *all* specified environment variable conditions are met. This can be combined with other conditions like `if` and `platform`.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/advanced.md#2025-04-22_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n```toml config-example\n[tool.hatch.envs.test.overrides]\nplatform.windows.python = { value = \"pypy\", env = [\"EXPERIMENTAL\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"], env = [\"FOO\", \"BAR=BAZ\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Source in TOML\nDESCRIPTION: This TOML snippet demonstrates how to configure the Hatch tool to use code as the version source. It specifies the configuration options available, including path, expression, and search-paths. The config example shows how to point to the Python source file containing version logic.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/version-source/code.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.version]\nsource = \"code\"\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Optional Dependencies (Features) in TOML\nDESCRIPTION: Demonstrates how to select optional dependency groups (features) for installation in a specific environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.nightly]\nfeatures = [\n  \"server\",\n  \"grpc\",\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling Dev Mode for Environments in TOML\nDESCRIPTION: Shows how to disable dev mode for an environment, which affects how the project is installed and updated.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.static]\ndev-mode = false\n```\n\n----------------------------------------\n\nTITLE: Manage Documentation with Hatch\nDESCRIPTION: Commands to serve and validate project documentation locally using Hatch. Requires Hatch and documentation dependencies. 'hatch run docs:serve' starts the documentation server, while 'hatch run docs:build-check' builds and validates the documentation.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/community/contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhatch run docs:serve\n```\n\nLANGUAGE: bash\nCODE:\n```\nhatch run docs:build-check\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Descriptions in TOML\nDESCRIPTION: Demonstrates how to add an informational description to an environment configuration.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/environment/overview.md#2025-04-22_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.<ENV_NAME>]\ndescription = \"\"\"\nLorem ipsum ...\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Keywords in pyproject.toml - TOML\nDESCRIPTION: Enables easier discoverability by listing relevant keywords in an array. Used under the [project] section. Input: arbitrary strings; Output: indexed keywords on package indexes like PyPI. Limitation: purely informational.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/metadata.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[project]\n...\nkeywords = [\n  \"...\",\n]\n```\n\n----------------------------------------\n\nTITLE: Aliasing pip Script with UV for Test Environments in Hatch TOML\nDESCRIPTION: This TOML snippet assigns an additional script to a Hatch test environment so that invocations of 'pip' actually use the UV tool under the hood ('{env:HATCH_UV} pip {args}'). Placing the mapping under [tool.hatch.envs.hatch-test.extra-scripts] helps maintain a consistent script interface regardless of the underlying installer tool. This method provides seamless UV command integration without modifying the main scripts mapping.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/how-to/environment/select-installer.md#2025-04-22_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.envs.hatch-test.extra-scripts]\npip = \"{env:HATCH_UV} pip {args}\"\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hatch using pip in Bash\nDESCRIPTION: This command installs Hatch using pip, the Python package installer. It's a simple method but may modify the existing Python environment.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/install.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install hatch\n```\n\n----------------------------------------\n\nTITLE: Configuring Hatchling Metadata Hook in TOML\nDESCRIPTION: This TOML snippet configures the 'custom' metadata hook for the Hatchling build backend in a project's configuration file. To use this setting, the '[tool.hatch.metadata.hooks.custom]' block must be present under the project's configuration (usually in 'pyproject.toml'). No additional parameters are required by default, but the 'path' option can be overridden. This configuration enables Hatchling to locate and utilize the associated Python metadata hook logic.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/plugins/metadata-hook/custom.md#2025-04-22_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.hatch.metadata.hooks.custom]\n```\n\n----------------------------------------\n\nTITLE: Finding Python Executable Path with Hatch CLI (Shell)\nDESCRIPTION: Demonstrates using the `hatch python find` command to locate the absolute path of the executable for a specific installed Python distribution (3.12).\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/tutorials/python/manage.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ hatch python find 3.12\n/home/.local/share/hatch/pythons/3.12/python/bin/python3\n```\n\n----------------------------------------\n\nTITLE: Python Script with Inline Metadata\nDESCRIPTION: Executes a Python script using Hatch with inline PEP 723-compliant metadata for dependencies and Python version requirements. This script showcases fetching data from a URL using httpx and pretty printing it with rich. Requires Python >= 3.11 with httpx and rich as dependencies.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/blog/posts/release-hatch-1100.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\n#   \"httpx\",\n#   \"rich\",\n# ]\n# ///\n\nimport httpx\nfrom rich.pretty import pprint\n\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n```\n\n----------------------------------------\n\nTITLE: Configuring mkdocs-click for Hatch Main Command Documentation\nDESCRIPTION: This snippet uses the `mkdocs-click` Markdown extension to automatically generate documentation for the main `hatch` command found in the `hatch.cli` Python module. It configures the output to display options in a table (`style: table`), limit the depth to the main command (`depth: 0`), and remove any ASCII art (`remove_ascii_art: true`). This requires the `mkdocs-click` plugin to be installed and configured in the MkDocs project.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/cli/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::: mkdocs-click\n    :module: hatch.cli\n    :command: hatch\n    :depth: 0\n    :style: table\n    :remove_ascii_art: true\n```\n\n----------------------------------------\n\nTITLE: Switch to a New Git Branch\nDESCRIPTION: This snippet shows how to change to the 'hatch' directory and switch to a new git branch for a contribution. Requires Git to be installed and a cloned repository. The command 'git switch -c add-my-contribution' creates and switches to a new branch named 'add-my-contribution'.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/community/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd hatch\ngit switch -c add-my-contribution\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for platform_machine Environment Marker\nDESCRIPTION: Python code snippet showing how the platform_machine environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport platform\nplatform.machine()\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for platform_release Environment Marker\nDESCRIPTION: Python code snippet showing how the platform_release environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport platform\nplatform.release()\n```\n\n----------------------------------------\n\nTITLE: Python Equivalent for platform_version Environment Marker\nDESCRIPTION: Python code snippet showing how the platform_version environment marker is implemented in Python.\nSOURCE: https://github.com/pypa/hatch/blob/master/docs/config/dependency.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport platform\nplatform.version()\n```"
  }
]