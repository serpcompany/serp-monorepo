[
  {
    "owner": "mattermost",
    "repo": "mattermost-cloud-monitoring",
    "content": "TITLE: Defining CPU CloudWatch Metric Alarm using Terraform\nDESCRIPTION: This snippet defines a CloudWatch metric alarm for CPU utilization of a database instance. It uses the `aws_cloudwatch_metric_alarm` resource to create an alarm that triggers when CPU utilization exceeds a threshold. The alarm is configured with metrics such as namespace, metric name, statistic, period, evaluation periods, and threshold.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/rds-cloudwatch-alarms/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_cloudwatch_metric_alarm\" \"db_instances_alarm_cpu\" {\n  alarm_name          = \"${var.db_instance_identifier}-cpu-alarm\"\n  comparison_operator = \"GreaterThanOrEqualToThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"CPUUtilization\"\n  namespace           = \"AWS/RDS\"\n  period              = \"60\"\n  statistic           = \"Average\"\n  threshold           = \"80\"\n  alarm_description   = \"Alarm when server CPU exceeds 80%\"\n  treat_missing_data = \"notBreaching\"\n\n  dimensions = {\n    DBInstanceIdentifier = var.db_instance_identifier\n  }\n\n  alarm_actions = [data.aws_sns_topic.aurora_cluster_topic.arn]\n\n  tags = var.tags\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Memory CloudWatch Metric Alarm using Terraform\nDESCRIPTION: This snippet defines a CloudWatch metric alarm for memory utilization of a database instance. It uses the `aws_cloudwatch_metric_alarm` resource to create an alarm that triggers when freeable memory falls below a threshold. The threshold is calculated based on the instance type and a configurable memory cache proportion. It is using `FreeableMemory` as metric and `Bytes` as the Unit.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/rds-cloudwatch-alarms/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_cloudwatch_metric_alarm\" \"db_instances_alarm_memory\" {\n  alarm_name          = \"${var.db_instance_identifier}-memory-alarm\"\n  comparison_operator = \"LessThanOrEqualToThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"FreeableMemory\"\n  namespace           = \"AWS/RDS\"\n  period              = \"60\"\n  statistic           = \"Average\"\n  threshold           = min(tonumber(var.memory_alarm_limit), (lookup(var.ram_memory_bytes, var.instance_type, \"0\") * var.memory_cache_proportion) / 4)\n  unit                = \"Bytes\"\n  alarm_description   = \"Alarm when server Freeable Memory is low\"\n  treat_missing_data = \"notBreaching\"\n\n  dimensions = {\n    DBInstanceIdentifier = var.db_instance_identifier\n  }\n\n  alarm_actions = [data.aws_sns_topic.aurora_cluster_topic.arn]\n\n  tags = var.tags\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Type Max Pods Map\nDESCRIPTION: This code snippet defines a map that associates different AWS EC2 instance types with their maximum pod limits when using the AWS VPC CNI (Container Networking Interface). This map is used to configure the Kubernetes cluster for optimal pod density per node based on the instance type's resource capabilities. The map ensures that the cluster adheres to AWS best practices.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/eks-managed-node-groups/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n<pre>{\n  \"c6g.12xlarge\": 234,\n  \"c6g.16xlarge\": 737,\n  \"c6g.2xlarge\": 58,\n  \"c6g.4xlarge\": 234,\n  \"c6g.8xlarge\": 234,\n  \"c6g.large\": 35,\n  \"c6g.medium\": 17,\n  \"c6g.metal\": 737,\n  \"c6g.xlarge\": 58,\n  \"c6gd.12xlarge\": 234,\n  \"c6gd.16xlarge\": 737,\n  \"c6gd.2xlarge\": 58,\n  \"c6gd.4xlarge\": 234,\n  \"c6gd.8xlarge\": 234,\n  \"c6gd.large\": 35,\n  \"c6gd.medium\": 17,\n  \"c6gd.metal\": 737,\n  \"c6gd.xlarge\": 58,\n  \"m6g.12xlarge\": 234,\n  \"m6g.16xlarge\": 737,\n  \"m6g.2xlarge\": 58,\n  \"m6g.4xlarge\": 234,\n  \"m6g.8xlarge\": 234,\n  \"m6g.large\": 35,\n  \"m6g.medium\": 17,\n  \"m6g.metal\": 737,\n  \"m6g.xlarge\": 58,\n  \"m6gd.12xlarge\": 234,\n  \"m6gd.16xlarge\": 737,\n  \"m6gd.2xlarge\": 58,\n  \"m6gd.4xlarge\": 234,\n  \"m6gd.8xlarge\": 234,\n  \"m6gd.large\": 35,\n  \"m6gd.medium\": 17,\n  \"m6gd.metal\": 737,\n  \"m6gd.xlarge\": 58,\n  \"r6g.12xlarge\": 234,\n  \"r6g.16xlarge\": 737,\n  \"r6g.2xlarge\": 58,\n  \"r6g.4xlarge\": 234,\n  \"r6g.8xlarge\": 234,\n  \"r6g.large\": 35,\n  \"r6g.medium\": 17,\n  \"r6g.metal\": 737,\n  \"r6g.xlarge\": 58,\n  \"r6gd.12xlarge\": 234,\n  \"r6gd.16xlarge\": 737,\n  \"r6gd.2xlarge\": 58,\n  \"r6gd.4xlarge\": 234,\n  \"r6gd.8xlarge\": 234,\n  \"r6gd.large\": 35,\n  \"r6gd.medium\": 17,\n  \"r6gd.metal\": 737,\n  \"r6gd.xlarge\": 58,\n  \"t4g.2xlarge\": 58,\n  \"t4g.large\": 35,\n  \"t4g.medium\": 17,\n  \"t4g.micro\": 4,\n  \"t4g.nano\": 4,\n  \"t4g.small\": 11,\n  \"t4g.xlarge\": 58\n}</pre>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Variables for RDS Alarms using Terraform\nDESCRIPTION: This configuration defines the input variables required by the terraform module for configuring rds alarms. The variables include the RDS identifier, instance type, SNS topic and memory limits. Some of the variables such as `db_instance_identifier`, `instance_type`, and `sns_topic` are marked as required.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/rds-cloudwatch-alarms/README.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"cluster_instance_identifier\" {\n  description = \"The rds aurora cluster identifier to set the alerm name\"\n  type        = string\n  default     = \"\"\n}\n\nvariable \"db_instance_identifier\" {\n  description = \"The rds database identifier to set the alerm name\"\n  type        = string\n}\n\nvariable \"instance_type\" {\n  description = \"The rds database instance type to calculate the alarm limits\"\n  type        = string\n}\n\nvariable \"memory_alarm_limit\" {\n  description = \"Limit to trigger memory alarm. Number in Bytes (100MB)\"\n  type        = string\n  default     = \"100000000\"\n}\n\nvariable \"memory_cache_proportion\" {\n  description = \"Proportion of memory that is used for cache. By default it is 75%.\"\n  type        = number\n  default     = 0.75\n}\n\nvariable \"ram_memory_bytes\" {\n  description = \"The RAM memory of each instance type in Bytes.\"\n  type        = map(any)\n  default = {\n    \"db.m6g.large\"   = \"8589934592\"\n    \"db.r5.12xlarge\"  = \"412316860416\"\n    \"db.r5.16xlarge\"  = \"549755813888\"\n    \"db.r5.24xlarge\"  = \"824633720832\"\n    \"db.r5.2xlarge\"   = \"68719476736\"\n    \"db.r5.4xlarge\"   = \"137438953472\"\n    \"db.r5.8xlarge\"   = \"274877906944\"\n    \"db.r5.large\"    = \"17179869184\"\n    \"db.r5.xlarge\"   = \"34359738368\"\n    \"db.r6g.12xlarge\" = \"412316860416\"\n    \"db.r6g.16xlarge\" = \"549755813888\"\n    \"db.r6g.24xlarge\" = \"824633720832\"\n    \"db.r6g.2xlarge\"  = \"68719476736\"\n    \"db.r6g.4xlarge\"  = \"137438953472\"\n    \"db.r6g.8xlarge\"  = \"274877906944\"\n    \"db.r6g.large\"   = \"17179869184\"\n    \"db.r6g.xlarge\"  = \"34359738368\"\n    \"db.t3.large\"    = \"8589934592\"\n    \"db.t3.medium\"   = \"4294967296\"\n    \"db.t3.small\"    = \"2147483648\"\n    \"db.t4g.large\"   = \"8589934592\"\n    \"db.t4g.medium\"  = \"4294967296\"\n    \"db.t4g.small\"   = \"2147483648\"\n  }\n}\n\nvariable \"sns_topic\" {\n  description = \"The sns topic name to sent cloudwatch alarms\"\n  type        = string\n}\n\nvariable \"tags\" {\n  description = \"A map of tags to assign to the resource\"\n  type        = map(string)\n  default     = {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving SNS Topic ARN using Terraform Data Source\nDESCRIPTION: This snippet retrieves the ARN of an SNS topic using the `aws_sns_topic` data source. The `name` attribute is used to specify the SNS topic to retrieve. The ARN is then used to configure alarm actions for the CloudWatch metric alarms.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/rds-cloudwatch-alarms/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"aws_sns_topic\" \"aurora_cluster_topic\" {\n  name = var.sns_topic\n}\n\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Access Policy Principal Definition\nDESCRIPTION: Defines which AWS resources have access to the Elasticsearch cluster. The default value is \"*\", granting access to all AWS resources. This input allows for restricting access to specific resources based on security requirements.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/elasticsearch/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n[<br/>  \"*\"<br/>]\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Tags Configuration - Terraform\nDESCRIPTION: This input allows specifying tags for the EKS cluster. The default value is a map containing a 'Name' tag set to 'EKS Cluster Private link POC'. This tag helps in identifying and managing the cluster within AWS.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/cross-account-private-link-eks-private-target-account/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n{\n  \"Name\": \"EKS Cluster Private link POC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Instance Tags Configuration - Terraform\nDESCRIPTION: This input allows specifying tags for the proxy instance. The default value is a map containing a 'Name' tag set to 'Proxy Instance POC'. This is useful for identifying and managing the proxy instance within AWS.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/cross-account-private-link-eks-private-target-account/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n{\n  \"Name\": \"Proxy Instance POC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conference Node Map Definition\nDESCRIPTION: Defines the structure for the `conference_nodes` input variable, which is a map of conference node configurations. Each node configuration includes properties such as DNS name, EC2 type, private IP, and AMI ID. Example values are provided to illustrate the structure and possible values for each property.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/pexip-multi-conferences/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nmap(object({\n    dns_name   = string\n    ec2_type   = string\n    private_ip = string\n    ami_id     = string\n  }))\n```\n\n----------------------------------------\n\nTITLE: Conference Node Example Values\nDESCRIPTION: Provides example values for the `conference_nodes` input variable. These examples define two conference nodes, \"example\" and \"random\", with specific values for their AMI ID, DNS name, EC2 type, and private IP. These values are used to illustrate the expected format and data types for the input.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/aws/pexip-multi-conferences/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n{\n  \"example\": {\n    \"ami_id\": \"ami-0d48fecb4209bb660\",\n    \"dns_name\": \"example.mattermost.com\",\n    \"ec2_type\": \"c6i.xlarge\",\n    \"private_ip\": \"10.0.1.11\"\n  },\n  \"random\": {\n    \"ami_id\": \"ami-0d48fecb4209bb660\",\n    \"dns_name\": \"random.mattermost.com\",\n    \"ec2_type\": \"c6i.large\",\n    \"private_ip\": \"10.0.1.10\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linting Terraform Code\nDESCRIPTION: This snippet demonstrates how to run the linter on the Terraform code. It requires Terraform, Terraform Docs, and tflint to be installed.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/README.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Listing Git Tags\nDESCRIPTION: This command displays the existing git tags. It is useful for understanding the current versioning scheme and available releases.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit tag --online\n```\n\n----------------------------------------\n\nTITLE: Adding a Git Tag\nDESCRIPTION: This command adds a new tag to the last commit. The -a flag specifies an annotated tag, and -m provides a message for the tag.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v1.1.0 HEAD -m \"Added new modules\"\n```\n\n----------------------------------------\n\nTITLE: Pushing a Git Tag\nDESCRIPTION: This command pushes a specific tag to the remote repository (origin). This makes the tag available to other developers.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Deleting a Git Tag Locally and Remotely\nDESCRIPTION: These commands delete a git tag both locally and remotely.  The first command deletes the tag locally, and the second command deletes it from the remote repository.\nSOURCE: https://github.com/mattermost/mattermost-cloud-monitoring/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -d <tag-name>\n\ngit push --delete origin <tag-name>\n```"
  }
]