[
  {
    "owner": "quantgeekdev",
    "repo": "mcp-framework.git",
    "content": "TITLE: Installing and Creating a Project with MCP Framework CLI\nDESCRIPTION: Commands for installing the MCP framework globally and creating a new MCP server project using the CLI, which is the recommended approach for getting started.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install the framework globally\nnpm install -g mcp-framework\n\n# Create a new MCP server project\nmcp create my-mcp-server\n\n# Navigate to your project\ncd my-mcp-server\n\n# Your server is ready to use!\n```\n\n----------------------------------------\n\nTITLE: Development Workflow for MCP Framework Projects\nDESCRIPTION: Example workflow for creating a new MCP project, adding tools, and building the project.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n  mcp create my-mcp-server\n  cd my-mcp-server\n```\n\nLANGUAGE: bash\nCODE:\n```\n   mcp add tool data-fetcher\n   mcp add tool data-processor\n   mcp add tool report-generator\n```\n\nLANGUAGE: bash\nCODE:\n```\n   npm run build\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool in MCP Framework\nDESCRIPTION: Example TypeScript code for creating a tool in MCP Framework, defining its name, description, schema, and execute function.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MCPTool } from \"mcp-framework\";\nimport { z } from \"zod\";\n\ninterface ExampleInput {\n  message: string;\n}\n\nclass ExampleTool extends MCPTool<ExampleInput> {\n  name = \"example_tool\";\n  description = \"An example tool that processes messages\";\n\n  schema = {\n    message: {\n      type: z.string(),\n      description: \"Message to process\",\n    },\n  };\n\n  async execute(input: ExampleInput) {\n    return `Processed: ${input.message}`;\n  }\n}\n\nexport default ExampleTool;\n```\n\n----------------------------------------\n\nTITLE: Setting up an MCP Server\nDESCRIPTION: TypeScript code showing how to create and start an MCP server with default or SSE transport configuration.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MCPServer } from \"mcp-framework\";\n\nconst server = new MCPServer();\n\n// OR (mutually exclusive!) with SSE transport\nconst server = new MCPServer({\n  transport: {\n    type: \"sse\",\n    options: {\n      port: 8080            // Optional (default: 8080)\n    }\n  }\n});\n\n// Start the server\nawait server.start();\n```\n\n----------------------------------------\n\nTITLE: Adding Components with MCP CLI\nDESCRIPTION: Commands for adding tools, prompts, and resources to an MCP project using the CLI.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add a new tool\nmcp add tool price-fetcher\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Add a new prompt\nmcp add prompt price-analysis\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Add a new prompt\nmcp add resource market-data\n```\n\n----------------------------------------\n\nTITLE: Creating MCP Projects with Additional Transport Options\nDESCRIPTION: Commands for creating a new MCP project with optional HTTP transport configuration including port and CORS settings.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new project\nmcp create <your project name here>\n\n# Create a new project with the new EXPERIMENTAL HTTP transport\nHeads up: This will set cors allowed origin to \"*\", modify it in the index if you wish\nmcp create <your project name here> --http --port 1337 --cors\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication for MCP Server\nDESCRIPTION: TypeScript code for configuring JWT-based authentication for an MCP server, specifying the secret, algorithms, and header name.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MCPServer, JWTAuthProvider } from \"mcp-framework\";\nimport { Algorithm } from \"jsonwebtoken\";\n\nconst server = new MCPServer({\n  transport: {\n    type: \"sse\",\n    options: {\n      auth: {\n        provider: new JWTAuthProvider({\n          secret: process.env.JWT_SECRET,\n          algorithms: [\"HS256\" as Algorithm], // Optional (default: [\"HS256\"])\n          headerName: \"Authorization\"         // Optional (default: \"Authorization\")\n        }),\n        endpoints: {\n          sse: true,      // Protect SSE endpoint (default: false)\n          messages: true  // Protect message endpoint (default: true)\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication for MCP Server\nDESCRIPTION: TypeScript code for configuring API key-based authentication for an MCP server, specifying the allowed keys and header name.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MCPServer, APIKeyAuthProvider } from \"mcp-framework\";\n\nconst server = new MCPServer({\n  transport: {\n    type: \"sse\",\n    options: {\n      auth: {\n        provider: new APIKeyAuthProvider({\n          keys: [process.env.API_KEY],\n          headerName: \"X-API-Key\" // Optional (default: \"X-API-Key\")\n        })\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Provider in TypeScript for MCP Framework\nDESCRIPTION: This snippet demonstrates how to create a custom authentication provider by implementing the AuthProvider interface. The implementation requires two methods: authenticate() to verify credentials from an HTTP request, and getAuthError() to define the error response for failed authentication attempts.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthProvider, AuthResult } from \"mcp-framework\";\nimport { IncomingMessage } from \"node:http\";\n\nclass CustomAuthProvider implements AuthProvider {\n  async authenticate(req: IncomingMessage): Promise<boolean | AuthResult> {\n    // Implement your custom authentication logic\n    return true;\n  }\n\n  getAuthError() {\n    return {\n      status: 401,\n      message: \"Authentication failed\"\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Stream Transport for MCP Server\nDESCRIPTION: TypeScript code for configuring HTTP Stream transport for an MCP server, including port, endpoints, response mode, session management, and resumability options.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new MCPServer({\n  transport: {\n    type: \"http-stream\",\n    options: {\n      port: 8080,                // Optional (default: 8080)\n      endpoint: \"/mcp\",          // Optional (default: \"/mcp\") \n      responseMode: \"batch\",     // Optional (default: \"batch\"), can be \"batch\" or \"stream\"\n      batchTimeout: 30000,       // Optional (default: 30000ms) - timeout for batch responses\n      maxMessageSize: \"4mb\",     // Optional (default: \"4mb\") - maximum message size\n      \n      // Session configuration\n      session: {\n        enabled: true,           // Optional (default: true)\n        headerName: \"Mcp-Session-Id\", // Optional (default: \"Mcp-Session-Id\")\n        allowClientTermination: true, // Optional (default: true)\n      },\n      \n      // Stream resumability (for missed messages)\n      resumability: {\n        enabled: false,          // Optional (default: false)\n        historyDuration: 300000, // Optional (default: 300000ms = 5min) - how long to keep message history\n      },\n      \n      // CORS configuration\n      cors: {\n        allowOrigin: \"*\"         // Other CORS options use defaults\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Transport for MCP Server\nDESCRIPTION: TypeScript code for configuring Server-Sent Events (SSE) transport for an MCP server, including port, endpoints, and CORS settings.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new MCPServer({\n  transport: {\n    type: \"sse\",\n    options: {\n      port: 8080,            // Optional (default: 8080)\n      endpoint: \"/sse\",      // Optional (default: \"/sse\")\n      messageEndpoint: \"/messages\", // Optional (default: \"/messages\")\n      cors: {\n        allowOrigin: \"*\",    // Optional (default: \"*\")\n        allowMethods: \"GET, POST, OPTIONS\", // Optional (default: \"GET, POST, OPTIONS\")\n        allowHeaders: \"Content-Type, Authorization, x-api-key\", // Optional (default: \"Content-Type, Authorization, x-api-key\")\n        exposeHeaders: \"Content-Type, Authorization, x-api-key\", // Optional (default: \"Content-Type, Authorization, x-api-key\")\n        maxAge: \"86400\"      // Optional (default: \"86400\")\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring stdio Transport for MCP Server\nDESCRIPTION: TypeScript code for configuring the default stdio transport for an MCP server, which is used for standard input/output communication.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new MCPServer();\n// or explicitly:\nconst server = new MCPServer({\n  transport: { type: \"stdio\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Modes for HTTP Stream Transport\nDESCRIPTION: TypeScript code showing how to configure batch or stream response modes for HTTP Stream transport, which determine how responses are sent to clients.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// For batch mode (default):\nconst server = new MCPServer({\n  transport: {\n    type: \"http-stream\",\n    options: {\n      responseMode: \"batch\"\n    }\n  }\n});\n\n// For stream mode:\nconst server = new MCPServer({\n  transport: {\n    type: \"http-stream\",\n    options: {\n      responseMode: \"stream\"\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MCP Framework\nDESCRIPTION: Example commands for setting environment variables to configure MCP Framework behavior, including file logging and debug options.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Enable file logging\nMCP_ENABLE_FILE_LOGGING=true node dist/index.js\n\n# Specify a custom log directory\nMCP_ENABLE_FILE_LOGGING=true MCP_LOG_DIRECTORY=my-logs\n# Enable debug messages in console\nMCP_DEBUG_CONSOLE=true\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration for Local Development\nDESCRIPTION: JSON configuration for Claude Desktop to connect to a locally developed MCP server, specifying the command and path to the server executable.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"mcpServers\": {\n\"${projectName}\": {\n      \"command\": \"node\",\n      \"args\":[\"/absolute/path/to/${projectName}/dist/index.js\"]\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration for Published MCP Servers\nDESCRIPTION: JSON configuration for Claude Desktop to connect to a published MCP server using npx to run the package.\nSOURCE: https://github.com/quantgeekdev/mcp-framework.git/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"mcpServers\": {\n\"${projectName}\": {\n      \"command\": \"npx\",\n      \"args\": [\"${projectName}\"]\n}\n}\n}\n```"
  }
]