[
  {
    "owner": "dart-lang",
    "repo": "site-www",
    "content": "TITLE: Class Definition in Dart\nDESCRIPTION: Demonstrates class declaration with properties, constructors, getters, and methods, including string interpolation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Spacecraft {\n  String name;\n  DateTime? launchDate;\n\n  // Read-only non-final property\n  int? get launchYear => launchDate?.year;\n\n  // Constructor, with syntactic sugar for assignment to members.\n  Spacecraft(this.name, this.launchDate) {\n    // Initialization code goes here.\n  }\n\n  // Named constructor that forwards to the default one.\n  Spacecraft.unlaunched(String name) : this(name, null);\n\n  // Method.\n  void describe() {\n    print('Spacecraft: $name');\n    // Type promotion doesn't work on getters.\n    var launchDate = this.launchDate;\n    if (launchDate != null) {\n      int years = DateTime.now().difference(launchDate).inDays ~/ 365;\n      print('Launched: $launchYear ($years years ago)');\n    } else {\n      print('Unlaunched');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Try-Catch in Dart\nDESCRIPTION: Demonstrates various ways to catch and handle exceptions using try-catch blocks, including type-specific catches and generic exception handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  breedMoreLlamas();\n} on OutOfLlamasException {\n  buyMoreLlamas();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  breedMoreLlamas();\n} on OutOfLlamasException {\n  // A specific exception\n  buyMoreLlamas();\n} on Exception catch (e) {\n  // Anything else that is an exception\n  print('Unknown exception: $e');\n} catch (e) {\n  // No specified type, handles all\n  print('Something really unknown: $e');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  // ···\n} on Exception catch (e) {\n  print('Exception details:\\n $e');\n} catch (e, s) {\n  print('Exception details:\\n $e');\n  print('Stack trace:\\n $s');\n}\n```\n\n----------------------------------------\n\nTITLE: Using async/await Syntax\nDESCRIPTION: Demonstrates the same asynchronous operation flow using more readable async/await syntax instead of Future chains\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> runUsingAsyncAwait() async {\n  // ...\n  var entryPoint = await findEntryPoint();\n  var exitCode = await runExecutable(entryPoint, args);\n  await flushThenExit(exitCode);\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Dart\nDESCRIPTION: Examples of concatenating strings using adjacent literals and the + operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar s1 =\n    'String '\n    'concatenation'\n    \" works even over line breaks.\";\nassert(\n  s1 ==\n      'String concatenation works even over '\n          'line breaks.',\n);\n\nvar s2 = 'The + operator ' + 'works, as well.';\nassert(s2 == 'The + operator works, as well.');\n```\n\n----------------------------------------\n\nTITLE: Building an HTTP Server in Dart\nDESCRIPTION: Shows how to create a basic HTTP server that listens on localhost:8888 and responds to requests. The server returns a plain text response for the '/dart' path and a 404 status code for any other path.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final requests = await HttpServer.bind('localhost', 8888);\n  await for (final request in requests) {\n    processRequest(request);\n  }\n}\n\nvoid processRequest(HttpRequest request) {\n  print('Got request for ${request.uri.path}');\n  final response = request.response;\n  if (request.uri.path == '/dart') {\n    response\n      ..headers.contentType = ContentType('text', 'plain')\n      ..write('Hello from the server');\n  } else {\n    response.statusCode = HttpStatus.notFound;\n  }\n  response.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Future from Async Function in Dart\nDESCRIPTION: This snippet demonstrates updating a function's return type to a `Future<T>` when the function is marked as async and doesn't explicitly return a value. The code changes the function signature to support asynchronous operations with `Future<void>`, necessary for async functions returning no explicit result.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async { ··· }\n```\n\n----------------------------------------\n\nTITLE: Synchronous vs Asynchronous Functions in Dart\nDESCRIPTION: This Dart code showcases the differences between synchronous and asynchronous function implementations. It compares the usage of async/await in function bodies, transforming the code's behavior by making asynchronous calls that imitate synchronous flow, thereby improving readability.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nString createOrderMessage() {\n  var order = fetchUserOrder();\n  return 'Your order is: $order';\n}\n\nFuture<String> fetchUserOrder() =>\n  // Imagine that this function is\n  // more complex and slow.\n  Future.delayed(const Duration(seconds: 2), () => 'Large Latte');\n\nvoid main() {\n  print('Fetching user order...');\n  print(createOrderMessage());\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String> createOrderMessage() async {\n  var order = await fetchUserOrder();\n  return 'Your order is: $order';\n}\n\nFuture<String> fetchUserOrder() =>\n  // Imagine that this function is\n  // more complex and slow.\n  Future.delayed(const Duration(seconds: 2), () => 'Large Latte');\n\nFuture<void> main() async {\n  print('Fetching user order...');\n  print(await createOrderMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Dart Isolate Communication with Ports\nDESCRIPTION: A complete implementation demonstrating how to set up two-way communication between isolates. The code creates a Worker class that spawns an isolate, manages communication ports, and processes JSON messages. It shows the basic pattern for isolate communication in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:isolate';\n\nvoid main() async {\n  final worker = Worker();\n  await worker.spawn();\n  await worker.parseJson('{\"key\":\"value\"}');\n}\n\nclass Worker {\n  late SendPort _sendPort;\n  final Completer<void> _isolateReady = Completer.sync();\n\n  Future<void> spawn() async {\n    final receivePort = ReceivePort();\n    receivePort.listen(_handleResponsesFromIsolate);\n    await Isolate.spawn(_startRemoteIsolate, receivePort.sendPort);\n  }\n\n  void _handleResponsesFromIsolate(dynamic message) {\n    if (message is SendPort) {\n      _sendPort = message;\n      _isolateReady.complete();\n    } else if (message is Map<String, dynamic>) {\n      print(message);\n    }\n  }\n\n  static void _startRemoteIsolate(SendPort port) {\n    final receivePort = ReceivePort();\n    port.send(receivePort.sendPort);\n\n    receivePort.listen((dynamic message) async {\n      if (message is String) {\n        final transformed = jsonDecode(message);\n        port.send(transformed);\n      }\n    });\n  }\n\n  Future<void> parseJson(String message) async {\n    await _isolateReady.future;\n    _sendPort.send(message);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding JSON in Dart\nDESCRIPTION: Shows how to encode Dart objects into JSON-formatted strings using jsonEncode(). Demonstrates encoding a List of Maps containing various data types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-convert.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar scores = [\n  {'score': 40},\n  {'score': 80},\n  {'score': 100, 'overtime': true, 'special_guest': null},\n];\n\nvar jsonText = jsonEncode(scores);\nassert(\n  jsonText ==\n      '[{\"score\":40},{\"score\":80},' \n          '{\"score\":100,\"overtime\":true,'\n          '\"special_guest\":null}]',\n);\n```\n\n----------------------------------------\n\nTITLE: Late Variable Declaration in Dart\nDESCRIPTION: Using late modifier to declare a variable that will be initialized after its declaration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nlate String description;\n\nvoid main() {\n  description = 'Feijoada!';\n  print(description);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Declaration in Dart\nDESCRIPTION: Shows how to implement a basic function in Dart with type annotations. The function checks if a given atomic number corresponds to a noble gas.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nbool isNoble(int atomicNumber) {\n  return _nobleGases[atomicNumber] != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Synchronous Function to Async\nDESCRIPTION: Demonstrates how to convert a synchronous function to an asynchronous one by adding the async keyword, which changes the return type to Future<String>.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String> lookUpVersion() async => '1.0.0';\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with Adjacent Literals in Dart\nDESCRIPTION: Shows the recommended way to concatenate string literals in Dart by placing them adjacent to each other, avoiding explicit + operator usage.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nraiseAlarm(\n  'ERROR: Parts of the spaceship are on fire. Other '\n  'parts are overrun by martians. Unclear which are which.',\n);\n```\n\n----------------------------------------\n\nTITLE: Named Parameters Function Declaration\nDESCRIPTION: Demonstrates how to define a function with optional named parameters in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid enableFlags({bool? bold, bool? hidden}) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with Try-Catch in Async Functions\nDESCRIPTION: Demonstrates how to handle errors using try/catch blocks in asynchronous code with await.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  version = await lookUpVersion();\n} catch (e) {\n  // React to inability to look up the version\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker-based JSON Parsing with Isolates in Dart\nDESCRIPTION: A robust implementation of a Worker class that manages isolate communication for JSON parsing. The code demonstrates spawning isolates, handling bi-directional communication through ports, managing request/response cycles with completers, and proper resource cleanup.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:convert';\nimport 'dart:isolate';\n\nvoid main() async {\n  final worker = await Worker.spawn();\n  print(await worker.parseJson('{\"key\":\"value\"}'));\n  print(await worker.parseJson('\"banana\"'));\n  print(await worker.parseJson('[true, false, null, 1, \"string\"]'));\n  print(\n    await Future.wait([worker.parseJson('\"yes\"'), worker.parseJson('\"no\"')]),\n  );\n  worker.close();\n}\n\nclass Worker {\n  final SendPort _commands;\n  final ReceivePort _responses;\n  final Map<int, Completer<Object?>> _activeRequests = {};\n  int _idCounter = 0;\n  bool _closed = false;\n\n  Future<Object?> parseJson(String message) async {\n    if (_closed) throw StateError('Closed');\n    final completer = Completer<Object?>.sync();\n    final id = _idCounter++;\n    _activeRequests[id] = completer;\n    _commands.send((id, message));\n    return await completer.future;\n  }\n\n  static Future<Worker> spawn() async {\n    // Create a receive port and add its initial message handler\n    final initPort = RawReceivePort();\n    final connection = Completer<(ReceivePort, SendPort)>.sync();\n    initPort.handler = (initialMessage) {\n      final commandPort = initialMessage as SendPort;\n      connection.complete((\n        ReceivePort.fromRawReceivePort(initPort),\n        commandPort,\n      ));\n    };\n\n    // Spawn the isolate.\n    try {\n      await Isolate.spawn(_startRemoteIsolate, (initPort.sendPort));\n    } on Object {\n      initPort.close();\n      rethrow;\n    }\n\n    final (ReceivePort receivePort, SendPort sendPort) =\n        await connection.future;\n\n    return Worker._(receivePort, sendPort);\n  }\n\n  Worker._(this._responses, this._commands) {\n    _responses.listen(_handleResponsesFromIsolate);\n  }\n\n  void _handleResponsesFromIsolate(dynamic message) {\n    final (int id, Object? response) = message as (int, Object?);\n    final completer = _activeRequests.remove(id)!;\n\n    if (response is RemoteError) {\n      completer.completeError(response);\n    } else {\n      completer.complete(response);\n    }\n\n    if (_closed && _activeRequests.isEmpty) _responses.close();\n  }\n\n  static void _handleCommandsToIsolate(\n    ReceivePort receivePort,\n    SendPort sendPort,\n  ) {\n    receivePort.listen((message) {\n      if (message == 'shutdown') {\n        receivePort.close();\n        return;\n      }\n      final (int id, String jsonText) = message as (int, String);\n      try {\n        final jsonData = jsonDecode(jsonText);\n        sendPort.send((id, jsonData));\n      } catch (e) {\n        sendPort.send((id, RemoteError(e.toString(), '')));\n      }\n    });\n  }\n\n  static void _startRemoteIsolate(SendPort sendPort) {\n    final receivePort = ReceivePort();\n    sendPort.send(receivePort.sendPort);\n    _handleCommandsToIsolate(receivePort, sendPort);\n  }\n\n  void close() {\n    if (!_closed) {\n      _closed = true;\n      _commands.send('shutdown');\n      if (_activeRequests.isEmpty) _responses.close();\n      print('--- port closed --- ');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Nullability with Generics in Dart\nDESCRIPTION: Explores the interaction between nullability and generic types in Dart. It covers potentially nullable types, nullable bounds, and best practices for working with nullability in generic classes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nclass Box<T> {\n  final T object;\n  Box(this.object);\n}\n\nvoid main() {\n  Box<String>('a string');\n  Box<int?>(null);\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nclass Box<T> {\n  T? object;\n  Box.empty();\n  Box.full(this.object);\n}\n\n// Using null safety:\nclass Box<T> {\n  T? object;\n  Box.empty();\n  Box.full(this.object);\n\n  T unbox() => object as T;\n}\n\n// Using null safety:\nvoid main() {\n  var box = Box<int?>.full(null);\n  print(box.unbox());\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nclass Interval<T extends num> {\n  T min, max;\n\n  Interval(this.min, this.max);\n\n  bool get isEmpty => max <= min;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nclass Interval<T extends num?> {\n  T min, max;\n\n  Interval(this.min, this.max);\n\n  bool get isEmpty {\n    var localMin = min;\n    var localMax = max;\n\n    // No min or max means an open-ended interval.\n    if (localMin == null || localMax == null) return false;\n    return localMax <= localMin;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Generation with Async Star in Dart\nDESCRIPTION: Shows how to use async* to generate a stream of strings with delayed emissions\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nStream<String> report(Spacecraft craft, Iterable<String> objects) async* {\n  for (final object in objects) {\n    await Future.delayed(oneSecond);\n    yield '${craft.name} flies by $object';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON in Dart\nDESCRIPTION: Demonstrates how to decode a JSON-encoded string into Dart objects using jsonDecode(). The example shows converting a JSON array of score objects into a Dart List of Maps.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-convert.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// NOTE: Be sure to use double quotes (\"),\n// not single quotes ('), inside the JSON string.\n// This string is JSON, not Dart.\nvar jsonString = '''\n  [\n    {\"score\": 40},\n    {\"score\": 80}\n  ]\n''';\n\nvar scores = jsonDecode(jsonString);\nassert(scores is List);\n\nvar firstScore = scores[0];\nassert(firstScore is Map);\nassert(firstScore['score'] == 40);\n```\n\n----------------------------------------\n\nTITLE: Destructuring Class Instances in Dart\nDESCRIPTION: Shows how to destructure an instance of a class in Dart using named object patterns. This allows for direct access to the properties of class instances via pattern matching. Useful for Dart developers handling class instances.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal Foo myFoo = Foo(one: 'one', two: 2);\nvar Foo(:one, :two) = myFoo;\nprint('one $one, two $two');\n```\n\n----------------------------------------\n\nTITLE: Introducing Futures in Dart\nDESCRIPTION: Demonstrates how futures work in Dart by showing the asynchronous nature of Future.delayed(). The example prints messages in a non-sequential order due to the delay.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> fetchUserOrder() {\n  // Imagine that this function is fetching user info from another service or database.\n  return Future.delayed(const Duration(seconds: 2), () => print('Large Latte'));\n}\n\nvoid main() {\n  fetchUserOrder();\n  print('Fetching user order...');\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Pi using Monte Carlo Method in Dart\nDESCRIPTION: This snippet demonstrates various Dart language features including async programming, streams, generators, classes, and type inference. It calculates an approximation of Pi using the Monte Carlo method, showcasing Dart's capabilities for mathematical computations and data processing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math' show Random;\n\nvoid main() async {\n  print('Compute π using the Monte Carlo method.');\n  await for (final estimate in computePi().take(100)) {\n    print('π ≅ $estimate');\n  }\n}\n\n/// Generates a stream of increasingly accurate estimates of π.\nStream<double> computePi({int batch = 100000}) async* {\n  var total = 0; // Inferred to be of type int\n  var count = 0;\n  while (true) {\n    final points = generateRandom().take(batch);\n    final inside = points.where((p) => p.isInsideUnitCircle);\n\n    total += batch;\n    count += inside.length;\n    final ratio = count / total;\n\n    // Area of a circle is A = π⋅r², therefore π = A/r².\n    // So, when given random points with x ∈ <0,1>,\n    // y ∈ <0,1>, the ratio of those inside a unit circle\n    // should approach π / 4. Therefore, the value of π\n    // should be:\n    yield ratio * 4;\n  }\n}\n\nIterable<Point> generateRandom([int? seed]) sync* {\n  final random = Random(seed);\n  while (true) {\n    yield Point(random.nextDouble(), random.nextDouble());\n  }\n}\n\nclass Point {\n  final double x;\n  final double y;\n\n  const Point(this.x, this.y);\n\n  bool get isInsideUnitCircle => x * x + y * y <= 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Web DOM Manipulation with package:web in Dart\nDESCRIPTION: A simple example showing how to use package:web to manipulate DOM elements in a Dart application. This code imports the web package, selects a div element, and updates its text content with the current timestamp.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:web/web.dart';\n\nvoid main() {\n  final div = document.querySelector('div')!;\n  div.text = 'Text set at ${DateTime.now()}';\n}\n```\n\n----------------------------------------\n\nTITLE: Execution Flow in Async Dart Functions\nDESCRIPTION: This Dart snippet demonstrates how execution order changes with async functions using `await`. Inside the async function, synchronous code runs up until the first `await`, at which point execution pauses until the awaited future completes. This showcases the controlled flow typical of async/await in Dart applications.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> printOrderMessage() async {\n  print('Awaiting user order...');\n  var order = await fetchUserOrder();\n  print('Your order is: $order');\n}\n\nFuture<String> fetchUserOrder() {\n  // Imagine that this function is more complex and slow.\n  return Future.delayed(const Duration(seconds: 4), () => 'Large Latte');\n}\n\nvoid main() async {\n  countSeconds(4);\n  await printOrderMessage();\n}\n\nvoid countSeconds(int s) {\n  for (var i = 1; i <= s; i++) {\n    Future.delayed(Duration(seconds: i), () => print(i));\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar order = await fetchUserOrder();\nprint('Awaiting user order...');\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization with Late in Dart\nDESCRIPTION: Demonstrating lazy initialization using late modifier for expensive operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nlate String temperature = readThermometer();\n```\n\n----------------------------------------\n\nTITLE: Using Future with then() Method\nDESCRIPTION: Example of chaining asynchronous operations using Future's then() method to execute functions sequentially\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid runUsingFuture() {\n  // ...\n  findEntryPoint()\n      .then((entryPoint) {\n        return runExecutable(entryPoint, args);\n      })\n      .then(flushThenExit);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Code Samples in Documentation\nDESCRIPTION: Example showing how to include executable code samples within documentation comments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n/// The lesser of two numbers.\n///\n/// ```dart\n/// min(5, 3) == 3\n/// ```\nnum min(num a, num b) => ...\n```\n\n----------------------------------------\n\nTITLE: Reading a File Asynchronously using await for with Error Handling in Dart\nDESCRIPTION: This snippet demonstrates reading a file asynchronously using an `await for` loop. The code reads a file named 'config.txt', transforms the stream of bytes into lines of text using `utf8.decoder` and `LineSplitter`, and then prints the length of each line. Error handling is implemented using a try-catch block.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> readFileAwaitFor() async {\n  var config = File('config.txt');\n  Stream<List<int>> inputStream = config.openRead();\n\n  var lines = inputStream\n      .transform(utf8.decoder)\n      .transform(const LineSplitter());\n  try {\n    await for (final line in lines) {\n      print('Got ${line.length} characters from stream');\n    }\n    print('file is now closed');\n  } catch (e) {\n    print(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables for Nullable Field Access in Dart\nDESCRIPTION: Shows how to safely handle nullable fields by promoting them using a local variable assignment pattern. This approach allows for clean type promotion while maintaining null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass UploadException {\n  final Response? response;\n\n  UploadException([this.response]);\n\n  @override\n  String toString() {\n    final response = this.response;\n    if (response != null) {\n      return 'Could not complete upload to ${response.url} '\n          '(error code ${response.errorCode}): ${response.reason}.';\n    }\n    return 'Could not upload (no response).';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processing with await-for in Dart\nDESCRIPTION: Demonstrates processing a stream using await-for loop and yield keyword to create a new stream of running sums.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> sumStream(Stream<int> stream) async* {\n  var sum = 0;\n  await for (final value in stream) {\n    yield sum += value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Network Request with Error Handling using http.get in Dart\nDESCRIPTION: This snippet shows how to use the http.get function to make a GET request and handle the response, including checking the status code for errors. It demonstrates proper error handling in network requests.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');\n  final httpPackageResponse = await http.get(httpPackageUrl);\n  if (httpPackageResponse.statusCode != 200) {\n    print('Failed to retrieve the http package!');\n    return;\n  }\n  print(httpPackageResponse.body);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Method in Dart Point Class\nDESCRIPTION: Demonstrates creating a Point class with an instance method distanceTo() that calculates the distance between two points using the Pythagorean theorem.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/methods.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nclass Point {\n  final double x;\n  final double y;\n\n  // Sets the x and y instance variables\n  // before the constructor body runs.\n  Point(this.x, this.y);\n\n  double distanceTo(Point other) {\n    var dx = x - other.x;\n    var dy = y - other.y;\n    return sqrt(dx * dx + dy * dy);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters and Returns in Prose\nDESCRIPTION: Example of documenting method parameters, return values, and exceptions using natural prose rather than formal tags.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n/// Defines a flag with the given [name] and [abbreviation].\n///\n/// The [name] and [abbreviation] strings must not be empty.\n///\n/// Returns a new flag.\n///\n/// Throws a [DuplicateFlagException] if there is already an option named\n/// [name] or there is already an option using the [abbreviation].\nFlag addFlag(String name, String abbreviation) => ...\n```\n\n----------------------------------------\n\nTITLE: Number and String Conversion in Dart\nDESCRIPTION: Examples of converting between numbers and strings using parse() and toString() methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// String -> int\nvar one = int.parse('1');\nassert(one == 1);\n\n// String -> double\nvar onePointOne = double.parse('1.1');\nassert(onePointOne == 1.1);\n\n// int -> String\nString oneAsString = 1.toString();\nassert(oneAsString == '1');\n\n// double -> String\nString piAsString = 3.14159.toStringAsFixed(2);\nassert(piAsString == '3.14');\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Errors in Dart Futures\nDESCRIPTION: Shows how to use the test parameter of catchError() to handle different types of errors with specific callbacks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  handleAuthResponse(const {'username': 'dash', 'age': 3})\n      .then((_) => ...)\n      .catchError(handleFormatException, test: (e) => e is FormatException)\n      .catchError(\n        handleAuthorizationException,\n        test: (e) => e is AuthorizationException,\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: Library-Level Documentation in Dart\nDESCRIPTION: Shows how to document a library using doc comments before the library directive.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// A really great test library.\n@TestOn('browser')\nlibrary;\n```\n\n----------------------------------------\n\nTITLE: Using await Expression in Dart\nDESCRIPTION: A simple example showing how to use await to wait for the result of an asynchronous function.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait lookUpVersion();\n```\n\n----------------------------------------\n\nTITLE: Multiple Await Expressions in an Async Function\nDESCRIPTION: Shows how to use multiple await expressions in sequence within a single async function to wait for multiple asynchronous operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar entrypoint = await findEntryPoint();\nvar exitCode = await runExecutable(entrypoint, args);\nawait flushThenExit(exitCode);\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Classes with Dart\nDESCRIPTION: Shows how to define an abstract class with an abstract method and a concrete method implementation\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Describable {\n  void describe();\n\n  void describeWithEmphasis() {\n    print('=========');\n    describe();\n    print('=========');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning Worker Isolate with Error Handling in Worker.spawn\nDESCRIPTION: Complete implementation of the Worker.spawn method which spawns an isolate with proper error handling. The code wraps isolate creation in a try/catch block, ensures port cleanup on failure, and returns an initialized Worker instance when successful.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  final SendPort _commands;\n  final ReceivePort _responses;\n\n  static Future<Worker> spawn() async {\n    // Create a receive port and add its initial message handler\n    final initPort = RawReceivePort();\n    final connection = Completer<(ReceivePort, SendPort)>.sync();\n    initPort.handler = (initialMessage) {\n      final commandPort = initialMessage as SendPort;\n      connection.complete((\n        ReceivePort.fromRawReceivePort(initPort),\n        commandPort,\n      ));\n    };\n    // Spawn the isolate.\n    try {\n      await Isolate.spawn(_startRemoteIsolate, (initPort.sendPort));\n    } on Object {\n      initPort.close();\n      rethrow;\n    }\n\n    final (ReceivePort receivePort, SendPort sendPort) =\n        await connection.future;\n\n    return Worker._(receivePort, sendPort);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Function with Error Handling and Delayed Future\nDESCRIPTION: Provides a complete example of an `async` function that fetches user order, handles potential errors using `try-catch`, and uses `Future.delayed` to simulate an asynchronous operation that may throw an exception.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"Future<void> printOrderMessage() async {\\n  try {\\n    print('Awaiting user order...');\\n    var order = await fetchUserOrder();\\n    print(order);\\n  } catch (err) {\\n    print('Caught error: $err');\\n  }\\n}\\n\\nFuture<String> fetchUserOrder() {\\n  // Imagine that this function is more complex.\\n  var str = Future.delayed(\\n    const Duration(seconds: 4),\\n    () => throw 'Cannot locate user order',\\n  );\\n  return str;\\n}\\n\\nvoid main() async {\\n  await printOrderMessage();\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Asynchronous For Loop with Streams\nDESCRIPTION: Shows the syntax for an asynchronous for loop (await for) to process values from a Stream one at a time as they arrive.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait for (varOrType identifier in expression) {\n  // Executes each time the stream emits a value.\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming File Contents in Dart\nDESCRIPTION: Shows how to read a file's contents as a stream, processing it a little at a time. This example uses UTF-8 decoder and LineSplitter to process the file line by line, with await for syntax for stream handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\nimport 'dart:convert';\n\nvoid main() async {\n  var config = File('config.txt');\n  Stream<List<int>> inputStream = config.openRead();\n\n  var lines = utf8.decoder.bind(inputStream).transform(const LineSplitter());\n  try {\n    await for (final line in lines) {\n      print('Got ${line.length} characters from stream');\n    }\n    print('file is now closed');\n  } catch (e) {\n    print(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Numeric Variables in Dart\nDESCRIPTION: Example showing how to use the num type to store both integer and double values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nnum x = 1; // x can have both int and double values\nx += 2.5;\n```\n\n----------------------------------------\n\nTITLE: Using Await in Async Function in Dart\nDESCRIPTION: This example highlights using the `await` keyword in an async function to pause the execution until a future completes. It is a fundamental method of handling asynchronous results by processing the returned future's outcome.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nprint(await createOrderMessage());\n```\n\n----------------------------------------\n\nTITLE: Iterating over a Directory Stream using await for in Dart\nDESCRIPTION: This snippet shows how to iterate over a stream of FileSystemEntity objects using an asynchronous for loop (`await for`). It asynchronously checks if the provided path is a directory, and if so, iterates through the directory's contents, processing each file using the `searchFile` function.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid main(List<String> arguments) async {\n  // ...\n  if (await FileSystemEntity.isDirectory(searchPath)) {\n    final startingDir = Directory(searchPath);\n    await for (final entity in startingDir.list()) {\n      if (entity is File) {\n        searchFile(entity, searchTerms);\n      }\n    }\n  } else {\n    searchFile(File(searchPath), searchTerms);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Checking with Generics\nDESCRIPTION: Demonstrates how to check generic types at runtime in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar names = <String>[];\nnames.addAll(['Seth', 'Kathy', 'Lars']);\nprint(names is List<String>); // true\n```\n\n----------------------------------------\n\nTITLE: Handling Future Errors in Dart\nDESCRIPTION: Shows how a future can complete with an error by throwing an exception after a delay. Demonstrates error handling in asynchronous operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> fetchUserOrder() {\n  // Imagine that this function is fetching user info but encounters a bug.\n  return Future.delayed(\n    const Duration(seconds: 2),\n    () => throw Exception('Logout failed: user ID is invalid'),\n  );\n}\n\nvoid main() {\n  fetchUserOrder();\n  print('Fetching user order...');\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Error Handling Solution in Dart\nDESCRIPTION: This code snippet provides a solution for handling errors in an asynchronous function using try-catch block. The `changeUsername()` function attempts to fetch a new username and returns it, but if an error occurs during the process, it catches the error and returns its string representation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String> changeUsername() async {\n  try {\n    return await fetchNewUsername();\n  } catch (err) {\n    return err.toString();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Collections in Dart\nDESCRIPTION: Examples of creating and using Map collections in Dart, including literal syntax and key-value operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/collections.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar gifts = {\n  // Key:    Value\n  'first': 'partridge',\n  'second': 'turtledoves',\n  'fifth': 'golden rings',\n};\n\nvar nobleGases = {2: 'helium', 10: 'neon', 18: 'argon'};\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar gifts = Map<String, String>();\ngifts['first'] = 'partridge';\ngifts['second'] = 'turtledoves';\ngifts['fifth'] = 'golden rings';\n\nvar nobleGases = Map<int, String>();\nnobleGases[2] = 'helium';\nnobleGases[10] = 'neon';\nnobleGases[18] = 'argon';\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal constantMap = const {2: 'helium', 10: 'neon', 18: 'argon'};\n\n// constantMap[2] = 'Helium'; // This line will cause an error.\n```\n\n----------------------------------------\n\nTITLE: DartPad Main Function Implementation\nDESCRIPTION: Complete example with main() function showing list processing with anonymous functions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  const list = ['apples', 'bananas', 'oranges'];\n\n  var uppercaseList =\n      list.map((item) {\n        return item.toUpperCase();\n      }).toList();\n  // Convert to list after mapping\n\n  for (var item in uppercaseList) {\n    print('$item: ${item.length}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function as Parameter Example\nDESCRIPTION: Demonstrates passing a function as a parameter to another function in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid printElement(int element) {\n  print(element);\n}\n\nvar list = [1, 2, 3];\n\n// Pass printElement as a parameter.\nlist.forEach(printElement);\n```\n\n----------------------------------------\n\nTITLE: Function Wildcard Parameters in Dart\nDESCRIPTION: Illustrates various ways to use wildcard parameters in function declarations, including constructors and callbacks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nFoo(_, this._, super._, void _()) {}\n\nlist.where((_) => true);\n\nvoid f(void g(int _, bool _)) {}\n\ntypedef T = void Function(String _, String _);\n```\n\n----------------------------------------\n\nTITLE: Declaring Nullable Variables in Dart\nDESCRIPTION: Shows how to declare nullable variables in Dart by adding a '?' to the type declaration, indicating that the variable can hold a null value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint? aNullableInt = null;\n```\n\n----------------------------------------\n\nTITLE: Import Ordering in Dart\nDESCRIPTION: Demonstrates proper ordering of dart: imports before other imports.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'dart:collection';\n\nimport 'package:bar/bar.dart';\nimport 'package:foo/foo.dart';\n```\n\n----------------------------------------\n\nTITLE: Implementing Operator Overloading in Dart Vector Class\nDESCRIPTION: Shows how to implement custom operators (+, -, ==) for a Vector class, including vector addition, subtraction, and equality comparison with proper hashCode override.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/methods.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Vector {\n  final int x, y;\n\n  Vector(this.x, this.y);\n\n  Vector operator +(Vector v) => Vector(x + v.x, y + v.y);\n  Vector operator -(Vector v) => Vector(x - v.x, y - v.y);\n\n  @override\n  bool operator ==(Object other) =>\n      other is Vector && x == other.x && y == other.y;\n\n  @override\n  int get hashCode => Object.hash(x, y);\n}\n\nvoid main() {\n  final v = Vector(2, 3);\n  final w = Vector(2, 2);\n\n  assert(v + w == Vector(4, 5));\n  assert(v - w == Vector(0, 1));\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring JSON in Dart Using Patterns\nDESCRIPTION: Illustrates how to use map and list patterns in Dart to destructure JSON data. This code snippet demonstrates validation and extraction of data from a JSON object more efficiently compared to traditional methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nif (data case {'user': [String name, int age]}) {\n  print('User $name is $age years old.');\n}\n```\n\n----------------------------------------\n\nTITLE: Improved StreamController Implementation\nDESCRIPTION: A properly implemented version of the timed counter stream that handles subscription state changes and pause functionality correctly.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> timedCounter(Duration interval, [int? maxCount]) {\n  late StreamController<int> controller;\n  Timer? timer;\n  int counter = 0;\n\n  void tick(_) {\n    counter++;\n    controller.add(counter); // Ask stream to send counter values as event.\n    if (counter == maxCount) {\n      timer?.cancel();\n      controller.close(); // Ask stream to shut down and tell listeners.\n    }\n  }\n\n  void startTimer() {\n    timer = Timer.periodic(interval, tick);\n  }\n\n  void stopTimer() {\n    timer?.cancel();\n    timer = null;\n  }\n\n  controller = StreamController<int>(\n    onListen: startTimer,\n    onPause: stopTimer,\n    onResume: startTimer,\n    onCancel: stopTimer,\n  );\n\n  return controller.stream;\n}\n```\n\n----------------------------------------\n\nTITLE: Class and Type Naming in Dart\nDESCRIPTION: Examples of proper UpperCamelCase naming for classes, enums, typedefs, and type parameters in Dart. Demonstrates naming conventions for regular classes and annotation classes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass SliderMenu {\n   ...\n}\n\nclass HttpRequest {\n   ...\n}\n\ntypedef Predicate<T> = bool Function(T value);\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo {\n  const Foo([Object? arg]);\n}\n\n@Foo(anArg)\nclass A {\n   ...\n}\n\n@Foo()\nclass B {\n   ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nconst foo = Foo();\n\n@foo\nclass C {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cascade Notation for Fluent Object Configuration\nDESCRIPTION: Demonstrates Dart's cascade notation (`..` and `?..`) for performing multiple operations on the same object, enabling more fluent and concise object configuration and method chaining.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar paint = Paint()\n  ..color = Colors.black\n  ..strokeCap = StrokeCap.round\n  ..strokeWidth = 5.0;\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal addressBook = (AddressBookBuilder()\n      ..name = 'jenny'\n      ..email = 'jenny@example.com'\n      ..phone = (PhoneNumberBuilder()\n            ..number = '415-555-0100'\n            ..label = 'home')\n          .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Destructuring a Record with Named Fields in Dart\nDESCRIPTION: Illustrates how to destructure a record with named fields using a pattern. This approach makes it easier to work with complex data structures directly from function returns. Essential for Dart users who need efficient data unpacking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal (:name, :age) = getData(); // For example, return (name: 'doug', age: 25);\n```\n\n----------------------------------------\n\nTITLE: Using Dart Tool for App Development\nDESCRIPTION: This snippet demonstrates a typical workflow using the 'dart' tool for creating, analyzing, testing, and running a Dart console application. It involves creating a new project, navigating into it, running the analyzer, executing tests, and finally running the Dart application.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-tool.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart create -t console my_app\n$ cd my_app\n$ dart analyze\n$ dart test\n$ dart run bin/my_app.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Mixin Usage in Dart\nDESCRIPTION: Demonstrates how to use mixins with the 'with' keyword to add functionality to classes. Shows two classes extending mixins with different combinations of traits.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Musician extends Performer with Musical {\n  // ···\n}\n\nclass Maestro extends Person with Musical, Aggressive, Demented {\n  Maestro(String maestroName) {\n    name = maestroName;\n    canConduct = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Async Function in Dart\nDESCRIPTION: An example of how to mark a function as async using the async keyword, allowing the use of await within the function.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> checkVersion() async {\n  var version = await lookUpVersion();\n  // Do something with version\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Dart Isolate APIs\nDESCRIPTION: List of key Dart isolate APIs for managing concurrent processing and inter-isolate communication, including spawn, exit, receive, and send methods\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nIsolate.exit()\n```\n\nLANGUAGE: dart\nCODE:\n```\nIsolate.spawn()\n```\n\nLANGUAGE: dart\nCODE:\n```\nReceivePort\n```\n\nLANGUAGE: dart\nCODE:\n```\nSendPort\n```\n\n----------------------------------------\n\nTITLE: Multiple Return Values with Records\nDESCRIPTION: Demonstrates using records to return multiple values from a function\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Returns multiple values in a record:\n(String name, int age) userInfo(Map<String, dynamic> json) {\n  return (json['name'] as String, json['age'] as int);\n}\n\nfinal json = <String, dynamic>{'name': 'Dash', 'age': 10, 'color': 'blue'};\n\n// Destructures using a record pattern with positional fields:\nvar (name, age) = userInfo(json);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Reading with Future in Dart\nDESCRIPTION: Demonstrates reading a file asynchronously using Future and then() callback pattern.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String> _readFileAsync(String filename) {\n  final file = File(filename);\n\n  // .readAsString() returns a Future.\n  // .then() registers a callback to be executed when `readAsString` resolves.\n  return file.readAsString().then((contents) {\n    return contents.trim();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Anonymous Function Syntax in Dart\nDESCRIPTION: Shows the basic structure of an anonymous function in Dart with optional type annotations and parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n([[Type] param1[, ...]]) {\n  codeBlock;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Messages from Worker Isolate in Dart\nDESCRIPTION: Implementation of the _handleResponsesFromIsolate method that processes messages received from the worker isolate. It captures the worker's SendPort for future communication and handles decoded JSON objects returned from the worker.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvoid _handleResponsesFromIsolate(dynamic message) {\n  if (message is SendPort) {\n    _sendPort = message;\n    _isolateReady.complete();\n  } else if (message is Map<String, dynamic>) {\n    print(message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Guard Clause Pattern Matching\nDESCRIPTION: Demonstrates pattern matching with guard clauses in a switch statement for symmetric shapes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nswitch (shape) {\n  case Square(size: var s) || Circle(size: var s) when s > 0:\n    print('Non-empty symmetric shape');\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Type Members Example\nDESCRIPTION: Example showing different types of members that can be declared in an extension type including operators, getters, and methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nextension type NumberE(int value) {\n  NumberE operator +(NumberE other) =>\n      NumberE(value + other.value);\n  NumberE get myNum => this;\n  bool isValid() => !value.isNegative;\n}\n```\n\n----------------------------------------\n\nTITLE: Safeguarding Asynchronous Code with runZonedGuarded - Dart\nDESCRIPTION: Shows how to use runZonedGuarded for guarding asynchronous operations and capturing uncaught errors in Dart. The error is thrown in a Timer callback, and the custom error handler logs this error without terminating the program. Usage requires the dart:async library and a custom onError callback.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nrunZonedGuarded(() {\\n  Timer.run(() { throw 'Would normally kill the program'; });\\n}, (error, stackTrace) {\\n  print('Uncaught error: $error');\\n});\n```\n\n----------------------------------------\n\nTITLE: Control Flow Statements in Dart\nDESCRIPTION: Shows common control flow statements including if-else conditions, for loops (both for-in and traditional), and while loops.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nif (year >= 2001) {\n  print('21st century');\n} else if (year >= 1901) {\n  print('20th century');\n}\n\nfor (final object in flybyObjects) {\n  print(object);\n}\n\nfor (int month = 1; month <= 12; month++) {\n  print(month);\n}\n\nwhile (year < 2016) {\n  year += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing File Contents in Dart\nDESCRIPTION: Demonstrates how to write data to a file using an IOSink obtained from File.openWrite(). The default mode completely overwrites existing data in the file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar logFile = File('log.txt');\nvar sink = logFile.openWrite();\nsink.write('FILE ACCESSED ${DateTime.now()}\\n');\nawait sink.flush();\nawait sink.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces in Dart\nDESCRIPTION: Demonstrates how to implement implicit interfaces in Dart, showing interface declaration and implementation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// A person. The implicit interface contains greet().\nclass Person {\n  // In the interface, but visible only in this library.\n  final String _name;\n\n  // Not in the interface, since this is a constructor.\n  Person(this._name);\n\n  // In the interface.\n  String greet(String who) => 'Hello, $who. I am $_name.';\n}\n\n// An implementation of the Person interface.\nclass Impostor implements Person {\n  String get _name => '';\n\n  String greet(String who) => 'Hi $who. Do you know who I am?';\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Direct Field Access in Dart Box Class\nDESCRIPTION: Shows how to directly expose a field in Dart without unnecessary getters and setters. Unlike Java or C#, Dart allows fields to be later wrapped in getters/setters without changing call sites.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  Object? contents;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Distance Calculator Method in Dart Point Class\nDESCRIPTION: Demonstrates the implementation of a static method 'distanceBetween' in a Point class that calculates the Euclidean distance between two points. The method operates directly on the class without requiring an instance and uses the math library for calculations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nclass Point {\n  double x, y;\n  Point(this.x, this.y);\n\n  static double distanceBetween(Point a, Point b) {\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    return sqrt(dx * dx + dy * dy);\n  }\n}\n\nvoid main() {\n  var a = Point(2, 2);\n  var b = Point(4, 4);\n  var distance = Point.distanceBetween(a, b);\n  assert(2.8 < distance && distance < 2.9);\n  print(distance);\n}\n```\n\n----------------------------------------\n\nTITLE: Using async/await in Dart (Good Practice)\nDESCRIPTION: This example demonstrates the preferred approach for writing asynchronous code in Dart using async/await. This pattern improves readability and lets you use standard Dart control flow within asynchronous code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_43\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> countActivePlayers(String teamName) async {\n  try {\n    var team = await downloadTeam(teamName);\n    if (team == null) return 0;\n\n    var players = await team.roster;\n    return players.where((player) => player.isActive).length;\n  } catch (e) {\n    log.error(e);\n    return 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies with Caret Syntax in YAML\nDESCRIPTION: Demonstrates how to use caret syntax to specify version constraints for dependencies in a pubspec.yaml file. This syntax allows for automatic updates within compatible version ranges.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  # Covers all versions from 1.3.0 to 1.y.z, not including 2.0.0\n  path: ^1.3.0\n  # Covers all versions from 1.1.0 to 1.y.z, not including 2.0.0\n  collection: ^1.1.0\n  # Covers all versions from 0.1.2 to 0.1.z, not including 0.2.0\n  string_scanner: ^0.1.2\n```\n\n----------------------------------------\n\nTITLE: Defining a Codec in Dart\nDESCRIPTION: This snippet defines an abstract class Codec in Dart that provides methods for encoding and decoding data. The class outlines the public methods for encoding, decoding, and managing codec behavior such as fusing and inversion.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Codec<S, T> {\n  const Codec();\n\n  T encode(S input) => encoder.convert(input);\n  S decode(T encoded) => decoder.convert(encoded);\n\n  Converter<S, T> get encoder;\n  Converter<T, S> get decoder;\n\n  Codec<S, dynamic> fuse(Codec<T, dynamic> other) { .. }\n  Codec<T, S> get inverted => ...;\n}\n```\n\n----------------------------------------\n\nTITLE: Using async/await Instead of Completer in Dart\nDESCRIPTION: This example shows how to use async/await as a cleaner alternative to Completer. This approach is more readable and makes asynchronous code look more like synchronous code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_50\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> fileContainsBear(String path) async {\n  var contents = await File(path).readAsString();\n  return contents.contains('bear');\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Expressions in Dart\nDESCRIPTION: Illustrates Dart's concise conditional expressions using the ternary `?:` and null-coalescing `??` operators for compact value assignment and null handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar visibility = isPublic ? 'public' : 'private';\n\nString playerName(String? name) => name ?? 'Guest';\n```\n\n----------------------------------------\n\nTITLE: Using then() with HTTP Client\nDESCRIPTION: Example of using then() to handle the result of an HTTP request that returns a Future\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nhttpClient.read(url).then((String result) {\n  print(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Constructor in Dart\nDESCRIPTION: Demonstrates factory constructors with caching and JSON initialization capabilities.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Logger {\n  final String name;\n  bool mute = false;\n\n  // _cache is library-private, thanks to\n  // the _ in front of its name.\n  static final Map<String, Logger> _cache = <String, Logger>{};\n\n  factory Logger(String name) {\n    return _cache.putIfAbsent(name, () => Logger._internal(name));\n  }\n\n  factory Logger.fromJson(Map<String, Object> json) {\n    return Logger(json['name'].toString());\n  }\n\n  Logger._internal(this.name);\n\n  void log(String msg) {\n    if (!mute) print(msg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Stream Methods in Dart\nDESCRIPTION: This snippet showcases methods that work with asynchronous operations on streams. `asyncExpand` and `asyncMap` allow transforming stream elements using asynchronous functions, while `distinct` filters out consecutive duplicate elements from the stream. These methods are useful for handling data that arrives over time and requires asynchronous processing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"Stream<E> asyncExpand<E>(Stream<E>? Function(T event) convert);\nStream<E> asyncMap<E>(FutureOr<E> Function(T event) convert);\nStream<T> distinct([bool Function(T previous, T next)? equals]);\"\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Error Handling in Dart with `async` and `await`\nDESCRIPTION: This snippet defines an asynchronous function `changeUsername()` that calls `fetchNewUsername()` and returns its result. It uses a try-catch block to catch any errors that occur during the `fetchNewUsername()` call and returns the string value of the error. The snippet also includes a provided `fetchNewUsername()` function that simulates an asynchronous operation that throws an error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n// TODO: Implement changeUsername here.\nchangeUsername() {}\n\n// The following function is provided to you to simulate\n// an asynchronous operation that could take a while and\n// potentially throw an exception.\n\nFuture<String> fetchNewUsername() =>\n    Future.delayed(const Duration(milliseconds: 500), () => throw UserError());\n\nclass UserError implements Exception {\n  @override\n  String toString() => 'New username is invalid';\n}\n\n// The following code is used to test and provide feedback on your solution.\n// There is no need to read or modify it.\n\nvoid main() async {\n  final List<String> messages = [];\n  const typoMessage = 'Test failed! Check for typos in your return value';\n\n  print('Testing...');\n  try {\n    messages\n      ..add(_makeReadable(\n          testLabel: '',\n          testResult: await _asyncDidCatchException(changeUsername),\n          readableErrors: {\n            typoMessage: typoMessage,\n            _noCatch:\n                'Did you remember to call fetchNewUsername within a try/catch block?',\n          }))\n      ..add(_makeReadable(\n          testLabel: '',\n          testResult: await _asyncErrorEquals(changeUsername),\n          readableErrors: {\n            typoMessage: typoMessage,\n            _noCatch:\n                'Did you remember to call fetchNewUsername within a try/catch block?',\n          }))\n      ..removeWhere((m) => m.contains(_passed))\n      ..toList();\n\n    if (messages.isEmpty) {\n      print('Success. All tests passed!');\n    } else {\n      messages.forEach(print);\n    }\n  } catch (e) {\n    print('Tried to run solution, but received an exception: $e');\n  }\n}\n\n// Test helpers.\nString _makeReadable({\n  required String testResult,\n  required Map<String, String> readableErrors,\n  required String testLabel,\n}) {\n  if (readableErrors.containsKey(testResult)) {\n    final readable = readableErrors[testResult];\n    return '$testLabel $readable';\n  } else {\n    return '$testLabel $testResult';\n  }\n}\n\nFuture<String> _asyncErrorEquals(Function fn) async {\n  final result = await fn();\n  if (result == UserError().toString()) {\n    return _passed;\n  } else {\n    return 'Test failed! Did you stringify and return the caught error?';\n  }\n}\n\nFuture<String> _asyncDidCatchException(Function fn) async {\n  var caught = true;\n  try {\n    await fn();\n  } on UserError catch (_) {\n    caught = false;\n  }\n\n  if (caught == false) {\n    return _noCatch;\n  } else {\n    return _passed;\n  }\n}\n\nconst _passed = 'PASSED';\nconst _noCatch = 'NO_CATCH';\n```\n\n----------------------------------------\n\nTITLE: Appending to a File in Dart\nDESCRIPTION: Shows how to append data to the end of a file by using the FileMode.append parameter with openWrite().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar sink = logFile.openWrite(mode: FileMode.append);\n```\n\n----------------------------------------\n\nTITLE: Implementing Null Safety in Dart with Optional Parameters\nDESCRIPTION: This code snippet shows proper null safety implementation with a nullable optional parameter. The function 'makeCoffee' uses the question mark syntax to declare a nullable string parameter and handles the null case explicitly with a conditional check.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nvoid makeCoffee(String coffee, [String? dairy]) {\n  if (dairy != null) {\n    print('$coffee with $dairy');\n  } else {\n    print('Black $coffee');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Timed Counter Stream with async* in Dart\nDESCRIPTION: Implements an asynchronous generator function that creates a stream emitting numbers at regular intervals.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> timedCounter(Duration interval, [int? maxCount]) async* {\n  int i = 0;\n  while (true) {\n    await Future.delayed(interval);\n    yield i++;\n    if (i == maxCount) break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Generator Function\nDESCRIPTION: Shows implementation of a synchronous generator function using sync* and yield.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nIterable<int> naturalsTo(int n) sync* {\n  int k = 0;\n  while (k < n) yield k++;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Stream Transform in Dart\nDESCRIPTION: A function that splits a stream of consecutive strings into lines, handling partial lines across chunks. Uses async* generator functionality to process input stream chunks and yield complete lines.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nStream<String> lines(Stream<String> source) async* {\n  var partial = '';\n  await for (final chunk in source) {\n    var lines = chunk.split('\\n');\n    lines[0] = partial + lines[0];\n    partial = lines.removeLast();\n    for (final line in lines) {\n      yield line;\n    }\n  }\n  if (partial.isNotEmpty) yield partial;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming a Stream using transform() in Dart\nDESCRIPTION: This snippet shows how to transform a stream of integers into a stream of strings using the `transform()` method with `utf8.decoder` and `LineSplitter`. First, the `utf8.decoder` converts the integer stream into a string stream, and then `LineSplitter` splits the string stream into individual lines.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar lines = inputStream\n    .transform(utf8.decoder)\n    .transform(const LineSplitter());\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters and Setters in Dart Rectangle Class\nDESCRIPTION: Demonstrates implementing custom getters and setters for calculated properties (right and bottom) in a Rectangle class, showing property access and modification.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/methods.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Rectangle {\n  double left, top, width, height;\n\n  Rectangle(this.left, this.top, this.width, this.height);\n\n  // Define two calculated properties: right and bottom.\n  double get right => left + width;\n  set right(double value) => left = value - width;\n  double get bottom => top + height;\n  set bottom(double value) => top = value - height;\n}\n\nvoid main() {\n  var rect = Rectangle(3, 4, 20, 15);\n  assert(rect.left == 3);\n  rect.right = 12;\n  assert(rect.left == -8);\n}\n```\n\n----------------------------------------\n\nTITLE: Using whenComplete() for Finally-like Behavior in Dart\nDESCRIPTION: Demonstrates how to use whenComplete() to ensure certain actions are performed regardless of whether a Future completes successfully or with an error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal server = connectToServer();\nserver\n    .post(myUrl, fields: const {'name': 'Dash', 'profession': 'mascot'})\n    .then(handleResponse)\n    .catchError(handleError)\n    .whenComplete(server.close);\n```\n\n----------------------------------------\n\nTITLE: Using Characters Package for Unicode Handling in Dart\nDESCRIPTION: Demonstrates how to properly handle Unicode characters and grapheme clusters using the characters package. Shows the difference between string length-based operations and character-aware operations when dealing with emoji and other special characters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:characters/characters.dart';\n\nvoid main() {\n  var hi = 'Hi 🇩🇰';\n  print(hi);\n  print('The end of the string: ${hi.substring(hi.length - 1)}');\n  print('The last character: ${hi.characters.last}');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assertions in Dart\nDESCRIPTION: Shows how to use assert statements for development-time error checking with various conditions and optional error messages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/error-handling.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Make sure the variable has a non-null value.\nassert(text != null);\n\n// Make sure the value is less than 100.\nassert(number < 100);\n\n// Make sure this is an https URL.\nassert(urlString.startsWith('https'));\n```\n\nLANGUAGE: dart\nCODE:\n```\nassert(\n  urlString.startsWith('https'),\n  'URL ($urlString) should start with \"https\".',\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing URIs in Dart\nDESCRIPTION: Demonstrates how to parse a URI string into a Uri object and access its components like scheme, host, path, and fragment.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nvar uri = Uri.parse('https://example.org:8080/foo/bar#frag');\n\nassert(uri.scheme == 'https');\nassert(uri.host == 'example.org');\nassert(uri.path == '/foo/bar');\nassert(uri.fragment == 'frag');\nassert(uri.origin == 'https://example.org:8080');\n```\n\n----------------------------------------\n\nTITLE: Using Factory Constructor in Dart\nDESCRIPTION: Shows how to use factory constructors to create Logger instances.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar logger = Logger('UI');\nlogger.log('Button clicked');\n\nvar logMap = {'name': 'UI'};\nvar loggerJson = Logger.fromJson(logMap);\n```\n\n----------------------------------------\n\nTITLE: Basic Extension Type Declaration\nDESCRIPTION: Simple example showing the basic syntax for declaring an extension type with a representation type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nextension type E(int i) {\n  // Define set of operations.\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Manipulation Methods in Dart\nDESCRIPTION: This code snippet shows several methods available in the Dart Stream API for transforming and filtering stream data. These methods provide functionality similar to the methods on Iterable but operate on asynchronous data streams. They allow mapping, expanding, skipping, taking, and filtering elements in the stream based on given conditions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"Stream<R> cast<R>();\nStream<S> expand<S>(Iterable<S> Function(T element) convert);\nStream<S> map<S>(S Function(T event) convert);\nStream<T> skip(int count);\nStream<T> skipWhile(bool Function(T element) test);\nStream<T> take(int count);\nStream<T> takeWhile(bool Function(T element) test);\nStream<T> where(bool Function(T event) test);\"\n```\n\n----------------------------------------\n\nTITLE: Bitwise and Shift Operator Demonstrations\nDESCRIPTION: Demonstrates various bitwise and shift operations in Dart, showing how to manipulate individual bits of integers using operators like `&`, `|`, `^`, `<<`, `>>`, and `>>>}`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal value = 0x22;\nfinal bitmask = 0x0f;\n\nassert((value & bitmask) == 0x02);\nassert((value | bitmask) == 0x2f);\nassert((value >>> 4) == 0x02);\n```\n\n----------------------------------------\n\nTITLE: Record Type with Matched Names\nDESCRIPTION: Shows how positional field names don't affect record type compatibility\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n(int a, int b) recordAB = (1, 2);\n(int x, int y) recordXY = (3, 4);\n\nrecordAB = recordXY; // OK.\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exceptions in Dart\nDESCRIPTION: Demonstrates how to create a custom exception by implementing the Exception interface. The example includes a custom toString method for better error messaging.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nclass FooException implements Exception {\n  final String? msg;\n\n  const FooException([this.msg]);\n\n  @override\n  String toString() => msg ?? 'FooException';\n}\n```\n\n----------------------------------------\n\nTITLE: Running HTTP Server in a Guarded Zone - Dart\nDESCRIPTION: Demonstrates how to use runZonedGuarded to guard an HTTP server from uncaught exceptions in asynchronous code, allowing the server to continue running in the event of non-fatal errors. Dependencies include the dart:async library. The server listens to incoming requests using a static file server. Errors are handled with a custom error handler displaying error messages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n[runZonedGuarded(() {\\n  HttpServer.bind('0.0.0.0', port).then((server) {\\n    server.listen(staticFiles.serveRequest);\\n  });\\n},\\n  (error, stackTrace) => print('Oh noes! $error $stackTrace'));\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Dart Streams\nDESCRIPTION: This code snippet demonstrates how to handle errors in a Dart stream using `handleError`. The `mapLogErrors` function wraps a stream and logs any errors that occur, preventing the errors from terminating the stream. This allows the stream to continue processing data even if some events result in errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"Stream<S> mapLogErrors<S, T>(\n  Stream<T> stream,\n  S Function(T event) convert,\n) async* {\n  var streamWithoutErrors = stream.handleError((e) => log(e));\n  await for (final event in streamWithoutErrors) {\n    yield convert(event);\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents as Text in Dart\nDESCRIPTION: Demonstrates how to read a file's contents as text using readAsString() to get the entire content as a single string or readAsLines() to get each line as a separate string. Both methods return Future objects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  var config = File('config.txt');\n\n  // Put the whole file in a single string.\n  var stringContents = await config.readAsString();\n  print('The file is ${stringContents.length} characters long.');\n\n  // Put each line of the file into its own string.\n  var lines = await config.readAsLines();\n  print('The file is ${lines.length} lines long.');\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'on' Clause with Dart Mixin\nDESCRIPTION: Shows how to use the 'on' clause to specify a required superclass for mixin usage. Demonstrates super call resolution and member access.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Musician {\n  musicianMethod() {\n    print('Playing music!');\n  }\n}\n\nmixin MusicalPerformer on Musician {\n  performerMethod() {\n    print('Performing music!');\n    super.musicianMethod();\n  }\n}\n\nclass SingerDancer extends Musician with MusicalPerformer { }\n\nmain() {\n  SingerDancer().performerMethod();\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Implementation in Dart\nDESCRIPTION: Demonstrates implementing a tryFunction that handles different types of exceptions with specific logging requirements. Uses try-catch blocks with 'on' and 'catch' clauses, and includes a 'finally' block for cleanup.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ntypedef VoidFunction = void Function();\n\nclass ExceptionWithMessage {\n  final String message;\n  const ExceptionWithMessage(this.message);\n}\n\nabstract class Logger {\n  void logException(Type t, [String? msg]);\n  void doneLogging();\n}\n\nvoid tryFunction(VoidFunction untrustworthy, Logger logger) {\n  try {\n    untrustworthy();\n  } // Write your logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Reading with async-await in Dart\nDESCRIPTION: Shows how to convert synchronous code to asynchronous using async-await syntax for non-blocking file operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst String filename = 'with_keys.json';\n\nvoid main() async {\n  // Read some data.\n  final fileData = await _readFileAsync();\n  final jsonData = jsonDecode(fileData);\n\n  // Use that data.\n  print('Number of JSON keys: ${jsonData.length}');\n}\n\nFuture<String> _readFileAsync() async {\n  final file = File(filename);\n  final contents = await file.readAsString();\n  return contents.trim();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Mixin in Dart\nDESCRIPTION: Shows how to declare a mixin with properties and methods. Includes implementation of an entertainment-related functionality with conditional logic.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nmixin Musical {\n  bool canPlayPiano = false;\n  bool canCompose = false;\n  bool canConduct = false;\n\n  void entertainMe() {\n    if (canPlayPiano) {\n      print('Playing piano');\n    } else if (canConduct) {\n      print('Waving hands');\n    } else {\n      print('Humming to self');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Sealed Class Pattern Matching Example\nDESCRIPTION: Demonstrates sealed class implementation with exhaustiveness checking in pattern matching. Shows a hierarchy of Amigo classes and pattern matching using switch statement without requiring a default case.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/class-modifiers-for-apis.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsealed class Amigo {}\n\nclass Lucky extends Amigo {}\n\nclass Dusty extends Amigo {}\n\nclass Ned extends Amigo {}\n\nString lastName(Amigo amigo) => switch (amigo) {\n  Lucky _ => 'Day',\n  Dusty _ => 'Bottoms',\n  Ned _ => 'Nederlander',\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event Handler in Dart\nDESCRIPTION: Demonstrates how to add a click event listener to a button element using querySelector and onClick event.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nquerySelector('#submitInfo')!.onClick.listen((e) {\n  // When the button is clicked, it runs this code.\n  submitData();\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Exceptions in Dart\nDESCRIPTION: Examples of throwing exceptions in Dart using both built-in exception types and arbitrary objects. Shows throwing FormatException and string literals as exceptions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nthrow FormatException('Expected at least 1 section');\n```\n\nLANGUAGE: dart\nCODE:\n```\nthrow 'Out of llamas!';\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid distanceTo(Point other) => throw UnimplementedError();\n```\n\n----------------------------------------\n\nTITLE: Reading and Processing Files Line by Line in Dart\nDESCRIPTION: This code reads files specified in a paths list, processes them line by line, and outputs the content with optional line numbers. It uses streams and transformers to asynchronously read and decode file contents.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfor (final path in paths) {\n  var lineNumber = 1;\n  final lines = utf8.decoder\n      .bind(File(path).openRead())\n      .transform(const LineSplitter());\n  try {\n    await for (final line in lines) {\n      if (showLineNumbers) {\n        stdout.write('${lineNumber++} ');\n      }\n      stdout.writeln(line);\n    }\n  } catch (_) {\n    await _handleError(path);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Type Declaration\nDESCRIPTION: Shows how to specify function types and store functions in variables in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid greet(String name, {String greeting = 'Hello'}) =>\n    print('$greeting $name!');\n\n// Store `greet` in a variable and call it.\nvoid Function(String, {String greeting}) g = greet;\ng('Dash', greeting: 'Howdy');\n```\n\n----------------------------------------\n\nTITLE: Making a Network Request with Custom Headers in Dart\nDESCRIPTION: This example demonstrates how to include custom headers in a GET request using the http package. It shows how to set a User-Agent header, which can be useful for identifying your application to the server.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait http.get(\n  Uri.https('dart.dev', '/f/packages/http.json'),\n  headers: {'User-Agent': '<product name>/<product-version>'},\n);\n```\n\n----------------------------------------\n\nTITLE: Variable and Parameter Naming in Dart\nDESCRIPTION: Examples of proper lowerCamelCase naming for class members, variables, and parameters in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar count = 3;\n\nHttpRequest httpRequest;\n\nvoid align(bool clearItems) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tear-Offs Instead of Lambdas in Dart\nDESCRIPTION: Demonstrates how to use tear-offs (function references without parentheses) instead of creating unnecessary lambdas. This creates a closure that takes the same parameters and invokes the underlying function when called.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nvar charCodes = [68, 97, 114, 116];\nvar buffer = StringBuffer();\n\n// Function:\ncharCodes.forEach(print);\n\n// Method:\ncharCodes.forEach(buffer.write);\n\n// Named constructor:\nvar strings = charCodes.map(String.fromCharCode);\n\n// Unnamed constructor:\nvar buffers = charCodes.map(StringBuffer.new);\n```\n\n----------------------------------------\n\nTITLE: Using Enums in Switch Statements\nDESCRIPTION: Example of using enums in switch statements with handling of different cases.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar aColor = Color.blue;\n\nswitch (aColor) {\n  case Color.red:\n    print('Red as roses!');\n  case Color.green:\n    print('Green as grass!');\n  default: // Without this, you see a WARNING.\n    print(aColor); // 'Color.blue'\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Error Handling with runZonedGuarded in Dart\nDESCRIPTION: Demonstrates error catching and handling in a stream using runZonedGuarded() method, which captures errors from callback execution\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = new File('stream.dart').openRead()\n    .map((x) => throw 'Callback throws');\n\nrunZonedGuarded(() { stream.listen(print); },\n         (e) { print('Caught error: $e'); });\n```\n\n----------------------------------------\n\nTITLE: Running Main Isolate with JSON Processing\nDESCRIPTION: Example showing how to read and parse JSON data using a simple worker isolate in the main function. Uses Isolate.run() to spawn a background worker.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst String filename = 'with_keys.json';\n\nvoid main() async {\n  // Read some data.\n  final jsonData = await Isolate.run(_readAndParseJson);\n\n  // Use that data.\n  print('Number of JSON keys: ${jsonData.length}');\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Future Operations\nDESCRIPTION: Example of chaining multiple asynchronous operations using then() method with error handling\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture result = costlyQuery(url);\nresult\n    .then((value) => expensiveWork(value))\n    .then((_) => lengthyComputation())\n    .then((_) => print('Done!'))\n    .catchError((exception) {\n      /* Handle exception... */\n    });\n```\n\n----------------------------------------\n\nTITLE: Generic Extension Implementation on List in Dart\nDESCRIPTION: Shows how to implement a generic extension on List<T> with custom methods and operators.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nextension MyFancyList<T> on List<T> {\n  int get doubleLength => length * 2;\n  List<T> operator -() => reversed.toList();\n  List<List<T>> split(int at) => [sublist(0, at), sublist(at)];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Map Index Operation with Null Safety in Dart\nDESCRIPTION: Demonstrates how Map index operators return nullable values and require special handling when accessing properties. Since a Map lookup returns null when a key isn't present, the return type must be nullable (V?).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety, incorrectly:\nvar map = {'key': 'value'};\nprint(map['key'].length); // Error.\n```\n\n----------------------------------------\n\nTITLE: Mapping Iterables with map() Method in Dart\nDESCRIPTION: Demonstrates transforming Iterable elements by multiplying them or converting to different types\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var numbersByTwo = const [1, -2, 3, 42].map((number) => number * 2);\n  print('Numbers: $numbersByTwo');\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Collections in Dart\nDESCRIPTION: Demonstrates the preferred way to iterate over collections using for-in loops instead of forEach() with function literals.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfor (final person in people) {\n  ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\npeople.forEach((person) {\n  ...\n});\n```\n\nLANGUAGE: dart\nCODE:\n```\npeople.forEach(print);\n```\n\n----------------------------------------\n\nTITLE: Initializers for Class Instance Fields - Dart\nDESCRIPTION: This snippet illustrates the different ways to initialize instance fields in a Dart class, focusing on null safety features.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nclass SomeClass {\n  int atDeclaration = 0;\n  int initializingFormal;\n  int initializationList;\n\n  SomeClass(this.initializingFormal)\n      : initializationList = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Abstract Methods in Dart\nDESCRIPTION: Shows how to define abstract methods in an abstract class and their implementation in a concrete class using the Doer example.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/methods.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Doer {\n  // Define instance variables and methods...\n\n  void doSomething(); // Define an abstract method.\n}\n\nclass EffectiveDoer extends Doer {\n  void doSomething() {\n    // Provide an implementation, so the method is not abstract here...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Inheritance Example in Dart\nDESCRIPTION: Shows how constructors are called in inheritance hierarchies and how to call superclass constructors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Person {\n  String? firstName;\n\n  Person.fromJson(Map data) {\n    print('in Person');\n  }\n}\n\nclass Employee extends Person {\n  // Person does not have a default constructor;\n  // you must call super.fromJson().\n  Employee.fromJson(Map data) : super.fromJson(data) {\n    print('in Employee');\n  }\n}\n\nvoid main() {\n  var employee = Employee.fromJson({});\n  print(employee);\n  // Prints:\n  // in Person\n  // in Employee\n  // Instance of 'Employee'\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Pattern Matching in Dart Switch Statement\nDESCRIPTION: Demonstrates basic constant pattern matching in a switch statement by comparing a number value against a constant pattern of 1.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nswitch (number) {\n  // Constant pattern matches if 1 == number.\n  case 1:\n    print('one');\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Pattern Example in Dart\nDESCRIPTION: Shows how to use variable patterns to bind values in a destructuring pattern.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nswitch ((1, 2)) {\n  // 'var a' and 'var b' are variable patterns that bind to 1 and 2, respectively.\n  case (var a, var b): // ...\n  // 'a' and 'b' are in scope in the case body.\n}\n```\n\n----------------------------------------\n\nTITLE: Async Function Solution: reportLogins\nDESCRIPTION: Provides a solution for the `reportLogins` exercise, showing how to use `await` to get the number of logins and return the formatted string.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n\"Future<String> reportLogins() async {\\n    final logins = await fetchLoginAmount();\\n    return 'Total number of logins: $logins';\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Data in Dart\nDESCRIPTION: This snippet shows how to decode a JSON string into a Dart Map using the json.decode function from dart:convert. It demonstrates type casting to ensure type safety when working with the decoded data.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');\n  final httpPackageInfo = await http.read(httpPackageUrl);\n  final httpPackageJson = json.decode(httpPackageInfo) as Map<String, dynamic>;\n  print(httpPackageJson);\n}\n```\n\n----------------------------------------\n\nTITLE: Unsound Null Safety Example\nDESCRIPTION: This code snippet demonstrates a hypothetical scenario where unsound null safety would lead to a runtime error when accessing a property of a potentially null `String?` value. It highlights the importance of null safety in preventing such crashes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Hypothetical unsound null safety:\nvoid bad(String? maybeString) {\n  print(maybeString.length);\n}\n\nvoid main() {\n  bad(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operators in Dart\nDESCRIPTION: This code snippet illustrates the use of the spread operator in Dart to unpack and insert values from one collection into another. Spread operators in Dart do not follow standard operator precedence and can encompass any expressions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n[...a + b]\n```\n\n----------------------------------------\n\nTITLE: Exporting Dart Functions to JavaScript\nDESCRIPTION: Shows how to export a Dart function to JavaScript using Function.toJS and interop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:js_interop';\n\n@JS()\nexternal set exportedFunction(JSFunction value);\n\nvoid printString(JSString string) {\n  print(string.toDart);\n}\n\nvoid main() {\n  exportedFunction = printString.toJS;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nglobalThis.exportedFunction('hello world');\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Error Handling with catchError() in Dart\nDESCRIPTION: Shows how catchError() can handle errors from both the original Future and exceptions thrown within then()'s callback.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nmyFunc()\n    .then((value) {\n      doSomethingWith(value);\n      ...\n      throw Exception('Some arbitrary error');\n    })\n    .catchError(handleError);\n```\n\n----------------------------------------\n\nTITLE: Stream Processing Method Implementations\nDESCRIPTION: Example implementations of common Stream processing methods including contains, forEach, toList, and join using async/await syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> contains(Object? needle) async {\n  await for (final event in this) {\n    if (event == needle) return true;\n  }\n  return false;\n}\n\nFuture forEach(void Function(T element) action) async {\n  await for (final event in this) {\n    action(event);\n  }\n}\n\nFuture<List<T>> toList() async {\n  final result = <T>[];\n  await forEach(result.add);\n  return result;\n}\n\nFuture<String> join([String separator = '']) async =>\n    (await toList()).join(separator);\n```\n\n----------------------------------------\n\nTITLE: Optional Positional Parameters\nDESCRIPTION: Demonstrates defining and using optional positional parameters in Dart functions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nString say(String from, String msg, [String? device]) {\n  var result = '$from says $msg';\n  if (device != null) {\n    result = '$result with a $device';\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference Example using Generics in Dart\nDESCRIPTION: Shows how Dart can infer types for a map using generics without being explicitly defined, allowing for flexibility in types of values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar arguments = {'argA': 'hello', 'argB': 42}; // Map<String, Object>\n```\n\n----------------------------------------\n\nTITLE: Using RetryClient for Automatic Request Retries in Dart\nDESCRIPTION: This example demonstrates how to use RetryClient from the http package to automatically retry failed network requests. It wraps a standard http.Client with RetryClient for added resilience.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\nimport 'package:http/retry.dart';\n\nvoid main() async {\n  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');\n  final client = RetryClient(http.Client());\n  try {\n    final httpPackageInfo = await client.read(httpPackageUrl);\n    print(httpPackageInfo);\n  } finally {\n    client.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Dart Code After Null Safety Migration\nDESCRIPTION: The same Dart code snippet after applying null safety migration, showing changes in type annotations and null assertions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar ints = const <int?>[0, null];\nvar zero = ints[0];\nvar one = zero! + 1;\nvar zeroOne = <int?>[zero, one];\n```\n\n----------------------------------------\n\nTITLE: Making Multiple Network Requests with http.Client in Dart\nDESCRIPTION: This snippet shows how to use http.Client for making multiple requests to the same server, maintaining a persistent connection. It demonstrates proper resource management by closing the client when finished.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');\n  final client = http.Client();\n  try {\n    final httpPackageInfo = await client.read(httpPackageUrl);\n    print(httpPackageInfo);\n  } finally {\n    client.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Object Propagation with whenComplete() in Dart\nDESCRIPTION: Illustrates how whenComplete() propagates the result of a previous catchError() when no new errors are introduced.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  asyncErrorFunction()\n      // Future completes with an error:\n      .then((_) => ...)\n      .catchError((e) {\n        handleError(e);\n        printErrorMessage();\n        return someObject; // Future completes with someObject\n      })\n      .whenComplete(() => print('Done!')); // Future completes with someObject\n}\n```\n\n----------------------------------------\n\nTITLE: Substituting Types in Dart\nDESCRIPTION: Explains the rules of substituting types in Dart for consumers and producers with practical examples showing valid and invalid assignments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nCat c = Cat();\nAnimal c = Cat();\nMaineCoon c = Cat(); // Error\nCat c = MaineCoon();\n```\n\n----------------------------------------\n\nTITLE: Implementing Generative Constructor in Dart\nDESCRIPTION: Basic example of a generative constructor that initializes x and y coordinates in a Point class.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  // Instance variables to hold the coordinates of the point.\n  double x;\n  double y;\n\n  // Generative constructor with initializing formal parameters:\n  Point(this.x, this.y);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Type-Safe List Implementation\nDESCRIPTION: Corrected version of the previous example that passes static analysis by properly specifying the list type as List<int>.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid printInts(List<int> a) => print(a);\n\nvoid main() {\n  final list = <int>[];\n  list.add(1);\n  list.add(2);\n  printInts(list);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Simple Enum in Dart\nDESCRIPTION: Basic enum declaration showing how to create a simple enumerated type with constant values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nenum Color { red, green, blue }\n```\n\n----------------------------------------\n\nTITLE: File Line Processing with Zone-Local Values in Dart\nDESCRIPTION: Demonstrates advanced zone usage by dynamically adding filename context to line processing without modifying function signatures\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture splitLinesStream(stream) {\n  return stream\n      .transform(ASCII.decoder)\n      .transform(const LineSplitter())\n      .map((line) => '${Zone.current[#filename]}: $line')\n      .toList();\n}\n\nFuture splitLines(filename) {\n  return runZoned(() {\n    return splitLinesStream(new File(filename).openRead());\n  }, zoneValues: { #filename: filename });\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Syntax Function in Dart\nDESCRIPTION: Shows the shorthand arrow syntax for single-expression functions in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nbool isNoble(int atomicNumber) => _nobleGases[atomicNumber] != null;\n```\n\n----------------------------------------\n\nTITLE: If-Case with Error Handling in Dart\nDESCRIPTION: Demonstrates if-case pattern matching with error handling using an else clause.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nif (pair case [int x, int y]) {\n  print('Was coordinate array $x,$y');\n} else {\n  throw FormatException('Invalid coordinates.');\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation with Dart Mixin\nDESCRIPTION: Demonstrates implementing an interface with a mixin to ensure member dependencies are defined. Shows pattern for enforcing method implementation in classes using the mixin.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nabstract interface class Tuner {\n  void tuneInstrument();\n}\n\nmixin Guitarist implements Tuner {\n  void playSong() {\n    tuneInstrument();\n\n    print('Strums guitar majestically.');\n  }\n}\n\nclass PunkRocker with Guitarist {\n\n  @override\n  void tuneInstrument() {\n    print(\"Don't bother, being out of tune is punk rock.\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Sealed Class Inheritance Restrictions Example\nDESCRIPTION: Illustrates inheritance restrictions with sealed classes. Shows valid inheritance within the same library and demonstrates how sealed classes prevent external direct inheritance.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/class-modifiers-for-apis.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsealed class Amigo {}\nclass Lucky extends Amigo {}\nclass Dusty extends Amigo {}\nclass Ned extends Amigo {}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// This is an error:\nclass Bad extends Amigo {}\n\n// But these are both fine:\nclass OtherLucky extends Lucky {}\nclass OtherDusty implements Dusty {}\n```\n\n----------------------------------------\n\nTITLE: Private Field Initialization in Dart Constructor\nDESCRIPTION: Shows how to initialize private fields in a constructor using an initializer list since they can't be used as named initializing formals.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass PointB {\n// ...\n\n  PointB.namedPrivate({required double x, required double y})\n      : _x = x,\n        _y = y;\n\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'this.' to Avoid Shadowing in Dart\nDESCRIPTION: Demonstrates the proper use of 'this.' to avoid variable shadowing in Dart. Use 'this.' when a local variable has the same name as a class member.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  Object? value;\n\n  void clear() {\n    this.update(null);\n  }\n\n  void update(Object? value) {\n    this.value = value;\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  Object? value;\n\n  void clear() {\n    update(null);\n  }\n\n  void update(Object? value) {\n    this.value = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Enhanced Enum in Dart\nDESCRIPTION: Example of an enhanced enum implementing Comparable interface with instance variables, constructors, and methods. Shows how to create a more complex enumerated type with additional functionality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nenum Vehicle implements Comparable<Vehicle> {\n  car(tires: 4, passengers: 5, carbonPerKilometer: 400),\n  bus(tires: 6, passengers: 50, carbonPerKilometer: 800),\n  bicycle(tires: 2, passengers: 1, carbonPerKilometer: 0);\n\n  const Vehicle({\n    required this.tires,\n    required this.passengers,\n    required this.carbonPerKilometer,\n  });\n\n  final int tires;\n  final int passengers;\n  final int carbonPerKilometer;\n\n  int get carbonFootprint => (carbonPerKilometer / passengers).round();\n\n  bool get isTwoWheeled => this == Vehicle.bicycle;\n\n  @override\n  int compareTo(Vehicle other) => carbonFootprint - other.carbonFootprint;\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Operators in Dart\nDESCRIPTION: Demonstrates the use of spread operators and control-flow operators in Dart collections.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/collections.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar list = [1, 2, 3];\nvar list2 = [0, ...list];\nassert(list2.length == 4);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar nav = ['Home', 'Furniture', 'Plants', if (promoActive) 'Outlet'];\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar nav = ['Home', 'Furniture', 'Plants', if (login case 'Manager') 'Inventory'];\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar listOfInts = [1, 2, 3];\nvar listOfStrings = ['#0', for (var i in listOfInts) '#$i'];\nassert(listOfStrings[1] == '#1');\n```\n\n----------------------------------------\n\nTITLE: Correctly Testing FutureOr Type in Dart\nDESCRIPTION: This example demonstrates the proper way to disambiguate a FutureOr<T> by explicitly testing for Future<T> first. This approach works correctly even when T could be Object.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_51\n\nLANGUAGE: dart\nCODE:\n```\nFuture<T> logValue<T>(FutureOr<T> value) async {\n  if (value is Future<T>) {\n    var result = await value;\n    print(result);\n    return result;\n  } else {\n    print(value);\n    return value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using takeWhile() and skipWhile() Methods in Dart\nDESCRIPTION: Illustrates how takeWhile() and skipWhile() can filter and split an Iterable based on a given predicate\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  const numbers = [1, 3, -2, 0, 4, 5];\n\n  var numbersUntilZero = numbers.takeWhile((number) => number != 0);\n  print('Numbers until 0: $numbersUntilZero');\n\n  var numbersStartingAtZero = numbers.skipWhile((number) => number != 0);\n  print('Numbers starting at 0: $numbersStartingAtZero');\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning a Worker Isolate in Dart\nDESCRIPTION: Implementation of the spawn method that creates a new worker isolate. It sets up a ReceivePort for the main isolate to receive messages from the worker, adds a listener for handling responses, and spawns the isolate with a reference to its SendPort.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> spawn() async {\n  final receivePort = ReceivePort();\n  receivePort.listen(_handleResponsesFromIsolate);\n  await Isolate.spawn(_startRemoteIsolate, receivePort.sendPort);\n}\n```\n\n----------------------------------------\n\nTITLE: Record Type Declaration Example\nDESCRIPTION: Illustrates record type declaration and initialization with positional fields\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Record type annotation in a variable declaration:\n(String, int) record;\n\n// Initialize it with a record expression:\nrecord = ('A string', 123);\n```\n\n----------------------------------------\n\nTITLE: Main Function Example\nDESCRIPTION: Shows the implementation of a command-line app's main function that accepts arguments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main(List<String> arguments) {\n  print(arguments);\n\n  assert(arguments.length == 2);\n  assert(int.parse(arguments[0]) == 1);\n  assert(arguments[1] == 'test');\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Statement with Multiple Cases in Dart\nDESCRIPTION: Shows a switch statement handling multiple string cases with different execution paths.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar command = 'OPEN';\nswitch (command) {\n  case 'CLOSED':\n    executeClosed();\n  case 'PENDING':\n    executePending();\n  case 'APPROVED':\n    executeApproved();\n  case 'DENIED':\n    executeDenied();\n  case 'OPEN':\n    executeOpen();\n  default:\n    executeUnknown();\n}\n```\n\n----------------------------------------\n\nTITLE: Null-Aware Method Chaining in Dart\nDESCRIPTION: Shows various examples of null-aware operators in method chains, including cascade and index operators.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n// Null-aware cascade:\nreceiver?..method();\n\n// Null-aware index operator:\nreceiver?[index];\n\n// Null-aware function call:\nfunction?.call(arg1, arg2);\n```\n\n----------------------------------------\n\nTITLE: Function Type Alias in Dart\nDESCRIPTION: Illustrates how to create and use a function type alias with generic parameters, including a practical example with comparison function.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/typedefs.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntypedef Compare<T> = int Function(T a, T b);\n\nint sort(int a, int b) => a - b;\n\nvoid main() {\n  assert(sort is Compare<int>); // True!\n}\n```\n\n----------------------------------------\n\nTITLE: Complete WebSocket Implementation with Error Handling in Dart\nDESCRIPTION: Comprehensive example showing WebSocket initialization with connection management, event handling, and automatic reconnection logic.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvoid initWebSocket([int retrySeconds = 1]) {\n  var reconnectScheduled = false;\n\n  print('Connecting to websocket');\n\n  void scheduleReconnect() {\n    if (!reconnectScheduled) {\n      Timer(\n        Duration(seconds: retrySeconds),\n        () => initWebSocket(retrySeconds * 2),\n      );\n    }\n    reconnectScheduled = true;\n  }\n\n  ws.onOpen.listen((e) {\n    print('Connected');\n    ws.send('Hello from Dart!');\n  });\n\n  ws.onClose.listen((e) {\n    print('Websocket closed, retrying in $retrySeconds seconds');\n    scheduleReconnect();\n  });\n\n  ws.onError.listen((e) {\n    print('Error connecting to ws');\n    scheduleReconnect();\n  });\n\n  ws.onMessage.listen((MessageEvent e) {\n    print('Received message: ${e.data}');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Library Usage Example\nDESCRIPTION: Shows how to import and use the conditionally exported library in client code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:hw_mp/hw_mp.dart';\n\nvoid main() {\n  print(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Constructor in Dart\nDESCRIPTION: Demonstrates how to implement a named constructor 'origin()' alongside a regular constructor in a Point class.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst double xOrigin = 0;\nconst double yOrigin = 0;\n\nclass Point {\n  final double x;\n  final double y;\n\n  // Sets the x and y instance variables\n  // before the constructor body runs.\n  Point(this.x, this.y);\n\n  // Named constructor\n  Point.origin() : x = xOrigin, y = yOrigin;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Extension Type Declaration\nDESCRIPTION: Example showing how to declare a generic extension type with type parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nextension type E<T>(List<T> elements) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Filtering Collections in Dart\nDESCRIPTION: Demonstrates using whereType() to filter collections by type instead of where() with type checks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar objects = [1, 'a', 2, 'b', 3];\nvar ints = objects.where((e) => e is int);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar objects = [1, 'a', 2, 'b', 3];\nvar ints = objects.whereType<int>();\n```\n\n----------------------------------------\n\nTITLE: Basic Future Error Handling in Dart\nDESCRIPTION: Demonstrates the basic pattern of using then() for successful Future completion and catchError() for error handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nmyFunc().then(processValue).catchError(handleError);\n```\n\n----------------------------------------\n\nTITLE: Building URIs for HTTP Requests in Dart\nDESCRIPTION: This snippet illustrates two methods for creating a Uri object, which is necessary for forming valid HTTP requests in Dart. The first method parses a complete URI string, while the second method specifically constructs a secure HTTPS URI.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Parse the entire URI, including the scheme\nUri.parse('https://dart.dev/f/packages/http.json');\n\n// Specifically create a URI with the https scheme\nUri.https('dart.dev', '/f/packages/http.json');\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Data Fetching Simulation\nDESCRIPTION: Demonstrates how to simulate asynchronous data fetching using `Future.delayed`. These functions return a `Future` that resolves after a specified duration, mimicking network requests or other time-consuming operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"Future<String> fetchRole() => Future.delayed(_halfSecond, () => _role);\\nFuture<int> fetchLoginAmount() => Future.delayed(_halfSecond, () => _logins);\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Collection Literals in Dart\nDESCRIPTION: This Dart snippet demonstrates how to declare lists, sets, and maps using literals. It supports both inferred types and explicitly specified types, shown with examples of a list, a set, and a map. Specifying types can be useful when the initialization involves a subtype.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal aListOfStrings = ['one', 'two', 'three'];\nfinal aSetOfStrings = {'one', 'two', 'three'};\nfinal aMapOfStringsToInts = {'one': 1, 'two': 2, 'three': 3};\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal aListOfInts = <int>[];\nfinal aSetOfInts = <int>{};\nfinal aMapOfIntToDouble = <int, double>{};\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal aListOfBaseType = <BaseType>[SubType(), SubType()];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Wildcard Variables in Dart 3.7\nDESCRIPTION: This Dart code snippet showcases the use of wildcard variables, introduced in Dart 3.7. It demonstrates how the underscore (_) can be used as a non-binding variable name in various contexts within a class constructor.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFoo(_, this._, super._, void _()) {}\n```\n\n----------------------------------------\n\nTITLE: Increment and Decrement Operators\nDESCRIPTION: Demonstrates prefix and postfix increment (++) and decrement (--) operators in Dart with examples showing the difference in their execution order.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint a;\nint b;\n\na = 0;\nb = ++a; // Increment a before b gets its value.\nassert(a == b); // 1 == 1\n\na = 0;\nb = a++; // Increment a after b gets its value.\nassert(a != b); // 1 != 0\n\na = 0;\nb = --a; // Decrement a before b gets its value.\nassert(a == b); // -1 == -1\n\na = 0;\nb = a--; // Decrement a after b gets its value.\nassert(a != b); // -1 != 0\n```\n\n----------------------------------------\n\nTITLE: Using Digit Separators in Dart 3.6\nDESCRIPTION: This Dart code snippet demonstrates the use of digit separators (underscores) in number literals, a feature introduced in Dart 3.6. It shows how underscores can be used to improve readability of long number literals.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar m = 1__000_000__000_000__000_000;\n```\n\n----------------------------------------\n\nTITLE: Mixin Class Declaration in Dart\nDESCRIPTION: Demonstrates the use of 'mixin class' declaration to create a type that can be used both as a regular class and as a mixin.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nmixin class Musician {\n  // ...\n}\n\nclass Novice with Musician { // Use Musician as a mixin\n  // ...\n}\n\nclass Novice extends Musician { // Use Musician as a class\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to a Directory Stream using Stream.listen() in Dart\nDESCRIPTION: This snippet demonstrates how to listen to a stream of FileSystemEntity objects generated from a directory using the `listen()` method. It filters the stream to process only File objects and then calls `searchFile` to process each file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main(List<String> arguments) {\n  // ...\n  FileSystemEntity.isDirectory(searchPath).then((isDir) {\n    if (isDir) {\n      final startingDir = Directory(searchPath);\n      startingDir.list().listen((entity) {\n        if (entity is File) {\n          searchFile(entity, searchTerms);\n        }\n      });\n    } else {\n      searchFile(File(searchPath), searchTerms);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Structured Class for JSON Data in Dart\nDESCRIPTION: This example defines a PackageInfo class to represent the structure of the JSON data retrieved from the network request. It includes fields for various package information and demonstrates how to handle optional fields.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass PackageInfo {\n  final String name;\n  final String latestVersion;\n  final String description;\n  final String publisher;\n  final Uri? repository;\n\n  PackageInfo({\n    required this.name,\n    required this.latestVersion,\n    required this.description,\n    required this.publisher,\n    this.repository,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing String Parse Extension in Dart\nDESCRIPTION: Shows how to implement a NumberParsing extension on String class that adds parseInt() functionality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nextension NumberParsing on String {\n  int parseInt() {\n    return int.parse(this);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Dart\nDESCRIPTION: Demonstrates the preferred way to compose strings using interpolation syntax rather than concatenation with + operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n'Hello, $name! You are ${year - birth} years old.';\n```\n\n----------------------------------------\n\nTITLE: Using Null Assertion with Map Access in Dart\nDESCRIPTION: Shows the recommended way to access Map values when you know the key exists by using the null assertion operator (!). This tells the type checker that the value cannot be null.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nvar map = {'key': 'value'};\nprint(map['key']!.length); // OK.\n```\n\n----------------------------------------\n\nTITLE: Rethrowing Exceptions in Dart\nDESCRIPTION: Shows how to partially handle an exception while allowing it to propagate using the rethrow keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/error-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid misbehave() {\n  try {\n    dynamic foo = true;\n    print(foo++); // Runtime error\n  } catch (e) {\n    print('misbehave() partially handled ${e.runtimeType}.');\n    rethrow; // Allow callers to see the exception.\n  }\n}\n\nvoid main() {\n  try {\n    misbehave();\n  } catch (e) {\n    print('main() finished handling ${e.runtimeType}.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Enum in Dart\nDESCRIPTION: Demonstrates an enhanced enum with fields, constructors, and methods for describing planets.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n/// Enum that enumerates the different planets in our solar system\n/// and some of their properties.\nenum Planet {\n  mercury(planetType: PlanetType.terrestrial, moons: 0, hasRings: false),\n  venus(planetType: PlanetType.terrestrial, moons: 0, hasRings: false),\n  // ···\n  uranus(planetType: PlanetType.ice, moons: 27, hasRings: true),\n  neptune(planetType: PlanetType.ice, moons: 14, hasRings: true);\n\n  /// A constant generating constructor\n  const Planet({\n    required this.planetType,\n    required this.moons,\n    required this.hasRings,\n  });\n\n  /// All instance variables are final\n  final PlanetType planetType;\n  final int moons;\n  final bool hasRings;\n\n  /// Enhanced enums support getters and other methods\n  bool get isGiant =>\n      planetType == PlanetType.gas || planetType == PlanetType.ice;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with async/await\nDESCRIPTION: Example of catching exceptions when using async/await syntax with try-catch blocks\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar entryPoint = await findEntryPoint();\ntry {\n  var exitCode = await runExecutable(entryPoint, args);\n  await flushThenExit(exitCode);\n} catch (e) {\n  // Handle the error...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Algebraic Data Types with Patterns in Dart\nDESCRIPTION: Demonstrates the use of object destructuring and switch cases to implement algebraic data types in Dart. This method of coding supports managing related types and operations efficiently using pattern matching.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nsealed class Shape {}\n\nclass Square implements Shape {\n  final double length;\n  Square(this.length);\n}\n\nclass Circle implements Shape {\n  final double radius;\n  Circle(this.radius);\n}\n\ndouble calculateArea(Shape shape) => switch (shape) {\n  Square(length: var l) => l * l,\n  Circle(radius: var r) => math.pi * r * r,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Class Instance Variables in Dart\nDESCRIPTION: Shows how to declare and initialize instance variables in a Dart class, including nullable and non-nullable types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double? x; // Declare instance variable x, initially null.\n  double? y; // Declare y, initially null.\n  double z = 0; // Declare z, initially 0.\n}\n```\n\n----------------------------------------\n\nTITLE: Logical-OR Pattern Matching in Switch\nDESCRIPTION: Shows how to use logical-OR patterns to share case bodies in a switch expression.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar isPrimary = switch (color) {\n  Color.red || Color.yellow || Color.blue => true,\n  _ => false,\n};\n```\n\n----------------------------------------\n\nTITLE: Static Class Members in Dart\nDESCRIPTION: Shows how to implement class-wide variables using the static keyword for shared state and constants.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Queue {\n  static const initialCapacity = 16;\n  // ···\n}\n\nvoid main() {\n  assert(Queue.initialCapacity == 16);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Callable Class with call() Method in Dart\nDESCRIPTION: Demonstrates how to create a class that can be called like a function by implementing the call() method. The example shows a WannabeFunction class that concatenates three strings with spaces and adds an exclamation mark.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/callable-objects.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass WannabeFunction {\n  String call(String a, String b, String c) => '$a $b $c!';\n}\n\nvar wf = WannabeFunction();\nvar out = wf('Hi', 'there,', 'gang');\n\nvoid main() => print(out);\n```\n\n----------------------------------------\n\nTITLE: Refactoring Dart Factory to Handle Invalid Input\nDESCRIPTION: Demonstrates how to improve a factory constructor that previously returned null for invalid input, by throwing an exception instead to make the code more robust and null-safe.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfactory StreamReader(dynamic data) {\n  if (data is ByteData) {\n    // Move the readIndex forward for the binary reader.\n    return BlockReader(data);\n  } else if (data is Map) {\n    return JSONBlockReader(data);\n  } else {\n    throw ArgumentError('Unexpected type for data');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Line Comments in Dart\nDESCRIPTION: Demonstrates the use of single-line comments in Dart using //. These comments are ignored by the compiler and are typically used for short explanatory notes or TODOs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/comments.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // TODO: refactor into an AbstractLlamaGreetingFactory?\n  print('Welcome to my Llama farm!');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bang Operator for Non-Null Map Lookup in Dart\nDESCRIPTION: Shows how to use the bang operator (!) to assert that a Map lookup will not return null, and provides an alternative with explicit null handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nreturn blockTypes[key]!;\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar result = blockTypes[key];\nif (result != null) return result;\n// Handle the null case here, e.g. throw with explanation.\n```\n\n----------------------------------------\n\nTITLE: Logical Operators: Boolean Expression Manipulation\nDESCRIPTION: Shows how to use Dart's logical operators to combine and invert boolean expressions, enabling complex conditional logic with operators like `!`, `||`, and `&&`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nif (!done && (col == 0 || col == 3)) {\n  // ...Do something...\n}\n```\n\n----------------------------------------\n\nTITLE: Class Inheritance in Dart\nDESCRIPTION: Demonstrates class inheritance using the extends keyword and super constructor calls.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Orbiter extends Spacecraft {\n  double altitude;\n\n  Orbiter(super.name, DateTime super.launchDate, this.altitude);\n}\n```\n\n----------------------------------------\n\nTITLE: Import Statements in Dart\nDESCRIPTION: Shows different ways to import libraries in Dart, including core libraries, external packages, and local files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Importing core libraries\nimport 'dart:math';\n\n// Importing libraries from external packages\nimport 'package:test/test.dart';\n\n// Importing files\nimport 'path/to/my_other_file.dart';\n```\n\n----------------------------------------\n\nTITLE: Transforming Lists with map Method in Dart\nDESCRIPTION: Demonstrates using the map method to transform each item in a list and create a new Iterable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\n\nvar loudTeas = teas.map((tea) => tea.toUpperCase());\nloudTeas.forEach(print);\n```\n\n----------------------------------------\n\nTITLE: Complete Stream Processing Example with Error Handling\nDESCRIPTION: A complete example showing stream generation and consumption with error handling. Includes a stream generator function and a consumer that handles stream events and potential errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> sumStream(Stream<int> stream) async {\n  var sum = 0;\n  try {\n    await for (final value in stream) {\n      sum += value;\n    }\n  } catch (e) {\n    return -1;\n  }\n  return sum;\n}\n\nStream<int> countStream(int to) async* {\n  for (int i = 1; i <= to; i++) {\n    if (i == 4) {\n      throw Exception('Intentional exception');\n    } else {\n      yield i;\n    }\n  }\n}\n\nvoid main() async {\n  var stream = countStream(10);\n  var sum = await sumStream(stream);\n  print(sum); // -1\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Generator Function\nDESCRIPTION: Shows implementation of an asynchronous generator function using async* and yield.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> asynchronousNaturalsTo(int n) async* {\n  int k = 0;\n  while (k < n) yield k++;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Method Implementation\nDESCRIPTION: Demonstrates how to implement a generic method with type parameter T.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nT first<T>(List<T> ts) {\n  // Do some initial work or error checking, then...\n  T tmp = ts[0];\n  // Do some additional checking or processing...\n  return tmp;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Non-Nullable Fields without 'late' in Dart\nDESCRIPTION: Demonstrates the use of constructor initializer lists to initialize non-nullable fields, avoiding 'late'.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  late double x, y;\n  Point.polar(double theta, double radius) {\n    x = cos(theta) * radius;\n    y = sin(theta) * radius;\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n  Point.polar(double theta, double radius)\n    : x = cos(theta) * radius,\n      y = sin(theta) * radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Library Part Declaration in Dart\nDESCRIPTION: Shows the correct way to declare a library file using the part directive. The main library file declares which parts it includes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nlibrary my_library;\n\npart 'some/other/file.dart';\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparable Interface in Dart\nDESCRIPTION: Demonstrates how to implement the Comparable interface to enable comparison between objects for sorting purposes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nclass Line implements Comparable<Line> {\n  final int length;\n  const Line(this.length);\n\n  @override\n  int compareTo(Line other) => length - other.length;\n}\n\nvoid main() {\n  var short = const Line(1);\n  var long = const Line(100);\n  assert(short.compareTo(long) < 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Expression with Pattern Matching in Dart\nDESCRIPTION: Demonstrates a switch expression using pattern matching and arrow syntax for tokenization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntoken = switch (charCode) {\n  slash || star || plus || minus => operator(charCode),\n  comma || semicolon => punctuation(charCode),\n  >= digit0 && <= digit9 => number(),\n  _ => throw FormatException('Invalid'),\n};\n```\n\n----------------------------------------\n\nTITLE: Async File Operations in Dart\nDESCRIPTION: Illustrates complex asynchronous file operations with error handling, using async/await for creating and modifying files\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> createDescriptions(Iterable<String> objects) async {\n  for (final object in objects) {\n    try {\n      var file = File('$object.txt');\n      if (await file.exists()) {\n        var modified = await file.lastModified();\n        print(\n          'File for $object already exists. It was modified on $modified.',\n        );\n        continue;\n      }\n      await file.create();\n      await file.writeAsString('Start describing $object in this file.');\n    } on IOException catch (e) {\n      print('Cannot create description for $object: $e');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists in Dart\nDESCRIPTION: Demonstrates how to sort a list using the sort() method with a comparison function.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar fruits = ['bananas', 'apples', 'oranges'];\n\n// Sort a list.\nfruits.sort((a, b) => a.compareTo(b));\nassert(fruits[0] == 'apples');\n```\n\n----------------------------------------\n\nTITLE: Type Casting Alternatives in Dart\nDESCRIPTION: Shows preferred alternatives to using cast() for type conversion in collections.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nvar stuff = <dynamic>[1, 2];\nvar ints = List<int>.from(stuff);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar stuff = <dynamic>[1, 2];\nvar reciprocals = stuff.map<double>((n) => 1 / n);\n```\n\n----------------------------------------\n\nTITLE: Useful Cases for 'async' Keyword in Dart\nDESCRIPTION: This example demonstrates situations where the 'async' keyword is useful: when using await, throwing errors asynchronously, or when implicitly wrapping return values in Futures.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_47\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> usesAwait(Future<String> later) async {\n  print(await later);\n}\n\nFuture<void> asyncError() async {\n  throw 'Error!';\n}\n\nFuture<String> asyncValue() async => 'value';\n```\n\n----------------------------------------\n\nTITLE: Streaming UTF-8 Decoding in Dart\nDESCRIPTION: Shows how to decode a stream of UTF-8 characters using a transformer pattern with utf8.decoder and LineSplitter.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-convert.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar lines = utf8.decoder.bind(inputStream).transform(const LineSplitter());\ntry {\n  await for (final line in lines) {\n    print('Got ${line.length} characters from stream');\n  }\n  print('file is now closed');\n} catch (e) {\n  print(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Null-Check Pattern for Type Promotion in Dart\nDESCRIPTION: Demonstrates handling nullable types using a null-check pattern to safely access Response properties. This approach avoids repeated null assertions while maintaining type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass UploadException {\n  final Response? response;\n\n  UploadException([this.response]);\n\n  @override\n  String toString() {\n    if (this.response case var response?) {\n      return 'Could not complete upload to ${response.url} '\n          '(error code ${response.errorCode}): ${response.reason}.';\n    }\n    return 'Could not upload (no response).';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Name and Age Mapping Exercise in Dart\nDESCRIPTION: Implements a function to transform User objects into formatted name and age strings using map()\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nIterable<String> getNameAndAges(Iterable<User> users) {\n  return users.map((user) => '${user.name} is ${user.age}');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Formal Parameters in Dart Class Constructor\nDESCRIPTION: Demonstrates using initializing formal parameters to set instance variables directly in constructor declarations, including both required and optional parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass PointB {\n  final double x;\n  final double y;\n\n  // Sets the x and y instance variables\n  // before the constructor body runs.\n  PointB(this.x, this.y);\n\n  // Initializing formal parameters can also be optional.\n  PointB.optional([this.x = 0.0, this.y = 0.0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Maps in Dart\nDESCRIPTION: Demonstrates different ways to create Maps including literal syntax and constructors with type parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Maps often use strings as keys.\nvar hawaiianBeaches = {\n  'Oahu': ['Waikiki', 'Kailua', 'Waimanalo'],\n  'Big Island': ['Wailea Bay', 'Pololu Beach'],\n  'Kauai': ['Hanalei', 'Poipu'],\n};\n\n// Maps can be built from a constructor.\nvar searchTerms = Map();\n\n// Maps are parameterized types; you can specify what\n// types the key and value should be.\nvar nobleGases = Map<int, String>();\n```\n\n----------------------------------------\n\nTITLE: Initializing Instance Variables in Dart\nDESCRIPTION: Example of initializing instance variables during declaration in a class.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass PointA {\n  double x = 1.0;\n  double y = 2.0;\n\n  // The implicit default constructor sets these variables to (1.0,2.0)\n  // PointA();\n\n  @override\n  String toString() {\n    return 'PointA($x,$y)';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic If-Else Statement in Dart\nDESCRIPTION: Demonstrates basic if-else control flow with boolean conditions and multiple branches.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nif (isRaining()) {\n  you.bringRainCoat();\n} else if (isSnowing()) {\n  you.wearJacket();\n} else {\n  car.putTopDown();\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to a File Using IOSink in Dart\nDESCRIPTION: This code shows how to write multiple pieces of content to a file using openWrite() which returns an IOSink. It demonstrates how to use write(), writeln(), and proper closing of the sink.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal quotes = File('quotes.txt').openWrite(mode: FileMode.append);\n\nquotes.write(\"Don't cry because it's over, \");\nquotes.writeln('smile because it happened. -Dr. Seuss');\nawait quotes.close();\n```\n\n----------------------------------------\n\nTITLE: Performing Background Computation with Isolate.run()\nDESCRIPTION: Demonstrates how to use Isolate.run() to perform a time-consuming computation without blocking the main isolate, specifically calculating a Fibonacci number asynchronously\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nint slowFib(int n) => n <= 1 ? 1 : slowFib(n - 1) + slowFib(n - 2);\n\n// Compute without blocking current isolate.\nvoid fib40() async {\n  var result = await Isolate.run(() => slowFib(40));\n  print('Fib(40) = $result');\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Extension Methods in Dart\nDESCRIPTION: Demonstrates how extension methods work with Dart's type inference.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar v = '2';\nprint(v.parseInt()); // Output: 2\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment with Pattern Swapping\nDESCRIPTION: Shows how to use pattern matching to swap values between variables without a temporary variable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar (a, b) = ('left', 'right');\n(b, a) = (a, b); // Swap.\nprint('$a $b'); // Prints \"right left\".\n```\n\n----------------------------------------\n\nTITLE: Final Variable Declaration in Dart\nDESCRIPTION: Declaring final variables that can only be set once, with and without type annotation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal name = 'Bob'; // Without a type annotation\nfinal String nickname = 'Bobby';\n```\n\n----------------------------------------\n\nTITLE: List Destructuring in Dart\nDESCRIPTION: Demonstrates basic list destructuring by extracting three elements from a list into individual variables.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar numList = [1, 2, 3];\n// List pattern [a, b, c] destructures the three elements from numList...\nvar [a, b, c] = numList;\n// ...and assigns them to new variables.\nprint(a + b + c);\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Enums in Dart\nDESCRIPTION: Demonstrates how Dart 2.17 allows the integration of positional arguments with named arguments in function calls. This updated flexibility improves code readability and parameter management. Inputs include positional and named arguments, resulting in a function call inside 'main'.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  test(skip: true, 'A test description', () {\n    // Very long function body here...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Named Constructor Parameters in Dart\nDESCRIPTION: Demonstrates using named parameters in constructors with default values and creating instances using named arguments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass PointC {\n  double x; // must be set in constructor\n  double y; // must be set in constructor\n\n  // Generative constructor with initializing formal parameters\n  // with default values\n  PointC.named({this.x = 1.0, this.y = 1.0});\n\n  @override\n  String toString() {\n    return 'PointC.named($x,$y)';\n  }\n}\n\n// Constructor using named variables.\nfinal pointC = PointC.named(x: 2.0, y: 2.0);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Type Alias in Dart\nDESCRIPTION: Demonstrates how to create and use a simple type alias for a List of integers using the typedef keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/typedefs.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntypedef IntList = List<int>;\nIntList il = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Listening for onClick events using Stream.listen() in Dart\nDESCRIPTION: This snippet demonstrates how to listen for click events on a submit button using the `listen()` method on the button's `onClick` stream. When the button is clicked, the provided function `submitData()` is executed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Add an event handler to a button.\nsubmitButton.onClick.listen((e) {\n  // When the button is clicked, it runs this code.\n  submitData();\n});\n```\n\n----------------------------------------\n\nTITLE: Dart Equality Implementation\nDESCRIPTION: Proper implementation of equality operations including hashCode and == operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nhashCode\n==\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with where, any, and every in Dart\nDESCRIPTION: Demonstrates how to use where() to filter items, any() to check if at least one item matches a condition, and every() to check if all items match.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\n\n// Chamomile is not caffeinated.\nbool isDecaffeinated(String teaName) => teaName == 'chamomile';\n\n// Use where() to find only the items that return true\n// from the provided function.\nvar decaffeinatedTeas = teas.where((tea) => isDecaffeinated(tea));\n// or teas.where(isDecaffeinated)\n\n// Use any() to check whether at least one item in the\n// collection satisfies a condition.\nassert(teas.any(isDecaffeinated));\n\n// Use every() to check whether all the items in a\n// collection satisfy a condition.\nassert(!teas.every(isDecaffeinated));\n```\n\n----------------------------------------\n\nTITLE: Reading User Input from Standard Input in Dart\nDESCRIPTION: A simple program that reads a line of text from stdin using readLineSync(). This synchronous method blocks until the user enters text and presses return, then displays the input.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nvoid main() {\n  stdout.writeln('Type something');\n  final input = stdin.readLineSync();\n  stdout.writeln('You typed: $input');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version Constraints\nDESCRIPTION: Example showing how to update the HTTP package version constraint in pubspec.yaml\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-outdated.md#2025-04-21_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-  http: ^0.11.0\n+  http: ^0.12.1\n```\n\n----------------------------------------\n\nTITLE: Using String Interpolation in Dart\nDESCRIPTION: Demonstrates the preferred way to compose strings and values using interpolation in Dart. This approach is more readable and efficient than concatenation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvar name = 'World';\nprint('Hello $name'); // Preferred\n// Instead of: print('Hello ' + name);\n```\n\n----------------------------------------\n\nTITLE: Loop Variable Type Promotion Issue\nDESCRIPTION: Demonstrates how type promotion fails when a variable might be written to in a previous loop iteration. The solution shows how to move the null check to the loop condition.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(Link? p) {\n  if (p != null) return;\n  while (true) {    // (1)\n    print(p.value); // (2) ERROR\n    var next = p.next;\n    if (next == null) break;\n    p = next;       // (3)\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(Link? p) {\n  while (p != null) {\n    print(p.value);\n    p = p.next;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Safety in Dart Lists\nDESCRIPTION: Shows how type annotations prevent runtime errors by catching type mismatches during static analysis. The example demonstrates proper list initialization with type parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid printInts(List<int> a) => print(a);\n\nvoid main() {\n  final list = [];\n  list.add(1);\n  list.add('2');\n  printInts(list);\n}\n```\n\n----------------------------------------\n\nTITLE: Map Key Existence Check in Dart\nDESCRIPTION: Shows how to properly check for key existence in Maps using containsKey().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar hawaiianBeaches = {\n  'Oahu': ['Waikiki', 'Kailua', 'Waimanalo'],\n  'Big Island': ['Wailea Bay', 'Pololu Beach'],\n  'Kauai': ['Hanalei', 'Poipu'],\n};\n\nassert(hawaiianBeaches.containsKey('Oahu'));\nassert(!hawaiianBeaches.containsKey('Florida'));\n```\n\n----------------------------------------\n\nTITLE: Accessing State in Dart Mixin Subclass\nDESCRIPTION: Shows how to access state in a mixin's subclass using abstract getters. Implements hashCode and equality operations based on a name property.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nmixin NameIdentity {\n  String get name;\n\n  @override\n  int get hashCode => name.hashCode;\n\n  @override\n  bool operator ==(other) => other is NameIdentity && name == other.name;\n}\n\nclass Person with NameIdentity {\n  final String name;\n\n  Person(this.name);\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Implementation (IO)\nDESCRIPTION: Implementation of the library interface for IO platforms using dart:io.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nvoid alarm([String? text]) {\n  stderr.writeln(text ?? message);\n}\n\nString get message => 'Hello World from the VM!';\n```\n\n----------------------------------------\n\nTITLE: Debugging with Dart DevTools\nDESCRIPTION: This example demonstrates how to enable debugging and performance analysis using Dart DevTools by adding the `--observe` flag to the `dart run` command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run --observe tool/debug.dart\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Array Interop Type in Dart\nDESCRIPTION: Example showing how to declare a custom interop type by wrapping a built-in JS type (JSArray). The Array extension type implements JSArray<JSAny?> and provides an external constructor to create new JavaScript arrays.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nextension type Array._(JSArray<JSAny?> _) implements JSArray<JSAny?> {\n  external Array();\n}\n```\n\n----------------------------------------\n\nTITLE: For-in Loop with Pattern Matching\nDESCRIPTION: Shows how to use pattern matching in a for-in loop to destructure objects\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfor (final Candidate(:name, :yearsExperience) in candidates) {\n  print('$name has $yearsExperience of experience.');\n}\n```\n\n----------------------------------------\n\nTITLE: Finding DOM Elements with querySelector in Dart\nDESCRIPTION: Use querySelector and querySelectorAll to find DOM elements by ID, class, tag, or complex CSS selectors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Find an element by id (an-id).\nElement idElement = querySelector('#an-id')!;\n\n// Find an element by class (a-class).\nElement classElement = querySelector('.a-class')!;\n\n// Find all elements by tag (<div>).\nList<Element> divElements = querySelectorAll('div');\n\n// Find all text inputs.\nList<Element> textInputElements = querySelectorAll('input[type=\"text\"]');\n\n// Find all elements with the CSS class 'class'\n// inside of a <p> that is inside an element with\n// the ID 'id'.\nList<Element> specialParagraphElements = querySelectorAll('#id p.class');\n```\n\n----------------------------------------\n\nTITLE: Enabling Stricter Type Checks in YAML\nDESCRIPTION: This YAML configuration demonstrates how to enable stricter type checks in Dart, including settings for strict-casts, strict-inference, and strict-raw-types. These options enhance the type safety during static analysis.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  language:\n    strict-casts: true\n    strict-inference: true\n    strict-raw-types: true\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Expression Examples\nDESCRIPTION: Examples of common operator expressions in Dart showing different operator types and their basic usage.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\na++\na + b\na = b\na == b\nc ? a : b\na is T\n```\n\n----------------------------------------\n\nTITLE: Operator Precedence Example\nDESCRIPTION: Demonstrates operator precedence in Dart using conditional statements with modulo and logical AND operators. Shows equivalent code with and without parentheses.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Parentheses improve readability.\nif ((n % i == 0) && (d % i == 0)) {\n  // ...\n}\n\n// Harder to read, but equivalent.\nif (n % i == 0 && d % i == 0) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with Future in Dart\nDESCRIPTION: Shows how to make an asynchronous HTTP request using Dart's Future API with callback handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nhttp.get('https://example.com').then((response) {\n  if (response.statusCode == 200) {\n    print('Success!');\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Const vs Final Variables in Dart\nDESCRIPTION: Comparing different ways to declare constant values using const and final.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar foo = const [];\nfinal bar = const [];\nconst baz = []; // Equivalent to `const []`\n```\n\n----------------------------------------\n\nTITLE: Resolving Extension Conflicts using Hide in Dart\nDESCRIPTION: Shows how to resolve conflicting extension methods using import hide.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Defines the String extension method parseInt().\nimport 'string_apis.dart';\n\n// Also defines parseInt(), but hiding NumberParsing2\n// hides that extension method.\nimport 'string_apis_2.dart' hide NumberParsing2;\n\nvoid main() {\n  // Uses the parseInt() defined in 'string_apis.dart'.\n  print('42'.parseInt());\n}\n```\n\n----------------------------------------\n\nTITLE: Using every() Method in Dart\nDESCRIPTION: The snippet demonstrates how to use the every() method to check if all items in an Iterable meet a specific condition. In this case, it verifies that all items have a length of at least 5, showcasing a more compact way to accomplish the task compared to a for-in loop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nreturn items.every((item) => item.length >= 5);\n```\n\n----------------------------------------\n\nTITLE: Creating Redirecting Constructor in Dart\nDESCRIPTION: Example of a redirecting constructor that delegates to the main constructor using 'this'.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n\n  // The main constructor for this class.\n  Point(this.x, this.y);\n\n  // Delegates to the main constructor.\n  Point.alongXAxis(double x) : this(x, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Write After Promotion Fix Examples\nDESCRIPTION: Demonstrates two approaches to fix type promotion issues when variables might be written after promotion: combining if statements and changing parameter types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(bool b, int? i, int j) {\n  if (i == null) return;\n  if (b) {\n    i = j;\n  }\n  if (!b) {\n    print(i.isEven);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Type Bounds Example\nDESCRIPTION: Shows how to restrict generic type parameters using extends keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Foo<T extends Object> {\n  // Any type provided to Foo for T must be non-nullable.\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Arrow Syntax in Dart Functions\nDESCRIPTION: This snippet illustrates the use of Dart's arrow syntax for defining concise functions. The arrow (=>) is useful for functions returning a single expression. The example refactors a function to check for empty strings in a list, simplifying the code structure.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nbool hasEmpty = aListOfStrings.any((s) {\n  return s.isEmpty;\n});\n```\n\nLANGUAGE: dart\nCODE:\n```\nbool hasEmpty = aListOfStrings.any((s) => s.isEmpty);\n```\n\n----------------------------------------\n\nTITLE: Reading Binary File Contents in Dart\nDESCRIPTION: Shows how to read an entire file as binary data using readAsBytes(), which returns a Future that provides the file contents as a list of integers representing bytes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  var config = File('config.txt');\n\n  var contents = await config.readAsBytes();\n  print('The file is ${contents.length} bytes long.');\n}\n```\n\n----------------------------------------\n\nTITLE: Mixin Usage in Dart\nDESCRIPTION: Demonstrates how to apply a mixin to a class using the with keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass PilotedCraft extends Spacecraft with Piloted {\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating DateTime Objects in Dart\nDESCRIPTION: Shows various ways to create DateTime objects using constructors and methods, including getting the current time and creating dates with specific parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n// Get the current date and time.\nvar now = DateTime.now();\n\n// Create a new DateTime with the local time zone.\nvar y2k = DateTime(2000); // January 1, 2000\n\n// Specify the month and day.\ny2k = DateTime(2000, 1, 2); // January 2, 2000\n\n// Specify the date as a UTC time.\ny2k = DateTime.utc(2000); // 1/1/2000, UTC\n\n// Specify a date and time in ms since the Unix epoch.\ny2k = DateTime.fromMillisecondsSinceEpoch(946684800000, isUtc: true);\n\n// Parse an ISO 8601 date in the UTC time zone.\ny2k = DateTime.parse('2000-01-01T00:00:00Z');\n\n// Create a new DateTime from an existing one, adjusting just some properties:\nvar sameTimeLastYear = now.copyWith(year: now.year - 1);\n```\n\n----------------------------------------\n\nTITLE: Post-Null Safety Example in Dart\nDESCRIPTION: Demonstrates proper null-aware operator usage with explicit nullable types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nString? notAString = null;\nprint(notAString?.length);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Dart Bindings\nDESCRIPTION: Dart code snippet demonstrating how to use the generated bindings to call the Java 'sum' method.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/java-interop.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// a and b are integer arguments\nprint(Example.sum(a, b));\n```\n\n----------------------------------------\n\nTITLE: Named Record Fields Declaration\nDESCRIPTION: Shows declaration and initialization of records with named fields\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Record type annotation in a variable declaration:\n({int a, bool b}) record;\n\n// Initialize it with a record expression:\nrecord = (a: 123, b: true);\n```\n\n----------------------------------------\n\nTITLE: Manipulating DOM Nodes in Dart\nDESCRIPTION: Add, replace, and remove DOM nodes using dart:html methods on Node and Element objects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nquerySelector('#inputs')!.nodes.add(elem);\n\nquerySelector('#status')!.replaceWith(elem);\n\n// Find a node by ID, and remove it from the DOM if it is found.\nquerySelector('#expendable')?.remove();\n```\n\n----------------------------------------\n\nTITLE: Using any() and every() Methods in Dart\nDESCRIPTION: This code demonstrates the usage of both any() and every() methods with an Iterable of User objects. It checks for users' ages, implementing functions to ascertain if any user is under 18 and if every user is over 13.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nbool anyUserUnder18(Iterable<User> users) {\n  // TODO: Implement the anyUserUnder18 function.\n}\n\nbool everyUserOver13(Iterable<User> users) {\n  // TODO: Implement the everyUserOver13 function.\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nbool anyUserUnder18(Iterable<User> users) {\n  return users.any((user) => user.age < 18);\n}\n\nbool everyUserOver13(Iterable<User> users) {\n  return users.every((user) => user.age > 13);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Await in Main Function\nDESCRIPTION: Shows how to make the main() function async to allow the use of await at the top level of your application.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  checkVersion();\n  print('In main: version is ${await lookUpVersion()}');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Constructors in Dart\nDESCRIPTION: Example of how to define and use named constructors in Dart to provide multiple ways to instantiate a class. The Point class has a primary constructor and a named constructor 'origin' that creates a point at coordinates (0,0).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n\n  Point(this.x, this.y);\n\n  Point.origin() : x = 0, y = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Map Operations in Dart\nDESCRIPTION: Demonstrates advanced Map operations like accessing all keys and values, and checking for key existence.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar hawaiianBeaches = {\n  'Oahu': ['Waikiki', 'Kailua', 'Waimanalo'],\n  'Big Island': ['Wailea Bay', 'Pololu Beach'],\n  'Kauai': ['Hanalei', 'Poipu'],\n};\n\n// Get all the keys as an unordered collection\n// (an Iterable).\nvar keys = hawaiianBeaches.keys;\n\nassert(keys.length == 3);\nassert(Set.from(keys).contains('Oahu'));\n\n// Get all the values as an unordered collection\n// (an Iterable of Lists).\nvar values = hawaiianBeaches.values;\nassert(values.length == 3);\nassert(values.any((v) => v.contains('Waikiki')));\n```\n\n----------------------------------------\n\nTITLE: Avoiding Catching Exceptions without 'on' Clauses in Dart\nDESCRIPTION: Advises against using catch without 'on' clauses as it could lead to swallowing important exceptions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: ForEach Method Usage\nDESCRIPTION: Demonstrates using the forEach method on an iterable collection\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar collection = [1, 2, 3];\ncollection.forEach(print); // 1 2 3\n```\n\n----------------------------------------\n\nTITLE: Creating Zone-Local Values in Dart\nDESCRIPTION: Shows how to store and manipulate zone-local values using runZoned() with zoneValues argument, demonstrating key storage and manipulation\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nrunZoned(() {\n  print(Zone.current[#key]);\n}, zoneValues: { #key: 499 });\n```\n\nLANGUAGE: dart\nCODE:\n```\nrunZoned(() {\n  Zone.current[#key].add(499);\n  print(Zone.current[#key]); // [499]\n}, zoneValues: { #key: [] });\n```\n\n----------------------------------------\n\nTITLE: Using max and min Methods in dart:math Library\nDESCRIPTION: This code snippet shows how to use the max and min functions in the dart:math library to determine the maximum and minimum values from two given integers. Inputs are two numbers, and outputs are the maximum and minimum of those numbers.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-math.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nassert(max(1, 1000) == 1000);\nassert(min(1, -1000) == -1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Method with Metadata in Dart\nDESCRIPTION: Example showing how to mark a method as deprecated using the @Deprecated annotation, with a message directing users to the new recommended method.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Television {\n  /// Use [turnOn] to turn the power on instead.\n  @Deprecated('Use turnOn instead')\n  void activate() {\n    turnOn();\n  }\n\n  /// Turns the TV's power on.\n  void turnOn() {\n    ...\n  }\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators Example\nDESCRIPTION: Shows the usage of basic arithmetic operators in Dart including addition, subtraction, multiplication, division and modulo operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nassert(2 + 3 == 5);\nassert(2 - 3 == -1);\nassert(2 * 3 == 6);\nassert(5 / 2 == 2.5); // Result is a double\nassert(5 ~/ 2 == 2); // Result is an int\nassert(5 % 2 == 1); // Remainder\n\nassert('5/2 = ${5 ~/ 2} r ${5 % 2}' == '5/2 = 2 r 1');\n```\n\n----------------------------------------\n\nTITLE: Record Type Annotations with Swap Function\nDESCRIPTION: Shows how to use record type annotations in function parameters and return types\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n(int, int) swap((int, int) record) {\n  var (a, b) = record;\n  return (b, a);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Async Function Usage in Dart\nDESCRIPTION: Example showing the wrong way to use an asynchronous function, where fetchUserOrder() returns a Future but the code doesn't properly handle the asynchronous result.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nString createOrderMessage() {\n  var order = fetchUserOrder();\n  return 'Your order is: $order';\n}\n\nFuture<String> fetchUserOrder() =>\n// Imagine that this function is more complex and slow.\nFuture.delayed(const Duration(seconds: 2), () => 'Large Latte');\n\nvoid main() {\n  print(createOrderMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Rest Element Pattern in Dart Lists\nDESCRIPTION: Shows how to use rest elements in list patterns to match lists of arbitrary lengths and collect unmatched elements.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar [a, b, ..., c, d] = [1, 2, 3, 4, 5, 6, 7];\n// Prints \"1 2 6 7\".\nprint('$a $b $c $d');\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar [a, b, ...rest, c, d] = [1, 2, 3, 4, 5, 6, 7];\n// Prints \"1 2 [3, 4, 5] 6 7\".\nprint('$a $b $rest $c $d');\n```\n\n----------------------------------------\n\nTITLE: Implementing Iteration in Dart\nDESCRIPTION: Shows how to implement custom iteration for a Processes class by extending IterableBase and implementing an Iterator. This allows the class to be used in for-in loops.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nclass Process {\n  // Represents a process...\n}\n\nclass ProcessIterator implements Iterator<Process> {\n  @override\n  Process get current => ...\n  @override\n  bool moveNext() => ...\n}\n\n// A mythical class that lets you iterate through all\n// processes. Extends a subclass of [Iterable].\nclass Processes extends IterableBase<Process> {\n  @override\n  final Iterator<Process> iterator = ProcessIterator();\n}\n\nvoid main() {\n  // Iterable objects can be used with for-in.\n  for (final process in Processes()) {\n    // Do something with the process.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FFI Type Signatures\nDESCRIPTION: Dart typedefs defining the FFI type signature for the C function interface.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/c-interop.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntypedef hello_world_func = ffi.Void Function();\n```\n\nLANGUAGE: dart\nCODE:\n```\ntypedef HelloWorld = void Function();\n```\n\n----------------------------------------\n\nTITLE: Missing Return Statement (Without Null Safety)\nDESCRIPTION: This code shows a function with a non-nullable return type and a missing return statement. Before null safety, Dart would implicitly return `null`, but with null safety, this results in a compile error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Without null safety:\nString missingReturn() {\n  // No return.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables with Non-Null Types - Dart\nDESCRIPTION: This snippet shows how to use local variables in Dart, where they can be declared without initializers, provided they are definitely assigned before use.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nint tracingFibonacci(int n) {\n  int result;\n  if (n < 2) {\n    result = n;\n  } else {\n    result = tracingFibonacci(n - 2) + tracingFibonacci(n - 1);\n  }\n\n  print(result);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining New Interface with Non-Transparent Extension Type in Dart\nDESCRIPTION: This code illustrates how to use a non-transparent extension type `NumberE` in Dart. It provides an interface separate from its representation type by defining custom methods and operators. It contrasts the assignment and operation errors when mixing `NumberE` and `int`, demonstrating the creation of a new interface with defined constraints.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvoid testE() { \n  var num1 = NumberE(1);\n  int num2 = NumberE(2); // Error: Can't assign 'NumberE' to 'int'.\n  \n  num1.isValid(); // OK: Extension member invocation.\n  num1.isNegative(); // Error: 'NumberE' does not define 'int' member 'isNegative'.\n  \n  var sum1 = num1 + num1; // OK: 'NumberE' defines '+'.\n  var diff1 = num1 - num1; // Error: 'NumberE' does not define 'int' member '-'.\n  var diff2 = num1.value - 2; // OK: Can access representation object with reference.\n  var sum2 = num1 + 2; // Error: Can't assign 'int' to parameter type 'NumberE'. \n  \n  List<NumberE> numbers = [\n    NumberE(1), \n    num1.next, // OK: 'next' getter returns type 'NumberE'.\n    1, // Error: Can't assign 'int' element to list type 'NumberE'.\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Periodic Stream Creation in Dart\nDESCRIPTION: Example of creating a periodic stream that emits squared integer values every second.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> stream = Stream.periodic(const Duration(seconds: 1), (i) => i * i);\n```\n\n----------------------------------------\n\nTITLE: Filtering Even Numbers with where() Method in Dart\nDESCRIPTION: Demonstrates using where() to filter even numbers from a list and perform additional checks with any() method\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var evenNumbers = const [1, -2, 3, 42].where((number) => number.isEven);\n\n  for (final number in evenNumbers) {\n    print('$number is even.');\n  }\n\n  if (evenNumbers.any((number) => number.isNegative)) {\n    print('evenNumbers contains negative numbers.');\n  }\n\n  var largeNumbers = evenNumbers.where((number) => number > 1000);\n  if (largeNumbers.isEmpty) {\n    print('largeNumbers is empty!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory Constructors in Dart\nDESCRIPTION: Example of a factory constructor in Dart that can create and return different subclass instances based on input parameters. The Shape factory constructor creates either Square or Circle instances based on the type name provided.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass Square extends Shape {}\n\nclass Circle extends Shape {}\n\nclass Shape {\n  Shape();\n\n  factory Shape.fromTypeName(String typeName) {\n    if (typeName == 'square') return Square();\n    if (typeName == 'circle') return Circle();\n\n    throw ArgumentError('Unrecognized $typeName');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Unclosed Sink Method in Dart\nDESCRIPTION: This snippet illustrates finding a missing close invocation for a Sink instance in Dart. The analyzer prompts a message advising to close the Sink at the end of its usage.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar [!controller = StreamController<String>()!];\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ninfo - Unclosed instance of 'Sink'. Try invoking 'close' in the function in which the 'Sink' was created. - close_sinks\n```\n\n----------------------------------------\n\nTITLE: Using Initializing Formals in Dart Constructors\nDESCRIPTION: Encourages the use of initializing formals for constructor parameters to simplify field initialization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n  Point(double x, double y) : x = x, y = y;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n  Point(this.x, this.y);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Git Repository Dependencies\nDESCRIPTION: Examples of using `dart pub add` to add git-based dependencies with various options such as URL, ref, and path, leveraging the YAML descriptor syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add \"foo:{git: https://github.com/foo/foo}\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add \"foo:{git:{url: ../foo.git, ref: branch, path: subdir}}\"\n```\n\n----------------------------------------\n\nTITLE: Record Type Comparison with Different Names\nDESCRIPTION: Demonstrates type checking with named fields in records\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n({int a, int b}) recordAB = (a: 1, b: 2);\n({int x, int y}) recordXY = (x: 3, y: 4);\n\n// Compile error! These records don't have the same type.\n// recordAB = recordXY;\n```\n\n----------------------------------------\n\nTITLE: Exercise: Implementing a Factory Constructor in Dart\nDESCRIPTION: An exercise to implement a factory constructor that creates different subclass instances based on the length of a list. The constructor should return different IntegerHolder subclasses depending on the number of values in the input list.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass IntegerHolder {\n  IntegerHolder();\n\n  // Implement this factory constructor.\n  factory IntegerHolder.fromList(List<int> list) {\n    TODO();\n  }\n}\n\nclass IntegerSingle extends IntegerHolder {\n  final int a;\n\n  IntegerSingle(this.a);\n}\n\nclass IntegerDouble extends IntegerHolder {\n  final int a;\n  final int b;\n\n  IntegerDouble(this.a, this.b);\n}\n\nclass IntegerTriple extends IntegerHolder {\n  final int a;\n  final int b;\n  final int c;\n\n  IntegerTriple(this.a, this.b, this.c);\n}\n\n// Tests your solution (Don't edit from this point to end of file):\nvoid main() {\n  final errs = <String>[];\n\n  // Run 5 tests to see which values have valid integer holders.\n  for (var tests = 0; tests < 5; tests++) {\n    if (!testNumberOfArgs(errs, tests)) return;\n  }\n\n  // The goal is no errors with values 1 to 3,\n  // but have errors with values 0 and 4.\n  // The testNumberOfArgs method adds to the errs array if\n  // the values 1 to 3 have an error and\n  // the values 0 and 4 don't have an error.\n  if (errs.isEmpty) {\n    print('Success!');\n  } else {\n    errs.forEach(print);\n  }\n}\n\nbool testNumberOfArgs(List<String> errs, int count) {\n  bool _threw = false;\n  final ex = List.generate(count, (index) => index + 1);\n  final callTxt = \"IntegerHolder.fromList(${ex})\";\n  try {\n    final obj = IntegerHolder.fromList(ex);\n    final String vals = count == 1 ? \"value\" : \"values\";\n    // Uncomment the next line if you want to see the results realtime\n    // print(\"Testing with ${count} ${vals} using ${obj.runtimeType}.\");\n    testValues(errs, ex, obj, callTxt);\n  } on Error {\n    _threw = true;\n  } catch (e) {\n    switch (count) {\n      case (< 1 && > 3):\n        if (!_threw) {\n          errs.add('Called ${callTxt} and it didn\\'t throw an Error.');\n        }\n      default:\n        errs.add('Called $callTxt and received an Error.');\n    }\n  }\n  return true;\n}\n\nvoid testValues(List<String> errs, List<int> expectedValues, IntegerHolder obj,\n    String callText) {\n  for (var i = 0; i < expectedValues.length; i++) {\n    int found;\n    if (obj is IntegerSingle) {\n      found = obj.a;\n    } else if (obj is IntegerDouble) {\n      found = i == 0 ? obj.a : obj.b;\n    } else if (obj is IntegerTriple) {\n      found = i == 0\n          ? obj.a\n          : i == 1\n              ? obj.b\n              : obj.c;\n    } else {\n      throw ArgumentError(\n          \"This IntegerHolder type (${obj.runtimeType}) is unsupported.\");\n    }\n\n    if (found != expectedValues[i]) {\n      errs.add(\n          \"Called $callText and got a ${obj.runtimeType} \" +\n          \"with a property at index $i value of $found \" +\n          \"instead of the expected (${expectedValues[i]}).\");\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolate with Closure Example\nDESCRIPTION: Example demonstrating how to use Isolate.run() with a closure instead of a named function for JSON processing. Shows inline async computation in a worker isolate.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst String filename = 'with_keys.json';\n\nvoid main() async {\n  // Read some data.\n  final jsonData = await Isolate.run(() async {\n    final fileData = await File(filename).readAsString();\n    final jsonData = jsonDecode(fileData) as Map<String, dynamic>;\n    return jsonData;\n  });\n\n  // Use that data.\n  print('Number of JSON keys: ${jsonData.length}');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Class Structure for Isolate Communication in Dart\nDESCRIPTION: Initial class structure defining the Worker class that will handle isolate creation and communication. Contains empty method signatures that will be implemented to manage isolate lifecycle and message passing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  Future<void> spawn() async {\n    // TODO: Add functionality to spawn a worker isolate.\n  }\n\n  void _handleResponsesFromIsolate(dynamic message) {\n    // TODO: Handle messages sent back from the worker isolate.\n  }\n\n  static void _startRemoteIsolate(SendPort port) {\n    // TODO: Define code that should be executed on the worker isolate.\n  }\n\n  Future<void> parseJson(String message) async {\n    // TODO: Define a public method that can\n    // be used to send messages to the worker isolate.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'this.' to Redirect to Named Constructors in Dart\nDESCRIPTION: Shows the usage of 'this.' when redirecting to a named constructor, ensuring proper constructor chaining.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nclass ShadeOfGray {\n  final int brightness;\n\n  ShadeOfGray(int val) : brightness = val;\n\n  ShadeOfGray.black() : this(0);\n\n  // This won't parse or compile!\n  // ShadeOfGray.alsoBlack() : black();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass ShadeOfGray {\n  final int brightness;\n\n  ShadeOfGray(int val) : brightness = val;\n\n  ShadeOfGray.black() : this(0);\n\n  // But now it will!\n  ShadeOfGray.alsoBlack() : this.black();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Definite Assignment Analysis for Final Variables - Dart\nDESCRIPTION: This snippet demonstrates the use of definite assignment analysis in Dart for ensuring final variables are initialized through all control flow paths.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nint tracingFibonacci(int n) {\n  final int result;\n  if (n < 2) {\n    result = n;\n  } else {\n    result = tracingFibonacci(n - 2) + tracingFibonacci(n - 1);\n  }\n\n  print(result);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Synchronous and Asynchronous Errors in Dart\nDESCRIPTION: This snippet shows an example where synchronous errors may not be handled correctly in a 'Future' returning function. It highlights the issues with functions like 'obtainFilename()' potentially throwing errors outside of 'then()' callbacks, leading to unhandled exceptions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> parseAndRead(Map<String, dynamic> data) {\n  final filename = obtainFilename(data); // Could throw.\n  final file = File(filename);\n  return file.readAsString().then((contents) {\n    return parseFileData(contents); // Could throw.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Null-Aware Operators Exercise in Dart\nDESCRIPTION: Practice using null-aware operators ??= and ?? to handle nullable values and provide fallback options.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nString? foo = 'a string';\nString? bar; // = null\n\n// Substitute an operator that makes 'a string' be assigned to baz.\nString? baz = foo /* TODO */ bar;\n\nvoid updateSomeVars() {\n  // Substitute an operator that makes 'a string' be assigned to bar.\n  bar /* TODO */ 'a string';\n}\n\n// Tests your solution (Don't edit!):\nvoid main() {\n  try {\n    updateSomeVars();\n    if (foo != 'a string') {\n      print('Looks like foo somehow ended up with the wrong value.');\n    } else if (bar != 'a string') {\n      print('Looks like bar ended up with the wrong value.');\n    } else if (baz != 'a string') {\n      print('Looks like baz ended up with the wrong value.');\n    } else {\n      print('Success!');\n    }\n  } catch (e) {\n    print('Exception: ${e.runtimeType}.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Booleans with dart:math Library\nDESCRIPTION: This example demonstrates generating random boolean values using the Random class from the dart:math library. After instantiating Random, the nextBool method outputs a random true or false. No additional inputs are required.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-math.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar random = Random();\nrandom.nextBool(); // true or false\n```\n\n----------------------------------------\n\nTITLE: Chaining Operations with async/await\nDESCRIPTION: The same chaining operation rewritten using async/await syntax for better readability\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final value = await costlyQuery(url);\n  await expensiveWork(value);\n  await lengthyComputation();\n  print('Done!');\n} catch (e) {\n  /* Handle exception... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace by Initializing pubspec.yaml in Dart\nDESCRIPTION: This YAML configuration sets up a workspace for multiple Dart packages by specifying their paths. It prevents separate resolution of dependencies for each package, thereby enhancing performance and consistency across the repository.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/workspaces.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: _\npublish_to: none\nenvironment:\n  sdk: ^3.6.0\nworkspace:\n  - packages/helper\n  - packages/client_package\n  - packages/server_package\n```\n\n----------------------------------------\n\nTITLE: Handling Errors from Catches Properly in Dart\nDESCRIPTION: Emphasizes the importance of managing the errors caught by catch clauses and not discarding them without action.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Non-nullable Variable Initialization in Dart\nDESCRIPTION: Initializing a non-nullable variable with a required value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint lineCount = 0;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Extension Types in Dart 3.3\nDESCRIPTION: This Dart code snippet showcases the use of extension types, introduced in Dart 3.3. It defines an extension type 'Meters' that wraps an int value and provides additional functionality, demonstrating zero-cost abstraction.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nextension type Meters(int value) {\n  String get label => '${value}m';\n  Meters operator +(Meters other) => Meters(value + other.value);\n}\n\nvoid main() {\n  var m = Meters(42); // Has type `Meters`.\n  var m2 = m + m; // OK, type `Meters`.\n  // int i = m; // Compile-time error, wrong type.\n  // m.isEven; // Compile-time error, no such member.\n  assert(identical(m, m.value)); // Succeeds.\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Type Inference in Dart\nDESCRIPTION: Demonstrates variable declaration using type inference with var keyword, showing different data types including strings, numbers, lists, and maps.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Voyager I';\nvar year = 1977;\nvar antennaDiameter = 3.7;\nvar flybyObjects = ['Jupiter', 'Saturn', 'Uranus', 'Neptune'];\nvar image = {\n  'tags': ['saturn'],\n  'url': '//path/to/saturn.jpg',\n};\n```\n\n----------------------------------------\n\nTITLE: String-Specific Cache Interface\nDESCRIPTION: Demonstrates a type-specific cache interface implementation for strings.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nabstract class StringCache {\n  String getByKey(String key);\n  void setByKey(String key, String value);\n}\n```\n\n----------------------------------------\n\nTITLE: Record Field Access\nDESCRIPTION: Demonstrates accessing named and positional fields in records using getters\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar record = ('first', a: 2, b: true, 'last');\n\nprint(record.$1); // Prints 'first'\nprint(record.a); // Prints 2\nprint(record.b); // Prints true\nprint(record.$2); // Prints 'last'\n```\n\n----------------------------------------\n\nTITLE: Comparing Event Handling Between dart:html and package:web\nDESCRIPTION: Demonstrates how to handle input blur events using both the original dart:html approach and the migrated package:web version. Shows the similarity in syntax while using different import sources.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Original dart:html version:\nfinal htmlInput = InputElement();\nawait htmlInput.onBlur.first;\n\n// Migrated package:web version:\nfinal webInput = HTMLInputElement();\nawait webInput.onBlur.first;\n```\n\n----------------------------------------\n\nTITLE: Function Declaration Without Type Annotations\nDESCRIPTION: Demonstrates a function implementation without type annotations, showing Dart's type inference capabilities.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nisNoble(atomicNumber) {\n  return _nobleGases[atomicNumber] != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Initializer List in Dart Constructor\nDESCRIPTION: A Dart exercise to implement a constructor with an initializer list that extracts the first two characters from a string and assigns them to class properties. Includes validation to ensure the string has at least two characters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass FirstTwoLetters {\n  final String letterOne;\n  final String letterTwo;\n\n  // TODO: Create a constructor with an initializer list here:\n  FirstTwoLetters(String word)\n\n}\n\n\n// Tests your solution (Don't edit!):\nvoid main() {\n  final errs = <String>[];\n\n  try {\n    final result = FirstTwoLetters('My String');\n\n    if (result.letterOne != 'M') {\n      errs.add('Called FirstTwoLetters(\\'My String\\') and got an object with \\n letterOne equal to \\'${result.letterOne}\\' instead of the expected value (\\'M\\').');\n    }\n\n    if (result.letterTwo != 'y') {\n      errs.add('Called FirstTwoLetters(\\'My String\\') and got an object with \\n letterTwo equal to \\'${result.letterTwo}\\' instead of the expected value (\\'y\\').');\n    }\n  } catch (e) {\n    errs.add('Called FirstTwoLetters(\\'My String\\') and got an exception \\n of type ${e.runtimeType}.');\n  }\n\n  bool caughtException = false;\n\n  try {\n    FirstTwoLetters('');\n  } catch (e) {\n    caughtException = true;\n  }\n\n  if (!caughtException) {\n    errs.add('Called FirstTwoLetters(\\'\\') and didn\\'t get an exception \\n from the failed assertion.');\n  }\n\n  if (errs.isEmpty) {\n    print('Success!');\n  } else {\n    errs.forEach(print);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Guard Clause Usage\nDESCRIPTION: Shows the difference between using if statements and guard clauses in switch patterns.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nswitch (pair) {\n  case (int a, int b):\n    if (a > b) print('First element greater');\n  // If false, prints nothing and exits the switch.\n  case (int a, int b) when a > b:\n    // If false, prints nothing but proceeds to next case.\n    print('First element greater');\n  case (int a, int b):\n    print('First element not greater');\n}\n```\n\n----------------------------------------\n\nTITLE: Lexical Closure Example\nDESCRIPTION: Demonstrates closure functionality by creating functions that remember their lexical scope.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nFunction makeAdder(int addBy) {\n  return (int i) => addBy + i;\n}\n\nvoid main() {\n  // Create a function that adds 2.\n  var add2 = makeAdder(2);\n\n  // Create a function that adds 4.\n  var add4 = makeAdder(4);\n\n  assert(add2(3) == 5);\n  assert(add4(3) == 7);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with where() Method in Dart\nDESCRIPTION: The snippets illustrate the usage of the where() method to filter elements in an Iterable, specifically fetching all even numbers from a collection. This method allows the extraction of elements that meet a given predicate without modifying the original Iterable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar evenNumbers = numbers.where((number) => number.isEven);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar evenNumbers = numbers.where((number) => number.isEven);\nfor (final number in evenNumbers) {\n  print('$number is even');\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Function to List Items with forEach in Dart\nDESCRIPTION: Demonstrates how to use the forEach method to apply a function to each item in a List.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\n\nteas.forEach((tea) => print('I drink $tea'));\n```\n\n----------------------------------------\n\nTITLE: Converting Futures to Stream in Dart\nDESCRIPTION: Creates a stream from an iterable of futures, yielding each future's result in sequence.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nStream<T> streamFromFutures<T>(Iterable<Future<T>> futures) async* {\n  for (final future in futures) {\n    var result = await future;\n    yield result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Syntax for Simple Members in Dart\nDESCRIPTION: Demonstrates using the arrow (=>) syntax for concise expression of simple members like getters and short methods. This is ideal for members that just calculate and return a value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\ndouble get area => (right - left) * (bottom - top);\n\nString capitalize(String name) =>\n    '${name[0].toUpperCase()}${name.substring(1)}';\n```\n\n----------------------------------------\n\nTITLE: Integer to Double Conversion in Dart\nDESCRIPTION: Demonstration of automatic integer to double conversion.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ndouble z = 1; // Equivalent to double z = 1.0.\n```\n\n----------------------------------------\n\nTITLE: For Loop with Closures in Dart\nDESCRIPTION: Shows how Dart's for loops correctly capture index values in closures, avoiding a common JavaScript pitfall\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar callbacks = [];\nfor (var i = 0; i < 2; i++) {\n  callbacks.add(() => print(i));\n}\n\nfor (final c in callbacks) {\n  c();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Rot Codec for Byte Rotation in Dart\nDESCRIPTION: Shows the practical application of the RotConverter for encrypting and decrypting byte data. Constants and main function demonstrate encoding and decoding with different keys. Inputs are byte arrays and keys, with outputs as encrypted or original byte arrays, featuring simple encryption logic.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nconst Rot ROT128 = const Rot(128);\nconst Rot ROT1 = const Rot(1);\n\nvoid main() {\n  print(const RotConverter(128).convert([0, 128, 255, 1]));   // [128, 0, 127, 129]\n  print(const RotConverter(128).convert([128, 0, 127, 129])); // [0, 128, 255, 1]\n  print(const RotConverter(-128).convert([128, 0, 127, 129]));// [0, 128, 255, 1]\n\n  print(ROT1.decode(ROT1.encode([0, 128, 255, 1])));          // [0, 128, 255, 1]\n  print(ROT128.decode(ROT128.encode([0, 128, 255, 1])));      // [0, 128, 255, 1]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Zones in Dart\nDESCRIPTION: Illustrates the use of runZoned to establish multiple nested zones and control the execution flow of asynchronous callbacks among these zones. Dependencies include the dart:async library. Main function initiates zone #2, while subsequent calls to foo() and bar() operate under different zones. Execution remains within the defined zones.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\\n\\nmain() {\\n  foo();\\n  var future;\\n  runZoned(() {          // Starts a new child zone (zone #2).\\n    future = new Future(bar).then(baz);\\n  });\\n  future.then(qux);\\n}\\n\\nfoo() => ...foo-body...  // Executed twice (once each in two zones).\\nbar() => ...bar-body...\\nbaz(x) => runZoned(() => foo()); // New child zone (zone #3).\\nqux(x) => ...qux-body...\n```\n\n----------------------------------------\n\nTITLE: Registering callbacks with ZoneSpecification in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to use `ZoneSpecification` to intercept and modify the behavior of asynchronous callbacks. It wraps the callback execution to save a stack trace before the code enters an asynchronous context, allowing for improved debugging capabilities. The example defines custom handlers for `registerCallback`, `registerUnaryCallback`, and `registerBinaryCallback`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:async';\n\nget currentStackTrace {\n  try {\n    throw 0;\n  } catch(_, st) {\n    return st;\n  }\n}\n\nvar lastStackTrace = null;\n\nbar() => throw \"in bar\";\nfoo() => new Future(bar);\n\nmain() {\n  final specification = new ZoneSpecification(\n    registerCallback: (self, parent, zone, f) {\n      var stackTrace = currentStackTrace;\n      return parent.registerCallback(zone, () {\n        lastStackTrace = stackTrace;\n        return f();\n      });\n    },\n    registerUnaryCallback: (self, parent, zone, f) {\n      var stackTrace = currentStackTrace;\n      return parent.registerUnaryCallback(zone, (arg) {\n        lastStackTrace = stackTrace;\n        return f(arg);\n      });\n    },\n    registerBinaryCallback: (self, parent, zone, f) {\n      var stackTrace = currentStackTrace;\n      return parent.registerBinaryCallback(zone, (arg1, arg2) {\n        lastStackTrace = stackTrace;\n        return f(arg1, arg2);\n      });\n    },\n    handleUncaughtError: (self, parent, zone, error, stackTrace) {\n      if (lastStackTrace != null) print(\"last stack: $lastStackTrace\");\n      return parent.handleUncaughtError(zone, error, stackTrace);\n    });\n\n  runZoned(() {\n    foo();\n  }, zoneSpecification: specification);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Record Syntax in Dart\nDESCRIPTION: Demonstrates basic record expression syntax with both named and positional fields\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar record = ('first', a: 2, b: true, 'last');\n```\n\n----------------------------------------\n\nTITLE: Extension Type Constructors\nDESCRIPTION: Examples of different constructor patterns in extension types including named and unnamed constructors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nextension type E(int i) {\n  E.n(this.i);\n  E.m(int j, String foo) : i = j + foo.length;\n}\n\nvoid main() {\n  E(4);\n  E.n(3);\n  E.m(5, \"Hello!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables to Fix Promotion Errors\nDESCRIPTION: This snippet demonstrates a workaround for type promotion failures by assigning the property's value to a local variable. This ensures the value is a stable non-nullable type that can be promoted safely.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass C {\n  int? i;\n  void f() {\n    [!final i = this.i;!]\n    if (i == null) return;\n    print(i.isEven);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Unix Epoch Timestamps in Dart\nDESCRIPTION: Demonstrates how to work with Unix epoch timestamps (milliseconds since January 1, 1970, UTC) in DateTime objects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n// 1/1/2000, UTC\nvar y2k = DateTime.utc(2000);\nassert(y2k.millisecondsSinceEpoch == 946684800000);\n\n// 1/1/1970, UTC\nvar unixEpoch = DateTime.utc(1970);\nassert(unixEpoch.millisecondsSinceEpoch == 0);\n```\n\n----------------------------------------\n\nTITLE: Delegating Microtask Scheduling in Dart Zones\nDESCRIPTION: Demonstrates how to intercept and delegate microtask scheduling while maintaining the original zone context\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nrunZoned(() {\n  var currentZone = Zone.current;\n  scheduleMicrotask(() {\n    print(identical(currentZone, Zone.current));  // prints true.\n  });\n}, zoneSpecification: new ZoneSpecification(\n  scheduleMicrotask: (self, parent, zone, task) {\n    print('scheduleMicrotask has been called inside the zone');\n    parent.scheduleMicrotask(zone, task);\n  }));\n```\n\n----------------------------------------\n\nTITLE: Handling Errors Originating within whenComplete() in Dart\nDESCRIPTION: Demonstrates how errors thrown within a whenComplete() callback are propagated and can be caught by a subsequent catchError().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  asyncErrorFunction()\n      // Future completes with a value:\n      .catchError(handleError)\n      // Future completes with an error:\n      .whenComplete(() => throw Exception('New error'))\n      // Error is handled:\n      .catchError(handleError);\n}\n```\n\n----------------------------------------\n\nTITLE: Null-Check Pattern Example in Dart\nDESCRIPTION: Shows how to use null-check pattern to safely handle nullable values while maintaining type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nString? maybeString = 'nullable with base type String';\nswitch (maybeString) {\n  case var s?:\n  // 's' has type non-nullable String here.\n}\n```\n\n----------------------------------------\n\nTITLE: Map Operations in Dart\nDESCRIPTION: Shows basic Map operations including adding, retrieving, and removing key-value pairs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar nobleGases = {54: 'xenon'};\n\n// Retrieve a value with a key.\nassert(nobleGases[54] == 'xenon');\n\n// Check whether a map contains a key.\nassert(nobleGases.containsKey(54));\n\n// Remove a key and its value.\nnobleGases.remove(54);\nassert(!nobleGases.containsKey(54));\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Function with Async and Await in Dart\nDESCRIPTION: Demonstrates creating an asynchronous function that delays printing a message using Future and async/await syntax\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> printWithDelay(String message) async {\n  await Future.delayed(oneSecond);\n  print(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Functions with Lexical Scope\nDESCRIPTION: Example demonstrating lexical scoping with nested functions and variable access.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nbool topLevel = true;\n\nvoid main() {\n  var insideMain = true;\n\n  void myFunction() {\n    var insideFunction = true;\n\n    void nestedFunction() {\n      var insideNestedFunction = true;\n\n      assert(topLevel);\n      assert(insideMain);\n      assert(insideFunction);\n      assert(insideNestedFunction);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Required Named Parameters Example\nDESCRIPTION: Demonstrates the use of required keyword for mandatory named parameters with various combinations of nullability.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nfunction({int? a, required int? b, int? c, required int? d}) {}\n```\n\n----------------------------------------\n\nTITLE: Basic For Loop in Dart\nDESCRIPTION: Demonstrates a standard for loop that appends exclamation marks to a string buffer\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = StringBuffer('Dart is fun');\nfor (var i = 0; i < 5; i++) {\n  message.write('!');\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Parameter Type Override Example\nDESCRIPTION: Demonstrates incorrect parameter type narrowing in method overrides.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Mouse extends Animal {\n   ...\n}\n\nclass Cat extends Animal {\n  @override\n  void chase(Mouse a) {\n     ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Super Constructor with Expression\nDESCRIPTION: Shows how to pass expressions as arguments to superclass constructors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass Employee extends Person {\n  Employee() : super.fromJson(fetchDefaultData());\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Promotion in Dart with Null Coalescing\nDESCRIPTION: This example demonstrates a case where flow analysis fails to recognize safe promotion with null coalescing. The solution involves creating a local variable with a non-nullable type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i) {\n  i ??= 0;\n  var foo = () {\n    print(i.isEven); // ERROR\n  };\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i) {\n  var j = i ?? 0;\n  var foo = () {\n    print(j.isEven); // OK\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces in Dart\nDESCRIPTION: Demonstrates how to implement a class interface by creating a MockSpaceship that implements the Spacecraft interface\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass MockSpaceship implements Spacecraft {\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Pattern Matching in Dart Switch\nDESCRIPTION: Shows nested pattern matching using a switch statement to match a two-element list with specific conditions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nswitch (list) {\n  case ['a' || 'b', var c]:\n    print(c);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Long Future Chains in Dart\nDESCRIPTION: Illustrates how errors propagate through a chain of then() calls and are ultimately caught by a single catchError() at the end.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String> one() => Future.value('from one');\nFuture<String> two() => Future.error('error from two');\nFuture<String> three() => Future.value('from three');\nFuture<String> four() => Future.value('from four');\n\nvoid main() {\n  one() // Future completes with \"from one\".\n      .then((_) => two()) // Future completes with two()'s error.\n      .then((_) => three()) // Future completes with two()'s error.\n      .then((_) => four()) // Future completes with two()'s error.\n      .then((value) => value.length) // Future completes with two()'s error.\n      .catchError((e) {\n        print('Got error: $e'); // Finally, callback fires.\n        return 42; // Future completes with 42.\n      })\n      .then((value) {\n        print('The value is $value');\n      });\n}\n\n// Output of this program:\n//   Got error: error from two\n//   The value is 42\n```\n\n----------------------------------------\n\nTITLE: Reading a File Asynchronously using Stream.listen() with Error Handling in Dart\nDESCRIPTION: This snippet demonstrates reading a file asynchronously using the `Stream.listen()` method.  It reads 'config.txt', transforms the byte stream into lines using `utf8.decoder` and `LineSplitter`, then listens for each line, printing its length. `onDone` and `onError` handlers are used to manage stream completion and errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar config = File('config.txt');\nStream<List<int>> inputStream = config.openRead();\n\ninputStream\n    .transform(utf8.decoder)\n    .transform(const LineSplitter())\n    .listen(\n      (String line) {\n        print('Got ${line.length} characters from stream');\n      },\n      onDone: () {\n        print('file is now closed');\n      },\n      onError: (e) {\n        print(e);\n      },\n    );\n```\n\n----------------------------------------\n\nTITLE: Static Type Declaration in Dart\nDESCRIPTION: Explicitly declaring variable type annotation for strict type checking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nString name = 'Bob';\n```\n\n----------------------------------------\n\nTITLE: Running Dart Pub Upgrade - Console\nDESCRIPTION: Illustrates using 'dart pub upgrade' to update all dependencies to their latest versions and regenerate the lockfile, ensuring compatibility with dependency constraints.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade\n```\n\n----------------------------------------\n\nTITLE: Launching Dart Web App with DevTools\nDESCRIPTION: This shell command launches a non-Flutter Dart web application using the `webdev serve` command with debugging enabled. The `--debug` flag sets up the environment for using Dart DevTools, facilitating debugging functionality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-devtools.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ webdev serve --debug\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching with Constants in Dart\nDESCRIPTION: Shows how to match a list pattern against constant values 'a' and 'b' within a switch statement.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst a = 'a';\nconst b = 'b';\nswitch (obj) {\n  // List pattern [a, b] matches obj first if obj is a list with two fields,\n  // then if its fields match the constant subpatterns 'a' and 'b'.\n  case [a, b]:\n    print('$a, $b');\n}\n```\n\n----------------------------------------\n\nTITLE: Object Pattern Matching in Dart\nDESCRIPTION: Demonstrates object pattern matching to destructure object properties using getter methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nswitch (shape) {\n  // Matches if shape is of type Rect, and then against the properties of Rect.\n  case Rect(width: var w, height: var h): // ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Binds new variables x and y to the values of Point's x and y properties.\nvar Point(:x, :y) = Point(1, 2);\n```\n\n----------------------------------------\n\nTITLE: File Stream Transformation with UTF-8 Decoder in Dart\nDESCRIPTION: Shows how to transform a file stream using UTF-8 decoder and LineSplitter transformers.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nStream<List<int>> content = File('someFile.txt').openRead();\nList<String> lines =\n    await content\n        .transform(utf8.decoder)\n        .transform(const LineSplitter())\n        .toList();\n```\n\n----------------------------------------\n\nTITLE: Chaining Operations on Objects with Dart Cascades\nDESCRIPTION: This Dart code snippet shows how to use cascades to perform a series of operations on the same object efficiently. The cascade operator (.. or ?..) allows for chaining method calls and property access, which reduces code verbosity and enhances readability. It includes an example of setting properties and listeners on a DOM element.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal button = web.document.querySelector('#confirm');\nbutton?.textContent = 'Confirm';\nbutton?.classList.add('important');\nbutton?.onClick.listen((e) => web.window.alert('Confirmed!'));\nbutton?.scrollIntoView();\n```\n\nLANGUAGE: dart\nCODE:\n```\nweb.document.querySelector('#confirm')\n  ?..textContent = 'Confirm'\n  ..classList.add('important')\n  ..onClick.listen((e) => web.window.alert('Confirmed!'))\n  ..scrollIntoView();\n```\n\n----------------------------------------\n\nTITLE: Dart Method Naming Conventions\nDESCRIPTION: Examples of recommended method naming patterns including to___() and as___() methods for object conversion and representation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nto___() // For copying object state to new object\nas___() // For different representation backed by original object\n```\n\n----------------------------------------\n\nTITLE: Conditional Map Updates in Dart\nDESCRIPTION: Demonstrates how to use putIfAbsent() to conditionally add key-value pairs to a Map.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar teamAssignments = <String, String>{};\nteamAssignments.putIfAbsent('Catcher', () => pickToughestKid());\nassert(teamAssignments['Catcher'] != null);\n```\n\n----------------------------------------\n\nTITLE: Renaming JS Properties with @JS()\nDESCRIPTION: Demonstrates using @JS() annotation to reference JavaScript properties with different names in Dart, including array push example.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nextension type Array._(JSArray<JSAny?> _) implements JSArray<JSAny?> {\n  external int push(JSNumber number);\n  @JS('push')\n  external int pushString(JSString string);\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding URI Components in Dart\nDESCRIPTION: Shows how to encode and decode all special characters in a URI string using encodeComponent() and decodeComponent().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nvar uri = 'https://example.org/api?foo=some message';\n\nvar encoded = Uri.encodeComponent(uri);\nassert(\n  encoded == 'https%3A%2F%2Fexample.org%2Fapi%3Ffoo%3Dsome%20message',\n);\n\nvar decoded = Uri.decodeComponent(encoded);\nassert(uri == decoded);\n```\n\n----------------------------------------\n\nTITLE: Converting Dart String to JSString\nDESCRIPTION: Demonstrates how to convert a Dart String to a JSString using the toJS property.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nString str = 'hello world';\nJSString jsStr = str.toJS;\n```\n\n----------------------------------------\n\nTITLE: Error Handling with catchError\nDESCRIPTION: Demonstrates error handling for Future operations using catchError() method\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nhttpClient\n    .read(url)\n    .then((String result) {\n      print(result);\n    })\n    .catchError((e) {\n      // Handle or ignore the error.\n    });\n```\n\n----------------------------------------\n\nTITLE: Null-Assert Declaration Pattern Example in Dart\nDESCRIPTION: Shows how to use null-assert pattern in variable declarations to ensure non-null values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n(int?, int?) position = (2, 3);\n\nvar (x!, y!) = position;\n```\n\n----------------------------------------\n\nTITLE: Worker Class Definition for Robust Isolate Communication\nDESCRIPTION: A skeleton implementation of a Worker class for handling isolate communication with improved error handling. This code defines the basic structure and methods needed for the worker pattern, including methods to spawn an isolate, send messages, and handle responses.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  final SendPort _commands;\n  final ReceivePort _responses;\n\n  Future<Object?> parseJson(String message) async {\n    // TODO: Ensure the port is still open.\n    _commands.send(message);\n  }\n\n  static Future<Worker> spawn() async {\n    // TODO: Add functionality to create a new Worker object with a\n    //  connection to a spawned isolate.\n    throw UnimplementedError();\n  }\n\n  Worker._(this._responses, this._commands) {\n    // TODO: Initialize main isolate receive port listener.\n  }\n\n  void _handleResponsesFromIsolate(dynamic message) {\n    // TODO: Handle messages sent back from the worker isolate.\n  }\n\n  static void _handleCommandsToIsolate(ReceivePort rp, SendPort sp) async {\n    // TODO: Handle messages sent back from the worker isolate.\n  }\n\n  static void _startRemoteIsolate(SendPort sp) {\n    // TODO: Initialize worker isolate's ports.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Example with List Operations\nDESCRIPTION: Demonstrates using anonymous functions with list operations to convert strings to uppercase and print their lengths.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nconst list = ['apples', 'bananas', 'oranges'];\n\nvar uppercaseList =\n    list.map((item) {\n      return item.toUpperCase();\n    }).toList();\n// Convert to list after mapping\n\nfor (var item in uppercaseList) {\n  print('$item: ${item.length}');\n}\n```\n\n----------------------------------------\n\nTITLE: Class Usage Example in Dart\nDESCRIPTION: Shows how to create and use instances of the Spacecraft class using different constructors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar voyager = Spacecraft('Voyager I', DateTime(1977, 9, 5));\nvoyager.describe();\n\nvar voyager3 = Spacecraft.unlaunched('Voyager III');\nvoyager3.describe();\n```\n\n----------------------------------------\n\nTITLE: Valid Dart Class Modifier Combinations\nDESCRIPTION: Lists all valid combinations of Dart class modifiers and their capabilities including construction, extension, implementation, mixing in, and exhaustiveness checking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/modifier-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass\nbase class\ninterface class\nfinal class\nsealed class\nabstract class\nabstract base class\nabstract interface class\nabstract final class\nmixin class\nbase mixin class\nabstract mixin class\nabstract base mixin class\nmixin\nbase mixin\n```\n\n----------------------------------------\n\nTITLE: Finding Last Positive Number in Stream\nDESCRIPTION: Shows how to use Stream API's lastWhere method to find the last positive integer in a stream of numbers.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> lastPositive(Stream<int> stream) =>\n    stream.lastWhere((x) => x >= 0);\n```\n\n----------------------------------------\n\nTITLE: Summing Stream Values in Dart\nDESCRIPTION: Demonstrates how to use async/await with streams to sum integer values from a stream. The function uses await for to iterate over stream events and accumulate their sum.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> sumStream(Stream<int> stream) async {\n  var sum = 0;\n  await for (final value in stream) {\n    sum += value;\n  }\n  return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Path is a Directory in Dart\nDESCRIPTION: This snippet uses FileSystemEntity to asynchronously check if a given path is a directory. It demonstrates how to handle file system operations that return Futures using await.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nif (await FileSystemEntity.isDirectory(path)) {\n  stderr.writeln('error: $path is a directory');\n} else {\n  exitCode = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Isolate Responses\nDESCRIPTION: Handles responses from the worker isolate, including error handling and message processing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvoid _handleResponsesFromIsolate(dynamic message) {\n  if (message is RemoteError) {\n    throw message;\n  } else {\n    print(message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Const Strings in Dart\nDESCRIPTION: Examples of valid and invalid const string declarations with interpolation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// These work in a const string.\nconst aConstNum = 0;\nconst aConstBool = true;\nconst aConstString = 'a constant string';\n\n// These do NOT work in a const string.\nvar aNum = 0;\nvar aBool = true;\nvar aString = 'a string';\nconst aConstList = [1, 2, 3];\n\nconst validConstString = '$aConstNum $aConstBool $aConstString';\n// const invalidConstString = '$aNum $aBool $aString $aConstList';\n```\n\n----------------------------------------\n\nTITLE: Type Test Operator: Object Casting in Dart\nDESCRIPTION: Demonstrates safe type casting and type checking using `as`, `is`, and `is!` operators in Dart. These operators allow runtime type verification and safe type conversion.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n(employee as Person).firstName = 'Bob';\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (employee is Person) {\n  employee.firstName = 'Bob';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RawReceivePort in Worker.spawn Method\nDESCRIPTION: Implementation of the Worker.spawn method with RawReceivePort for initialization. This approach allows for separation of isolate startup logic from message handling logic, making the code more robust. The method sets up a completion mechanism to indicate when the isolate is ready.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  final SendPort _commands;\n  final ReceivePort _responses;\n\n  static Future<Worker> spawn() async {\n    // Create a receive port and add its initial message handler.\n    final initPort = RawReceivePort();\n    final connection = Completer<(ReceivePort, SendPort)>.sync();\n    initPort.handler = (initialMessage) {\n      final commandPort = initialMessage as SendPort;\n      connection.complete((\n        ReceivePort.fromRawReceivePort(initPort),\n        commandPort,\n      ));\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Circle Class with Calculated Properties in Dart\nDESCRIPTION: A well-designed Circle class that calculates area and circumference on demand rather than storing them. This approach uses less memory, avoids sync issues, and is more maintainable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nclass Circle {\n  double radius;\n\n  Circle(this.radius);\n\n  double get area => pi * radius * radius;\n  double get circumference => pi * 2.0 * radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Constraints in pubspec.yaml\nDESCRIPTION: Shows how to configure the SDK constraints in the `pubspec.yaml` file to enable sound null safety. It requires setting the lower bound of the SDK constraint to a language version of 2.12 or later.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Running Dart Pub Add Command\nDESCRIPTION: Demonstrates the basic usage of the `dart pub add` command to add dependencies to a Dart project. The command modifies the `pubspec.yaml` file by adding specified packages as dependencies and retrieves them. Options for specifying dev and override dependencies are also included.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub add [{dev|override}:]<package>[:descriptor] [[{dev|override}:]<package>[:descriptor] ...] [options]\n```\n\n----------------------------------------\n\nTITLE: Complex Switch Statement with Pattern Matching in Dart\nDESCRIPTION: Shows a switch statement using logical-or patterns and relational operators for tokenization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nswitch (charCode) {\n  case slash || star || plus || minus:\n    token = operator(charCode);\n  case comma || semicolon:\n    token = punctuation(charCode);\n  case >= digit0 && <= digit9:\n    token = number();\n  default:\n    throw FormatException('Invalid');\n}\n```\n\n----------------------------------------\n\nTITLE: Special Stream Members in Dart\nDESCRIPTION: This code presents specialized stream members for error handling, timeouts, and stream transformation. `handleError` allows handling errors within the stream, `timeout` sets a time limit for stream events, and `transform` allows applying a `StreamTransformer` to modify the stream's data.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"Stream<T> handleError(Function onError, {bool Function(dynamic error)? test});\nStream<T> timeout(\n  Duration timeLimit, {\n  void Function(EventSink<T> sink)? onTimeout,\n});\nStream<S> transform<S>(StreamTransformer<T, S> streamTransformer);\"\n```\n\n----------------------------------------\n\nTITLE: Constant Pattern Example in Dart\nDESCRIPTION: Shows basic constant pattern matching in a switch statement.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nswitch (number) {\n  // Matches if 1 == number.\n  case 1: // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Map Pattern Matching in Dart\nDESCRIPTION: Demonstrates map pattern matching which can throw StateError when attempting to match non-existent keys.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal {'foo': int? foo} = {};\n```\n\n----------------------------------------\n\nTITLE: Async Function Declaration for Login Reporting\nDESCRIPTION: Shows the declaration of an asynchronous function named `reportLogins` to report the number of user logins. It includes a placeholder for the function's implementation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"reportLogins() {}\"\n```\n\n----------------------------------------\n\nTITLE: Runtime Behavior of Extension Types in Dart\nDESCRIPTION: This example shows the behavior of an extension type `NumberE` in runtime scenarios. It highlights that the runtime type of an extension type instance matches its representation type (`int`), demonstrating the type checks and method usage on runtime, which work on the representation type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var n = NumberE(1);\n\n  // Run-time type of 'n' is representation type 'int'.\n  if (n is int) print(n.value); // Prints 1.\n\n  // Can use 'int' methods on 'n' at run time.\n  if (n case int x) print(x.toRadixString(10)); // Prints 1.\n  switch (n) {\n    case int(:var isEven): print(\"$n (${isEven ? \"even\" : \"odd\"})\"); // Prints 1 (odd).\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Record Fields in Dart\nDESCRIPTION: Demonstrates destructuring of fields from a record returned by a function into local variables using Dart's pattern matching syntax. It simplifies the extraction of multiple values from a function call. Requires familiarity with Dart language patterns and variable declarations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar (name, age) = userInfo(json);\n```\n\n----------------------------------------\n\nTITLE: Using Dart Tool for Pub Commands\nDESCRIPTION: This snippet showcases how to use the 'dart' tool as a replacement for the 'pub' command for package management tasks.  It demonstrates getting dependencies, checking for outdated packages, and upgrading packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-tool.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\n$ dart pub outdated\n$ dart pub upgrade\n```\n\n----------------------------------------\n\nTITLE: Repeated Element Building with Collection For\nDESCRIPTION: Utilizes the 'collection for' operator introduced in Dart 2.3 for generating repeated UI elements based on iterable data. The example dynamically creates UI components for each section in a collection.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Column(children: [\n    Text(mainText),\n    for (var section in sections)\n      HeadingAction(section.heading),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Private Final Field Promotion in Dart 3.2\nDESCRIPTION: This Dart code snippet demonstrates private final field promotion, a feature enhanced in Dart 3.2. It shows how private final fields can be promoted to non-nullable types through null checks, improving type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Example {\n  final int? _privateField;\n\n  Example(this._privateField);\n\n  void f() {\n    if (_privateField != null) {\n      // _privateField has now been promoted; you can use it without\n      // null checking it.\n      int i = _privateField; // OK\n    }\n  }\n}\n\n// Private field promotions also work from outside of the class:\nvoid f(Example x) {\n  if (x._privateField != null) {\n    int i = x._privateField; // OK\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers with dart:math Library\nDESCRIPTION: This snippet illustrates the use of the Random class in dart:math to generate random numbers and booleans. A Random object is created, and its methods provide random values. Input parameters include optional seeds for the Random constructor. Outputs are random numbers or booleans. Note the constraint that the default Random class is not suitable for cryptographic uses.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-math.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar random = Random();\nrandom.nextDouble(); // Between 0.0 and 1.0: [0, 1)\nrandom.nextInt(10); // Between 0 and 9.\n```\n\n----------------------------------------\n\nTITLE: Writing Error Messages to Standard Error in Dart\nDESCRIPTION: This snippet shows how to write error messages to stderr when encountering a directory instead of a file in a 'dcat' application. It demonstrates proper error handling in CLI applications.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nif (await FileSystemEntity.isDirectory(path)) {\n  stderr.writeln('error: $path is a directory');\n} else {\n  exitCode = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract Method Implementation in Dart Mixin\nDESCRIPTION: Demonstrates using abstract methods in mixins to enforce implementation in subclasses. Shows pattern for defining dependent behaviors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/mixins.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nmixin Musician {\n  void playInstrument(String instrumentName); // Abstract method.\n\n  void playPiano() {\n    playInstrument('Piano');\n  }\n  void playFlute() {\n    playInstrument('Flute');\n  }\n}\n\nclass Virtuoso with Musician { \n\n  @override\n  void playInstrument(String instrumentName) { // Subclass must define.\n    print('Plays the $instrumentName beautifully');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Calling C Functions\nDESCRIPTION: Dart code demonstrating how to load a dynamic library and lookup a C function for calling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/c-interop.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal dylib = ffi.DynamicLibrary.open(libraryPath);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal HelloWorld hello = dylib\n    .lookup<ffi.NativeFunction<hello_world_func>>('hello_world')\n    .asFunction();\n```\n\nLANGUAGE: dart\nCODE:\n```\nhello();\n```\n\n----------------------------------------\n\nTITLE: String Literals in Dart\nDESCRIPTION: Examples of creating string literals using single and double quotes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar s1 = 'Single quotes work well for string literals.';\nvar s2 = \"Double quotes work just as well.\";\nvar s3 = 'It\\'s easy to escape the string delimiter.';\nvar s4 = \"It's even easier to use the other delimiter.\";\n```\n\n----------------------------------------\n\nTITLE: Working with Sets in Dart\nDESCRIPTION: Demonstrates creating and manipulating Sets including adding unique elements and using constructors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Create an empty set of strings.\nvar ingredients = <String>{};\n\n// Add new items to it.\ningredients.addAll(['gold', 'titanium', 'xenon']);\nassert(ingredients.length == 3);\n\n// Adding a duplicate item has no effect.\ningredients.add('gold');\nassert(ingredients.length == 3);\n\n// Remove an item from a set.\ningredients.remove('gold');\nassert(ingredients.length == 2);\n\n// You can also create sets using\n// one of the constructors.\nvar atomicNumbers = Set.from([79, 22, 54]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dart Project Dependencies\nDESCRIPTION: This command fetches all dependencies listed in the pubspec.yaml file for a Dart project. This step is crucial after any modification of the pubspec.yaml file to ensure the project dependencies are up to date.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\n```\n\n----------------------------------------\n\nTITLE: For Loop Wildcard Variable in Dart\nDESCRIPTION: Shows how to use a wildcard variable in a for-in loop when the loop variable is not needed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfor (var _ in list) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Map Keys in Dart\nDESCRIPTION: Demonstrates how to implement a custom hashCode getter and == operator for a Person class to be used as a map key. It uses Object.hash() for generating the hash code and compares firstName and lastName for equality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nclass Person {\n  final String firstName, lastName;\n\n  Person(this.firstName, this.lastName);\n\n  // Override hashCode using the static hashing methods\n  // provided by the `Object` class.\n  @override\n  int get hashCode => Object.hash(firstName, lastName);\n\n  // You should generally implement operator `==` if you\n  // override `hashCode`.\n  @override\n  bool operator ==(Object other) {\n    return other is Person &&\n        other.firstName == firstName &&\n        other.lastName == lastName;\n  }\n}\n\nvoid main() {\n  var p1 = Person('Bob', 'Smith');\n  var p2 = Person('Bob', 'Smith');\n  var p3 = 'not a person';\n  assert(p1.hashCode == p2.hashCode);\n  assert(p1 == p2);\n  assert(p1 != p3);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Package Import\nDESCRIPTION: Shows the correct way to import a library using package imports.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:my_package/api.dart';\n```\n\n----------------------------------------\n\nTITLE: Getting List of Enum Values in Dart\nDESCRIPTION: Demonstrates how to get a list of all enumerated values using the values constant.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nList<Color> colors = Color.values;\nassert(colors[2] == Color.blue);\n```\n\n----------------------------------------\n\nTITLE: Using Non-null Assertion with HttpResponse Class\nDESCRIPTION: Demonstrates incorrect implementation of nullable error field in HttpResponse class, showing compile error when accessing nullable field without proper checking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nclass HttpResponse {\n  final int code;\n  final String? error;\n\n  HttpResponse.ok()\n      : code = 200,\n        error = null;\n  HttpResponse.notFound()\n      : code = 404,\n        error = 'Not found';\n\n  @override\n  String toString() {\n    if (code == 200) return 'OK';\n    return 'ERROR $code ${error.toUpperCase()}';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async Function Declaration\nDESCRIPTION: Demonstrates how to declare an asynchronous function in Dart using the `async` keyword, with a placeholder for implementation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"Future<String> reportUserRole() async {\\n  // TODO: Implement the reportUserRole function here.\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Future.then() Instead of Completer in Dart\nDESCRIPTION: This example demonstrates a better approach to producing a Future by using the Future.then() method instead of a Completer. This pattern is clearer and makes error handling easier.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_49\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> fileContainsBear(String path) {\n  return File(path).readAsString().then((contents) {\n    return contents.contains('bear');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Literals Usage in Dart\nDESCRIPTION: Shows the recommended way to create collections using literal syntax instead of constructors, including advanced features like spread operators and control flow elements.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar arguments = [\n  ...options,\n  command,\n  ...?modeFlags,\n  for (var path in filePaths)\n    if (path.endsWith('.dart')) path.replaceAll('.dart', '.js'),\n];\n```\n\n----------------------------------------\n\nTITLE: Complete JS Interop Mocking Example Using JSExport and createJSInteropWrapper\nDESCRIPTION: A comprehensive example showing how to create a mock implementation of a Counter interface using @JSExport annotation and createJSInteropWrapper. Demonstrates method renaming and behavior verification.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/mock.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:js_interop';\n\nimport 'package:expect/minitest.dart';\n\n// The Dart class must have `@JSExport` on it or at least one of its instance\n// members.\n@JSExport()\nclass FakeCounter {\n  int value = 0;\n  @JSExport('increment')\n  void renamedIncrement() {\n    value++;\n  }\n  void decrement() {\n    value--;\n  }\n}\n\nextension type Counter(JSObject _) implements JSObject {\n  external int value;\n  external void increment();\n  void decrement() {\n    value -= 2;\n  }\n}\n\nvoid main() {\n  var fakeCounter = FakeCounter();\n  // Returns a JS object whose properties call the relevant instance members in\n  // `fakeCounter`.\n  var counter = createJSInteropWrapper<FakeCounter>(fakeCounter) as Counter;\n  // Calls `FakeCounter.value`.\n  expect(counter.value, 0);\n  // `FakeCounter.renamedIncrement` is renamed to `increment`, so it gets\n  // called.\n  counter.increment();\n  expect(counter.value, 1);\n  expect(fakeCounter.value, 1);\n   // Changes in the fake affect the wrapper and vice-versa.\n  fakeCounter.value = 0;\n  expect(counter.value, 0);\n  counter.decrement();\n  // Because `Counter.decrement` is non-`external`, we never called\n  // `FakeCounter.decrement`.\n  expect(counter.value, -2);\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Sets in Dart\nDESCRIPTION: Shows how to create and manipulate Sets in Dart, including literal syntax and methods for adding elements.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/collections.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar names = <String>{};\n// Set<String> names = {}; // This works, too.\n// var names = {}; // Creates a map, not a set.\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar elements = <String>{};\nelements.add('fluorine');\nelements.addAll(halogens);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal constantSet = const {\n  'fluorine',\n  'chlorine',\n  'bromine',\n  'iodine',\n  'astatine',\n};\n// constantSet.add('helium'); // This line will cause an error.\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Counter Stream in Dart\nDESCRIPTION: Creates a stream that emits an increasing counter every second for 15 iterations using Stream.periodic constructor.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar counterStream = Stream<int>.periodic(\n  const Duration(seconds: 1),\n  (x) => x,\n).take(15);\n```\n\n----------------------------------------\n\nTITLE: Running Dart Migration Tool\nDESCRIPTION: Command to start the Dart migration tool for converting code to null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ dart migrate\n```\n\n----------------------------------------\n\nTITLE: Using Trigonometry Functions in dart:math Library\nDESCRIPTION: This code demonstrates the use of trigonometric functions like cosine and sine from the dart:math library. It requires importing dart:math. The main input is angles in degrees, which are converted to radians for calculation, and the outputs are the cosine and sine values. Note that the functions operate in radians.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-math.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Cosine\nassert(cos(pi) == -1.0);\n\n// Sine\nvar degrees = 30;\nvar radians = degrees * (pi / 180);\n// radians is now 0.52359.\nvar sinOf30degrees = sin(radians);\n// sin 30\\u00b0 = 0.5\nassert((sinOf30degrees - 0.5).abs() < 0.01);\n```\n\n----------------------------------------\n\nTITLE: JSON Reading and Parsing Worker Function\nDESCRIPTION: Implementation of a worker function that reads JSON from a file and parses it into a Map. This function runs in a separate isolate.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Map<String, dynamic>> _readAndParseJson() async {\n  final fileData = await File(filename).readAsString();\n  final jsonData = jsonDecode(fileData) as Map<String, dynamic>;\n  return jsonData;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Null Reference Error in Dart Without Null Safety\nDESCRIPTION: This code snippet demonstrates how a null reference error occurs in Dart without null safety. The function 'isEmpty' attempts to check a string's length, but when called with null, it throws a NoSuchMethodError at runtime.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Without null safety:\nbool isEmpty(String string) => string.length == 0;\n\nvoid main() {\n  isEmpty(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Iterable to List in Dart\nDESCRIPTION: Shows how to force immediate evaluation of map() by converting the result to a List using toList().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nvar loudTeas = teas.map((tea) => tea.toUpperCase()).toList();\n```\n\n----------------------------------------\n\nTITLE: Named Parameters with Default Values\nDESCRIPTION: Demonstrates defining named parameters with default values in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid enableFlags({bool bold = false, bool hidden = false}) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Final Fields with Distance Calculation\nDESCRIPTION: Demonstrates initializing multiple final fields including a computed value in the constructor initializer list.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nclass Point {\n  final double x;\n  final double y;\n  final double distanceFromOrigin;\n\n  Point(double x, double y)\n    : x = x,\n      y = y,\n      distanceFromOrigin = sqrt(x * x + y * y);\n}\n\nvoid main() {\n  var p = Point(2, 3);\n  print(p.distanceFromOrigin);\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Type Safety in Dart\nDESCRIPTION: This snippet shows a type mismatch error where a dynamic type is being assigned to a List<String> parameter.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/analysis/analyzer-results-beta.txt#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nlib/strict_modes.dart:15:7 - The argument type 'dynamic' can't be assigned to the parameter type 'List<String>'.\n```\n\n----------------------------------------\n\nTITLE: Arrow Syntax and Anonymous Functions in Dart\nDESCRIPTION: Shows the use of arrow syntax for single-expression functions and anonymous functions as arguments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nflybyObjects.where((name) => name.contains('turn')).forEach(print);\n```\n\n----------------------------------------\n\nTITLE: Local Variable Type Inference Success Example in Dart\nDESCRIPTION: Correctly infers a variable's type as num when explicitly declaring its type, allowing for both int and double assignments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nnum y = 3; // A num can be double or int.\ny = 4.0;\n```\n\n----------------------------------------\n\nTITLE: Creating a Rot Codec with Encoder and Decoder in Dart\nDESCRIPTION: Implements a Codec class for Rotating bytes using a defined key. The Rot class has methods for encoding and decoding lists of integers by calling the RotConverter, allowing reversible transformations. Critical inputs include byte lists and encryption keys, providing encrypted or decrypted byte lists as outputs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass Rot extends Codec<List<int>, List<int>> {\n  final _key;\n  const Rot(this._key);\n\n  List<int> encode(List<int> data, { int key }) {\n    if (key == null) key = this._key;\n    return new RotConverter(key).convert(data);\n  }\n\n  List<int> decode(List<int> data, { int key }) {\n    if (key == null) key = this._key;\n    return new RotConverter(-key).convert(data);\n  }\n\n  RotConverter get encoder => new RotConverter(_key);\n  RotConverter get decoder => new RotConverter(-_key);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonItem Record Type with Typedef in Dart\nDESCRIPTION: This snippet demonstrates how to define a record type using a typedef in Dart. It creates a ButtonItem type with label, icon, and onPressed properties.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\ntypedef ButtonItem = ({String label, Icon icon, void Function()? onPressed});\nfinal List<ButtonItem> buttons = [\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Const Usage in Dart\nDESCRIPTION: Using const with type checks, casts, collection if, and spread operators.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nconst Object i = 3; // Where i is a const Object with an int value...\nconst list = [i as int]; // Use a typecast.\nconst map = {if (i is int) i: 'int'}; // Use is and collection if.\nconst set = {if (list is List<int>) ...list}; // ...and a spread.\n```\n\n----------------------------------------\n\nTITLE: Do-While Loop Implementation\nDESCRIPTION: Demonstrates do-while loop that evaluates condition after execution\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ndo {\n  printLine();\n} while (!atEndOfPage());\n```\n\n----------------------------------------\n\nTITLE: Stream Usage Example\nDESCRIPTION: Demonstrates how to consume the timed counter stream by listening to its events.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar counterStream = timedCounter(const Duration(seconds: 1), 15);\ncounterStream.listen(print); // Print an integer every second, 15 times.\n```\n\n----------------------------------------\n\nTITLE: Activating webdev Globally via Dart Pub\nDESCRIPTION: This command globally activates the webdev tool using Dart pub, allowing users to access webdev commands without further configuration. It requires Dart SDK to be installed and a network connection to retrieve the webdev package.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub global activate webdev\n```\n\n----------------------------------------\n\nTITLE: Modifying CSS Classes in Dart\nDESCRIPTION: Add and remove CSS classes from DOM elements using the classes List property in dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar elem = querySelector('#message')!;\nelem.classes.add('warning');\n```\n\n----------------------------------------\n\nTITLE: FFigen Interface Filtering Configuration\nDESCRIPTION: YAML configuration to filter specific Objective-C interfaces for binding generation\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  exclude-all-by-default: true\n  objc-interfaces:\n    include:\n      - 'AVAudioPlayer'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Publishing to pub.dev\nDESCRIPTION: Configures a GitHub Actions workflow to automate package publishing using a reusable workflow from dart-lang. Supports OIDC authentication and tag-based publishing triggers.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish to pub.dev\n\non:\n  push:\n    tags:\n      - 'v[0-9]+.[0-9]+.[0-9]+'\n\njobs:\n  publish:\n    permissions:\n      id-token: write\n    uses: dart-lang/setup-dart/.github/workflows/publish.yml@v1\n```\n\n----------------------------------------\n\nTITLE: Logical AND Pattern Example in Dart\nDESCRIPTION: Shows incorrect usage of logical AND pattern where both subpatterns attempt to bind the same variable 'b', resulting in an error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nswitch ((1, 2)) {\n  // Error, both subpatterns attempt to bind 'b'.\n  case (var a, var b) && (var b, var c): // ...\n}\n```\n\n----------------------------------------\n\nTITLE: List Pattern Matching in Dart\nDESCRIPTION: Demonstrates how to use list patterns to match and destructure List values. Shows matching against constant subpatterns using switch case.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nconst a = 'a';\nconst b = 'b';\nswitch (obj) {\n  // List pattern [a, b] matches obj first if obj is a list with two fields,\n  // then if its fields match the constant subpatterns 'a' and 'b'.\n  case [a, b]:\n    print('$a, $b');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Late Modifier in Coffee Class\nDESCRIPTION: Shows how to use the late modifier to handle delayed initialization while maintaining non-nullable type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nclass Coffee {\n  late String _temperature;\n\n  void heat() { _temperature = 'hot'; }\n  void chill() { _temperature = 'iced'; }\n\n  String serve() => _temperature + ' coffee';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Syntax for Getter-Setter Pairs in Dart\nDESCRIPTION: Shows how to use arrow syntax for both getters and setters when they form a matching pair. This is particularly idiomatic when the setter is small and corresponds to a getter that also uses arrow syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nnum get x => center.x;\nset x(num value) => center = Point(value, center.y);\n```\n\n----------------------------------------\n\nTITLE: Reading and Decoding a File in Dart\nDESCRIPTION: This example demonstrates reading a file, decoding its contents from UTF-8, splitting it into lines, and filtering out lines that start with '#'. It uses streams and transformers to process the file contents efficiently and asynchronously. It leverages `utf8.decoder` and `LineSplitter` for decoding and line splitting, respectively.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"import 'dart:convert';\nimport 'dart:io';\n\nvoid main(List<String> args) async {\n  var file = File(args[0]);\n  var lines = utf8.decoder\n      .bind(file.openRead())\n      .transform(const LineSplitter());\n  await for (final line in lines) {\n    if (!line.startsWith('#')) print(line);\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Arrow Notation for Anonymous Functions\nDESCRIPTION: Shortened version using arrow notation for single-expression anonymous functions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar uppercaseList = list.map((item) => item.toUpperCase()).toList();\nuppercaseList.forEach((item) => print('$item: ${item.length}'));\n```\n\n----------------------------------------\n\nTITLE: Specifying Dev Dependencies with Tight Version Constraints\nDESCRIPTION: Demonstrates best practices for specifying dev dependencies with tighter version constraints to ensure using the latest stable versions of development tools.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  build_runner: ^2.4.13\n  lints: ^2.1.1\n  test: ^1.25.8\n```\n\n----------------------------------------\n\nTITLE: Stream Filtering and Transformation Methods in Dart\nDESCRIPTION: Demonstrates various stream transformation methods including where(), expand(), and take().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n.where((int x) => x.isEven)\n.expand((var x) => [x, x])\n.take(5)\n```\n\n----------------------------------------\n\nTITLE: Accessing environment declarations for logging in Dart\nDESCRIPTION: Demonstrates how to access the value of an environment declaration named 'DEBUG' within a Dart function to conditionally log a message. The `bool.fromEnvironment` constructor is used with a default value of `false` to determine whether logging should be enabled.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/core/environment-declarations.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"void log(String message) {\\n  // Log the debug message if the environment declaration 'DEBUG' is `true`.\\n  // If there was no value specified, do not log.\\n  if (const bool.fromEnvironment('DEBUG', defaultValue: false)) {\\n    print('Debug: $message');\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Set Membership Operations in Dart\nDESCRIPTION: Shows how to check for element membership in Sets using contains() and containsAll() methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar ingredients = Set<String>();\ningredients.addAll(['gold', 'titanium', 'xenon']);\n\n// Check whether an item is in the set.\nassert(ingredients.contains('titanium'));\n\n// Check whether all the items are in the set.\nassert(ingredients.containsAll(['titanium', 'xenon']));\n```\n\n----------------------------------------\n\nTITLE: Basic Extension Type Example with IdNumber\nDESCRIPTION: Example showing how to wrap the int type with an extension type that restricts operations to those valid for ID numbers.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nextension type IdNumber(int id) {\n  operator <(IdNumber other) => id < other.id;\n}\n\nvoid main() {\n  int myUnsafeId = 42424242;\n  myUnsafeId = myUnsafeId + 10;\n\n  var safeId = IdNumber(42424242);\n  safeId + 10;\n  myUnsafeId = safeId;\n  myUnsafeId = safeId as int;\n  safeId < IdNumber(42424241);\n}\n```\n\n----------------------------------------\n\nTITLE: For-in Loop with Objects\nDESCRIPTION: Demonstrates iterating over a collection using for-in loop syntax\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfor (final candidate in candidates) {\n  candidate.interview();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Command-Line App with DartPad\nDESCRIPTION: This snippet demonstrates how to create a simple command-line application using DartPad. Dependencies include having access to DartPad which provides core library support. Key parameter is the Dart `main()` function which utilizes string manipulation and console output. Inputs include a hardcoded 'hello' string, which is split into individual characters, and each character is output to the console. The code showcases basic usage of Dart in an online environment.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dartpad/index.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nfor (final char in 'hello'.split('')) {\n  print(char);\n}\n```\n\n----------------------------------------\n\nTITLE: Unnamed Extension Implementation in Dart\nDESCRIPTION: Demonstrates how to create an unnamed extension that's only visible in its library.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension on String {\n  bool get isBlank => trim().isEmpty;\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous File Reading in Dart\nDESCRIPTION: Example of blocking synchronous code that reads and processes JSON file data.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst String filename = 'with_keys.json';\n\nvoid main() {\n  // Read some data.\n  final fileData = _readFileSync();\n  final jsonData = jsonDecode(fileData);\n\n  // Use that data.\n  print('Number of JSON keys: ${jsonData.length}');\n}\n\nString _readFileSync() {\n  final file = File(filename);\n  final contents = file.readAsStringSync();\n  return contents.trim();\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Across Zone Boundaries - Dart\nDESCRIPTION: Explains how errors in a sequence of future transformations are confined within error zones using runZonedGuarded. Demonstrates that errors on Future chains don't cross error zone boundaries unless a custom error handler allows it. The code involves Futures with custom handlers to show the error propagation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar f = new Future.error(499);\\nf = f.whenComplete(() { print('Outside of zones'); });\\nrunZoned(() {\\n  f = f.whenComplete(() { print('Inside non-error zone'); });\\n});\\nrunZonedGuarded(() {\\n  f = f.whenComplete(() { print('Inside error zone (not called)'); });\\n}, (error) { print(error); });\n```\n\n----------------------------------------\n\nTITLE: Dart Type Declarations\nDESCRIPTION: Examples of type declarations including Future, Stream and collection types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void>\nFutureOr<T>\nlate final\ndynamic\n```\n\n----------------------------------------\n\nTITLE: Records as Data Structures\nDESCRIPTION: Demonstrates using records in a list as simple data structures\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal buttons = [\n  (\n    label: \"Button I\",\n    icon: const Icon(Icons.upload_file),\n    onPressed: () => print(\"Action -> Button I\"),\n  ),\n  (\n    label: \"Button II\",\n    icon: const Icon(Icons.info),\n    onPressed: () => print(\"Action -> Button II\"),\n  )\n];\n```\n\n----------------------------------------\n\nTITLE: Importing dart:io Library in Dart\nDESCRIPTION: Shows how to import the dart:io library, which is required before using any of its functionality in Dart applications.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n```\n\n----------------------------------------\n\nTITLE: Max Function with Type Inference Using Bounds in Dart\nDESCRIPTION: An example that shows how the `max` function can leverage type bounds to correctly infer types for comparisons in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nX max<X extends Comparable<X>>(X x1, X x2) => x1.compareTo(x2) > 0 ? x1 : x2;\n\nvoid main() {\n  max(3, 7);\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Listen Method in Dart\nDESCRIPTION: This code snippet presents the `listen()` method of the Dart Stream API. This method allows you to start listening to a stream, providing callbacks for data events, error events, and stream completion. The `listen()` method returns a `StreamSubscription` object, which can be used to control the subscription (pause, resume, cancel).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/using-streams.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"StreamSubscription<T> listen(\n  void Function(T event)? onData, {\n  Function? onError,\n  void Function()? onDone,\n  bool? cancelOnError,\n});\"\n```\n\n----------------------------------------\n\nTITLE: Function Definition and Usage in Dart\nDESCRIPTION: Demonstrates function declaration with type specifications and recursive implementation of the Fibonacci sequence.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint fibonacci(int n) {\n  if (n == 0 || n == 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvar result = fibonacci(20);\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Checking Example\nDESCRIPTION: Shows how runtime type checking prevents invalid type casting operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  List<Animal> animals = <Dog>[Dog()];\n  List<Cat> cats = animals as List<Cat>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Element Attributes in Dart\nDESCRIPTION: Set arbitrary attributes on DOM elements using the attributes map in dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nelem.attributes['someAttribute'] = 'someValue';\n```\n\n----------------------------------------\n\nTITLE: Control Flow Based Variable Initialization in Dart\nDESCRIPTION: Example of initializing a variable based on control flow while maintaining null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nint lineCount;\n\nif (weLikeToCount) {\n  lineCount = countLines();\n} else {\n  lineCount = 0;\n}\n\nprint(lineCount);\n```\n\n----------------------------------------\n\nTITLE: Unsafe Nullable Type Conversion\nDESCRIPTION: This snippet illustrates a hypothetical scenario with unsound null safety where a nullable `String?` is passed to a function expecting a non-nullable `String`. This could lead to a runtime error if `maybeString` is null.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Hypothetical unsound null safety:\nvoid requireStringNotNull(String definitelyString) {\n  print(definitelyString.length);\n}\n\nvoid main() {\n  String? maybeString = null; // Or not!\n  requireStringNotNull(maybeString);\n}\n```\n\n----------------------------------------\n\nTITLE: Field Promotion Failures Due to Language Version\nDESCRIPTION: This snippet illustrates a case where field promotion fails due to the Dart language version being set below 3.2. The code attempts to promote a nullable field, which is only permissible in Dart 3.2 and above.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// @dart=3.1\n\nclass C {\n  final int? _i;\n  C(this._i);\n\n  void f() {\n    if (_i != null) {\n      int i = _i;  // ERROR\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Finally Clause in Dart Exception Handling\nDESCRIPTION: Demonstrates the use of finally clause for cleanup code that must run whether or not an exception occurs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/error-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  breedMoreLlamas();\n} finally {\n  // Always clean up, even if an exception is thrown.\n  cleanLlamaStalls();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  breedMoreLlamas();\n} catch (e) {\n  print('Error: $e'); // Handle the exception first.\n} finally {\n  cleanLlamaStalls(); // Then clean up.\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Throwing and Handling in Dart\nDESCRIPTION: Demonstrates throwing a state error and catching specific exceptions with try-catch block\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nif (astronauts == 0) {\n  throw StateError('No astronauts.');\n}\n\nFuture<void> describeFlybyObjects(List<String> flybyObjects) async {\n  try {\n    for (final object in flybyObjects) {\n      var description = await File('$object.txt').readAsString();\n      print(description);\n    }\n  } on IOException catch (e) {\n    print('Could not describe object: $e');\n  } finally {\n    flybyObjects.clear();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Package Import Ordering in Dart\nDESCRIPTION: Shows correct ordering of package imports before relative imports.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bar/bar.dart';\nimport 'package:foo/foo.dart';\n\nimport 'util.dart';\n```\n\n----------------------------------------\n\nTITLE: Dart Analyzer with Directory or File Argument\nDESCRIPTION: Shows how to specify a target directory or a single Dart file for static analysis. This allows focusing the analysis on specific parts of the project.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-analyze.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze [<DIRECTORY> | <DART_FILE>]\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Syntax for Simple Members in Dart\nDESCRIPTION: Demonstrates the use of arrow syntax (=>) for simple member definitions in Dart classes. This can make code more concise for straightforward methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nclass Rectangle {\n  final int width;\n  final int height;\n\n  Rectangle(this.width, this.height);\n\n  int get area => width * height;\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Strings in Dart\nDESCRIPTION: Example of creating a raw string that ignores escape sequences.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar s = r'In a raw string, not even \\n gets special treatment.';\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies in Pubspec - YAML\nDESCRIPTION: Shows how to declare dependencies within a pubspec.yaml file. This example lists the dependencies 'intl' and 'path' with specified versions hosted on pub.dev.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_app\n\ndependencies:\n  intl: ^0.20.0\n  path: ^1.9.1\n```\n\n----------------------------------------\n\nTITLE: Sample Analysis Options File in YAML\nDESCRIPTION: This snippet provides a sample analysis options file showcasing the structure and necessary entries to configure static analysis and linter rules in Dart codebases. The file helps maintain coding standards and proper error handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:lints/recommended.yaml\n\nanalyzer:\n  exclude: [build/**]\n  language:\n    strict-casts: true\n    strict-raw-types: true\n\nlinter:\n  rules:\n    - cancel_subscriptions\n```\n\n----------------------------------------\n\nTITLE: List Index Operations in Dart\nDESCRIPTION: Shows how to access list elements by index and find the position of items in a list using indexOf().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar fruits = ['apples', 'oranges'];\n\n// Access a list item by index.\nassert(fruits[0] == 'apples');\n\n// Find an item in a list.\nassert(fruits.indexOf('apples') == 0);\n```\n\n----------------------------------------\n\nTITLE: Object Cache Interface Implementation\nDESCRIPTION: Shows a basic non-generic cache interface implementation using Object type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nabstract class ObjectCache {\n  Object getByKey(String key);\n  void setByKey(String key, Object value);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Dependency Using Default Repository - YAML\nDESCRIPTION: This snippet demonstrates how to specify a simple dependency on the `transmogrify` package with version constraints using Dart's pubspec.yaml format. The dependency allows versions from 1.0.0 up to, but not including, 2.0.0.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  transmogrify: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Exporting Public API in Main Library File\nDESCRIPTION: Example showing how to export specific symbols from src files in the main library file using show keyword to control public API exposure.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nexport 'src/cascade.dart' show Cascade;\nexport 'src/handler.dart' show Handler;\nexport 'src/hijack_exception.dart' show HijackException;\nexport 'src/middleware.dart' show Middleware, createMiddleware;\nexport 'src/middleware/add_chunked_encoding.dart' show addChunkedEncoding;\nexport 'src/middleware/logger.dart' show logRequests;\nexport 'src/middleware_extensions.dart' show MiddlewareExtensions;\nexport 'src/pipeline.dart' show Pipeline;\nexport 'src/request.dart' show Request;\nexport 'src/response.dart' show Response;\nexport 'src/server.dart' show Server;\nexport 'src/server_handler.dart' show ServerHandler;\n```\n\n----------------------------------------\n\nTITLE: Null-Assert Pattern Match Example in Dart\nDESCRIPTION: Demonstrates using null-assert pattern in a switch statement to handle non-null values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nList<String?> row = ['user', null];\nswitch (row) {\n  case ['user', var name!]: // ...\n  // 'name' is a non-nullable string here.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Library from Own Package - Dart\nDESCRIPTION: Provides a method to import a library from within the same package, using the package identifier. Exemplifies with a hypothetical 'transmogrify' package structure.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:transmogrify/parser.dart';\n```\n\n----------------------------------------\n\nTITLE: Writing Documentation Comments in Dart\nDESCRIPTION: Illustrates documentation comments using /// or /** */ in Dart. These comments support references to classes, methods, and parameters using brackets, and are used by documentation generation tools.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/comments.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// A domesticated South American camelid (Lama glama).\n///\n/// Andean cultures have used llamas as meat and pack\n/// animals since pre-Hispanic times.\n///\n/// Just like any other animal, llamas need to eat,\n/// so don't forget to [feed] them some [Food].\nclass Llama {\n  String? name;\n\n  /// Feeds your llama [food].\n  ///\n  /// The typical llama eats one bale of hay per week.\n  void feed(Food food) {\n    // ...\n  }\n\n  /// Exercises your llama with an [activity] for\n  /// [timeLimit] minutes.\n  void exercise(Activity activity, int timeLimit) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CipherSink Abstract Class in Dart\nDESCRIPTION: This code defines an abstract class `CipherSink` that extends `ChunkedConversionSink`. It provides a default implementation of `addModifiable` that calls `add`. This interface generalizes the concept of a sink that can handle modifiable lists, enabling code reuse and improved performance.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CipherSink\n    extends ChunkedConversionSink<List<int>, List<int>> {\n  void addModifiable(List<int> data) { add(data); }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Field Destructuring in Records\nDESCRIPTION: Shows how to destructure records using named fields\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n({String name, int age}) userInfo(Map<String, dynamic> json)\n// ···\n// Destructures using a record pattern with named fields:\nfinal (:name, :age) = userInfo(json);\n```\n\n----------------------------------------\n\nTITLE: Importing dart:html Library in Dart\nDESCRIPTION: Import the dart:html library to use HTML manipulation functions in a Dart web app.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:html';\n```\n\n----------------------------------------\n\nTITLE: Map Entry Pattern Matching in For Loop\nDESCRIPTION: Demonstrates pattern matching and destructuring MapEntry objects in a for-in loop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, int> hist = {'a': 23, 'b': 100};\n\nfor (var MapEntry(key: key, value: count) in hist.entries) {\n  print('$key occurred $count times');\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Type Construction Examples\nDESCRIPTION: Shows how to use generic types with constructors in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar nameSet = Set<String>.of(names);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar views = SplayTreeMap<int, View>();\n```\n\n----------------------------------------\n\nTITLE: Using Bang Operator for Null Safety\nDESCRIPTION: Demonstrates the use of bang operator (!) as a shorthand for casting nullable types to non-nullable types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nString toString() {\n  if (code == 200) return 'OK';\n  return 'ERROR $code ${error!.toUpperCase()}';\n}\n```\n\n----------------------------------------\n\nTITLE: HoneyBadger Subclass Implementation\nDESCRIPTION: Shows valid method overriding with proper return types in a subclass.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HoneyBadger extends Animal {\n  @override\n  void chase(Object a) {\n     ...\n  }\n\n  @override\n  Animal get parent => ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Fixed-Length Dart List\nDESCRIPTION: Demonstrates how to use List.generate constructor to create a fixed-length, non-nullable list with distinct elements.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n_jellyPoints = List.generate(jellyMax, (_) => Vec2D(), growable: false);\n```\n\n----------------------------------------\n\nTITLE: Checking Dependencies with Pub Deps\nDESCRIPTION: Example output of dart pub deps command showing package dependency relationships\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-outdated.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub deps -s list\n...\ndependencies:\n...\n- terminal_tools 0.1.0\n  - path 1.6.2\n  - meta 1.1.6\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Element ID in Dart\nDESCRIPTION: Dynamically set the ID of a DOM element using the id property in dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar message = DivElement();\nmessage.id = 'message2';\nmessage.text = 'Please subscribe to the Dart mailing list';\n```\n\n----------------------------------------\n\nTITLE: Collection Literals with Generic Types\nDESCRIPTION: Examples of using parameterized literals with Lists, Sets, and Maps in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar names = <String>['Seth', 'Kathy', 'Lars'];\nvar uniqueNames = <String>{'Seth', 'Kathy', 'Lars'};\nvar pages = <String, String>{\n  'index.html': 'Homepage',\n  'robots.txt': 'Hints for web robots',\n  'humans.txt': 'We are people, not machines',\n};\n```\n\n----------------------------------------\n\nTITLE: Chunked Conversion Technique in Dart\nDESCRIPTION: This example illustrates a chunked conversion process in Dart, showcasing usage with the HtmlEscape and LineSplitter classes. The snippet highlights how data is transformed via streams using the transform method, indicating the synchronous and asynchronous behaviors of the converters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\nimport 'dart:async';\n\nvoid main() async {\n  // HtmlEscape synchronously converts Strings to Strings.\n  print(const HtmlEscape().convert(\"foo\")); // \"foo\".\n  // When used in a chunked way it converts from Strings\n  // to Strings.\n  var stream = new Stream.fromIterable([\"f\", \"o\", \"o\"]);\n  print(await (stream.transform(const HtmlEscape())\n                     .toList()));    // [\"f\", \"o\", \"o\"].\n\n  // LineSplitter synchronously converts Strings to Lists of String.\n  print(const LineSplitter().convert(\"foo\\nbar\")); // [\"foo\", \"bar\"]\n  // However, asynchronously it converts from Strings to Strings (and\n  // not Lists of Strings).\n  var stream2 = new Stream.fromIterable([\"fo\", \"o\\nb\", \"ar\"]);\n  print(\"${await (stream2.transform(const LineSplitter())\n                          .toList())}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Variable with Null Safety Hint in Dart\nDESCRIPTION: This snippet demonstrates how to use a hint marker to prevent the migration tool from inferring a nullable type when assigning a value from a list. By adding a '/*!*/' marker, the developer indicates that the variable holds a non-nullable type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar zero = ints[0]/*!*/;\n```\n\n----------------------------------------\n\nTITLE: Applying Changes with Dart Fix\nDESCRIPTION: This snippet shows the command to apply proposed changes using the `--apply` flag with the `dart fix` command. It is useful for developers who want to automatically apply fixes that have been identified.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-fix.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart fix --apply\n```\n\n----------------------------------------\n\nTITLE: Compiling Dart to AOT Module using dart compile\nDESCRIPTION: Demonstrates the use of the 'aot-snapshot' subcommand to create an ahead-of-time (AOT) compiled module that can be executed with the Dart runtime. The command outputs an architecture-specific module.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile aot-snapshot bin/myapp.dart\nGenerated: /Users/me/myapp/bin/myapp.aot\n$ dartaotruntime bin/myapp.aot\n\n```\n\n----------------------------------------\n\nTITLE: Setting Inline Styles in Dart\nDESCRIPTION: Apply inline CSS styles directly to DOM elements using the style property in dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nmessage.style\n  ..fontWeight = 'bold'\n  ..fontSize = '3em';\n```\n\n----------------------------------------\n\nTITLE: Required Named Parameters\nDESCRIPTION: Shows how to declare required named parameters using the required keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nconst Scrollbar({super.key, required Widget child});\n```\n\n----------------------------------------\n\nTITLE: JsonCodec Example with Named Arguments\nDESCRIPTION: This snippet demonstrates how the JsonCodec class in Dart allows for additional configuration during the encoding and decoding process via named arguments. The snippet shows both the constructor and methods enabling customization of default behaviors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ndynamic decode(String source, {reviver(var key, var value)}) { … }\nString encode(Object value, {toEncodable(var object)}) { … }\n```\n\n----------------------------------------\n\nTITLE: Local Variable Wildcard Declaration in Dart\nDESCRIPTION: Demonstrates declaring local wildcard variables using the underscore (_) symbol. Multiple declarations can exist in the same scope without collision.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nmain() {\n  var _ = 1;\n  int _ = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving WebSocket Messages in Dart\nDESCRIPTION: Demonstrates how to listen for and handle incoming WebSocket messages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nws.onMessage.listen((MessageEvent e) {\n  print('Received message: ${e.data}');\n});\n```\n\n----------------------------------------\n\nTITLE: Inference Using Bounds in Dart\nDESCRIPTION: Demonstrates how Dart's type inference algorithm can utilize bounds to determine types for generics effectively, ensuring type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass A<X extends A<X>> {}\n\nclass B extends A<B> {}\n\nclass C extends B {}\n\nvoid f<X extends A<X>>(X x) {}\n\nvoid main() {\n  f(B()); // OK.\n  f(C()); // OK.\n  f<B>(C()); // OK.\n}\n```\n\n----------------------------------------\n\nTITLE: Converting ButtonItem Record to Extension Type in Dart\nDESCRIPTION: This snippet shows how to convert the ButtonItem record to an extension type. It maintains the same structure as the record and adds a getter method.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nextension type ButtonItem._(({String label, Icon icon, void Function()? onPressed}) _) {\n  String get label => _.label;\n  Icon get icon => _.icon;\n  void Function()? get onPressed => _.onPressed;\n  ButtonItem({required String label, required Icon icon, void Function()? onPressed})\n      : this._((label: label, icon: icon, onPressed: onPressed));\n  bool get hasOnpressed => _.onPressed != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Nullable Fields in Dart\nDESCRIPTION: Illustrates the challenges of working with nullable fields in Dart, particularly when type promotion is not possible. It shows an incorrect approach and suggests workarounds using null-assertion (!) and local variables.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety, incorrectly:\nclass Coffee {\n  String? _temperature;\n\n  void heat() { _temperature = 'hot'; }\n  void chill() { _temperature = 'iced'; }\n\n  void checkTemp() {\n    if (_temperature != null) {\n      print('Ready to serve ' + _temperature + '!');\n    }\n  }\n\n  String serve() => _temperature! + ' coffee';\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nvoid checkTemp() {\n  var temperature = _temperature;\n  if (temperature != null) {\n    print('Ready to serve ' + temperature + '!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying SDK Constraints in YAML\nDESCRIPTION: This snippet demonstrates how to set the minimum SDK version in the `pubspec.yaml` file to ensure compatibility with the super initializers feature which requires Dart 2.17. It helps in maintaining proper environment settings for Dart packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-fix.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: \">=2.17.0 <4.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Element Addition in Flutter\nDESCRIPTION: Illustrates Dart 2.3's 'collection if' operator for conditional UI element rendering in Flutter. This feature supports conditional element inclusions based on dynamic application state.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Column(children: [\n    Text(mainText),\n    if (page != pages.last)\n      FlatButton(child: Text('Next')),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Objective-C Interface Header\nDESCRIPTION: Shows the automatically generated Objective-C header interface for the Swift class, including method and property declarations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\nSWIFT_CLASS(\"_TtC12swift_module10SwiftClass\")\n@interface SwiftClass : NSObject\n- (NSString * _Nonnull)sayHello SWIFT_WARN_UNUSED_RESULT;\n@property (nonatomic) NSInteger someField;\n- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;\n@end\n```\n\n----------------------------------------\n\nTITLE: Parameterized Type Alias in Dart\nDESCRIPTION: Shows how to create a generic type alias with type parameters, demonstrating a more concise way to declare complex types like Map with nested Lists.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/typedefs.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntypedef ListMapper<X> = Map<X, List<X>>;\nMap<String, List<String>> m1 = {}; // Verbose.\nListMapper<String> m2 = {}; // Same thing but shorter and clearer.\n```\n\n----------------------------------------\n\nTITLE: Running Component Tests with build_runner\nDESCRIPTION: This command executes Dart component tests using build_runner, supporting various test configurations through a platform flag. The command requires a dev_dependency on build_test in the pubspec.yaml file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ dart run build_runner test [build_runner options] -- -p <platform> [test options]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart run build_runner test -- -p chrome\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart run build_runner test -h\n```\n\n----------------------------------------\n\nTITLE: Function Declarations in Dart\nDESCRIPTION: Shows the preferred way to declare local functions using function declarations instead of variables.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  void localFunction() {\n    ...\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var localFunction = () {\n    ...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Class Members in Dart\nDESCRIPTION: Demonstrates how to access instance variables and methods using dot notation and safe member access with ?.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar p = Point(2, 2);\n\n// Get the value of y.\nassert(p.y == 2);\n\n// Invoke distanceTo() on p.\ndouble distance = p.distanceTo(Point(4, 4));\n```\n\n----------------------------------------\n\nTITLE: Constant Constructors in Dart\nDESCRIPTION: Illustrates the use of constant constructors to create compile-time constants and demonstrates instance canonicalization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar p = const ImmutablePoint(2, 2);\n\nvar a = const ImmutablePoint(1, 1);\nvar b = const ImmutablePoint(1, 1);\n\nassert(identical(a, b)); // They are the same instance!\n```\n\n----------------------------------------\n\nTITLE: Creating New Package via Console Command\nDESCRIPTION: Command to create initial directory structure for a new Dart package using dart create command with package template.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart create -t package <PACKAGE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Encoding UTF-8 in Dart\nDESCRIPTION: Demonstrates encoding a Dart string into UTF-8 encoded bytes using utf8.encode(). Includes verification against expected byte values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-convert.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nUint8List encoded = utf8.encode('Îñţérñåţîöñåļîžåţîờñ');\n\nassert(encoded.length == utf8Bytes.length);\nfor (int i = 0; i < encoded.length; i++) {\n  assert(encoded[i] == utf8Bytes[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a package dependency\nDESCRIPTION: Example of how to import a package dependency after running dart pub get.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-get.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\n```\n\n----------------------------------------\n\nTITLE: Updated Conditional Imports for Web Detection in Dart\nDESCRIPTION: Shows the proper way to conditionally import implementations based on platform. This example uses dart.library.js_interop instead of dart.library.html to detect web platform support, which is important for Wasm compatibility.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nexport 'src/hw_none.dart' // Stub implementation\n    if (dart.library.io) 'src/hw_io.dart' // dart:io implementation\n    if (dart.library.js_interop) 'src/hw_web.dart'; // package:web implementation\n```\n\n----------------------------------------\n\nTITLE: Extension Method Implementation with Multiple Methods in Dart\nDESCRIPTION: Shows how to implement an extension with multiple parsing methods on String.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nextension NumberParsing on String {\n  int parseInt() {\n    return int.parse(this);\n  }\n\n  double parseDouble() {\n    return double.parse(this);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Type Promotion Pattern in Dart\nDESCRIPTION: Shows an alternative way to handle null checks using early returns, demonstrating Dart's smart flow analysis.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nString makeCommand(String executable, [List<String>? arguments]) {\n  var result = executable;\n  if (arguments == null) return result;\n  return result + ' ' + arguments.join(' ');\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Implicit Cast Failures in Dart\nDESCRIPTION: This code sample shows an example of how the analyzer flags an implicit cast from dynamic to a specific type, which can lead to runtime errors, demonstrating the necessity of stricter type checks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid foo(List<String> lines) {\n  ...\n}\n\nvoid bar(String jsonText) {\n  foo([!jsonDecode(jsonText)!]); // Implicit cast\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nerror - The argument type 'dynamic' can't be assigned to the parameter type 'List<String>'. - argument_type_not_assignable\n```\n\n----------------------------------------\n\nTITLE: Importing Package Libraries\nDESCRIPTION: Demonstrates how to import a library from another package using the package: directive.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:utilities/utilities.dart';\n```\n\n----------------------------------------\n\nTITLE: Lazy Initialization with Late Modifier\nDESCRIPTION: Demonstrates lazy initialization using late modifier with an initializer expression.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nclass Weather {\n  late int _temperature = _readThermometer();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Linter Rules in YAML for Dart Fix\nDESCRIPTION: This snippet illustrates how to configure the `analysis_options.yaml` file to enable the `use_super_parameters` lint rule, which allows the `dart fix` command to apply fixes related to super initializers introduced in Dart 2.17.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-fix.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlinter:\n  rules:\n    - use_super_parameters\n```\n\n----------------------------------------\n\nTITLE: Identifier Pattern Example in Dart\nDESCRIPTION: Shows how identifier patterns are used in matching context with named constants.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nconst c = 1;\nswitch (2) {\n  case c:\n    print('match $c');\n  default:\n    print('no match'); // Prints \"no match\".\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Dependencies\nDESCRIPTION: Illustrates the use of `dart pub add` to include packages as dev dependencies using the `dev:` prefix or the `--dev` option, which modifies the `pubspec.yaml` for development needs without affecting regular dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add dev:foo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add dev:foo:^2.0.0\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add foo dev:bar\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add --dev foo\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Members\nDESCRIPTION: Demonstrates how to access members of an enum value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nprint(Vehicle.car.carbonFootprint);\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Elements in Dart\nDESCRIPTION: Create new DOM elements programmatically using dart:html constructors or by parsing HTML strings.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar elem = ParagraphElement();\nelem.text = 'Creating is easy!';\n\nvar elem2 = Element.html('<p>Creating <em>is</em> easy!</p>');\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Exercise in Dart\nDESCRIPTION: Function that takes two integers and returns them as a space-separated string. Demonstrates string interpolation using the $ operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nString stringify(int x, int y) {\n  TODO('Return a formatted string here');\n}\n\n// Tests your solution (Don't edit!):\nvoid main() {\n  assert(stringify(2, 3) == '2 3',\n      \"Your stringify method returned '${stringify(2, 3)}' instead of '2 3'\");\n  print('Success!');\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Minor Version Bump with Dart Pub\nDESCRIPTION: This example showcases the operation of bumping the version number from 1.0.0 to 1.1.0 using the 'minor' subcommand. It highlights the importance of updating the CHANGELOG before publishing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-bump.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub bump minor\n  Updating version from 1.0.0 to 1.1.0\n  \n  Diff:\n  - version: 1.0.0\n  + version: 1.1.0\n  \n  Remember to update `CHANGELOG.md` before publishing.\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with Constructors in Dart\nDESCRIPTION: Shows different ways to create objects using constructors, including named constructors and the optional new keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/classes.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar p1 = Point(2, 2);\nvar p2 = Point.fromJson({'x': 1, 'y': 2});\n```\n\n----------------------------------------\n\nTITLE: Avoiding Redundant Use of 'const' in Dart\nDESCRIPTION: Demonstrates that the 'const' keyword can be redundant in contexts where expressions must be constant.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nconst primaryColors = [\n  Color('red', [255, 0, 0]),\n  Color('green', [0, 255, 0]),\n  Color('blue', [0, 0, 255]),\n];\n```\n\nLANGUAGE: dart\nCODE:\n```\nconst primaryColors = [!const!] [\n  [!const!] Color('red', [!const!] [255, 0, 0]),\n  [!const!] Color('green', [!const!] [0, 255, 0]),\n  [!const!] Color('blue', [!const!] [0, 0, 255]),\n];\n```\n\n----------------------------------------\n\nTITLE: Modifying Anchor Element href in Dart\nDESCRIPTION: Change the URL of an anchor element by modifying its href property using dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar anchor = querySelector('#example') as AnchorElement;\nanchor.href = 'https://dart.dev';\n```\n\n----------------------------------------\n\nTITLE: Digit Separators in Dart Numbers\nDESCRIPTION: Examples of using underscores as digit separators for improved readability of number literals.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar n1 = 1_000_000;\nvar n2 = 0.000_000_000_01;\nvar n3 = 0x00_14_22_01_23_45; // MAC address\nvar n4 = 555_123_4567; // US Phone number\nvar n5 = 100__000_000__000_000; // one hundred million million!\n```\n\n----------------------------------------\n\nTITLE: Using async/await for Asynchronous Operations in Dart\nDESCRIPTION: Demonstrates the preferred use of async/await syntax for handling asynchronous operations in Dart. This approach is more readable than using raw Futures.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<void> fetchUserData() async {\n  var userData = await fetchFromDatabase();\n  print(userData);\n}\n```\n\n----------------------------------------\n\nTITLE: Serving with Custom Port Configuration Using webdev\nDESCRIPTION: This command configures the webdev serve command to serve different directories on custom ports. It is useful for distinguishing between application and test servers with specific port assignments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ webdev serve web test:8083 # App: 8080; tests: 8083\n```\n\n----------------------------------------\n\nTITLE: Extending Interface with Transparent Extension Type in Dart\nDESCRIPTION: This Dart snippet demonstrates how to create a transparent extension type, `NumberT`, which implements `int`. This allows invoking all members of the `int` type while providing additional methods, like `i`. It shows the usage of the extension type `NumberT` in various operations with integers, highlighting type compatibility and limitations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nextension type NumberT(int value) \n  implements int {\n  // Doesn't explicitly declare any members of 'int'.\n  NumberT get i => this;\n}\n\nvoid main () {\n  // All OK: Transparency allows invoking `int` members on the extension type:\n  var v1 = NumberT(1); // v1 type: NumberT\n  int v2 = NumberT(2); // v2 type: int\n  var v3 = v1.i - v1;  // v3 type: int\n  var v4 = v2 + v1; // v4 type: int\n  var v5 = 2 + v1; // v5 type: int\n  // Error: Extension type interface is not available to representation type\n  v2.i;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Information from API in Dart\nDESCRIPTION: Function that fetches package data from a URL, handles HTTP response status codes, parses JSON, and converts it to a PackageInfo object. Includes a custom exception class for error handling when package retrieval fails.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<PackageInfo> getPackage(String packageName) async {\n  final packageUrl = Uri.https('dart.dev', '/f/packages/$packageName.json');\n  final packageResponse = await http.get(packageUrl);\n\n  // If the request didn't succeed, throw an exception\n  if (packageResponse.statusCode != 200) {\n    throw PackageRetrievalException(\n      packageName: packageName,\n      statusCode: packageResponse.statusCode,\n    );\n  }\n\n  final packageJson = json.decode(packageResponse.body) as Map<String, dynamic>;\n\n  return PackageInfo.fromJson(packageJson);\n}\n\nclass PackageRetrievalException implements Exception {\n  final String packageName;\n  final int? statusCode;\n\n  PackageRetrievalException({required this.packageName, this.statusCode});\n}\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to a Structured Class in Dart\nDESCRIPTION: This snippet demonstrates how to create a factory method (fromJson) to convert a JSON Map into a PackageInfo object. It shows type casting, handling optional fields, and converting string URLs to Uri objects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass PackageInfo {\n  // ...\n\n  factory PackageInfo.fromJson(Map<String, dynamic> json) {\n    final repository = json['repository'] as String?;\n\n    return PackageInfo(\n      name: json['name'] as String,\n      latestVersion: json['latestVersion'] as String,\n      description: json['description'] as String,\n      publisher: json['publisher'] as String,\n      repository: repository != null ? Uri.tryParse(repository) : null,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Block Example\nDESCRIPTION: Illustrates the use of a `try-catch` block within an `async` function to handle potential errors during asynchronous operations. It fetches a user order and prints it, or catches and prints any errors that occur.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"try {\\n  print('Awaiting user order...');\\n  var order = await fetchUserOrder();\\n} catch (err) {\\n  print('Caught error: $err');\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Correct Type Check for JS Function\nDESCRIPTION: Demonstrates the correct way to check if a JS value is a function using typeofEquals and safe casting.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(JSAny a) {\n  // Here `a` is verified to be a JS function, so the cast is okay.\n  if (a.typeofEquals('function')) {\n    a as JSFunction;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Time Extension Type Interface\nDESCRIPTION: Dart extension type definition that provides interop interface for the JavaScript Time class. Includes constructor overloads, static members, and instance members.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nextension type Time._(JSObject _) implements JSObject {\n  external Time(int hours, int minutes);\n  external factory Time.onlyHours(int hours);\n\n  external static Time dinnerTime;\n  external static Time getTimeDifference(Time t1, Time t2);\n\n  external int hours;\n  external int minutes;\n  external bool isDinnerTime();\n\n  bool isMidnight() => hours == 0 && minutes == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter CLI usage with environment declarations\nDESCRIPTION: Shows how to run a Flutter application with environment declarations defined using the `--dart-define` option.  It specifies key-value pairs for DEBUG.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/core/environment-declarations.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"$ flutter run --dart-define=DEBUG=true\"\n```\n\n----------------------------------------\n\nTITLE: Constructor Initializer List in Dart\nDESCRIPTION: Demonstrates using initializer lists to set instance variables before the constructor body runs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nPoint.fromJson(Map<String, double> json) : x = json['x']!, y = json['y']! {\n  print('In Point.fromJson(): ($x, $y)');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Cast for Null Safety\nDESCRIPTION: Shows how to use explicit type casting to handle nullable types safely by casting error field to non-nullable String.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nString toString() {\n  if (code == 200) return 'OK';\n  return 'ERROR $code ${(error as String).toUpperCase()}';\n}\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Block Type Promotion\nDESCRIPTION: Illustrates type promotion issues in try-catch blocks and provides solutions using null checks or null assertion operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  if (i == null) return;\n  try {\n    i = j;                 // (1)\n    // ... Additional code ...\n    if (i == null) return; // (2)\n    // ... Additional code ...\n  } catch (e) {\n    print(i.isEven);       // (3) ERROR\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  // ···\n} catch (e) {\n  if (i != null) {\n    print(i.isEven); // (3) OK due to the null check in the line above.\n  } else {\n    // Handle the case where i is null.\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  // ···\n} catch (e) {\n  print(i!.isEven); // (3) OK because of the `!`.\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dart Package Publishing\nDESCRIPTION: This command performs a dry run of the package publishing process to pub.dev. It checks the package against required format and layout conventions, lists the files intended for publication, and identifies any warnings. Prerequisite: Ensure your package follows the pubspec format and package layout guidelines.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/publishing.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub publish --dry-run\n```\n\n----------------------------------------\n\nTITLE: Rethrowing Exceptions in Dart (Good Practice)\nDESCRIPTION: This example shows the proper way to rethrow a caught exception using the 'rethrow' statement, which preserves the original stack trace of the exception.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  somethingRisky();\n} catch (e) {\n  if (!canHandle(e)) rethrow;\n  handle(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Parenthesized Pattern Example in Dart\nDESCRIPTION: Demonstrates how parentheses affect pattern matching precedence with boolean constants.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nx || y => 'matches true',\nx || y && z => 'matches true',\nx || (y && z) => 'matches true',\n// `x || y && z` is the same thing as `x || (y && z)`.\n(x || y) && z => 'matches nothing',\n```\n\n----------------------------------------\n\nTITLE: New Tall Formatting Style in Dart 3.7\nDESCRIPTION: This Dart code snippet illustrates the new 'tall' formatting style introduced in Dart 3.7. It shows how long function calls with multiple arguments are formatted, with each argument on a new line and a trailing comma.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nlongFunction(\n  longArgument,\n  anotherLongArgument,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting SDK Constraints - YAML\nDESCRIPTION: This snippet outlines how to establish SDK constraints for a Dart package. It indicates that the current package requires a Dart SDK version that is compatible with 3.x, specifically starting from 3.2.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: ^3.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Double Literals in Dart\nDESCRIPTION: Examples of declaring floating-point numbers using decimal and scientific notation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar y = 1.1;\nvar exponents = 1.42e5;\n```\n\n----------------------------------------\n\nTITLE: Compiling Dart Code to JavaScript\nDESCRIPTION: Shows how to compile Dart code to optimized JavaScript using the 'js' subcommand, highlighting options for optimization and specifying output paths.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile js -O2 -o out/main.js web/main.dart\n\n```\n\n----------------------------------------\n\nTITLE: Extending String with Method in Dart\nDESCRIPTION: Illustrates a Dart 2.7 feature that enables adding functionality to existing types via extension methods. This example extends the 'String' class with a 'parseInt()' method. No external dependencies are required, and a string input is parsed into an integer.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension ParseNumbers on String {\n  int parseInt() {\n    return int.parse(this);\n  }\n}\n\nvoid main() {\n  int i = '42'.parseInt();\n  print(i);\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Tree Output Example\nDESCRIPTION: Shows the tree-style output of dart pub deps command, displaying both immediate and transitive dependencies of a markdown_converter package.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-deps.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub deps\nmarkdown_converter 0.0.0\n|-- barback 0.15.2+6\n|   |-- collection 1.1.2\n|   |-- path 1.3.6\n|   |-- pool 1.1.0\n|   |   '-- stack_trace...\n|   |-- source_span 1.2.0\n|   |   '-- path...\n|   '-- stack_trace 1.4.2\n|       '-- path...\n'-- markdown 0.7.2\n```\n\n----------------------------------------\n\nTITLE: Changing Rule Severity in Dart Analysis Options\nDESCRIPTION: Demonstrates how to modify severity levels for different analyzer diagnostics and linter rules, such as treating invalid assignments as warnings and missing returns as errors\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    invalid_assignment: warning\n    missing_return: error\n    dead_code: info\n```\n\n----------------------------------------\n\nTITLE: Execute compiled Dart app\nDESCRIPTION: This shell command executes the compiled Dart program (`bin/cli.exe`). The output shows the execution time of the program, demonstrating the performance benefits of AOT compilation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ time bin/cli.exe\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Dart Package Dependency\nDESCRIPTION: This YAML snippet shows how to specify a published Dart package as a dependency in another project's pubspec.yaml file. Here, the 'transmogrify' package version 1.0.0 is referenced, allowing other projects to utilize it. Ensure the dependent package is already published to pub.dev.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/publishing.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\\n  transmogrify: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Parameter Types Table\nDESCRIPTION: Visual representation of Dart's parameter types showing the relationship between mandatory/optional and positional/named parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\n             mandatory    optional\n            +------------+------------+\npositional  | f(int x)   | f([int x]) |\n            +------------+------------+\nnamed       | ???        | f({int x}) |\n            +------------+------------+\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Checking in Dart\nDESCRIPTION: Examples of proper boolean value checking in Dart, demonstrating type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// Check for an empty string.\nvar fullName = '';\nassert(fullName.isEmpty);\n\n// Check for zero.\nvar hitPoints = 0;\nassert(hitPoints == 0);\n\n// Check for null.\nvar unicorn = null;\nassert(unicorn == null);\n\n// Check for NaN.\nvar iMeantToDoThis = 0 / 0;\nassert(iMeantToDoThis.isNaN);\n```\n\n----------------------------------------\n\nTITLE: Adding build_runner and build_web_compilers Dependencies in Dart\nDESCRIPTION: This console command adds necessary development dependencies for build_runner and build_web_compilers to a Dart application. It requires access to the Dart SDK and modifies the application's dependency list to allow scripting and compilation capabilities.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add build_runner build_web_compilers --dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Worker Class Constructor with Ports\nDESCRIPTION: Creates a Worker class constructor that initializes send and receive ports and sets up the response handler.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  final SendPort _commands;\n  final ReceivePort _responses;\n\n  Worker._(this._responses, this._commands) {\n    _responses.listen(_handleResponsesFromIsolate);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logical OR Pattern Example in Dart\nDESCRIPTION: Demonstrates using logical OR pattern matching to check if a color is primary by matching against multiple color values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar isPrimary = switch (color) {\n  Color.red || Color.yellow || Color.blue => true,\n  _ => false,\n};\n```\n\n----------------------------------------\n\nTITLE: Switch with Fall-through Cases in Dart\nDESCRIPTION: Demonstrates switch statement with empty cases falling through and using continue with labels.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nswitch (command) {\n  case 'OPEN':\n    executeOpen();\n    continue newCase;\n\n  case 'DENIED':\n  case 'CLOSED':\n    executeClosed();\n\n  newCase:\n  case 'PENDING':\n    executeNowClosed();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Isolate Entry Point in Dart\nDESCRIPTION: Implementation of the _startRemoteIsolate method that runs on the worker isolate. It creates a ReceivePort for receiving messages from the main isolate, sends its SendPort back to the main isolate, and sets up a listener to process JSON messages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nstatic void _startRemoteIsolate(SendPort port) {\n  final receivePort = ReceivePort();\n  port.send(receivePort.sendPort);\n\n  receivePort.listen((dynamic message) async {\n    if (message is String) {\n      final transformed = jsonDecode(message);\n      port.send(transformed);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Sealed Class Switch Pattern Matching in Dart\nDESCRIPTION: Demonstrates exhaustive pattern matching with sealed classes for shape area calculation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nsealed class Shape {}\n\nclass Square implements Shape {\n  final double length;\n  Square(this.length);\n}\n\nclass Circle implements Shape {\n  final double radius;\n  Circle(this.radius);\n}\n\ndouble calculateArea(Shape shape) => switch (shape) {\n  Square(length: var l) => l * l,\n  Circle(radius: var r) => math.pi * r * r,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing == operator in Dart\nDESCRIPTION: Demonstrates that the parameter for equality comparison operators should not be nullable, following Dart best practices.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n==\n```\n\n----------------------------------------\n\nTITLE: Declaring a Flutter SDK Dependency - YAML\nDESCRIPTION: This snippet demonstrates how to specify a dependency on the Flutter SDK using Dart's pubspec.yaml format. It ensures the package uses the `flutter_driver` package that is included with the Flutter SDK.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter_driver:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Declaration in Dart\nDESCRIPTION: Example of creating and initializing a basic variable using type inference with var keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Bob';\n```\n\n----------------------------------------\n\nTITLE: Upgrading with Transitive Dependencies\nDESCRIPTION: Example demonstrating how to upgrade specific packages and their transitive dependencies using the --unlock-transitive flag.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-upgrade.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade --unlock-transitive test args\n```\n\n----------------------------------------\n\nTITLE: Local Variable Promotion Limitation\nDESCRIPTION: This snippet shows the limitation that only local variables can be promoted in Dart versions prior to 3.2. It attempts to promote a class property, which results in an error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass C {\n  int? i;\n  void f() {\n    if (i == null) return;\n    print(i.isEven);       // ERROR\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Directories in Dart\nDESCRIPTION: Demonstrates how to list all files and subdirectories in a directory using the list() method, which returns a Stream that emits FileSystemEntity objects that can be checked for their specific type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  var dir = Directory('tmp');\n\n  try {\n    var dirList = dir.list();\n    await for (final FileSystemEntity f in dirList) {\n      if (f is File) {\n        print('Found file ${f.path}');\n      } else if (f is Directory) {\n        print('Found dir ${f.path}');\n      }\n    }\n  } catch (e) {\n    print(e.toString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Lists in Dart\nDESCRIPTION: Demonstrates various ways to create, initialize and manipulate Lists including adding/removing elements, checking length, and using constructors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create an empty list of strings.\nvar grains = <String>[];\nassert(grains.isEmpty);\n\n// Create a list using a list literal.\nvar fruits = ['apples', 'oranges'];\n\n// Add to a list.\nfruits.add('kiwis');\n\n// Add multiple items to a list.\nfruits.addAll(['grapes', 'bananas']);\n\n// Get the list length.\nassert(fruits.length == 5);\n\n// Remove a single item.\nvar appleIndex = fruits.indexOf('apples');\nfruits.removeAt(appleIndex);\nassert(fruits.length == 4);\n\n// Remove all elements from a list.\nfruits.clear();\nassert(fruits.isEmpty);\n\n// You can also create a List using one of the constructors.\nvar vegetables = List.filled(99, 'broccoli');\nassert(vegetables.every((v) => v == 'broccoli'));\n```\n\n----------------------------------------\n\nTITLE: Generic Type Assignment with MaineCoon List\nDESCRIPTION: Demonstrates assigning a MaineCoon list to a Cat list, which is valid due to subtype relationship\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nList<MaineCoon> myMaineCoons = ...;\nList<Cat> myCats = myMaineCoons;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Library Path Configuration\nDESCRIPTION: Dart code for determining the correct dynamic library path based on the operating system.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/c-interop.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar libraryPath = path.join(Directory.current.path, 'hello_library',\n    'libhello.so');\nif (Platform.isMacOS) {\n  libraryPath = path.join(Directory.current.path, 'hello_library',\n      'libhello.dylib');\n} else if (Platform.isWindows) {\n  libraryPath = path.join(Directory.current.path, 'hello_library',\n      'Debug', 'hello.dll');\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dart Packages with Downgraded Dependencies\nDESCRIPTION: This snippet shows the commands to test a Dart package with downgraded dependencies. It runs dart pub downgrade to resolve the lowest allowed versions of dependencies, then verifies the package still analyzes without errors and passes all tests.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ndart pub downgrade\ndart analyze\ndart test\n```\n\n----------------------------------------\n\nTITLE: Running Dart Pub Upgrade Command\nDESCRIPTION: Example of running dart pub upgrade to update the args package dependency from version 1.4.4 to 1.6.0\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-outdated.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade\nResolving dependencies...\n> args 1.6.0 (was 1.4.4)\n  ...\nChanged 1 dependency!\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Dart Project\nDESCRIPTION: This snippet demonstrates how to execute all tests located in the 'test' directory of a Dart project using the 'dart test' command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-test.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_app\n$ dart test\n```\n\n----------------------------------------\n\nTITLE: Cast Pattern Example in Dart\nDESCRIPTION: Demonstrates type casting within a destructuring pattern to enforce specific types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n(num, Object) record = (1, 's');\nvar (i as int, s as String) = record;\n```\n\n----------------------------------------\n\nTITLE: Documentation Directory Structure\nDESCRIPTION: Illustrates the standard structure for documentation in a Dart package, including generated API docs and custom documentation files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  doc/\n    api/\n    getting_started.md\n```\n\n----------------------------------------\n\nTITLE: Native Add Library Example Structure\nDESCRIPTION: File structure demonstrating the minimum required files for building and bundling C code in a Dart package using Native Assets. Shows the relationship between C source, Dart interface, tests, and build hooks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/c-interop.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nsrc/native_add_library.c          # C implementation file\nlib/native_add_library.dart       # Dart FFI interface\ntest/native_add_library_test.dart # Test file\nhook/build.dart                   # Build hook for compilation\n```\n\n----------------------------------------\n\nTITLE: RotSink Implementation in Dart\nDESCRIPTION: This code defines a `RotSink` class that extends `ChunkedConversionSink`. It encrypts a list of integers by adding a key and taking the modulus. The `addModifiable` method is introduced to modify the input list directly, avoiding unnecessary allocations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass RotSink extends ChunkedConversionSink<List<int>> {\n  final _key;\n  final ChunkedConversionSink<List<int>> _outSink;\n  RotSink(this._key, this._outSink);\n\n  void add(List<int> data) {\n    addModifiable(new Uint8List.fromList(data));\n  }\n\n  void addModifiable(List<int> data) {\n    for (int i = 0; i < data.length; i++) {\n      data[i] = (data[i] + _key) % 256;\n    }\n    _outSink.add(data);\n  }\n\n  void close() {\n    _outSink.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Late Error Registration in Dart\nDESCRIPTION: This snippet illustrates a common mistake of registering the error handler late when working with Futures in Dart, which could lead to unhandled errors. It demonstrates an incorrect approach by delaying the error handler registration using 'Future.delayed'.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Future<Object> future = asyncErrorFunction();\n\n  // BAD: Too late to handle asyncErrorFunction() exception.\n  Future.delayed(const Duration(milliseconds: 500), () {\n    future.then(...).catchError(...);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SDK Dependencies\nDESCRIPTION: Demonstrates how to add a dependency from a given SDK by specifying the SDK source, with an example using Flutter.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add \"foo:{sdk: flutter}\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add foo --sdk=flutter\n```\n\n----------------------------------------\n\nTITLE: Running the Current Package's Main Program\nDESCRIPTION: Demonstrates how to run the main program for the current package using `dart run`. It assumes the current directory matches the package name and the program being run is the main program.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run\"\n```\n\n----------------------------------------\n\nTITLE: Dart Pub Publish Command Syntax\nDESCRIPTION: This snippet shows the basic syntax for using the `dart pub publish` command in the terminal. The command is used to upload a Dart package to the pub.dev repository.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-lish.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub publish [options]\n```\n\n----------------------------------------\n\nTITLE: Constructor Initializer Lists in Dart\nDESCRIPTION: Demonstrates using initializer lists in constructors for setting up final fields and adding assertions before the constructor body executes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nPoint.fromJson(Map<String, double> json) : x = json['x']!, y = json['y']! {\n  print('In Point.fromJson(): ($x, $y)');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nNonNegativePoint(this.x, this.y) : assert(x >= 0), assert(y >= 0) {\n  print('I just made a NonNegativePoint: ($x, $y)');\n}\n```\n\n----------------------------------------\n\nTITLE: Animal Class Declaration with Return Type Rules\nDESCRIPTION: Demonstrates proper method return types in class inheritance hierarchy.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Animal {\n  void chase(Animal a) {\n     ...\n  }\n  Animal get parent => ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stream forEach Usage in Dart\nDESCRIPTION: Demonstrates how to consume stream events using forEach to print values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ncounterStream.forEach(print);\n```\n\n----------------------------------------\n\nTITLE: Complex Constant Pattern Example in Dart\nDESCRIPTION: Demonstrates the difference between list/map patterns and literal constant patterns.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// List or map pattern:\ncase [a, b]: // ...\n\n// List or map literal:\ncase const [a, b]: // ...\n```\n\n----------------------------------------\n\nTITLE: Using Dart CLI to Compile WebAssembly\nDESCRIPTION: Shows the usage of the dart CLI tool for compiling Dart code to WebAssembly/WasmGC module. Includes various command line options like output specification, verbose mode, assert enabling, and environment declarations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/wasm.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart help compile wasm\nCompile Dart to a WebAssembly/WasmGC module.\n\nUsage: dart compile wasm [arguments] <dart entry point>\n-h, --help                  Print this usage information.\n-o, --output                Write the output to <file name>.\n                            This can be an absolute or relative path.\n-v, --verbose               Print debug output during compilation\n    --enable-asserts        Enable assert statements.\n-D, --define=<key=value>    Define an environment declaration. To specify multiple declarations, use multiple\n                            options or use commas to separate key-value pairs.\n                            For example: dart compile wasm -Da=1,b=2 main.dart\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Null Check Example in Dart\nDESCRIPTION: Shows redundant null-aware operator usage on a non-nullable type, which triggers a warning in null-safe Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nString checkList(List<Object> list) {\n  if (list?.isEmpty ?? false) {\n    return 'Got nothing';\n  }\n  return 'Got something';\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Pattern Matching\nDESCRIPTION: Demonstrates pattern matching in variable declaration using a tuple and nested list pattern.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Declares new variables a, b, and c.\nvar (a, [b, c]) = ('str', [1, 2]);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dependency with a Specific Path in Git - YAML\nDESCRIPTION: This snippet illustrates how to specify a dependency that points to a specific path within a Git repository. It allows for flexibility in package locations while maintaining version control.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  kittens:\n    git:\n      url: git@github.com/munificent/cats.git\n      path: path/to/kittens\n```\n\n----------------------------------------\n\nTITLE: External Field Type Promotion Example\nDESCRIPTION: Demonstrates why external fields cannot be promoted and how to work around this limitation by using a local variable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Example {\n  external final int? _externalField;\n\n  void f() {\n    final i = _externalField;\n    if (i != null) {\n      print(i.isEven); // OK\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running dart doc to Generate Documentation\nDESCRIPTION: This snippet demonstrates how to generate HTML documentation for a Dart package using the `dart doc` command-line tool. Ensure that `dart pub get` is executed first and the package passes `dart analyze`. It also includes commands for changing the output directory and running in dry-run mode.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-doc.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_package\\n$ dart pub get\\n$ dart doc .\\nDocumenting my_package...\\n...\\nSuccess! Docs generated into /Users/me/projects/my_package/doc/api\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart doc --output=api_docs .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart doc --dry-run .\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Nullable Variables in Dart\nDESCRIPTION: Demonstrates how to declare non-nullable variables in Dart, where variables are non-nullable by default, requiring explicit declaration for nullable types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// With null safety, none of these can ever be null.\nvar i = 42; // Inferred to be an int.\nString name = getFileName();\nfinal b = Foo();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Multiple Futures\nDESCRIPTION: Using Future.wait() to handle multiple asynchronous operations in parallel\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> deleteLotsOfFiles() async =>  /* ... */\nFuture<void> copyLotsOfFiles() async =>  /* ... */\nFuture<void> checksumLotsOfOtherFiles() async =>  /* ... */\n\nawait Future.wait([\n  deleteLotsOfFiles(),\n  copyLotsOfFiles(),\n  checksumLotsOfOtherFiles(),\n]);\nprint('Done with all the long steps!');\n```\n\n----------------------------------------\n\nTITLE: Differentiating Error Sources in Dart Futures\nDESCRIPTION: Demonstrates how to handle errors differently based on whether they originate from the original Future or from within the then() callback.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nasyncErrorFunction()\n    .then(\n      successCallback,\n      onError: (e) {\n        handleError(e); // Original error.\n        anotherAsyncErrorFunction(); // Oops, new error.\n      },\n    )\n    .catchError(handleError); // Error from within then() handled.\n```\n\n----------------------------------------\n\nTITLE: Git Package Activation Commands\nDESCRIPTION: Demonstrates how to activate packages from Git repositories with various options\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-global.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub global activate --source git https://github.com/dart-lang/async_await.git\n$ dart pub global activate -sgit https://github.com/dart-lang/async_await.git\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Dependency - Console\nDESCRIPTION: Shows how to upgrade a specific package to its latest version without altering other dependencies. The example updates the 'transmogrify' package.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade transmogrify\n```\n\n----------------------------------------\n\nTITLE: Detecting Inference Failures in Dart\nDESCRIPTION: This Dart snippet presents how the analyzer identifies an inference failure in a Map declaration. It emphasizes the importance of providing explicit type parameters to avoid errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal lines = [!{}!]; // Inference failure\nlines['Dart'] = 10000;\nlines['C++'] = 'one thousand';\nlines['Go'] = 2000;\nprint('Lines: ${lines.values.reduce((a, b) => a + b)}'); // Runtime error\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nwarning - The type argument(s) of 'Map' can't be inferred - inference_failure_on_collection_literal\n```\n\n----------------------------------------\n\nTITLE: Named Super Parameters in Dart\nDESCRIPTION: Shows how to use named super parameters and combine them with regular super constructor invocations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass Vector2d {\n  // ...\n  Vector2d.named({required this.x, required this.y});\n}\n\nclass Vector3d extends Vector2d {\n  final double z;\n\n  // Forward the y parameter to the named super constructor like:\n  // Vector3d.yzPlane({required double y, required this.z})\n  //       : super.named(x: 0, y: y);\n  Vector3d.yzPlane({required super.y, required this.z}) : super.named(x: 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Running dart pub get command\nDESCRIPTION: Basic command syntax for running dart pub get to retrieve dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-get.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub get [options]\n```\n\n----------------------------------------\n\nTITLE: Initializing Dart List with Filled Constructor\nDESCRIPTION: Demonstrates how to use the List.filled constructor to create a non-nullable list initialized with a specific value, replacing a loop-based initialization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n_jellyCounts = List<int>.filled(jellyMax + 1, 0); // List initialized with filled constructor\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Dart Pub Upgrade Command\nDESCRIPTION: The basic syntax for running the dart pub upgrade command with optional parameters and dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-upgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub upgrade [options] [dependencies]\n```\n\n----------------------------------------\n\nTITLE: Executing Dart Pub Bump Command\nDESCRIPTION: The snippet demonstrates the basic usage of the 'dart pub bump' command, where you specify a subcommand to increment the version number of a Dart package based on semantic versioning principles.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-bump.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub bump <subcommand> [options]\n```\n\n----------------------------------------\n\nTITLE: Stream Pause Implementation Example\nDESCRIPTION: Shows how to test stream pause functionality by pausing the subscription after 5 events.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvoid listenWithPause() {\n  var counterStream = timedCounter(const Duration(seconds: 1), 15);\n  late StreamSubscription<int> subscription;\n\n  subscription = counterStream.listen((int counter) {\n    print(counter); // Print an integer every second.\n    if (counter == 5) {\n      // After 5 ticks, pause for five seconds, then resume.\n      subscription.pause(Future.delayed(const Duration(seconds: 5)));\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Dart Package to pub.dev\nDESCRIPTION: This command publishes your prepared Dart package to pub.dev, omitting the dry-run argument. It verifies the package's conformity to format and layout standards, checks git status, and lists files to be published before uploading. No additional parameters are needed. Ensure the package is finalized and compliant prior to execution.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/publishing.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub publish\n```\n\n----------------------------------------\n\nTITLE: Control Flow Analysis with Type Promotion - Dart\nDESCRIPTION: This snippet illustrates how Dart uses control flow analysis for type promotion in the context of nullable types and null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// With (or without) null safety:\nbool isEmptyList(Object object) {\n  if (object is List) {\n    return object.isEmpty; // <-- OK!\n  } else {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lists in Dart\nDESCRIPTION: Demonstrates creation and usage of List collections in Dart, including literal syntax and basic operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/collections.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar list = [1, 2, 3];\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar list = ['Car', 'Boat', 'Plane'];\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar list = [1, 2, 3];\nassert(list.length == 3);\nassert(list[1] == 2);\n\nlist[1] = 1;\nassert(list[1] == 1);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar constantList = const [1, 2, 3];\n// constantList[1] = 1; // This line will cause an error.\n```\n\n----------------------------------------\n\nTITLE: Mixin Declaration in Dart\nDESCRIPTION: Shows how to declare a mixin with properties and methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nmixin Piloted {\n  int astronauts = 1;\n\n  void describeCrew() {\n    print('Number of astronauts: $astronauts');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running dart pub get to Update Dependencies\nDESCRIPTION: This console command updates Dart project dependencies after changes to the pubspec.yaml. This step is crucial for reflecting dependency updates in the project.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/build_runner.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\n```\n\n----------------------------------------\n\nTITLE: Flow Control Formatting in Dart\nDESCRIPTION: Examples of proper curly brace usage in flow control statements.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nif (isWeekDay) {\n  print('Bike to work!');\n} else {\n  print('Go dancing or read a book!');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (arg == null) return defaultValue;\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (overflowChars != other.overflowChars) {\n  return overflowChars < other.overflowChars;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (overflowChars != other.overflowChars)\n  return overflowChars < other.overflowChars;\n```\n\n----------------------------------------\n\nTITLE: Importing dart:async Library\nDESCRIPTION: Basic import statement for using dart:async library, though not always necessary as Future and Stream are exported by dart:core\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-async.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Connection in Dart\nDESCRIPTION: Demonstrates WebSocket initialization with a connection URL.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar ws = WebSocket('ws://echo.websocket.org');\n```\n\n----------------------------------------\n\nTITLE: Stream Transformation using map() in Dart\nDESCRIPTION: Shows how to transform a stream's events using the map() method to double each value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar doubleCounterStream = counterStream.map((int x) => x * 2);\ndoubleCounterStream.forEach(print);\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK on Linux using APT\nDESCRIPTION: Commands to install the Dart SDK on Linux using the APT package manager after repository setup.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/get-sdk.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Console Application in Dart\nDESCRIPTION: Generates a default console application project in a new directory using the dart create command\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-create.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart create my_cli\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to the DOM in Dart\nDESCRIPTION: Append newly created elements to the document body or other existing elements using dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ndocument.body!.children.add(elem2);\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in Dart\nDESCRIPTION: Examples of string interpolation using ${expression} syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar s = 'string interpolation';\n\nassert(\n  'Dart has $s, which is very handy.' ==\n      'Dart has string interpolation, '\n          'which is very handy.',\n);\nassert(\n  'That deserves all caps. '\n          '${s.toUpperCase()} is very handy!' ==\n      'That deserves all caps. '\n          'STRING INTERPOLATION is very handy!',\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding Print Functionality in Dart Zones\nDESCRIPTION: Shows how to silence print statements within a specific zone by overriding the print functionality using ZoneSpecification\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nrunZoned(() {\n  print('Will be ignored');\n}, zoneSpecification: new ZoneSpecification(\n  print: (self, parent, zone, message) {\n    // Ignore message.\n  }));\n```\n\n----------------------------------------\n\nTITLE: Continue Statement in For Loop\nDESCRIPTION: Demonstrates using continue to skip iterations in a loop\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfor (int i = 0; i < candidates.length; i++) {\n  var candidate = candidates[i];\n  if (candidate.yearsExperience < 5) {\n    continue;\n  }\n  candidate.interview();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript Global Members in Dart\nDESCRIPTION: Demonstration of how to declare and use external interop members to access JavaScript global properties and functions. Shows getter/setter for a property and a method call, all annotated with @JS().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal String get name;\n\n@JS()\nexternal set name(String value);\n\n@JS()\nexternal bool isNameEmpty();\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Filters with Dart Test\nDESCRIPTION: This snippet explains how to use multiple filters in the 'dart test' command to run tests that match all specified conditions, including example output.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-test.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart test --name String --name print\n00:00 +0: test/library_tour/core_test.dart: print: print(nonString)\n00:00 +1: test/library_tour/core_test.dart: print: print(String)\n00:00 +2: All tests passed!\n```\n\n----------------------------------------\n\nTITLE: Declaring an Interop Extension Type in Dart\nDESCRIPTION: Example of creating an interop extension type named 'Window' that wraps a JSObject, allowing Dart code to interact with JavaScript Window objects. The type implements JSObject to ensure compatibility with APIs expecting JSObject.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nextension type Window(JSObject _) implements JSObject {}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a New Dart App\nDESCRIPTION: This example demonstrates the process of creating a new Dart application using `dart create`, navigating into the project directory, and then running the application using `dart run`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart create myapp\\n$ cd myapp\\n$ dart run\"\n```\n\n----------------------------------------\n\nTITLE: Basic Global Package Activation and Usage\nDESCRIPTION: Shows how to activate and use a package (webdev) from pub.dev globally\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-global.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub global activate webdev\n$ webdev serve\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Lists in Dart\nDESCRIPTION: Shows how to create and use type-safe lists with generic type parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// This list should contain only strings.\nvar fruits = <String>[];\n\nfruits.add('apples');\nvar fruit = fruits[0];\nassert(fruit is String);\n```\n\n----------------------------------------\n\nTITLE: Bad Tear-off Examples\nDESCRIPTION: Shows inefficient lambda usage that should be replaced with tear-offs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n// Function lambda\ncharCodes.forEach((code) {\n  print(code);\n});\n\n// Method lambda\ncharCodes.forEach((code) {\n  buffer.write(code);\n});\n```\n\n----------------------------------------\n\nTITLE: Executing build_runner Command\nDESCRIPTION: Runs the build_runner build command in the console, initiating a one-time build process. It requires that the directory contains a pubspec.yaml file, which defines the project's dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/build_runner.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ # From a directory that contains a pubspec.yaml file:\n$ dart run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Use of 'async' in Dart Function\nDESCRIPTION: This example shows a function with an unnecessary 'async' keyword. Since the function directly returns a Future and doesn't use await, the async keyword adds no value and should be omitted.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_46\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> fastestBranch(Future<int> left, Future<int> right) async {\n  return Future.any([left, right]);\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Playback Implementation\nDESCRIPTION: Dart code showing the implementation of audio file loading and playback using generated bindings\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  for (final file in args) {\n    final fileStr = NSString(lib, file);\n    print('Loading $fileStr');\n    final fileUrl = NSURL.fileURLWithPath_(lib, fileStr);\n    final player =\n        AVAudioPlayer.alloc(lib).initWithContentsOfURL_error_(fileUrl, nullptr);\n    final durationSeconds = player.duration.ceil();\n    print('$durationSeconds sec');\n    final status = player.play();\n    if (status) {\n      print('Playing...');\n      await Future<void>.delayed(Duration(seconds: durationSeconds));\n    } else {\n      print('Failed to play audio.');\n    }\n```\n\n----------------------------------------\n\nTITLE: Publishing Package with Service Account\nDESCRIPTION: Command to publish a Dart package using the temporary token, with force flag to skip confirmation prompt.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub publish --force\n```\n\n----------------------------------------\n\nTITLE: Record Pattern Matching in Dart\nDESCRIPTION: Shows various ways to use record patterns for destructuring records, including named fields and type annotations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nvar (myString: foo, myNumber: bar) = (myString: 'string', myNumber: 1);\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Record pattern with variable subpatterns:\nvar (untyped: untyped, typed: int typed) = record;\nvar (:untyped, :int typed) = record;\n\nswitch (record) {\n  case (untyped: var untyped, typed: int typed): // ...\n  case (:var untyped, :int typed): // ...\n}\n\n// Record pattern with null-check and null-assert subpatterns:\nswitch (record) {\n  case (checked: var checked?, asserted: var asserted!): // ...\n  case (:var checked?, :var asserted!): // ...\n}\n\n// Record pattern with cast subpattern:\nvar (untyped: untyped as int, typed: typed as String) = record;\nvar (:untyped as int, :typed as String) = record;\n```\n\n----------------------------------------\n\nTITLE: Making a Simple Network Request with http.read in Dart\nDESCRIPTION: This snippet demonstrates how to use the http.read function to make a simple GET request and retrieve JSON data as a string. It uses the async/await syntax for handling the Future returned by the network request.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  final httpPackageUrl = Uri.https('dart.dev', '/f/packages/http.json');\n  final httpPackageInfo = await http.read(httpPackageUrl);\n  print(httpPackageInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Remote Isolate Communication\nDESCRIPTION: Initializes the remote isolate's port communication by creating a receive port and sending its send port back to the main isolate.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nstatic void _startRemoteIsolate(SendPort sendPort) {\n  final receivePort = ReceivePort();\n  sendPort.send(receivePort.sendPort);\n  _handleCommandsToIsolate(receivePort, sendPort);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart Pub Get - Console\nDESCRIPTION: Shows how to execute 'dart pub get' to retrieve all package dependencies defined in pubspec.yaml. The command resolves and downloads dependencies, storing them in a system cache.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd <path-to-my_app>\n$ dart pub get\n```\n\n----------------------------------------\n\nTITLE: Constructor Property Assignment using 'this' in Dart\nDESCRIPTION: Shows different patterns for using 'this' keyword in constructors to initialize class properties. Includes examples with required positional parameters, named parameters, and default values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass MyColor {\n  int red;\n  int green;\n  int blue;\n\n  MyColor(this.red, this.green, this.blue);\n}\n\nfinal color = MyColor(80, 80, 128);\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyColor {\n  // ...\n\n  MyColor({required this.red, required this.green, required this.blue});\n}\n\nfinal color = MyColor(red: 80, green: 80, blue: 80);\n```\n\nLANGUAGE: dart\nCODE:\n```\nMyColor([this.red = 0, this.green = 0, this.blue = 0]);\n// or\nMyColor({this.red = 0, this.green = 0, this.blue = 0});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Worker Class with Message Tracking\nDESCRIPTION: Adds message tracking capabilities to the Worker class using completers and unique IDs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  final SendPort _commands;\n  final ReceivePort _responses;\n  final Map<int, Completer<Object?>> _activeRequests = {};\n  int _idCounter = 0;\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Pub Get Enforce Lockfile Plaintext Output\nDESCRIPTION: Example output showing enforcement of lockfile integrity with dart pub get --enforce-lockfile flag\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/glossary.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub get [!--enforce-lockfile!]\nResolving dependencies...\nCached version of foo-1.0.0 has wrong hash - redownloading.\n~ foo 1.0.0 (was 1.0.0)\nThe existing content-hash from pubspec.lock doesn't match contents for:\n * foo-1.0.0 from \"pub.dev\"\n\nThis indicates one of:\n * The content has changed on the server since you created the pubspec.lock.\n * The pubspec.lock has been corrupted.\n\nFor more information see:\nhttps://dart.dev/go/content-hashes\n[!Would change 1 dependency.!]\n[!Unable to satisfy `pubspec.yaml` using `pubspec.lock`.!]\n\nTo update `pubspec.lock` run `dart pub get` without\n`--enforce-lockfile`.\n```\n\n----------------------------------------\n\nTITLE: Assert in Constructor Initializer List\nDESCRIPTION: Shows how to validate inputs during development using assert in the initializer list.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nPoint.withAssert(this.x, this.y) : assert(x >= 0) {\n  print('In Point.withAssert(): ($x, $y)');\n}\n```\n\n----------------------------------------\n\nTITLE: Constant Naming in Dart\nDESCRIPTION: Examples showing preferred lowerCamelCase naming for constant variables and enum values in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst pi = 3.14;\nconst defaultTimeout = 1000;\nfinal urlScheme = RegExp('^([a-z]+):');\n\nclass Dice {\n  static final numberGenerator = Random();\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Dependencies\nDESCRIPTION: Shows how to override an existing dependency version using the `override:` prefix. This feature is useful when needing to enforce a specific package version across all references within a project.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add override:foo:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Converting Dart Types for JS Interop Compatibility\nDESCRIPTION: Demonstrates how to convert Dart callbacks to JS-compatible types when using package:web. This example shows adding a toJS conversion when passing a callback to an event listener.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwindow.addEventListener('click', callback); // Remove\nwindow.addEventListener('click', callback.toJS); // Add\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Collections in Dart\nDESCRIPTION: Demonstrates the correct way to check if a collection is empty in Dart. Using the isEmpty property is preferred over checking the length.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nvar collection = [];\nif (collection.isEmpty) { // Preferred\n  print('Collection is empty');\n}\n// Instead of: if (collection.length == 0)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Promotion in Dart Closure\nDESCRIPTION: This snippet shows how writing to a variable outside a closure prevents type promotion inside the closure. The solution is to create a local variable inside the closure.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  if (i == null) return;\n  var foo = () {\n    print(i.isEven); // (1) ERROR\n  };\n  i = j;             // (2)\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  if (i == null) return;\n  var i2 = i;\n  var foo = () {\n    print(i2.isEven); // (1) OK because `i2` isn't changed later.\n  };\n  i = j; // (2)\n}\n```\n\n----------------------------------------\n\nTITLE: Set Intersection Operations in Dart\nDESCRIPTION: Shows how to perform set intersection operations to find common elements between two sets.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar ingredients = Set<String>();\ningredients.addAll(['gold', 'titanium', 'xenon']);\n\n// Create the intersection of two sets.\nvar nobleGases = Set.from(['xenon', 'argon']);\nvar intersection = ingredients.intersection(nobleGases);\nassert(intersection.length == 1);\nassert(intersection.contains('xenon'));\n```\n\n----------------------------------------\n\nTITLE: Dart Object Literal Constructor Example\nDESCRIPTION: Example of creating a JavaScript object literal using a Dart extension type with named parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nextension type Options._(JSObject o) implements JSObject {\n  external Options({int a, int b});\n  external int get a;\n  external int get b;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File with Dart Test\nDESCRIPTION: This snippet illustrates how to run a specific test file under the test directory of a Dart project, providing an example output to show test results.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-test.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart test test/library_tour/io_test.dart\n00:00 +0: readAsString, readAsLines\n00:00 +1: readAsBytes\n...\n```\n\n----------------------------------------\n\nTITLE: Super Parameters with Positional Arguments\nDESCRIPTION: Demonstrates using super-initializer parameters to forward positional parameters to the superclass constructor.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass Vector2d {\n  final double x;\n  final double y;\n\n  Vector2d(this.x, this.y);\n}\n\nclass Vector3d extends Vector2d {\n  final double z;\n\n  // Forward the x and y parameters to the default super constructor like:\n  // Vector3d(final double x, final double y, this.z) : super(x, y);\n  Vector3d(super.x, super.y, this.z);\n}\n```\n\n----------------------------------------\n\nTITLE: Object Type Declaration in Dart\nDESCRIPTION: Declaring a variable with explicit Object type for flexibility in type assignment.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nObject name = 'Bob';\n```\n\n----------------------------------------\n\nTITLE: Library Declaration in Dart\nDESCRIPTION: Examples of library declarations, showing the discouraged explicit naming and preferred documentation approach.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nlibrary my_library;\n```\n\nLANGUAGE: dart\nCODE:\n```\n/// A really great test library.\n@TestOn('browser')\nlibrary;\n```\n\n----------------------------------------\n\nTITLE: Record Return Example\nDESCRIPTION: Demonstrates returning multiple values using a record.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n(String, int) foo() {\n  return ('something', 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart support in JetBrains IDEs\nDESCRIPTION: This snippet provides step-by-step instructions to configure Dart support in a JetBrains IDE after installing the Dart plugin. It covers plugin installation, new project creation, SDK path configuration, and using project templates.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/jetbrains-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<ol>\n<li>\n  <p>\n    Start the IDE, and install the <b>Dart</b> plugin.\n  </p>\n\n  <ol type=\"a\">\n    <li>From the Welcome screen, choose <b>Plugins</b>.</li>\n    <li>Search for <b>Dart</b>.</li>\n    <li>Once you've installed the Dart plugin, restart the IDE.</li>\n  </ol>\n</li>\n<br>\n\n<li>\n  <p>\n    Create a new Dart project:\n  </p>\n\n  <ol type=\"a\">\n    <li>From the Welcome screen, click <b>New Project</b>.</li>\n    <li>In the next dialog, click <b>Dart</b>.</li>\n  </ol>\n</li>\n<br>\n\n<li>\n  <p>\n    If you don't see a value for the <b>Dart SDK</b> path,\n    enter or select it.\n  </p>\n\n  <p>\n    For example, the SDK path might be\n    <code><em>&lt;dart installation directory></em>/dart/dart-sdk</code>.\n  </p>\n\n  :::note\n  The **Dart SDK** specifies the directory that\n  contains the SDK's `bin` and `lib` directories;\n  the `bin` directory contains tools such as `dart` and `dartaotruntime`.\n  The IDE ensures that the path is valid.\n  :::\n</li>\n\n<li>\n  <p>\n    Choose a starting template.\n  </p>\n\n  <ol type=\"a\">\n    <li>To enable starting templates, click <b>Generate sample content</b>.</li>\n    <li>Pick your desired template.</li>\n  </ol>\n\n  :::note\n  The provided templates are supplied and created\n  by [`dart create`](/tools/dart-create).\n  :::\n</li>\n\n<li>\n  <p>Click <b>Next</b> and continue project setup.</p>\n</li>\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Download Specific Package Version\nDESCRIPTION: Shows how to download a specific version (1.2.0) of package:http using the version descriptor syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-unpack.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub unpack http:1.2.0\n```\n\n----------------------------------------\n\nTITLE: Checking Dart Version for Null Safety Migration\nDESCRIPTION: Command to verify the installed Dart SDK version, which should be 2.19.6 for null safety migration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ dart --version\n```\n\n----------------------------------------\n\nTITLE: Using Nullable Field in Coffee Class\nDESCRIPTION: Demonstrates using nullable field with null assertion operator as a solution for delayed initialization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nclass Coffee {\n  String? _temperature;\n\n  void heat() { _temperature = 'hot'; }\n  void chill() { _temperature = 'iced'; }\n\n  String serve() => _temperature! + ' coffee';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Updating Packages\nDESCRIPTION: Example commands for adding and specifying version constraints to dependencies using `dart pub add`. This section illustrates how to add a package version, update existing dependencies, and the use of constraint ranges.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add http\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add foo:2.0.0\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add foo:'^2.0.0'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add foo:'>=2.0.0 <3.0.1'\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Declaration in Dart\nDESCRIPTION: An example of explicitly declaring a type for a variable holding a map of various types in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, Object?> arguments = {'argA': 'hello', 'argB': 42};\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Constraints for Dependencies - YAML\nDESCRIPTION: This snippet highlights how to define semantic version constraints for the `transmogrify` package using Dart's pubspec.yaml format. It combines both hosted dependencies and version constraints in the specification.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  transmogrify:\n    hosted:\n      name: transmogrify\n      url: https://some-package-server.com\n    version: ^1.4.0\n```\n\n----------------------------------------\n\nTITLE: Private Method Access Control in Dart\nDESCRIPTION: Shows a potential runtime error scenario where implementing a class without proper private method implementation can cause issues, demonstrating the need for base modifier.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/class-modifiers-for-apis.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass A {\n  void _privateMethod() {\n    print('I inherited from A');\n  }\n}\n\nvoid callPrivateMethod(A a) {\n  a._privateMethod();\n}\n```\n\n----------------------------------------\n\nTITLE: Function Equality Testing\nDESCRIPTION: Demonstrates how to test equality between different types of functions in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nvoid foo() {} // A top-level function\n\nclass A {\n  static void bar() {} // A static method\n  void baz() {} // An instance method\n}\n\nvoid main() {\n  Function x;\n\n  // Comparing top-level functions.\n  x = foo;\n  assert(foo == x);\n\n  // Comparing static methods.\n  x = A.bar;\n  assert(A.bar == x);\n\n  // Comparing instance methods.\n  var v = A(); // Instance #1 of A\n  var w = A(); // Instance #2 of A\n  var y = w;\n  x = w.baz;\n\n  // These closures refer to the same instance (#2),\n  // so they're equal.\n  assert(y.baz == x);\n\n  // These closures refer to different instances,\n  // so they're unequal.\n  assert(v.baz != w.baz);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Members Using 'this' in Dart\nDESCRIPTION: This snippet demonstrates the preferred way to document class members in Dart. It uses 'this' to clearly refer to the instance of the class, avoiding ambiguity. The example shows a Box class with a private value and a getter that checks if the box contains a value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  /// The value this box wraps.\n  Object? _value;\n\n  /// Whether this box contains a value.\n  bool get hasValue => _value != null;\n}\n```\n\n----------------------------------------\n\nTITLE: ToModifiableConverter and Sink Implementation in Dart\nDESCRIPTION: This code defines a `ToModifiableConverter` and `ToModifiableSink` to explicitly convert unmodifiable lists to modifiable lists. The `ToModifiableSink` takes a `RotSink` as input and calls `addModifiable` on it, signaling that the incoming chunk is modifiable, leading to a more efficient pipeline.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass ToModifiableConverter extends Converter<List<int>, List<int>> {\n  List<int> convert(List<int> data) => data;\n  ToModifiableSink startChunkedConversion(RotSink sink) {\n    return new ToModifiableSink(sink);\n  }\n}\n\nclass ToModifiableSink\n    extends ChunkedConversionSink<List<int>, List<int>> {\n  final RotSink sink;\n  ToModifiableSink(this.sink);\n\n  void add(List<int> data) { sink.addModifiable(data); }\n  void close() { sink.close(); }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-line App Directory Structure\nDESCRIPTION: Illustrates the directory structure for Dart packages that define command-line programs, placing executable scripts in the 'bin' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  bin/\n    enchilada\n```\n\n----------------------------------------\n\nTITLE: Covariant Keyword Usage in Method Overriding\nDESCRIPTION: Shows how to use the covariant keyword to allow tightening parameter types when overriding methods\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nclass Animal {\n  void chase(Animal x) {\n     ...\n  }\n}\n\nclass Mouse extends Animal {\n   ...\n}\n\nclass Cat extends Animal {\n  @override\n  void chase(covariant Mouse x) {\n     ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Pub Generated Files in Dart Projects\nDESCRIPTION: Essential files and directories created by the pub tool that should not be committed to source control repositories.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/private-files.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.dart_tool/\nbuild/\npubspec.lock  # Except for application packages\n```\n\n----------------------------------------\n\nTITLE: Dependency Overrides YAML\nDESCRIPTION: Displays the resulting YAML modification in `pubspec.yaml` when a dependency override is specified using `dart pub add` with the `override:` prefix.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependency_overrides:\n  foo: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Calculating Date Differences with Duration in Dart\nDESCRIPTION: Shows how to use the Duration class to add or subtract time from a DateTime, and calculate the difference between two dates.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nvar y2k = DateTime.utc(2000);\n\n// Add one year.\nvar y2001 = y2k.add(const Duration(days: 366));\nassert(y2001.year == 2001);\n\n// Subtract 30 days.\nvar december2000 = y2001.subtract(const Duration(days: 30));\nassert(december2000.year == 2000);\nassert(december2000.month == 12);\n\n// Calculate the difference between two dates.\n// Returns a Duration object.\nvar duration = y2001.difference(y2k);\nassert(duration.inDays == 366); // y2k was a leap year.\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixin Class in Dart\nDESCRIPTION: Demonstrates how to declare and use a mixin class that can be both extended and mixed in using the new mixin class syntax in Dart 3.0.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/class-modifiers-for-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nmixin class Both {}\n\nclass UseAsMixin with Both {}\nclass UseAsSuperclass extends Both {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constant Constructor in Dart\nDESCRIPTION: Shows how to create a constant constructor for producing immutable point objects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ImmutablePoint {\n  static const ImmutablePoint origin = ImmutablePoint(0, 0);\n\n  final double x, y;\n\n  const ImmutablePoint(this.x, this.y);\n}\n```\n\n----------------------------------------\n\nTITLE: While Loop Implementation\nDESCRIPTION: Shows basic while loop syntax that evaluates condition before execution\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nwhile (!isDone()) {\n  doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Array Extension Method\nDESCRIPTION: Example of adding external methods to existing interop types using Dart extensions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension on Array {\n  external int push(JSAny? any);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart Fix Dry Run Example in Console\nDESCRIPTION: This snippet provides an example output of using the `dart fix --dry-run` command. It shows how many proposed fixes are found, indicating which files are affected and the type of fixes available.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-fix.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart fix --dry-run\nComputing fixes in myapp (dry run)... 9.0s\n\n1 proposed fixes in 1 files.\n\nlib/myapp.dart\n  use_super_parameters • 1 fix\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Access Exercise in Dart\nDESCRIPTION: Function demonstrating the use of the ?. operator for safe property access on potentially null objects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nString? upperCaseIt(String? str) {\n  // TODO: Try conditionally accessing the `toUpperCase` method here.\n}\n\n// Tests your solution (Don't edit!):\nvoid main() {\n  try {\n    String? one = upperCaseIt(null);\n    if (one != null) {\n      print('Looks like you\\'re not returning null for null inputs.');\n    } else {\n      print('Success when str is null!');\n    }\n  } catch (e) {\n    print('Tried calling upperCaseIt(null) and got an exception: \\n ${e.runtimeType}.');\n  }\n\n  try {\n    String? two = upperCaseIt('a string');\n    if (two == null) {\n      print('Looks like you\\'re returning null even when str has a value.');\n    } else if (two != 'A STRING') {\n      print('Tried upperCaseIt(\\'a string\\'), but didn\\'t get \\'A STRING\\' in response.');\n    } else {\n      print('Success when str is not null!');\n    }\n  } catch (e) {\n    print('Tried calling upperCaseIt(\\'a string\\') and got an exception: \\n ${e.runtimeType}.');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart Linter Rules in YAML\nDESCRIPTION: This code snippet shows how to configure Dart linter rules in the analysis_options.yaml file. The snippet iterates through the sorted list of linter rules and includes them in the 'rules' section based on certain criteria like SDK version compatibility and rule state. This configuration helps customize the linting behavior of Dart projects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/linter-rules/all.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"analysis_options.yaml\"\nlinter:\n  rules:\n    {% for lint in sorted_lints %}\n    {%- if lint.sinceDartSdk != \"Unreleased\" and lint.sinceDartSdk not contains \"-wip\" and site.sdkVersion >= lint.sinceDartSdk and lint.state != \"removed\" and lint.state != \"internal\" -%}\n    - {{lint.name}}\n    {% endif -%}\n    {%- endfor %}\n```\n```\n\n----------------------------------------\n\nTITLE: Record Shape Mismatch Example\nDESCRIPTION: Shows how records with different named fields are considered different types\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n({int x, int y, int z}) point = (x: 1, y: 2, z: 3);\n({int r, int g, int b}) color = (r: 1, g: 2, b: 3);\n\nprint(point == color); // Prints 'false'. Lint: Equals on unrelated types.\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single File or Directory for Dart Formatting - Console\nDESCRIPTION: This snippet demonstrates how to use the `dart format` command to format all Dart files in a given directory. The command can be executed in the terminal to recursively format files in subdirectories as well.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart format .\n```\n\n----------------------------------------\n\nTITLE: Extension Naming in Dart\nDESCRIPTION: Examples showing proper UpperCamelCase naming for Dart extensions. Extensions should follow the same capitalization rules as types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nextension MyFancyList<T> on List<T> {\n   ...\n}\n\nextension SmartIterable<T> on Iterable<T> {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Compile Dart app to executable\nDESCRIPTION: This shell command uses the `dart compile exe` tool to AOT compile the Dart program (`bin/cli.dart`) into a native executable (`bin/cli.exe`). This compilation process optimizes the code for production environments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ dart compile exe bin/cli.dart\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Package Repository in pubspec.yaml\nDESCRIPTION: Shows how to specify a custom package repository for a dependency in the pubspec.yaml file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  example_package:\n    hosted: https://dart-packages.example.com\n    version: ^1.4.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Values in Dart\nDESCRIPTION: Demonstrates how to access and compare enum values in Dart code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal favoriteColor = Color.blue;\nif (favoriteColor == Color.blue) {\n  print('Your favorite color is blue!');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding lints as a dev dependency - Console\nDESCRIPTION: This command adds the lints package as a development dependency for a Dart project, allowing for the use of recommended linter rules.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add --dev lints\n```\n\n----------------------------------------\n\nTITLE: Valid Return Paths (With Null Safety)\nDESCRIPTION: This code demonstrates a function with a non-nullable return type that has multiple return paths. The Dart analyzer is able to verify that all execution paths reliably return a value, so it doesn't produce a compile error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nString alwaysReturns(int n) {\n  if (n == 0) {\n    return 'zero';\n  } else if (n < 0) {\n    throw ArgumentError('Negative values not allowed.');\n  } else {\n    if (n > 1000) {\n      return 'big';\n    } else {\n      return n.toString();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart app with environment declarations\nDESCRIPTION: Shows how to run a Dart application using the dart run command with environment declarations defined using the --define option. It specifies key-value pairs for DEBUG and FLAVOR.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/core/environment-declarations.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run --define=DEBUG=true -DFLAVOR=free\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Dart\nDESCRIPTION: This snippet demonstrates how to access environment variables using Platform.environment which returns an immutable map of environment variables. It shows how to retrieve common environment variables like PWD, LOGNAME, and PATH.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal envVarMap = Platform.environment;\n\nprint('PWD = ${envVarMap['PWD']}');\nprint('LOGNAME = ${envVarMap['LOGNAME']}');\nprint('PATH = ${envVarMap['PATH']}');\n```\n\n----------------------------------------\n\nTITLE: Basic Event Loop Implementation in Dart\nDESCRIPTION: Demonstrates the conceptual implementation of Dart's event loop that processes events sequentially from a queue.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/concurrency.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nwhile (eventQueue.waitForEvent()) {\n  eventQueue.processNextEvent();\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Value-Returning Functions in Dart\nDESCRIPTION: Examples of properly documenting functions that return values using noun phrases for non-boolean returns and 'Whether' for boolean returns.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n/// The [index]th element of this iterable in iteration order.\nE elementAt(int index);\n\n/// Whether this iterable contains an element equal to [element].\nbool contains(Object? element);\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous For Loop in Main\nDESCRIPTION: Shows how to use an asynchronous for loop in the main() function by marking it as async, enabling stream processing for handling server requests.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  // ...\n  await for (final request in requestServer) {\n    handleRequest(request);\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Code Excerpt in Markdown with Code-Excerpt Directive\nDESCRIPTION: An example of how code excerpts are included in Markdown files on the dart.dev website using the code-excerpt directive to reference a specific region of a Dart file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<?code-excerpt \"misc/lib/language_tour/variables.dart (var-decl)\"?>\n```dart\nvar name = 'Bob';\n```\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Overrides in YAML\nDESCRIPTION: Illustrates how to use dependency_overrides in a pubspec.yaml file to temporarily override references to a dependency, either with a local path or a specific version.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_app\ndependencies:\n  transmogrify: ^1.2.0\ndependency_overrides:\n  transmogrify:\n    path: ../transmogrify_patch/\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_app\ndependencies:\n  transmogrify: ^1.2.0\ndependency_overrides:\n  transmogrify: '3.2.1'\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Name Filter Using Dart Test\nDESCRIPTION: This snippet shows how to filter and run tests by name using the '--name' flag with the 'dart test' command, displaying relevant test results.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-test.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart test --name String\n00:00 +0: test/library_tour/io_test.dart: readAsString, readAsLines\n00:00 +1: test/library_tour/core_test.dart: print: print(nonString)\n00:00 +2: test/library_tour/core_test.dart: print: print(String)\n00:00 +3: test/library_tour/core_test.dart: numbers: toString()\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Token Authentication for Current Session\nDESCRIPTION: Example showing how to add a new authentication token for the current session using stdin input.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-token.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token add https://some-package-repo.com/my-org/my-repo\nEnter secret token: <Type token on stdin>\n Requests to \"https://some-package-repo.com/my-org/my-repo\" will now be \n authenticated using the secret token.\n```\n\n----------------------------------------\n\nTITLE: Using Never in Class Method for Type Enforcement - Dart\nDESCRIPTION: This snippet illustrates how to use the 'Never' type in class methods to enforce type checks and leverage reachability analysis.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nclass Point {\n  final double x, y;\n\n  bool operator ==(Object other) {\n    if (other is! Point) wrongType('Point', other);\n    return x == other.x && y == other.y;\n  }\n\n  // Constructor and hashCode...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Unnecessary Empty Statements in Dart\nDESCRIPTION: This code snippet demonstrates how the Dart analyzer detects unnecessary empty statements within a function. The analysis shows a warning about the empty statement, which can lead to potential issues in code execution.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid increment() {\n  if (count < 10) [!;!]\n  count++;\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ninfo - example.dart:9:19 - Unnecessary empty statement. Try removing the empty statement or restructuring the code. - empty_statements\n```\n\n----------------------------------------\n\nTITLE: Migration with Hints Applied in Dart\nDESCRIPTION: In this snippet, the variable 'zero' is declared with a hint marker, preventing a nullable type inference. The resulting changes reflect in the subsequent lines of code, showcasing how the hint impacts the type inference of 'zeroOne'.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar ints = const <int?>[0, null];\nvar zero = ints[0]/*!*/;\nvar one = zero + 1;\nvar zeroOne = <int>[zero, one];\n```\n\n----------------------------------------\n\nTITLE: Create a Dart console app\nDESCRIPTION: This shell command uses the `dart create` tool to generate a basic command-line application. It utilizes the `console` template, which sets up a standard project structure with a `bin/cli.dart` entrypoint and a `lib/cli.dart` library.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ dart create -t console cli\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dart Homebrew Tap\nDESCRIPTION: Adds the official Dart tap to Homebrew to enable Dart SDK installation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ brew tap dart-lang/dart\n```\n\n----------------------------------------\n\nTITLE: Creating Executable with Custom Output Path\nDESCRIPTION: Compiles a Dart program into an executable placing it in a specified directory. The path is provided using '-o' option to direct output to a desired location.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile exe bin/myapp.dart -o /tmp/myapp\nGenerated: /tmp/myapp\n$ ./tmp/myapp\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Math Constants in dart:math Library\nDESCRIPTION: This snippet demonstrates accessing mathematical constants like e, pi, and sqrt2 from the dart:math library. After importing the library, the constants can be utilized directly. The snippet outputs the value of each constant.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-math.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// See the Math library for additional constants.\nprint(e); // 2.718281828459045\nprint(pi); // 3.141592653589793\nprint(sqrt2); // 1.4142135623730951\n```\n\n----------------------------------------\n\nTITLE: Dart Import Examples\nDESCRIPTION: Examples showing how to properly import libraries from within a package based on their location relative to lib/.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// When importing from within lib:\nimport 'src/beans.dart';\n```\n\nLANGUAGE: dart\nCODE:\n```\n// When importing from outside lib:\nimport 'package:enchilada/src/beans.dart';\n```\n\n----------------------------------------\n\nTITLE: Setting SDK Constraint for Null Safety in Dart\nDESCRIPTION: This YAML snippet shows how to set the minimum SDK constraint in pubspec.yaml to enable null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/unsound-null-safety.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Error Propagation with whenComplete() in Dart\nDESCRIPTION: Shows how errors propagate through whenComplete() when no new errors are introduced within its callback.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  asyncErrorFunction()\n      // Future completes with an error:\n      .then((_) => print(\"Won't reach here\"))\n      // Future completes with the same error:\n      .whenComplete(() => print('Reaches here'))\n      // Future completes with the same error:\n      .then((_) => print(\"Won't reach here\"))\n      // Error is handled here:\n      .catchError(handleError);\n}\n```\n\n----------------------------------------\n\nTITLE: Preferred Comment Style vs Block Comments in Dart\nDESCRIPTION: Shows the preferred single-line comment style compared to block comments for documentation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid greet(String name) {\n  // Assume we have a valid name.\n  print('Hi, $name!');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid greet(String name) {\n  /* Assume we have a valid name. */\n  print('Hi, $name!');\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running C Library with CMake and Dart\nDESCRIPTION: Console commands showing how to build a C dynamic library using CMake and execute the Dart app that uses it.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/c-interop.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd hello_library\n$ cmake .\n...\n$ make\n...\n$ cd ..\n$ dart pub get\n$ dart run hello.dart\nHello World\n```\n\n----------------------------------------\n\nTITLE: Adding Token Authentication Using Environment Variable\nDESCRIPTION: Example demonstrating how to add a persistent authentication token using an environment variable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-token.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token add https://other-package-repo.com/ --env-var TOKEN_VAR\nRequests to \"https://other-package-repo.com/\" will now be authenticated using the secret token stored in the environment variable \"TOKEN_VAR\".\n```\n\n----------------------------------------\n\nTITLE: Serving Dart App for Development with webdev\nDESCRIPTION: This plaintext command is used to run a local web server to serve a Dart application in development mode using webdev. It supports incremental updates and requires Chrome for viewing the application.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n$ webdev serve [--debug | --release] [ [<directory>[:<port>]] ... ]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ webdev serve\n```\n\n----------------------------------------\n\nTITLE: Sample Package Dependencies in YAML\nDESCRIPTION: Example of how to specify package dependencies in a pubspec.yaml file, showing dependencies on barback and markdown packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-deps.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  barback: ^0.15.2\n  markdown: ^0.7.2\n```\n\n----------------------------------------\n\nTITLE: Compiling Dart to Executable using dart compile\nDESCRIPTION: This snippet shows how to use the 'exe' subcommand with 'dart compile' to produce a standalone, self-contained executable from a Dart source file. Output files are generated in the directory specified in the command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile exe bin/myapp.dart\nGenerated: /Users/me/myapp/bin/myapp.exe\n\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Build Configuration for pub.dev Publishing\nDESCRIPTION: Cloud Build configuration for automated publishing to pub.dev. Creates temporary OIDC tokens and handles authentication using service account impersonation. Includes steps for token generation and package publishing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# cloudbuild.yaml\nsteps:\n- id: Create temporary token\n  name: gcr.io/cloud-builders/gcloud\n  volumes:\n  - name: temporary-secrets\n    path: /secrets\n  script: |\n    gcloud auth print-identity-token \\\n      --impersonate-service-account=pub-dev@$PROJECT_ID.iam.gserviceaccount.com \\\n      --audiences=https://pub.dev \\\n      --include-email > /secrets/temporary-pub-token.txt\n  env:\n  - PROJECT_ID=$PROJECT_ID\n- id: Publish to pub.dev\n  name: dart\n  volumes:\n  - name: temporary-secrets\n    path: /secrets\n  script: | \n    cat /secrets/temporary-pub-token.txt | dart pub token add https://pub.dev\n    dart pub publish --force\n```\n\n----------------------------------------\n\nTITLE: Example Dart Code Before Null Safety Migration\nDESCRIPTION: Sample Dart code snippet before applying null safety, demonstrating variable declarations and list operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar ints = const <int>[0, null];\nvar zero = ints[0];\nvar one = zero + 1;\nvar zeroOne = <int>[zero, one];\n```\n\n----------------------------------------\n\nTITLE: Piping Standard Input to Standard Output in Dart\nDESCRIPTION: This code demonstrates how to pipe stdin directly to stdout using the pipe() method. This asynchronous operation allows users to type text that gets copied to the output stream.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait stdin.pipe(stdout);\n```\n\n----------------------------------------\n\nTITLE: Dart Doc Comment Examples\nDESCRIPTION: This code snippet demonstrates how to reference identifiers within doc comments using square brackets. It showcases referencing a class (`String`), a parameter (`object`), and a constructor (`Future.value`). The references enable IDE features and are used to generate links in API documentation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/doc-comments/references.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n/// Returns a [String].\nString f() => 'Hello';\n\n/// Wraps [object] with [Future.value].\nFuture<T> g<T>(T object) => Future.value(object);\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Path in dart compile\nDESCRIPTION: Illustrates how to specify an output path for the compiled file by using the '-o' or '--output' options with 'dart compile'. This allows users to customize the location and name of the output file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile exe bin/myapp.dart -o bin/runme\n\n```\n\n----------------------------------------\n\nTITLE: Nullable Variable Initialization in Dart\nDESCRIPTION: Demonstrating default null value for uninitialized nullable variables with assertion check.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint? lineCount;\nassert(lineCount == null);\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for pub.dev Publishing\nDESCRIPTION: GitHub Actions workflow configuration for automated package publishing to pub.dev. Includes environment specification and tag-based triggering. Requires OIDC authentication and proper environment setup.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# .github/workflows/publish.yml\nname: Publish to pub.dev\n\non:\n  push:\n    tags:\n    - 'v[0-9]+.[0-9]+.[0-9]+' # for tags like: 'v1.2.3'\n\njobs:\n  publish:\n    permissions:\n      id-token: write # Required for authentication using OIDC\n    uses: dart-lang/setup-dart/.github/workflows/publish.yml@v1\n    with:\n      # Specify the github actions deployment environment\n      environment: pub.dev\n      # working-directory: path/to/package/within/repository\n```\n\n----------------------------------------\n\nTITLE: Adding Package from Custom Repository via Command Line\nDESCRIPTION: Demonstrates using dart pub add command with the --hosted flag to add a dependency from a custom repository.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add example_package --hosted https://dart-packages.example.com\n```\n\n----------------------------------------\n\nTITLE: Performance Profiling with Dart Zones\nDESCRIPTION: Implements zone-based code profiling by measuring execution time using run* parameters in ZoneSpecification\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal total = new Stopwatch();\nfinal user = new Stopwatch();\n\nfinal specification = new ZoneSpecification(\n  run: (self, parent, zone, f) {\n    user.start();\n    try { return parent.run(zone, f); } finally { user.stop(); }\n  },\n  runUnary: (self, parent, zone, f, arg) {\n    user.start();\n    try { return parent.runUnary(zone, f, arg); } finally { user.stop(); }\n  },\n  runBinary: (self, parent, zone, f, arg1, arg2) {\n    user.start();\n    try {\n      return parent.runBinary(zone, f, arg1, arg2);\n    } finally {\n      user.stop();\n    }\n  });\n\nrunZoned(() {\n  total.start();\n  // ... Code that runs synchronously...\n  // ... Then code that runs asynchronously ...\n    .then((...) {\n      print(total.elapsedMilliseconds);\n      print(user.elapsedMilliseconds);\n    });\n}, zoneSpecification: specification);\n```\n\n----------------------------------------\n\nTITLE: Serving Dart Web App with Debug Extension - Dart\nDESCRIPTION: Use this command to serve the app in debug mode using an already-running instance of Chrome. It is useful for debugging your app with Dart DevTools directly.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/debugging.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ webdev serve --debug-extension\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Help for Dart Create\nDESCRIPTION: Shows how to access help information and available options for the dart create command\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-create.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart create --help\n```\n\n----------------------------------------\n\nTITLE: Dart Run Command Syntax\nDESCRIPTION: The `dart run` command is used to execute a Dart program from the command line. The syntax includes options, the target Dart file or package, and any arguments to be passed to the program.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"dart run [options] [<DART_FILE> | <PACKAGE_TARGET>] [args]\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dart SDK\nDESCRIPTION: Updates the installed Dart SDK to the latest available version.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ brew upgrade dart\n```\n\n----------------------------------------\n\nTITLE: Dart Analyzer Help\nDESCRIPTION: Displays the available command-line options and usage instructions for the `dart analyze` command. Essential for understanding the available customization options.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-analyze.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze --help\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency with Dart Pub - Console\nDESCRIPTION: Demonstrates using the 'dart pub add' command to programmatically add a dependency to a Dart project. This command adds 'vector_math' to the pubspec.yaml without manual editing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add vector_math\nResolving dependencies... \n+ vector_math 2.1.3\nDownloading vector_math 2.1.3...\nChanged 1 dependency!\n```\n\n----------------------------------------\n\nTITLE: Stream Subscription Example\nDESCRIPTION: Demonstrates the timing of subscription handling in StreamController.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nsubscription = stream.listen(handler);\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Cards with HTML and Liquid Template Tags\nDESCRIPTION: This code snippet demonstrates the use of HTML and Liquid template tags to create a grid of resource cards. Each card represents a different Dart language resource, including its title, link, and a brief description.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/index.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"card-grid\">\n  {% card \"Glossary\", \"/resources/breaking-changes\" %}\n    Terminology used by Dart documentation and developers.\n  {% endcard %}\n  {% card \"Breaking changes\", \"/resources/breaking-changes\" %}\n    Breaking changes by Dart release.\n  {% endcard %}\n  {% card \"Books\", \"/resources/books\" %}\n    A collection of books about Dart.\n  {% endcard %}\n  {% card \"Videos\", \"/resources/videos\" %}\n    Videos aimed at Dart developers.\n  {% endcard %}\n  {% card \"FAQ\", \"/resources/faq\" %}\n    Frequently asked questions about Dart.\n  {% endcard %}\n  {% card \"Code of conduct\", \"/community/code-of-conduct\" %}\n    Keeping community spaces safe and respectful.\n  {% endcard %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using a Named Constructor in Dart\nDESCRIPTION: Shows how to invoke a named constructor in Dart by using its full name (class name followed by dot and constructor name).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal myPoint = Point.origin();\n```\n\n----------------------------------------\n\nTITLE: Building Dart App for Production with webdev\nDESCRIPTION: This plaintext command builds the Dart app into a deployable JavaScript application using the production compiler by default. The --output flag specifies the build destination, facilitating structured output management.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n$ webdev build [--no-release] --output [<dirname>:]<dirname>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ webdev build --output web:build\n```\n\n----------------------------------------\n\nTITLE: Suppressing diagnostics in a pubspec file - YAML\nDESCRIPTION: Adds an ignore comment above a line in a pubspec.yaml file to suppress a non-error diagnostic.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# ignore: sort_pub_dependencies\n  collection: ^1.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Literals in Dart\nDESCRIPTION: Examples of declaring integer variables using decimal and hexadecimal notations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar x = 1;\nvar hex = 0xDEADBEEF;\n```\n\n----------------------------------------\n\nTITLE: Adding Package to System Cache\nDESCRIPTION: Command to manually add a package to the system cache. This is useful when you want to pre-cache specific packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub cache add <package>\n```\n\n----------------------------------------\n\nTITLE: File Stream Transformation using RotConverter in Dart\nDESCRIPTION: Illustrates the use of RotConverter for transforming streams of file data by piping transformed byte streams to an output file. It requires input/output file paths and a rotation key, utilizing Dart's File IO and stream functionalities for continuous data processing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nvoid main(List<String> args) {\n  String inFile = args[0];\n  String outFile = args[1];\n  int key = int.parse(args[2]);\n  new File(inFile)\n    .openRead()\n    .transform(new RotConverter(key))\n    .pipe(new File(outFile).openWrite());\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Files or Directories for Dart Formatting - Console\nDESCRIPTION: This snippet shows how to format multiple Dart files or directories by using a space-delimited list of paths. It's executed in the terminal and formats the specified Dart files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart format lib bin/updater.dart\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dart Libraries\nDESCRIPTION: Dart code showing necessary imports for FFI functionality including dart:ffi and path handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/c-interop.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ffi' as ffi;\n```\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io' show Platform, Directory;\nimport 'package:path/path.dart' as path;\n```\n\n----------------------------------------\n\nTITLE: Validating Type with Control Flow in Dart - Dart\nDESCRIPTION: This snippet provides an example of how Dart checks types using control flow paths, demonstrating improvements made under null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nbool isEmptyList(Object object) {\n  if (object is! List) return false;\n  return object.isEmpty;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Nullable Final Field and Reporting Analyzer Warnings in Dart\nDESCRIPTION: This code snippet illustrates the use of the nullable final field `_x` in a class `C`. It shows how accessing `_x` might trigger analyzer warnings for unnecessary non-null assertions and invalid null-aware operators. The snippet serves as a demonstration of potential pitfalls in handling nullable types in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass C {\n    final num? _x = null;\n\n    void test() {\n      if (_x != null) {\n        print(_x! * 2); // unnecessary_non_null_assertion\n        print(_x?.abs()); // invalid_null_aware_operator\n      }\n      if (_x is int) {\n        print((_x as int).bitLength); // unnecessary_cast\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Runtime Fail on Dynamic Downcast in Dart\nDESCRIPTION: Demonstrates a runtime failure when attempting to pass an integer to the `assumeString` method, which expects a String type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal length = assumeString(1);\n```\n\n----------------------------------------\n\nTITLE: Testing Dart 3 Compatibility Commands\nDESCRIPTION: Console commands for checking Dart 3 compatibility of existing code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart --version    # Make sure this reports 3.0.0 or higher.\n$ dart pub get      # This should resolve without issues.\n$ dart analyze      # This should pass without errors.\n```\n\n----------------------------------------\n\nTITLE: Example Package Directory Structure\nDESCRIPTION: Complete example showing recommended directory structure for a Dart package named 'enchilada', including all common directories and files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  .dart_tool/ *\n  pubspec.yaml\n  pubspec_overrides.yaml **\n  pubspec.lock ***\n  LICENSE\n  README.md\n  CHANGELOG.md\n  benchmark/\n    make_lunch.dart\n  bin/\n    enchilada\n  doc/\n    api/ ****\n    getting_started.md\n  example/\n    main.dart\n  hook/\n    build.dart\n  integration_test/\n    app_test.dart\n  lib/\n    enchilada.dart\n    tortilla.dart\n    guacamole.css\n    src/\n      beans.dart\n      queso.dart\n  test/\n    enchilada_test.dart\n    tortilla_test.dart\n  tool/\n    generate_docs.dart\n  web/\n    index.html\n    main.dart\n    style.css\n```\n\n----------------------------------------\n\nTITLE: Invalid Generic Type Assignment from Animal List\nDESCRIPTION: Shows an invalid assignment of an Animal list to a Cat list, which fails static analysis due to implicit downcast\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nList<Animal> myAnimals = ...;\nList<Cat> myCats = myAnimals;\n```\n\n----------------------------------------\n\nTITLE: Final Fields Promotion Requirement\nDESCRIPTION: This snippet illustrates the requirement for fields to be final for their values to be promoted. It provides an example where a non-final field leads to a promotion error and shows the corrected version with a final field.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Example {\n  int? _mutablePrivateField;\n  Example(this._mutablePrivateField);\n\n  void f() {\n    if (_mutablePrivateField != null) {\n      int i = _mutablePrivateField; // ERROR\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enum Indices in Dart\nDESCRIPTION: Shows how to access the index of enum values, which represents their zero-based position in the enum declaration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nassert(Color.red.index == 0);\nassert(Color.green.index == 1);\nassert(Color.blue.index == 2);\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Pub Remove Command Syntax\nDESCRIPTION: Shows the basic syntax for using the dart pub remove command to remove a package dependency.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-remove.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub remove <package> [options]\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Dart Version\nDESCRIPTION: Installs a specific version of Dart SDK, using version 3.1 as an example.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ brew install dart@3.1\n```\n\n----------------------------------------\n\nTITLE: HTML Search Bar\nDESCRIPTION: Defines an HTML search bar for filtering glossary terms. The search bar includes an icon and an input field with a placeholder text. It's initially hidden and intended to be displayed using JavaScript, which is loaded via `glossary.js`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/glossary.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<section id=\"filter-and-search\" class=\"hidden\">\n  <div class=\"search-row\">\n    <div class=\"search-wrapper\">\n      <span class=\"material-symbols leading-icon\" aria-hidden=\"true\">search</span>\n      <input type=\"search\" placeholder=\"Search terms...\" aria-label=\"Search terms by name...\">\n    </div>\n  </div>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Dart CLI usage with environment declarations\nDESCRIPTION: Shows various `dart compile` subcommands and the `dart run` command including specification of environment variables using `-D` or `--define` flags.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/core/environment-declarations.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run --define=DEBUG=true -DFLAVOR=free main.dart\\n$ dart compile exe --define=DEBUG=true -DFLAVOR=free main.dart\\n$ dart compile js --define=DEBUG=true -DFLAVOR=free main.dart\\n$ dart compile aot-snapshot --define=DEBUG=true -DFLAVOR=free main.dart\\n$ dart compile jit-snapshot --define=DEBUG=true -DFLAVOR=free main.dart\\n$ dart compile kernel --define=DEBUG=true -DFLAVOR=free main.dart\"\n```\n\n----------------------------------------\n\nTITLE: Dart Command-Line Tools\nDESCRIPTION: Overview of command-line interfaces for creating, managing, and running Dart projects, including package management and development workflows\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/index.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `dart`: CLI for creating, formatting, analyzing, testing, and running Dart code\n* `webdev`: CLI for building and serving web apps\n* `dart run`: Command to run uncompiled Dart command-line apps\n* `dartaotruntime`: Runtime for running AOT snapshots\n```\n\n----------------------------------------\n\nTITLE: Invalid Method Override in Dart Class\nDESCRIPTION: Examples of invalid method overrides where parameter types don't match the parent class method signature\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/type_system/analyzer-results-stable.txt#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass NumberAdder {\n  num add(num a, num b) {}\n}\n\nclass MyAdder extends NumberAdder {\n  num add(int a, int b) {} // invalid override\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Local Path Dependency - YAML\nDESCRIPTION: This snippet shows how to define a local path dependency on the `transmogrify` package. It specifies that the package should be retrieved from a local directory, allowing for real-time changes during development.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  transmogrify:\n    path: /Users/me/transmogrify\n```\n\n----------------------------------------\n\nTITLE: Import Prefix Naming in Dart\nDESCRIPTION: Examples of proper lowercase_with_underscores naming for import prefixes in Dart code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math' as math;\nimport 'package:angular_components/angular_components.dart' as angular_components;\nimport 'package:js/js.dart' as js;\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK with Chocolatey in PowerShell\nDESCRIPTION: Command to install the Dart SDK using Chocolatey package manager. This requires elevated permissions in PowerShell.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/windows.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> choco install dart-sdk\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dependency on a Git Repository - YAML\nDESCRIPTION: This snippet demonstrates how to specify a dependency on a package stored in a Git repository. It uses the Git URL to clone the `kittens` package directly.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  kittens:\n    git: https://github.com/munificent/kittens.git\n```\n\n----------------------------------------\n\nTITLE: Specific Package Downgrade Example\nDESCRIPTION: Shows how to downgrade a specific package (test) while minimizing changes to other dependencies, including the resulting version changes and removed packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-downgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub downgrade test\nResolving dependencies...\n  barback 0.15.2+2\n  bot 0.27.0+2\n  browser 0.10.0+2\n  chrome 0.6.5\n  collection 1.1.0\n  path 1.3.0\n  pool 1.0.1\n  source_span 1.0.2\n< stack_trace 0.9.2 (was 1.1.1)\n  stagexl 0.10.2\n< test 0.10.0 (was 0.11.4)\nThese packages are no longer being depended on:\n- matcher 0.11.3\nChanged 3 dependencies!\n```\n\n----------------------------------------\n\nTITLE: Late Final Variables in Coffee Class\nDESCRIPTION: Shows how to combine late and final modifiers to create single-assignment fields with delayed initialization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nclass Coffee {\n  late final String _temperature;\n\n  void heat() { _temperature = 'hot'; }\n  void chill() { _temperature = 'iced'; }\n\n  String serve() => _temperature + ' coffee';\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dart Command-Line App with DevTools\nDESCRIPTION: This shell command starts a Dart command-line application with DevTools for debugging. The `dart run --observe` command opens the Dart VM service, enabling DevTools for debugging and performance profiling. The optional `--pause-isolates-on-start` flag pauses execution when the script starts. A unique DevTools URL is generated for each run, containing a security token.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-devtools.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd path/to/dart/app\n$ dart run --pause-isolates-on-start --observe main.dart\n\nThe Dart VM service is listening on http://127.0.0.1:8181/afZySiNbDPg=/\nThe Dart DevTools debugger and profiler is available at: http://127.0.0.1:8181/afZySiNbDPg=/devtools/#/?uri=ws%3A%2F%2F127.0.0.1%3A8181%2FafZySiNbDPg%3D%2Fws\n```\n\n----------------------------------------\n\nTITLE: Decoding UTF-8 Bytes in Dart\nDESCRIPTION: Demonstrates decoding UTF-8 encoded bytes into a Dart string using utf8.decode(). Shows conversion of a byte array representing internationalized text.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-convert.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nList<int> utf8Bytes = [\n  0xc3, 0x8e, 0xc3, 0xb1, 0xc5, 0xa3, 0xc3, 0xa9,\n  0x72, 0xc3, 0xb1, 0xc3, 0xa5, 0xc5, 0xa3, 0xc3,\n  0xae, 0xc3, 0xb6, 0xc3, 0xb1, 0xc3, 0xa5, 0xc4,\n  0xbc, 0xc3, 0xae, 0xc5, 0xbe, 0xc3, 0xa5, 0xc5,\n  0xa3, 0xc3, 0xae, 0xe1, 0xbb, 0x9d, 0xc3, 0xb1,\n];\n\nvar funnyWord = utf8.decode(utf8Bytes);\n\nassert(funnyWord == 'Îñţérñåţîöñåļîžåţîờñ');\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Worker Isolate in Dart\nDESCRIPTION: Implementation of the parseJson method that sends string messages to the worker isolate for processing. It uses a Completer to ensure that no messages are sent until the worker isolate is fully initialized and ready to receive them.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> parseJson(String message) async {\n  await _isolateReady.future;\n  _sendPort.send(message);\n}\n```\n\n----------------------------------------\n\nTITLE: NoSuchMethod Forwarder Conflict Resolution\nDESCRIPTION: Shows how to resolve type promotion issues when dealing with noSuchMethod forwarders in mock classes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:mockito/mockito.dart';\n\nclass Example {\n  final int? _i;\n  Example(this._i);\n}\n\nclass MockExample extends Mock implements Example {\n  @override\n  late final int? _i;\n}\n\nvoid f(Example x) {\n  if (x._i != null) {\n    int i = x._i; // OK\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing dart:html Import with package:web in Dart\nDESCRIPTION: Shows how to update imports when migrating from dart:html to package:web. This involves removing the dart:html import and adding the package:web import, typically with an alias for clarity.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:html' as html; // Remove\nimport 'package:web/web.dart' as web; // Add\n```\n\n----------------------------------------\n\nTITLE: Equality and Relational Operators\nDESCRIPTION: Shows the usage of equality and relational operators in Dart for comparing values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nassert(2 == 2);\nassert(2 != 3);\nassert(3 > 2);\nassert(2 < 3);\nassert(3 >= 3);\nassert(2 <= 3);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Analyzer Rules in YAML\nDESCRIPTION: Configuration to ignore specific analyzer rules using the analysis options file, in this case ignoring the TODO rule\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  errors:\n    todo: ignore\n```\n\n----------------------------------------\n\nTITLE: Verifying Dart Installation by Checking Version\nDESCRIPTION: Command to verify successful Dart SDK installation by checking the installed version. A properly installed SDK will return the version number and build information.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/windows.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> dart --version\nDart SDK version: 3.2.4 (stable) (Thu Dec 21 19:13:53 2023 +0000) on \"win_x64\"\n```\n\n----------------------------------------\n\nTITLE: Executing webdev Serve Command with Production Compiler\nDESCRIPTION: By adding the --release flag, this command runs webdev serve using the production compiler for optimized JavaScript output. It relaxes the requirement for Chrome by supporting other modern browsers as well.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ webdev serve --release  # uses production compiler\n```\n\n----------------------------------------\n\nTITLE: User Filtering Exercise with where() Method in Dart\nDESCRIPTION: Implements functions to filter users based on age and name length using the where() method\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nIterable<User> filterOutUnder21(Iterable<User> users) {\n  return users.where((user) => user.age >= 21);\n}\n\nIterable<User> findShortNamed(Iterable<User> users) {\n  return users.where((user) => user.name.length <= 3);\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Error Propagation with runZonedGuarded - Dart\nDESCRIPTION: Demonstrates that asynchronous errors generated within an error zone cannot leave the zone, even with an outer catchError. A future is completed within a runZonedGuarded call, containing a handler for domain-specific errors, to show how error propagation is restricted by zone boundaries.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/zones.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar completer = new Completer();\\nvar future = completer.future.then((x) => x + 1);\\nvar zoneFuture;\\nrunZonedGuarded(() {\\n  zoneFuture = future.then((y) => throw 'Inside zone');\\n}, (error) { print('Caught: $error'); });\\n\\nzoneFuture.catchError((e) { print('Never reached'); });\\ncompleter.complete(499);\n```\n\n----------------------------------------\n\nTITLE: Type Argument Inference in Dart\nDESCRIPTION: Illustrates how Dart infers type arguments for lists and mappings, providing type safety and consistency.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nList<int> listOfInt = [];\nvar listOfDouble = [3.0];\nvar ints = listOfDouble.map((x) => x.toInt());\n```\n\n----------------------------------------\n\nTITLE: Switching Dart Versions\nDESCRIPTION: Commands to switch between different installed versions of Dart SDK by unlinking the current version and linking the desired version.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ brew unlink dart@<old> \\\n  && brew unlink dart@<new> \\\n  && brew link dart@<new>\n```\n\n----------------------------------------\n\nTITLE: Implementing Predicate for singleWhere() in Dart\nDESCRIPTION: This code snippet is an exercise to implement the predicate function for the singleWhere() method, where the conditions include that an element contains the character 'a' and starts with 'M'. The function should return a single element from the Iterable that meets these criteria.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/collections/iterables.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nString singleWhere(Iterable<String> items) {\n  return items.singleWhere(TODO('Implement the outlined predicate.'));\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nString singleWhere(Iterable<String> items) {\n  return items.singleWhere(\n          (element) => element.startsWith('M') && element.contains('a'));\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Local API Documentation with dhttpd\nDESCRIPTION: This snippet shows how to use the `package:dhttpd` from pub.dev to serve locally generated API documentation. The commands activate the package globally and run it to serve the documentation, making it accessible through an HTTP server at a specified path.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-doc.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub global activate dhttpd\\n$ dart pub global run dhttpd --path doc/api\n```\n\n----------------------------------------\n\nTITLE: DartPad Online Code Editor\nDESCRIPTION: Web-based interactive environment for learning and experimenting with Dart syntax and language features without requiring local SDK installation\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[DartPad](/tools/dartpad) is a great, no-download-required way to learn Dart syntax and to experiment with Dart language features.\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPS Support for apt-get on Linux\nDESCRIPTION: Updates package index files and installs secure HTTP package support required for Dart SDK installation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install apt-transport-https\n```\n\n----------------------------------------\n\nTITLE: Assignment Operators in Dart\nDESCRIPTION: Illustrates basic assignment operators and compound assignment techniques in Dart, showing how to assign values and combine operations with assignment in a concise manner.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/operators.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar a = 2;\na *= 3;\nassert(a == 6);\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Dependencies in pubspec.yaml for Dart\nDESCRIPTION: This YAML snippet outlines the configuration of development dependencies in the pubspec.yaml file necessary for using webdev and build_runner in a Dart project. Ensure compatibility with specified versions and update dependencies using Dart pub.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  # ···\n  build_runner: ^2.4.13\n  build_test: ^2.2.2\n  build_web_compilers: ^4.0.11\n```\n\n----------------------------------------\n\nTITLE: Example Output of Dart Info on macOS\nDESCRIPTION: The snippet presents an example of the information displayed by the `dart info` command on macOS. It includes general info about Dart version and locale, and process info like memory and CPU usage. This output is primarily for demonstration purposes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-info.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#### General info\n\n- Dart 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on \"macos_arm64\"\n- on macos / Version 13.1 (Build 22C65)\n- locale is en-US\n\n#### Process info\n\n| Memory |   CPU | Elapsed time | Command line                      |\n| -----: | ----: | -----------: | ----------------------------------|\n| 253 MB | 49.7% |        00:00 | analysis_server.dart.snapshot ... |\n|  69 MB | 18.7% |        00:00 | dart analyze                      |\n```\n\n----------------------------------------\n\nTITLE: Local Variable Type Inference Failure Example in Dart\nDESCRIPTION: Demonstrates type inference issue where a variable is inferred as an int but is later assigned a double, causing a type error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar x = 3; // x is inferred as an int.\nx = 4.0;\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Pub Downgrade Command Syntax\nDESCRIPTION: Shows the basic command syntax for dart pub downgrade with optional flags for offline mode and dry-run operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-downgrade.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub downgrade [--[no-]offline] [-n|--dry-run] [dependencies...]\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Fields in Dart\nDESCRIPTION: Demonstrates how to define abstract fields in Dart interfaces using abstract classes. It shows the equivalence between field declarations and getter/setter pairs, and introduces the new explicit abstract field syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Cup {\n  Beverage contents;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Cup {\n  Beverage get contents;\n  set contents(Beverage);\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Cup {\n  abstract Beverage contents;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToModifiableConverter with RotConverter in Dart\nDESCRIPTION: This example demonstrates how to use `ToModifiableConverter` with `RotConverter` in a file encryption pipeline. It reads a file, transforms it using the fused converters, and writes the encrypted content to another file. The command-line arguments specify the input file, output file, and encryption key.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid main(List<String> args) {\n  String inFile = args[0];\n  String outFile = args[1];\n  int key = int.parse(args[2]);\n  new File(inFile)\n      .openRead()\n      .transform(\n          new ToModifiableConverter().fuse(new RotConverter(key)))\n      .pipe(new File(outFile).openWrite());\n}\n```\n\n----------------------------------------\n\nTITLE: Solution for Initializer Lists Exercise in Dart\nDESCRIPTION: The solution for the initializer list exercise, showing how to assign the first two characters of a word to class properties and implement an assertion to verify the word length is at least 2 characters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n  FirstTwoLetters(String word)\n      : assert(word.length >= 2),\n        letterOne = word[0],\n        letterTwo = word[1];\n```\n\n----------------------------------------\n\nTITLE: Running a Dart File\nDESCRIPTION: This example shows how to run a Dart file by specifying its relative path to the `dart run` command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run tool/debug.dart\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Raw Type Usage in Dart\nDESCRIPTION: This code illustrates how the analyzer warns about using raw types without explicit type arguments in Dart, which can lead to unexpected behaviors and runtime errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n[!List!] numbers = [1, 2, 3]; // List with raw type\nfor (final n in numbers) {\n  print(n.length); // Runtime error\n}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nwarning - The generic type 'List<dynamic>' should have explicit type arguments but doesn't - strict_raw_type\n```\n\n----------------------------------------\n\nTITLE: Creating Kernel Module with dart compile\nDESCRIPTION: Illustrates creating a portable Kernel module that can be run across different OS and architectures. These modules contain binary representation of the compiled source code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile kernel bin/myapp.dart\nCompiling bin/myapp.dart to kernel file bin/myapp.dill.\n$ dart run bin/myapp.dill\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Casts in Dart Analyzer\nDESCRIPTION: Configures the Dart analyzer to enable strict casts, helping to prevent problematic implicit downcasts from dynamic types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  language:\n    strict-casts: true\n```\n\n----------------------------------------\n\nTITLE: Limitations of Promoting Getters\nDESCRIPTION: This snippet explains why getters cannot be promoted, showing that only fields are eligible for promotion due to instability of getter values. It includes a solution that assigns the getter result to a local variable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nabstract class Example {\n  int? get _value => Random().nextBool() ? 123 : null;\n}\n\nvoid f(Example x) {\n  if (x._value != null) {\n    print(x._value.isEven); // ERROR\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Dependencies - Dart\nDESCRIPTION: Run this command in your app's top directory to fetch all necessary dependencies defined in your Dart app's configuration. It's essential to ensure all packages are ready for the app's operation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/debugging.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd example\n$ dart pub get\n```\n\n----------------------------------------\n\nTITLE: Running Dart Analyze Command\nDESCRIPTION: This command snippet demonstrates how to check the Dart code for analysis errors after making changes during the migration process. It's crucial to analyze the code to ensure sound null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze     # or `flutter analyze`\n```\n\n----------------------------------------\n\nTITLE: Multi-line Strings in Dart\nDESCRIPTION: Examples of creating multi-line strings using triple quotes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar s1 = '''\nYou can create\nmulti-line strings like this one.\n''';\n\nvar s2 = \"\"\"This is also a\nmulti-line string.\"\"\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating FutureOr Constraint in Dart\nDESCRIPTION: Depicts a Dart 2.6 behavior change where 'Null' is correctly deduced as a subtype of 'FutureOr<T>'. The closure '() {}' returns as 'Null'. The snippet highlights the refined type inference mechanism, using a closure returning 'Null' to print the determined type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\n\nvoid foo<T>(FutureOr<T> Function() f) { print(T); }\n\nmain() { foo(() {}); }\n```\n\n----------------------------------------\n\nTITLE: Modified RotConverter startChunkedConversion in Dart\nDESCRIPTION: This code snippet shows a modified `startChunkedConversion` method for the `RotConverter`. It checks if the sink is a `CipherSink` and, if not, wraps it in a `_CipherSinkAdapter`.  It always returns a _RotSink which allows for more efficient handling of modifiable data.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n  /// Works more efficiently if given a CipherSink as argument.\n  CipherSink startChunkedConversion(\n      ChunkedConversionSink<List<int>> sink) {\n    if (sink is! CipherSink) sink = new _CipherSinkAdapter(sink);\n    return new _RotSink(_key, sink);\n  }\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dart SDK\nDESCRIPTION: Removes Dart SDK installation using Homebrew.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ brew uninstall dart\n```\n\n----------------------------------------\n\nTITLE: FFigen Detailed Exclusion Configuration\nDESCRIPTION: YAML configuration showing granular control over excluded declarations\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  functions:\n    exclude:\n      - '.*'\n  structs:\n    exclude:\n      - '.*'\n  unions:\n    exclude:\n      - '.*'\n  globals:\n    exclude:\n      - '.*'\n  macros:\n    exclude:\n      - '.*'\n  enums:\n    exclude:\n      - '.*'\n  unnamed-enums:\n    exclude:\n      - '.*'\n```\n\n----------------------------------------\n\nTITLE: Previewing Proposed Changes with Dart Fix\nDESCRIPTION: This snippet demonstrates how to use the `--dry-run` flag with the `dart fix` command to preview proposed changes without applying them. It allows developers to review changes that will be made to the codebase.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-fix.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart fix --dry-run\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK on Windows using Chocolatey\nDESCRIPTION: Command to install Dart SDK using the Chocolatey package manager on Windows. Requires administrator privileges.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/get-sdk.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> choco install dart-sdk\n```\n\n----------------------------------------\n\nTITLE: Overly Complex Arrow Function in Dart\nDESCRIPTION: Demonstrates how arrow syntax can be misused for complex logic, creating hard-to-read code. This implementation of openChest is functionally equivalent to the block body version but much less readable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nTreasure? openChest(Chest chest, Point where) =>\n    _opened.containsKey(chest)\n        ? null\n        : _opened[chest] = (Treasure(where)..addAll(chest.contents));\n```\n\n----------------------------------------\n\nTITLE: Basic Generic List Usage in Dart\nDESCRIPTION: Demonstrates how to declare and use a generic List with type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar names = <String>[];\nnames.addAll(['Seth', 'Kathy', 'Lars']);\nnames.add(42); // Error\n```\n\n----------------------------------------\n\nTITLE: Run a Dart app\nDESCRIPTION: This shell command navigates to the application directory (`cli`) and executes the Dart program using the `dart run` command.  `dart run` uses the Dart VM to run the app, which is optimized for development.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ cd cli\\n$ dart run\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Definition for Dart Publishers\nDESCRIPTION: A markdown table that defines the three official Dart package publishers, their contents, quality levels, and community engagement expectations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-team-packages.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Publisher          | Package&nbsp;contents | Quality and completeness | Community&nbsp;engagement (issues, PRs) |\n|--------------------|------------------|--------------------------|------------------------------------|\\n| [dart.dev][]       | **Core packages.** Foundational packages that complement the [core libraries](/libraries). | High | **High.** Triaged on a regular basis. |\n| [tools.dart.dev][] | **Tooling packages.** Used by the Dart team to build various Dart tools. Can be used for building other tools, but the support commitment is lower than for core packages. | Medium | **Medium-low.** Triaged occasionally; unable to respond to all issues. |\n| [labs.dart.dev][]  | **Experimental packages.** Shared for early feedback. Some will likely be discontinued. | Low/incomplete | **Varying.** No promises; maintained on a best-effort basis. |\n```\n\n----------------------------------------\n\nTITLE: Analyzer Configuration - Strict Casts & Raw Types\nDESCRIPTION: This snippet demonstrates the new analyzer configuration options for strict casts and raw types, which replace the deprecated `implicit-casts` and `implicit-dynamic` options in Dart 3.  Using these settings enables stricter type checking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"analyzer:\\n  language:\\n    strict-casts: true\\n    strict-raw-types: true\"\n```\n\n----------------------------------------\n\nTITLE: Major Version Dependency Updates\nDESCRIPTION: Console commands for upgrading dependencies including major version changes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade --major-versions\n$ dart analyze      # This should pass without errors.\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Application Project in Dart\nDESCRIPTION: Demonstrates creating a web application project using the web template with dart create command\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-create.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart create -t web my_web_app\n```\n\n----------------------------------------\n\nTITLE: Using the Never Type for Unreachable Code - Dart\nDESCRIPTION: This snippet shows how to use the 'Never' type in Dart to indicate that a function will never return successfully, enhancing reachability analysis.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nNever wrongType(String type, Object value) {\n  throw ArgumentError('Expected $type, but was ${value.runtimeType}.');\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Changes with dash_site\nDESCRIPTION: Checks the documentation and example code for compliance with site standards.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./dash_site check-all\n```\n\n----------------------------------------\n\nTITLE: Good Tear-off Examples\nDESCRIPTION: Demonstrates proper usage of function and method tear-offs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Function tear-off\ncharCodes.forEach(print);\n\n// Method tear-off\ncharCodes.forEach(buffer.write);\n```\n\n----------------------------------------\n\nTITLE: Markdown Tip Block with Dart CLI Reference\nDESCRIPTION: A markdown tip block containing information about Dart command-line tools with an internal documentation link.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/tools/dart-tool-note.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\nTo learn more information about this and other `dart` commands,\ncheck out the [Dart command-line tool page](/tools/dart-tool).\n:::\n```\n\n----------------------------------------\n\nTITLE: Updating pubspec.yaml with SDK Constraint and Resolution\nDESCRIPTION: This snippet demonstrates how to set the SDK constraint and specify the resolution method in the existing package pubspec.yaml files. This ensures that each package adheres to the SDK version and uses the workspace resolution strategy.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/workspaces.md#2025-04-21_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nenvironment:\n  sdk: ^3.6.0\nresolution: workspace\n```\n\n----------------------------------------\n\nTITLE: Null Check Function Example - Good\nDESCRIPTION: Demonstrates proper nullable variable usage without explicit null initialization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nItem? bestDeal(List<Item> cart) {\n  Item? bestItem;\n\n  for (final item in cart) {\n    if (bestItem == null || item.price < bestItem.price) {\n      bestItem = item;\n    }\n  }\n\n  return bestItem;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Global Properties and Functions\nDESCRIPTION: Example of JavaScript code that defines a global property 'name' with a string value and a global function 'isNameEmpty' that checks if the name's length is zero.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nglobalThis.name = 'global';\nglobalThis.isNameEmpty = function() {\n  return globalThis.name.length == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Code Analysis Options\nDESCRIPTION: Options controlling code analysis behavior including warning handling, diagnostic display, and code generation restrictions. Includes CSP compliance and debug info generation capabilities.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/tools/dart-compile-js-options.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--fatal-warnings\n--enable-diagnostic-colors\n--show-package-warnings\n--csp\n--dump-info\n```\n\n----------------------------------------\n\nTITLE: Compile-time Constants in Dart\nDESCRIPTION: Example of declaring numeric compile-time constants.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nconst msPerSecond = 1000;\nconst secondsUntilRetry = 5;\nconst msUntilRetry = secondsUntilRetry * msPerSecond;\n```\n\n----------------------------------------\n\nTITLE: Conditional Element Visibility in Dart\nDESCRIPTION: Set the visibility of elements based on the user's operating system using dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst osList = ['macos', 'windows', 'linux'];\nfinal userOs = determineUserOs();\n\n// For each possible OS...\nfor (final os in osList) {\n  // Matches user OS?\n  bool shouldShow = (os == userOs);\n\n  // Find all elements with class=os. For example, if\n  // os == 'windows', call querySelectorAll('.windows')\n  // to find all elements with the class \"windows\".\n  // Note that '.$os' uses string interpolation.\n  for (final elem in querySelectorAll('.$os')) {\n    elem.hidden = !shouldShow; // Show or hide.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Name Property\nDESCRIPTION: Shows how to access the string name of an enum value using the .name property.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/enums.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nprint(Color.blue.name); // 'blue'\n```\n\n----------------------------------------\n\nTITLE: Removing Dart Configuration Files\nDESCRIPTION: Removes all Dart-related configuration files from the user's home directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nrm -rf  ~/.dart*\n```\n\n----------------------------------------\n\nTITLE: JS Library Namespacing\nDESCRIPTION: Example of namespacing an entire library with @JS() to add prefixes to all interop members and types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@JS('library1')\nlibrary;\n\nimport 'dart:js_interop';\n\n@JS()\nexternal void method();\n\nextension type JSType._(JSObject _) implements JSObject {\n  external JSType();\n\n  external static int get staticMember;\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Downcast Example (With Null Safety)\nDESCRIPTION: This snippet demonstrates the need for an explicit downcast when passing an `Object` to a function expecting a `String` after null safety was introduced. The `as String` cast is now required to avoid a compile-time error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nvoid requireStringNotObject(String definitelyString) {\n  print(definitelyString.length);\n}\n\nvoid main() {\n  Object maybeString = 'it is';\n  requireStringNotObject(maybeString as String);\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Dart Information from Command Line\nDESCRIPTION: The snippet shows the use of the `dart info` command in the console to output general information about Dart tools and processes. Executing this command provides insights such as installed Dart version and running processes. It's useful for debugging tooling issues.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-info.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart info\n```\n\n----------------------------------------\n\nTITLE: Migrating Non-Nullable Fields in Dart Constructor\nDESCRIPTION: Demonstrates how to refactor a constructor to initialize non-nullable fields with values, moving computations to static initializers or using late final for fields that can't be immediately initialized.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Initialized with values\nfinal ListQueue _context = ListQueue<dynamic>();\nfinal Float32List _buffer = Float32List.fromList([0.0, 0.0]);\nfinal dynamic _readObject;\n\nVec2D(Map<String, dynamic> object) : _readObject = object['container'];\n```\n\n----------------------------------------\n\nTITLE: Updating Submodules in Git\nDESCRIPTION: Updates the submodules of the Dart website repository if it was cloned without them.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Configuring jnigen in YAML\nDESCRIPTION: YAML configuration for jnigen specifying output path, source path, and target Java classes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/java-interop.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noutput:\n  dart:\n    path: lib/example.dart\n    structure: single_file\n\nsource_path:\n  - 'java/'\nclasses:\n  - 'dev.dart.Example'\n```\n\n----------------------------------------\n\nTITLE: Firebase Deployment\nDESCRIPTION: Command to deploy the built site to Firebase hosting.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: terminal\nCODE:\n```\nfirebase deploy --only hosting\n```\n\n----------------------------------------\n\nTITLE: Removing HTTP Package Example\nDESCRIPTION: Demonstrates removing the 'http' package dependency from a Dart project. This command removes http from either dependencies or dev_dependencies in pubspec.yaml and then runs dart pub get.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-remove.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub remove http\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK\nDESCRIPTION: Installs the latest version of Dart SDK using Homebrew.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ brew install dart\n```\n\n----------------------------------------\n\nTITLE: Defining analysis options for linter rules in YAML\nDESCRIPTION: This snippet shows how to enable a specific linter rule by adding its name to the 'analysis_options.yaml' configuration file in a Dart project. It provides two methods for configuration: a list format and a map format.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/linter-rules/individual-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nlinter:\n  rules:\n    - {{lint.name}}\n```\n\nLANGUAGE: YAML\nCODE:\n```\nlinter:\n  rules:\n    {{lint.name}}: true\n```\n\n----------------------------------------\n\nTITLE: Preventing Overwrite of Dart Files During Formatting - Console\nDESCRIPTION: This snippet illustrates how to execute the `dart format` command without overwriting original Dart files. The `-o` flag allows users to specify different output options like previewing changes or viewing changes in JSON format.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart format -o show bin/my_app.dart\n```\n\n----------------------------------------\n\nTITLE: Explicit Cast for Generic Type Assignment\nDESCRIPTION: Demonstrates using an explicit cast to assign an Animal list to a Cat list, which passes static analysis but may fail at runtime\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nList<Animal> myAnimals = ...;\nList<Cat> myCats = myAnimals as List<Cat>;\n```\n\n----------------------------------------\n\nTITLE: Widget Documentation Example in Dart\nDESCRIPTION: Demonstrates concise vs redundant documentation for widget methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass RadioButtonWidget extends Widget {\n  /// Sets the tooltip to [lines].\n  ///\n  /// The lines should be word wrapped using the current font.\n  void tooltip(List<String> lines) {\n    ...\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass RadioButtonWidget extends Widget {\n  /// Sets the tooltip for this radio button widget to the list of strings in\n  /// [lines].\n  void tooltip(List<String> lines) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Literals in Dart\nDESCRIPTION: Shows how to use collection literals to create lists, sets, and maps in Dart. This is the recommended approach for creating collections when possible.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nvar list = [1, 2, 3]; // List literal\nvar set = {1, 2, 3}; // Set literal\nvar map = {'a': 1, 'b': 2}; // Map literal\n```\n\n----------------------------------------\n\nTITLE: Variable Documentation Examples in Dart\nDESCRIPTION: Shows proper documentation for different types of variables including booleans and non-booleans.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n/// The current day of the week, where `0` is Sunday.\nint weekday;\n\n/// The number of checked buttons on the page.\nint get checkedCount => ...\n```\n\nLANGUAGE: dart\nCODE:\n```\n/// Whether the modal is currently displayed to the user.\nbool isVisible;\n\n/// Whether the modal should confirm the user's intent on navigation.\nbool get shouldConfirm => ...\n\n/// Whether resizing the current browser window will also resize the modal.\nbool get canResize => ...\n```\n\n----------------------------------------\n\nTITLE: Using dart doc Command in Markdown\nDESCRIPTION: This snippet demonstrates the usage of the dart doc command, which is used to generate API documentation for Dart packages. It's referenced in the context of preparing a package for publishing and ensuring documentation quality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[`dart doc`]\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Program in the Current Package\nDESCRIPTION: This example shows how to run a specific program (e.g., `bin/baz.dart`) in the current package when the program name doesn't match the package name.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run :baz\"\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Interop Type with External Methods in Dart\nDESCRIPTION: An example of an extension type for a Date object that implements JSObject with an external method that invokes a JavaScript method on the underlying JS value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/mock.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nextension type Date(JSObject _) implements JSObject {\n  external int getDay();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dart JS Compiler Options\nDESCRIPTION: Core compilation options including output file specification, assertion checking, and optimization levels. Each optimization level (-O0 through -O4) provides different tradeoffs between performance, file size, and type safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/tools/dart-compile-js-options.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-o <file> or --output=<file>\n--enable-asserts\n-O{0|1|2|3|4}\n--no-source-maps\n-h or --help\n```\n\n----------------------------------------\n\nTITLE: Synchronous Function Declaration\nDESCRIPTION: A simple synchronous function that returns a String directly.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/async.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nString lookUpVersion() => '1.0.0';\n```\n\n----------------------------------------\n\nTITLE: VS Code launch configuration with environment declarations\nDESCRIPTION: Demonstrates how to configure environment declarations in a VS Code launch configuration (`launch.json`) using the `toolArgs` key. It adds a `--define` option to specify the DEBUG environment variable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/core/environment-declarations.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n    \\\"configurations\\\": [{\\n        \\\"name\\\": \\\"Dart\\\",\\n        \\\"request\\\": \\\"launch\\\",\\n        \\\"type\\\": \\\"dart\\\",\\n        \\\"toolArgs\\\": [\\n          \\\"--define=DEBUG=true\\\"\\n        ]\\n    }]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirecting Constructors in Dart\nDESCRIPTION: Example of redirecting constructors in Dart that delegate to other constructors in the same class. Shows how to create specialized constructors that call the main constructor or another named constructor with predefined values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass Automobile {\n  String make;\n  String model;\n  int mpg;\n\n  // The main constructor for this class.\n  Automobile(this.make, this.model, this.mpg);\n\n  // Delegates to the main constructor.\n  Automobile.hybrid(String make, String model) : this(make, model, 60);\n\n  // Delegates to a named constructor\n  Automobile.fancyHybrid() : this.hybrid('Futurecar', 'Mark 2');\n}\n```\n\n----------------------------------------\n\nTITLE: Importing dart:math in Dart\nDESCRIPTION: This snippet demonstrates how to import the dart:math library in a Dart application to access mathematical functions and constants. No additional dependencies are required. The single input is the import statement, and it does not produce a direct output.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-math.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Library Part Reference\nDESCRIPTION: Shows the discouraged way of referencing a library using library names in part of directives.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\npart of my_library;\n```\n\n----------------------------------------\n\nTITLE: Declaring Top-Level Variables with Initialization - Dart\nDESCRIPTION: This snippet demonstrates how to declare top-level and static variables in Dart with required initializers using null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Using null safety:\nint topLevel = 0;\n\nclass SomeClass {\n  static int staticField = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Unmodifiable View Classes in dart:typed_data (Dart)\nDESCRIPTION: This snippet documents the deprecation of unmodifiable view classes in the `dart:typed_data` library. Instead of using the constructors of these classes, developers are advised to use the new `asUnmodifiableView` methods on typed data lists.  This change is being introduced to improve consistency and future compatibility.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n\t[The unmodifiable view classes for typed data are deprecated][53128].\n\tInstead of using the constructors of these classes, use\n\tthe new `asUnmodifiableView` methods on typed data lists.\n```\n\n----------------------------------------\n\nTITLE: Exhaustiveness Checking Example in Dart\nDESCRIPTION: Shows non-exhaustive switch on nullable boolean demonstrating compile-time checking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nswitch (nullableBool) {\n  case true:\n    print('yes');\n  case false:\n    print('no');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: Creates a new branch in Git for making changes to the Dart website repository.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b <BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Using isA for Type Checking JS Values\nDESCRIPTION: Shows how to use the isA helper function to check the type of JS values in a type-safe manner.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(JSAny a) {\n  if (a.isA<JSString>()) {} // `typeofEquals('string')`\n  if (a.isA<JSArray>()) {} // `instanceOfString('Array')`\n  if (a.isA<CustomInteropType>()) {} // `instanceOfString('CustomInteropType')`\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Todo Annotation in Dart\nDESCRIPTION: Shows how to apply the custom @Todo annotation to a function, providing developer and task information.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@Todo('Dash', 'Implement this function')\nvoid doSomething() {\n  print('Do something');\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Dart Null Checks to JavaScript\nDESCRIPTION: The production JavaScript compiler encodes null checks in an optimized manner. If a Dart operation following a null check naturally raises an error on null, the compiler skips the check for efficiency. This encoding includes unguarded property accesses, preserving performance while ensuring logical equivalence with Dart source.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nP.print(a.foo$0());\n```\n\nLANGUAGE: javascript\nCODE:\n```\na.toString;\nP.print(1);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nP.print(a.x + 1);\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Type Promotion\nDESCRIPTION: Shows how type promotion fails in switch statements with labels that create loops, and provides a solution by moving null checks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int i, int? j, int? k) {\n  if (j == null) return;\n  switch (i) {\n    label:\n    case 0:\n      print(j.isEven); // ERROR\n      j = k;\n      continue label;\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int i, int? j, int? k) {\n  switch (i) {\n    label:\n    case 0:\n      if (j == null) return;\n      print(j.isEven);\n      j = k;\n      continue label;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Port Closure Implementation\nDESCRIPTION: Implements proper port closure functionality to clean up resources when the worker is no longer needed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass Worker {\n  bool _closed = false;\n  // ···\n  void close() {\n    if (!_closed) {\n      _closed = true;\n      _commands.send('shutdown');\n      if (_activeRequests.isEmpty) _responses.close();\n      print('--- port closed --- ');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Dependency on a Specific Git Commit - YAML\nDESCRIPTION: This snippet shows how to depend on a specific branch of a Git repository for the `kittens` package, allowing for targeted version management during development.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  kittens:\n    git:\n      url: git@github.com/munificent/kittens.git\n      ref: some-branch\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Exports\nDESCRIPTION: Shows how to conditionally export different implementations based on platform availability using dart.library checks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nexport 'src/hw_none.dart' // Stub implementation\n    if (dart.library.io) 'src/hw_io.dart' // dart:io implementation\n    if (dart.library.js_interop) 'src/hw_web.dart'; // package:web implementation\n```\n\n----------------------------------------\n\nTITLE: Generic Cache Interface\nDESCRIPTION: Shows how to implement a generic cache interface with type parameter T.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/generics.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nabstract class Cache<T> {\n  T getByKey(String key);\n  void setByKey(String key, T value);\n}\n```\n\n----------------------------------------\n\nTITLE: Const Variable Declaration in Dart\nDESCRIPTION: Creating compile-time constant variables with arithmetic operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nconst bar = 1000000; // Unit of pressure (dynes/cm2)\nconst double atm = 1.01325 * bar; // Standard atmosphere\n```\n\n----------------------------------------\n\nTITLE: Typed Variable Pattern Example in Dart\nDESCRIPTION: Demonstrates type checking in variable patterns.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nswitch ((1, 2)) {\n  // Does not match.\n  case (int a, String b): // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Cast between JS and Dart Types\nDESCRIPTION: Shows an incorrect cast between a JS type (JSString) and a Dart type (String).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(JSString s) {\n  s as String;\n}\n```\n\n----------------------------------------\n\nTITLE: Path and Environment Configuration Options\nDESCRIPTION: Options for specifying package resolution paths and environment declarations. Includes package configuration file path and environment variable definitions accessible through Dart's environment constants.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/tools/dart-compile-js-options.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--packages=<path>\n-D<flag>=<value>\n--version\n```\n\n----------------------------------------\n\nTITLE: Creating ButtonItem List with Constructor in Dart\nDESCRIPTION: This snippet demonstrates how to create a list of ButtonItem objects using the constructor of the ButtonItem type (class or extension type).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<ButtonItem> buttons =  [\n  ButtonItem(\n    label: \"Button I\",\n    icon: const Icon(Icons.upload_file),\n    onPressed: () => print(\"Action -> Button I\"),\n  ),\n  ButtonItem(\n    label: \"Button II\",\n    icon: const Icon(Icons.info),\n    onPressed: () => print(\"Action -> Button II\"),\n  )\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Metadata Annotation in Dart\nDESCRIPTION: Demonstrates how to define a custom @Todo annotation class with two parameters for tracking development tasks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Todo {\n  final String who;\n  final String what;\n\n  const Todo(this.who, this.what);\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Switch Pattern Matching\nDESCRIPTION: Demonstrates various pattern matching techniques in a switch statement including constant, range, and record patterns.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nswitch (obj) {\n  // Matches if 1 == obj.\n  case 1:\n    print('one');\n\n  // Matches if the value of obj is between the\n  // constant values of 'first' and 'last'.\n  case >= first && <= last:\n    print('in range');\n\n  // Matches if obj is a record with two fields,\n  // then assigns the fields to 'a' and 'b'.\n  case (var a, var b):\n    print('a = $a, b = $b');\n\n  default:\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP and HTTPS URIs in Dart\nDESCRIPTION: Demonstrates using the Uri.http and Uri.https factory constructors to create URIs with HTTP and HTTPS schemes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nvar httpUri = Uri.http('example.org', '/foo/bar', {'lang': 'dart'});\nvar httpsUri = Uri.https('example.org', '/foo/bar', {'lang': 'dart'});\n\nassert(httpUri.toString() == 'http://example.org/foo/bar?lang=dart');\nassert(httpsUri.toString() == 'https://example.org/foo/bar?lang=dart');\n```\n\n----------------------------------------\n\nTITLE: Avoiding Lambdas When Tear-Offs Would Suffice in Dart\nDESCRIPTION: Shows the verbose and less efficient approach of using lambdas where tear-offs would be cleaner. This is the counterexample to the best practice of using tear-offs.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nvar charCodes = [68, 97, 114, 116];\nvar buffer = StringBuffer();\n\n// Function:\ncharCodes.forEach((code) {\n  print(code);\n});\n\n// Method:\ncharCodes.forEach((code) {\n  buffer.write(code);\n});\n\n// Named constructor:\nvar strings = charCodes.map((code) => String.fromCharCode(code));\n\n// Unnamed constructor:\nvar buffers = charCodes.map((code) => StringBuffer(code));\n```\n\n----------------------------------------\n\nTITLE: Excluding files from analysis - YAML\nDESCRIPTION: This YAML configuration demonstrates how to exclude specific files from static analysis by specifying them in the analyzer options.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  exclude:\n    - lib/client.dart\n    - lib/server/*.g.dart\n    - test/_data/**\n```\n\n----------------------------------------\n\nTITLE: Evaluating Precision Differences in Numeric Expressions in Dart\nDESCRIPTION: This code demonstrates various numeric expressions using the dart:math library's power function to illustrate precision differences between native and web platforms. It shows calculations with large integers where precision differences become apparent, particularly after 2^53 on web platforms.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/number-representation.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nmath.pow(2, 53) - 1\nmath.pow(2, 53)\nmath.pow(2, 53) + 1\nmath.pow(2, 62)\nmath.pow(2, 63) - 1\nmath.pow(2, 63)\nmath.pow(2, 64)\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations in Dart\nDESCRIPTION: Examples of using bitwise operators for bit manipulation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nassert((3 << 1) == 6); // 0011 << 1 == 0110\nassert((3 | 4) == 7); // 0011 | 0100 == 0111\nassert((3 & 4) == 0); // 0011 & 0100 == 0000\n```\n\n----------------------------------------\n\nTITLE: Firebase Authentication Check\nDESCRIPTION: Command to verify Firebase login status and authenticate if needed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: terminal\nCODE:\n```\nfirebase login\n```\n\n----------------------------------------\n\nTITLE: Including Project Information in Dart Info Output\nDESCRIPTION: This snippet suggests how to include project-specific details in the output of `dart info` by executing the command in a directory containing a `pubspec.yaml` file. Additional details, such as SDK constraints and dependencies, will be available.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-info.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n#### Project info\n\n- sdk constraint: '>=2.19.2 <3.0.0'\n- dependencies: path\n- dev_dependencies: lints, test\n```\n\n----------------------------------------\n\nTITLE: Creating JIT Module with dart compile\nDESCRIPTION: Shows how to compile a Dart file to a JIT snapshot. JIT modules include pre-compiled classes and code for faster startup.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile jit-snapshot bin/myapp.dart\nCompiling bin/myapp.dart to jit-snapshot file bin/myapp.jit.\nHello world!\n$ dart run bin/myapp.jit\nHello world!\n\n```\n\n----------------------------------------\n\nTITLE: Handling Event Target Detection in Dart\nDESCRIPTION: Shows how to identify the original element that triggered an event using e.target property.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\ndocument.body!.onClick.listen((e) {\n  final clickedElem = e.target;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling individual linter rules - YAML\nDESCRIPTION: This configuration shows how to disable specific linter rules in the analysis options file using a key-value pair syntax for rules.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:lints/recommended.yaml\n\nlinter:\n  rules:\n    avoid_shadowing_type_parameters: false\n    await_only_futures: true\n```\n\n----------------------------------------\n\nTITLE: Dart Analyze Error Due to Language Version\nDESCRIPTION: Shows an example of a Dart analysis error indicating that the language version is too low for null safety support. It suggests removing the language version override and migrating the code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze .\nAnalyzing ....                         0.6s\n\n  error • lib/pkg1.dart:1:1 • The language version must be >=2.12.0. \n  Try removing the language version override and migrating the code.\n  • illegal_language_version_override\n```\n\n----------------------------------------\n\nTITLE: Setting Exit Codes for Formatting Changes - Console\nDESCRIPTION: This snippet explains how to make `dart format` return an exit code based on whether changes occurred during formatting. It is useful for integrating with CI systems to trigger actions based on the formatting outcome.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart format -o none --set-exit-if-changed bin/my_app.dart\n```\n\n----------------------------------------\n\nTITLE: Excluding API Documentation Directory in Dart Projects\nDESCRIPTION: Documentation directory generated by dart doc command that should be excluded from source control.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/private-files.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndoc/api/\n```\n\n----------------------------------------\n\nTITLE: Setting Exit Codes in a Dart CLI Application Error Handler\nDESCRIPTION: This snippet demonstrates how to handle errors in a Dart CLI application by setting an exit code. The _handleError function checks if the path is a directory and displays an error message, otherwise it sets the exit code to 2 to indicate an error occurred during execution.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _handleError(String path) async {\n  if (await FileSystemEntity.isDirectory(path)) {\n    stderr.writeln('error: $path is a directory');\n  } else {\n    exitCode = 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Class with Objective-C Compatibility\nDESCRIPTION: Demonstrates how to create a Swift class that can be used with Objective-C by using @objc annotation and inheriting from NSObject. Includes a basic method and property implementation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\n@objc public class SwiftClass: NSObject {\n  @objc public func sayHello() -> String {\n    return \"Hello from Swift!\";\n  }\n\n  @objc public var someField = 123;\n}\n```\n\n----------------------------------------\n\nTITLE: If-Case Pattern Matching in Dart\nDESCRIPTION: Shows how to use if-case for pattern matching with a list pattern extracting coordinates.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/branches.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nif (pair case [int x, int y]) return Point(x, y);\n```\n\n----------------------------------------\n\nTITLE: Using RotConverter with addModifiable in Dart\nDESCRIPTION: This example demonstrates how to use the `RotConverter` with the `addModifiable` method. It creates a `ChunkedConversionSink` to print the chunks, a `RotConverter`, and then calls `addModifiable` on the sink. This avoids allocating new lists for the individual chunks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var outSink = new ChunkedConversionSink.withCallback((chunks) {\n    print(chunks); // [[31, 32, 33], [24, 25, 26]]\n  });\n  var inSink = new RotConverter(30).startChunkedConversion(outSink);\n  inSink.addModifiable([1, 2, 3]);\n  inSink.addModifiable([250, 251, 252]);\n  inSink.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Async Identifier in Dart\nDESCRIPTION: Exemplifies Dart 2.4 allowing reserved keywords like 'async' as identifiers within specific function paradigms. Demonstrates a structural constraint in type variable usage and highlights code that is no longer valid due to interface covariance enforcement.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass A<X> {};\nclass B<X> extends A<void Function(X)> {};\n```\n\n----------------------------------------\n\nTITLE: Prod Dependencies with Dart Pub Get - Console\nDESCRIPTION: Demonstrates running 'dart pub get --enforce-lockfile' to ensure production dependencies comply strictly with versions and hashes defined in the pubspec.lock file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get --enforce-lockfile\nResolving dependencies... \nDownloading packages... \n~ retry 3.1.2 (was 3.1.2)\nThe existing content-hash from pubspec.lock doesn't match contents for:\n * retry-3.1.2 from \"https://pub.dev\"\n\nThis indicates one of:\n * The content has changed on the server since you created the pubspec.lock.\n * The pubspec.lock has been corrupted.\n\nFor more information see:\nhttps://dart.dev/go/content-hashes\nWould change 1 dependency.\nUnable to satisfy `pubspec.yaml` using `pubspec.lock`.\n\nTo update `pubspec.lock` run `dart pub get` without `--enforce-lockfile`.\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries from Packages - Dart\nDESCRIPTION: Demonstrates the import statements for incorporating libraries from packages using the 'package:' prefix. Highlights the need to use the package_config.json file for mapping.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:js/js.dart' as js;\nimport 'package:intl/intl.dart';\n```\n\n----------------------------------------\n\nTITLE: Formatting Comments as Sentences in Dart\nDESCRIPTION: Demonstrates proper comment formatting using sentence capitalization and punctuation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Not if anything comes before it.\nif (_chunks.isNotEmpty) return false;\n```\n\n----------------------------------------\n\nTITLE: Handling Uncaught Exceptions with Future.sync() in Dart\nDESCRIPTION: This code snippet demonstrates how 'Future.sync()' can be used to wrap the function body to ensure that no synchronous error is accidentally thrown, thus allowing all errors to be handled using 'catchError()'. This approach protects against uncaught exceptions by encapsulating the code block within 'Future.sync()'.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> parseAndRead(Map<String, dynamic> data) {\n  return Future.sync(() {\n    final filename = obtainFilename(data); // Could throw.\n    final file = File(filename);\n    return file.readAsString().then((contents) {\n      return parseFileData(contents); // Could throw.\n    });\n  });\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  parseAndRead(data).catchError((e) {\n    print('Inside catchError');\n    print(e);\n    return -1;\n  });\n}\n\n// Program Output:\n//   Inside catchError\n//   <error from obtainFilename>\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nFuture fragileFunc() {\n  return Future.sync(() {\n    final x = someFunc(); // Unexpectedly throws in some rare cases.\n    var y = 10 / x; // x should not equal 0.\n    ...\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Resolution\nDESCRIPTION: Example showing how to disable automatic package resolution after download using the --no-resolve flag.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-unpack.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub unpack http --no-resolve\n```\n\n----------------------------------------\n\nTITLE: Part File Reference Using URI String\nDESCRIPTION: Demonstrates the recommended way to reference the parent library file using a URI string in the part of directive.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\npart of '../../my_library.dart';\n```\n\n----------------------------------------\n\nTITLE: Static Type Tests with Extension Types in Dart\nDESCRIPTION: This code snippet explores static type tests on integers using the `NumberE` extension type to show how type checks behave. It confirms that at compile time, extension types are detected and interact with types based on compile-time checks, demonstrating the duality of an extension type's identity.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-types.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  int i = 2;\n  if (i is NumberE) print(\"It is\"); // Prints 'It is'.\n  if (i case NumberE v) print(\"value: ${v.value}\"); // Prints 'value: 2'.\n  switch (i) {\n    case NumberE(:var value): print(\"value: $value\"); // Prints 'value: 2'.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Iterable Casting Bug (Without Null Safety)\nDESCRIPTION: This snippet highlights a common bug where `.where()` returns an `Iterable`, which causes a runtime error when implicitly cast to a `List`. Null safety enforces correct return types, converting this into a compile-time error.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Without null safety:\nList<int> filterEvens(List<int> ints) {\n  return ints.where((n) => n.isEven);\n}\n```\n\n----------------------------------------\n\nTITLE: Unnamed Libraries in Dart 2.19\nDESCRIPTION: This Dart code snippet demonstrates the support for unnamed libraries introduced in Dart 2.19. It shows how to write a library directive without a name, which is now the recommended approach for adding library-level documentation and annotations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n/// A really great test library.\n@TestOn('browser')\nlibrary;\n```\n\n----------------------------------------\n\nTITLE: Adding ffigen Dev Dependency\nDESCRIPTION: Command to add package:ffigen as a development dependency to the project\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add --dev ffigen\n```\n\n----------------------------------------\n\nTITLE: Dart Array Operator Implementation\nDESCRIPTION: Example of implementing JavaScript array access operators in Dart using extension types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nextension type Array(JSArray<JSNumber> _) implements JSArray<JSNumber> {\n  external JSNumber operator [](int index);\n  external void operator []=(int index, JSNumber value);\n}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern Matching in Dart\nDESCRIPTION: Shows how to use wildcard patterns as placeholders in destructuring and type checking scenarios.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nvar list = [1, 2, 3];\nvar [_, two, _] = list;\n```\n\nLANGUAGE: dart\nCODE:\n```\nswitch (record) {\n  case (int _, String _):\n    print('First field is int and second is String.');\n}\n```\n\n----------------------------------------\n\nTITLE: Assuming String Type with Dynamic Downcast in Dart\nDESCRIPTION: Defines a method `assumeString` that implicitly downcasts a dynamic object to a String and returns its length, throwing a TypeError if the object is not of type String.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/type-system.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nint assumeString(dynamic object) {\n  String string = object!; // Check at run time that `object` is a `String`.\n  return string.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Method Cascades for Element Creation in Dart\nDESCRIPTION: Create and configure DOM elements more concisely using method cascades in dart:html.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar message =\n    DivElement()\n      ..id = 'message2'\n      ..text = 'Please subscribe to the Dart mailing list.';\n```\n\n----------------------------------------\n\nTITLE: Web Package Directory Structure\nDESCRIPTION: Shows the standard directory structure for a Dart web package, with the main entry point and supporting files placed under the 'web' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  web/\n    index.html\n    main.dart\n    style.css\n```\n\n----------------------------------------\n\nTITLE: Basic dart pub deps Command Usage\nDESCRIPTION: Shows the basic command syntax for running dart pub deps with optional parameters for style, dev dependencies, and executables.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-deps.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub deps [--style=<style>] [--[no-]dev] [--executables]\n```\n\n----------------------------------------\n\nTITLE: Error Handling for File Operations in Dart\nDESCRIPTION: Demonstrates how to handle errors when reading file contents using try-catch blocks with async/await to prevent uncaught exceptions when file operations fail.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-io.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  var config = File('config.txt');\n  try {\n    var contents = await config.readAsString();\n    print(contents);\n  } catch (e) {\n    print(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relational Pattern Example in Dart\nDESCRIPTION: Implements character type checking using relational patterns to match ASCII character ranges.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/pattern-types.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nString asciiCharType(int char) {\n  const space = 32;\n  const zero = 48;\n  const nine = 57;\n\n  return switch (char) {\n    < space => 'control',\n    == space => 'space',\n    > space && < zero => 'punctuation',\n    >= zero && <= nine => 'digit',\n    _ => '',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Complete Path Info in Dart Info\nDESCRIPTION: The command shown here allows users to display complete file paths and path dependencies in the diagnostic output using the `--no-remove-file-paths` option with `dart info`. This provides a fuller context for debugging purposes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-info.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart info --no-remove-file-paths\n```\n\n----------------------------------------\n\nTITLE: List Manipulation with Spread Operator in Flutter\nDESCRIPTION: Showcases Dart 2.3 enhancements for list operations through the spread operator, facilitating descriptive UI assembly in Flutter applications. This pattern simplifies the decomposition and recomposition of list elements programmatically.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Column(children: [\n    Header(),\n    ...buildMainElements(),\n    Footer(),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Record Shape and Equality\nDESCRIPTION: Demonstrates record equality comparison based on shape and values\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n(int x, int y, int z) point = (1, 2, 3);\n(int r, int g, int b) color = (1, 2, 3);\n\nprint(point == color); // Prints 'true'.\n```\n\n----------------------------------------\n\nTITLE: Early Error Registration with Futures in Dart\nDESCRIPTION: This optimized version ensures that the 'catchError()' handler is appropriately registered by calling 'asyncErrorFunction()' inside the 'Future.delayed()' callback, thus avoiding unhandled errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Future.delayed(const Duration(milliseconds: 500), () {\n    asyncErrorFunction()\n        .then(...)\n        .catchError(...); // We get here.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Example Dart Pub Downgrade Output\nDESCRIPTION: Demonstrates the output of running dart pub downgrade command, showing how it resolves and downgrades multiple dependencies to their lowest compatible versions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-downgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub downgrade\nResolving dependencies... (1.2s)\n+ barback 0.13.0\n+ collection 0.9.1\n+ path 1.2.0\n+ source_maps 0.9.0\n+ source_span 1.0.0\n+ stack_trace 0.9.1\nChanged 6 dependencies!\n```\n\n----------------------------------------\n\nTITLE: Sending Data via WebSocket in Dart\nDESCRIPTION: Shows how to send string data through a WebSocket connection.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-html.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nws.send('Hello from Dart!');\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticated Proxy Environment Variables\nDESCRIPTION: Commands to set proxy environment variables with credentials for pub on different operating systems\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ export https_proxy=username:password@hostname:port\n```\n\nLANGUAGE: cmd\nCODE:\n```\n$ set https_proxy=username:password@hostname:port\n```\n\nLANGUAGE: ps\nCODE:\n```\n$ $Env:https_proxy=\"username:password@hostname:port\"\n```\n\n----------------------------------------\n\nTITLE: Export Section Ordering in Dart\nDESCRIPTION: Examples of correct and incorrect placement of export directives relative to imports.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'src/error.dart';\nimport 'src/foo_bar.dart';\n\nexport 'src/error.dart';\n```\n\nLANGUAGE: dart\nCODE:\n```\nimport 'src/error.dart';\nexport 'src/error.dart';\nimport 'src/foo_bar.dart';\n```\n\n----------------------------------------\n\nTITLE: Switch Case Pattern Migration\nDESCRIPTION: Example of using const prefix in switch cases to maintain pre-Dart 3 behavior.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\ncase const [1, 2]:\ncase const {'k': 'v'}:\ncase const {1, 2}:\ncase const Point(1, 2):\n```\n\n----------------------------------------\n\nTITLE: Running Dart Test Command\nDESCRIPTION: This command snippet shows how to run tests on the Dart code after it has passed static analysis. Testing is important to confirm that the code behaves as expected after migration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ dart test       # or `flutter test`\n```\n\n----------------------------------------\n\nTITLE: Creating AOT Snapshot Using Dart Compile Command\nDESCRIPTION: This snippet demonstrates how to create an AOT snapshot from a Dart application file using the `dart compile` command. It requires the Dart SDK to be installed and correctly configured.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dartaotruntime.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile aot-snapshot bin/myapp.dart\n```\n\n----------------------------------------\n\nTITLE: Getting Help for dartaotruntime Command\nDESCRIPTION: This snippet illustrates how to access help information for the dartaotruntime command by using the `--help` flag. It is useful for discovering additional options and usage instructions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dartaotruntime.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dartaotruntime --help\n```\n\n----------------------------------------\n\nTITLE: Dart Import with Prefix Example\nDESCRIPTION: This snippet demonstrates how to reference library members that are imported with a prefix. It shows how to use the prefix `math` to reference the `max` function from the `dart:math` library, along with the standard `List` class reference.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/doc-comments/references.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nimport 'dart:math' as math;\n\n/// [List] is in scope.\n/// So is [math.max].\nint x = 7;\n```\n```\n\n----------------------------------------\n\nTITLE: Record Type Inference\nDESCRIPTION: Shows how the type system handles different field types in records\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n(num, Object) pair = (42, 'a');\n\nvar first = pair.$1; // Static type `num`, runtime type `int`.\nvar second = pair.$2; // Static type `Object`, runtime type `String`.\n```\n\n----------------------------------------\n\nTITLE: Non-Promotable Public Fields\nDESCRIPTION: This snippet highlights that only private fields can be promoted due to potential mutations from external libraries. It shows the suggested solution of making the field private.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Example {\n  final int? value;\n  Example(this.value);\n}\n\nvoid test(Example x) {\n  if (x.value != null) {\n    print(x.value + 1); // ERROR\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Text to a File in Dart Using writeAsString()\nDESCRIPTION: This snippet demonstrates writing text to a file using the writeAsString() method. It shows how to append content to an existing file by specifying FileMode.append.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal quotes = File('quotes.txt');\nconst stronger = 'That which does not kill us makes us stronger. -Nietzsche';\n\nawait quotes.writeAsString(stronger, mode: FileMode.append);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Byte Rotating Converter in Dart\nDESCRIPTION: Defines a RotConverter class that rotates bytes by a given key for encryption, using the Dart Convert library. The key is an essential parameter, and convert method adjusts byte values. The class facilitates byte manipulation, taking a list of integers as input and outputting an encrypted list. It introduces basic encryption without additional dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\n/// A simple extension of Rot13 to bytes and a key.\nclass RotConverter extends Converter<List<int>, List<int>> {\n  final _key;\n  const RotConverter(this._key);\n\n  List<int> convert(List<int> data, { int key }) {\n    if (key == null) key = this._key;\n    var result = new List<int>(data.length);\n    for (int i = 0; i < data.length; i++) {\n      result[i] = (data[i] + key) % 256;\n    }\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hosted Dependencies\nDESCRIPTION: Shows how to add dependencies from a package server using the older command-line option syntax.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add \"foo:{hosted: my-pub.dev}\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Dart Test Command\nDESCRIPTION: This snippet demonstrates how to access help information regarding the 'dart test' command, which provides more details about command-line options and functionality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-test.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart test --help\n```\n\n----------------------------------------\n\nTITLE: Named Parameters Function Call\nDESCRIPTION: Shows how to call a function using named parameters in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nenableFlags(bold: true, hidden: false);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Type Extension Method Error Example in Dart\nDESCRIPTION: Shows how extension methods fail when used with dynamic types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ndynamic d = '2';\nprint(d.parseInt()); // Runtime exception: NoSuchMethodError\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Language Version in Dart\nDESCRIPTION: Exemplifies language version control in Dart with constraints specified in 'pubspec.yaml'. The snippet defines a default language version for package development, indicating compatibility with Dart 2.18.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.18.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Using ButtonItem Records in Widget Creation in Dart\nDESCRIPTION: This snippet shows how to use the ButtonItem records to create a list of Container widgets. It demonstrates accessing the properties of the ButtonItem record.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nList<Container> widget = [\n  for (var button in buttons)\n    Container(\n      margin: const EdgeInsets.all(4.0),\n      child: OutlinedButton.icon(\n        onPressed: button.onPressed,\n        icon: button.icon,\n        label: Text(button.label),\n      ),\n    ),\n];\n```\n\n----------------------------------------\n\nTITLE: Simplified Map Entry Pattern Matching\nDESCRIPTION: Shows a simplified syntax for pattern matching MapEntry objects using shorthand notation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/patterns.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfor (var MapEntry(:key, value: count) in hist.entries) {\n  print('$key occurred $count times');\n}\n```\n\n----------------------------------------\n\nTITLE: Valid External Declaration with Interop Type\nDESCRIPTION: Illustrates a valid external declaration using a custom interop type that implements JSObject.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nextension type InteropType(JSObject _) implements JSObject {}\n\n@JS()\nexternal InteropType get interopType;\n```\n\n----------------------------------------\n\nTITLE: Running Dart Analyzer\nDESCRIPTION: Executes static analysis on all Dart files within the current directory. It reports errors and warnings as failures, but not info-level issues by default.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-analyze.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze\n```\n\n----------------------------------------\n\nTITLE: Internal Tools Directory Structure\nDESCRIPTION: Illustrates the directory structure for internal helper scripts used during package development, placed in the 'tool' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  tool/\n    generate_docs.dart\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Patterns for URL Exclusions\nDESCRIPTION: Collection of regular expression patterns defining URLs and patterns to exclude. Includes patterns for localhost test ports, GitHub/Twitter rate-limited sites, CSS assets, font services, and redirect paths.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/tool/config/linkcheck-skip-list.txt#2025-04-21_snippet_0\n\nLANGUAGE: regexp\nCODE:\n```\nlocalhost:(404\\d|8080)\n127.0.0.1:(404\\d|8080)\nhttps://github.com\nhttps://twitter.com\n/assets/css/main.css\nfonts.gstatic.com\nfonts.googleapis.com\ngithub.com/dart-lang/site-www/issues/new\n/jobs\n/go/.*?\n```\n\n----------------------------------------\n\nTITLE: List Creation and Type Preservation in Dart\nDESCRIPTION: Shows different approaches to creating Lists from Iterables and their impact on type preservation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar copy1 = iterable.toList();\nvar copy2 = List.from(iterable);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar iterable = [1, 2, 3];\n\n// Prints \"List<int>\":\nprint(iterable.toList().runtimeType);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar numbers = [1, 2.3, 4]; // List<num>.\nnumbers.removeAt(1); // Now it only contains integers.\nvar ints = List<int>.from(numbers);\n```\n\n----------------------------------------\n\nTITLE: Solution for Factory Constructor Exercise in Dart\nDESCRIPTION: The solution for the factory constructor exercise, showing how to implement a factory method that creates different IntegerHolder subclasses based on the length of the input list using a switch statement.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n  switch (list.length) {\n    case 1:\n      return IntegerSingle(list[0]);\n    case 2:\n      return IntegerDouble(list[0], list[1]);\n    case 3:\n      return IntegerTriple(list[0], list[1], list[2]);\n    default:\n      throw ArgumentError(\"List must between 1 and 3 items. This list was ${list.length} items.\");\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Dart Migrate Tool\nDESCRIPTION: Demonstrates how to use the `dart migrate` tool to migrate existing Dart code to use null safety. It involves navigating to the application directory and running the `dart migrate` command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_app\n$ dart migrate\n```\n\n----------------------------------------\n\nTITLE: Naming Default Timeout Variable in Dart\nDESCRIPTION: Examples showing proper vs improper naming conventions in Dart, avoiding Hungarian notation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ndefaultTimeout\n```\n\nLANGUAGE: dart\nCODE:\n```\nkDefaultTimeout\n```\n\n----------------------------------------\n\nTITLE: Symbol Literals in Dart\nDESCRIPTION: Demonstrates the syntax for creating symbol literals in Dart, which are used to represent identifiers that remain stable even after code minification.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n#radix\n#bar\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable JS Values\nDESCRIPTION: Demonstrates how to declare an external getter that can return a JS object, null, or undefined, which are all mapped to nullable types in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal JSObject? get value;\n```\n\n----------------------------------------\n\nTITLE: Dart Analyzer with Fatal Infos\nDESCRIPTION: Runs the analyzer and treats info-level issues as fatal errors, causing the analysis to fail if any info-level issues are found. This provides stricter code quality enforcement.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-analyze.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze --fatal-infos\n```\n\n----------------------------------------\n\nTITLE: Changing Return Types of utf8.encode() and Utf8Codec.encode() (Dart)\nDESCRIPTION: This snippet highlights the change in return types for the `utf8.encode()` and `Utf8Codec.encode()` methods in the `dart:convert` library. The return type has been updated from `List<int>` to `Uint8List`.  This change likely aims to improve performance and memory efficiency by using a more specialized data structure.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n\t[Changed return types of `utf8.encode()` and `Utf8Codec.encode()`][52801]\n from `List<int>` to `Uint8List`.\n```\n\n----------------------------------------\n\nTITLE: Local Function Write Capture Issue\nDESCRIPTION: Demonstrates type promotion failure when a variable is write-captured by a local function, with solutions including restructuring, local variables, and null assertions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  var foo = () {\n    i = j;\n  };\n  // ... Use foo ... \n  if (i == null) return; // (1)\n  // ... Additional code ...\n  print(i.isEven);       // (2) ERROR\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  if (i == null) return; // (1)\n  // ... Additional code ...\n  print(i.isEven); // (2) OK\n  var foo = () {\n    i = j;\n  };\n  // ... Use foo ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  var foo = () {\n    i = j;\n  };\n  // ... Use foo ...\n  var i2 = i;\n  if (i2 == null) return; // (1)\n  // ... Additional code ...\n  print(i2.isEven); // (2) OK because `i2` isn't write captured.\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  var foo = () {\n    i = j;\n  };\n  // ... Use foo ...\n  if (i == null) return; // (1)\n  // ... Additional code ...\n  print(i!.isEven); // (2) OK due to `!` check.\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Git Options\nDESCRIPTION: Illustrates the older command-line options for specifying git repository dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add http --git-url=https://github.com/my/http.git\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add http --git-url=https://github.com/my/http.git --git-ref=tmpfixes\n```\n\n----------------------------------------\n\nTITLE: Complete Package Information Retrieval and Display Application in Dart\nDESCRIPTION: A complete Dart application that fetches package information for 'http' and 'path' packages, parses the JSON responses, and displays the information. Includes a PackageInfo class with a fromJson factory constructor for JSON deserialization and error handling with custom exceptions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\nimport 'package:http/http.dart' as http;\n\nvoid main() async {\n  await printPackageInformation('http');\n  print('');\n  await printPackageInformation('path');\n}\n\nFuture<void> printPackageInformation(String packageName) async {\n  final PackageInfo packageInfo;\n\n  try {\n    packageInfo = await getPackage(packageName);\n  } on PackageRetrievalException catch (e) {\n    print(e);\n    return;\n  }\n\n  print('Information about the $packageName package:');\n  print('Latest version: ${packageInfo.latestVersion}');\n  print('Description: ${packageInfo.description}');\n  print('Publisher: ${packageInfo.publisher}');\n\n  final repository = packageInfo.repository;\n  if (repository != null) {\n    print('Repository: $repository');\n  }\n}\n\nFuture<PackageInfo> getPackage(String packageName) async {\n  final packageUrl = Uri.https('dart.dev', '/f/packages/$packageName.json');\n  final packageResponse = await http.get(packageUrl);\n\n  // If the request didn't succeed, throw an exception\n  if (packageResponse.statusCode != 200) {\n    throw PackageRetrievalException(\n      packageName: packageName,\n      statusCode: packageResponse.statusCode,\n    );\n  }\n\n  final packageJson = json.decode(packageResponse.body) as Map<String, dynamic>;\n\n  return PackageInfo.fromJson(packageJson);\n}\n\nclass PackageInfo {\n  final String name;\n  final String latestVersion;\n  final String description;\n  final String publisher;\n  final Uri? repository;\n\n  PackageInfo({\n    required this.name,\n    required this.latestVersion,\n    required this.description,\n    required this.publisher,\n    this.repository,\n  });\n\n  factory PackageInfo.fromJson(Map<String, dynamic> json) {\n    final repository = json['repository'] as String?;\n\n    return PackageInfo(\n      name: json['name'] as String,\n      latestVersion: json['latestVersion'] as String,\n      description: json['description'] as String,\n      publisher: json['publisher'] as String,\n      repository: repository != null ? Uri.tryParse(repository) : null,\n    );\n  }\n}\n\nclass PackageRetrievalException implements Exception {\n  final String packageName;\n  final int? statusCode;\n\n  PackageRetrievalException({required this.packageName, this.statusCode});\n\n  @override\n  String toString() {\n    final buf = StringBuffer();\n    buf.write('Failed to retrieve package:$packageName information');\n\n    if (statusCode != null) {\n      buf.write(' with a status code of $statusCode');\n    }\n\n    buf.write('!');\n    return buf.toString();\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Parse Extension Usage in Dart\nDESCRIPTION: Demonstrates basic usage of an extension method by importing and using parseInt() on a String.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'string_apis.dart';\n\nvoid main() {\n  print('42'.parseInt()); // Use an extension method.\n}\n```\n\n----------------------------------------\n\nTITLE: _CipherSinkAdapter Implementation in Dart\nDESCRIPTION: This code defines a `_CipherSinkAdapter` class that implements the `CipherSink` interface. It wraps a `ChunkedConversionSink` and forwards the `add` and `addModifiable` calls to the underlying sink. This allows existing sinks to be used with the `CipherSink` interface.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass _CipherSinkAdapter implements CipherSink {\n  ChunkedConversionSink<List<int>, List<int>> sink;\n  _CipherSinkAdapter(this.sink);\n\n  void add(data) { sink.add(data); }\n  void addModifiable(data) { sink.add(data); }\n  void close() { sink.close(); }\n}\n```\n\n----------------------------------------\n\nTITLE: NativeCallable.nativeFunction Behavior Change (Dart)\nDESCRIPTION: This snippet describes a change in the behavior of `NativeCallable.nativeFunction` in `dart:ffi`.  Now, if the receiver is already closed, calls to this method will throw an error instead of returning `nullptr`.  This enhancement provides more explicit error handling and prevents potential undefined behavior.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n\t[Changed `NativeCallable.nativeFunction` so calls now throw an error if\n\tthe receiver is already closed][53311], instead of returning `nullptr`.\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Package Version\nDESCRIPTION: Example of adding a specific version of a package to the cache using the --version constraint option.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-cache.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub cache add http --version \"0.12.2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Converter Implementation in Dart\nDESCRIPTION: This snippet shows the minimal implementation of a Converter in Dart, focusing on the convert method that defines the transformation from source type S to target type T. It sets a foundation for creating more complex converters that allow for data transformation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nT convert(S input);  // where T is the target and S the source type.\n```\n\n----------------------------------------\n\nTITLE: Keyword Table Generation Template\nDESCRIPTION: Liquid template code that generates an HTML table displaying keywords in a 4-column layout. Each keyword is rendered as a link with appropriate annotation based on its type (contextual, built-in, or unrestricted).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/keywords.md#2025-04-21_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% tablerow keyword in keywords cols: 4 %}\n<a href=\"{{keyword.link}}\">{{keyword.term}}</a>\n{%- case keyword.type %}\n{% when 'bit' %}{{bii}}\n{% when 'context' %}{{ckw}}\n{% when 'unrestricted' %}{{unr}}\n{% endcase %}\n{% endtablerow %}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Directory Structure\nDESCRIPTION: Shows the organization for performance benchmarks in a Dart package, placing them in a dedicated 'benchmark' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  benchmark/\n    make_lunch.dart\n```\n\n----------------------------------------\n\nTITLE: Example CHANGELOG.md Format\nDESCRIPTION: Sample CHANGELOG.md file showing the recommended format for documenting version changes, including breaking changes and upgrade instructions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# 1.0.1\n\n* Fixed missing exclamation mark in `sayHi()` method.\n\n# 1.0.0\n\n* **Breaking change:** Removed deprecated `sayHello()` method.\n* Initial stable release.\n\n## Upgrading from 0.1.x\n\nChange all calls to `sayHello()` to instead be to `sayHi()`.\n\n# 0.1.1\n\n* Deprecated the `sayHello()` method; use `sayHi()` instead.\n\n# 0.1.0\n\n* Initial development release.\n```\n\n----------------------------------------\n\nTITLE: Running Analysis and Tests Script\nDESCRIPTION: Command for running the analyzer and tests across all examples.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/README.md#2025-04-21_snippet_2\n\nLANGUAGE: terminal\nCODE:\n```\n./tool/analyze-and-test-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Handling Default List Constructor Error in Dart\nDESCRIPTION: When enabling null safety in Dart, the default List constructor is removed to avoid lists initialized with null values. The recommended alternative is to use List.filled with a specified default value. This change ensures that lists are populated with meaningful default values, preventing runtime null errors.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nThe default 'List' constructor isn't available when null safety is enabled. #default_list_constructor\n```\n\n----------------------------------------\n\nTITLE: JS Date Type Renaming\nDESCRIPTION: Shows how to rename JavaScript Date type in Dart interop code using @JS annotation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@JS('Date')\nextension type JSDate._(JSObject _) implements JSObject {\n  external JSDate();\n\n  external static int now();\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Write Capture Issues in Dart Closures\nDESCRIPTION: This snippet shows how write-capturing a variable outside multiple closures prevents type promotion. The solution is to create a local variable inside the closure where promotion is needed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  var foo = () {\n    if (i == null) return;\n    print(i.isEven); // ERROR\n  };\n  var bar = () {\n    i = j;\n  };\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(int? i, int? j) {\n  var foo = () {\n    var i2 = i;\n    if (i2 == null) return;\n    print(i2.isEven); // OK because i2 is local to this closure.\n  };\n  var bar = () {\n    i = j;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK on Mac using Homebrew\nDESCRIPTION: Commands to install the Dart SDK on macOS using the Homebrew package manager. Includes adding the Dart tap and installing the SDK.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/get-sdk.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ brew tap dart-lang/dart\n$ brew install dart\n```\n\n----------------------------------------\n\nTITLE: Converting JSNumber to Dart Integer\nDESCRIPTION: Shows the conversion of a JSNumber to a Dart integer using the toDartInt property.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nJSNumber jsNum = ...;\nint integer = jsNum.toDartInt;\n```\n\n----------------------------------------\n\nTITLE: Configuring Formatter Page Width in YAML - YAML\nDESCRIPTION: This snippet provides an example of how to configure the formatter's page width in the `analysis_options.yaml` file for Dart projects. The configuration can be applied to the entire package and can be overridden for individual files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nformatter:\n  page_width: 123\n```\n\n----------------------------------------\n\nTITLE: Migrating Nullable Getter in Dart built_value Class\nDESCRIPTION: Shows how to update a nullable getter in a built_value class to use the new null safety syntax, removing the @nullable annotation and using the ? operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint? get count; //  Variable initialized with ?\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Package in Dart\nDESCRIPTION: This snippet shows how to import the http package for making HTTP requests in Dart applications. It demonstrates importing with an optional library prefix for better scope management.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/fetch-data.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\n```\n\n----------------------------------------\n\nTITLE: Handling Type Inference in Dart Collections\nDESCRIPTION: This snippet highlights a warning about type inference failure on a Map collection literal, suggesting the use of explicit type arguments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/analysis/analyzer-results-beta.txt#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nlib/strict_modes.dart:22:17 - The type argument(s) of 'Map' can't be inferred. Use explicit type argument(s) for 'Map'.\n```\n\n----------------------------------------\n\nTITLE: Listing Workspace Packages with Dart Commands\nDESCRIPTION: This command is used to list all the packages that belong to the Dart workspace, helping developers manage and understand their package layout efficiently.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/workspaces.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub workspace list\nPackage         Path                      \n_               ./                        \nclient_package  packages/client_package/  \nserver_package  packages/server_package/  \nshared          packages/shared/\n```\n\n----------------------------------------\n\nTITLE: Dart Pub Global Activate Command Syntax\nDESCRIPTION: Shows the full syntax for the dart pub global activate command with all available options\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-global.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ndart pub global activate [--noexecutables] [--executable=<name>] [--overwrite] <package> [version-constraint]\n```\n\n----------------------------------------\n\nTITLE: Declaring a Hosted Package Dependency - YAML\nDESCRIPTION: This snippet specifies a dependency on a hosted package using the Dart pubspec.yaml format. It indicates that any version of `transmogrify` from 1.4.0 to just below 2.0.0 is acceptable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  transmogrify: ^1.4.0\n```\n\n----------------------------------------\n\nTITLE: Basic Package Download Example\nDESCRIPTION: Demonstrates downloading the latest stable version of package:http from pub.dev to the current directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-unpack.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub unpack http\n```\n\n----------------------------------------\n\nTITLE: Documenting Library Types with Noun Phrases\nDESCRIPTION: Example showing how to document a class using noun phrases to describe instances of the type.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n/// A chunk of non-breaking output text terminated by a hard or soft newline.\n///\n/// ...\nclass Chunk {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Individual File Page Width for Dart Formatting - Dart\nDESCRIPTION: This snippet demonstrates how to set a specific formatting width for an individual Dart file using a marker comment at the top of the file. It allows for customization beyond the global configuration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// dart format width=123\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Pub Outdated Command Usage\nDESCRIPTION: Basic command syntax for running dart pub outdated with optional parameters\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-outdated.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub outdated [options]\n```\n\n----------------------------------------\n\nTITLE: Publishing Configuration for Custom Repository\nDESCRIPTION: Shows how to configure a package for publishing to a custom repository using pubspec.yaml.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: example_package\nversion: 1.0.0\n# Ensures the package is published to https://dart-packages.example.com\npublish_to: https://dart-packages.example.com\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Terminal\nDESCRIPTION: Commands for running both VM and browser tests for Dart examples.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/README.md#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd examples/misc\n$ dart pub get\n$ dart test  # Run VM tests\n$ dart test -p chrome  # Run browser tests\n```\n\n----------------------------------------\n\nTITLE: Building URIs from Components in Dart\nDESCRIPTION: Shows how to construct a Uri object by specifying individual components like scheme, host, path, and query parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nvar uri = Uri(\n  scheme: 'https',\n  host: 'example.org',\n  path: '/foo/bar',\n  fragment: 'frag',\n  queryParameters: {'lang': 'dart'},\n);\nassert(uri.toString() == 'https://example.org/foo/bar?lang=dart#frag');\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables\nDESCRIPTION: Commands to set proxy environment variables for pub on different operating systems\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ export https_proxy=hostname:port\n```\n\nLANGUAGE: cmd\nCODE:\n```\n$ set https_proxy=hostname:port\n```\n\nLANGUAGE: ps\nCODE:\n```\n$ $Env:https_proxy=\"hostname:port\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World in Dart\nDESCRIPTION: Basic Hello World program showing the main() function, which is the entry point of every Dart application.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  print('Hello, World!');\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Time Class Implementation\nDESCRIPTION: JavaScript class definition for a Time object with hours and minutes properties, static members, and utility methods. Includes constructor, getters/setters, and a dinner time checker.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass Time {\n  constructor(hours, minutes) {\n    this._hours = Math.abs(hours) % 24;\n    this._minutes = arguments.length == 1 ? 0 : Math.abs(minutes) % 60;\n  }\n\n  static dinnerTime = new Time(18, 0);\n\n  static getTimeDifference(t1, t2) {\n    return new Time(t1.hours - t2.hours, t1.minutes - t2.minutes);\n  }\n\n  get hours() {\n    return this._hours;\n  }\n\n  set hours(value) {\n    this._hours = Math.abs(value) % 24;\n  }\n\n  get minutes() {\n    return this._minutes;\n  }\n\n  set minutes(value) {\n    this._minutes = Math.abs(value) % 60;\n  }\n\n  isDinnerTime() {\n    return this.hours == Time.dinnerTime.hours && this.minutes == Time.dinnerTime.minutes;\n  }\n}\n// Need to expose the type to the global scope.\nglobalThis.Time = Time;\n```\n\n----------------------------------------\n\nTITLE: Manual JavaScript Interop Mocking in Dart\nDESCRIPTION: A simple but error-prone way to mock JS object methods by setting properties on a JSObject to converted Dart callbacks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/mock.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal date = Date(JSObject());\ndate['getDay'] = (() => 0).toJS;\n```\n\n----------------------------------------\n\nTITLE: Checking macOS SDK Version\nDESCRIPTION: Command to verify the installed macOS SDK version using xcodebuild\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ xcodebuild -showsdks\n```\n\n----------------------------------------\n\nTITLE: Dart Analyzer with Specific Directory\nDESCRIPTION: Analyzes all Dart files within the specified `bin` directory. Useful for isolating analysis to a specific part of the project's source code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-analyze.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart analyze bin\n```\n\n----------------------------------------\n\nTITLE: Creating AOT Module and Running It\nDESCRIPTION: Generates an AOT snapshot and runs it using dartaotruntime. This method is efficient for command-line apps requiring reduced disk space.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile aot-snapshot bin/myapp.dart\nGenerated: /Users/me/myapp/bin/myapp.aot\n$ dartaotruntime bin/myapp.aot\n\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary pub.dev Token\nDESCRIPTION: Command to generate and add a temporary authentication token for pub.dev using the service account credentials.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud auth print-identity-token \\\n  --audiences=https://pub.dev \\\n  | dart pub token add https://pub.dev\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Assertion (Native Incompatible) - Dart\nDESCRIPTION: This code snippet demonstrates an assertion that might pass on native platforms but fail on the web due to differences in string representation of numbers. Specifically, it checks if a string created using interpolation of a double value is equal to a string with a decimal place, which is how native represents it.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/number-representation.md#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nvoid main() {\n  var count = 10.0 * 2;\n  var message = \"$count cows\";\n  if (message != \"20.0 cows\") throw Exception(\"Unexpected: $message\");\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Constructor Parameters in Dart\nDESCRIPTION: Shows how to declare nullable instance variables that don't require initialization in the constructor.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/constructors.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass PointD {\n  double? x; // null if not set in constructor\n  double? y; // null if not set in constructor\n\n  // Generative constructor with initializing formal parameters\n  PointD(this.x, this.y);\n\n  @override\n  String toString() {\n    return 'PointD($x,$y)';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Solution for Named Constructor Exercise in Dart\nDESCRIPTION: The solution for implementing the Color.black named constructor, showing how to initialize all color values to zero using an initializer list.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nColor.black() : red = 0, green = 0, blue = 0;\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Dart Versions\nDESCRIPTION: Displays information about installed Dart SDK versions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/macos.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ brew info dart\n```\n\n----------------------------------------\n\nTITLE: Executing webdev Serve Command with Debugging\nDESCRIPTION: This command runs webdev serve with the --debug flag, enabling Dart DevTools for enhanced debugging. It requires necessary Dart DevTools dependencies to be installed and primarily targets Chrome.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/webdev.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ webdev serve --debug  # enables Dart DevTools\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable Token Authentication\nDESCRIPTION: Demonstrates how to set up token authentication using environment variables for CI environments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token add https://dart-packages.example.com --env-var MY_SECRET_TOKEN\nRequests to \"https://dart-packages.example.com\" will now be authenticated using the secret token stored in the environment variable \"MY_SECRET_TOKEN\".\n```\n\n----------------------------------------\n\nTITLE: Custom GitHub Actions Workflow for Package Publishing\nDESCRIPTION: Alternative GitHub Actions workflow for publishing packages with custom build or generation steps. Uses manual configuration for dependency installation and publishing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Publish to pub.dev\n\non:\n  push:\n    tags:\n    - 'v[0-9]+.[0-9]+.[0-9]+'\n\njobs:\n  publish:\n    permissions:\n      id-token: write\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: dart-lang/setup-dart@v1\n      - name: Install dependencies\n        run: dart pub get\n      - name: Publish\n        run: dart pub publish --force\n```\n\n----------------------------------------\n\nTITLE: Hello World in DartPad\nDESCRIPTION: This snippet demonstrates a simple \"Hello, World!\" program in Dart using DartPad. It initializes a main function that prints the greeting to the console. The code can be directly executed within the DartPad environment.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n\"void main() {\\n  print('Hello, World!');\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Running Analyzer Commands in Terminal\nDESCRIPTION: Example commands for running the Dart analyzer on specific examples.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ cd examples/misc\n$ dart pub get\n$ dart analyze .\n```\n\n----------------------------------------\n\nTITLE: Nullable Variable Declaration in Dart\nDESCRIPTION: Examples showing how to declare nullable variables with the ? operator and proper null safety enforcement.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// TODO: Declare the two variables here\n\n// Tests your solution (Don't edit!):\nvoid main() {\n  try {\n    if (name == 'Jane' && address == null) {\n      // Verify that \"name\" is nullable.\n      name = null;\n      print('Success!');\n    } else {\n      print('Not quite right, try again!');\n    }\n  } catch (e) {\n    print('Exception: ${e.runtimeType}');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding Full URIs in Dart\nDESCRIPTION: Demonstrates how to encode and decode fully qualified URIs while preserving special URI characters using encodeFull() and decodeFull().\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nvar uri = 'https://example.org/api?foo=some message';\n\nvar encoded = Uri.encodeFull(uri);\nassert(encoded == 'https://example.org/api?foo=some%20message');\n\nvar decoded = Uri.decodeFull(encoded);\nassert(uri == decoded);\n```\n\n----------------------------------------\n\nTITLE: Multi-level JS Namespacing\nDESCRIPTION: Demonstrates using multiple namespace levels with @JS() for libraries and types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/usage.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@JS('library1.library2')\nlibrary;\n\nimport 'dart:js_interop';\n\n@JS('library3.method')\nexternal void method();\n\n@JS('library3.JSType')\nextension type JSType._(JSObject _) implements JSObject {\n  external JSType();\n}\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Getters and Setters in Dart Box Class\nDESCRIPTION: Demonstrates unnecessary use of getters and setters when direct field access would suffice. This pattern, common in Java and C#, is not necessary in Dart since fields and accessors are indistinguishable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  Object? _contents;\n  Object? get contents => _contents;\n  set contents(Object? value) {\n    _contents = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating pubspec_overrides.yaml for Independent Resolution\nDESCRIPTION: This YAML snippet is used to temporarily reset the resolution settings for a package, allowing for independent resolution of dependencies outside of its workspace context.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/workspaces.md#2025-04-21_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n# packages/client_package/pubspec_overrides.yaml\nresolution:\n\n```\n\n----------------------------------------\n\nTITLE: Using Swift Bindings in Dart\nDESCRIPTION: Example of how to use the generated Dart bindings to interact with the Swift class, including object creation and method calls.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ffi';\nimport 'swift_api_bindings.dart';\n\nvoid main() {\n  final lib = SwiftLibrary(DynamicLibrary.open('libswiftapi.dylib'));\n  final object = SwiftClass.new1(lib);\n  print(object.sayHello());\n  print('field = ${object.someField}');\n  object.someField = 456;\n  print('field = ${object.someField}');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up build_runner in pubspec.yaml\nDESCRIPTION: The snippet adds build_runner as a dev dependency in a Dart project's pubspec.yaml file. This setup is required to use build_runner's capabilities for Dart code management tasks. The build_test dependency is optional for writing tests.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/build_runner.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  # ···\n  build_runner: ^2.4.13\n  build_test: ^2.2.2\n```\n\n----------------------------------------\n\nTITLE: Defining Dev Dependencies in YAML\nDESCRIPTION: Shows how to specify dev dependencies in a pubspec.yaml file. Dev dependencies are only used during development and are not included in dependent packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/dependencies.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  test: ^1.25.0\n```\n\n----------------------------------------\n\nTITLE: Removing Single Token Credential\nDESCRIPTION: Example showing how to remove a single authentication token.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-token.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token remove https://other-package-repo.com\nRemoved secret token for package repository: https://other-package-repo.com\n```\n\n----------------------------------------\n\nTITLE: Package Executable Configuration\nDESCRIPTION: Shows how to configure package executables in pubspec.yaml for command-line accessibility\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-global.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: helloworld\n\nexecutables:\n  helloworld:\n```\n\n----------------------------------------\n\nTITLE: Enum Usage Example in Dart\nDESCRIPTION: Shows how to use the Planet enum and its methods.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal yourPlanet = Planet.earth;\n\nif (!yourPlanet.isGiant) {\n  print('Your planet is not a \"giant planet\".');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Dart Analysis Results\nDESCRIPTION: Output from the Dart analyzer showing 5 issues found in the codebase, including type errors, inference failures, raw type warnings, and code structure recommendations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/analysis/analyzer-results-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAnalyzing analysis...\n\n  error - lib/strict_modes.dart:15:7 - The argument type 'dynamic' can't be assigned to the parameter type 'List<String>'.  - argument_type_not_assignable\nwarning - lib/strict_modes.dart:22:17 - The type argument(s) of 'Map' can't be inferred. Use explicit type argument(s) for 'Map'. - inference_failure_on_collection_literal\nwarning - lib/strict_modes.dart:33:3 - The generic type 'List<dynamic>' should have explicit type arguments but doesn't. Use explicit type arguments for 'List<dynamic>'. - strict_raw_type\n   info - lib/lint.dart:9:19 - Unnecessary empty statement. Try removing the empty statement or restructuring the code. - empty_statements\n   info - lib/lint.dart:17:7 - Unclosed instance of 'Sink'. Try invoking 'close' in the function in which the 'Sink' was created. - close_sinks\n\n5 issues found.\n```\n\n----------------------------------------\n\nTITLE: Liquid Templating for Glossary Terms\nDESCRIPTION: Uses Liquid templating language to iterate through glossary terms from the `glossary` variable (presumably loaded from `src/_data/glossary.yml`). For each term, it generates an expandable card with the term's name, short description, long description (if available), and related links.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/glossary.md#2025-04-21_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign sorted_terms = glossary | sort: \"term\" %}\n{% for term in sorted_terms -%}\n\n{% assign cardId = term.id | default: term.term | slugify -%}\n{% assign contentId = cardId | append: '-content' -%}\n<div class=\"card outlined-card glossary-card expandable-card\" id=\"{{cardId}}\"\n  data-partial-matches=\"{{term.term | downcase}}\" data-full-matches=\"{{term.alternate | default: '' | join: ',' | downcase}}\">\n<div class=\"card-header\">\n<h2 class=\"card-title\">{{term.term}}</h2>\n\n<div class=\"card-header-buttons\">\n  <a class=\"share-button icon-button\" href=\"#{{cardId}}\" title=\"Link to card\" aria-label=\"Link to {{term.term}} card\">\n    <span class=\"material-symbols\" aria-hidden=\"true\">tag</span>\n  </a>\n  <button\n    class=\"expand-button icon-button\"\n    aria-expanded=\"true\"\n    aria-controls=\"{{contentId}}\"\n    title=\"Expand or collapse card\"\n    aria-label=\"Expand or collapse {{term.term}} card\">\n    <span class=\"material-symbols\" aria-hidden=\"true\">keyboard_arrow_up</span>\n  </button>\n</div>\n</div>\n<div class=\"initial-content\">\n\n{{term.short_description}}\n\n</div>\n<div id=\"{{cardId}}-content\" class=\"expandable-content\">\n\n{% if term.long_description -%}\n{{term.long_description }}\n{% endif -%}\n\n{% if term.related_links and term.related_links.size > 0 -%}\n<div>\n<h3 class=\"no_toc details-header\">Related docs and resources</h3>\n\n\n<ul class=\"resources-list\">\n\n{% for resource in term.related_links -%}\n<li>\n<a href=\"{{resource.link}}\" class=\"filled-button\">\n<span class=\"material-symbols\" aria-hidden=\"true\">\n{%- case resource.type %}\n  {% when \"term\", \"glossary\" %}\n    dictionary\n  {% when \"article\", \"doc\" %}\n    article\n  {% when \"tutorial\" %}\n    school\n  {% when \"api\" %}\n    description\n  {% when \"video\" %}\n    play_arrow\n  {% when \"code\", \"sample\" %}\n    code_blocks\n  {% when \"diagnostic\", \"lint\" %}\n    lightbulb\n  {% when \"lint\" %}\n    toggle_on\n  {% else %}\n    article\n{% endcase -%}\n</span>\n<span>{{resource.text}}</span>\n</a>\n</li>\n{% endfor -%}\n\n</ul>\n\n</div>\n{% endif -%}\n\n</div>\n</div>\n\n{% endfor -%}\n```\n\n----------------------------------------\n\nTITLE: Promotion Limitation on 'this'\nDESCRIPTION: This snippet addresses the inability to promote 'this' in Dart. It provides an example where a local variable is used to hold 'this' before performing a null check.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nextension on int? {\n  int get valueOrZero {\n    [!final self = this;!]\n    return self == null ? 0 : self;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Dart Pub Get Errors with Null Safety\nDESCRIPTION: Illustrates a console output showing an error encountered when running `dart pub get` due to a package not supporting null safety, and suggests updating the SDK constraint.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\n\nBecause pkg1 doesn't support null safety, version solving failed.\nThe lower bound of \"sdk: '>=2.9.0 <3.0.0'\" must be 2.12.0 or higher to enable null safety.\n```\n\n----------------------------------------\n\nTITLE: Importing dart:convert Library in Dart\nDESCRIPTION: Shows how to import the dart:convert library to access JSON and UTF-8 conversion functionality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-convert.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Package Repository using Command Line\nDESCRIPTION: Shows how to add authentication tokens for custom package repositories using the dart pub token command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token add https://dart-packages.example.com\nEnter secret token: [enter secret token]\nRequests to \"https://dart-packages.example.com\" will now be authenticated using the secret token.\n```\n\n----------------------------------------\n\nTITLE: Modify Dart code: Calculate function\nDESCRIPTION: This code snippet presents a Dart function called `calculate` that performs a mathematical operation. The `[!~/ 2!]` is a placeholder for a truncation division operation that the user is instructed to add.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n\"int calculate() {\\n  return 6 * 7 [!~/ 2!];\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Running Pub Commands in a Specific Workspace Package\nDESCRIPTION: This console command illustrates how to publish a package from within a specific workspace package by using the -C option to change the working directory without manually navigating.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/workspaces.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub -C packages/client_package publish\n# Same as\n$ cd packages/client_package ; dart pub publish ; cd -\n```\n\n----------------------------------------\n\nTITLE: Documenting Property Getters and Setters in Dart\nDESCRIPTION: Example of correct documentation for a property's getter and setter pair, showing documentation only on the getter.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n/// The pH level of the water in the pool.\n///\n/// Ranges from 0-14, representing acidic to basic, with 7 being neutral.\nint get phLevel => ...\nset phLevel(int level) => ...\n```\n\n----------------------------------------\n\nTITLE: Tear-off Variables and Usage\nDESCRIPTION: Shows initialization of variables used in tear-off examples.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvar charCodes = [68, 97, 114, 116];\nvar buffer = StringBuffer();\n```\n\n----------------------------------------\n\nTITLE: Per-Library Language Version Declaration in Dart\nDESCRIPTION: Demonstrates how to specify a specific language version for an individual Dart library using a special comment directive. This allows developers to use a different language version within a single file compared to the package's default version.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n// @dart = 2.17\nimport 'dart:math';\n...\n```\n\n----------------------------------------\n\nTITLE: Forcing Project Generation with Existing Directory\nDESCRIPTION: Uses the --force flag to generate a project even if the target directory already exists\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-create.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart create --force <DIRECTORY>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Shadowing in Constructor Parameters in Dart\nDESCRIPTION: Illustrates that constructor parameters do not shadow fields when using initializing formals.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nclass Box extends BaseBox {\n  Object? value;\n\n  Box(Object? value) : value = value, super(value);\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass ProfileMark {\n  final String name;\n  final DateTime start;\n\n  ProfileMark(this.name) : start = DateTime.now();\n  ProfileMark.unnamed() : name = '', start = DateTime.now();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass ProfileMark {\n  final String name;\n  final DateTime start = DateTime.now();\n\n  ProfileMark(this.name);\n  ProfileMark.unnamed() : name = '';\n}\n```\n\n----------------------------------------\n\nTITLE: FFigen Configuration for Swift Bindings\nDESCRIPTION: YAML configuration for ffigen tool to generate Dart bindings for Swift code via Objective-C bridge. Includes module mapping and interface inclusion settings.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nffigen:\n  name: SwiftLibrary\n  description: Bindings for swift_api.\n  language: objc\n  output: 'swift_api_bindings.dart'\n  exclude-all-by-default: true\n  objc-interfaces:\n    include:\n      - 'SwiftClass'\n    module:\n      'SwiftClass': 'swift_module'\n  headers:\n    entry-points:\n      - 'swift_api.h'\n  preamble: |\n    // ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, return_of_invalid_type, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Java Class\nDESCRIPTION: Java class with a static method 'sum' that adds two integers, used as an example for generating Dart bindings.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/java-interop.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage dev.dart;\n\npublic class Example {\n  public static int sum(int a, int b) {\n    return a + b;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Run Error Due to Missing Null Safety\nDESCRIPTION: Illustrates a Dart runtime error caused by a library not supporting null safety, usually occurring when trying to run an application. This snippet highlights incompatibility issues with older codebases in newer Dart versions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart run bin/my_app.dart\n../pkg1/lib/pkg1.dart:1:1: Error: Library doesn't support null safety.\n// @dart=2.9\n^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Cleaning System Cache\nDESCRIPTION: Command to empty the entire system cache, useful for reclaiming disk space or removing problematic packages.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-cache.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub cache clean\n```\n\n----------------------------------------\n\nTITLE: Handling Commands in Worker Isolate\nDESCRIPTION: Processes incoming JSON messages in the worker isolate, decodes them, and sends responses back to the main isolate.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nstatic void _handleCommandsToIsolate(\n  ReceivePort receivePort,\n  SendPort sendPort,\n) {\n  receivePort.listen((message) {\n    try {\n      final jsonData = jsonDecode(message as String);\n      sendPort.send(jsonData);\n    } catch (e) {\n      sendPort.send(RemoteError(e.toString(), ''));\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Pubspec File - YAML\nDESCRIPTION: Illustrates the basic structure of a pubspec.yaml file needed to identify a Dart package. The file minimally requires a name, which is the package's name.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my_app\n```\n\n----------------------------------------\n\nTITLE: Default Value Syntax Migration - After\nDESCRIPTION: Example of correct equals syntax for named parameter default values in Dart 3.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nint someInt({int x = 0}) => x;\n```\n\n----------------------------------------\n\nTITLE: Generic Type and Function Wildcard Parameters in Dart\nDESCRIPTION: Shows how to use wildcard variables in generic type declarations and function type parameters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass T<_> {}\nvoid genericFunction<_>() {}\n\ntakeGenericCallback(<_>() => true);\n```\n\n----------------------------------------\n\nTITLE: Adding Language Version Comment in Dart\nDESCRIPTION: This Dart snippet demonstrates how to add a language version comment to opt out of null safety for a specific file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/unsound-null-safety.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// @dart=2.9\n```\n\n----------------------------------------\n\nTITLE: Getting Dependencies Using Dart Pub and Flutter Pub\nDESCRIPTION: This snippet demonstrates how to use the 'dart pub get' and 'flutter pub get' commands to retrieve dependencies for Dart and Flutter packages, respectively.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/index.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get    # Gets dependencies for a non-Flutter package\n```\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub get # Gets dependencies for a Flutter package\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Pub Hosted URL in Bash\nDESCRIPTION: Example of configuring the PUB_HOSTED_URL environment variable to specify a custom package mirror server location. This allows using alternative package repositories instead of the default pub.dev site.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/environment-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPUB_HOSTED_URL = https://pub.example.com\n```\n\n----------------------------------------\n\nTITLE: Repairing System Cache\nDESCRIPTION: Command to perform a clean reinstallation of all packages in the system cache. Useful when cache packages become corrupted or are accidentally modified.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-cache.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub cache repair\n```\n\n----------------------------------------\n\nTITLE: Break Statement Usage\nDESCRIPTION: Shows how to use break to exit a loop\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nwhile (true) {\n  if (shutDownRequested()) break;\n  processIncomingRequests();\n}\n```\n\n----------------------------------------\n\nTITLE: Running AOT Snapshot with dartaotruntime\nDESCRIPTION: This snippet shows how to run the generated AOT snapshot using the `dartaotruntime` command. This command needs the path to the Dart bin directory to be set in the PATH environment variable.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dartaotruntime.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dartaotruntime bin/simpleapp.aot\n```\n\n----------------------------------------\n\nTITLE: Basic Dart pub unpack Command Syntax\nDESCRIPTION: Shows the basic command syntax for dart pub unpack with all available options. The command accepts a package name with optional descriptor and various flags for customizing the unpack behavior.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-unpack.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub unpack <package>[:descriptor] [--[no-]resolve] [--output=<output directory>] [--[no-]force] [other options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Experiments in Analysis Options\nDESCRIPTION: This YAML configuration in 'analysis_options.yaml' enables experimental features 'super-mixins' and 'no-slow-checks' for the Dart analyzer. Ensure the Dart analyzer is configured to use this options file.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/experiment-flags.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  enable-experiment:\n    - super-mixins\n    - no-slow-checks\n```\n\n----------------------------------------\n\nTITLE: Run modified Dart app\nDESCRIPTION: This shell command executes the modified Dart program using the `dart run` command, displaying the updated output in the console.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/get-started.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ dart run\"\n```\n\n----------------------------------------\n\nTITLE: Simple Enum Declaration in Dart\nDESCRIPTION: Shows a basic enum declaration for planet types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nenum PlanetType { terrestrial, gas, ice }\n```\n\n----------------------------------------\n\nTITLE: Using Initializing Formals in Dart Constructors\nDESCRIPTION: Shows how to use initializing formals in Dart constructors to simplify parameter assignment. This reduces boilerplate code in constructor definitions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclass Point {\n  final int x;\n  final int y;\n\n  Point(this.x, this.y); // Using initializing formals\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Package Dependencies for Null Safety\nDESCRIPTION: Command to check the null safety status of a package's dependencies using dart pub outdated.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ dart pub outdated --mode=null-safety\n```\n\n----------------------------------------\n\nTITLE: Callback Parameter Naming in Dart\nDESCRIPTION: Examples demonstrating the use of wildcards (_) for unused callback parameters in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfutureOfVoid.then((_) {\n  print('Operation complete.');\n});\n```\n\nLANGUAGE: dart\nCODE:\n```\n.onError((_, _) {\n  print('Operation failed.');\n});\n```\n\n----------------------------------------\n\nTITLE: Dart Class Member Reference Example\nDESCRIPTION: This code shows how to reference members of a class from within an instance method's doc comment. It highlights that members declared on the class or its interfaces (like `Iterable`) can be referenced without the qualifying class name when they are in scope.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/doc-comments/references.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nabstract class MyList<E> implements List<E> {\n  /// Refer to [add] and [contains], which is declared on [Iterable].\n  void myMethod() {}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Future.then() Method Signature in Dart\nDESCRIPTION: Displays the signature of the then() method on Future, showing its optional onError callback for more granular error handling.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/futures-error-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<R> then<R>(FutureOr<R> Function(T value) onValue, {Function? onError});\n```\n\n----------------------------------------\n\nTITLE: Compiling and Setting Up Wasm Web App\nDESCRIPTION: A sequence of commands showing how to create a web app, compile it to WebAssembly, and set up the necessary files for serving. Includes steps for creating the app, compiling to Wasm, copying web files, and serving the output.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/wasm.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndart create -t web mywebapp\nmywebapp$ dart compile wasm web/main.dart -o site/main.wasm\ncp web/index.html web/styles.css site/\ndart pub global run dhttpd\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Account Keys\nDESCRIPTION: Commands to authenticate using exported service account keys and create a temporary token for pub.dev.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud auth activate-service-account --key-file=key-file.json\n```\n\n----------------------------------------\n\nTITLE: Example dart pub get output\nDESCRIPTION: Shows typical console output when running dart pub get successfully.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-get.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\nResolving dependencies...\nGot dependencies!\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Getter for Read-Only Property in Dart\nDESCRIPTION: Shows an overcomplicated way to create a read-only property using a private field with a public getter, when a final field would be simpler and more direct for many cases.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  Object? _contents;\n  Object? get contents => _contents;\n}\n```\n\n----------------------------------------\n\nTITLE: Catch Clause Wildcard Parameter in Dart\nDESCRIPTION: Demonstrates using a wildcard parameter in a catch clause when the exception object isn't needed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/variables.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  throw '!';\n} catch (_) {\n  print('oops');\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dart SDK with Chocolatey\nDESCRIPTION: Command to uninstall the Dart SDK using Chocolatey package manager. This requires elevated permissions in PowerShell.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/windows.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> choco uninstall dart-sdk\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Excessive Use of Null Assertion in Dart\nDESCRIPTION: Demonstrates a poor practice of repeatedly using null assertion operator (!). This approach is more verbose and potentially less safe than using null-check patterns or local variables.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass UploadException {\n  final Response? response;\n\n  UploadException([this.response]);\n\n  @override\n  String toString() {\n    if (response != null) {\n      return 'Could not complete upload to ${response[!!!].url} '\n          '(error code ${response[!!!].errorCode}): ${response[!!!].reason}.';\n    }\n\n    return 'Could not upload (no response).';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart Version and Package Management Commands\nDESCRIPTION: Shows command-line examples for checking the Dart SDK version and running pub get/flutter pub get and analyze commands. These commands are useful for verifying Dart 3 compatibility and resolving issues related to package dependencies and code analysis.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/index.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ dart --version                     # make sure this reports 3.0.0-417.1.beta or higher\n$ dart pub get / flutter pub get     # this should resolve without issues\n$ dart analyze / flutter analyze     # this should pass without errors\n```\n\n----------------------------------------\n\nTITLE: Removing Dart Configuration Files After Uninstall\nDESCRIPTION: Command to completely remove Dart configuration files from the user's home directory after uninstalling the SDK. This cleans up any remaining Dart-related data.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/windows.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Remove-Item -Recurse -Force ^\n    -Path $env:LOCALAPPDATA\\.dartServer,$env:APPDATA\\.dart,$env:APPDATA\\.dart-tool\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Constraint With Dart 3 Changes\nDESCRIPTION: YAML configuration enabling Dart 3 versioned changes through SDK version constraint.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Dart Commands\nDESCRIPTION: This snippet illustrates how to use the 'dart help' command to get more information about a specific command, in this case, the 'pub outdated' command. This provides details on the command's usage and available options.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-tool.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart help pub outdated\n```\n\n----------------------------------------\n\nTITLE: Specify Output Directory\nDESCRIPTION: Demonstrates how to specify a custom output directory for the downloaded package using the --output option.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-unpack.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub unpack http:1.2.0 -o local_http_copies\n```\n\n----------------------------------------\n\nTITLE: Doc Comments for Members in Dart\nDESCRIPTION: Example of using /// doc comments to document class members and types for dart doc generation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// The number of characters in this chunk when unsplit.\nint get length => ...\n```\n\n----------------------------------------\n\nTITLE: External Function Declaration\nDESCRIPTION: Shows how to declare an external function in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nexternal void someFunc(int i);\n```\n\n----------------------------------------\n\nTITLE: File Operations Documentation Example in Dart\nDESCRIPTION: Examples of good and bad documentation for file operations, demonstrating concise vs verbose first sentences.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// Deletes the file at [path] from the file system.\nvoid delete(String path) {\n  ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n/// Depending on the state of the file system and the user's permissions,\n/// certain operations may or may not be possible. If there is no file at\n/// [path] or it can't be accessed, this function throws either [IOError]\n/// or [PermissionError], respectively. Otherwise, this deletes the file.\nvoid delete(String path) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Set Literals in Dart\nDESCRIPTION: Introduces the syntax for set literals in Dart 2.2, with explicitly defined elements of a generic 'Set' containing constant string values. This example configures a set of currencies for type-safe collection management.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nconst Set<String> currencies = {'EUR', 'USD', 'JPY'};\n```\n\n----------------------------------------\n\nTITLE: Suppressing diagnostics for a file - Dart\nDESCRIPTION: This Dart comment is used to suppress specific non-error diagnostics for an entire file, useful for generated code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// ignore_for_file: unused_local_variable\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for dart compile Command\nDESCRIPTION: Shows how to access additional options and usage information for a specific subcommand with 'dart compile'. This can be useful for exploring the different capabilities of the command.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-compile.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart compile exe --help\n\n```\n\n----------------------------------------\n\nTITLE: Using Block Body for Complex Methods in Dart\nDESCRIPTION: Shows when to use a block body instead of arrow syntax for more complex methods. When a method has multiple lines or nested expressions, using a block body improves readability.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nTreasure? openChest(Chest chest, Point where) {\n  if (_opened.containsKey(chest)) return null;\n\n  var treasure = Treasure(where);\n  treasure.addAll(chest.contents);\n  _opened[chest] = treasure;\n  return treasure;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK via dpkg\nDESCRIPTION: Installs Dart SDK using dpkg package manager from a downloaded .deb package.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg -i dart_3.4.0-1_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Setting SDK Constraint for Null Safety in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the SDK constraint in a pubspec.yaml file to use null safety, which was introduced in Dart 2.12. It specifies a minimum SDK version of 2.12.0 and a maximum version below 3.0.0.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Basic StreamController Implementation (Flawed)\nDESCRIPTION: A basic but flawed implementation of a timed counter stream that demonstrates common mistakes like starting before having subscribers and not handling pause states.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nStream<int> timedCounter(Duration interval, [int? maxCount]) {\n  var controller = StreamController<int>();\n  int counter = 0;\n  void tick(Timer timer) {\n    counter++;\n    controller.add(counter); // Ask stream to send counter values as event.\n    if (maxCount != null && counter >= maxCount) {\n      timer.cancel();\n      controller.close(); // Ask stream to shut down and tell listeners.\n    }\n  }\n\n  Timer.periodic(interval, tick); // BAD: Starts before it has subscribers.\n  return controller.stream;\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Circle Class with Stored Calculated Values in Dart\nDESCRIPTION: Example of an inefficient class design that stores calculated values which could lead to inconsistent state. This implementation wastes memory and can result in incorrect values when radius changes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nclass Circle {\n  double radius;\n  double area;\n  double circumference;\n\n  Circle(double radius)\n    : radius = radius,\n      area = pi * radius * radius,\n      circumference = pi * 2.0 * radius;\n}\n```\n\n----------------------------------------\n\nTITLE: Functional Style Iteration\nDESCRIPTION: Shows how to use where and forEach for filtering and iteration\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/loops.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\ncandidates\n    .where((c) => c.yearsExperience >= 5)\n    .forEach((c) => c.interview());\n```\n\n----------------------------------------\n\nTITLE: Supported IDEs for Dart Development\nDESCRIPTION: List of integrated development environments and text editors with Dart language support, including official and community-maintained plugins\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Android Studio\n* IntelliJ IDEA\n* Visual Studio Code\n* Emacs\n* Vim\n* Eclipse\n```\n\n----------------------------------------\n\nTITLE: Loading AVFAudio Library in Dart\nDESCRIPTION: Dart code demonstrating how to load and initialize the AVFAudio library using dart:ffi\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ffi';\nimport 'avf_audio_bindings.dart';\n\nconst _dylibPath =\n    '/System/Library/Frameworks/AVFAudio.framework/Versions/Current/AVFAudio';\n\nvoid main(List<String> args) async {\n  final lib = AVFAudio(DynamicLibrary.open(_dylibPath));\n```\n\n----------------------------------------\n\nTITLE: Flutter Integration Test Directory Structure\nDESCRIPTION: Demonstrates the directory structure for Flutter integration tests, which are placed in a separate 'integration_test' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  integration_test/\n    app_test.dart\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Testing FutureOr Type in Dart\nDESCRIPTION: This example shows an incorrect approach to disambiguating FutureOr<T> by testing for T first. This fails when T is Object because Future<Object> is also an Object, leading to incorrect behavior.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_52\n\nLANGUAGE: dart\nCODE:\n```\nFuture<T> logValue<T>(FutureOr<T> value) async {\n  if (value is T) {\n    print(value);\n    return value;\n  } else {\n    var result = await value;\n    print(result);\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Backwards Compatible SDK Constraint\nDESCRIPTION: YAML configuration demonstrating SDK constraint that allows resolution with Dart 3.x while maintaining compatibility.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.14.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Writing to Standard Output with Line Numbers in Dart\nDESCRIPTION: This code snippet demonstrates how to write line numbers and content to stdout in a 'dcat' application. It uses stdout.write() for line numbers and stdout.writeln() for file content.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tutorials/server/cmdline.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nif (showLineNumbers) {\n  stdout.write('${lineNumber++} ');\n}\nstdout.writeln(line);\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Check with JS Type\nDESCRIPTION: Demonstrates an incorrect way to perform type checking on a JS type using Dart's 'is' operator.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(JSAny a) {\n  if (a is String) { … }\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Assertion (Native/Web Compatible) - Dart\nDESCRIPTION: This code snippet demonstrates an assertion that is compatible on both native and web platforms by explicitly interpolating the double value with string interpolation syntax (`${20.0}`). This ensures that the same string representation is used regardless of the platform.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/number-representation.md#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nif (message != \"${20.0} cows\") throw ... \n```\n\n----------------------------------------\n\nTITLE: Alphabetical Sorting of Imports in Dart\nDESCRIPTION: Demonstrates proper alphabetical sorting of import sections.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/style.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:bar/bar.dart';\nimport 'package:foo/foo.dart';\n\nimport 'foo.dart';\nimport 'foo/foo.dart';\n```\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:foo/foo.dart';\nimport 'package:bar/bar.dart';\n\nimport 'foo/foo.dart';\nimport 'foo.dart';\n```\n\n----------------------------------------\n\nTITLE: Avoiding Redundant Use of 'new' in Dart\nDESCRIPTION: Emphasizes that the 'new' keyword is optional when calling a constructor, and its use should be avoided for clarity.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Row(\n    children: [RaisedButton(child: Text('Increment')), Text('Click!')],\n  );\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return [!new!] Row(\n    children: [\n      [!new!] RaisedButton(child: [!new!] Text('Increment')),\n      [!new!] Text('Click!'),\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pub Package Manager Commands\nDESCRIPTION: CLI commands for pub package manager showing the default online mode and how to enable offline mode for using cached packages instead of downloading from network.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/tools/pub-option-no-offline.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--no-offline\n```\n\nLANGUAGE: shell\nCODE:\n```\n--offline\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatting in Documentation\nDESCRIPTION: Comprehensive example showing various Markdown formatting options available in Dart documentation comments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n/// This is a paragraph of regular text.\n///\n/// This sentence has *two* _emphasized_ words (italics) and **two**\n/// __strong__ ones (bold).\n///\n/// A blank line creates a separate paragraph. It has some `inline code`\n/// delimited using backticks.\n///\n/// * Unordered lists.\n/// * Look like ASCII bullet lists.\n/// * You can also use `-` or `+`.\n///\n/// 1. Numbered lists.\n/// 2. Are, well, numbered.\n/// 1. But the values don't matter.\n///\n///     * You can nest lists too.\n///     * They must be indented at least 4 spaces.\n///     * (Well, 5 including the space after `///`.)\n///\n/// Code blocks are fenced in triple backticks:\n///\n/// ```dart\n/// this.code\n///     .will\n///     .retain(its, formatting);\n/// ```\n///\n/// The code language (for syntax highlighting) defaults to Dart. You can\n/// specify it by putting the name of the language after the opening backticks:\n///\n/// ```html\n/// <h1>HTML is magical!</h1>\n/// ```\n///\n/// Links can be:\n///\n/// * https://www.just-a-bare-url.com\n/// * [with the URL inline](https://google.com)\n/// * [or separated out][ref link]\n///\n/// [ref link]: https://google.com\n///\n/// # A Header\n///\n/// ## A subheader\n///\n/// ### A subsubheader\n///\n/// #### If you need this many levels of headers, you're doing it wrong\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Access Error Message\nDESCRIPTION: Example of the unauthorized access error when trying to publish a package without proper permissions\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nUnauthorizedAccess: Unauthorized user: <username> is not allowed to upload versions to package '<foo>'.\n```\n\n----------------------------------------\n\nTITLE: Suppressing diagnostics for a line of code - Dart\nDESCRIPTION: This Dart comment is used to ignore specific non-error diagnostics on a specific line of code.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// ignore: invalid_assignment\nint x = '';\n```\n\n----------------------------------------\n\nTITLE: Proper Function Declaration Without Unnecessary 'async' in Dart\nDESCRIPTION: This example demonstrates the recommended way to return a Future without using the 'async' keyword when it has no useful effect. When async adds no functionality, it should be omitted.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_45\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> fastestBranch(Future<int> left, Future<int> right) {\n  return Future.any([left, right]);\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dart SDK via dpkg\nDESCRIPTION: Removes Dart SDK installation using dpkg package manager and verifies removal.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg --purge dart\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dpkg -l | grep dart\n```\n\n----------------------------------------\n\nTITLE: Checking Empty Collections in Dart\nDESCRIPTION: Shows how to use isEmpty and isNotEmpty methods to check whether a List or other collection has items.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar coffees = <String>[];\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\nassert(coffees.isEmpty);\nassert(teas.isNotEmpty);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Package Repositories\nDESCRIPTION: Shows how to configure dependencies from multiple package repositories in pubspec.yaml.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  # package retry is fetched from pub.dev (the default package repository)\n  retry: ^3.0.0\n  # package example_package is fetched from https://dart-packages.example.com\n  example_package:\n    hosted: https://dart-packages.example.com\n    version: ^1.4.0\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import Path Example\nDESCRIPTION: Shows incorrect ways to import a library using both package and relative paths.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:my_package/api.dart';\nimport '../lib/api.dart';\n```\n\n----------------------------------------\n\nTITLE: Recursive Generator Function\nDESCRIPTION: Demonstrates a recursive generator function using yield*.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nIterable<int> naturalsDownFrom(int n) sync* {\n  if (n > 0) {\n    yield n;\n    yield* naturalsDownFrom(n - 1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Final Field for Read-Only Property in Dart\nDESCRIPTION: Shows how to create a read-only property by simply using a final field, which is more concise than creating a private field with a public getter. This is suitable when the field only needs to be set during initialization.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nclass Box {\n  final contents = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed Subscription Example\nDESCRIPTION: Shows potential issues with buffering when listening to a stream after a delay.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/creating-streams.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid listenAfterDelay() async {\n  var counterStream = timedCounter(const Duration(seconds: 1), 15);\n  await Future.delayed(const Duration(seconds: 5));\n\n  // After 5 seconds, add a listener.\n  await for (final n in counterStream) {\n    print(n); // Print an integer every second, 15 times.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid External Declaration with Function\nDESCRIPTION: Demonstrates an invalid external declaration using a Dart Function type, which is not allowed in JS interop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal Function get function;\n```\n\n----------------------------------------\n\nTITLE: Declaring JavaScript Type with package:js\nDESCRIPTION: Example showing how to declare a JavaScript interop type using the legacy package:js annotation. This approach is now deprecated in favor of dart:js_interop extension types.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/past-js-interop.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nclass JSType {}\n```\n\n----------------------------------------\n\nTITLE: Exercise: Creating a Named Constructor in Dart\nDESCRIPTION: An exercise to implement a named constructor 'Color.black' that creates a Color instance with all RGB values set to zero.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-cheatsheet.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Color {\n  int red;\n  int green;\n  int blue;\n\n  Color(this.red, this.green, this.blue);\n\n  // TODO: Create a named constructor called \"Color.black\" here:\n}\n\n\n// Tests your solution (Don't edit!):\nvoid main() {\n  final errs = <String>[];\n\n  try {\n    final result = Color.black();\n\n    if (result.red != 0) {\n      errs.add('Called Color.black() and got a Color with red equal to \\n ${result.red} instead of the expected value (0).');\n    }\n\n    if (result.green != 0) {\n      errs.add('Called Color.black() and got a Color with green equal to \\n ${result.green} instead of the expected value (0).');\n    }\n\n    if (result.blue != 0) {\n  errs.add('Called Color.black() and got a Color with blue equal to \\n ${result.blue} instead of the expected value (0).');\n    }\n  } catch (e) {\n    print('Called Color.black() and got an exception of type \\n ${e.runtimeType}.');\n    return;\n  }\n\n  if (errs.isEmpty) {\n    print('Success!');\n  } else {\n    errs.forEach(print);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Field Conflict Type Promotion Example\nDESCRIPTION: Illustrates how to handle type promotion when there's a conflicting non-promotable field in another class.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Example {\n  final int? _overridden;\n  Example(this._overridden);\n}\n\nclass Override implements Example {\n  @override\n  int? _overridden;\n}\n\nvoid f(Example x) {\n  final i = x._overridden;\n  if (i != null) {\n    print(i.isEven); // OK\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart with Experiment Flags\nDESCRIPTION: This command demonstrates how to run a Dart program with experimental features 'super-mixins' and 'no-slow-checks' enabled. No special dependencies are required aside from having the Dart SDK installed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/experiment-flags.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart run --enable-experiment=super-mixins,no-slow-checks bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Valid External Declaration with Primitives\nDESCRIPTION: Demonstrates a valid external declaration using Dart primitive types that are allowed in JS interop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal void primitives(String a, int b, double c, num d, bool e);\n```\n\n----------------------------------------\n\nTITLE: Removal of `@FfiNative` Annotation (Dart)\nDESCRIPTION: This snippet describes the removal of the `@FfiNative` annotation from the `dart:ffi` library.  Developers who were using this annotation are directed to update their code to use the `@Native` annotation instead.  This change is likely part of a broader effort to simplify or standardize the FFI interface.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n\tThe previously deprecated\n\t`@FfiNative` annotation has been removed. Usages should be\n\tupdated to use the `@Native` annotation.\n```\n\n----------------------------------------\n\nTITLE: Socket Error Message\nDESCRIPTION: Example of the socket error message when pub cannot connect to pub.dev\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nGot socket error trying to find package ... at https://pub.dev.\npub get failed (server unavailable) -- attempting retry 1 in 1 second...\n```\n\n----------------------------------------\n\nTITLE: Enabling individual linter rules - YAML\nDESCRIPTION: This snippet demonstrates how to enable specific linter rules in the analysis options file by defining a list under the linter key.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nlinter:\n  rules:\n    - always_declare_return_types\n    - cancel_subscriptions\n    - close_sinks\n    - combinators_ordering\n    - comment_references\n    - invalid_case_patterns\n    - one_member_abstracts\n    - only_throw_errors\n    - prefer_single_quotes\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Dart 3\nDESCRIPTION: Console commands for upgrading dependencies to support Dart 3.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade\n$ dart analyze      # This should pass without errors.\n```\n\n----------------------------------------\n\nTITLE: Getter Conflict Type Promotion Example\nDESCRIPTION: Shows how to handle type promotion when there's a conflicting getter in another class within the same library.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nclass Example {\n  final int? _overridden;\n  Example(this._overridden);\n}\n\nclass Override implements Example {\n  @override\n  int? get _overridden => Random().nextBool() ? 1 : null;\n}\n\nvoid testParity(Example x) {\n  final i = x._overridden;\n  if (i != null) {\n    print(i.isEven); // OK\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dart SDK with Chocolatey\nDESCRIPTION: Command to upgrade an existing Dart SDK installation to the latest version using Chocolatey package manager.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/windows.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> choco upgrade dart-sdk\n```\n\n----------------------------------------\n\nTITLE: Debugging with Assert Statements\nDESCRIPTION: This example shows how to enable assert statements during program execution using the `--enable-asserts` flag with `dart run`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run --enable-asserts tool/debug.dart\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Specific Dependencies\nDESCRIPTION: Example showing how to upgrade only specific dependencies (test and args) while leaving other dependencies at their current versions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-upgrade.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade test args\nDependencies upgraded!\n```\n\n----------------------------------------\n\nTITLE: Enforcing Explicit Types in Dart Generics\nDESCRIPTION: This snippet shows a warning about using a raw type List<dynamic> without explicit type arguments, which is discouraged in strict mode.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/analysis/analyzer-results-beta.txt#2025-04-21_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nlib/strict_modes.dart:33:3 - The generic type 'List<dynamic>' should have explicit type arguments but doesn't. Use explicit type arguments for 'List<dynamic>'.\n```\n\n----------------------------------------\n\nTITLE: Explicit Extension Method Usage in Dart\nDESCRIPTION: Demonstrates how to explicitly use extension methods when dealing with conflicts.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Both libraries define extensions on String that contain parseInt(),\n// and the extensions have different names.\nimport 'string_apis.dart'; // Contains NumberParsing extension.\nimport 'string_apis_2.dart'; // Contains NumberParsing2 extension.\n\nvoid main() {\n  // print('42'.parseInt()); // Doesn't work.\n  print(NumberParsing('42').parseInt());\n  print(NumberParsing2('42').parseInt());\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Circle Class with Cache Invalidation in Dart\nDESCRIPTION: A complex implementation of Circle class that handles cache invalidation when radius changes. This approach is unnecessarily verbose and error-prone compared to calculating values on demand.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nclass Circle {\n  double _radius;\n  double get radius => _radius;\n  set radius(double value) {\n    _radius = value;\n    _recalculate();\n  }\n\n  double _area = 0.0;\n  double get area => _area;\n\n  double _circumference = 0.0;\n  double get circumference => _circumference;\n\n  Circle(this._radius) {\n    _recalculate();\n  }\n\n  void _recalculate() {\n    _area = pi * _radius * _radius;\n    _circumference = pi * 2.0 * _radius;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display Control Options\nDESCRIPTION: Options to control compiler output verbosity and warning/hint display preferences. Includes suppressions for warnings and hints, terse output mode, and verbose logging.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/tools/dart-compile-js-options.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--suppress-warnings\n--suppress-hints\n--terse\n-v or --verbose\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Line Comments in Dart\nDESCRIPTION: Shows how to use multi-line comments in Dart using /* */. These comments can span multiple lines and can be nested. The compiler ignores all content within these delimiters.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/comments.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  /*\n   * This is a lot of work. Consider raising chickens.\n\n  Llama larry = Llama();\n  larry.feed();\n  larry.exercise();\n  larry.clean();\n   */\n}\n```\n\n----------------------------------------\n\nTITLE: Linter Rule Template\nDESCRIPTION: Liquid template reference for rendering linter rule mentions in the documentation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% render 'linter-rule-mention.md', rules:'unnecessary_getters_setters' %}\n```\n\n----------------------------------------\n\nTITLE: Adding package:web Dependency in Dart pubspec\nDESCRIPTION: Console command to add the web package dependency to a Dart project. This is a necessary step when migrating from dart:html to package:web.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndart pub add web\n```\n\n----------------------------------------\n\nTITLE: Implicit Return Value\nDESCRIPTION: Shows how functions implicitly return null when no return value is specified.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/functions.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nfoo() {}\n\nassert(foo() == null);\n```\n\n----------------------------------------\n\nTITLE: Null Check Function Example - Bad\nDESCRIPTION: Shows unnecessary explicit null initialization that should be avoided.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nItem? bestDeal(List<Item> cart) {\n  Item? bestItem = null;\n\n  for (final item in cart) {\n    if (bestItem == null || item.price < bestItem.price) {\n      bestItem = item;\n    }\n  }\n\n  return bestItem;\n}\n```\n\n----------------------------------------\n\nTITLE: dart:js_interop API Changes (Dart)\nDESCRIPTION: This snippet details several changes related to the experimental `dart:js_interop` library. It includes removals of methods like `JSNumber.toDart` and `Object.toJS`, restrictions on external JS interop APIs to a specific set of allowed types, prohibiting `isNull` and `isUndefined` on dart2wasm and changing the return type of `typeofEquals` and `instanceof` to bool instead of `JSBoolean`. These modifications aim to improve safety, performance, and consistency in JavaScript interop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n\t{{experimental}} {{removed}} `JSNumber.toDart` in favor of `toDartDouble` and\n\t`toDartInt`.\n\t{{experimental}} {{removed}} `Object.toJS` in favor of `Object.toJSBox.`\n\t{{experimental}} Restricted external JS interop APIs using `dart:js_interop`\n\tto a set of allowed types.\n\t{{experimental}} Prohibited use of `isNull` and `isUndefined` on dart2wasm.\n\t{{experimental}} Changed `typeofEquals` and `instanceof` APIs to both return\n\tbool instead of `JSBoolean`.\n\tAlso, `typeofEquals` now takes `String` instead of `JSString`.\n\t{{experimental}} Changed `JSAny` and `JSObject` types to only implementable,\n\tnot extendable, by user `@staticInterop` types.\n\t{{experimental}} Changed `JSArray.withLength` to take `int` instead of `JSNumber`.\n```\n\n----------------------------------------\n\nTITLE: Subtype Mismatch Type Promotion\nDESCRIPTION: Shows how type promotion fails when attempting to promote to a type that isn't a subtype of the current promoted type, with various solutions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/non-promotion-reasons.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(Object o) {\n  if (o is Comparable /* (1) */ ) {\n    if (o is Pattern /* (2) */ ) {\n      print(o.matchAsPrefix('foo')); // (3) ERROR\n    }\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(Object o) {\n  if (o is Comparable /* (1) */ ) {\n    Object o2 = o;\n    if (o2 is Pattern /* (2) */ ) {\n      print(\n        o2.matchAsPrefix('foo'),\n      ); // (3) OK; o2 was promoted to `Pattern`.\n    }\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(Object o) {\n  if (o is Comparable /* (1) */ ) {\n    if (o is Pattern /* (2) */ ) {\n      print((o as Pattern).matchAsPrefix('foo')); // (3) OK\n    }\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid f(Object o) {\n  if (o is Comparable /* (1) */ ) {\n    if (o is String /* (2) */ ) {\n      print(o.matchAsPrefix('foo')); // (3) OK\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Double Values with Int Literals in Flutter\nDESCRIPTION: Accommodates Dart 2.1's int-to-double conversion, allowing integer usage where double is expected, eliminating redundant syntax. A 'padding' widget in Flutter uses integer literals directly, refining type coercion in size-related attributes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/evolution.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\npadding: const EdgeInsets.symmetric(\n  horizontal: 4,\n  vertical: 8,\n)\n```\n\n----------------------------------------\n\nTITLE: Http Exception Error Message\nDESCRIPTION: Example of the HttpException error that can occur during pub build operations\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPub build failed, [1] IsolateSpawnException: 'HttpException: Connection closed while receiving data,\n...\nlibrary handler failed\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring a Preview Version in pubspec.yaml for Dart Package\nDESCRIPTION: A sample pubspec.yaml configuration for a package that depends on a beta version of the Dart SDK. This example shows how to set up version constraints to publish a preview version of a package that requires features from an unreleased SDK version.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/publishing.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: args\nversion: 2.0.0\n\nenvironment:\n  sdk: '^3.0.0-417.1.beta'\n```\n\n----------------------------------------\n\nTITLE: Running a Program in a Depended-On Package\nDESCRIPTION: This example shows how to run a program located within the `bin` directory of a package that the current project depends on.  The first example runs `bin/bar.dart` from the `bar` package.  The second runs `bin/baz.dart` from the `bar` package.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run bar\"\n```\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run bar:baz\"\n```\n\n----------------------------------------\n\nTITLE: Using Dart Code Formatting - Dart\nDESCRIPTION: Demonstrates how to properly format code examples in README files for Dart packages using syntax highlighting.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/writing-package-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nfinal like = 'this';\n```\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n```plaintext\nfinal like = 'this';\n```\n```\n\n----------------------------------------\n\nTITLE: Test Directory Structure\nDESCRIPTION: Shows the standard organization for test files in a Dart package, following the convention of placing tests in the 'test' directory with '_test.dart' filename suffix.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  test/\n    enchilada_test.dart\n    tortilla_test.dart\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Command\nDESCRIPTION: Shell command to regenerate the documentation from root project directory\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./dash_site effective-dart\n```\n\n----------------------------------------\n\nTITLE: Adding Path Dependencies\nDESCRIPTION: Example of using `dart pub add` to specify dependencies situated in a local directory through `path`.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-add.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub add \"foo:{path: ../foo}\"\n```\n\n----------------------------------------\n\nTITLE: Converting ButtonItem Record to Class in Dart\nDESCRIPTION: This snippet demonstrates how the ButtonItem record type can be converted to a class. It includes the same properties as the record and adds a getter method.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/records.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass ButtonItem {\n  final String label;\n  final Icon icon;\n  final void Function()? onPressed;\n  ButtonItem({required this.label, required this.icon, this.onPressed});\n  bool get hasOnpressed => onPressed != null;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Active Token Credentials\nDESCRIPTION: Example showing how to list all active authentication tokens.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-token.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token list\nYou have secret tokens for 2 package repositories:\nhttps://some-package-repo.com/my-org/my-repo\nhttps://other-package-repo.com/\n```\n\n----------------------------------------\n\nTITLE: Implementing Chunked Conversion with RotConverter in Dart\nDESCRIPTION: Extends RotConverter with chunked conversion capabilities via RotSink. The startChunkedConversion method returns a RotSink, enabling byte data to be processed in chunks. Key inputs include keys and byte lists, producing converted lists while maintaining the potential for performance improvements through chunking.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass RotConverter {\n  ...\n  RotSink startChunkedConversion(sink) {\n    return new RotSink(_key, sink);\n  }\n}\n\nclass RotSink extends ChunkedConversionSink<List<int>> {\n  final _converter;\n  final ChunkedConversionSink<List<int>> _outSink;\n  RotSink(key, this._outSink) : _converter = new RotConverter(key);\n\n  void add(List<int> data) {\n    _outSink.add(_converter.convert(data));\n  }\n\n  void close() {\n    _outSink.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Direct Completer Usage in Dart (Bad Practice)\nDESCRIPTION: This example shows the anti-pattern of using Completer directly for common asynchronous operations. Completers should only be used for low-level asynchronous primitives or when interfacing with code that doesn't use futures.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_48\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> fileContainsBear(String path) {\n  var completer = Completer<bool>();\n\n  File(path).readAsString().then((contents) {\n    completer.complete(contents.contains('bear'));\n  });\n\n  return completer.future;\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Downcast Example (Without Null Safety)\nDESCRIPTION: This snippet demonstrates implicit downcasting (prior to null safety) where an `Object` is passed to a function expecting a `String`.  The compiler would insert an implicit cast, potentially throwing an exception at runtime if the object wasn't actually a string. This functionality has been removed with null safety.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Without null safety:\nvoid requireStringNotObject(String definitelyString) {\n  print(definitelyString.length);\n}\n\nvoid main() {\n  Object maybeString = 'it is';\n  requireStringNotObject(maybeString);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dependencies with Token Authentication Prompt\nDESCRIPTION: Example showing the authentication prompt when trying to retrieve dependencies from a private repository using dart pub get.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-token.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\nResolving dependencies... \nhttps://some-package-repo.com/my-org/my-repo package repository requested authentication!\nYou can provide credentials using:\n    dart pub token add https://some-package-repo.com/my-org/my-repo\n```\n\n----------------------------------------\n\nTITLE: _RotSink Implementation in Dart\nDESCRIPTION: This code defines a `_RotSink` class that extends `CipherSink`. It encrypts a list of integers by adding a key and taking the modulus.  It assumes the outSink is always a CipherSink and calls addModifiable on it directly for efficiency.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nclass _RotSink extends CipherSink {\n  final _key;\n  final CipherSink _outSink;  // <= always a CipherSink.\n  _RotSink(this._key, this._outSink);\n\n  void add(List<int> data) {\n    addModifiable(data.toList());\n  }\n\n  void addModifiable(List<int> data) {\n    for (int i = 0; i < data.length; i++) {\n      data[i] = (data[i] + _key) % 256;\n    }\n    _outSink.addModifiable(data);  // <= safe to call addModifiable.\n  }\n\n  void close() {\n    _outSink.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tutorial Cards with Liquid Templates\nDESCRIPTION: Card-based layout template using Liquid templating syntax to display tutorial navigation links. The template creates a grid of cards with titles and descriptions for different Dart server-side development topics.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/server-tutorials.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"card-grid\">\n  {% card \"Get started\", \"/tutorials/server/get-started\" %}\n    Get Dart. Create a simple standalone app, run it in the Dart VM,\n    and AOT-compile it to native machine code.\n  {% endcard %}\n  {% card \"Write command-line apps\", \"/tutorials/server/cmdline\" %}\n    Learn about features that command-line apps need.\n  {% endcard %}\n  {% card \"Fetch data from the internet\", \"/tutorials/server/fetch-data\" %}\n    Fetch data from the internet using the http package.\n  {% endcard %}\n  {% card \"Write HTTP servers\", \"/tutorials/server/httpserver\" %}\n    Implement a web server written in Dart.\n  {% endcard %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Dart Site\nDESCRIPTION: Command to build the Dart website locally, generating files in the _site directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: terminal\nCODE:\n```\n./dash_site build\n```\n\n----------------------------------------\n\nTITLE: Comments in Dart\nDESCRIPTION: Demonstrates different types of comments in Dart including single-line, documentation, and multi-line comments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/index.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dartdoc treat\n/// doc comments specially.\n\n/* Comments like these are also supported. */\n```\n\n----------------------------------------\n\nTITLE: Supplying Arguments to main()\nDESCRIPTION: This example demonstrates how to pass arguments to the `main()` function of a Dart program when running it with `dart run`. The arguments are specified after the program name or package target.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run tool/debug.dart arg1 arg2\"\n```\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run foo arg1 arg2\"\n```\n\n----------------------------------------\n\nTITLE: Using Semicolon for Empty Constructor Bodies in Dart\nDESCRIPTION: Shows the best practice of terminating an empty constructor body with a semicolon instead of curly braces.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n  Point(this.x, this.y);\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass Point {\n  double x, y;\n  Point(this.x, this.y) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Futures in Dart (Bad Practice)\nDESCRIPTION: This example shows the more complex and less readable approach of using raw futures with .then() chains for asynchronous code. This approach is more difficult to read and debug compared to async/await.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_44\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> countActivePlayers(String teamName) {\n  return downloadTeam(teamName)\n      .then((team) {\n        if (team == null) return Future.value(0);\n\n        return team.roster.then((players) {\n          return players.where((player) => player.isActive).length;\n        });\n      })\n      .catchError((e) {\n        log.error(e);\n        return 0;\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Dart Library Limitations\nDESCRIPTION: Code references showing unsupported Dart libraries (dart:mirrors and dart:developer) in native platform compilation contexts.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/known-issues/compile-ki.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndart:mirrors\ndart:developer\n```\n\n----------------------------------------\n\nTITLE: Using Square Brackets for Identifier References\nDESCRIPTION: Examples of properly referencing identifiers in documentation using square brackets.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/documentation.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n/// Throws a [StateError] if ...\n/// similar to [anotherMethod()], but ...\n```\n\n----------------------------------------\n\nTITLE: Hooks Directory Structure\nDESCRIPTION: Shows the directory structure for defining hooks that can be invoked by the Dart and Flutter SDK tools, placed in the 'hook' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  hook/\n    build.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum SDK Constraint for Migration\nDESCRIPTION: This snippet shows how to set the minimum SDK constraint in the pubspec.yaml file to enable null safety features in Dart. This is essential before starting the migration process.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Requesting Help on Dart Formatting Options - Console\nDESCRIPTION: This snippet shows the command to display help information regarding additional command-line options for dart formatting. This can assist users in understanding more options available for formatting.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-format.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ dart help format\n```\n\n----------------------------------------\n\nTITLE: Checking if an environment declaration exists in Dart\nDESCRIPTION: Illustrates how to use the `bool.hasEnvironment` constructor in Dart to check whether an environment declaration named 'DEBUG' has been specified. It is used to determine if a certain behavior has been configured based on the existence of the declaration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/core/environment-declarations.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"if (const bool.hasEnvironment('DEBUG')) {\\n  print('Debug behavior was configured!');\\n}\"\n```\n\n----------------------------------------\n\nTITLE: JSON Parsing Interface\nDESCRIPTION: Provides a public interface for sending JSON messages to the worker isolate for parsing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/isolates.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Object?> parseJson(String message) async {\n  _commands.send(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 403 Error Response\nDESCRIPTION: Example of the forbidden error message when publishing a package due to authentication issues\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHTTP error 403: Forbidden\n...\nYou aren't an uploader for package '<foo>'\n```\n\n----------------------------------------\n\nTITLE: Adding Slices with ByteConversionSink in Dart\nDESCRIPTION: Demonstrates how to use the ByteConversionSink's addSlice method to handle byte data efficiently in a conversion sink. It imports dart:convert and creates a chunked conversion with a callback for processing chunks. The addSlice method allows reusing the list, optimizing memory performance. Inputs are byte lists and indices, with an optional boolean for the last slice, and it outputs processed chunks.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/convert/converters-and-codecs.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\n\nvoid main() {\n  var outSink = new ChunkedConversionSink.withCallback((chunks) {\n    print(chunks.single); // 𝅘𝅥𝅯\n  });\n\n  var inSink = utf8.decoder.startChunkedConversion(outSink);\n  var list = [0xF0, 0x9D];\n  inSink.addSlice(list, 0, 2, false);\n  // Since we used `addSlice` we are allowed to reuse the list.\n  list[0] = 0x85;\n  list[1] = 0xA1;\n  inSink.addSlice(list, 0, 2, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Rethrowing Exceptions in Dart (Bad Practice)\nDESCRIPTION: This example demonstrates the incorrect way to rethrow a caught exception in Dart. Using 'throw e' resets the stack trace to the last thrown position, losing the original error context.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/usage.md#2025-04-21_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  somethingRisky();\n} catch (e) {\n  if (!canHandle(e)) throw e;\n  handle(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Dart SDK via apt-get\nDESCRIPTION: Removes Dart SDK installation using apt-get package manager and cleans up configuration files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get remove -y dart\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rm -rf  ~/.dart*\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Dart Migration Tool\nDESCRIPTION: The Dart migration tool inserts comments like /* == false */ to indicate conditions that are always true or false, guiding developers in reviewing migrations for correctness. It might represent defensive code or scenarios where null values are expected, necessitating human judgment for resolution.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nif (registry.viewFactory(viewDescriptor.id) == null /* == false */)\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Code in Dart\nDESCRIPTION: This snippet points out an unnecessary empty statement in the code, suggesting its removal or restructuring for better code quality.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/analysis/analyzer-results-beta.txt#2025-04-21_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nlib/lint.dart:9:19 - Unnecessary empty statement. Try removing the empty statement or restructuring the code.\n```\n\n----------------------------------------\n\nTITLE: Dart Pub Commands List in Markdown\nDESCRIPTION: A formatted markdown list of pub commands with links to their respective documentation pages. Each command represents a specific package management operation in Dart.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/pub-subcommands.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [`add`](/tools/pub/cmd/pub-add)\n* [`cache`](/tools/pub/cmd/pub-cache)\n* [`deps`](/tools/pub/cmd/pub-deps)\n* [`downgrade`](/tools/pub/cmd/pub-downgrade)\n* [`get`](/tools/pub/cmd/pub-get)\n* [`global`](/tools/pub/cmd/pub-global)\n* [`outdated`](/tools/pub/cmd/pub-outdated)\n* [`publish`](/tools/pub/cmd/pub-lish)\n* [`remove`](/tools/pub/cmd/pub-remove)\n* [`token`](/tools/pub/cmd/pub-token)\n* [`unpack`](/tools/pub/cmd/pub-unpack)\n* [`upgrade`](/tools/pub/cmd/pub-upgrade)\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies with pnpm\nDESCRIPTION: Fetches and installs the npm dependencies required for the Dart website project using pnpm.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Coffee Class\nDESCRIPTION: Shows an incorrect implementation of Coffee class where initialization of non-nullable field cannot be proven safe by static analysis.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nclass Coffee {\n  String _temperature;\n\n  void heat() { _temperature = 'hot'; }\n  void chill() { _temperature = 'iced'; }\n\n  String serve() => _temperature + ' coffee';\n}\n\nvoid main() {\n  var coffee = Coffee();\n  coffee.heat();\n  coffee.serve();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Default Dart Pub Upgrade\nDESCRIPTION: Example of running dart pub upgrade without any arguments to upgrade all dependencies to their latest versions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-upgrade.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub upgrade\nDependencies upgraded!\n```\n\n----------------------------------------\n\nTITLE: Setting up Dart SDK repository on Linux\nDESCRIPTION: Commands to set up the Dart SDK repository on Linux systems using APT. Includes adding Google's signing key and repository configuration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/get-sdk.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install apt-transport-https\n$ wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/dart.gpg\n$ echo 'deb [signed-by=/usr/share/keyrings/dart.gpg arch=amd64] https://storage.googleapis.com/download.dartlang.org/linux/debian stable main' | sudo tee /etc/apt/sources.list.d/dart_stable.list\n```\n\n----------------------------------------\n\nTITLE: Invalid External Declaration with List\nDESCRIPTION: Shows an invalid external declaration using a Dart List type, which is not allowed in JS interop.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal set list(List _);\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Playlist for Brazilian Portuguese Dart Course\nDESCRIPTION: Embeds a YouTube playlist for a complete Dart programming course in Brazilian Portuguese.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/videos.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% ytEmbed \"PLK5FPzMuRKlyiWZUUqea2Hmszhy9vUixJ\", \"Dart Curso Completo\", \"series\" %}\n```\n\n----------------------------------------\n\nTITLE: Excluding IDE and OS Generated Files\nDESCRIPTION: Common IDE and operating system generated files that should be excluded from source control, specifically for IntelliJ and Mac environments.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/private-files.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# IntelliJ\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Mac\n.DS_Store\n```\n\n----------------------------------------\n\nTITLE: Including recommended rule set - YAML\nDESCRIPTION: This YAML configuration includes the recommended linter rule set from the lints package in the analysis options file for Dart projects.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/analysis.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:lints/recommended.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Dart Command-Line Tool Packages - Dart\nDESCRIPTION: This command updates the webdev tool in your Dart SDK, making sure you are using the latest version after modifying the SDK.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/debugging.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub global activate webdev     # update webdev\n```\n\n----------------------------------------\n\nTITLE: Upgrading Dependencies to Null-Safe Versions\nDESCRIPTION: Command to upgrade package dependencies to their latest null-safe versions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ dart pub upgrade --null-safety\n```\n\n----------------------------------------\n\nTITLE: Running a Dart File in the Current Package (Non-Bin)\nDESCRIPTION: Shows how to run a Dart file located in the current package but not in the `bin` directory, by specifying its relative path.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/dart-run.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n\"$ dart run tool/debug.dart\"\n```\n\n----------------------------------------\n\nTITLE: Removing All Token Credentials\nDESCRIPTION: Example showing how to remove all authentication tokens.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-token.md#2025-04-21_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub token remove --all\npub-tokens.json is deleted.\nRemoved 1 secret tokens.\n```\n\n----------------------------------------\n\nTITLE: Setting Experiment Flags in VS Code\nDESCRIPTION: This JSON snippet modifies 'launch.json' to include experiment flags 'super-mixins' and 'no-slow-checks' in VS Code configurations for Dart. Ensure the Dart extension for VS Code is installed for proper integration.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/experiment-flags.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n \"configurations\": [\n        {\n            \"name\": \"Dart\",\n            \"program\": \"bin/main.dart\",\n            \"request\": \"launch\",\n            \"type\": \"dart\",\n            \"toolArgs\": [\n                \"--enable-experiment=super-mixins,no-slow-checks\",\n            ],\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Documentation Cards Grid Template\nDESCRIPTION: Liquid template code that generates a grid of documentation cards by iterating through docs_cards.yml data file entries. Each card contains a name, URL and description.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/docs.md#2025-04-21_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n<div class=\"card-grid\">\n{% for card in docs_cards -%}\n  {% card card.name, card.url %}\n    {{card.description}}\n  {% endcard %}\n{% endfor -%}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Linter Rule Cards with Liquid Templates\nDESCRIPTION: Generates a responsive card layout for each Dart linter rule. The template includes conditional rendering for rule states (stable, experimental, deprecated, removed), fix availability, and lint set membership (core, recommended, Flutter). Each card displays the rule name, description, and relevant metadata icons.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/linter-rule-cards.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% for lint in linter_rules %}\n\n{% if lint.state != \"internal\" %}\n\n{% assign lintId = lint.name | downcase %}\n\n<div\n  class=\"card outlined-card\"\n  id=\"{{lint.name}}\"\n  {%- if lint.state == \"stable\" and not lint.sinceDartSdk contains \"wip\" %} data-stable=\"true\"{% endif -%}\n  {%- if lint.fixStatus == \"hasFix\" %} data-has-fix=\"true\"{% endif -%}\n  {%- if lint.sets contains \"core\" %} data-in-core=\"true\"{% endif -%}\n  {%- if lint.sets contains \"recommended\" %} data-in-recommended=\"true\"{% endif -%}\n  {%- if lint.sets contains \"flutter\" %} data-in-flutter=\"true\"{% endif -%}>\n<div class=\"card-header\">\n<header class=\"card-title\" id=\"{{lintId}}\">{{lintId | underscoreBreaker}}</header>\n</div>\n<div class=\"card-content\">\n\n{{lint.description}}\n\n</div>\n<div class=\"card-actions\">\n<div class=\"leading\">\n{% if lint.state == \"removed\" -%}\n<span class=\"material-symbols removed-lints\" title=\"Lint has been removed\" aria-label=\"Lint has been removed\">error</span>\n{% elsif lint.state == \"deprecated\" -%}\n<span class=\"material-symbols deprecated-lints\" title=\"Lint is deprecated\" aria-label=\"Lint is deprecated\">report</span>\n{% elsif lint.state == \"experimental\" -%}\n<span class=\"material-symbols experimental-lints\" title=\"Lint is experimental\" aria-label=\"Lint is experimental\">science</span>\n{% elsif lint.sinceDartSdk contains \"wip\" -%}\n<span class=\"material-symbols wip-lints\" title=\"Lint is unreleased\" aria-label=\"Lint is unreleased\">pending</span>\n{% endif -%}\n{% if lint.fixStatus == \"hasFix\" -%}\n<span class=\"material-symbols has-fix\" title=\"Has a quick fix\" aria-label=\"Has a quick fix\">build</span>\n{% endif -%}\n{% if lint.sets contains \"core\" -%}\n<span class=\"material-symbols\" title=\"Included in the core lint set\" aria-label=\"Included in the core lint set\">circles</span>\n{% endif -%}\n{% if lint.sets contains \"recommended\" -%}\n<span class=\"material-symbols\" title=\"Included in the recommended lint set\" aria-label=\"Included in the recommended lint set\">thumb_up</span>\n{% endif -%}\n{% if lint.sets contains \"flutter\" -%}\n<span class=\"material-symbols\" title=\"Included in the Flutter lint set\" aria-label=\"Included in the Flutter lint set\">flutter</span>\n{% endif -%}\n</div>\n\n<div class=\"trailing\">\n<a class=\"outlined-button\" href=\"/tools/linter-rules/{{lint.name}}\" title=\"Learn more about this lint and when to enable it.\">Learn more</a>\n<button class=\"copy-button filled-button hidden\" title=\"Copy {{lint.name}} to your clipboard.\">Copy</button>\n</div>\n\n</div>\n</div>\n\n{% endif %}\n\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK via apt-get\nDESCRIPTION: Updates package list and installs Dart SDK using apt-get package manager.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get update && sudo apt-get install dart\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure\nDESCRIPTION: Shows the recommended structure for example code that demonstrates package usage, placed in the 'example' directory.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/package-layout.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nenchilada/\n  example/\n    main.dart\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Shell\nDESCRIPTION: Verifies the installed version of Node.js using the command-line interface.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: FFigen Preamble Configuration\nDESCRIPTION: YAML configuration for adding linter ignore rules to generated code\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  preamble: |\n    // ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field, return_of_invalid_type, void_checks, annotate_overrides, no_leading_underscores_for_local_identifiers, library_private_types_in_public_api\n```\n\n----------------------------------------\n\nTITLE: Running dash_site Help Command\nDESCRIPTION: Displays help information for the dash_site tool used in the Dart website project.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n./dash_site --help\n```\n\n----------------------------------------\n\nTITLE: Analyzer Configuration - Implicit Casts & Dynamic\nDESCRIPTION: This snippet shows the old analyzer configuration options for implicit casts and dynamic types. These options are no longer supported in Dart 3 and will trigger a warning if used.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n\"analyzer:\\n  strong-mode:\\n    implicit-casts: false\\n    implicit-dynamic: false\"\n```\n\n----------------------------------------\n\nTITLE: Refreshing Code Excerpts\nDESCRIPTION: Updates code excerpts in Markdown files to match the corresponding Dart files.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n./dash_site refresh-excerpts\n```\n\n----------------------------------------\n\nTITLE: Dart Code Region Example\nDESCRIPTION: Example of how code regions are organized in the Language Tour documentation, showing multiple docregions within function blocks to avoid declaration conflicts.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid miscDeclAnalyzedButNotTested(bool c) {\n  {\n    // #docregion foo-1\n    var foo = 1;\n    // #enddocregion foo-1\n  }\n\n  (int bar) {\n    // #docregion foo-2\n    var foo = 2 + bar;\n    // #enddocregion foo-2\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Pointer Arithmetic Methods on Pointer Types (Dart)\nDESCRIPTION: This snippet explains the deprecation of the `elementAt` pointer arithmetic methods on `Pointer` types within the `dart:ffi` library. Developers are instructed to migrate to using the `-` and `+` operators instead, for pointer arithmetic. This promotes a more standard and readable approach.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n\t[The `elementAt` pointer arithmetic methods\n\ton `Pointer` types are deprecated][54250].\n\tMigrate to the `-` and `+` operators instead.\n```\n\n----------------------------------------\n\nTITLE: Creating Dart List with List Literal Syntax\nDESCRIPTION: Shows how to use list literal syntax with a for loop to create a non-nullable list where each element is a distinct object, replacing index-based population.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/faq.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n_jellyPoints = [\n  for (var i = 0; i <= jellyMax; i++)\n    Vec2D() // Each list element is a distinct Vec2D\n];\n```\n\n----------------------------------------\n\nTITLE: Serving Dart Web App in Debug Mode - Dart\nDESCRIPTION: Use this command to start the Dart development compiler and enable debugging features. It allows you to serve your app with debug capabilities to investigate issues.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/debugging.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ webdev serve --debug\n```\n\n----------------------------------------\n\nTITLE: Serving the Dart Website Locally\nDESCRIPTION: Generates and serves the Dart website on a local port for development and testing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n./dash_site serve\n```\n\n----------------------------------------\n\nTITLE: Adding Google Linux GPG Key for Dart\nDESCRIPTION: Downloads and adds Google's Linux GPG public key for package verification.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub \\\n  | sudo gpg  --dearmor -o /usr/share/keyrings/dart.gpg\n```\n\n----------------------------------------\n\nTITLE: Publishing Package to Custom Repository\nDESCRIPTION: Demonstrates the command to publish a package to a custom repository.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/custom-package-repositories.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub publish\nPublishing example_package 1.0.0 to https://dart-packages.example.com\n|-- CHANGELOG.md\n|-- LICENSE\n|-- README.md\n|-- lib\n|   '-- example_package.dart\n'-- pubspec.yaml\n...\n```\n\n----------------------------------------\n\nTITLE: marking all native wrapper classes as `base` in dart:nativewrappers (Dart)\nDESCRIPTION: This snippet describes that all native wrapper classes are now marked `base` in dart:nativewrappers. this ensures that none of their subtypes can be implemented. \nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/breaking-changes.md#2025-04-21_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n {{experimental}} [All native wrapper classes are now marked `base`][51896]\n  so that none of their subtypes can be implemented.\n```\n\n----------------------------------------\n\nTITLE: Extension Method Usage with String Methods in Dart\nDESCRIPTION: Demonstrates using both built-in String methods and extension methods together.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/extension-methods.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Import a library that contains an extension on String.\nimport 'string_apis.dart';\n\nvoid main() {\n  print('42'.padLeft(5)); // Use a String method.\n  print('42'.parseInt()); // Use an extension method.\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Initialization Error in Dart\nDESCRIPTION: Error showing incorrect placement of super constructor call in initializer list\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/type_system/analyzer-results-stable.txt#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Animal {\n  Animal() : super() // super call must be last\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository with Submodules in Git\nDESCRIPTION: Clones the Dart website repository including its submodules using Git.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recurse-submodules https://github.com/dart-lang/site-www.git\n```\n\n----------------------------------------\n\nTITLE: Checking Dart Version in Shell\nDESCRIPTION: Verifies the installed version of Dart using the command-line interface.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart --version\n```\n\n----------------------------------------\n\nTITLE: Ignoring Security Advisories in Pubspec.yaml\nDESCRIPTION: This YAML code snippet demonstrates how to ignore specific security advisories within the Dart package by adding the advisory identifier to the 'ignored_advisories' list in the pubspec.yaml configuration. This allows for suppression of warnings for advisories deemed irrelevant.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/security-advisories.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: myapp\ndependencies:\n  foo: ^1.0.0\nignored_advisories:\n - GHSA-4rgh-jx4f-qfcq\n```\n\n----------------------------------------\n\nTITLE: Exporting Service Account Keys with gcloud CLI\nDESCRIPTION: Command to create and export service account keys for authentication. The exported keys will be saved to key-file.json.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud iam service-accounts keys create key-file.json \\\n  --iam-account=pub-dev@$PROJECT_ID.iam.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Adding Dart Repository to Linux System\nDESCRIPTION: Adds the official Dart package repository to the system's package sources.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/install/linux.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ echo 'deb [signed-by=/usr/share/keyrings/dart.gpg arch=amd64] https://storage.googleapis.com/download.dartlang.org/linux/debian stable main' \\\n  | sudo tee /etc/apt/sources.list.d/dart_stable.list\n```\n\n----------------------------------------\n\nTITLE: Basic FFigen Configuration\nDESCRIPTION: YAML configuration for generating Objective-C bindings using ffigen\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/objective-c-interop.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nffigen:\n  name: AVFAudio\n  description: Bindings for AVFAudio.\n  language: objc\n  output: 'avf_audio_bindings.dart'\n  headers:\n    entry-points:\n      - '/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/AVFAudio.framework/Headers/AVAudioPlayer.h'\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the Effective Dart guide page, specifying title, description and navigation links.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Effective Dart\ndescription: >\n  Best practices for building consistent, maintainable,\n  and efficient Dart libraries.\nnextpage:\n  url: /effective-dart/style\n  title: Style\n---\n```\n\n----------------------------------------\n\nTITLE: Pub Get Hash Verification Plaintext Output\nDESCRIPTION: Example output demonstrating content hash verification and package resolution warnings when using dart pub get\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/glossary.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub get\nResolving dependencies...\n[!Cached version of foo-1.0.0 has wrong hash - redownloading.!]\n ~ foo 1.0.0 (was 1.0.0)\n[!The existing content-hash from pubspec.lock doesn't match contents for:!]\n * foo-1.0.0 from \"pub.dev\"\nThis indicates one of:\n * The content has changed on the server since you created the pubspec.lock.\n * The pubspec.lock has been corrupted.\n\n[!The content-hashes in pubspec.lock has been updated.!]\n\nFor more information see:\nhttps://dart.dev/go/content-hashes\n\nChanged 1 dependency!\n```\n\n----------------------------------------\n\nTITLE: Delete Pub Credentials on Windows\nDESCRIPTION: Commands to delete pub credentials file on Windows using Command Prompt and PowerShell\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n$ del \"%APPDATA%\\dart\\pub-credentials.json\"\n```\n\nLANGUAGE: ps\nCODE:\n```\n$ Remove-Item -Path \"%APPDATA%\\dart\\pub-credentials.json\"\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Build Files - Console\nDESCRIPTION: This console command is used to remove unnecessary source map files generated during the build process. These files are useful during development for debugging purposes but are not needed in production deployments, reducing the overall size and potential leakage of source code structure. This command should be executed from the root directory of the application.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/deployment.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ find build -type f -name \"*.js.map\" -exec rm {} +\n```\n\n----------------------------------------\n\nTITLE: Type Tests Migration from dart:html to package:web in Dart\nDESCRIPTION: Shows how to replace 'is' type checks with instanceOfString method for package:web. This change is needed because package:web types are reified to JSObject, making traditional type tests behave differently.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/package-web.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nobj is Window; // Remove\nobj.instanceOfString('Window'); // Add\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the Dart documentation homepage that sets the page title, description and disables table of contents.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/docs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Dart documentation\ndescription: Learn to use the Dart language and libraries.\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Default Value Syntax Migration - Before\nDESCRIPTION: Example of deprecated colon syntax for named parameter default values.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nint someInt({int x: 0}) => x;\n```\n\n----------------------------------------\n\nTITLE: Adding Experiment Flags in Android Studio\nDESCRIPTION: This XML configuration adds an experimental flag for 'non-nullable' to a Dart command line run configuration in Android Studio. Ensure Android Studio is configured to run Dart applications.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/experiment-flags.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<component name=\"ProjectRunConfigurationManager\">\n  <configuration default=\"false\" name=\"Run main\" type=\"DartCommandLineRunConfigurationType\" factoryName=\"Dart Command Line Application\">\n    <option name=\"VMOptions\" value=\"--enable-experiment=non-nullable\" />\n    <option name=\"filePath\" value=\"$PROJECT_DIR$/bin/main.dart\" />\n    <method v=\"2\" />\n  </configuration>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Initial Migration Without Hints in Dart\nDESCRIPTION: This code snippet shows an initial migration scenario where the variable 'zero' is inferred as nullable. No hint markers are used here, which results in 'zero!' being required during its usage.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/migration-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar ints = const <int?>[0, null];\nvar zero = ints[0];\nvar one = zero! + 1;\nvar zeroOne = <int?>[zero, one];\n```\n\n----------------------------------------\n\nTITLE: Setting Up pnpm Package Manager\nDESCRIPTION: Enables and installs the pnpm package manager using corepack for managing npm dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncorepack enable\ncorepack install\n```\n\n----------------------------------------\n\nTITLE: Git Tag Creation for Package Publishing\nDESCRIPTION: Console commands demonstrating how to create and push a git tag to trigger automated package publishing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ git tag v1.2.3\n$ git push origin v1.2.3\n```\n\n----------------------------------------\n\nTITLE: Book Display Template with Liquid and HTML\nDESCRIPTION: Template code that iterates through a collection of Dart books and displays each book's cover image, title, authors, and description in a structured layout. Uses Liquid templating syntax for data iteration and HTML for layout structure.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/books.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% for book in books-dart %}\n\n<div class=\"book-img-with-details\">\n<a href=\"{{book.link}}\" title=\"{{book.title}}\">\n  <img src=\"/assets/img/cover/{{book.cover}}\" alt=\"{{book.title}}\">\n</a>\n<div class=\"details\">\n\n### [{{book.title}}]({{book.link}})\n{:.title}\n\nby {{book.authors | arrayToSentenceString}}\n{:.authors}\n\n{{book.desc}}\n\n</div>\n</div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Dart Variable Declaration Example\nDESCRIPTION: A simple example of variable declaration in Dart, showing the use of type inference with the 'var' keyword.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar name = 'Bob';\n```\n\n----------------------------------------\n\nTITLE: Managing Resource Cleanup in Dart\nDESCRIPTION: This snippet indicates an unclosed instance of 'Sink', recommending proper resource management by invoking the 'close' method in the appropriate function.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/analysis/analyzer-results-beta.txt#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nlib/lint.dart:17:7 - Unclosed instance of 'Sink'. Try invoking 'close' in the function in which the 'Sink' was created.\n```\n\n----------------------------------------\n\nTITLE: TOC Include Statement\nDESCRIPTION: Liquid include statement for adding the table of contents to the document.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% include './_toc.md' %}\n```\n\n----------------------------------------\n\nTITLE: Help Command for Webdev - Dart\nDESCRIPTION: This command provides the help information for the webdev tool, aiding users in understanding how to utilize the tool for Dart web project development.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/web/debugging.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ webdev --help\nA tool to develop Dart web projects.\n...\n```\n\n----------------------------------------\n\nTITLE: Delete Pub Credentials on Linux\nDESCRIPTION: Commands to delete pub credentials file on Linux systems, with XDG_CONFIG_HOME handling\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rm $XDG_CONFIG_HOME/dart/pub-credentials.json\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rm $HOME/.config/dart/pub-credentials.json\n```\n\n----------------------------------------\n\nTITLE: Firebase Project Management\nDESCRIPTION: Commands to list available Firebase projects and set the active project for deployment.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: terminal\nCODE:\n```\nfirebase projects:list\nfirebase use <your-project>\n```\n\n----------------------------------------\n\nTITLE: Comparing Equality and Identity of Numbers in Dart\nDESCRIPTION: This code demonstrates expressions that test equality (==) and identity (identical()) of numeric values in Dart, highlighting differences between native and web platforms. It shows how 1.0 and 1 are identical on web but not native, and other platform-specific behaviors with zero, NaN, and infinity.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/language/number-representation.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n1.0 == 1\nidentical(1.0, 1)\n0.0 == -0.0\nidentical(0.0, -0.0)\ndouble.nan == double.nan\nidentical(double.nan, double.nan)\ndouble.infinity == double.infinity\nidentical(double.infinity, double.infinity)\n```\n\n----------------------------------------\n\nTITLE: Undefined Method Error in Dart Iterable\nDESCRIPTION: Error showing attempt to use undefined 'add' method on Iterable type at lib/bounded/instantiate_to_bound.dart\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/type_system/analyzer-results-stable.txt#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nIterable.add\n```\n\n----------------------------------------\n\nTITLE: Generating Formatted Linter Rule Links with Liquid in Dart Documentation\nDESCRIPTION: This Liquid template snippet takes a comma-separated list of linter rules, splits them, and generates formatted HTML links for each rule. It handles singular and plural cases for the heading and adds commas between multiple rules.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/_includes/linter-rule-mention.md#2025-04-21_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{%- assign split_rules = rules | split: ', ' -%}\nLinter rule{% if split_rules.size > 1 %}s{% endif %}:\n{%- for rule in split_rules %}\n  [{{rule}}](/tools/linter-rules/{{rule}}){%- unless forloop.last %}, {% endunless %}\n{%- endfor %}\n{:.linter-rule}\n```\n\n----------------------------------------\n\nTITLE: Comment About Future Page Improvements\nDESCRIPTION: A TODO comment suggesting to automate the video list if it grows, similar to another page (book.md).\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/videos.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% comment %}\nTODO: If the list of videos grows, consider automating this like book.md.\n{% endcomment %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Inclusion\nDESCRIPTION: Includes a JavaScript file (`/assets/js/glossary.js`) to handle glossary page functionalities.  The `defer: true` attribute ensures that the script is executed after the HTML is parsed.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/glossary.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\njs: [{url: '/assets/js/glossary.js', defer: true}]\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies with Dart Pub Client\nDESCRIPTION: This snippet demonstrates how the Dart pub client outputs dependency resolution results, including affected dependencies by security advisories when running the command 'dart pub get'. It highlights the advisory impact on package dependencies.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/security-advisories.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dart pub get\nResolving dependencies...\nhttp 0.13.0 (affected by advisory: [^0], 1.2.0 available)\nGot dependencies!\nDependencies are affected by security advisories:\n  [^0]: https://github.com/advisories/GHSA-4rgh-jx4f-qfcq\n```\n\n----------------------------------------\n\nTITLE: Defining Async Function in Dart\nDESCRIPTION: This code snippet shows how to define an async function in Dart by adding the `async` keyword before the function body. This is useful for transforming a synchronous function into an asynchronous one. The function header is modified with `async`, allowing the use of `await` inside it.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async { ··· }\n```\n\n----------------------------------------\n\nTITLE: Runtime Error Example with Class Implementation\nDESCRIPTION: Demonstrates how implementing a class without handling private methods can lead to runtime exceptions, supporting the case for using the base modifier.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/class-modifiers-for-apis.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'a.dart';\n\nclass B implements A {\n  // No implementation of _privateMethod()!\n}\n\nmain() {\n  callPrivateMethod(B()); // Runtime exception!\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for Keywords Display\nDESCRIPTION: Template code that generates a table displaying Dart keywords with their usage annotations. Uses Liquid templating to process keyword types and add superscript notation for different keyword categories.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/keywords.md#2025-04-21_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% assign ckw = '&nbsp;<sup>1</sup>' %}\n{% assign bii = '&nbsp;<sup>2</sup>' %}\n{% assign unr = '&nbsp;<sup>3</sup>' %}\n```\n\n----------------------------------------\n\nTITLE: HTML Section for Content Search Results\nDESCRIPTION: Defines the HTML section to display the search results. This section will contain a list of cards, each representing a glossary term. The content within this section is dynamically generated using Liquid templating language.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/glossary.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<section id=\"content-search-results\">\n<div class=\"card-list\">\n```\n\n----------------------------------------\n\nTITLE: Async Function Solution: reportUserRole\nDESCRIPTION: Presents a solution for the `reportUserRole` exercise, demonstrating how to use `await` to fetch the user role and construct the return string.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/async/async-await.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n\"Future<String> reportUserRole() async {\\n    final username = await fetchRole();\\n    return 'User role: $username';\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Type Promotion with Null Check in Dart\nDESCRIPTION: Demonstrates how Dart promotes a nullable parameter type to non-nullable after a null check, allowing safe method calls inside the conditional block.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nString makeCommand(String executable, [List<String>? arguments]) {\n  var result = executable;\n  if (arguments != null) {\n    result += ' ' + arguments.join(' ');\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Console Output for Unicode Character Handling\nDESCRIPTION: Shows the console output when running the Unicode character handling code, demonstrating how the characters package correctly handles complex Unicode characters like flags.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/language/built-in-types.md#2025-04-21_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ dart run bin/main.dart\nHi 🇩🇰\nThe end of the string: ???\nThe last character: 🇩🇰\n```\n\n----------------------------------------\n\nTITLE: Using forEach with Maps in Dart\nDESCRIPTION: Shows how to use forEach on a Map, where the function takes two arguments: key and value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/libraries/dart-core.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nhawaiianBeaches.forEach((k, v) {\n  print('I want to visit $k and swim at $v');\n  // I want to visit Oahu and swim at\n  // [Waikiki, Kailua, Waimanalo], etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Playlist for Google-produced Dart Videos\nDESCRIPTION: Embeds a YouTube playlist containing Google-produced videos about Dart capabilities, ranging from 5-minute talks on asynchrony support to Google I/O sessions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/videos.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% ytEmbed \"PLjxrf2q8roU0Net_g1NT5_vOO3s_FR02J\", \"Dart videos from Google\", \"series\" %}\n```\n\n----------------------------------------\n\nTITLE: Type Assignment Errors in Dart\nDESCRIPTION: Multiple type assignment errors including invalid assignments between numeric types (double to int), primitive types (int to bool), and object types (Cat to MaineCoon)\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/type_system/analyzer-results-stable.txt#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint x = doubleValue; // invalid\nbool b = intValue; // invalid\nMaineCoon cat = Cat(); // invalid\n```\n\n----------------------------------------\n\nTITLE: Opting Out Main Function from Null Safety in Dart\nDESCRIPTION: This Dart snippet shows how to opt out the main function and its file from null safety using a language version comment.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/unsound-null-safety.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// @dart=2.9\nimport 'src/my_app.dart';\n\nvoid main() {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dart Pub Cache Commands\nDESCRIPTION: Main pub cache command syntax for adding packages, repairing cache, and cleaning cache. These commands allow basic cache management operations.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/cmd/pub-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ dart pub cache add <package> [--version <constraint>] [--all]\n$ dart pub cache repair\n$ dart pub cache clean\n```\n\n----------------------------------------\n\nTITLE: Using Function Declaration in Dart\nDESCRIPTION: Shows how to properly declare a function in Dart, binding it to a name. This is the recommended approach for defining functions.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nvoid greet(String name) {\n  print('Hello, $name!');\n}\n// Usage:\ngreet('World');\n```\n\n----------------------------------------\n\nTITLE: Example Pubspec Configuration for Package Publishing\nDESCRIPTION: Sample pubspec.yaml configuration demonstrating version specification and Dart SDK compatibility for package publishing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/automated-publishing.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npackage: my_package_name\nversion: 1.2.3\nenvironment:\n  sdk: ^2.19.0\n```\n\n----------------------------------------\n\nTITLE: Redundant Null Check Warning Example in Dart\nDESCRIPTION: Demonstrates how Dart warns about redundant null checks after type promotion has occurred.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nString checkList(List<Object>? list) {\n  if (list == null) return 'No list';\n  if (list?.isEmpty ?? false) {\n    return 'Empty list';\n  }\n  return 'Got something';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Constraint Without Dart 3 Changes\nDESCRIPTION: YAML configuration showing SDK version constraint that does not apply Dart 3 versioned changes.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/resources/dart-3-migration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.14.0 <3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Stub Implementation\nDESCRIPTION: Default stub implementation that throws UnsupportedError when platform-specific code is not available.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/create-packages.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid alarm([String? text]) => throw UnsupportedError('hw_none alarm');\n\nString get message => throw UnsupportedError('hw_none message');\n```\n\n----------------------------------------\n\nTITLE: Installing Dart Dependencies\nDESCRIPTION: Fetches and installs the Dart dependencies required for the Dart website project.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndart pub get\n```\n\n----------------------------------------\n\nTITLE: Valid External Declaration with ExternalDartReference\nDESCRIPTION: Shows a valid external declaration using ExternalDartReference for opaque Dart value passing.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal void externalDartReference(ExternalDartReference _);\n```\n\n----------------------------------------\n\nTITLE: Valid External Declaration with JS Types\nDESCRIPTION: Shows a valid external declaration using JS types for parameters and return value.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/interop/js-interop/js-types.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@JS()\nexternal JSArray jsTypes(JSObject _, JSString __);\n```\n\n----------------------------------------\n\nTITLE: Pre-Null Safety Example in Dart\nDESCRIPTION: Shows how null-aware operators worked before null safety was introduced.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/null-safety/understanding-null-safety.md#2025-04-21_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nString notAString = null;\nprint(notAString?.length);\n```\n\n----------------------------------------\n\nTITLE: Comment Line Example\nDESCRIPTION: A simple comment line in plaintext format demonstrating basic documentation syntax\nSOURCE: https://github.com/dart-lang/site-www/blob/main/examples/cli/test_data/quote.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a comment line.\n```\n\n----------------------------------------\n\nTITLE: Dart Class Modifiers\nDESCRIPTION: Usage of class modifiers for controlling class inheritance and interface implementation.\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/effective-dart/_toc.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nmixin\nclass\nmixin class\n```\n\n----------------------------------------\n\nTITLE: Delete Pub Credentials on macOS\nDESCRIPTION: Command to delete pub credentials file on macOS systems\nSOURCE: https://github.com/dart-lang/site-www/blob/main/src/content/tools/pub/troubleshoot.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rm $HOME/Library/Application Support/dart/pub-credentials.json\n```"
  }
]