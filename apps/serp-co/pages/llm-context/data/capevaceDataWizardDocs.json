[
  {
    "owner": "capevace",
    "repo": "data-wizard-docs",
    "content": "TITLE: Creating Various Types of Custom Strategies in PHP\nDESCRIPTION: Demonstrates three ways to create custom strategies: extending the Extractor class for a new strategy, extending an existing strategy like SequentialStrategy, or implementing the Strategy interface for complete customization.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/custom-strategies.mdx#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Mateffy\\Magic\\Extraction\\Strategies\\Strategy;\nuse Mateffy\\Magic\\Extraction\\Strategies\\Extractor;\n\n// Create a custom strategy\nclass MyCustomStrategy extends Extractor {}\n\n// Extend an existing strategy\nclass MyCustomizedStrategy extends SequentialStrategy {}\n\n// Or completely custom by doing everything yourself\nclass MyCompletelyCustomStrategy implements Strategy {}\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice JSON Schema Definition\nDESCRIPTION: Comprehensive JSON schema that defines the structure and validation rules for invoice data extraction, compliant with ZUGFeRD 2.0 / EN16931 standards.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/paper-invoice-to-structured-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"title\": \"Invoice\",\n      \"description\": \"Schema for an invoice compliant with ZUGFeRD 2.0 / EN16931.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"invoiceNumber\": {\n          \"type\": \"string\",\n          \"description\": \"Unique invoice identifier\",\n          \"pattern\": \"^[A-Za-z0-9\\\\-/]+$\"\n        },\n        \"issueDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"description\": \"Date the invoice was issued\"\n        },\n        \"currency\": {\n          \"type\": \"string\",\n          \"description\": \"Currency code (ISO 4217)\",\n          \"enum\": [\n            \"EUR\",\n            \"USD\",\n            \"GBP\",\n            \"CHF\"\n          ]\n        },\n        \"seller\": {\n          \"type\": \"object\",\n          \"description\": \"Information about the seller\",\n          \"properties\": {\n            \"name\": {\n              \"type\": \"string\",\n              \"description\": \"Seller company name\"\n            },\n            \"address\": {\n              \"type\": \"string\",\n              \"description\": \"Street and number\"\n            },\n            \"postalCode\": {\n              \"type\": \"string\",\n              \"description\": \"Postal code\"\n            },\n            \"city\": {\n              \"type\": \"string\",\n              \"description\": \"City name\"\n            },\n            \"country\": {\n              \"type\": \"string\",\n              \"description\": \"Country code (ISO 3166-1 alpha-2)\"\n            },\n            \"vatNumber\": {\n              \"type\": \"string\",\n              \"description\": \"VAT identification number\"\n            }\n          },\n          \"required\": [\n            \"name\",\n            \"address\",\n            \"postalCode\",\n            \"city\",\n            \"country\",\n            \"vatNumber\"\n          ]\n        },\n        \"buyer\": {\n          \"type\": \"object\",\n          \"description\": \"Information about the buyer\",\n          \"properties\": {\n            \"customerNumber\": {\n              \"type\": \"string\",\n              \"description\": \"Buyer reference number\"\n            },\n            \"name\": {\n              \"type\": \"string\",\n              \"description\": \"Buyer company name\"\n            },\n            \"address\": {\n              \"type\": \"string\",\n              \"description\": \"Street and number\"\n            },\n            \"postalCode\": {\n              \"type\": \"string\",\n              \"description\": \"Postal code\"\n            },\n            \"city\": {\n              \"type\": \"string\",\n              \"description\": \"City name\"\n            },\n            \"country\": {\n              \"type\": \"string\",\n              \"description\": \"Country code (ISO 3166-1 alpha-2)\"\n            }\n          },\n          \"required\": [\n            \"name\",\n            \"address\",\n            \"postalCode\",\n            \"city\",\n            \"country\"\n          ]\n        },\n        \"lineItems\": {\n          \"type\": \"array\",\n          \"description\": \"List of invoice items\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"position\": {\n                \"type\": \"integer\",\n                \"description\": \"Line item position\"\n              },\n              \"description\": {\n                \"type\": \"string\",\n                \"description\": \"Item description\"\n              },\n              \"unitPrice\": {\n                \"type\": \"number\",\n                \"description\": \"Net price per unit\",\n                \"minimum\": 0,\n                \"multipleOf\": 0.0001\n              },\n              \"quantity\": {\n                \"type\": \"number\",\n                \"description\": \"Quantity of items\"\n              },\n              \"vatRate\": {\n                \"type\": \"number\",\n                \"description\": \"VAT percentage\",\n                \"minimum\": 0,\n                \"maximum\": 100\n              },\n              \"netAmount\": {\n                \"type\": \"number\",\n                \"description\": \"Total price before tax\"\n              }\n            },\n            \"required\": [\n              \"position\",\n              \"unitPrice\",\n              \"quantity\",\n              \"vatRate\",\n              \"netAmount\"\n            ]\n          }\n        },\n        \"totalAmounts\": {\n          \"type\": \"object\",\n          \"description\": \"Invoice total amounts\",\n          \"properties\": {\n            \"netTotal\": {\n              \"type\": \"number\",\n              \"description\": \"Total amount before tax\"\n            },\n            \"taxTotal\": {\n              \"type\": \"number\",\n              \"description\": \"Total tax amount\"\n            },\n            \"grossTotal\": {\n              \"type\": \"number\",\n              \"description\": \"Total amount including tax\"\n            },\n            \"dueTotal\": {\n              \"type\": \"number\",\n              \"description\": \"Total amount due\"\n            }\n          },\n          \"required\": [\n            \"netTotal\",\n            \"taxTotal\",\n            \"grossTotal\",\n            \"dueTotal\"\n          ]\n        },\n        \"paymentDetails\": {\n          \"type\": \"object\",\n          \"description\": \"Payment information\",\n          \"properties\": {\n            \"paymentTerms\": {\n              \"type\": \"string\",\n              \"description\": \"Payment terms\"\n            },\n            \"paymentMethod\": {\n              \"type\": \"string\",\n              \"description\": \"Payment method\",\n              \"enum\": [\n                \"SEPA_TRANSFER\",\n                \"CREDIT_CARD\",\n                \"PAYPAL\"\n              ]\n            },\n            \"iban\": {\n              \"type\": \"string\",\n              \"description\": \"IBAN for bank transfer\"\n            }\n          },\n          \"required\": [\n            \"paymentTerms\",\n            \"paymentMethod\"\n          ]\n        }\n      },\n      \"required\": [\n        \"invoiceNumber\",\n        \"issueDate\",\n        \"currency\",\n        \"seller\",\n        \"buyer\",\n        \"lineItems\",\n        \"totalAmounts\"\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing a New Custom Strategy in PHP\nDESCRIPTION: Shows how to implement a new custom strategy by extending the Extractor class and implementing the run() method, which processes artifacts and returns the extracted data.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/custom-strategies.mdx#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Mateffy\\Magic\\Extraction\\Strategies\\Extractor;\n\nclass MyCustomStrategy extends Extractor\n{\n    public function run(array $artifacts): array\n    {\n        // Implement your strategy here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending an Existing Strategy with Custom Validation in PHP\nDESCRIPTION: Demonstrates how to extend an existing ParallelStrategy to add custom validation logic for invoice data, ensuring that the sum of line items matches the invoice total.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/custom-strategies.mdx#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Mateffy\\Magic\\Extraction\\Strategies\\Extractor;\nuse Mateffy\\Magic\\Exceptions\\JsonSchemaValidationError;\n\nclass ValidatedInvoiceStrategy extends ParallelStrategy\n{\n    public function run(array $artifacts): array\n    {\n        $data = parent::run($artifacts);\n\n        // Validate an invoice total:\n\n        $total = 0;\n\n        foreach ($data['line_items'] as $item) {\n            $total += $item['amount'];\n        }\n\n        if ($total !== $data['total']) {\n            throw new \\JsonSchemaValidationError(\n                'Invoice total does not match the sum of line items'\n            );\n        }\n\n        // The returned data is now\n        // guaranteed to be valid invoice data.\n        return $data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Data Wizard iFrame Events with JavaScript\nDESCRIPTION: This JavaScript code listens for messages from the Data Wizard iFrame and handles different events such as extraction completion, errors, and progress updates. It demonstrates how to interact with the embedded Data Wizard instance programmatically.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/integrate.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst wizardFrame = document.getElementById('data-wizard-frame').contentWindow; // Replace 'data-wizard-frame' with your iFrame ID\n\nwindow.addEventListener('message', message => {\n  if (message.source !== wizardFrame) {\n    return; // Skip messages not from our iFrame\n  }\n\n  if (message.data.event === 'extraction.completed') {\n    // Extraction completed successfully\n    const extractedData = message.data.data;\n    console.log(\"Extracted Data:\", extractedData);\n    wizardFrame.remove(); // Hide the iFrame\n    displayDataInApp(extractedData); // Function to display data in your application UI\n  } else if (message.data.event === 'extraction.error') {\n    // An error occurred during extraction\n    console.error(\"Extraction Error:\", message.data.error);\n    // Handle error in your application UI\n  } else if (message.data.event === 'extraction.progress') {\n    // Real-time progress update\n    const progressData = message.data.data;\n    console.log(\"Extraction Progress:\", progressData);\n    // Update progress indicator in your application UI\n  }  // ... handle other events as needed\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Real Estate JSON Schema for Data Extraction\nDESCRIPTION: This JSON schema defines the structure for extracting real estate data from exposés. It includes property details, unit information, and validation rules for ensuring data accuracy and consistency.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/real-estate-properties-from-exposes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"Name of the real estate property\"\n    },\n    \"address\": {\n      \"type\": \"string\",\n      \"description\": \"Address of the real estate property\"\n    },\n    \"description_text\": {\n      \"type\": \"string\",\n      \"description\": \"Short description of the real estate property\"\n    },\n    \"units\": {\n      \"type\": \"array\",\n      \"description\": \"List of rentable units\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"usages\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Usages of the unit (e.g., living, office, retail)\"\n          },\n          \"label\": {\n            \"type\": \"string\",\n            \"description\": \"Label or name of the unit\"\n          },\n          \"floor\": {\n            \"type\": \"string\",\n            \"description\": \"Floor level of the unit\"\n          },\n          \"rent_per_m2\": {\n            \"type\": \"number\",\n            \"description\": \"Rent price per square meter\"\n          },\n          \"images\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"artifact-id\"\n            },\n            \"description\": \"Images of the unit (artifact IDs)\"\n          },\n          \"floorplans\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"artifact-id\"\n            },\n            \"description\": \"Floorplans of the unit (artifact IDs)\"\n          }\n        },\n        \"required\": [\n          \"usages\",\n          \"label\",\n          \"floor\",\n          \"rent_per_m2\"\n        ]\n      }\n    },\n    \"images\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"format\": \"artifact-id\"\n      },\n      \"description\": \"Images of the property (artifact IDs)\"\n    },\n    \"floorplans\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"format\": \"artifact-id\"\n      },\n      \"description\": \"Floorplans of the property (artifact IDs)\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"address\",\n    \"description_text\",\n    \"units\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Customer Feedback Forms\nDESCRIPTION: This JSON schema defines the structure and validation rules for customer feedback data. It specifies required fields, data types, and descriptions for each property in the feedback form.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/customer-feedback-to-data.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"formType\": {\n      \"type\": \"string\",\n      \"description\": \"Type of the form (e.g., Customer Feedback Form)\",\n      \"default\": \"Customer Feedback Form\"\n    },\n    \"submissionDate\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"description\": \"Date the form was submitted\"\n    },\n    \"customerName\": {\n      \"type\": \"string\",\n      \"description\": \"Full name of the customer\"\n    },\n    \"email\": {\n      \"type\": \"string\",\n      \"format\": \"email\",\n      \"description\": \"Email address of the customer\"\n    },\n    \"feedbackText\": {\n      \"type\": \"string\",\n      \"description\": \"Textual feedback provided by the customer\"\n    },\n    \"rating\": {\n      \"type\": \"integer\",\n      \"description\": \"Customer satisfaction rating (e.g., 1-5 stars)\",\n      \"minimum\": 1,\n      \"maximum\": 5\n    },\n    \"suggestions\": {\n      \"type\": \"string\",\n      \"description\": \"Customer suggestions for improvement\"\n    }\n  },\n  \"required\": [\n    \"formType\",\n    \"submissionDate\",\n    \"feedbackText\",\n    \"rating\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Tax Form Data Extraction\nDESCRIPTION: This JSON schema defines the structure and validation rules for tax form data extraction. It specifies properties such as form type, tax year, taxpayer ID, filing status, income, deductions, tax liability, and payment due date, along with their data types and constraints.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/data-from-paper-tax-forms.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"formType\": {\n      \"type\": \"string\",\n      \"description\": \"Type of tax form (e.g., 1040, W-2)\",\n      \"default\": \"Tax Form\"\n    },\n    \"taxYear\": {\n      \"type\": \"integer\",\n      \"description\": \"The tax year for which the form is filed\"\n    },\n    \"taxpayerID\": {\n      \"type\": \"string\",\n      \"description\": \"Taxpayer identification number (e.g., SSN, EIN)\",\n      \"pattern\": \"^[0-9\\\\-]+$\"\n    },\n    \"filingStatus\": {\n      \"type\": \"string\",\n      \"description\": \"Tax filing status (e.g., Single, Married Filing Jointly)\",\n      \"enum\": [\n        \"Single\",\n        \"Married Filing Jointly\",\n        \"Married Filing Separately\",\n        \"Head of Household\",\n        \"Qualifying Widow(er)\"\n      ]\n    },\n    \"income\": {\n      \"type\": \"number\",\n      \"description\": \"Total gross income\",\n      \"minimum\": 0,\n      \"multipleOf\": 0.01\n    },\n    \"deductions\": {\n      \"type\": \"number\",\n      \"description\": \"Total deductions claimed\",\n      \"minimum\": 0,\n      \"multipleOf\": 0.01\n    },\n    \"taxLiability\": {\n      \"type\": \"number\",\n      \"description\": \"Total tax liability\",\n      \"minimum\": 0,\n      \"multipleOf\": 0.01\n    },\n    \"paymentDueDate\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"description\": \"Date the tax payment is due\"\n    }\n  },\n  \"required\": [\n    \"formType\",\n    \"taxYear\",\n    \"taxpayerID\",\n    \"income\",\n    \"taxLiability\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Product Extraction in Data Wizard\nDESCRIPTION: This JSON schema defines the structure for extracting product data from supermarket brochures. It includes fields for product name, original price, and discounted price, with validation rules and UI hints.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/extractors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"products\"],\n  \"properties\": {\n    \"products\": {\n      \"type\": \"array\",\n      \"magic_ui\": \"table\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"name\", \"original_price\"],\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"maxLength\": 255,\n            \"description\": \"The name of the product.\"\n          },\n          \"original_price\": {\n            \"type\": \"number\",\n            \"minimum\": 0,\n            \"multipleOf\": 0.01,\n            \"description\": \"The original price of the product.\"\n          },\n          \"discounted_price\": {\n            \"type\": [\"number\", \"null\"],\n            \"minimum\": 0,\n            \"multipleOf\": 0.01,\n            \"description\": \"The discounted price for all customers. Prices only applying to customers with a membership card should not be included here.\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Wizard Integration with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram shows how Data Wizard can be integrated into an application, illustrating the flow from the UI through the extraction process and back to the application.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    A[Example software UI] -- Embeds an iFrame --> B[Data Wizard Embedded UI]\n    B -- Upload files --> F[Data Wizard Core]\n    F -- Extract text and images from files --> G[Artifacts]\n    G --> H[Extraction Strategy]\n    H -.-> I[LLM]\n    I -.-> H\n    H -- JSON data --> F\n    F <-.\"Streaming results into\\nautomatic UI\".-> B\n    B -- Final data via download,\\nJavaScript API or webhook --> A\n```\n\n----------------------------------------\n\nTITLE: Visualizing Data Wizard Workflow with Mermaid Diagram\nDESCRIPTION: This Mermaid diagram illustrates the workflow of Data Wizard, showing how input data and LLM configuration feed into the extraction process to produce structured JSON output.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\n    Input[Input data] -- PDF / Word files --> Extraction[Data Wizard]\n    LLM[LLM Config] -- Prompt & Strategy --> Extraction\n    Output[Output format] -- JSON Schema --> Extraction\n    Extraction --> Results[Extracted and validated JSON data]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Bearer Token in HTTP Requests\nDESCRIPTION: Include the API token in the Authorization header as a Bearer token when making API requests to Data Wizard.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/apis.mdx#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer YOUR_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Deploying Data Wizard with Docker Compose\nDESCRIPTION: This Docker Compose configuration file defines the Data Wizard service with necessary port mappings, volumes for persistent storage, and environment variables. It provides an alternative to the Docker run command for deploying Data Wizard.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  data-wizard:\n    name: data-wizard\n    image: mateffy/data-wizard:latest\n    ports:\n      - \"9090:80\"\n      - \"4430:443\"\n      - \"4430:443/udp\"\n    volumes:\n      - data_wizard_storage:/app/storage\n      - data_wizard_sqlite_data:/app/database\n      - data_wizard_caddy_data:/data\n      - data_wizard_caddy_config:/config\n    environment:\n      - APP_KEY=[REPLACE_WITH_APP_KEY]\n\n    volumes:\n      data_wizard_storage:\n      data_wizard_sqlite_data:\n      data_wizard_caddy_data:\n      data_wizard_caddy_config:\n```\n\n----------------------------------------\n\nTITLE: Data Wizard Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for running Data Wizard. Defines the service, port mappings, volume mounts, and environment variables needed for a complete Data Wizard setup.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/quick-start.mdx#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\n\nservices:\n  data-wizard:\n    name: data-wizard\n    image: mateffy/data-wizard:latest\n    ports:\n      - \"9090:80\"\n      - \"4430:443\"\n      - \"4430:443/udp\"\n    volumes:\n      - data_wizard_storage:/app/storage\n      - data_wizard_sqlite_data:/app/database\n      - data_wizard_caddy_data:/data\n      - data_wizard_caddy_config:/config\n    environment:\n      - APP_KEY=base64:[REPLACE_WITH_KEY]\n\n    volumes:\n      data_wizard_storage:\n      data_wizard_sqlite_data:\n      data_wizard_caddy_data:\n      data_wizard_caddy_config:\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Product Brochure Extraction\nDESCRIPTION: This JSON schema defines the structure for extracting product data from brochures. It specifies an array of products, each with properties for name, original price, and optional discounted price. The schema includes validation rules to ensure data accuracy and consistency.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/products-from-brochures.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"products\"\n  ],\n  \"properties\": {\n    \"products\": {\n      \"type\": \"array\",\n      \"magic_ui\": \"table\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\n          \"name\",\n          \"original_price\"\n        ],\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"maxLength\": 255,\n            \"description\": \"Name of the product\"\n          },\n          \"original_price\": {\n            \"type\": \"number\",\n            \"minimum\": 0,\n            \"multipleOf\": 0.01,\n            \"description\": \"Original price of the product\"\n          },\n          \"discounted_price\": {\n            \"type\": [\n              \"number\",\n              \"null\"\n            ],\n            \"minimum\": 0,\n            \"multipleOf\": 0.01,\n            \"description\": \"The discounted price for all customers. Prices only applying to customers with a membership card should not be included here.\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Document Content as JSON in Data Wizard\nDESCRIPTION: This JSON snippet demonstrates the structure of the contents.json file in a Data Wizard Artifact. It shows how different types of content (text, images, page images) are represented as Slices, each with specific properties like page number, type, and content-specific details.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/preprocessing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"page\": 1,\n    \"type\": \"text\",\n    \"text\": \"This is the text on the first page of the document. Lorem ipsum dolor sit amet...\"\n  },\n  {\n    \"page\": 1,\n    \"type\": \"image\",\n    \"mimetype\": \"image/jpeg\",\n    \"path\": \"images/image1.jpg\",\n    \"x\": 455.0,\n    \"y\": 28.55999755859375,\n    \"width\": 88.32000732421875,\n    \"height\": 688.3200073242188\n  },\n  {\n    \"page\": 1,\n    \"type\": \"page-image\",\n    \"mimetype\": \"image/jpeg\",\n    \"path\": \"pages/page1.jpg\"\n  },\n  {\n    \"page\": 1,\n    \"type\": \"page-image-marked\",\n    \"mimetype\": \"image/jpeg\",\n    \"path\": \"pages_marked/page1.jpg\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Data Wizard with Docker Run Command\nDESCRIPTION: This Docker run command deploys Data Wizard with port mappings for HTTP and HTTPS access and creates named volumes for persistent storage. It requires setting the APP_KEY environment variable generated in the previous step for application security.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --name data-wizard \\\n  -p 9090:80 \\\n  -p 4430:443 \\\n  -p 4430:443/udp \\\n  -v data_wizard_storage:/app/storage \\\n  -v data_wizard_sqlite_data:/app/database \\\n  -v data_wizard_caddy_data:/data \\\n  -v data_wizard_caddy_config:/config \\\n  -e APP_KEY=[REPLACE_WITH_APP_KEY] \\\n  mateffy/data-wizard:latest\n```\n\n----------------------------------------\n\nTITLE: Data Wizard Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration example demonstrating how to set up Data Wizard with environment variables for OpenAI API integration.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/configure-llm.mdx#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  data-wizard:\n    image: mateffy/data-wizard:latest\n    ports:\n      - ...\n    volumes:\n      - ...\n    environment:\n      - APP_KEY=<REPLACE_WITH_APP_KEY>\n      - OPENAI_API_TOKEN=<YOUR_OPEN_AI_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Running Data Wizard Docker Container with OpenAI API Key\nDESCRIPTION: Docker run command example showing how to configure OpenAI API key using environment variables when launching a Data Wizard container.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/configure-llm.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 9090:80 \\\n  -e OPENAI_API_TOKEN=<YOUR_OPENAI_API_KEY> \\\n  mateffy/data-wizard:latest\n```\n\n----------------------------------------\n\nTITLE: Generating Structured JSON from Customer Feedback Data\nDESCRIPTION: This JSON structure represents the output of the customer feedback extractor. It includes fields for form type, submission date, customer details, feedback text, rating, and suggestions.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/customer-feedback-to-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"formType\": \"Customer Feedback\",\n    \"submissionDate\": \"2024-09-08\",\n    \"customerName\": \"Jane Doe\",\n    \"email\": \"jane.doe@example.com\",\n    \"feedbackText\": \"The service was excellent, and the staff were very friendly. I especially appreciated the quick response time to my inquiry.\",\n    \"rating\": 5,\n    \"suggestions\": \"Perhaps offer more variety in your product catalog.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Real Estate Data JSON Output in JavaScript\nDESCRIPTION: This code snippet demonstrates the structure of JSON output produced by the real estate extractor. It includes property details, unit information, and references to images and floorplans.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/real-estate-properties-from-exposes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Modern Apartment in City Center\",\n    \"address\": \"12 Example Street\",\n    \"description_text\": \"Spacious apartment with modern amenities in a vibrant city center location.\",\n    \"units\": [\n        {\n            \"usages\": [\n                \"living\"\n            ],\n            \"label\": \"Apartment 1\",\n            \"floor\": \"2nd Floor\",\n            \"rent_per_m2\": 15.50,\n            \"images\": [\n                \"artifact:images/image1.png\",\n                \"artifact:images/image2.png\"\n            ],\n            \"floorplans\": [\n                 \"artifact:images/image7.png\"\n            ]\n        },\n        {\n            \"usages\": [\n                \"living\"\n            ],\n            \"label\": \"Apartment 2\",\n            \"floor\": \"3rd Floor\",\n            \"rent_per_m2\": 16.00,\n            \"images\": [],\n            \"floorplans\": []\n        }\n    ],\n    \"images\": [\n        \"artifact:images/image9.png\"\n    ],\n    \"floorplans\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Extracted Product Data in JSON\nDESCRIPTION: This snippet demonstrates the structure of the JSON output from the product brochure extractor. It includes an array of products, each with a name, original price, and discounted price.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/products-from-brochures.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"Bottle of red wine\",\n        \"original_price\": 14.99,\n        \"discounted_price\": 9.99\n    },\n    {\n        \"name\": \"Bottle of white wine\",\n        \"original_price\": 12.99,\n        \"discounted_price\": 6.99\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Structured JSON from Tax Form Data\nDESCRIPTION: This code snippet demonstrates the structure of JSON data extracted from a tax form. It includes key fields such as form type, tax year, taxpayer ID, filing status, income, deductions, tax liability, and payment due date.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/data-from-paper-tax-forms.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"formType\": \"Tax Form 1040\",\n    \"taxYear\": 2023,\n    \"taxpayerID\": \"12-3456789\",\n    \"filingStatus\": \"Single\",\n    \"income\": 75000.00,\n    \"deductions\": 12000.00,\n    \"taxLiability\": 15000.00,\n    \"paymentDueDate\": \"2024-04-15\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Invoice Data Structure in JSON\nDESCRIPTION: Example of the structured JSON output format for extracted invoice data, showing basic invoice details, seller/buyer information, line items, and payment details.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/paper-invoice-to-structured-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"invoiceNumber\": \"INV-2022-001\",\n    \"issueDate\": \"2022-01-01\",\n    \"currency\": \"EUR\",\n    \"seller\": {\n        \"name\": \"ACME Inc.\",\n        \"address\": \"123 Main St.\",\n        \"postalCode\": \"12345\",\n        \"city\": \"Springfield\",\n        \"country\": \"US\",\n        \"vatNumber\": \"US123456789\"\n    },\n    \"buyer\": {\n        \"customerNumber\": \"CUST-123\",\n        \"name\": \"Buyer Corp.\",\n        \"address\": \"456 Elm St.\",\n        \"postalCode\": \"54321\",\n        \"city\": \"Shelbyville\",\n        \"country\": \"US\"\n    },\n    \"lineItems\": [\n        {\n            \"position\": 1,\n            \"description\": \"Product A\",\n            \"unitPrice\": 100.0,\n            \"quantity\": 2,\n            \"vatRate\": 19.0,\n            \"netAmount\": 200.0\n        },\n        {\n            \"position\": 2,\n            \"description\": \"Product B\",\n            \"unitPrice\": 50.0,\n            \"quantity\": 3,\n            \"vatRate\": 19.0,\n            \"netAmount\": 150.0\n        }\n    ],\n    \"totalAmounts\": {\n        \"netTotal\": 350.0,\n        \"taxTotal\": 66.5,\n        \"grossTotal\": 416.5,\n        \"dueTotal\": 416.5\n    },\n    \"paymentDetails\": {\n        \"paymentTerms\": \"Net 30 days\",\n        \"paymentMethod\": \"SEPA_TRANSFER\",\n        \"iban\": \"DE89370400440532013000\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Strategy in a Service Provider in PHP\nDESCRIPTION: Shows how to register a custom strategy with the Magic framework by adding it to the service provider's register method, making it available in the Data Wizard settings UI.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/custom-strategies.mdx#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass AppServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        Magic::registerStrategy('my-custom-strategy', MyCustomStrategy::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Saved Extractors using GraphQL\nDESCRIPTION: Example GraphQL query to retrieve the id and label of saved extractors from the Data Wizard API.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/apis.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  savedExtractors {\n    collection {\n      id\n      label\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Data Wizard iFrame in HTML\nDESCRIPTION: This snippet demonstrates how to embed the Data Wizard iFrame into an HTML page. It includes the pre-signed URL in the src attribute and sets width, height, and style properties.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/integrate.mdx#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"width:800px; height:600px;\">\n  <iframe\n    src=\"https://data-wizard.ai/embed/123456...?signature=...\"\n    width=\"100%\"\n    height=\"100%\"\n    frameborder=\"0\"\n    style=\"border: 1px solid #ccc;\"\n  ></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Data Wizard Docker Installation\nDESCRIPTION: This sequence of commands updates Data Wizard by pulling the latest Docker image, stopping and removing the existing container, and then rerunning it with the same configuration. It's recommended to back up data before updating.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mateffy/data-wizard:latest\ndocker stop data-wizard\ndocker rm data-wizard\ndocker run ... (same run command as before)\n```\n\n----------------------------------------\n\nTITLE: Migrating Data Wizard Database by Container Name\nDESCRIPTION: This command executes database migrations within the running Data Wizard container using Laravel's Artisan command-line tool. It's used when updating to a new version that requires database schema changes.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it data-wizard php artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Migrating Data Wizard Database by Container ID\nDESCRIPTION: This command executes database migrations similar to the previous snippet, but uses the container ID instead of the container name. This is useful when the container has a random or different name than 'data-wizard'.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container-id> php artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Starting Data Wizard with Docker Compose\nDESCRIPTION: Command to start the Data Wizard container using Docker Compose. Must be run in the same directory as the docker-compose.yml file.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/quick-start.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Running Data Wizard with Docker Run Command\nDESCRIPTION: Docker run command to start a Data Wizard container with port mappings for HTTP/HTTPS access and volume mounts for persistent storage. Requires setting the APP_KEY environment variable for security.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/quick-start.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --name data-wizard \\\n  -p 9090:80 \\\n  -p 4430:443 \\\n  -p 4430:443/udp \\\n  -v data_wizard_storage:/app/storage \\\n  -v data_wizard_sqlite_data:/app/database \\\n  -v data_wizard_caddy_data:/data \\\n  -v data_wizard_caddy_config:/config \\\n  -e APP_KEY=base64:[REPLACE_WITH_KEY] \\\n  mateffy/data-wizard:latest\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Data Wizard Deployment\nDESCRIPTION: This command starts the Data Wizard container using Docker Compose, based on the configuration defined in the docker-compose.yml file in the current directory.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Generating Random App Key for Data Wizard Deployment\nDESCRIPTION: This command generates a random 32-byte key encoded in base64 format to be used as the APP_KEY for Data Wizard. The APP_KEY is essential for encryption and security purposes in the application.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/deployment.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: Generating a Random APP_KEY for Data Wizard in Bash\nDESCRIPTION: Command to generate a random APP_KEY using OpenSSL. This key is used for encryption and security purposes in Data Wizard and should be prefixed with 'base64:' when used in the Docker configuration.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/quick-start.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 32\n```\n\n----------------------------------------\n\nTITLE: APP_KEY Format Example for Data Wizard\nDESCRIPTION: Example showing the correct format for the APP_KEY environment variable in Data Wizard, including the required 'base64:' prefix followed by the base64-encoded random string.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/quick-start.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAPP_KEY=base64:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=\n```\n\n----------------------------------------\n\nTITLE: Importing More Component in MDX\nDESCRIPTION: This snippet imports a 'More' component from a local MDX file. It's likely used to include additional content or functionality in the document.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/examples/paper-invoice-to-structured-data.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nimport More from '/snippets/more.mdx'\n\n<More/>\n```\n\n----------------------------------------\n\nTITLE: Importing More Component from Snippets in MDX\nDESCRIPTION: This snippet imports a reusable component called 'More' from a snippets directory, which is used to provide additional information at the end of the document.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/extracting-data.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport More from '/snippets/more.mdx';\n\n<More />\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify development server\nDESCRIPTION: Command to start the Mintlify development server. This should be run at the root of the documentation where the mint.json file is located.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI using npm\nDESCRIPTION: Command to install the Mintlify CLI globally using npm. This is required for local development and preview of documentation changes.\nSOURCE: https://github.com/capevace/data-wizard-docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```"
  }
]