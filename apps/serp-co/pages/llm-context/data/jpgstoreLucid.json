[
  {
    "owner": "jpg-store",
    "repo": "lucid",
    "content": "TITLE: Full Transaction Example with Lucid (JavaScript)\nDESCRIPTION: This code provides a complete example of creating, signing, and submitting a transaction using Lucid. It imports necessary modules, initializes Lucid with a Blockfrost instance and private key, creates a transaction sending ADA to two addresses, signs the transaction, and submits it to the Cardano blockchain.  It relies on the `lucid` instance being properly configured with a wallet.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/your-first-tx.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Blockfrost, Lucid } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst lucid = await Lucid.new(\n  new Blockfrost(\"https://cardano-preprod.blockfrost.io/api/v0\", \"<projectId>\"),\n  \"Preprod\",\n);\n\nlucid.selectWalletFromPrivateKey(privateKey);\n\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr_testa...\", { lovelace: 5000000n })\n  .payToAddress(\"addr_testb...\", { lovelace: 5000000n })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\nconst txHash = await signedTx.submit();\n\nconsole.log(txHash);\n```\n\n----------------------------------------\n\nTITLE: Simple ADA Payment using Lucid (JavaScript)\nDESCRIPTION: This snippet demonstrates a simple ADA payment using the Lucid library. It creates a new transaction, specifies the recipient address and amount of lovelace, completes the transaction, signs it, and submits it to the Cardano network. Requires Lucid library to be initialized.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/make-payments.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr_test...\", { lovelace: 5000000n })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Create and Instantiate Validator with Lucid\nDESCRIPTION: This code snippet demonstrates how to create a Plutus V2 validator script and derive its address using Lucid's `validatorToAddress` utility. It assumes that `lucid` object is already initialized and `matchingNumberScript` contains the compiled Plutus script in hex format. The address is then used for subsequent interactions with the validator.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst matchingNumberScript = {\n  type: \"PlutusV2\",\n  script: \"59099a590997010000...\",\n};\n\nconst matchingNumberAddress = lucid.utils.validatorToAddress(\n  matchingNumberScript,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Redeem Funds from Plutus Script with Lucid\nDESCRIPTION: This code snippet demonstrates how to redeem funds from a Plutus script address using Lucid. It retrieves a UTxO at the contract address, creates a new transaction to collect from the script UTxO with the redeemer, attaches the spending validator, and completes, signs and submits the transaction. It relies on `matchingNumberScript`, `matchingNumberAddress` and the `lucid` object.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst [scriptUtxo] = await lucid.utxosAt(matchingNumberAddress);\n\nconst tx = await lucid\n  .newTx()\n  .collectFrom([scriptUtxo], Data.to(100n))\n  .attachSpendingValidator(matchingNumberScript)\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n\n```\n\n----------------------------------------\n\nTITLE: Select wallet from browser - Lucid - JavaScript\nDESCRIPTION: Selects a CIP-0030 compliant browser wallet.  It enables the wallet (e.g., Nami) using `window.cardano.nami.enable()` and passes the returned API object to `lucid.selectWallet()`. This method is only applicable in a browser environment and provides full signing capabilities.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = await window.cardano.nami.enable();\nlucid.selectWallet(api);\n```\n\n----------------------------------------\n\nTITLE: Basic Lucid Usage Example\nDESCRIPTION: Demonstrates basic usage of the Lucid Cardano library for creating a transaction. This includes initializing Lucid with Blockfrost, selecting a wallet, building a transaction, signing it, and submitting it.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// import { Blockfrost, Lucid } from \"https://deno.land/x/lucid@0.10.7/mod.ts\"; Deno\nimport { Blockfrost, Lucid } from \"lucid-cardano\"; // NPM\n\nconst lucid = await Lucid.new(\n  new Blockfrost(\"https://cardano-preview.blockfrost.io/api/v0\", \"<projectId>\"),\n  \"Preview\",\n);\n\n// Assumes you are in a browser environment\nconst api = await window.cardano.nami.enable();\nlucid.selectWallet(api);\n\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr...\", { lovelace: 5000000n })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n\nconsole.log(txHash);\n```\n\n----------------------------------------\n\nTITLE: Delegate to Stake Pool with Lucid (JavaScript)\nDESCRIPTION: Delegates to a specific stake pool using Lucid. It retrieves the reward address from the wallet, initiates a new transaction, delegates to the specified pool using the reward address and pool ID, completes the transaction, signs it, and then submits it to the blockchain. Requires Lucid and a wallet to be initialized and selected.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/delegate.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rewardAddress = await lucid.wallet.rewardAddress();\n\nconst tx = await lucid.newTx()\n  .delegateTo(rewardAddress, \"poolabc...\")\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Multiple ADA Recipients Payment using Lucid (JavaScript)\nDESCRIPTION: This snippet demonstrates sending ADA to multiple recipients in a single transaction using Lucid. Each `payToAddress` call creates a new UTxO. Requires Lucid library to be initialized.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/make-payments.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr_testa...\", { lovelace: 5000000n })\n  .payToAddress(\"addr_testb...\", { lovelace: 5000000n })\n  .payToAddress(\"addr_testc...\", { lovelace: 5000000n })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction with Lucid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a new transaction using the Lucid library and send ADA to multiple recipients. The `newTx()` method initiates the transaction, `payToAddress()` adds recipients and amounts, and `complete()` finishes the initial construction and performs coin selection.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/your-first-tx.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr_testa...\", { lovelace: 5000000n })\n  .payToAddress(\"addr_testb...\", { lovelace: 5000000n })\n  .complete();\n```\n\n----------------------------------------\n\nTITLE: Lock Funds at Plutus Script with Lucid\nDESCRIPTION: This code snippet demonstrates how to lock funds at a Plutus script address using Lucid. It creates a new transaction, pays to the contract address with an inline datum and a lovelace amount. Then completes, signs and submits the transaction. It depends on the `matchingNumberAddress` variable initialized earlier, and the `lucid` object needs to be initialized.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tx = await lucid\n  .newTx()\n  .payToContract(matchingNumberAddress, { inline: Data.to(100n) }, {\n    lovelace: 20000000n,\n  })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n\n```\n\n----------------------------------------\n\nTITLE: Select Wallet from Private Key in Lucid\nDESCRIPTION: This code snippet shows how to select a wallet from a given private key using the `lucid.selectWalletFromPrivateKey()` method. The `privateKey` variable must contain a valid private key string. Selecting a wallet is essential for building and submitting transactions.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/create-wallet.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nlucid.selectWalletFromPrivateKey(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Instantiate Lucid with Blockfrost Provider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to instantiate Lucid using the Blockfrost provider, specifying the preprod network.  It imports the necessary modules from the Lucid library and initializes Lucid with the Blockfrost endpoint and API key. The `<projectId>` placeholder must be replaced with a valid Blockfrost project ID. This allows interaction with the Cardano blockchain's preprod environment.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/instantiate-lucid.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Blockfrost, Lucid } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst lucid = await Lucid.new(\n  new Blockfrost(\"https://cardano-preprod.blockfrost.io/api/v0\", \"<projectId>\"),\n  \"Preprod\",\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Plutus Data Schema with Typebox in TypeScript\nDESCRIPTION: This snippet defines a Plutus data schema named `ListingSchema` using Typebox's `Data.Object`, `Data.Bytes`, `Data.Integer`, and `Data.Boolean` constructors.  It specifies the structure of a `Listing` object with fields for the owner (bytes), amount (integer), and privacy status (boolean). The schema is essential for type-safe data manipulation with Plutus.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/advanced/type-casting.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Data } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst ListingSchema = Data.Object({\n  owner: Data.Bytes(),\n  amount: Data.Integer(),\n  private: Data.Boolean(),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Type from Plutus Data Schema\nDESCRIPTION: This code generates a TypeScript type definition `Listing` from the `ListingSchema` using `Data.Static`. This enables compile-time type checking and improves code readability when working with Plutus data in TypeScript. The resulting `Listing` type reflects the structure defined in `ListingSchema`.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/advanced/type-casting.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Listing = Data.Static<typeof ListingSchema>;\nconst Listing = ListingSchema as unknown as Listing;\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Lucid (JavaScript)\nDESCRIPTION: This snippet shows how to sign a constructed transaction using the Lucid library. The `sign()` method signs the transaction using the wallet associated with the Lucid instance.  It requires a previously created transaction object.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/your-first-tx.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst signedTx = await tx.sign().complete();\n```\n\n----------------------------------------\n\nTITLE: Register Stake Pool using Lucid\nDESCRIPTION: This code snippet registers a stake pool using Lucid. It imports cold and VRF keys, defines pool parameters, builds and signs a transaction, and submits it. The cold key is used to add a required witness to the transaction, and the VRF key is added to the pool parameters.  It requires the `lucid` library and access to a wallet and provider.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/create-stakepool.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** StakePoolSigningKey_ed25519 cborHex from the cardano-cli */\nconst coldKey = C.PrivateKey.from_bytes(\n  fromHex(\n    \"58204de30f983ed860524d00059c7f2b1d63240fba805bee043604aa7ccb13d387e9\",\n  ),\n);\n\n/** VrfVerificationKey_PraosVRF cborHex from the cardano-cli */\nconst vrfKeyHash = C.VRFVKey.from_bytes(\n  fromHex(\n    \"5820c9cf07d863c8a2351662c9759ca1d9858b536bab50ad575b5de161e1af18f887\",\n  ),\n).hash().to_hex();\n\nconst poolId = coldKey.to_public().hash().to_bech32(\"pool\");\n\nconst rewardOwnerAddress = await lucid.wallet.rewardAddress();\n\nconst poolParams = {\n  poolId,\n  vrfKeyHash,\n  pledge: 100000000n,\n  cost: 340000000n,\n  margin: 0.025, // 2.5%\n  rewardAddress: rewardOwnerAddress,\n  owners: [rewardOwnerAddress],\n  relays: [{ type: \"SingleHostIp\", ipV4: \"123.456.789.0\", port: 3000 }],\n  metadataUrl: \"https://...\", // metadata needs to be hosted already before registering the pool\n};\n\nconst tx = await lucid.newTx()\n  .registerPool(poolParams).complete();\n\nconst signedTx = await tx.sign()\n  .signWithPrivateKey(coldKey.to_bech32())\n  .complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Casting Plutus Data to JavaScript Object\nDESCRIPTION: This snippet demonstrates casting Plutus data to a JavaScript object using `Data.from`. It takes a Plutus data string (hex-encoded) and the `Listing` schema as input, then returns its JavaScript object representation. This deserializes on-chain data for use in your off-chain application.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/advanced/type-casting.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst listing: Listing = Data.from(\n  \"d8799f47313131313131311b0000000139108943d87980ff\",\n  Listing,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Lucid with Blockfrost Provider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize Lucid with the Blockfrost provider. It requires the Blockfrost and Lucid modules from the specified Deno URL.  It creates a new Lucid instance using Blockfrost, specifying the Blockfrost API endpoint and project ID, as well as the Cardano network (Preprod).\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Blockfrost, Lucid } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst lucid = await Lucid.new(\n  new Blockfrost(\n    \"https://cardano-preprod.blockfrost.io/api/v0\",\n    \"<project_id>\",\n  ),\n  \"Preprod\",\n);\n\n```\n\n----------------------------------------\n\nTITLE: Send Native Tokens Payment using Lucid (JavaScript)\nDESCRIPTION: This snippet shows how to send native tokens using Lucid. Lucid automatically handles the minimum ADA requirement when sending native tokens. Requires Lucid library to be initialized and policy ID and asset name to be defined.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/make-payments.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst policyId = \"00...\";\nconst assetName = \"MyToken\";\n\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr_test...\", { [policyId + fromText(assetName)]: 10n })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Multi Validator Interactions with Lucid\nDESCRIPTION: This code snippet demonstrates how to interact with multiple validators in a single Lucid transaction. It collects from multiple script UTxOs, mints assets with a Plutus policy, and attaches both spending and minting validators. The key limitation is the execution units limit.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tx = await lucid\n  .newTx()\n  .collectFrom([scriptUtxoA, scriptUtxoB], Data.void())\n  .collectFrom([scriptUtxoC], Data.void())\n  .collectFrom([scriptUtxoD], Data.void())\n  .mintAssets([plutusPolicyId]: 10n, Data.void())\n  .attachSpendingValidator(spendingScript1)\n  .attachSpendingValidator(spendingScript2)\n  .attachMintingPolicy(mintingPolicy)\n  .complete();\n\n```\n\n----------------------------------------\n\nTITLE: Select wallet from private key - Lucid - JavaScript\nDESCRIPTION: Selects a wallet in Lucid using a Bech32 encoded private key.  A private key is generated using `lucid.utils.generatePrivateKey()`, and then used to select the wallet using `lucid.selectWalletFromPrivateKey()`.  This allows full signing capabilities.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst privateKey = lucid.utils.generatePrivateKey(); // Bech32 encoded private key\nlucid.selectWalletFromPrivateKey(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Initializing Lucid with Kupmios Provider (JavaScript)\nDESCRIPTION: This code snippet shows how to initialize Lucid with the Kupmios provider, which is a mix of Ogmios and Kupo. It requires the Kupmios and Lucid modules from the Deno URL. The Kupmios constructor takes the HTTP and WebSocket endpoints as arguments. The second argument to Lucid.new specifies the Cardano network (Preprod).\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Kupmios, Lucid } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst lucid = await Lucid.new(\n  new Kupmios(\n    \"http://localhost:1442\",\n    \"ws://localhost:1337\",\n  ),\n  \"Preprod\",\n);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Lucid with Maestro Provider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to initialize Lucid with the Maestro provider. It requires the Lucid and Maestro modules from the specified Deno URL. It creates a new Lucid instance using Maestro, providing configuration options such as the network (Preprod or Mainnet), API key, and turbo transaction submission setting. The network must match the intended Cardano network.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Lucid, Maestro } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst lucid = await Lucid.new(\n  new Maestro({\n    network: \"Preprod\",  // For MAINNET: \"Mainnet\".\n    apiKey: \"<Your-API-Key>\",  // Get yours by visiting https://docs.gomaestro.org/docs/Getting-started/Sign-up-login.\n    turboSubmit: false  // Read about paid turbo transaction submission feature at https://docs.gomaestro.org/docs/Dapp%20Platform/Turbo%20Transaction.\n  }),\n  \"Preprod\", // For MAINNET: \"Mainnet\".\n);\n\n```\n\n----------------------------------------\n\nTITLE: Withdraw Rewards with Lucid (JavaScript)\nDESCRIPTION: Withdraws available rewards using Lucid. It retrieves the reward address and delegation information from the wallet, creates a new transaction, withdraws the rewards to the reward address, completes the transaction, signs it, and submits it. Requires Lucid and a wallet to be initialized.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/delegate.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rewardAddress = await lucid.wallet.rewardAddress();\n\nconst delegation = await lucid.wallet.getDelegation();\n\nconst tx = await lucid.newTx()\n  .withdraw(rewardAddress, delegation.rewards)\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Apply Parameters to Plutus Script with Lucid\nDESCRIPTION: This code snippet shows how to apply parameters to a Plutus script using Lucid. It assumes the existence of an `applyParamsToScript` function which takes the compiled Plutus script and an array of parameters as input and returns the parameterized script. The resulting `mintingPolicy` can then be used within a Lucid transaction.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst mintingPolicy = {\n  type: \"PlutusV2\",\n  script: applyParamsToScript(\n    \"5907945907910100...\",\n    [10n],\n  ),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Send ADA with Metadata using Lucid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to send ADA along with metadata using Lucid. Metadata is attached to the transaction. Requires Lucid library to be initialized.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/make-payments.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await lucid.newTx()\n  .payToAddress(\"addr_test...\", { lovelace: 5000000n })\n  .attachMetadata(1, { msg: \"Hello from Lucid.\" })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Querying Datum from UTxO with Lucid (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to query a datum associated with a UTxO using the `lucid.datumOf` method. It first fetches a UTxO associated with a given address using `lucid.utxosAt` and then retrieves the datum from that UTxO. Lucid caches the datum, so subsequent queries for the same UTxO will be faster.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst [scriptUtxo] = await lucid.utxosAt(\"addr_test...\");\nconst datum = await lucid.datumOf(scriptUtxo);\n\n```\n\n----------------------------------------\n\nTITLE: Querying UTxOs with Provider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to query UTxOs using the `lucid.provider.getUtxos` method. It fetches UTxOs associated with the specified address. The address `addr_test...` should be replaced with a valid Cardano address.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst utxos = await lucid.provider.getUtxos(\"addr_test...\");\n\n```\n\n----------------------------------------\n\nTITLE: Send ADA with Datum using Lucid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to send ADA with a datum attached to the UTxO using Lucid. Lucid handles the minimum ADA requirement for datums automatically. Requires Lucid library to be initialized.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/make-payments.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await lucid.newTx()\n  .payToAddressWithData(\"addr_test...\", Data.to(\"31313131\"), {\n    lovelace: 5000000n,\n  })\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Deregister Stake Key with Lucid (JavaScript)\nDESCRIPTION: Deregisters a stake key using Lucid. It fetches the reward address from the wallet, creates a new transaction, deregisters the stake key associated with the reward address, completes the transaction, signs it, and submits it. Deregistering the stake key allows reclaiming the 2 ADA pledge.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/delegate.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rewardAddress = await lucid.wallet.rewardAddress();\n\nconst tx = await lucid.newTx()\n  .deregisterStake(rewardAddress)\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Submitting a Transaction with Lucid (JavaScript)\nDESCRIPTION: This snippet demonstrates how to submit a signed transaction to the Cardano blockchain using the Lucid library. The `submit()` method sends the transaction and returns the transaction hash.  It requires a previously signed transaction object.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/your-first-tx.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst txHash = await signedTx.submit();\n\nconsole.log(txHash);\n```\n\n----------------------------------------\n\nTITLE: Initializing Lucid with Custom Provider (JavaScript)\nDESCRIPTION: This code snippet shows how to initialize Lucid with a custom provider. The custom provider must implement the `Provider` interface. It requires the Lucid module from the Deno URL.  It creates a new Lucid instance with the custom provider and the Cardano network (Preprod).\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Lucid } from \"https://deno.land/x/lucid/mod.ts\"\n\nclass MyProvider { ... }\n\nconst lucid = await Lucid.new(\n  new MyProvider(), \"Preprod\"\n);\n\n```\n\n----------------------------------------\n\nTITLE: Read UTxOs and Plutus Scripts with Lucid\nDESCRIPTION: This code snippet demonstrates how to read/reference UTxOs using Lucid. If a Plutus script is already stored in the UTxO, there is no need to attach the same script explicitly in the transaction, resulting in cost savings.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tx = await lucid\n  .newTx()\n  .readFrom([scriptUtxo])\n  .complete();\n\n```\n\n----------------------------------------\n\nTITLE: Transaction Completion with Haskell Plutus Core - JavaScript\nDESCRIPTION: This code snippet demonstrates how to complete a transaction in Lucid using the Haskell Plutus Core engine instead of the default Aiken engine. It involves collecting from a script UTXO and then calling the `complete` method with the `nativeUplc` parameter set to `false`. This setting ensures that the Haskell Plutus Core engine is used for transaction validation and execution.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/advanced/plutus-core.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst tx = await lucid.newTx()\n  .collectFrom([scriptUtxo], Data.void())\n  .complete({ nativeUplc: false });\n```\n\n----------------------------------------\n\nTITLE: Use Redeemers with Lucid Transaction Constraints\nDESCRIPTION: This section demonstrates how to use redeemers with different transaction constraints in Lucid. It highlights the use of `redeemer` as the last parameter for methods like `collectFrom`, `mintAssets`, `delegateTo`, `deregisterStake`, and `withdraw`. Leaving out the redeemer implies the use of public keys or native scripts.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/smart-contract.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n.collectFrom(utxos, redeemer)\n\n.mintAssets(assets, redeemer)\n\n.delegateTo(stakeAddress, poolId, redeemer)\n\n.deregisterStake(stakeAddress, redeemer)\n\n.withdraw(stakeAddress, rewardAmount, redeemer)\n\n```\n\n----------------------------------------\n\nTITLE: Register Stake Key with Lucid (JavaScript)\nDESCRIPTION: Registers a stake key using Lucid. It fetches the reward address from the wallet, creates a new transaction, registers the stake key with the reward address, completes the transaction, signs it, and submits it. Requires Lucid to be initialized and a wallet to be selected. Requires 2 ADA as pledge for the stake key registration.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/delegate.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rewardAddress = await lucid.wallet.rewardAddress();\n\nconst tx = await lucid.newTx()\n  .registerStake(rewardAddress)\n  .complete();\n\nconst signedTx = await tx.sign().complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Select wallet from seed phrase - Lucid - JavaScript\nDESCRIPTION: Selects a wallet in Lucid using a seed phrase. A seed phrase is generated using `lucid.utils.generateSeedPhrase()`, and then used to select the wallet using `lucid.selectWalletFromSeed()`. This allows full signing capabilities.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst seed = lucid.utils.generateSeedPhrase();\nlucid.selectWalletFromSeed(seed);\n```\n\n----------------------------------------\n\nTITLE: Query UTxOs - Lucid - JavaScript\nDESCRIPTION: Queries the UTxOs (Unspent Transaction Outputs) of the selected wallet using `lucid.wallet.getUtxos()`. Requires a previously selected wallet.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst utxos = await lucid.wallet.getUtxos();\n```\n\n----------------------------------------\n\nTITLE: Querying UTxOs with Lucid Instance (JavaScript)\nDESCRIPTION: This code snippet shows how to query UTxOs using the convenience method `lucid.utxosAt`. It fetches UTxOs associated with the specified address, providing a more concise way to achieve the same result as `lucid.provider.getUtxos`. The address `addr_test...` should be replaced with a valid Cardano address.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst utxos = await lucid.utxosAt(\"addr_test...\");\n\n```\n\n----------------------------------------\n\nTITLE: Retire Stake Pool using Lucid\nDESCRIPTION: This code snippet retires a stake pool using Lucid. It specifies the retirement epoch, builds and signs a transaction, and submits it. It requires the `lucid` library, the pool ID, and the cold key for signing.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/create-stakepool.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst retirementEpoch = 100;\n\nconst tx = await lucid.newTx()\n  .retirePool(poolId, retirementEpoch)\n  .complete();\n\nconst signedTx = await tx.sign()\n  .signWithPrivateKey(coldKey.to_bech32())\n  .complete();\n\nconst txHash = await signedTx.submit();\n```\n\n----------------------------------------\n\nTITLE: Query delegation - Lucid - JavaScript\nDESCRIPTION: Queries the delegation information for the selected wallet using `lucid.wallet.getDelegation()`. Requires a previously selected wallet.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst delegation = await lucid.wallet.getDelegation();\n```\n\n----------------------------------------\n\nTITLE: Get wallet address - Lucid - JavaScript\nDESCRIPTION: Retrieves the Bech32 encoded address of the selected wallet using `lucid.wallet.address()`. Requires a previously selected wallet.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst address = await lucid.wallet.address(); // Bech32 address\n```\n\n----------------------------------------\n\nTITLE: Using CML directly in Lucid\nDESCRIPTION: This snippet demonstrates how to import and use the Cardano Multiplatform Lib (CML) directly within a Lucid project. It shows importing the C object and using it to create a TransactionOutput. This is useful when Lucid's API does not expose the required functionality directly.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/advanced/cml.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { C } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst output: C.TransactionOutput = C.TransactionOutput.new(\n  C.Address.from_bech32(\"...\"),\n  C.Value.zero(),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Protocol Parameters with Provider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to query the protocol parameters using the `lucid.provider.getProtocolParameters` method. It fetches the current protocol parameters of the Cardano network.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst protocolParameters = await lucid.provider.getProtocolParameters();\n\n```\n\n----------------------------------------\n\nTITLE: Installing Lucid with NPM\nDESCRIPTION: Installs the Lucid Cardano library using the Node Package Manager (NPM). This allows you to use Lucid in a Node.js environment.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install lucid-cardano\n```\n\n----------------------------------------\n\nTITLE: Casting JavaScript Object to Plutus Data\nDESCRIPTION: This snippet demonstrates casting a JavaScript object to Plutus data using `Data.to`. It takes a JavaScript object matching the `Listing` type and the `Listing` schema as input, then returns its Plutus data representation. This allows you to prepare and serialize data for on-chain consumption.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/advanced/type-casting.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst listing = Data.to(\n  { owner: \"31313131313131\", amount: 5252352323n, private: false },\n  Listing,\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Lucid via NPM\nDESCRIPTION: This snippet shows how to install the Lucid library using NPM (Node Package Manager). It uses the `npm install` command to add `lucid-cardano` as a dependency to your project.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install lucid-cardano\n```\n\n----------------------------------------\n\nTITLE: Importing Lucid in Node.js\nDESCRIPTION: This snippet demonstrates how to import and initialize Lucid in a Node.js environment after installing it via NPM. It imports the Lucid class from the `lucid-cardano` package and creates a new Lucid instance using `Lucid.new()`. Requires setting `{\"type\" : \"module\"}` in `package.json`.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { Lucid } from \"lucid-cardano\";\n\nconst lucid = await Lucid.new();\n```\n\n----------------------------------------\n\nTITLE: Function Definition with Options Object in TypeScript\nDESCRIPTION: This code snippet shows the preferred method for defining functions with optional parameters in TypeScript, utilizing an options object. This improves code readability and maintainability by grouping related optional parameters together.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// GOOD.\nexport interface SeedOptions {\n  addressType?: \"Base\" | \"Enterprise\";\n  accountIndex?: number;\n}\nexport function fromSeed(\n  address: string,\n  options: SeedOptions = {},\n): string {}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Lucid in Web Browsers\nDESCRIPTION: Imports the Lucid Cardano library for use in a web browser environment using a CDN. This allows web applications to interact with Cardano.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport { Lucid } from \"https://unpkg.com/lucid-cardano@0.10.7/web/mod.js\"\n// ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Lucid in Deno\nDESCRIPTION: This snippet demonstrates how to import and initialize Lucid in a Deno environment. It imports the Lucid class from a remote URL and creates a new Lucid instance using `Lucid.new()`. Make sure you have Deno installed before running this code.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { Lucid } from \"https://deno.land/x/lucid/mod.ts\";\n\nconst lucid = await Lucid.new();\n```\n\n----------------------------------------\n\nTITLE: Importing Lucid in Web\nDESCRIPTION: This snippet demonstrates how to import and initialize Lucid directly in a web browser using a `<script>` tag. It imports the Lucid class from a CDN URL and creates a new Lucid instance using `Lucid.new()`. The script tag must have `type=\"module\"` set.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport { Lucid } from \"https://unpkg.com/lucid-cardano/web/mod.js\"\nconst lucid = await Lucid.new();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Select wallet from custom data - Lucid - JavaScript\nDESCRIPTION: Selects a wallet from custom data like address and UTxOs. This wallet is viewable but cannot perform signing operations. Useful for querying information about a known address without a private key.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-wallet.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlucid.selectWalletFrom({address: \"addr_test...\", utxos: [...]});\n```\n\n----------------------------------------\n\nTITLE: Function Definition with Optional Arguments in TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a function in TypeScript that accepts an options object for optional parameters. This approach promotes cleaner and more readable code, especially when dealing with functions that have many optional arguments.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// BAD. If the second argument was not optional, it would be OKAY to do it like this.\nexport function fromSeed(\n  address: string,\n  addressType?: \"Base\" | \"Enterprise\",\n  accountIndex?: number,\n): string {}\n\n```\n\n----------------------------------------\n\nTITLE: Top-Level Function Definition using Function Keyword in TypeScript\nDESCRIPTION: This code snippet illustrates the recommended way to define top-level functions in TypeScript using the `function` keyword. This convention improves code readability and consistency.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// BAD.\nexport const add = (a: number, b: number): number => a + b;\n\n```\n\n----------------------------------------\n\nTITLE: Querying Datum with Provider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to query a datum using the `lucid.provider.getDatum` method. It fetches the datum associated with the specified datum hash. The `<datum_hash>` placeholder should be replaced with the actual hash of the datum.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/getting-started/choose-provider.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst datum = await lucid.provider.getDatum(\"<datum_hash>\");\n\n```\n\n----------------------------------------\n\nTITLE: Importing Lucid in Deno\nDESCRIPTION: Imports the Lucid Cardano library in a Deno environment. This allows you to use Lucid with JavaScript or TypeScript in Deno.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Lucid } from \"https://deno.land/x/lucid@0.10.7/mod.ts\";\n```\n\n----------------------------------------\n\nTITLE: Explicit Return Type Declaration in TypeScript\nDESCRIPTION: This code snippet shows the encouraged method of declaring explicit return types for functions in TypeScript. It improves code readability and helps the compiler catch type-related errors early on.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// GOOD.\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Lucid Documentation with Deno\nDESCRIPTION: This shell command builds the Lucid documentation using the Deno task runner.  It executes the 'build' task defined in the project's deno.json configuration file, which likely involves running Lume to generate the static site.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeno task build\n```\n\n----------------------------------------\n\nTITLE: Serving Lucid Documentation Locally with Deno\nDESCRIPTION: This shell command serves the Lucid documentation locally using the Deno task runner.  It executes the 'serve' task defined in the project's deno.json configuration file, which likely starts a local web server to host the generated documentation.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndeno task serve\n```\n\n----------------------------------------\n\nTITLE: Building Lucid from Source\nDESCRIPTION: Builds the Lucid Cardano library from source using Deno. This command generates the NPM and Web targets. Requires Deno to be installed.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndeno task build\n```\n\n----------------------------------------\n\nTITLE: Building Core Components with Deno\nDESCRIPTION: Builds the core components of the Lucid Cardano library, which are written in Rust.  These components are based on a customized version of cardano-multiplatform-lib and the message-signing library. Requires Deno to be installed.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndeno task build:core\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Lucid\nDESCRIPTION: Configures Webpack 5 to correctly bundle Lucid.  Enables asynchronous WebAssembly, top-level await, and layers.  The layers option is optional and might not be needed with all bundlers or frameworks.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexperiments: {\n    asyncWebAssembly: true,\n    topLevelAwait: true,\n    layers: true // optional, with some bundlers/frameworks it doesn't work without\n  }\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Deno\nDESCRIPTION: Executes the test suite for the Lucid Cardano library using Deno. Requires Deno to be installed.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndeno task test\n```\n\n----------------------------------------\n\nTITLE: Implicit Void Return Type in TypeScript\nDESCRIPTION: This example demonstrates a function in TypeScript that implicitly returns `void` and doesn't require explicit declaration.  Explicitly declaring `void` is optional and is not encouraged in this case.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// GOOD.\nexport function log(str: string) {\n  console.log(str);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Single-Line Comment in TypeScript\nDESCRIPTION: This code snippet shows the standard way of writing a single-line comment in TypeScript using `//`. This is used for adding short explanations or notes to the code.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// This is a comment.\n\n```\n\n----------------------------------------\n\nTITLE: Function with Non-Obvious Parameter Description in TypeScript\nDESCRIPTION: This code snippet demonstrates how to document a function with a non-obvious parameter using JSDoc's `@param` tag in TypeScript. It helps provide additional context and explanation for complex or less intuitive parameters.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Function with non-obvious param.\n * @param foo Description of non-obvious parameter.\n */\n\n```\n\n----------------------------------------\n\nTITLE: Explicit Return Type Declaration in TypeScript\nDESCRIPTION: This code snippet emphasizes the importance of explicitly declaring return types for functions in TypeScript to enhance code clarity and prevent unexpected behavior. This reduces potential implicit type inferences which could lead to errors.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// BAD. Return type is only implicitly determined.\nexport function add(a: number, b: number) {\n  return a + b;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Lucid\nDESCRIPTION: This JSON snippet shows the recommended Webpack configuration to use Lucid in Node.js. You must enable `asyncWebAssembly` and `topLevelAwait` experimental features in webpack.config.json\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nexperiments: {\n    \"asyncWebAssembly\": true,\n    \"topLevelAwait\": true,\n    \"layers\": true // optional, with some bundlers/frameworks it doesn't work without\n  }\n```\n\n----------------------------------------\n\nTITLE: Top-Level Function Definition using Arrow Syntax in TypeScript\nDESCRIPTION: This code snippet shows the discouraged method for defining top-level functions in TypeScript with the arrow function syntax.  Using the `function` keyword is preferred.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// GOOD.\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generate Private Key with Lucid\nDESCRIPTION: This code snippet demonstrates how to generate a Bech32 encoded private key using the `lucid.utils.generatePrivateKey()` method. This private key can then be used to select a wallet. No dependencies beyond the Lucid library are explicitly required.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/basics/create-wallet.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst privateKey = lucid.utils.generatePrivateKey(); // Bech32 encoded private key\nconsole.log(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Building Lucid locally\nDESCRIPTION: This snippet shows how to build Lucid locally to generate NPM and web bundles. It uses the `deno task build` command at the root of Lucid folder. This will output a `dist` folder containing the NPM and web bundle.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndeno task build\n```\n\n----------------------------------------\n\nTITLE: Importing Lucid Locally with Deno\nDESCRIPTION: This snippet shows how to import Lucid locally in a Deno environment. It assumes that the code is run at the root of the Lucid folder. \nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { Lucid } from \"./mod.ts\";\n```\n\n----------------------------------------\n\nTITLE: Multi-Line Comment to Describe Function in TypeScript\nDESCRIPTION: This code snippet illustrates how to write a multi-line comment to describe a function in TypeScript using `/** */`. This is a standard way to document functions, providing details about their purpose and parameters.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * This functions adds two numbers together.\n * This is another random comment.\n */\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Multi-Line Comment in TypeScript\nDESCRIPTION: This code snippet demonstrates how to write a multi-line comment in TypeScript using `/*` and `*/`. This format is suitable for longer explanations spanning multiple lines.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*\n  This is a comment on line 1.\n  This is a comment on line 2.\n */\n\n```\n\n----------------------------------------\n\nTITLE: Single-Line Comment to Describe Function in TypeScript\nDESCRIPTION: This code snippet presents the style of writing a single-line comment to describe a function in TypeScript using `/** */`. This type of comment is typically placed above the function declaration and is used for generating documentation.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** This functions adds two numbers together. */\nexport function add(a: number, b: number): number {\n  return a + b;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Core Components with Deno\nDESCRIPTION: Executes the test suite for the core components of the Lucid Cardano library. Requires Deno to be installed.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndeno task test:core\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Deno\nDESCRIPTION: Generates documentation for the Lucid Cardano library using Deno. Requires Deno to be installed.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndeno doc\n```\n\n----------------------------------------\n\nTITLE: Cloning the Lucid Repository\nDESCRIPTION: This snippet shows how to clone the Lucid repository from GitHub. This allows you to build Lucid locally.\nSOURCE: https://github.com/jpg-store/lucid/blob/main/docs/docs/overview/import.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/spacebudz/lucid.git\n```"
  }
]