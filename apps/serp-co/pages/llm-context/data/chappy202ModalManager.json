[
  {
    "owner": "chappy202",
    "repo": "modal-manager",
    "content": "TITLE: Implementing Conditional Steps and Branching Flows in React Modals\nDESCRIPTION: Advanced example demonstrating how to create a payment modal with conditional steps based on user input, using the modal-manager library's branching capabilities.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModal, Step, StepRenderer } from 'modal-manager';\nimport { Dialog } from 'your-ui-library';\n\nfunction PaymentModal() {\n  const { \n    isOpen, \n    open, \n    close, \n    goTo, \n    setData, \n    data, \n    addStep, \n    currentStep, \n    prev \n  } = useModal({\n    id: 'payment-modal',\n    steps: [\n      { id: 'method' },\n      { id: 'card-details' },\n      { id: 'bank-details' },\n      { id: 'confirm' },\n    ]\n  });\n\n  // Set up the step navigation relationships\n  useEffect(() => {\n    // Define the previous step for each conditional step\n    addStep('payment-modal', 'card-details', {}, 'method');\n    addStep('payment-modal', 'bank-details', {}, 'method');\n    addStep('payment-modal', 'confirm', {}, data.paymentMethod === 'card' ? 'card-details' : 'bank-details');\n  }, [addStep, data.paymentMethod]);\n\n  const handlePaymentMethodSelect = (method) => {\n    setData({ paymentMethod: method });\n    \n    // Go to the appropriate step based on payment method\n    if (method === 'card') {\n      goTo('card-details');\n    } else if (method === 'bank') {\n      goTo('bank-details');\n    }\n  };\n\n  return (\n    <>\n      <button onClick={open}>Make Payment</button>\n      \n      <Dialog open={isOpen} onClose={close}>\n        <StepRenderer currentStep={currentStep}>\n          <Step id=\"method\">\n            <h2>Select Payment Method</h2>\n            <button onClick={() => handlePaymentMethodSelect('card')}>Credit Card</button>\n            <button onClick={() => handlePaymentMethodSelect('bank')}>Bank Transfer</button>\n          </Step>\n          \n          <Step id=\"card-details\">\n            <h2>Enter Card Details</h2>\n            {/* Card form */}\n            <button onClick={() => prev()}>Back</button>\n            <button onClick={() => goTo('confirm')}>Continue</button>\n          </Step>\n          \n          <Step id=\"bank-details\">\n            <h2>Enter Bank Details</h2>\n            {/* Bank form */}\n            <button onClick={() => prev()}>Back</button>\n            <button onClick={() => goTo('confirm')}>Continue</button>\n          </Step>\n          \n          <Step id=\"confirm\">\n            <h2>Confirm Payment</h2>\n            <p>Payment Method: {data.paymentMethod}</p>\n            <button onClick={() => prev()}>Back</button>\n            <button onClick={close}>Confirm</button>\n          </Step>\n        </StepRenderer>\n      </Dialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of Multi-Step Modal in React\nDESCRIPTION: A simple example showing how to implement a three-step modal using the modal-manager library with the useModal hook and StepRenderer component.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModal, Step, StepRenderer } from 'modal-manager';\nimport { Dialog } from 'your-ui-library';\n\nfunction MyModal() {\n  const { isOpen, open, close, currentStep, next, prev, isFirst, isLast } = useModal({\n    id: 'my-modal',\n    steps: [\n      { id: 'step1' },\n      { id: 'step2' },\n      { id: 'step3' },\n    ]\n  });\n\n  return (\n    <>\n      <button onClick={open}>Open Modal</button>\n      \n      <Dialog open={isOpen} onClose={close}>\n        <StepRenderer currentStep={currentStep}>\n          <Step id=\"step1\">\n            <h2>Step 1</h2>\n            <p>This is the first step</p>\n          </Step>\n          \n          <Step id=\"step2\">\n            <h2>Step 2</h2>\n            <p>This is the second step</p>\n          </Step>\n          \n          <Step id=\"step3\">\n            <h2>Step 3</h2>\n            <p>This is the final step</p>\n          </Step>\n        </StepRenderer>\n        \n        <div className=\"buttons\">\n          {!isFirst && <button onClick={prev}>Back</button>}\n          {!isLast ? (\n            <button onClick={next}>Next</button>\n          ) : (\n            <button onClick={close}>Finish</button>\n          )}\n        </div>\n      </Dialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Step Interface with StepRenderer and Step Components in React TSX\nDESCRIPTION: This snippet demonstrates how to create a multi-step interface using the StepRenderer component with nested Step components. The StepRenderer tracks the current step while Step components define the content for each step identified by unique IDs.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<StepRenderer currentStep={currentStep}>\n  <Step id=\"step1\">\n    {/* Content for step 1 */}\n  </Step>\n  <Step id=\"step2\">\n    {/* Content for step 2 */}\n  </Step>\n</StepRenderer>\n```\n\n----------------------------------------\n\nTITLE: Integrating Modal Manager with Shadcn/UI\nDESCRIPTION: Example showing how to integrate the modal-manager library with Shadcn/UI components to create a multi-step modal experience.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModal } from 'modal-manager';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  Button\n} from '@/components/ui';\n\nfunction ShadcnModal() {\n  const { isOpen, open, close, currentStep, next, prev, isFirst, isLast } = useModal({\n    id: 'shadcn-modal',\n    steps: [{ id: 'step1' }, { id: 'step2' }]\n  });\n\n  return (\n    <>\n      <Button onClick={open}>Open Modal</Button>\n      \n      <Dialog open={isOpen} onOpenChange={open => !open && close()}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {currentStep === 'step1' ? 'Step 1' : 'Step 2'}\n            </DialogTitle>\n          </DialogHeader>\n          \n          {currentStep === 'step1' ? (\n            <p>Content for step 1</p>\n          ) : (\n            <p>Content for step 2</p>\n          )}\n          \n          <DialogFooter>\n            {!isFirst && <Button variant=\"outline\" onClick={prev}>Back</Button>}\n            {!isLast ? (\n              <Button onClick={next}>Next</Button>\n            ) : (\n              <Button onClick={close}>Finish</Button>\n            )}\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Modal Manager with Material UI\nDESCRIPTION: Example showing how to integrate the modal-manager library with Material UI components to create a multi-step modal experience.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useModal } from 'modal-manager';\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';\n\nfunction MaterialUIModal() {\n  const { isOpen, open, close, currentStep, next, prev, isFirst, isLast } = useModal({\n    id: 'mui-modal',\n    steps: [{ id: 'step1' }, { id: 'step2' }]\n  });\n\n  return (\n    <>\n      <Button onClick={open}>Open Modal</Button>\n      \n      <Dialog open={isOpen} onClose={close}>\n        <DialogTitle>\n          {currentStep === 'step1' ? 'Step 1' : 'Step 2'}\n        </DialogTitle>\n        \n        <DialogContent>\n          {currentStep === 'step1' ? (\n            <p>Content for step 1</p>\n          ) : (\n            <p>Content for step 2</p>\n          )}\n        </DialogContent>\n        \n        <DialogActions>\n          {!isFirst && <Button onClick={prev}>Back</Button>}\n          {!isLast ? (\n            <Button onClick={next}>Next</Button>\n          ) : (\n            <Button onClick={close}>Finish</Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a ModalDebugger Component for Development in React TSX\nDESCRIPTION: This snippet shows how to integrate the ModalDebugger component which provides debugging capabilities for modal interfaces. It accepts position configuration and can be set to initially open or closed.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ModalDebugger \n  position=\"bottom-right\" // 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'\n  initiallyOpen={false}   // Whether the debugger is initially open\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Debugger for Development\nDESCRIPTION: Example showing how to add the built-in ModalDebugger component to help visualize the state of modals during development.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModalDebugger } from 'modal-manager';\n\nfunction App() {\n  return (\n    <>\n      {/* Your app components */}\n      \n      {process.env.NODE_ENV === 'development' && (\n        <ModalDebugger position=\"bottom-right\" />\n      )}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Modal Manager via Package Managers\nDESCRIPTION: Command-line instructions for installing the modal-manager package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install modal-manager\n# or\nyarn add modal-manager\n# or\npnpm add modal-manager\n```\n\n----------------------------------------\n\nTITLE: Running Development Tasks and Creating Releases in Bash\nDESCRIPTION: Commands for setting up the development environment, starting the development server, and creating different types of releases using pnpm.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm release        # for patch release\npnpm release:minor  # for minor release\npnpm release:major  # for major release\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --follow-tags origin main\n```\n\n----------------------------------------\n\nTITLE: Creating Git Commits with Conventional Commit Messages in Bash\nDESCRIPTION: Examples of how to create git commits using conventional commit messages for different types of changes. This helps in automating versioning and changelog generation.\nSOURCE: https://github.com/chappy202/modal-manager/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Examples:\ngit commit -m \"feat: add new transition animation\"\ngit commit -m \"fix: resolve issue with back navigation\"\ngit commit -m \"docs: update API documentation\"\n```"
  }
]