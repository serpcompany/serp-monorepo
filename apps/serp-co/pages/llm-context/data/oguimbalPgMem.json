[
  {
    "owner": "oguimbal",
    "repo": "pg-mem",
    "content": "TITLE: Initializing and Using pg-mem in TypeScript\nDESCRIPTION: Demonstrates how to import and create a new pg-mem database instance in TypeScript, and execute a SQL query.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { newDb } from \"pg-mem\";\n\nconst db = newDb();\ndb.public.many(/* put some sql here */);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Functions in pg-mem\nDESCRIPTION: Shows how to register a custom function in pg-mem, including specifying arguments, return type, and implementation.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndb.public.registerFunction({\n  name: \"say_hello\",\n  args: [DataType.text],\n  returns: DataType.text,\n  implementation: (x) => \"hello \" + x,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Restoring Backup Points in pg-mem\nDESCRIPTION: Demonstrates how to create a backup point, modify data, and restore to the previous state using pg-mem's immutable data structures.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = newDb();\ndb.public.none(`create table test(id text);\n                insert into test values ('value');`);\n// create a restore point & mess with data\nconst backup = db.backup();\ndb.public.none(`update test set id='new value';`);\n// restore it !\nbackup.restore();\ndb.public.many(`select * from test`); // => {test: 'value'}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Types in pg-mem\nDESCRIPTION: Demonstrates how to register a custom type (MACADDR) in pg-mem, including validation logic.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndb.public.registerEquivalentType({\n  name: \"macaddr\",\n  // which type is it equivalent to (will be able to cast it from it)\n  equivalentTo: DataType.text,\n  isValid(val: string) {\n    // check that it will be this format\n    return isValidMacAddress(val);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Intercepting Queries in pg-mem\nDESCRIPTION: Demonstrates how to intercept specific SQL queries and return custom results in pg-mem.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = newDb();\n\ndb.public.interceptQueries((sql) => {\n  if (sql === \"select * from whatever\") {\n    // intercept this statement, and return something custom:\n    return [{ something: 42 }];\n  }\n  // proceed to actual SQL execution for other requests.\n  return null;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Extensions in pg-mem\nDESCRIPTION: Shows how to register a custom extension in pg-mem, allowing for 'CREATE EXTENSION' statements.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndb.registerExtension(\"my-ext\", (schema) => {\n  // install your ext in 'schema'\n  // ex:  schema.registerFunction(...)\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events in pg-mem\nDESCRIPTION: Shows how to subscribe to various events in pg-mem, such as query execution, schema changes, and extension creation.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = newDb();\n\n// called on each successful sql request\ndb.on(\"query\", (sql) => {});\n// called on each failed sql request\ndb.on(\"query-failed\", (sql) => {});\n// called on schema changes\ndb.on(\"schema-change\", () => {});\n// called when a CREATE EXTENSION schema is encountered.\ndb.on(\"create-extension\", (ext) => {});\n```\n\n----------------------------------------\n\nTITLE: Manually Inserting Items into Tables in pg-mem\nDESCRIPTION: Demonstrates how to manually insert items into a table in pg-mem.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndb.public.getTable<TItem>('mytable').insert({ /* item to insert */ }))\n```\n\n----------------------------------------\n\nTITLE: Inspecting Table Content in pg-mem\nDESCRIPTION: Shows how to manually inspect table content using the find() method in pg-mem.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfor (const item of db.public.getTable<TItem>(\"mytable\").find(itemTemplate)) {\n  console.log(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Using pg-mem with Deno\nDESCRIPTION: Shows how to import and use pg-mem in a Deno environment.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { newDb } from \"https://deno.land/x/pg_mem/mod.ts\";\n\nconst db = newDb();\ndb.public.many(/* put some sql here */);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Experimental Events in pg-mem\nDESCRIPTION: Demonstrates how to subscribe to experimental events in pg-mem, such as sequential scans and join optimizations.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// called when a table is iterated entirely (ex: 'select * from data where notIndex=3' triggers it)\ndb.on('seq-scan', () => {});\n\n// same, but on a specific table\ndb.getTable('myTable').on('seq-scan', () = {});\n\n// will be called if pg-mem did not find any way to optimize a join\n// (which leads to a O(n*m) lookup with the current implementation)\ndb.on('catastrophic-join-optimization', () => {});\n```\n\n----------------------------------------\n\nTITLE: Installing pg-mem via npm\nDESCRIPTION: Shows how to install pg-mem using npm in a Node.js environment.\nSOURCE: https://github.com/oguimbal/pg-mem/blob/master/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i pg-mem --save\n```"
  }
]