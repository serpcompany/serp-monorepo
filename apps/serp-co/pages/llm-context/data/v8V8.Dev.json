[
  {
    "owner": "v8",
    "repo": "v8.dev",
    "content": "TITLE: Demonstrating Array.prototype.flat in JavaScript\nDESCRIPTION: Shows how to use the Array.prototype.flat method, which flattens a nested array recursively up to a specified depth (defaulting to 1). The example demonstrates both default flattening and infinite depth flattening.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-69.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Flatten one level:\nconst array = [1, [2, [3]]];\narray.flat();\n// → [1, 2, [3]]\n\n// Flatten recursively until the array contains no more nested arrays:\narray.flat(Infinity);\n// → [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Privacy Enforcement with Private Fields\nDESCRIPTION: Shows that attempting to access private fields from outside the class results in a SyntaxError. This demonstrates the true privacy guarantees provided by the private fields syntax.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = new IncreasingCounter();\ncounter.#count;\n// → SyntaxError\ncounter.#count = 42;\n// → SyntaxError\n```\n\n----------------------------------------\n\nTITLE: Implementing MapGet Property Interceptor\nDESCRIPTION: Implementation of a MapGet interceptor callback that handles property access by looking up values in an STL map and converting between JavaScript and C++ string types.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nvoid JsHttpRequestProcessor::MapGet(v8::Local<v8::String> name,\n                                    const v8::PropertyCallbackInfo<Value>& info) {\n  // Fetch the map wrapped by this object.\n  map<string, string> *obj = UnwrapMap(info.Holder());\n\n  // Convert the JavaScript string to a std::string.\n  string key = ObjectToString(name);\n\n  // Look up the value if it exists using the standard STL idiom.\n  map<string, string>::iterator iter = obj->find(key);\n\n  // If the key is not present return an empty handle as signal.\n  if (iter == obj->end()) return;\n\n  // Otherwise fetch the value and wrap it in a JavaScript string.\n  const string &value = (*iter).second;\n  info.GetReturnValue().Set(v8::String::NewFromUtf8(\n      value.c_str(), v8::String::kNormalString, value.length()));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Proxy Usage Example in JavaScript\nDESCRIPTION: Demonstrates a simple Proxy implementation that adds logging to property access operations on an object. The proxy intercepts 'get' operations on the target object, logs the property name being accessed, and returns the corresponding value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/optimizing-proxies.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = {};\nconst callTracer = new Proxy(target, {\n  get: (target, name, receiver) => {\n    console.log(`get was called for: ${name}`);\n    return target[name];\n  }\n});\n\ncallTracer.property = 'value';\nconsole.log(callTracer.property);\n// get was called for: property\n// value\n```\n\n----------------------------------------\n\nTITLE: Limitation of String.replace with Multiple Occurrences in JavaScript\nDESCRIPTION: Shows how String.prototype.replace only replaces the first occurrence of a substring when the search value is a string, which is often not the desired behavior for global replacements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'aabbcc'.replace('b', '_');\n// → 'aa_bcc'\n\n'🍏🍏🍋🍋🍊🍊🍓🍓'.replace('🍏', '🥭');\n// → '🥭🍏🍋🍋🍊🍊🍓🍓'\n```\n\n----------------------------------------\n\nTITLE: Limitation of String.replace with Multiple Occurrences in JavaScript\nDESCRIPTION: Shows how String.prototype.replace only replaces the first occurrence of a substring when the search value is a string, which is often not the desired behavior for global replacements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'aabbcc'.replace('b', '_');\n// → 'aa_bcc'\n\n'🍏🍏🍋🍋🍊🍊🍓🍓'.replace('🍏', '🥭');\n// → '🥭🍏🍋🍋🍊🍊🍓🍓'\n```\n\n----------------------------------------\n\nTITLE: BigInt Arithmetic Operations\nDESCRIPTION: Shows various arithmetic operations with BigInt values compared to regular Numbers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(7 + 6 - 5) * 4 ** 3 / 2 % 3;\n// → 1\n(7n + 6n - 5n) * 4n ** 3n / 2n % 3n;\n// → 1n\n```\n\n----------------------------------------\n\nTITLE: Using String.prototype.replaceAll in JavaScript\nDESCRIPTION: Shows how to use String.prototype.replaceAll to replace all occurrences of a substring without creating a global RegExp, providing a simpler alternative to the replace method with global flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryString = 'q=query+string+parameters';\n\n// Works, but requires escaping inside regular expressions.\nqueryString.replace(/\\+/g, ' ');\n// → 'q=query string parameters'\n\n// Simpler!\nqueryString.replaceAll('+', ' ');\n// → 'q=query string parameters'\n```\n\n----------------------------------------\n\nTITLE: Customizing Object.prototype.toString Output\nDESCRIPTION: Shows how to use Symbol.toStringTag to customize object string representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Custom {\n  get [Symbol.toStringTag]() {\n    return 'Custom';\n  }\n}\nObject.prototype.toString.call(new Custom);\n// → '[object Custom]'\nString(new Custom);\n// → '[object Custom]'\n```\n\n----------------------------------------\n\nTITLE: Supported Module Specifier Formats in JavaScript\nDESCRIPTION: Demonstrates the supported formats for module specifiers in browsers, including relative paths starting with './' or '../', absolute paths starting with '/', and full URLs. These are the proper ways to reference modules in browser environments.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Supported:\nimport {shout} from './lib.mjs';\nimport {shout} from '../lib.mjs';\nimport {shout} from '/modules/lib.mjs';\nimport {shout} from 'https://simple.example/modules/lib.mjs';\n```\n\n----------------------------------------\n\nTITLE: Exporting Constants and Functions in JavaScript Modules\nDESCRIPTION: Demonstrates how to export constants and functions from a JavaScript module using the export keyword. This example exports a constant 'repeat' and a function 'shout' that can be imported by other modules.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 📁 lib.mjs\nexport const repeat = (string) => `${string} ${string}`;\nexport function shout(string) {\n  return `${string.toUpperCase()}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Object Template with Function Binding in V8\nDESCRIPTION: Demonstrates creating a template for the global object and setting built-in global functions using V8's template system. Shows how to create a new context with the global template.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Create a template for the global object and set the\n// built-in global functions.\nv8::Local<v8::ObjectTemplate> global = v8::ObjectTemplate::New(isolate);\nglobal->Set(v8::String::NewFromUtf8(isolate, \"log\"),\n            v8::FunctionTemplate::New(isolate, LogCallback));\n\n// Each processor gets its own context so different processors\n// do not affect each other.\nv8::Persistent<v8::Context> context =\n    v8::Context::New(isolate, nullptr, global);\n```\n\n----------------------------------------\n\nTITLE: Object Transformation with Object.fromEntries in JavaScript\nDESCRIPTION: Demonstrates how to transform objects by combining Object.entries with array methods like filter and map.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-fromentries.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 42, y: 50, abc: 9001 };\nconst result = Object.fromEntries(\n  Object.entries(object)\n    .filter(([ key, value ]) => key.length === 1)\n    .map(([ key, value ]) => [ key, value * 2 ])\n);\n// → { x: 84, y: 100 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Cause Chaining in JavaScript\nDESCRIPTION: Shows how to use the new Error cause feature which allows chaining errors. The Error constructors now accept an options bag with a cause property as the second parameter, enabling standardized error chaining.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-93.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst parentError = new Error('parent');\nconst error = new Error('parent', { cause: parentError });\nconsole.log(error.cause === parentError);\n// → true\n```\n\n----------------------------------------\n\nTITLE: Using String.prototype.matchAll with named capture groups in JavaScript\nDESCRIPTION: This example shows how String.prototype.matchAll works with named capture groups, demonstrating how to access both the full match and the captured groups in a simple for-of loop.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-matchall.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev';\nconst regex = /\\b(?<owner>[a-z0-9]+)\\/(?<repo>[a-z0-9\\.]+)\\b/g;\nfor (const match of string.matchAll(regex)) {\n  console.log(`${match[0]} at ${match.index} with '${match.input}'`);\n  console.log(`→ owner: ${match.groups.owner}`);\n  console.log(`→ repo: ${match.groups.repo}`);\n}\n\n// Output:\n//\n// tc39/ecma262 at 23 with 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev'\n// → owner: tc39\n// → repo: ecma262\n// v8/v8.dev at 36 with 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev'\n// → owner: v8\n// → repo: v8.dev\n```\n\n----------------------------------------\n\nTITLE: Comparing Function Parameter Handling with and without Rest Operator in JavaScript\nDESCRIPTION: This snippet demonstrates the difference between handling variable arguments using the traditional arguments object versus the ES2015 rest operator. The rest operator provides a cleaner syntax for working with an indefinite number of function arguments.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-47.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Without rest operator\nfunction concat() {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return args.join('');\n}\n\n// With rest operator\nfunction concatWithRest(...strings) {\n  return strings.join('');\n}\n```\n\n----------------------------------------\n\nTITLE: Fine-grained Module Export Example\nDESCRIPTION: Demonstrates the export of multiple functions from a single module, showing how to structure module exports.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport function drop() { /* … */ }\nexport function pluck() { /* … */ }\nexport function zip() { /* … */ }\n```\n\n----------------------------------------\n\nTITLE: Using findLast Array Method in JavaScript\nDESCRIPTION: Demonstrates the new findLast method introduced in V8 v9.7 that searches for elements matching a predicate from the end of an array. The example shows finding the last even number in an array.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-97.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[1,2,3,4].findLast((el) => el % 2 === 0)\n// → 4 (last even element)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-Loading Modules in a Single-Page Application\nDESCRIPTION: This complete example demonstrates how to use dynamic import() to lazily load modules based on user navigation in a single-page application. It loads different modules on-demand when the user clicks on navigation links.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/dynamic-import.md#2025-04-10_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>My library</title>\n<nav>\n  <a href=\"books.html\" data-entry-module=\"books\">Books</a>\n  <a href=\"movies.html\" data-entry-module=\"movies\">Movies</a>\n  <a href=\"video-games.html\" data-entry-module=\"video-games\">Video Games</a>\n</nav>\n<main>This is a placeholder for the content that will be loaded on-demand.</main>\n<script>\n  const main = document.querySelector('main');\n  const links = document.querySelectorAll('nav > a');\n  for (const link of links) {\n    link.addEventListener('click', async (event) => {\n      event.preventDefault();\n      try {\n        const module = await import(`/${link.dataset.entryModule}.mjs`);\n        // The module exports a function named `loadPageInto`.\n        module.loadPageInto(main);\n      } catch (error) {\n        main.textContent = error.message;\n      }\n    });\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Promise.allSettled for Multiple API Calls in JavaScript\nDESCRIPTION: This snippet illustrates how to use Promise.allSettled to wait for multiple independent API calls to complete, regardless of their success or failure, before removing a loading indicator.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-combinators.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst promises = [\n  fetch('/api-call-1'),\n  fetch('/api-call-2'),\n  fetch('/api-call-3'),\n];\n// Imagine some of these requests fail, and some succeed.\n\nawait Promise.allSettled(promises);\n// All API calls have finished (either failed or succeeded).\nremoveLoadingIndicator();\n```\n\n----------------------------------------\n\nTITLE: Using Intl.PluralRules for Ordinal Numbers in English\nDESCRIPTION: This example shows how to use Intl.PluralRules with the 'ordinal' type to generate correct ordinal indicators for numbers in English. It demonstrates formatting numbers with their appropriate ordinal suffixes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-pluralrules.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pr = new Intl.PluralRules('en-US', {\n  type: 'ordinal'\n});\nconst suffixes = new Map([\n  ['one',   'st'],\n  ['two',   'nd'],\n  ['few',   'rd'],\n  ['other', 'th'],\n]);\nconst formatOrdinals = (n) => {\n  const rule = pr.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n}${suffix}`;\n};\n\nformatOrdinals(0);   // '0th'\nformatOrdinals(1);   // '1st'\nformatOrdinals(2);   // '2nd'\nformatOrdinals(3);   // '3rd'\nformatOrdinals(4);   // '4th'\nformatOrdinals(11);  // '11th'\nformatOrdinals(21);  // '21st'\nformatOrdinals(42);  // '42nd'\nformatOrdinals(103); // '103rd'\n```\n\n----------------------------------------\n\nTITLE: Using Import Attributes with JSON Module in JavaScript\nDESCRIPTION: Demonstrates the new 'with' syntax for importing a JSON module with type attribute. This snippet shows how to import a JSON file and access its contents using the updated import attributes syntax.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-attributes.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// main.mjs\n//\n// New 'with' syntax.\nimport json from './foo.json' with { type: 'json' };\nconsole.log(json.answer); // 42\n```\n\n----------------------------------------\n\nTITLE: Recommended BigInt Creation Methods in JavaScript\nDESCRIPTION: Demonstrates the recommended ways to create BigInt values without precision loss, using either BigInt literals or string inputs to the BigInt constructor.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n123456789123456789n;\n// → 123456789123456789n ✅\nBigInt('123456789123456789');\n// → 123456789123456789n ✅\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise Chain with Duplicate Cleanup\nDESCRIPTION: Traditional promise implementation showing duplicate cleanup code in both then() and catch() blocks for handling loading spinner state.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-finally.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchAndDisplay = ({ url, element }) => {\n  showLoadingSpinner();\n  fetch(url)\n    .then((response) => response.text())\n    .then((text) => {\n      element.textContent = text;\n      hideLoadingSpinner();\n    })\n    .catch((error) => {\n      element.textContent = error.message;\n      hideLoadingSpinner();\n    });\n};\n\nfetchAndDisplay({\n  url: someUrl,\n  element: document.querySelector('#output')\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Modules Dynamically in JavaScript\nDESCRIPTION: Demonstrates the new dynamic module import feature using import(). This allows for conditional loading of modules based on runtime conditions, enabling lazy-loading of code modules.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-63.md#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport()\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.map() Method in JavaScript\nDESCRIPTION: The map() method creates a new iterator by applying a mapper function to each value in the original iterator. This example selects blog posts from a page and maps them to their text content.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Get the list of posts, return a list of their text content (titles) and log them.\nfor (const post of posts.values().map((x) => x.textContent)) {\n  console.log(post);\n}\n```\n\n----------------------------------------\n\nTITLE: Legalized WebAssembly i64 Function\nDESCRIPTION: Example showing how a WebAssembly function is transformed after legalization to handle 64-bit integers using two 32-bit parameters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/wasm-bigint.md#2025-04-10_snippet_1\n\nLANGUAGE: webassembly\nCODE:\n```\n(module\n  (func $send_i64 (param $x_low i32) (param $x_high i32)\n    (local $x i64) ;; the real value the rest of the code will use\n    ;; code to combine $x_low and $x_high into $x\n    ..))\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Import Attributes in JavaScript\nDESCRIPTION: Illustrates the use of import attributes with dynamic import() function. This example shows how to dynamically import a JSON module using the new 'with' option to specify the module type.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-attributes.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// main.mjs\n//\n// New 'with' option.\nconst jsonModule = await import('./foo.json', {\n  with: { type: 'json' }\n});\nconsole.log(jsonModule.default.answer); // 42\n```\n\n----------------------------------------\n\nTITLE: Async Generator Function for Reading Lines (ES2015+)\nDESCRIPTION: This snippet demonstrates an async generator function using proposed async iterator syntax. It shows how concise and readable advanced ES2015+ features can be.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function* readLines(path) {\n  let file = await fileOpen(path);\n  try {\n    while (!file.EOF) {\n      yield await file.readLine();\n    }\n  } finally {\n    await file.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Array Index Access\nDESCRIPTION: Shows how to use optional chaining when accessing array elements that might not exist.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-chaining.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// If the `usersArray` is `null` or `undefined`,\n// then `userName` gracefully evaluates to `undefined`.\nconst userIndex = 42;\nconst userName = usersArray?.[userIndex].name;\n```\n\n----------------------------------------\n\nTITLE: Using BigInt for Large Integer Operations\nDESCRIPTION: Shows how to use BigInt for precise calculations with large numbers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBigInt(Number.MAX_SAFE_INTEGER) + 2n;\n// → 9_007_199_254_740_993n ✅\n```\n\n----------------------------------------\n\nTITLE: Implementing IncreasingCounter with Private Class Fields\nDESCRIPTION: Uses private class fields syntax with the # prefix to create truly private properties. These fields are only accessible within the class body and cannot be accessed or modified from external code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass IncreasingCounter {\n  #count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this.#count;\n  }\n  increment() {\n    this.#count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array.prototype.flatMap Usage\nDESCRIPTION: Shows how to use flatMap to combine mapping and flattening in a single more efficient operation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/array-flat-flatmap.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[2, 3, 4].flatMap(duplicate); // 🚀\n// → [2, 2, 3, 3, 4, 4]\n```\n\n----------------------------------------\n\nTITLE: Basic Array Sorting with Custom Comparator in JavaScript\nDESCRIPTION: Demonstrates basic array sorting using a custom comparison function. Shows how comparison functions can contain arbitrary code and potential side effects.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [4, 2, 5, 3, 1];\n\nfunction compare(a, b) {\n  // Arbitrary code goes here, e.g. `array.push(1);`.\n  return a - b;\n}\n\n// A \"typical\" sort call.\narray.sort(compare);\n```\n\n----------------------------------------\n\nTITLE: Tracking Retaining Path for Memory Leak Investigation in JavaScript\nDESCRIPTION: This snippet demonstrates how to use %DebugTrackRetainingPath() to track the retaining path of an object. It creates an object, tracks it, and returns a closure that references the object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/memory-leaks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo() {\n  const x = { bar: 'bar' };\n  %DebugTrackRetainingPath(x);\n  return () => { return x; }\n}\nconst closure = foo();\ngc();\n```\n\n----------------------------------------\n\nTITLE: Traditional Error Handling with Custom Error Class\nDESCRIPTION: Example showing the traditional approach of catching and rethrowing errors with custom error classes to add context. This demonstrates the previous way of handling errors before the error causes feature.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/error-cause.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doWork() {\n  try {\n    doSomeWork();\n  } catch (err) {\n    throw new CustomError('Some work failed', err);\n  }\n  doMoreWork();\n}\n\ntry {\n  doWork();\n} catch (err) {\n  // Is |err| coming from |doSomeWork| or |doMoreWork|?\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example with Event Listener in JavaScript\nDESCRIPTION: Demonstrates a memory leak scenario where an unregistered event listener causes an iframe window and its contents to remain in memory. The leak occurs due to a forgotten removeEventListener call.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/tracing-js-dom.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst iframe = document.createElement('iframe');\niframe.src = 'iframe.html';\ndocument.body.appendChild(iframe);\niframe.addEventListener('load', function() {\n  const localVariable = iframe.contentWindow;\n  function leakingListener() {\n    // Do something with `localVariable`.\n    if (localVariable) {}\n  }\n  document.body.addEventListener('my-debug-event', leakingListener);\n  document.body.removeChild(iframe);\n  // BUG: forgot to unregister `leakingListener`.\n});\n```\n\n----------------------------------------\n\nTITLE: Manual SIMD Array Multiplication in Rust\nDESCRIPTION: This Rust function demonstrates manual control over SIMD operations for array multiplication. It uses intrinsics from the std::arch::wasm32 namespace to explicitly perform SIMD operations on chunks of the input arrays.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n#![feature(wasm_simd)]\n\nuse std::arch::wasm32::*;\n\npub unsafe fn multiply_arrays(out: &mut [i32], in_a: &[i32], in_b: &[i32]) {\n  in_a.chunks(4)\n    .zip(in_b.chunks(4))\n    .zip(out.chunks_mut(4))\n    .for_each(|((a, b), dst)| {\n      let a = v128_load(a.as_ptr() as *const v128);\n      let b = v128_load(b.as_ptr() as *const v128);\n      let prod = i32x4_mul(a, b);\n      v128_store(dst.as_mut_ptr() as *mut v128, prod);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Loading of Module and Nomodule Scripts\nDESCRIPTION: Demonstrates how to load both module and nomodule scripts in a deferred fashion. Since modules are deferred by default, this example adds the defer attribute to the nomodule script to ensure consistent loading behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"main.mjs\"></script>\n<script nomodule defer src=\"fallback.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.every() Method in JavaScript\nDESCRIPTION: The every() method tests whether all elements in the iterator pass a test implemented by the provided function. This example checks if all blog post titles contain the word 'V8'.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Find out if text content (title) of all blog post includes the `V8` keyword.\nposts.values().every((x) => x.textContent.includes('V8'));\n```\n\n----------------------------------------\n\nTITLE: Traditional Property Access Error Handling in JavaScript\nDESCRIPTION: Demonstrates traditional approaches to handling nested property access that could result in null/undefined errors, showing both the error-prone and safer but verbose versions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-chaining.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Error prone-version, could throw.\nconst nameLength = db.user.name.length;\n\n// Less error-prone, but harder to read.\nlet nameLength;\nif (db && db.user && db.user.name)\n  nameLength = db.user.name.length;\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 v6.8 Branch\nDESCRIPTION: Git command to create and checkout a new local branch tracking the remote v6.8 branch for development purposes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-68.md#2025-04-10_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b 6.8 -t branch-heads/6.8\n```\n\n----------------------------------------\n\nTITLE: Implementing IncreasingCounter with ES2015 Class Syntax\nDESCRIPTION: Shows how to implement the IncreasingCounter class using ES2015 class syntax with a constructor, getter method, and standard instance method. This approach uses the conventional underscore prefix to indicate a property that should be treated as private.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass IncreasingCounter {\n  constructor() {\n    this._count = 0;\n  }\n  get value() {\n    console.log('Getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions with String.replace for Global Replacement in JavaScript\nDESCRIPTION: Demonstrates the common workaround of using a regular expression with the global (g) flag to perform global substring replacement with String.prototype.replace.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'aabbcc'.replace(/b/g, '_');\n// → 'aa__cc'\n\n'🍏🍏🍋🍋🍊🍊🍓🍓'.replace(/🍏/g, '🥭');\n// → '🥭🥭🍋🍋🍊🍊🍓🍓'\n```\n\n----------------------------------------\n\nTITLE: Dependency fallbacks with top-level await\nDESCRIPTION: Demonstrates how to implement CDN fallback logic using top-level await, trying to load a library from a primary source before falling back to an alternative.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/top-level-await.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet jQuery;\ntry {\n  jQuery = await import('https://cdn-a.example.com/jQuery');\n} catch {\n  jQuery = await import('https://cdn-b.example.com/jQuery');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining for Safe Property Access in JavaScript\nDESCRIPTION: This snippet showcases the new optional chaining feature, allowing for concise and safe access to nested properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Still checks for errors and is much more readable.\nconst nameLength = db?.user?.name?.length;\n```\n\n----------------------------------------\n\nTITLE: Declaring a new CSA builtin in V8's builtin-definitions.h\nDESCRIPTION: This snippet shows how to declare a new builtin function called 'GetStringLength' using the TFS macro in V8's builtin-definitions.h file. It specifies that the builtin has a single input parameter identified by the constant kInputObject.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/csa.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nTFS(GetStringLength, kInputObject)\n```\n\n----------------------------------------\n\nTITLE: Additional VSCode Settings for V8 Development\nDESCRIPTION: JSON configuration for optimizing VSCode settings when working with V8. It disables auto-closing brackets which can be problematic for V8 development and sets up file exclusion masks to improve search functionality.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/ide-setup.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"editor.autoClosingBrackets\": false\n```\n\n----------------------------------------\n\nTITLE: PromiseHook API Implementation Example\nDESCRIPTION: C++ API for implementing promise lifecycle hooks in V8. Provides hooks for initialization, resolution, and before/after promise reaction jobs. Used for async context propagation and debugging.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-57.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nPromiseHook\n```\n\n----------------------------------------\n\nTITLE: Defining Class Properties Using Traditional Constructor Method in JavaScript\nDESCRIPTION: Example showing the traditional way of defining class properties in JavaScript before public class fields, using constructors to initialize properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Cat extends Animal {\n  constructor(name) {\n    super(name);\n    this.likesBaths = false;\n  }\n  meow() {\n    console.log('Meow!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing JavaScript Object Literals vs JSON.parse for Performance\nDESCRIPTION: Demonstrates the performance difference between using a JavaScript object literal and JSON.parse for large data objects. Using JSON.parse is significantly faster for objects of 10 kB or larger because JSON has a simpler grammar than JavaScript and can be parsed more efficiently.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/cost-of-javascript-2019.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = { foo: 42, bar: 1337 }; // 🐌\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = JSON.parse('{\"foo\":42,\"bar\":1337}'); // 🚀\n```\n\n----------------------------------------\n\nTITLE: Customizing Stack Trace Formatting in JavaScript\nDESCRIPTION: This function is used to format stack traces. It can be overridden to customize the formatting of stack traces in V8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nError.prepareStackTrace(error, structuredStackTrace)\n```\n\n----------------------------------------\n\nTITLE: Implementing Promise.any for Fastest Endpoint Response in JavaScript\nDESCRIPTION: This example demonstrates using Promise.any to determine which of multiple endpoints responds the fastest. It handles both successful responses and the case where all promises are rejected, using the new AggregateError type.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-combinators.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\ntry {\n  const first = await Promise.any(promises);\n  // Any of the promises was fulfilled.\n  console.log(first);\n  // → e.g. 'b'\n} catch (error) {\n  // All of the promises were rejected.\n  console.assert(error instanceof AggregateError);\n  // Log the rejection values:\n  console.log(error.errors);\n  // → [\n  //     <TypeError: Failed to fetch /endpoint-a>,\n  //     <TypeError: Failed to fetch /endpoint-b>,\n  //     <TypeError: Failed to fetch /endpoint-c>\n  //   ]\n}\n```\n\n----------------------------------------\n\nTITLE: BigInt Type Checking and Comparison\nDESCRIPTION: Shows how to check BigInt types and compare BigInt values with Numbers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof 123;\n// → 'number'\ntypeof 123n;\n// → 'bigint'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n42n === BigInt(42);\n// → true\n42n == 42;\n// → true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ES2016 Exponentiation Operator in JavaScript\nDESCRIPTION: This snippet shows the usage of the new ES2016 exponentiation operator, which provides an infix notation to replace Math.pow. It demonstrates both basic exponentiation and the compound assignment operator.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-52.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet n = 3**3; // n == 27\nn **= 2; // n == 729\n```\n\n----------------------------------------\n\nTITLE: Defining Class Properties Using Public Class Fields in JavaScript\nDESCRIPTION: Example demonstrating the new public class fields syntax introduced in V8 v7.2, which allows directly defining instance properties without using a constructor.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Cat extends Animal {\n  likesBaths = false;\n  meow() {\n    console.log('Meow!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Spread Properties to Object.assign() in JavaScript\nDESCRIPTION: This snippet compares the use of spread properties to Object.assign() for shallow-cloning objects and merging multiple objects in JavaScript.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-rest-spread.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Shallow-clone an object:\nconst data = { x: 42, y: 27, label: 'Treasure' };\n// The old way:\nconst clone1 = Object.assign({}, data);\n// The new way:\nconst clone2 = { ...data };\n// Either results in:\n// { x: 42, y: 27, label: 'Treasure' }\n\n// Merge two objects:\nconst defaultSettings = { logWarnings: false, logErrors: false };\nconst userSettings = { logErrors: true };\n// The old way:\nconst settings1 = Object.assign({}, defaultSettings, userSettings);\n// The new way:\nconst settings2 = { ...defaultSettings, ...userSettings };\n// Either results in:\n// { logWarnings: false, logErrors: true }\n```\n\n----------------------------------------\n\nTITLE: Async Function with Await for Fetching Status in JavaScript\nDESCRIPTION: This snippet demonstrates an async function that uses await to pause execution until a fetch promise is resolved. It shows how await simplifies working with promises in asynchronous code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function fetchStatus(url) {\n  const response = await fetch(url);\n  return response.status;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Object.hasOwn in JavaScript\nDESCRIPTION: Demonstrates the new Object.hasOwn method, which serves as an easier-to-use alias for Object.prototype.hasOwnProperty.call. This method checks if an object has a specific property as its own property.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-93.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nObject.hasOwn({ prop: 42 }, 'prop')\n// → true\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.forEach() Method in JavaScript\nDESCRIPTION: The forEach() method applies a function to each value in the iterator for its side effect and returns undefined. This example collects unique dates from blog posts into a Set.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Get the dates that at least one blog post is published and log them.\nconst dates = new Set();\nconst forEach = posts.values().forEach((x) => dates.add(x.querySelector('time')));\nconsole.log(dates);\n```\n\n----------------------------------------\n\nTITLE: Sending Inspector Messages in C++\nDESCRIPTION: This snippet demonstrates how to send messages from the embedder to V8 using the Inspector Protocol. It creates a StringView that Inspector can understand and dispatches the protocol message.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/inspector.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstatic void SendInspectorMessage(\n    const v8::FunctionCallbackInfo<v8::Value>& args) {\n  // [...] Create a StringView that Inspector can understand.\n  session->dispatchProtocolMessage(message_view);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Language Names in Traditional Chinese with Intl.DisplayNames\nDESCRIPTION: This example shows how to use Intl.DisplayNames to get language names in Traditional Chinese using Unicode's language identifier grammar.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-displaynames.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst languageNames = new Intl.DisplayNames(['zh-Hant'], { type: 'language' });\nlanguageNames.of('fr');\n// → '法文'\nlanguageNames.of('zh');\n// → '中文'\nlanguageNames.of('de');\n// → '德文'\n```\n\n----------------------------------------\n\nTITLE: Using Promise.all for Parallel Stylesheet Loading in JavaScript\nDESCRIPTION: This snippet demonstrates how to use Promise.all to load multiple stylesheets in parallel and render a new UI only when all requests have succeeded. It also includes error handling for failed requests.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-combinators.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst promises = [\n  fetch('/component-a.css'),\n  fetch('/component-b.css'),\n  fetch('/component-c.css'),\n];\ntry {\n  const styleResponses = await Promise.all(promises);\n  enableStyles(styleResponses);\n  renderNewUi();\n} catch (reason) {\n  displayError(reason);\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Building Perf from Kernel Sources\nDESCRIPTION: How to clone the Linux kernel repository and build the perf tool from source.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd some/directory;\ngit clone --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip.git;\ncd tip/tools/perf;\nmake\n```\n\n----------------------------------------\n\nTITLE: Visualizing V8 Hidden Class Structures with GraphViz\nDESCRIPTION: GraphViz code that generates a diagram showing the relationships between Maps, DescriptorArrays, and TransitionArrays in V8's hidden class implementation. Demonstrates property transitions and descriptor array sharing.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_2\n\nLANGUAGE: graphviz\nCODE:\n```\ndigraph G {\n\n  node [fontname=Helvetica, shape=\"record\", fontcolor=\"white\", style=filled, color=\"#3F53FF\"]\n  edge [fontname=Helvetica]\n  \n  Map0 [label=\"{<h> Map0 | <d> descriptors (0) | <t> transitions (1)}\"];\n  Map1 [label=\"{<h> Map1 | <d> descriptors (1) | <t> transitions (1)}\"];\n  Map2 [label=\"{<h> Map2 | <d> descriptors (2) | <t> transitions (2)}\"];\n  Map3 [label=\"{<h> Map3 | <d> descriptors (3) | <t> transitions (0)}\"];\n  Map4 [label=\"{<h> Map4 | <d> descriptors (3) | <t> transitions (1)}\"];\n  Map5 [label=\"{<h> Map5 | <d> descriptors (4) | <t> transitions (0)}\"];\n  Map6 [label=\"{<h> Map6 | <d> descriptors (2) | <t> transitions (0)}\"];\n  Map0:t -> Map1 [label=\"name (inferred)\"];\n  \n  Map4:t -> Map5 [label=\"cost (inferred)\"];\n  \n  // Create the descriptor arrays\n  node [fontname=Helvetica, shape=\"record\", fontcolor=\"black\", style=filled, color=\"#FFB34D\"];\n  \n  DA0 [label=\"{DescriptorArray0 | (empty)}\"];\n  Map0:d -> DA0;\n  DA1 [label=\"{DescriptorArray1 | name (const i0) | height (const i1) | prominence (const i2)}\"];\n  Map1:d -> DA1;\n  Map2:d -> DA1;\n  Map3:d -> DA1;\n  \n  DA2 [label=\"{DescriptorArray2 | name (const i0) | height (const i1) | experience (const i2) | cost (const p0)}\"];\n  Map4:d -> DA2;\n  Map5:d -> DA2;\n  \n  DA3 [label=\"{DescriptorArray3 | name (const i0) | rating (const i1)}\"];\n  Map6:d -> DA3;\n  \n  // Create the transition arrays\n  node [fontname=Helvetica, shape=\"record\", fontcolor=\"white\", style=filled, color=\"#B3813E\"];\n  TA0 [label=\"{TransitionArray0 | <a> experience | <b> prominence}\"];\n  Map2:t -> TA0;\n  TA0:a -> Map4:h;\n  TA0:b -> Map3:h;\n  \n  TA1 [label=\"{TransitionArray1 | <a> rating | <b> height}\"];\n  Map1:t -> TA1;\n  TA1:b -> Map2;\n  TA1:a -> Map6;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding kX64Int32Add1 to Instruction Scheduler for x64 Architecture\nDESCRIPTION: Modification to instruction-scheduler-x64.cc to handle the new kX64Int32Add1 operation in the instruction flags switch statement.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/backend/x64/instruction-scheduler-x64.cc b/src/compiler/backend/x64/instruction-scheduler-x64.cc\nindex 79eda7e78d..3667a84577 100644\n--- a/src/compiler/backend/x64/instruction-scheduler-x64.cc\n+++ b/src/compiler/backend/x64/instruction-scheduler-x64.cc\n@@ -13,6 +13,7 @@ bool InstructionScheduler::SchedulerSupported() { return true; }\n int InstructionScheduler::GetTargetInstructionFlags(\n     const Instruction* instr) const {\n   switch (instr->arch_opcode()) {\n+    case kX64Int32Add1:\n     case kX64Add:\n     case kX64Add32:\n     case kX64And:\n```\n\n----------------------------------------\n\nTITLE: Basic String.replace Usage with Single Replacement in JavaScript\nDESCRIPTION: Demonstrates how String.prototype.replace works when replacing a single character or emoji in a string. The method replaces only the first occurrence of the substring.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'abc'.replace('b', '_');\n// → 'a_c'\n\n'🍏🍋🍊🍓'.replace('🍏', '🥭');\n// → '🥭🍋🍊🍓'\n```\n\n----------------------------------------\n\nTITLE: Creating Intl.DisplayNames for Region Names in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an Intl.DisplayNames object to get region names in English using ISO-3166 2-letter country codes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-displaynames.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst regionNames = new Intl.DisplayNames(['en'], { type: 'region' });\nregionNames.of('US');\n// → 'United States'\nregionNames.of('BA');\n// → 'Bosnia & Herzegovina'\nregionNames.of('MM');\n// → 'Myanmar (Burma)'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguous Arrow Function Syntax in JavaScript\nDESCRIPTION: These code snippets illustrate the ambiguity in parsing arrow functions versus parenthesized expressions, which necessitates the use of cover grammars.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = (a,\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = (a, b) => { return a + b };\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = (a, 3);\n```\n\n----------------------------------------\n\nTITLE: Optional Method Calls with Optional Chaining\nDESCRIPTION: Shows how to use optional chaining for method calls, handling cases where methods might not exist.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-chaining.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Extends the interface with an optional method, which is present\n// only for admin users.\nconst adminOption = db?.user?.validateAdminAndGetPrefs?.().option;\n```\n\n----------------------------------------\n\nTITLE: Streaming compilation of WebAssembly using fetch API in JavaScript\nDESCRIPTION: Demonstrates how to use the WebAssembly.compileStreaming() function in combination with the fetch() API to enable streaming compilation of WebAssembly modules. This allows compilation to start as soon as bytes are downloaded, improving performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-65.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst module = await WebAssembly.compileStreaming(fetch('foo.wasm'));\n```\n\n----------------------------------------\n\nTITLE: Optional Dynamic Property Access\nDESCRIPTION: Demonstrates using optional chaining with dynamic property access using bracket notation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-chaining.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Extends the capabilities of the static property access\n// with a dynamically generated property name.\nconst optionName = 'optional setting';\nconst optionLength = db?.user?.preferences?.[optionName].length;\n```\n\n----------------------------------------\n\nTITLE: Using await at top level in modules (new behavior)\nDESCRIPTION: Shows how the new top-level await syntax works within JavaScript modules, allowing direct use of await without wrapper functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/top-level-await.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait Promise.resolve(console.log('🎉'));\n// → 🎉\n```\n\n----------------------------------------\n\nTITLE: Building V8 for x64 release configuration using gm\nDESCRIPTION: Uses the gm helper script to build V8 in release mode for x64 architecture in a single command.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngm x64.release\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypedArray Prototype Chain Store Behavior in JavaScript\nDESCRIPTION: Code example showing how stores to objects with TypedArrays in their prototype chain should handle out-of-bounds indices. This snippet demonstrates that values stored to indices beyond the TypedArray bounds should be ignored and return undefined.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-83.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nv = {};\nv.__proto__ = new Int32Array(1);\nv[2] = 123;\nreturn v[2]; // Should return undefined\n```\n\n----------------------------------------\n\nTITLE: Modern Error Handling with Error Causes\nDESCRIPTION: Example showing the new error causes feature that allows chaining errors using the cause property in the Error constructor options. This demonstrates how to properly identify and handle errors from different sources.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/error-cause.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doWork() {\n  try {\n    doSomeWork();\n  } catch (err) {\n    throw new Error('Some work failed', { cause: err });\n  }\n  try {\n    doMoreWork();\n  } catch (err) {\n    throw new Error('More work failed', { cause: err });\n  }\n}\n\ntry {\n  doWork();\n} catch (err) {\n  switch(err.message) {\n    case 'Some work failed':\n      handleSomeWorkFailure(err.cause);\n      break;\n    case 'More work failed':\n      handleMoreWorkFailure(err.cause);\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Use-After-Free Vulnerability in C++\nDESCRIPTION: Example showing how a use-after-free vulnerability occurs when accessing a deleted object through a dangling pointer. The code allocates a Foo object, deletes it, and then incorrectly attempts to access it after deletion.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/retrofitting-temporal-memory-safety-on-c++.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto* foo = new Foo();\ndelete foo;\n// The memory location pointed to by foo is not representing\n// a Foo object anymore, as the object has been deleted (freed).\nfoo->Process();\n```\n\n----------------------------------------\n\nTITLE: Stacking Optional Chaining Operators\nDESCRIPTION: Demonstrates how multiple optional chaining operators can be used in sequence.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-chaining.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// An optional chain may be followed by another optional chain.\nconst firstNameLength = db.users?.[42]?.names.first.length;\n```\n\n----------------------------------------\n\nTITLE: Triggering Further Deoptimization in TurboFan-optimized JavaScript Code\nDESCRIPTION: This JavaScript snippet demonstrates how changing the type of a variable can trigger further deoptimization in TurboFan-optimized code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nm2 = 42;  // heh.\n```\n\n----------------------------------------\n\nTITLE: Using FinalizationRegistry for Garbage Collection Callbacks\nDESCRIPTION: Example showing how to use FinalizationRegistry to register callbacks that execute after object garbage collection.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-84.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst registry = new FinalizationRegistry((heldValue) => {\n  console.log(heldValue);\n});\n\n(function () {\n  const garbage = {};\n  registry.register(garbage, 42);\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Object.hasOwn for Property Check in JavaScript\nDESCRIPTION: This snippet shows how to use the new Object.hasOwn method to check if an object has a specific property. It provides a more straightforward and accessible way to perform property ownership checks without the need for additional setup or method references.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-has-own.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (Object.hasOwn(object, 'foo')) {\n  // `object` has property `foo`.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexical Closures in JavaScript\nDESCRIPTION: This example demonstrates how JavaScript closures work, with an inner function referencing a variable from its outer scope. It shows why variables referenced by inner functions must be allocated on the heap rather than the stack.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/preparser.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction make_f(d) { // ← declaration of `d`\n  return function inner(a, b) {\n    const c = a + b + d; // ← reference to `d`\n    return c;\n  };\n}\n\nconst f = make_f(10);\n\nfunction g() {\n  return f(1, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing trimStart/trimEnd with trimLeft/trimRight in JavaScript\nDESCRIPTION: This code demonstrates the equivalence of the new trimStart() and trimEnd() methods with the non-standard trimLeft() and trimRight() methods. It shows that the older methods remain as aliases for backward compatibility.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-trimming.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = '  hello world  ';\nstring.trimStart();\n// → 'hello world  '\nstring.trimLeft();\n// → 'hello world  '\nstring.trimEnd();\n// → '  hello world'\nstring.trimRight();\n// → '  hello world'\nstring.trim(); // ES5\n// → 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function.prototype.toString Revision in JavaScript\nDESCRIPTION: Illustrates the new behavior of Function.prototype.toString() which now returns exact slices of source code text, including whitespace and comments, rather than a standardized representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-66.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Note the comment between the `function` keyword\n// and the function name, as well as the space following\n// the function name.\nfunction /* a comment */ foo () {}\n\n// Previously:\nfoo.toString();\n// → 'function foo() {}'\n//             ^ no comment\n//                ^ no space\n\n// Now:\nfoo.toString();\n// → 'function /* comment */ foo () {}'\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Implementation\nDESCRIPTION: Using the nullish coalescing operator to properly handle default values, only defaulting when the value is null or undefined.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/nullish-coalescing.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component(props) {\n  const enable = props.enabled ?? true;\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Using findLast() and findLastIndex() to locate elements from the end in JavaScript Arrays\nDESCRIPTION: Examples of using the newer Array.prototype.findLast and findLastIndex methods that search from the end of the array. These methods provide a more direct and ergonomic solution than reversing the array first.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/finding-in-arrays.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputArray = [{v:1}, {v:2}, {v:3}, {v:4}, {v:5}];\ninputArray.findLast((element) => element.v % 2 === 0);\n// → {v:4}\ninputArray.findLast((element) => element.v % 7 === 0);\n// → undefined\ninputArray.findLastIndex((element) => element.v % 2 === 0);\n// → 3\ninputArray.findLastIndex((element) => element.v % 7 === 0);\n// → -1\n```\n\n----------------------------------------\n\nTITLE: Simplified Subclassing with Class Fields\nDESCRIPTION: Demonstrates how class fields syntax simplifies subclassing by eliminating the need for a constructor and super() call. This approach is more concise while maintaining the same functionality.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass Cat extends Animal {\n  likesBaths = false;\n  meow() {\n    console.log('Meow!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Private Class Fields in JavaScript\nDESCRIPTION: Example showing how to use private class fields with the # prefix to create private variables within a class that are not accessible outside the class body.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-74.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass IncreasingCounter {\n  #count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this.#count;\n  }\n  increment() {\n    this.#count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Heap Snapshot Generation in Node.js\nDESCRIPTION: This snippet shows how to programmatically generate a V8 heap snapshot in a Node.js application using the v8 module.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/speeding-up-v8-heap-snapshots.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('v8').writeHeapSnapshot();\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-blocking executeLocked Method in JavaScript\nDESCRIPTION: Implementation of an asynchronous lock mechanism using Atomics API. The method takes a callback function and schedules it for execution once the lock is acquired. It uses Atomics.compareExchange for lock acquisition and Atomics.waitAsync for non-blocking wait when the lock is unavailable.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/atomics.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexecuteLocked(f) {\n  const self = this;\n\n  async function tryGetLock() {\n    while (true) {\n      const oldValue = Atomics.compareExchange(self.i32a, AsyncLock.INDEX,\n                          /* old value >>> */  AsyncLock.UNLOCKED,\n                          /* new value >>> */  AsyncLock.LOCKED);\n      if (oldValue == AsyncLock.UNLOCKED) {\n        f();\n        self.unlock();\n        return;\n      }\n      const result = Atomics.waitAsync(self.i32a, AsyncLock.INDEX,\n                                       AsyncLock.LOCKED);\n                                   //  ^ expected value at start\n      await result.value;\n    }\n  }\n\n  tryGetLock();\n}\n```\n\n----------------------------------------\n\nTITLE: List Formatting in Chinese\nDESCRIPTION: Demonstrates list formatting in Chinese language, showing how the API handles different writing systems and formatting conventions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-listformat.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lf = new Intl.ListFormat('zh');\nlf.format(['永鋒']);\n// → '永鋒'\nlf.format(['永鋒', '新宇']);\n// → '永鋒和新宇'\nlf.format(['永鋒', '新宇', '芳遠']);\n// → '永鋒、新宇和芳遠'\nlf.format(['永鋒', '新宇', '芳遠', '澤遠']);\n// → '永鋒、新宇、芳遠和澤遠'\n```\n\n----------------------------------------\n\nTITLE: Unit Formatting with Intl.NumberFormat\nDESCRIPTION: Demonstrates formatting numbers with units of measurement using the style and unit options.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'unit',\n  unit: 'kilobyte',\n});\nformatter.format(1.234);\n// → '1.234 kB'\nformatter.format(123.4);\n// → '123.4 kB'\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Module with Default and Named Exports\nDESCRIPTION: This snippet demonstrates how to create a JavaScript module with both a default export and a named export function. The module is saved as utils.mjs to indicate it's a module rather than a regular script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/dynamic-import.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Default export\nexport default () => {\n  console.log('Hi from the default export!');\n};\n\n// Named export `doStuff`\nexport const doStuff = () => {\n  console.log('Doing stuff…');\n};\n```\n\n----------------------------------------\n\nTITLE: Using traditional catch binding with parameter in JavaScript\nDESCRIPTION: This example shows the traditional way of using try/catch in JavaScript before ES2019, where a binding parameter was required in the catch clause even if it wasn't used.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-catch-binding.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  doSomethingThatMightThrow();\n} catch (exception) {\n  //     ^^^^^^^^^\n  // We must name the binding, even if we don't use it!\n  handleException();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IncreasingCounter with Public Class Fields\nDESCRIPTION: Refactors the IncreasingCounter class using the public class fields syntax. This eliminates the need for a constructor but still doesn't provide true privacy for the _count property.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass IncreasingCounter {\n  _count = 0;\n  get value() {\n    console.log('Getting the current value!');\n    return this._count;\n  }\n  increment() {\n    this._count++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing with DOM Operations\nDESCRIPTION: Examples showing nullish coalescing usage with DOM operations and optional chaining.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/nullish-coalescing.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Concise nullish coalescing\nconst link = document.querySelector('link') ?? document.createElement('link');\n\n// Default assignment destructure with boilerplate\nconst {\n  link = document.createElement('link'),\n} = {\n  link: document.querySelector('link') || undefined\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Array Spread Operation in JavaScript\nDESCRIPTION: Demonstrates how spread syntax combines multiple arrays into a new array, showing the basic usage of the spread operator for array concatenation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = [2, 3];\nconst b = [5, 6, 7];\nconst result = [1, ...a, 4, ...b];\n// → [1, 2, 3, 4, 5, 6, 7]\n```\n\n----------------------------------------\n\nTITLE: Using named capture groups with RegExp match indices in JavaScript\nDESCRIPTION: This function shows how to use named capture groups in combination with the new RegExp match indices feature to get variable positions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-match-indices.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getVariablePosition(source) {\n  const re = /(?<keyword>let|const|var)\\s+(?<id>[a-zA-Z_$][0-9a-zA-Z_$]*)/d;\n  const match = re.exec(source);\n  if (!match) return -1;\n  return match.indices.groups.id;\n}\ngetVariablePosition('let foo');\n```\n\n----------------------------------------\n\nTITLE: Syncing build dependencies for V8 using gclient\nDESCRIPTION: This command downloads all the build dependencies for V8. It should be run from the V8 source directory after checking out the code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngclient sync\n```\n\n----------------------------------------\n\nTITLE: Using BigInt64Array for 64-bit Integer Arrays in JavaScript\nDESCRIPTION: Demonstrates the usage of BigInt64Array, a new typed array for efficiently representing and manipulating lists of 64-bit signed integers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = new BigInt64Array(4);\n// → [0n, 0n, 0n, 0n]\nview.length;\n// → 4\nview[0];\n// → 0n\nview[0] = 42n;\nview[0];\n// → 42n\n```\n\n----------------------------------------\n\nTITLE: Using dotAll Mode in JavaScript Regular Expressions\nDESCRIPTION: Demonstrates the new dotAll mode for regular expressions enabled through the 's' flag, which allows the dot (.) character to match any character including line terminators.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-62.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/foo.bar/su.test('foo\\nbar'); // true\n```\n\n----------------------------------------\n\nTITLE: Basic English RelativeTimeFormat Usage\nDESCRIPTION: Demonstrates creating a RelativeTimeFormat instance for English language and formatting various time units with positive and negative values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-relativetimeformat.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rtf = new Intl.RelativeTimeFormat('en');\n\nrtf.format(3.14, 'second');\n// → 'in 3.14 seconds'\n\nrtf.format(-15, 'minute');\n// → '15 minutes ago'\n\nrtf.format(8, 'hour');\n// → 'in 8 hours'\n\nrtf.format(-2, 'day');\n// → '2 days ago'\n\nrtf.format(3, 'week');\n// → 'in 3 weeks'\n\nrtf.format(-5, 'month');\n// → '5 months ago'\n\nrtf.format(2, 'quarter');\n// → 'in 2 quarters'\n\nrtf.format(-42, 'year');\n// → '42 years ago'\n```\n\n----------------------------------------\n\nTITLE: Comparing Numeric Literals With and Without Separators in JavaScript\nDESCRIPTION: This snippet demonstrates the difference in readability between large numeric literals without separators and the same literals with underscores as separators.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/numeric-separators.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n1000000000000\n   1019436871.42\n```\n\nLANGUAGE: javascript\nCODE:\n```\n1_000_000_000_000\n    1_019_436_871.42\n```\n\n----------------------------------------\n\nTITLE: Using intersection to match Mongolian numbers\nDESCRIPTION: Example showing how to use the intersection operator to match only characters that are both in the Mongolian script and are numbers, filtering out Mongolian letters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /[\\p{Script_Extensions=Mongolian}&&\\p{Number}]/v;\n// U+1817 MONGOLIAN DIGIT SEVEN\nre.test('᠗'); // → true\n// U+1834 MONGOLIAN LETTER CHA\nre.test('ᠴ'); // → false\n```\n\n----------------------------------------\n\nTITLE: Enabling V8 Untrusted Code Mitigations Flag\nDESCRIPTION: The command-line flag to enable mitigations against speculative side-channel attacks in V8. This flag is enabled by default at runtime through a build-time GN flag. The mitigations include address masking for WebAssembly/asm.js memory accesses and index masking in JIT code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/untrusted-code-mitigations.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--untrusted-code-mitigations\n```\n\n----------------------------------------\n\nTITLE: Using Intl.ListFormat in JavaScript for Localized List Formatting\nDESCRIPTION: Example showing how to use the new Intl.ListFormat API to create human-readable, localized lists with proper conjunctions based on the specified locale.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lf = new Intl.ListFormat('en');\nlf.format(['Frank']);\n// → 'Frank'\nlf.format(['Frank', 'Christine']);\n// → 'Frank and Christine'\nlf.format(['Frank', 'Christine', 'Flora']);\n// → 'Frank, Christine, and Flora'\nlf.format(['Frank', 'Christine', 'Flora', 'Harrison']);\n// → 'Frank, Christine, Flora, and Harrison'\n```\n\n----------------------------------------\n\nTITLE: Exporting Namespace Object from JavaScript Module\nDESCRIPTION: Example demonstrating the new module namespace exports syntax introduced in V8 v7.2, which allows re-exporting an entire module as a namespace in a single statement.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as utils from './utils.mjs';\n```\n\n----------------------------------------\n\nTITLE: Sign Display Options in Intl.NumberFormat\nDESCRIPTION: Shows various sign display options including 'always' and 'exceptZero'.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'unit',\n  unit: 'percent',\n  signDisplay: 'always',\n});\nformatter.format(-12.34);\n// → '-12.34%'\nformatter.format(12.34);\n// → '+12.34%'\nformatter.format(0);\n// → '+0%'\nformatter.format(-0);\n// → '-0%'\n```\n\n----------------------------------------\n\nTITLE: Using String.prototype.matchAll for simplified regex iteration in JavaScript\nDESCRIPTION: This snippet demonstrates the new String.prototype.matchAll method which simplifies the iteration over regex matches. It returns an iterator that provides full match objects with all information.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-matchall.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = 'Magic hex numbers: DEADBEEF CAFE';\nconst regex = /\\b\\p{ASCII_Hex_Digit}+\\b/gu;\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n\n// Output:\n//\n// [ 'DEADBEEF', index: 19, input: 'Magic hex numbers: DEADBEEF CAFE' ]\n// [ 'CAFE',     index: 28, input: 'Magic hex numbers: DEADBEEF CAFE' ]\n```\n\n----------------------------------------\n\nTITLE: JavaScript WASI Function Implementation for fd_write\nDESCRIPTION: Demonstrates the WASI-compliant implementation of file descriptor write operation that enables compatibility with WASI runtimes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwasm   =>   function __wasi_fd_write(..) { .. console.log(..) .. }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Spread Operator for Array Merging in JavaScript\nDESCRIPTION: This snippet compares array merging with and without the spread operator in ES6. It shows how the spread operator simplifies merging arrays by eliminating the need for the concat method.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-46.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Merging arrays\n// Code without spread operator\nconst inner = [3, 4];\nconst merged = [0, 1, 2].concat(inner, [5]);\n\n// Code with spread operator\nconst inner = [3, 4];\nconst merged = [0, 1, 2, ...inner, 5];\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Maps in JavaScript\nDESCRIPTION: Shows how to convert objects to Map instances using Object.entries.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-fromentries.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { language: 'JavaScript', coolness: 9001 };\n\n// Convert the object into a map:\nconst map = new Map(Object.entries(object));\n```\n\n----------------------------------------\n\nTITLE: Loading WebAssembly in Node.js with Custom JavaScript\nDESCRIPTION: A minimal Node.js script that loads a WebAssembly module from a file and calls the exported 'add' function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// load-add.js\nconst binary = require('fs').readFileSync('add.wasm');\n\nWebAssembly.instantiate(binary).then(({ instance }) => {\n  console.log(instance.exports.add(40, 2));\n});\n```\n\n----------------------------------------\n\nTITLE: Getting variable position using RegExp match indices in JavaScript\nDESCRIPTION: This function demonstrates the use of the new RegExp match indices feature to find the exact position of a variable name in a declaration.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-match-indices.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getVariablePosition(source) {\n  // Notice the `d` flag, which enables `match.indices`\n  const re = /(let|const|var)\\s+([a-zA-Z_$][0-9a-zA-Z_$]*)/d;\n  const match = re.exec(source);\n  if (!match) return undefined;\n  return match.indices[2];\n}\ngetVariablePosition('let foo');\n// → [4, 7]\n```\n\n----------------------------------------\n\nTITLE: Nested Array Structure Example\nDESCRIPTION: Demonstrates a nested array structure with multiple levels of depth, showing the outer, inner, and innermost arrays.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/array-flat-flatmap.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, [2, [3]]];\n//            ^^^^^^^^^^^^^ outer array\n//                ^^^^^^^^  inner array\n//                    ^^^   innermost array\n```\n\n----------------------------------------\n\nTITLE: Fallback Behavior for Missing Private Fields in JavaScript\nDESCRIPTION: This example compares the old try-catch approach for handling missing private fields with the new private brand check approach.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/private-brand-checks.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass D {\n  use(obj) {\n    try {\n      obj.#foo;\n    } catch {\n      // Fallback for the case obj didn't have #foo\n    }\n  }\n  #foo = 0;\n}\n\nclass E {\n  use(obj) {\n    if (#foo in obj) {\n      obj.#foo;\n    } else {\n      // Fallback for the case obj didn't have #foo\n    }\n  }\n  #foo = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Script Names in English with Intl.DisplayNames\nDESCRIPTION: This example shows how to use Intl.DisplayNames to get script names in English using ISO-15924 4-letter script codes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-displaynames.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst scriptNames = new Intl.DisplayNames(['en'], { type: 'script' });\nscriptNames.of('Latn');\n// → 'Latin'\nscriptNames.of('Arab');\n// → 'Arabic'\nscriptNames.of('Kana');\n// → 'Katakana'\n```\n\n----------------------------------------\n\nTITLE: Basic Boolean Default with OR Operator\nDESCRIPTION: Example showing problematic default value assignment using the OR operator, where falsy values are not handled correctly.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/nullish-coalescing.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component(props) {\n  const enable = props.enabled || true;\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Command-Line Arguments in d8 with JavaScript\nDESCRIPTION: Demonstrates how to pass command-line arguments to d8 and access them in JavaScript using the arguments object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/d8.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nout.gn/x64.optdebug/d8 -- hi\n```\n\nLANGUAGE: javascript\nCODE:\n```\nd8> arguments[0]\n\"hi\"\n```\n\n----------------------------------------\n\nTITLE: Split-Join Workaround for Global Replacement in JavaScript\nDESCRIPTION: Shows an alternative approach to global substring replacement using String.prototype.split and Array.prototype.join, which avoids regex escaping issues but introduces array creation overhead.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryString = 'q=query+string+parameters';\nqueryString.split('+').join(' ');\n// → 'q=query string parameters'\n```\n\n----------------------------------------\n\nTITLE: Using Object.assign for Object Merging in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the new Object.assign method introduced in ES2015 to merge properties from a source object into a target object. The example shows both property merging and how it can be used for mixing in functionality.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-45.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = { a: 'Hello, ' };\nconst source = { b: 'world!' };\n// Merge the objects.\nObject.assign(target, source);\nconsole.log(target.a + target.b);\n```\n\n----------------------------------------\n\nTITLE: Promise Resolution Order Example\nDESCRIPTION: Code demonstrating the execution order of Promise resolution and async/await behavior, highlighting differences between Node.js versions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = Promise.resolve();\n\n(async () => {\n  await p; console.log('after:await');\n})();\n\np.then(() => console.log('tick:a'))\n .then(() => console.log('tick:b'));\n```\n\n----------------------------------------\n\nTITLE: Sandboxed JSArrayBuffer Implementation (External Buffer)\nDESCRIPTION: JSArrayBuffer implementation for external buffers using pointer table indirection for memory safety.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sandbox.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nclass JSArrayBuffer: public JSObject {\n  private:\n    external_ptr_t buffer_;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing named capture groups in JavaScript regular expressions\nDESCRIPTION: Shows how to use named capture groups in regular expressions to extract specific parts of a date string.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-64.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pattern = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\nconst result = pattern.exec('2017-12-15');\n// result.groups.year === '2017'\n// result.groups.month === '12'\n// result.groups.day === '15'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array.prototype.flatMap in JavaScript\nDESCRIPTION: Illustrates the use of Array.prototype.flatMap, which maps each element using a mapping function and then flattens the result into a new array. The example shows mapping each number to an array of itself and its double.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-69.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[2, 3, 4].flatMap((x) => [x, x * 2]);\n// → [2, 4, 3, 6, 4, 8]\n```\n\n----------------------------------------\n\nTITLE: Querying Chromiumdash API for V8 Version Information\nDESCRIPTION: These API endpoints from Chromiumdash can be used to retrieve information about V8 branches and releases. The first endpoint fetches milestone information, while the second retrieves release details.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/release-process.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://chromiumdash.appspot.com/fetch_milestones (to get the V8 branch name e.g. refs/branch-heads/12.1)\nhttps://chromiumdash.appspot.com/fetch_releases (to get the the V8 branch git hash)\n```\n\n----------------------------------------\n\nTITLE: Creating Default Exports in JavaScript Modules\nDESCRIPTION: Demonstrates how to create a default export in a JavaScript module using the 'export default' syntax. This example exports an anonymous function that converts a string to uppercase and adds an exclamation mark.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 📁 lib.mjs\nexport default function(string) {\n  return `${string.toUpperCase()}!`;\n}\n```\n\n----------------------------------------\n\nTITLE: Using One-Sided String Trimming Methods in JavaScript\nDESCRIPTION: Demonstrates the new String.prototype.trimStart() and String.prototype.trimEnd() methods that complement the existing trim() method, providing more granular string whitespace removal options.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-66.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = '  hello world  ';\nstring.trimStart();\n// → 'hello world  '\nstring.trimEnd();\n// → '  hello world'\nstring.trim();\n// → 'hello world'\n```\n\n----------------------------------------\n\nTITLE: JSPI API Detection Functions\nDESCRIPTION: Helper functions to detect which version of the JSPI API is available in the browser. Checks for existence of WebAssembly.Suspender (old API) and WebAssembly.Suspending (new API).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi-newapi.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction oldAPI(){\n  return WebAssembly.Suspender!=undefined\n}\n\nfunction newAPI(){\n  return WebAssembly.Suspending!=undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Object.fromEntries Usage in JavaScript\nDESCRIPTION: Shows how to use Object.fromEntries to convert an array of key-value pairs back into an object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-fromentries.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 42, y: 50 };\nconst entries = Object.entries(object);\n// → [['x', 42], ['y', 50]]\n\nconst result = Object.fromEntries(entries);\n// → { x: 42, y: 50 }\n```\n\n----------------------------------------\n\nTITLE: Comparing Integer vs. Floating-Point Loop Performance\nDESCRIPTION: This code demonstrates how loops using integer counters run significantly faster than loops using floating-point counters in V8, as CPUs execute integer operations more efficiently than floating-point operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < 1000; ++i) {\n  // fast 🚀\n}\n\nfor (let i = 0.1; i < 1000.1; ++i) {\n  // slow 🐌\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Default Exports from JavaScript Modules\nDESCRIPTION: Shows how to import a default export from a module. Default exports can be imported using any variable name, unlike named exports which must use the original export name or an alias.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 📁 main.mjs\nimport shout from './lib.mjs';\n//     ^^^^^\n```\n\n----------------------------------------\n\nTITLE: Using Nullish Coalescing for Correct Default Value Assignment in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the new nullish coalescing operator for assigning default values, correctly handling falsy values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component(props) {\n  const enable = props.enabled ?? true;\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Identifier Token Scanning Example\nDESCRIPTION: In JavaScript, identifiers like variable names can start with characters having the ID_Start property, followed by characters with ID_Continue property. This snippet shows two special characters that can start identifiers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/scanner.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$ _\n```\n\n----------------------------------------\n\nTITLE: Git Command for V8 Branch Checkout\nDESCRIPTION: Git command to checkout and experiment with V8 version 8.9 branch.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-89.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 8.9 -t branch-heads/8.9\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an IncreasingCounter Class in JavaScript\nDESCRIPTION: Demonstrates basic usage of a JavaScript class called IncreasingCounter. This example shows how to instantiate the class and interact with its getter method and increment functionality.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = new IncreasingCounter();\ncounter.value;\n// logs 'Getting the current value!'\n// → 0\ncounter.increment();\ncounter.value;\n// logs 'Getting the current value!'\n// → 1\n```\n\n----------------------------------------\n\nTITLE: Using Symbol.prototype.description getter in JavaScript\nDESCRIPTION: Shows the new, more ergonomic way to access a Symbol's description using the description getter property introduced in ES2019.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/symbol-description.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = Symbol('foo');\n//                    ^^^^^\nsymbol.description;\n// → 'foo'\n```\n\n----------------------------------------\n\nTITLE: Git Checkout Command for V8 v5.8\nDESCRIPTION: Command to checkout V8 version 5.8 branch for development and testing purposes. Requires an active V8 repository checkout.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-58.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 5.8 -t branch-heads/5.8\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'this' Binding in Accessor Properties During Prototype Lookup\nDESCRIPTION: This example shows how the 'this' value inside a getter refers to the original object where the property was accessed from, not the object where the property was found in the prototype chain.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-2.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst o1 = { x: 10, get foo() { return this.x; } };\nconst o2 = { x: 50 };\nObject.setPrototypeOf(o2, o1);\no2.foo;\n// → 50\n```\n\n----------------------------------------\n\nTITLE: Finding declaration position using RegExp in JavaScript\nDESCRIPTION: This function uses a regular expression to find the position of a variable declaration in a given source code string.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-match-indices.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getDeclarationPosition(source) {\n  const re = /(let|const|var)\\s+([a-zA-Z_$][0-9a-zA-Z_$]*)/;\n  const match = re.exec(source);\n  if (!match) return -1;\n  return match.index;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Atomics.waitAsync Basic Example\nDESCRIPTION: Demonstrates the basic usage of Atomics.waitAsync with a SharedArrayBuffer, showing how to handle both immediate and promise-based results.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/atomics.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sab = new SharedArrayBuffer(16);\nconst i32a = new Int32Array(sab);\nconst result = Atomics.waitAsync(i32a, 0, 0, 1000);\n//                                     |  |  ^ timeout (opt)\n//                                     |  ^ expected value\n//                                     ^ index\n\nif (result.value === 'not-equal') {\n  // The value in the SharedArrayBuffer was not the expected one.\n} else {\n  result.value instanceof Promise; // true\n  result.value.then(\n    (value) => {\n      if (value == 'ok') { /* notified */ }\n      else { /* value is 'timed-out' */ }\n    });\n}\n\n// In this thread, or in another thread:\nAtomics.notify(i32a, 0);\n```\n\n----------------------------------------\n\nTITLE: Simple C Module for Dynamic Loading\nDESCRIPTION: This C code snippet defines a simple function that returns 42. It uses the EMSCRIPTEN_KEEPALIVE macro to ensure the function is not eliminated during compilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// This is a simple provider of forty-two\n#include <emscripten.h>\n\nEMSCRIPTEN_KEEPALIVE long provide42(){\n  return 42l;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking valid identifiers with RegExp in JavaScript\nDESCRIPTION: This function uses a regular expression to determine if a given string is a valid identifier in JavaScript.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-match-indices.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isIdentifier(name) {\n  const re = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n  return re.exec(name) !== null;\n}\n```\n\n----------------------------------------\n\nTITLE: Decompressing 32-bit Tagged Values in V8 - Version 1 (C++)\nDESCRIPTION: Shows how compressed 32-bit tagged values are decompressed back to 64 bits, handling pointers and Smis separately.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nuint32_t compressed_tagged;\n\nuint64_t uncompressed_tagged;\nif (compressed_tagged & 1) {\n  // pointer case\n  uncompressed_tagged = base + uint64_t(compressed_tagged);\n} else {\n  // Smi case\n  uncompressed_tagged = int64_t(compressed_tagged);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Rest and Spread Properties in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of object rest properties for destructuring assignment and spread properties for object literals in ES2018.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-rest-spread.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest properties for object destructuring assignment:\nconst person = {\n    firstName: 'Sebastian',\n    lastName: 'Markbåge',\n    country: 'USA',\n    state: 'CA',\n};\nconst { firstName, lastName, ...rest } = person;\nconsole.log(firstName); // Sebastian\nconsole.log(lastName); // Markbåge\nconsole.log(rest); // { country: 'USA', state: 'CA' }\n\n// Spread properties for object literals:\nconst personCopy = { firstName, lastName, ...rest };\nconsole.log(personCopy);\n// { firstName: 'Sebastian', lastName: 'Markbåge', country: 'USA', state: 'CA' }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Default Value Assignment in JavaScript\nDESCRIPTION: This snippet shows how using the logical OR operator for default values can lead to unexpected results with falsy values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component(props) {\n  const enable = props.enabled || true;\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Original JSArrayBuffer Implementation\nDESCRIPTION: Example class showing how JSArrayBuffer stores buffer pointers and sizes before sandbox implementation, demonstrating potential memory corruption vectors.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sandbox.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass JSArrayBuffer: public JSObject {\n  private:\n    byte* buffer_;\n    size_t size_;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Specific V8 Tests with gm\nDESCRIPTION: Limiting the test runs to specific test suites or individual tests using the 'gm' tool. This allows selective testing of particular areas.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngm x64.release test262\ngm x64.debug mjsunit/regress/regress-123\n```\n\n----------------------------------------\n\nTITLE: Simple Async Function with Await for V8 Analysis in JavaScript\nDESCRIPTION: This snippet presents a simple async function that wraps a parameter in a promise and suspends execution until the promise is resolved. It's used to illustrate how V8 handles await under the hood.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo(v) {\n  const w = await v;\n  return w;\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Array Iteration with For-Of Loop in JavaScript\nDESCRIPTION: Demonstrates using a for-of loop to iterate over an array, which is both concise and efficient for iterable collections.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const item of items) {\n  doSomething(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints and Examining Arm32 Assembly\nDESCRIPTION: This snippet demonstrates how to set breakpoints, continue execution, and examine register values in the V8 simulator for Arm32 assembly code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_6\n\nLANGUAGE: assembly\nCODE:\n```\n0x488c2e9c  e59b200c       ldr r2, [fp, #+12]\n0x488c2ea0  e3120001       tst r2, #1\n0x488c2ea4  1a000037       bne +228 -> 0x488c2f88\n0x488c2ea8  e59b3008       ldr r3, [fp, #+8]\n0x488c2eac  e3130001       tst r3, #1\n0x488c2eb0  1a000037       bne +228 -> 0x488c2f94\n0x488c2eb4  e1a040c2       mov r4, r2, asr #1\n0x488c2eb8  e09440c3       adds r4, r4, r3, asr #1\n0x488c2ebc  6a000037       bvs +228 -> 0x488c2fa0\n0x488c2ec0  e0942004       adds r2, r4, r4\n```\n\n----------------------------------------\n\nTITLE: Implementing Super Property Access in JavaScript Object Literals\nDESCRIPTION: Example showing how super property access works in object literal methods. The method m uses super.x to access a property from its prototype chain.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-super.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myproto = {\n  __proto__: { 'x': 100 },\n  m() { return super.x; }\n};\nconst o = { __proto__: myproto };\no.m(); // returns 100\n```\n\n----------------------------------------\n\nTITLE: Displaying error for invalid variable names using RegExp in JavaScript\nDESCRIPTION: This snippet demonstrates how to use RegExp to find invalid variable names (reserved words) in JavaScript code and display an error message with precise positioning.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-match-indices.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction displayError(text, message) {\n  const re = /\\b(continue|function|break|for|if)\\b/d;\n  const match = text.match(re);\n  // Index `1` corresponds to the first capture group.\n  const [start, end] = match.indices[1];\n  const error = ' '.repeat(start) + // Adjust the caret position.\n    '^' +\n    '-'.repeat(end - start - 1) +   // Append the underline.\n    ' ' + message;                  // Append the message.\n  console.log(text);\n  console.log(error);\n}\n\nconst code = 'const function = foo;'; // faulty code\ndisplayError(code, 'Invalid variable name');\n```\n\n----------------------------------------\n\nTITLE: Creating Sparse Arrays with Dictionary Elements in JavaScript\nDESCRIPTION: This snippet demonstrates how V8 uses dictionary-based elements for sparse arrays to save memory. When an array has elements at very high indices with most positions empty, V8 switches to a dictionary representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-properties.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sparseArray = [];\nsparseArray[9999] = 'foo'; // Creates an array with dictionary elements.\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Lock Method\nDESCRIPTION: Shows the implementation of a blocking lock method that can only be called from a worker thread using Atomics.compareExchange and Atomics.wait.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/atomics.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlock() {\n  while (true) {\n    const oldValue = Atomics.compareExchange(this.i32a, AsyncLock.INDEX,\n                        /* old value >>> */  AsyncLock.UNLOCKED,\n                        /* new value >>> */  AsyncLock.LOCKED);\n    if (oldValue == AsyncLock.UNLOCKED) {\n      return;\n    }\n    Atomics.wait(this.i32a, AsyncLock.INDEX,\n                 AsyncLock.LOCKED); // <<< expected value at start\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using find() and findIndex() to locate elements from the beginning in JavaScript Arrays\nDESCRIPTION: Examples of using Array.prototype.find to return the first element matching a condition and Array.prototype.findIndex to get its index position. The find method returns the matching element or undefined, while findIndex returns the index or -1 when no match is found.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/finding-in-arrays.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputArray = [{v:1}, {v:2}, {v:3}, {v:4}, {v:5}];\ninputArray.find((element) => element.v % 2 === 0);\n// → {v:2}\ninputArray.find((element) => element.v % 7 === 0);\n// → undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninputArray.findIndex((element) => element.v % 2 === 0);\n// → 1\ninputArray.findIndex((element) => element.v % 7 === 0);\n// → -1\n```\n\n----------------------------------------\n\nTITLE: Function Epilogue with Arguments Adaptor\nDESCRIPTION: Assembly code for function return handling with the arguments adaptor frame approach.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_10\n\nLANGUAGE: nasm\nCODE:\n```\nmovq rsp,rbp   ;; Clean callee frame\npop rbp\nret 0x8        ;; Pops a single argument (the receiver)\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Array.prototype.at() Polyfill\nDESCRIPTION: A polyfill implementation of the `at` method that supports both positive and negative indexing. It handles index conversion, out-of-bounds access, and provides equivalent functionality to the native implementation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/at-method.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction at(n) {\n  // Convert the argument to an integer\n  n = Math.trunc(n) || 0;\n  // Allow negative indexing from the end\n  if (n < 0) n += this.length;\n  // Out-of-bounds access returns undefined\n  if (n < 0 || n >= this.length) return undefined;\n  // Otherwise, this is just normal property access\n  return this[n];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Git Logs for V8 API Changes\nDESCRIPTION: Command to retrieve a list of API changes between V8 versions 6.9 and 7.0 by examining the git log of the include/v8.h file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-70.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/6.9..branch-heads/7.0 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Implementing Unlock Method\nDESCRIPTION: Implements the unlock method that releases the mutex and notifies waiting threads using Atomics.compareExchange and Atomics.notify.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/atomics.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nunlock() {\n  const oldValue = Atomics.compareExchange(this.i32a, AsyncLock.INDEX,\n                      /* old value >>> */  AsyncLock.LOCKED,\n                      /* new value >>> */  AsyncLock.UNLOCKED);\n  if (oldValue != AsyncLock.LOCKED) {\n    throw new Error('Tried to unlock while not holding the mutex');\n  }\n  Atomics.notify(this.i32a, AsyncLock.INDEX, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with TryCatch in V8\nDESCRIPTION: Shows how to implement exception handling in V8 using TryCatch to catch and process JavaScript exceptions in C++.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nv8::TryCatch trycatch(isolate);\nv8::Local<v8::Value> v = script->Run();\nif (v.IsEmpty()) {\n  v8::Local<v8::Value> exception = trycatch.Exception();\n  v8::String::Utf8Value exception_str(exception);\n  printf(\"Exception: %s\\n\", *exception_str);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Spanish RelativeTimeFormat Example\nDESCRIPTION: Shows how to use RelativeTimeFormat with Spanish language settings to format relative times in Spanish.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-relativetimeformat.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst rtf = new Intl.RelativeTimeFormat('es');\n\nrtf.format(3.14, 'second');\n// → 'dentro de 3,14 segundos'\n\nrtf.format(-15, 'minute');\n// → 'hace 15 minutos'\n\nrtf.format(8, 'hour');\n// → 'dentro de 8 horas'\n\nrtf.format(-2, 'day');\n// → 'hace 2 días'\n\nrtf.format(3, 'week');\n// → 'dentro de 3 semanas'\n\nrtf.format(-5, 'month');\n// → 'hace 5 meses'\n\nrtf.format(2, 'quarter');\n// → 'dentro de 2 trimestres'\n\nrtf.format(-42, 'year');\n// → 'hace 42 años'\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Module Namespace Export in JavaScript\nDESCRIPTION: Example showing the equivalent two-step approach (import then export) that achieves the same result as the new module namespace export syntax.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as utils from './utils.mjs';\nexport { utils };\n```\n\n----------------------------------------\n\nTITLE: Async/Await Fetch Implementation in JavaScript\nDESCRIPTION: Modern async/await implementation of the same URL fetching functionality, demonstrating cleaner syntax without callback chains\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-55.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function logFetch(url) {\n  try {\n    const response = await fetch(url);\n    console.log(await response.text());\n  } catch (err) {\n    console.log('fetch failed', err);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules by Package Name in JavaScript\nDESCRIPTION: Illustrates importing JavaScript modules using package names, similar to Node.js/npm. This is not currently supported in browsers but is proposed through import maps.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport moment from 'moment';\nimport {pluck} from 'lodash-es';\n```\n\n----------------------------------------\n\nTITLE: WeakMap and WeakSet Usage Example\nDESCRIPTION: Demonstrates usage of WeakMap and WeakSet for weak referencing objects, allowing garbage collection even when objects are keys in these collections.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst wm = new WeakMap();\n{\n  const ref = {};\n  const metaData = 'foo';\n  wm.set(ref, metaData);\n  wm.get(ref);\n  // → metaData\n}\n\nconst ws = new WeakSet();\n{\n  const ref = {};\n  ws.add(ref);\n  ws.has(ref);\n  // → true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Intl.Locale WeekInfo Property in JavaScript\nDESCRIPTION: Shows how to access week-related information including first day of week, weekend days, and minimal days in first week for a locale.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-99.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\narabicEgyptLocale.weekInfo\n// {firstDay: 6, weekend: [5, 6], minimalDays: 1}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Peak Instances in JavaScript\nDESCRIPTION: This code snippet shows the creation of multiple instances of the Peak class. This is used to demonstrate how V8's slack tracking mechanism works as more objects are created.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst m1 = new Peak('Matterhorn', 4478);\nconst m2 = new Peak('Mont Blanc', 4810);\nconst m3 = new Peak('Zinalrothorn', 4221);\nconst m4 = new Peak('Wendelstein', 1838);\nconst m5 = new Peak('Zugspitze', 2962);\nconst m6 = new Peak('Watzmann', 2713);\nconst m7 = new Peak('Eiger', 3970);\n```\n\n----------------------------------------\n\nTITLE: Arguments Object Array Operations\nDESCRIPTION: Shows the use of array methods with the arguments object, which is array-like but not a true array.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst logArgs = function() {\n  Array.prototype.forEach.call(arguments, (value, index) => {\n    console.log(`${ index }: ${ value }`);\n  });\n};\nlogArgs('a', 'b', 'c');\n// This logs '0: a', then '1: b', and finally '2: c'.\n```\n\n----------------------------------------\n\nTITLE: Stream Processing with Async Iteration\nDESCRIPTION: Modern implementation using async iteration (for await...of) to process stream data chunks more elegantly with proper error handling.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\n\nhttp.createServer(async (req, res) => {\n  try {\n    let body = '';\n    req.setEncoding('utf8');\n    for await (const chunk of req) {\n      body += chunk;\n    }\n    res.write(body);\n    res.end();\n  } catch {\n    res.statusCode = 500;\n    res.end();\n  }\n}).listen(1337);\n```\n\n----------------------------------------\n\nTITLE: Using Intl.PluralRules for English Pluralization in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the Intl.PluralRules API to determine the correct plural form for numbers in English. It shows the API's behavior for various numeric inputs.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-pluralrules.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst pr = new Intl.PluralRules('en-US');\npr.select(0);   // 'other' (e.g. '0 cats')\npr.select(0.5); // 'other' (e.g. '0.5 cats')\npr.select(1);   // 'one'   (e.g. '1 cat')\npr.select(1.5); // 'other' (e.g. '0.5 cats')\npr.select(2);   // 'other' (e.g. '0.5 cats')\n```\n\n----------------------------------------\n\nTITLE: Adding a WebAssembly Proposal to the Spec Tests Update Script\nDESCRIPTION: This snippet shows where to add a new WebAssembly proposal repository name in the update script to include its tests.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-shipping-checklist.md#2025-04-10_snippet_2\n\nLANGUAGE: code reference\nCODE:\n```\ntools/wasm/update-wasm-spec-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Welsh Pluralization with Intl.PluralRules in JavaScript\nDESCRIPTION: This snippet demonstrates the use of Intl.PluralRules for the more complex Welsh language, which has six different pluralization forms. It shows how to create a formatter for Welsh cat plurals.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-pluralrules.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst suffixes = new Map([\n  ['zero',  'cathod'],\n  ['one',   'gath'],\n  // Note: the `two` form happens to be the same as the `'one'`\n  // form for this word specifically, but that is not true for\n  // all words in Welsh.\n  ['two',   'gath'],\n  ['few',   'cath'],\n  ['many',  'chath'],\n  ['other', 'cath'],\n]);\nconst pr = new Intl.PluralRules('cy');\nconst formatWelshCats = (n) => {\n  const rule = pr.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n} ${suffix}`;\n};\n\nformatWelshCats(0);   // '0 cathod'\nformatWelshCats(1);   // '1 gath'\nformatWelshCats(1.5); // '1.5 cath'\nformatWelshCats(2);   // '2 gath'\nformatWelshCats(3);   // '3 cath'\nformatWelshCats(6);   // '6 chath'\nformatWelshCats(42);  // '42 cath'\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import with Async/Await Syntax\nDESCRIPTION: This example shows how to use dynamic import() with async/await syntax for cleaner code. It imports the module dynamically and accesses both the default and named exports.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/dynamic-import.md#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  (async () => {\n    const moduleSpecifier = './utils.mjs';\n    const module = await import(moduleSpecifier)\n    module.default();\n    // → logs 'Hi from the default export!'\n    module.doStuff();\n    // → logs 'Doing stuff…'\n  })();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Worker in JavaScript\nDESCRIPTION: Code that registers a service worker from a main script file, which can be used to implement caching strategies.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching-for-devs.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// main.mjs\nnavigator.serviceWorker.register('/sw.js');\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Implementation for kX64Int32Add1 in Code Generator\nDESCRIPTION: Initial modification to code-generator-x64.cc to add an empty case for kX64Int32Add1 to make compilation succeed.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/backend/x64/code-generator-x64.cc b/src/compiler/backend/x64/code-generator-x64.cc\nindex 61c3a45a16..9c37ed7464 100644\n--- a/src/compiler/backend/x64/code-generator-x64.cc\n+++ b/src/compiler/backend/x64/code-generator-x64.cc\n@@ -731,6 +731,9 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(\n   InstructionCode opcode = instr->opcode();\n   ArchOpcode arch_opcode = ArchOpcodeField::decode(opcode);\n   switch (arch_opcode) {\n+    case kX64Int32Add1: {\n+      break;\n+    }\n     case kArchCallCodeObject: {\n       if (HasImmediateInput(instr, 0)) {\n         Handle<Code> code = i.InputCode(0);\n```\n\n----------------------------------------\n\nTITLE: Array Iteration in JavaScript\nDESCRIPTION: Example of using Array.prototype.forEach, which has been optimized in TurboFan for non-holey elements kinds in V8 v6.1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-61.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nArray.prototype.forEach\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scope in Static Initialization Blocks in JavaScript\nDESCRIPTION: This snippet shows how static initialization blocks have their own variable scope. It demonstrates the use of 'this' referring to the class constructor and 'super' for accessing the parent class's static properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-static-initializer-blocks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar y = 'outer y';\nclass A {\n  static fieldA = 'A.fieldA';\n}\nclass B extends A {\n  static fieldB = 'B.fieldB';\n  static {\n    let x = super.fieldA;\n    // → 'A.fieldA'\n    var y = this.fieldB;\n    // → 'B.fieldB'\n  }\n}\n// Since static blocks are their own `var` scope, `var`s do not hoist!\ny;\n// → 'outer y'\n```\n\n----------------------------------------\n\nTITLE: WebAssembly I64 Addition Function\nDESCRIPTION: Defines a WebAssembly function that adds two 64-bit integers and returns the result as a 64-bit integer, which can be used with JavaScript BigInts for lossless integer operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_7\n\nLANGUAGE: wasm\nCODE:\n```\n(module\n  (func $add (param $x i64) (param $y i64) (result i64)\n    local.get $x\n    local.get $y\n    i64.add)\n  (export \"add\" (func $add)))\n```\n\n----------------------------------------\n\nTITLE: Creating a Test for the New WebAssembly Opcode\nDESCRIPTION: This diff adds a test for the new I32Add1 instruction. It defines a helper macro WASM_I32_ADD1 and creates a test case that verifies adding 1 to the constant 10 results in 11. The test uses the WasmRunner test harness.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/test/cctest/wasm/test-run-wasm.cc b/test/cctest/wasm/test-run-wasm.cc\nindex 26df61ceb8..b1ee6edd71 100644\n--- a/test/cctest/wasm/test-run-wasm.cc\n+++ b/test/cctest/wasm/test-run-wasm.cc\n@@ -28,6 +28,15 @@ namespace test_run_wasm {\n #define RET(x) x, kExprReturn\n #define RET_I8(x) WASM_I32V_2(x), kExprReturn\n \n+#define WASM_I32_ADD1(x) x, kExprI32Add1\n+\n+WASM_EXEC_TEST(Int32Add1) {\n+  WasmRunner<int32_t> r(execution_tier);\n+  // 10 + 1\n+  BUILD(r, WASM_I32_ADD1(WASM_I32V_1(10)));\n+  CHECK_EQ(11, r.Call());\n+}\n+\n WASM_EXEC_TEST(Int32Const) {\n   WasmRunner<int32_t> r(execution_tier);\n   const int32_t kExpectedValue = 0x11223344;\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Startup Snapshots in V8 C++\nDESCRIPTION: This snippet demonstrates how to create custom startup snapshots using V8's C++ API. It shows the usage of v8::V8::CreateSnapshotDataBlob to create a snapshot from a JavaScript string, which can then be used to initialize contexts more quickly.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/custom-startup-snapshots.md#2025-04-10_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nv8::V8::CreateSnapshotDataBlob\n```\n\n----------------------------------------\n\nTITLE: Currency Sign Display in Intl.NumberFormat\nDESCRIPTION: Demonstrates currency formatting with accounting notation and sign display options.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'currency',\n  currency: 'USD',\n  signDisplay: 'exceptZero',\n  currencySign: 'accounting',\n});\nformatter.format(-12.34);\n// → '($12.34)'\nformatter.format(12.34);\n// → '+$12.34'\nformatter.format(0);\n// → '$0.00'\nformatter.format(-0);\n// → '($0.00)'\n```\n\n----------------------------------------\n\nTITLE: Implementing new.target for Constructor Checking in JavaScript\nDESCRIPTION: This snippet shows how to use new.target to determine if a function was called as a constructor with the 'new' keyword. It throws an error if the function is called without 'new', demonstrating a way to enforce constructor calls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-46.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myFunction() {\n  if (new.target === undefined) {\n    throw 'Try out calling it with new.';\n  }\n  console.log('Works!');\n}\n\n// Breaks:\nmyFunction();\n\n// Works:\nconst a = new myFunction();\n```\n\n----------------------------------------\n\nTITLE: Resource initialization with top-level await\nDESCRIPTION: Shows how to use top-level await for initializing resources like database connections before module execution continues.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/top-level-await.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst connection = await dbConnector();\n```\n\n----------------------------------------\n\nTITLE: Building Bytecode Expectations Generator\nDESCRIPTION: Building the generate-bytecode-expectations tool using gm to update bytecode expectations when they change, which prevents cctest failures.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngm x64.release generate-bytecode-expectations\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await Syntax in JavaScript\nDESCRIPTION: Modern implementation using async/await syntax for more readable asynchronous code that resembles synchronous code flow.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function handler() {\n  await validateParams();\n  const dbResults = await dbQuery();\n  const results = await serviceCall(dbResults);\n  console.log(results);\n  return results;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Code for Deoptimization and Jumping to Builtin in V8\nDESCRIPTION: Tests if the code object has been marked for deoptimization and jumps to the CompileLazyDeoptimizedCode builtin if the bit is set. This allows V8 to detect and handle deoptimized code during function invocation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Test if the bit is set, that is, if the code is marked for deoptimization.\n__ testl(Operand(rcx, offset),\n         Immediate(1 << Code::kMarkedForDeoptimizationBit));\n// Jump to builtin if it is.\n__ j(not_zero, /* handle to builtin code here */, RelocInfo::CODE_TARGET);\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.flatMap() Method in JavaScript\nDESCRIPTION: The flatMap() method creates a new iterator by applying a mapper function that returns iterators for each value, then flattening these iterators into a single iterator. This example extracts tags from blog posts.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Get list of tags of the blog posts and log them. Each post can have more than\n// one tag.\nfor (const tag of posts.values().flatMap((x) => x.querySelectorAll('.tag').values())) {\n    console.log(tag.textContent);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.reduce() Method in JavaScript\nDESCRIPTION: The reduce() method applies a reducer function to each value in the iterator, accumulating a single result. This example counts blog posts with the 'security' tag by reducing an iterator of tag names.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Get list of tags for all posts.\nconst tagLists = posts.values().flatMap((x) => x.querySelectorAll('.tag').values());\n\n// Get text context for each tag in the list.\nconst tags = tagLists.map((x) => x.textContent);\n\n// Counts posts with security tag.\nconst count = tags.reduce((sum , value) => sum + (value === 'security' ? 1 : 0), 0);\nconsole.log(count);\n```\n\n----------------------------------------\n\nTITLE: Using JSBI Library for BigInt Functionality in JavaScript\nDESCRIPTION: Demonstrates the usage of the JSBI library as a polyfill for BigInt functionality, providing a future-proof solution for environments without native BigInt support.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport JSBI from './jsbi.mjs';\n\nconst max = JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nconst two = JSBI.BigInt('2');\nconst result = JSBI.add(max, two);\nconsole.log(result.toString());\n// → '9007199254740993'\n```\n\n----------------------------------------\n\nTITLE: Using Watched Stops in Arm32 Assembly Debugging\nDESCRIPTION: This snippet shows how to use and manage watched stops in the V8 simulator for Arm32 assembly, including enabling, disabling, and getting information about stops.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_7\n\nLANGUAGE: assembly\nCODE:\n```\n0xb53559e8  e1a00000       mov r0, r0\n0xb53559ec  e1a00000       mov r0, r0\n0xb53559f0  e1a00000       mov r0, r0\n0xb53559f4  e1a00000       mov r0, r0\n0xb53559f8  e1a00000       mov r0, r0\n0xb53559fc  ef800001       stop 1 - 0x1\n0xb5355a00  e1a00000       mov r1, r1\n0xb5355a04  e1a00000       mov r1, r1\n0xb5355a08  e1a00000       mov r1, r1\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Catch Binding in JavaScript\nDESCRIPTION: Shows how the catch clause of try statements can be used without a parameter, which is useful when there's no need for the exception object in the error handling code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-66.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  doSomethingThatMightThrow();\n} catch { // → Look mom, no binding!\n  handleException();\n}\n```\n\n----------------------------------------\n\nTITLE: Using TypedArray for Binary Data Access\nDESCRIPTION: Example showing how to use Int16Array to access binary data in an ArrayBuffer for writing sequential squared numbers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/dataview.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = new ArrayBuffer(32);\nconst array = new Int16Array(buffer);\n\nfor (let i = 0; i < array.length; i++) {\n  array[i] = i * i;\n}\n\nconsole.log(array);\n// → [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Thenable for Async Sleep in JavaScript\nDESCRIPTION: This snippet shows how to implement a custom thenable object that can be used with await. It creates an asynchronous sleep function that measures the actual time spent sleeping.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass Sleep {\n  constructor(timeout) {\n    this.timeout = timeout;\n  }\n  then(resolve, reject) {\n    const startTime = Date.now();\n    setTimeout(() => resolve(Date.now() - startTime),\n               this.timeout);\n  }\n}\n\n(async () => {\n  const actualTime = await new Sleep(1000);\n  console.log(actualTime);\n})();\n```\n\n----------------------------------------\n\nTITLE: Triggering a V8 Flake Bisect Job Example\nDESCRIPTION: Example command for triggering a flake bisect job for a test that has been identified as flaky. This command is pre-filled and provided in the test logs of failing builds.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/flake-bisect.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbb add v8/try.triggered/v8_flako -p 'to_revision=\"deadbeef\"' -p 'test_name=\"MyTest\"' ...\n```\n\n----------------------------------------\n\nTITLE: Async Function with Await on Non-Promise Value in JavaScript\nDESCRIPTION: This snippet demonstrates that await can be used with any value, not just promises. It shows how non-promise values are automatically wrapped in a promise when used with await.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo() {\n  const v = await 42;\n  return v;\n}\n\nconst p = foo();\n// → Promise\n\np.then(console.log);\n// prints `42` eventually\n```\n\n----------------------------------------\n\nTITLE: BindingIdentifier Grammar Production\nDESCRIPTION: Grammar production for binding identifiers that seemingly allows 'await' as an identifier in all contexts, but will be restricted by static semantics.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_10\n\nLANGUAGE: grammar\nCODE:\n```\nBindingIdentifier[Yield, Await] :\n  Identifier\n  yield\n  await\n```\n\n----------------------------------------\n\nTITLE: Building V8 Development Configuration\nDESCRIPTION: Commands to generate and configure V8 build settings using helper script\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntools/dev/v8gen.py x64.release.sample\n```\n\n----------------------------------------\n\nTITLE: Array Creation with Holes\nDESCRIPTION: Demonstrates how creating arrays with holes affects the elements kind and performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = new Array(3);\narray[0] = 'a';\narray[1] = 'b';\narray[2] = 'c';\n```\n\n----------------------------------------\n\nTITLE: Transitioning Array to PACKED_ELEMENTS in JavaScript\nDESCRIPTION: Adds a string to an array of numbers, causing V8 to transition the elements kind to the most general PACKED_ELEMENTS.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3];\n// elements kind: PACKED_SMI_ELEMENTS\narray.push(4.56);\n// elements kind: PACKED_DOUBLE_ELEMENTS\narray.push('x');\n// elements kind: PACKED_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Async Stack Trace Issues in JavaScript\nDESCRIPTION: This code example shows how async function calls can disappear from traditional stack traces. It features two async functions where one calls the other, resulting in an error being thrown after an await operation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nasync function foo() {\n  await bar();\n  return 42;\n}\n\nasync function bar() {\n  await Promise.resolve();\n  throw new Error('BEEP BEEP');\n}\n\nfoo().catch(error => console.log(error.stack));\n```\n\n----------------------------------------\n\nTITLE: Complex Shape Transition Example\nDESCRIPTION: Shows how V8 handles shape transitions for multiple properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst o = {\n  x: 1,\n  y: 2,\n  z: 3,\n};\n\no.y = 0.1;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Library Implementation for i64 Handling\nDESCRIPTION: JavaScript code showing how to receive and process a 64-bit integer from WebAssembly using the library interface.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/wasm-bigint.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmergeInto(LibraryManager.library, {\n  send_i64_to_js: function(value) {\n    console.log(\"JS received: 0x\" + value.toString(16));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.find() Method in JavaScript\nDESCRIPTION: The find() method returns the first value in the iterator that satisfies the provided testing function. This example finds and logs the first blog post containing 'V8' in its title.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Log the text content (title) of the recent blog post includes `V8` keyword.\nconsole.log(posts.values().find((x) => x.textContent.includes('V8')).textContent);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Function Calls with TurboFan in JavaScript\nDESCRIPTION: Example of forcing V8 to optimize a function using TurboFan compiler through V8 intrinsics. The code demonstrates preparation and optimization of a simple add42 function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add42(x) { return x + 42; }\nfunction callAdd42() { add42(3); }\n%PrepareFunctionForOptimization(callAdd42);\ncallAdd42();\n%OptimizeFunctionOnNextCall(callAdd42);\ncallAdd42();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating private brand checks in JavaScript\nDESCRIPTION: This snippet shows how to use the new private brand check syntax with the 'in' operator to check for the presence of private fields in an object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-91.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  static test(obj) {\n    console.log(#foo in obj);\n  }\n\n  #foo = 0;\n}\n\nA.test(new A()); // true\nA.test({}); // false\n```\n\n----------------------------------------\n\nTITLE: Incrementing Beyond Safe Integer Limits\nDESCRIPTION: Demonstrates precision loss when incrementing numbers beyond the safe integer limit.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmax + 1;\n// → 9_007_199_254_740_992 ✅\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmax + 2;\n// → 9_007_199_254_740_992 ❌\n```\n\n----------------------------------------\n\nTITLE: Optimized await implementation without throwaway promise in JavaScript\nDESCRIPTION: This snippet demonstrates the further optimized await implementation that eliminates the need for a throwaway promise in most cases, reducing overhead even more.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet promiseResolved = promiseResolve(v);\nlet onFulfilled = () => {\n  // resume\n};\nlet onRejected = reason => {\n  // resume\n};\nperformPromiseThen(promiseResolved, onFulfilled, onRejected);\n```\n\n----------------------------------------\n\nTITLE: Elements Kind Transition Example with -0\nDESCRIPTION: Demonstrates how adding -0 to an array of integers causes a transition from PACKED_SMI_ELEMENTS to PACKED_DOUBLE_ELEMENTS.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [3, 2, 1, +0];\n// PACKED_SMI_ELEMENTS\narray.push(-0);\n// PACKED_DOUBLE_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe but Verbose Property Access in JavaScript\nDESCRIPTION: This snippet demonstrates a safer but more verbose way of accessing nested properties, checking for the existence of each intermediate value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Less error-prone, but harder to read.\nlet nameLength;\nif (db && db.user && db.user.name)\n  nameLength = db.user.name.length;\n```\n\n----------------------------------------\n\nTITLE: Building the Website with Watch Mode\nDESCRIPTION: Command to build the website and automatically watch for file changes to rebuild as needed.\nSOURCE: https://github.com/v8/v8.dev/blob/main/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Implementing WebAssembly Streaming Compilation in JavaScript\nDESCRIPTION: Example showing how to use the WebAssembly streaming API to compile and instantiate a .wasm module. Uses async/await and the instantiateStreaming method which is required for code caching to work.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-code-caching.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const fetchPromise = fetch('fibonacci.wasm');\n  const { instance } = await WebAssembly.instantiateStreaming(fetchPromise);\n  const result = instance.exports.fibonacci(42);\n  console.log(result);\n})();\n```\n\n----------------------------------------\n\nTITLE: Complex Private Brand Initialization Bytecode\nDESCRIPTION: Bytecode for handling private brand initialization with nested super() calls\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n// Invoke the super constructor to construct the instance\n// and store it into r3.\n...\n\n// Load the private brand symbol from the class context at\n// depth 1 from the current context and store it into r4\nLdaImmutableContextSlot <context>, [3], [1]\nStar4\n\n// Load the depth 1 as an Smi into r6\nLdaSmi [1]\nStar6\n\n// Load the current context into r5\nMov <context>, r5\n\n// Use the %AddPrivateBrand() to locate the class context at\n// depth 1 from the current context and store it in the instance\n// with the private brand symbol as key\nCallRuntime [AddPrivateBrand], r3-r6\n```\n\n----------------------------------------\n\nTITLE: Creating Promise-returning WebAssembly Function\nDESCRIPTION: Function signature for converting a WebAssembly function into one that returns a Promise. The input must be a WebAssembly function despite being typed as a JavaScript Function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi-newapi.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFunction Webassembly.promising(Function wsFun)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript object property storage in V8 (JavaScript)\nDESCRIPTION: A code example showing how JavaScript objects store properties either in elements backing store (for array indices) or properties backing store (for string or symbol keys).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/hash-code.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = {};\nx[1] = 'bar';      // ← stored in elements\nx['foo'] = 'bar';  // ← stored in properties\n```\n\n----------------------------------------\n\nTITLE: Recursive Fibonacci Implementation in WebAssembly\nDESCRIPTION: WebAssembly implementation of Fibonacci function using tail calls with return_call instruction, demonstrating proper tail call optimization in WebAssembly.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-tail-call.md#2025-04-10_snippet_2\n\nLANGUAGE: wasm\nCODE:\n```\n(func $fib_rec (param $n i32) (param $a i32) (param $b i32) (result i32)\n  (if (i32.eqz (local.get $n))\n    (then (return (local.get $a)))\n    (else\n      (return_call $fib_rec\n        (i32.sub (local.get $n) (i32.const 1))\n        (local.get $b)\n        (i32.add (local.get $a) (local.get $b))\n      )\n    )\n  )\n)\n\n(func $fib (param $n i32) (result i32)\n  (call $fib_rec (local.get $n) (i32.const 0) (i32.const 1))\n)\n```\n\n----------------------------------------\n\nTITLE: Using Math.is42 Function in JavaScript\nDESCRIPTION: Demonstrates usage of the newly created Math.is42 function in the V8 JavaScript shell (d8), showing various input types and their results.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nd8> Math.is42(42);\ntrue\nd8> Math.is42('42.0');\ntrue\nd8> Math.is42(true);\nfalse\nd8> Math.is42({ valueOf: () => 42 });\ntrue\n```\n\n----------------------------------------\n\nTITLE: JavaScript Object Allocation with Escape Analysis Example\nDESCRIPTION: Example showing how escape analysis can optimize object allocation when the object doesn't escape the function scope. The object properties are effectively treated as local variables.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/disabling-escape-analysis.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(a, b) {\n  const object = { a, b };\n  return object.a + object.b;\n  // Note: `object` does not escape.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.toArray() Method in JavaScript\nDESCRIPTION: The toArray() method converts an iterator to an array. This example creates an array from the 10 most recent blog posts.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Create an array from the list of 10 recent blog posts.\nconst arr = posts.values().take(10).toArray();\n```\n\n----------------------------------------\n\nTITLE: Generating V8 build files based on a specific bot configuration\nDESCRIPTION: Uses v8gen to generate build files matching a particular bot configuration from the client.v8 waterfall, creating them in the specified output folder.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nv8gen -b 'V8 Linux64 - debug builder' -m client.v8 foo\n```\n\n----------------------------------------\n\nTITLE: Displaying Nested Eval Calls in V8 Stack Trace\nDESCRIPTION: This snippet demonstrates how nested eval calls are represented in a V8 stack trace. It shows multiple levels of 'eval at' statements with their respective positions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\neval at Foo.a (eval at Bar.z (myscript.js:10:3))\n```\n\n----------------------------------------\n\nTITLE: Implementing Symbol.isConcatSpreadable in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the @@isConcatSpreadable well-known symbol to create an array subclass that automatically spreads when used with Array.prototype.concat.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-48.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function() {\n  'use strict';\n  class AutomaticallySpreadingArray extends Array {\n    get [Symbol.isConcatSpreadable]() {\n      return true;\n    }\n  }\n  const first = [1];\n  const second = new AutomaticallySpreadingArray();\n  second[0] = 2;\n  second[1] = 3;\n  const all = first.concat(second);\n  // Outputs [1, 2, 3]\n  console.log(all);\n}());\n```\n\n----------------------------------------\n\nTITLE: Converting Callbacks to Promise Chains in JavaScript\nDESCRIPTION: Refactored version of the callback code using Promise chaining for better readability and maintainability.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handler() {\n  return validateParams()\n    .then(dbQuery)\n    .then(serviceCall)\n    .then(result => {\n      console.log(result);\n      return result;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Logical Assignment Operations Basic Examples\nDESCRIPTION: Demonstrates the basic syntax and behavior of logical AND (&&=), OR (||=), and nullish coalescing (??=) assignment operators, showing their equivalence to longer form expressions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/logical-assignment.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// As an additional review, here is the semantics of logical and:\nx && y\n// → y when x is truthy\n// → x when x is not truthy\n\n// First, logical and assignment. The two lines following this\n// comment block are equivalent.\n// Note that like existing compound assignment operators, more complex\n// left-hand sides are only evaluated once.\nx &&= y;\nx && (x = y);\n\n// The semantics of logical or:\nx || y\n// → x when x is truthy\n// → y when x is not truthy\n\n// Similarly, logical or assignment:\nx ||= y;\nx || (x = y);\n\n// The semantics of nullish coalescing operator:\nx ?? y\n// → y when x is nullish (null or undefined)\n// → x when x is not nullish\n\n// Finally, nullish coalescing assignment:\nx ??= y;\nx ?? (x = y);\n```\n\n----------------------------------------\n\nTITLE: Auto-vectorized Array Multiplication in Rust\nDESCRIPTION: This Rust function demonstrates array multiplication that can be auto-vectorized by the compiler when SIMD is enabled. It iterates over two input arrays, multiplies corresponding elements, and stores the result in an output array.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\npub fn multiply_arrays(out: &mut [i32], in_a: &[i32], in_b: &[i32]) {\n  in_a.iter()\n    .zip(in_b)\n    .zip(out)\n    .for_each(|((a, b), dst)| {\n        *dst = a * b;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating trimStart and trimEnd in JavaScript\nDESCRIPTION: This snippet shows how to use the new trimStart() and trimEnd() methods to remove whitespace from the beginning and end of a string respectively. It also compares these with the existing trim() method.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-trimming.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = '  hello world  ';\nstring.trimStart();\n// → 'hello world  '\nstring.trimEnd();\n// → '  hello world'\nstring.trim(); // ES5\n// → 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Converting Maps to Objects in JavaScript\nDESCRIPTION: Demonstrates how to convert Map instances back to plain objects using Object.fromEntries.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-fromentries.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Convert the map back into an object:\nconst objectCopy = Object.fromEntries(map);\n// → { language: 'JavaScript', coolness: 9001 }\n```\n\n----------------------------------------\n\nTITLE: Proxy Function Apply Trap Example in JavaScript\nDESCRIPTION: Code sample demonstrating how to create a proxy with an 'apply' trap that is triggered when the proxy is used as a function. This is used to illustrate the execution flow between JS and C++ runtimes when calling proxies.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/optimizing-proxies.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(…) { … }\nconst g = new Proxy({ … }, {\n  apply: foo,\n});\ng(1, 2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Coverage with JavaScript\nDESCRIPTION: A simple JavaScript example showing a function definition and execution, used to illustrate how code coverage tracks function invocations and source ranges.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/javascript-code-coverage.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f() {\n  console.log('Hello World');\n}\n\nf();\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Loop With SIMD Optimization\nDESCRIPTION: WebAssembly text format showing how a loop is compiled with SIMD instructions when using the -msimd128 flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_5\n\nLANGUAGE: wasm\nCODE:\n```\n(loop\n  (v128.store align=4\n    … get address in `out` …\n    (i32x4.mul\n       (v128.load align=4 … get address in `in_a` …)\n       (v128.load align=4 … get address in `in_b` …)\n    …\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Checking V8 API Changes Using Git\nDESCRIPTION: Git command to view API changes between V8 versions 6.6 and 6.7 in the include/v8.h file\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-67.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/6.6..branch-heads/6.7 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object Spread and Default Parameters in Redux (ES2015+)\nDESCRIPTION: This snippet shows a Redux reducer using ES2015+ features like object spread and default parameters. It demonstrates the concise syntax enabled by these features.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction todoApp(state = initialState, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return { ...state, visibilityFilter: action.filter };\n    default:\n      return state;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strong References in JavaScript\nDESCRIPTION: Example showing how strong references prevent garbage collection of objects in JavaScript.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-84.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalRef = {\n  callback() { console.log('foo'); }\n};\n```\n\n----------------------------------------\n\nTITLE: Different Types of Array Element Storage in V8\nDESCRIPTION: This example demonstrates four different array element storage types: Smi Packed, Smi Holey, Double Packed, and Double Holey. V8 optimizes storage based on the content type and whether there are holes in the array.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-properties.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst a1 = [1,   2, 3];  // Smi Packed\nconst a2 = [1,    , 3];  // Smi Holey, a2[1] reads from the prototype\nconst b1 = [1.1, 2, 3];  // Double Packed\nconst b2 = [1.1,  , 3];  // Double Holey, b2[1] reads from the prototype\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RegExp Performance Impact with Subclassing\nDESCRIPTION: Illustrates how subclassing RegExp forces the execution to take a slower path due to the need for more generic handling. This example shows that even simple subclassed RegExp instances cannot utilize the fast path optimizations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/speeding-up-regular-expressions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass SlowRegExp extends RegExp {}\nnew SlowRegExp(\".\", \"g\").exec('');  // Slow path.\n```\n\n----------------------------------------\n\nTITLE: Implementing Symbol.toPrimitive in JavaScript\nDESCRIPTION: This snippet shows how to use the @@toPrimitive well-known symbol to define custom behavior for implicit conversions to primitive values in a class.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-48.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function(){\n  'use strict';\n  class V8 {\n    [Symbol.toPrimitive](hint) {\n      if (hint === 'string') {\n        console.log('string');\n        return 'V8';\n      } else if (hint === 'number') {\n        console.log('number');\n        return 8;\n      } else {\n        console.log('default:' + hint);\n        return 8;\n      }\n    }\n  }\n\n  const engine = new V8();\n  console.log(Number(engine));\n  console.log(String(engine));\n}());\n```\n\n----------------------------------------\n\nTITLE: V8 FunctionTemplate Inheritance\nDESCRIPTION: Shows the syntax for implementing inheritance between function templates in V8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Inherit(v8::Local<v8::FunctionTemplate> parent);\n```\n\n----------------------------------------\n\nTITLE: Implementing Callback-based Async Pattern in JavaScript\nDESCRIPTION: Example of traditional callback-based asynchronous code pattern (\"callback hell\") showing nested callbacks for validation, database query and service calls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction handler(done) {\n  validateParams((error) => {\n    if (error) return done(error);\n    dbQuery((error, dbResults) => {\n      if (error) return done(error);\n      serviceCall(dbResults, (error, serviceResults) => {\n        console.log(result);\n        done(error, serviceResults);\n      });\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Producing Code Cache Data in V8 C++ API\nDESCRIPTION: This snippet demonstrates how to produce cache data when compiling a script in V8. It uses the ScriptCompiler::kProduceCodeCache option and retrieves the cached data via GetCachedData().\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching.md#2025-04-10_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nv8::ScriptCompiler::kProduceCodeCache\n```\n\nLANGUAGE: C++\nCODE:\n```\nv8::ScriptCompiler::Source::GetCachedData\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.filter() Method in JavaScript\nDESCRIPTION: The filter() method creates a new iterator containing only the values from the original iterator for which the filter function returns a truthy value. This example filters blog posts that contain 'V8' in their titles.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Filter blog posts that includes `V8` in their text content (titles) and log them.\nfor (const post of posts.values().filter((x) => x.textContent.includes('V8'))) {\n  console.log(post);\n}\n```\n\n----------------------------------------\n\nTITLE: Class Field Access Example in JavaScript\nDESCRIPTION: Example showing a class with private and public field initialization\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  #a = 0;\n  b = this.#a;\n}\n```\n\n----------------------------------------\n\nTITLE: Hello World Program in C++ for WebAssembly\nDESCRIPTION: A simple C++ program that prints \"hello, world!\" to demonstrate compiling to WebAssembly for various Wasm runtimes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// hello.cpp\n#include <stdio.h>\n\nint main() {\n  printf(\"hello, world!\\n\");\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting WebAssembly SIMD Support in JavaScript\nDESCRIPTION: Code snippet showing how to use the wasm-feature-detect library to check for SIMD support at runtime and conditionally load the appropriate module version.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { simd } from 'wasm-feature-detect';\n\n(async () => {\n  const hasSIMD = await simd();\n  const module = await (\n    hasSIMD\n      ? import('./module-with-simd.js')\n      : import('./module-without-simd.js')\n  );\n  // …now use `module` as you normally would\n})();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguity in Division Operator vs RegExp Literal in JavaScript\nDESCRIPTION: This example shows two code snippets that illustrate how the forward slash character (/) can be interpreted differently based on context - as a division operator in the first case and as the beginning of a RegExp literal in the second case.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = 10 / 5;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst r = /foo/;\n```\n\n----------------------------------------\n\nTITLE: V8 Bytecode Instructions\nDESCRIPTION: Generated bytecode instructions for the modified add42 function showing parameter loading and manipulation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n25 02             Ldar a0       ;; Load the first argument to the accumulator\n40 2a 00          AddSmi [42]   ;; Add 42 to it\n26 02             Star a0       ;; Store accumulator in the first argument slot\nab                Return        ;; Return the accumulator\n```\n\n----------------------------------------\n\nTITLE: Java Type Casting Optimization Example\nDESCRIPTION: Demonstrates how WasmGC optimizes type checking and casting operations in Java code. After a successful instanceof check, the subsequent downcast can be eliminated by the optimizer.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-gc-porting.md#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nif (ref instanceof Type) {\n  foo((Type) ref); // This downcast can be eliminated.\n}\n```\n\n----------------------------------------\n\nTITLE: GetOwnProperty Internal Method Without Exclamation Mark\nDESCRIPTION: The expanded algorithm for [[GetOwnProperty]] internal method with the exclamation mark shorthand expanded to show explicit completion handling.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_5\n\nLANGUAGE: ecmascript\nCODE:\n```\n**`O.[[GetOwnProperty]]`**\n\n1. Let `temp` be `OrdinaryGetOwnProperty(O, P)`.\n2. Assert: `temp` is not an abrupt completion.\n3. Let `temp` be `temp.[[Value]]`.\n4. Return `NormalCompletion(temp)`.\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.from() Static Method in JavaScript\nDESCRIPTION: The from() static method creates an iterator from an object. If the object is already an iterator, it's returned directly; if it's iterable, its Symbol.iterator method is called; otherwise, a new Iterator object is created to wrap the object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// First create an iterator from the posts. Then, log the text content (title) of \n// the recent blog post that includes the `V8` keyword.\nconsole.log(Iterator.from(posts).find((x) => x.textContent.includes('V8')).textContent);\n```\n\n----------------------------------------\n\nTITLE: Implementing Weak References with WeakRef\nDESCRIPTION: Example demonstrating the usage of WeakRef for creating weak references to objects that allow garbage collection.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-84.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst globalWeakRef = new WeakRef({\n  callback() { console.log('foo'); }\n});\n\n(async function() {\n  globalWeakRef.deref().callback();\n  await new Promise((resolve, reject) => {\n    setTimeout(() => { resolve('foo'); }, 42);\n  });\n  globalWeakRef.deref()?.callback();\n})();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Prototype Chain Extension\nDESCRIPTION: Shows how to add properties to an object's prototype to share them across all instances.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// First, create the \"bicycle\" object\nfunction bicycle() {}\n// Assign the wheels property to the object's prototype\nbicycle.prototype.wheels = 2;\n```\n\n----------------------------------------\n\nTITLE: Using Object.entries and Object.fromEntries in JavaScript\nDESCRIPTION: Demonstrates how to convert between objects and array entries using the Object.entries API and the new Object.fromEntries API in V8 v7.3. This allows for easy conversion between object representation and entry arrays.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-73.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 42, y: 50 };\nconst entries = Object.entries(object);\n// → [['x', 42], ['y', 50]]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = Object.fromEntries(entries);\n// → { x: 42, y: 50 }\n```\n\n----------------------------------------\n\nTITLE: Using Intl.Locale TextInfo Property in JavaScript\nDESCRIPTION: Demonstrates the usage of the textInfo property which provides text directionality information for different locales.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-99.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\narabicEgyptLocale.textInfo\n// { direction: 'rtl' }\njapaneseLocale.textInfo\n// { direction: 'ltr' }\nchineseTaiwanLocale.textInfo\n// { direction: 'ltr' }\n```\n\n----------------------------------------\n\nTITLE: Traditional Object Property Check in JavaScript\nDESCRIPTION: This snippet demonstrates the common practice of using Object.prototype.hasOwnProperty to check if an object has a specific property. It involves creating a reference to the hasOwnProperty method and using Function.prototype.call to invoke it.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-has-own.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nif (hasOwnProperty.call(object, 'foo')) {\n  // `object` has property `foo`.\n}\n```\n\n----------------------------------------\n\nTITLE: Int32Max Pure Node Example\nDESCRIPTION: Example showing how Int32Max pure node would need to be lowered to conditional control flow, demonstrating the challenge of introducing control flow in Sea of Nodes architecture.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_6\n\nLANGUAGE: pseudocode\nCODE:\n```\nif (x > y) { x } else { y }\n```\n\n----------------------------------------\n\nTITLE: Creating Garbage-Collected C++ Objects with Oilpan\nDESCRIPTION: This snippet demonstrates how to define and create C++ objects managed by the Oilpan garbage collector. The LinkedNode class shows how to make objects garbage-collectable by inheriting from GarbageCollected<T> and implementing a Trace method that helps the collector identify outgoing references.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-cpp-gc.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass LinkedNode final : public GarbageCollected<LinkedNode> {\n public:\n  LinkedNode(LinkedNode* next, int value) : next_(next), value_(value) {}\n  void Trace(Visitor* visitor) const {\n    visitor->Trace(next_);\n  }\n private:\n  Member<LinkedNode> next_;\n  int value_;\n};\n\nLinkedNode* CreateNodes() {\n  LinkedNode* first_node = MakeGarbageCollected<LinkedNode>(nullptr, 1);\n  LinkedNode* second_node = MakeGarbageCollected<LinkedNode>(first_node, 2);\n  return second_node;\n}\n```\n\n----------------------------------------\n\nTITLE: Transpiled ES5 Equivalent of Redux Reducer\nDESCRIPTION: This snippet shows the ES5 code generated by Babel when transpiling the previous ES2015+ Redux reducer. It demonstrates the increased complexity and code size resulting from transpilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nvar _extends = Object.assign || function(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\nfunction todoApp() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments[1];\n\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return _extends({}, state, { visibilityFilter: action.filter });\n    default:\n      return state;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running WebAssembly Spec Test Update Script in V8\nDESCRIPTION: This command updates WebAssembly specification tests in V8 by running a script that fetches and integrates tests from proposal repositories.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-shipping-checklist.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntools/wasm/update-wasm-spec-tests.sh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Vulnerable FizzBuzz Implementation in C++\nDESCRIPTION: This C++ code snippet shows a simplified implementation of a JSArray::fizzbuzz() function that contains a subtle vulnerability. The issue is that the ToNumber conversion can have side effects by invoking user-defined JavaScript callbacks, potentially causing an out-of-bounds write if the array is resized during execution.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sandbox.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n 1. for (int index = 0; index < length_; index++) {\n 2.     JSValue js_value = buffer_[index];\n 3.     int value = ToNumber(js_value).int_value();\n 4.     if (value % 15 == 0)\n 5.         buffer_[index] = JSString(\"fizzbuzz\");\n 6.     else if (value % 5 == 0)\n 7.         buffer_[index] = JSString(\"buzz\");\n 8.     else if (value % 3 == 0)\n 9.         buffer_[index] = JSString(\"fizz\");\n10. }\n```\n\n----------------------------------------\n\nTITLE: Matching Flag Emoji Using Properties of Strings with v Flag\nDESCRIPTION: Shows how to match all commonly-used flag emoji by combining different Unicode properties in a character class with the v flag, supporting both two-letter ISO code sequences and special-cased tag sequences.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst reFlag = /[\\p{RGI_Emoji_Flag_Sequence}\\p{RGI_Emoji_Tag_Sequence}]/v;\n// A flag sequence, consisting of 2 code points (flag of Belgium):\nreFlag.test('🇧🇪'); // → true\n// A tag sequence, consisting of 7 code points (flag of England):\nreFlag.test('🏴󠁧󠁢󠁥󠁮󠁧󠁿'); // → true\n// A flag sequence, consisting of 2 code points (flag of Switzerland):\nreFlag.test('🇨🇭'); // → true\n// A tag sequence, consisting of 7 code points (flag of Wales):\nreFlag.test('🏴󠁧󠁢󠁷󠁬󠁳󠁿'); // → true\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Global Variable Accessors in V8\nDESCRIPTION: Shows how to create accessor functions for static global variables in V8, including getter and setter implementations and template configuration.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvoid XGetter(v8::Local<v8::String> property,\n              const v8::PropertyCallbackInfo<Value>& info) {\n  info.GetReturnValue().Set(x);\n}\n\nvoid XSetter(v8::Local<v8::String> property, v8::Local<v8::Value> value,\n             const v8::PropertyCallbackInfo<void>& info) {\n  x = value->Int32Value();\n}\n\n// YGetter/YSetter are so similar they are omitted for brevity\n\nv8::Local<v8::ObjectTemplate> global_templ = v8::ObjectTemplate::New(isolate);\nglobal_templ->SetAccessor(v8::String::NewFromUtf8(isolate, \"x\"),\n                          XGetter, XSetter);\nglobal_templ->SetAccessor(v8::String::NewFromUtf8(isolate, \"y\"),\n                          YGetter, YSetter);\nv8::Persistent<v8::Context> context =\n    v8::Context::New(isolate, nullptr, global_templ);\n```\n\n----------------------------------------\n\nTITLE: Object.preventExtensions Example\nDESCRIPTION: Demonstrates V8's handling of non-extensible objects.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 1 };\nObject.preventExtensions(object);\nobject.y = 2;\n// TypeError: Cannot add property y;\n//            object is not extensible\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Intl.Locale Properties in JavaScript\nDESCRIPTION: Shows how to use the new Intl.Locale properties including calendars, collations, hourCycles, numberingSystems, and timeZones for Arabic-Egypt locale.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-99.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst arabicEgyptLocale = new Intl.Locale('ar-EG')\n// ar-EG\narabicEgyptLocale.calendars\n// ['gregory', 'coptic', 'islamic', 'islamic-civil', 'islamic-tbla']\narabicEgyptLocale.collations\n// ['compat', 'emoji', 'eor']\narabicEgyptLocale.hourCycles\n// ['h12']\narabicEgyptLocale.numberingSystems\n// ['arab']\narabicEgyptLocale.timeZones\n// ['Africa/Cairo']\n```\n\n----------------------------------------\n\nTITLE: Using Intl.Locale API\nDESCRIPTION: Example showing how to use the Intl.Locale API to work with locale identifiers and extract locale-specific preferences.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-74.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst locale = new Intl.Locale('es-419-u-hc-h12', {\n  calendar: 'gregory'\n});\nlocale.language;\n// → 'es'\nlocale.calendar;\n// → 'gregory'\nlocale.hourCycle;\n// → 'h12'\nlocale.region;\n// → '419'\nlocale.toString();\n// → 'es-419-u-ca-gregory-hc-h12'\n```\n\n----------------------------------------\n\nTITLE: Fetching V8 Source Code\nDESCRIPTION: Commands to create directory and fetch V8 source code including all branches and dependencies.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/v8\ncd ~/v8\nfetch v8\ncd v8\n```\n\n----------------------------------------\n\nTITLE: Importing Module Namespace\nDESCRIPTION: Shows the existing syntax for importing all exports from a module into a namespace object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/module-namespace-exports.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as utils from './utils.mjs';\n```\n\n----------------------------------------\n\nTITLE: Template Literal Revision Example with LaTeX Processor\nDESCRIPTION: Demonstrates the loosened restrictions on escape sequences in template literals, enabling new use cases such as a LaTeX processor.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-62.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst latex = (strings) => {\n  // …\n};\n\nconst document = latex`\n\\newcommand{\\fun}{\\textbf{Fun!}}\n\\newcommand{\\unicode}{\\textbf{Unicode!}}\n\\newcommand{\\xerxes}{\\textbf{King!}}\nBreve over the h goes \\u{h}ere // Illegal token!\n`;\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.some() Method in JavaScript\nDESCRIPTION: The some() method tests whether at least one element in the iterator passes a test implemented by the provided function. This example checks if any blog post title contains the word 'Iterators'.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Find out if text content (title) of any blog post includes the `Iterators`\n// keyword.\nposts.values().some((x) => x.textContent.includes('Iterators'));\n```\n\n----------------------------------------\n\nTITLE: Using Git Checkout Command for V8 v5.7\nDESCRIPTION: Command to check out V8 version 5.7 branch for development and testing purposes. Requires an active V8 checkout.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-57.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 5.7 -t branch-heads/5.7\n```\n\n----------------------------------------\n\nTITLE: Execution Differences Between Modules and Classic Scripts\nDESCRIPTION: Illustrates how module scripts are evaluated only once regardless of how many times they are included, while classic scripts are evaluated each time they appear in the DOM. This is an important distinction when using modules.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"classic.js\"></script>\n<script src=\"classic.js\"></script>\n<!-- classic.js executes multiple times. -->\n\n<script type=\"module\" src=\"module.mjs\"></script>\n<script type=\"module\" src=\"module.mjs\"></script>\n<script type=\"module\">import './module.mjs';</script>\n<!-- module.mjs executes only once. -->\n```\n\n----------------------------------------\n\nTITLE: RelativeTimeFormat Parts API Usage\nDESCRIPTION: Demonstrates the formatToParts method for accessing individual components of the formatted output.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-relativetimeformat.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n\nrtf.format(-1, 'day');\n// → 'yesterday'\n\nrtf.formatToParts(-1, 'day');\n// → [{ type: 'literal', value: 'yesterday' }]\n\nrtf.format(3, 'week');\n// → 'in 3 weeks'\n\nrtf.formatToParts(3, 'week');\n// → [{ type: 'literal', value: 'in ' },\n//    { type: 'integer', value: '3', unit: 'week' },\n//    { type: 'literal', value: ' weeks' }]\n```\n\n----------------------------------------\n\nTITLE: Initializing ICU for V8 Embedding in C++\nDESCRIPTION: This code snippet initializes ICU before calling into V8 when embedding V8 in an application. It's necessary if the application itself doesn't use ICU but V8 is compiled with i18n support.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/i18n.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nv8::V8::InitializeICU();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import with Assertions\nDESCRIPTION: Example of using import assertions with dynamic import() syntax, showing how to access the JSON content through the default export.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-assertions.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst jsonModule = await import('./foo.json', {\n  assert: { type: 'json' }\n});\nconsole.log(jsonModule.default.answer); // 42\n```\n\n----------------------------------------\n\nTITLE: String Array Concatenation Function in JavaScript\nDESCRIPTION: Example function that concatenates elements of a string array, used to demonstrate the complexity difference between Sea of Nodes and CFG representations\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction concat(arr) {\n  let res = \"\";\n  for (let i = 0; i < arr.length; i++) {\n    res += arr[i];\n  }\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Torque Implementation of DataView getUint32\nDESCRIPTION: V8 Torque language implementation of the DataView getUint32 method, showing the low-level memory access and endianness handling.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/dataview.md#2025-04-10_snippet_4\n\nLANGUAGE: torque\nCODE:\n```\nmacro LoadDataViewUint32(buffer: JSArrayBuffer, offset: intptr,\n                    requested_little_endian: bool,\n                    signed: constexpr bool): Number {\n  let data_pointer: RawPtr = buffer.backing_store;\n\n  let b0: uint32 = LoadUint8(data_pointer, offset);\n  let b1: uint32 = LoadUint8(data_pointer, offset + 1);\n  let b2: uint32 = LoadUint8(data_pointer, offset + 2);\n  let b3: uint32 = LoadUint8(data_pointer, offset + 3);\n  let result: uint32;\n\n  if (requested_little_endian) {\n    result = (b3 << 24) | (b2 << 16) | (b1 << 8) | b0;\n  } else {\n    result = (b0 << 24) | (b1 << 16) | (b2 << 8) | b3;\n  }\n\n  return convert<Number>(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a test case for the GetStringLength builtin in V8\nDESCRIPTION: This C++ code snippet demonstrates how to write a test case for the GetStringLength builtin in V8's test-run-stubs.cc file. It tests both the case where the input is a string and where it's not, showcasing how CSA builtins can be tested using V8's testing framework.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/csa.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(GetStringLength) {\n  HandleAndZoneScope scope;\n  Isolate* isolate = scope.main_isolate();\n  Heap* heap = isolate->heap();\n  Zone* zone = scope.main_zone();\n\n  // Test the case where input is a string\n  StubTester tester(isolate, zone, Builtins::kGetStringLength);\n  Handle<String> input_string(\n      isolate->factory()->\n        NewStringFromAsciiChecked(\"Oktoberfest\"));\n  Handle<Object> result1 = tester.Call(input_string);\n  CHECK_EQ(11, Handle<Smi>::cast(result1)->value());\n\n  // Test the case where input is not a string (e.g. undefined)\n  Handle<Object> result2 =\n      tester.Call(factory->undefined_value());\n  CHECK(result2->IsUndefined(isolate));\n}\n```\n\n----------------------------------------\n\nTITLE: Exploiting the FizzBuzz Memory Corruption Vulnerability with JavaScript\nDESCRIPTION: This JavaScript code demonstrates how the vulnerable C++ implementation could be exploited. It creates an array with a specially crafted object that, when converted to a number, shrinks the array's length, causing subsequent operations to write outside the array's bounds.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sandbox.md#2025-04-10_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nlet array = new Array(100);\nlet evil = { [Symbol.toPrimitive]() { array.length = 1; return 15; } };\narray.push(evil);\n// At index 100, the @@toPrimitive callback of |evil| is invoked in\n// line 3 above, shrinking the array to length 1 and reallocating its\n// backing buffer. The subsequent write (line 5) goes out-of-bounds.\narray.fizzbuzz();\n```\n\n----------------------------------------\n\nTITLE: Handling Symbols without descriptions in JavaScript\nDESCRIPTION: Demonstrates that the description getter returns undefined for Symbols created without a description parameter.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/symbol-description.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = Symbol();\nsymbol.description;\n// → undefined\n```\n\n----------------------------------------\n\nTITLE: Mixed BigInt and Number Operations\nDESCRIPTION: Demonstrates type errors when mixing BigInt and Number operations, and valid comparison operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 1n;\n// → TypeError\n123 < 124n;\n// → true\n```\n\n----------------------------------------\n\nTITLE: Collecting Enumerable Properties from Prototype Chain in V8\nDESCRIPTION: C++ implementation of how V8 collects enumerable properties from an object and its prototype chain. This code shows the process of walking up the prototype chain and unioning keys, which had performance implications for objects with many prototype properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nFixedArray* JSObject::GetEnumKeys() {\n  // Get the receiver's enum keys.\n  FixedArray* keys = this->GetOwnEnumKeys();\n  // Walk up the prototype chain.\n  for (JSObject* object : GetPrototypeIterator()) {\n     // Append non-duplicate keys to the list.\n     keys = keys->UnionOfKeys(object->GetOwnEnumKeys());\n  }\n  return keys;\n}\n\nFixedArray* JSObject::GetOwnEnumKeys() {\n  FixedArray* keys;\n  if (this->HasEnumCache()) {\n    keys = this->map()->GetCachedEnumKeys();\n  } else {\n    keys = this->GetEnumPropertyKeys();\n  }\n  if (this->HasFastProperties()) this->map()->FillEnumCache(keys);\n  return object->GetElementsAccessor()->PrependElementIndices(object, keys);\n}\n\nFixedArray* FixedArray::UnionOfKeys(FixedArray* other) {\n  int length = this->length();\n  FixedArray* result = FixedArray::Allocate(length + other->length());\n  this->CopyTo(result, 0);\n  int insertion_index = length;\n  for (int i = 0; i < other->length(); i++) {\n    String* key = other->get(i);\n    if (other->IndexOf(key) == -1) {\n      result->set(insertion_index, key);\n      insertion_index++;\n    }\n  }\n  result->Shrink(insertion_index);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Intl.Locale in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an Intl.Locale instance and access various locale-specific properties. It shows extracting language, calendar, hour cycle, and region information, as well as converting the locale back to a string representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/_intl-locale.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst locale = new Intl.Locale('es-419-u-hc-h12', {\n  calendar: 'gregory'\n});\nlocale.language;\n// → 'es'\nlocale.calendar;\n// → 'gregory'\nlocale.hourCycle;\n// → 'h12'\nlocale.region;\n// → '419'\nlocale.toString();\n// → 'es-419-u-ca-gregory-hc-h12'\n```\n\n----------------------------------------\n\nTITLE: MovingAvg Class Implementation\nDESCRIPTION: Class that tracks websocket events for latency calculations, demonstrating potential memory leak issues with event listeners.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MovingAvg {\n  constructor(socket) {\n    this.events = [];\n    this.socket = socket;\n    this.listener = (ev) => { this.events.push(ev); };\n    socket.addEventListener('message', this.listener);\n  }\n\n  compute(n) {\n    // Compute the simple moving average for the last n events.\n    // …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating WebAssembly Bulk Memory Operations\nDESCRIPTION: Examples of the new WebAssembly bulk memory operations including memory.copy for copying data between regions, memory.fill for setting values in memory regions, and table.copy for copying table elements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-75.md#2025-04-10_snippet_0\n\nLANGUAGE: wasm\nCODE:\n```\n;; Copy 500 bytes from source 1000 to destination 0.\n(memory.copy (i32.const 0) (i32.const 1000) (i32.const 500))\n\n;; Fill 1000 bytes starting at 100 with the value `123`.\n(memory.fill (i32.const 100) (i32.const 123) (i32.const 1000))\n\n;; Copy 10 table elements from source 5 to destination 15.\n(table.copy (i32.const 15) (i32.const 5) (i32.const 10))\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.take() Method in JavaScript\nDESCRIPTION: The take() method returns a new iterator containing up to a specified number of values from the original iterator. This example selects the 10 most recent blog posts.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Select 10 recent blog posts and log them.\nfor (const post of posts.values().take(10)) {\n  console.log(post);\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient Array Iteration with Traditional For Loop in JavaScript\nDESCRIPTION: Shows the recommended way to iterate over an array using a traditional for loop, avoiding reading beyond the array's length.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let index = 0; index < items.length; index++) {\n  const item = items[index];\n  doSomething(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MathIs42 Builtin in C++\nDESCRIPTION: Provides the full implementation of the MathIs42 builtin using CodeStubAssembler. It demonstrates parameter handling, calling other builtins, using CSA variables, and implementing conditional logic.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nTF_BUILTIN(MathIs42, MathBuiltinsAssembler) {\n  Node* const context = Parameter(Descriptor::kContext);\n  Node* const x = Parameter(Descriptor::kX);\n\n  Node* const number = CallBuiltin(Builtins::kToNumber, context, x);\n\n  VARIABLE(var_result, MachineRepresentation::kTagged);\n\n  Label if_issmi(this), if_isheapnumber(this), out(this);\n\n  Branch(TaggedIsSmi(number), &if_issmi, &if_isheapnumber);\n\n  BIND(&if_issmi);\n  {\n    var_result.Bind(SelectBooleanConstant(SmiEqual(number, SmiConstant(42))));\n    Goto(&out);\n  }\n\n  BIND(&if_isheapnumber);\n  {\n    CSA_ASSERT(this, IsHeapNumber(number));\n    Node* const value = LoadHeapNumberValue(number);\n    Node* const is_42 = Float64Equal(value, Float64Constant(42));\n    var_result.Bind(SelectBooleanConstant(is_42));\n    Goto(&out);\n  }\n\n  BIND(&out);\n  {\n    Node* const result = var_result.value();\n    CSA_ASSERT(this, IsBoolean(result));\n    Return(result);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the V8.dev Website\nDESCRIPTION: Command to build the V8.dev website into the dist directory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using Replacer Functions to Avoid Special Pattern Substitution in JavaScript\nDESCRIPTION: Demonstrates how to use a replacer function with replaceAll to prevent the automatic substitution of special replacement patterns like $$.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'xyz'.replaceAll('y', () => '$$');\n// → 'x$$z'\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Configurable Array Properties in JavaScript\nDESCRIPTION: This example shows how defining array elements with custom descriptors forces V8 to use slow elements. It demonstrates creating a non-configurable array element that cannot be overridden.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-properties.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [];\nObject.defineProperty(array, 0, {value: 'fixed' configurable: false});\nconsole.log(array[0]);      // Prints 'fixed'.\narray[0] = 'other value';   // Cannot override index 0.\nconsole.log(array[0]);      // Still prints 'fixed'.\n```\n\n----------------------------------------\n\nTITLE: Declaring TFS Builtins in BUILTIN_LIST_BASE\nDESCRIPTION: This snippet shows how to declare both TFS (stub linkage) and TFJ (JavaScript linkage) builtins in the BUILTIN_LIST_BASE macro inside builtins-definitions.h. The order matters - builtins that are called by others need to be listed before their callers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n#define BUILTIN_LIST_BASE(CPP, API, TFJ, TFC, TFS, TFH, ASM, DBG)              \\\n  // […snip…]\n  TFS(MathIsHeapNumber42, kX)                                                  \\\n  TFJ(MathIs42, 1, kX)                                                         \\\n  // […snip…]\n```\n\n----------------------------------------\n\nTITLE: Defining CoverParenthesizedExpressionAndArrowParameterList Grammar\nDESCRIPTION: This grammar snippet defines the production rules for CPEAAPL, which allows for parsing of both parenthesized expressions and arrow function parameter lists.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_2\n\nLANGUAGE: grammar\nCODE:\n```\nCPEAAPL :\n  ( Expression )\n  ( Expression , )\n  ( )\n  ( ... BindingIdentifier )\n  ( ... BindingPattern )\n  ( Expression , ... BindingIdentifier )\n  ( Expression , ... BindingPattern )\n```\n\n----------------------------------------\n\nTITLE: Basic Number Formatting with Intl.NumberFormat\nDESCRIPTION: Demonstrates basic number formatting using Intl.NumberFormat with both format and formatToParts methods.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en');\nformatter.format(987654.321);\n// → '987,654.321'\nformatter.formatToParts(987654.321);\n// → [\n// →   { type: 'integer', value: '987' },\n// →   { type: 'group', value: ',' },\n// →   { type: 'integer', value: '654' },\n// →   { type: 'decimal', value: '.' },\n// →   { type: 'fraction', value: '321' }\n// → ]\n```\n\n----------------------------------------\n\nTITLE: Using BigInt.asIntN for Signed Integer Wrapping in JavaScript\nDESCRIPTION: Shows how to use BigInt.asIntN to wrap BigInt values as signed integers with a specific bit width, demonstrating overflow behavior for 64-bit integers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Highest possible BigInt value that can be represented as a\n// signed 64-bit integer.\nconst max = 2n ** (64n - 1n) - 1n;\nBigInt.asIntN(64, max);\n→ 9223372036854775807n\nBigInt.asIntN(64, max + 1n);\n// → -9223372036854775808n\n//   ^ negative because of overflow\n```\n\n----------------------------------------\n\nTITLE: Leveraging Lexical 'this' Binding with Arrow Functions in Classes\nDESCRIPTION: This example shows how arrow functions maintain the lexical binding of 'this', making them particularly useful in class methods where callbacks are used. The arrow function preserves the class instance context without requiring manual binding.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-45.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyClass {\n  constructor() { this.a = 'Hello, '; }\n  hello() { setInterval(() => console.log(this.a + 'World!'), 1000); }\n}\nconst myInstance = new MyClass();\nmyInstance.hello();\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Methods and Accessors in Classes\nDESCRIPTION: Example demonstrating the syntax for private methods and accessors in JavaScript classes using the # prefix.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-84.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Component {\n  #privateMethod() {\n    console.log(\"I'm only callable inside Component!\");\n  }\n  get #privateAccessor() { return 42; }\n  set #privateAccessor(x) { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Separators with Octal Literals in JavaScript\nDESCRIPTION: This snippet demonstrates the use of numeric separators with octal integer literals, although the usefulness in this case is questionable.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/numeric-separators.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// A numeric separator in an octal integer literal: 🤷‍♀️\n0o123_456\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Fields from Static Blocks in JavaScript\nDESCRIPTION: This code shows how static initialization blocks can access a class's private fields. It creates a function that can access the private field of class instances, demonstrating the encapsulation capabilities of static blocks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-static-initializer-blocks.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet getDPrivateField;\nclass D {\n  #privateField;\n  constructor(v) {\n    this.#privateField = v;\n  }\n  static {\n    getDPrivateField = (d) => d.#privateField;\n  }\n}\ngetDPrivateField(new D('private'));\n// → private\n```\n\n----------------------------------------\n\nTITLE: Optimal Array Creation\nDESCRIPTION: Shows the preferred way to create arrays without holes using array literals.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = ['a', 'b', 'c'];\n// elements kind: PACKED_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: C Program with i64 JavaScript Interface\nDESCRIPTION: C code example demonstrating how to send a 64-bit integer to JavaScript through an external function declaration.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/wasm-bigint.md#2025-04-10_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include <stdint.h>\n\nextern void send_i64_to_js(int64_t);\n\nint main() {\n  send_i64_to_js(0xABCD12345678ULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Array Map with Duplicate Function\nDESCRIPTION: Shows how mapping an array with a function that returns arrays creates nested results.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/array-flat-flatmap.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst duplicate = (x) => [x, x];\n\n[2, 3, 4].map(duplicate);\n// → [[2, 2], [3, 3], [4, 4]]\n```\n\n----------------------------------------\n\nTITLE: Compressing 64-bit Tagged Values in V8 (C++)\nDESCRIPTION: Demonstrates how 64-bit tagged values (pointers and Smis) are compressed to 32 bits by truncating the upper 32 bits.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nuint64_t uncompressed_tagged;\nuint32_t compressed_tagged = uint32_t(uncompressed_tagged);\n```\n\n----------------------------------------\n\nTITLE: Updating Verifier to Support Int32Add1\nDESCRIPTION: This change updates the TurboFan verifier to recognize the new Int32Add1 opcode, ensuring that graphs containing this operator can be properly validated during compilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/verifier.cc b/src/compiler/verifier.cc\nindex 461aef0023..95251934ce 100644\n--- a/src/compiler/verifier.cc\n+++ b/src/compiler/verifier.cc\n@@ -1861,6 +1861,7 @@ void Verifier::Visitor::Check(Node* node, const AllNodes& all) {\n     case IrOpcode::kSignExtendWord16ToInt64:\n     case IrOpcode::kSignExtendWord32ToInt64:\n     case IrOpcode::kStaticAssert:\n+    case IrOpcode::kInt32Add1:\n \n #define SIMD_MACHINE_OP_CASE(Name) case IrOpcode::k##Name:\n       MACHINE_SIMD_OP_LIST(SIMD_MACHINE_OP_CASE)\n```\n\n----------------------------------------\n\nTITLE: Implementing hash code lookup with private symbols in V8 (JavaScript)\nDESCRIPTION: The original implementation for retrieving hash codes in V8, using a private symbol property on JavaScript objects. This approach caused performance issues with hidden class transitions and megamorphic IC lookups.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/hash-code.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction GetObjectHash(key) {\n  let hash = key[hashCodeSymbol];\n  if (IS_UNDEFINED(hash)) {\n    hash = (MathRandom() * 0x40000000) | 0;\n    if (hash === 0) hash = 1;\n    key[hashCodeSymbol] = hash;\n  }\n  return hash;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading External Scripts with d8 in JavaScript\nDESCRIPTION: Shows how to use the load() function in d8 to run another JavaScript file in the current context.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/d8.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cat util.js\nfunction greet(name) {\n  return 'Hello, ' + name;\n}\n\n$ d8\nd8> load('util.js');\nd8> greet('World!');\n\"Hello, World!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Old Decompression for Pointer Compression in C++\nDESCRIPTION: This snippet shows the old implementation of decompression for pointer compression. It checks if the uncompressed tagged value is odd (indicating a pointer) and adds the base value if so.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Old decompression implementation\nint64_t uncompressed_tagged = int64_t(compressed_tagged);\nif (uncompressed_tagged & 1) {\n  // pointer case\n  uncompressed_tagged += base;\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern: Using null for Numeric Properties\nDESCRIPTION: This example demonstrates a JavaScript anti-pattern that should be avoided. Initializing numeric fields with null prevents V8 from optimizing field representations, leading to worse performance and less readable code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this!\nclass Point {\n  x = null;\n  y = null;\n}\n\nconst p = new Point();\np.x = 0.1;\np.y = 402;\n```\n\n----------------------------------------\n\nTITLE: Creating BigInts using Constructor in JavaScript\nDESCRIPTION: Demonstrates the usage of the BigInt constructor to create BigInt values from different input types. It also highlights potential pitfalls when using numeric literals.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nBigInt(123);\n// → 123n\nBigInt(1.5);\n// → RangeError\nBigInt('1.5');\n// → SyntaxError\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Plural Formatter with Intl.PluralRules in JavaScript\nDESCRIPTION: This example shows how to create a custom formatter for pluralizing 'cat' in English using Intl.PluralRules. It demonstrates how to map plural rules to specific word forms and format numbers accordingly.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-pluralrules.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst suffixes = new Map([\n  // Note: in real-world scenarios, you wouldn't hardcode the plurals\n  // like this; they'd be part of your translation files.\n  ['one',   'cat'],\n  ['other', 'cats'],\n]);\nconst pr = new Intl.PluralRules('en-US');\nconst formatCats = (n) => {\n  const rule = pr.select(n);\n  const suffix = suffixes.get(rule);\n  return `${n} ${suffix}`;\n};\n\nformatCats(1);   // '1 cat'\nformatCats(0);   // '0 cats'\nformatCats(0.5); // '0.5 cats'\nformatCats(1.5); // '1.5 cats'\nformatCats(2);   // '2 cats'\n```\n\n----------------------------------------\n\nTITLE: TurboFan Assembly without Arguments Adaptor Frame\nDESCRIPTION: Optimized assembly code generated by TurboFan when not using the arguments adaptor frame mechanism.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_11\n\nLANGUAGE: nasm\nCODE:\n```\nmovq rdi,0x35ac082126ad    ;; Load the function object <JSFunction add42>\n;; Push receiver and arguments 1, 2 and 3 (reversed)\npush 0x6\npush 0x4\npush 0x2\nmovq rcx,0x35ac082030d1    ;; <JSGlobal Object>\npush rcx\nmovl rax,0x3               ;; Save the arguments count in rax\nmovl rcx,[rdi+0x17]        ;; Load function object {Code} field in rcx\ncall rcx                   ;; Finally, call the code object!\n```\n\n----------------------------------------\n\nTITLE: AdvanceUntil Function Declaration in V8 Scanner\nDESCRIPTION: This code snippet shows the declaration of the AdvanceUntil function in V8's scanner. This templatized function is used to provide faster access to code units in the character stream.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/scanner.md#2025-04-10_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nAdvanceUntil()\n```\n\n----------------------------------------\n\nTITLE: Using Array.from with Iterables in JavaScript\nDESCRIPTION: Example of Array.from usage that benefits from the same optimizations as spread elements in V8 v7.2, showing significant performance improvements when used without a mapping function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nArray.from([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Worker Cache in JavaScript\nDESCRIPTION: Service worker implementation with install and fetch event handlers to create and use a cache for resources, enabling offline functionality and improving code caching performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching-for-devs.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// sw.js\nself.addEventListener('install', (event) => {\n  async function buildCache() {\n    const cache = await caches.open(cacheName);\n    return cache.addAll([\n      '/main.css',\n      '/main.mjs',\n      '/offline.html',\n    ]);\n  }\n  event.waitUntil(buildCache());\n});\n\nself.addEventListener('fetch', (event) => {\n  async function cachedFetch(event) {\n    const cache = await caches.open(cacheName);\n    let response = await cache.match(event.request);\n    if (response) return response;\n    response = await fetch(event.request);\n    cache.put(event.request, response.clone());\n    return response;\n  }\n  event.respondWith(cachedFetch(event));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Array with Integers in JavaScript\nDESCRIPTION: Creates an array with integer elements, which V8 internally classifies as PACKED_SMI_ELEMENTS.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Concurrent Object Snapshotting Protocol in V8 (C++)\nDESCRIPTION: This snippet shows how worker threads safely visit objects during concurrent marking. It creates a snapshot of pointer fields using atomic loads and ensures consistency by attempting to mark the object black.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/concurrent-marking.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nsnapshot = [];\nhidden_class = atomic_relaxed_load(&object.hidden_class);\nfor (field_offset in pointer_field_offsets(hidden_class)) {\n  pointer = atomic_relaxed_load(object + field_offset);\n  snapshot.add(field_offset, pointer);\n}\nif (atomic_color_transition(object, grey, black)) {\n  visit_pointers(snapshot);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling V8 with Ninja\nDESCRIPTION: Builds all V8 targets using Ninja based on the build files generated in the x64.release output directory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nninja -C out/x64.release\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pointer Compression Structure in V8\nDESCRIPTION: Illustrates how V8 splits a 64-bit pointer into two 32-bit halves (base and index) for pointer compression on 64-bit platforms like x64 and arm64.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-92.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n            |----- 32 bits -----|----- 32 bits -----|\nPointer:    |________base_______|_______index_______|\n```\n\n----------------------------------------\n\nTITLE: GDB backtrace with JIT Compilation Interface enabled\nDESCRIPTION: Example of an improved GDB backtrace when JIT Compilation Interface is enabled, showing JavaScript function names and source file information for dynamically generated code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/gdb-jit.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#6  0x082857fc in v8::internal::Runtime_SetProperty (args=...) at src/runtime.cc:3758\n#7  0xf5cae28e in ?? ()\n#8  0xf5cc3a0a in loop () at test.js:6\n#9  0xf5cc38f4 in test.js () at test.js:13\n#10 0xf5cbef19 in ?? ()\n#11 0xf5cb09a2 in ?? ()\n#12 0x0809e1f9 in v8::internal::Invoke (construct=false, func=..., receiver=..., argc=0, args=0x0,\n    has_pending_exception=0xffffd44f) at src/execution.cc:97\n```\n\n----------------------------------------\n\nTITLE: Implementing custom Math.random function in JavaScript\nDESCRIPTION: This code snippet shows a custom implementation of Math.random used in the async-fs benchmark. It uses a deterministic algorithm to generate pseudo-random numbers for consistent results across runs. The function updates a 'seed' variable on each call, which becomes a performance bottleneck in the V8 engine.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/mutable-heap-number.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet seed;\nMath.random = (function() {\n  return function () {\n    seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;\n    seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n    seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;\n    seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;\n    seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;\n    seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n    return (seed & 0xfffffff) / 0x10000000;\n  };\n})();\n```\n\n----------------------------------------\n\nTITLE: Combining Surrogate Pairs in V8 Scanner's Slow Path\nDESCRIPTION: This code snippet illustrates how V8's scanner combines surrogate pairs in the slow path of identifier scanning when dealing with non-ASCII characters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/scanner.md#2025-04-10_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// Combining surrogate pairs in the slow path of identifier scanning\ncombine()\n```\n\n----------------------------------------\n\nTITLE: Subclassing with ES2015 Constructor and super() Call\nDESCRIPTION: Shows how to create a Cat subclass of Animal using ES2015 class syntax. This requires boilerplate code with a constructor and super() call to properly initialize the base class.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass Cat extends Animal {\n  constructor(name) {\n    super(name);\n    this.likesBaths = false;\n  }\n  meow() {\n    console.log('Meow!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Function Using Promise Chaining in JavaScript\nDESCRIPTION: This snippet shows a function that is equivalent to the async function with await, but uses promise chaining instead. It demonstrates how async/await syntax can simplify promise-based code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fetchStatus(url) {\n  return fetch(url).then(response => response.status);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Intl.NumberFormat with BigInt Values in JavaScript\nDESCRIPTION: Shows how to efficiently format multiple BigInt values using Intl.NumberFormat API. This approach is more performant than repeatedly calling toLocaleString, as it creates a reusable formatter instance that supports BigInt in its format and formatToParts methods.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-76.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nf = new Intl.NumberFormat('fr');\nnf.format(12345678901234567890n); // 🚀\n// → '12 345 678 901 234 567 890'\nnf.formatToParts(123456n); // 🚀\n// → [\n// →   { type: 'integer', value: '123' },\n// →   { type: 'group', value: ' ' },\n// →   { type: 'integer', value: '456' }\n// → ]\n```\n\n----------------------------------------\n\nTITLE: Using nested character classes with set notation difference\nDESCRIPTION: Example showing how to subtract a set of characters using nested character classes with the difference operator in regular expressions with the `v` flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/[\\p{Script_Extensions=Greek}--[αβγ]]/v.test('α'); // → false\n/[\\p{Script_Extensions=Greek}--[α-γ]]/v.test('β'); // → false\n```\n\n----------------------------------------\n\nTITLE: Optimized Hash Function for Numeric Strings in V8\nDESCRIPTION: This C++ code snippet shows the new hash function implemented to reduce collisions for numeric strings in V8's StringsStorage, improving heap snapshot generation performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/speeding-up-v8-heap-snapshots.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint32_t NewHash(const std::string& numeric_string) {\n  return OriginalHash(numeric_string) << 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Case-Insensitive Matching with v Flag\nDESCRIPTION: Demonstrates how the v flag provides more consistent and intuitive behavior for case-insensitive matching, making equivalent expressions behave the same way regardless of notation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst re1 = /\\p{Lowercase_Letter}/giv;\nconst re2 = /[^\\P{Lowercase_Letter}]/giv;\n\nconst string = 'aAbBcC4#';\n\nstring.replaceAll(re1, 'X');\n// → 'XXXXXX4#'\n\nstring.replaceAll(re2, 'X');\n// → 'XXXXXX4#'\n```\n\n----------------------------------------\n\nTITLE: VariableDeclaration Grammar Production\nDESCRIPTION: Grammar production for variable declarations, showing how the Yield and Await parameters continue to be passed down to the BindingIdentifier.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_9\n\nLANGUAGE: grammar\nCODE:\n```\nVariableDeclaration[In, Yield, Await] :\n  BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await] opt\n```\n\n----------------------------------------\n\nTITLE: Computing Fibonacci Numbers with JSPI in C\nDESCRIPTION: This snippet shows a C function for computing Fibonacci numbers using JSPI to perform addition via JavaScript Promises. It demonstrates how to use the EM_ASYNC_JS macro to integrate JavaScript code within C.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nlong promiseFib(long x) {\n if (x == 0)\n   return 0;\n if (x == 1)\n   return 1;\n return promiseAdd(promiseFib(x - 1), promiseFib(x - 2));\n}\n// promise an addition\nEM_ASYNC_JS(long, promiseAdd, (long x, long y), {\n  return Promise.resolve(x+y);\n});\n```\n\n----------------------------------------\n\nTITLE: Debugging V8 Object After Slack Tracking\nDESCRIPTION: This snippet shows the debug output for a Peak object after slack tracking has completed. It demonstrates how the object's structure has been optimized, reducing its size from 13 words to 5 words.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nDebugPrint: 0x5cd08751: [JS_OBJECT_TYPE]\n - map: 0x4b387385 <Map(HOLEY_ELEMENTS)> [FastProperties]\n - prototype: 0x5cd086cd <Object map = 0x4b387335>\n - elements: 0x586421a1 <FixedArray[0]> [HOLEY_ELEMENTS]\n - properties: 0x586421a1 <FixedArray[0]> {\n    0x586446f9: [String] in ReadOnlySpace: #name:\n        0x51112439 <String[10]: #Matterhorn> (const data field 0)\n    0x51112415: [String] in OldSpace: #height:\n        4478 (const data field 1)\n }\n0x4b387385: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 20\n - inobject properties: 2\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 0\n - enum length: invalid\n - stable_map\n - back pointer: 0x4b38735d <Map(HOLEY_ELEMENTS)>\n - prototype_validity cell: 0x511128dd <Cell value= 0>\n - instance descriptors (own) #2: 0x5cd087e5 <DescriptorArray[2]>\n - prototype: 0x5cd086cd <Object map = 0x4b387335>\n - constructor: 0x511127cd <JSFunction Peak (sfi = 0x511125f5)>\n - dependent code: 0x5864212d <Other heap object (WEAK_FIXED_ARRAY_TYPE)>\n - construction counter: 0\n```\n\n----------------------------------------\n\nTITLE: Using Intl.DateTimeFormat formatRange Methods for Date Ranges in JavaScript\nDESCRIPTION: Demonstrates the new formatRange and formatRangeToParts methods in Intl.DateTimeFormat API for formatting date ranges in a locale-specific manner. The example shows how to display a date range with shared components intelligently formatted.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-76.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = new Date('2019-05-07T09:20:00');\n// → 'May 7, 2019'\nconst end = new Date('2019-05-09T16:00:00');\n// → 'May 9, 2019'\nconst fmt = new Intl.DateTimeFormat('en', {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n});\nconst output = fmt.formatRange(start, end);\n// → 'May 7 – 9, 2019'\nconst parts = fmt.formatRangeToParts(start, end);\n// → [\n// →   { 'type': 'month',   'value': 'May',  'source': 'shared' },\n// →   { 'type': 'literal', 'value': ' ',    'source': 'shared' },\n// →   { 'type': 'day',     'value': '7',    'source': 'startRange' },\n// →   { 'type': 'literal', 'value': ' – ',  'source': 'shared' },\n// →   { 'type': 'day',     'value': '9',    'source': 'endRange' },\n// →   { 'type': 'literal', 'value': ', ',   'source': 'shared' },\n// →   { 'type': 'year',    'value': '2019', 'source': 'shared' },\n// → ]\n```\n\n----------------------------------------\n\nTITLE: Insecure Cross-Origin Import Example\nDESCRIPTION: Demonstrates a security vulnerability when importing JSON without assertions from a third-party source.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-assertions.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport data from 'https://evil.com/data.json';\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JavaScript Function Call Performance with Argument Mismatch\nDESCRIPTION: This code snippet demonstrates a micro-benchmark to measure the performance impact of removing the arguments adaptor frame when calling a function with more arguments than parameters (over-application).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time();\nfunction f(x, y, z) {}\nfor (let i = 0; i <  N; i++) {\n  f(1, 2, 3, 4, 5);\n}\nconsole.timeEnd();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Sorting an Array of Objects in JavaScript\nDESCRIPTION: This snippet demonstrates initializing an array of dog objects and sorting them based on their rating in descending order. It showcases the use of Array.prototype.sort with a custom comparison function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/stable-sort.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Note how the array is pre-sorted alphabetically by `name`.\nconst doggos = [\n  { name: 'Abby',   rating: 12 },\n  { name: 'Bandit', rating: 13 },\n  { name: 'Choco',  rating: 14 },\n  { name: 'Daisy',  rating: 12 },\n  { name: 'Elmo',   rating: 12 },\n  { name: 'Falco',  rating: 13 },\n  { name: 'Ghost',  rating: 14 },\n];\n// Sort the dogs by `rating` in descending order.\n// (This updates `doggos` in place.)\ndoggos.sort((a, b) => b.rating - a.rating);\n```\n\n----------------------------------------\n\nTITLE: Generated x64 assembly code for GetStringLength builtin\nDESCRIPTION: This assembly code snippet shows the x64 machine code generated by mksnapshot for the GetStringLength builtin. It demonstrates how the CSA translates high-level instructions into efficient, platform-specific assembly code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/csa.md#2025-04-10_snippet_2\n\nLANGUAGE: asm\nCODE:\n```\n  test al,0x1\n  jz not_string\n  movq rbx,[rax-0x1]\n  cmpb [rbx+0xb],0x80\n  jnc not_string\n  movq rax,[rax+0xf]\n  retl\nnot_string:\n  movq rax,[r13-0x60]\n  retl\n```\n\n----------------------------------------\n\nTITLE: Module Preloading HTML Example\nDESCRIPTION: Demonstrates how to preload modules using link rel=\"modulepreload\" for better performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"modulepreload\" href=\"lib.mjs\">\n<link rel=\"modulepreload\" href=\"main.mjs\">\n<script type=\"module\" src=\"main.mjs\"></script>\n<script nomodule src=\"fallback.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Calculating Offset to Deoptimization Flag in V8\nDESCRIPTION: Computes the offset to the location where the marked_for_deoptimization bit is stored in the code object. This allows the runtime to check if the code has been marked for deoptimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nint pc = __ pc_offset();\nint offset = Code::kKindSpecificFlags1Offset - (Code::kHeaderSize + pc);\n```\n\n----------------------------------------\n\nTITLE: Spreading Map Elements in JavaScript\nDESCRIPTION: Code examples showing map spreading operations in JavaScript that are optimized in V8 v7.2, excluding direct map spreading which is considered uncommon.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n[...map]\n```\n\n----------------------------------------\n\nTITLE: Direct Module Namespace Export\nDESCRIPTION: Demonstrates the new ES2020 syntax for re-exporting an entire module namespace in a single statement.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/module-namespace-exports.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as utils from './utils.mjs';\n```\n\n----------------------------------------\n\nTITLE: Initializing Intl.DisplayNames for Calendar and DateTimeField in JavaScript\nDESCRIPTION: Demonstrates the new 'calendar' and 'dateTimeField' types for Intl.DisplayNames, allowing localized display of calendar types and date-time fields.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-95.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst esCalendarNames = new Intl.DisplayNames(['es'], { type: 'calendar' });\nconst frDateTimeFieldNames = new Intl.DisplayNames(['fr'], { type: 'dateTimeField' });\nesCalendarNames.of('roc');  // \"calendario de la República de China\"\nfrDateTimeFieldNames.of('month'); // \"mois\"\n```\n\n----------------------------------------\n\nTITLE: Attaching Perf to Chrome Renderer Process\nDESCRIPTION: How to use perf record to attach to a specific Chrome renderer process identified from the Task Manager.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nperf record -g -k mono -p $RENDERER_PID -o perf.data\n```\n\n----------------------------------------\n\nTITLE: Set Spread Operation in JavaScript\nDESCRIPTION: Demonstrates spreading a Set into an array while maintaining insertion order of elements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst s = new Set();\ns.add('V8');\ns.add('TurboFan');\nconst result = [...s];\n// → ['V8', 'TurboFan']\n```\n\n----------------------------------------\n\nTITLE: Compound Unit Formatting with Intl.NumberFormat\nDESCRIPTION: Shows how to format numbers with compound units like meters per second.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'unit',\n  unit: 'meter-per-second',\n});\nformatter.format(299792458);\n// → '299,792,458 m/s'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Function Loading in C\nDESCRIPTION: This C code snippet shows how to implement a trampoline mechanism for dynamically loading and calling a function. It uses function pointers to replace the stub with the actual loaded function after the first call.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nextern fooFun get42;\n\nlong stub(){\n  get42 = resolveFun();\n  return get42();\n}\n\nfooFun get42 = stub;\n```\n\n----------------------------------------\n\nTITLE: Comparing Branchless vs Branchful Decompression in x64 Assembly\nDESCRIPTION: Assembly code comparison of two pointer decompression techniques on x64 architecture. The branchless version uses 6 instructions with no branches but requires an additional register, while the branchful version uses fewer instructions with a conditional jump but proved faster in benchmarks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_4\n\nLANGUAGE: asm\nCODE:\n```\nmovsxlq r11,[…]\nmovl r10,r11\nandl r10,0x1\nnegq r10\nandq r10,r13\naddq r11,r10\n```\n\nLANGUAGE: asm\nCODE:\n```\nmovsxlq r11,[…]\ntestb r11,0x1\njz done\naddq r11,r13\ndone:\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 for TurboFan-only WebAssembly Compilation\nDESCRIPTION: Command line flags to configure V8 and Chrome to use only the TurboFan compiler for WebAssembly, bypassing the Liftoff baseline compiler. This allows experimentation with optimized compilation performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-compilation-pipeline.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--no-liftoff --no-wasm-tier-up\n```\n\n----------------------------------------\n\nTITLE: RelativeTimeFormat with Auto Numeric Option\nDESCRIPTION: Shows how to use the 'auto' numeric option to get more natural language output for relative times.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-relativetimeformat.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n\nrtf.format(-1, 'day');\n// → 'yesterday'\n\nrtf.format(0, 'day');\n// → 'today'\n\nrtf.format(1, 'day');\n// → 'tomorrow'\n\nrtf.format(-1, 'week');\n// → 'last week'\n\nrtf.format(0, 'week');\n// → 'this week'\n\nrtf.format(1, 'week');\n// → 'next week'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error-Prone Property Access in JavaScript\nDESCRIPTION: This snippet shows a chain of property accesses that could potentially throw an error if any intermediate value is nullish.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Error prone-version, could throw.\nconst nameLength = db.user.name.length;\n```\n\n----------------------------------------\n\nTITLE: Using the V8 API for independent code cache creation\nDESCRIPTION: Shows the new V8 API 'ScriptCompiler::CreateCodeCache' introduced to request code caches independently from compile requests, enabling caching after script execution rather than just during initial compile.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/improved-code-caching.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nScriptCompiler::CreateCodeCache\n```\n\n----------------------------------------\n\nTITLE: Comparing original and optimized await implementation in JavaScript\nDESCRIPTION: This snippet shows the difference between the original await implementation and the optimized version using promiseResolve. The optimized version reduces the number of promises created and microtask ticks required.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Original implementation\nlet promiseResolved = Promise.resolve(v);\nlet onFulfilled = () => {\n  // resume\n};\nlet onRejected = (reason) => {\n  // resume\n};\npromiseResolved.then(onFulfilled, onRejected);\n\n// New implementation\nlet promiseResolved = promiseResolve(v);\nlet onFulfilled = () => {\n  // resume\n};\nlet onRejected = (reason) => {\n  // resume\n};\npromiseResolved.then(onFulfilled, onRejected);\n```\n\n----------------------------------------\n\nTITLE: Running V8 tests with the most recent GN build\nDESCRIPTION: Executes the V8 test suite using the most recently compiled build in the out.gn directory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntools/run-tests.py --gn\n```\n\n----------------------------------------\n\nTITLE: Manual Event Listener Cleanup Implementation\nDESCRIPTION: Enhanced MovingAvg class with manual dispose method to clean up event listeners.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MovingAvg {\n  constructor(socket) {\n    this.events = [];\n    this.socket = socket;\n    this.listener = (ev) => { this.events.push(ev); };\n    socket.addEventListener('message', this.listener);\n  }\n\n  dispose() {\n    this.socket.removeEventListener('message', this.listener);\n  }\n\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Image Loading with import.meta Example\nDESCRIPTION: Shows how to use import.meta.url to load images relative to the current module's location.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadThumbnail(relativePath) {\n  const url = new URL(relativePath, import.meta.url);\n  const image = new Image();\n  image.src = url;\n  return image;\n}\n\nconst thumbnail = loadThumbnail('../img/thumbnail.png');\ncontainer.append(thumbnail);\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Language Type Support in Intl.DisplayNames in JavaScript\nDESCRIPTION: Shows the new 'languageDisplay' option for the 'language' type in Intl.DisplayNames, allowing differentiation between 'standard' and 'dialect' display formats.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-95.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst jaDialectLanguageNames = new Intl.DisplayNames(['ja'], { type: 'language' });\nconst jaStandardLanguageNames = new Intl.DisplayNames(['ja'], { type: 'language' , languageDisplay: 'standard'});\njaDialectLanguageNames.of('en-US')  // \"アメリカ英語\"\njaDialectLanguageNames.of('en-AU')  // \"オーストラリア英語\"\njaDialectLanguageNames.of('en-GB')  // \"イギリス英語\"\n\njaStandardLanguageNames.of('en-US') // \"英語 (アメリカ合衆国)\"\njaStandardLanguageNames.of('en-AU') // \"英語 (オーストラリア)\"\njaStandardLanguageNames.of('en-GB') // \"英語 (イギリス)\"\n```\n\n----------------------------------------\n\nTITLE: Template Literal Syntax Ambiguity in JavaScript\nDESCRIPTION: This example demonstrates how the interpretation of template literals can be ambiguous based on context. It shows how backticks and curly braces are interpreted as template head/tail in one context versus as separate elements in another.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst what1 = 'temp';\nconst what2 = 'late';\nconst t = `I am a ${ what1 + what2 }`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (0 == 1) {\n}`not very useful`;\n```\n\n----------------------------------------\n\nTITLE: Implementing kX64Int32Add1 with Proper Assembly Code in Code Generator\nDESCRIPTION: Final implementation of the kX64Int32Add1 instruction using the addl assembly instruction to increment the input register by 1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/backend/x64/code-generator-x64.cc b/src/compiler/backend/x64/code-generator-x64.cc\nindex 6c828d6bc4..260c8619f2 100644\n--- a/src/compiler/backend/x64/code-generator-x64.cc\n+++ b/src/compiler/backend/x64/code-generator-x64.cc\n@@ -744,6 +744,11 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(\n   InstructionCode opcode = instr->opcode();\n   ArchOpcode arch_opcode = ArchOpcodeField::decode(opcode);\n   switch (arch_opcode) {\n+    case kX64Int32Add1: {\n+      DCHECK_EQ(i.OutputRegister(), i.InputRegister(0));\n+      __ addl(i.InputRegister(0), Immediate(1));\n+      break;\n+    }\n     case kArchCallCodeObject: {\n       if (HasImmediateInput(instr, 0)) {\n         Handle<Code> code = i.InputCode(0);\n```\n\n----------------------------------------\n\nTITLE: Optional Chaining with Nullish Coalescing\nDESCRIPTION: Demonstrating the combination of optional chaining and nullish coalescing operators.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/nullish-coalescing.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Optional chaining and nullish coalescing in tandem\nconst link = obj.deep?.container.link ?? document.createElement('link');\n\n// Default assignment destructure with optional chaining\nconst {\n  link = document.createElement('link'),\n} = (obj.deep?.container || {});\n```\n\n----------------------------------------\n\nTITLE: Ignition Bytecode Compilation for Function Call Example\nDESCRIPTION: Example showing how a simple function call is compiled to Ignition bytecode. This demonstrates how V8 loads undefined as the receiver, retrieves the function, loads arguments, and prepares for function invocation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_2\n\nLANGUAGE: bytecode\nCODE:\n```\n0d              LdaUndefined              ;; Load undefined into the accumulator\n26 f9           Star r2                   ;; Store it in register r2\n13 01 00        LdaGlobal [1]             ;; Load global pointed by const 1 (add42)\n26 fa           Star r1                   ;; Store it in register r1\n0c 03           LdaSmi [3]                ;; Load small integer 3 into the accumulator\n26 f8           Star r3                   ;; Store it in register r3\n5f fa f9 02     CallNoFeedback r1, r2-r3  ;; Invoke call\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator to Replace Apply Method in JavaScript\nDESCRIPTION: This example demonstrates how the spread operator can be used to replace the apply method when passing an array of arguments to a function. It simplifies function invocation with array-stored parameters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-46.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function parameters stored in an array\n// Code without spread operator\nfunction myFunction(a, b, c) {\n  console.log(a);\n  console.log(b);\n  console.log(c);\n}\nconst argsInArray = ['Hi ', 'Spread ', 'operator!'];\nmyFunction.apply(null, argsInArray);\n\n// Code with spread operator\nfunction myFunction (a,b,c) {\n  console.log(a);\n  console.log(b);\n  console.log(c);\n}\n\nconst argsInArray = ['Hi ', 'Spread ', 'operator!'];\nmyFunction(...argsInArray);\n```\n\n----------------------------------------\n\nTITLE: Example of Non-Optimized Member Access in C++ and Assembly\nDESCRIPTION: An example showing how the compiler might generate suboptimal code with redundant base pointer loads when accessing a Member pointer multiple times. This demonstrates the need for compiler optimizations to treat the global base as constant.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/oilpan-pointer-compression.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid foo(GCed*);\nvoid bar(GCed*);\n\nvoid baz(Member<GCed> m) {\n  foo(m.get());\n  bar(m.get());\n}\n```\n\nLANGUAGE: asm\nCODE:\n```\nbaz(Member<GCed>):\n  movsxd rbx, edi\n  add rbx, rbx\n  mov rdi, qword ptr\n      [rip + base]\n  and rdi, rbx\n  call foo(GCed*)\n  and rbx, qword ptr\n      [rip + base] # extra load\n  mov rdi, rbx\n  jmp bar(GCed*)\n```\n\n----------------------------------------\n\nTITLE: Running Chromium with CPU Profiling (Desktop)\nDESCRIPTION: Command to launch Chromium with CPU profiling enabled from process start. Disables sandbox, uses temporary profile directory, runs in incognito mode, and enables V8 profiling.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile-chromium.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./Chromium --no-sandbox --user-data-dir=`mktemp -d` --incognito --js-flags='--prof'\n```\n\n----------------------------------------\n\nTITLE: JavaScript Array Access and Conditional Return\nDESCRIPTION: A JavaScript snippet demonstrating array access and conditional return. This example is used to show how memory operations do not float easily in the Sea of Nodes approach, even when it might seem beneficial.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = arr[0];\nlet y = arr[1];\nif (c) {\n  return x;\n} else {\n  return y;\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Stack Trace Output in Node.js\nDESCRIPTION: This shows the standard error stack trace output in Node.js 8 or 10 when running the async code example. Note that the async caller function 'foo' is missing from the trace.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n$ node index.js\nError: BEEP BEEP\n    at bar (index.js:8:9)\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n    at Function.Module.runMain (internal/modules/cjs/loader.js:745:11)\n    at startup (internal/bootstrap/node.js:266:19)\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:595:3)\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with run-tests.py\nDESCRIPTION: Specifying which tests to run when using the run-tests.py script directly. This allows filtering tests by path pattern.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntools/run-tests.py --outdir=ia32.release cctest/test-heap/SymbolTable/* mjsunit/delete-in-eval\n```\n\n----------------------------------------\n\nTITLE: Profiling Chrome Browser Directly with Perf\nDESCRIPTION: Steps to profile Chrome directly using perf, including launching Chrome with the necessary flags and attaching perf to a specific renderer process.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nout/x64.release/chrome \\\n    --user-data-dir=`mktemp -d` \\\n    --no-sandbox --incognito --enable-benchmarking \\\n    --js-flags='--perf-prof --no-write-protect-code-memory --interpreted-frames-native-stack'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Float64 Behavior for JavaScript Numbers\nDESCRIPTION: This code demonstrates floating-point behaviors specified by ECMAScript, showing cases where JavaScript operations must produce Float64 results even with integer inputs: precision limits, negative zeros, infinities, and NaN values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Float64 has a safe integer range of 53 bits. Beyond that range,\n// you must lose precision.\n2**53 === 2**53+1;\n// → true\n\n// Float64 supports negative zeros, so -1 * 0 must be -0, but\n// there's no way to represent negative zero in two's complement.\n-1*0 === -0;\n// → true\n\n// Float64 has infinities which can be produced through division\n// by zero.\n1/0 === Infinity;\n// → true\n-1/0 === -Infinity;\n// → true\n\n// Float64 also has NaNs.\n0/0 === NaN;\n```\n\n----------------------------------------\n\nTITLE: Array-like Object forEach Operation\nDESCRIPTION: Shows how to use Array.prototype methods on array-like objects through function borrowing.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nArray.prototype.forEach.call(arrayLike, (value, index) => {\n  console.log(`${ index }: ${ value }`);\n});\n// This logs '0: a', then '1: b', and finally '2: c'.\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbol with a description in JavaScript\nDESCRIPTION: Shows how to create a Symbol with a description. The description parameter is optional and is provided as a string argument.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/symbol-description.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = Symbol('foo');\n//                    ^^^^^\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 for Liftoff-only WebAssembly Compilation\nDESCRIPTION: Command line flags to configure V8 and Chrome to use only the Liftoff compiler for WebAssembly, disabling the tiering up to TurboFan. This allows experimentation with baseline compilation performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-compilation-pipeline.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--liftoff --no-wasm-tier-up\n```\n\n----------------------------------------\n\nTITLE: Transitioning Array to HOLEY_ELEMENTS in JavaScript\nDESCRIPTION: Creates a hole in an array by assigning a value beyond its current length, transitioning the elements kind to HOLEY_ELEMENTS.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3, 4.56, 'x'];\n// elements kind: PACKED_ELEMENTS\narray.length; // 5\narray[9] = 1; // array[5] until array[8] are now holes\n// elements kind: HOLEY_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CPEAAPL Usage in JavaScript\nDESCRIPTION: These code snippets show how CPEAAPL is used to parse both arrow functions and parenthesized expressions, with the decision made based on the token following the CPEAAPL.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = (a, b) => { return a + b; };\n//      ^^^^^^\n//     CPEAAPL\n//             ^^\n//             The token following the CPEAAPL\n\nlet x = (a, 3);\n//      ^^^^^^\n//     CPEAAPL\n//            ^\n//            The token following the CPEAAPL\n```\n\n----------------------------------------\n\nTITLE: Using Static Import in a JavaScript Module\nDESCRIPTION: This example shows how to statically import a module using the ES2015 import statement. It imports all exports from the utils.mjs module and accesses both the default export and the named export.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/dynamic-import.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import * as module from './utils.mjs';\n  module.default();\n  // → logs 'Hi from the default export!'\n  module.doStuff();\n  // → logs 'Doing stuff…'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Capturing Stack Trace for Custom Exceptions in JavaScript\nDESCRIPTION: This function demonstrates how to use Error.captureStackTrace to add a stack property to a custom error object, capturing the stack trace at the time of call.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nError.captureStackTrace(error, constructorOpt)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TurboFan Optimization with Const Properties in JavaScript\nDESCRIPTION: This code snippet creates a Peak class and demonstrates how TurboFan optimizes property access. It shows the initial optimization, deoptimization, and re-optimization processes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// run as:\n// d8 --allow-natives-syntax --no-lazy-feedback-allocation --code-comments --print-opt-code\nfunction Peak(name, height) {\n  this.name = name;\n  this.height = height;\n}\n\nlet m1 = new Peak(\"Matterhorn\", 4478);\nm2 = new Peak(\"Wendelstein\", 1838);\n\n// Make sure slack tracking finishes.\nfor (let i = 0; i < 7; i++) new Peak(\"blah\", i);\n\nm2.cost = \"one arm, one leg\";\nfunction foo(a) {\n  return m2.cost;\n}\n\nfoo(3);\nfoo(3);\n%OptimizeFunctionOnNextCall(foo);\nfoo(3);\n```\n\n----------------------------------------\n\nTITLE: Compiling Arm Simulator Build\nDESCRIPTION: Commands for building V8 with Arm simulator support using gm build tool\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngm arm64.debug # For a 64-bit build or...\ngm arm.debug   # ... for a 32-bit build.\n```\n\n----------------------------------------\n\nTITLE: GN arguments for optdebug build\nDESCRIPTION: Configuration for optimized debug build settings in GN.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nis_debug=true\nv8_enable_backtrace=true\nv8_enable_slow_dchecks=true\n```\n\n----------------------------------------\n\nTITLE: Modulo Operation Performance with Different Number Representations\nDESCRIPTION: This snippet shows how the performance of the modulo operator depends on whether the values are represented as integers or floating-point numbers in memory, with integer operations being much faster.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst remainder = value % divisor;\n// Fast 🚀 if `value` and `divisor` are represented as integers,\n// slow 🐌 otherwise.\n```\n\n----------------------------------------\n\nTITLE: Specification-Compliant Class Implementation\nDESCRIPTION: Detailed implementation showing the actual behavior of private fields according to the specification.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  constructor() {\n    // What the %AddPrivateField() call roughly translates to:\n    const _a = %PrivateSymbol('#a')\n    if (_a in this) {\n      throw TypeError('Cannot initialize #a twice on the same object');\n    }\n    Object.defineProperty(this, _a, {\n      writable: true,\n      configurable: false,\n      enumerable: false,\n      value: 0\n    });\n    // What the %CreateDataProperty() call roughly translates to:\n    Object.defineProperty(this, 'b', {\n      writable: true,\n      configurable: true,\n      enumerable: true,\n      value: this[_a]\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Holes in Array Elements in JavaScript\nDESCRIPTION: This code illustrates how holes are created in arrays and how property lookups work with holes, including prototype chain traversal. It demonstrates the difference between defined properties and holes in an array's element store.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-properties.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst o = ['a', 'b', 'c'];\nconsole.log(o[1]);          // Prints 'b'.\n\ndelete o[1];                // Introduces a hole in the elements store.\nconsole.log(o[1]);          // Prints 'undefined'; property 1 does not exist.\no.__proto__ = {1: 'B'};     // Define property 1 on the prototype.\n\nconsole.log(o[0]);          // Prints 'a'.\nconsole.log(o[1]);          // Prints 'B'.\nconsole.log(o[2]);          // Prints 'c'.\nconsole.log(o[3]);          // Prints undefined\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 v5.3 Branch (Git)\nDESCRIPTION: Demonstrates the Git command to check out the V8 version 5.3 branch for developers with an active V8 checkout. This allows experimentation with new features in V8 5.3.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-53.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 5.3 -t branch-heads/5.3\n```\n\n----------------------------------------\n\nTITLE: Using await outside async function (old behavior)\nDESCRIPTION: Demonstrates how trying to use await directly at the top level previously resulted in a SyntaxError, and shows the workaround using an immediately-invoked async function expression.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/top-level-await.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait Promise.resolve(console.log('🎉'));\n// → SyntaxError: await is only valid in async function\n\n(async function() {\n  await Promise.resolve(console.log('🎉'));\n  // → 🎉\n}());\n```\n\n----------------------------------------\n\nTITLE: JavaScript Vector Sum using WebAssembly Function\nDESCRIPTION: JavaScript implementation that demonstrates calling a WebAssembly function to perform vector addition. Includes performance measurement code and array initialization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-90.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst addNumbers = instance.exports.addNumbers;\n\nfunction vectorSum(len, v1, v2) {\n  const result = new Float64Array(len);\n  for (let i = 0; i < len; i++) {\n    result[i] = addNumbers(v1[i], v2[i]);\n  }\n  return result;\n}\n\nconst N = 100_000_000;\nconst v1 = new Float64Array(N);\nconst v2 = new Float64Array(N);\nfor (let i = 0; i < N; i++) {\n  v1[i] = Math.random();\n  v2[i] = Math.random();\n}\n\n// Warm up.\nfor (let i = 0; i < 5; i++) {\n  vectorSum(N, v1, v2);\n}\n\n// Measure.\nconsole.time();\nconst result = vectorSum(N, v1, v2);\nconsole.timeEnd();\n```\n\n----------------------------------------\n\nTITLE: BigInt Formatting with Intl.NumberFormat\nDESCRIPTION: Shows how to format BigInt values using Intl.NumberFormat with French locale.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('fr');\nformatter.format(12345678901234567890n);\n// → '12 345 678 901 234 567 890'\nformatter.formatToParts(123456n);\n// → [\n// →   { type: 'integer', value: '123' },\n// →   { type: 'group', value: ' ' },\n// →   { type: 'integer', value: '456' }\n// → ]\n```\n\n----------------------------------------\n\nTITLE: Using globalThis in JavaScript\nDESCRIPTION: A simple example showing how to use the standardized globalThis property to access the global this in any JavaScript environment. This unified approach works consistently across browsers, Node.js, and other JavaScript environments.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/globalthis.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst theGlobalThis = globalThis;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Overflow in BigInt64Array in JavaScript\nDESCRIPTION: Illustrates how BigInt64Array ensures values remain within the signed 64-bit limit, showing overflow behavior when exceeding this range.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Highest possible BigInt value that can be represented as a\n// signed 64-bit integer.\nconst max = 2n ** (64n - 1n) - 1n;\nview[0] = max;\nview[0];\n// → 9_223_372_036_854_775_807n\nview[0] = max + 1n;\nview[0];\n// → -9_223_372_036_854_775_808n\n//   ^ negative because of overflow\n```\n\n----------------------------------------\n\nTITLE: Using BigInt TypedArrays in JavaScript\nDESCRIPTION: This example demonstrates how to work with the new BigInt64Array TypedArray, showing that elements must be BigInt values and that attempting to use regular Numbers will throw a TypeError.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/bigint.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n> const big_array = new BigInt64Array(1);\n> big_array[0] = 123n;  // OK\n> big_array[0]\n123n\n> big_array[0] = 456;\nTypeError: Cannot convert 456 to a BigInt\n> big_array[0] = BigInt(456);  // OK\n```\n\n----------------------------------------\n\nTITLE: Micro-benchmark for Testing Optimized Function Unlinking Performance\nDESCRIPTION: A benchmark that demonstrates the performance impact of the previous unlinking approach by creating many closures and triggering garbage collection cycles. The code stresses V8's data structures that track optimized JavaScript functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction g() {\n  return (i) => i + 1;\n}\n\n// Create an initial closure and optimize.\nvar f = g();\n\nf(0);\nf(0);\n%OptimizeFunctionOnNextCall(f);\nf(0);\n\n// Create 2M closures; those will get the previously optimized code.\nvar a = [];\nfor (var i = 0; i < 2000000; i++) {\n  var h = g();\n  h();\n  a.push(h);\n}\n\n// Now cause scavenges; all of them are slow.\nfor (var i = 0; i < 1000; i++) {\n  new Array(50000);\n}\n```\n\n----------------------------------------\n\nTITLE: ASI-Modified Code Example\nDESCRIPTION: The result of ASI applying to the previous example, showing why grammar-level restrictions on 'await' as an identifier would be problematic.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nasync function too_few_semicolons() {\n  let;\n  await 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Class with Constructor Parameter\nDESCRIPTION: Defines a simple Animal base class using ES2015 class syntax. It has a constructor that accepts a name parameter and assigns it to an instance property.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript DataView Wrapper Implementation\nDESCRIPTION: Implementation of a DataView-like wrapper using Uint8Array for performance comparison, showing little-endian 32-bit unsigned integer reads.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/dataview.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction LittleEndian(buffer) { // Simulate little-endian DataView reads.\n  this.uint8View_ = new Uint8Array(buffer);\n}\n\nLittleEndian.prototype.getUint32 = function(byteOffset) {\n  return this.uint8View_[byteOffset] |\n    (this.uint8View_[byteOffset + 1] << 8) |\n    (this.uint8View_[byteOffset + 2] << 16) |\n    (this.uint8View_[byteOffset + 3] << 24);\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Default Parameters with Destructuring\nDESCRIPTION: Demonstrates how to combine default parameters with array destructuring in function declarations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction vector([x, y, z] = []) { … }\n```\n\n----------------------------------------\n\nTITLE: V8 Optimized Assembly Output for Object Creation\nDESCRIPTION: Assembly code showing how V8's TurboFan compiler implements inlined object allocation and initialization. Demonstrates bump-pointer allocation, field initialization, and map transitions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_9\n\nLANGUAGE: assembly\nCODE:\n```\n…\n43  mov ecx,[ebx+0x5dfa4]\n49  lea edi,[ecx+0x1c]\n4c  cmp [ebx+0x5dfa8],edi       ;; hey GC, can we have 28 (0x1c) bytes please?\n52  jna 0x36ec4a5a  <+0x11a>\n\n58  lea edi,[ecx+0x1c]\n5b  mov [ebx+0x5dfa4],edi       ;; okay GC, we took it. KThxbye.\n61  add ecx,0x1                 ;; hells yes. ecx is my new object.\n64  mov edi,0x46647295          ;; object: 0x46647295 <Map(HOLEY_ELEMENTS)>\n69  mov [ecx-0x1],edi           ;; Store the INITIAL MAP.\n6c  mov edi,0x56f821a1          ;; object: 0x56f821a1 <FixedArray[0]>\n71  mov [ecx+0x3],edi           ;; Store the PROPERTIES backing store (empty)\n74  mov [ecx+0x7],edi           ;; Store the ELEMENTS backing store (empty)\n77  mov edi,0x56f82329          ;; object: 0x56f82329 <undefined>\n7c  mov [ecx+0xb],edi           ;; in-object property 1 <-- undefined\n7f  mov [ecx+0xf],edi           ;; in-object property 2 <-- undefined\n82  mov [ecx+0x13],edi          ;; in-object property 3 <-- undefined\n85  mov [ecx+0x17],edi          ;; in-object property 4 <-- undefined\n88  mov edi,[ebp+0xc]           ;; retrieve argument {a1}\n8b  test_w edi,0x1\n90  jz 0x36ec4a6d  <+0x12d>\n96  mov eax,0x4664735d          ;; object: 0x4664735d <Map(HOLEY_ELEMENTS)>\n9b  mov [ecx-0x1],eax           ;; push the map forward\n9e  mov [ecx+0xb],edi           ;; name = {a1}\na1  mov eax,[ebp+0x10]          ;; retrieve argument {a2}\na4  test al,0x1\na6  jnz 0x36ec4a77  <+0x137>\nac  mov edx,0x46647385          ;; object: 0x46647385 <Map(HOLEY_ELEMENTS)>\nb1  mov [ecx-0x1],edx           ;; push the map forward\nb4  mov [ecx+0xf],eax           ;; height = {a2}\nb7  cmp eax,0x1f40              ;; is height >= 4000?\nbc  jng 0x36ec4a32  <+0xf2>\n                  -- B8 start --\n                  -- B9 start --\nc2  mov edx,[ebp+0x14]          ;; retrieve argument {a3}\nc5  test_b dl,0x1\nc8  jnz 0x36ec4a81  <+0x141>\nce  mov esi,0x466473ad          ;; object: 0x466473ad <Map(HOLEY_ELEMENTS)>\nd3  mov [ecx-0x1],esi           ;; push the map forward\nd6  mov [ecx+0x13],edx          ;; prominence = {a3}\nd9  mov esi,[ebp+0x18]          ;; retrieve argument {a4}\ndc  test_w esi,0x1\ne1  jz 0x36ec4a8b  <+0x14b>\ne7  mov edi,0x466473d5          ;; object: 0x466473d5 <Map(HOLEY_ELEMENTS)>\nec  mov [ecx-0x1],edi           ;; push the map forward to the leaf map\nef  mov [ecx+0x17],esi          ;; isClimbed = {a4}\n                  -- B10 start (deconstruct frame) --\nf2  mov eax,ecx                 ;; get ready to return this great Peak object!\n…\n```\n\n----------------------------------------\n\nTITLE: Loading Double Elements in V8 Torque\nDESCRIPTION: Implementation of element loading operation for FixedDoubleArray in V8 Torque. Handles loading double values with hole checking and includes bailout logic for array modifications.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_4\n\nLANGUAGE: torque\nCODE:\n```\nLoad<FastDoubleElements>(\n    context: Context, sortState: FixedArray, elements: HeapObject,\n    index: Smi): Object {\n  try {\n    const elems: FixedDoubleArray = UnsafeCast<FixedDoubleArray>(elements);\n    const value: float64 =\n        LoadDoubleWithHoleCheck(elems, index) otherwise Bailout;\n    return AllocateHeapNumberWithValue(value);\n  }\n  label Bailout {\n    // The pre-processing step removed all holes by compacting all elements\n    // at the start of the array. Finding a hole means the cmp function or\n    // ToString changes the array.\n    return Failure(sortState);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple HeapNumber Allocations Example\nDESCRIPTION: Demonstrates how multiple HeapNumber instances are created when repeatedly updating a floating-point property.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a `HeapNumber` instance.\nconst o = { x: 0.1 };\n\nfor (let i = 0; i < 5; ++i) {\n  // Create an additional `HeapNumber` instance.\n  o.x += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Running V8 Tests Manually with run-tests.py\nDESCRIPTION: Using the run-tests.py script directly to execute V8 tests when the engine is already built. This requires specifying the output directory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntools/run-tests.py --outdir=out/ia32.release\n```\n\n----------------------------------------\n\nTITLE: V8 Number Representation Example\nDESCRIPTION: Example showing how V8 handles JavaScript numbers internally, using 31-bit tagged integers (Smi) for small integers and 64-bit floating point for other numbers. This optimization saves memory through pointer compression and improves performance for integer operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/maglev.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Small Integer (Smi) representation\nconst smallInt = 42;  // Stored as 31-bit tagged integer\n\n// Floating point representation\nconst floatNum = 42.5;  // Stored as 64-bit float\n```\n\n----------------------------------------\n\nTITLE: Private Fields Access Error Example\nDESCRIPTION: Demonstration of how attempting to access private fields outside of a class results in a SyntaxError.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-74.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = new IncreasingCounter();\ncounter.#count;\n// → SyntaxError\ncounter.#count = 42;\n// → SyntaxError\n```\n\n----------------------------------------\n\nTITLE: Challenges with RegExp-based Replacement in JavaScript\nDESCRIPTION: Illustrates the error-prone nature of converting strings to regular expressions for global replacement, particularly when dealing with characters that have special meaning in regular expressions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryString = 'q=query+string+parameters';\n\nqueryString.replace('+', ' ');\n// → 'q=query string+parameters' ❌\n// Only the first occurrence gets replaced.\n\nqueryString.replace(/+/, ' ');\n// → SyntaxError: invalid regular expression ❌\n// As it turns out, `+` is a special character within regexp patterns.\n\nqueryString.replace(/\\+/, ' ');\n// → 'q=query string+parameters' ❌\n// Escaping special regexp characters makes the regexp valid, but\n// this still only replaces the first occurrence of `+` in the string.\n\nqueryString.replace(/\\+/g, ' ');\n// → 'q=query string parameters' ✅\n// Escaping special regexp characters AND using the `g` flag makes it work.\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript Modules in HTML\nDESCRIPTION: Shows how to include JavaScript modules in HTML using the script tag with type=\"module\" attribute. Also demonstrates how to provide a fallback for browsers that don't support modules using the nomodule attribute.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"main.mjs\"></script>\n<script nomodule src=\"fallback.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Prototype Chain Property Lookup in JavaScript\nDESCRIPTION: This example demonstrates how properties are looked up in the prototype chain. It creates an object o1 with property 'foo', sets it as the prototype of o2, and shows that accessing o2.foo retrieves the value from o1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-2.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst o1 = { foo: 99 };\nconst o2 = {};\nObject.setPrototypeOf(o2, o1);\no2.foo;\n// → 99\n```\n\n----------------------------------------\n\nTITLE: Array Map and Flat Combined\nDESCRIPTION: Demonstrates flattening a mapped array using separate map and flat operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/array-flat-flatmap.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[2, 3, 4].map(duplicate).flat(); // 🐌\n// → [2, 2, 3, 3, 4, 4]\n```\n\n----------------------------------------\n\nTITLE: WebAssembly GCD Implementation Example\nDESCRIPTION: An example implementation of the Greatest Common Divisor (GCD) function shown in three formats: raw bytes (binary format), text format (WAST), and original C source code. This demonstrates WebAssembly's compilation and representation capabilities.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/webassembly-browser-preview.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[Image reference showing GCD implementation - actual code not provided in text]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Types with typeof Operator\nDESCRIPTION: This snippet shows how the typeof operator returns the JavaScript type of various values, with the notable exception of null which returns 'object' despite having its own Null type.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof 42;\n// → 'number'\ntypeof 'foo';\n// → 'string'\ntypeof Symbol('bar');\n// → 'symbol'\ntypeof 42n;\n// → 'bigint'\ntypeof true;\n// → 'boolean'\ntypeof undefined;\n// → 'undefined'\ntypeof null;\n// → 'object' 🤔\ntypeof { x: 42 };\n// → 'object'\n```\n\n----------------------------------------\n\nTITLE: Running V8 tests with a specific output directory\nDESCRIPTION: Executes the V8 test suite using the binaries in the specified output directory, with test flags inferred from the build configuration.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntools/run-tests.py --outdir out/foo\n```\n\n----------------------------------------\n\nTITLE: RegExp Match Indices with /d Flag in JavaScript\nDESCRIPTION: Demonstrates the new RegExp match indices feature that provides start and end positions of matched capture groups using the /d flag. The indices are accessible via the .indices property on match objects.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-90.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /(a)(b)/d;      // Note the /d flag.\nconst m = re.exec('ab');\nconsole.log(m.indices[0]); // Index 0 is the whole match.\n// → [0, 2]\nconsole.log(m.indices[1]); // Index 1 is the 1st capture group.\n// → [0, 1]\nconsole.log(m.indices[2]); // Index 2 is the 2nd capture group.\n// → [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Comparing Branchful and Smi-corrupting Decompression in Assembly\nDESCRIPTION: This snippet compares the assembly code for branchful and Smi-corrupting decompression methods. It shows the reduction in code size and complexity achieved by the Smi-corrupting approach.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_10\n\nLANGUAGE: asm\nCODE:\n```\n# Branchful\nmovsxlq r11,[…]\ntestb r11,0x1\njz done\naddq r11,r13\ndone:\n```\n\nLANGUAGE: asm\nCODE:\n```\n# Smi-corrupting\nmovl r11,[rax+0x13]\naddq r11,r13\n```\n\n----------------------------------------\n\nTITLE: Running V8 Presubmit Checks with Git\nDESCRIPTION: Command to run presubmit checks before code submission. This uses cpplint.py from Google to verify code style compliance with Google C++ Style Guide. Requires depot_tools to be in PATH.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/contribute.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit cl presubmit\n```\n\n----------------------------------------\n\nTITLE: Shape Transition with preventExtensions\nDESCRIPTION: Shows how V8 handles shape transitions when preventing extensions on objects.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = { x: 1 };\nconst b = { x: 2 };\n\nObject.preventExtensions(b);\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Escape for 'await' in Non-Async Function\nDESCRIPTION: Example showing that using a Unicode escape sequence to represent 'await' as an identifier is allowed in non-async functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction old() {\n  var \\u0061wait;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Async Function in JavaScript\nDESCRIPTION: This snippet demonstrates the simplest possible async function that returns a constant value. When called, it returns a promise that resolves to the value 42.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function computeAnswer() {\n  return 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Using set notation with properties of strings and string literals\nDESCRIPTION: Example showing how to use set notation with properties of strings and the `\\q{...}` string literal syntax to match RGI emoji tag sequences except for a specific one.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: 🏴󠁧󠁢󠁳󠁣󠁴󠁿 consists of 7 code points.\n\n/^\\p{RGI_Emoji_Tag_Sequence}$/v.test('🏴󠁧󠁢󠁳󠁣󠁴󠁿'); // → true\n/^[\\p{RGI_Emoji_Tag_Sequence}--\\q{🏴󠁧󠁢󠁳󠁣󠁴󠁿}]$/v.test('🏴󠁧󠁢󠁳󠁣󠁴󠁿'); // → false\n```\n\n----------------------------------------\n\nTITLE: Testing Stub-Linkage Builtin in C++\nDESCRIPTION: C++ test case for the MathIs42 builtin using the StubTester framework to verify functionality across all platforms.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/torque-builtins.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(MathIsHeapNumber42) {\n  HandleAndZoneScope scope;\n  Isolate* isolate = scope.main_isolate();\n  Heap* heap = isolate->heap();\n  Zone* zone = scope.main_zone();\n\n  StubTester tester(isolate, zone, Builtins::kMathIs42);\n  Handle<Object> result1 = tester.Call(Handle<Smi>(Smi::FromInt(0), isolate));\n  CHECK(result1->BooleanValue());\n}\n```\n\n----------------------------------------\n\nTITLE: Checking V8 API Changes with Git\nDESCRIPTION: Git command to view API changes between V8 versions 7.3 and 7.4 in the include/v8.h file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-74.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/7.3..branch-heads/7.4 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Optimizing for-of Loops with TurboFan Compiler\nDESCRIPTION: This code demonstrates a for-of loop which could now be optimized by V8's TurboFan compiler in v4.5. Prior to this release, code using for-of loops and other modern JavaScript features couldn't be fully optimized by V8's Crankshaft compiler.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-45.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequence = ['First', 'Second', 'Third'];\nfor (const value of sequence) {\n  // This scope is now optimizable.\n  const object = {a: 'Hello, ', b: 'world!', c: value};\n  console.log(object.a + object.b + object.c);\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Surrogate Pairs for Identifier Start in V8 Scanner\nDESCRIPTION: This code snippet shows how V8's scanner combines surrogate pairs to check if the result is a valid identifier start. It's part of the scanner's process to handle characters in supplementary planes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/scanner.md#2025-04-10_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// Combining surrogate pairs at the start of token scanning\ncombine()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BigInt Arithmetic Operations in JavaScript\nDESCRIPTION: This code snippet shows basic BigInt operations including multiplication and exponentiation, highlighting the difference between BigInt and Number precision when working with large integers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/bigint.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 2172141653n;\nconst b = 15346349309n;\na * b;\n// → 33334444555566667777n     // Yay!\nNumber(a) * Number(b);\n// → 33334444555566670000      // Boo!\nconst such_many = 2n ** 222n;\n// → 6739986666787659948666753771754907668409286105635143120275902562304n\n```\n\n----------------------------------------\n\nTITLE: Optimized Pointer Compression Using Isolate\nDESCRIPTION: Improved implementation using V8 instance (Isolate) pointer as compression base to address performance issues. Eliminates need for base value computation in every load.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nDescriptorArray Map::instance_descriptors(const Isolate* isolate) const {\n  uintptr_t field_address =\n      FieldAddress(ptr_, kInstanceDescriptorsOffset);\n\n  uint32_t compressed_da = *reinterpret_cast<uint32_t*>(field_address);\n\n  // No rounding is needed since the Isolate pointer is already the base.\n  uintptr_t base = reinterpret_cast<uintptr_t>(isolate);\n  uintptr_t da = DecompressTagged(base, compressed_value);\n  return DescriptorArray(da);\n}\n```\n\n----------------------------------------\n\nTITLE: Identifier Grammar Production\nDESCRIPTION: Grammar production showing that an Identifier is an IdentifierName that is not a ReservedWord, explaining why 'await' cannot directly be an Identifier.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_13\n\nLANGUAGE: grammar\nCODE:\n```\nIdentifier :\n  IdentifierName but not ReservedWord\n```\n\n----------------------------------------\n\nTITLE: Equivalent Function Using Promise.resolve in JavaScript\nDESCRIPTION: This snippet shows a function that is semantically equivalent to the simple async function, using Promise.resolve to return a promise that resolves to 42.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction computeAnswer() {\n  return Promise.resolve(42);\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Inspector Test Expectations\nDESCRIPTION: Using run-tests.py to update the expected output files for inspector tests after making changes. This ensures that test expectations match the actual output.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntools/run-tests.py --regenerate-expected-files --outdir=ia32.release inspector/debugger/set-instrumentation-breakpoint\n```\n\n----------------------------------------\n\nTITLE: Core Sparkplug Compiler Implementation in C++\nDESCRIPTION: The main compilation loop of the Sparkplug compiler that transforms bytecode into machine code. It performs a linear pass over the bytecode, using a switch statement inside a for loop to generate machine code for each bytecode instruction. The implementation is deliberately simple to maintain high compilation speed.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sparkplug.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// The Sparkplug compiler (abridged).\nfor (; !iterator.done(); iterator.Advance()) {\n  VisitSingleBytecode();\n}\n```\n\n----------------------------------------\n\nTITLE: Branchless Decompression of 32-bit Tagged Values in V8 (C++)\nDESCRIPTION: A branchless implementation of the decompression algorithm using bit manipulation for potentially better performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint32_t compressed_tagged;\n\n// Same code for both pointer and Smi cases\nint64_t sign_extended_tagged = int64_t(compressed_tagged);\nint64_t selector_mask = -(sign_extended_tagged & 1);\n// Mask is 0 in case of Smi or all 1s in case of pointer\nint64_t uncompressed_tagged =\n    sign_extended_tagged + (base & selector_mask);\n```\n\n----------------------------------------\n\nTITLE: CQ Trybot Configuration\nDESCRIPTION: Example of adding additional trybots to commit message in Gerrit.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCQ_INCLUDE_TRYBOTS=tryserver.v8:v8_linux_nosnap_rel\n```\n\n----------------------------------------\n\nTITLE: Displaying Simplified Stack Frame in V8\nDESCRIPTION: This snippet shows the simplified format used when only one of functionName or methodName is available, or when they are the same. It includes the type, name, and location.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nat Type.name (location)\n```\n\n----------------------------------------\n\nTITLE: AsyncLock Class Definition\nDESCRIPTION: Defines an AsyncLock class that implements a mutex pattern using SharedArrayBuffer and atomic operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/atomics.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass AsyncLock {\n  static INDEX = 0;\n  static UNLOCKED = 0;\n  static LOCKED = 1;\n\n  constructor(sab) {\n    this.sab = sab;\n    this.i32a = new Int32Array(sab);\n  }\n\n  lock() {\n    /* … */\n  }\n\n  unlock() {\n    /* … */\n  }\n\n  executeLocked(f) {\n    /* … */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using intersection to match ASCII white space\nDESCRIPTION: Example showing how to use the intersection operator to match only characters that are both whitespace and ASCII, excluding Unicode whitespace characters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /[\\p{White_Space}&&\\p{ASCII}]/v;\nre.test('\\n'); // → true\nre.test('\\u2028'); // → false\n```\n\n----------------------------------------\n\nTITLE: Using Unicode character property escapes with the `u` flag\nDESCRIPTION: Example showing how to use Unicode character property escapes with the `u` flag to match Greek script symbols. This demonstrates the ES2018 feature for accessing Unicode character properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst regexGreekSymbol = /\\p{Script_Extensions=Greek}/u;\nregexGreekSymbol.test('π');\n// → true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Signed Shift Overflow\nDESCRIPTION: These examples show how signed right shift (>>) can cause overflow issues with large memory addresses, necessitating a switch to unsigned right shift (>>>).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/4gb-wasm-memory.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Just below 2GB is ok, this prints 536870911\nconsole.log((2 * 1024 * 1024 * 1024 - 4) >> 2);\n// 2GB overflows and we get -536870912 :(\nconsole.log((2 * 1024 * 1024 * 1024) >> 2);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ES2018 Behavior with LINE SEPARATOR and PARAGRAPH SEPARATOR Characters\nDESCRIPTION: This code shows how ES2018 did not allow unescaped U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in string literals, resulting in SyntaxErrors.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A string containing a raw U+2028 character.\nconst LS = ' ';\n// → ES2018: SyntaxError\n\n// A string containing a raw U+2029 character, produced by `eval`:\nconst PS = eval('\"\\u2029\"');\n// → ES2018: SyntaxError\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Revised Function.prototype.toString in JavaScript\nDESCRIPTION: This example compares the old and new behavior of Function.prototype.toString(). It shows how the new implementation preserves comments and whitespace in the function declaration, returning the exact source code text instead of a normalized representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/function-tostring.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Note the comment between the `function` keyword\n// and the function name, as well as the space following\n// the function name.\nfunction /* a comment */ foo () {}\n\n// Previously, in V8:\nfoo.toString();\n// → 'function foo() {}'\n//             ^ no comment\n//                ^ no space\n\n// Now:\nfoo.toString();\n// → 'function /* comment */ foo () {}'\n```\n\n----------------------------------------\n\nTITLE: Using String.prototype.replaceAll for Global Substring Replacement in JavaScript\nDESCRIPTION: Demonstrates the new String.prototype.replaceAll method which directly supports global substring replacement without the need for regular expressions or other workarounds.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n'aabbcc'.replaceAll('b', '_');\n// → 'aa__cc'\n\n'🍏🍏🍋🍋🍊🍊🍓🍓'.replaceAll('🍏', '🥭');\n// → '🥭🥭🍋🍋🍊🍊🍓🍓'\n\nconst queryString = 'q=query+string+parameters';\nqueryString.replaceAll('+', ' ');\n// → 'q=query string parameters'\n```\n\n----------------------------------------\n\nTITLE: Finding V8 branch information using URL pattern\nDESCRIPTION: Shows the URL pattern to access the branch information for a specific V8 version. Users can replace X.Y with their desired version number to view the branch details on the Chromium code repository.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/discontinuing-release-posts.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://chromium.googlesource.com/v8/v8.git/+log/branch-heads/X.Y\n```\n\n----------------------------------------\n\nTITLE: Enabling GC Object Statistics in V8 Tracing\nDESCRIPTION: This JavaScript flags configuration enables tracking of garbage collection object statistics and disables incremental marking, which is required for collecting GC object statistics in V8 traces.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/trace.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--track_gc_object_stats --noincremental-marking\n```\n\n----------------------------------------\n\nTITLE: Basic Conjunction List Formatting in English\nDESCRIPTION: Demonstrates how to create and use an Intl.ListFormat instance for formatting lists with conjunctions (using 'and') in English.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-listformat.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst lf = new Intl.ListFormat('en');\nlf.format(['Frank']);\n// → 'Frank'\nlf.format(['Frank', 'Christine']);\n// → 'Frank and Christine'\nlf.format(['Frank', 'Christine', 'Flora']);\n// → 'Frank, Christine, and Flora'\nlf.format(['Frank', 'Christine', 'Flora', 'Harrison']);\n// → 'Frank, Christine, Flora, and Harrison'\n```\n\n----------------------------------------\n\nTITLE: Runtime Function Call Example\nDESCRIPTION: Demonstrates the syntax for calling V8 runtime functions from JavaScript using the %-prefix. These calls require the --allow-natives-syntax flag for debugging purposes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/builtin-functions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n%RuntimeFunction()\n```\n\n----------------------------------------\n\nTITLE: Using Static Root Address in C++ Compilation\nDESCRIPTION: This example shows how V8 uses the pre-computed static root address when compiling libv8. It demonstrates replacing a dynamic root lookup with a hardcoded offset from the cage base.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/static-roots.md#2025-04-10_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nObject* undefined = cage_base + StaticRoot::kUndefined;\n```\n\n----------------------------------------\n\nTITLE: Processing V8 Profiler Log on Windows\nDESCRIPTION: This command processes the V8 profiler log file (v8.log) on Windows using the tick processor script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntools\\windows-tick-processor.bat v8.log\n```\n\n----------------------------------------\n\nTITLE: Running Chrome with V8 Profiler for Web Applications\nDESCRIPTION: This command launches Chrome with V8 profiling enabled for a specific URL. It generates a v8.log file with profiling data for the specified web application.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./chrome --js-flags='--prof' --no-sandbox 'http://localhost:8080/'\n```\n\n----------------------------------------\n\nTITLE: Defining Peak Class with Optional Properties in JavaScript\nDESCRIPTION: This JavaScript code defines a Peak class with optional properties based on the height of the peak. It demonstrates how V8 handles objects with varying numbers of properties, which affects the map structure.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Peak(name, height, prominence, isClimbed) {\n  this.name = name;\n  this.height = height;\n  if (height >= 4000) {\n    this.prominence = prominence;\n    this.isClimbed = isClimbed;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Paint Worklet Module in JavaScript\nDESCRIPTION: Demonstrates how to add a paint worklet module using the CSS Paint API. This allows customization of how DOM elements are painted.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await css.paintWorklet.addModule('paint-worklet.mjs');\n```\n\n----------------------------------------\n\nTITLE: Matching non-ASCII digits using set notation difference\nDESCRIPTION: Example showing how to match only non-ASCII digits by using the difference operator to subtract ASCII digits from the Unicode Decimal_Number property set.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/[\\p{Decimal_Number}--[0-9]]/v.test('𑜹'); // → true\n/[\\p{Decimal_Number}--[0-9]]/v.test('4'); // → false\n```\n\n----------------------------------------\n\nTITLE: Compiling WebAssembly with JSPI Support using Emscripten\nDESCRIPTION: This shell command demonstrates how to compile a C program to WebAssembly using Emscripten's emcc compiler with JSPI support enabled. It generates an HTML file that can be loaded in a browser.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nemcc -O3 badfib.c -o b.html -s JSPI\n```\n\n----------------------------------------\n\nTITLE: Using Unicode Escape for 'await' in Async Function\nDESCRIPTION: Example showing that even using a Unicode escape sequence to represent 'await' as an identifier is disallowed in async functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nasync function modern() {\n  var \\u0061wait; // Syntax error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Proxy with Reflect API\nDESCRIPTION: Demonstrates creating a debugging proxy using both Proxy and Reflect API for property access logging.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst debugMe = new Proxy({}, {\n  get(target, name, receiver) {\n    console.log(`Debug: get called for field: ${name}`);\n    return Reflect.get(target, name, receiver);\n  },\n  set(target, name, value, receiver) {\n    console.log(`Debug: set called for field: ${name}, and value: ${value}`);\n    return Reflect.set(target, name, value, receiver);\n  }\n});\n\ndebugMe.name = 'John Doe';\n// Debug: set called for field: name, and value: John Doe\nconst title = `Mr. ${debugMe.name}`; // → 'Mr. John Doe'\n// Debug: get called for field: name\n```\n\n----------------------------------------\n\nTITLE: Creating Shared and Service Workers with Modules in JavaScript\nDESCRIPTION: Demonstrates creating SharedWorker and registering ServiceWorker using JavaScript modules. This feature is planned for future implementation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = new SharedWorker('worker.mjs', { type: 'module' });\nconst registration = await navigator.serviceWorker.register('worker.mjs', { type: 'module' });\n```\n\n----------------------------------------\n\nTITLE: Problematic Property Name Collection\nDESCRIPTION: Example of code that becomes problematic with sandbox implementation due to potential integer corruption affecting vector bounds.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sandbox.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<std::string> JSObject::GetPropertyNames() {\n    int num_properties = TotalNumberOfProperties();\n    std::vector<std::string> properties(num_properties);\n\n    for (int i = 0; i < NumberOfInObjectProperties(); i++) {\n        properties[i] = GetNameOfInObjectProperty(i);\n    }\n\n    // Deal with the other types of properties\n    // ...\n```\n\n----------------------------------------\n\nTITLE: Using BigInt.toLocaleString for Locale-aware Formatting in JavaScript\nDESCRIPTION: Demonstrates how to format BigInt values in a locale-aware manner using the toLocaleString method. The examples show formatting for English and German locales, which handle digit grouping differently based on locale conventions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-76.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n12345678901234567890n.toLocaleString('en'); // 🐌\n// → '12,345,678,901,234,567,890'\n12345678901234567890n.toLocaleString('de'); // 🐌\n// → '12.345.678.901.234.567.890'\n```\n\n----------------------------------------\n\nTITLE: Reference to PACKED_SMI_ELEMENTS Type\nDESCRIPTION: Reference to a specific ElementsKind type used in V8 for arrays containing only small integers (SMIs).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nPACKED_SMI_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: Examining Arm64 Assembly and Register States\nDESCRIPTION: This snippet shows Arm64 assembly instructions for loading and comparing values, along with the resulting register states after each instruction.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_5\n\nLANGUAGE: assembly\nCODE:\n```\n0x00007f1e00082c94  7200005f            tst w2, #0x1\n# NZCV: N:0 Z:1 C:0 V:0\n0x00007f1e00082c98  54000ac1            b.ne #+0x158 (addr 0x7f1e00082df0)\n0x00007f1e00082c9c  f9401be3            ldr x3, [sp, #48]\n#    x3: 0x000000000000000e <- 0x00007f1f821f0270\n0x00007f1e00082ca0  7200007f            tst w3, #0x1\n# NZCV: N:0 Z:1 C:0 V:0\n0x00007f1e00082ca4  54000a81            b.ne #+0x150 (addr 0x7f1e00082df4)\n\n# Then we untag and add 'a' and 'b' together.\n0x00007f1e00082ca8  13017c44            asr w4, w2, #1\n#    x4: 0x0000000000000005\n0x00007f1e00082cac  2b830484            adds w4, w4, w3, asr #1\n# NZCV: N:0 Z:0 C:0 V:0\n#    x4: 0x000000000000000c\n# That's 5 + 7 == 12, all good!\n\n# Then we check for overflows and tag the result again.\n0x00007f1e00082cb0  54000a46            b.vs #+0x148 (addr 0x7f1e00082df8)\n0x00007f1e00082cb4  2b040082            adds w2, w4, w4\n# NZCV: N:0 Z:0 C:0 V:0\n#    x2: 0x0000000000000018\n0x00007f1e00082cb8  54000466            b.vs #+0x8c (addr 0x7f1e00082d44)\n\n\n# And finally we place the result in x0.\n0x00007f1e00082cbc  aa0203e0            mov x0, x2\n#    x0: 0x0000000000000018\n```\n\n----------------------------------------\n\nTITLE: Using difference/subtraction with `--` in set notation\nDESCRIPTION: Example showing how to use the difference/subtraction operator (`--`) in character classes with the `v` flag to match all Greek symbols except for specific characters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/[\\p{Script_Extensions=Greek}--π]/v.test('π'); // → false\n```\n\n----------------------------------------\n\nTITLE: Loading Embedded Address in x64 Assembly for V8 Builtins\nDESCRIPTION: An example of how V8 previously loaded embedded addresses into registers, which was problematic for sharing builtins across processes because it embedded direct heap addresses that required GC patching when objects moved.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/embedded-builtins.md#2025-04-10_snippet_0\n\nLANGUAGE: assembly\nCODE:\n```\n// Load an embedded address into register rbx.\nREX.W movq rbx,0x56526afd0f70\n```\n\n----------------------------------------\n\nTITLE: Implementing Write Barrier for Incremental Marking in V8\nDESCRIPTION: This code snippet shows the implementation of a Dijkstra-style write barrier in V8. It's called after each write operation to maintain the strong tri-color invariant, ensuring that no black object points to a white object during incremental marking.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/concurrent-marking.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Called after `object.field = value`.\nwrite_barrier(object, field_offset, value) {\n  if (color(object) == black && color(value) == white) {\n    set_color(value, grey);\n    marking_worklist.push(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Int32Add1 for x64 Architecture\nDESCRIPTION: This change adds the x64-specific implementation of Int32Add1 in the instruction selector. It emits the kX64Int32Add1 instruction with the appropriate operands, ensuring the output register is the same as the first input register.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/backend/x64/instruction-selector-x64.cc b/src/compiler/backend/x64/instruction-selector-x64.cc\nindex 2324e119a6..4b55671243 100644\n--- a/src/compiler/backend/x64/instruction-selector-x64.cc\n+++ b/src/compiler/backend/x64/instruction-selector-x64.cc\n@@ -841,6 +841,11 @@ void InstructionSelector::VisitWord32ReverseBytes(Node* node) {\n   Emit(kX64Bswap32, g.DefineSameAsFirst(node), g.UseRegister(node->InputAt(0)));\n }\n \n+void InstructionSelector::VisitInt32Add1(Node* node) {\n+  X64OperandGenerator g(this);\n+  Emit(kX64Int32Add1, g.DefineSameAsFirst(node), g.UseRegister(node->InputAt(0)));\n+}\n+\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Module Content\nDESCRIPTION: Example of a simple JSON module containing a single key-value pair.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"answer\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Relaxed Atomic Write Barrier in V8 (C++)\nDESCRIPTION: This snippet shows an optimized write barrier implementation using relaxed atomic writes. It checks the color of the value being written and atomically transitions it from white to grey if necessary, pushing it to the marking worklist.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/concurrent-marking.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Called after atomic_relaxed_write(&object.field, value);\nwrite_barrier(object, field_offset, value) {\n  if (color(value) == white && atomic_color_transition(value, white, grey)) {\n    marking_worklist.push(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebAssembly I64 Functions with JavaScript BigInts\nDESCRIPTION: Demonstrates how to call WebAssembly functions with i64 parameters using JavaScript BigInts. Only BigInt values can be passed as I64 parameters, maintaining precision for 64-bit integers.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nWebAssembly.instantiateStreaming(fetch('i64.wasm'))\n  .then(({ module, instance }) => {\n    instance.exports.add(12n, 30n);\n    // → 42n\n    instance.exports.add(12, 30);\n    // → TypeError: parameters are not of type BigInt\n  });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating object rest/spread properties in JavaScript\nDESCRIPTION: This snippet showcases the new object rest properties for destructuring assignment and spread properties for object literals in V8 6.0. It demonstrates how to use these features for object manipulation and as an alternative to Object.assign().\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-60.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest properties for object destructuring assignment:\nconst person = {\n  firstName: 'Sebastian',\n  lastName: 'Markbåge',\n  country: 'USA',\n  state: 'CA',\n};\nconst { firstName, lastName, ...rest } = person;\nconsole.log(firstName); // Sebastian\nconsole.log(lastName); // Markbåge\nconsole.log(rest); // { country: 'USA', state: 'CA' }\n\n// Spread properties for object literals:\nconst personCopy = { firstName, lastName, ...rest };\nconsole.log(personCopy);\n// { firstName: 'Sebastian', lastName: 'Markbåge', country: 'USA', state: 'CA' }\n```\n\n----------------------------------------\n\nTITLE: Displaying Construct Call Stack Frame in V8\nDESCRIPTION: This snippet demonstrates the format for a construct call stack frame in V8. It shows the 'new' keyword, function name, and location.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nat new functionName (location)\n```\n\n----------------------------------------\n\nTITLE: EnumerateObjectProperties Implementation\nDESCRIPTION: Example implementation from the ECMAScript specification showing how for-in property enumeration should work using a generator function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* EnumerateObjectProperties(obj) {\n  const visited = new Set();\n  for (const key of Reflect.ownKeys(obj)) {\n    if (typeof key === 'symbol') continue;\n    const desc = Reflect.getOwnPropertyDescriptor(obj, key);\n    if (desc && !visited.has(key)) {\n      visited.add(key);\n      if (desc.enumerable) yield key;\n    }\n  }\n  const proto = Reflect.getPrototypeOf(obj);\n  if (proto === null) return;\n  for (const protoKey of EnumerateObjectProperties(proto)) {\n    if (!visited.has(protoKey)) yield protoKey;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Global Object Stack Frame in V8\nDESCRIPTION: This snippet demonstrates the special case format for the global object stack frame in V8. It omits the Type and includes the function name, optional method name, and location.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nat functionName [as methodName] (location)\n```\n\n----------------------------------------\n\nTITLE: Using Different Styles with Intl.DisplayNames in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of different style options (long, short, narrow) with Intl.DisplayNames for language names in English.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-displaynames.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst longLanguageNames = new Intl.DisplayNames(['en'], { type: 'language' });\nlongLanguageNames.of('en-US');\n// → 'American English'\nconst shortLanguageNames = new Intl.DisplayNames(['en'], { type: 'language', style: 'short' });\nshortLanguageNames.of('en-US');\n// → 'US English'\nconst narrowLanguageNames = new Intl.DisplayNames(['en'], { type: 'language', style: 'narrow' });\nnarrowLanguageNames.of('en-US');\n// → 'US English'\n```\n\n----------------------------------------\n\nTITLE: Inheritance Behavior of Private Fields in JavaScript\nDESCRIPTION: This snippet illustrates how private fields are inherited by subclasses as own-properties, but not by objects created with Object.create or prototype manipulation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/private-brand-checks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass SubA extends A {};\nA.test(new SubA()); // true\n\nconst a = new A();\nconst o = Object.create(a);\nA.test(o); // false, private field is inherited and not owned\nA.test(o.__proto__); // true\n\nconst o2 = {};\nObject.setPrototypeOf(o2, a);\nA.test(o2); // false, private field is inherited and not owned\nA.test(o2.__proto__); // true\n```\n\n----------------------------------------\n\nTITLE: Efficient Array Iteration with forEach in JavaScript\nDESCRIPTION: Shows how to use the built-in forEach method to iterate over an array efficiently.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nitems.forEach((item) => {\n  doSomething(item);\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling C/C++ with SIMD Support using Emscripten\nDESCRIPTION: Command to compile C code with SIMD support enabled using the -msimd128 flag with Emscripten.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nemcc -msimd128 -O3 foo.c -o foo.js\n```\n\n----------------------------------------\n\nTITLE: Adding Int32Add1 to MachineOperator Implementation\nDESCRIPTION: This modification adds the Int32Add1 operator to the machine operator implementation in TurboFan. It defines the operator with its properties, including that it takes 1 input, has 0 temp registers, and produces 1 output.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/machine-operator.cc b/src/compiler/machine-operator.cc\nindex 16e838c2aa..fdd6d951f0 100644\n--- a/src/compiler/machine-operator.cc\n+++ b/src/compiler/machine-operator.cc\n@@ -136,6 +136,7 @@ MachineType AtomicOpType(Operator const* op) {\n #define MACHINE_PURE_OP_LIST(V)                                               \\\n   PURE_BINARY_OP_LIST_32(V)                                                   \\\n   PURE_BINARY_OP_LIST_64(V)                                                   \\\n+  V(Int32Add1, Operator::kNoProperties, 1, 0, 1)                              \\\n   V(Word32Clz, Operator::kNoProperties, 1, 0, 1)                              \\\n   V(Word64Clz, Operator::kNoProperties, 1, 0, 1)                              \\\n   V(Word32ReverseBytes, Operator::kNoProperties, 1, 0, 1)                     \\\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Helper Class in V8\nDESCRIPTION: Example of a helper class implementation in V8 that provides a view on heap data. Shows the basic structure with a tagged pointer value and instance descriptor access.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// Hidden class\nclass Map {\n public:\n  …\n  inline DescriptorArray instance_descriptors() const;\n  …\n  // The actual tagged pointer value stored in the Map view object.\n  const uintptr_t ptr_;\n};\n\nDescriptorArray Map::instance_descriptors() const {\n  uintptr_t field_address =\n      FieldAddress(ptr_, kInstanceDescriptorsOffset);\n\n  uintptr_t da = *reinterpret_cast<uintptr_t*>(field_address);\n  return DescriptorArray(da);\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Arrow Function with Destructuring Parameter\nDESCRIPTION: This example shows the second possible interpretation of the ambiguous code - an arrow function with a destructuring parameter d, which doesn't reference the outer variable d. This further illustrates the complexity of JavaScript parsing.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/preparser.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(d) {\n  function g() {\n    const a = ({ d }) => d;\n    return a;\n  }\n  return [d, g];\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Array-like to Real Array\nDESCRIPTION: Demonstrates converting an array-like object to a real array for better performance with array operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst actualArray = Array.prototype.slice.call(arrayLike, 0);\nactualArray.forEach((value, index) => {\n  console.log(`${ index }: ${ value }`);\n});\n// This logs '0: a', then '1: b', and finally '2: c'.\n```\n\n----------------------------------------\n\nTITLE: Adding Int32Add1 to Instruction Selector\nDESCRIPTION: This change adds support for the Int32Add1 operator in the instruction selector, which is responsible for translating TurboFan nodes to architecture-specific instructions. It marks the node as producing a 32-bit word and calls the appropriate visitor method.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/backend/instruction-selector.cc b/src/compiler/backend/instruction-selector.cc\nindex 3152b2d41e..7375085649 100644\n--- a/src/compiler/backend/instruction-selector.cc\n+++ b/src/compiler/backend/instruction-selector.cc\n@@ -2067,6 +2067,8 @@ void InstructionSelector::VisitNode(Node* node) {\n       return MarkAsWord32(node), VisitS1x16AnyTrue(node);\n     case IrOpcode::kS1x16AllTrue:\n       return MarkAsWord32(node), VisitS1x16AllTrue(node);\n+    case IrOpcode::kInt32Add1:\n+      return MarkAsWord32(node), VisitInt32Add1(node);\n     default:\n       FATAL(\"Unexpected operator #%d:%s @ node #%d\", node->opcode(),\n             node->op()->mnemonic(), node->id());\n```\n\n----------------------------------------\n\nTITLE: RegExp Pattern Matching Examples\nDESCRIPTION: Demonstrates different ways a RegExp pattern can match a string, showing how backtracking can lead to multiple matching possibilities.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/non-backtracking-regexp.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'aaa'           'aa', 'a'           'aa', ''\n'a', 'aa'       'a', 'a', 'a'       'a', 'a', ''\n…\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Function as Multi-return WebAssembly Function\nDESCRIPTION: Shows how to import a JavaScript function that returns an array or iterator as a multi-return function in WebAssembly, enabling interoperability between the two languages.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew WebAssembly.Instance(module, {\n  imports: {\n    swap: (x, y) => [y, x],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: RelativeTimeFormat with Default Options\nDESCRIPTION: Demonstrates RelativeTimeFormat usage with explicit default options and special case handling for numeric values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-relativetimeformat.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst rtf = new Intl.RelativeTimeFormat('en', {\n  localeMatcher: 'best fit', // other values: 'lookup'\n  style: 'long', // other values: 'short' or 'narrow'\n  numeric: 'always', // other values: 'auto'\n});\n\nrtf.format(-1, 'day');\n// → '1 day ago'\n\nrtf.format(0, 'day');\n// → 'in 0 days'\n\nrtf.format(1, 'day');\n// → 'in 1 day'\n\nrtf.format(-1, 'week');\n// → '1 week ago'\n\nrtf.format(0, 'week');\n// → 'in 0 weeks'\n\nrtf.format(1, 'week');\n// → 'in 1 week'\n```\n\n----------------------------------------\n\nTITLE: Equivalent Direct Method Call in JavaScript\nDESCRIPTION: This snippet demonstrates the direct method call that the optimized higher-order builtin now performs equivalently to in terms of performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstring.charCodeAt(8);\n```\n\n----------------------------------------\n\nTITLE: DataView Endianness Handling\nDESCRIPTION: Example showing DataView's ability to handle different endianness when reading/writing data.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/dataview.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = new ArrayBuffer(32);\nconst view = new DataView(buffer);\n\nview.setInt32(0, 0x8BADF00D, true); // Little-endian write.\nconsole.log(view.getInt32(0, false)); // Big-endian read.\n// Expected output: 0x0DF0AD8B (233876875)\n```\n\n----------------------------------------\n\nTITLE: Using DataView for Structured Data Access\nDESCRIPTION: Demonstration of using DataView to write and read structured data with different types (Uint8 and Float64) to an ArrayBuffer.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/dataview.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst buffer = new ArrayBuffer(32);\nconst view = new DataView(buffer);\n\nconst person = { age: 42, height: 1.76 };\n\nview.setUint8(0, person.age);\nview.setFloat64(1, person.height);\n\nconsole.log(view.getUint8(0)); // Expected output: 42\nconsole.log(view.getFloat64(1)); // Expected output: 1.76\n```\n\n----------------------------------------\n\nTITLE: Compilation Errors Due to Unhandled Enum in x64 Architecture Files\nDESCRIPTION: Error messages showing the need to handle the new kX64Int32Add1 instruction in scheduler and code generator files.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n../../src/compiler/backend/x64/instruction-scheduler-x64.cc:15:11: error: enumeration value 'kX64Int32Add1' not handled in switch [-Werror,-Wswitch]\n  switch (instr->arch_opcode()) {\n          ^\n1 error generated.\n...\n../../src/compiler/backend/x64/code-generator-x64.cc:733:11: error: enumeration value 'kX64Int32Add1' not handled in switch [-Werror,-Wswitch]\n  switch (arch_opcode) {\n          ^\n1 error generated.\n```\n\n----------------------------------------\n\nTITLE: Example of ASI Interference with await\nDESCRIPTION: Code example demonstrating how Automatic Semicolon Insertion would incorrectly interpret code if 'await' were disallowed by the grammar rather than by static semantics.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync function too_few_semicolons() {\n  let\n  await 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Example in WasmGC - Original\nDESCRIPTION: Example showing how WasmGC handles object allocation and field access with potential for optimization. The code demonstrates allocation of two objects and field value assignment.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-gc-porting.md#2025-04-10_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nfunc foo() {\n  let x = allocate<T>(); // Allocate a GC object.\n  x.val = 10;            // Set a field to 10.\n  let y = allocate<T>(); // Allocate another object.\n  y.val = x.val;         // This must be 10.\n  return y.val;          // This must also be 10.\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Array Iteration in JavaScript\nDESCRIPTION: Demonstrates an inefficient way to iterate over an array that reads beyond its length, potentially causing performance issues.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Don't do this!\nfor (let i = 0, item; (item = items[i]) != null; i++) {\n  doSomething(item);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a PRNG with Static Initialization Block in JavaScript\nDESCRIPTION: This example demonstrates how to use a static initialization block to set up an entropy pool for a pseudo-random number generator class. The block runs once when the class is defined, populating the entropy pool with 512 values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-static-initializer-blocks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyPRNG {\n  constructor(seed) {\n    if (seed === undefined) {\n      if (MyPRNG.entropyPool.length === 0) {\n        throw new Error('Entropy pool exhausted');\n      }\n      seed = MyPRNG.entropyPool.pop();\n    }\n    this.seed = seed;\n  }\n\n  getRandom() { … }\n\n  static entropyPool = [];\n  static {\n    for (let i = 0; i < 512; i++) {\n      this.entropyPool.push(probeEntropySource());\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stub-Linkage Builtin in Torque\nDESCRIPTION: Implementation of HeapNumberIs42 as a stub-linkage builtin and updated MathIs42 to use it, demonstrating code reuse and optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/torque-builtins.md#2025-04-10_snippet_2\n\nLANGUAGE: torque\nCODE:\n```\nnamespace math {\n  builtin HeapNumberIs42(implicit context: Context)(heapNumber: HeapNumber):\n      Boolean {\n    return Convert<float64>(heapNumber) == 42 ? True : False;\n  }\n\n  javascript builtin MathIs42(implicit context: Context)(\n      receiver: Object, x: Object): Boolean {\n    const number: Number = ToNumber_Inline(x);\n    typeswitch (number) {\n      case (smi: Smi): {\n        return smi == 42 ? True : False;\n      }\n      case (heapNumber: HeapNumber): {\n        return HeapNumberIs42(heapNumber);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Lazy and Eager Function Compilation in JavaScript\nDESCRIPTION: Example showing how wrapping a function in parentheses triggers eager compilation due to IIFE heuristics, even when not immediately invoked.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching-for-devs.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = function() {\n  // Lazily skipped\n};\nconst bar = (function() {\n  // Eagerly compiled\n});\n```\n\n----------------------------------------\n\nTITLE: String Spread Operation in JavaScript\nDESCRIPTION: Shows how spread operator can be used to convert a string into an array of its Unicode code points.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst str = 'こんにちは';\nconst result = [...str];\n// → ['こ', 'ん', 'に', 'ち', 'は']\n```\n\n----------------------------------------\n\nTITLE: ReturnIfAbrupt Algorithm Implementation in ECMAScript Spec\nDESCRIPTION: The specification algorithm for ReturnIfAbrupt which handles Completion Records. It checks if an argument is an abrupt completion and returns it immediately if so, otherwise extracting the value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_1\n\nLANGUAGE: ecmascript\nCODE:\n```\n1. If `argument` is abrupt, return `argument`\n2. Set `argument` to `argument.[[Value]]`.\n```\n\n----------------------------------------\n\nTITLE: Property Shadowing Example with for-in in JavaScript\nDESCRIPTION: JavaScript example demonstrating the property shadowing behavior in for-in loops, where non-enumerable properties on the receiver should shadow enumerable properties on the prototype chain according to the ECMAScript specification.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar o = {\n  __proto__ : {b: 3},\n  a: 1\n};\nObject.defineProperty(o, 'b', {});\n\nfor (var k in o) console.log(k);\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Function Calling Imported JavaScript Multi-return Function\nDESCRIPTION: Shows a WebAssembly function that calls an imported JavaScript function which returns multiple values, demonstrating the multi-value feature in action.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_6\n\nLANGUAGE: wasm\nCODE:\n```\n(func $main (result i32 i32)\n  i32.const 0\n  i32.const 1\n  call $swap\n)\n```\n\n----------------------------------------\n\nTITLE: Complete d8 Profiling Example with Custom Output Directory\nDESCRIPTION: A comprehensive example showing how to create a test JavaScript file, run profiling with custom V8 flags and output directory, and visualize results using both pprof and perf report.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho '(function f() {\n    var s = 0; for (var i = 0; i < 1000000000; i++) { s += i; } return s;\n  })();' > test.js;\n\n# Use custom V8 flags and a separate output dir for less clutter:\nmkdir perf_results\ntools/profiling/linux-perf-d8.py --perf-data-dir=perf_results \\\n    out/x64.release/d8 --expose-gc --allow-natives-syntax test.js;\n\n# Fancy UI (`-flame` is googler-only, use `-web` as a public alternative):\npprof -flame perf_results/XXX_perf.data.jitted;\n# Terminal-based tool:\nperf report -i perf_results/XXX_perf.data.jitted;\n```\n\n----------------------------------------\n\nTITLE: Leaking Object Definition in IFrame\nDESCRIPTION: Shows the code inside the iframe that creates objects that will be leaked due to the unregistered event listener in the main window.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/tracing-js-dom.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Leak {};\nwindow.globalVariable = new Leak();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the limitations of character properties with multi-code point emoji\nDESCRIPTION: Example showing why Unicode character properties are insufficient for matching multi-code point characters like complex emoji. The Unicode 'Emoji' property only matches single code point emoji.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Unicode defines a character property named \"Emoji\".\nconst re = /^\\p{Emoji}$/u;\n\n// Match an emoji that consists of just 1 code point:\nre.test('⚽'); // '\\u26BD'\n// → true ✅\n\n// Match an emoji that consists of multiple code points:\nre.test('👨🏾‍⚕️'); // '\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'\n// → false ❌\n```\n\n----------------------------------------\n\nTITLE: RegExp Backtracking Algorithm Implementation\nDESCRIPTION: JavaScript implementation of the backtracking algorithm used for RegExp pattern matching, demonstrating how the engine processes bytecode instructions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/non-backtracking-regexp.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet ip = 0; // Input position.\nlet pc = 0; // Program counter: index of the next instruction.\nconst stack = []; // Backtrack stack.\nwhile (true) {\n  const inst = code[pc];\n  switch (inst.opcode) {\n    case 'CONSUME':\n      if (ip < input.length && input[ip] === inst.char) {\n        // Input matches what we expect: Continue.\n        ++ip;\n        ++pc;\n      } else if (stack.length > 0) {\n        // Wrong input character, but we can backtrack.\n        const back = stack.pop();\n        ip = back.ip;\n        pc = back.pc;\n      } else {\n        // Wrong character, cannot backtrack.\n        return false;\n      }\n      break;\n    case 'FORK':\n      // Save alternative for backtracking later.\n      stack.push({ip: ip, pc: inst.forkPc});\n      ++pc;\n      break;\n    case 'JMP':\n      pc = inst.jmpPc;\n      break;\n    case 'ACCEPT':\n      return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Deoptimization in TurboFan-optimized JavaScript Code\nDESCRIPTION: This JavaScript snippet demonstrates how changing a const property after optimization triggers deoptimization in TurboFan.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nm2.cost = \"priceless\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Fibonacci Sequence with Generators in JavaScript\nDESCRIPTION: Shows an implementation of a Fibonacci sequence using async generators and for-await-of loops, demonstrating features that received significant performance improvements in V8 v6.6.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-66.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function* fibonacciSequence() {\n  for (let a = 0, b = 1;;) {\n    yield a;\n    const c = a + b;\n    a = b;\n    b = c;\n  }\n}\n\nasync function fibonacci(id, n) {\n  for await (const value of fibonacciSequence()) {\n    if (n-- === 0) return value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Big O Notation for Hash Table Insertions in JavaScript\nDESCRIPTION: This code snippet demonstrates the use of Big O notation to describe the average and worst-case time complexity of hash table insertions. It shows that while average insertion is O(1), worst-case can be O(n) due to hash collisions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/hash-flooding.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Average case: O(1)\n// Worst case: O(n)\n// Inserting n entries: O(n²)\n```\n\n----------------------------------------\n\nTITLE: Using Logical Assignment Operators in JavaScript\nDESCRIPTION: Demonstrates the new compound assignment operators that combine logical operations (&&, ||, ??) with assignment. Unlike mathematical compound operators, these only conditionally perform assignment.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nx &&= y;\n// Roughly equivalent to x && (x = y)\nx ||= y;\n// Roughly equivalent to x || (x = y)\nx ??= y;\n// Roughly equivalent to x ?? (x = y)\n```\n\n----------------------------------------\n\nTITLE: Optimized Private Brand Initialization\nDESCRIPTION: Optimized bytecode for private brand initialization using DefineKeyedOwnProperty\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// Load the private brand symbol for class A from the context\n// and store it into r1\nLdaImmutableCurrentContextSlot [3]\nStar0\n\n// Use the DefineKeyedOwnProperty bytecode to store the\n// context in the instance with the private brand as key\nLdar <context>\nDefineKeyedOwnProperty <this>, r0, [0]\n```\n\n----------------------------------------\n\nTITLE: Notation Styles in Intl.NumberFormat\nDESCRIPTION: Demonstrates different notation styles including standard and compact notation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Test standard notation.\n  const formatter = new Intl.NumberFormat('en', {\n    notation: 'standard', // This is the implied default.\n  });\n  formatter.format(1234.56);\n  // → '1,234.56'\n  formatter.format(123456);\n  // → '123,456'\n  formatter.format(123456789);\n  // → '123,456,789'\n}\n\n{\n  // Test compact notation.\n  const formatter = new Intl.NumberFormat('en', {\n    notation: 'compact',\n  });\n  formatter.format(1234.56);\n  // → '1.2K'\n  formatter.format(123456);\n  // → '123K'\n  formatter.format(123456789);\n  // → '123M'\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Prototypes in JavaScript\nDESCRIPTION: Comparison of using Object.prototype.isPrototypeOf method versus the instanceof operator for checking prototypes. The isPrototypeOf method has been optimized in V8 v6.1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-61.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nObject.prototype.isPrototypeOf\ninstanceof\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Compilation for WebAssembly in V8\nDESCRIPTION: Command line flag to enable lazy compilation in V8, where functions are only compiled when called for the first time. Functions are initially compiled with Liftoff, then recompiled with TurboFan in the background.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-compilation-pipeline.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--wasm-lazy-compilation\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Different Object Property Configurations in JavaScript\nDESCRIPTION: Code examples showing four different object configurations: fast properties with null prototype, fast properties with Object prototype, slow dictionary properties, and indexed properties. These examples are used to demonstrate performance characteristics of for-in loops.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar fastProperties = {\n  __proto__ : null,\n  'property 1': 1,\n  …\n  'property 10': n\n};\n\nvar fastPropertiesWithPrototype = {\n  'property 1': 1,\n  …\n  'property 10': n\n};\n\nvar slowProperties = {\n  __proto__ : null,\n  'dummy': null,\n  'property 1': 1,\n  …\n  'property 10': n\n};\ndelete slowProperties['dummy']\n\nvar elements = {\n  __proto__: null,\n  '1': 1,\n  …\n  '10': n\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-value Function in WebAssembly\nDESCRIPTION: Shows a WebAssembly function using multi-value returns, which allows functions to return multiple values. This feature has been added to the official WebAssembly standard.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_3\n\nLANGUAGE: wasm\nCODE:\n```\n(func $swap (param i32 i32) (result i32 i32)\n  (local.get 1) (local.get 0)\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving V8 API Changes Using Git\nDESCRIPTION: Git command to view API changes between V8 versions 6.7 and 6.8 in the include/v8.h file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-68.md#2025-04-10_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit log branch-heads/6.7..branch-heads/6.8 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New JSON.stringify Behavior with Lone Surrogates in JavaScript\nDESCRIPTION: This snippet demonstrates the new behavior of JSON.stringify, which now outputs escape sequences for lone surrogates, resulting in valid Unicode output.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/well-formed-json-stringify.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify('\\uD800');\n// → '\"\\\\ud800\"'\n```\n\n----------------------------------------\n\nTITLE: Extended Class with Proxy Example\nDESCRIPTION: Example demonstrating class extension with proxy and field initialization behavior\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  constructor() {\n    return new Proxy(\n      { a: 1 },\n      {\n        defineProperty(object, key, desc) {\n          console.log('object:', object);\n          console.log('key:', key);\n          console.log('desc:', desc);\n          return true;\n        }\n      });\n  }\n}\n\nclass B extends A {\n  a = 2;\n  #b = 3;  // Not observable.\n}\n\n// object: { a: 1 },\n// key: 'a',\n// desc: {value: 2, writable: true, enumerable: true, configurable: true}\nnew B();\n```\n\n----------------------------------------\n\nTITLE: Setting Stack Trace Limit via V8 Command-line Flag\nDESCRIPTION: This command shows how to set a different default stack trace limit that affects all contexts using a V8 command-line flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--stack-trace-limit <value>\n```\n\n----------------------------------------\n\nTITLE: Implementing the followEpsilons Helper Function for RegExp Matching\nDESCRIPTION: A function that processes epsilon transitions (FORK and JMP instructions) in the regex automaton. It takes a list of program counters and returns all reachable CONSUME instructions, ensuring no duplicates by tracking visited states in a Set.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/non-backtracking-regexp.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction followEpsilons(pcs) {\n  // Set of pcs we've seen so far.\n  const visitedPcs = new Set();\n  const result = [];\n\n  while (pcs.length > 0) {\n    const pc = pcs.pop();\n\n    // We can ignore pc if we've seen it earlier.\n    if (visitedPcs.has(pc)) continue;\n    visitedPcs.add(pc);\n\n    const inst = code[pc];\n    switch (inst.opcode) {\n      case 'CONSUME':\n        result.push(pc);\n        break;\n      case 'FORK':\n        pcs.push(pc + 1, inst.forkPc);\n        break;\n      case 'JMP':\n        pcs.push(inst.jmpPc);\n        break;\n      case 'ACCEPT':\n        return 'ACCEPT';\n    }\n  }\n\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Running V8 Microbenchmarks with run_perf.py\nDESCRIPTION: Using the run_perf.py tool to execute microbenchmarks that track feature performance in V8. This requires specifying the architecture and path to the d8 binary.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntools/run_perf.py --arch x64 --binary-override-path out/x64.release/d8 test/js-perf-test/JSTests.json\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Higher-Order Builtin Optimization in JavaScript\nDESCRIPTION: This snippet shows how TurboFan now optimizes higher-order builtins like Function.prototype.call.bind, resulting in performance equivalent to direct method calls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst charCodeAt = Function.prototype.call.bind(String.prototype.charCodeAt);\n\ncharCodeAt(string, 8);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Number.MAX_SAFE_INTEGER in JavaScript\nDESCRIPTION: Shows how to access and work with the maximum safe integer value in JavaScript, highlighting the limitations of Number type.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst max = Number.MAX_SAFE_INTEGER;\n// → 9_007_199_254_740_991\n```\n\n----------------------------------------\n\nTITLE: Applying Functions and Constructing Objects in JavaScript\nDESCRIPTION: Examples of using Reflect.apply and Reflect.construct for function calls and constructor invocations with variable arguments. These operations have received significant performance boosts in V8 v6.1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-61.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nReflect.apply\nReflect.construct\n```\n\n----------------------------------------\n\nTITLE: Basic Strong Reference Example in JavaScript\nDESCRIPTION: Simple example showing how objects are strongly referenced in JavaScript, preventing garbage collection while references exist.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ref = { x: 42, y: 51 };\n```\n\n----------------------------------------\n\nTITLE: Direct Low-Level Usage of Linux Perf with d8\nDESCRIPTION: Two-step process to use perf directly with d8: first recording performance data, then post-processing with perf inject to incorporate JavaScript symbols.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nperf record --call-graph=fp --clockid=mono --freq=max \\\n    --output=perf.data\n    out/x64.release/d8 \\\n      --perf-prof --no-write-protect-code-memory \\\n      --interpreted-frames-native-stack \\\n    test.js;\nperf inject --jit --input=perf.data --output=perf.data.jitted;\nperf report --input=perf.data.jitted;\n```\n\n----------------------------------------\n\nTITLE: JavaScript Optimized Code After Escape Analysis\nDESCRIPTION: Shows how V8 can optimize the previous code by converting object properties into local variables when the object doesn't escape the function scope.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/disabling-escape-analysis.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(a, b) {\n  const object_a = a;\n  const object_b = b;\n  return object_a + object_b;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lookbehind Assertions in JavaScript Regular Expressions\nDESCRIPTION: Shows examples of positive and negative lookbehind assertions in regular expressions. These allow matching patterns only if they are preceded by specific patterns.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-62.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/(?<=\\$)\\d+/.exec('$1 is worth about ¥123'); // ['1']\n/(?<!\\$)\\d+/.exec('$1 is worth about ¥123'); // ['123']\n```\n\n----------------------------------------\n\nTITLE: Iterating Collections in JavaScript\nDESCRIPTION: Examples of iterating over Maps and Sets using iteration and forEach methods. These operations have seen significant performance improvements in V8 v6.1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-61.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMap.prototype.forEach\nSet.prototype.forEach\n```\n\n----------------------------------------\n\nTITLE: If-Else Statement Structure for Block Coverage\nDESCRIPTION: Illustrates the structure of an if-else statement where V8 collects source ranges for both branches to enable block coverage reporting.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/javascript-code-coverage.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (cond) {\n  /* Then branch. */\n} else {\n  /* Else branch. */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing V8 Extra Class with Private Symbols\nDESCRIPTION: Example showing how to create a Vec2 class implementation as a V8 extra, demonstrating usage of private symbols, embedder bindings, and global object manipulation. The code shows the standard structure of a V8 extra file with its three key arguments: global, binding, and v8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-extras.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(function(global, binding, v8) {\n  'use strict';\n  const Object = global.Object;\n  const x = v8.createPrivateSymbol('x');\n  const y = v8.createPrivateSymbol('y');\n\n  class Vec2 {\n    constructor(theX, theY) {\n      this[x] = theX;\n      this[y] = theY;\n    }\n\n    norm() {\n      return binding.computeNorm(this[x], this[y]);\n    }\n  }\n\n  Object.defineProperty(global, 'Vec2', {\n    value: Vec2,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n\n  binding.Vec2 = Vec2;\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lack of Privacy with ES2015 Class Properties\nDESCRIPTION: Shows that properties with underscore prefix in ES2015 classes are not truly private. External code can still directly access and modify these properties, bypassing class methods and getters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = new IncreasingCounter();\ncounter.value;\n// logs 'Getting the current value!'\n// → 0\n\n// Nothing stops people from reading or messing with the\n// `_count` instance property. 😢\ncounter._count;\n// → 0\ncounter._count = 42;\ncounter.value;\n// logs 'Getting the current value!'\n// → 42\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 8.7 Branch\nDESCRIPTION: Git command to checkout the branch-heads/8.7 branch for developers with an active V8 checkout who want to experiment with the new features.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-87.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 8.7 -t branch-heads/8.7\n```\n\n----------------------------------------\n\nTITLE: Transpiled ES5 Equivalent of Async Generator Function\nDESCRIPTION: This snippet shows the ES5 code generated by Babel when transpiling the previous async generator function. It illustrates the dramatic increase in code size and complexity when advanced ES2015+ features are transpiled to ES5.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nvar _asyncGenerator = function() {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function(resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function(arg) {\n            resume('next', arg);\n          }, function(arg) {\n            resume('throw', arg);\n          });\n        } else {\n          settle(result.done ? 'return' : 'normal', result.value);\n        }\n      } catch (err) {\n        settle('throw', err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case 'return':\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n        case 'throw':\n          front.reject(value);\n          break;\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n      front = front.next;\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n    this._invoke = send;\n    if (typeof gen.return !== 'function') {\n      this.return = undefined;\n    }\n  }\n  if (typeof Symbol === 'function' && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function() {\n      return this;\n    };\n  }\n  AsyncGenerator.prototype.next = function(arg) {\n    return this._invoke('next', arg);\n  };\n  AsyncGenerator.prototype.throw = function(arg) {\n    return this._invoke('throw', arg);\n  };\n  AsyncGenerator.prototype.return = function(arg) {\n    return this._invoke('return', arg);\n  };\n  return {\n    wrap: function wrap(fn) {\n      return function() {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function await (value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nvar readLines = function () {\n  var _ref = _asyncGenerator.wrap(regeneratorRuntime.mark(function _callee(path) {\n    var file;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _asyncGenerator.await(fileOpen(path));\n\n          case 2:\n            file = _context.sent;\n            _context.prev = 3;\n\n          case 4:\n            if (file.EOF) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 7;\n            return _asyncGenerator.await(file.readLine());\n\n          case 7:\n            _context.next = 9;\n            return _context.sent;\n\n          case 9:\n            _context.next = 4;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return _asyncGenerator.await(file.close());\n\n          case 14:\n            return _context.finish(11);\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[3,, 11, 15]]);\n  }));\n\n  return function readLines(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Prototype Chain Interactions in JavaScript\nDESCRIPTION: Shows complex interactions between array sorting and prototype chain inheritance, demonstrating different behaviors across JavaScript engines.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = {\n 1: 'd1',\n 2: 'c1',\n 3: 'b1',\n 4: undefined,\n __proto__: {\n   length: 10000,\n   1: 'e2',\n   10: 'a2',\n   100: 'b2',\n   1000: 'c2',\n   2000: undefined,\n   8000: 'd2',\n   12000: 'XX',\n   __proto__: {\n     0: 'e3',\n     1: 'd3',\n     2: 'c3',\n     3: 'b3',\n     4: 'f3',\n     5: 'a3',\n     6: undefined,\n   },\n },\n};\nArray.prototype.sort.call(object);\n```\n\n----------------------------------------\n\nTITLE: Checking out V8 version 9.6 branch\nDESCRIPTION: Git command to checkout the V8 version 9.6 branch for developers with an active V8 checkout.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-96.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 9.6 -t branch-heads/9.6\n```\n\n----------------------------------------\n\nTITLE: Using Intl.PluralRules for Internationalized Pluralization in JavaScript\nDESCRIPTION: Demonstrates the usage of the new Intl.PluralRules API, which enables efficient internationalized pluralizations in JavaScript applications.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-63.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nIntl.PluralRules\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import with Promise Then/Catch\nDESCRIPTION: This snippet demonstrates how to dynamically import a module using the import() function, which returns a Promise. The module specifier can be computed at runtime, and the module is loaded on-demand.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/dynamic-import.md#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  const moduleSpecifier = './utils.mjs';\n  import(moduleSpecifier)\n    .then((module) => {\n      module.default();\n      // → logs 'Hi from the default export!'\n      module.doStuff();\n      // → logs 'Doing stuff…'\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Array.prototype.flat with Infinity Depth\nDESCRIPTION: Demonstrates using Array#flat with Infinity parameter to completely flatten a nested array structure.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/array-flat-flatmap.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Flatten recursively until the array contains no more nested arrays:\narray.flat(Infinity);\n// → [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Running Local Code Coverage Analysis for V8 with Multiple Architectures\nDESCRIPTION: This command runs the gcov.sh script to collect code coverage for V8 on x64 and arm architectures. It rebuilds for each architecture, preserving and accumulating coverage results.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/evaluate-code-coverage.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./tools/gcov.sh x64 arm\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currency Names in Simplified Chinese using Intl.DisplayNames\nDESCRIPTION: This snippet demonstrates how to get currency names in Simplified Chinese using ISO-4217 3-letter currency codes with Intl.DisplayNames.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-displaynames.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst currencyNames = new Intl.DisplayNames(['zh-Hans'], {type: 'currency'});\ncurrencyNames.of('USD');\n// → '美元'\ncurrencyNames.of('EUR');\n// → '欧元'\ncurrencyNames.of('JPY');\n// → '日元'\ncurrencyNames.of('CNY');\n// → '人民币'\n```\n\n----------------------------------------\n\nTITLE: Using Promise.prototype.finally in JavaScript\nDESCRIPTION: Shows the usage of the new Promise.prototype.finally() method, which provides a way to execute cleanup logic after a promise is settled, regardless of whether it was fulfilled or rejected.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-63.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPromise.prototype.finally()\n```\n\n----------------------------------------\n\nTITLE: Potential Result of Unstable Sorting in JavaScript\nDESCRIPTION: This snippet illustrates a potential result of an unstable sort on the array of dog objects. The order of dogs with the same rating is not preserved, demonstrating the unpredictability of unstable sorting.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/stable-sort.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { name: 'Ghost',  rating: 14 }, // 😢\n  { name: 'Choco',  rating: 14 }, // 😢\n  { name: 'Bandit', rating: 13 },\n  { name: 'Falco',  rating: 13 },\n  { name: 'Abby',   rating: 12 },\n  { name: 'Daisy',  rating: 12 },\n  { name: 'Elmo',   rating: 12 },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript array with indexed properties\nDESCRIPTION: This snippet shows an array with two indexed properties. V8 optimizes these differently from named properties for efficient access and modification.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-properties.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\"foo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Double Addition Function\nDESCRIPTION: C++ implementation of a WebAssembly function that adds two double floating point numbers. This function is exported for use in JavaScript.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-90.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ndouble addNumbers(double x, double y) {\n  return x + y;\n}\n```\n\n----------------------------------------\n\nTITLE: Building V8 Monolith for iOS with Ninja\nDESCRIPTION: Executes the Ninja build command to compile V8 as a monolithic library for iOS using the previously defined configuration in the specified output directory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/cross-compile-ios.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nninja -C out/release-ios v8_monolith\n```\n\n----------------------------------------\n\nTITLE: Displaying File Location in V8 Stack Trace\nDESCRIPTION: This snippet shows the standard format for displaying file location in a V8 stack trace. It includes the file name, line number, and column number.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nfileName:lineNumber:columnNumber\n```\n\n----------------------------------------\n\nTITLE: Array Index Access Examples\nDESCRIPTION: This snippet demonstrates valid ECMAScript array indices, showing the range from 0 to 2³²-2, which JavaScript engines can optimize by using an efficient in-memory representation for such integer values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\narray[0]; // Smallest possible array index.\narray[42];\narray[2**32-2]; // Greatest possible array index.\n```\n\n----------------------------------------\n\nTITLE: Handling Unsafe Object Layout Changes in V8 (C++)\nDESCRIPTION: This snippet demonstrates how V8 handles unsafe object layout changes during concurrent marking. It ensures the object is marked black and pushes it to a bailout worklist for later processing by the main thread.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/concurrent-marking.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\natomic_color_transition(object, white, grey);\nif (atomic_color_transition(object, grey, black)) {\n  // The object will be revisited on the main thread during draining\n  // of the bailout worklist.\n  bailout_worklist.push(object);\n}\nunsafe_object_layout_change(object);\n```\n\n----------------------------------------\n\nTITLE: Generating V8 build files with gn and command-line arguments\nDESCRIPTION: Uses gn to generate build files with specific configuration parameters passed directly on the command line, setting up a release build for arm64 simulation on x64 with goma compilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngn gen out/foo --args='is_debug=false target_cpu=\"x64\" v8_target_cpu=\"arm64\" use_goma=true'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Intl.NumberFormat with Unit Formatting in JavaScript\nDESCRIPTION: Example showing how to use the new Intl.NumberFormat API to format numbers with units of measurement, specifically formatting a speed value in meters per second with locale-aware formatting.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-77.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'unit',\n  unit: 'meter-per-second',\n});\nformatter.format(299792458);\n// → '299,792,458 m/s'\n```\n\n----------------------------------------\n\nTITLE: Adding Int32Add1 to Opcodes List\nDESCRIPTION: This change adds Int32Add1 to the machine unary 32-bit operation list in opcodes.h, which defines all the operation codes used in the TurboFan intermediate representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/opcodes.h b/src/compiler/opcodes.h\nindex ce24a0bd3f..2c8c5ebaca 100644\n--- a/src/compiler/opcodes.h\n+++ b/src/compiler/opcodes.h\n@@ -506,6 +506,7 @@\n   V(Float64LessThanOrEqual)\n \n #define MACHINE_UNOP_32_LIST(V) \\\n+  V(Int32Add1)                  \\\n   V(Word32Clz)                  \\\n   V(Word32Ctz)                  \\\n   V(Int32AbsWithOverflow)       \\\n```\n\n----------------------------------------\n\nTITLE: Using String#trim() for Efficient String Trimming in JavaScript\nDESCRIPTION: Mentions the performance boost for builtin string functions like String#trim() due to the complete port of string.js to CodeStubAssembler.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-63.md#2025-04-10_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nString#trim()\n```\n\n----------------------------------------\n\nTITLE: Declaring MathIs42 Builtin in C++\nDESCRIPTION: Shows how to declare a new CodeStubAssembler builtin with JavaScript linkage and one parameter named 'X' in the BUILTIN_LIST_BASE macro.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#define BUILTIN_LIST_BASE(CPP, API, TFJ, TFC, TFS, TFH, ASM, DBG)              \\\n  // […snip…]\n  TFJ(MathIs42, 1, kX)                                                         \\\n  // […snip…]\n```\n\n----------------------------------------\n\nTITLE: GN arguments for GCC compilation\nDESCRIPTION: Configuration to use GCC instead of clang for compilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nis_clang=false\n```\n\n----------------------------------------\n\nTITLE: Adding a New WebAssembly Opcode to wasm-opcodes.h\nDESCRIPTION: This diff shows how to add a new WebAssembly instruction 'I32Add1' to the FOREACH_SIMPLE_OPCODE section in wasm-opcodes.h. The instruction is assigned the binary opcode 0xee and has a signature of i_i (takes an int32 and returns an int32).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/wasm/wasm-opcodes.h b/src/wasm/wasm-opcodes.h\nindex 6970c667e7..867cbf451a 100644\n--- a/src/wasm/wasm-opcodes.h\n+++ b/src/wasm/wasm-opcodes.h\n@@ -96,6 +96,7 @@ bool IsJSCompatibleSignature(const FunctionSig* sig, bool hasBigIntFeature);\n \n // Expressions with signatures.\n #define FOREACH_SIMPLE_OPCODE(V)  \\\n+  V(I32Add1, 0xee, i_i)           \\\n   V(I32Eqz, 0x45, i_i)            \\\n   V(I32Eq, 0x46, i_ii)            \\\n   V(I32Ne, 0x47, i_ii)            \\\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating bound callback pattern in JavaScript\nDESCRIPTION: Shows how to use Function.prototype.bind for improved readability and performance when passing callbacks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-64.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething(callback, someObj);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndoSomething(callback.bind(someObj));\n```\n\n----------------------------------------\n\nTITLE: Listing available gn build arguments\nDESCRIPTION: Displays all available configuration options that can be set when generating V8 build files with gn.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngn args out/foo --list\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with ToString Conversion in JavaScript\nDESCRIPTION: Shows how default sorting behavior converts elements to strings using toString(), which can contain arbitrary code and side effects.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [4, 2, 5, 3, 1];\n\narray.push({\n  toString() {\n    // Arbitrary code goes here, e.g. `array.push(1);`.\n    return '42';\n  }\n});\n\n// Sort without a comparison function.\narray.sort();\n```\n\n----------------------------------------\n\nTITLE: Using Promise.prototype.finally for Cleanup\nDESCRIPTION: Improved implementation using Promise.prototype.finally to handle cleanup in a single location, reducing code duplication.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-finally.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchAndDisplay = ({ url, element }) => {\n  showLoadingSpinner();\n  fetch(url)\n    .then((response) => response.text())\n    .then((text) => {\n      element.textContent = text;\n    })\n    .catch((error) => {\n      element.textContent = error.message;\n    })\n    .finally(() => {\n      hideLoadingSpinner();\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing Exponential Function in JavaScript\nDESCRIPTION: This code snippet shows an optimization for the exponential function using a Taylor approximation. It replaces Math.exp() with a faster calculation for a specific input range.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexp(x) ≈ 1 / ( 1 - x + x * x / 2) for -4 < x < 0\n```\n\n----------------------------------------\n\nTITLE: Importing Namespace Object from JavaScript Module\nDESCRIPTION: Example showing the existing syntax for importing all exports from a module as a namespace object in JavaScript.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as utils from './utils.mjs';\n```\n\n----------------------------------------\n\nTITLE: Precision Loss in BigInt Construction from Number in JavaScript\nDESCRIPTION: Illustrates the potential precision loss when creating BigInts from large Number values, emphasizing the importance of using string inputs or BigInt literals for large values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nBigInt(123456789123456789);\n// → 123456789123456784n ❌\n```\n\n----------------------------------------\n\nTITLE: Running Filtered V8 Microbenchmarks\nDESCRIPTION: Running a subset of microbenchmarks by applying a filter to the run_perf.py command. This allows focusing on specific benchmark categories.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntools/run_perf.py --arch x64 --binary-override-path out/x64.release/d8 --filter JSTests/TypedArrays test/js-perf-test/JSTests.json\n```\n\n----------------------------------------\n\nTITLE: Comparison of Object Literal vs. JSON.parse Approaches\nDESCRIPTION: This code compares two approaches to embedding data in JavaScript: using a direct object literal (slower) versus using JSON.parse (faster for large objects over 10kB).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = { foo: 42, bar: 1337 }; // 🐌\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = JSON.parse('{\"foo\":42,\"bar\":1337}'); // 🚀\n```\n\n----------------------------------------\n\nTITLE: Comparing Case-Insensitive Matching Between u and v Flags\nDESCRIPTION: Illustrates the confusing case-insensitive matching behavior of the ES2015 u flag compared to the more intuitive behavior of the v flag, showing how equivalent expressions behave differently with the u flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst re1 = /\\p{Lowercase_Letter}/giu;\nconst re2 = /[^\\P{Lowercase_Letter}]/giu;\n\nconst string = 'aAbBcC4#';\n\nstring.replaceAll(re1, 'X');\n// → 'XXXXXX4#'\n\nstring.replaceAll(re2, 'X');\n// → 'aAbBcC4#''\n```\n\n----------------------------------------\n\nTITLE: Checking V8 API Changes Using Git Command\nDESCRIPTION: Command-line instruction for developers to view the API changes between V8 versions 6.8 and 6.9 using Git. This helps developers understand what interface modifications they need to adapt to.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-69.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/6.8..branch-heads/6.9 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Using String.match for basic regular expression matching in JavaScript\nDESCRIPTION: This snippet demonstrates how to use String.match to find all words consisting of hexadecimal digits. It only returns the matching substrings without additional match information.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-matchall.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = 'Magic hex numbers: DEADBEEF CAFE';\nconst regex = /\\b\\p{ASCII_Hex_Digit}+\\b/gu;\nfor (const match of string.match(regex)) {\n  console.log(match);\n}\n\n// Output:\n//\n// 'DEADBEEF'\n// 'CAFE'\n```\n\n----------------------------------------\n\nTITLE: WeakRef Implementation for Event Listeners\nDESCRIPTION: Implementation using WeakRef to create weak references to event listeners, allowing automatic garbage collection.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addWeakListener(socket, listener) {\n  const weakRef = new WeakRef(listener);\n  const wrapper = (ev) => { weakRef.deref()?.(ev); };\n  socket.addEventListener('message', wrapper);\n}\n\nclass MovingAvg {\n  constructor(socket) {\n    this.events = [];\n    this.listener = (ev) => { this.events.push(ev); };\n    addWeakListener(socket, this.listener);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents with d8 in JavaScript\nDESCRIPTION: Shows how to use the read() function in d8 to store the contents of a file into a variable.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/d8.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nd8> const license = read('LICENSE');\nd8> license\n\"This license applies to all parts of V8 that are not externally\nmaintained libraries.  The externally maintained libraries used by V8\nare:\n… (etc.)\"\n```\n\n----------------------------------------\n\nTITLE: Single Function Module Export\nDESCRIPTION: Shows the recommended approach of exporting a single function per module for better code organization and performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport function pluck() { /* … */ }\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 v6.9 Branch Using Git\nDESCRIPTION: Git command to checkout the V8 version 6.9 branch for developers with an active V8 repository. This allows developers to experiment with the new features in V8 v6.9.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-69.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 6.9 -t branch-heads/6.9\n```\n\n----------------------------------------\n\nTITLE: Building V8 and running specific tests with gm\nDESCRIPTION: Builds V8 in debug mode for x64 architecture and runs specific test cases from the mjsunit and cctest test suites.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngm x64.debug mjsunit/foo cctest/test-bar/*\n```\n\n----------------------------------------\n\nTITLE: Transitioning Array to PACKED_DOUBLE_ELEMENTS in JavaScript\nDESCRIPTION: Adds a floating-point number to an array of integers, causing V8 to transition the elements kind to PACKED_DOUBLE_ELEMENTS.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [1, 2, 3];\n// elements kind: PACKED_SMI_ELEMENTS\narray.push(4.56);\n// elements kind: PACKED_DOUBLE_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Static Blocks and Fields in JavaScript Classes\nDESCRIPTION: This example demonstrates using multiple static initialization blocks and static fields in a single class. It shows how they are evaluated in textual order as they appear in the class definition.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-static-initializer-blocks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass C {\n  static field1 = console.log('field 1');\n  static {\n    console.log('static block 1');\n  }\n  static field2 = console.log('field 2');\n  static {\n    console.log('static block 2');\n  }\n}\n// → field 1\n//   static block 1\n//   field 2\n//   static block 2\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 Version 6.7 Branch\nDESCRIPTION: Git command to create and checkout a new local branch tracking the remote 6.7 branch for testing new features\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-67.md#2025-04-10_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b 6.7 -t branch-heads/6.7\n```\n\n----------------------------------------\n\nTITLE: Implementing a Timeout with Promise.race in JavaScript\nDESCRIPTION: This example shows how to use Promise.race to either get the result of a heavy computation or reject after a timeout. It demonstrates handling both successful and error cases separately.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-combinators.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const result = await Promise.race([\n    performHeavyComputation(),\n    rejectAfterTimeout(2000),\n  ]);\n  renderResult(result);\n} catch (error) {\n  renderError(error);\n}\n```\n\n----------------------------------------\n\nTITLE: C Vector Dot Product Implementation\nDESCRIPTION: A simple C function implementing dot product calculation for 3D vectors using a struct.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-decompile.md#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct { float x, y, z; } vec3;\n\nfloat dot(const vec3 *a, const vec3 *b) {\n    return a->x * b->x +\n           a->y * b->y +\n           a->z * b->z;\n}\n```\n\n----------------------------------------\n\nTITLE: Decompiled WebAssembly Code Example\nDESCRIPTION: Example of control flow patterns in decompiled WebAssembly code showing loop and conditional structures.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-decompile.md#2025-04-10_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nloop A {\n  // body of the loop here.\n  if (cond) continue A;\n}\n\nblock {\n  if (cond) break;\n  // body goes here.\n}\n\nbr_table[A, B, C, ..D](a);\nlabel A:\nreturn 0;\nlabel B:\nreturn 1;\nlabel C:\nreturn 2;\nlabel D:\n```\n\n----------------------------------------\n\nTITLE: Configuring GN Build Parameters for iOS\nDESCRIPTION: Sets up the GN build configuration with iOS-specific parameters, including deployment target, architecture settings, and V8 optimization options. This configuration creates a monolithic build suitable for iOS devices or simulators.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/cross-compile-ios.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nios_deployment_target = 10\nis_component_build = false\nis_debug = false\ntarget_cpu = \"arm64\"                  # \"x64\" for a simulator build.\ntarget_os = \"ios\"\nuse_custom_libcxx = false             # Use Xcode's libcxx.\nv8_enable_i18n_support = false        # Produces a smaller binary.\nv8_monolithic = true                  # Enable the v8_monolith target.\nv8_use_external_startup_data = false  # The snaphot is included in the binary.\nv8_enable_pointer_compression = false # Unsupported on iOS.\n```\n\n----------------------------------------\n\nTITLE: Performance Testing Negative Point Instances in JavaScript\nDESCRIPTION: This snippet creates Point instances with negative coordinates and runs a performance test on the dotProduct method using console.time.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/system-analyzer.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\na = new Point(-1, -1);\nb = new Point(-2, -2);\nconsole.time('snippet2');\nfor (let i = 0; i < 10e6; i++) {\n  dotProduct = a.dotProduct(b);\n}\nconsole.timeEnd('snippet2');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Array Index Behavior\nDESCRIPTION: This snippet illustrates how JavaScript handles large array indices differently for plain objects/arrays versus TypedArrays, which was a key consideration in implementing support for larger memory sizes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/4gb-wasm-memory.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(array[5_000_000_000]);\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 Version 7.0 Branch\nDESCRIPTION: Git command for developers with an active V8 checkout to switch to the 7.0 release branch for experimentation with new features.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-70.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 7.0 -t branch-heads/7.0\n```\n\n----------------------------------------\n\nTITLE: MovingAvgComponent Class Implementation\nDESCRIPTION: Component class managing MovingAvg instances, showing basic memory management attempt through nulling references.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass MovingAvgComponent {\n  constructor(socket) {\n    this.socket = socket;\n  }\n\n  start() {\n    this.movingAvg = new MovingAvg(this.socket);\n  }\n\n  stop() {\n    // Allow the garbage collector to reclaim memory.\n    this.movingAvg = null;\n  }\n\n  render() {\n    // Do rendering.\n    // …\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GDB backtrace without JIT Compilation Interface\nDESCRIPTION: Example of a GDB backtrace when JIT Compilation Interface is disabled, showing frames marked with '??' that correspond to dynamically generated code without debug information.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/gdb-jit.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#8  0x08281674 in v8::internal::Runtime_SetProperty (args=...) at src/runtime.cc:3758\n#9  0xf5cae28e in ?? ()\n#10 0xf5cc3a0a in ?? ()\n#11 0xf5cc38f4 in ?? ()\n#12 0xf5cbef19 in ?? ()\n#13 0xf5cb09a2 in ?? ()\n#14 0x0809e0a5 in v8::internal::Invoke (construct=false, func=..., receiver=..., argc=0, args=0x0,\n    has_pending_exception=0xffffd46f) at src/execution.cc:97\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loaded Module (p42.c)\nDESCRIPTION: Simple C module that provides a function returning the constant value 42. This module is compiled to WebAssembly and dynamically loaded by the main program.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include <emscripten.h>\n\nEMSCRIPTEN_KEEPALIVE long provide42() {\n  return 42l;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved Array Access Optimization in JavaScript\nDESCRIPTION: This example illustrates how TurboFan can now eliminate the allocation of 'args' and replace variable index access with a ternary operation, leading to performance improvements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-71.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sum(...args) {\n  let total = 0;\n  for (let i = 0; i < args.length; ++i)\n    total += args[i];\n  return total;\n}\n\nfunction sum2(x, y) {\n  return sum(x, y);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Stack Trace Limit in JavaScript\nDESCRIPTION: This code demonstrates how to control the number of stack frames collected by setting the Error.stackTraceLimit variable.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nError.stackTraceLimit\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints for V8 Builtins in GDB\nDESCRIPTION: Demonstrates how to set temporary and regular breakpoints in GDB to debug V8 builtins. It shows the process of setting a breakpoint at Isolate::Init and then at a specific builtin (RegExpPrototypeExec).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/gdb.md#2025-04-10_snippet_0\n\nLANGUAGE: gdb\nCODE:\n```\n(gdb) tb i::Isolate::Init\nTemporary breakpoint 1 at 0x7ffff706742b: i::Isolate::Init. (2 locations)\n(gdb) r\nThread 1 \"d8\" hit Temporary breakpoint 1, 0x00007ffff7c55bc0 in Isolate::Init\n(gdb) br Builtins_RegExpPrototypeExec\nBreakpoint 2 at 0x7ffff7ac8784\n(gdb) c\nThread 1 \"d8\" hit Breakpoint 2, 0x00007ffff7ac8784 in Builtins_RegExpPrototypeExec ()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating V8 Object Representation Issue with preventExtensions\nDESCRIPTION: This code snippet demonstrates the core issue that caused a performance cliff in React. It shows how changing a property's value representation after calling Object.preventExtensions can create orphaned shapes in V8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst o = { x: 1, y: 2 };\nObject.preventExtensions(o);\no.y = 0.2;\n```\n\n----------------------------------------\n\nTITLE: Attaching Math.Is42 Function in C++\nDESCRIPTION: Shows how to attach the newly created MathIs42 builtin to the Math object in V8's bootstrapper.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nHandle<JSObject> math = factory->NewJSObject(cons, TENURED);\nJSObject::AddProperty(global, name, math, DONT_ENUM);\n// […snip…]\nSimpleInstallFunction(math, \"is42\", Builtins::kMathIs42, 1, true);\n```\n\n----------------------------------------\n\nTITLE: Using Promise.any and AggregateError in JavaScript\nDESCRIPTION: Demonstrates how to use the Promise.any combinator which resolves as soon as one input promise is fulfilled. If all promises are rejected, it throws an AggregateError containing all rejection values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst promises = [\n  fetch('/endpoint-a').then(() => 'a'),\n  fetch('/endpoint-b').then(() => 'b'),\n  fetch('/endpoint-c').then(() => 'c'),\n];\ntry {\n  const first = await Promise.any(promises);\n  // Any of the promises was fulfilled.\n  console.log(first);\n  // → e.g. 'b'\n} catch (error) {\n  // All of the promises were rejected.\n  console.assert(error instanceof AggregateError);\n  // Log the rejection values:\n  console.log(error.errors);\n}\n```\n\n----------------------------------------\n\nTITLE: Spectre-Mitigated Array Access Implementation\nDESCRIPTION: Modified version of array access code that includes poison register technique to prevent speculative execution attacks. The code maintains normal functionality while preventing information leaks through speculative execution.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spectre.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet poison = 1;\n// …\nif (condition) {\n  poison *= condition;\n  return a[i] * poison;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unicode properties of strings with the `v` flag\nDESCRIPTION: Example showing how to use Unicode properties of strings with the `v` flag to match complex emoji consisting of multiple code points. The RGI_Emoji property matches recommended emoji for general interchange.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /^\\p{RGI_Emoji}$/v;\n\n// Match an emoji that consists of just 1 code point:\nre.test('⚽'); // '\\u26BD'\n// → true ✅\n\n// Match an emoji that consists of multiple code points:\nre.test('👨🏾‍⚕️'); // '\\u{1F468}\\u{1F3FE}\\u200D\\u2695\\uFE0F'\n// → true ✅\n```\n\n----------------------------------------\n\nTITLE: Updating Function's Code Field in V8 Lazy Unlinking\nDESCRIPTION: Updates the code field of a JavaScript function with the interpreter trampoline and adds a write barrier. This is the core of lazy unlinking which replaces optimized code with interpreter code when the function is invoked after deoptimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Update the code field of the function with the trampoline.\n__ movq(FieldOperand(rdi, JSFunction::kCodeOffset), rcx);\n// Write barrier to protect the field.\n__ RecordWriteField(rdi, JSFunction::kCodeOffset, rcx, r15,\n                    kDontSaveFPRegs, OMIT_REMEMBERED_SET, OMIT_SMI_CHECK);\n```\n\n----------------------------------------\n\nTITLE: Using lookbehind assertions in JavaScript RegExp\nDESCRIPTION: Examples of positive and negative lookbehind assertions in regular expressions. The positive example matches digits preceded by a dollar sign, while the negative example matches digits not preceded by a dollar sign.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/regexp-lookbehind-assertions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/(?<=\\$)\\d+/.exec('Benjamin Franklin is on the $100 bill'); // ['100']\n/(?<!\\$)\\d+/.exec('it's worth about €90');                  // ['90']\n```\n\n----------------------------------------\n\nTITLE: Importing JSON Module with Assertion\nDESCRIPTION: Demonstrates how to import a JSON module using the new import assertion syntax to specify the module type as JSON.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-assertions.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport json from './foo.json' assert { type: 'json' };\nconsole.log(json.answer); // 42\n```\n\n----------------------------------------\n\nTITLE: Basic Object.entries Usage in JavaScript\nDESCRIPTION: Demonstrates how to use Object.entries to convert an object into an array of key-value pairs and iterate over them using for-of loop.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-fromentries.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 42, y: 50 };\nconst entries = Object.entries(object);\n// → [['x', 42], ['y', 50]]\n\nfor (const [key, value] of entries) {\n  console.log(`The value of ${key} is ${value}.`);\n}\n// Logs:\n// The value of x is 42.\n// The value of y is 50.\n```\n\n----------------------------------------\n\nTITLE: Installing cquery for VSCode with V8\nDESCRIPTION: A bash script sequence for cloning, building, and installing cquery from GitHub to be used with Visual Studio Code for V8 development. It creates a build directory and compiles cquery with the necessary configuration options.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/ide-setup.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cquery-project/cquery \"$CQUERY_DIR\"\ncd \"$CQUERY_DIR\"\ngit submodule update --init\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=release -DCMAKE_INSTALL_PREFIX=release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES\nmake install -j8\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Execution and Stack Management in JavaScript\nDESCRIPTION: This code shows how function execution works in JavaScript, where a function f is called with two arguments, showing how the stack is managed during execution. It illustrates the foundation for understanding why variable allocation is complex in JavaScript engines.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/preparser.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(a, b) {\n  const c = a + b;\n  return c;\n}\n\nfunction g() {\n  return f(1, 2);\n  // The return instruction pointer of `f` now points here\n  // (because when `f` `return`s, it returns here).\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateExpression Grammar in ECMAScript\nDESCRIPTION: This grammar snippet defines the production rules for UpdateExpression, showing how different constructs like increment and decrement operators are handled.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_0\n\nLANGUAGE: grammar\nCODE:\n```\nUpdateExpression :\n  LeftHandSideExpression\n  LeftHandSideExpression ++\n  LeftHandSideExpression --\n  ++ UnaryExpression\n  -- UnaryExpression\n```\n\n----------------------------------------\n\nTITLE: Loading Layered API Module in HTML\nDESCRIPTION: Demonstrates loading a layered API module using a script tag. This proposed feature allows loading built-in browser APIs or fallback to polyfills.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<script\n  type=\"module\"\n  src=\"std:virtual-scroller|https://example.com/virtual-scroller.mjs\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Modifying a Point Object in JavaScript\nDESCRIPTION: This JavaScript snippet shows how modifying an object's property type can affect optimizations like double field unboxing, causing the engine to use a more general (and potentially slower) representation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst q = new Point(2, 'ab');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Smi and HeapNumber Object Properties\nDESCRIPTION: Shows how V8 handles integer (Smi) and floating-point (HeapNumber) values in object properties internally.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst o = {\n  x: 42,  // Smi\n  y: 4.2, // HeapNumber\n};\n```\n\n----------------------------------------\n\nTITLE: Proxy Constructor Performance Test in JavaScript\nDESCRIPTION: A benchmark test that measures the performance of constructing new instances through a proxy. This test is designed to identify performance bottlenecks in the 'construct' trap implementation by creating numerous instances.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/optimizing-proxies.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyClass() {}\nMyClass.prototype = {};\nconst P = new Proxy(MyClass, {});\nfunction run() {\n  return new P();\n}\nconst N = 1e5;\nconsole.time('run');\nfor (let i = 0; i < N; ++i) {\n  run();\n}\nconsole.timeEnd('run');\n```\n\n----------------------------------------\n\nTITLE: Legacy Identifier vs Keyword Usage in JavaScript Functions\nDESCRIPTION: This code demonstrates how 'await' can be used as an identifier in regular functions but not in async functions where it's a reserved keyword, showing how ECMAScript carefully handles backward compatibility.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction old() {\n  var await;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function modern() {\n  var await; // Syntax error\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Proposal Flags to WebAssembly JS Test Configuration\nDESCRIPTION: This code shows where to add the proposal repository name and feature flag to the JS tests configuration file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-shipping-checklist.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntest/wasm-js/testcfg.py\n```\n\n----------------------------------------\n\nTITLE: Emscripten Memory Access Pattern\nDESCRIPTION: This code shows the typical pattern Emscripten uses for memory access in JavaScript, which needed to be modified to support addresses above 2GB.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/4gb-wasm-memory.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nHEAP32[(ptr + offset) >> 2]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Storage for Googlers\nDESCRIPTION: This command is used by Google employees to authenticate with Google Storage if they encounter fetch or login errors during the sync process.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngsutil.py config\n```\n\n----------------------------------------\n\nTITLE: Rebaselining Bytecode Expectations\nDESCRIPTION: Running the generate-bytecode-expectations binary with the --rebaseline flag to update the golden files with new bytecode expectations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nout/x64.release/generate-bytecode-expectations --rebaseline\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all the project dependencies using Node Package Manager.\nSOURCE: https://github.com/v8/v8.dev/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Mentioned JavaScript Methods - Built-in Functions\nDESCRIPTION: Core JavaScript built-in methods that were optimized by the V8 team as part of their real-world performance improvements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/real-world-performance.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nObject.create\nFunction.prototype.bind\n```\n\n----------------------------------------\n\nTITLE: Embedding JSON into JavaScript Programs using JSON.parse\nDESCRIPTION: This code demonstrates how to create a valid JavaScript program by embedding JSON data as a string literal within a JSON.parse call, for better performance with large data objects.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// A JavaScript object (or array, or string) representing some data.\nconst data = {\n  LineTerminators: '\\n\\r  ',\n  // Note: the string contains 4 characters: '\\n\\r\\u2028\\u2029'.\n};\n\n// Turn the data into its JSON-stringified form.\nconst json = JSON.stringify(data);\n\n// Now, we want to insert the JSON into a script body as a JavaScript\n// string literal per https://v8.dev/blog/cost-of-javascript-2019#json,\n// escaping special characters like `\"` in the data.\n// Thanks to JSON ⊂ ECMAScript, the output of `JSON.stringify` is\n// guaranteed to be a syntactically valid ECMAScript literal:\nconst jsStringLiteral = JSON.stringify(json);\n// Create a valid ECMAScript program that embeds the JavaScript string\n// literal representing the JSON data within a `JSON.parse` call.\nconst program = `const data = JSON.parse(${ jsStringLiteral });`;\n// → 'const data = JSON.parse(\"…\");'\n// (Additional escaping is needed if the target is an inline <script>.)\n\n// Write a file containing the ECMAScript program to disk.\nsaveToDisk(filePath, program);\n```\n\n----------------------------------------\n\nTITLE: Generating V8 build files with gn interactive mode\nDESCRIPTION: Uses gn to generate build files in a specified output directory and opens an editor for entering build configuration arguments.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngn args out/foo\n```\n\n----------------------------------------\n\nTITLE: Implementing MWC1616 Random Number Generator in C++\nDESCRIPTION: Original V8 implementation of Math.random() using the MWC1616 (multiply with carry) algorithm. Uses 64 bits of internal state split into two 32-bit values. Returns a 32-bit random value that is later converted to a floating point number between 0 and 1.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/math-random.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nuint32_t state0 = 1;\nuint32_t state1 = 2;\nuint32_t mwc1616() {\n  state0 = 18030 * (state0 & 0xFFFF) + (state0 >> 16);\n  state1 = 30903 * (state1 & 0xFFFF) + (state1 >> 16);\n  return state0 << 16 + (state1 & 0xFFFF);\n}\n```\n\n----------------------------------------\n\nTITLE: Private Method Class Example\nDESCRIPTION: Simple class definition with a private method\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  #a() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unicode property escapes in JavaScript regular expressions\nDESCRIPTION: Demonstrates the use of Unicode property escapes in regular expressions with the /u flag to match Greek symbols.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-64.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst regexGreekSymbol = /\\p{Script_Extensions=Greek}/u;\nregexGreekSymbol.test('π');\n// → true\n```\n\n----------------------------------------\n\nTITLE: Compiling WebAssembly Module for Dynamic Loading\nDESCRIPTION: This shell command compiles a C file into a WebAssembly module that can be dynamically loaded. It uses the --no-entry flag and imports memory to ensure compatibility with the main module.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nemcc p42.c -o p42.wasm --no-entry -Wl,--import-memory\n```\n\n----------------------------------------\n\nTITLE: Shape Transition Example\nDESCRIPTION: Demonstrates how V8 handles shape transitions when property types change.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = { x: 1 };\nconst b = { x: 2 };\n// → objects have `x` as `Smi` field now\n\nb.x = 0.2;\n// → `b.x` is now represented as a `Double`\n\ny = a.x;\n```\n\n----------------------------------------\n\nTITLE: Expanded AsyncFunctionBody Grammar Production\nDESCRIPTION: Simplified expansion of the AsyncFunctionBody production showing that async functions have FunctionBody_Await, where 'await' is a keyword rather than an identifier.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_4\n\nLANGUAGE: grammar\nCODE:\n```\nAsyncFunctionBody :\n  FunctionBody_Await\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Static Initialization Blocks in JavaScript\nDESCRIPTION: This code demonstrates how to use class static initialization blocks which run when the class itself is evaluated. This feature is available in V8 v9.4 without needing the --harmony-class-static-blocks flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-94.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass C {\n  // This block will run when the class itself is evaluated\n  static { console.log(\"C's static block\"); }\n}\n```\n\n----------------------------------------\n\nTITLE: FiberNode Class Definition Causing Performance Issue\nDESCRIPTION: This snippet shows the React FiberNode class implementation that caused performance issues. The class initializes timestamp fields with integer values (Smi representation) but later stores floating-point timestamps, causing representation changes after preventExtensions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nclass FiberNode {\n  constructor() {\n    this.actualStartTime = 0;\n    Object.preventExtensions(this);\n  }\n}\n\nconst node1 = new FiberNode();\nconst node2 = new FiberNode();\n```\n\n----------------------------------------\n\nTITLE: Using the RegExp `v` flag in JavaScript\nDESCRIPTION: Basic syntax for using the new `v` flag in JavaScript regular expressions. This flag enables the unicodeSets mode which unlocks extended character classes and other features not available with the `u` flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /…/v;\n```\n\n----------------------------------------\n\nTITLE: Optimized Private Field Implementation\nDESCRIPTION: Example showing the optimized bytecode generation for private field initialization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  #a = 0;\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// Load the private name symbol for `#a` into r1\nLdaImmutableCurrentContextSlot [2]\nStar0\n\n// Use the DefineKeyedOwnProperty bytecode to store 0 as the value of\n// the property keyed by the private name symbol `#a` in the instance,\n// that is, `#a = 0`.\nLdaZero\nDefineKeyedOwnProperty <this>, r0, [0]\n```\n\n----------------------------------------\n\nTITLE: Main Dynamic Loading Implementation (u42.c)\nDESCRIPTION: Main C file that implements dynamic WebAssembly module loading using Emscripten. It uses async JavaScript functionality to load a WASM module and demonstrates function pointer handling and multiple calls to the loaded function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include <emscripten.h>\n\ntypedef long (*fooFun)();\n\n// promise a function\nEM_ASYNC_JS(fooFun, resolveFun, (), {\n  console.log('loading promise42');\n  LoadedModule = (await WebAssembly.instantiateStreaming(fetch('p42.wasm'))).instance;\n  return addFunction(LoadedModule.exports['provide42']);\n});\n\nEM_JS_DEPS(funDeps, \"$addFunction\")\n\nextern fooFun get42;\n\nlong stub() {\n  get42 = resolveFun();\n  return get42();\n}\n\nfooFun get42 = stub;\n\nint main() {\n  printf(\"first call p42() = %ld\\n\", get42());\n  printf(\"second call = %ld\\n\", get42());\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Eval Location in V8 Stack Trace\nDESCRIPTION: This snippet illustrates the format for displaying an eval location in a V8 stack trace. It shows the 'eval at' prefix followed by the position of the eval call.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\neval at position\n```\n\n----------------------------------------\n\nTITLE: Manual Landing Process\nDESCRIPTION: Commands for manually landing changes after updating local branch.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit pull --rebase origin\ngit cl land\n```\n\n----------------------------------------\n\nTITLE: Building Perf from Source\nDESCRIPTION: Steps to build the Linux perf tool from source, including installing dependencies and downloading kernel sources, useful when the system's perf version is outdated.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install linux-generic-lts-wily;\n```\n\n----------------------------------------\n\nTITLE: PC-Relative Call in V8 Builtins\nDESCRIPTION: An example of how V8 previously made calls to other Code objects using a PC-relative call instruction. This approach required GC to update the offset when Code objects moved in memory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/embedded-builtins.md#2025-04-10_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\n// Call instruction located at [pc + <offset>].\ncall <offset>\n```\n\n----------------------------------------\n\nTITLE: Compiling Hello World with V8\nDESCRIPTION: Command to compile C++ hello world program linking against V8 static library with required flags and dependencies\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ng++ -I. -Iinclude samples/hello-world.cc -o hello_world -fno-rtti -fuse-ld=lld -lv8_monolith -lv8_libbase -lv8_libplatform -ldl -Lout.gn/x64.release.sample/obj/ -pthread -std=c++20 -DV8_COMPRESS_POINTERS -DV8_ENABLE_SANDBOX\n```\n\n----------------------------------------\n\nTITLE: Checking out a specific V8 version using Git\nDESCRIPTION: Command to check out a specific V8 version branch in a local Git repository. Developers with an active V8 checkout can use this to experiment with the features in that version.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/discontinuing-release-posts.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b X.Y -t branch-heads/X.Y\n```\n\n----------------------------------------\n\nTITLE: Updating Smi and HeapNumber Properties\nDESCRIPTION: Demonstrates how V8 handles updates to both Smi and HeapNumber values in object properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\no.x += 10;\n// → o.x is now 52\no.y += 1;\n// → o.y is now 5.2\n```\n\n----------------------------------------\n\nTITLE: Enabling Ignition Interpreter in Embedded V8 (JavaScript)\nDESCRIPTION: Shows how to enable the new Ignition interpreter in embedded versions of V8 using a command-line flag. This allows for immediate memory savings and future optimization opportunities.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-53.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n--ignition\n```\n\n----------------------------------------\n\nTITLE: Examining AsyncFunctionBody Grammar Production\nDESCRIPTION: Grammar production showing how async function bodies are defined with the +Await parameter, indicating that 'await' is treated as a keyword in this context.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_3\n\nLANGUAGE: grammar\nCODE:\n```\nAsyncFunctionBody :\n  FunctionBody[~Yield, +Await]\n```\n\n----------------------------------------\n\nTITLE: React's Solution to V8 Performance Issue\nDESCRIPTION: This code demonstrates how React fixed the performance issue by ensuring all time fields start with Double representation from the beginning. It uses NaN to force the field into Double representation before assigning the actual value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nclass FiberNode {\n  constructor() {\n    // Force `Double` representation from the start.\n    this.actualStartTime = Number.NaN;\n    // Later, you can still initialize to the value you want:\n    this.actualStartTime = 0;\n    Object.preventExtensions(this);\n  }\n}\n\nconst node1 = new FiberNode();\nconst node2 = new FiberNode();\n```\n\n----------------------------------------\n\nTITLE: Engineering Notation with Intl.NumberFormat\nDESCRIPTION: Demonstrates engineering notation formatting with units.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'unit',\n  unit: 'meter-per-second',\n  notation: 'engineering',\n});\nformatter.format(299792458);\n// → '299.792E6 m/s'\n```\n\n----------------------------------------\n\nTITLE: Example of Reviewer Responsibility Specification in Email\nDESCRIPTION: This snippet demonstrates how to specify the responsibilities of each reviewer in a review request email. It shows how to clearly assign different parts of the code to specific reviewers and mark others as FYI only.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/committer-responsibility.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- larry: bitmap changes\n- sergey: process hacks\n- everybody else: FYI\n```\n\n----------------------------------------\n\nTITLE: Array.prototype.flat Basic Usage\nDESCRIPTION: Shows how to use Array#flat with default depth of 1 to flatten a nested array one level deep.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/array-flat-flatmap.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\narray.flat();\n// → [1, 2, [3]]\n\n// …is equivalent to:\narray.flat(1);\n// → [1, 2, [3]]\n```\n\n----------------------------------------\n\nTITLE: Complete Listing of Fibonacci Computation with JSPI\nDESCRIPTION: This is the full C program that implements Fibonacci computation using various methods, including JSPI. It includes functions for local computation, JavaScript-based computation, and Promise-based computation using JSPI.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <emscripten.h>\n\ntypedef long (testFun)(long, int);\n\n#define microSeconds (1000000)\n\nlong add(long x, long y) {\n  return x + y;\n}\n\n// Ask JS to do the addition\nEM_JS(long, jsAdd, (long x, long y), {\n  return x + y;\n});\n\n// promise an addition\nEM_ASYNC_JS(long, promiseAdd, (long x, long y), {\n  return Promise.resolve(x+y);\n});\n\n__attribute__((noinline))\nlong localFib(long x) {\n if (x==0)\n   return 0;\n if (x==1)\n   return 1;\n return add(localFib(x - 1), localFib(x - 2));\n}\n\n__attribute__((noinline))\nlong jsFib(long x) {\n  if (x==0)\n    return 0;\n  if (x==1)\n    return 1;\n  return jsAdd(jsFib(x - 1), jsFib(x - 2));\n}\n\n__attribute__((noinline))\nlong promiseFib(long x) {\n  if (x==0)\n    return 0;\n  if (x==1)\n    return 1;\n  return promiseAdd(promiseFib(x - 1), promiseFib(x - 2));\n}\n\nlong runLocal(long x, int count) {\n  long temp = 0;\n  for(int ix = 0; ix < count; ix++)\n    temp += localFib(x);\n  return temp / count;\n}\n\nlong runJs(long x,int count) {\n  long temp = 0;\n  for(int ix = 0; ix < count; ix++)\n    temp += jsFib(x);\n  return temp / count;\n}\n\nlong runPromise(long x, int count) {\n  long temp = 0;\n  for(int ix = 0; ix < count; ix++)\n    temp += promiseFib(x);\n  return temp / count;\n}\n\ndouble runTest(testFun test, int limit, int count){\n  clock_t start = clock();\n  test(limit, count);\n  clock_t stop = clock();\n  return ((double)(stop - start)) / CLOCKS_PER_SEC;\n}\n\nvoid runTestSequence(int step, int limit, int count) {\n  for (int ix = 0; ix <= limit; ix += step){\n    double light = (runTest(runLocal, ix, count) / count) * microSeconds;\n    double jsTime = (runTest(runJs, ix, count) / count) * microSeconds;\n    double promiseTime = (runTest(runPromise, ix, count) / count) * microSeconds;\n    printf(\"fib(%d) %gμs %gμs %gμs %gμs\\n\",ix, light, jsTime, promiseTime, (promiseTime - jsTime));\n  }\n}\n\nEMSCRIPTEN_KEEPALIVE int main() {\n  int step =  1;\n  int limit = 15;\n  int count = 1000;\n  runTestSequence(step, limit, count);\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling WebAssembly Dynamic Tiering in V8 Embedders\nDESCRIPTION: This V8 flag enables WebAssembly Dynamic Tiering for V8 embedders. It allows developers to experiment with the feature in custom V8 embeddings.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-dynamic-tiering.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n--wasm-dynamic-tiering\n```\n\n----------------------------------------\n\nTITLE: Using Rest Parameters in Array Destructuring\nDESCRIPTION: Shows how to use the rest pattern in array destructuring to capture remaining elements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst [x, y, ...r] = [1, 2, 3, 4];              // x=1, y=2, r=[3,4]\n```\n\n----------------------------------------\n\nTITLE: Tracing Arm64 Assembly with Debug Instructions\nDESCRIPTION: This snippet demonstrates how to use Debug instructions to enable tracing and logging of register values for specific sections of Arm64 assembly code in the V8 simulator.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_8\n\nLANGUAGE: assembly\nCODE:\n```\n0x00007fc039d31cb0  9280000d            movn x13, #0x0\n#   x13: 0xffffffffffffffff\n0x00007fc039d31cb4  d280004c            movz x12, #0x2\n#   x12: 0x0000000000000002\n0x00007fc039d31cb8  d2864110            movz x16, #0x3208\n#   ip0: 0x0000000000003208\n0x00007fc039d31cbc  8b10034b            add x11, x26, x16\n#   x11: 0x00007fbf00003208\n0x00007fc039d31cc0  f940016a            ldr x10, [x11]\n#   x10: 0x0000000000000000 <- 0x00007fbf00003208\n0x00007fc039d31cc4  a9be7fea            stp x10, xzr, [sp, #-32]!\n#    sp: 0x00007fc033e81340\n#   x10: 0x0000000000000000 -> 0x00007fc033e81340\n#   xzr: 0x0000000000000000 -> 0x00007fc033e81348\n0x00007fc039d31cc8  a90137ec            stp x12, x13, [sp, #16]\n#   x12: 0x0000000000000002 -> 0x00007fc033e81350\n#   x13: 0xffffffffffffffff -> 0x00007fc033e81358\n0x00007fc039d31ccc  910063fd            add fp, sp, #0x18 (24)\n#    fp: 0x00007fc033e81358\n0x00007fc039d31cd0  d45bd600            hlt #0xdeb0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ES2019 Behavior with LINE SEPARATOR and PARAGRAPH SEPARATOR Characters\nDESCRIPTION: This code shows how ES2019 now allows unescaped U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in string literals, with no exceptions thrown.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// A string containing a raw U+2028 character.\nconst LS = ' ';\n// → ES2018: SyntaxError\n// → ES2019: no exception\n\n// A string containing a raw U+2029 character, produced by `eval`:\nconst PS = eval('\"\\u2029\"');\n// → ES2018: SyntaxError\n// → ES2019: no exception\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Parameters in Functions\nDESCRIPTION: Shows the ES2015 syntax for defining default parameter values in function declarations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction sublist(list, start = 0, end = list.length) { … }\nsublist([1, 2, 3], 1);\n// sublist([1, 2, 3], 1, 3)\n```\n\n----------------------------------------\n\nTITLE: Listing available v8gen configurations from a specific master\nDESCRIPTION: Shows predefined configurations from the client.v8 master that can be used with v8gen for generating V8 build files.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nv8gen list -m client.v8\n```\n\n----------------------------------------\n\nTITLE: Viewing API changes between V8 versions using Git\nDESCRIPTION: Git command to view all commits that modified the V8 API between two versions. This helps developers track API changes that were previously documented in release blog posts.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/discontinuing-release-posts.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/A.B..branch-heads/X.Y include/v8\\*.h\n```\n\n----------------------------------------\n\nTITLE: Object.seal Example\nDESCRIPTION: Shows how V8 handles sealed objects with non-configurable properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 1 };\nObject.seal(object);\nobject.y = 2;\n// TypeError: Cannot add property y;\n//            object is not extensible\ndelete object.x;\n// TypeError: Cannot delete property x\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'in' Operator with Regular Properties in JavaScript\nDESCRIPTION: This snippet shows how the 'in' operator works with regular object properties, including inherited properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/private-brand-checks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst o1 = {'foo': 0};\nconsole.log('foo' in o1); // true\nconst o2 = {};\nconsole.log('foo' in o2); // false\nconst o3 = Object.create(o1);\nconsole.log('foo' in o3); // true\n```\n\n----------------------------------------\n\nTITLE: Adding Int32Add1 to x64 Instruction Codes\nDESCRIPTION: This change adds the kX64Int32Add1 opcode to the x64-specific instruction codes list. This opcode will be used to select the appropriate assembly sequence to implement the Int32Add1 operation on x64 architecture.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/backend/x64/instruction-codes-x64.h b/src/compiler/backend/x64/instruction-codes-x64.h\nindex 9b8be0e0b5..7f5faeb87b 100644\n--- a/src/compiler/backend/x64/instruction-codes-x64.h\n+++ b/src/compiler/backend/x64/instruction-codes-x64.h\n@@ -12,6 +12,7 @@ namespace compiler {\n // X64-specific opcodes that specify which assembly sequence to emit.\n // Most opcodes specify a single instruction.\n #define TARGET_ARCH_OPCODE_LIST(V)        \\\n+  V(X64Int32Add1)                         \\\n   V(X64Add)                               \\\n   V(X64Add32)                             \\\n   V(X64And)                               \\\n```\n\n----------------------------------------\n\nTITLE: Inefficient Maximum Value Calculation in JavaScript\nDESCRIPTION: Demonstrates an inefficient way to calculate the maximum value in an array by reading beyond its length, causing performance issues.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Maximum(array) {\n  let max = 0;\n  for (let i = 0; i <= array.length; i++) { // BAD COMPARISON!\n    if (array[i] > max) max = array[i];\n  }\n  return max;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling V8 Untrusted Code Mitigations Flag\nDESCRIPTION: The command-line flag to disable mitigations against speculative side-channel attacks in V8. This can be used when running only trusted code to avoid potential performance penalties. The performance impact varies by workload, from negligible to up to 15% for computational-heavy tasks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/untrusted-code-mitigations.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--no-untrusted-code-mitigations\n```\n\n----------------------------------------\n\nTITLE: Basic WebAssembly i64 Parameter Function\nDESCRIPTION: Example of a WebAssembly module with a function accepting a 64-bit integer parameter before legalization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/wasm-bigint.md#2025-04-10_snippet_0\n\nLANGUAGE: webassembly\nCODE:\n```\n(module\n  (func $send_i64 (param $x i64)\n    ..))\n```\n\n----------------------------------------\n\nTITLE: Using a Simple Async Function in JavaScript\nDESCRIPTION: This snippet shows how to call the simple async function and handle its returned promise. It demonstrates that the function returns a promise and how to access the resolved value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = computeAnswer();\n// → Promise\n\np.then(console.log);\n// prints 42 on the next turn\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Values in Destructuring\nDESCRIPTION: Demonstrates how to set default values when destructuring objects and arrays.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {a: x, b: y = x} = {a: 4};                // x=4, y=4\n// or…\nconst [x, y = 0, z = 0] = [1, 2];               // x=1, y=2, z=0\n```\n\n----------------------------------------\n\nTITLE: Implementing a TFS Builtin for Heap Number Comparison\nDESCRIPTION: This snippet demonstrates how to implement a TFS (stub linkage) builtin called MathIsHeapNumber42 that checks if a heap number equals 42. It retrieves the parameter, asserts it's a heap number, loads its value, and compares it to 42.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Defining a TFS builtin works exactly the same way as TFJ builtins.\nTF_BUILTIN(MathIsHeapNumber42, MathBuiltinsAssembler) {\n  Node* const x = Parameter(Descriptor::kX);\n  CSA_ASSERT(this, IsHeapNumber(x));\n  Node* const value = LoadHeapNumberValue(x);\n  Node* const is_42 = Float64Equal(value, Float64Constant(42));\n  Return(SelectBooleanConstant(is_42));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Opcode Name in wasm-opcodes.cc\nDESCRIPTION: This diff adds a human-readable name for the new I32Add1 instruction in wasm-opcodes.cc. The name is used for debugging and error messages. The 'add1' name is provided through the CASE_I32_OP macro.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/wasm/wasm-opcodes.cc b/src/wasm/wasm-opcodes.cc\nindex 5ed664441d..2d4e9554fe 100644\n--- a/src/wasm/wasm-opcodes.cc\n+++ b/src/wasm/wasm-opcodes.cc\n@@ -75,6 +75,7 @@ const char* WasmOpcodes::OpcodeName(WasmOpcode opcode) {\n     // clang-format off\n \n     // Standard opcodes\n+    CASE_I32_OP(Add1, \"add1\")\n     CASE_INT_OP(Eqz, \"eqz\")\n     CASE_ALL_OP(Eq, \"eq\")\n     CASE_I64x2_OP(Eq, \"eq\")\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with the Build Buddy Tool\nDESCRIPTION: Command to authenticate with the build buddy (bb) tool before triggering flake bisect jobs. Requires a google.com account for authentication.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/flake-bisect.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbb auth-login\n```\n\n----------------------------------------\n\nTITLE: Starting Debugger from Command Line\nDESCRIPTION: Command to start the debugger after n instructions\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nout/arm64.debug/d8 --stop_sim_at <n> # Or out/arm.debug/d8 for a 32-bit build.\n```\n\n----------------------------------------\n\nTITLE: Using Array.prototype.includes in JavaScript\nDESCRIPTION: This snippet demonstrates the Array.prototype.includes method, a stage 3 proposal for ES2016 at the time of V8 v4.7. The method provides a simple syntax for checking if an array contains a specific element, returning a boolean value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-47.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[1, 2, 3].includes(3); // true\n['apple', 'banana', 'cherry'].includes('apple'); // true\n['apple', 'banana', 'cherry'].includes('peach'); // false\n```\n\n----------------------------------------\n\nTITLE: Using RegExp Unicode Flag with Single Character Matcher in JavaScript\nDESCRIPTION: Shows how the RegExp Unicode flag (u) makes the dot (.) character match any Unicode symbol instead of just characters in the Basic Multilingual Plane. This allows proper matching of non-BMP characters like emoji.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-50.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = 'the 🅛 train';\n\n/the\\s.\\strain/.test(string);\n// false\n\n/the\\s.\\strain/u.test(string);\n// true\n```\n\n----------------------------------------\n\nTITLE: TurboFan Optimized Assembly Output for Property Access in JavaScript\nDESCRIPTION: This assembly code snippet shows how TurboFan optimizes the property access in the foo() function. It demonstrates direct value insertion for const properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_4\n\nLANGUAGE: assembly\nCODE:\n```\n...\n40  mov eax,0x2a812499          ;; object: 0x2a812499 <String[16]: #one arm, one leg>\n45  mov esp,ebp\n47  pop ebp\n48  ret 0x8                     ;; return \"one arm, one leg\"!\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Import Example in HTML\nDESCRIPTION: Demonstrates how to dynamically import modules using async/await within a module script, showing usage of named imports from a module.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  (async () => {\n    const moduleSpecifier = './lib.mjs';\n    const {repeat, shout} = await import(moduleSpecifier);\n    repeat('hello');\n    // → 'hello hello'\n    shout('Dynamic import in action');\n    // → 'DYNAMIC IMPORT IN ACTION!'\n  })();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using lookahead assertions in JavaScript RegExp\nDESCRIPTION: Examples of positive and negative lookahead assertions in regular expressions. The positive example matches digits followed by a percent sign, while the negative example matches digits not followed by a percent sign.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/regexp-lookbehind-assertions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/\\d+(?=%)/.exec('100% of US presidents have been male'); // ['100']\n/\\d+(?!%)/.exec('that's all 44 of them');                // ['44']\n```\n\n----------------------------------------\n\nTITLE: Defining AssignmentExpression and Related Productions in ECMAScript\nDESCRIPTION: This grammar snippet shows how CPEAAPL is used in the production rules for AssignmentExpression, ArrowFunction, and PrimaryExpression to handle ambiguous cases.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_4\n\nLANGUAGE: grammar\nCODE:\n```\nAssignmentExpression :\n  ConditionalExpression\n  ArrowFunction\n  ...\n\nArrowFunction :\n  ArrowParameters => ConciseBody\n\nArrowParameters :\n  BindingIdentifier\n  CPEAAPL\n\nPrimaryExpression :\n  ...\n  CPEAAPL\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic Property Access in Babel\nDESCRIPTION: This code snippet shows a performance bottleneck discovered in Babel where accessing the last item of an array using negative indexing can cause performance issues. The pattern leads to accesses of property \"-1\" when the array is empty, triggering a slow-path in V8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/web-tooling-benchmark.md#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvalue = items[items.length - 1];\n```\n\n----------------------------------------\n\nTITLE: Configuring Git to fetch V8 branch heads\nDESCRIPTION: Git configuration line to add to .git/config for fetching V8 branch heads when depot_tools wasn't used.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/version-numbers.md#2025-04-10_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nfetch = +refs/branch-heads/*:refs/remotes/branch-heads/*\n```\n\n----------------------------------------\n\nTITLE: Using Intl.DateTimeFormat with timeStyle and dateStyle Options in JavaScript\nDESCRIPTION: Shows how to use the new timeStyle and dateStyle options in Intl.DateTimeFormat for more convenient date and time formatting. These options provide pre-defined formats for common date and time presentations based on locale.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-76.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst dtf = new Intl.DateTimeFormat('de', {\n  timeStyle: 'medium',\n  dateStyle: 'short'\n});\ndtf.format(Date.now());\n// → '19.06.19, 13:33:37'\n```\n\n----------------------------------------\n\nTITLE: Post-processing Perf Data with JIT Information\nDESCRIPTION: How to combine static perf information with V8's JIT code samples using perf inject.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nperf inject --jit --input=perf.data --output=perf.data.jitted\n```\n\n----------------------------------------\n\nTITLE: Using optional catch binding without parameter in ES2019\nDESCRIPTION: This example demonstrates the new ES2019 feature where the catch clause can be used without a binding parameter, which is useful when the exception object isn't needed in the exception handling code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-catch-binding.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  doSomethingThatMightThrow();\n} catch { // → No binding!\n  handleException();\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing groups behavior in lookahead vs lookbehind assertions\nDESCRIPTION: Demonstration of how capturing groups with quantifiers behave differently in lookahead versus lookbehind assertions. In lookahead, the rightmost match is captured, while in lookbehind, the leftmost match is captured due to the reversed matching direction.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/regexp-lookbehind-assertions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/h(?=(\\w)+)/.exec('hodor');  // ['h', 'r']\n/(?<=(\\w)+)r/.exec('hodor'); // ['r', 'h']\n```\n\n----------------------------------------\n\nTITLE: Blink Feature Implementation Files\nDESCRIPTION: Files where Blink features are typically implemented for V8 integration\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/feature-launch-process.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngin/gin_features.h\ngin/gin_features.cc\ngin/v8_initializer.cc\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Reference Ambiguity in JavaScript\nDESCRIPTION: This code snippet shows how JavaScript's syntax makes it challenging to determine variable references during preprocessing. It shows an ambiguous partial expression that could be interpreted in multiple ways.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/preparser.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(d) {\n  function g() {\n    const a = ({ d }\n```\n\n----------------------------------------\n\nTITLE: Finding elements from the end of an Array using reverse()\nDESCRIPTION: A workaround approach to search from the end of an Array before findLast existed, by using the reverse() method. Note that reverse() modifies the original array in-place, which may be undesirable in some cases.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/finding-in-arrays.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninputArray.reverse().find(predicate)\n```\n\n----------------------------------------\n\nTITLE: Using RegExp Unicode Flag with Emoji Characters in JavaScript\nDESCRIPTION: Demonstrates how the RegExp Unicode flag (u) enables proper matching of emoji characters and Unicode sequences. Without the flag, emoji sequences are not properly recognized due to their multi-code point nature.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-50.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/😊{2}/.test('😊😊');\n// false\n\n/😊{2}/u.test('😊😊');\n// true\n\n/\\u{76}\\u{38}/u.test('v8');\n// true\n\n/\\u{1F60A}/u.test('😊');\n// true\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple C Function for WebAssembly Export\nDESCRIPTION: A C code example that defines an 'add' function that adds two numbers and is marked with EMSCRIPTEN_KEEPALIVE to ensure it's exported in the WebAssembly module.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// add.c\n#include <emscripten.h>\n\nEMSCRIPTEN_KEEPALIVE\nint add(int x, int y) {\n  return x + y;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Exports from JavaScript Modules\nDESCRIPTION: Shows how to import named exports from another module using destructuring syntax. This example imports the 'repeat' and 'shout' exports from lib.mjs and uses them in the main module.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 📁 main.mjs\nimport {repeat, shout} from './lib.mjs';\nrepeat('hello');\n// → 'hello hello'\nshout('Modules in action');\n// → 'MODULES IN ACTION!'\n```\n\n----------------------------------------\n\nTITLE: Disjunction List Formatting in English\nDESCRIPTION: Shows how to format lists using disjunctions (using 'or') by configuring the ListFormat options parameter.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-listformat.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lf = new Intl.ListFormat('en', { type: 'disjunction' });\nlf.format(['Frank']);\n// → 'Frank'\nlf.format(['Frank', 'Christine']);\n// → 'Frank or Christine'\nlf.format(['Frank', 'Christine', 'Flora']);\n// → 'Frank, Christine, or Flora'\nlf.format(['Frank', 'Christine', 'Flora', 'Harrison']);\n// → 'Frank, Christine, Flora, or Harrison'\n```\n\n----------------------------------------\n\nTITLE: Using Hashbang Grammar in JavaScript\nDESCRIPTION: Example of JavaScript code using the hashbang syntax, which allows scripts to specify their interpreter on the first line. This feature enables command-line JavaScript execution in environments like Node.js.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-74.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n#!/usr/bin/env node\nconsole.log(42);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Super Property Access in JavaScript Class Inheritance\nDESCRIPTION: Basic example showing how super property access works in a class extension context. Class B extends A and accesses the property x from the parent class using super.x.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-super.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A { }\nA.prototype.x = 100;\n\nclass B extends A {\n  m() {\n    return super.x;\n  }\n}\nconst b = new B();\nb.m();\n```\n\n----------------------------------------\n\nTITLE: Basic Optional Chaining Usage\nDESCRIPTION: Demonstrates the basic usage of the optional chaining operator for accessing nested properties safely.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/optional-chaining.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Still checks for errors and is much more readable.\nconst nameLength = db?.user?.name?.length;\n```\n\n----------------------------------------\n\nTITLE: Updating V8 in Node-CI for Testing\nDESCRIPTION: Commands to add your main V8 checkout as a remote to the node-ci repository, fetch and checkout your branch for testing or reproducing failures.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/node-integration.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd v8\ngit remote add v8 <your-v8-dir>/.git\ngit fetch v8\ngit checkout v8/<your-branch>\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Implementing Object.is() for Value Comparison in JavaScript\nDESCRIPTION: Highlights the performance improvements made to Object.is() in V8 v6.3, making it a more viable alternative for value comparisons.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-63.md#2025-04-10_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nObject.is()\n```\n\n----------------------------------------\n\nTITLE: Initializing JavaScript Object with Slack Tracking\nDESCRIPTION: This snippet demonstrates how a JavaScript object is created with potential for slack tracking. The 'Peak' constructor function defines two properties, but V8 may allocate extra space for future properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Peak(name, height) {\n  this.name = name;\n  this.height = height;\n}\n\nconst m1 = new Peak('Matterhorn', 4478);\n```\n\n----------------------------------------\n\nTITLE: Installing Math.is42 Function in C++\nDESCRIPTION: C++ code to install the MathIs42 builtin as a function on the Math object in V8's bootstrapper.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/torque-builtins.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nHandle<JSObject> math = factory->NewJSObject(cons, TENURED);\nJSObject::AddProperty(global, name, math, DONT_ENUM);\nSimpleInstallFunction(isolate_, math, \"is42\", Builtins::kMathIs42, 1, true);\n```\n\n----------------------------------------\n\nTITLE: Reference to V8 AssemblerBuffer Implementation\nDESCRIPTION: Code reference showing where JIT-generated code is stored in V8's AssemblerBuffer class, which is part of the discussion around protecting JIT memory integrity.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/control-flow-integrity.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nAssemblerBuffer // Located at v8/src/codegen/assembler.h line 255\n```\n\n----------------------------------------\n\nTITLE: Pushing Node.js Changes to GitHub\nDESCRIPTION: Command to push your fixes for Node.js to your fork on GitHub, allowing you to create a pull request against V8's Node.js fork.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/node-integration.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push <your-user-name> $BRANCH_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating Peak Instances with Varying Properties in JavaScript\nDESCRIPTION: This code creates multiple instances of the Peak class with different property configurations. It illustrates how V8 creates different maps for objects with different sets of properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst m1 = new Peak('Wendelstein', 1838);\nconst m2 = new Peak('Matterhorn', 4478, 1040, true);\nconst m3 = new Peak('Zugspitze', 2962);\nconst m4 = new Peak('Mont Blanc', 4810, 4695, true);\nconst m5 = new Peak('Watzmann', 2713);\nconst m6 = new Peak('Zinalrothorn', 4221, 490, true);\nconst m7 = new Peak('Eiger', 3970);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Call Examples\nDESCRIPTION: Demonstration of calling a function with different numbers of arguments to show argument handling behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nadd42();\nadd42(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Expected Result of Stable Sorting in JavaScript\nDESCRIPTION: This snippet shows the expected result of a stable sort on the array of dog objects. The dogs are sorted by rating in descending order, maintaining alphabetical order within each rating group.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/stable-sort.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  { name: 'Choco',  rating: 14 },\n  { name: 'Ghost',  rating: 14 },\n  { name: 'Bandit', rating: 13 },\n  { name: 'Falco',  rating: 13 },\n  { name: 'Abby',   rating: 12 },\n  { name: 'Daisy',  rating: 12 },\n  { name: 'Elmo',   rating: 12 },\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Try Jobs\nDESCRIPTION: Commands for creating and managing try jobs for testing changes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit cl try\ngit cl try --revision=1234\ngit cl try --bot=v8_mac_rel\ngit cl try-results\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Object.prototype.hasOwnProperty in JavaScript\nDESCRIPTION: A basic example showing how Object.prototype.hasOwnProperty is used to check if an object has its own property (not inherited). The example creates an object with a property 'foo' and checks for the existence of both 'foo' and 'bar'.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst o = { foo: 1 };\no.hasOwnProperty('foo'); // true\no.hasOwnProperty('bar'); // false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Security Vulnerability with JSON in Comments\nDESCRIPTION: This EJS template code demonstrates a potential XSS vulnerability when JSON.stringify output is injected into a JavaScript comment without proper post-processing.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Debug info:\n  // User-Agent: <%= JSON.stringify(ua) %>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Git Command for Viewing V8 API Changes\nDESCRIPTION: Git command to list API changes between V8 versions 7.8 and 7.9 in the v8.h file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-79.md#2025-04-10_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit log branch-heads/7.8..branch-heads/7.9 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Processing V8 Profiler Log for Web Applications\nDESCRIPTION: This command processes the V8 profiler log file generated from profiling a web application using the tick processor script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nv8/tools/linux-tick-processor v8.log\n```\n\n----------------------------------------\n\nTITLE: GN arguments to disable warning as errors\nDESCRIPTION: Configuration to prevent warnings from being treated as errors during compilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntreat_warnings_as_errors=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Branch Settings\nDESCRIPTION: Optional Git configuration commands for branch tracking setup.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit config branch.autosetupmerge always\ngit config branch.autosetuprebase always\n```\n\n----------------------------------------\n\nTITLE: Root Register Usage for Loading Root Objects\nDESCRIPTION: The improved approach for making code isolate-independent by using a root register to indirectly access heap objects through the roots table, eliminating the need to embed direct addresses in code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/embedded-builtins.md#2025-04-10_snippet_2\n\nLANGUAGE: assembly\nCODE:\n```\n// Load the constant address located at the given\n// offset from roots.\nREX.W movq rax,[kRootRegister + <offset>]\n```\n\n----------------------------------------\n\nTITLE: Configuring vpython bypass for depot_tools\nDESCRIPTION: Environment variable setting to bypass vpython and use system's Python installation when running depot_tools commands.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VPYTHON_BYPASS=\"manually managed python not supported by chrome operations\"\n```\n\n----------------------------------------\n\nTITLE: Using Gource for Code Visualization\nDESCRIPTION: A reference to the Gource tool used to create a visualization of the V8 code base over time, as shown in the embedded video.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/10-years.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngource\n```\n\n----------------------------------------\n\nTITLE: Running Hello World Example\nDESCRIPTION: Command to execute the compiled hello world program\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./hello_world\n```\n\n----------------------------------------\n\nTITLE: Implementing a CSA builtin in V8's builtins-string-gen.cc\nDESCRIPTION: This code snippet demonstrates the implementation of the 'GetStringLength' builtin using the CodeStubAssembler. It checks if the input is a string, returns its length if so, or returns undefined otherwise. The example showcases various CSA primitives and macro instructions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/csa.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nTF_BUILTIN(GetStringLength, CodeStubAssembler) {\n  Label not_string(this);\n\n  // Fetch the incoming object using the constant we defined for\n  // the first parameter.\n  Node* const maybe_string = Parameter(Descriptor::kInputObject);\n\n  // Check to see if input is a Smi (a special representation\n  // of small numbers). This needs to be done before the IsString\n  // check below, since IsString assumes its argument is an\n  // object pointer and not a Smi. If the argument is indeed a\n  // Smi, jump to the label |not_string|.\n  GotoIf(TaggedIsSmi(maybe_string), &not_string);\n\n  // Check to see if the input object is a string. If not, jump to\n  // the label |not_string|.\n  GotoIfNot(IsString(maybe_string), &not_string);\n\n  // Load the length of the string (having ended up in this code\n  // path because we verified it was string above) and return it\n  // using a CSA \"macro\" LoadStringLength.\n  Return(LoadStringLength(maybe_string));\n\n  // Define the location of label that is the target of the failed\n  // IsString check above.\n  BIND(&not_string);\n\n  // Input object isn't a string. Return the JavaScript undefined\n  // constant.\n  Return(UndefinedConstant());\n}\n```\n\n----------------------------------------\n\nTITLE: Building clang compiler for V8\nDESCRIPTION: Command to build clang locally from V8 checkout with specific configuration options.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tools/clang/scripts/build.py --without-android --without-fuchsia \\\n                               --host-cc=gcc --host-cxx=g++ \\\n                               --gcc-toolchain=/usr \\\n                               --use-system-cmake --disable-asserts\n```\n\n----------------------------------------\n\nTITLE: VariableDeclarationList Grammar Production\nDESCRIPTION: Grammar production showing how parameters continue to be passed through the variable declaration list, maintaining context about whether 'await' is a keyword.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_8\n\nLANGUAGE: grammar\nCODE:\n```\nVariableDeclarationList[In, Yield, Await] :\n  VariableDeclaration[?In, ?Yield, ?Await]\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Add Function in WAT Format\nDESCRIPTION: The disassembled WebAssembly Text format (WAT) showing the add function implementation with two parameters and a result.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_2\n\nLANGUAGE: lisp\nCODE:\n```\n(func $add (param $0 i32) (param $1 i32) (result i32)\n (i32.add\n  (local.get $0)\n  (local.get $1)\n )\n)\n```\n\n----------------------------------------\n\nTITLE: Modified Array Iterator Prototype Example\nDESCRIPTION: Demonstrates modifying the ArrayIteratorPrototype to change iteration behavior globally.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nObject.getPrototypeOf([][Symbol.iterator]()).next = function() {\n  return { done: true };\n}\nconst arr = [1, 2, 3];\nconst result = [...arr];\n// → []\n```\n\n----------------------------------------\n\nTITLE: Source File References\nDESCRIPTION: References to key V8 source files containing runtime and builtin function definitions\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/builtin-functions.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/runtime/runtime.h\nsrc/builtins/builtins.h\n```\n\n----------------------------------------\n\nTITLE: TurboFan Re-optimized Assembly Output for Property Access in JavaScript\nDESCRIPTION: This assembly code snippet shows how TurboFan re-optimizes the property access in the foo() function after deoptimization, using the object's hidden class structure.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_7\n\nLANGUAGE: assembly\nCODE:\n```\n...\n40  mov ecx,0x42cc8901          ;; object: 0x42cc8901 <Peak map = 0x3d5873ad>\n45  mov ecx,[ecx+0x3]           ;; Load the properties backing store\n48  mov eax,[ecx+0x7]           ;; Get the first element.\n4b  mov esp,ebp\n4d  pop ebp\n4e  ret 0x8                     ;; return it in register eax!\n```\n\n----------------------------------------\n\nTITLE: Preprocessing V8 Profiler Log for Web UI\nDESCRIPTION: This command preprocesses the V8 profiler log file to resolve C++ symbols and generate a JSON file for use with the web UI profiler visualization tool.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$V8_PATH/tools/linux-tick-processor --preprocess > v8.json\n```\n\n----------------------------------------\n\nTITLE: Interactive Input with d8 in JavaScript\nDESCRIPTION: Demonstrates how to use the readline() function in d8 to interactively enter text.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/d8.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd8> const greeting = readline();\nWelcome\nd8> greeting\n\"Welcome\"\n```\n\n----------------------------------------\n\nTITLE: Updating depot_tools in Terminal\nDESCRIPTION: Command to update depot_tools which must be run in Command Prompt on Windows.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngclient\n```\n\n----------------------------------------\n\nTITLE: Using Unsigned Shift for Large Addresses\nDESCRIPTION: This snippet demonstrates the correct use of unsigned right shift (>>>) to handle memory addresses of 2GB and above without overflow issues.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/4gb-wasm-memory.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This gives us 536870912, as we want!\nconsole.log((2 * 1024 * 1024 * 1024) >>> 2);\n```\n\n----------------------------------------\n\nTITLE: Git Command for V8 Version Checkout\nDESCRIPTION: Git command to checkout and experiment with V8 version 7.9 by creating a new branch tracking the remote branch-heads/7.9.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-79.md#2025-04-10_snippet_1\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b 7.9 -t branch-heads/7.9\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Latest Emscripten for SIMD Support\nDESCRIPTION: Bash commands to install and activate the latest version of the Emscripten SDK, which is required for WebAssembly SIMD support.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./emsdk install latest\n./emsdk activate latest\n```\n\n----------------------------------------\n\nTITLE: Creating New Branch\nDESCRIPTION: Command to create a new local branch in Git.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit new-branch fix-bug-1234\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Improved TurboFan Escape Analysis in JavaScript\nDESCRIPTION: This snippet shows a function that benefits from improved escape analysis in TurboFan. The context allocation for the free variable 'x' can now be fully elided, resulting in up to 40% performance improvement in some cases.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-71.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapAdd(a, x) {\n  return a.map(y => y + x);\n}\n```\n\n----------------------------------------\n\nTITLE: Emscripten Compilation Command for Standalone WebAssembly\nDESCRIPTION: Command line instruction for compiling C code to WebAssembly with optional JavaScript support using the STANDALONE_WASM flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nemcc -O3 add.c -o add.js -s STANDALONE_WASM\n```\n\n----------------------------------------\n\nTITLE: Spread Operation Internal Implementation\nDESCRIPTION: Illustrates the internal implementation of spread operations using iterators and how V8 previously handled spread syntax.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(arr) {\n  const result = [];\n  const iterator = arr[Symbol.iterator]();\n  const next = iterator.next;\n  for ( ; ; ) {\n    const iteratorResult = next.call(iterator);\n    if (iteratorResult.done) break;\n    result.push(iteratorResult.value);\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Accessor Properties in JavaScript\nDESCRIPTION: Demonstrates how array sorting interacts with getter/setter properties, showing implementation-defined behavior across different JavaScript engines.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [0, 1, 2];\n\nObject.defineProperty(array, '0', {\n  get() { console.log('get 0'); return 0; },\n  set(v) { console.log('set 0'); }\n});\n\nObject.defineProperty(array, '1', {\n  get() { console.log('get 1'); return 1; },\n  set(v) { console.log('set 1'); }\n});\n\narray.sort();\n```\n\n----------------------------------------\n\nTITLE: Array Sorting with Accessor Properties in JavaScript\nDESCRIPTION: Demonstrates how array sorting interacts with getter/setter properties, showing implementation-defined behavior across different JavaScript engines.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [0, 1, 2];\n\nObject.defineProperty(array, '0', {\n  get() { console.log('get 0'); return 0; },\n  set(v) { console.log('set 0'); }\n});\n\nObject.defineProperty(array, '1', {\n  get() { console.log('get 1'); return 1; },\n  set(v) { console.log('set 1'); }\n});\n\narray.sort();\n```\n\n----------------------------------------\n\nTITLE: Static Semantics Rule for BindingIdentifier\nDESCRIPTION: Static semantics rule that creates a Syntax Error when attempting to use 'await' as a binding identifier in a context with the Await parameter.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_12\n\nLANGUAGE: grammar\nCODE:\n```\nBindingIdentifier[Yield, Await] : await\n\nIt is a Syntax Error if this production has an <code><sub>[Await]</sub></code> parameter.\n```\n\n----------------------------------------\n\nTITLE: Modern Rest Parameters Usage\nDESCRIPTION: Demonstrates the use of ES2015 rest parameters as a better alternative to the arguments object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst logArgs = (...args) => {\n  args.forEach((value, index) => {\n    console.log(`${ index }: ${ value }`);\n  });\n};\nlogArgs('a', 'b', 'c');\n// This logs '0: a', then '1: b', and finally '2: c'.\n```\n\n----------------------------------------\n\nTITLE: Implementing Cleanup with Async/Await\nDESCRIPTION: Alternative implementation using async/await syntax with try/catch/finally blocks for handling promise settlement and cleanup.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-finally.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fetchAndDisplay = async ({ url, element }) => {\n  showLoadingSpinner();\n  try {\n    const response = await fetch(url);\n    const text = await response.text();\n    element.textContent = text;\n  } catch (error) {\n    element.textContent = error.message;\n  } finally {\n    hideLoadingSpinner();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Generating compile_commands.json for cquery in V8\nDESCRIPTION: A bash command to generate the compile_commands.json file needed by cquery to understand the V8 codebase structure. This file contains compiler command lines used to build V8 and needs to be regenerated when BUILD.gn files change.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/ide-setup.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nninja -C out.gn/x64.release -t compdb cxx cc > compile_commands.json\n```\n\n----------------------------------------\n\nTITLE: Updating V8 source and dependencies\nDESCRIPTION: This command pulls the latest changes from the V8 repository and updates all dependencies using gclient sync.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit pull && gclient sync\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 Isolate with Custom Snapshot in C++\nDESCRIPTION: This snippet shows how to configure a newly-created V8 isolate to use a custom startup snapshot. It uses v8::Isolate::CreateParams to set up the isolate with the custom snapshot, allowing contexts created in that isolate to have pre-defined functions available.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/custom-startup-snapshots.md#2025-04-10_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nv8::Isolate::CreateParams\n```\n\n----------------------------------------\n\nTITLE: Compiling V8 source and running tests\nDESCRIPTION: This command compiles the V8 source code for x64 architecture in release mode and immediately runs the tests using the gm.py helper script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntools/dev/gm.py x64.release.check\n```\n\n----------------------------------------\n\nTITLE: Comparing Number and BigInt Multiplication\nDESCRIPTION: Demonstrates the difference in precision between Number and BigInt multiplication operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n1234567890123456789 * 123;\n// → 151851850485185200000 ❌\n```\n\nLANGUAGE: javascript\nCODE:\n```\n1234567890123456789n * 123n;\n// → 151851850485185185047n ✅\n```\n\n----------------------------------------\n\nTITLE: Compiling C to Standalone WebAssembly using Emscripten\nDESCRIPTION: Command to compile a C file to a standalone WebAssembly file without JavaScript dependencies using Emscripten compiler.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nemcc -O3 add.c -o add.wasm\n```\n\n----------------------------------------\n\nTITLE: Custom Iterator Implementation Example\nDESCRIPTION: Shows how to modify array iteration behavior by defining a custom Symbol.iterator property.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst arr = [1, 2, 3];\narr[Symbol.iterator] = function() {\n  return { next: function() { return { done: true }; } };\n};\nconst result = [...arr];\n// → []\n```\n\n----------------------------------------\n\nTITLE: Generated ARM assembly code for GetStringLength builtin\nDESCRIPTION: This assembly code snippet shows the 32-bit ARM machine code generated by mksnapshot for the GetStringLength builtin. It illustrates how the same CSA code can be translated into efficient assembly for different architectures.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/csa.md#2025-04-10_snippet_3\n\nLANGUAGE: asm\nCODE:\n```\n  tst r0, #1\n  beq +28 -> not_string\n  ldr r1, [r0, #-1]\n  ldrb r1, [r1, #+7]\n  cmp r1, #128\n  bge +12 -> not_string\n  ldr r0, [r0, #+7]\n  bx lr\nnot_string:\n  ldr r0, [r10, #+16]\n  bx lr\n```\n\n----------------------------------------\n\nTITLE: Original Hash Function for Numeric Strings in V8\nDESCRIPTION: This C++ code snippet shows the original hash function used for numeric strings in V8's StringsStorage, which was causing performance issues due to collisions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/speeding-up-v8-heap-snapshots.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nint32_t OriginalHash(const std::string& numeric_string) {\n  int kValueBits = 24;\n\n  int32_t mask = (1 << kValueBits) - 1; /* 0xffffff */\n  return (numeric_string.length() << kValueBits) | (numeric_string & mask);\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Module Loading with JSPI in C\nDESCRIPTION: This C code snippet demonstrates how to use JSPI to dynamically load a WebAssembly module. It uses the EM_ASYNC_JS macro to wrap the WebAssembly.instantiateStreaming API call.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jspi.md#2025-04-10_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nEM_ASYNC_JS(fooFun, resolveFun, (), {\n  console.log('loading promise42');\n  LoadedModule = (await WebAssembly.instantiateStreaming(fetch('p42.wasm'))).instance;\n  return addFunction(LoadedModule.exports['provide42']);\n});\n```\n\n----------------------------------------\n\nTITLE: Listing V8 branch heads with depot_tools\nDESCRIPTION: Git command to list available V8 branch heads when the source was retrieved using depot_tools.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/version-numbers.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit branch --remotes | grep branch-heads/\n```\n\n----------------------------------------\n\nTITLE: Using Super Properties with Different Receivers in JavaScript\nDESCRIPTION: Example demonstrating that super property lookup doesn't depend on the receiver object. The method can be called with a different receiver object but still accesses the same super property.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-super.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nB.prototype.m.call(some_other_object); // still returns 100\n```\n\n----------------------------------------\n\nTITLE: Adding a WebAssembly Feature to Feature Flag Macros\nDESCRIPTION: This code snippet shows where to move feature flags between different macro lists in the wasm-feature-flags.h file during staging and shipping phases.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-shipping-checklist.md#2025-04-10_snippet_1\n\nLANGUAGE: code reference\nCODE:\n```\nsrc/wasm/wasm-feature-flags.h\n```\n\n----------------------------------------\n\nTITLE: Dynamic dependency pathing with top-level await\nDESCRIPTION: Demonstrates loading language-specific modules at runtime using the navigator.language value, showcasing how top-level await enables dynamic imports.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/top-level-await.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst strings = await import(`/i18n/${navigator.language}`);\n```\n\n----------------------------------------\n\nTITLE: Elements Kind Transition with NaN and Infinity\nDESCRIPTION: Shows how adding NaN or Infinity to an array transitions it from SMI_ELEMENTS to DOUBLE_ELEMENTS.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst array = [3, 2, 1];\n// PACKED_SMI_ELEMENTS\narray.push(NaN, Infinity);\n// PACKED_DOUBLE_ELEMENTS\n```\n\n----------------------------------------\n\nTITLE: Array Clone Implementation with For Loop\nDESCRIPTION: Shows a manual array cloning implementation using a for loop with pre-allocation of array size for better performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction clone(arr) {\n  // Pre-allocate the correct number of elements, to avoid\n  // having to grow the array.\n  const result = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    result[i] = arr[i];\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of V8's Smi and HeapNumber Representations\nDESCRIPTION: This snippet lists various JavaScript number values and shows how V8 internally represents them as either Smi (Small Integer) for values in the 31-bit signed integer range, or HeapNumber objects for values outside that range.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n -Infinity // HeapNumber\n-(2**30)-1 // HeapNumber\n  -(2**30) // Smi\n       -42 // Smi\n        -0 // HeapNumber\n         0 // Smi\n       4.2 // HeapNumber\n        42 // Smi\n   2**30-1 // Smi\n     2**30 // HeapNumber\n  Infinity // HeapNumber\n       NaN // HeapNumber\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Rest and Spread Elements in JavaScript\nDESCRIPTION: This snippet shows how to use array rest elements for destructuring assignment and spread elements for array literals in ES2015.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/object-rest-spread.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Rest elements for array destructuring assignment:\nconst primes = [2, 3, 5, 7, 11];\nconst [first, second, ...rest] = primes;\nconsole.log(first); // 2\nconsole.log(second); // 3\nconsole.log(rest); // [5, 7, 11]\n\n// Spread elements for array literals:\nconst primesCopy = [first, second, ...rest];\nconsole.log(primesCopy); // [2, 3, 5, 7, 11]\n```\n\n----------------------------------------\n\nTITLE: Promise-based Async Fetch Implementation in JavaScript\nDESCRIPTION: Traditional Promise-based implementation of fetching and logging URL content using .then() chains and error handling with .catch()\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-55.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logFetch(url) {\n  return fetch(url)\n    .then(response => response.text())\n    .then(text => {\n      console.log(text);\n    }).catch(err => {\n      console.error('fetch failed', err);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Array-like Objects\nDESCRIPTION: Demonstrates the creation of array-like objects that mimic array behavior but lack array prototype methods.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrayLike = {};\narrayLike[0] = 'a';\narrayLike[1] = 'b';\narrayLike[2] = 'c';\narrayLike.length = 3;\n```\n\n----------------------------------------\n\nTITLE: Wrapping C++ Point Object for JavaScript\nDESCRIPTION: Shows how to create a new instance of a point template and set its internal field to reference a C++ Point object.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nPoint* p = ...;\nv8::Local<v8::Object> obj = point_templ->NewInstance();\nobj->SetInternalField(0, v8::External::New(isolate, p));\n```\n\n----------------------------------------\n\nTITLE: Implementation of Simple add42 Function in Ignition Bytecode\nDESCRIPTION: Bytecode representation of the add42 function showing how arguments are accessed and used. The function loads the first argument, adds 42 to it, and returns the result via the accumulator register.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_3\n\nLANGUAGE: bytecode\nCODE:\n```\n25 02             Ldar a0          ;; Load the first argument to the accumulator\n40 2a 00          AddSmi [42]      ;; Add 42 to it\nab                Return           ;; Return the accumulator\n```\n\n----------------------------------------\n\nTITLE: Class Field Declaration Example\nDESCRIPTION: Example showing class declaration with private and public fields to demonstrate initialization pattern.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  #a = 0;\n  b = this.#a;\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging V8 Object Map with d8\nDESCRIPTION: This snippet demonstrates how to use the %DebugPrintPtr function in d8 to inspect the initial map of a JavaScript object. It shows the structure of the map, including its type, size, and transitions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nd8> // %DebugPrintPtr allows you to print the initial map.\nd8> %DebugPrintPtr(0x46f07295)\nDebugPrint: 0x46f07295: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 52\n - inobject properties: 10\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 10\n - enum length: invalid\n - back pointer: 0x28c02329 <undefined>\n - prototype_validity cell: 0x47f0232d <Cell value= 1>\n - instance descriptors (own) #0: 0x28c02135 <DescriptorArray[0]>\n - transitions #1: 0x46f0735d <Map(HOLEY_ELEMENTS)>\n     0x28c046f9: [String] in ReadOnlySpace: #name:\n         (transition to (const data field, attrs: [WEC]) @ Any) ->\n             0x46f0735d <Map(HOLEY_ELEMENTS)>\n - prototype: 0x5cc09c7d <Object map = 0x46f07335>\n - constructor: 0x21e92561 <JSFunction Peak (sfi = 0x21e92495)>\n - dependent code: 0x28c0212d <Other heap object (WEAK_FIXED_ARRAY_TYPE)>\n - construction counter: 5\n```\n\n----------------------------------------\n\nTITLE: Creating an AggregateError Object in JavaScript\nDESCRIPTION: This snippet shows how to programmatically construct an AggregateError object, which is used to represent multiple errors in Promise.any rejections.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/promise-combinators.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst aggregateError = new AggregateError([errorA, errorB, errorC], 'Stuff went wrong!');\n```\n\n----------------------------------------\n\nTITLE: JavaScript Prototype Property Example\nDESCRIPTION: Demonstrates JavaScript's prototypal inheritance by creating an object and adding properties to instances and the prototype.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_15\n\nLANGUAGE: js\nCODE:\n```\n// Create an object named `bicycle`.\nfunction bicycle() {}\n// Create an instance of `bicycle` called `roadbike`.\nvar roadbike = new bicycle();\n// Define a custom property, `wheels`, on `roadbike`.\nroadbike.wheels = 2;\n```\n\n----------------------------------------\n\nTITLE: Return with Question Mark Notation in ECMAScript Algorithms\nDESCRIPTION: An explanation of what 'Return ? Foo()' means in the specification, showing how it expands to explicit completion handling steps while maintaining the same behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_6\n\nLANGUAGE: ecmascript\nCODE:\n```\n1. Let `temp` be `Foo()`.\n2. If `temp` is an abrupt completion, return `temp`.\n3. Set `temp` to `temp.[[Value]]`.\n4. Return `NormalCompletion(temp)`.\n```\n\n----------------------------------------\n\nTITLE: Finding V8 branch heads URL format\nDESCRIPTION: URL pattern to find the head of a V8 version branch. Replace <minor-version> with the desired V8 minor version number.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/version-numbers.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://chromium.googlesource.com/v8/v8.git/+/branch-heads/<minor-version>\n```\n\n----------------------------------------\n\nTITLE: Generic Element Loading in V8 Torque\nDESCRIPTION: Generic implementation of element loading operation using GetProperty. This version handles all cases including prototype chain lookups and accessor functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbuiltin Load<ElementsAccessor : type>(\n    context: Context, sortState: FixedArray, elements: HeapObject,\n    index: Smi): Object {\n  return GetProperty(context, elements, index);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Proxy with Custom Handler\nDESCRIPTION: Shows how to create a Proxy object with a custom get trap handler.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-49.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst target = {};\nconst handler = {\n  get(target, name='world') {\n    return `Hello, ${name}!`;\n  }\n};\n\nconst foo = new Proxy(target, handler);\nfoo.bar;\n// → 'Hello, bar!'\n```\n\n----------------------------------------\n\nTITLE: TurboFan Generated Assembly for Basic Function Call\nDESCRIPTION: Assembly code generated by TurboFan for a basic function call, showing how arguments and function objects are handled at the machine code level.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_8\n\nLANGUAGE: nasm\nCODE:\n```\nmovq rdi,0x1a8e082126ad    ;; Load the function object <JSFunction add42>\npush 0x6                   ;; Push SMI 3 as argument\nmovq rcx,0x1a8e082030d1    ;; <JSGlobal Object>\npush rcx                   ;; Push receiver (the global proxy object)\nmovl rax,0x1               ;; Save the arguments count in rax\nmovl rcx,[rdi+0x17]        ;; Load function object {Code} field in rcx\ncall rcx                   ;; Finally, call the code object!\n```\n\n----------------------------------------\n\nTITLE: Basic Inspector Protocol Interaction in JavaScript\nDESCRIPTION: This JavaScript code demonstrates a basic but fully functional interaction with the Inspector through d8. It defines a receiver function, constructs a JSON message to enable the debugger, and sends it using the d8-provided 'send' function.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/inspector.md#2025-04-10_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// inspector-demo.js\n// Receiver function called by d8.\nfunction receive(message) {\n  print(message)\n}\n\nconst msg = JSON.stringify({\n  id: 0,\n  method: 'Debugger.enable',\n});\n\n// Call the function provided by d8.\nsend(msg);\n\n// Run this file by executing 'd8 --enable-inspector inspector-demo.js'.\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Example in WasmGC - Optimized\nDESCRIPTION: The optimized version of the allocation example, showing how WasmGC can reduce the code to a simple return statement by eliminating unnecessary allocations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-gc-porting.md#2025-04-10_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nfunc foo() {\n  return 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Naive Approach for Getting Global This in JavaScript\nDESCRIPTION: A demonstration of a naive approach to accessing the global this across different environments by checking for various environment-specific global objects. This approach is not recommended as it might still return incorrect results in some edge cases.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/globalthis.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A naive attempt at getting the global `this`. Don't use this!\nconst getGlobalThis = () => {\n  if (typeof globalThis !== 'undefined') return globalThis;\n  if (typeof self !== 'undefined') return self;\n  if (typeof window !== 'undefined') return window;\n  if (typeof global !== 'undefined') return global;\n  // Note: this might still return the wrong result!\n  if (typeof this !== 'undefined') return this;\n  throw new Error('Unable to locate global `this`');\n};\nconst theGlobalThis = getGlobalThis();\n```\n\n----------------------------------------\n\nTITLE: Implementing Point Accessor Methods\nDESCRIPTION: Implementation of getter and setter accessors for Point object properties, showing how to access the wrapped C++ object through internal fields.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nvoid GetPointX(Local<String> property,\n               const PropertyCallbackInfo<Value>& info) {\n  v8::Local<v8::Object> self = info.Holder();\n  v8::Local<v8::External> wrap =\n      v8::Local<v8::External>::Cast(self->GetInternalField(0));\n  void* ptr = wrap->Value();\n  int value = static_cast<Point*>(ptr)->x_;\n  info.GetReturnValue().Set(value);\n}\n\nvoid SetPointX(v8::Local<v8::String> property, v8::Local<v8::Value> value,\n               const v8::PropertyCallbackInfo<void>& info) {\n  v8::Local<v8::Object> self = info.Holder();\n  v8::Local<v8::External> wrap =\n      v8::Local<v8::External>::Cast(self->GetInternalField(0));\n  void* ptr = wrap->Value();\n  static_cast<Point*>(ptr)->x_ = value->Int32Value();\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript equivalent of object destructuring\nDESCRIPTION: Demonstrates the desugared form of object destructuring, showing how it translates to individual property assignments. This is used to compare with the destructuring syntax and explain performance optimizations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-78.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = object.x;\nconst y = object.y;\n```\n\n----------------------------------------\n\nTITLE: Memory Representation of BigInt Objects in V8\nDESCRIPTION: This pseudo-code example illustrates how BigInt objects are represented in memory, using multiple digits to store arbitrary-precision integers. Each digit utilizes the full range of a 32-bit or 64-bit register.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/bigint.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'BigInt',\n  sign: 0,\n  num_digits: 3,\n  digits: [0x12…, 0x34…, 0x56…],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weak Event Listeners with FinalizationRegistry\nDESCRIPTION: Implementation of a weak event listener system using WeakRef and FinalizationRegistry to prevent memory leaks. The code shows how to properly manage event listener lifecycle and cleanup when objects are garbage collected.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/weak-references.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst gListenersRegistry = new FinalizationRegistry(({ socket, wrapper }) => {\n  socket.removeEventListener('message', wrapper); // 6\n});\n\nfunction addWeakListener(socket, listener) {\n  const weakRef = new WeakRef(listener); // 2\n  const wrapper = (ev) => { weakRef.deref()?.(ev); }; // 3\n  gListenersRegistry.register(listener, { socket, wrapper }); // 4\n  socket.addEventListener('message', wrapper); // 5\n}\n\nclass MovingAvg {\n  constructor(socket) {\n    this.events = [];\n    this.listener = (ev) => { this.events.push(ev); }; // 1\n    addWeakListener(socket, this.listener);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Interpreter Trampoline in V8 Builtin\nDESCRIPTION: Retrieves the interpreter trampoline code from the SharedFunctionInfo. This code will replace the optimized code in the function during lazy unlinking.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Field read to obtain the code object.\n__ movq(rcx, FieldOperand(rcx, SharedFunctionInfo::kCodeOffset));\n```\n\n----------------------------------------\n\nTITLE: JavaScript object destructuring example\nDESCRIPTION: Shows a simple object destructuring operation in JavaScript. This snippet is used to explain the performance improvements made to object destructuring in V8 v7.8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-78.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst {x, y} = object;\n```\n\n----------------------------------------\n\nTITLE: Full Intl.DisplayNames API Syntax in JavaScript\nDESCRIPTION: This code snippet shows the full API syntax for Intl.DisplayNames, including the constructor and the 'of' method prototype.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-displaynames.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nIntl.DisplayNames(locales, options)\nIntl.DisplayNames.prototype.of( code )\n```\n\n----------------------------------------\n\nTITLE: Displaying Mixed Feature Support Example\nDESCRIPTION: HTML markup showing mixed support levels across different platforms, with some having full support, others no support, and some partial implementation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/feature-support.md#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<feature-support chrome=\"partial\"\n                 firefox=\"yes\"\n                 safari=\"yes\"\n                 nodejs=\"no\"\n                 babel=\"yes\"></feature-support>\n```\n\n----------------------------------------\n\nTITLE: Destructuring with Default Values\nDESCRIPTION: Alternative approach using object destructuring with default assignment.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/nullish-coalescing.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component(props) {\n  const {\n    enabled: enable = true,\n  } = props;\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Transpiled Native BigInt Code from JSBI in JavaScript\nDESCRIPTION: Shows the result of transpiling JSBI code to native BigInt code using babel-plugin-transform-jsbi-to-bigint, demonstrating the seamless transition to native BigInt support.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/bigint.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst max = BigInt(Number.MAX_SAFE_INTEGER);\nconst two = 2n;\nconst result = max + two;\nconsole.log(result);\n// → '9007199254740993'\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Numeric Separators to Enhance Readability\nDESCRIPTION: Shows how to use the new numeric separator feature in JavaScript, where underscores can be used to visually group digits in large numeric literals, making them easier to read and understand.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-75.md#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n1_000_000_000_000\n    1_019_436_871.42\n```\n\n----------------------------------------\n\nTITLE: Oilpan Finalizer Safety Enforcement with Static Analysis\nDESCRIPTION: This example demonstrates how Oilpan uses a Clang plugin to statically verify that destructors of garbage-collected objects don't access other heap objects during finalization. This enforces the constraint that finalizers can't touch other on-heap objects since destruction order is not guaranteed.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-cpp-gc.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass GCed : public GarbageCollected<GCed> {\n public:\n  void DoSomething();\n  void Trace(Visitor* visitor) {\n    visitor->Trace(other_);\n  }\n  ~GCed() {\n    other_->DoSomething();  // error: Finalizer '~GCed' accesses\n                            // potentially finalized field 'other_'.\n  }\n private:\n  Member<GCed> other_;\n};\n```\n\n----------------------------------------\n\nTITLE: RegExp Bytecode Structure Example\nDESCRIPTION: Example of bytecode array structure representing a RegExp pattern '/12|ab/y', showing how pattern matching instructions are encoded.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/non-backtracking-regexp.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst code = [\n  {opcode: 'FORK', forkPc: 4},\n  {opcode: 'CONSUME', char: '1'},\n  {opcode: 'CONSUME', char: '2'},\n  {opcode: 'JMP', jmpPc: 6},\n  {opcode: 'CONSUME', char: 'a'},\n  {opcode: 'CONSUME', char: 'b'},\n  {opcode: 'ACCEPT'}\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 Version 5.9 Using Git\nDESCRIPTION: Git command to checkout and experiment with V8 version 5.9 features. Requires an active V8 checkout and creates a new branch tracking the 5.9 release.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-59.md#2025-04-10_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit checkout -b 5.9 -t branch-heads/5.9\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Backtracking RegExp Matching in JavaScript\nDESCRIPTION: The main algorithm for non-backtracking regular expression matching using breadth-first traversal. It processes the input string one character at a time while maintaining a list of current states (program counters) and filtering them based on character consumption.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/non-backtracking-regexp.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Input position.\nlet ip = 0;\n// List of current pc values, or `'ACCEPT'` if we've found a match. We start at\n// pc 0 and follow epsilon transitions.\nlet pcs = followEpsilons([0]);\n\nwhile (true) {\n  // We're done if we've found a match…\n  if (pcs === 'ACCEPT') return true;\n  // …or if we've exhausted the input string.\n  if (ip >= input.length) return false;\n\n  // Continue only with the pcs that CONSUME the correct character.\n  pcs = pcs.filter(pc => code[pc].char === input[ip]);\n  // Advance the remaining pcs to the next instruction.\n  pcs = pcs.map(pc => pc + 1);\n  // Follow epsilon transitions.\n  pcs = followEpsilons(pcs);\n\n  ++ip;\n}\n```\n\n----------------------------------------\n\nTITLE: Using WebAssembly Passive Segments with memory.init\nDESCRIPTION: Examples of how to define and use passive data segments in WebAssembly, which are not initialized during module instantiation but can be copied into memory regions using memory.init instruction.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-75.md#2025-04-10_snippet_1\n\nLANGUAGE: wasm\nCODE:\n```\n;; Define a passive data segment.\n(data $hello passive \"Hello WebAssembly\")\n\n;; Copy \"Hello\" into memory at address 10.\n(memory.init (i32.const 10) (i32.const 0) (i32.const 5))\n\n;; Copy \"WebAssembly\" into memory at address 1000.\n(memory.init (i32.const 1000) (i32.const 6) (i32.const 11))\n```\n\n----------------------------------------\n\nTITLE: Handling Special Replacement Patterns in replaceAll in JavaScript\nDESCRIPTION: Shows how special replacement patterns like $$ work in both replace and replaceAll, and how to work around these patterns when you want to use them literally without substitution.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/string-replaceall.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'xyz'.replaceAll('y', '$$');\n// → 'x$z' (not 'x$$z')\n```\n\n----------------------------------------\n\nTITLE: Using Intl.RelativeTimeFormat API in JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the new Intl.RelativeTimeFormat API for localized formatting of relative times. It shows how to create a formatter and use it with different time units and values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-71.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a relative time formatter for the English language that does\n// not always have to use numeric value in the output.\nconst rtf = new Intl.RelativeTimeFormat('en', { numeric: 'auto' });\n\nrtf.format(-1, 'day');\n// → 'yesterday'\n\nrtf.format(0, 'day');\n// → 'today'\n\nrtf.format(1, 'day');\n// → 'tomorrow'\n\nrtf.format(-1, 'week');\n// → 'last week'\n\nrtf.format(0, 'week');\n// → 'this week'\n\nrtf.format(1, 'week');\n// → 'next week'\n```\n\n----------------------------------------\n\nTITLE: Previous Write Barrier Implementation in V8 (C++)\nDESCRIPTION: This snippet shows the previous write barrier implementation for comparison. It checks both the source object and value colors, setting the value to grey and pushing it to the marking worklist if conditions are met.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/concurrent-marking.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n// Called after `object.field = value`.\nwrite_barrier(object, field_offset, value) {\n  if (color(object) == black && color(value) == white) {\n    set_color(value, grey);\n    marking_worklist.push(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Old and New JSON.stringify Behavior for Lone Surrogates\nDESCRIPTION: Example demonstrating the well-formed JSON.stringify improvement in V8 v7.2, which properly escapes lone surrogate code points to produce valid Unicode output.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-72.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Old behavior:\nJSON.stringify('\\uD800');\n// → '\"�\"'\n\n// New behavior:\nJSON.stringify('\\uD800');\n// → '\"\\\\ud800\"'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Member Pointer Usage in C++\nDESCRIPTION: This snippet shows how Member pointers are used in C++ code, highlighting the need to support null checks and sentinel values in the compressed pointer scheme.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/oilpan-pointer-compression.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid* ptr = member.get();\nif (ptr == nullptr) { /* ... * }\n```\n\n----------------------------------------\n\nTITLE: V8 Memory Optimization Concepts\nDESCRIPTION: The content primarily contains technical explanations rather than code snippets. It describes architectural and implementation details of V8's memory optimizations including lazy feedback allocation, closure feedback cells, and lazy source positions. The focus is on reducing memory usage while maintaining JavaScript execution performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-lite.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNote: No direct code snippets are present in the provided content. The text discusses V8 engine internals and optimization techniques.\n```\n\n----------------------------------------\n\nTITLE: Bytecode Generation for Field Access\nDESCRIPTION: Generated bytecode showing how V8 handles field initialization and property access\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Load the private name symbol for `#a`\nLdaImmutableCurrentContextSlot [2]\n\n// Load the value of the property keyed by `#a` from the instance into r2\n// Note: LdaKeyedProperty is renamed to GetKeyedProperty in the refactoring\nGetKeyedProperty <this>, [2]\n\n// Use the DefineKeyedOwnProperty bytecode to store the property keyed\n// by `#a` as the value of the property keyed by `b`, that is, `b = this.#a;`\nDefineNamedOwnProperty <this>, [0], [4]\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Separators with Various Numeric Literal Types in JavaScript\nDESCRIPTION: This snippet showcases how numeric separators can be used with different types of numeric literals in JavaScript, including decimal integers, decimal fractions, binary integers, hexadecimal integers, and BigInt literals.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/numeric-separators.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// A decimal integer literal with its digits grouped per thousand:\n1_000_000_000_000\n// A decimal literal with its digits grouped per thousand:\n1_000_000.220_720\n// A binary integer literal with its bits grouped per octet:\n0b01010110_00111000\n// A binary integer literal with its bits grouped per nibble:\n0b0101_0110_0011_1000\n// A hexadecimal integer literal with its digits grouped by byte:\n0x40_76_38_6A_73\n// A BigInt literal with its digits grouped per thousand:\n4_642_473_943_484_686_707n\n```\n\n----------------------------------------\n\nTITLE: FunctionDeclaration Grammar Production\nDESCRIPTION: Grammar production for function declarations showing how parameters are passed through the production, with ~Await indicating 'await' is not a keyword in this context.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_5\n\nLANGUAGE: grammar\nCODE:\n```\nFunctionDeclaration[Yield, Await, Default] :\n  function BindingIdentifier[?Yield, ?Await] ( FormalParameters[~Yield, ~Await] ) { FunctionBody[~Yield, ~Await] }\n```\n\n----------------------------------------\n\nTITLE: Example of Write Barrier with Suboptimal Decompression in C++ and Assembly\nDESCRIPTION: An example showing how the compiler fails to optimize decompression operations in a write barrier implementation. The compiler conservatively loads the base pointer in the hot path even though it's only used in the cold path, demonstrating the need for manual optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/oilpan-pointer-compression.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nextern const uint64_t base;\nextern std::atomic_bool enabled;\n\nvoid Assign(uint32_t ptr) {\n  ptr_ = ptr\n  WriteBarrier(Decompress(ptr));\n}\n\nvoid WriteBarrier(void* ptr) {\n  if (LIKELY(\n      !enabled.load(relaxed)))\n    return;\n  SlowPath(ptr);\n}\n```\n\nLANGUAGE: asm\nCODE:\n```\nAssign(unsigned int):\n  mov dword ptr [rdi], esi\n  mov rdi, qword ptr\n      [rip + base]\n  mov al, byte ptr\n      [rip + enabled]\n  test al, 1\n  jne .LBB4_2 # very rare\n  ret\n.LBB4_2:\n  movsxd rax, esi\n  add rax, rax\n  and rdi, rax\n  jmp SlowPath(void*)\n```\n\n----------------------------------------\n\nTITLE: Point Class Definition for V8 Dynamic Variables\nDESCRIPTION: Simple C++ Point class definition that will be wrapped for JavaScript access.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nclass Point {\n public:\n  Point(int x, int y) : x_(x), y_(y) { }\n  int x_, y_;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling EnumCache and Element Indices in V8 for-in Implementation\nDESCRIPTION: C++ implementation showing how V8 handles enumerable properties, including accessing the EnumCache and prepending element indices to the property keys list. This demonstrates how indexed properties are combined with named properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nFixedArray* JSObject::GetCachedEnumKeysWithElements() {\n  FixedArray* keys = object->map()->GetCachedEnumKeys();\n  return object->GetElementsAccessor()->PrependElementIndices(object, keys);\n}\n\nFixedArray* Map::GetCachedEnumKeys() {\n  // Get the enumerable property keys from a possibly shared enum cache\n  FixedArray* keys_cache = descriptors()->enum_cache()->keys_cache();\n  if (enum_length() == keys_cache->length()) return keys_cache;\n  return keys_cache->CopyUpTo(enum_length());\n}\n\nFixedArray* FastElementsAccessor::PrependElementIndices(\n      JSObject* object, FixedArray* property_keys) {\n  Assert(object->HasFastElements());\n  FixedArray* elements = object->elements();\n  int nof_indices = CountElements(elements)\n  FixedArray* result = FixedArray::Allocate(property_keys->length() + nof_indices);\n  int insertion_index = 0;\n  for (int i = 0; i < elements->length(); i++) {\n    if (!HasElement(elements, i)) continue;\n    result[insertion_index++] = String::FromInt(i);\n  }\n  // Insert property keys at the end.\n  property_keys->CopyTo(result, nof_indices - 1);\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a Symbol's description using toString() in JavaScript\nDESCRIPTION: Demonstrates the old approach to accessing a Symbol's description by using toString() and string manipulation. This method is less intuitive and has limitations with empty descriptions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/symbol-description.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst symbol = Symbol('foo');\n//                    ^^^^^\nsymbol.toString();\n// → 'Symbol(foo)'\n//           ^^^\nsymbol.toString().slice(7, -1); // 🤔\n// → 'foo'\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Compression in C++ and x64 Assembly\nDESCRIPTION: A function that compresses a 64-bit pointer into a 32-bit compressed representation by right-shifting by one bit and truncating the upper half. This leverages the heap cage alignment to preserve information about whether the value is a pointer, nullptr, or sentinel.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/oilpan-pointer-compression.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nuint32_t Compress(void* ptr) {\n  return ((uintptr_t)ptr) >> 1;\n}\n```\n\nLANGUAGE: asm\nCODE:\n```\nmov rax, rdi\nshr rax\n```\n\n----------------------------------------\n\nTITLE: Optimized Pointer Decompression in x64 Assembly\nDESCRIPTION: An optimized implementation of pointer decompression that combines loading and sign-extension into a single instruction, which improved performance by 2% in Octane benchmarks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_7\n\nLANGUAGE: asm\nCODE:\n```\nmovlsxlq rax, <mem>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ObjectLiteral as Cover Grammar in JavaScript\nDESCRIPTION: These code snippets show how ObjectLiteral is used as a cover grammar for ObjectAssignmentPattern, allowing constructs in arrow function parameters that are not valid in object literals.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlet o = { a = 1 }; // syntax error\n\n// Arrow function with a destructuring parameter with a default\n// value:\nlet f = ({ a = 1 }) => { return a; };\nf({}); // returns 1\nf({a : 6}); // returns 6\n```\n\n----------------------------------------\n\nTITLE: Babel-Generated Array Destructuring\nDESCRIPTION: Complex code generated by Babel to implement array destructuring with full spec compliance, including iterator protocol and error handling.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nvar _slicedToArray = function() {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function(arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n\nfunction fn() {\n  var _data = data,\n      _data2 = _slicedToArray(_data, 1),\n      c = _data2[0];\n\n  return c;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data with CodeStubAssembler in C++\nDESCRIPTION: Demonstrates low-level and high-level operations using CodeStubAssembler. The low-level example loads pointer-sized data into a value, while the high-level example performs a JavaScript ToString operation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Low-level:\n// Loads the pointer-sized data at addr into value.\nNode* addr = /* ... */;\nNode* value = Load(MachineType::IntPtr(), addr);\n\n// And high-level:\n// Performs the JS operation ToString(object).\n// ToString semantics are specified at https://tc39.es/ecma262/#sec-tostring.\nNode* object = /* ... */;\nNode* string = ToString(context, object);\n```\n\n----------------------------------------\n\nTITLE: Private Brand Symbol Bytecode\nDESCRIPTION: Original bytecode for initializing private brand symbols in class constructor\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Load the private brand symbol for class A from the context\n// and store it into r1.\nLdaImmutableCurrentContextSlot [3]\nStar r1\n\n// Load the target into r0.\nMov <this>, r0\n// Load the current context into r2.\nMov <context>, r2\n// Call the runtime %AddPrivateBrand() function to store the context in\n// the instance with the private brand as key.\nCallRuntime [AddPrivateBrand], r0-r2\n```\n\n----------------------------------------\n\nTITLE: Implementing New Decompression for Pointer Compression in C++\nDESCRIPTION: This snippet demonstrates the new 'Smi-corrupting' approach to decompression. It unconditionally adds the base value to the compressed tagged value, simplifying the process.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// New decompression implementation\nint64_t uncompressed_tagged = base + int64_t(compressed_tagged);\n```\n\n----------------------------------------\n\nTITLE: Logical Assignment Short-Circuit Example\nDESCRIPTION: Illustrates practical usage of logical OR assignment with HTML elements, demonstrating the importance of short-circuit behavior for preventing unwanted side-effects when manipulating the DOM.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/logical-assignment.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Display a default message if it doesn't override anything.\n// Only assigns to innerHTML if it's empty. Doesn't cause inner\n// elements of msgElement to lose focus.\nfunction setDefaultMessage() {\n  msgElement.innerHTML ||= '<p>No messages<p>';\n}\n\n// Display a default message if it doesn't override anything.\n// Buggy! May cause inner elements of msgElement to\n// lose focus every time it's called.\nfunction setDefaultMessageBuggy() {\n  msgElement.innerHTML = msgElement.innerHTML || '<p>No messages<p>';\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Call Stats Benchmark Command in Bash\nDESCRIPTION: Command-line instruction for running a performance test with runtime call statistics using the V8 d8 shell. This helps identify bottlenecks in proxy implementation by displaying time spent in various runtime functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/optimizing-proxies.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ out/x64.release/d8 --runtime-call-stats test.js\n> run: 120.104000\n\n                      Runtime Function/C++ Builtin        Time             Count\n========================================================================================\n                                         NewObject     59.16ms  48.47%    100000  24.94%\n                                      JS_Execution     23.83ms  19.53%         1   0.00%\n                              RecompileSynchronous     11.68ms   9.57%        20   0.00%\n                        AccessorNameGetterCallback     10.86ms   8.90%    100000  24.94%\n      AccessorNameGetterCallback_FunctionPrototype      5.79ms   4.74%    100000  24.94%\n                                  Map_SetPrototype      4.46ms   3.65%    100203  25.00%\n… SNIPPET …\n```\n\n----------------------------------------\n\nTITLE: Calling a TFS Builtin from Another Builtin\nDESCRIPTION: This snippet demonstrates how to call a TFS builtin (MathIsHeapNumber42) from another builtin (MathIs42) using the CallBuiltin function. This approach helps reduce code space by reusing common functionality.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/csa-builtins.md#2025-04-10_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nTF_BUILTIN(MathIs42, MathBuiltinsAssembler) {\n  // […snip…]\n  BIND(&if_isheapnumber);\n  {\n    // Instead of handling heap numbers inline, we now call into our new TFS stub.\n    var_result.Bind(CallBuiltin(Builtins::kMathIsHeapNumber42, context, number));\n    Goto(&out);\n  }\n  // […snip…]\n}\n```\n\n----------------------------------------\n\nTITLE: Reference to Array#sort Implementation\nDESCRIPTION: Reference to the Array#sort method implementation, which was moved from self-hosted JavaScript to Torque. This change affects performance characteristics and compilation behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nArray#sort\n```\n\n----------------------------------------\n\nTITLE: Decompressing 32-bit Tagged Values in V8 - Version 2 (C++)\nDESCRIPTION: An improved decompression algorithm that uses sign extension for both pointers and Smis, simplifying the code.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nint32_t compressed_tagged;\n\n// Common code for both pointer and Smi cases\nint64_t uncompressed_tagged = int64_t(compressed_tagged);\nif (uncompressed_tagged & 1) {\n  // pointer case\n  uncompressed_tagged += base;\n}\n```\n\n----------------------------------------\n\nTITLE: Using String.prototype.matchAll for Regular Expression Iteration\nDESCRIPTION: Shows how to use the new String.prototype.matchAll API to iterate through all matches of a regular expression with capture groups. This makes it easier to work with multiple regex matches, especially with named capture groups.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-73.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst string = 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev';\nconst regex = /\\b(?<owner>[a-z0-9]+)\\/(?<repo>[a-z0-9\\.]+)\\b/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(`${match[0]} at ${match.index} with '${match.input}'`);\n  console.log(`→ owner: ${match.groups.owner}`);\n  console.log(`→ repo: ${match.groups.repo}`);\n}\n\n// Output:\n//\n// tc39/ecma262 at 23 with 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev'\n// → owner: tc39\n// → repo: ecma262\n// v8/v8.dev at 36 with 'Favorite GitHub repos: tc39/ecma262 v8/v8.dev'\n// → owner: v8\n// → repo: v8.dev\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Implementation in C with Emscripten\nDESCRIPTION: C implementation of Fibonacci calculation showing recursive approach that can benefit from tail call optimization when compiled with Emscripten.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-tail-call.md#2025-04-10_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nunsigned fib_rec(unsigned n, unsigned a, unsigned b) {\n  if (n == 0) {\n    return a;\n  }\n  return fib_rec(n - 1, b, a + b);\n}\n\nunsigned fib(unsigned n) {\n  return fib_rec(n, 0, 1);\n}\n\nint main() {\n  for (unsigned i = 0; i < 10; i++) {\n    printf(\"fib(%d): %d\\n\", i, fib(i));\n  }\n\n  printf(\"fib(1000000): %d\\n\", fib(1000000));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Point Class and Performance Testing in JavaScript\nDESCRIPTION: This snippet defines a Point class with a constructor and dotProduct method, then creates instances and runs performance tests on the dotProduct method with different input values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/system-analyzer.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Point {\n  constructor(x, y) {\n    if (x < 0 || y < 0) {\n      this.isNegative = true;\n    }\n    this.x = x;\n    this.y = y;\n  }\n\n  dotProduct(other) {\n    return this.x * other.x + this.y * other.y;\n  }\n}\n\nlet a = new Point(1, 1);\nlet b = new Point(2, 2);\nlet dotProduct;\n\n// warmup\nfor (let i = 0; i < 10e5; i++) {\n  dotProduct = a.dotProduct(b);\n}\n\nconsole.time('snippet1');\nfor (let i = 0; i < 10e6; i++) {\n  dotProduct = a.dotProduct(b);\n}\nconsole.timeEnd('snippet1');\n\na = new Point(-1, -1);\nb = new Point(-2, -2);\nconsole.time('snippet2');\nfor (let i = 0; i < 10e6; i++) {\n  dotProduct = a.dotProduct(b);\n}\nconsole.timeEnd('snippet2');\n```\n\n----------------------------------------\n\nTITLE: Object.freeze Example\nDESCRIPTION: Demonstrates V8's handling of frozen objects with non-writable properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 1 };\nObject.freeze(object);\nobject.y = 2;\n// TypeError: Cannot add property y;\n//            object is not extensible\ndelete object.x;\n// TypeError: Cannot delete property x\nobject.x = 3;\n// TypeError: Cannot assign to read-only property x\n```\n\n----------------------------------------\n\nTITLE: Initial Pointer Compression Implementation\nDESCRIPTION: First implementation of pointer compression using base value computation integrated into getters. Shows the compression mechanism using 4GB alignment.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\ninline uintptr_t GetBaseForPointerCompression(uintptr_t address) {\n  // Round address down to 4 GB\n  const uintptr_t kBaseAlignment = 1 << 32;\n  return address & -kBaseAlignment;\n}\n\nDescriptorArray Map::instance_descriptors() const {\n  uintptr_t field_address =\n      FieldAddress(ptr_, kInstanceDescriptorsOffset);\n\n  uint32_t compressed_da = *reinterpret_cast<uint32_t*>(field_address);\n\n  uintptr_t base = GetBaseForPointerCompression(ptr_);\n  uintptr_t da = base + compressed_da;\n  return DescriptorArray(da);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a V8 Trace Configuration File in JSON\nDESCRIPTION: This JSON configuration file defines how V8 tracing should work. It specifies continuous recording mode and includes specific V8 categories for tracing, including runtime statistics.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/trace.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"record_mode\": \"record-continuously\",\n  \"included_categories\": [\"v8\", \"disabled-by-default-v8.runtime_stats\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reference to ElementsKind Implementation\nDESCRIPTION: Reference to V8's internal ElementsKind system which affects how arrays are represented and processed in memory.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/array-sort.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nElementsKind\n```\n\n----------------------------------------\n\nTITLE: Optimized Point Class Definition in JavaScript\nDESCRIPTION: This snippet shows an optimized version of the Point class where the isNegative property is always initialized in the constructor to avoid creating multiple map shapes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/system-analyzer.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Point {\n  constructor(x, y) {\n    this.isNegative = x < 0 || y < 0;\n    this.x = x;\n    this.y = y;\n  }\n\n  dotProduct(other) {\n    return this.x * other.x + this.y * other.y;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Old Space Size in V8 ResourceConstraints API\nDESCRIPTION: V8 embedders can increase the heap limit using the 'set_max_old_space_size' function of the ResourceConstraints API. This allows for larger heap sizes, but may increase garbage collection pause times.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/heap-size-limit.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nset_max_old_space_size\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Object in JavaScript\nDESCRIPTION: This JavaScript snippet defines a Point constructor function and creates an instance. It's used to illustrate how objects are stored in memory and how optimizations like double field unboxing work.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\nconst p = new Point(3.1, 5.3);\n```\n\n----------------------------------------\n\nTITLE: Enabling WebAssembly Dynamic Tiering in Chrome via Command Line\nDESCRIPTION: This command line flag enables WebAssembly Dynamic Tiering in Chrome for local testing. It allows developers to experiment with the performance impact on their web applications.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-dynamic-tiering.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--enable-blink-features=WebAssemblyDynamicTiering\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Megamorphic Super Property Access with JavaScript Mixins\nDESCRIPTION: Complex example showing how using mixins with super property access can lead to megamorphic (slower) access sites, which is a limitation of the current optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-super.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createMixin(base) {\n  class Mixin extends base {\n    m() { return super.m() + 1; }\n    //                ^ this access site is megamorphic\n  }\n  return Mixin;\n}\n\nclass Base {\n  m() { return 0; }\n}\n\nconst myClass = createMixin(\n  createMixin(\n    createMixin(\n      createMixin(\n        createMixin(Base)\n      )\n    )\n  )\n);\n(new myClass()).m();\n```\n\n----------------------------------------\n\nTITLE: Implementing clampZero function in JavaScript\nDESCRIPTION: Example implementation of a clampZero function that takes an array of floats and sets negative values to zero. This is used to compare scalar and SIMD implementations in WebAssembly.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-86.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction clampZero(f32array) {\n  for (let i = 0; i < f32array.length; ++i) {\n    if (f32array[i] < 0) {\n      f32array[i] = 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-trapping Float-to-Int Conversions in WebAssembly\nDESCRIPTION: Command-line flag to enable non-trapping float-to-int conversions, which improves performance for certain benchmarks like Fasta that otherwise regress in the WebAssembly MVP without this feature.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-llvm-wasm.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-mnontrapping-fptoint\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Control Flow Block Compilation\nDESCRIPTION: Illustrates how Liftoff handles WebAssembly control flow blocks with state management and register allocation. Shows register shuffling and stack frame management during block transitions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/liftoff.md#2025-04-10_snippet_1\n\nLANGUAGE: WebAssembly\nCODE:\n```\nget_local 0\nget_local 1\nif\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RegExp Performance Degradation with Property Modification\nDESCRIPTION: Shows how modifying a RegExp instance or its prototype can force execution to take a slower path, impacting performance. The example demonstrates the performance difference between a clean RegExp instance and one with modified properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/speeding-up-regular-expressions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /./g;\nre.exec('');  // Fast path.\nre.new_property = 'slow';\nRegExp.prototype.new_property = 'also slow';\nre.exec('');  // Slow path.\n```\n\n----------------------------------------\n\nTITLE: Adding Proposal Flags to WebAssembly Spec Test Configuration\nDESCRIPTION: This code shows where to add the proposal repository name and feature flag to the spec tests configuration file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/wasm-shipping-checklist.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntest/wasm-spec-tests/testcfg.py\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions with Array Methods in JavaScript\nDESCRIPTION: This snippet demonstrates how to use ES6 arrow functions to write more concise code when mapping over arrays. It compares the traditional function syntax with the new arrow function syntax.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-45.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [0, 1, 3];\n// Code without Arrow Functions\nconst convertedData = data.map(function(value) { return value * 2; });\nconsole.log(convertedData);\n// Code with Arrow Functions\nconst convertedData = data.map(value => value * 2);\nconsole.log(convertedData);\n```\n\n----------------------------------------\n\nTITLE: Consuming Code Cache Data in V8 C++ API\nDESCRIPTION: This snippet shows how to use previously produced cache data when compiling a script in V8. It attaches the cache data to the source object and uses the ScriptCompiler::kConsumeCodeCache option.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching.md#2025-04-10_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nv8::ScriptCompiler::kConsumeCodeCache\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Simple Addition Function Compilation\nDESCRIPTION: Demonstrates how Liftoff compiles a basic WebAssembly function that adds two parameters. Shows register allocation and code generation process for simple arithmetic operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/liftoff.md#2025-04-10_snippet_0\n\nLANGUAGE: WebAssembly\nCODE:\n```\nget_local 0\nget_local 1\ni32.add\n```\n\n----------------------------------------\n\nTITLE: HTML script tag example for synchronous script loading\nDESCRIPTION: Demonstrates a basic HTML structure with a synchronous script tag in the head. This is used to illustrate how script streaming worked before the improvements in V8 v7.8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-78.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"main.js\"></script>\n</head>\n...\n```\n\n----------------------------------------\n\nTITLE: Inspector Protocol Communication for Precise Coverage\nDESCRIPTION: JSON-formatted messages demonstrating the communication between an embedder and V8 through the Inspector protocol to start, retrieve, and stop precise code coverage collection.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/javascript-code-coverage.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// The embedder directs V8 to begin collecting precise coverage.\n{ \"id\": 26, \"method\": \"Profiler.startPreciseCoverage\",\n            \"params\": { \"callCount\": false, \"detailed\": true }}\n// Embedder requests coverage data (delta since last request).\n{ \"id\": 32, \"method\":\"Profiler.takePreciseCoverage\" }\n// The reply contains collection of nested source ranges.\n{ \"id\": 32, \"result\": { \"result\": [{\n  \"functions\": [\n    {\n      \"functionName\": \"fib\",\n      \"isBlockCoverage\": true,    // Block granularity.\n      \"ranges\": [ // An array of nested ranges.\n        {\n          \"startOffset\": 50,  // Byte offset, inclusive.\n          \"endOffset\": 224,   // Byte offset, exclusive.\n          \"count\": 1\n        }, {\n          \"startOffset\": 97,\n          \"endOffset\": 107,\n          \"count\": 0\n        }, {\n          \"startOffset\": 134,\n          \"endOffset\": 144,\n          \"count\": 0\n        }, {\n          \"startOffset\": 192,\n          \"endOffset\": 223,\n          \"count\": 0\n        },\n      ]},\n      \"scriptId\": \"199\",\n      \"url\": \"file:///coverage-fib.html\"\n    }\n  ]\n}}\n\n// Finally, the embedder directs V8 to end collection and\n// free related data structures.\n{\"id\":37,\"method\":\"Profiler.stopPreciseCoverage\"}\n```\n\n----------------------------------------\n\nTITLE: Defining MemberExpression Grammar in ECMAScript\nDESCRIPTION: This code snippet presents the grammar productions for MemberExpression in the ECMAScript specification. It defines the various syntactic forms that a MemberExpression can take, including property access, computed property access, and method invocation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-2.md#2025-04-10_snippet_2\n\nLANGUAGE: grammar\nCODE:\n```\nMemberExpression :\n  PrimaryExpression\n  MemberExpression [ Expression ]\n  MemberExpression . IdentifierName\n  MemberExpression TemplateLiteral\n  SuperProperty\n  MetaProperty\n  new MemberExpression Arguments\n```\n\n----------------------------------------\n\nTITLE: Disabling WebAssembly Output in Emscripten\nDESCRIPTION: Emscripten compiler flag to disable WebAssembly output and generate JavaScript fallback code instead, useful for targeting browsers without WebAssembly support.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-llvm-wasm.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-s WASM=0\n```\n\n----------------------------------------\n\nTITLE: Compiling and Running WebAssembly in Different Runtimes\nDESCRIPTION: Shell commands showing how to compile C++ to WebAssembly and run it in wasmer, wasmtime, and wavm runtimes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ emcc hello.cpp -O3 -o hello.wasm\n$ wasmer run hello.wasm\nhello, world!\n$ wasmtime hello.wasm\nhello, world!\n$ wavm run hello.wasm\nhello, world!\n```\n\n----------------------------------------\n\nTITLE: Calling Multi-value WebAssembly Functions from JavaScript\nDESCRIPTION: Demonstrates how to call a WebAssembly function that returns multiple values from JavaScript. The function returns an array containing all the return values.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-85.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ninstance.exports.swap(1, 2);\n// → [2, 1]\n```\n\n----------------------------------------\n\nTITLE: Loading Constants via Builtins Constant Pool\nDESCRIPTION: The technique for loading heap constants through double indirection - first accessing the builtins constant pool from the roots list, then loading the desired constant from the pool.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/embedded-builtins.md#2025-04-10_snippet_3\n\nLANGUAGE: assembly\nCODE:\n```\n// Load the builtins constant pool, then the\n// desired constant.\nREX.W movq rax,[kRootRegister + <offset>]\nREX.W movq rax,[rax + 0x1d7]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Property Access in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates a simple property access operation using the dot notation. It's used as an example to illustrate how the ECMAScript specification defines the evaluation of such expressions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-2.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(o2.foo);\n```\n\n----------------------------------------\n\nTITLE: Optimizing for Code Size in WebAssembly\nDESCRIPTION: Command-line option to optimize specific source files for code size rather than speed, which can help with cases where LLVM's inlining decisions are suboptimal.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-llvm-wasm.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-Os\n```\n\n----------------------------------------\n\nTITLE: Using Union with Properties of Strings and Character Classes in RegExp with v Flag\nDESCRIPTION: Demonstrates combining different notation types in a character class with the v flag: properties of strings, character properties, string literals, lone characters, and character ranges.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /^[\\p{Emoji_Keycap_Sequence}\\p{ASCII}\\q{🇧🇪|abc}xyz0-9]$/v;\n\nre.test('4️⃣'); // → true\nre.test('_'); // → true\nre.test('🇧🇪'); // → true\nre.test('abc'); // → true\nre.test('x'); // → true\nre.test('4'); // → true\n```\n\n----------------------------------------\n\nTITLE: Vulnerable JavaScript Array Access Example\nDESCRIPTION: Example showing a potentially vulnerable code pattern that could be exploited through speculative execution to access out-of-bounds array elements.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spectre.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (condition) {\n  return a[i];\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Browser for WebAssembly Tracing\nDESCRIPTION: Command to start a new Chrome browser session with a clean user profile and disabled extensions for testing WebAssembly compilation and caching behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-code-caching.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoogle-chrome --user-data-dir=\"$(mktemp -d)\" --disable-extensions\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ReturnIfAbrupt in ECMAScript Algorithms\nDESCRIPTION: An example showing how ReturnIfAbrupt is used within ECMAScript specification algorithms. It demonstrates the pattern of handling potential error completions from function calls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_2\n\nLANGUAGE: ecmascript\nCODE:\n```\n1. Let `obj` be `Foo()`. (`obj` is a Completion Record.)\n2. `ReturnIfAbrupt(obj)`.\n3. `Bar(obj)`. (If we're still here, `obj` is the value extracted from the Completion Record.)\n```\n\n----------------------------------------\n\nTITLE: Initializing JavaScript Object Body in C++\nDESCRIPTION: This C++ code snippet from V8's implementation shows how the JavaScript object body is initialized. It demonstrates the use of filler objects to handle slack tracking and prepare for garbage collection.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nvoid Factory::InitializeJSObjectBody(Handle<JSObject> obj, Handle<Map> map,\n                                     int start_offset) {\n\n  // <lines removed>\n\n  bool in_progress = map->IsInobjectSlackTrackingInProgress();\n  Object filler;\n  if (in_progress) {\n    filler = *one_pointer_filler_map();\n  } else {\n    filler = *undefined_value();\n  }\n  obj->InitializeBody(*map, start_offset, *undefined_value(), filler);\n  if (in_progress) {\n    map->FindRootMap(isolate()).InobjectSlackTrackingStep(isolate());\n  }\n\n  // <lines removed>\n}\n```\n\n----------------------------------------\n\nTITLE: Using intersection with `&&` to match Greek letters\nDESCRIPTION: Example showing how to use the intersection operator (`&&`) in character classes with the `v` flag to match only characters that are both Greek script and letters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/regexp-v-flag.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /[\\p{Script_Extensions=Greek}&&\\p{Letter}]/v;\n// U+03C0 GREEK SMALL LETTER PI\nre.test('π'); // → true\n// U+1018A GREEK ZERO SIGN\nre.test('𐆊'); // → false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript Numeric Separators for Improved Readability\nDESCRIPTION: Example of hard-to-read numeric literals in JavaScript without separators. These large numbers are difficult for humans to quickly parse and understand.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-75.md#2025-04-10_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n1000000000000\n   1019436871.42\n```\n\n----------------------------------------\n\nTITLE: Creating Point Object Template with Internal Fields\nDESCRIPTION: Demonstrates setting up an object template for Point objects with internal fields and accessors.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nv8::Local<v8::ObjectTemplate> point_templ = v8::ObjectTemplate::New(isolate);\npoint_templ->SetInternalFieldCount(1);\npoint_templ->SetAccessor(v8::String::NewFromUtf8(isolate, \"x\"),\n                         GetPointX, SetPointX);\npoint_templ->SetAccessor(v8::String::NewFromUtf8(isolate, \"y\"),\n                         GetPointY, SetPointY);\n```\n\n----------------------------------------\n\nTITLE: HasOwnProperty Abstract Operation Algorithm Without Shorthand Notation\nDESCRIPTION: The expanded algorithm for the HasOwnProperty abstract operation without the shorthand notation. It demonstrates how property existence checks are performed at the specification level.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_4\n\nLANGUAGE: ecmascript\nCODE:\n```\n**`HasOwnProperty(O, P)`**\n\n1. Assert: `Type(O)` is `Object`.\n2. Assert: `IsPropertyKey(P)` is `true`.\n3. Let `desc` be `O.[[GetOwnProperty]](P)`.\n4. If `desc` is an abrupt completion, return `desc`\n5. Set `desc` to `desc.[[Value]]`\n6. If `desc` is `undefined`, return `NormalCompletion(false)`.\n7. Return `NormalCompletion(true)`.\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Loop Without SIMD Optimization\nDESCRIPTION: WebAssembly text format showing how a regular loop is compiled without SIMD instructions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_4\n\nLANGUAGE: wasm\nCODE:\n```\n(loop\n  (i32.store\n    … get address in `out` …\n    (i32.mul\n      (i32.load … get address in `in_a` …)\n      (i32.load … get address in `in_b` …)\n  …\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Rust with SIMD Support using Cargo\nDESCRIPTION: This command shows how to compile Rust code with SIMD support enabled using Cargo. The RUSTFLAGS environment variable is set to include the necessary compiler flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"-C target-feature=+simd128\" cargo build\n```\n\n----------------------------------------\n\nTITLE: Spreading Array Elements in JavaScript\nDESCRIPTION: Demonstration of the spread syntax for arrays in JavaScript, which is optimized in V8 v7.2 when spread elements appear at the front of an array literal.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[...set]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[...set.keys()]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n[...set.values()]\n```\n\n----------------------------------------\n\nTITLE: Applying Function Inlining Control Attribute in C++\nDESCRIPTION: C++ attribute to prevent function inlining, which can be useful when LLVM's automatic inlining decisions cause performance issues.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-llvm-wasm.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n__attribute__((noinline))\n```\n\n----------------------------------------\n\nTITLE: Object.prototype.hasOwnProperty Algorithm Without Shorthand Notation\nDESCRIPTION: The expanded algorithm for Object.prototype.hasOwnProperty without using '?' and '!' shorthands. This shows explicit Completion Record handling at each step.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-1.md#2025-04-10_snippet_3\n\nLANGUAGE: ecmascript\nCODE:\n```\n**`Object.prototype.hasOwnProperty(V)`**\n\n1. Let `P` be `ToPropertyKey(V)`.\n2. If `P` is an abrupt completion, return `P`\n3. Set `P` to `P.[[Value]]`\n4. Let `O` be `ToObject(this value)`.\n5. If `O` is an abrupt completion, return `O`\n6. Set `O` to `O.[[Value]]`\n7. Let `temp` be `HasOwnProperty(O, P)`.\n8. If `temp` is an abrupt completion, return `temp`\n9. Let `temp` be `temp.[[Value]]`\n10. Return `NormalCompletion(temp)`\n```\n\n----------------------------------------\n\nTITLE: Compiling Rust with SIMD Support using rustc\nDESCRIPTION: This command demonstrates how to compile Rust code with SIMD support enabled using the rustc compiler directly. The -C target-feature=+simd128 flag is used to enable SIMD operations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrustc … -C target-feature=+simd128 -o out.wasm\n```\n\n----------------------------------------\n\nTITLE: Setting Named Property Interceptors in V8\nDESCRIPTION: Demonstrates how to set up named property interceptors using SetNamedPropertyHandler with MapGet and MapSet callbacks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nv8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate);\nresult->SetNamedPropertyHandler(MapGet, MapSet);\n```\n\n----------------------------------------\n\nTITLE: Referencing V8 Commit for Hash Seed Implementation\nDESCRIPTION: This code snippet shows part of a commit message from V8's implementation of a hash seed value to mitigate hash flooding attacks. It highlights the limitation of the solution for pre-compiled snapshots.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/hash-flooding.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThis version only solves the issue for those that compile V8 themselves or those that do not use snapshots. A snapshot-based precompiled V8 will still have predictable string hash codes.\n```\n\n----------------------------------------\n\nTITLE: Expanded BindingIdentifier Grammar Production\nDESCRIPTION: Expanded form of the BindingIdentifier production showing that initially both BindingIdentifier and BindingIdentifier_Await include 'await' as a possibility.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_11\n\nLANGUAGE: grammar\nCODE:\n```\nBindingIdentifier_Await :\n  Identifier\n  yield\n  await\n\nBindingIdentifier :\n  Identifier\n  yield\n  await\n```\n\n----------------------------------------\n\nTITLE: WebAssembly _start Function in WAT Format\nDESCRIPTION: The disassembled WebAssembly Text format (WAT) showing the _start function implementation required by WASI specification.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-standalone-wasm.md#2025-04-10_snippet_3\n\nLANGUAGE: lisp\nCODE:\n```\n(func $_start\n (nop)\n)\n```\n\n----------------------------------------\n\nTITLE: Standard C++ Array Multiplication Function\nDESCRIPTION: A basic C++ function that multiplies elements from two arrays and stores the results in an output array, which can be automatically vectorized.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid multiply_arrays(int* out, int* in_a, int* in_b, int size) {\n  for (int i = 0; i < size; i++) {\n    out[i] = in_a[i] * in_b[i];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Public and Private Static Properties and Methods\nDESCRIPTION: Demonstrates how to create public and private static properties and methods in a class. Shows both ES2015 static method syntax and newer static field syntax with privacy controls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/class-fields.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass FakeMath {\n  // `PI` is a static public property.\n  static PI = 22 / 7; // Close enough.\n\n  // `#totallyRandomNumber` is a static private property.\n  static #totallyRandomNumber = 4;\n\n  // `#computeRandomNumber` is a static private method.\n  static #computeRandomNumber() {\n    return FakeMath.#totallyRandomNumber;\n  }\n\n  // `random` is a static public method (ES2015 syntax)\n  // that consumes `#computeRandomNumber`.\n  static random() {\n    console.log('I heard you like random numbers…');\n    return FakeMath.#computeRandomNumber();\n  }\n}\n\nFakeMath.PI;\n// → 3.142857142857143\nFakeMath.random();\n// logs 'I heard you like random numbers…'\n// → 4\nFakeMath.#totallyRandomNumber;\n// → SyntaxError\nFakeMath.#computeRandomNumber();\n// → SyntaxError\n```\n\n----------------------------------------\n\nTITLE: JavaScript Library with Legalized i64 Handling\nDESCRIPTION: Modified JavaScript code showing how to handle legalized 64-bit integers split into two 32-bit parameters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/wasm-bigint.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  send_i64_to_js: function(low, high) {\n    console.log(\"JS received: 0x\" + high.toString(16) + low.toString(16));\n  }\n```\n\n----------------------------------------\n\nTITLE: Examples of Valid CoverParenthesizedExpressionAndArrowParameterList in JavaScript\nDESCRIPTION: These code snippets demonstrate various valid constructs that can be parsed as CPEAAPL, including both valid parenthesized expressions and arrow function parameter lists.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-4.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Valid ParenthesizedExpression and ArrowParameterList:\n(a, b)\n(a, b = 1)\n\n// Valid ParenthesizedExpression:\n(1, 2, 3)\n(function foo() { })\n\n// Valid ArrowParameterList:\n()\n(a, b,)\n(a, ...b)\n(a = 1, ...b)\n\n// Not valid either, but still a CPEAAPL:\n(1, ...b)\n(1, )\n```\n\n----------------------------------------\n\nTITLE: Embedding builtins metadata and machine code using assembly directives in C++\nDESCRIPTION: Example of how V8 stores builtin code in embedded.cc using .byte directives to instruct the C++ compiler to place the byte sequence directly into the output object file, which later becomes part of the executable's .text section.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/embedded-builtins.md#2025-04-10_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// Information about embedded builtins are included in\n// a metadata table.\nV8_EMBEDDED_TEXT_HEADER(v8_Default_embedded_blob_)\n__asm__(\".byte 0x65,0x6d,0xcd,0x37,0xa8,0x1b,0x25,0x7e\\n\"\n[snip metadata]\n\n// Followed by the generated machine code.\n__asm__(V8_ASM_LABEL(\"Builtins_RecordWrite\"));\n__asm__(\".byte 0x55,0x48,0x89,0xe5,0x6a,0x18,0x48,0x83\\n\"\n[snip builtins code]\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Latest Upstream Emscripten SDK\nDESCRIPTION: These commands install and activate the latest upstream version of the Emscripten SDK, which uses the LLVM WebAssembly backend. This allows developers to test the new backend before it becomes the default.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/emscripten-llvm-wasm.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nemsdk install latest-upstream\nemsdk activate latest-upstream\n```\n\n----------------------------------------\n\nTITLE: Performance Testing Positive Point Instances in JavaScript\nDESCRIPTION: This snippet creates Point instances with positive coordinates and runs a performance test on the dotProduct method using console.time.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/system-analyzer.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = new Point(1, 1);\nlet b = new Point(2, 2);\nlet dotProduct;\n\nconsole.time('snippet1');\nfor (let i = 0; i < 10e6; i++) {\n  dotProduct = a.dotProduct(b);\n}\nconsole.timeEnd('snippet1');\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Functions with the Same Optimized Code\nDESCRIPTION: Example showing how different JavaScript functions can point to the same optimized code object. This illustrates why V8 needed to keep track of all optimized functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst f2 = g();\nf2(0);\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Stack Trace in JavaScript\nDESCRIPTION: This snippet shows an example of a fully formatted stack trace in V8, demonstrating how errors capture and display stack information.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/stack-trace-api.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nReferenceError: FAIL is not defined\n   at Constraint.execute (deltablue.js:525:2)\n   at Constraint.recalculate (deltablue.js:424:21)\n   at Planner.addPropagate (deltablue.js:701:6)\n   at Constraint.satisfy (deltablue.js:184:15)\n   at Planner.incrementalAdd (deltablue.js:591:21)\n   at Constraint.addConstraint (deltablue.js:162:10)\n   at Constraint.BinaryConstraint (deltablue.js:346:7)\n   at Constraint.EqualityConstraint (deltablue.js:515:38)\n   at chainTest (deltablue.js:807:6)\n   at deltaBlue (deltablue.js:879:2)\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring in ES2015+\nDESCRIPTION: Example of modern array destructuring syntax that achieves performance parity with ES5 equivalent. Extracts the first element from a data array.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn() {\n  var [c] = data;\n  return c;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Expected Number of Properties in V8\nDESCRIPTION: This C++ function from V8's source code calculates the expected number of properties for a JavaScript object. It includes properties from the prototype chain and adds extra slack space.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nint JSFunction::CalculateExpectedNofProperties(Isolate* isolate,\n                                               Handle<JSFunction> function) {\n  int expected_nof_properties = 0;\n  for (PrototypeIterator iter(isolate, function, kStartAtReceiver);\n       !iter.IsAtEnd(); iter.Advance()) {\n    Handle<JSReceiver> current =\n        PrototypeIterator::GetCurrent<JSReceiver>(iter);\n    if (!current->IsJSFunction()) break;\n    Handle<JSFunction> func = Handle<JSFunction>::cast(current);\n\n    // The super constructor should be compiled for the number of expected\n    // properties to be available.\n    Handle<SharedFunctionInfo> shared(func->shared(), isolate);\n    IsCompiledScope is_compiled_scope(shared->is_compiled_scope(isolate));\n    if (is_compiled_scope.is_compiled() ||\n        Compiler::Compile(func, Compiler::CLEAR_EXCEPTION,\n                          &is_compiled_scope)) {\n      DCHECK(shared->is_compiled());\n      int count = shared->expected_nof_properties();\n      // Check that the estimate is sensible.\n      if (expected_nof_properties <= JSObject::kMaxInObjectProperties - count) {\n        expected_nof_properties += count;\n      } else {\n        return JSObject::kMaxInObjectProperties;\n      }\n    } else {\n      // In case there was a compilation error proceed iterating in case there\n      // will be a builtin function in the prototype chain that requires\n      // certain number of in-object properties.\n      continue;\n    }\n  }\n  // In-object slack tracking will reclaim redundant inobject space\n  // later, so we can afford to adjust the estimate generously,\n  // meaning we over-allocate by at least 8 slots in the beginning.\n  if (expected_nof_properties > 0) {\n    expected_nof_properties += 8;\n    if (expected_nof_properties > JSObject::kMaxInObjectProperties) {\n      expected_nof_properties = JSObject::kMaxInObjectProperties;\n    }\n  }\n  return expected_nof_properties;\n}\n```\n\n----------------------------------------\n\nTITLE: GN arguments for release build\nDESCRIPTION: Configuration for release build settings in GN.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nis_debug=false\n```\n\n----------------------------------------\n\nTITLE: Printing Output with d8 in JavaScript\nDESCRIPTION: Demonstrates how to use console.log to print output when running JavaScript files with d8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/d8.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cat test.js\nconsole.log('Hello world!');\n\n$ out.gn/x64.optdebug/d8 test.js\nHello world!\n```\n\n----------------------------------------\n\nTITLE: Recursive List Sum Implementation in C\nDESCRIPTION: Example of a recursive function that sums elements of a linked list, demonstrating how tail call optimization can transform recursive calls into loops to prevent stack overflow.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-tail-call.md#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint sum(List* list, int acc) {\n  if (list == nullptr) return acc;\n  return sum(list->next, acc + list->val);\n}\n```\n\n----------------------------------------\n\nTITLE: Naive ES5 Array Access\nDESCRIPTION: Traditional ES5 approach to accessing the first element of an array, showing the baseline performance target for ES2015+ optimizations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/high-performance-es2015.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction fn() {\n  var c = data[0];\n  return c;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Private Brand Checks with Class Fields in JavaScript\nDESCRIPTION: This example demonstrates how to use the 'in' operator with private class fields, showing that it only works within the class that defines the private field.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/private-brand-checks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {\n  static test(obj) {\n    console.log(#foo in obj);\n  }\n  #foo = 0;\n}\n\nA.test(new A()); // true\nA.test({}); // false\n\nclass B {\n  #foo = 0;\n}\n\nA.test(new B()); // false; it's not the same #foo\n```\n\n----------------------------------------\n\nTITLE: GN arguments for debug build\nDESCRIPTION: Configuration for debug build settings in GN.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nis_debug=true\nv8_enable_backtrace=true\nv8_enable_slow_dchecks=true\nv8_optimized_debug=false\n```\n\n----------------------------------------\n\nTITLE: Optimized List Sum Implementation in C\nDESCRIPTION: The loop-based equivalent of the recursive sum function after tail call optimization is applied, showing constant stack space usage.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-tail-call.md#2025-04-10_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint sum(List* list, int acc) {\n  while (list != nullptr) {\n    acc = acc + list->val;\n    list = list->next;\n  }\n  return acc;\n}\n```\n\n----------------------------------------\n\nTITLE: Potential Memory-Efficient BigInt Representation\nDESCRIPTION: This pseudo-code illustrates a potential future optimization for small BigInts (up to 64 bits), storing them more efficiently by using a special representation with a direct value rather than an array of digits.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/bigint.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type: 'BigInt-Int64',\n  value: 0x12…,\n}\n```\n\n----------------------------------------\n\nTITLE: Manual SIMD Implementation Using Intrinsics in C++\nDESCRIPTION: C++ function that explicitly uses SIMD intrinsics from wasm_simd128.h to multiply array elements in parallel, processing 4 elements at a time.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/simd.md#2025-04-10_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include <wasm_simd128.h>\n\nvoid multiply_arrays(int* out, int* in_a, int* in_b, int size) {\n  for (int i = 0; i < size; i += 4) {\n    v128_t a = wasm_v128_load(&in_a[i]);\n    v128_t b = wasm_v128_load(&in_b[i]);\n    v128_t prod = wasm_i32x4_mul(a, b);\n    wasm_v128_store(&out[i], prod);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing StreamedSource API in V8 (C++)\nDESCRIPTION: Reference to V8's StreamedSource API, which enables parsing JavaScript source files on a background thread. This API allows V8 to start parsing as soon as the first chunk of a file is downloaded.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/background-compilation.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nStreamedSource\n```\n\n----------------------------------------\n\nTITLE: Mutual Recursion Example in C with Tail Calls\nDESCRIPTION: Implementation of even/odd number checking using mutual recursion with musttail attribute for proper tail call optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-tail-call.md#2025-04-10_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n#include <stdbool.h>\n\nbool is_odd(unsigned n);\nbool is_even(unsigned n);\n\nbool is_odd(unsigned n) {\n  if (n == 0) {\n    return false;\n  }\n  __attribute__((__musttail__))\n  return is_even(n - 1);\n}\n\nbool is_even(unsigned n) {\n  if (n == 0) {\n    return true;\n  }\n  __attribute__((__musttail__))\n  return is_odd(n - 1);\n}\n\nint main() {\n  printf(\"is_even(1000000): %d\\n\", is_even(1000000));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MathIs42 Builtin in Torque\nDESCRIPTION: A Torque implementation of a builtin that checks if a given value equals 42. It handles both Smi and HeapNumber cases and converts the input using ToNumber_Inline.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/torque-builtins.md#2025-04-10_snippet_0\n\nLANGUAGE: torque\nCODE:\n```\nnamespace math {\n  javascript builtin MathIs42(\n      context: Context, receiver: Object, x: Object): Boolean {\n    const number: Number = ToNumber_Inline(x);\n    typeswitch (number) {\n      case (smi: Smi): {\n        return smi == 42 ? True : False;\n      }\n      case (heapNumber: HeapNumber): {\n        return Convert<float64>(heapNumber) == 42 ? True : False;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Code Reference at Runtime in x64 Assembly for V8\nDESCRIPTION: Generates assembly code to get the address of the current instruction being executed. This is used to access the code object at runtime to check if it has been marked for deoptimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/lazy-unlinking.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nLabel current;\n// Load effective address of current instruction into rcx.\n__ leaq(rcx, Operand(&current));\n__ bind(&current);\n```\n\n----------------------------------------\n\nTITLE: VariableStatement Grammar Production\nDESCRIPTION: Grammar production for variable statements showing how the Yield and Await parameters are passed through from function bodies to statements within them.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_7\n\nLANGUAGE: grammar\nCODE:\n```\nVariableStatement[Yield, Await] :\n  var VariableDeclarationList[+In, ?Yield, ?Await] ;\n```\n\n----------------------------------------\n\nTITLE: Sandboxed JSArrayBuffer Implementation (Internal Buffer)\nDESCRIPTION: Modified JSArrayBuffer class using sandbox-compatible pointer and size types for internal buffers, limiting memory access to within the sandbox boundaries.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/sandbox.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass JSArrayBuffer: public JSObject {\n  private:\n    sandbox_ptr_t buffer_;\n    sandbox_size_t size_;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Control-Flow Dependent Typing with JavaScript Function\nDESCRIPTION: A simple JavaScript function that illustrates how control-flow dependent typing works. The function returns x+1 when x is less than 42, otherwise it returns x. This example is used to demonstrate the limitations of the Sea of Nodes architecture in optimizing checked arithmetic operations based on control flow constraints.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(x) {\n  if (x < 42) {\n    return x + 1;\n  }\n  return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded FunctionDeclaration Grammar Production\nDESCRIPTION: Expanded form of the FunctionDeclaration production showing different combinations of parameters, demonstrating that non-async functions always get FunctionBody without _Await.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/understanding-ecmascript-part-3.md#2025-04-10_snippet_6\n\nLANGUAGE: grammar\nCODE:\n```\nFunctionDeclaration :\n  function BindingIdentifier ( FormalParameters ) { FunctionBody }\n\nFunctionDeclaration_Yield :\n  function BindingIdentifier_Yield ( FormalParameters ) { FunctionBody }\n\nFunctionDeclaration_Await :\n  function BindingIdentifier_Await ( FormalParameters ) { FunctionBody }\n\nFunctionDeclaration_Yield_Await :\n  function BindingIdentifier_Yield_Await ( FormalParameters ) { FunctionBody }\n```\n\n----------------------------------------\n\nTITLE: Running V8 Tests with gm\nDESCRIPTION: Using the 'gm' tool to build and run V8 tests for different build targets. The .check suffix instructs gm to run tests after building.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngm x64.release.check\ngm x64.optdebug.check  # recommended: reasonably fast, with DCHECKs.\ngm ia32.check\ngm release.check\ngm check  # builds and tests all default platforms\n```\n\n----------------------------------------\n\nTITLE: Optimizing JavaScript Function with V8 Native Commands\nDESCRIPTION: Demonstrates how to force optimization of a JavaScript function using V8's native syntax commands before slack tracking is complete. Uses PrepareFunctionForOptimization and OptimizeFunctionOnNextCall.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(a1, a2, a3, a4) {\n  return new Peak(a1, a2, a3, a4);\n}\n\n%PrepareFunctionForOptimization(foo);\nconst m1 = foo('Wendelstein', 1838);\nconst m2 = foo('Matterhorn', 4478, 1040, true);\n%OptimizeFunctionOnNextCall(foo);\nfoo('Zugspitze', 2962);\n```\n\n----------------------------------------\n\nTITLE: Simple String Concatenation Function in JavaScript\nDESCRIPTION: A basic JavaScript function that concatenates two string properties from input objects. This example is used to illustrate how even simple operations result in complex TurboFan graphs with many nodes on the effect chain.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(a, b) {\n  // assuming that `a.str` and `b.str` are strings\n  return a.str + b.str;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript HTML Comment Token Example\nDESCRIPTION: Example showing the longest ambiguous sequence in JavaScript parsing, where <!-- is an HTML comment start but <!- is parsed as separate operators.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/scanner.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<!--\n```\n\n----------------------------------------\n\nTITLE: Traditional JSON Module Import (Insecure)\nDESCRIPTION: Shows the traditional but potentially insecure way of importing JSON modules without assertions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/import-assertions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport json from './foo.json';\n```\n\n----------------------------------------\n\nTITLE: V8 Debug Build Command for Optimization Analysis\nDESCRIPTION: Bash command to run V8's d8 shell with debug flags for analyzing optimization and generating code comments.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/slack-tracking.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./d8 --allow-natives-syntax --trace-opt --code-comments --print-opt-code mycode.js\n```\n\n----------------------------------------\n\nTITLE: TurboFan Assembly with Arguments Adaptor Frame\nDESCRIPTION: Assembly code showing how TurboFan handles mismatched argument counts using the arguments adaptor frame mechanism.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_9\n\nLANGUAGE: nasm\nCODE:\n```\nmovq rdi,0x4250820fff1    ;; Load the function object <JSFunction add42>\n;; Push receiver and arguments SMIs 1, 2 and 3\nmovq rcx,0x42508080dd5    ;; <JSGlobal Object>\npush rcx\npush 0x2\npush 0x4\npush 0x6\nmovl rax,0x3              ;; Save the arguments count in rax\nmovl rbx,0x1              ;; Save the formal parameters count in rbx\nmovq r10,0x564ed7fdf840   ;; <ArgumentsAdaptorTrampoline>\ncall r10                  ;; Call the ArgumentsAdaptorTrampoline\n```\n\n----------------------------------------\n\nTITLE: Using Iterator.drop() Method in JavaScript\nDESCRIPTION: The drop() method returns a new iterator that skips a specified number of values from the original iterator. This example drops the 10 most recent blog posts and returns the rest.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/iterator-helpers.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Select the list of blog posts from a blog archive page.\nconst posts = document.querySelectorAll('li:not(header li)');\n\n// Drop 10 recent blog posts and log the rest of them.\nfor (const post of posts.values().drop(10)) {\n  console.log(post);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Worker in JavaScript\nDESCRIPTION: Shows how to create a new Worker using a JavaScript module. This feature is experimental and requires enabling a Chrome flag.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/modules.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = new Worker('worker.mjs', { type: 'module' });\n```\n\n----------------------------------------\n\nTITLE: Checking for Undefined Using Static Root Address in C++\nDESCRIPTION: This snippet demonstrates how V8's IsUndefined API function can use a static root address to efficiently check if an object is undefined. It compares the object's pointer to a known constant address.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/static-roots.md#2025-04-10_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nbool Value::IsUndefined() const {\n  return reinterpret_cast<uintptr_t>(this) & 0xFF == 0x61;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Increment Operator Example\nDESCRIPTION: Example of a JavaScript operator token that the scanner needs to process.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/scanner.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n++\n```\n\n----------------------------------------\n\nTITLE: Modified JavaScript Function Definition\nDESCRIPTION: Example showing a modified version of add42 function that manipulates its parameter.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add42(x) {\n  x += 42;\n  return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation with Intl.NumberFormat\nDESCRIPTION: Shows how to format numbers using scientific notation with units.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/intl-numberformat.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = new Intl.NumberFormat('en', {\n  style: 'unit',\n  unit: 'meter-per-second',\n  notation: 'scientific',\n});\nformatter.format(299792458);\n// → '2.998E8 m/s'\n```\n\n----------------------------------------\n\nTITLE: Managing Effect Chains in TurboFan's JSNativeContextSpecialization\nDESCRIPTION: A C++ code snippet from TurboFan's JSNativeContextSpecialization phase, illustrating the complexity of manually managing multiple effect chains in the Sea of Nodes approach.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nJSNativeContextSpecialization::ReduceNamedAccess(...) {\n  Effect effect{...};\n  [...]\n  Node* receiverissmi_effect = effect;\n  [...]\n  Effect this_effect = effect;\n  [...]\n  this_effect = graph()->NewNode(common()->EffectPhi(2), this_effect,\n                                 receiverissmi_effect, this_control);\n  receiverissmi_effect = receiverissmi_control = nullptr;\n  [...]\n  effect = graph()->NewNode(common()->EffectPhi(control_count), ...);\n  [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating RegExp Behavior in JavaScript\nDESCRIPTION: This code snippet demonstrates a simple regular expression that matches any sequence of characters not including an underscore. It's used to illustrate the concept of bytecode peephole optimization in the RegExp interpreter.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/regexp-tier-up.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst re = /[^_]*/;\nconst str = 'a0b*c_ef';\nre.exec(str);\n// → matches 'a0b*c'\n```\n\n----------------------------------------\n\nTITLE: Configuring V8 Extras in GYP Build File\nDESCRIPTION: Example showing how to configure a GYP build file to include V8 extra library files in the project build process.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-extras.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'v8_extra_library_files': ['./Vec2.js']\n```\n\n----------------------------------------\n\nTITLE: Simple JavaScript Function Call Example\nDESCRIPTION: This code snippet shows a basic JavaScript function definition and call that is used to illustrate the internal execution flow in V8 when making function calls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/adaptor-frame.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add42(x) {\n  return x + 42;\n}\nadd42(3);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Intl.DisplayNames API usage in JavaScript\nDESCRIPTION: This snippet showcases the usage of the new Intl.DisplayNames API for displaying translated names of languages, regions, scripts, and currencies. It demonstrates creating instances for different locales and types, and using the 'of' method to get translated names.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-81.md#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst zhLanguageNames = new Intl.DisplayNames(['zh-Hant'], { type: 'language' });\nconst enRegionNames = new Intl.DisplayNames(['en'], { type: 'region' });\nconst itScriptNames = new Intl.DisplayNames(['it'], { type: 'script' });\nconst deCurrencyNames = new Intl.DisplayNames(['de'], {type: 'currency'});\n\nzhLanguageNames.of('fr');\n// → '法文'\nenRegionNames.of('US');\n// → 'United States'\nitScriptNames.of('Latn');\n// → 'latino'\ndeCurrencyNames.of('JPY');\n// → 'Japanischer Yen'\n```\n\n----------------------------------------\n\nTITLE: Running V8 Profiler with d8 Shell on Other Platforms\nDESCRIPTION: This command shows how to run the V8 profiler using the d8 shell on non-Windows platforms. It enables profiling and executes a JavaScript file, specifying the build architecture.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nout/ia32.release/d8 --prof script.js\n```\n\n----------------------------------------\n\nTITLE: Using IIFE Pattern in JavaScript\nDESCRIPTION: Example of an Immediately-Invoked Function Expression (IIFE) that forces the browser to compile the function immediately rather than lazily.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching-for-devs.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function foo() {\n  // …\n})();\n```\n\n----------------------------------------\n\nTITLE: Combining Optional Chaining and Nullish Coalescing in JavaScript\nDESCRIPTION: This snippet shows how optional chaining and nullish coalescing can be used together to handle nested properties and default values safely.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-80.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Component(props) {\n  const enable = props?.enabled ?? true;\n  // …\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Merge Script for V8 Release Branch\nDESCRIPTION: Command to run the automated merge script for merging a specific revision to a V8 release branch. This script facilitates the process of creating a merge CL.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/merge-patch.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://source.chromium.org/chromium/chromium/src/+/main:v8/tools/release/merge_to_branch_gerrit.py --branch 12.3 -r af3cf11\n```\n\n----------------------------------------\n\nTITLE: Processing V8 Profiler Log on Linux\nDESCRIPTION: This command processes the V8 profiler log file (v8.log) on Linux using the tick processor script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntools/linux-tick-processor v8.log\n```\n\n----------------------------------------\n\nTITLE: Example of Non-Deterministic Code Execution in JavaScript\nDESCRIPTION: Demonstrates a pattern that can reduce code caching effectiveness by using random conditional execution, where either function A() or B() is executed based on Math.random(). This creates non-deterministic execution paths that may impact cache optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/code-caching-for-devs.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (Math.random() > 0.5) {\n  A();\n} else {\n  B();\n}\n```\n\n----------------------------------------\n\nTITLE: StringsStorage GetEntry Method in V8\nDESCRIPTION: This C++ code snippet from V8's StringsStorage class shows the GetEntry method, which was identified as a performance bottleneck during heap snapshot generation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/speeding-up-v8-heap-snapshots.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n181 base::HashMap::Entry* StringsStorage::GetEntry(const char* str, int len) {\n182   uint32_t hash = ComputeStringHash(str, len);\n183   return names_.LookupOrInsert(const_cast<char*>(str), hash);\n184 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Pointer Decompression in C++ and x64 Assembly\nDESCRIPTION: A function that decompresses a 32-bit compressed pointer back to a 64-bit pointer. It first sign-extends the compressed value, left-shifts it to undo the compression operation, and then performs a bitwise AND with a specifically crafted base pointer.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/oilpan-pointer-compression.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvoid* Decompress(uint32_t compressed) {\n  uintptr_t intermediate =\n      (uintptr_t)((int32_t)compressed) << 1;\n  return (void*)(intermediate & base);\n}\n```\n\nLANGUAGE: asm\nCODE:\n```\nmovsxd rax, edi\nadd rax, rax\nand rax, qword ptr\n    [rip + base]\n```\n\n----------------------------------------\n\nTITLE: Using pprof for Visualization\nDESCRIPTION: How to use pprof to generate flame graphs or other visualizations from the profiling data.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Note: `-flame` is google-only, use `-web` as a public alternative:\npprof -flame perf_results/XXX_perf.data.jitted;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Parsing in V8 JavaScript Engine\nDESCRIPTION: This snippet illustrates how V8 handles parsing of nested functions. The outer function is fully parsed and compiled when called, while the inner function remains preparsed until it's needed.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/preparser.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// This is the top-level scope.\nfunction outer() {\n  // preparsed\n  function inner() {\n    // preparsed\n  }\n}\n\nouter(); // Fully parses and compiles `outer`, but not `inner`.\n```\n\n----------------------------------------\n\nTITLE: Forcing Re-optimization of TurboFan-optimized JavaScript Function\nDESCRIPTION: This code snippet forces re-optimization of the foo() function after deoptimization, demonstrating TurboFan's adaptive behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/hidden-classes.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Force reoptimization of foo().\nfoo(3);\n%OptimizeFunctionOnNextCall(foo);\nfoo(3);\n```\n\n----------------------------------------\n\nTITLE: Inefficient Pointer Decompression in x64 Assembly\nDESCRIPTION: An inefficient implementation of pointer decompression that uses two separate instructions: first loading the value and then sign-extending it. This implementation was later optimized to improve performance.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_6\n\nLANGUAGE: asm\nCODE:\n```\nmovl rax, <mem>   // load\nmovlsxlq rax, rax // sign extend\n```\n\n----------------------------------------\n\nTITLE: Profiling d8 with linux-perf-d8.py\nDESCRIPTION: Basic usage of the linux-perf-d8.py script to profile JavaScript execution with d8.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntools/profiling/linux-perf-d8.py out/x64.release/d8 path/to/test.js;\n```\n\n----------------------------------------\n\nTITLE: Example of Destructuring Assignment with Variable Reference\nDESCRIPTION: This example shows the first possible interpretation of the ambiguous code - a destructuring assignment that references the outer variable d. This demonstrates why the preparser needs to track variable references and declarations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/preparser.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(d) {\n  function g() {\n    const a = ({ d } = { d: 42 });\n    return a;\n  }\n  return g;\n}\n```\n\n----------------------------------------\n\nTITLE: Smi Object Property Updates\nDESCRIPTION: Shows efficient handling of small integer updates without boxing.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/react-cliff.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { x: 1 };\n// → no \"boxing\" for `x` in object\n\nobject.x += 1;\n// → update the value of `x` inside object\n```\n\n----------------------------------------\n\nTITLE: Proxy Object Setup for for-in Testing\nDESCRIPTION: Demonstrates setting up a Proxy object with traps for getPrototypeOf, ownKeys, and getOwnPropertyDescriptor to observe for-in behavior.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst proxy = new Proxy({ a: 1, b: 1},\n  {\n    getPrototypeOf(target) {\n    console.log('getPrototypeOf');\n    return null;\n  },\n  ownKeys(target) {\n    console.log('ownKeys');\n    return Reflect.ownKeys(target);\n  },\n  getOwnPropertyDescriptor(target, prop) {\n    console.log('getOwnPropertyDescriptor name=' + prop);\n    return Reflect.getOwnPropertyDescriptor(target, prop);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Exploring Linux Perf Results\nDESCRIPTION: Commands to analyze the profiling data using either perf report for text-based analysis or pprof for graphical visualizations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nperf report -i perf_results/XXX_perf.data.jitted\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Array Operations Example\nDESCRIPTION: Shows how handling arrays of different element kinds can lead to polymorphic operations and performance impact.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/elements-kinds.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst each = (array, callback) => {\n  for (let index = 0; index < array.length; ++index) {\n    const item = array[index];\n    callback(item);\n  }\n};\nconst doSomething = (item) => console.log(item);\n\neach([], () => {});\n\neach(['a', 'b', 'c'], doSomething);\neach([1.1, 2.2, 3.3], doSomething);\neach([1, 2, 3], doSomething);\n```\n\n----------------------------------------\n\nTITLE: Configuring .gclient File for iOS Cross-Compilation\nDESCRIPTION: Updates the .gclient configuration file to specify iOS as a target OS, which ensures the necessary tools for iOS cross-compilation are downloaded when running gclient sync.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/cross-compile-ios.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# [... other contents of .gclient such as the 'solutions' variable ...]\ntarget_os = ['ios']\n```\n\n----------------------------------------\n\nTITLE: Implementing for-in Loop Mechanics in V8 JavaScript Engine\nDESCRIPTION: Pseudo-C++ code demonstrating the three main steps of for-in implementation in V8: preparing keys to iterate over, getting the next key, and evaluating the for-in body. This shows how EnumCache is utilized for optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-for-in.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// For-In Prepare:\nFixedArray* keys = nullptr;\nMap* original_map = object->map();\nif (original_map->HasEnumCache()) {\n  if (object->HasNoElements()) {\n    keys = original_map->GetCachedEnumKeys();\n  } else {\n    keys = object->GetCachedEnumKeysWithElements();\n  }\n} else {\n  keys = object->GetEnumKeys();\n}\n\n// For-In Body:\nfor (size_t i = 0; i < keys->length(); i++) {\n  // For-In Next:\n  String* key = keys[i];\n  if (!object->HasProperty(key) continue;\n  EVALUATE_FOR_IN_BODY();\n}\n```\n\n----------------------------------------\n\nTITLE: Building V8 with Profiling Support\nDESCRIPTION: Sets the GN flag enable_profiling to true and builds V8 using Ninja to enable better symbolized C++ code for profiling.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/linux-perf.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho 'enable_profiling = true' >> out/x64.release/args.gn\nautoninja -C out/x64.release\n```\n\n----------------------------------------\n\nTITLE: V8 Register Allocation Example\nDESCRIPTION: Demonstration of how Maglev manages register allocation, showing the process of assigning values to machine registers or spilling them to stack memory. Values are tracked with their lifetimes to optimize register usage.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/maglev.md#2025-04-10_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\n; Example register allocation\nmov rax, [value1]    ; Load value into register\nadd rax, [value2]    ; Use register for computation\npush rax            ; Spill to stack if needed\n; Gap moves for phi nodes\nmov rbx, rax        ; Register-to-register move\n```\n\n----------------------------------------\n\nTITLE: WebAssembly Text Format (WAT) Representation\nDESCRIPTION: The WebAssembly text format output showing the compiled dot product function after using clang and wasm2wat.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/wasm-decompile.md#2025-04-10_snippet_1\n\nLANGUAGE: wasm\nCODE:\n```\n(func $dot (type 0) (param i32 i32) (result f32)\n  (f32.add\n    (f32.add\n      (f32.mul\n        (f32.load\n          (local.get 0))\n        (f32.load\n          (local.get 1)))\n      (f32.mul\n        (f32.load offset=4\n          (local.get 0))\n        (f32.load offset=4\n          (local.get 1))))\n    (f32.mul\n      (f32.load offset=8\n        (local.get 0))\n      (f32.load offset=8\n        (local.get 1)))))\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Governor for Benchmarking\nDESCRIPTION: Command to set CPU frequency scaling governor to performance mode for accurate benchmarking.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/benchmarks.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo tools/cpu.sh fast\n```\n\n----------------------------------------\n\nTITLE: Running d8 with Runtime Call Stats\nDESCRIPTION: Command to execute d8 (V8's debug shell) with runtime call stats enabled for collecting V8 metrics from the command line.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/rcs.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nd8 --runtime-call-stats foo.js\n```\n\n----------------------------------------\n\nTITLE: Block Coverage Example in JavaScript\nDESCRIPTION: Demonstrates a function where block coverage can detect that the else branch is never executed, while function coverage would only show that the function was called.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/javascript-code-coverage.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f(a) {\n  return a ? b : c;\n}\n\nf(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Int32Add1 to Wasm Compiler Implementation\nDESCRIPTION: This snippet shows how to update the WebAssembly graph builder to implement a new Int32Add1 operator, which will be used when the wasm opcode kExprI32Add1 is encountered during compilation.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/wasm-compiler.cc b/src/compiler/wasm-compiler.cc\nindex f666bbb7c1..1d93601584 100644\n--- a/src/compiler/wasm-compiler.cc\n+++ b/src/compiler/wasm-compiler.cc\n@@ -713,6 +713,8 @@ Node* WasmGraphBuilder::Unop(wasm::WasmOpcode opcode, Node* input,\n   const Operator* op;\n   MachineOperatorBuilder* m = mcgraph()->machine();\n   switch (opcode) {\n+    case wasm::kExprI32Add1:\n+      return graph()->NewNode(m->Int32Add1(), input);\n     case wasm::kExprI32Eqz:\n       op = m->Word32Equal();\n       return graph()->NewNode(op, input, mcgraph()->Int32Constant(0));\n```\n\n----------------------------------------\n\nTITLE: Running d8 with Tracing Enabled\nDESCRIPTION: This bash command shows how to execute the d8 JavaScript shell with tracing enabled, using a specific trace configuration file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/trace.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nd8 --enable-tracing --trace-config=traceconfig.json\n```\n\n----------------------------------------\n\nTITLE: Creating a simple JavaScript object with named properties\nDESCRIPTION: This snippet demonstrates creating a basic JavaScript object with two named properties. V8 handles these properties differently from array-indexed properties.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-properties.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{a: \"foo\", b: \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Adding Int32Add1 Declaration to Machine Operator Header\nDESCRIPTION: This change adds the declaration for the Int32Add1 operator method to the MachineOperatorBuilder class in the header file, allowing it to be used throughout the TurboFan compiler.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/webassembly-opcode.md#2025-04-10_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/src/compiler/machine-operator.h b/src/compiler/machine-operator.h\nindex a2b9fce0ee..f95e75a445 100644\n--- a/src/compiler/machine-operator.h\n+++ b/src/compiler/machine-operator.h\n@@ -265,6 +265,8 @@ class V8_EXPORT_PRIVATE MachineOperatorBuilder final\n   const Operator* Word32PairShr();\n   const Operator* Word32PairSar();\n \n+  const Operator* Int32Add1();\n+\n   const Operator* Int32Add();\n   const Operator* Int32AddWithOverflow();\n   const Operator* Int32Sub();\n```\n\n----------------------------------------\n\nTITLE: Installing additional build dependencies on Linux\nDESCRIPTION: This script installs additional build dependencies required for building V8 on Linux systems.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./build/install-build-deps.sh\n```\n\n----------------------------------------\n\nTITLE: Creating SunSpider Baseline\nDESCRIPTION: Example command for creating a baseline measurement for the SunSpider benchmark suite.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/benchmarks.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ test/benchmarks/csuite/csuite.py sunspider baseline out.gn/master/d8\nWrote ./_results/master.\nRun sunspider again with compare mode to see results.\n```\n\n----------------------------------------\n\nTITLE: Retrieving V8 API changes using Git\nDESCRIPTION: Command to list API changes between V8 versions 9.5 and 9.6 using Git log.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-96.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/9.5..branch-heads/9.6 include/v8*.h\n```\n\n----------------------------------------\n\nTITLE: Chained Assignment Example in JavaScript\nDESCRIPTION: This snippet demonstrates chained assignment in JavaScript, where multiple variables are assigned the same value in a single statement. The assignment operators associate right-to-left, so y gets assigned 5 first, then x gets assigned the result of that expression (which is 5).\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/extras/understanding-ecmascript-part-2-extra.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nx = y = 5;\nx; // 5\ny; // 5\n```\n\n----------------------------------------\n\nTITLE: Spread Elements with Additional Values in JavaScript\nDESCRIPTION: Example of spread syntax combined with additional array elements, which is optimized in V8 v7.2 when spread elements appear at the front of the array literal.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/spread-elements.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n[...x, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: Running V8 Profiler with d8 Shell on Windows\nDESCRIPTION: This command demonstrates how to run the V8 profiler using the d8 shell on Windows. It enables profiling with the --prof flag and executes a JavaScript file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild\\Release\\d8 --prof script.js\n```\n\n----------------------------------------\n\nTITLE: Checking V8 API Changes with Git\nDESCRIPTION: Command to view the API changes between V8 versions 8.6 and 8.7 in the include/v8.h file using git log.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-87.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/8.6..branch-heads/8.7 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Assignment Expression as Function Argument in JavaScript\nDESCRIPTION: This example shows how an assignment can be used as a function argument. When the function is called, the assignment is evaluated, assigning the value to the variable, and the result of the assignment expression becomes the argument value.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/extras/understanding-ecmascript-part-2-extra.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction simple(a) {\n  console.log('The argument was ' + a);\n}\nsimple(x = 1);\n// → Logs \"The argument was 1\".\nx;\n// → 1\n```\n\n----------------------------------------\n\nTITLE: Checking out V8 v5.4 branch using Git\nDESCRIPTION: This Git command allows developers with an active V8 checkout to experiment with the new features in V8 v5.4 by creating a new branch tracked to the remote 5.4 branch.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-54.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 5.4 -t branch-heads/5.4\n```\n\n----------------------------------------\n\nTITLE: Processing V8 Profiler Log on macOS\nDESCRIPTION: This command processes the V8 profiler log file (v8.log) on macOS using the tick processor script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/profile.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntools/mac-tick-processor v8.log\n```\n\n----------------------------------------\n\nTITLE: Git Command for V8 API Changes\nDESCRIPTION: Git command to view API changes between V8 versions 8.8 and 8.9 in the v8.h header file.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-89.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log branch-heads/8.8..branch-heads/8.9 include/v8.h\n```\n\n----------------------------------------\n\nTITLE: Operator Precedence Examples\nDESCRIPTION: Examples showing required explicit parentheses when combining nullish coalescing with other operators.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/nullish-coalescing.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Explicit parentheses groups are required to mix\n(lhs && middle) ?? rhs;\nlhs && (middle ?? rhs);\n\n(lhs ?? middle) && rhs;\nlhs ?? (middle && rhs);\n\n(lhs || middle) ?? rhs;\nlhs || (middle ?? rhs);\n\n(lhs ?? middle) || rhs;\nlhs ?? (middle || rhs);\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Iterators/Generators in JavaScript\nDESCRIPTION: Introduces the concept of async iterators and generators, which allow for more ergonomic iteration with asynchronous functions.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-63.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function* example() {\n  // Async iterator/generator implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Chrome with Clean Profile\nDESCRIPTION: Command to launch Chrome browser with a fresh user profile and disabled extensions for accurate performance measurement.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/rcs.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoogle-chrome --user-data-dir=\"$(mktemp -d)\" --disable-extensions\n```\n\n----------------------------------------\n\nTITLE: Checking Out V8 Version 7.4 for Development\nDESCRIPTION: Git command for developers with an active V8 checkout to create a new branch tracking V8 version 7.4 for experimentation with new features.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-74.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b 7.4 -t branch-heads/7.4\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page Front Matter in YAML\nDESCRIPTION: Front matter configuration for the 404 error page in YAML format. Sets the page title, permalink, site map exclusion flag, and layout template.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/404.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Document not found\npermalink: /404.html\nexcludeFromSitemap: true\nlayout: layouts/base.njk\n---\n```\n\n----------------------------------------\n\nTITLE: V8 Bytecode Implementation\nDESCRIPTION: Generated bytecode showing how V8 handles class field initialization with runtime calls.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/faster-class-features.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n// Load the private name symbol for `#a` into r1\nLdaImmutableCurrentContextSlot [2]\nStar r1\n\n// Load 0 into r2\nLdaZero\nStar r2\n\n// Move the target into r0\nMov <this>, r0\n\n// Use the %AddPrivateField() runtime function to store 0 as the value of\n// the property keyed by the private name symbol `#a` in the instance,\n// that is, `#a = 0`.\nCallRuntime [AddPrivateField], r0-r2\n\n// Load the property name `b` into r1\nLdaConstant [0]\nStar r1\n\n// Load the private name symbol for `#a`\nLdaImmutableCurrentContextSlot [2]\n\n// Load the value of the property keyed by `#a` from the instance into r2\nLdaKeyedProperty <this>, [0]\nStar r2\n\n// Move the target into r0\nMov <this>, r0\n\n// Use the %CreateDataProperty() runtime function to store the property keyed\n// by `#a` as the value of the property keyed by `b`, that is, `b = this.#a`\nCallRuntime [CreateDataProperty], r0-r2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Old JSON.stringify Behavior with Lone Surrogates in JavaScript\nDESCRIPTION: This snippet shows how JSON.stringify previously handled lone surrogate characters, producing ill-formed Unicode strings.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/well-formed-json-stringify.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nJSON.stringify('\\uD800');\n// → '\"�\"'\n```\n\n----------------------------------------\n\nTITLE: Compiling V8 source for x64 release\nDESCRIPTION: This command compiles the V8 source code for x64 architecture in release mode using the gm.py helper script.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntools/dev/gm.py x64.release\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository\nDESCRIPTION: Commands for keeping the local repository up-to-date with remote changes.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/source-code.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\ngclient sync\n```\n\n----------------------------------------\n\nTITLE: Enhanced Async Stack Trace Output with V8 Flag\nDESCRIPTION: This shows the improved stack trace output when using V8's --async-stack-traces flag, which includes the async call site information. The trace now shows that 'bar' was called from 'foo'.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n$ node --async-stack-traces index.js\nError: BEEP BEEP\n    at bar (index.js:8:9)\n    at process._tickCallback (internal/process/next_tick.js:68:7)\n    at Function.Module.runMain (internal/modules/cjs/loader.js:745:11)\n    at startup (internal/bootstrap/node.js:266:19)\n    at bootstrapNodeJSCore (internal/bootstrap/node.js:595:3)\n    at async foo (index.js:2:3)\n```\n\n----------------------------------------\n\nTITLE: Simple Memory Access Example in JavaScript\nDESCRIPTION: Code snippet demonstrating array memory access with conditional branching, used to illustrate effect edges in Sea of Nodes representation\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/leaving-the-sea-of-nodes.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet v = a[2];\nif (c) {\n  return v;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JIT-less Mode in V8\nDESCRIPTION: Command-line flag to start V8 in JIT-less mode, disabling runtime allocation of executable memory. This mode switches V8 to an interpreter-only execution model.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/jitless.md#2025-04-10_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n--jitless\n```\n\n----------------------------------------\n\nTITLE: Setting Merge Request Attributes in V8 Tracker\nDESCRIPTION: Example of setting the 'Merge-Request' attribute in the V8 tracker to indicate a merge request for a specific Chrome Milestone and hardware platforms.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/merge-patch.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMerge-Request: 123\nHW: MIPS,LoongArch64\n```\n\n----------------------------------------\n\nTITLE: Event-based Stream Processing with Callbacks\nDESCRIPTION: Traditional Node.js ReadableStream implementation using event listeners and callbacks for processing data chunks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/fast-async.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst http = require('http');\n\nhttp.createServer((req, res) => {\n  let body = '';\n  req.setEncoding('utf8');\n  req.on('data', (chunk) => {\n    body += chunk;\n  });\n  req.on('end', () => {\n    res.write(body);\n    res.end();\n  });\n}).listen(1337);\n```\n\n----------------------------------------\n\nTITLE: V8 FunctionTemplate Prototype Setup\nDESCRIPTION: Demonstrates setting up prototype methods in V8 using FunctionTemplate and connecting them to C++ callbacks.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nv8::Local<v8::FunctionTemplate> biketemplate = v8::FunctionTemplate::New(isolate);\nbiketemplate->PrototypeTemplate().Set(\n    v8::String::NewFromUtf8(isolate, \"wheels\"),\n    v8::FunctionTemplate::New(isolate, MyWheelsMethodCallback)->GetFunction()\n);\n```\n\n----------------------------------------\n\nTITLE: Comparing Branchless vs Branchful Decompression in Arm64 Assembly\nDESCRIPTION: Assembly code comparison of two pointer decompression techniques on Arm64 architecture. Both implementations use the same code size (16 bytes) but the branchful version showed better performance on powerful CPUs despite having a branch instruction.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_5\n\nLANGUAGE: asm\nCODE:\n```\nldur w6, […]\nsbfx x16, x6, #0, #1\nand x16, x16, x26\nadd x6, x16, w6, sxtw\n```\n\nLANGUAGE: asm\nCODE:\n```\nldur w6, […]\nsxtw x6, w6\ntbz w6, #0, #done\nadd x6, x26, x6\ndone:\n```\n\n----------------------------------------\n\nTITLE: Comparing Branchless vs Branchful Decompression in Arm64 Assembly\nDESCRIPTION: Assembly code comparison of two pointer decompression techniques on Arm64 architecture. Both implementations use the same code size (16 bytes) but the branchful version showed better performance on powerful CPUs despite having a branch instruction.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/pointer-compression.md#2025-04-10_snippet_5\n\nLANGUAGE: asm\nCODE:\n```\nldur w6, […]\nsbfx x16, x6, #0, #1\nand x16, x16, x26\nadd x6, x16, w6, sxtw\n```\n\nLANGUAGE: asm\nCODE:\n```\nldur w6, […]\nsxtw x6, w6\ntbz w6, #0, #done\nadd x6, x26, x6\ndone:\n```\n\n----------------------------------------\n\nTITLE: VSCode Workspace Configuration for cquery with V8\nDESCRIPTION: JSON configuration for setting up the cquery extension in VSCode when working with V8. It specifies the path to the cquery executable, the cache directory location, and blacklists certain directories from code completion.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/ide-setup.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"settings\": {\n  \"cquery.launch.command\": \"/home/YOURUSERNAME/cquery/build/release/bin/cquery\",\n  \"cquery.cacheDirectory\": \"/home/YOURUSERNAME/YOURV8CHECKOUTDIR/.vscode/cquery_cached_index/\",\n  \"cquery.completion.include.blacklist\": [\".*/.vscache/.*\", \"/tmp.*\", \"build/.*\"],\n  […]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Intl.supportedValuesOf in JavaScript\nDESCRIPTION: Demonstrates the new Intl.supportedValuesOf function that returns arrays of supported identifiers for various internationalization categories.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/v8-release-99.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nIntl.supportedValuesOf('calendar')\n// ['buddhist', 'chinese', 'coptic', 'dangi', ...]\n\nIntl.supportedValuesOf('collation')\n// ['big5han', 'compat', 'dict', 'emoji', ...]\n\nIntl.supportedValuesOf('currency')\n// ['ADP', 'AED', 'AFA', 'AFN', 'ALK', 'ALL', 'AMD', ...]\n\nIntl.supportedValuesOf('numberingSystem')\n// ['adlm', 'ahom', 'arab', 'arabext', 'bali', ...]\n\nIntl.supportedValuesOf('timeZone')\n// ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', ...]\n\nIntl.supportedValuesOf('unit')\n// ['acre', 'bit', 'byte', 'celsius', 'centimeter', ...]\n```\n\n----------------------------------------\n\nTITLE: Generated JavaScript Code from Object Literal Example\nDESCRIPTION: This shows the JavaScript code produced by the previous example, which evaluates to an equivalent object containing the LINE SEPARATOR and PARAGRAPH SEPARATOR characters.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\"LineTerminators\":\"\\n\\r  \"};\n```\n\n----------------------------------------\n\nTITLE: Copying ICU Data File\nDESCRIPTION: Command to copy required ICU data file for V8 execution\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp out.gn/x64.release.sample/icudtl.dat .\n```\n\n----------------------------------------\n\nTITLE: Running Octane Benchmark Comparison\nDESCRIPTION: Example of running Octane benchmark comparison with the --noopt flag to disable TurboFan optimization.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/benchmarks.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ test/benchmarks/csuite/csuite.py -r 1 octane compare out.gn/x64.release/d8 \\\n  -x \"--noopt\"\n```\n\n----------------------------------------\n\nTITLE: Exploiting Line Terminator Character for XSS\nDESCRIPTION: This code demonstrates how a U+2028 LINE SEPARATOR character can break out of a JavaScript comment and lead to an XSS attack, even with the JSON ⊂ ECMAScript proposal.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/features/subsume-json.md#2025-04-10_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  // Debug info:\n  // User-Agent: \"User-supplied string<U+2028>  alert('XSS');//\"\n</script>\n<!-- …is equivalent to: -->\n<script>\n  // Debug info:\n  // User-Agent: \"User-supplied string\n  alert('XSS');//\"\n</script>\n```\n\n----------------------------------------\n\nTITLE: Code Generator Assembly Code\nDESCRIPTION: Example of inserting a breakpoint in TurboFan's code generator\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid CodeGenerator::AssembleCode() {\n  // ...\n\n  // Check if we're optimizing, then look-up the name of the current function and\n  // insert a breakpoint.\n  if (info->IsOptimizing()) {\n    AllowHandleDereference allow_handle_dereference;\n    if (info->shared_info()->PassesFilter(\"add\")) {\n      tasm()->DebugBreak();\n    }\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: CSuite Benchmark Runner Usage\nDESCRIPTION: Basic syntax for running the CSuite benchmark tool, showing required parameters for benchmark type, mode, binary path, and optional flags.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/benchmarks.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntest/benchmarks/csuite/csuite.py\n    (sunspider | kraken | octane)\n    (baseline | compare)\n    <path to d8 binary>\n    [-x \"<optional extra d8 command-line flags>\"]\n```\n\n----------------------------------------\n\nTITLE: Listing available v8gen configurations\nDESCRIPTION: Shows all predefined configurations available through the v8gen helper script for generating V8 build files.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nv8gen list\n```\n\n----------------------------------------\n\nTITLE: Creating a shell alias for gm script in Bash\nDESCRIPTION: Sets up a shell alias for the gm.py helper script which is used to streamline the V8 build process by combining build file generation, compilation, and testing steps.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nalias gm=/path/to/v8/tools/dev/gm.py\n```\n\n----------------------------------------\n\nTITLE: Updating Node-CI DEPS File After PR Merge\nDESCRIPTION: Commands to update the DEPS file in node-ci after your Node.js fix has been merged, creating a CL to update the Node.js revision used.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/node-integration.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b update-deps\ngclient setdep --var=node_revision=<merged-commit-hash>\ngit add DEPS\ngit commit -m 'Update Node'\ngit cl upload\n```\n\n----------------------------------------\n\nTITLE: Creating a shell alias for v8gen script in Bash\nDESCRIPTION: Sets up a shell alias for the v8gen.py helper script which simplifies generating build files for common V8 configurations.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/build-gn.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nalias v8gen=/path/to/v8/tools/dev/v8gen.py\n```\n\n----------------------------------------\n\nTITLE: Sample Test JavaScript Code\nDESCRIPTION: Example JavaScript code showing function optimization\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/debug-arm.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Our optimized function.\nfunction add(a, b) {\n  return a + b;\n}\n\n// Typical cheat code enabled by --allow-natives-syntax.\n%PrepareFunctionForOptimization(add);\n\n// Give the optimizing compiler type feedback so it'll speculate `a` and `b` are\n// numbers.\nadd(1, 3);\n\n// And force it to optimize.\n%OptimizeFunctionOnNextCall(add);\nadd(5, 7);\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for native ninja binary\nDESCRIPTION: PATH configuration to use system's ninja binary instead of depot_tools version.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/compile-arm64.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:/path/to/depot_tools\n```\n\n----------------------------------------\n\nTITLE: Creating Array with Escapable Handle Scope in V8\nDESCRIPTION: Function demonstrating proper handle management in V8 using EscapableHandleScope to safely return a Local handle. Creates and populates a new array with three integer elements while properly managing handle scope lifecycle.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// This function returns a new array with three elements, x, y, and z.\nLocal<Array> NewPointArray(int x, int y, int z) {\n  v8::Isolate* isolate = v8::Isolate::GetCurrent();\n\n  // We will be creating temporary handles so we use a handle scope.\n  v8::EscapableHandleScope handle_scope(isolate);\n\n  // Create a new empty array.\n  v8::Local<v8::Array> array = v8::Array::New(isolate, 3);\n\n  // Return an empty result if there was an error creating the array.\n  if (array.IsEmpty())\n    return v8::Local<v8::Array>();\n\n  // Fill out the values\n  array->Set(0, Integer::New(isolate, x));\n  array->Set(1, Integer::New(isolate, y));\n  array->Set(2, Integer::New(isolate, z));\n\n  // Return the value through Escape.\n  return handle_scope.Escape(array);\n}\n```\n\n----------------------------------------\n\nTITLE: Building V8 Static Library\nDESCRIPTION: Command to build V8 static library on Linux 64-bit system using ninja\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/embed.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nninja -C out.gn/x64.release.sample v8_monolith\n```\n\n----------------------------------------\n\nTITLE: Running Local Code Coverage Analysis for V8 in Debug Mode\nDESCRIPTION: This command runs the gcov.sh script to collect code coverage for V8 in Debug mode on x64, arm, and arm64 architectures. It uses an environment variable to specify the build type.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/evaluate-code-coverage.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBUILD_TYPE=Debug ./tools/gcov.sh x64 arm arm64\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Tests in Node-CI\nDESCRIPTION: Commands to run gclient hooks and execute Node.js tests after updating V8 in the node-ci repository.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/node-integration.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngclient runhooks\nJOBS=`nproc` make test\n```\n\n----------------------------------------\n\nTITLE: Referencing Beta and Stable V8 Branch in Git\nDESCRIPTION: This snippet shows the Git reference format for Beta and Stable V8 branches. These branches are typically named with the major version number and are used for both Beta and Stable releases.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/release-process.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrefs/branch-heads/12.1\n```\n\n----------------------------------------\n\nTITLE: Generating New Bytecode Expectation Files\nDESCRIPTION: Creating a new golden file for bytecode expectations tests by using the generate-bytecode-expectations tool with specific input and output paths.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/docs/test.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nout/x64.release/generate-bytecode-expectations --raw-js testcase.js --output=test/cctest/interpreter/bytecode-expectations/testname.golden\n```\n\n----------------------------------------\n\nTITLE: Chrome Memory Tracking Flag\nDESCRIPTION: Command line flag for enabling V8 garbage collection statistics tracking in Chrome Canary\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/optimizing-v8-memory.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--track-gc-object-stats\n```\n\n----------------------------------------\n\nTITLE: Chrome Memory Stats Command Line Flag\nDESCRIPTION: Command line flag for enabling V8 heap statistics tracking in Chrome for memory optimization analysis\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/blog/optimizing-v8-memory.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--trace-gc-object-stats\n```\n\n----------------------------------------\n\nTITLE: Displaying No Feature Support Example\nDESCRIPTION: HTML markup showing when a feature has no support across any platform or environment.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/feature-support.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<feature-support chrome=\"no\"\n                 firefox=\"no\"\n                 safari=\"no\"\n                 nodejs=\"no\"\n                 babel=\"no\"></feature-support>\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Access for Web Crawlers in robots.txt\nDESCRIPTION: This robots.txt configuration allows all user agents (web crawlers and bots) to access the entire website. The wildcard '*' applies the rule to all bots that respect the robots.txt standard.\nSOURCE: https://github.com/v8/v8.dev/blob/main/src/robots.txt#2025-04-10_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\n```"
  }
]