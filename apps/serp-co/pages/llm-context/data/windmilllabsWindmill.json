[
  {
    "owner": "windmill-labs",
    "repo": "windmill",
    "content": "TITLE: Creating a TypeScript Script in Windmill\nDESCRIPTION: This is a sample TypeScript script for Windmill showing how to import dependencies, use typed resources, access environment variables, manage state, and return structured data. It demonstrates Windmill's core scripting capabilities including resource typing, environment access, and variable permissions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//import any dependency  from npm\nimport * as wmill from \"windmill-client\";\nimport * as cowsay from \"cowsay@1.5.0\";\n\n// fill the type, or use the +Resource type to get a type-safe reference to a resource\ntype Postgresql = {\n  host: string;\n  port: number;\n  user: string;\n  dbname: string;\n  sslmode: string;\n  password: string;\n};\n\nexport async function main(\n  a: number,\n  b: \"my\" | \"enum\",\n  c: Postgresql,\n  d = \"inferred type string from default arg\",\n  e = { nested: \"object\" }\n  //f: wmill.Base64\n) {\n  const email = process.env[\"WM_EMAIL\"];\n  // variables are permissioned and by path\n  let variable = await wmill.getVariable(\"f/company-folder/my_secret\");\n  const lastTimeRun = await wmill.getState();\n  // logs are printed and always inspectable\n  console.log(cowsay.say({ text: \"hello \" + email + \" \" + lastTimeRun }));\n  await wmill.setState(Date.now());\n\n  // return is serialized as JSON\n  return { foo: d, variable };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Types in TypeScript\nDESCRIPTION: A collection of utility type definitions for TypeScript, including Awaited, Partial, Required, Readonly, Pick, Record, Exclude, Extract, Omit, and NonNullable. These types provide common type transformations for TypeScript developers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Recursively unwraps the \"awaited type\" of a type. Non-promise \"thenables\" should resolve to `never`. This emulates the behavior of `await`.\n */\ntype Awaited<T> = T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode\n    T extends object & { then(onfulfilled: infer F, ...args: infer _): any; } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped\n        F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument\n            Awaited<V> : // recursively unwrap the value\n        never : // the argument to `then` was not callable\n    T; // non-object or non-thenable\n\ninterface ArrayLike<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n\n/**\n * Make all properties in T optional\n */\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * Make all properties in T required\n */\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n};\n\n/**\n * Make all properties in T readonly\n */\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * From T, pick a set of properties whose keys are in the union K\n */\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n/**\n * Construct a type with a set of properties K of type T\n */\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n/**\n * Exclude from T those types that are assignable to U\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\n/**\n * Extract from T those types that are assignable to U\n */\ntype Extract<T, U> = T extends U ? T : never;\n\n/**\n * Construct a type with the properties of T except for those in type K.\n */\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Exclude null and undefined from T\n */\ntype NonNullable<T> = T & {};\n```\n\n----------------------------------------\n\nTITLE: Defining ReadonlyArray and Array Method Signatures in TypeScript\nDESCRIPTION: TypeScript interface definitions for ReadonlyArray and Array types, specifying all standard array methods with their parameter types, return types, and detailed JSDoc documentation. Includes methods like lastIndexOf, every, some, forEach, map, filter, reduce, reduceRight for ReadonlyArray, and methods like toString, push, pop, concat, join, reverse, shift for Array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): this is readonly S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n\n    readonly [n: number]: T;\n```\n\n----------------------------------------\n\nTITLE: Declaring Global JavaScript Functions in TypeScript\nDESCRIPTION: This snippet declares global JavaScript functions such as eval, parseInt, parseFloat, isNaN, isFinite, and URI encoding/decoding functions. These declarations allow TypeScript to recognize and type-check these built-in JavaScript functions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_154\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function eval(x: string): any;\n\ndeclare function parseInt(s: string, radix?: number): number;\n\ndeclare function parseFloat(string: string): number;\n\ndeclare function isNaN(number: number): boolean;\n\ndeclare function isFinite(number: number): boolean;\n\ndeclare function decodeURI(encodedURI: string): string;\n\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\ndeclare function encodeURI(uri: string): string;\n\ndeclare function encodeURIComponent(uriComponent: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining ProcessEnv Interface with Windmill-specific Environment Variables\nDESCRIPTION: This code snippet defines the ProcessEnv interface, which extends Dict<string> and includes Windmill-specific environment variables. These variables are used in Windmill's execution environment to provide context and configuration for jobs and flows.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ProcessEnv extends Dict<string> {\n\t/**\n\t * Can be used to change the default timezone at runtime\n\t */\n\tTZ?: string\n\tWM_TOKEN: string\n\tWM_WORKSPACE: string\n\tWM_EMAIL: string\n\tWM_USERNAME: string\n\tWM_BASE_URL: string\n\tWM_JOB_ID: string\n\tWM_SCHEDULED_FOR: string\n\tWM_JOB_PATH: string\n\tWM_FLOW_JOB_ID: string\n\tWM_ROOT_FLOW_JOB_ID: string\n\tWM_FLOW_PATH: string\n\tWM_SCHEDULE_PATH: string\n\tWM_PERMISSIONED_AS: string\n\tWM_STATE_PATH: string\n\tWM_FLOW_STEP_ID: string\n\tWM_OBJECT_PATH: string\n\tWM_OIDC_JWT: string\n\tWM_WORKER_GROUP: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Math Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for Math object with various mathematical methods including logarithmic, hyperbolic, and numerical functions. Each method is documented with JSDoc comments explaining parameters and behavior.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_248\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Math {\n    /**\n     * Returns the number of leading zero bits in the 32-bit binary representation of a number.\n     * @param x A numeric expression.\n     */\n    clz32(x: number): number;\n\n    /**\n     * Returns the result of 32-bit multiplication of two numbers.\n     * @param x First number\n     * @param y Second number\n     */\n    imul(x: number, y: number): number;\n\n    /**\n     * Returns the sign of the x, indicating whether x is positive, negative or zero.\n     * @param x The numeric expression to test\n     */\n    sign(x: number): number;\n\n    /**\n     * Returns the base 10 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log10(x: number): number;\n\n    /**\n     * Returns the base 2 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log2(x: number): number;\n\n    /**\n     * Returns the natural logarithm of 1 + x.\n     * @param x A numeric expression.\n     */\n    log1p(x: number): number;\n\n    /**\n     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to\n     * subtracting 1 from the exponential function of x (e raised to the power of x, where e\n     * is the base of the natural logarithms).\n     * @param x A numeric expression.\n     */\n    expm1(x: number): number;\n\n    /**\n     * Returns the hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cosh(x: number): number;\n\n    /**\n     * Returns the hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sinh(x: number): number;\n\n    /**\n     * Returns the hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tanh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    acosh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    asinh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    atanh(x: number): number;\n\n    /**\n     * Returns the square root of the sum of squares of its arguments.\n     * @param values Values to compute the square root for.\n     *     If no arguments are passed, the result is +0.\n     *     If there is only one argument, the result is the absolute value.\n     *     If any argument is +Infinity or -Infinity, the result is +Infinity.\n     *     If any argument is NaN, the result is NaN.\n     *     If all arguments are either +0 or −0, the result is +0.\n     */\n    hypot(...values: number[]): number;\n\n    /**\n     * Returns the integral part of the a numeric expression, x, removing any fractional digits.\n     * If x is already an integer, the result is x.\n     * @param x A numeric expression.\n     */\n    trunc(x: number): number;\n\n    /**\n     * Returns the nearest single precision float representation of a number.\n     * @param x A numeric expression.\n     */\n    fround(x: number): number;\n\n    /**\n     * Returns an implementation-dependent approximation to the cube root of number.\n     * @param x A numeric expression.\n     */\n    cbrt(x: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Variable using Windmill Client SDK in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the Windmill Client SDK and use it to retrieve a variable from the Windmill API. It uses the 'getVariable' function to fetch a specific variable identified by its path.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/typescript-client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as wmill from 'windmill-client';\n\nawait wmill.getVariable('u/foo/my_variable')\n```\n\n----------------------------------------\n\nTITLE: Array Constructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Array constructor. Defines different constructor signatures for creating arrays with various parameters including length-based initialization and element-based initialization.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_179\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayConstructor {\n    new (arrayLength?: number): any[];\n    new <T>(arrayLength: number): T[];\n    new <T>(...items: T[]): T[];\n    (arrayLength?: number): any[];\n    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): boolean;\n    prototype: Array<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Windmill Python Client\nDESCRIPTION: Shows how to use the Windmill class directly for more advanced operations. Demonstrates client initialization, API interaction, state management, and asynchronous job execution and monitoring.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/python-client/wmill/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom wmill import Windmill\n\ndef main():\n    client = Windmill(\n        # token=...  <- this is optional. otherwise the client will look for the WM_TOKEN env var\n    )\n\n    # Get the current version of the client\n    client.version\n\n    # Get the current user\n    client.user\n    \n    # Convenience get and post methods exist for https://app.windmill.dev/openapi.html#/\n    # these are thin wrappers around the httpx library's get and post methods\n    # list worker groups\n    client.get(\"/configs/list_worker_groups\")\n    # create a group\n    client.post(\n        f\"/w/{client.workspace}/groups/create\",\n        json={\n            \"name\": \"my-group\",\n            \"summary\": \"my group summary\",\n        }\n    )\n    \n    # Get and set the state of the script\n    now = time.time()\n    client.state = {\"ts\": now}\n    assert client.state == {\"ts\": now}\n    \n    # Run a job asynchronously\n    job_id = client.run_script_async(path=\"path/to/script\")\n    # Get its status\n    client.get_job_status(job_id)\n    # Get its result\n    client.get_result(job_id)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with wmill_pg in Python\nDESCRIPTION: This snippet demonstrates how to use the wmill_pg package to execute an SQL UPDATE query with a RETURNING clause, and then iterate over the returned results. It showcases the basic usage pattern for database operations in Windmill.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/python-client/wmill_pg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport wmill_pg\n\n\ndef main():\n    my_list = query(\"UPDATE demo SET value = 'value' RETURNING key, value\")\n    for key, value in my_list:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the JSON object with detailed JSDoc comments for parse and stringify methods, including overloaded method signatures for different parameter combinations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_176\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JSON {\n    /**\n      * Converts a JavaScript Object Notation (JSON) string into an object.\n      * @param text A valid JSON string.\n      * @param reviver A function that transforms the results. This function is called for each member of the object. \n      * If a member contains nested objects, the nested objects are transformed before the parent object is. \n      */\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      */\n    stringify(value: any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer A function that transforms the results.\n      */\n    stringify(value: any, replacer: (key: string, value: any) => any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer Array that transforms the results.\n      */\n    stringify(value: any, replacer: any[]): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer A function that transforms the results.\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n      */\n    stringify(value: any, replacer: (key: string, value: any) => any, space: any): string;\n    /**\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n      * @param value A JavaScript value, usually an object or array, to be converted.\n      * @param replacer Array that transforms the results.\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n      */\n    stringify(value: any, replacer: any[], space: any): string;\n}\n/**\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n  */\ndeclare var JSON: JSON;\n```\n\n----------------------------------------\n\nTITLE: Defining Body Interface for Fetch API in TypeScript\nDESCRIPTION: Declares the Body interface used in the Fetch API for handling response bodies. Provides methods for consuming body content in various formats like JSON, text, blob, etc.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category Fetch API */\ndeclare interface Body {\n  /** A simple getter used to expose a `ReadableStream` of the body contents. */\n  readonly body: ReadableStream<Uint8Array> | null;\n  /** Stores a `Boolean` that declares whether the body has been used in a\n   * response yet.\n   */\n  readonly bodyUsed: boolean;\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with an `ArrayBuffer`.\n   */\n  arrayBuffer(): Promise<ArrayBuffer>;\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `Blob`.\n   */\n  blob(): Promise<Blob>;\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `FormData` object.\n   */\n  formData(): Promise<FormData>;\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with the result of parsing the body text as JSON.\n   */\n  json(): Promise<any>;\n  /** Takes a `Response` stream and reads it to completion. It returns a promise\n   * that resolves with a `USVString` (text).\n   */\n  text(): Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Interface in TypeScript\nDESCRIPTION: This snippet defines the Promise interface in TypeScript, including methods like then() and catch(). It also defines the PromiseConstructor interface with static methods like all(), race(), reject(), and resolve().\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_233\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Promise<T> {\n    then<TResult>(onfulfilled?: (value: T) => TResult | Promise<TResult>, onrejected?: (reason: any) => TResult | Promise<TResult>): Promise<TResult>;\n    catch(onrejected?: (reason: any) => T | Promise<T>): Promise<T>;\n}\n\ninterface PromiseConstructor {\n    prototype: Promise<any>;\n    new <T>(init: (resolve: (value?: T | Promise<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n    <T>(init: (resolve: (value?: T | Promise<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n    all<T>(values: (T | Promise<T>)[]): Promise<T[]>;\n    all(values: Promise<void>[]): Promise<void>;\n    race<T>(values: (T | Promise<T>)[]): Promise<T>;\n    reject(reason: any): Promise<void>;\n    reject<T>(reason: any): Promise<T>;\n    resolve<T>(value: T | Promise<T>): Promise<T>;\n    resolve(): Promise<void>;\n}\n\ndeclare var Promise: PromiseConstructor;\n```\n\n----------------------------------------\n\nTITLE: Object Constructor Interface Definition in TypeScript\nDESCRIPTION: Defines the type signatures for Object.values() and Object.entries() methods that return arrays of property values and key-value pairs respectively.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_239\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectConstructor {\n    values<T>(o: { [s: string]: T; } | ArrayLike<T>): T[];\n    values(o: {}): any[];\n    entries<T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][];\n    entries(o: {}): [string, any][];\n    getOwnPropertyDescriptors<T>(o: T): { [P in keyof T]: TypedPropertyDescriptor<T[P]>; } & { [x: string]: PropertyDescriptor; };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Full Windmill API Client in Go\nDESCRIPTION: Demonstrates how to import the full autogenerated OpenAPI client for Windmill. This provides complete access to all API endpoints but may be more verbose to use than the user-friendly client.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/go-client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport api \"github.com/windmill-labs/windmill-go-client/api\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Safe Asynchronous Pattern with nextTick in Node.js\nDESCRIPTION: This code snippet shows a better approach to handling async operations by ensuring consistent execution order. It uses Node.js's nextTick to guarantee asynchronous execution when needed, providing predictable behavior.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTick } from 'node:process';\n\nfunction definitelyAsync(arg, cb) {\n  if (arg) {\n    nextTick(cb);\n    return;\n  }\n\n  fs.stat('file', cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Headers Interface and Constructor in TypeScript\nDESCRIPTION: Declares the Headers interface for manipulating HTTP headers in requests and responses. Includes methods for getting, setting, appending, and deleting headers, plus a constructor declaration.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category Fetch API */\ndeclare type HeadersInit = Iterable<string[]> | Record<string, string>;\n\n/** This Fetch API interface allows you to perform various actions on HTTP\n * request and response headers. These actions include retrieving, setting,\n * adding to, and removing. A Headers object has an associated header list,\n * which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples). In all\n * methods of this interface, header names are matched by case-insensitive byte\n * sequence.\n *\n * @category Fetch API\n */\ndeclare interface Headers extends DomIterable<string, string> {\n  /** Appends a new value onto an existing header inside a `Headers` object, or\n   * adds the header if it does not already exist.\n   */\n  append(name: string, value: string): void;\n  /** Deletes a header from a `Headers` object. */\n  delete(name: string): void;\n  /** Returns a `ByteString` sequence of all the values of a header within a\n   * `Headers` object with a given name.\n   */\n  get(name: string): string | null;\n  /** Returns a boolean stating whether a `Headers` object contains a certain\n   * header.\n   */\n  has(name: string): boolean;\n  /** Sets a new value for an existing header inside a Headers object, or adds\n   * the header if it does not already exist.\n   */\n  set(name: string, value: string): void;\n  /** Returns an array containing the values of all `Set-Cookie` headers\n   * associated with a response.\n   */\n  getSetCookie(): string[];\n}\n\n/** This Fetch API interface allows you to perform various actions on HTTP\n * request and response headers. These actions include retrieving, setting,\n * adding to, and removing. A Headers object has an associated header list,\n * which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples). In all\n * methods of this interface, header names are matched by case-insensitive byte\n * sequence.\n *\n * @category Fetch API\n */\ndeclare var Headers: {\n  readonly prototype: Headers;\n  new (init?: HeadersInit): Headers;\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of Windmill Python Client\nDESCRIPTION: Illustrates advanced usage of the Windmill class, including client initialization, version and user information retrieval, API interaction, state management, and asynchronous job execution and monitoring.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/python-client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom wmill import Windmill\n\ndef main():\n    client = Windmill(\n        # token=...  <- this is optional. otherwise the client will look for the WM_TOKEN env var\n    )\n\n    # Get the current version of the client\n    client.version\n\n    # Get the current user\n    client.user\n    \n    # Convenience get and post methods exist for https://app.windmill.dev/openapi.html#/\n    # these are thin wrappers around the httpx library's get and post methods\n    # list worker groups\n    client.get(\"/configs/list_worker_groups\")\n    # create a group\n    client.post(\n        f\"/w/{client.workspace}/groups/create\",\n        json={\n            \"name\": \"my-group\",\n            \"summary\": \"my group summary\",\n        }\n    )\n    \n    # Get and set the state of the script\n    now = time.time()\n    client.state = {\"ts\": now}\n    assert client.state == {\"ts\": now}\n    \n    # Run a job asynchronously\n    job_id = client.run_script_async(path=\"path/to/script\")\n    # Get its status\n    client.get_job_status(job_id)\n    # Get its result\n    client.get_result(job_id)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Windmill Python Client\nDESCRIPTION: Demonstrates common operations using the top-level methods of the wmill package, including getting variables, running scripts synchronously, accessing resources, and managing script state.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/python-client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nimport wmill\n\n\ndef main():\n    # Get the value of a variable\n    wmill.get_variable(\"u/user/variable_path\")\n    \n    # Run a script synchronously and get the result\n    wmill.run_script(\"f/pathto/script\", args={\"arg1\": \"value1\"})\n    \n    # Get the value of a resource\n    wmill.get_resource(\"u/user/resource_path\")\n    \n    # Set the script's state\n    wmill.set_state({\"ts\": time.time()})\n    \n    # Get the script's state\n    wmill.get_state()\n```\n\n----------------------------------------\n\nTITLE: Fetch Function Declaration with Example in TypeScript\nDESCRIPTION: TypeScript declaration for the fetch function with JSDoc comments and a usage example. Includes tags for permission requirements and returns a Promise resolving to a Response object.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/** Fetch a resource from the network. It returns a `Promise` that resolves to the\n * `Response` to that `Request`, whether it is successful or not.\n *\n * ```ts\n * const response = await fetch(\"http://my.json.host/data.json\");\n * console.log(response.status);  // e.g. 200\n * console.log(response.statusText); // e.g. \"OK\"\n * const jsonData = await response.json();\n * ```\n *\n * @tags allow-net, allow-read\n * @category Fetch API\n */\ndeclare function fetch(\n  input: URL | Request | string,\n  init?: RequestInit,\n): Promise<Response>;\n```\n\n----------------------------------------\n\nTITLE: Defining Number Interface Methods in TypeScript\nDESCRIPTION: This snippet defines various methods for the Number interface, including isFinite, isInteger, isNaN, and isSafeInteger. It also defines constants like MAX_SAFE_INTEGER and MIN_SAFE_INTEGER.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_188\n\nLANGUAGE: TypeScript\nCODE:\n```\nEPSILON: number;\n\n/**\n  * Returns true if passed value is finite.\n  * Unlike the global isFininte, Number.isFinite doesn't forcibly convert the parameter to a \n  * number. Only finite values of the type number, result in true.\n  * @param number A numeric value.\n  */\nisFinite(number: number): boolean;\n\n/**\n  * Returns true if the value passed is an integer, false otherwise.\n  * @param number A numeric value.\n  */\nisInteger(number: number): boolean;\n\n/**\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a \n  * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\n  * to a number. Only values of the type number, that are also NaN, result in true.\n  * @param number A numeric value.\n  */\nisNaN(number: number): boolean;\n\n/**\n  * Returns true if the value passed is a safe integer.\n  * @param number A numeric value.\n  */\nisSafeInteger(number: number): boolean;\n\n/** \n  * The value of the largest integer n such that n and n + 1 are both exactly representable as \n  * a Number value. \n  * The value of Number.MIN_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n  */\nMAX_SAFE_INTEGER: number;\n\n/** \n  * The value of the smallest integer n such that n and n − 1 are both exactly representable as \n  * a Number value. \n  * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n  */\nMIN_SAFE_INTEGER: number;\n\n/**\n  * Converts a string to a floating-point number. \n  * @param string A string that contains a floating-point number. \n  */\nparseFloat(string: string): number;\n\n/**\n  * Converts A string to an integer.\n  * @param s A string to convert into a number.\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString. \n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n  * All other strings are considered decimal.\n  */\nparseInt(string: string, radix?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Promise Interface in TypeScript\nDESCRIPTION: Partial TypeScript interface definition for Promise, representing the completion of an asynchronous operation. Only the interface declaration and JSDoc comment are shown in this snippet.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_232\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n    * Attaches callbacks for the resolution and/or rejection of the Promise.\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Windmill Python Client\nDESCRIPTION: Demonstrates the most common operations using the wmill package's top-level methods. Shows how to get variables, run scripts synchronously, access resources, and manage script state.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/python-client/wmill/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nimport wmill\n\n\ndef main():\n    # Get the value of a variable\n    wmill.get_variable(\"u/user/variable_path\")\n    \n    # Run a script synchronously and get the result\n    wmill.run_script(\"f/pathto/script\", args={\"arg1\": \"value1\"})\n    \n    # Get the value of a resource\n    wmill.get_resource(\"u/user/resource_path\")\n    \n    # Set the script's state\n    wmill.set_state({\"ts\": time.time()})\n    \n    # Get the script's state\n    wmill.get_state()\n```\n\n----------------------------------------\n\nTITLE: Symbol Constructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Symbol constructor. Includes methods for creating and retrieving symbols, accessing the global symbol registry, and well-known symbol constants.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_182\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SymbolConstructor {\n    /** \n      * A reference to the prototype. \n      */\n    prototype: Symbol;\n\n    /**\n      * Returns a new unique Symbol value.\n      * @param  description Description of the new Symbol object.\n      */\n    (description?: string|number): Symbol;\n\n    /**\n      * Returns a Symbol object from the global symbol registry matching the given key if found. \n      * Otherwise, returns a new symbol with this key.\n      * @param key key to search for.\n      */\n    for(key: string): Symbol;\n\n    /**\n      * Returns a key from the global symbol registry matching the given Symbol if found. \n      * Otherwise, returns a undefined.\n      * @param sym Symbol to find the key for.\n      */\n    keyFor(sym: Symbol): string;\n\n    // Well-known Symbols\n\n    /** \n      * A method that determines if a constructor object recognizes an object as one of the \n      * constructor's instances. Called by the semantics of the instanceof operator. \n      */\n    hasInstance: Symbol;\n\n    /** \n      * A Boolean value that if true indicates that an object should flatten to its array elements\n      * by Array.prototype.concat.\n      */\n    isConcatSpreadable: Symbol;\n\n    /** \n      * A Boolean value that if true indicates that an object may be used as a regular expression. \n      */\n    isRegExp: Symbol;\n\n    /** \n      * A method that returns the default iterator for an object.Called by the semantics of the \n      * for-of statement. \n      */\n    iterator: Symbol;\n\n    /** \n      * A method that converts an object to a corresponding primitive value.Called by the ToPrimitive\n      * abstract operation. \n      */\n    toPrimitive: Symbol;\n\n    /** \n      * A String value that is used in the creation of the default string description of an object. \n      * Called by the built- in method Object.prototype.toString. \n      */\n    toStringTag: Symbol;\n\n    /** \n      * An Object whose own property names are property names that are excluded from the with \n      * environment bindings of the associated objects.\n      */\n    unscopables: Symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Backend with Docker\nDESCRIPTION: Commands to build and run the Windmill backend services using Docker and Docker Compose.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t windmill\ndocker compose up db windmill_server windmill_worker\n```\n\n----------------------------------------\n\nTITLE: Defining Request Types and Interfaces for Fetch API in TypeScript\nDESCRIPTION: Declares types and interfaces for HTTP requests in the Fetch API. Includes various request-related types like RequestCache, RequestMode, and RequestInit, which configures request options.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category Fetch API */\ndeclare type RequestInfo = Request | string;\n/** @category Fetch API */\ndeclare type RequestCache =\n  | \"default\"\n  | \"force-cache\"\n  | \"no-cache\"\n  | \"no-store\"\n  | \"only-if-cached\"\n  | \"reload\";\n/** @category Fetch API */\ndeclare type RequestCredentials = \"include\" | \"omit\" | \"same-origin\";\n/** @category Fetch API */\ndeclare type RequestMode = \"cors\" | \"navigate\" | \"no-cors\" | \"same-origin\";\n/** @category Fetch API */\ndeclare type RequestRedirect = \"error\" | \"follow\" | \"manual\";\n/** @category Fetch API */\ndeclare type ReferrerPolicy =\n  | \"\"\n  | \"no-referrer\"\n  | \"no-referrer-when-downgrade\"\n  | \"origin\"\n  | \"origin-when-cross-origin\"\n  | \"same-origin\"\n  | \"strict-origin\"\n  | \"strict-origin-when-cross-origin\"\n  | \"unsafe-url\";\n/** @category Fetch API */\ndeclare type BodyInit =\n  | Blob\n  | BufferSource\n  | FormData\n  | URLSearchParams\n  | ReadableStream<Uint8Array>\n  | string;\n/** @category Fetch API */\ndeclare type RequestDestination =\n  | \"\"\n  | \"audio\"\n  | \"audioworklet\"\n  | \"document\"\n  | \"embed\"\n  | \"font\"\n  | \"image\"\n  | \"manifest\"\n  | \"object\"\n  | \"paintworklet\"\n  | \"report\"\n  | \"script\"\n  | \"sharedworker\"\n  | \"style\"\n  | \"track\"\n  | \"video\"\n  | \"worker\"\n  | \"xslt\";\n\n/** @category Fetch API */\ndeclare interface RequestInit {\n  /**\n   * A BodyInit object or null to set request's body.\n   */\n  body?: BodyInit | null;\n  /**\n   * A string indicating how the request will interact with the browser's cache\n   * to set request's cache.\n   */\n  cache?: RequestCache;\n  /**\n   * A string indicating whether credentials will be sent with the request\n   * always, never, or only when sent to a same-origin URL. Sets request's\n   * credentials.\n   */\n  credentials?: RequestCredentials;\n  /**\n   * A Headers object, an object literal, or an array of two-item arrays to set\n   * request's headers.\n   */\n  headers?: HeadersInit;\n  /**\n   * A cryptographic hash of the resource to be fetched by request. Sets\n   * request's integrity.\n   */\n  integrity?: string;\n  /**\n   * A boolean to set request's keepalive.\n   */\n  keepalive?: boolean;\n  /**\n   * A string to set request's method.\n   */\n  method?: string;\n  /**\n   * A string to indicate whether the request will use CORS, or will be\n   * restricted to same-origin URLs. Sets request's mode.\n   */\n  mode?: RequestMode;\n  /**\n   * A string indicating whether request follows redirects, results in an error\n   * upon encountering a redirect, or returns the redirect (in an opaque\n   * fashion). Sets request's redirect.\n   */\n  redirect?: RequestRedirect;\n  /**\n   * A string whose value is a same-origin URL, \"about:client\", or the empty\n   * string, to set request's referrer.\n   */\n  referrer?: string;\n  /**\n   * A referrer policy to set request's referrerPolicy.\n   */\n  referrerPolicy?: ReferrerPolicy;\n  /**\n   * An AbortSignal to set request's signal.\n   */\n  signal?: AbortSignal | null;\n  /**\n   * Can only be null. Used to disassociate request from any Window.\n   */\n  window?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Data Interfaces\nDESCRIPTION: Interfaces for handling binary data through ArrayBuffer and DataView types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_197\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayBuffer {\n    byteLength: number;\n    slice(begin: number, end?: number): ArrayBuffer;\n}\n\ninterface DataView {\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    getFloat32(byteOffset: number, littleEndian: boolean): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ArrayConstructor with methods like from() and of(). These methods handle array creation from array-like objects, iterables, and from individual elements.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_246\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from<T>(arrayLike: ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of<T>(...items: T[]): T[];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables in TypeScript\nDESCRIPTION: Declares global JavaScript variables NaN and Infinity as number types. These declarations appear twice in the file due to reference tags between them.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var NaN: number;\ndeclare var Infinity: number;\n```\n\n----------------------------------------\n\nTITLE: Defining NumberConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for NumberConstructor with constants like EPSILON, MAX_SAFE_INTEGER, MIN_SAFE_INTEGER and methods for number validation and parsing. Each property and method includes detailed JSDoc comments.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_249\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberConstructor {\n    /**\n     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n     * that is representable as a Number value, which is approximately:\n     * 2.2204460492503130808472633361816 x 10‍−‍16.\n     */\n    readonly EPSILON: number;\n\n    /**\n     * Returns true if passed value is finite.\n     * Unlike the global isFinite, Number.isFinite doesn't forcibly convert the parameter to a\n     * number. Only finite values of the type number, result in true.\n     * @param number A numeric value.\n     */\n    isFinite(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is an integer, false otherwise.\n     * @param number A numeric value.\n     */\n    isInteger(number: unknown): boolean;\n\n    /**\n     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\n     * number). Unlike the global isNaN(), Number.isNaN() doesn't forcefully convert the parameter\n     * to a number. Only values of the type number, that are also NaN, result in true.\n     * @param number A numeric value.\n     */\n    isNaN(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is a safe integer.\n     * @param number A numeric value.\n     */\n    isSafeInteger(number: unknown): boolean;\n\n    /**\n     * The value of the largest integer n such that n and n + 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n     */\n    readonly MAX_SAFE_INTEGER: number;\n\n    /**\n     * The value of the smallest integer n such that n and n − 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n     */\n    readonly MIN_SAFE_INTEGER: number;\n\n    /**\n     * Converts a string to a floating-point number.\n     * @param string A string that contains a floating-point number.\n     */\n    parseFloat(string: string): number;\n\n    /**\n     * Converts A string to an integer.\n     * @param string A string to convert into a number.\n     * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n     * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n     * All other strings are considered decimal.\n     */\n    parseInt(string: string, radix?: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReadonlyArray Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ReadonlyArray, which provides array-like functionality without mutation methods. This interface defines properties and methods like length, toString, concat, join, slice, and indexOf for immutable array access.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadonlyArray<T> {\n    /**\n     * Gets the length of the array. This is a number one higher than the highest element defined in an array.\n     */\n    readonly length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Starting the Frontend Development Server\nDESCRIPTION: Command to start the Svelte development server for local frontend development.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Node.js process.allowedNodeEnvironmentFlags in JavaScript\nDESCRIPTION: This snippet demonstrates iterating through the allowedNodeEnvironmentFlags Set to view flags that can be used with NODE_OPTIONS environment variable. This provides a way to programmatically discover which flags are supported in the current Node.js environment.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nimport { allowedNodeEnvironmentFlags } from 'node:process';\n\nallowedNodeEnvironmentFlags.forEach((flag) => {\n  // -r\n  // --inspect-brk\n  // --abort_on_uncaught_exception\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding includes() Method to Array and TypedArray Interfaces in TypeScript\nDESCRIPTION: This snippet extends the Array, ReadonlyArray, and various TypedArray interfaces in TypeScript to include the includes() method for checking if an element exists in the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_235\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Array<T> {\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface ReadonlyArray<T> {\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface Int8Array {\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\n// Similar interfaces for Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array\n```\n\n----------------------------------------\n\nTITLE: Project Files Update Pattern for Component Addition\nDESCRIPTION: Structural pattern showing the sequence of files that need to be modified when adding a new component to the Windmill project. Includes components.ts for type definitions, sets.ts for menu categorization, quickStyleProperties.ts for styling, Component.svelte for rendering, and default-codes.ts for default behaviors.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/components/apps/editor/component/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. [**`components.ts`**](./components.ts):\n   1. Create a type for the new component and add it to the `AppComponent` union\n      type\n   1. Add the component to the `components` record\n1. [**`sets.ts`**](./sets.ts):\n   1. Add the component to one of the component sets: `layout`, `buttons`,\n      `inputs` or `display` _(this controls which group the component will be\n      placed in in the **Insert** menu)_\n1. [**`quickStyleProperties.ts`**](../componentsPanel/quickStyleProperties.ts):\n   1. Add the component to the `quickStyleProperties` record\n   1. _(optional)_ Add the CSS properties that could be applied to the component\n      parts\n1. [**`Component.svelte`**](./Component.svelte):\n   1. Add the new component in the Svelte `if` statement\n1. [**`default-codes.ts`**](./default-codes.ts):\n   1. _(optional)_ Add the default code associated with the new component to the\n      `DEFAULT_CODES` record\n```\n\n----------------------------------------\n\nTITLE: Collection Type Interfaces\nDESCRIPTION: Interfaces for Map, WeakMap, Set, and WeakSet collection types with their constructors and instance methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_196\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Map<K, V> {\n    clear(): void;\n    delete(key: K): boolean;\n    entries(): Iterator<[K, V]>;\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;\n    get(key: K): V;\n    has(key: K): boolean;\n    keys(): Iterator<K>;\n    set(key: K, value?: V): Map<K, V>;\n    size: number;\n    values(): Iterator<V>;\n}\n```\n\n----------------------------------------\n\nTITLE: Number Interface Methods in TypeScript\nDESCRIPTION: Definition of the Number interface in TypeScript, including methods for formatting numbers as strings and retrieving primitive values. Specifies methods like toString, toFixed, toExponential, and toPrecision.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Number {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns a string representing a number in fixed-point notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toFixed(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented in exponential notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toExponential(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n     */\n    toPrecision(precision?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Windmill in Bash\nDESCRIPTION: This snippet demonstrates how to install the sqlx-cli tool and run database migrations for the Windmill project. It sets up the database schema required for the application.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo install sqlx-cli\nenv DATABASE_URL=<YOUR_DATABASE_URL> sqlx migrate run\n```\n\n----------------------------------------\n\nTITLE: Defining Array Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for the Array type, specifying core properties like length and methods like toString, toLocaleString, pop, push, concat, join, reverse, and shift with their parameter types, return types, and JSDoc documentation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n\n```\n\n----------------------------------------\n\nTITLE: Symbol Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Symbol objects. Defines core methods like toString() and valueOf() that are available on Symbol instances.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_181\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Symbol {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    // [Symbol.toStringTag]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Interface and Constructor in TypeScript\nDESCRIPTION: TypeScript interface definition for the RegExp object and its constructor. Includes standard properties like ignoreCase and multiline, as well as non-standard extensions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_173\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegExpConstructor {\n    new (pattern: string, flags?: string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n    prototype: RegExp;\n\n    // Non-standard extensions\n    $1: string;\n    $2: string;\n    $3: string;\n    $4: string;\n    $5: string;\n    $6: string;\n    $7: string;\n    $8: string;\n    $9: string;\n    lastMatch: string;\n}\n\ndeclare var RegExp: RegExpConstructor;\n```\n\n----------------------------------------\n\nTITLE: Extending String, Number, and Date Interfaces with Localization Methods in TypeScript\nDESCRIPTION: This snippet extends the TypeScript interfaces for String, Number, and Date with localization methods such as localeCompare, toLocaleString, toLocaleDateString, and toLocaleTimeString. These methods allow for locale-specific string comparisons and formatting of numbers and dates.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_153\n\nLANGUAGE: typescript\nCODE:\n```\ninterface String {\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\n}\n\ninterface Number {\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Date {\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Atomics Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for atomic operations on shared memory arrays, including methods for atomic updates, comparisons, and thread synchronization.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_241\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Atomics {\n    add(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    and(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    compareExchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, expectedValue: number, replacementValue: number): number;\n    exchange(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    isLockFree(size: number): boolean;\n    load(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number): number;\n    or(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    store(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    sub(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    wait(typedArray: Int32Array, index: number, value: number, timeout?: number): \"ok\" | \"not-equal\" | \"timed-out\";\n    notify(typedArray: Int32Array, index: number, count?: number): number;\n    xor(typedArray: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array, index: number, value: number): number;\n    readonly [Symbol.toStringTag]: \"Atomics\";\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code from Prompt using YAML Configuration\nDESCRIPTION: YAML configuration for generating code from a prompt. Specifies the query type, description, and target programming language.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- type: gen\n  description: hello world\n  lang: python3\n```\n\n----------------------------------------\n\nTITLE: Defining Promise-related Types in TypeScript\nDESCRIPTION: TypeScript interface definitions for Promise and PromiseLike types. These interfaces define the structure and behavior of promises, including methods like then and catch for handling asynchronous operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface PromiseLike<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\n}\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Metrics from Windmill Job to Prometheus Gateway\nDESCRIPTION: Python script for a Windmill job that generates a random number and pushes it as a metric to Prometheus Gateway using the prometheus_client library.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/job-monitoring-prometheus/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport random\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\n\nPROMETHEUS_GATEWAY_URL = \"prometheus_gateway:9091\"\n\ndef main():\n    job_path = os.environ.get(\"WM_JOB_PATH\")\n    registry = CollectorRegistry()\n    gauge = Gauge(\n        \"job_records_processed\",\n        \"Number of records processed for {}\".format(job_path),\n        registry=registry,\n    )\n    val = random.randint(0, 100)\n    print(\"Storing metrics value: \", val)\n    gauge.set(val)\n    push_to_gateway(PROMETHEUS_GATEWAY_URL, job=job_path, registry=registry)\n```\n\n----------------------------------------\n\nTITLE: TypedArray Constructors Interface Definitions in TypeScript\nDESCRIPTION: Defines constructor interfaces for various TypedArray classes like Int8Array, Uint8Array, etc.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_243\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int8ArrayConstructor {\n    new (): Int8Array;\n}\n\ninterface Uint8ArrayConstructor {\n    new (): Uint8Array;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (): Uint8ClampedArray;\n}\n\ninterface Int16ArrayConstructor {\n    new (): Int16Array;\n}\n\ninterface Uint16ArrayConstructor {\n    new (): Uint16Array;\n}\n\ninterface Int32ArrayConstructor {\n    new (): Int32Array;\n}\n\ninterface Uint32ArrayConstructor {\n    new (): Uint32Array;\n}\n\ninterface Float32ArrayConstructor {\n    new (): Float32Array;\n}\n\ninterface Float64ArrayConstructor {\n    new (): Float64Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Interface Methods in TypeScript\nDESCRIPTION: Contains TypeScript interface definitions for several Array methods including findIndex, fill, copyWithin, and toLocaleString. Each method is documented with JSDoc comments explaining parameters and behavior.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_245\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: T, start?: number, end?: number): this;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;\n```\n\n----------------------------------------\n\nTITLE: Fetch API Request Interface and Constructor Declaration in TypeScript\nDESCRIPTION: TypeScript declarations for the Request interface and constructor in the Fetch API. Defines properties such as cache, credentials, headers, method, referrer, and more.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/** This Fetch API interface represents a resource request.\n *\n * @category Fetch API\n */\ndeclare var Request: {\n  readonly prototype: Request;\n  new (input: RequestInfo | URL, init?: RequestInit): Request;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetch API Response Interface Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the Response interface in the Fetch API, defining its properties like headers, status, and type, as well as methods like clone().\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/** This Fetch API interface represents the response to a request.\n *\n * @category Fetch API\n */\ndeclare interface Response extends Body {\n  readonly headers: Headers;\n  readonly ok: boolean;\n  readonly redirected: boolean;\n  readonly status: number;\n  readonly statusText: string;\n  readonly type: ResponseType;\n  readonly url: string;\n  clone(): Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Windmill Client Usage in Go\nDESCRIPTION: Provides examples of retrieving resources and variables from the Windmill platform using the Go client. These operations show how to reference user-specific resources with the format 'u/username/resourcename'.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/go-client/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\na, _ := wmill.GetResource(\"u/ruben-user/test\")\na, _ := wmill.GetVariable(\"u/ruben-user/test\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Code Based on Prompt using YAML Configuration\nDESCRIPTION: YAML configuration for modifying existing code based on a prompt. Includes the query type, description, target language, and the code to be modified.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/README.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- type: edit\n  description: comment\n  lang: python3\n  code: |-\n    print(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Array Interface Extension in TypeScript\nDESCRIPTION: Adds the find method to the Array interface for finding elements that match a predicate function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_244\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Array<T> {\n    find<S extends T>(predicate: (value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending DateConstructor Interface in TypeScript\nDESCRIPTION: This snippet extends the DateConstructor interface to include the UTC() method for creating a date object based on UTC time.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_237\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DateConstructor {\n    UTC(year: number, monthIndex?: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Interface and RegExpMatchArray in TypeScript\nDESCRIPTION: TypeScript interface definitions for RegExp, RegExpMatchArray, and RegExpExecArray. These interfaces define the shape and behavior of regular expression objects and their match results in JavaScript.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegExpMatchArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index?: number;\n    /**\n     * A copy of the search string.\n     */\n    input?: string;\n    /**\n     * The first match. This will always be present because `null` will be returned if there are no matches.\n     */\n    0: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index: number;\n    /**\n     * A copy of the search string.\n     */\n    input: string;\n    /**\n     * The first match. This will always be present because `null` will be returned if there are no matches.\n     */\n    0: string;\n}\n\ninterface RegExp {\n    /**\n     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n     * @param string The String object or string literal on which to perform the search.\n     */\n    exec(string: string): RegExpExecArray | null;\n\n    /**\n     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n     * @param string String on which to perform the search.\n     */\n    test(string: string): boolean;\n\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\n    readonly source: string;\n\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    readonly global: boolean;\n\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n    readonly ignoreCase: boolean;\n\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n    readonly multiline: boolean;\n\n    lastIndex: number;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    compile(pattern: string, flags?: string): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Function objects. Includes methods like toMethod() and properties like name that are available on all function objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_186\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Function {\n    /** \n      * Returns a new function object that is identical to the argument object in all ways except \n      * for its identity and the value of its HomeObject internal slot. \n      */\n    toMethod(newHome: Object): Function;\n\n    /**\n      * Returns the name of the function. Function names are read-only and can not be changed.\n      */\n    name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Int16Array Interface Methods and Properties Definition in TypeScript\nDESCRIPTION: Comprehensive TypeScript interface definition for Int16Array including array manipulation methods, iterators, and numeric operations. Contains detailed JSDoc documentation for each method describing parameters, behavior and return values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_209\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int16Array {\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    keys(): Iterator<number>;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    length: number;\n    map(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue?: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n    reverse(): Int16Array;\n    set(index: number, value: number): void;\n    set(array: Int16Array, offset?: number): void;\n    slice(start?: number, end?: number): Int16Array;\n    some(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): Int16Array;\n    subarray(begin: number, end?: number): Int16Array;\n    toLocaleString(): string;\n    toString(): string;\n    values(): Iterator<number>;\n    [index: number]: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Methods Interfaces in TypeScript\nDESCRIPTION: TypeScript interface definitions for common array methods including map, filter, reduce, and reduceRight. These definitions specify the callback function signatures and return types for array iteration methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_178\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n\n/**\n  * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n  * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array. \n  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n  */\nmap<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n\n/**\n  * Returns the elements of an array that meet the condition specified in a callback function. \n  * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array. \n  * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n  */\nfilter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\n\n/**\n  * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n  */\nreduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n/**\n  * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n  */\nreduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n/** \n  * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \n  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n  */\nreduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\n/** \n  * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \n  * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n  */\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n[n: number]: T;\n```\n\n----------------------------------------\n\nTITLE: Date Interface in TypeScript\nDESCRIPTION: Beginning of the TypeScript interface definition for the Date object, which handles storage and manipulation of dates and times. Only the interface declaration is shown in this snippet.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n```\n\n----------------------------------------\n\nTITLE: Math Interface in TypeScript\nDESCRIPTION: Defines the Math interface with mathematical constants and functions like trigonometric operations, rounding, random number generation, and other mathematical calculations. This interface provides core mathematical functionality.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_167\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Math {\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\n    E: number;\n    /** The natural logarithm of 10. */\n    LN10: number;\n    /** The natural logarithm of 2. */\n    LN2: number;\n    /** The base-2 logarithm of e. */\n    LOG2E: number;\n    /** The base-10 logarithm of e. */\n    LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    SQRT1_2: number;\n    /** The square root of 2. */\n    SQRT2: number;\n    /**\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative). \n      * For example, the absolute value of -5 is the same as the absolute value of 5.\n      * @param x A numeric expression for which the absolute value is needed.\n      */\n    abs(x: number): number;\n    /**\n      * Returns the arc cosine (or inverse cosine) of a number. \n      * @param x A numeric expression.\n      */\n    acos(x: number): number;\n    /** \n      * Returns the arcsine of a number. \n      * @param x A numeric expression.\n      */\n    asin(x: number): number;\n    /**\n      * Returns the arctangent of a number. \n      * @param x A numeric expression for which the arctangent is needed.\n      */\n    atan(x: number): number;\n    /**\n      * Returns the angle (in radians) from the X axis to a point (y,x).\n      * @param y A numeric expression representing the cartesian y-coordinate.\n      * @param x A numeric expression representing the cartesian x-coordinate.\n      */\n    atan2(y: number, x: number): number;\n    /**\n      * Returns the smallest number greater than or equal to its numeric argument. \n      * @param x A numeric expression.\n      */\n    ceil(x: number): number;\n    /**\n      * Returns the cosine of a number. \n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    cos(x: number): number;\n    /**\n      * Returns e (the base of natural logarithms) raised to a power. \n      * @param x A numeric expression representing the power of e.\n      */\n    exp(x: number): number;\n    /**\n      * Returns the greatest number less than or equal to its numeric argument. \n      * @param x A numeric expression.\n      */\n    floor(x: number): number;\n    /**\n      * Returns the natural logarithm (base e) of a number. \n      * @param x A numeric expression.\n      */\n    log(x: number): number;\n    /**\n      * Returns the larger of a set of supplied numeric expressions. \n      * @param values Numeric expressions to be evaluated.\n      */\n    max(...values: number[]): number;\n    /**\n      * Returns the smaller of a set of supplied numeric expressions. \n      * @param values Numeric expressions to be evaluated.\n      */\n    min(...values: number[]): number;\n    /**\n      * Returns the value of a base expression taken to a specified power. \n      * @param x The base value of the expression.\n      * @param y The exponent value of the expression.\n      */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */\n    random(): number;\n    /** \n      * Returns a supplied numeric expression rounded to the nearest number.\n      * @param x The value to be rounded to the nearest number.\n      */\n    round(x: number): number;\n    /**\n      * Returns the sine of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    sin(x: number): number;\n    /**\n      * Returns the square root of a number.\n      * @param x A numeric expression.\n      */\n    sqrt(x: number): number;\n    /**\n      * Returns the tangent of a number.\n      * @param x A numeric expression that contains an angle measured in radians.\n      */\n    tan(x: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Code with Error using YAML Configuration\nDESCRIPTION: YAML configuration for fixing code given an error. Specifies the query type, target language, code to be fixed, and the error message.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/README.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- type: fix\n  lang: python3\n  code: |-\n    def main():\n        return 3 / 0\n  error: division by zero\n```\n\n----------------------------------------\n\nTITLE: Defining FormData Interface and Constructor in TypeScript\nDESCRIPTION: Declares the FormData interface that extends DomIterable for handling form data in requests. Includes methods for manipulating form entries and a constructor declaration.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category Fetch API */\ndeclare type FormDataEntryValue = File | string;\n\n/** Provides a way to easily construct a set of key/value pairs representing\n * form fields and their values, which can then be easily sent using the\n * XMLHttpRequest.send() method. It uses the same format a form would use if the\n * encoding type were set to \"multipart/form-data\".\n *\n * @category Fetch API\n */\ndeclare interface FormData extends DomIterable<string, FormDataEntryValue> {\n  append(name: string, value: string | Blob, fileName?: string): void;\n  delete(name: string): void;\n  get(name: string): FormDataEntryValue | null;\n  getAll(name: string): FormDataEntryValue[];\n  has(name: string): boolean;\n  set(name: string, value: string | Blob, fileName?: string): void;\n}\n\n/** @category Fetch API */\ndeclare var FormData: {\n  readonly prototype: FormData;\n  new (): FormData;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining String Interface Methods in TypeScript\nDESCRIPTION: This snippet defines various methods for the String interface, including codePointAt, contains, endsWith, normalize, repeat, startsWith, and several HTML-related methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_191\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface String {\n    /** Iterator */\n    // [Symbol.iterator] (): Iterator<string>;\n\n    /**\n      * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point \n      * value of the UTF-16 encoded code point starting at the string element at position pos in \n      * the String resulting from converting this object to a String. \n      * If there is no element at that position, the result is undefined. \n      * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n      */\n    codePointAt(pos: number): number;\n\n    /**\n      * Returns true if searchString appears as a substring of the result of converting this \n      * object to a String, at one or more positions that are \n      * greater than or equal to position; otherwise, returns false.\n      * @param searchString search string \n      * @param position If position is undefined, 0 is assumed, so as to search all of the String.\n      */\n    contains(searchString: string, position?: number): boolean;\n\n    /**\n      * Returns true if the sequence of elements of searchString converted to a String is the \n      * same as the corresponding elements of this object (converted to a String) starting at \n      * endPosition – length(this). Otherwise returns false.\n      */\n    endsWith(searchString: string, endPosition?: number): boolean;\n\n    /**\n      * Returns the String value result of normalizing the string into the normalization form \n      * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n      * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\n      * is \"NFC\"\n      */\n    normalize(form?: string): string;\n\n    /**\n      * Returns a String value that is made from count copies appended together. If count is 0, \n      * T is the empty String is returned.\n      * @param count number of copies to append\n      */\n    repeat(count: number): string;\n\n    /**\n      * Returns true if the sequence of elements of searchString converted to a String is the \n      * same as the corresponding elements of this object (converted to a String) starting at \n      * position. Otherwise returns false.\n      */\n    startsWith(searchString: string, position?: number): boolean;\n\n    /**\n      * Returns an <a> HTML anchor element and sets the name attribute to the text value\n      * @param name\n      */\n    anchor(name: string): string;\n\n    /** Returns a <big> HTML element */\n    big(): string;\n\n    /** Returns a <blink> HTML element */\n    blink(): string;\n\n    /** Returns a <b> HTML element */\n    bold(): string;\n\n    /** Returns a <tt> HTML element */\n    fixed(): string\n\n    /** Returns a <font> HTML element and sets the color attribute value */\n    fontcolor(color: string): string\n\n    /** Returns a <font> HTML element and sets the size attribute value */\n    fontsize(size: number): string;\n\n    /** Returns a <font> HTML element and sets the size attribute value */\n    fontsize(size: string): string;\n\n    /** Returns an <i> HTML element */\n    italics(): string;\n\n    /** Returns an <a> HTML element and sets the href attribute value */\n    link(url: string): string;\n\n    /** Returns a <small> HTML element */\n    small(): string;\n\n    /** Returns a <strike> HTML element */\n    strike(): string;\n\n    /** Returns a <sub> HTML element */\n    sub(): string;\n\n    /** Returns a <sup> HTML element */\n    sup(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReadonlyArray Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for ReadonlyArray methods including find, findIndex, and toLocaleString. These methods allow for searching elements in read-only arrays and formatting them.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_252\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReadonlyArray<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (value: T, index: number, obj: readonly T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): number;\n\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials for Terraform\nDESCRIPTION: Example of how to add AWS credentials to the ~/.aws/credentials file for Terraform to use when deploying to AWS. The credentials should belong to a user with AdministratorAccess permissions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/aws-ecs-terraform/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[terraform]\naws_access_key_id = <ACCESS_KEY_ID>\naws_secret_access_key = <SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Defining String Interface Methods in TypeScript\nDESCRIPTION: This snippet defines various methods for the String interface in TypeScript, including toString, charAt, charCodeAt, concat, indexOf, lastIndexOf, localeCompare, match, replace, search, and slice. Each method is documented with its purpose and parameters.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\ninterface String {\n    toString(): string;\n    charAt(pos: number): string;\n    charCodeAt(index: number): number;\n    concat(...strings: string[]): string;\n    indexOf(searchString: string, position?: number): number;\n    lastIndexOf(searchString: string, position?: number): number;\n    localeCompare(that: string): number;\n    match(regexp: string): RegExpMatchArray;\n    match(regexp: RegExp): RegExpMatchArray;\n    replace(searchValue: string, replaceValue: string): string;\n    replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;\n    replace(searchValue: RegExp, replaceValue: string): string;\n    replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;\n    search(regexp: string): number;\n    search(regexp: RegExp): number;\n    slice(start?: number, end?: number): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int32Array Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Int32Array, including properties like BYTES_PER_ELEMENT, buffer, byteLength, and byteOffset. It also defines various array methods such as copyWithin, every, fill, filter, find, findIndex, forEach, indexOf, join, lastIndexOf, map, and reduce.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int32Array {\n    readonly BYTES_PER_ELEMENT: number;\n    readonly buffer: ArrayBufferLike;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(predicate: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(predicate: (value: number, index: number, array: Int32Array) => any, thisArg?: any): Int32Array;\n    find(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: Int32Array) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    readonly length: number;\n    map(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectConstructor Interface in TypeScript\nDESCRIPTION: Type definition for the ObjectConstructor interface which provides static methods for object manipulation including creation, property definition, and object state inspection.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectConstructor {\n    new (value?: any): Object;\n    (): any;\n    (value: any): any;\n\n    /** A reference to the prototype for a class of objects. */\n    readonly prototype: Object;\n\n    /**\n     * Returns the prototype of an object.\n     * @param o The object that references the prototype.\n     */\n    getPrototypeOf(o: any): any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\n     * @param o Object that contains the property.\n     * @param p Name of the property.\n     */\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\n\n    /**\n     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n     * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\n     * @param o Object that contains the own properties.\n     */\n    getOwnPropertyNames(o: any): string[];\n\n    /**\n     * Creates an object that has the specified prototype or that has null prototype.\n     * @param o Object to use as a prototype. May be null.\n     */\n    create(o: object | null): any;\n\n    /**\n     * Creates an object that has the specified prototype, and that optionally contains specified properties.\n     * @param o Object to use as a prototype. May be null\n     * @param properties JavaScript object that contains one or more property descriptors.\n     */\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n     * @param p The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    defineProperty<T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): T;\n\n    /**\n     * Adds one or more properties to an object, and/or modifies attributes of existing properties.\n     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n     */\n    defineProperties<T>(o: T, properties: PropertyDescriptorMap & ThisType<any>): T;\n\n    /**\n     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    seal<T>(o: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param f Object on which to lock the attributes.\n     */\n    freeze<T extends Function>(f: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param o Object to make non-extensible.\n     */\n    preventExtensions<T>(o: T): T;\n\n    /**\n     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isSealed(o: any): boolean;\n\n    /**\n     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isFrozen(o: any): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param o Object to test.\n     */\n    isExtensible(o: any): boolean;\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: object): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Interface Methods in TypeScript\nDESCRIPTION: This snippet defines various methods for the Array interface, including entries, keys, values, find, findIndex, fill, and copyWithin. It also defines the ArrayLike interface for array-like objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_189\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ArrayLike<T> {\n    length: number;\n    [n: number]: T;\n}\n\ninterface Array<T> {\n    /** Iterator */\n    // [Symbol.iterator] (): Iterator<T>;\n\n    /** \n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): Iterator<[number, T]>;\n\n    /** \n      * Returns an list of keys in the array\n      */\n    keys(): Iterator<number>;\n\n    /** \n      * Returns an list of values in the array\n      */\n    values(): Iterator<T>;\n\n    /** \n      * Returns the value of the first element in the array where predicate is true, and undefined \n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending \n      * order, until it finds one where predicate returns true. If such an element is found, find \n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of \n      * predicate. If it is not provided, undefined is used instead.\n      */\n    find(predicate: (value: T, index: number, obj: Array<T>) => boolean, thisArg?: any): T;\n\n    /** \n      * Returns the index of the first element in the array where predicate is true, and undefined \n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending \n      * order, until it finds one where predicate returns true. If such an element is found, find \n      * immediately returns that element value. Otherwise, find returns undefined.\n      * @param thisArg If provided, it will be used as the this value for each invocation of \n      * predicate. If it is not provided, undefined is used instead.\n      */\n    findIndex(predicate: (value: T) => boolean, thisArg?: any): number;\n\n    /**\n      * Returns the this object after filling the section identified by start and end with value\n      * @param value value to fill array section with\n      * @param start index to start filling the array at. If start is negative, it is treated as \n      * length+start where length is the length of the array. \n      * @param end index to stop filling the array at. If end is negative, it is treated as \n      * length+end.\n      */\n    fill(value: T, start?: number, end?: number): T[];\n\n    /** \n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the \n      * length of the array. \n      * @param start If start is negative, it is treated as length+start. If end is negative, it \n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value. \n      */\n    copyWithin(target: number, start: number, end?: number): T[];\n}\n```\n\n----------------------------------------\n\nTITLE: Windmill Process Environment Variables Type Definitions in TypeScript\nDESCRIPTION: TypeScript declarations for Windmill-specific environment variables available through the process.env object, including token, workspace, base URL, and job-related information.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var process: Process\n\ninterface Process {\n    env: {\n      WM_TOKEN: string;\n      WM_WORKSPACE: string;\n      WM_EMAIL: string;\n      WM_USERNAME: string;\n      WM_BASE_URL: string;\n      WM_JOB_ID: string;\n      WM_SCHEDULED_FOR: string;\n      WM_JOB_PATH: string;\n      WM_FLOW_JOB_ID: string;\n      WM_ROOT_FLOW_JOB_ID: string;\n      WM_FLOW_PATH: string;\n      WM_SCHEDULE_PATH: string;\n      WM_PERMISSIONED_AS: string;\n      WM_STATE_PATH: string;\n      WM_FLOW_STEP_ID: string;\n      WM_OBJECT_PATH: string;\n      WM_OIDC_JWT: string;\n      WM_WORKER_GROUP: string;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Subtype Interfaces in TypeScript\nDESCRIPTION: TypeScript interface definitions for various Error subtypes (EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError) and their constructors.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_175\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor {\n    new (message?: string): EvalError;\n    (message?: string): EvalError;\n    prototype: EvalError;\n}\n\ndeclare var EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor {\n    new (message?: string): RangeError;\n    (message?: string): RangeError;\n    prototype: RangeError;\n}\n\ndeclare var RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor {\n    new (message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    prototype: ReferenceError;\n}\n\ndeclare var ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor {\n    new (message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    prototype: SyntaxError;\n}\n\ndeclare var SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor {\n    new (message?: string): TypeError;\n    (message?: string): TypeError;\n    prototype: TypeError;\n}\n\ndeclare var TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor {\n    new (message?: string): URIError;\n    (message?: string): URIError;\n    prototype: URIError;\n}\n\ndeclare var URIError: URIErrorConstructor;\n```\n\n----------------------------------------\n\nTITLE: Boolean Interface and Constructor in TypeScript\nDESCRIPTION: TypeScript definitions for the Boolean object interface and its constructor. Includes the valueOf method and constructor signature.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Boolean {\n    /** Returns the primitive value of the specified object. */\n    valueOf(): boolean;\n}\n\ninterface BooleanConstructor {\n    new (value?: any): Boolean;\n    <T>(value?: T): boolean;\n    readonly prototype: Boolean;\n}\n\ndeclare var Boolean: BooleanConstructor;\n```\n\n----------------------------------------\n\nTITLE: Running Windmill with Nix Flakes\nDESCRIPTION: Command to run Windmill directly using Nix flakes without local setup.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnix run github:windmill-labs/windmill\n```\n\n----------------------------------------\n\nTITLE: Defining Function and Constructor Utility Types in TypeScript\nDESCRIPTION: TypeScript utility types for working with functions and constructors, including Parameters, ConstructorParameters, ReturnType, and InstanceType. These types extract information from function and constructor types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Obtain the parameters of a function type in a tuple\n */\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\n/**\n * Obtain the return type of a constructor function type\n */\ntype InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint32Array Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for Uint32Array, including various array methods like findIndex, forEach, indexOf, etc. This interface defines the shape and behavior of the standard JavaScript Uint32Array typed array with appropriate type signatures.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_111\n\nLANGUAGE: typescript\nCODE:\n```\nfindIndex(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number;\n```\n\n----------------------------------------\n\nTITLE: Defining DateConstructor Interface in TypeScript\nDESCRIPTION: This snippet defines the interface for the DateConstructor in TypeScript. It includes various overloads for creating Date objects and static methods for parsing and manipulating dates.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DateConstructor {\n    new (): Date;\n    new (value: number | string): Date;\n    /**\n     * Creates a new Date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    new (year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    readonly prototype: Date;\n    /**\n     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n     * @param s A date string\n     */\n    parse(s: string): number;\n    /**\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n}\n```\n\n----------------------------------------\n\nTITLE: Building Frontend as Static Assets\nDESCRIPTION: Command to build the frontend as static assets using SvelteKit's static adapter.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: String Interface Method Definitions in TypeScript\nDESCRIPTION: Defines several String prototype methods including split, substring, case conversion, and length property. These methods handle string manipulation operations with various parameters and return types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \n  * @param limit A value used to limit the number of elements returned in the array.\n  */\nsplit(separator: string, limit?: number): string[];\n\n/**\n  * Split a string into substrings using the specified separator and return them as an array.\n  * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \n  * @param limit A value used to limit the number of elements returned in the array.\n  */\nsplit(separator: RegExp, limit?: number): string[];\n\n/**\n  * Returns the substring at the specified location within a String object. \n  * @param start The zero-based index number indicating the beginning of the substring.\n  * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n  * If end is omitted, the characters from start through the end of the original string are returned.\n  */\nsubstring(start: number, end?: number): string;\n\n/** Converts all the alphabetic characters in a string to lowercase. */\ntoLowerCase(): string;\n\n/** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\ntoLocaleLowerCase(): string;\n\n/** Converts all the alphabetic characters in a string to uppercase. */\ntoUpperCase(): string;\n\n/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\ntoLocaleUpperCase(): string;\n\n/** Removes the leading and trailing white space and line terminator characters from a string. */\ntrim(): string;\n\n/** Returns the length of a String object. */\nlength: number;\n\n// IE extensions\n/**\n  * Gets a substring beginning at the specified location and having the specified length.\n  * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n  * @param length The number of characters to include in the returned substring.\n  */\nsubstr(from: number, length?: number): string;\n\n[index: number]: string;\n```\n\n----------------------------------------\n\nTITLE: String Static Methods Interface\nDESCRIPTION: Interface defining static methods on the String constructor, including fromCodePoint() and raw() template literal tag function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_193\n\nLANGUAGE: typescript\nCODE:\n```\nfromCodePoint(...codePoints: number[]): string;\n\nraw(template: TemplateStringsArray, ...substitutions: any[]): string;\n```\n\n----------------------------------------\n\nTITLE: Switching to a Different Workspace in Windmill CLI\nDESCRIPTION: Command to switch to a different workspace in Windmill using the CLI tool.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/cli/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwmill workspace switch <workspace_name>\n```\n\n----------------------------------------\n\nTITLE: Timer Functions Declarations in TypeScript\nDESCRIPTION: TypeScript declarations for timer functions including setTimeout, setInterval, clearTimeout, and clearInterval, defining their parameters and return types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): number;\ndeclare function setInterval(callback: (...args: any[]) => void, ms: number, ...args: any[]): number;\ndeclare function clearTimeout(timeoutId: number): void;\ndeclare function clearInterval(intervalId: number): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint8ClampedArray interface, which represents a typed array of 8-bit unsigned integer (clamped) values. It includes methods for array manipulation, searching, and iteration.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_205\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint8ClampedArray {\n    BYTES_PER_ELEMENT: number;\n\n    buffer: ArrayBuffer;\n\n    byteLength: number;\n\n    byteOffset: number;\n\n    copyWithin(target: number, start: number, end?: number): Uint8ClampedArray;\n\n    entries(): Iterator<[number, number]>;\n\n    every(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\n\n    fill(value: number, start?: number, end?: number): Uint8ClampedArray;\n\n    filter(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): Uint8ClampedArray;\n\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    forEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\n\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    join(separator?: string): string;\n\n    keys(): Iterator<number>;\n\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    length: number;\n\n    map(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\n}\n```\n\n----------------------------------------\n\nTITLE: Uint8Array Array Methods Implementation in TypeScript\nDESCRIPTION: TypeScript interface definitions for Uint8Array methods including copyWithin, entries, every, fill, filter, find, findIndex, forEach, indexOf, join, keys, lastIndexOf, map, reduce, reduceRight, reverse, and set operations. Each method is thoroughly documented with parameter descriptions and return types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_203\n\nLANGUAGE: typescript\nCODE:\n```\ncopyWithin(target: number, start: number, end?: number): Uint8Array;\n\nentries(): Iterator<[number, number]>;\n\nevery(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\n\nfill(value: number, start?: number, end?: number): Uint8Array;\n\nfilter(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): Uint8Array;\n\nfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\nfindIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\nforEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n\nindexOf(searchElement: number, fromIndex?: number): number;\n\njoin(separator?: string): string;\n\nkeys(): Iterator<number>;\n\nlastIndexOf(searchElement: number, fromIndex?: number): number;\n\nlength: number;\n\nmap(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\n\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue?: number): number;\n\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n\nreverse(): Uint8Array;\n\nset(index: number, value: number): void;\n\nset(array: Uint8Array, offset?: number): void;\n```\n\n----------------------------------------\n\nTITLE: Emitting Custom Warnings with process.emitWarning\nDESCRIPTION: Demonstrates various ways to emit custom application-specific warnings using process.emitWarning(). Examples include using a simple string, adding a warning type, and including a code identifier.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using a string.\nemitWarning('Something happened!');\n// Emits: (node: 56338) Warning: Something happened!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using a string and a type.\nemitWarning('Something Happened!', 'CustomWarning');\n// Emits: (node:56338) CustomWarning: Something Happened!\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitWarning } from 'node:process';\n\nemitWarning('Something happened!', 'CustomWarning', 'WARN001');\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n```\n\n----------------------------------------\n\nTITLE: Installing LLVM on macOS\nDESCRIPTION: Commands to install LLVM on macOS using Homebrew and add it to the PATH environment variable.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install llvm gsed\n\n# make LLVM tools available on PATH\necho 'export PATH=\"/opt/homebrew/opt/llvm/bin:$PATH\"' >> ~/.zshrc\n\n# now, restart your shell. You should now have the `lld` binary on your PATH.\n```\n\n----------------------------------------\n\nTITLE: Number Interface Methods in TypeScript\nDESCRIPTION: Defines the Number interface with methods for string conversion and formatting including toString, toFixed, toExponential, and toPrecision. These methods help in formatting numeric values for display.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_163\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Number {\n    /**\n      * Returns a string representation of an object.\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n      */\n    toString(radix?: number): string;\n\n    /** \n      * Returns a string representing a number in fixed-point notation.\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n      */\n    toFixed(fractionDigits?: number): string;\n\n    /**\n      * Returns a string containing a number represented in exponential notation.\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n      */\n    toExponential(fractionDigits?: number): string;\n\n    /**\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n      */\n    toPrecision(precision?: number): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing reduce Method for Uint16Array in TypeScript\nDESCRIPTION: Method signatures for the 'reduce' method which applies a function against an accumulator and each element to reduce it to a single value. Provides overloads for using with or without an initial value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Importing User-Friendly Windmill Client in Go\nDESCRIPTION: Shows how to import the user-friendly Windmill client package in a Go application. This client provides simplified methods for interacting with the Windmill platform.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/go-client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport wmill \"github.com/windmill-labs/windmill-go-client\"\n\n```\n\n----------------------------------------\n\nTITLE: Running Backend with Cargo\nDESCRIPTION: Command to run the Rust backend directly with Cargo, connecting to a local PostgreSQL database.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_URL=postgres://postgres:changeme@127.0.0.1:5433/windmill?sslmode=disable cargo run\n```\n\n----------------------------------------\n\nTITLE: Defining Int8Array and Uint8Array Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for typed array methods including toLocaleString for Int8Array and a partial interface for Uint8Array. These interfaces extend the base functionality for typed arrays.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_257\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int8Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayConstructor Interface Methods in TypeScript\nDESCRIPTION: This snippet defines methods for the ArrayConstructor interface, including from and of. These methods allow creating arrays from array-like objects, iterables, and sets of elements.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_190\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ArrayConstructor {\n    /**\n      * Creates an array from an array-like object.\n      * @param arrayLike An array-like object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;\n\n    /**\n      * Creates an array from an iterable object.\n      * @param iterable An iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from<T, U>(iterable: Iterable<T>, mapfn: (v: T, k: number) => U, thisArg?: any): Array<U>;\n\n    /**\n      * Creates an array from an array-like object.\n      * @param arrayLike An array-like object to convert to an array.\n      */\n    from<T>(arrayLike: ArrayLike<T>): Array<T>;\n\n    /**\n      * Creates an array from an iterable object.\n      * @param iterable An iterable object to convert to an array.\n      */\n    from<T>(iterable: Iterable<T>): Array<T>;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of<T>(...items: T[]): Array<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Interface Definition in TypeScript\nDESCRIPTION: Core TypeScript interface definition for Function type including apply, call, bind methods and properties. Includes type definitions for function manipulation and access.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Function {\n    apply(this: Function, thisArg: any, argArray?: any): any;\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\n    toString(): string;\n    prototype: any;\n    readonly length: number;\n    arguments: any;\n    caller: Function;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nix Flake Dependencies\nDESCRIPTION: Commands to update the Nix flake lock file and handle dependency hash updates.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnix flake update # update the lock file.\n```\n\n----------------------------------------\n\nTITLE: Date Interface Methods in TypeScript\nDESCRIPTION: Defines part of the Date interface with methods for string conversion including toString, toDateString, toTimeString, and locale-specific formatting methods. These methods format date and time values for display.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_169\n\nLANGUAGE: typescript\nCODE:\n```\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing reduce Methods for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signatures for the reduce method of Uint32Array. These overloads allow for reducing an array to a single value by applying a function against an accumulator and each element, with optional initial value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Installing wasm-pack Using Cargo\nDESCRIPTION: Command to install wasm-pack using Cargo, which is a prerequisite for building the WASM module.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo install wasm-pack\n```\n\n----------------------------------------\n\nTITLE: Defining Reflect API in TypeScript\nDESCRIPTION: TypeScript declaration for the Reflect global object, which provides static methods for interceptable JavaScript operations. It includes methods that correspond to the proxy traps and facilitate metaprogramming.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_231\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var Reflect: {\n    apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\n    construct(target: Function, argumentsList: ArrayLike<any>): any;\n    defineProperty(target: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): boolean;\n    deleteProperty(target: any, propertyKey: PropertyKey): boolean;\n    enumerate(target: any): Iterator<any>;\n    get(target: any, propertyKey: PropertyKey, receiver?: any): any;\n    getOwnPropertyDescriptor(target: any, propertyKey: PropertyKey): PropertyDescriptor;\n    getPrototypeOf(target: any): any;\n    has(target: any, propertyKey: string): boolean;\n    has(target: any, propertyKey: Symbol): boolean;\n    isExtensible(target: any): boolean;\n    ownKeys(target: any): Array<PropertyKey>;\n    preventExtensions(target: any): boolean;\n    set(target: any, propertyKey: PropertyKey, value: any, receiver? :any): boolean;\n    setPrototypeOf(target: any, proto: any): boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Int16ArrayConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Int16Array constructor. This interface describes various ways to create Int16Array instances and includes static methods and properties.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int16ArrayConstructor {\n    readonly prototype: Int16Array;\n    new (length: number): Int16Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Int16Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int16Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int16Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch API Response Constructor Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the Response constructor and static methods in the Fetch API, including json(), error(), and redirect() utility methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/** This Fetch API interface represents the response to a request.\n *\n * @category Fetch API\n */\ndeclare var Response: {\n  readonly prototype: Response;\n  new (body?: BodyInit | null, init?: ResponseInit): Response;\n  json(data: unknown, init?: ResponseInit): Response;\n  error(): Response;\n  redirect(url: string | URL, status?: number): Response;\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Order Problem with maybeSync Function in JavaScript\nDESCRIPTION: This code snippet demonstrates a hazardous API pattern where the execution order is unpredictable, making it unclear whether foo() or bar() will be called first. This creates potential race conditions in asynchronous code.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst maybeTrue = Math.random() > 0.5;\n\nmaybeSync(maybeTrue, () => {\n  foo();\n});\n\nbar();\n```\n\n----------------------------------------\n\nTITLE: Defining Node.js Process Module EventEmitter Interface in TypeScript\nDESCRIPTION: TypeScript declaration file defining the EventEmitter interface for the Node.js process module. It includes method signatures for event listeners and emitters for various process events such as 'beforeExit', 'exit', 'uncaughtException', and others. The interface extends the Node.js EventEmitter pattern with strongly typed event handlers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ntraceDeprecation: boolean\n/* EventEmitter */\naddListener(event: 'beforeExit', listener: BeforeExitListener): this\naddListener(event: 'disconnect', listener: DisconnectListener): this\naddListener(event: 'exit', listener: ExitListener): this\naddListener(event: 'rejectionHandled', listener: RejectionHandledListener): this\naddListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this\naddListener(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this\naddListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this\naddListener(event: 'warning', listener: WarningListener): this\naddListener(event: 'message', listener: MessageListener): this\naddListener(event: Signals, listener: SignalsListener): this\naddListener(event: 'multipleResolves', listener: MultipleResolveListener): this\naddListener(event: 'worker', listener: WorkerListener): this\nemit(event: 'beforeExit', code: number): boolean\nemit(event: 'disconnect'): boolean\nemit(event: 'exit', code: number): boolean\nemit(event: 'rejectionHandled', promise: Promise<unknown>): boolean\nemit(event: 'uncaughtException', error: Error): boolean\nemit(event: 'uncaughtExceptionMonitor', error: Error): boolean\nemit(event: 'unhandledRejection', reason: unknown, promise: Promise<unknown>): boolean\nemit(event: 'warning', warning: Error): boolean\nemit(event: 'message', message: unknown, sendHandle: unknown): this\nemit(event: Signals, signal?: Signals): boolean\nemit(\n\tevent: 'multipleResolves',\n\ttype: MultipleResolveType,\n\tpromise: Promise<unknown>,\n\tvalue: unknown\n): this\nemit(event: 'worker', listener: WorkerListener): this\non(event: 'beforeExit', listener: BeforeExitListener): this\non(event: 'disconnect', listener: DisconnectListener): this\non(event: 'exit', listener: ExitListener): this\non(event: 'rejectionHandled', listener: RejectionHandledListener): this\non(event: 'uncaughtException', listener: UncaughtExceptionListener): this\non(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this\non(event: 'unhandledRejection', listener: UnhandledRejectionListener): this\non(event: 'warning', listener: WarningListener): this\non(event: 'message', listener: MessageListener): this\non(event: Signals, listener: SignalsListener): this\non(event: 'multipleResolves', listener: MultipleResolveListener): this\non(event: 'worker', listener: WorkerListener): this\non(event: string | symbol, listener: (...args: any[]) => void): this\nonce(event: 'beforeExit', listener: BeforeExitListener): this\nonce(event: 'disconnect', listener: DisconnectListener): this\nonce(event: 'exit', listener: ExitListener): this\nonce(event: 'rejectionHandled', listener: RejectionHandledListener): this\nonce(event: 'uncaughtException', listener: UncaughtExceptionListener): this\nonce(event: 'uncaughtExceptionMonitor', listener: UncaughtExceptionListener): this\nonce(event: 'unhandledRejection', listener: UnhandledRejectionListener): this\nonce(event: 'warning', listener: WarningListener): this\nonce(event: 'message', listener: MessageListener): this\nonce(event: Signals, listener: SignalsListener): this\nonce(event: 'multipleResolves', listener: MultipleResolveListener): this\nonce(event: 'worker', listener: WorkerListener): this\nonce(event: string | symbol, listener: (...args: any[]) => void): this\nprependListener(event: 'beforeExit', listener: BeforeExitListener): this\nprependListener(event: 'disconnect', listener: DisconnectListener): this\nprependListener(event: 'exit', listener: ExitListener): this\nprependListener(event: 'rejectionHandled', listener: RejectionHandledListener): this\nprependListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this\nprependListener(\n\tevent: 'uncaughtExceptionMonitor',\n\tlistener: UncaughtExceptionListener\n): this\nprependListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this\nprependListener(event: 'warning', listener: WarningListener): this\nprependListener(event: 'message', listener: MessageListener): this\nprependListener(event: Signals, listener: SignalsListener): this\nprependListener(event: 'multipleResolves', listener: MultipleResolveListener): this\nprependListener(event: 'worker', listener: WorkerListener): this\nprependOnceListener(event: 'beforeExit', listener: BeforeExitListener): this\nprependOnceListener(event: 'disconnect', listener: DisconnectListener): this\nprependOnceListener(event: 'exit', listener: ExitListener): this\nprependOnceListener(event: 'rejectionHandled', listener: RejectionHandledListener): this\nprependOnceListener(event: 'uncaughtException', listener: UncaughtExceptionListener): this\nprependOnceListener(\n\tevent: 'uncaughtExceptionMonitor',\n\tlistener: UncaughtExceptionListener\n): this\nprependOnceListener(event: 'unhandledRejection', listener: UnhandledRejectionListener): this\nprependOnceListener(event: 'warning', listener: WarningListener): this\nprependOnceListener(event: 'message', listener: MessageListener): this\nprependOnceListener(event: Signals, listener: SignalsListener): this\nprependOnceListener(event: 'multipleResolves', listener: MultipleResolveListener): this\nprependOnceListener(event: 'worker', listener: WorkerListener): this\nlisteners(event: 'beforeExit'): BeforeExitListener[]\nlisteners(event: 'disconnect'): DisconnectListener[]\nlisteners(event: 'exit'): ExitListener[]\nlisteners(event: 'rejectionHandled'): RejectionHandledListener[]\nlisteners(event: 'uncaughtException'): UncaughtExceptionListener[]\nlisteners(event: 'uncaughtExceptionMonitor'): UncaughtExceptionListener[]\nlisteners(event: 'unhandledRejection'): UnhandledRejectionListener[]\nlisteners(event: 'warning'): WarningListener[]\nlisteners(event: 'message'): MessageListener[]\nlisteners(event: Signals): SignalsListener[]\nlisteners(event: 'multipleResolves'): MultipleResolveListener[]\nlisteners(event: 'worker'): WorkerListener[]\n```\n\n----------------------------------------\n\nTITLE: Using process.nextTick for Deferred Execution in Node.js\nDESCRIPTION: Example demonstrating the use of process.nextTick() to schedule a callback to execute after the current operation completes but before the event loop continues.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTick } from 'node:process';\n\nconsole.log('start');\nnextTick(() => {\n  console.log('nextTick callback');\n});\nconsole.log('scheduled');\n// Output:\n// start\n// scheduled\n// nextTick callback\n```\n\n----------------------------------------\n\nTITLE: Implementing map Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the map method of Uint32Array. This method creates a new array with the results of calling a provided function on every element in the calling array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nmap(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\n```\n\n----------------------------------------\n\nTITLE: Testing Nu Language Support with Docker\nDESCRIPTION: Specific example of testing the Nu language support using Docker with static frontend and Nu features enabled.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker/dev.nu up --features \"static_frontend,nu\" --wasm-pkg nu\n```\n\n----------------------------------------\n\nTITLE: Object Constructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Object constructor. Defines static methods available on the Object constructor like assign, getOwnPropertySymbols, and setPrototypeOf.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_185\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectConstructor {\n    /**\n      * Copy the values of all of the enumerable own properties from one or more source objects to a \n      * target object. Returns the target object.\n      * @param target The target object to copy to.\n      * @param sources One or more source objects to copy properties from.\n      */\n    assign(target: any, ...sources: any[]): any;\n\n    /**\n      * Returns an array of all symbol properties found directly on object o.\n      * @param o Object to retrieve the symbols from.\n      */\n    getOwnPropertySymbols(o: any): Symbol[];\n\n    /**\n      *  Returns true if the values are the same value, false otherwise.\n      * @param value1 The first value.\n      * @param value2 The second value.\n      */\n    is(value1: any, value2: any): boolean;\n\n    /**\n      * Sets the prototype of a specified object o to  object proto or null. Returns the object o.\n      * @param o The object to change its prototype.\n      * @param proto The value of the new prototype or null.\n      */\n    setPrototypeOf(o: any, proto: any): any;\n\n    /**\n      * Gets the own property descriptor of the specified object. \n      * An own property descriptor is one that is defined directly on the object and is not \n      * inherited from the object's prototype. \n      * @param o Object that contains the property.\n      * @param p Name of the property.\n    */\n    getOwnPropertyDescriptor(o: any, propertyKey: PropertyKey): PropertyDescriptor;\n\n    /**\n      * Adds a property to an object, or modifies attributes of an existing property. \n      * @param o Object on which to add or modify the property. This can be a native JavaScript \n      * object (that is, a user-defined object or a built in object) or a DOM object.\n      * @param p The property name.\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor\n      *  property.\n      */\n    defineProperty(o: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint16ArrayConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Uint16ArrayConstructor, including static methods and properties like BYTES_PER_ELEMENT, of, and from. It defines various ways to create new Uint16Array instances.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint16ArrayConstructor {\n    readonly prototype: Uint16Array;\n    new (length: number): Uint16Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint16Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint16Array;\n    readonly BYTES_PER_ELEMENT: number;\n    of(...items: number[]): Uint16Array;\n    from(arrayLike: ArrayLike<number>): Uint16Array;\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Special TypeScript Utility Types\nDESCRIPTION: TypeScript utility types NoInfer and ThisType that provide special type manipulation capabilities. NoInfer prevents type inference in specific positions, while ThisType provides contextual 'this' typing.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Marker for non-inference type position\n */\ntype NoInfer<T> = intrinsic;\n\n/**\n * Marker for contextual 'this' type\n */\ninterface ThisType<T> {}\n```\n\n----------------------------------------\n\nTITLE: Deno Script Using Private NPM Package\nDESCRIPTION: TypeScript code for Deno demonstrating usage of a package from private NPM registry.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as testpackage from \"npm:@windmill/helloworld@0.0.1\"\n\nexport async function main() {\n  console.log(testpackage.sayHello(\"Windmill\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Warnings in Node.js\nDESCRIPTION: Demonstrates how to emit custom warnings using the Node.js process emitWarning function with an Error object. Shows setting warning name and code properties.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { emitWarning } from 'node:process';\n\n// Emit a warning using an Error object.\nconst myWarning = new Error('Something happened!');\n// Use the Error name property to specify the type name\nmyWarning.name = 'CustomWarning';\nmyWarning.code = 'WARN001';\n\nemitWarning(myWarning);\n// Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n```\n\n----------------------------------------\n\nTITLE: Defining Process Module Types in TypeScript\nDESCRIPTION: This code snippet declares the 'process' module and defines various interfaces and types used in Node.js process-related operations. It includes definitions for memory usage, CPU usage, process versions, platforms, architectures, signals, and event listeners.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare module 'process' {\n\timport * as net from 'node:net'\n\timport * as os from 'node:os'\n\timport * as tty from 'node:tty'\n\timport { Worker } from 'node:worker_threads'\n\tglobal {\n\t\tvar process: NodeJS.Process\n\t\tnamespace NodeJS {\n\t\t\t// ... (interfaces and types definitions)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint8Array interface, including methods for array manipulation, iteration, and conversion. It also includes the Uint8ArrayConstructor interface for creating new Uint8Array instances.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_204\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint8Array {\n    slice(start?: number, end?: number): Uint8Array;\n\n    some(callbackfn: (value: number, index: number, array: Uint8Array) => boolean, thisArg?: any): boolean;\n\n    sort(compareFn?: (a: number, b: number) => number): Uint8Array;\n\n    subarray(begin: number, end?: number): Uint8Array;\n\n    toLocaleString(): string;\n\n    toString(): string;\n\n    values(): Iterator<number>;\n\n    [index: number]: number;\n}\n\ninterface Uint8ArrayConstructor {\n    prototype: Uint8Array;\n    new (length: number): Uint8Array;\n    new (array: Uint8Array): Uint8Array;\n    new (array: number[]): Uint8Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array;\n\n    BYTES_PER_ELEMENT: number;\n\n    of(...items: number[]): Uint8Array;\n\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8Array;\n}\ndeclare var Uint8Array: Uint8ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining Function Interface in TypeScript\nDESCRIPTION: This snippet defines the Function interface in TypeScript, including methods like apply, call, and bind. It also specifies properties such as prototype and length, and non-standard extensions like arguments and caller.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_157\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Function {\n    apply(thisArg: any, argArray?: any): any;\n    call(thisArg: any, ...argArray: any[]): any;\n    bind(thisArg: any, ...argArray: any[]): any;\n    prototype: any;\n    length: number;\n    arguments: any;\n    caller: Function;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Uint32ArrayConstructor Interface Definition\nDESCRIPTION: TypeScript interface definition for the Uint32Array constructor, including various constructor overloads and the BYTES_PER_ELEMENT property. This defines how to instantiate new Uint32Array objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_221\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint32ArrayConstructor {\n    prototype: Uint32Array;\n    new (length: number): Uint32Array;\n    new (array: Uint32Array): Uint32Array;\n    new (array: number[]): Uint32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array;\n\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch API ResponseInit Interface Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the ResponseInit interface in the Fetch API, which defines optional properties for initializing a Response object.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category Fetch API */\ndeclare interface ResponseInit {\n  headers?: HeadersInit;\n  status?: number;\n  statusText?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Math Interface in TypeScript\nDESCRIPTION: Complete TypeScript definition for the Math object interface, including mathematical constants (PI, E) and methods for trigonometric, logarithmic, exponential, and other mathematical operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Math {\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\n    readonly E: number;\n    /** The natural logarithm of 10. */\n    readonly LN10: number;\n    /** The natural logarithm of 2. */\n    readonly LN2: number;\n    /** The base-2 logarithm of e. */\n    readonly LOG2E: number;\n    /** The base-10 logarithm of e. */\n    readonly LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    readonly PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    readonly SQRT1_2: number;\n    /** The square root of 2. */\n    readonly SQRT2: number;\n    /**\n     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n     * For example, the absolute value of -5 is the same as the absolute value of 5.\n     * @param x A numeric expression for which the absolute value is needed.\n     */\n    abs(x: number): number;\n    /**\n     * Returns the arc cosine (or inverse cosine) of a number.\n     * @param x A numeric expression.\n     */\n    acos(x: number): number;\n    /**\n     * Returns the arcsine of a number.\n     * @param x A numeric expression.\n     */\n    asin(x: number): number;\n    /**\n     * Returns the arctangent of a number.\n     * @param x A numeric expression for which the arctangent is needed.\n     */\n    atan(x: number): number;\n    /**\n     * Returns the angle (in radians) from the X axis to a point.\n     * @param y A numeric expression representing the cartesian y-coordinate.\n     * @param x A numeric expression representing the cartesian x-coordinate.\n     */\n    atan2(y: number, x: number): number;\n    /**\n     * Returns the smallest integer greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    ceil(x: number): number;\n    /**\n     * Returns the cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cos(x: number): number;\n    /**\n     * Returns e (the base of natural logarithms) raised to a power.\n     * @param x A numeric expression representing the power of e.\n     */\n    exp(x: number): number;\n    /**\n     * Returns the greatest integer less than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    floor(x: number): number;\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A numeric expression.\n     */\n    log(x: number): number;\n    /**\n     * Returns the larger of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    max(...values: number[]): number;\n    /**\n     * Returns the smaller of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    min(...values: number[]): number;\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */\n    random(): number;\n    /**\n     * Returns a supplied numeric expression rounded to the nearest integer.\n     * @param x The value to be rounded to the nearest integer.\n     */\n    round(x: number): number;\n    /**\n     * Returns the sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sin(x: number): number;\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    sqrt(x: number): number;\n    /**\n     * Returns the tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n```\n\n----------------------------------------\n\nTITLE: Installing Windmill Python Client Package\nDESCRIPTION: This snippet shows how to install the local Windmill Python client package using pip. It assumes you're in the correct directory containing the package.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/python-client/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ./wmill\npip3 install .\n```\n\n----------------------------------------\n\nTITLE: Defining Request Interface for Fetch API in TypeScript\nDESCRIPTION: Declares the Request interface for the Fetch API, extending the Body interface. Represents an HTTP request with various properties like method, headers, cache mode, and credential settings.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/** This Fetch API interface represents a resource request.\n *\n * @category Fetch API\n */\ndeclare interface Request extends Body {\n  /**\n   * Returns the cache mode associated with request, which is a string\n   * indicating how the request will interact with the browser's cache when\n   * fetching.\n   */\n  readonly cache: RequestCache;\n  /**\n   * Returns the credentials mode associated with request, which is a string\n   * indicating whether credentials will be sent with the request always, never,\n   * or only when sent to a same-origin URL.\n   */\n  readonly credentials: RequestCredentials;\n  /**\n   * Returns the kind of resource requested by request, e.g., \"document\" or \"script\".\n   */\n  readonly destination: RequestDestination;\n  /**\n   * Returns a Headers object consisting of the headers associated with request.\n   * Note that headers added in the network layer by the user agent will not be\n   * accounted for in this object, e.g., the \"Host\" header.\n   */\n  readonly headers: Headers;\n  /**\n   * Returns request's subresource integrity metadata, which is a cryptographic\n   * hash of the resource being fetched. Its value consists of multiple hashes\n   * separated by whitespace. [SRI]\n   */\n  readonly integrity: string;\n  /**\n   * Returns a boolean indicating whether or not request is for a history\n   * navigation (a.k.a. back-forward navigation).\n   */\n  readonly isHistoryNavigation: boolean;\n  /**\n   * Returns a boolean indicating whether or not request is for a reload\n   * navigation.\n   */\n  readonly isReloadNavigation: boolean;\n  /**\n   * Returns a boolean indicating whether or not request can outlive the global\n   * in which it was created.\n   */\n  readonly keepalive: boolean;\n  /**\n   * Returns request's HTTP method, which is \"GET\" by default.\n   */\n  readonly method: string;\n  /**\n   * Returns the mode associated with request, which is a string indicating\n   * whether the request will use CORS, or will be restricted to same-origin\n   * URLs.\n   */\n  readonly mode: RequestMode;\n  /**\n   * Returns the redirect mode associated with request, which is a string\n   * indicating how redirects for the request will be handled during fetching. A\n   * request will follow redirects by default.\n   */\n  readonly redirect: RequestRedirect;\n  /**\n   * Returns the referrer of request. Its value can be a same-origin URL if\n\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Interface in TypeScript\nDESCRIPTION: This TypeScript snippet defines the beginning of the Int16Array interface, including its properties and several array manipulation methods. It includes documentation for properties such as BYTES_PER_ELEMENT, buffer, byteLength, and methods like copyWithin, entries, every, fill, and filter.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_208\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the \n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Int16Array {\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array. \n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    /** \n      * Returns the this object after copying a section of the array identified by start and end\n      * to the same array starting at position target\n      * @param target If target is negative, it is treated as length+target where length is the \n      * length of the array. \n      * @param start If start is negative, it is treated as length+start. If end is negative, it \n      * is treated as length+end.\n      * @param end If not specified, length of the this object is used as its default value. \n      */\n    copyWithin(target: number, start: number, end?: number): Int16Array;\n\n    /** \n      * Returns an array of key, value pairs for every entry in the array\n      */\n    entries(): Iterator<[number, number]>;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls \n      * the callbackfn function for each element in array1 until the callbackfn returns false, \n      * or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): boolean;\n\n    /**\n        * Returns the this object after filling the section identified by start and end with value\n        * @param value value to fill array section with\n        * @param start index to start filling the array at. If start is negative, it is treated as \n        * length+start where length is the length of the array. \n        * @param end index to stop filling the array at. If end is negative, it is treated as \n        * length+end.\n        */\n    fill(value: number, start?: number, end?: number): Int16Array;\n\n    /**\n      * Returns the elements of an array that meet the condition specified in a callback function. \n      * @param callbackfn A function that accepts up to three arguments. The filter method calls \n      * the callbackfn function one time for each element in the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    filter(callbackfn: (value: number, index: number, array: Int16Array) => boolean, thisArg?: any): Int16Array;\n\n    /** \n      * Returns the value of the first element in the array where predicate is true, and undefined \n      * otherwise.\n      * @param predicate find calls predicate once for each element of the array, in ascending \n      * order, until it finds one where predicate returns true. If such an element is found, find \n\n```\n\n----------------------------------------\n\nTITLE: Defining Object Interface in TypeScript\nDESCRIPTION: Type definition for the core Object interface including standard methods like toString, valueOf, hasOwnProperty, isPrototypeOf, and propertyIsEnumerable.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Object {\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n    constructor: Function;\n\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns a date converted to a string using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    /**\n     * Determines whether an object has a property with the specified name.\n     * @param v A property name.\n     */\n    hasOwnProperty(v: PropertyKey): boolean;\n\n    /**\n     * Determines whether an object exists in another object's prototype chain.\n     * @param v Another object whose prototype chain is to be checked.\n     */\n    isPrototypeOf(v: Object): boolean;\n\n    /**\n     * Determines whether a specified property is enumerable.\n     * @param v A property name.\n     */\n    propertyIsEnumerable(v: PropertyKey): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Symbol Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the Symbol constructor variable, making the Symbol constructor available globally in TypeScript code.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_183\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var Symbol: SymbolConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArrayConstructor Interface in TypeScript\nDESCRIPTION: This TypeScript snippet defines the constructor interface for Uint8ClampedArray, including various constructor overloads, static properties, and static methods for creating new arrays.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_207\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint8ClampedArrayConstructor {\n    prototype: Uint8ClampedArray;\n    new (length: number): Uint8ClampedArray;\n    new (array: Uint8ClampedArray): Uint8ClampedArray;\n    new (array: number[]): Uint8ClampedArray;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8ClampedArray;\n\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Uint8ClampedArray;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Generating Windmill Backend Client\nDESCRIPTION: Commands for installing dependencies and generating the Windmill backend client for frontend development. Includes specific command for Mac users.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate-backend-client\n## on mac use\nnpm run generate-backend-client-mac\n```\n\n----------------------------------------\n\nTITLE: Accessing Process ID in Node.js\nDESCRIPTION: Example showing how to access the current process ID (PID) using the process.pid property.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pid } from 'node:process';\n\nconsole.log(`This process is pid ${pid}`);\n```\n\n----------------------------------------\n\nTITLE: Defining DataView Interface Methods in TypeScript\nDESCRIPTION: This snippet defines methods for the DataView interface to get and set various data types at specified byte offsets. It includes methods for handling different integer and floating-point types with options for endianness.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataView {\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\n    setInt8(byteOffset: number, value: number): void;\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\n    setUint8(byteOffset: number, value: number): void;\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Float64Array Constructor Interface\nDESCRIPTION: TypeScript interface definition for Float64Array constructor, including static methods and properties like BYTES_PER_ELEMENT, of(), and from().\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_149\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Float64ArrayConstructor {\n    readonly prototype: Float64Array;\n    new (length: number): Float64Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Float64Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float64Array;\n    readonly BYTES_PER_ELEMENT: number;\n    of(...items: number[]): Float64Array;\n    from(arrayLike: ArrayLike<number>): Float64Array;\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Windmill Client Bundle with esbuild\nDESCRIPTION: Command to build and bundle the Windmill client from TypeScript source files using esbuild. The command generates an ESM format bundle for Node.js platform.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/typescript-client/README_DEV.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/esbuild  src/index.ts --bundle --outfile=windmill.js  --format=esm --platform=node\n```\n\n----------------------------------------\n\nTITLE: Declaring isFinite Function in TypeScript\nDESCRIPTION: Type declaration for the global isFinite function which determines whether a supplied number is finite.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines whether a supplied number is finite.\n * @param number Any numeric value.\n */\ndeclare function isFinite(number: number): boolean;\n```\n\n----------------------------------------\n\nTITLE: String Constructor Interface in TypeScript\nDESCRIPTION: Defines the StringConstructor interface which specifies how the String object is instantiated and includes the static fromCharCode method for creating strings from character codes.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_160\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringConstructor {\n    new (value?: any): String;\n    (value?: any): string;\n    prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DomIterable Interface in TypeScript\nDESCRIPTION: Declares a generic DomIterable interface that provides standard iteration methods for DOM objects. This interface is used as a base for other DOM collection types like FormData and Headers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category DOM APIs */\ndeclare interface DomIterable<K, V> {\n  keys(): IterableIterator<K>;\n  values(): IterableIterator<V>;\n  entries(): IterableIterator<[K, V]>;\n  [Symbol.iterator](): IterableIterator<[K, V]>;\n  forEach(\n    callback: (value: V, key: K, parent: this) => void,\n    thisArg?: any,\n  ): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Defines required Python packages and their versions. Includes both direct project dependencies and indirectly required packages pinned for security purposes by Snyk.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nopenai==1.30.3\npython-dotenv==1.0.0\npyyaml==6.0\ntqdm==4.66.3\nanyio>=4.4.0 # not directly required, pinned by Snyk to avoid a vulnerability\nzipp>=3.19.1 # not directly required, pinned by Snyk to avoid a vulnerability\n```\n\n----------------------------------------\n\nTITLE: Process Environment Variables Management\nDESCRIPTION: Shows the structure of process.env object and demonstrates how to access, modify and delete environment variables in Node.js.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'node:process';\n\nenv.foo = 'bar';\nconsole.log(env.foo);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'node:process';\n\nenv.test = null;\nconsole.log(env.test);\n// => 'null'\nenv.test = undefined;\nconsole.log(env.test);\n// => 'undefined'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'node:process';\n\nenv.TEST = 1;\ndelete env.TEST;\nconsole.log(env.TEST);\n// => undefined\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { env } from 'node:process';\n\nenv.TEST = 1;\nconsole.log(env.test);\n// => 1\n```\n\n----------------------------------------\n\nTITLE: Uint32Array Constructor Interface Definition\nDESCRIPTION: TypeScript interface definition for Uint32Array constructor methods, including static methods 'of' and 'from' for creating new Uint32Array instances.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_222\n\nLANGUAGE: typescript\nCODE:\n```\nof(...items: number[]): Uint32Array;\n\nfrom(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint32Array;\n```\n\n----------------------------------------\n\nTITLE: Nix Development Environment Setup\nDESCRIPTION: Commands to set up and use a Nix development environment for Windmill.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnix develop # enter a dev shell containing all necessary packages.\n\nwm-setup # build the frontend and setup the database.\nwm # run the frontend.\n\n# In an other shell:\nnix develop\ncd backend\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Float32Array every Method Definition\nDESCRIPTION: Defines the every method that tests whether all elements in the array pass the test implemented by the provided function. Returns true if every element passes, false otherwise.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_130\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Float32Array) => unknown, thisArg?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Template Strings Array Interface in TypeScript\nDESCRIPTION: Defines the TemplateStringsArray interface which extends Array<string> and adds a raw property. This interface is used with template literals in JavaScript.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_166\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TemplateStringsArray extends Array<string> {\n    raw: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for String methods including modern methods like codePointAt, includes, endsWith, normalize, repeat, startsWith, and legacy HTML methods. It defines both modern string manipulation methods and deprecated browser compatibility methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_255\n\nLANGUAGE: typescript\nCODE:\n```\ninterface String {\n    /**\n     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\n     * value of the UTF-16 encoded code point starting at the string element at position pos in\n     * the String resulting from converting this object to a String.\n     * If there is no element at that position, the result is undefined.\n     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n     */\n    codePointAt(pos: number): number | undefined;\n\n    /**\n     * Returns true if searchString appears as a substring of the result of converting this\n     * object to a String, at one or more positions that are\n     * greater than or equal to position; otherwise, returns false.\n     * @param searchString search string\n     * @param position If position is undefined, 0 is assumed, so as to search all of the String.\n     */\n    includes(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * endPosition – length(this). Otherwise returns false.\n     */\n    endsWith(searchString: string, endPosition?: number): boolean;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\n     * is \"NFC\"\n     */\n    normalize(form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\n     * is \"NFC\"\n     */\n    normalize(form?: string): string;\n\n    /**\n     * Returns a String value that is made from count copies appended together. If count is 0,\n     * the empty string is returned.\n     * @param count number of copies to append\n     */\n    repeat(count: number): string;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * position. Otherwise returns false.\n     */\n    startsWith(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns an `<a>` HTML anchor element and sets the name attribute to the text value\n     * @deprecated A legacy feature for browser compatibility\n     * @param name\n     */\n    anchor(name: string): string;\n\n    /**\n     * Returns a `<big>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    big(): string;\n\n    /**\n     * Returns a `<blink>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    blink(): string;\n\n    /**\n     * Returns a `<b>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    bold(): string;\n\n    /**\n     * Returns a `<tt>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fixed(): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the color attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontcolor(color: string): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: number): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: string): string;\n\n    /**\n     * Returns an `<i>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    italics(): string;\n\n    /**\n     * Returns an `<a>` HTML element and sets the href attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    link(url: string): string;\n\n    /**\n     * Returns a `<small>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    small(): string;\n\n    /**\n     * Returns a `<strike>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    strike(): string;\n\n    /**\n     * Returns a `<sub>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sub(): string;\n\n    /**\n     * Returns a `<sup>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sup(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Math Interface Methods\nDESCRIPTION: Extended Math object interface with additional mathematical functions including hyperbolic and logarithmic operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_195\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Math {\n    clz32(x: number): number;\n    imul(x: number, y: number): number;\n    sign(x: number): number;\n    log10(x: number): number;\n    log2(x: number): number;\n    log1p(x: number): number;\n    expm1(x: number): number;\n    cosh(x: number): number;\n    sinh(x: number): number;\n    tanh(x: number): number;\n    acosh(x: number): number;\n    asinh(x: number): number;\n    atanh(x: number): number;\n    hypot(...values: number[]): number;\n    trunc(x: number): number;\n    fround(x: number): number;\n    cbrt(x: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array Constructor Definitions\nDESCRIPTION: TypeScript interface defining the various constructor signatures for creating Float32Array instances.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_146\n\nLANGUAGE: typescript\nCODE:\n```\nnew (length: number): Float32Array;\nnew (array: ArrayLike<number> | ArrayBufferLike): Float32Array;\nnew (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Float32Array;\n```\n\n----------------------------------------\n\nTITLE: Changing Directory in Node.js with process.chdir\nDESCRIPTION: Shows how to change the current working directory in a Node.js process and handle potential errors if the specified directory doesn't exist.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { chdir, cwd } from 'node:process';\n\nconsole.log(`Starting directory: ${cwd()}`);\ntry {\n  chdir('/tmp');\n  console.log(`New directory: ${cwd()}`);\n} catch (err) {\n  console.error(`chdir: ${err}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array find Method Definition\nDESCRIPTION: Defines the find method that returns the value of the first element in the array that satisfies the provided testing function. Otherwise, undefined is returned.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_133\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining DateConstructor and Function Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for DateConstructor and Function. The DateConstructor defines the constructor signature for Date objects, while the Function interface includes a read-only name property.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_247\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DateConstructor {\n    new (value: number | string | Date): Date;\n}\n\ninterface Function {\n    /**\n     * Returns the name of the function. Function names are read-only and can not be changed.\n     */\n    readonly name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Date Constructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Date constructor function, including various overloaded constructors and static utility methods for parsing dates and getting timestamps.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_171\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DateConstructor {\n    new (): Date;\n    new (value: number): Date;\n    new (value: string): Date;\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    prototype: Date;\n    /**\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n      * @param s A date string\n      */\n    parse(s: string): number;\n    /**\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date. \n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n      * @param month The month as an number between 0 and 11 (January to December).\n      * @param date The date as an number between 1 and 31.\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\n      */\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n    now(): number;\n}\n\ndeclare var Date: DateConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining Array<T> Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the generic Array<T> type with detailed JSDoc comments for array methods like push, pop, concat, slice, sort, and iteration methods like forEach, map, filter.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_177\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Array<T> {\n    /**\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\n      */\n    length: number;\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n    toLocaleString(): string;\n    /**\n      * Appends new elements to an array, and returns the new length of the array.\n      * @param items New elements of the Array.\n      */\n    push(...items: T[]): number;\n    /**\n      * Removes the last element from an array and returns it.\n      */\n    pop(): T;\n    /**\n      * Combines two or more arrays.\n      * @param items Additional items to add to the end of array1.\n      */\n    concat<U extends T[]>(...items: U[]): T[];\n    /**\n      * Combines two or more arrays.\n      * @param items Additional items to add to the end of array1.\n      */\n    concat(...items: T[]): T[];\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n    /**\n      * Reverses the elements in an Array. \n      */\n    reverse(): T[];\n    /**\n      * Removes the first element from an array and returns it.\n      */\n    shift(): T;\n    /** \n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): T[];\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: T, b: T) => number): T[];\n\n    /**\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n      * @param start The zero-based location in the array from which to start removing elements.\n      */\n    splice(start: number): T[];\n\n    /**\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n      * @param start The zero-based location in the array from which to start removing elements.\n      * @param deleteCount The number of elements to remove.\n      * @param items Elements to insert into the array in place of the deleted elements.\n      */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n\n    /**\n      * Inserts new elements at the start of an array.\n      * @param items  Elements to insert at the start of the Array.\n      */\n    unshift(...items: T[]): number;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n      */\n    indexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n      * Returns the index of the last occurrence of a specified value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n      */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n      * Determines whether all the members of an array satisfy the specified test.\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n      */\n\n```\n\n----------------------------------------\n\nTITLE: Float32Array Interface Definition\nDESCRIPTION: Comprehensive TypeScript interface definition for Float32Array, including all standard array methods and properties with detailed type information and documentation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_223\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Float32Array {\n    BYTES_PER_ELEMENT: number;\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): Float32Array;\n    entries(): Iterator<[number, number]>;\n    every(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): Float32Array;\n    filter(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): Float32Array;\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    keys(): Iterator<number>;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    length: number;\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue?: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Uint32Array TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for Uint32Array, a typed array of 32-bit unsigned integers. Includes properties for byte size, buffer references, and array length.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Working Directory with process.cwd\nDESCRIPTION: Demonstrates how to get the current working directory of a Node.js process using the cwd() method.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cwd } from 'node:process';\n\nconsole.log(`Current directory: ${cwd()}`);\n```\n\n----------------------------------------\n\nTITLE: Math Global Variable Declaration in TypeScript\nDESCRIPTION: Declares the global Math variable with its interface type. This declaration provides access to mathematical constants and functions throughout JavaScript applications.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_168\n\nLANGUAGE: typescript\nCODE:\n```\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n```\n\n----------------------------------------\n\nTITLE: Float32Array findIndex Method Definition\nDESCRIPTION: Defines the findIndex method that returns the index of the first element in the array that satisfies the provided testing function. Otherwise, -1 is returned.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_134\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: Float32Array) => boolean, thisArg?: any): number;\n```\n\n----------------------------------------\n\nTITLE: Implementing find Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'find' method which returns the value of the first element that satisfies the provided testing function. Returns undefined if no elements satisfy the testing function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nfind(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number | undefined;\n```\n\n----------------------------------------\n\nTITLE: RegExp Interfaces in TypeScript\nDESCRIPTION: TypeScript interface definitions for RegExp-related objects including RegExpMatchArray and RegExpExecArray, which extend the JavaScript Array type with additional properties for regular expression operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_172\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegExpMatchArray extends Array<string> {\n    index?: number;\n    input?: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n    index: number;\n    input: string;\n}\n\ninterface RegExp {\n    /** \n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n      * @param string The String object or string literal on which to perform the search.\n      */\n    exec(string: string): RegExpExecArray;\n\n    /** \n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n      * @param string String on which to perform the search.\n      */\n    test(string: string): boolean;\n\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The rgExp argument is a Regular expression object. It can be a variable name or a literal. */\n    source: string;\n\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    global: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Object Interface Methods in TypeScript\nDESCRIPTION: This snippet defines several methods for the Object interface in TypeScript, including getOwnPropertyDescriptor, getOwnPropertyNames, create, defineProperty, defineProperties, seal, freeze, preventExtensions, isSealed, isFrozen, isExtensible, and keys. Each method is documented with its purpose and parameters.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectConstructor {\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\n    getOwnPropertyNames(o: any): string[];\n    create(o: any, properties?: PropertyDescriptorMap): any;\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\n    seal(o: any): any;\n    freeze(o: any): any;\n    preventExtensions(o: any): any;\n    isSealed(o: any): boolean;\n    isFrozen(o: any): boolean;\n    isExtensible(o: any): boolean;\n    keys(o: any): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint8Array interface with various methods for array manipulation, including filter, find, map, reduce, and sort. It also includes properties like length and indexing.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint8Array {\n    filter(predicate: (value: number, index: number, array: Uint8Array) => any, thisArg?: any): Uint8Array;\n    find(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: Uint8Array) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Uint8Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    readonly length: number;\n    map(callbackfn: (value: number, index: number, array: Uint8Array) => number, thisArg?: any): Uint8Array;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8Array) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8Array) => U, initialValue: U): U;\n    reverse(): Uint8Array;\n    set(array: ArrayLike<number>, offset?: number): void;\n    slice(start?: number, end?: number): Uint8Array;\n    some(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin?: number, end?: number): Uint8Array;\n    toLocaleString(): string;\n    toString(): string;\n    valueOf(): Uint8Array;\n    [index: number]: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Uint8Array Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Uint8Array, a typed array of 8-bit unsigned integer values. This partial definition shows the base properties of the Uint8Array class that provide information about the array's memory layout.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_202\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the \n  * requested number of bytes could not be allocated an exception is raised.\n  */\ninterface Uint8Array {\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array. \n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Method Definitions in TypeScript\nDESCRIPTION: Provides TypeScript definitions for various array methods including slice, sort, splice, unshift, indexOf, lastIndexOf, every, some, forEach, map, filter, reduce, and reduceRight. Each method is documented with its parameters and return types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nslice(start?: number, end?: number): T[];\n\nsort(compareFn?: (a: T, b: T) => number): this;\n\nsplice(start: number, deleteCount?: number): T[];\nsplice(start: number, deleteCount: number, ...items: T[]): T[];\n\nunshift(...items: T[]): number;\n\nindexOf(searchElement: T, fromIndex?: number): number;\n\nlastIndexOf(searchElement: T, fromIndex?: number): number;\n\nevery<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\nevery(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n\nsome(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n\nforEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n\nmap<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n\nfilter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\nfilter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n\nreduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\nreduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\nreduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\nreduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\nreduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n```\n\n----------------------------------------\n\nTITLE: Number Constructor Interface in TypeScript\nDESCRIPTION: TypeScript definition for the NumberConstructor interface that includes constants like MAX_VALUE, MIN_VALUE, NaN, and POSITIVE/NEGATIVE_INFINITY, along with constructor signatures.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberConstructor {\n    new (value?: any): Number;\n    (value?: any): number;\n    readonly prototype: Number;\n\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    readonly MAX_VALUE: number;\n\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    readonly MIN_VALUE: number;\n\n    /**\n     * A value that is not a number.\n     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n     */\n    readonly NaN: number;\n\n    /**\n     * A value that is less than the largest negative number that can be represented in JavaScript.\n     * JavaScript displays NEGATIVE_INFINITY values as -infinity.\n     */\n    readonly NEGATIVE_INFINITY: number;\n\n    /**\n     * A value greater than the largest number that can be represented in JavaScript.\n     * JavaScript displays POSITIVE_INFINITY values as infinity.\n     */\n    readonly POSITIVE_INFINITY: number;\n}\n\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: NumberConstructor;\n```\n\n----------------------------------------\n\nTITLE: Float32Array forEach Method Definition\nDESCRIPTION: Defines the forEach method that executes a provided function once for each array element. This method doesn't return anything.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_135\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: Float32Array) => void, thisArg?: any): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing indexOf Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'indexOf' method which returns the first index at which a given element can be found in the array, or -1 if it is not present. Optionally starts the search from a specified index.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nindexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Using process.kill to Send Signals in Node.js\nDESCRIPTION: Example demonstrating how to use process.kill() method to send signals to processes. It shows setting up a SIGHUP signal handler and then sending the signal to the current process.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport process, { kill } from 'node:process';\n\nprocess.on('SIGHUP', () => {\n  console.log('Got SIGHUP signal.');\n});\n\nsetTimeout(() => {\n  console.log('Exiting.');\n  process.exit(0);\n}, 100);\n\nkill(process.pid, 'SIGHUP');\n```\n\n----------------------------------------\n\nTITLE: Date Object Method Definitions in TypeScript\nDESCRIPTION: TypeScript interface definition for the Date object methods, including getters and setters for time components, timezone handling, and various string conversion methods. Each method is documented with JSDoc comments explaining its purpose and parameters.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_170\n\nLANGUAGE: typescript\nCODE:\n```\ntoLocaleTimeString(): string;\n/** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\nvalueOf(): number;\n/** Gets the time value in milliseconds. */\ngetTime(): number;\n/** Gets the year, using local time. */\ngetFullYear(): number;\n/** Gets the year using Universal Coordinated Time (UTC). */\ngetUTCFullYear(): number;\n/** Gets the month, using local time. */\ngetMonth(): number;\n/** Gets the month of a Date object using Universal Coordinated Time (UTC). */\ngetUTCMonth(): number;\n/** Gets the day-of-the-month, using local time. */\ngetDate(): number;\n/** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\ngetUTCDate(): number;\n/** Gets the day of the week, using local time. */\ngetDay(): number;\n/** Gets the day of the week using Universal Coordinated Time (UTC). */\ngetUTCDay(): number;\n/** Gets the hours in a date, using local time. */\ngetHours(): number;\n/** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\ngetUTCHours(): number;\n/** Gets the minutes of a Date object, using local time. */\ngetMinutes(): number;\n/** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\ngetUTCMinutes(): number;\n/** Gets the seconds of a Date object, using local time. */\ngetSeconds(): number;\n/** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\ngetUTCSeconds(): number;\n/** Gets the milliseconds of a Date, using local time. */\ngetMilliseconds(): number;\n/** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\ngetUTCMilliseconds(): number;\n/** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\ngetTimezoneOffset(): number;\n/** \n  * Sets the date and time value in the Date object.\n  * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT. \n  */\nsetTime(time: number): number;\n/**\n  * Sets the milliseconds value in the Date object using local time. \n  * @param ms A numeric value equal to the millisecond value.\n  */\nsetMilliseconds(ms: number): number;\n/** \n  * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n  * @param ms A numeric value equal to the millisecond value. \n  */\nsetUTCMilliseconds(ms: number): number;\n\n/**\n  * Sets the seconds value in the Date object using local time. \n  * @param sec A numeric value equal to the seconds value.\n  * @param ms A numeric value equal to the milliseconds value.\n  */\nsetSeconds(sec: number, ms?: number): number;\n/**\n  * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n  * @param sec A numeric value equal to the seconds value.\n  * @param ms A numeric value equal to the milliseconds value.\n  */\nsetUTCSeconds(sec: number, ms?: number): number;\n/**\n  * Sets the minutes value in the Date object using local time. \n  * @param min A numeric value equal to the minutes value. \n  * @param sec A numeric value equal to the seconds value. \n  * @param ms A numeric value equal to the milliseconds value.\n  */\nsetMinutes(min: number, sec?: number, ms?: number): number;\n/**\n  * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n  * @param min A numeric value equal to the minutes value. \n  * @param sec A numeric value equal to the seconds value. \n  * @param ms A numeric value equal to the milliseconds value.\n  */\nsetUTCMinutes(min: number, sec?: number, ms?: number): number;\n/**\n  * Sets the hour value in the Date object using local time.\n  * @param hours A numeric value equal to the hours value.\n  * @param min A numeric value equal to the minutes value.\n  * @param sec A numeric value equal to the seconds value. \n  * @param ms A numeric value equal to the milliseconds value.\n  */\nsetHours(hours: number, min?: number, sec?: number, ms?: number): number;\n/**\n  * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n  * @param hours A numeric value equal to the hours value.\n  * @param min A numeric value equal to the minutes value.\n  * @param sec A numeric value equal to the seconds value. \n  * @param ms A numeric value equal to the milliseconds value.\n  */\nsetUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n/**\n  * Sets the numeric day-of-the-month value of the Date object using local time. \n  * @param date A numeric value equal to the day of the month.\n  */\nsetDate(date: number): number;\n/** \n  * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n  * @param date A numeric value equal to the day of the month. \n  */\nsetUTCDate(date: number): number;\n/** \n  * Sets the month value in the Date object using local time. \n  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. \n  * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n  */\nsetMonth(month: number, date?: number): number;\n/**\n  * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n  * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n  */\nsetUTCMonth(month: number, date?: number): number;\n/**\n  * Sets the year of the Date object using local time.\n  * @param year A numeric value for the year.\n  * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n  * @param date A numeric value equal for the day of the month.\n  */\nsetFullYear(year: number, month?: number, date?: number): number;\n/**\n  * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n  * @param year A numeric value equal to the year.\n  * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n  * @param date A numeric value equal to the day of the month.\n  */\nsetUTCFullYear(year: number, month?: number, date?: number): number;\n/** Returns a date converted to a string using Universal Coordinated Time (UTC). */\ntoUTCString(): string;\n/** Returns a date as a string value in ISO format. */\ntoISOString(): string;\n/** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\ntoJSON(key?: any): string;\n```\n\n----------------------------------------\n\nTITLE: String Interface Extension in TypeScript\nDESCRIPTION: Adds padStart and padEnd methods to the String interface for padding strings to a specified length with a fill string.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_242\n\nLANGUAGE: typescript\nCODE:\n```\ninterface String {\n    padStart(maxLength: number, fillString?: string): string;\n    padEnd(maxLength: number, fillString?: string): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Uint32Array Interface Definition\nDESCRIPTION: Defines the beginning of Uint32Array interface with core properties and methods for typed array operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_217\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint32Array {\n    BYTES_PER_ELEMENT: number;\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): Uint32Array;\n    entries(): Iterator<[number, number]>;\n    every(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): Uint32Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Array Elements in TypeScript\nDESCRIPTION: Demonstrates how to use the sort method to arrange array elements in ascending order. The compareFn parameter is a function that determines the order of elements.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n[11,2,22,1].sort((a, b) => a - b)\n```\n\n----------------------------------------\n\nTITLE: Defining TypedPropertyDescriptor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for property descriptors that are used with Object.defineProperty and similar methods. It defines the structure for property configuration including attributes like enumerable, configurable, and writable.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TypedPropertyDescriptor<T> {\n    enumerable?: boolean;\n    configurable?: boolean;\n    writable?: boolean;\n    value?: T;\n    get?: () => T;\n    set?: (value: T) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array length Property Definition\nDESCRIPTION: Defines the length property of the Float32Array which indicates the number of elements in the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_139\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n```\n\n----------------------------------------\n\nTITLE: Running Windmill Backend with Environment Variables in Shell\nDESCRIPTION: This command runs the Windmill backend using Cargo, setting the DATABASE_URL environment variable and configuring logging. It connects to the specified database and starts the backend server with info-level logging.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nenv DATABASE_URL=<DATABASE_URL_TO_YOUR_WINDMILL_DB> RUST_LOG=info cargo run\n```\n\n----------------------------------------\n\nTITLE: Defining String Manipulation Utility Types in TypeScript\nDESCRIPTION: TypeScript utility types for string manipulation, including Uppercase, Lowercase, Capitalize, and Uncapitalize. These intrinsic types transform string literal types without affecting runtime values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Convert string literal type to uppercase\n */\ntype Uppercase<S extends string> = intrinsic;\n\n/**\n * Convert string literal type to lowercase\n */\ntype Lowercase<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to uppercase\n */\ntype Capitalize<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to lowercase\n */\ntype Uncapitalize<S extends string> = intrinsic;\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the JSON object. This interface defines methods for parsing JSON strings into JavaScript objects and for converting JavaScript values to JSON strings.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JSON {\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     * @param reviver A function that transforms the results. This function is called for each member of the object.\n     * If a member contains nested objects, the nested objects are transformed before the parent object is.\n     */\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer A function that transforms the results.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n */\ndeclare var JSON: JSON;\n```\n\n----------------------------------------\n\nTITLE: Defining Error Interfaces and Constructors in TypeScript\nDESCRIPTION: TypeScript interface definitions for the base Error interface and specialized error types. This includes interface declarations for Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, and URIError, along with their constructors.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Error {\n    name: string;\n    message: string;\n    stack?: string;\n}\n\ninterface ErrorConstructor {\n    new (message?: string): Error;\n    (message?: string): Error;\n    readonly prototype: Error;\n}\n\ndeclare var Error: ErrorConstructor;\n\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor extends ErrorConstructor {\n    new (message?: string): EvalError;\n    (message?: string): EvalError;\n    readonly prototype: EvalError;\n}\n\ndeclare var EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor extends ErrorConstructor {\n    new (message?: string): RangeError;\n    (message?: string): RangeError;\n    readonly prototype: RangeError;\n}\n\ndeclare var RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor extends ErrorConstructor {\n    new (message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    readonly prototype: ReferenceError;\n}\n\ndeclare var ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor extends ErrorConstructor {\n    new (message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    readonly prototype: SyntaxError;\n}\n\ndeclare var SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor extends ErrorConstructor {\n    new (message?: string): TypeError;\n    (message?: string): TypeError;\n    readonly prototype: TypeError;\n}\n\ndeclare var TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor extends ErrorConstructor {\n    new (message?: string): URIError;\n    (message?: string): URIError;\n    readonly prototype: URIError;\n}\n\ndeclare var URIError: URIErrorConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining toLocaleString Method for Array Buffer Types in TypeScript\nDESCRIPTION: A collection of TypeScript interface declarations extending typed array objects with the toLocaleString method. Each interface follows the same pattern, allowing for locale-specific string formatting of numeric values within different array buffer types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_258\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Int16Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint16Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Int32Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint32Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Float32Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Float64Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBuffer and Related Types in TypeScript\nDESCRIPTION: TypeScript interfaces for ArrayBuffer, ArrayBufferView, and DataView types. These interfaces define the structure for working with binary data in JavaScript, including methods for reading different number types from binary buffers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents a raw buffer of binary data, which is used to store data for the\n * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n * but can be passed to a typed array or DataView Object to interpret the raw\n * buffer as needed.\n */\ninterface ArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an ArrayBuffer.\n     */\n    slice(begin: number, end?: number): ArrayBuffer;\n}\n\n/**\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\n */\ninterface ArrayBufferTypes {\n    ArrayBuffer: ArrayBuffer;\n}\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\n\ninterface ArrayBufferConstructor {\n    readonly prototype: ArrayBuffer;\n    new (byteLength: number): ArrayBuffer;\n    isView(arg: any): arg is ArrayBufferView;\n}\ndeclare var ArrayBuffer: ArrayBufferConstructor;\n\ninterface ArrayBufferView {\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    byteOffset: number;\n}\n\ninterface DataView {\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    /**\n     * Gets the Float32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Float64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Int8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getInt8(byteOffset: number): number;\n\n    /**\n     * Gets the Int16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\n    /**\n     * Gets the Int32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getUint8(byteOffset: number): number;\n\n    /**\n     * Gets the Uint16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     */\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringConstructor Interface Method in TypeScript\nDESCRIPTION: This snippet defines a method for the StringConstructor interface, which returns a String value whose elements are the elements in the List elements.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_192\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface StringConstructor {\n    /**\n      * Return the String value whose elements are, in order, the elements in the List elements.\n\n```\n\n----------------------------------------\n\nTITLE: Implementing some Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'some' method which tests whether at least one element in the array passes the test implemented by the provided function. Returns true if the callback function returns a truthy value for at least one element.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nsome(predicate: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing map Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'map' method which creates a new array with the results of calling a provided function on every element. Returns a new Uint16Array with each element transformed by the callback function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nmap(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\n```\n\n----------------------------------------\n\nTITLE: SharedArrayBuffer Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for SharedArrayBuffer including byteLength property and slice method, with Symbol.species and Symbol.toStringTag implementations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_240\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharedArrayBuffer {\n    readonly byteLength: number;\n    slice(begin: number, end?: number): SharedArrayBuffer;\n    readonly [Symbol.species]: SharedArrayBuffer;\n    readonly [Symbol.toStringTag]: \"SharedArrayBuffer\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProxyHandler Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ProxyHandler, which defines the traps for various operations on a proxy object. It includes optional methods like get, set, apply, and construct that intercept interactions with the proxy target.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_229\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProxyHandler<T> {\n    getPrototypeOf? (target: T): any;\n    setPrototypeOf? (target: T, v: any): boolean;\n    isExtensible? (target: T): boolean;\n    preventExtensions? (target: T): boolean;\n    getOwnPropertyDescriptor? (target: T, p: PropertyKey): PropertyDescriptor;\n    has? (target: T, p: PropertyKey): boolean;\n    get? (target: T, p: PropertyKey, receiver: any): any;\n    set? (target: T, p: PropertyKey, value: any, receiver: any): boolean;\n    deleteProperty? (target: T, p: PropertyKey): boolean;\n    defineProperty? (target: T, p: PropertyKey, attributes: PropertyDescriptor): boolean;\n    enumerate? (target: T): PropertyKey[];\n    ownKeys? (target: T): PropertyKey[];\n    apply? (target: T, thisArg: any, argArray?: any): any;\n    construct? (target: T, thisArg: any, argArray?: any): any;\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring CPU Usage in Node.js\nDESCRIPTION: Example showing how to use process.cpuUsage() to measure CPU time in user and system code, and how to calculate the difference between two measurements.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport { cpuUsage } from 'node:process';\n\nconst startUsage = cpuUsage();\n// { user: 38579, system: 6986 }\n\n// spin the CPU for 500 milliseconds\nconst now = Date.now();\nwhile (Date.now() - now < 500);\n\nconsole.log(cpuUsage(startUsage));\n// { user: 514883, system: 11226 }\n```\n\n----------------------------------------\n\nTITLE: Implementing filter Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'filter' method which returns elements that meet the condition specified in a callback function. The filter method creates a new array with all elements that pass the test.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nfilter(predicate: (value: number, index: number, array: Uint16Array) => any, thisArg?: any): Uint16Array;\n```\n\n----------------------------------------\n\nTITLE: Defining Object Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for various Object methods including assign, getOwnPropertySymbols, keys, is, and setPrototypeOf. These methods are part of the standard Object interface in TypeScript.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_251\n\nLANGUAGE: typescript\nCODE:\n```\nassign<T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n/**\n * Copy the values of all of the enumerable own properties from one or more source objects to a\n * target object. Returns the target object.\n * @param target The target object to copy to.\n * @param sources One or more source objects from which to copy properties\n */\nassign(target: object, ...sources: any[]): any;\n\n/**\n * Returns an array of all symbol properties found directly on object o.\n * @param o Object to retrieve the symbols from.\n */\ngetOwnPropertySymbols(o: any): symbol[];\n\n/**\n * Returns the names of the enumerable string properties and methods of an object.\n * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n */\nkeys(o: {}): string[];\n\n/**\n * Returns true if the values are the same value, false otherwise.\n * @param value1 The first value.\n * @param value2 The second value.\n */\nis(value1: any, value2: any): boolean;\n\n/**\n * Sets the prototype of a specified object o to object proto or null. Returns the object o.\n * @param o The object to change its prototype.\n * @param proto The value of the new prototype or null.\n */\nsetPrototypeOf(o: any, proto: object | null): any;\n```\n\n----------------------------------------\n\nTITLE: Using process.nextTick in API Development\nDESCRIPTION: Example showing how process.nextTick() can be used when developing APIs to ensure proper asynchronous behavior, allowing users to assign event handlers after object construction.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { nextTick } from 'node:process';\n\nfunction MyThing(options) {\n  this.setupOptions(options);\n\n  nextTick(() => {\n    this.startDoingStuff();\n  });\n}\n\nconst thing = new MyThing();\nthing.getReadyForStuff();\n\n// thing.startDoingStuff() gets called now, not before.\n```\n\n----------------------------------------\n\nTITLE: Implementing join Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'join' method which creates and returns a new string by concatenating all elements in the array, separated by a specified separator string. Default separator is a comma.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\njoin(separator?: string): string;\n```\n\n----------------------------------------\n\nTITLE: String Global Variable Declaration in TypeScript\nDESCRIPTION: Declares the global String variable with its constructor type. This declaration allows for manipulation and formatting of text strings throughout JavaScript applications.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_161\n\nLANGUAGE: typescript\nCODE:\n```\n/** \n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings. \n  */\ndeclare var String: StringConstructor;\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLx for Offline CI in Windmill\nDESCRIPTION: Command to prepare SQLx for offline continuous integration. This generates SQL query metadata that allows compilation without a database connection in CI environments.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo sqlx prepare --workspace -- --bin windmill --features enterprise\n```\n\n----------------------------------------\n\nTITLE: Defining ProxyConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ProxyConstructor, providing the constructor signature for creating Proxy objects and a static revocable method for creating revocable proxies.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_230\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProxyConstructor {\n    revocable<T>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\n    new <T>(target: T, handeler: ProxyHandler<T>): T\n}\ndeclare var Proxy: ProxyConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Static Methods in TypeScript\nDESCRIPTION: Specifies static methods for Uint8Array, including 'of' for creating arrays from a set of elements and 'from' for converting array-like objects to Uint8Arrays.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a new array from a set of elements.\n * @param items A set of elements to include in the new array object.\n */\nof(...items: number[]): Uint8Array;\n\n/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n */\nfrom(arrayLike: ArrayLike<number>): Uint8Array;\n\n/**\n * Creates an array from an array-like or iterable object.\n * @param arrayLike An array-like or iterable object to convert to an array.\n * @param mapfn A mapping function to call on every element of the array.\n * @param thisArg Value of 'this' used to invoke the mapfn.\n */\nfrom<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Implementing some Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the some method of Uint32Array. This method tests whether at least one element in the array passes the test implemented by the provided function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nsome(predicate: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: String Interface Methods in TypeScript\nDESCRIPTION: Definition of string manipulation methods including substring, case conversion, and trimming. These methods are part of the String interface in TypeScript's standard library.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nsplit(separator: string | RegExp, limit?: number): string[];\n\n/**\n * Returns the substring at the specified location within a String object.\n * @param start The zero-based index number indicating the beginning of the substring.\n * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n * If end is omitted, the characters from start through the end of the original string are returned.\n */\nsubstring(start: number, end?: number): string;\n\n/** Converts all the alphabetic characters in a string to lowercase. */\ntoLowerCase(): string;\n\n/** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\ntoLocaleLowerCase(locales?: string | string[]): string;\n\n/** Converts all the alphabetic characters in a string to uppercase. */\ntoUpperCase(): string;\n\n/** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\ntoLocaleUpperCase(locales?: string | string[]): string;\n\n/** Removes the leading and trailing white space and line terminator characters from a string. */\ntrim(): string;\n\n/** Returns the length of a String object. */\nreadonly length: number;\n\n// IE extensions\n/**\n * Gets a substring beginning at the specified location and having the specified length.\n * @deprecated A legacy feature for browser compatibility\n * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n * @param length The number of characters to include in the returned substring.\n */\nsubstr(from: number, length?: number): string;\n\n/** Returns the primitive value of the specified object. */\nvalueOf(): string;\n\nreadonly [index: number]: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Intl DateTimeFormat Interfaces in TypeScript\nDESCRIPTION: This snippet defines interfaces for Intl.DateTimeFormat, including DateTimeFormatPartTypes and DateTimeFormatPart interfaces.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_238\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace Intl {\n    interface DateTimeFormatPartTypesRegistry {\n        day: any;\n        dayPeriod: any;\n        era: any;\n        hour: any;\n        literal: any;\n        minute: any;\n        month: any;\n        second: any;\n        timeZoneName: any;\n        weekday: any;\n        year: any;\n    }\n\n    type DateTimeFormatPartTypes = keyof DateTimeFormatPartTypesRegistry;\n\n    interface DateTimeFormatPart {\n        type: DateTimeFormatPartTypes;\n        value: string;\n    }\n\n    interface DateTimeFormat {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing findIndex Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'findIndex' method which returns the index of the first element that satisfies the provided testing function. Returns -1 if no element passes the test.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nfindIndex(predicate: (value: number, index: number, obj: Uint16Array) => boolean, thisArg?: any): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Methods in TypeScript\nDESCRIPTION: Specifies various methods for Uint8ClampedArray, including array manipulation methods like copyWithin, fill, filter, and find. Also includes higher-order functions like map, reduce, and forEach.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\ncopyWithin(target: number, start: number, end?: number): this;\n\nevery(predicate: (value: number, index: number, array: Uint8ClampedArray) => unknown, thisArg?: any): boolean;\n\nfill(value: number, start?: number, end?: number): this;\n\nfilter(predicate: (value: number, index: number, array: Uint8ClampedArray) => any, thisArg?: any): Uint8ClampedArray;\n\nfind(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number | undefined;\n\nfindIndex(predicate: (value: number, index: number, obj: Uint8ClampedArray) => boolean, thisArg?: any): number;\n\nforEach(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => void, thisArg?: any): void;\n\nmap(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => number, thisArg?: any): Uint8ClampedArray;\n\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Defining Intl.DateTimeFormat Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for Intl.DateTimeFormat, including DateTimeFormatOptions, ResolvedDateTimeFormatOptions, DateTimeFormat, and DateTimeFormatConstructor. It specifies options for date and time formatting and methods for creating and using DateTimeFormat objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_152\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DateTimeFormatOptions {\n    localeMatcher?: \"best fit\" | \"lookup\" | undefined;\n    weekday?: \"long\" | \"short\" | \"narrow\" | undefined;\n    era?: \"long\" | \"short\" | \"narrow\" | undefined;\n    year?: \"numeric\" | \"2-digit\" | undefined;\n    month?: \"numeric\" | \"2-digit\" | \"long\" | \"short\" | \"narrow\" | undefined;\n    day?: \"numeric\" | \"2-digit\" | undefined;\n    hour?: \"numeric\" | \"2-digit\" | undefined;\n    minute?: \"numeric\" | \"2-digit\" | undefined;\n    second?: \"numeric\" | \"2-digit\" | undefined;\n    timeZoneName?: \"short\" | \"long\" | \"shortOffset\" | \"longOffset\" | \"shortGeneric\" | \"longGeneric\" | undefined;\n    formatMatcher?: \"best fit\" | \"basic\" | undefined;\n    hour12?: boolean | undefined;\n    timeZone?: string | undefined;\n}\n\ninterface ResolvedDateTimeFormatOptions {\n    locale: string;\n    calendar: string;\n    numberingSystem: string;\n    timeZone: string;\n    hour12?: boolean;\n    weekday?: string;\n    era?: string;\n    year?: string;\n    month?: string;\n    day?: string;\n    hour?: string;\n    minute?: string;\n    second?: string;\n    timeZoneName?: string;\n}\n\ninterface DateTimeFormat {\n    format(date?: Date | number): string;\n    resolvedOptions(): ResolvedDateTimeFormatOptions;\n}\n\ninterface DateTimeFormatConstructor {\n    new (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n    (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n    supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\n    readonly prototype: DateTimeFormat;\n}\n\nvar DateTimeFormat: DateTimeFormatConstructor;\n```\n\n----------------------------------------\n\nTITLE: Template Literals and Import Interfaces in TypeScript\nDESCRIPTION: TypeScript declarations for template string arrays, import.meta, and import call options, providing type definitions for ES6+ features related to module imports and template literals.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TemplateStringsArray extends ReadonlyArray<string> {\n    readonly raw: readonly string[];\n}\n\n/**\n * The type of `import.meta`.\n *\n * If you need to declare that a given property exists on `import.meta`,\n * this type may be augmented via interface merging.\n */\ninterface ImportMeta {\n}\n\n/**\n * The type for the optional second argument to `import()`.\n *\n * If your host environment supports additional options, this type may be\n * augmented via interface merging.\n */\ninterface ImportCallOptions {\n    /** @deprecated*/ assert?: ImportAssertions;\n    with?: ImportAttributes;\n}\n\n/**\n * The type for the `assert` property of the optional second argument to `import()`.\n * @deprecated\n */\ninterface ImportAssertions {\n    [key: string]: string;\n}\n\n/**\n * The type for the `with` property of the optional second argument to `import()`.\n */\ninterface ImportAttributes {\n    [key: string]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Command-Line Arguments with process.argv\nDESCRIPTION: Demonstrates how to access and iterate through command-line arguments passed to a Node.js application using the process.argv array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { argv } from 'node:process';\n\n// print process.argv\nargv.forEach((val, index) => {\n  console.log(`${index}: ${val}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing reverse Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the reverse method of Uint32Array. This method reverses an array in place and returns the modified array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nreverse(): Uint32Array;\n```\n\n----------------------------------------\n\nTITLE: Defining Date Object Interface in TypeScript\nDESCRIPTION: This snippet defines the interface for the Date object in TypeScript. It includes methods for getting and setting date components, formatting dates, and performing time-related calculations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Date {\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\n    toLocaleTimeString(): string;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    valueOf(): number;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    getTime(): number;\n    /** Gets the year, using local time. */\n    getFullYear(): number;\n    /** Gets the year using Universal Coordinated Time (UTC). */\n    getUTCFullYear(): number;\n    /** Gets the month, using local time. */\n    getMonth(): number;\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMonth(): number;\n    /** Gets the day-of-the-month, using local time. */\n    getDate(): number;\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n    getUTCDate(): number;\n    /** Gets the day of the week, using local time. */\n    getDay(): number;\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\n    getUTCDay(): number;\n    /** Gets the hours in a date, using local time. */\n    getHours(): number;\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n    getUTCHours(): number;\n    /** Gets the minutes of a Date object, using local time. */\n    getMinutes(): number;\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMinutes(): number;\n    /** Gets the seconds of a Date object, using local time. */\n    getSeconds(): number;\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCSeconds(): number;\n    /** Gets the milliseconds of a Date, using local time. */\n    getMilliseconds(): number;\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMilliseconds(): number;\n    /** Gets the difference in minutes between Universal Coordinated Time (UTC) and the time on the local computer. */\n    getTimezoneOffset(): number;\n    /**\n     * Sets the date and time value in the Date object.\n     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\n     */\n    setTime(time: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using local time.\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setMilliseconds(ms: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setUTCMilliseconds(ms: number): number;\n\n    /**\n     * Sets the seconds value in the Date object using local time.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using local time.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hour value in the Date object using local time.\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the numeric day-of-the-month value of the Date object using local time.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setDate(date: number): number;\n    /**\n     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCDate(date: number): number;\n    /**\n     * Sets the month value in the Date object using local time.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n     */\n    setMonth(month: number, date?: number): number;\n    /**\n     * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n     */\n    setUTCMonth(month: number, date?: number): number;\n    /**\n     * Sets the year of the Date object using local time.\n     * @param year A numeric value for the year.\n     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n     * @param date A numeric value equal for the day of the month.\n     */\n    setFullYear(year: number, month?: number, date?: number): number;\n    /**\n     * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n     * @param year A numeric value equal to the year.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCFullYear(year: number, month?: number, date?: number): number;\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n    toUTCString(): string;\n    /** Returns a date as a string value in ISO format. */\n    toISOString(): string;\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\n    toJSON(key?: any): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConcatArray Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ConcatArray, a utility type used by Array.concat. It specifies a minimal set of properties and methods needed for an object to be used with Array's concat method, including length, indexed access, join, and slice methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConcatArray<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n    join(separator?: string): string;\n    slice(start?: number, end?: number): T[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing lastIndexOf Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'lastIndexOf' method which returns the last index at which a given element can be found in the array, or -1 if it is not present. Searches the array backward, starting at a specified index.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nlastIndexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Map Method in TypeScript\nDESCRIPTION: TypeScript method definition for mapping over Int16Array elements. This method creates a new Int16Array with the results of calling a provided function on every element in the calling array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calls a defined callback function on each element of an array, and returns an array that\n * contains the results.\n * @param callbackfn A function that accepts up to three arguments. The map method calls the\n * callbackfn function one time for each element in the array.\n * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n * If thisArg is omitted, undefined is used as the this value.\n */\nmap(callbackfn: (value: number, index: number, array: Int16Array) => number, thisArg?: any): Int16Array;\n```\n\n----------------------------------------\n\nTITLE: Float64Array Method Definitions in TypeScript\nDESCRIPTION: TypeScript interface definitions for Float64Array methods including reduce, reduceRight, reverse, set, slice, some, sort, subarray and conversion methods. Includes detailed parameter and return type definitions with JSDoc comments.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_148\n\nLANGUAGE: typescript\nCODE:\n```\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue: number): number;\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Defining Array and ArrayConstructor Interfaces in TypeScript\nDESCRIPTION: TypeScript interface definitions for Array type and ArrayConstructor. This defines the structure of array objects and the Array constructor function, including methods like reduceRight and isArray.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ArrayConstructor {\n    new (arrayLength?: number): any[];\n    new <T>(arrayLength: number): T[];\n    new <T>(...items: T[]): T[];\n    (arrayLength?: number): any[];\n    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): arg is any[];\n    readonly prototype: any[];\n}\n\ndeclare var Array: ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Float32Array Static Methods\nDESCRIPTION: Definition of static methods 'of' and 'from' for creating Float32Array instances from various input types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_147\n\nLANGUAGE: typescript\nCODE:\n```\nof(...items: number[]): Float32Array;\nfrom(arrayLike: ArrayLike<number>): Float32Array;\nfrom<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array String Conversion Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for converting Int16Array to string. These methods convert the array to a string representation, either using the current locale or a standard string conversion.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a number to a string by using the current locale.\n */\ntoLocaleString(): string;\n\n/**\n * Returns a string representation of an array.\n */\ntoString(): string;\n\n/** Returns the primitive value of the specified object. */\nvalueOf(): Int16Array;\n```\n\n----------------------------------------\n\nTITLE: Iterator and Generator Interfaces\nDESCRIPTION: Defines TypeScript interfaces for iteration protocols including Iterator, Iterable, and Generator types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_194\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IteratorResult<T> {\n    done: boolean;\n    value?: T;\n}\n\ninterface Iterator<T> {\n    next(): IteratorResult<T>;\n}\n\ninterface Iterable<T> {\n}\n\ninterface Generator<T> extends Iterator<T> {\n    next(value?: any): IteratorResult<T>;\n    throw(exception: any): IteratorResult<T>;\n    return(value: T): IteratorResult<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Node.js process.release Object Structure\nDESCRIPTION: This snippet shows the structure of the process.release object in Node.js, containing metadata about the current release including URLs for source and headers-only tarballs. This object provides information about the Node.js version being used.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'node',\n  lts: 'Hydrogen',\n  sourceUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0.tar.gz',\n  headersUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0-headers.tar.gz',\n  libUrl: 'https://nodejs.org/download/release/v18.12.0/win-x64/node.lib'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing forEach Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the forEach method of Uint32Array. This method executes a provided function once for each array element with optional this binding.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Jobs for Windmill\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from Windmill servers and workers using Docker service discovery.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/job-monitoring-prometheus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: \"windmill_server\"\n    docker_sd_configs:\n      - host: unix:///var/run/docker.sock\n    relabel_configs:\n      - source_labels: [__meta_docker_container_label_prometheus_job]\n        regex: windmill_server\n        action: keep\n    scrape_interval: 1s\n\n  - job_name: \"windmill_worker\"\n    docker_sd_configs:\n      - host: unix:///var/run/docker.sock\n    relabel_configs:\n      - source_labels: [__meta_docker_container_label_prometheus_job]\n        regex: windmill_worker\n        action: keep\n    scrape_interval: 1s\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Backend Proxy\nDESCRIPTION: Command to start the development server with custom backend API and LSP endpoints for local development.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nREMOTE=http://127.0.0.1:8000 REMOTE_LSP=http://127.0.0.1:3001 npm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyDescriptor and Object Interfaces in TypeScript\nDESCRIPTION: This snippet defines the PropertyDescriptor and PropertyDescriptorMap interfaces, as well as extends the Object interface with standard methods like toString, valueOf, and property-related methods. It also defines the ObjectConstructor interface for creating and manipulating objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PropertyDescriptor {\n    configurable?: boolean;\n    enumerable?: boolean;\n    value?: any;\n    writable?: boolean;\n    get? (): any;\n    set? (v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [s: string]: PropertyDescriptor;\n}\n\ninterface Object {\n    constructor: Function;\n    toString(): string;\n    toLocaleString(): string;\n    valueOf(): Object;\n    hasOwnProperty(v: string): boolean;\n    isPrototypeOf(v: Object): boolean;\n    propertyIsEnumerable(v: string): boolean;\n}\n\ninterface ObjectConstructor {\n    new (value?: any): Object;\n    (): any;\n    (value: any): any;\n    prototype: Object;\n    getPrototypeOf(o: any): any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegExpConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the RegExp constructor, which defines how new regular expression objects can be created. It includes both constructor and function call signatures.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_254\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegExpConstructor {\n    new (pattern: RegExp | string, flags?: string): RegExp;\n    (pattern: RegExp | string, flags?: string): RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Reverse Method in TypeScript\nDESCRIPTION: TypeScript method definition for reversing elements in an Int16Array. This method reverses the order of elements in the array in place and returns the reference to the same array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reverses the elements in an Array.\n */\nreverse(): Int16Array;\n```\n\n----------------------------------------\n\nTITLE: Declaring URI Encoding/Decoding Functions in TypeScript\nDESCRIPTION: Type declarations for global functions related to URI manipulation including decodeURI, decodeURIComponent, encodeURI, and encodeURIComponent.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n * @param encodedURI A value representing an encoded URI.\n */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n * @param encodedURIComponent A value representing an encoded URI component.\n */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/**\n * Encodes a text string as a valid Uniform Resource Identifier (URI)\n * @param uri A value representing an unencoded URI.\n */\ndeclare function encodeURI(uri: string): string;\n\n/**\n * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n * @param uriComponent A value representing an unencoded URI component.\n */\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\n```\n\n----------------------------------------\n\nTITLE: Using Node.js process.resourceUsage Method for Resource Monitoring\nDESCRIPTION: This code snippet demonstrates how to use the process.resourceUsage() method to obtain detailed resource usage statistics for the current Node.js process. It returns various metrics like CPU time, memory usage, and I/O operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resourceUsage } from 'node:process';\n\nconsole.log(resourceUsage());\n/*\n  Will output:\n  {\n    userCPUTime: 82872,\n    systemCPUTime: 4143,\n    maxRSS: 33164,\n    sharedMemorySize: 0,\n    unsharedDataSize: 0,\n    unsharedStackSize: 0,\n    minorPageFault: 2469,\n    majorPageFault: 0,\n    swappedOut: 0,\n    fsRead: 0,\n    fsWrite: 8,\n    ipcSent: 0,\n    ipcReceived: 0,\n    signalsCount: 0,\n    voluntaryContextSwitches: 79,\n    involuntaryContextSwitches: 1\n  }\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Join Method in TypeScript\nDESCRIPTION: TypeScript method definition for joining array elements with a separator string. The method concatenates all elements of the Int16Array into a single string with an optional separator.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Adds all the elements of an array separated by the specified separator string.\n * @param separator A string used to separate one element of an array from the next in the\n * resulting String. If omitted, the array elements are separated with a comma.\n */\njoin(separator?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Int32Array Additional Methods\nDESCRIPTION: Defines additional Int32Array method signatures including reverse, set, slice, some, sort, subarray and conversion methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_215\n\nLANGUAGE: typescript\nCODE:\n```\nreverse(): Int32Array;\n\nset(index: number, value: number): void;\n\nset(array: Int32Array, offset?: number): void;\n\nslice(start?: number, end?: number): Int32Array;\n\nsome(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\n\nsort(compareFn?: (a: number, b: number) => number): Int32Array;\n\nsubarray(begin: number, end?: number): Int32Array;\n```\n\n----------------------------------------\n\nTITLE: Setting User ID in Node.js\nDESCRIPTION: Shows how to change the process user ID using process.setuid(). Accepts numeric ID or username string as parameter.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getuid && process.setuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n  try {\n    process.setuid(501);\n    console.log(`New uid: ${process.getuid()}`);\n  } catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Symbol Interface in TypeScript\nDESCRIPTION: Type definition for the JavaScript Symbol interface which includes methods for converting symbols to strings and primitive values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Symbol {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): symbol;\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Interface and Constructor in TypeScript\nDESCRIPTION: Defines the Boolean interface and BooleanConstructor interface, which specify how boolean values are created and manipulated in JavaScript.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_162\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Boolean {\n}\n\ninterface BooleanConstructor {\n    new (value?: any): Boolean;\n    (value?: any): boolean;\n    prototype: Boolean;\n}\n\ndeclare var Boolean: BooleanConstructor;\n```\n\n----------------------------------------\n\nTITLE: Float32Array set Method Signature\nDESCRIPTION: Provides the signature for the set method that copies values from an array-like object into the Float32Array starting at a specified index.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_144\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n```\n\n----------------------------------------\n\nTITLE: Object Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for Object methods. Defines the hasOwnProperty and propertyIsEnumerable methods that check property existence and enumerability on objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_184\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Object {\n    /**\n      * Determines whether an object has a property with the specified name. \n      * @param v A property name.\n      */\n    hasOwnProperty(v: PropertyKey): boolean;\n\n    /** \n      * Determines whether a specified property is enumerable.\n      * @param v A property name.\n      */\n    propertyIsEnumerable(v: PropertyKey): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WASM Package in Frontend\nDESCRIPTION: npm command to install the locally built WASM package in the frontend project.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ../backend/parsers/windmill-parser-wasm/pkg\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array LastIndexOf Method in TypeScript\nDESCRIPTION: TypeScript method definition for finding the last occurrence of a value in an Int16Array. This method searches the array in reverse order and returns the index of the last occurrence of the specified value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns the index of the last occurrence of a value in an array.\n * @param searchElement The value to locate in the array.\n * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n * search starts at index 0.\n */\nlastIndexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Implementing indexOf Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the indexOf method of Uint32Array. This method returns the first index at which a given element can be found in the array, or -1 if it is not present.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nindexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Float32Array Sort Method Example\nDESCRIPTION: Example showing how to use the sort method on a Float32Array to sort numbers in ascending order.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_145\n\nLANGUAGE: typescript\nCODE:\n```\n[11,2,22,1].sort((a, b) => a - b)\n```\n\n----------------------------------------\n\nTITLE: Defining WeakRef Types in TypeScript\nDESCRIPTION: TypeScript interface for WeakKey types used with WeakSet, WeakMap, WeakRef, and FinalizationRegistry. These types help maintain references that don't prevent garbage collection when the referenced object is no longer used elsewhere.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Stores types to be used with WeakSet, WeakMap, WeakRef, and FinalizationRegistry\n */\ninterface WeakKeyTypes {\n    object: object;\n}\n\ntype WeakKey = WeakKeyTypes[keyof WeakKeyTypes];\n```\n\n----------------------------------------\n\nTITLE: Implementing sort Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the sort method of Uint32Array. This method sorts the elements of an array in place and returns the sorted array. It accepts an optional compare function that defines the sort order.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nsort(compareFn?: (a: number, b: number) => number): this;\n```\n\n----------------------------------------\n\nTITLE: Defining length Property for Uint16Array in TypeScript\nDESCRIPTION: Property definition for the 'length' property which represents the number of elements in the array. This is a read-only property that cannot be modified directly.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly length: number;\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from File in Node.js\nDESCRIPTION: Example showing how to use the loadEnvFile function to load environment variables from a specified .env file into process.env.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadEnvFile } from 'node:process';\n\nloadEnvFile('./development.env')\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Environment\nDESCRIPTION: Command to start the local development environment for a specific language using a custom Nu script.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_3\n\nLANGUAGE: nu\nCODE:\n```\n./dev.nu <language>\n```\n\n----------------------------------------\n\nTITLE: Int32Array slice Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the slice method of Int32Array, which returns a section of the array from start to end (exclusive).\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_103\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a section of an array.\n * @param start The beginning of the specified portion of the array.\n * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n */\nslice(start?: number, end?: number): Int32Array;\n```\n\n----------------------------------------\n\nTITLE: Implementing subarray Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the subarray method of Uint32Array. This method returns a new TypedArray view of the ArrayBuffer store, referencing elements between specified begin and end indices.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nsubarray(begin?: number, end?: number): Uint32Array;\n```\n\n----------------------------------------\n\nTITLE: Function Constructor Interface Definition\nDESCRIPTION: TypeScript interface definition for the Function constructor, allowing creation of new functions with variable arguments.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FunctionConstructor {\n    new (...args: string[]): Function;\n    (...args: string[]): Function;\n    readonly prototype: Function;\n}\n```\n\n----------------------------------------\n\nTITLE: String Interface Definition\nDESCRIPTION: Core TypeScript interface definition for String type including standard string manipulation methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninterface String {\n    toString(): string;\n    charAt(pos: number): string;\n    charCodeAt(index: number): number;\n    concat(...strings: string[]): string;\n    indexOf(searchString: string, position?: number): number;\n    lastIndexOf(searchString: string, position?: number): number;\n    localeCompare(that: string): number;\n    match(regexp: string | RegExp): RegExpMatchArray | null;\n    replace(searchValue: string | RegExp, replaceValue: string): string;\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n    search(regexp: string | RegExp): number;\n    slice(start?: number, end?: number): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Int32Array reduce Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the reduce method of Int32Array, which accumulates values by applying a callback function for each element in the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Number Global Variable Declaration in TypeScript\nDESCRIPTION: Declares the global Number variable with its constructor type. This declaration specifies that all JavaScript numbers are 64-bit floating-point values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_165\n\nLANGUAGE: typescript\nCODE:\n```\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: NumberConstructor;\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Process ID in Node.js\nDESCRIPTION: Example demonstrating how to access the parent process ID (PPID) using the process.ppid property.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ppid } from 'node:process';\n\nconsole.log(`The parent process is pid ${ppid}`);\n```\n\n----------------------------------------\n\nTITLE: Testing with Docker and Specific Features\nDESCRIPTION: Docker command to test the WASM package with specific features and language support.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker/dev.nu up --features \"<feature1>,<feature2>\" --wasm-pkg <language>\n```\n\n----------------------------------------\n\nTITLE: Int32Array subarray Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the subarray method of Int32Array, which creates a new view of the same buffer referencing elements from begin to end.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\n * at begin, inclusive, up to end, exclusive.\n * @param begin The index of the beginning of the array.\n * @param end The index of the end of the array.\n */\nsubarray(begin?: number, end?: number): Int32Array;\n```\n\n----------------------------------------\n\nTITLE: Implementing set Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'set' method which copies the values from an array-like source to the typed array. Takes an array of values to set and an optional offset position at which to begin writing values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nset(array: ArrayLike<number>, offset?: number): void;\n```\n\n----------------------------------------\n\nTITLE: Pushing Workspace Content in Windmill CLI\nDESCRIPTION: Command to push content to the current workspace in Windmill using the CLI tool.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/cli/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmill sync push\n```\n\n----------------------------------------\n\nTITLE: String Constructor Interface in TypeScript\nDESCRIPTION: Definition of the StringConstructor interface in TypeScript, which provides the structure for the String global object including its constructor, prototype and fromCharCode static method.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringConstructor {\n    new (value?: any): String;\n    (value?: any): string;\n    readonly prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n\n/**\n * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\n */\ndeclare var String: StringConstructor;\n```\n\n----------------------------------------\n\nTITLE: Implementing slice Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'slice' method which returns a shallow copy of a portion of an array into a new array. Takes optional start and end parameters to define the section to extract.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nslice(start?: number, end?: number): Uint16Array;\n```\n\n----------------------------------------\n\nTITLE: Declaring isNaN Function in TypeScript\nDESCRIPTION: Type declaration for the global isNaN function which determines whether a value is the reserved value NaN (not a number).\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\n * @param number A numeric value.\n */\ndeclare function isNaN(number: number): boolean;\n```\n\n----------------------------------------\n\nTITLE: Setting Effective User ID in Node.js\nDESCRIPTION: Example of changing the effective user ID using process.seteuid(). Accepts numeric ID or username string.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.geteuid && process.seteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n  try {\n    process.seteuid(501);\n    console.log(`New uid: ${process.geteuid()}`);\n  } catch (err) {\n    console.log(`Failed to set uid: ${err}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Uint16Array Elements in TypeScript\nDESCRIPTION: Demonstrates how to sort elements in a Uint16Array using a comparison function. The function determines the order of elements, expecting a negative value if the first argument is less than the second, zero if they're equal, and a positive value otherwise.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\n[11,2,22,1].sort((a, b) => a - b)\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates\nDESCRIPTION: Bash script execution to generate self-signed certificates for the private registry setup.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd certs\n# feel free to read the file anc change the \n./generate_certs.sh\n# choose a password for the RootCA key. You'll need to input it for pretty much all following steps\n```\n\n----------------------------------------\n\nTITLE: Implementing every Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'every' method which tests whether all elements in the array pass the test implemented by the provided function. Returns true if the callback function returns a truthy value for every array element; otherwise, false.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nevery(predicate: (value: number, index: number, array: Uint16Array) => unknown, thisArg?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining PropertyKey Type and Property Descriptor Interfaces in TypeScript\nDESCRIPTION: Type definitions for property-related concepts including PropertyKey type and interfaces for PropertyDescriptor and PropertyDescriptorMap.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare type PropertyKey = string | number | symbol;\n\ninterface PropertyDescriptor {\n    configurable?: boolean;\n    enumerable?: boolean;\n    value?: any;\n    writable?: boolean;\n    get?(): any;\n    set?(v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [key: PropertyKey]: PropertyDescriptor;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Interface and Constructor in TypeScript\nDESCRIPTION: TypeScript interface definition for the Error object and its constructor. Includes basic properties like name and message.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_174\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Error {\n    name: string;\n    message: string;\n}\n\ninterface ErrorConstructor {\n    new (message?: string): Error;\n    (message?: string): Error;\n    prototype: Error;\n}\n\ndeclare var Error: ErrorConstructor;\n```\n\n----------------------------------------\n\nTITLE: Float32Array join Method Definition\nDESCRIPTION: Defines the join method that creates and returns a new string by concatenating all of the elements in an array, separated by a specified separator string.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Declaring parseFloat Function in TypeScript\nDESCRIPTION: Type declaration for the global parseFloat function which converts a string to a floating-point number.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a string to a floating-point number.\n * @param string A string that contains a floating-point number.\n */\ndeclare function parseFloat(string: string): number;\n```\n\n----------------------------------------\n\nTITLE: Setting Effective Group ID in Node.js\nDESCRIPTION: Demonstrates changing the effective group ID using process.setegid(). Accepts group ID or name.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getegid && process.setegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n  try {\n    process.setegid(501);\n    console.log(`New gid: ${process.getegid()}`);\n  } catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataView Interface in TypeScript\nDESCRIPTION: This snippet defines the DataView interface, which provides low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_198\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DataView {\n    getFloat64(byteOffset: number, littleEndian: boolean): number;\n    getInt8(byteOffset: number): number;\n    getInt16(byteOffset: number, littleEndian: boolean): number;\n    getInt32(byteOffset: number, littleEndian: boolean): number;\n    getUint8(byteOffset: number): number;\n    getUint16(byteOffset: number, littleEndian: boolean): number;\n    getUint32(byteOffset: number, littleEndian: boolean): number;\n    setFloat32(byteOffset: number, value: number, littleEndian: boolean): void;\n    setFloat64(byteOffset: number, value: number, littleEndian: boolean): void;\n    setInt8(byteOffset: number, value: number): void;\n    setInt16(byteOffset: number, value: number, littleEndian: boolean): void;\n    setInt32(byteOffset: number, value: number, littleEndian: boolean): void;\n    setUint8(byteOffset: number, value: number): void;\n    setUint16(byteOffset: number, value: number, littleEndian: boolean): void;\n    setUint32(byteOffset: number, value: number, littleEndian: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing NPM Package to Private Registry\nDESCRIPTION: Commands to create a registry user and publish a package to the private NPM registry.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd helloworld_npm_package\n# you need to first create a registry user\n# you might need to run `npm config set strict-ssl false` if the below fails. If you do, then change it back to `true` after running the 2 commands\nnpm adduser --registry https://localhost/npm/\nnpm publish --registry https://localhost/npm/\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Set Method in TypeScript\nDESCRIPTION: TypeScript method definition for setting values in an Int16Array. This method copies a sequence of array values from a source array to the Int16Array starting at the specified target index.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets a value or an array of values.\n * @param array A typed or untyped array of values to set.\n * @param offset The index in the current array at which the values are to be written.\n */\nset(array: ArrayLike<number>, offset?: number): void;\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger and Windmill Services with Docker Compose\nDESCRIPTION: Command to start all required services including Jaeger and Windmill using Docker Compose in detached mode.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/otel-tracing-jaeger/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Process Group ID Management in Node.js\nDESCRIPTION: Shows how to get and set process group IDs on POSIX platforms using getgid() and setgid().\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getgid && process.setgid) {\n  console.log(`Current gid: ${process.getgid()}`);\n  try {\n    process.setgid(501);\n    console.log(`New gid: ${process.getgid()}`);\n  } catch (err) {\n    console.log(`Failed to set gid: ${err}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array fill Method Definition\nDESCRIPTION: Defines the fill method that fills all the elements of an array from a start index to an end index with a static value. Returns the modified array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_131\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n```\n\n----------------------------------------\n\nTITLE: Declaring Legacy escape/unescape Functions in TypeScript\nDESCRIPTION: Type declarations for deprecated global escape and unescape functions maintained for browser compatibility.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function escape(string: string): string;\n\n/**\n * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function unescape(string: string): string;\n```\n\n----------------------------------------\n\nTITLE: Getting Supplementary Groups in Node.js\nDESCRIPTION: Shows how to retrieve supplementary group IDs using process.getgroups(). POSIX platforms only.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getgroups) {\n  console.log(process.getgroups()); // [ 16, 21, 297 ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Uint8Array typed array, including its properties and the beginning of its method definitions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint8Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     */\n```\n\n----------------------------------------\n\nTITLE: Console Global Variable Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the global console variable, referencing the Console interface to provide type information for console methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var console: Console;\n```\n\n----------------------------------------\n\nTITLE: Float32Array reduceRight Method Definition\nDESCRIPTION: Defines the reduceRight method that applies a function against an accumulator and each element in the array (from right to left) to reduce it to a single value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_142\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Float32Array map Method Definition\nDESCRIPTION: Defines the map method that creates a new array with the results of calling a provided function on every element in the calling array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_140\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: Float32Array) => number, thisArg?: any): Float32Array;\n```\n\n----------------------------------------\n\nTITLE: Getting User ID in Node.js\nDESCRIPTION: Demonstrates how to retrieve the current process user ID using process.getuid(). Only available on POSIX platforms.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getuid) {\n  console.log(`Current uid: ${process.getuid()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Active Resources Information in Node.js\nDESCRIPTION: Demonstrates how to get information about active resources keeping the event loop alive using getActiveResourcesInfo().\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getActiveResourcesInfo } from 'node:process';\nimport { setTimeout } from 'node:timers';\n\nconsole.log('Before:', getActiveResourcesInfo());\nsetTimeout(() => {}, 1000);\nconsole.log('After:', getActiveResourcesInfo());\n```\n\n----------------------------------------\n\nTITLE: Process Exit Management in Node.js\nDESCRIPTION: Shows various ways to handle process termination including immediate exit and graceful shutdown with exit codes.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit } from 'node:process';\n\nexit(1);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exit } from 'node:process';\n\n// This is an example of what *not* to do:\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  exit(1);\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\n// How to properly set the exit code while letting\n// the process exit gracefully.\nif (someConditionNotMet()) {\n  printUsageToStdout();\n  process.exitCode = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for ObjectConstructor with the assign method for copying properties from source objects to a target object. The method has multiple overloads to handle different numbers of source objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_250\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectConstructor {\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source The source object from which to copy properties.\n     */\n    assign<T extends {}, U>(target: T, source: U): T & U;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     */\n    assign<T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     * @param source3 The third source object from which to copy properties.\n     */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint16Array Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Uint16Array typed array. This interface describes an array of 16-bit unsigned integers with properties for accessing the underlying buffer and array dimensions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint16Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n```\n\n----------------------------------------\n\nTITLE: Building Frontend for Standard Static Servers\nDESCRIPTION: Command to build the frontend without a catchall approach, suitable for standard static file servers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nNOTCATCHALL=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Float32Array copyWithin Method Definition\nDESCRIPTION: Defines the copyWithin method that copies a section of the array to another location in the same array. The method takes target, start, and optional end parameters to control the copy operation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_129\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n```\n\n----------------------------------------\n\nTITLE: Defining Int8Array Interface in TypeScript\nDESCRIPTION: This snippet defines the Int8Array interface, which represents a typed array of 8-bit integer values. It includes properties for array characteristics and methods for array manipulation and iteration.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int8Array {\n    readonly BYTES_PER_ELEMENT: number;\n    readonly buffer: ArrayBufferLike;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): this;\n    every(predicate: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): this;\n    filter(predicate: (value: number, index: number, array: Int8Array) => any, thisArg?: any): Int8Array;\n    find(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: Int8Array) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    readonly length: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Effective User ID in Node.js\nDESCRIPTION: Demonstrates retrieving the effective user ID of the process using process.geteuid(). POSIX platforms only.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.geteuid) {\n  console.log(`Current uid: ${process.geteuid()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch API ResponseType Type Declaration in TypeScript\nDESCRIPTION: TypeScript type declaration defining the possible string literal types for the Response.type property in the Fetch API.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/** @category Fetch API */\ndeclare type ResponseType =\n  | \"basic\"\n  | \"cors\"\n  | \"default\"\n  | \"error\"\n  | \"opaque\"\n  | \"opaqueredirect\";\n```\n\n----------------------------------------\n\nTITLE: Checking Platform Information in Node.js\nDESCRIPTION: Example demonstrating how to get the operating system platform for which the Node.js binary was compiled using the process.platform property.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport { platform } from 'node:process';\n\nconsole.log(`This platform is ${platform}`);\n```\n\n----------------------------------------\n\nTITLE: Number Constructor Interface in TypeScript\nDESCRIPTION: Defines the NumberConstructor interface with static properties like MAX_VALUE, MIN_VALUE, NaN, and infinity constants. These properties represent the limits and special values of the JavaScript number system.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberConstructor {\n    new (value?: any): Number;\n    (value?: any): number;\n    prototype: Number;\n\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    MAX_VALUE: number;\n\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    MIN_VALUE: number;\n\n    /** \n      * A value that is not a number.\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n      */\n    NaN: number;\n\n    /** \n      * A value that is less than the largest negative number that can be represented in JavaScript.\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity. \n      */\n    NEGATIVE_INFINITY: number;\n\n    /**\n      * A value greater than the largest number that can be represented in JavaScript. \n      * JavaScript displays POSITIVE_INFINITY values as infinity. \n      */\n    POSITIVE_INFINITY: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint16Array Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint16Array interface with its properties and methods. It includes array manipulation functions like copyWithin, fill, filter, and reduce, as well as utility methods like indexOf and join.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_211\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint16Array {\n    BYTES_PER_ELEMENT: number;\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): Uint16Array;\n    entries(): Iterator<[number, number]>;\n    every(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): Uint16Array;\n    filter(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): Uint16Array;\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    keys(): Iterator<number>;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    length: number;\n    map(callbackfn: (value: number, index: number, array: Uint16Array) => number, thisArg?: any): Uint16Array;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue?: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Settings for Svelte Development\nDESCRIPTION: Recommended VS Code settings for Svelte development with Prettier formatter.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"[svelte]\": {\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n}\n```\n\n----------------------------------------\n\nTITLE: Int32Array reverse Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the reverse method of Int32Array, which reverses the order of elements in the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_101\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Reverses the elements in an Array.\n */\nreverse(): Int32Array;\n```\n\n----------------------------------------\n\nTITLE: Defining DataViewConstructor Interface in TypeScript\nDESCRIPTION: This snippet defines the DataViewConstructor interface, which specifies the constructor signature for creating new DataView objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_199\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DataViewConstructor {\n    new (buffer: ArrayBuffer, byteOffset?: number, byteLength?: number): DataView;\n}\ndeclare var DataView: DataViewConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Constructor in TypeScript\nDESCRIPTION: TypeScript interface definition for the RegExp constructor. This interface specifies how the RegExp constructor can be invoked, along with non-standard legacy properties used for browser compatibility.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegExpConstructor {\n    new (pattern: RegExp | string): RegExp;\n    new (pattern: string, flags?: string): RegExp;\n    (pattern: RegExp | string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n    readonly \"prototype\": RegExp;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$1\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$2\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$3\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$4\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$5\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$6\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$7\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$8\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$9\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"input\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$_\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"lastMatch\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$&\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"lastParen\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$+\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"leftContext\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$`\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"rightContext\": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    \"$'\": string;\n}\n\ndeclare var RegExp: RegExpConstructor;\n```\n\n----------------------------------------\n\nTITLE: Declaring Uint32Array Variable in TypeScript\nDESCRIPTION: TypeScript declaration for the global Uint32Array variable. This makes the Uint32Array constructor accessible globally in TypeScript code.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var Uint32Array: Uint32ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Checking Processor Architecture in Node.js\nDESCRIPTION: Example showing how to get the CPU architecture for which the Node.js binary was compiled using the process.arch property.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { arch } from 'node:process';\n\nconsole.log(`This processor architecture is ${arch}`);\n```\n\n----------------------------------------\n\nTITLE: Defining Intl.NumberFormat Interface in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for Intl.NumberFormat, including ResolvedNumberFormatOptions, NumberFormat, and NumberFormatConstructor. It specifies options for number formatting and methods for creating and using NumberFormat objects.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_151\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ResolvedNumberFormatOptions {\n    locale: string;\n    numberingSystem: string;\n    style: NumberFormatOptionsStyle;\n    currency?: string;\n    currencyDisplay?: NumberFormatOptionsCurrencyDisplay;\n    minimumIntegerDigits: number;\n    minimumFractionDigits?: number;\n    maximumFractionDigits?: number;\n    minimumSignificantDigits?: number;\n    maximumSignificantDigits?: number;\n    useGrouping: ResolvedNumberFormatOptionsUseGrouping;\n}\n\ninterface NumberFormat {\n    format(value: number): string;\n    resolvedOptions(): ResolvedNumberFormatOptions;\n}\n\ninterface NumberFormatConstructor {\n    new (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n    (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n    supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\n    readonly prototype: NumberFormat;\n}\n\nvar NumberFormat: NumberFormatConstructor;\n```\n\n----------------------------------------\n\nTITLE: Int32Array Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the Int32Array typed array, including properties like BYTES_PER_ELEMENT, buffer, byteLength, and methods like copyWithin, entries, etc.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_213\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int32Array {\n    BYTES_PER_ELEMENT: number;\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): Int32Array;\n    entries(): Iterator<[number, number]>;\n    every(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): Int32Array;\n    filter(callbackfn: (value: number, index: number, array: Int32Array) => boolean, thisArg?: any): Int32Array;\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Int32Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    keys(): Iterator<number>;\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n    length: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Fish Completions for Windmill CLI\nDESCRIPTION: Command to enable command completion in Fish shell for the Windmill CLI tool. This needs to be added to the user's ~/.config/fish/config.fish file.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/cli/README.md#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nsource (wmill completions fish | psub)\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Indexer in TypeScript\nDESCRIPTION: TypeScript indexer definition for accessing elements in an Int16Array. This allows numeric indexing of array elements using square bracket notation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\n[index: number]: number;\n```\n\n----------------------------------------\n\nTITLE: Int32Array Constructor Interface\nDESCRIPTION: Defines the Int32Array constructor interface including static methods and constructor overloads for different initialization scenarios.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_216\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int32ArrayConstructor {\n    prototype: Int32Array;\n    new (length: number): Int32Array;\n    new (array: Int32Array): Int32Array;\n    new (array: number[]): Int32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array;\n    BYTES_PER_ELEMENT: number;\n    of(...items: number[]): Int32Array;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int32Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Number Constructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Number constructor. Defines properties like EPSILON that represent mathematical constants available on the Number constructor.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_187\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NumberConstructor {\n    /**\n      * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n      * that is representable as a Number value, which is approximately: \n      * 2.2204460492503130808472633361816 x 10‍−‍16.\n      */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int8ArrayConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the Int8Array constructor, including static methods and properties that define how Int8Array instances are created.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int8ArrayConstructor {\n    readonly prototype: Int8Array;\n    new (length: number): Int8Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Int8Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int8Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int8Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array;\n}\ndeclare var Int8Array: Int8ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Accessing Node.js Process Configuration Example in JavaScript\nDESCRIPTION: Example showing the structure of the process.config object which contains compile-time configuration options used for the current Node.js executable, similar to the config.gypi file produced during compilation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  target_defaults:\n   { cflags: [],\n     default_configuration: 'Release',\n     defines: [],\n     include_dirs: [],\n     libraries: [] },\n  variables:\n   {\n     host_arch: 'x64',\n     napi_build_version: 5,\n     node_install_npm: 'true',\n     node_prefix: '',\n     node_shared_cares: 'false',\n     node_shared_http_parser: 'false',\n     node_shared_libuv: 'false',\n     node_shared_zlib: 'false',\n     node_use_openssl: 'true',\n     node_shared_openssl: 'false',\n     strict_aliasing: 'true',\n     target_arch: 'x64',\n     v8_use_snapshot: 1\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Intl Namespace Interfaces\nDESCRIPTION: TypeScript interfaces for ECMAScript Internationalization API, defining types for collation and number formatting options.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_150\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CollatorOptions {\n    usage?: \"sort\" | \"search\" | undefined;\n    localeMatcher?: \"lookup\" | \"best fit\" | undefined;\n    numeric?: boolean | undefined;\n    caseFirst?: \"upper\" | \"lower\" | \"false\" | undefined;\n    sensitivity?: \"base\" | \"accent\" | \"case\" | \"variant\" | undefined;\n    collation?: \"big5han\" | \"compat\" | \"dict\" | \"direct\" | \"ducet\" | \"emoji\" | \"eor\" | \"gb2312\" | \"phonebk\" | \"phonetic\" | \"pinyin\" | \"reformed\" | \"searchjl\" | \"stroke\" | \"trad\" | \"unihan\" | \"zhuyin\" | undefined;\n    ignorePunctuation?: boolean | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int8Array Interface in TypeScript\nDESCRIPTION: This snippet defines the Int8Array interface, which represents a typed array of 8-bit integer values. It includes properties and methods for working with the array data.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_200\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Int8Array {\n    BYTES_PER_ELEMENT: number;\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n    copyWithin(target: number, start: number, end?: number): Int8Array;\n    entries(): Iterator<[number, number]>;\n    every(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): Int8Array;\n    filter(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): Int8Array;\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zsh Completions for Windmill CLI\nDESCRIPTION: Command to enable command completion in Zsh shell for the Windmill CLI tool. This needs to be added to the user's ~/.zshrc file.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/cli/README.md#2025-04-21_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nsource <(wmill completions zsh)\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Length Property in TypeScript\nDESCRIPTION: TypeScript property definition for the length of an Int16Array. This readonly property indicates the number of elements in the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The length of the array.\n */\nreadonly length: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Int8Array Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for Int8Array methods including map, reduce, reduceRight, reverse, set, slice, some, sort, subarray, and string conversion methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nmap(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\n\n/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\n\n/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an\n * argument instead of an array value.\n */\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number): number;\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue: number): number;\n\n/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n/**\n * Reverses the elements in an Array.\n */\nreverse(): Int8Array;\n\n/**\n * Sets a value or an array of values.\n * @param array A typed or untyped array of values to set.\n * @param offset The index in the current array at which the values are to be written.\n */\nset(array: ArrayLike<number>, offset?: number): void;\n\n/**\n * Returns a section of an array.\n * @param start The beginning of the specified portion of the array.\n * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n */\nslice(start?: number, end?: number): Int8Array;\n\n/**\n * Determines whether the specified callback function returns true for any element of an array.\n * @param predicate A function that accepts up to three arguments. The some method calls\n * the predicate function for each element in the array until the predicate returns a value\n * which is coercible to the Boolean value true, or until the end of the array.\n * @param thisArg An object to which the this keyword can refer in the predicate function.\n * If thisArg is omitted, undefined is used as the this value.\n */\nsome(predicate: (value: number, index: number, array: Int8Array) => unknown, thisArg?: any): boolean;\n\n/**\n * Sorts an array.\n * @param compareFn Function used to determine the order of the elements. It is expected to return\n * a negative value if first argument is less than second argument, zero if they're equal and a positive\n * value otherwise. If omitted, the elements are sorted in ascending order.\n * ```ts\n * [11,2,22,1].sort((a, b) => a - b)\n * ```\n */\nsort(compareFn?: (a: number, b: number) => number): this;\n\n/**\n * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n * at begin, inclusive, up to end, exclusive.\n * @param begin The index of the beginning of the array.\n * @param end The index of the end of the array.\n */\nsubarray(begin?: number, end?: number): Int8Array;\n\n/**\n * Converts a number to a string by using the current locale.\n */\ntoLocaleString(): string;\n\n/**\n * Returns a string representation of an array.\n */\ntoString(): string;\n\n/** Returns the primitive value of the specified object. */\nvalueOf(): Int8Array;\n\n[index: number]: number;\n```\n\n----------------------------------------\n\nTITLE: ThisParameterType and OmitThisParameter Utility Types\nDESCRIPTION: Utility type definitions for extracting and manipulating the 'this' parameter type from function types.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype ThisParameterType<T> = T extends (this: infer U, ...args: never) => any ? U : unknown;\n\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\n```\n\n----------------------------------------\n\nTITLE: Declaring Global eval Function in TypeScript\nDESCRIPTION: Type declaration for the global eval function, which evaluates JavaScript code represented as a string and executes it.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Evaluates JavaScript code and executes it.\n * @param x A String value that contains valid JavaScript code.\n */\ndeclare function eval(x: string): any;\n```\n\n----------------------------------------\n\nTITLE: Downloading the Latest Windmill Binary with Bash\nDESCRIPTION: A bash script to automatically download the latest version of the Windmill binary. The script detects the latest release from GitHub, extracts the version number, and downloads the appropriate binary file for x86_64 architecture.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nBINARY_NAME='windmill-amd64' # or windmill-ee-amd64 for the enterprise edition\nLATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/windmill-labs/windmill/releases/latest)\nLATEST_VERSION=$(echo $LATEST_RELEASE | sed -e 's/.*\"tag_name\":\"\\([^\"]*\\)\".*/\\1/')\nARTIFACT_URL=\"https://github.com/windmill-labs/windmill/releases/download/$LATEST_VERSION/$BINARY_NAME\"\nwget \"$ARTIFACT_URL\" -O windmill\n```\n\n----------------------------------------\n\nTITLE: Implementing Int8Array Interface and Constructor in TypeScript\nDESCRIPTION: Complete TypeScript interface definition for Int8Array, including all standard array methods and the constructor. This interface provides typed access to 8-bit signed integer values in an ArrayBuffer with methods for manipulation and iteration.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_201\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int8Array {\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * The ArrayBuffer instance referenced by the array. \n      */\n    buffer: ArrayBuffer;\n\n    /**\n      * The length in bytes of the array.\n      */\n    byteLength: number;\n\n    /**\n      * The offset in bytes of the array.\n      */\n    byteOffset: number;\n\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n    /**\n      * Performs the specified action for each element in an array.\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the \n      * callbackfn function one time for each element in the array. \n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    forEach(callbackfn: (value: number, index: number, array: Int8Array) => void, thisArg?: any): void;\n\n    /**\n      * Returns the index of the first occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n      *  search starts at index 0.\n      */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * Adds all the elements of an array separated by the specified separator string.\n      * @param separator A string used to separate one element of an array from the next in the \n      * resulting String. If omitted, the array elements are separated with a comma.\n      */\n    join(separator?: string): string;\n\n    /** \n      * Returns an list of keys in the array\n      */\n    keys(): Iterator<number>;\n\n    /**\n      * Returns the index of the last occurrence of a value in an array.\n      * @param searchElement The value to locate in the array.\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n      * search starts at index 0.\n      */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that \n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \n      * callbackfn function one time for each element in the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Int8Array) => number, thisArg?: any): Int8Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of \n      * the callback function is the accumulated result, and is provided as an argument in the next \n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of \n      * the callback function is the accumulated result, and is provided as an argument in the next \n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /** \n      * Calls the specified callback function for all the elements in an array, in descending order. \n      * The return value of the callback function is the accumulated result, and is provided as an \n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an \n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int8Array) => number, initialValue?: number): number;\n\n    /** \n      * Calls the specified callback function for all the elements in an array, in descending order. \n      * The return value of the callback function is the accumulated result, and is provided as an \n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int8Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array. \n      */\n    reverse(): Int8Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: Int8Array, offset?: number): void;\n\n    /** \n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Int8Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Int8Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If \n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Int8Array;\n\n    /**\n      * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive. \n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Int8Array;\n\n    /**\n      * Converts a number to a string by using the current locale. \n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    /** \n      * Returns an list of values in the array\n      */\n    values(): Iterator<number>;\n\n    [index: number]: number;\n    // [Symbol.iterator] (): Iterator<number>;\n}\n\ninterface Int8ArrayConstructor {\n    prototype: Int8Array;\n    new (length: number): Int8Array;\n    new (array: Int8Array): Int8Array;\n    new (array: number[]): Int8Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array;\n\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Int8Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Int8Array;\n}\ndeclare var Int8Array: Int8ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayBufferView Interface in TypeScript\nDESCRIPTION: This snippet defines the ArrayBufferView interface in TypeScript, which includes properties for buffer, byteLength, and byteOffset.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_234\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ArrayBufferView {\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Developing Windmill Client Locally\nDESCRIPTION: Command to start local development for the Windmill client using the watch mode provided by the dev.nu script.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/typescript-client/README_DEV.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./dev.nu watch\n```\n\n----------------------------------------\n\nTITLE: Generating Windmill Backend Client\nDESCRIPTION: Commands to generate the backend client API for the Windmill frontend. Includes separate commands for regular environments and macOS.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate-backend-client\n## on mac use\nnpm run generate-backend-client-mac\n```\n\n----------------------------------------\n\nTITLE: Building Frontend with Increased Memory\nDESCRIPTION: Command to build the frontend with increased Node.js memory allocation to avoid heap size issues.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nNODE_OPTIONS=--max_old_space_size=8096 npm run build\n```\n\n----------------------------------------\n\nTITLE: CallableFunction Interface Definition\nDESCRIPTION: Extended Function interface for callable functions with typed this parameter and arguments.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CallableFunction extends Function {\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\n    bind<T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R;\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Process Module Export Declarations in TypeScript\nDESCRIPTION: TypeScript declaration for exporting the Node.js process module. It shows the standard CommonJS export pattern for 'process' as well as the newer 'node:' prefixed module format introduced in more recent Node.js versions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport = process\n}\ndeclare module 'node:process' {\n\timport process = require('process')\n\texport = process\n}\n```\n\n----------------------------------------\n\nTITLE: REST Script for HTTPS Endpoint\nDESCRIPTION: TypeScript REST script to fetch JSON from Caddy HTTPS endpoint with self-signed certificate.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function main() {\n  const res = await fetch(\"https://caddy/static/helloworld.json\", {\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n  return res.json();\n}\n```\n\n----------------------------------------\n\nTITLE: Uint16Array Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for the Uint16Array typed array, including methods like reduceRight, reverse, set, slice, etc. Also includes the constructor interface.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_212\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint16Array {\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n    reverse(): Uint16Array;\n    set(index: number, value: number): void;\n    set(array: Uint16Array, offset?: number): void;\n    slice(start?: number, end?: number): Uint16Array;\n    some(callbackfn: (value: number, index: number, array: Uint16Array) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: (a: number, b: number) => number): Uint16Array;\n    subarray(begin: number, end?: number): Uint16Array;\n    toLocaleString(): string;\n    toString(): string;\n    values(): Iterator<number>;\n    [index: number]: number;\n}\n\ninterface Uint16ArrayConstructor {\n    prototype: Uint16Array;\n    new (length: number): Uint16Array;\n    new (array: Uint16Array): Uint16Array;\n    new (array: number[]): Uint16Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array;\n    BYTES_PER_ELEMENT: number;\n    of(...items: number[]): Uint16Array;\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Uint16Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Interface Methods in TypeScript\nDESCRIPTION: This snippet contains method definitions for the Uint8ClampedArray interface, including array manipulation methods like reduce, reduceRight, reverse, set, slice, some, sort, subarray, and various conversion methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_206\n\nLANGUAGE: typescript\nCODE:\n```\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of \n      * the callback function is the accumulated result, and is provided as an argument in the next \n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /** \n      * Calls the specified callback function for all the elements in an array, in descending order. \n      * The return value of the callback function is the accumulated result, and is provided as an \n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an \n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue?: number): number;\n\n    /** \n      * Calls the specified callback function for all the elements in an array, in descending order. \n      * The return value of the callback function is the accumulated result, and is provided as an \n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array. \n      */\n    reverse(): Uint8ClampedArray;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: Uint8ClampedArray, offset?: number): void;\n\n    /** \n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Uint8ClampedArray;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Uint8ClampedArray) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If \n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Uint8ClampedArray;\n\n    /**\n      * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive. \n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Uint8ClampedArray;\n\n    /**\n      * Converts a number to a string by using the current locale. \n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    /** \n      * Returns an list of values in the array\n      */\n    values(): Iterator<number>;\n\n    [index: number]: number;\n    // [Symbol.iterator] (): Iterator<number>;}\n```\n\n----------------------------------------\n\nTITLE: Defining StringConstructor Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for StringConstructor static methods including fromCodePoint and raw. These static methods provide ways to create strings from code points and template literals.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_256\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StringConstructor {\n    /**\n     * Return the String value whose elements are, in order, the elements in the List elements.\n     * If length is 0, the empty string is returned.\n     */\n    fromCodePoint(...codePoints: number[]): string;\n\n    /**\n     * String.raw is usually used as a tag function of a Tagged Template String. When called as\n     * such, the first argument will be a well formed template call site object and the rest\n     * parameter will contain the substitution values. It can also be called directly, for example,\n     * to interleave strings and values from your own tag function, and in this case the only thing\n     * it needs from the first argument is the raw property.\n     * @param template A well-formed template string call site representation.\n     * @param substitutions A set of substitution values.\n     */\n    raw(template: { raw: readonly string[] | ArrayLike<string>; }, ...substitutions: any[]): string;\n}\n```\n\n----------------------------------------\n\nTITLE: NewableFunction Interface Definition\nDESCRIPTION: Extended Function interface for constructor functions that can be instantiated with new keyword.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NewableFunction extends Function {\n    apply<T>(this: new () => T, thisArg: T): void;\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\n    bind<T>(this: T, thisArg: any): T;\n    bind<A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R;\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Mixed Synchronous/Asynchronous API Implementation\nDESCRIPTION: Warning example showing poor API design that mixes synchronous and asynchronous behavior, which can lead to unpredictable results and should be avoided.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\nfunction maybeSync(arg, cb) {\n  if (arg) {\n    cb();\n    return;\n  }\n\n  fs.stat('file', cb);\n}\n```\n\n----------------------------------------\n\nTITLE: Python Script Using Private PyPI Package\nDESCRIPTION: Python script demonstrating usage of a package from private PyPI server.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n#requirements:\n#windmill-helloworld==0.0.1\nimport windmill_helloworld\n\ndef main():\n    print(windmill_helloworld.say_hello(\"Windmill\"))\n```\n\n----------------------------------------\n\nTITLE: TypeScript Uint32Array Transform and Utility Methods\nDESCRIPTION: TypeScript interface definition for Uint32Array transformation methods like map, reduce, reduceRight, reverse, and other utility functions. Includes comprehensive method signatures with parameter types and return values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_219\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * Calls a defined callback function on each element of an array, and returns an array that \n  * contains the results.\n  * @param callbackfn A function that accepts up to three arguments. The map method calls the \n  * callbackfn function one time for each element in the array. \n  * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n  * If thisArg is omitted, undefined is used as the this value.\n  */\nmap(callbackfn: (value: number, index: number, array: Uint32Array) => number, thisArg?: any): Uint32Array;\n\n/**\n  * Calls the specified callback function for all the elements in an array. The return value of \n  * the callback function is the accumulated result, and is provided as an argument in the next \n  * call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n  * callbackfn function one time for each element in the array.\n  * @param initialValue If initialValue is specified, it is used as the initial value to start \n  * the accumulation. The first call to the callbackfn function provides this value as an argument\n  * instead of an array value.\n  */\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\n\n/**\n  * Calls the specified callback function for all the elements in an array. The return value of \n  * the callback function is the accumulated result, and is provided as an argument in the next \n  * call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n  * callbackfn function one time for each element in the array.\n  * @param initialValue If initialValue is specified, it is used as the initial value to start \n  * the accumulation. The first call to the callbackfn function provides this value as an argument \n  * instead of an array value.\n  */\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n/** \n  * Calls the specified callback function for all the elements in an array, in descending order. \n  * The return value of the callback function is the accumulated result, and is provided as an \n  * argument in the next call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n  * the callbackfn function one time for each element in the array. \n  * @param initialValue If initialValue is specified, it is used as the initial value to start \n  * the accumulation. The first call to the callbackfn function provides this value as an \n  * argument instead of an array value.\n  */\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue?: number): number;\n\n/** \n  * Calls the specified callback function for all the elements in an array, in descending order. \n  * The return value of the callback function is the accumulated result, and is provided as an \n  * argument in the next call to the callback function.\n  * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n  * the callbackfn function one time for each element in the array. \n  * @param initialValue If initialValue is specified, it is used as the initial value to start \n  * the accumulation. The first call to the callbackfn function provides this value as an argument\n  * instead of an array value.\n  */\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n\n/**\n  * Reverses the elements in an Array. \n  */\nreverse(): Uint32Array;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Uint32Array Data Manipulation Methods\nDESCRIPTION: TypeScript interface definition for Uint32Array data manipulation methods including set, slice, some, sort, subarray, and other utility methods. Provides method signatures with parameter types and JSDoc documentation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_220\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n  * Sets a value or an array of values.\n  * @param index The index of the location to set.\n  * @param value The value to set.\n  */\nset(index: number, value: number): void;\n\n/**\n  * Sets a value or an array of values.\n  * @param array A typed or untyped array of values to set.\n  * @param offset The index in the current array at which the values are to be written.\n  */\nset(array: Uint32Array, offset?: number): void;\n\n/** \n  * Returns a section of an array.\n  * @param start The beginning of the specified portion of the array.\n  * @param end The end of the specified portion of the array.\n  */\nslice(start?: number, end?: number): Uint32Array;\n\n/**\n  * Determines whether the specified callback function returns true for any element of an array.\n  * @param callbackfn A function that accepts up to three arguments. The some method calls the \n  * callbackfn function for each element in array1 until the callbackfn returns true, or until \n  * the end of the array.\n  * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n  * If thisArg is omitted, undefined is used as the this value.\n  */\nsome(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): boolean;\n\n/**\n  * Sorts an array.\n  * @param compareFn The name of the function used to determine the order of the elements. If \n  * omitted, the elements are sorted in ascending, ASCII character order.\n  */\nsort(compareFn?: (a: number, b: number) => number): Uint32Array;\n\n/**\n  * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\n  * at begin, inclusive, up to end, exclusive. \n  * @param begin The index of the beginning of the array.\n  * @param end The index of the end of the array.\n  */\nsubarray(begin: number, end?: number): Uint32Array;\n\n/**\n  * Converts a number to a string by using the current locale. \n  */\ntoLocaleString(): string;\n\n/**\n  * Returns a string representation of an array.\n  */\ntoString(): string;\n\n/** \n  * Returns an list of values in the array\n  */\nvalues(): Iterator<number>;\n\n[index: number]: number;\n```\n\n----------------------------------------\n\nTITLE: Dynamically Loading C++ Addons with process.dlopen\nDESCRIPTION: Shows how to use process.dlopen() to load C++ Addons dynamically in a Node.js application. This method is primarily used by require() internally and should be used directly only in special cases.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dlopen } from 'node:process';\nimport { constants } from 'node:os';\nimport { fileURLToPath } from 'node:url';\n\nconst module = { exports: {} };\ndlopen(module, fileURLToPath(new URL('local.node', import.meta.url)),\n       constants.dlopen.RTLD_NOW);\nmodule.exports.foo();\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Array Constructor in TypeScript\nDESCRIPTION: Defines the constructor signatures for creating Uint8Array objects, including options for initializing from existing arrays or buffers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nnew (array: ArrayLike<number> | ArrayBufferLike): Uint8Array;\nnew (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8Array;\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration to Deploy Windmill\nDESCRIPTION: Command to execute Terraform apply, which will create all the resources defined in the Terraform configuration to deploy the Windmill stack on AWS ECS.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/aws-ecs-terraform/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Starting Windmill Stack with Docker Compose\nDESCRIPTION: Command to start the Windmill stack using Docker Compose, which includes Windmill, Prometheus, and Grafana services.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/job-monitoring-prometheus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Console Interface Declaration in TypeScript\nDESCRIPTION: TypeScript interface declaration for the Console object, defining the log method that accepts any number of arguments of any type.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/deno_fetch.d.ts.txt#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Console {\n    log(...data: any[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array Constructor Interface TypeScript Definition\nDESCRIPTION: TypeScript interface definition for Float32Array constructor, including different initialization methods and static utility methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_225\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Float32ArrayConstructor {\n    prototype: Float32Array;\n    new (length: number): Float32Array;\n    new (array: Float32Array): Float32Array;\n    new (array: number[]): Float32Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array;\n\n    BYTES_PER_ELEMENT: number;\n\n    of(...items: number[]): Float32Array;\n\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float32Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Windmill Benchmark with Basic Authentication\nDESCRIPTION: Command to run the benchmarking utility against a specific Windmill host using email and password authentication.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/benchmarks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwmillbench -e admin@windmill.dev -p changeme --host YOUR_HOST\n```\n\n----------------------------------------\n\nTITLE: Installing Windmill Benchmark Utility from Deno.land\nDESCRIPTION: Command to install the wmillbench utility globally from Deno.land with all permissions. This makes the benchmarking tool available as a CLI command.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/benchmarks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno install --unstable -A https://deno.land/x/wmillbench/main.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ArrayConstructor Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint8ArrayConstructor interface, which includes the prototype property and a constructor method for creating new Uint8Array instances.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint8ArrayConstructor {\n    readonly prototype: Uint8Array;\n    new (length: number): Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Interface in TypeScript\nDESCRIPTION: Specifies the interface for Uint8ClampedArray, including properties like BYTES_PER_ELEMENT, buffer, byteLength, and byteOffset. This represents a typed array of 8-bit unsigned integer (clamped) values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint8ClampedArray {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    // ... (other properties and methods)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Windmill Docker Image for Red Hat Linux 9\nDESCRIPTION: Command for building a Docker image for Windmill on Red Hat Linux 9. This requires providing Red Hat subscription credentials as secrets and specifying optional features. The credentials are needed to access the CodeReady Builder repository which contains the required xmlsec1-devel package.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/docker/RHEL9/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build \\\n    -f docker/RHEL9/Dockerfile \\\n    --build-arg features=\"$features\" \\\n    --secret id=rh_username,src=/path/to/rh_username \\\n    --secret id=rh_password,src=/path/to/rh_password \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL with Docker Compose\nDESCRIPTION: Command to start only the PostgreSQL database service using Docker Compose for local backend development.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up db\n```\n\n----------------------------------------\n\nTITLE: Property Key Type and Array Declaration in TypeScript\nDESCRIPTION: TypeScript declaration for the Array constructor variable and PropertyKey type definition. PropertyKey is a union type that can be string, number, or Symbol, used for object property access.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_180\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var Array: ArrayConstructor;\ndeclare type PropertyKey = string | number | Symbol;\n```\n\n----------------------------------------\n\nTITLE: Float64Array Interface TypeScript Definition\nDESCRIPTION: TypeScript interface definition for Float64Array, including core properties and methods for 64-bit float array operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_226\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Float64Array {\n    BYTES_PER_ELEMENT: number;\n    buffer: ArrayBuffer;\n    byteLength: number;\n    byteOffset: number;\n\n    copyWithin(target: number, start: number, end?: number): Float64Array;\n    entries(): Iterator<[number, number]>;\n    every(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number, end?: number): Float64Array;\n    filter(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): Float64Array;\n    find(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n    findIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: Float64Array) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number): number;\n    join(separator?: string): string;\n    keys(): Iterator<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Tempo and Windmill Services with Docker Compose\nDESCRIPTION: This command starts all the necessary services, including Tempo and Windmill, using Docker Compose. It runs the services in detached mode.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/otel-tracing-grafana/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Building Local Version of Windmill Benchmark Utility\nDESCRIPTION: Command to build and install a local version of the wmillbench utility with all permissions from the current directory.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/benchmarks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno install -A main.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArrayConstructor Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint8ClampedArrayConstructor interface, which provides static methods for creating new Uint8ClampedArray instances. It includes constructors and utility methods like 'of' and 'from'.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint8ClampedArrayConstructor {\n    readonly prototype: Uint8ClampedArray;\n    new (length: number): Uint8ClampedArray;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint8ClampedArray;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint8ClampedArray;\n\n    readonly BYTES_PER_ELEMENT: number;\n\n    of(...items: number[]): Uint8ClampedArray;\n\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray;\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8ClampedArray Interface in TypeScript\nDESCRIPTION: This snippet defines the Uint8ClampedArray interface, which represents a typed array of 8-bit unsigned integer values. It includes various array manipulation methods such as reduceRight, reverse, set, and slice.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Uint8ClampedArray {\n    readonly BYTES_PER_ELEMENT: number;\n    readonly buffer: ArrayBufferLike;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint8ClampedArray) => U, initialValue: U): U;\n\n    reverse(): Uint8ClampedArray;\n\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    slice(start?: number, end?: number): Uint8ClampedArray;\n\n    // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Windmill Worker Crate Purpose in Markdown\nDESCRIPTION: A markdown description of the Windmill worker crate, explaining its role in processing and executing flows and jobs. It mentions that the crate provides both a library and a binary target for implementation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/windmill-worker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Windmill Worker\n\nThe worker. Used to process and execute flows & jobs.\n\nThis crate exposes both a library as well as a binary target.\n```\n\n----------------------------------------\n\nTITLE: Setting Node Options for Frontend Development in Shell\nDESCRIPTION: This command sets the NODE_OPTIONS environment variable to increase the maximum old space size for the Node.js runtime. This is necessary for running the frontend development server with adequate memory.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport NODE_OPTIONS=\"--max-old-space-size=4096\"\n```\n\n----------------------------------------\n\nTITLE: Defining Uint16Array Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Uint16Array, including methods like sort, subarray, toLocaleString, toString, and valueOf. It also defines the array index signature.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint16Array {\n    sort(compareFn?: (a: number, b: number) => number): this;\n    subarray(begin?: number, end?: number): Uint16Array;\n    toLocaleString(): string;\n    toString(): string;\n    valueOf(): Uint16Array;\n    [index: number]: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing fill Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'fill' method which changes all array elements from 'start' to 'end' index to a static 'value'. Parameters include the value to fill with, and optional start and end indices.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nfill(value: number, start?: number, end?: number): this;\n```\n\n----------------------------------------\n\nTITLE: Pulling Workspace Content in Windmill CLI\nDESCRIPTION: Command to pull the current workspace content from Windmill using the CLI tool.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/cli/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwmill sync pull\n```\n\n----------------------------------------\n\nTITLE: Int32Array Constructor TypeScript Interface Definition\nDESCRIPTION: TypeScript interface definition for Int32Array constructor, including various construction methods and static properties and methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int32ArrayConstructor {\n    readonly prototype: Int32Array;\n    new (length: number): Int32Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Int32Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Int32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array;\n}\ndeclare var Int32Array: Int32ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Interface in TypeScript\nDESCRIPTION: This snippet defines the Int16Array interface, which represents a typed array of 16-bit signed integer values. It includes various array manipulation methods such as copyWithin, every, fill, and filter.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Int16Array {\n    readonly BYTES_PER_ELEMENT: number;\n    readonly buffer: ArrayBufferLike;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n\n    copyWithin(target: number, start: number, end?: number): this;\n\n    every(predicate: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\n\n    fill(value: number, start?: number, end?: number): this;\n\n    filter(predicate: (value: number, index: number, array: Int16Array) => any, thisArg?: any): Int16Array;\n\n    find(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number | undefined;\n\n    findIndex(predicate: (value: number, index: number, obj: Int16Array) => boolean, thisArg?: any): number;\n\n    forEach(callbackfn: (value: number, index: number, array: Int16Array) => void, thisArg?: any): void;\n\n    // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment and Dependencies\nDESCRIPTION: Instructions for creating a Python virtual environment, activating it, and installing required dependencies. Also mentions setting up the OpenAI API key.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Entering Nix Development Shell for WASM\nDESCRIPTION: Command to enter a Nix development shell specifically configured for WASM development.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix develop ../../#wasm\n```\n\n----------------------------------------\n\nTITLE: Defining Float32Array Interface in TypeScript\nDESCRIPTION: Beginning of TypeScript interface definition for Float32Array, a typed array of 32-bit float values. This interface would define the shape and behavior of the standard JavaScript Float32Array typed array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_127\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n * of bytes could not be allocated an exception is raised.\n */\ninterface Float32Array {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n```\n\n----------------------------------------\n\nTITLE: Int32Array sort Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the sort method of Int32Array, which sorts the elements in the array according to a provided compare function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_105\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sorts an array.\n * @param compareFn Function used to determine the order of the elements. It is expected to return\n * a negative value if first argument is less than second argument, zero if they're equal and a positive\n * value otherwise. If omitted, the elements are sorted in ascending order.\n * ```ts\n * [11,2,22,1].sort((a, b) => a - b)\n * ```\n */\nsort(compareFn?: (a: number, b: number) => number): this;\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Plan for Dry-Run\nDESCRIPTION: Command to execute a Terraform plan, which will show what resources would be created without actually creating them, serving as a dry-run before actual deployment.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/aws-ecs-terraform/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Generating Windmill API Client with bundle.sh\nDESCRIPTION: Command to update the bundled.json file and regenerate the OpenAPI client source code. This requires the swagger-cli to be installed for bundling.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/windmill-api-client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh bundle.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array ReduceRight Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for right-to-left reducing an Int16Array. These overloaded methods call a specified callback function for all array elements in descending order to accumulate a result.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an\n * argument instead of an array value.\n */\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\n\n/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Fixing M1 Mac Build Issues\nDESCRIPTION: Solution for linking errors on M1 Macs by setting RUSTFLAGS environment variable for libomp.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\necho 'export RUSTFLAGS=\"-L/opt/homebrew/opt/libomp/lib\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Float32Array filter Method Definition\nDESCRIPTION: Defines the filter method that creates a new array with all elements that pass the test implemented by the provided function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_132\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Float32Array) => any, thisArg?: any): Float32Array;\n```\n\n----------------------------------------\n\nTITLE: Uint32Array Array Manipulation Method TypeScript Definitions\nDESCRIPTION: TypeScript definitions for array manipulation methods of Uint32Array, including copyWithin, every, fill, filter, find, and findIndex methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: Uint32Array) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: Uint32Array) => any, thisArg?: any): Uint32Array;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: Uint32Array) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bash Completions for Windmill CLI\nDESCRIPTION: Command to enable command completion in Bash shell for the Windmill CLI tool. This needs to be added to the user's ~/.bashrc file.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/cli/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource <(wmill completions bash)\n```\n\n----------------------------------------\n\nTITLE: Implementing Uint32ArrayConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface for Uint32Array constructor, including various constructor signatures and static methods for creating Uint32Array instances from different sources like length, array-like objects, or buffer.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_125\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Uint32ArrayConstructor {\n    readonly prototype: Uint32Array;\n    new (length: number): Uint32Array;\n    new (array: ArrayLike<number> | ArrayBufferLike): Uint32Array;\n    new (buffer: ArrayBufferLike, byteOffset?: number, length?: number): Uint32Array;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint32Array;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like or iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Slice Method in TypeScript\nDESCRIPTION: TypeScript method definition for extracting a section of an Int16Array. This method returns a new Int16Array containing a copy of elements from the original array within the specified range.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Returns a section of an array.\n * @param start The beginning of the specified portion of the array.\n * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n */\nslice(start?: number, end?: number): Int16Array;\n```\n\n----------------------------------------\n\nTITLE: Connecting Frontend to Dockerized Backend\nDESCRIPTION: Command to run the frontend development server configured to use a locally Dockerized backend.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/README_DEV.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nREMOTE=http://localhost REMOTE_LSP=http://localhost npm run dev\n```\n\n----------------------------------------\n\nTITLE: Float32Array reverse Method Definition\nDESCRIPTION: Defines the reverse method that reverses the order of the elements in an array in place and returns the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_143\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): Float32Array;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Subarray Method in TypeScript\nDESCRIPTION: TypeScript method definition for creating a new Int16Array view of the same buffer. This method returns a new Int16Array view that references the same underlying ArrayBuffer but with a different range of elements.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\n * at begin, inclusive, up to end, exclusive.\n * @param begin The index of the beginning of the array.\n * @param end The index of the end of the array.\n */\nsubarray(begin?: number, end?: number): Int16Array;\n```\n\n----------------------------------------\n\nTITLE: Running the AI Sample Generation Script\nDESCRIPTION: Command to execute the Python script that generates AI samples and specifies where to find the results.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython src/gen_samples.py\n```\n\n----------------------------------------\n\nTITLE: Float32Array Property Definitions in TypeScript\nDESCRIPTION: Defines the core properties of Float32Array including buffer, byteLength, and byteOffset. These properties provide access to the underlying ArrayBuffer and metadata about the array's size and position.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_128\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: ArrayBufferLike;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Sort Method in TypeScript\nDESCRIPTION: TypeScript method definition for sorting elements of an Int16Array. This method sorts the elements in place with an optional comparison function and returns a reference to the sorted array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sorts an array.\n * @param compareFn Function used to determine the order of the elements. It is expected to return\n * a negative value if first argument is less than second argument, zero if they're equal and a positive\n * value otherwise. If omitted, the elements are sorted in ascending order.\n * ```ts\n * [11,2,22,1].sort((a, b) => a - b)\n * ```\n */\nsort(compareFn?: (a: number, b: number) => number): this;\n```\n\n----------------------------------------\n\nTITLE: Building NOOP Jobs Benchmark Utility\nDESCRIPTION: Command to build and install the specialized NOOP jobs benchmarking utility with all permissions.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/benchmarks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndeno install -A benchmarks_noop.ts\n```\n\n----------------------------------------\n\nTITLE: Defining RegExp Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for RegExp properties including flags, sticky, and unicode. These properties provide information about regular expression flags and settings.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_253\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RegExp {\n    /**\n     * Returns a string indicating the flags of the regular expression in question. This field is read-only.\n     * The characters in this string are sequenced and concatenated in the following order:\n     *\n     *    - \"g\" for global\n     *    - \"i\" for ignoreCase\n     *    - \"m\" for multiline\n     *    - \"u\" for unicode\n     *    - \"y\" for sticky\n     *\n     * If no flags are set, the value is the empty string.\n     */\n    readonly flags: string;\n\n    /**\n     * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly sticky: boolean;\n\n    /**\n     * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly unicode: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Reduce Methods in TypeScript\nDESCRIPTION: TypeScript method definitions for reducing an Int16Array to a single value. These overloaded methods call a specified callback function for each element in the array to accumulate a result.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number): number;\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int16Array) => number, initialValue: number): number;\n\n/**\n * Calls the specified callback function for all the elements in an array. The return value of\n * the callback function is the accumulated result, and is provided as an argument in the next\n * call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n * callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int16Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Running NOOP Jobs Benchmark with Authentication\nDESCRIPTION: Command to run the NOOP jobs benchmarking utility against a specific Windmill host. By default, it creates 10,000 jobs in a single batch.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/benchmarks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbenchmarks_noop -e admin@windmill.dev -p changeme --host YOUR_HOST\n```\n\n----------------------------------------\n\nTITLE: Int32Array set Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the set method of Int32Array, which copies values from an array to the typed array at the specified offset.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_102\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Sets a value or an array of values.\n * @param array A typed or untyped array of values to set.\n * @param offset The index in the current array at which the values are to be written.\n */\nset(array: ArrayLike<number>, offset?: number): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing reverse Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'reverse' method which reverses the order of elements in the array in place. The first element becomes the last, and the last element becomes the first.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_91\n\nLANGUAGE: typescript\nCODE:\n```\nreverse(): Uint16Array;\n```\n\n----------------------------------------\n\nTITLE: Building Windmill Parser WASM Module\nDESCRIPTION: Command to build the Windmill parser WASM module using wasm-pack. It builds for the web target in release mode.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/parsers/windmill-parser-wasm/README_DEV.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwasm-pack build --release --target web\n```\n\n----------------------------------------\n\nTITLE: Defining Int16Array Some Method in TypeScript\nDESCRIPTION: TypeScript method definition for testing if any element in an Int16Array passes a test. This method calls a predicate function for each element until one returns a truthy value, then returns true.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines whether the specified callback function returns true for any element of an array.\n * @param predicate A function that accepts up to three arguments. The some method calls\n * the predicate function for each element in the array until the predicate returns a value\n * which is coercible to the Boolean value true, or until the end of the array.\n * @param thisArg An object to which the this keyword can refer in the predicate function.\n * If thisArg is omitted, undefined is used as the this value.\n */\nsome(predicate: (value: number, index: number, array: Int16Array) => unknown, thisArg?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Float32Array reduce Method Definition\nDESCRIPTION: Defines the reduce method that applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_141\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float32Array) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack\nDESCRIPTION: Command to start the docker compose stack containing NPM registry, PyPI server, and Caddy reverse proxy.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Float32Array indexOf Method Definition\nDESCRIPTION: Defines the indexOf method that returns the first index at which a given element can be found in the array, or -1 if it is not present.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_136\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     *  search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Publishing Python Package to Private PyPI\nDESCRIPTION: Commands to build and upload a Python package to private PyPI server using twine.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/examples/deploy/private-package-registry-tls/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd helloworld_python_module\npython setup.py sdist\n# using twine to upload the module here, get it with `pip install twine`\ntwine upload --repository-url https://localhost/ dist/* --cert ../certs/windmill-root.crt\n# no username and password, just press enter. For the purpose of the demo we're running pypiserver completely unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Implementing reduceRight Method for Uint16Array in TypeScript\nDESCRIPTION: Method signatures for the 'reduceRight' method which applies a function against an accumulator and each element (from right to left) to reduce it to a single value. Provides overloads for using with or without an initial value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number): number;\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint16Array) => number, initialValue: number): number;\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint16Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Int16ArrayConstructor Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for Int16ArrayConstructor specifying constructor signatures and static methods for creating Int16Arrays. Includes overloads for different initialization patterns and utility methods.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_210\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Int16ArrayConstructor {\n    prototype: Int16Array;\n    new (length: number): Int16Array;\n    new (array: Int16Array): Int16Array;\n    new (array: number[]): Int16Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array;\n    BYTES_PER_ELEMENT: number;\n    of(...items: number[]): Int16Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array lastIndexOf Method Definition\nDESCRIPTION: Defines the lastIndexOf method that returns the last index at which a given element can be found in the array, or -1 if it is not present.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_138\n\nLANGUAGE: typescript\nCODE:\n```\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Int32Array String Conversion Method TypeScript Definitions\nDESCRIPTION: TypeScript definitions for string conversion methods of Int32Array, including toLocaleString, toString, and valueOf which return string or array representations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a number to a string by using the current locale.\n */\ntoLocaleString(): string;\n\n/**\n * Returns a string representation of an array.\n */\ntoString(): string;\n\n/** Returns the primitive value of the specified object. */\nvalueOf(): Int32Array;\n\n[index: number]: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing lastIndexOf Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the lastIndexOf method of Uint32Array. This method returns the last index at which a given element can be found in the array, or -1 if it is not present.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nlastIndexOf(searchElement: number, fromIndex?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Int32Array Interface Method Definitions\nDESCRIPTION: Defines TypeScript method signatures for Int32Array including map, reduce, reduceRight, reverse, set, slice and other array operations with detailed parameter documentation.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_214\n\nLANGUAGE: typescript\nCODE:\n```\nmap(callbackfn: (value: number, index: number, array: Int32Array) => number, thisArg?: any): Int32Array;\n\nreduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\n\nreduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue?: number): number;\n\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Implementing join Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the join method of Uint32Array. This method creates and returns a new string by concatenating all of the elements in an array, separated by a specified separator string.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\njoin(separator?: string): string;\n```\n\n----------------------------------------\n\nTITLE: Int32Array some Method TypeScript Definition\nDESCRIPTION: TypeScript definition for the some method of Int32Array, which tests whether at least one element passes the provided predicate function.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_104\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Determines whether the specified callback function returns true for any element of an array.\n * @param predicate A function that accepts up to three arguments. The some method calls\n * the predicate function for each element in the array until the predicate returns a value\n * which is coercible to the Boolean value true, or until the end of the array.\n * @param thisArg An object to which the this keyword can refer in the predicate function.\n * If thisArg is omitted, undefined is used as the this value.\n */\nsome(predicate: (value: number, index: number, array: Int32Array) => unknown, thisArg?: any): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Uint32Array Interface Methods in TypeScript\nDESCRIPTION: TypeScript interface definition for Uint32Array methods including filter, find, findIndex, forEach, and other array operations. Each method is documented with JSDoc comments explaining parameters and return values.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_218\n\nLANGUAGE: typescript\nCODE:\n```\nfilter(callbackfn: (value: number, index: number, array: Uint32Array) => boolean, thisArg?: any): Uint32Array;\n\n/** \n  * Returns the value of the first element in the array where predicate is true, and undefined \n  * otherwise.\n  * @param predicate find calls predicate once for each element of the array, in ascending \n  * order, until it finds one where predicate returns true. If such an element is found, find \n  * immediately returns that element value. Otherwise, find returns undefined.\n  * @param thisArg If provided, it will be used as the this value for each invocation of \n  * predicate. If it is not provided, undefined is used instead.\n  */\nfind(predicate: (value: number, index: number, obj: Array<number>) => boolean, thisArg?: any): number;\n\n/** \n  * Returns the index of the first element in the array where predicate is true, and undefined \n  * otherwise.\n  * @param predicate find calls predicate once for each element of the array, in ascending \n  * order, until it finds one where predicate returns true. If such an element is found, find \n  * immediately returns that element value. Otherwise, find returns undefined.\n  * @param thisArg If provided, it will be used as the this value for each invocation of \n  * predicate. If it is not provided, undefined is used instead.\n  */\nfindIndex(predicate: (value: number) => boolean, thisArg?: any): number;\n\n/**\n  * Performs the specified action for each element in an array.\n  * @param callbackfn  A function that accepts up to three arguments. forEach calls the \n  * callbackfn function one time for each element in the array. \n  * @param thisArg  An object to which the this keyword can refer in the callbackfn function. \n  * If thisArg is omitted, undefined is used as the this value.\n  */\nforEach(callbackfn: (value: number, index: number, array: Uint32Array) => void, thisArg?: any): void;\n\n/**\n  * Returns the index of the first occurrence of a value in an array.\n  * @param searchElement The value to locate in the array.\n  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n  *  search starts at index 0.\n  */\nindexOf(searchElement: number, fromIndex?: number): number;\n\n/**\n  * Adds all the elements of an array separated by the specified separator string.\n  * @param separator A string used to separate one element of an array from the next in the \n  * resulting String. If omitted, the array elements are separated with a comma.\n  */\njoin(separator?: string): string;\n\n/** \n  * Returns an list of keys in the array\n  */\nkeys(): Iterator<number>;\n\n/**\n  * Returns the index of the last occurrence of a value in an array.\n  * @param searchElement The value to locate in the array.\n  * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the \n  * search starts at index 0.\n  */\nlastIndexOf(searchElement: number, fromIndex?: number): number;\n\n/**\n  * The length of the array.\n  */\nlength: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing reduceRight Methods for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signatures for the reduceRight method of Uint32Array. These overloads allow for reducing an array to a single value by applying a function against an accumulator and each element from right to left, with optional initial value.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number): number;\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Uint32Array) => number, initialValue: number): number;\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Uint32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Defining Intl Namespace Functions in TypeScript\nDESCRIPTION: This snippet defines the getCanonicalLocales() function in the Intl namespace, which returns an array of canonical locale names.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_236\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare namespace Intl {\n    function getCanonicalLocales(locale?: string | readonly string[]): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Float32Array Interface Methods TypeScript Definition\nDESCRIPTION: TypeScript interface definition for Float32Array methods including reduceRight, reverse, set, slice, some, sort, subarray, and other array operations.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_224\n\nLANGUAGE: typescript\nCODE:\n```\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float32Array) => U, initialValue: U): U;\n\n    reverse(): Float32Array;\n\n    set(index: number, value: number): void;\n    set(array: Float32Array, offset?: number): void;\n\n    slice(start?: number, end?: number): Float32Array;\n\n    some(callbackfn: (value: number, index: number, array: Float32Array) => boolean, thisArg?: any): boolean;\n\n    sort(compareFn?: (a: number, b: number) => number): Float32Array;\n\n    subarray(begin: number, end?: number): Float32Array;\n\n    toLocaleString(): string;\n    toString(): string;\n    values(): Iterator<number>;\n\n    [index: number]: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing set Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the set method of Uint32Array. This method modifies the array by copying array elements from a source array or array-like object into it, with an optional offset.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\nset(array: ArrayLike<number>, offset?: number): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing forEach Method for Uint16Array in TypeScript\nDESCRIPTION: Method signature for the 'forEach' method which executes the provided callback function once for each array element. This method does not return a value and is used for side effects only.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nforEach(callbackfn: (value: number, index: number, array: Uint16Array) => void, thisArg?: any): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Float64Array Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Float64Array, which is a typed array that stores 64-bit floating point numbers. The interface includes methods for array manipulation like map, reduce, slice, and sort, along with properties like length and BYTES_PER_ELEMENT.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_227\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Float64Array {\n    /**\n      * The length of the array.\n      */\n    length: number;\n\n    /**\n      * Calls a defined callback function on each element of an array, and returns an array that \n      * contains the results.\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the \n      * callbackfn function one time for each element in the array. \n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    map(callbackfn: (value: number, index: number, array: Float64Array) => number, thisArg?: any): Float64Array;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of \n      * the callback function is the accumulated result, and is provided as an argument in the next \n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\n\n    /**\n      * Calls the specified callback function for all the elements in an array. The return value of \n      * the callback function is the accumulated result, and is provided as an argument in the next \n      * call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the \n      * callbackfn function one time for each element in the array.\n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument \n      * instead of an array value.\n      */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /** \n      * Calls the specified callback function for all the elements in an array, in descending order. \n      * The return value of the callback function is the accumulated result, and is provided as an \n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls \n      * the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an \n      * argument instead of an array value.\n      */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Float64Array) => number, initialValue?: number): number;\n\n    /** \n      * Calls the specified callback function for all the elements in an array, in descending order. \n      * The return value of the callback function is the accumulated result, and is provided as an \n      * argument in the next call to the callback function.\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n      * the callbackfn function one time for each element in the array. \n      * @param initialValue If initialValue is specified, it is used as the initial value to start \n      * the accumulation. The first call to the callbackfn function provides this value as an argument\n      * instead of an array value.\n      */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Float64Array) => U, initialValue: U): U;\n\n    /**\n      * Reverses the elements in an Array. \n      */\n    reverse(): Float64Array;\n\n    /**\n      * Sets a value or an array of values.\n      * @param index The index of the location to set.\n      * @param value The value to set.\n      */\n    set(index: number, value: number): void;\n\n    /**\n      * Sets a value or an array of values.\n      * @param array A typed or untyped array of values to set.\n      * @param offset The index in the current array at which the values are to be written.\n      */\n    set(array: Float64Array, offset?: number): void;\n\n    /** \n      * Returns a section of an array.\n      * @param start The beginning of the specified portion of the array.\n      * @param end The end of the specified portion of the array.\n      */\n    slice(start?: number, end?: number): Float64Array;\n\n    /**\n      * Determines whether the specified callback function returns true for any element of an array.\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the \n      * callbackfn function for each element in array1 until the callbackfn returns true, or until \n      * the end of the array.\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. \n      * If thisArg is omitted, undefined is used as the this value.\n      */\n    some(callbackfn: (value: number, index: number, array: Float64Array) => boolean, thisArg?: any): boolean;\n\n    /**\n      * Sorts an array.\n      * @param compareFn The name of the function used to determine the order of the elements. If \n      * omitted, the elements are sorted in ascending, ASCII character order.\n      */\n    sort(compareFn?: (a: number, b: number) => number): Float64Array;\n\n    /**\n      * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\n      * at begin, inclusive, up to end, exclusive. \n      * @param begin The index of the beginning of the array.\n      * @param end The index of the end of the array.\n      */\n    subarray(begin: number, end?: number): Float64Array;\n\n    /**\n      * Converts a number to a string by using the current locale. \n      */\n    toLocaleString(): string;\n\n    /**\n      * Returns a string representation of an array.\n      */\n    toString(): string;\n\n    /** \n      * Returns an list of values in the array\n      */\n    values(): Iterator<number>;\n\n    [index: number]: number;\n    // [Symbol.iterator] (): Iterator<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing slice Method for Uint32Array in TypeScript\nDESCRIPTION: TypeScript method signature for the slice method of Uint32Array. This method returns a new array containing a portion of the array specified by the start and end indices.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\nslice(start?: number, end?: number): Uint32Array;\n```\n\n----------------------------------------\n\nTITLE: Defining DataViewConstructor Interface in TypeScript\nDESCRIPTION: This snippet defines the DataViewConstructor interface, which includes the prototype and constructor for creating new DataView instances. It specifies the parameters for the constructor, including buffer, byteOffset, and byteLength.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataViewConstructor {\n    readonly prototype: DataView;\n    new (buffer: ArrayBufferLike & { BYTES_PER_ELEMENT?: never; }, byteOffset?: number, byteLength?: number): DataView;\n}\ndeclare var DataView: DataViewConstructor;\n```\n\n----------------------------------------\n\nTITLE: Defining Float64ArrayConstructor Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Float64ArrayConstructor, which provides static methods and properties for creating Float64Array instances. It includes various constructor overloads and static methods like of() and from().\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_228\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Float64ArrayConstructor {\n    prototype: Float64Array;\n    new (length: number): Float64Array;\n    new (array: Float64Array): Float64Array;\n    new (array: number[]): Float64Array;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array;\n\n    /**\n      * The size in bytes of each element in the array. \n      */\n    BYTES_PER_ELEMENT: number;\n\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): Float64Array;\n\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number> | Iterable<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): Float64Array;\n}\ndeclare var Float64Array: Float64ArrayConstructor;\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Version 3.10.4\nDESCRIPTION: This line specifies the Python version to be used in the Windmill project. It indicates that Python 3.10.4 should be used for running scripts or applications within this project environment.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/llm/version.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n3.10.4\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Description\nDESCRIPTION: Basic description of the Windmill API server component, indicating its role in exposing functionality and its implementation as both a library and binary.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/windmill-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Windmill API\n\nThe API server, exposing functionality to other components and the frontend\n\nThis crate exposes both a library as well as a binary target.\n```\n\n----------------------------------------\n\nTITLE: Declaring parseInt Function in TypeScript\nDESCRIPTION: Type declaration for the global parseInt function which converts a string to an integer, with optional radix parameter to specify the numeric base.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Converts a string to an integer.\n * @param string A string to convert into a number.\n * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\n * All other strings are considered decimal.\n */\ndeclare function parseInt(string: string, radix?: number): number;\n```\n\n----------------------------------------\n\nTITLE: Int32Array reduceRight Method TypeScript Definitions\nDESCRIPTION: TypeScript definitions for the reduceRight method of Int32Array, which accumulates values in descending order by applying a callback function for each element in the array.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/es6.d.ts.txt#2025-04-21_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number): number;\nreduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: Int32Array) => number, initialValue: number): number;\n\n/**\n * Calls the specified callback function for all the elements in an array, in descending order.\n * The return value of the callback function is the accumulated result, and is provided as an\n * argument in the next call to the callback function.\n * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n * the callbackfn function one time for each element in the array.\n * @param initialValue If initialValue is specified, it is used as the initial value to start\n * the accumulation. The first call to the callbackfn function provides this value as an argument\n * instead of an array value.\n */\nreduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: Int32Array) => U, initialValue: U): U;\n```\n\n----------------------------------------\n\nTITLE: Email Domain List - Text Format\nDESCRIPTION: A plain text list of email domains and providers, sorted alphabetically. Used for email validation or reference purposes. Contains both active and historical email service providers.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/backend/windmill-api/banned_domains.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsirindia.com\nsiteposter.net\nskafan.com\nskeefmail.com\nskim.com\nskizo.hu\nskrx.tk\nskunkbox.com\nsky.com\nskynet.be\nslamdunkfan.com\n[...additional domains...]\n```\n\n----------------------------------------\n\nTITLE: Handling Process Warnings with Event Listeners\nDESCRIPTION: Shows how to listen for warnings emitted by the process by attaching a handler to the 'warning' event. The handler can access various properties of the Warning object.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nprocess.on('warning', (warning) => {\n  console.warn(warning.name);    // 'Warning'\n  console.warn(warning.message); // 'Something happened!'\n  console.warn(warning.code);    // 'MY_WARNING'\n  console.warn(warning.stack);   // Stack trace\n  console.warn(warning.detail);  // 'This is some additional information'\n});\n```\n\n----------------------------------------\n\nTITLE: Piping stdin to stdout in Node.js\nDESCRIPTION: Shows how to copy process.stdin to process.stdout using the pipe method. This is a basic example of stream manipulation in Node.js.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stdin, stdout } from 'node:process';\n\nstdin.pipe(stdout);\n```\n\n----------------------------------------\n\nTITLE: Setting Supplementary Groups in Node.js\nDESCRIPTION: Demonstrates setting supplementary group IDs using process.setgroups(). Requires root privileges.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getgroups && process.setgroups) {\n  try {\n    process.setgroups([501]);\n    console.log(process.getgroups()); // new groups\n  } catch (err) {\n    console.log(`Failed to set groups: ${err}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Effective Group ID in Node.js\nDESCRIPTION: Shows how to get the effective group ID using process.getegid(). Available only on POSIX platforms.\nSOURCE: https://github.com/windmill-labs/windmill/blob/main/frontend/src/lib/process.d.ts.txt#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport process from 'node:process';\n\nif (process.getegid) {\n  console.log(`Current gid: ${process.getegid()}`);\n}\n```"
  }
]