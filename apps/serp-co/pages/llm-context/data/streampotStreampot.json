[
  {
    "owner": "streampot",
    "repo": "streampot",
    "content": "TITLE: Initializing StreamPot Client (JavaScript)\nDESCRIPTION: This snippet shows how to initialize the StreamPot client with your secret key.  The `secret` is obtained from the StreamPot admin panel and is required for authenticating your requests.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport StreamPot from '@streampot/client';\n\nconst streampot = new StreamPot({\n    secret: 'YOUR_SECRET', // get this by creating a key in the StreamPot admin panel.\n});\n```\n\n----------------------------------------\n\nTITLE: StreamPot Conversion Result Example in JavaScript\nDESCRIPTION: This snippet shows the structure of a completed StreamPot video conversion result. It includes the job ID, status, output file URL, logs, and creation timestamp.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/getting-started.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// convertedVideo\n{\n  id: 235,\n  status: 'completed',\n  outputs: {\n    'output.mp3': 'https://assets.streampot.io/750015a1-4572-4a90-a9ae-f6c9a1be8370-output.mp3'\n  },\n  logs: '',\n  created_at: '2024-06-08T19:51:56.000000Z'\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Client & Submit Job JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the StreamPot client, submit a video clipping job, and check its status. It sets the base URL, input video, start time, duration, and output file name.  It also includes a placeholder for polling the job status in a production environment.\nSOURCE: https://github.com/streampot/streampot/blob/main/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport StreamPot from '@streampot/client'\nconst EXAMPLE_VID = 'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n\nconst client = new StreamPot({\n    baseUrl: 'http://127.0.0.1:3000', // adjust if you are serving in production\n})\n\nconst clipJob = await client.input(EXAMPLE_VID)\n    .setStartTime(1)\n    .setDuration(2)\n    .output('output.mp4')\n    .run()\nconst jobId = clipJob.id\n\n// In production you should set up a poll.\nsetTimeout(async () => {\n    const job = await client.checkStatus(jobId)\n    if (job.status === 'completed'){\n        console.log(job.output_url)\n    } \n},10000) // wait 10 seconds\n```\n\n----------------------------------------\n\nTITLE: Running Video Conversion Job with StreamPot in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up and run a video processing job using the StreamPot client. It converts an MP4 video to MP3 audio. The `input()` method specifies the input video URL, `output()` specifies the output file name, and `runAndWait()` executes the job and waits for it to complete.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/getting-started.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst convertedVideo = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    )\n    .output('output.mp3')\n    .runAndWait();\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamPot Client (JavaScript)\nDESCRIPTION: Initializes a new StreamPot client instance.  Requires the @streampot/client library to be installed.  Takes a configuration object with secret and baseUrl parameters.  The secret is your API key and baseUrl is the URL of your StreamPot server.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport StreamPot from '@streampot/client';\n\nconst client = new StreamPot({\n    secret: 'your-api-key',\n    baseUrl: 'http://localhost:3000',\n});\n```\n\n----------------------------------------\n\nTITLE: Transcoding Video to Audio (JavaScript)\nDESCRIPTION: This snippet demonstrates how to transcode a video file from MP4 to MP3 using the StreamPot client. It takes an input video URL and specifies an output MP3 file. The `runAndWait()` method submits the job and waits for it to complete.  The promise resolves with the job details.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Below is an example transcoding a video from mp4 to mp3.\nconst convertedVideo = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    )\n    .output('output.mp3')\n    .runAndWait();\n```\n\n----------------------------------------\n\nTITLE: Trimming a Video (JavaScript)\nDESCRIPTION: This snippet shows how to trim a video using the StreamPot client.  It sets the start time and duration of the trimmed video using `setStartTime()` and `setDuration()`.  The trimmed video is saved as an MP4 file.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst job = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    )\n    .setStartTime(1)\n    .setDuration(2)\n    .output('output.mp4')\n    .run();\n```\n\n----------------------------------------\n\nTITLE: Extracting Audio from Video (JavaScript)\nDESCRIPTION: This snippet shows how to extract audio from a video using the StreamPot client. It uses the `noVideo` method to disable video processing and sets the output format to MP3. The extracted audio is saved as output.mp3.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst audioOnly = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    )\n    .noVideo()\n    .format(`mp3`)\n    .output('output.mp3')\n    .runAndWait();\nconsole.log(audioOnly.outputs['output.mp3']);\n```\n\n----------------------------------------\n\nTITLE: Changing Video Resolution (JavaScript)\nDESCRIPTION: This snippet demonstrates how to change the resolution of a video using the StreamPot client.  It uses the `size` method to set the new resolution. It also sets the video codec to `libx264` and disables audio.  The modified video is saved as output1.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst lowResolutionVideo = await streampot\n    .addInput(\n        'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4'\n    ) // bigger video\n    .output('output1.mp4')\n    .videoCodec('libx264')\n    .noAudio()\n    .size('640x360')\n    .runAndWait();\n\nconsole.log(lowResolutionVideo.outputs['output1.mp4']);\n```\n\n----------------------------------------\n\nTITLE: Converting Audio Format (JavaScript)\nDESCRIPTION: This snippet demonstrates how to convert an audio file to WAV format using the StreamPot client and the `toFormat` method. The converted audio file is saved as output.wav.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst wavFile = await streampot\n    .input(\n        'https://d38nvwmjovqyq6.cloudfront.net/va90web25003/companions/ws_smith/1%20Comparison%20Of%20Vernacular%20And%20Refined%20Speech.mp3'\n    )\n    .toFormat('wav')\n    .output('output.wav')\n    .runAndWait();\nconsole.log(wavFile.outputs['output.wav']);\n```\n\n----------------------------------------\n\nTITLE: Concatenating Videos (JavaScript)\nDESCRIPTION: This snippet demonstrates how to concatenate two video files using the StreamPot client's `complexFilter` method with the `concat` filter. It also utilizes the `scale` filter to ensure the videos have the same dimensions before concatenation. The resulting concatenated video is saved as merged.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst response = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    )\n    .input('https://download.samplelib.com/mp4/sample-5s.mp4')\n    .complexFilter([\n        // Scale first video and set SAR\n        '[0:v]scale=1920:1080,setsar=1[v0]',\n        // Concat filter\n        '[v0][1:v]concat=n=2:v=1:a=0',\n    ])\n    .output('merged.mp4')\n    .runAndWait();\nconsole.log(response.outputs['merged.mp4']);\n```\n\n----------------------------------------\n\nTITLE: Adding Watermark to Video (JavaScript)\nDESCRIPTION: This snippet shows how to add a watermark to a video using the StreamPot client and the `complexFilter` method with the `overlay` filter. It scales the watermark image and overlays it on the main video. The watermarked video is saved as output5.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst watermarkedVideo = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    ) // buck bunny video\n    .input('https://pngfre.com/wp-content/uploads/orange-poster.png') // picture of orange\n    .complexFilter([\n        {\n            filter: 'scale',\n            options: { w: 'iw*0.1', h: 'ih*0.1' },\n            inputs: '1:v',\n            outputs: 'scaled',\n        },\n        {\n            filter: 'overlay',\n            options: { x: 100, y: 100 },\n            inputs: ['0:v', 'scaled'],\n        },\n    ])\n    .output('output5.mp4')\n    .runAndWait();\nconsole.log(watermarkedVideo.outputs['output5.mp4']);\n```\n\n----------------------------------------\n\nTITLE: Lowering Video Volume (JavaScript)\nDESCRIPTION: This snippet shows how to lower the volume of a video using the StreamPot client and the `outputOption` method with the `volume` filter. It sets the audio volume to 20% of the original.  The modified video is saved as output1.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst reducedVolume = await streampot\n    .addInput(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    ) // your video file input path\n    .outputOption([\n        '-c:v',\n        'copy', // Copy the video stream without re-encoding\n        '-filter:a',\n        'volume=0.2', // Adjust the audio volume to 20% of the original\n    ])\n    .output('output1.mp4') // your output path\n    .runAndWait();\nconsole.log(reducedVolume.outputs['output1.mp4']);\n```\n\n----------------------------------------\n\nTITLE: Cropping Video Dimensions (JavaScript)\nDESCRIPTION: This snippet shows how to crop a video using the StreamPot client and the `videoFilters` method with the `crop` filter.  It sets the width and height of the cropped region. The cropped video is saved as output.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst croppedVideo = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/720/big_buck_bunny_720p_1mb.mp4'\n    )\n    .videoFilters([\n        {\n            filter: 'crop',\n            options: {\n                w: 100,\n                h: 100,\n            },\n        },\n    ])\n    .output('output.mp4')\n    .runAndWait();\nconsole.log(croppedVideo.outputs['output.mp4']);\n```\n\n----------------------------------------\n\nTITLE: Creating Video from Image and Audio (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a video from an image and an audio file using the StreamPot client. It loops the image for a specified duration using `loop` and combines it with an audio track.  The outputOptions are used to specify video and audio codecs.  The resulting video is saved as output.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst videoFromImage = await streampot\n    .input(\n        'https://pub-6ec5ee854d2241de8b41ffcf29bfb6ee.r2.dev/a924d75b-4620-4253-9aa8-967ebc00c027-my_image123.png'\n    )\n    .loop(20)\n    .input(\n        'https://d38nvwmjovqyq6.cloudfront.net/va90web25003/companions/ws_smith/1%20Comparison%20Of%20Vernacular%20And%20Refined%20Speech.mp3'\n    )\n    .outputOptions([\n        '-c:v',\n        'libx264', // Encode the video stream to H.264\n        '-c:a',\n        'aac', // Encode the audio stream to AAC\n        '-shortest', // Ensure the output ends when the shortest stream ends\n        '-pix_fmt',\n        'yuv420p', // Ensure compatibility with most players\n    ])\n    .output('output.mp4')\n    .runAndWait();\nconsole.log(videoFromImage.outputs['output.mp4']);\n```\n\n----------------------------------------\n\nTITLE: Getting a Frame from Video (JavaScript)\nDESCRIPTION: This snippet shows how to extract a single frame from a video using the StreamPot client. It seeks to a specific timestamp using `seekInput` and extracts one frame using `outputOptions`. The extracted frame is saved as my_image123.png.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst frame = await streampot\n    .input(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    )\n    .seekInput('00:00:02.000') // Seek to the specified timestamp\n    .outputOptions('-frames:v 1') // Extract only one frame\n    .output('my_image123.png')\n    .runAndWait();\n\nconsole.log(frame.outputs['my_image123.png']);\n```\n\n----------------------------------------\n\nTITLE: Adding Audio to Video (JavaScript)\nDESCRIPTION: This snippet demonstrates how to add an audio track to a video using the StreamPot client and the `outputOptions` method. It maps the video stream from the first input and the audio stream from the second input. The combined audio and video are saved as output1.mp4.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/examples.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst audioAndVideo = await streampot\n    .addInput(\n        'https://sample-videos.com/video321/mp4/240/big_buck_bunny_240p_1mb.mp4'\n    ) // your video file input path\n    .addInput(\n        'https://d38nvwmjovqyq6.cloudfront.net/va90web25003/companions/ws_smith/1%20Comparison%20Of%20Vernacular%20And%20Refined%20Speech.mp3'\n    ) // your audio file input path\n    .output('output1.mp4') // your output path\n    .outputOptions([\n        '-map',\n        '0:v', // Map the video stream from the first input\n        '-map',\n        '1:a', // Map the audio stream from the second input\n        '-c:v',\n        'copy', // Copy the video stream without re-encoding\n        '-c:a',\n        'aac', // Encode the audio stream to AAC (or any codec you prefer)\n        '-shortest', // Ensure the output ends when the shortest stream ends\n    ])\n    .runAndWait();\nconsole.log(audioAndVideo.outputs['output1.mp4']);\n```\n\n----------------------------------------\n\nTITLE: StreamPot Server .env Configuration\nDESCRIPTION: Example .env file for configuring the StreamPot server. Includes database, Redis, and S3 configuration options.  The S3 options are optional and depend on if you are using S3 storage.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=postgres://postgres:example@db:5432/example\nREDIS_URL=redis://redis:6379\nS3_ACCESS_KEY=\nS3_SECRET_KEY=\nS3_REGION=\nS3_BUCKET_NAME=\nS3_ENDPOINT=\nS3_PUBLIC_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Defining StreamPot Server with Docker Compose (YAML)\nDESCRIPTION: This Docker Compose YAML file defines the services required to run a StreamPot server: server, db (PostgreSQL), and redis. It configures environment variables for database connection, Redis connection, and S3 storage, along with port mappings, volume mounts, and dependency management.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/docker-compose.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nservices:\n  server:\n    image: streampot/server:latest\n    environment:\n      NODE_ENV: production\n      DATABASE_URL: postgres://postgres:example@db:5432/example\n      REDIS_CONNECTION_STRING: redis://redis:6379\n      S3_ACCESS_KEY: ${S3_ACCESS_KEY}\n      S3_SECRET_KEY: ${S3_SECRET_KEY}\n      S3_REGION: ${S3_REGION}\n      S3_BUCKET_NAME: ${S3_BUCKET_NAME}\n      S3_ENDPOINT: ${S3_ENDPOINT}\n      S3_PUBLIC_DOMAIN: ${S3_PUBLIC_DOMAIN}\n      REDIS_HOST: redis\n      REDIS_PORT: 6379\n      FFMPEG_STRATEGY: docker\n    ports:\n      - \"3000:3000\"\n    volumes:\n      # Mount the docker socket to enable launching ffmpeg containers on-demand\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n  db:\n    image: postgres:16\n    restart: always\n    user: postgres\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD=example\n    expose:\n      - 5432\n    healthcheck:\n      test: [ \"CMD\", \"pg_isready\" ]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  redis:\n    image: redislabs/redismod\n    ports:\n      - '6379:6379'\n    healthcheck:\n      test: [ \"CMD\", \"redis-cli\", \"--raw\", \"incr\", \"ping\" ]\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for StreamPot (.env)\nDESCRIPTION: This .env file sets the environment variables for the StreamPot server, including S3 access key, secret key, region, bucket name, endpoint, and public domain. These variables are used to configure the server's connection to S3 storage.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/docker-compose.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nS3_ACCESS_KEY=accessKey\nS3_SECRET_KEY=secretKey\nS3_REGION=eu-west-2\nS3_BUCKET_NAME=yourBucket\nS3_ENDPOINT=https://random3423424.r2.cloudflarestorage.com\nS3_PUBLIC_DOMAIN=https://your-publicly-accessible-storage-domain.com\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Specific Platform\nDESCRIPTION: This command builds a Docker image for a specific platform (linux/amd64). This is useful when the target deployment environment has a different CPU architecture than the development machine. This ensures that the image is compatible with the target platform.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/server/README.Docker.md#_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\ndocker build --platform=linux/amd64 -t myapp .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This command builds a Docker image with the tag 'myapp' using the Dockerfile in the current directory. The resulting image can be used for deploying the application. It creates a new image from the Dockerfile in the current directory.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/server/README.Docker.md#_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker build -t myapp .\n```\n\n----------------------------------------\n\nTITLE: Starting StreamPot Server\nDESCRIPTION: Starts the StreamPot server on the specified port. Requires the StreamPot server CLI tool to be installed globally.  Uses the --port option to specify the port the server will listen on.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ streampot serve --port=3000\n```\n\n----------------------------------------\n\nTITLE: StreamPot Database Migration\nDESCRIPTION: Runs database migrations to set up the database tables for the StreamPot server.  Requires the StreamPot server CLI tool to be installed globally.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ streampot migrate\n```\n\n----------------------------------------\n\nTITLE: Starting StreamPot Server with Docker Compose (Shell)\nDESCRIPTION: This command starts the StreamPot server using Docker Compose. It reads the `compose.yml` file and creates and starts the defined services: server, db, and redis.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/docker-compose.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Docker Strategy Configuration\nDESCRIPTION: Configuration to enable running ffmpeg in Docker containers.  Adds the FFMPEG_STRATEGY environment variable to the .env file and provides the command to pull the ffmpeg image.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nFFMPEG_STRATEGY=docker\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull linuxserver/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Running Application with Docker Compose\nDESCRIPTION: This command uses Docker Compose to build and start the application defined in the docker-compose.yml file. The `--build` flag ensures that the Docker images are built before the containers are started. The application will be accessible on localhost at port 3000.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/server/README.Docker.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Install StreamPot Client with npm\nDESCRIPTION: This command installs the StreamPot client library using npm, the Node Package Manager. The `@streampot/client` package is added as a project dependency.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/getting-started.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm i @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Install StreamPot Client\nDESCRIPTION: This command installs the StreamPot client library using the pnpm package manager. This is a prerequisite for using StreamPot in your application.\nSOURCE: https://github.com/streampot/streampot/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npnpm i @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamPot Client in JavaScript\nDESCRIPTION: This snippet initializes the StreamPot client with your API key, which is essential for authenticating your requests to the StreamPot service. Replace 'YOUR_API_KEY' with your actual API key from StreamPot.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/getting-started.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst streampot = new StreamPot({\n    secret: 'YOUR_API_KEY',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing StreamPot Client (npm)\nDESCRIPTION: Installs the StreamPot client library as a development dependency using npm. This allows interaction with the StreamPot server.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm add -D @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Install StreamPot Client with pnpm\nDESCRIPTION: This command installs the StreamPot client library using pnpm. The `@streampot/client` package is added as a development dependency.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/getting-started.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add -D @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Installing StreamPot Client (pnpm)\nDESCRIPTION: Installs the StreamPot client library as a development dependency using pnpm. This allows interaction with the StreamPot server.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add -D @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Install StreamPot Client with yarn\nDESCRIPTION: This command installs the StreamPot client library using yarn. The `@streampot/client` package is added as a development dependency.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/getting-started.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add -D @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Installing StreamPot Client (yarn)\nDESCRIPTION: Installs the StreamPot client library as a development dependency using yarn. This allows interaction with the StreamPot server.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add -D @streampot/client\n```\n\n----------------------------------------\n\nTITLE: Installing StreamPot Server (npm)\nDESCRIPTION: Installs the StreamPot server CLI tool globally using npm. This allows you to run the StreamPot server application.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ npm add -g @streampot/server\n```\n\n----------------------------------------\n\nTITLE: Installing StreamPot Server (pnpm)\nDESCRIPTION: Installs the StreamPot server CLI tool globally using pnpm. This allows you to run the StreamPot server application.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add -g @streampot/server\n```\n\n----------------------------------------\n\nTITLE: Installing StreamPot Server (yarn)\nDESCRIPTION: Installs the StreamPot server CLI tool globally using yarn. This allows you to run the StreamPot server application.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/installation.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn global add @streampot/server\n```\n\n----------------------------------------\n\nTITLE: Pulling the FFMPEG Image (Shell)\nDESCRIPTION: This command pulls the linuxserver/ffmpeg image from Docker Hub. This image is used by the StreamPot server for on-demand video processing tasks.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/docker-compose.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull linuxserver/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Registry\nDESCRIPTION: This command pushes the Docker image 'myregistry.com/myapp' to the specified container registry. This makes the image available for deployment in a container orchestration system. The registry is where the image will be hosted.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/server/README.Docker.md#_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\ndocker push myregistry.com/myapp\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Refresh Redirection\nDESCRIPTION: This code snippet uses the HTML meta tag with 'http-equiv=\"refresh\"' to redirect the user to a different page. The 'content' attribute specifies the delay in seconds before the redirection and the target URL. In this case, the redirection is immediate to '/getting-started.html'.\nSOURCE: https://github.com/streampot/streampot/blob/main/packages/landing/src/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<meta http-equiv=\"refresh\" content=\"0;url=/getting-started.html\" />\n```"
  }
]