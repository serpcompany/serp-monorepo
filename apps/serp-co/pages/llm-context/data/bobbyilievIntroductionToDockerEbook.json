[
  {
    "owner": "bobbyiliev",
    "repo": "introduction-to-docker-ebook",
    "content": "TITLE: Troubleshooting Container Startup Issues with Docker Commands\nDESCRIPTION: Commands to troubleshoot containers that fail to start, including viewing logs, inspecting container details, and checking container status.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# View container logs\ndocker logs <container_id>\n\n# Inspect container details\ndocker inspect <container_id>\n\n# Check container status\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-stage Builds in Dockerfile\nDESCRIPTION: A multi-stage Dockerfile example that uses a Golang build environment followed by an Alpine runtime environment to create a smaller final image. This approach separates the build environment from the runtime environment, reducing the image size by only including necessary artifacts.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Build stage\nFROM golang:1.16 AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -o main .\n\n# Final stage\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\nCOPY --from=builder /app/main .\nCMD [\"./main\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-stage Builds in Dockerfile\nDESCRIPTION: Multi-stage builds help create smaller final images by separating build-time dependencies from runtime dependencies. This example shows building a Node.js app and then copying only the built assets to an nginx container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:14 AS build\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=build /app/dist /usr/share/nginx/html\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Docker Workflow Commands\nDESCRIPTION: This bash script demonstrates the three fundamental steps in a Docker workflow: building an image from a Dockerfile, pushing the image to Docker Hub, and running a container from the image with port mapping.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/001-docker.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build an image\ndocker build -t myapp:v1 .\n\n# Ship the image to Docker Hub\ndocker push username/myapp:v1\n\n# Run the container\ndocker run -d -p 8080:80 username/myapp:v1\n```\n\n----------------------------------------\n\nTITLE: Debugging Containers that Exit Immediately\nDESCRIPTION: Commands to debug containers that exit right after starting by running in interactive mode and checking the configured ENTRYPOINT and CMD settings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run the container in interactive mode\ndocker run -it --entrypoint /bin/sh <image_name>\n\n# Check the ENTRYPOINT and CMD in the Dockerfile\ndocker inspect --format='{{.Config.Entrypoint}}' <image_name>\ndocker inspect --format='{{.Config.Cmd}}' <image_name>\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration in YAML\nDESCRIPTION: A basic docker-compose.yml file that defines two services: a web service built from a local Dockerfile and a Redis service using an Alpine Linux image.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - .:/code\n    environment:\n      FLASK_ENV: development\n  redis:\n    image: \"redis:alpine\"\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Docker Build\nDESCRIPTION: Example of a multi-stage Dockerfile that separates build and production environments. The first stage compiles a Go application, while the second stage creates a minimal production image with just the binary.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Build stage\nFROM golang:1.16 AS build\nWORKDIR /app\nCOPY . .\nRUN go build -o myapp\n\n# Production stage\nFROM alpine:3.14\nCOPY --from=build /app/myapp /usr/local/bin/myapp\nCMD [\"myapp\"]\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Containers\nDESCRIPTION: Command to display all Docker containers including stopped ones. The -a flag shows all containers regardless of their state.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps -a\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Docker Compose Issues\nDESCRIPTION: Commands to diagnose and resolve problems with Docker Compose deployments, including viewing logs, rebuilding services, and validating configuration.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# View logs for all services\ndocker-compose logs\n\n# Rebuild and recreate containers\ndocker-compose up -d --build\n\n# Check the configuration\ndocker-compose config\n```\n\n----------------------------------------\n\nTITLE: Docker Image Vulnerability Scanning\nDESCRIPTION: Command to scan Docker images for vulnerabilities using Docker Scout\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout cve <image_name>\n```\n\n----------------------------------------\n\nTITLE: Enhancing Container Security with Protection Options\nDESCRIPTION: Docker run command with security options to prevent container escapes. This restricts privilege escalation and drops all capabilities, improving the overall security posture of the container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --security-opt=\"no-new-privileges:true\" --cap-drop=ALL myimage\n```\n\n----------------------------------------\n\nTITLE: Optimizing Docker Image Size with Multi-Stage Builds in Dockerfile\nDESCRIPTION: This snippet demonstrates how to use multi-stage builds to reduce the final Docker image size. It includes a build stage for compiling a Go application and a final stage that only contains the necessary runtime components.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Build stage\nFROM golang:1.16 AS builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .\n\n# Final stage\nFROM alpine:latest\nRUN apk --no-cache add ca-certificates\nWORKDIR /root/\nCOPY --from=builder /app/main .\nCMD [\"./main\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Commands to view all Docker images on the local system. The first command is concise while the second is more verbose.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker images\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Registry in Jenkins Pipeline\nDESCRIPTION: This Jenkins pipeline script builds a Docker image and pushes it to a registry after successful tests. It uses Jenkins' built-in Docker plugin for registry authentication and image management.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Jenkins pipeline example\npipeline {\n    agent any\n    stages {\n        stage('Build and Push') {\n            steps {\n                script {\n                    docker.withRegistry('https://registry.example.com', 'credentials-id') {\n                        def customImage = docker.build(\"my-image:${env.BUILD_ID}\")\n                        customImage.push()\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for a Node.js Microservice\nDESCRIPTION: A Dockerfile that sets up a Node.js microservice using the Alpine base image. It copies the package files, installs dependencies, copies the application code, exposes port 3000, and sets the command to run the server.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:14-alpine\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Disk Space Issues\nDESCRIPTION: Commands to identify and resolve disk space problems in Docker, including checking usage, removing unused data, and identifying large images.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Check Docker disk usage\ndocker system df\n\n# Remove unused data\ndocker system prune -a\n\n# Identify large images\ndocker images --format \"{{.Size}}\\t{{.Repository}}:{{.Tag}}\" | sort -h\n```\n\n----------------------------------------\n\nTITLE: Docker Secrets Management\nDESCRIPTION: Commands and configuration for managing sensitive data using Docker secrets\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"mysecretpassword\" | docker secret create db_password -\n```\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: mysql\n    secrets:\n      - db_password\nsecrets:\n  db_password:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with RUN Instruction in Dockerfile\nDESCRIPTION: The RUN instruction executes commands in a new layer on top of the current image and commits the results. It's best practice to chain commands with && to keep layers small.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y nodejs\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container in Interactive Mode\nDESCRIPTION: Command to run a Docker container and interact with it through a shell. The -it flags provide an interactive terminal session within the container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it <image_name> /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jupyter Notebook Environment with Docker\nDESCRIPTION: Dockerfile configuration for creating a Jupyter notebook environment with common data science libraries including pandas, numpy, matplotlib, and scikit-learn.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8\nRUN pip install jupyter pandas numpy matplotlib scikit-learn\nWORKDIR /notebooks\nEXPOSE 8888\nCMD [\"jupyter\", \"notebook\", \"--ip='*'\", \"--port=8888\", \"--no-browser\", \"--allow-root\"]\n```\n\n----------------------------------------\n\nTITLE: Integration Testing Setup for Microservices\nDESCRIPTION: A Docker Compose configuration for integration testing of microservices. It includes the application, a test database, and a test service that runs the test suite, with proper dependency ordering.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  app:\n    build: .\n    depends_on:\n      - test-db\n  \n  test-db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: test_db\n      POSTGRES_PASSWORD: test_password\n\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile.test\n    depends_on:\n      - app\n      - test-db\n    command: [\"npm\", \"run\", \"test\"]\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dockerfile for Layer Caching\nDESCRIPTION: Example Dockerfile that organizes instructions to maximize build cache utilization. Dependencies and rarely changing components are placed before frequently changing files.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:20.04\nRUN apt-get update && apt-get install -y nginx\nCOPY ./static-files /var/www/html\nCOPY ./config-files /etc/nginx\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Linux using Convenience Script\nDESCRIPTION: This script downloads and executes the Docker installation script, then starts and enables the Docker service to run on boot.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/002-installation.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- https://get.docker.com | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable docker\n```\n\n----------------------------------------\n\nTITLE: Docker Security Bench Audit\nDESCRIPTION: Command to run Docker Bench Security tool for environment auditing\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --net host --pid host --userns host --cap-add audit_control \\\n    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \\\n    -v /var/lib:/var/lib \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v /usr/lib/systemd:/usr/lib/systemd \\\n    -v /etc:/etc --label docker_bench_security \\\n    docker/docker-bench-security\n```\n\n----------------------------------------\n\nTITLE: Flask App with Redis and Nginx Docker Compose Configuration\nDESCRIPTION: A docker-compose.yml that sets up a Flask application with Redis for caching and Nginx as a reverse proxy, including custom networks.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  flask:\n    build: ./flask\n    environment:\n      - FLASK_ENV=development\n    volumes:\n      - ./flask:/code\n\n  redis:\n    image: \"redis:alpine\"\n\n  nginx:\n    image: \"nginx:alpine\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n    ports:\n      - \"80:80\"\n    depends_on:\n      - flask\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Docker Network Connectivity Issues\nDESCRIPTION: Commands to diagnose network connectivity problems in Docker, including inspecting network settings, checking container IP addresses, and using debugging tools.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Inspect network settings\ndocker network inspect <network_name>\n\n# Check container's network settings\ndocker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container_id>\n\n# Use a network debugging container\ndocker run --net container:<container_id> nicolaka/netshoot\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Limiting Docker Container Resource Usage\nDESCRIPTION: Commands to monitor and control CPU and memory usage in Docker containers, including viewing stats and setting or updating resource limits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Monitor resource usage\ndocker stats\n\n# Set resource limits\ndocker run --memory=512m --cpus=0.5 <image_name>\n\n# Update limits for a running container\ndocker update --cpus=0.75 <container_id>\n```\n\n----------------------------------------\n\nTITLE: GPU Support Configuration for Machine Learning\nDESCRIPTION: Dockerfile for setting up NVIDIA GPU support with TensorFlow.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nvidia/cuda:11.0-base\nRUN pip install tensorflow-gpu\nCOPY train.py .\nCMD [\"python\", \"train.py\"]\n```\n\n----------------------------------------\n\nTITLE: Building Multi-platform Images with Docker Buildx\nDESCRIPTION: Commands to create a new Buildx builder instance and build/push multi-platform images. Buildx is a CLI plugin that extends Docker build with full BuildKit support for cross-platform image building.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new builder instance\ndocker buildx create --name mybuilder\n\n# Build and push multi-platform images\ndocker buildx build --platform linux/amd64,linux/arm64 -t myrepo/myimage:latest --push .\n```\n\n----------------------------------------\n\nTITLE: Non-Root User Container Configuration\nDESCRIPTION: Dockerfile configuration to create and use non-root user for container execution\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:14\nRUN groupadd -r myapp && useradd -r -g myapp myuser\nUSER myuser\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Environment Variables\nDESCRIPTION: A docker-compose.yml configuration demonstrating how to use environment variables in your service definitions.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: \"webapp:${TAG}\"\n    environment:\n      - DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Backing Up a Docker Volume\nDESCRIPTION: This command demonstrates how to backup the contents of a Docker volume to a tar file on the host system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v my_volume:/source -v /path/on/host:/backup ubuntu tar cvf /backup/backup.tar /source\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Checks in Dockerfile\nDESCRIPTION: The HEALTHCHECK instruction tells Docker how to test a container to verify it's still working. It specifies the command to run, with options for interval, timeout, and other parameters.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nHEALTHCHECK --interval=30s --timeout=10s CMD curl -f http://localhost/ || exit 1\n```\n\n----------------------------------------\n\nTITLE: Restoring a Docker Volume from Backup\nDESCRIPTION: This command restores a Docker volume from a previously created backup tar file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v my_volume:/target -v /path/on/host:/backup ubuntu tar xvf /backup/backup.tar -C /target --strip 1\n```\n\n----------------------------------------\n\nTITLE: Bridge Network Configuration\nDESCRIPTION: Commands demonstrating the creation and use of custom bridge networks for container communication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my_bridge\ndocker run --network my_bridge --name container1 -d nginx\ndocker run --network my_bridge --name container2 -d nginx\n```\n\n----------------------------------------\n\nTITLE: Database Per Service Pattern in Docker Compose\nDESCRIPTION: A Docker Compose configuration implementing the 'Database per Service' pattern for microservices. Each service has its own dedicated database instance (PostgreSQL for service-a and MySQL for service-b).\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  service-a:\n    build: ./service-a\n    depends_on:\n      - db-a\n\n  db-a:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: service_a_db\n      POSTGRES_PASSWORD: password\n\n  service-b:\n    build: ./service-b\n    depends_on:\n      - db-b\n\n  db-b:\n    image: mysql:8\n    environment:\n      MYSQL_DATABASE: service_b_db\n      MYSQL_ROOT_PASSWORD: password\n```\n\n----------------------------------------\n\nTITLE: Post-Installation Docker Verification and Configuration\nDESCRIPTION: Commands to verify Docker installation by checking version and running a test container, plus configuration steps to enable Docker on boot and add user to docker group.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/002-installation.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker version\ndocker run hello-world\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable docker\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker $USER\n```\n\n----------------------------------------\n\nTITLE: Implementing Docker Health Checks in Dockerfile\nDESCRIPTION: A Dockerfile instruction that adds a health check to monitor container health status. This regularly executes a command inside the container to determine if the service is functioning properly.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nHEALTHCHECK --interval=30s --timeout=10s CMD curl -f http://localhost/ || exit 1\n```\n\n----------------------------------------\n\nTITLE: WordPress with MySQL Docker Compose Configuration\nDESCRIPTION: A complete docker-compose.yml example that sets up WordPress with a MySQL database, including volume persistence and service dependencies.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    ports:\n      - \"8000:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n\nvolumes:\n  db_data: {}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images from Docker Hub\nDESCRIPTION: Commands to download images from Docker Hub. The first shows the general syntax while the second demonstrates downloading a specific Ubuntu version.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull <image_name>:<tag>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ubuntu:20.04\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Docker Image Pull Failures\nDESCRIPTION: Commands to diagnose and resolve issues when pulling Docker images, including checking registry status, verifying authentication, and using verbose output.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Check Docker Hub status\ncurl -Is https://registry.hub.docker.com/v2/ | head -n 1\n\n# Verify your Docker login\ndocker login\n\n# Try pulling with verbose output\ndocker pull --verbose <image_name>\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Docker Resources\nDESCRIPTION: Command to remove all unused Docker resources including containers, networks, and images. This helps reclaim disk space by cleaning up resources that are no longer in use.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ndocker system prune\n```\n\n----------------------------------------\n\nTITLE: Visualizing Docker Architecture with ASCII Diagram\nDESCRIPTION: This diagram illustrates the client-server architecture of Docker, showing how the Docker CLI interacts with the Docker Host and Registry. It visually represents the relationship between the Docker daemon, containers, images, and Docker Hub.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/001-docker.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────┐     ┌─────────────────────────────────────┐\n│ Docker CLI  │     │            Docker Host              │\n│ (docker)    │◄───►│  ┌────────────┐      ┌───────────┐  │\n└─────────────┘     │  │   Docker   │      │ Containers│  │\n                    │  │   Daemon   │◄────►│    and    │  │\n                    │  │  (dockerd) │      │  Images   │  │\n                    │  └────────────┘      └───────────┘  │\n                    └─────────────────────────────────────┘\n                               ▲\n                               │\n                               ▼\n                    ┌─────────────────────┐\n                    │   Docker Registry   │\n                    │    (Docker Hub)     │\n                    └─────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Minimizing Docker Image Layers by Combining Commands in Dockerfile\nDESCRIPTION: This snippet shows how to reduce the number of layers in a Docker image by combining multiple RUN commands into a single instruction. It updates the package list, installs multiple packages, and cleans up in one layer.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y \\\n    package1 \\\n    package2 \\\n    package3 \\\n && rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Parallel Testing with Docker in GitHub Actions\nDESCRIPTION: This GitHub Actions workflow demonstrates how to use Docker for parallel testing across multiple Node.js versions. It builds and runs tests for each specified Node.js version concurrently.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# GitHub Actions example\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [12.x, 14.x, 16.x]\n    steps:\n    - uses: actions/checkout@v2\n    - name: Test with Node.js ${{ matrix.node-version }}\n      run: |\n        docker build -t myapp:${{ matrix.node-version }} --build-arg NODE_VERSION=${{ matrix.node-version }} .\n        docker run myapp:${{ matrix.node-version }} npm test\n```\n\n----------------------------------------\n\nTITLE: Managing Sensitive Data with Docker Secrets\nDESCRIPTION: Commands to create a Docker secret and use it within a service. Docker secrets provide a secure way to manage sensitive data like passwords, SSH keys, and TLS certificates in Docker Swarm.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Create a secret\necho \"mypassword\" | docker secret create my_secret -\n\n# Use the secret in a service\ndocker service create --name myservice --secret my_secret myimage\n```\n\n----------------------------------------\n\nTITLE: Setting Memory and CPU Limits for Docker Containers in Docker Compose\nDESCRIPTION: This YAML snippet shows how to set resource limits for a Docker container using Docker Compose. It specifies CPU and memory limits to ensure the container doesn't consume excessive resources.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  app:\n    image: myapp\n    deploy:\n      resources:\n        limits:\n          cpus: '0.5'\n          memory: 512M\n```\n\n----------------------------------------\n\nTITLE: Read-Only Container Configuration\nDESCRIPTION: Docker Compose configuration for read-only containers with temporary storage\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: nginx\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/cache/nginx\n```\n\n----------------------------------------\n\nTITLE: Automated Building and Testing with Docker in GitLab CI\nDESCRIPTION: This YAML configuration sets up a GitLab CI job for building and testing a Docker application. It uses the latest Docker image and Docker-in-Docker service to build the application and run tests.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# .gitlab-ci.yml example\nbuild_and_test:\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:${CI_COMMIT_SHA} .\n    - docker run myapp:${CI_COMMIT_SHA} npm test\n```\n\n----------------------------------------\n\nTITLE: Flask Model Serving Implementation\nDESCRIPTION: Python Flask application for serving machine learning model predictions via REST API.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('model.pkl', 'rb'))\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.json\n    prediction = model.predict([data['features']])\n    return jsonify({'prediction': prediction.tolist()})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Blue-Green Deployment with Docker Services\nDESCRIPTION: Shell commands for implementing a blue-green deployment strategy using Docker services. It creates a new version, switches traffic by updating network connections, and removes the old version.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Deploy new version (green)\ndocker service create --name myapp-green --replicas 2 myrepo/myapp:v2\n\n# Switch traffic to green\ndocker service update --network-add proxy-network myapp-green\ndocker service update --network-rm proxy-network myapp-blue\n\n# Remove old version (blue)\ndocker service rm myapp-blue\n```\n\n----------------------------------------\n\nTITLE: Scanning Docker Images for Vulnerabilities\nDESCRIPTION: Command to scan a Docker image for security vulnerabilities using Docker's built-in scanning capabilities.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker scan <image_name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Enabling and Using Docker Content Trust\nDESCRIPTION: Commands to enable Docker Content Trust (DCT) and push a signed image. DCT provides image integrity verification and publisher authentication to ensure images haven't been tampered with.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Enable DCT\nexport DOCKER_CONTENT_TRUST=1\n\n# Push a signed image\ndocker push myrepo/myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Running Nginx with Port Mapping in Docker\nDESCRIPTION: Example of running an Nginx web server container with port mapping. This maps port 80 on the host to port 80 in the container, making the Nginx server accessible via the host's port 80.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Configuration with Consul in Docker Compose\nDESCRIPTION: A Docker Compose configuration for setting up service discovery using Consul. It defines a Consul service and two microservices that connect to Consul via environment variables.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  consul:\n    image: consul:latest\n    ports:\n      - \"8500:8500\"\n  \n  service-a:\n    build: ./service-a\n    environment:\n      - CONSUL_HTTP_ADDR=consul:8500\n\n  service-b:\n    build: ./service-b\n    environment:\n      - CONSUL_HTTP_ADDR=consul:8500\n```\n\n----------------------------------------\n\nTITLE: Caching Docker Layers in GitHub Actions\nDESCRIPTION: This GitHub Actions workflow demonstrates how to cache Docker layers to optimize build times. It uses GitHub's cache action to store and restore the Docker build cache.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# GitHub Actions example with caching\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Cache Docker layers\n      uses: actions/cache@v2\n      with:\n        path: /tmp/.buildx-cache\n        key: ${{ runner.os }}-buildx-${{ github.sha }}\n        restore-keys: |\n          ${{ runner.os }}-buildx-\n    - name: Build and push\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        tags: user/app:latest\n        cache-from: type=local,src=/tmp/.buildx-cache\n        cache-to: type=local,dest=/tmp/.buildx-cache\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Docker Microservice\nDESCRIPTION: Shell commands to build a Docker image for a microservice and run it as a container. The service is mapped to port 3000 on the host and runs in detached mode.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-microservice .\ndocker run -d -p 3000:3000 my-microservice\n```\n\n----------------------------------------\n\nTITLE: Implementing a RabbitMQ Message Consumer in Node.js\nDESCRIPTION: A JavaScript example that consumes messages from a RabbitMQ queue. It establishes a connection to the RabbitMQ server, creates a channel, asserts a queue, and processes incoming messages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// consumer.js\nconst amqp = require('amqplib');\n\nasync function consume() {\n  const connection = await amqp.connect('amqp://rabbitmq');\n  const channel = await connection.createChannel();\n  await channel.assertQueue('task_queue');\n  \n  channel.consume('task_queue', (msg) => {\n    console.log(\"Received:\", msg.content.toString());\n    channel.ack(msg);\n  });\n}\n\nconsume();\n```\n\n----------------------------------------\n\nTITLE: Container Resource Limits Configuration\nDESCRIPTION: Docker Compose configuration for limiting container CPU and memory resources\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: nginx:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 50M\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as an API Gateway for Microservices\nDESCRIPTION: An NGINX configuration that sets up an API gateway for routing requests to different microservices. It defines upstream servers for each service and configures location-based routing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nhttp {\n    upstream service_a {\n        server service-a:3000;\n    }\n    upstream service_b {\n        server service-b:3000;\n    }\n\n    server {\n        listen 80;\n\n        location /api/service-a {\n            proxy_pass http://service_a;\n        }\n\n        location /api/service-b {\n            proxy_pass http://service_b;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Security Scanning with Trivy in GitLab CI\nDESCRIPTION: This GitLab CI job configuration shows how to integrate the Trivy security scanner into the pipeline. It scans the built Docker image for vulnerabilities.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# GitLab CI with Trivy scanner\nscan:\n  image: aquasec/trivy:latest\n  script:\n    - trivy image myapp:${CI_COMMIT_SHA}\n```\n\n----------------------------------------\n\nTITLE: Using a Named Docker Volume with a Container\nDESCRIPTION: This command runs a container and mounts a named volume to a specific path inside the container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name devtest -v my_volume:/app nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Multi-architecture Docker Manifests\nDESCRIPTION: Commands to create and push multi-architecture image manifests. This enables a single image reference to work on multiple hardware architectures by creating a manifest list pointing to architecture-specific images.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker manifest create myrepo/myimage myrepo/myimage:amd64 myrepo/myimage:arm64\ndocker manifest push myrepo/myimage\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Volume\nDESCRIPTION: Command to create a named Docker volume for data persistence. Volumes allow data to persist beyond the lifecycle of containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create my_volume\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Volumes in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to create and use named volumes in a Docker Compose configuration file. It shows how to define a volume named 'data' and mount it to a PostgreSQL container for persistent storage of database files.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  db:\n    image: postgres\n    volumes:\n      - data:/var/lib/postgresql/data\n\nvolumes:\n  data:\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker BuildKit\nDESCRIPTION: Command to enable Docker BuildKit, a next-generation build engine that offers faster builds, better cache management, and advanced features like concurrent dependency resolution and efficient instruction caching.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_BUILDKIT=1\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Custom Bridge Networks in Docker\nDESCRIPTION: Commands to create an isolated bridge network and run containers within it, allowing containers to communicate using their names as hostnames. This improves security and simplifies container-to-container communication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver bridge isolated_network\ndocker run --network=isolated_network --name container1 -d nginx\ndocker run --network=isolated_network --name container2 -d nginx\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Nginx Dockerfile\nDESCRIPTION: Example Dockerfile that builds an Nginx image based on Ubuntu 20.04. It updates packages, installs Nginx, copies a configuration file, exposes port 80, and sets the command to run Nginx.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:20.04\nRUN apt-get update && apt-get install -y nginx\nCOPY ./my-nginx.conf /etc/nginx/nginx.conf\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Networks\nDESCRIPTION: Command to get detailed information about a specific Docker network including subnet, gateway, and connected containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker network inspect <network_name>\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Docker Port Mapping Issues\nDESCRIPTION: Commands to troubleshoot port mapping problems in Docker, including checking port mappings, verifying firewall settings, and testing ports directly on containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Check port mappings\ndocker port <container_id>\n\n# Verify host machine's firewall settings\nsudo ufw status\n\n# Test the port directly on the container\ndocker exec <container_id> nc -zv localhost <port>\n```\n\n----------------------------------------\n\nTITLE: Distributed Training Configuration with Docker Swarm\nDESCRIPTION: Docker Compose configuration for distributed training setup with multiple replicas.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  trainer:\n    image: my-ml-image\n    deploy:\n      replicas: 4\n    command: [\"python\", \"distributed_train.py\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Service\nDESCRIPTION: YAML configuration for exposing Nginx deployment using a LoadBalancer service type.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\nspec:\n  selector:\n    app: nginx\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 80\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Docker Content Trust Configuration\nDESCRIPTION: Commands to enable and use Docker Content Trust for image signing\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_CONTENT_TRUST=1\ndocker push myrepo/myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring and Viewing Docker Container Logs\nDESCRIPTION: Commands to view and configure logging for Docker containers, including viewing logs, following log output, and setting log driver options.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# View container logs\ndocker logs <container_id>\n\n# Follow log output\ndocker logs -f <container_id>\n\n# Adjust logging driver\ndocker run --log-driver json-file --log-opt max-size=10m <image_name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Liveness and Readiness Probes in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to implement liveness and readiness probes in a Kubernetes deployment. These probes help ensure that containers are healthy and ready to serve traffic.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  httpGet:\n    path: /healthz\n    port: 8080\n  initialDelaySeconds: 3\n  periodSeconds: 3\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Ubuntu\nDESCRIPTION: A step-by-step process to install Docker on Ubuntu by adding Docker's official repository and installing the required packages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/002-installation.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with a Volume\nDESCRIPTION: Command to run a container with a mounted volume. This mounts the named volume to a specific path inside the container, allowing data persistence.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -v my_volume:/path/in/container <image_name>\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Images\nDESCRIPTION: Commands to delete Docker images. The first two show alternative syntax for removing specific images, while the third removes all unused images.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi <image_name>:<tag>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker image rm <image_name>:<tag>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker image prune\n```\n\n----------------------------------------\n\nTITLE: Performance Testing with Apache JMeter in Jenkins Pipeline\nDESCRIPTION: This Jenkins pipeline stage demonstrates how to perform performance testing using Apache JMeter in a Docker container. It runs a JMeter test plan and generates a performance report.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Jenkins pipeline with Apache JMeter\nstage('Performance Tests') {\n    steps {\n        sh 'docker run -v ${WORKSPACE}:/jmeter apache/jmeter -n -t test-plan.jmx -l results.jtl'\n        perfReport 'results.jtl'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus and Grafana for Microservices Monitoring\nDESCRIPTION: A Docker Compose configuration for monitoring microservices using Prometheus and Grafana. Prometheus collects metrics and Grafana provides visualization, with mapped ports for accessing their interfaces.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - \"9090:9090\"\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - prometheus\n```\n\n----------------------------------------\n\nTITLE: Custom Networking in Docker Compose\nDESCRIPTION: Configuring custom networks in docker-compose.yml to control which services can communicate with each other.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    networks:\n      - frontend\n      - backend\n  db:\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configurations in Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to use build arguments for environment-specific configurations. It allows different configuration files to be copied based on the build argument.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG CONFIG_FILE=default.conf\nCOPY config/${CONFIG_FILE} /app/config.conf\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Profiles for Selective Service Startup\nDESCRIPTION: Docker Compose YAML configuration that defines service profiles, allowing selective service startup. This helps manage complex applications by grouping services into profiles that can be started independently.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: frontend\n    profiles: [\"frontend\"]\n  backend:\n    image: backend\n    profiles: [\"backend\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network\nDESCRIPTION: Command to create a new Docker network. This establishes a named network that containers can connect to for communication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create my_network\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Logging with ELK Stack in Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up an ELK (Elasticsearch, Logstash, Kibana) stack for monitoring and logging. It includes logging configuration for the application container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Docker Compose with ELK stack\nversion: '3'\nservices:\n  app:\n    image: myapp:latest\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"200k\"\n        max-file: \"10\"\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0\n  logstash:\n    image: docker.elastic.co/logstash/logstash:7.10.0\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.10.0\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: Command to display all Docker networks on the host. This shows network IDs, names, drivers, and scope of all Docker networks.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker network ls\n```\n\n----------------------------------------\n\nTITLE: Using Alpine-Based Images for Smaller Docker Containers\nDESCRIPTION: This Dockerfile snippet demonstrates how to use an Alpine-based image as the base for a Docker container. Alpine images are typically smaller and faster to pull, which can improve build and deployment times.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.14\nRUN apk add --no-cache python3\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Executable with ENTRYPOINT Instruction in Dockerfile\nDESCRIPTION: The ENTRYPOINT instruction configures a container to run as an executable. It's often used with CMD, where ENTRYPOINT defines the executable and CMD supplies default arguments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Healthchecks in Docker Compose\nDESCRIPTION: Adding healthchecks to a service to ensure it's ready before dependent services start.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: \"webapp:latest\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n      interval: 1m30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n```\n\n----------------------------------------\n\nTITLE: Blue-Green Deployment Script with Docker\nDESCRIPTION: This bash script implements a blue-green deployment strategy using Docker services. It updates the blue service with a new image and scales the services to switch traffic.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\ndocker service update --image myrepo/myapp:${NEW_VERSION} myapp_blue\ndocker service scale myapp_blue=2 myapp_green=0\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prometheus and Grafana for Docker Monitoring in Docker Compose\nDESCRIPTION: This YAML snippet shows how to set up Prometheus and Grafana containers for monitoring Docker environments using Docker Compose. It includes volume mounts for configuration and port mapping for Grafana.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n```\n\n----------------------------------------\n\nTITLE: Starting Specific Docker Compose Profiles\nDESCRIPTION: Command to start services with a specific profile in Docker Compose. This allows starting only the services associated with the specified profile, providing more control over complex service deployments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose --profile frontend up -d\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Images\nDESCRIPTION: Commands to add tags to Docker images. This is useful for versioning or preparing images for distribution to registries like Docker Hub.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag <source_image>:<tag> <target_image>:<tag>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag my-nginx:v1 my-dockerhub-username/my-nginx:v1\n```\n\n----------------------------------------\n\nTITLE: Sharing Docker Volumes Between Containers\nDESCRIPTION: These commands demonstrate how to share a single volume between multiple containers for data sharing.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name container1 -v my_volume:/app nginx:latest\ndocker run -d --name container2 -v my_volume:/app nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Deploying with Docker Swarm in GitLab CI\nDESCRIPTION: This GitLab CI configuration demonstrates how to deploy an application using Docker Swarm. It uses the docker stack deploy command to deploy a stack defined in a docker-compose.yml file.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Docker Swarm deployment in GitLab CI\ndeploy:\n  stage: deploy\n  script:\n    - docker stack deploy -c docker-compose.yml myapp\n```\n\n----------------------------------------\n\nTITLE: Interactive Debugging of Docker Containers\nDESCRIPTION: Commands for interactive debugging of Docker containers, including starting shells in running containers or creating new containers specifically for debugging.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Start an interactive shell in a running container\ndocker exec -it <container_id> /bin/bash\n\n# Run a new container with a shell for debugging\ndocker run -it --entrypoint /bin/bash <image_name>\n```\n\n----------------------------------------\n\nTITLE: Setting Base Image with FROM Instruction in Dockerfile\nDESCRIPTION: The FROM instruction initializes a new build stage and sets the base image for subsequent instructions. This is typically the first instruction in a Dockerfile.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:20.04\n```\n\n----------------------------------------\n\nTITLE: Managing Microservices with Docker Swarm\nDESCRIPTION: Shell commands for managing microservices deployment with Docker Swarm. It includes initializing a swarm, deploying a stack from a Docker Compose file, and scaling a service to multiple replicas.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize swarm\ndocker swarm init\n\n# Deploy stack\ndocker stack deploy -c docker-compose.yml myapp\n\n# Scale a service\ndocker service scale myapp_service-a=3\n```\n\n----------------------------------------\n\nTITLE: Model Serving Dockerfile Configuration\nDESCRIPTION: Dockerfile for deploying Flask model serving application.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY app.py .\nCOPY model.pkl .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring .dockerignore File for Excluding Unnecessary Files\nDESCRIPTION: This snippet demonstrates the contents of a .dockerignore file, which is used to exclude unnecessary files from the Docker build context. It helps reduce build time and image size by ignoring specified files and directories.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n.git\n*.md\n*.log\n```\n\n----------------------------------------\n\nTITLE: Pushing Images to Docker Hub\nDESCRIPTION: Commands to authenticate with Docker Hub and push an image to the registry, making it available for others to use.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker push my-dockerhub-username/my-nginx:v1\n```\n\n----------------------------------------\n\nTITLE: Managing Container Network Connections\nDESCRIPTION: Commands for connecting containers to networks and managing network connections.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network <network_name> <image>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network my_custom_network --name container1 -d nginx\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network connect <network_name> <container_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network disconnect <network_name> <container_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network rm <network_name>\n```\n\n----------------------------------------\n\nTITLE: Documenting Network Ports with EXPOSE Instruction in Dockerfile\nDESCRIPTION: The EXPOSE instruction informs Docker that the container listens on specified network ports at runtime. This doesn't actually publish the port; it functions as documentation.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nEXPOSE 80 443\n```\n\n----------------------------------------\n\nTITLE: Overlay Network Configuration\nDESCRIPTION: Commands for creating and using overlay networks in Docker Swarm mode.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver overlay my_overlay\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create --network my_overlay --name my_service nginx\n```\n\n----------------------------------------\n\nTITLE: Using Docker Volumes for Improved Storage Performance in Docker Compose\nDESCRIPTION: This YAML snippet shows how to use Docker volumes instead of bind mounts in a Docker Compose file. Volumes generally offer better performance and are the recommended way to persist data in Docker.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  db:\n    image: postgres\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose in Travis CI\nDESCRIPTION: This Travis CI configuration demonstrates how to use Docker Compose for managing multi-container applications in a CI/CD pipeline. It starts services, runs tests, and then shuts down the containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Travis CI example\nservices:\n  - docker\n\nbefore_install:\n  - docker-compose up -d\n  - docker-compose exec -T app npm install\n\nscript:\n  - docker-compose exec -T app npm test\n\nafter_success:\n  - docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Creating Mount Points with VOLUME Instruction in Dockerfile\nDESCRIPTION: The VOLUME instruction creates a mount point and marks it as holding externally mounted volumes from native host or other containers. Useful for mutable parts of your image.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nVOLUME /data\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Docker Volume\nDESCRIPTION: This command creates a named volume in Docker which is the recommended way to persist data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create my_volume\n```\n\n----------------------------------------\n\nTITLE: Network Troubleshooting\nDESCRIPTION: Command for advanced network troubleshooting by accessing container network namespace.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npid=$(docker inspect -f '{{.State.Pid}}' <container_name>)\nnsenter -t $pid -n ip addr\n```\n\n----------------------------------------\n\nTITLE: Mounting a Docker Volume as Read-Only\nDESCRIPTION: This command mounts a volume as read-only to prevent containers from modifying the data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name devtest -v my_volume:/app:ro nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Conda Environment Setup in Docker\nDESCRIPTION: Dockerfile for setting up a Conda environment using environment.yml configuration.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM continuumio/miniconda3\nCOPY environment.yml .\nRUN conda env create -f environment.yml\nSHELL [\"conda\", \"run\", \"-n\", \"myenv\", \"/bin/bash\", \"-c\"]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment in CircleCI\nDESCRIPTION: This CircleCI configuration snippet shows how to update a Kubernetes deployment with a new Docker image. It uses kubectl to set the new image for the deployment.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/014-docker-ci-cd.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Kubernetes deployment in CircleCI\ndeployment:\n  kubectl:\n    command: |\n      kubectl set image deployment/myapp myapp=myrepo/myapp:${CIRCLE_SHA1}\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Contexts for Multiple Environments\nDESCRIPTION: Commands for creating, listing, and switching between Docker contexts to manage multiple Docker environments. This feature is useful for managing local and remote Docker hosts from a single client.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new context\ndocker context create my-remote --docker \"host=ssh://user@remote-host\"\n\n# List contexts\ndocker context ls\n\n# Switch context\ndocker context use my-remote\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube Cluster\nDESCRIPTION: Command to initialize a local Kubernetes cluster using Minikube for development purposes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Starting a Docker Container\nDESCRIPTION: Command to start a previously stopped Docker container. Requires either the container ID or name as an argument.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker start <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container in Detached Mode\nDESCRIPTION: Command to run a Docker container in the background (detached mode). The -d flag makes the container run in the background and returns control to the terminal.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d <image_name>\n```\n\n----------------------------------------\n\nTITLE: Spark Cluster Configuration\nDESCRIPTION: Docker Compose configuration for setting up a Spark cluster with master and worker nodes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  spark-master:\n    image: bitnami/spark:3\n    environment:\n      - SPARK_MODE=master\n    ports:\n      - \"8080:8080\"\n  spark-worker:\n    image: bitnami/spark:3\n    environment:\n      - SPARK_MODE=worker\n      - SPARK_MASTER_URL=spark://spark-master:7077\n    depends_on:\n      - spark-master\n```\n\n----------------------------------------\n\nTITLE: Host Network Configuration\nDESCRIPTION: Command to run a container using host networking for direct access to host network stack.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network host -d nginx\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Docker Volume\nDESCRIPTION: This command provides detailed information about a specific Docker volume.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume inspect my_volume\n```\n\n----------------------------------------\n\nTITLE: Deploying Nginx on Kubernetes\nDESCRIPTION: YAML configuration for deploying Nginx containers with 3 replicas using Kubernetes Deployment resource.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Identifying Performance Bottlenecks in Docker\nDESCRIPTION: Commands for diagnosing performance issues in Docker, including monitoring resource usage, profiling processes, and setting up cAdvisor for detailed metrics.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Monitor container resource usage\ndocker stats\n\n# Profile container processes\ndocker top <container_id>\n\n# Use cAdvisor for more detailed metrics\ndocker run \\\n  --volume=/:/rootfs:ro \\\n  --volume=/var/run:/var/run:ro \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  --volume=/dev/disk/:/dev/disk:ro \\\n  --publish=8080:8080 \\\n  --detach=true \\\n  --name=cadvisor \\\n  google/cadvisor:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on CentOS\nDESCRIPTION: Commands to install Docker on CentOS by adding the Docker repository and installing Docker packages.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/002-installation.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install docker-ce docker-ce-cli containerd.io\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start docker\nsudo systemctl enable docker\n```\n\n----------------------------------------\n\nTITLE: Optimizing DNS Resolution for Docker Containers\nDESCRIPTION: This bash command demonstrates how to specify a custom DNS server for a Docker container, which can help optimize DNS resolution performance.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --dns 8.8.8.8 myapp\n```\n\n----------------------------------------\n\nTITLE: Modifying Content in an Apache Docker Container\nDESCRIPTION: Commands to access a running Apache container and modify its default web page. This example connects to the container's shell and replaces the default index.html with custom content.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it my-apache /bin/bash\necho \"<h1>Hello from my Apache container!</h1>\" > /usr/local/apache2/htdocs/index.html\nexit\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Docker Volumes\nDESCRIPTION: This command removes all unused Docker volumes to free up space.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume prune\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Images\nDESCRIPTION: Command to retrieve detailed information about a specific Docker image, including layers, configurations, and metadata.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect <image_name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Scaling Services with Docker Compose\nDESCRIPTION: Command to scale up a specific service to run multiple instances using Docker Compose.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d --scale web=3\n```\n\n----------------------------------------\n\nTITLE: Setting Default Command with CMD Instruction in Dockerfile\nDESCRIPTION: The CMD instruction provides defaults for an executing container. There can only be one CMD instruction in a Dockerfile, and it can be overridden at runtime.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Volume\nDESCRIPTION: This command removes a specific Docker volume from the system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume rm my_volume\n```\n\n----------------------------------------\n\nTITLE: Removing All Stopped Docker Containers\nDESCRIPTION: Command to remove all stopped containers. This frees up resources by cleaning up containers that are no longer running.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ndocker container prune\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service\nDESCRIPTION: Command to create a Docker service with specified name, port mapping, number of replicas, and image.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create --name bobby-web -p 80:80 --replicas 5 bobbyiliev/php-apache\n```\n\n----------------------------------------\n\nTITLE: Running GPU-enabled Container\nDESCRIPTION: Command to run a Docker container with GPU support.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --gpus all my-gpu-ml-container\n```\n\n----------------------------------------\n\nTITLE: Network Segmentation Configuration\nDESCRIPTION: Docker Compose configuration for isolating containers using network segmentation\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  frontend:\n    networks:\n      - frontend\n  backend:\n    networks:\n      - backend\nnetworks:\n  frontend:\n  backend:\n```\n\n----------------------------------------\n\nTITLE: Scaling a Docker Service\nDESCRIPTION: Command to scale a Docker service by increasing or decreasing the number of replicas.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker service scale name_of_your_service_here=7\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Container Health Checks in Dockerfile\nDESCRIPTION: Dockerfile instruction to add a health check to a container. This example uses curl to check if the container's web server is responding properly, with parameters for interval, timeout, and retry settings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_26\n\nLANGUAGE: dockerfile\nCODE:\n```\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost/ || exit 1\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory with WORKDIR Instruction in Dockerfile\nDESCRIPTION: The WORKDIR instruction sets the working directory for subsequent RUN, CMD, ENTRYPOINT, COPY, and ADD instructions. If the directory doesn't exist, it will be created.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /app\n```\n\n----------------------------------------\n\nTITLE: Managing Kubernetes Secrets\nDESCRIPTION: Commands and configuration for handling sensitive information in Kubernetes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic my-secret --from-literal=password=mysecretpassword\n```\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  containers:\n  - name: myapp\n    image: myapp\n    env:\n    - name: SECRET_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          name: my-secret\n          key: password\n```\n\n----------------------------------------\n\nTITLE: Restarting a Docker Container\nDESCRIPTION: Command to restart a Docker container. This effectively performs a stop followed by a start operation on the specified container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker restart <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Storage Configuration\nDESCRIPTION: YAML configuration for creating a Persistent Volume Claim in Kubernetes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: mysql-pv-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Container\nDESCRIPTION: Command to remove a stopped Docker container. The container must be stopped before it can be removed using this command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Detached Mode\nDESCRIPTION: Command to start Docker Compose containers in the background (detached mode).\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d  # Run in detached mode\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Experimental Features\nDESCRIPTION: JSON configuration to enable experimental features in the Docker daemon. This unlocks advanced capabilities like checkpoint and restore functionality and rootless mode.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"experimental\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Restore in Docker Daemon Configuration\nDESCRIPTION: This JSON snippet shows how to enable the live restore feature in the Docker daemon configuration. This allows containers to keep running even if the Docker daemon becomes unavailable.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"live-restore\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Build-time Variables with ARG Instruction in Dockerfile\nDESCRIPTION: The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command. This allows for more flexible image builds.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG VERSION=latest\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Microservice API with Jest\nDESCRIPTION: A JavaScript example showing unit testing for a microservice API using Jest. It tests if the API endpoint returns the expected status code and response structure.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Jest example\ntest('API returns correct data', async () => {\n  const response = await request(app).get('/api/data');\n  expect(response.statusCode).toBe(200);\n  expect(response.body).toHaveProperty('message');\n});\n```\n\n----------------------------------------\n\nTITLE: Running an Apache Web Server Docker Container\nDESCRIPTION: Command to run an Apache (httpd) container with a specific name and port mapping. This creates a detached container named 'my-apache' with port 8080 on the host mapped to port 80 in the container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name my-apache -p 8080:80 httpd\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Volume with a Specific Driver\nDESCRIPTION: This command creates a Docker volume using a specified volume driver, allowing for storage on remote hosts or cloud providers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create --driver <driver_name> my_volume\n```\n\n----------------------------------------\n\nTITLE: Encrypted Overlay Network Creation\nDESCRIPTION: Command to create an encrypted overlay network for secure container-to-container communication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --opt encrypted --driver overlay my_secure_network\n```\n\n----------------------------------------\n\nTITLE: Running Containers from Docker Images\nDESCRIPTION: Commands to create and start containers from images. The first shows general syntax, while the second demonstrates launching an interactive Ubuntu container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run <image_name>:<tag>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it ubuntu:20.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Installation\nDESCRIPTION: Commands to update Docker CE to the latest version for security patches\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get upgrade docker-ce\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Networks\nDESCRIPTION: Commands to create new Docker networks with various configuration options including driver selection and subnet configuration.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver <driver> <network_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver bridge my_custom_network\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver bridge --subnet 172.18.0.0/16 --gateway 172.18.0.1 my_custom_network\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Storage Driver for Performance\nDESCRIPTION: This JSON snippet demonstrates how to configure the Docker daemon to use the overlay2 storage driver, which generally offers better performance compared to other options.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"overlay2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Docker Image to Docker Hub\nDESCRIPTION: Commands to log into Docker Hub and push a built image to the repository for others to use.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n\ndocker push your-docker-user/name-of-image-aqui\n```\n\n----------------------------------------\n\nTITLE: Copying Files with COPY and ADD Instructions in Dockerfile\nDESCRIPTION: COPY and ADD instructions copy files from the host into the Docker image. COPY is simpler while ADD has additional features like tar extraction and remote URL support.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY package.json .\nADD https://example.com/big.tar.xz /usr/src/things/\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-file Logging Driver with Limits in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to configure the JSON-file logging driver with size and file count limits in a Docker Compose file. This helps prevent log files from consuming too much disk space.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  app:\n    image: myapp\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Swarm Nodes\nDESCRIPTION: Command to list all available nodes in the Docker swarm. This can only be run from a swarm manager.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Optuna Hyperparameter Tuning Configuration\nDESCRIPTION: Docker Compose configuration for distributed hyperparameter tuning using Optuna.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  optuna-worker:\n    image: my-optuna-image\n    deploy:\n      replicas: 10\n    command: [\"python\", \"optimize.py\"]\n  optuna-dashboard:\n    image: optuna/optuna-dashboard\n    ports:\n      - \"8080:8080\"\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image from Dockerfile\nDESCRIPTION: Command to build a Docker image from a Dockerfile in the current directory, tagging it with a name and version.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-nginx:v1 .\n```\n\n----------------------------------------\n\nTITLE: Enabling BuildKit for Docker Builds\nDESCRIPTION: BuildKit is a new backend for Docker builds offering better performance and features. This command enables BuildKit by setting an environment variable.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_BUILDKIT=1\n```\n\n----------------------------------------\n\nTITLE: AutoML Environment Setup\nDESCRIPTION: Dockerfile for setting up an automated machine learning environment with auto-sklearn.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8\nRUN pip install auto-sklearn\nCOPY automl_script.py .\nCMD [\"python\", \"automl_script.py\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Volumes\nDESCRIPTION: This command displays all Docker volumes currently on the system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume ls\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Services\nDESCRIPTION: Command to list all Docker services running in the swarm.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Images\nDESCRIPTION: Shows how to assign a name and tag to a Docker image using the docker tag command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag IMAGE_ID YOUR_TAG\n```\n\n----------------------------------------\n\nTITLE: Promoting Worker to Manager\nDESCRIPTION: Command to promote a worker node to a manager node in the Docker swarm. Must be run from a manager node.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker node promote node_id_here\n```\n\n----------------------------------------\n\nTITLE: Connecting a Docker Container to a Network\nDESCRIPTION: Command to run a container and connect it to a specific Docker network. This allows the container to communicate with other containers on the same network.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --network my_network --name my_container <image_name>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker System\nDESCRIPTION: Command to remove all unused containers, networks, images (both dangling and unreferenced), and optionally volumes to free up disk space.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker system prune -a\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Dockerfile Instructions with ONBUILD\nDESCRIPTION: Dockerfile instructions using ONBUILD to create custom automated build steps. These instructions are triggered when the image is used as a base image in another Dockerfile's FROM instruction.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nONBUILD ADD . /app/src\nONBUILD RUN /usr/local/bin/python-build --dir /app/src\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images using Docker CLI\nDESCRIPTION: Demonstrates how to download Docker images using the docker pull command. Shows pulling a generic Ubuntu image and a specific version.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ubuntu\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ubuntu: 14.04\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Docker Images\nDESCRIPTION: Demonstrates how to save changes made to a running container as a new Docker image.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker container commit ID_HERE\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker images ls\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Volume with Labels\nDESCRIPTION: This command creates a Docker volume with a label for better organization and management.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create --label project=myapp my_volume\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manager Join Token\nDESCRIPTION: Command to obtain the token required for joining additional manager nodes to the swarm.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join-token manager\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in a Running Docker Container\nDESCRIPTION: Command to execute a new command in a running container. The -it flags provide an interactive terminal for the command being executed.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container_id_or_name> <command>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Docker Daemon Issues\nDESCRIPTION: Commands to diagnose and resolve problems with the Docker daemon service, including checking status, viewing logs, and restarting the service.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Check Docker daemon status\nsudo systemctl status docker\n\n# View Docker daemon logs\nsudo journalctl -u docker.service\n\n# Restart Docker daemon\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image\nDESCRIPTION: Command to download an Apache (httpd) Docker image from Docker Hub. This fetches the image layers and prepares it for use in creating containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull httpd\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Dockerfile\nDESCRIPTION: Shows an example of a basic Dockerfile that updates an Alpine Linux base image.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN apk update\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaler in Kubernetes\nDESCRIPTION: This YAML snippet shows how to configure a Horizontal Pod Autoscaler in Kubernetes. It defines scaling rules based on CPU utilization, allowing the system to automatically adjust the number of pod replicas.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: myapp-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: myapp\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      targetAverageUtilization: 50\n```\n\n----------------------------------------\n\nTITLE: Displaying Swarm Information\nDESCRIPTION: Command to get information about the current state of the Docker swarm.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker info\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command Syntax\nDESCRIPTION: The basic syntax for the Docker build command, showing the available options and parameters.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build [OPTIONS] PATH | URL | -\n```\n\n----------------------------------------\n\nTITLE: Port Mapping in Docker Containers\nDESCRIPTION: Command to map a container's port to the host machine. The -p flag maps the specified host port to the container port, allowing external access to services running in the container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p <host_port>:<container_port> <image_name>\n```\n\n----------------------------------------\n\nTITLE: Resolving Docker Data Persistence Issues\nDESCRIPTION: Commands to troubleshoot problems with data persistence in Docker, including listing and inspecting volumes and checking volume mounts in containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# List volumes\ndocker volume ls\n\n# Inspect a volume\ndocker volume inspect <volume_name>\n\n# Check volume mounts in a container\ndocker inspect --format='{{range .Mounts}}{{.Source}} -> {{.Destination}}{{\"\\n\"}}{{end}}' <container_id>\n```\n\n----------------------------------------\n\nTITLE: R Studio Environment Setup\nDESCRIPTION: Dockerfile for setting up R Studio with required packages for data analysis.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM rocker/rstudio\nRUN R -e \"install.packages(c('ggplot2', 'dplyr'))\"\nCOPY analysis.R .\nCMD [\"R\", \"-e\", \"source('analysis.R')\"]\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images from Dockerfile\nDESCRIPTION: Demonstrates how to build a Docker image from a Dockerfile using the docker image build command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker image build -t alpine-updated:v0.1 .\n```\n\n----------------------------------------\n\nTITLE: Docker Logging Configuration\nDESCRIPTION: Docker Compose configuration for container logging with size and file rotation limits\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: nginx\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"200k\"\n        max-file: \"10\"\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: Command to display all available Docker networks in the system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network list\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Images\nDESCRIPTION: Demonstrates how to delete a specific Docker image using the docker rmi command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi ubuntu: 14.04\n```\n\n----------------------------------------\n\nTITLE: Creating a REST API with Express.js\nDESCRIPTION: A JavaScript example using Express.js to create a simple REST API for a microservice. The service listens on port 3000 and has an endpoint that returns JSON data.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Express.js example\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'Data from Microservice A' });\n});\n\napp.listen(3000, () => console.log('Microservice A listening on port 3000'));\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Events for Troubleshooting\nDESCRIPTION: Command to monitor Docker events in real-time for troubleshooting purposes, showing all events as they occur in the Docker system.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker events\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Docker Hub\nDESCRIPTION: Demonstrates how to authenticate with Docker Hub and push a local image to the repository.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker push your-docker-user/name-of-image-aqui\n```\n\n----------------------------------------\n\nTITLE: Testing Container Communication\nDESCRIPTION: Command to test network connectivity between containers using container names.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -ti web1 ping web2\n```\n\n----------------------------------------\n\nTITLE: Running and Attaching to Docker Containers\nDESCRIPTION: Shows how to run a Docker container in detached mode and then attach to it for interactive access.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 IMAGE_ID\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it container_name /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with ENV Instruction in Dockerfile\nDESCRIPTION: The ENV instruction sets environment variables in the Docker image. These variables persist when a container is run from the resulting image.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV APP_HOME=/app NODE_ENV=production\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Memory Limits\nDESCRIPTION: Command to run a container with a specific memory limit. The --memory flag restricts the container to use no more than the specified amount of memory (512MB in this example).\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --memory=512m <image_name>\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Shows how to list all Docker images stored locally using the docker images command.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/004-docker-images.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker images\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Network Connection\nDESCRIPTION: Command to inspect a network to confirm container connections.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker network inspect myNetwork\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image from Docker Hub\nDESCRIPTION: Command to pull a Docker image from Docker Hub repository to use locally.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull your-docker-user/name-of-image-here\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Logs\nDESCRIPTION: Command to view the logs output from a container. This shows all logs that the container has written to stdout and stderr.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with CPU Limits\nDESCRIPTION: Command to run a container with CPU usage limits. The --cpus flag restricts the container to use no more than the specified amount of CPU resources (half a CPU core in this example).\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --cpus=0.5 <image_name>\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network\nDESCRIPTION: Command to create a new Docker network with the default bridge driver.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create myNewNetwork\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell in a Running Docker Container\nDESCRIPTION: Example of executing a bash shell in a running container. This gives you interactive command-line access to the container's filesystem and processes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it my_container /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Docker Plugins\nDESCRIPTION: Commands to install and use Docker plugins to extend Docker's functionality. This example installs the SSH filesystem plugin and creates a volume that mounts a remote directory via SSH.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/013-docker-tips.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Install a plugin\ndocker plugin install vieux/sshfs\n\n# Use the plugin\ndocker volume create -d vieux/sshfs -o sshcmd=user@host:/path sshvolume\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Docker Network\nDESCRIPTION: Command to create a new Docker network for container communication.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create myNetwork\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Docker Volume Plugins\nDESCRIPTION: These commands show how to install a third-party volume plugin and create a volume using that plugin.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker plugin install <plugin_name>\ndocker volume create -d <plugin_name> my_volume\n```\n\n----------------------------------------\n\nTITLE: Using CPU Pinning for Docker Containers with --cpuset-cpus\nDESCRIPTION: This bash command demonstrates how to pin a Docker container to specific CPU cores using the --cpuset-cpus option. This can be useful for optimizing performance in multi-core systems.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --cpuset-cpus=\"0,1\" myapp\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm on Manager Node\nDESCRIPTION: Command to initialize a Docker swarm on the first manager node, specifying the advertise address.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm init --advertise-addr your_dorplet_ip_here\n```\n\n----------------------------------------\n\nTITLE: Using a Bind Mount in Docker\nDESCRIPTION: This command mounts a specific path from the host machine into the container, useful for development environments.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name devtest -v /path/on/host:/app nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Host Networking Mode for Docker Containers\nDESCRIPTION: This bash command shows how to run a Docker container in host networking mode, which can provide better network performance by using the host's network stack directly.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network host myapp\n```\n\n----------------------------------------\n\nTITLE: Retrieving Worker Join Token\nDESCRIPTION: Command to obtain the token required for joining worker nodes to the swarm.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join-token worker\n```\n\n----------------------------------------\n\nTITLE: Creating an Image from a Container\nDESCRIPTION: Command to create a new image from a modified running container, effectively saving its current state.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/004-docker-images.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker commit <container_id> my-new-image:tag\n```\n\n----------------------------------------\n\nTITLE: Using a Tmpfs Mount in Docker\nDESCRIPTION: This command creates a tmpfs mount that is stored only in the host system's memory, useful for storing sensitive information.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name tmptest --tmpfs /app nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Using tmpfs Mounts for Ephemeral Data in Docker Containers\nDESCRIPTION: This bash command shows how to use a tmpfs mount in a Docker container. Tmpfs mounts can improve I/O performance for ephemeral data by storing it in memory.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/011-docker-performance.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --tmpfs /tmp myapp\n```\n\n----------------------------------------\n\nTITLE: Installing Applications with Helm\nDESCRIPTION: Commands for using Helm package manager to deploy applications in Kubernetes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install my-release bitnami/wordpress\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dockerfile for PHP Apache\nDESCRIPTION: A basic Dockerfile example that uses webdevops/php-apache-dev as a base image, copies content to the web directory, sets the working directory, and exposes port 8080.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM webdevops/php-apache-dev\nMAINTAINER Bobby I.\nCOPY . /var/www/html\nWORKDIR /var/www/html\nEXPOSE 8080\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Monitoring Commands\nDESCRIPTION: Commands for monitoring and installing observability tools in Kubernetes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs <pod-name>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhelm install prometheus stable/prometheus\nhelm install grafana stable/grafana\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container from Built Image\nDESCRIPTION: Command to run a Docker container from the previously built image, running it in detached mode and mapping port 8080 on the host to port 80 in the container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:80 your_user_name/php-apache-dev\n```\n\n----------------------------------------\n\nTITLE: Apache Airflow Docker Compose Configuration\nDESCRIPTION: Docker Compose setup for Apache Airflow with webserver and scheduler services.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  webserver:\n    image: apache/airflow\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./dags:/opt/airflow/dags\n    command: webserver\n  scheduler:\n    image: apache/airflow\n    volumes:\n      - ./dags:/opt/airflow/dags\n    command: scheduler\n```\n\n----------------------------------------\n\nTITLE: Connecting Containers to a Docker Network\nDESCRIPTION: Commands to connect existing containers to a custom Docker network.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker network connect myNetwork web1\ndocker network connect myNetwork web2\n```\n\n----------------------------------------\n\nTITLE: Running Jupyter Notebook Container\nDESCRIPTION: Command to run the Jupyter notebook container with port mapping and volume mounting.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/016-docker-ml.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8888:8888 -v $(pwd):/notebooks my-datascience-notebook\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Dashboard Setup\nDESCRIPTION: Commands to enable and access the Kubernetes dashboard interface.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nminikube addons enable dashboard\nminikube dashboard\n```\n\n----------------------------------------\n\nTITLE: MacVLAN Network Configuration\nDESCRIPTION: Commands for creating and using MacVLAN networks to assign MAC addresses to containers.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan \\\n  --subnet=192.168.0.0/24 \\\n  --gateway=192.168.0.1 \\\n  -o parent=eth0 my_macvlan_net\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network my_macvlan_net -d nginx\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Commands\nDESCRIPTION: Basic kubectl commands for deploying and managing applications in Kubernetes.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/010-docker-and-kubernetes.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f service.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl scale deployment nginx-deployment --replicas=5\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl set image deployment/nginx-deployment nginx=nginx:1.16.1\n```\n\n----------------------------------------\n\nTITLE: Official Image Usage in Docker Compose\nDESCRIPTION: Example of using official images in a Docker Compose configuration\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/009-docker-security.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    image: nginx:latest  # Official Nginx image\n```\n\n----------------------------------------\n\nTITLE: Extending Services in Docker Compose\nDESCRIPTION: Using the 'extends' feature to share common configurations between Docker Compose services.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  web:\n    extends:\n      file: common-services.yml\n      service: webapp\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: Command to list all available Docker networks showing network ID, name, driver, and scope.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/006-docker-networking.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network ls\n```\n\n----------------------------------------\n\nTITLE: Following Docker Compose Service Logs\nDESCRIPTION: Command to view and follow the logs for a specific service in Docker Compose.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs -f web  # Follow logs for the web service\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Network List Output\nDESCRIPTION: Example output of the docker network list command showing the default networks available in Docker.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNETWORK ID     NAME      DRIVER    SCOPE\n3194399146e4   bridge    bridge    local\ncf7f50175100   host      host      local\n590fb3abc0e1   none      null      local\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Compose Resources\nDESCRIPTION: Command to stop and remove containers, networks, and optionally volumes defined in docker-compose.yml.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/008-docker-compose.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down --volumes  # Also remove volumes\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Docker Network\nDESCRIPTION: Command to inspect a Docker network to view its configuration details.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker network inspect myNewNetwork\n```\n\n----------------------------------------\n\nTITLE: Following Docker Container Logs in Real-Time\nDESCRIPTION: Command to continuously stream the logs from a Docker container. The -f flag makes the command follow the log output, similar to 'tail -f'.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata with LABEL Instruction in Dockerfile\nDESCRIPTION: The LABEL instruction adds metadata to a Docker image in key-value pair format. Labels are useful for image organization, licensing information, and other metadata.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/005-dockerfile.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL version=\"1.0\" maintainer=\"john@example.com\" description=\"This is a sample Docker image\"\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Command to display all currently running Docker containers, showing container IDs, images, created time, status, ports, and names.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Hello World Example\nDESCRIPTION: A simple HTML snippet showing a Hello World message that will be added to the Docker container.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hello World - Bobby Iliev</h1>\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image from Dockerfile\nDESCRIPTION: Command to build a Docker image from a Dockerfile, specifying the file to use and tagging the resulting image with a name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/005-dockerfile.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f Dockerfile -t your_user_name/php-apache-dev .\n```\n\n----------------------------------------\n\nTITLE: Using an Anonymous Docker Volume\nDESCRIPTION: This command creates and uses an anonymous volume that is automatically managed by Docker with a random name.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/007-docker-volumes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name devtest -v /app nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Force Removing a Docker Container\nDESCRIPTION: Command to forcefully remove a Docker container even if it's still running. The -f flag forces removal without stopping the container first.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container\nDESCRIPTION: Command to stop a running Docker container. Requires either the container ID or name as an argument.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop <container_id_or_name>\n```\n\n----------------------------------------\n\nTITLE: Listing Containers in a Service\nDESCRIPTION: Command to list all running containers for a specific Docker service.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker services ps name_of_your_service_here\n```\n\n----------------------------------------\n\nTITLE: Deleting a Docker Service\nDESCRIPTION: Command to remove a Docker service from the swarm.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/099-docker-swarm.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker service rm name_of_your_service\n```\n\n----------------------------------------\n\nTITLE: Running a Hello World Docker Container\nDESCRIPTION: Command to run your first Docker container using the hello-world image. This checks for the image locally, pulls it if not found, creates and runs a container, which prints a hello message and then exits.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/003-docker-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Debugging Docker Image Build Failures\nDESCRIPTION: Commands to troubleshoot issues that occur during Docker image builds, including enabling verbose output and bypassing the cache.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/012-docker-debugging.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Build with verbose output\ndocker build --progress=plain -t <image_name> .\n\n# Check for issues in the Dockerfile\ndocker build --no-cache -t <image_name> .\n```\n\n----------------------------------------\n\nTITLE: Navigating Project Structure for Docker eBook\nDESCRIPTION: Shows the file and directory structure of the Docker eBook project, indicating where different translations, assets, content files, and exports are stored.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [`ebook`](./ebook)\n\nThis directory holds all of the translations of the eBook.\n\n### `ebook/{LANG}`\nFor English:\n[`ebook/en`](./ebook/en)\n\nIn the `ebook/{LANG}` directory we have the translations of the eBook in particular languages.\n\nIf you are adding a new translation, make sure to make a copy of the `./ebook/en` directory and use the language code as the new directory name.\n\n### `ebook/{LANG}/assets`\nFor English:\n[`ebook/en/assets`](./ebook/en/assets)\n\nAll the HTML files and cover image for the 'Introduction to Docker' guide are located within the [`assets`](./ebook/en/assets) directory.\n\n### `ebook/{LANG}/content`\nFor English:\n[`ebook/en/content`](./ebook/en/content)\n\nAll the Markdown files for the 'Introduction to Docker' guide are located within the [`content`](./ebook/en/content) directory for the specific language.\n\nFor example, if you are adding a Bulgarian translation, copy the `./ebook/en` folder to `./ebook/bg`, translate the `.md` files in the `content` directory, and submit a PR.\n\n### `ebook/{LANG}/export`\nFor English:\n[`ebook/en/export`](./ebook/en/export)\n\nPdf version of 'Introduction to Docker' guide is located within the [`export`](./ebook/en/export) directory in both light and dark themes for the specific language.\n\nFor example, if you are adding a Bulgarian translation, then `./ebook/bg/export` will contain a pdf version of the book in both light and dark themes in Bulgarian.\n```\n\n----------------------------------------\n\nTITLE: Deploying to DigitalOcean App Platform Button\nDESCRIPTION: Markdown code for adding a 'Deploy to DigitalOcean' button that allows users to quickly deploy the project to DigitalOcean App Platform.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to DO](https://mp-assets1.sfo2.digitaloceanspaces.com/deploy-to-do/do-btn-blue.svg)](https://cloud.digitalocean.com/apps/new?repo=https://github.com/bobbyiliev/introduction-to-docker-ebook/tree/main)\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for a RabbitMQ Consumer Service\nDESCRIPTION: A Dockerfile that sets up a Node.js service with RabbitMQ client library (amqplib) for consuming messages from a queue. It uses the Alpine base image for a smaller footprint.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/en/content/015-docker-microservices.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Dockerfile\nFROM node:14-alpine\nRUN npm install amqplib\nCOPY . .\nCMD [\"node\", \"consumer.js\"]\n```\n\n----------------------------------------\n\nTITLE: Buy Me a Coffee Button Implementation\nDESCRIPTION: Markdown code for embedding a 'Buy Me a Coffee' support button with custom styling.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<a href=\"https://www.buymeacoffee.com/bobbyiliev\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Containers for Networking\nDESCRIPTION: Commands to create two Apache PHP containers with specific names and port mappings.\nSOURCE: https://github.com/bobbyiliev/introduction-to-docker-ebook/blob/main/ebook/pt_br/content/006-docker-networking.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name web1 -p 8001:80 eboraas/apache-php\ndocker run -d --name web2 -p 8002:80 eboraas/apache-php\n```"
  }
]