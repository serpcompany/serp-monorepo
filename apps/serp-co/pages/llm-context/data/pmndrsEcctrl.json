[
  {
    "owner": "pmndrs",
    "repo": "ecctrl",
    "content": "TITLE: Basic Ecctrl Implementation\nDESCRIPTION: Core implementation of Ecctrl with keyboard controls and character model setup.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport Ecctrl, { EcctrlAnimation } from \"ecctrl\";\n\n/**\n * Keyboard control preset\n */\nconst keyboardMap = [\n  { name: \"forward\", keys: [\"ArrowUp\", \"KeyW\"] },\n  { name: \"backward\", keys: [\"ArrowDown\", \"KeyS\"] },\n  { name: \"leftward\", keys: [\"ArrowLeft\", \"KeyA\"] },\n  { name: \"rightward\", keys: [\"ArrowRight\", \"KeyD\"] },\n  { name: \"jump\", keys: [\"Space\"] },\n  { name: \"run\", keys: [\"Shift\"] },\n  // Optional animation key map\n  { name: \"action1\", keys: [\"1\"] },\n  { name: \"action2\", keys: [\"2\"] },\n  { name: \"action3\", keys: [\"3\"] },\n  { name: \"action4\", keys: [\"KeyF\"] },\n];\n\nreturn (\n  <>\n    ...\n    <Physics debug={physics} timeStep=\"vary\">\n      {/* Keyboard preset */}\n      <KeyboardControls map={keyboardMap}>\n        {/* Character Control */}\n        <Ecctrl>\n          {/* Replace your model here */}\n          <CharacterModel />\n        </Ecctrl>\n      </KeyboardControls>\n      ...\n    </Physics>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Ecctrl Animation Implementation\nDESCRIPTION: Implementation of character animations with Ecctrl, including animation set configuration and model setup.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Prepare character model url\nconst characterURL = \"./ReplaceWithYourCharacterURL\";\n\n// Prepare and rename your character animations here\n// Note: idle, walk, run, jump, jumpIdle, jumpLand and fall names are essential\n// Missing any of these names might result in an error: \"cannot read properties of undifined (reading 'reset')\"\nconst animationSet = {\n  idle: \"Idle\",\n  walk: \"Walk\",\n  run: \"Run\",\n  jump: \"Jump_Start\",\n  jumpIdle: \"Jump_Idle\",\n  jumpLand: \"Jump_Land\",\n  fall: \"Climbing\", // This is for falling from high sky\n  // Currently support four additional animations\n  action1: \"Wave\",\n  action2: \"Dance\",\n  action3: \"Cheer\",\n  action4: \"Attack(1h)\", // This is special action which can be trigger while walking or running\n};\n\nreturn (\n  <>\n    ...\n    <Physics debug={physics} timeStep=\"vary\">\n      {/* Keyboard preset */}\n      <KeyboardControls map={keyboardMap}>\n        {/* Character Control */}\n        <Ecctrl animated>\n          {/* Character Animations */}\n          <EcctrlAnimation\n            characterURL={characterURL} // Must have property\n            animationSet={animationSet} // Must have property\n          >\n            {/* Replace your model here */}\n            <CharacterModel />\n          </EcctrlAnimation>\n        </Ecctrl>\n      </KeyboardControls>\n      ...\n    </Physics>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Ecctrl Character Controller Implementation\nDESCRIPTION: Code example showing how to import Ecctrl and EcctrlAnimation components and wrap a character model within the Ecctrl component for basic implementation.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/featurelog.md#2025-04-14_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Ecctrl, {EcctrlAnimation} from 'ecctrl'\n...\n  <Ecctrl>\n    <CharacterModel/>\n  </Ecctrl>\n...\n```\n\n----------------------------------------\n\nTITLE: First-Person View Configuration\nDESCRIPTION: This snippet demonstrates how to configure the Ecctrl component for a first-person view. It adjusts camera settings to position the camera close to the character and make it follow the character's movements instantaneously.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<Ecctrl\n  camCollision={false} // disable camera collision detect (useless in FP mode)\n  camInitDis={-0.01} // camera intial position\n  camMinDis={-0.01} // camera zoom in closest position\n  camFollowMult={1000} // give a big number here, so the camera follows the target (character) instantly\n  camLerpMult={1000} // give a big number here, so the camera lerp to the followCam position instantly\n  turnVelMultiplier={1} // Turning speed same as moving speed\n  turnSpeed={100} // give it big turning speed to prevent turning wait time\n  mode=\"CameraBasedMovement\" // character's rotation will follow camera's rotation in this mode\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing Touch Screen Controls with EcctrlJoystick\nDESCRIPTION: Code example showing how to implement touch screen controls by importing and using the built-in 3D joystick component EcctrlJoystick outside of the Canvas component.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/featurelog.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport Ecctrl, {EcctrlJoystick} from 'ecctrl'\n//...\n  <EcctrlJoystick />\n  <Canvas>\n    {/* ... */}\n  </Canvas>\n//...\n```\n\n----------------------------------------\n\nTITLE: EcctrlJoystick Props Configuration\nDESCRIPTION: This snippet shows all available configuration props for the EcctrlJoystick component, including joystick sensitivity, positioning, and customizations for both joystick and touch buttons.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nEcctrlJoystickProps: {\n    // Joystick props\n    children?: ReactNode;\n    joystickRunSensitivity?: number; // Sensitivity for transitioning to the running state. The default value is 0.9 (valid range: 0 < joystickRunSensitivity < 1)\n    joystickPositionLeft?: number; // joystick div container position left\n    joystickPositionBottom?: number; // joystick div container position bottom\n    joystickHeightAndWidth?: number; // joystick div container height and width\n    joystickCamZoom?: number; // camera zoom level for the joystick\n    joystickCamPosition?: [x: number, y: number, z: number]; // camera position for the joystick\n    joystickBaseProps?: ThreeElements['mesh']; // custom properties for the joystick's base mesh\n    joystickStickProps?: ThreeElements['mesh']; // custom properties for the joystick's stick mesh\n    joystickHandleProps?: ThreeElements['mesh']; // custom properties for the joystick's handle mesh\n\n    // Touch buttons props\n    buttonNumber?: number; // Number of buttons (max 5)\n    buttonPositionRight?: number; // buttons div container position right\n    buttonPositionBottom?: number; // buttons div container position bottom\n    buttonHeightAndWidth?: number; // buttons div container height and width\n    buttonCamZoom?: number; // camera zoom level for the buttons\n    buttonCamPosition?: [x: number, y: number, z: number]; // camera position for the buttons\n    buttonGroup1Position?: [x: number, y: number, z: number]; // button 1 posiiton in 3D scene\n    buttonGroup2Position?: [x: number, y: number, z: number]; // button 2 posiiton in 3D scene\n    buttonGroup3Position?: [x: number, y: number, z: number]; // button 3 posiiton in 3D scene\n    buttonGroup4Position?: [x: number, y: number, z: number]; // button 4 posiiton in 3D scene\n    buttonGroup5Position?: [x: number, y: number, z: number]; // button 5 posiiton in 3D scene\n    buttonLargeBaseProps?: ThreeElements['mesh']; // custom properties for the buttons' large base mesh\n    buttonSmallBaseProps?: ThreeElements['mesh']; // custom properties for the buttons' small base mesh\n    buttonTop1Props?: ThreeElements['mesh']; // custom properties for the button 1 top mesh (large button)\n    buttonTop2Props?: ThreeElements['mesh']; // custom properties for the button 2 top mesh (large button)\n    buttonTop3Props?: ThreeElements['mesh']; // custom properties for the button 3 top mesh (small button)\n    buttonTop4Props?: ThreeElements['mesh']; // custom properties for the button 4 top mesh (small button)\n    buttonTop5Props?: ThreeElements['mesh']; // custom properties for the button 5 top mesh (small button)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PointToMove Mode\nDESCRIPTION: This snippet shows how to use the PointToMove mode in Ecctrl, which allows for click-to-move or path-following functionality without keyboard controls. It demonstrates how to access and use the setMoveToPoint function from the useGame store.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGame } from \"ecctrl\";\n// ...\nconst setMoveToPoint = useGame((state) => state.setMoveToPoint);\n// ...\n// call function setMoveToPoint(), whenever character needs to move\nsetMoveToPoint(point); // \"point\" is a vec3 value\n```\n\n----------------------------------------\n\nTITLE: Implementing FixedCamera Mode in Ecctrl\nDESCRIPTION: Code snippet for activating the FixedCamera mode in Ecctrl, which automatically rotates the camera as the character turns, similar to controls in Coastal World.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/featurelog.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Ecctrl mode=\"FixedCamera\">\n```\n\n----------------------------------------\n\nTITLE: Basic EcctrlJoystick Implementation\nDESCRIPTION: This code demonstrates the simplest way to implement the EcctrlJoystick component. It should be placed outside of the Canvas component in your React application.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n//...\n  <EcctrlJoystick />\n  <Canvas>\n    {/* ... */}\n  </Canvas>\n//...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Joystick Controls with useJoystickControls\nDESCRIPTION: This code demonstrates how to use the useJoystickControls hook to implement custom joystick and button controls. It provides functions to set joystick state, reset the joystick, and handle button presses.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useJoystickControls } from \"ecctrl\";\n//...\nconst setJoystick = useJoystickControls((state) => state.setJoystick);\nconst resetJoystick = useJoystickControls((state) => state.resetJoystick);\nconst pressButton1 = useJoystickControls((state) => state.pressButton1);\nconst releaseAllButtons = useJoystickControls(\n  (state) => state.releaseAllButtons\n);\n//...\n// call the proper fuctions\nsetJoystick(joystickDis, joystickAng, runState);\n// or\npressButton1();\n```\n\n----------------------------------------\n\nTITLE: Importing EcctrlJoystick Component\nDESCRIPTION: This snippet shows how to import the EcctrlJoystick component from the ecctrl library, which provides touch controls for mobile devices.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EcctrlJoystick } from \"ecctrl\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Animation Functions in CharacterController.jsx\nDESCRIPTION: This code shows how to initialize the animation trigger functions from the useGame store in the CharacterController component. These functions can then be called when needed to trigger specific animations.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Animation change functions\nconst idleAnimation = useGame((state) => state.idle);\nconst walkAnimation = useGame((state) => state.walk);\nconst runAnimation = useGame((state) => state.run);\nconst jumpAnimation = useGame((state) => state.jump);\nconst jumpIdleAnimation = useGame((state) => state.jumpIdle);\nconst jumpLandAnimation = useGame((state) => state.jumpLand);\nconst fallAnimation = useGame((state) => state.fall);\nconst action1Animation = useGame((state) => state.action1);\nconst action2Animation = useGame((state) => state.action2);\nconst action3Animation = useGame((state) => state.action3);\nconst action4Animation = useGame((state) => state.action4);\n//const additionalAnimation = useGame((state) => state.triggerFunction);\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Trigger Functions in useGame.jsx\nDESCRIPTION: This snippet demonstrates how to create trigger functions for animations in the useGame store. The function updates the current animation state when certain conditions are met.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n  return {\n      /**\n       * Character animations state manegement\n       */\n      // Initial animation\n      curAnimation: null,\n      animationSet: {},\n\n      ...\n\n      action1: () => {\n        set((state) => {\n          if (state.curAnimation === state.animationSet.idle) {\n            return { curAnimation: state.animationSet.action1 };\n          }\n          return {};\n        });\n      },\n\n      /**\n       * Additional animations\n       */\n      // triggerFunction: ()=>{\n      //    set((state) => {\n      //        return { curAnimation: state.animationSet.additionalAnimation };\n      //    });\n      // }\n    };\n```\n\n----------------------------------------\n\nTITLE: Expanding Animation Set in CharacterModel.jsx\nDESCRIPTION: This snippet shows how to expand the animationSet object with additional custom animations. Each animation is mapped to a specific animation name that should match your character model's animation clips.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Rename your character animations here\nconst animationSet = {\n  idle: \"Idle\",\n  walk: \"Walk\",\n  run: \"Run\",\n  jump: \"Jump_Start\",\n  jumpIdle: \"Jump_Idle\",\n  jumpLand: \"Jump_Land\",\n  fall: \"Climbing\",\n  action1: \"Wave\",\n  action2: \"Dance\",\n  action3: \"Cheer\",\n  action4: \"Attack(1h)\", // This is special action which can be trigger while walking or running\n  //additinalAnimation: \"additinalAnimationName\",\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up PointToMove Mode in Ecctrl\nDESCRIPTION: Code snippet for implementing the PointToMove mode, which enables click-to-move or path following features without keyboard controls.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/featurelog.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Ecctrl mode=\"PointToMove\">\n```\n\n----------------------------------------\n\nTITLE: Using Point-to-Move Functionality with Ecctrl\nDESCRIPTION: JavaScript code example showing how to use the setMoveToPoint function from useGame hook to control character movement in PointToMove mode.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/featurelog.md#2025-04-14_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useGame } from 'ecctrl'\n// ...\nconst setMoveToPoint = useGame((state) => state.setMoveToPoint)\n// ...\n// call function setMoveToPoint(), whenever character needs to move\nsetMoveToPoint(point) // \"point\" is a vec3 value \n```\n\n----------------------------------------\n\nTITLE: Customizing EcctrlJoystick Appearance\nDESCRIPTION: This example shows how to customize the appearance of the EcctrlJoystick component by providing custom material properties to the joystick base.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n//...\n  <EcctrlJoystick\n    joystickBaseProps={{\n      receiveShadow: true,\n      material: new THREE.MeshStandardMaterial({ color: \"grey\" })\n    }}\n  />\n  <Canvas>\n    {/* ... */}\n  </Canvas>\n//...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Elements to EcctrlJoystick\nDESCRIPTION: This snippet shows how to add custom Three.js elements like lights or meshes to the EcctrlJoystick component. Note that these elements will be created twice (in the joystick and button scenes).\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n//...\n  <EcctrlJoystick>\n    <ambientLight />\n    <mesh>\n      <boxGeometry args={[1,1,1]} />\n    </mesh>\n  </EcctrlJoystick>\n  <Canvas>\n    {/* ... */}\n  </Canvas>\n//...\n```\n\n----------------------------------------\n\nTITLE: Installing Ecctrl Package\nDESCRIPTION: Command to install the Ecctrl package using npm package manager.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ecctrl\n```\n\n----------------------------------------\n\nTITLE: Installing Ecctrl Package via npm\nDESCRIPTION: Bash command to install the Ecctrl npm package for easy integration of the character controller in projects.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/featurelog.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ecctrl\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Commands for setting up local development environment, including dependency installation and server startup.\nSOURCE: https://github.com/pmndrs/ecctrl/blob/main/readme.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies (only the first time)\nnpm install\n\n# Run the local server at localhost:5173\nnpm run dev\n\n# Build for production in the example/exampleDist/ directory\nvite build -c vercelVite.config.js\n```"
  }
]