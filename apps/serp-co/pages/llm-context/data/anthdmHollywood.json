[
  {
    "owner": "anthdm",
    "repo": "hollywood",
    "content": "TITLE: Creating and Configuring Hollywood Engine in Go\nDESCRIPTION: Demonstrates how to create a new Hollywood engine with default configuration. This is the first step in setting up an actor system.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nengine, err := actor.NewEngine(actor.NewEngineConfig())\n```\n\n----------------------------------------\n\nTITLE: Spawning an Actor in Hollywood\nDESCRIPTION: Shows how to spawn a new actor using the engine. The actor is created with a unique ID and a constructor function.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npid := engine.Spawn(newHelloer, \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Defining Actor Constructor in Hollywood\nDESCRIPTION: Illustrates how to create a constructor function for a new actor. This function returns an instance of the actor that implements the Receiver interface.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype helloer struct{}\n\nfunc newHelloer() actor.Receiver {\n\treturn &helloer{}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor Receive Method in Hollywood\nDESCRIPTION: Demonstrates the implementation of the Receive method for an actor. This method handles different types of messages, including lifecycle events and custom messages.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype message struct {\n\tdata string\n}\n\nfunc (h *helloer) Receive(ctx *actor.Context) {\n\tswitch msg := ctx.Message().(type) {\n\tcase actor.Initialized:\n\t\tfmt.Println(\"helloer has initialized\")\n\tcase actor.Started:\n\t\tfmt.Println(\"helloer has started\")\n\tcase actor.Stopped:\n\t\tfmt.Println(\"helloer has stopped\")\n\tcase *message:\n\t\tfmt.Println(\"hello world\", msg.data)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Actor in Hollywood\nDESCRIPTION: Shows how to send a message to a spawned actor using the engine. This is how actors communicate with each other in the system.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nengine.Send(pid, &message{data: \"hello, world!\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Actors in Hollywood\nDESCRIPTION: Demonstrates how to configure remote actors with TLS support, allowing actors to communicate over the network securely.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntlsConfig := TlsConfig: &tls.Config{\n\tCertificates: []tls.Certificate{cert},\n}\n\nconfig := remote.NewConfig().WithTLS(tlsConfig)\nremote := remote.New(\"0.0.0.0:2222\", config)\n\nengine, err := actor.NewEngine(actor.NewEngineConfig().WithRemote(remote))\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Engine in Hollywood\nDESCRIPTION: Demonstrates how to create and configure a new Hollywood engine with a remote connection. The remote configuration requires a listen address in the format 'host:port'.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nr := remote.New(remote.Config{ListenAddr: addr})\nengine, err := actor.NewEngine(actor.EngineOptRemote(r))\n```\n\n----------------------------------------\n\nTITLE: Spawning Actor with Custom Configuration in Hollywood\nDESCRIPTION: Demonstrates how to spawn an actor with custom configuration options, such as maximum restarts and inbox size.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ne.Spawn(newFoo, \"myactorname\",\n\tactor.WithMaxRestarts(4),\n\t\tactor.WithInboxSize(1024 * 2),\n\t\tactor.WithId(\"bar\"),\n\t)\n)\n```\n\n----------------------------------------\n\nTITLE: Spawning Stateless Function Actor in Hollywood\nDESCRIPTION: Shows how to spawn a stateless actor as a function, which is useful for simple actors without internal state.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ne.SpawnFunc(func(c *actor.Context) {\n\tswitch msg := c.Message().(type) {\n\tcase actor.Started:\n\t\tfmt.Println(\"started\")\n\t\t_ = msg\n\t}\n}, \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Executing mDNS Discovery on Port 4001\nDESCRIPTION: This snippet shows the execution of the mDNS discovery process on port 4001. It demonstrates the startup of the server, event subscription, process initialization, and successful discovery of a remote engine.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/examples/mdns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./bin/arm/mdns -port 4001\n    <omitted standart logs>\n    INFO[0000] [REMOTE] server started                       listenAddr=\"127.0.0.1:4001\"\n    TRAC[0000] [EVENTSTREAM] subscribe                       id=1432518515 subs=1\n    TRAC[0000] [PROCESS] started                             pid=\"127.0.0.1:4001/chat\"\n    TRAC[0000] [PROCESS] started                             pid=\"127.0.0.1:4001/mdns\"\n    INFO[0001] [DISCOVERY] remote discovered                 ID=engine_1682994946742073000 addrs=\"127.0.0.1:4002\"\n    TRAC[0001] [STREAM WRITER] connected                     remote=\"127.0.0.1:4002\"\n    TRAC[0001] [STREAM ROUTER] new stream route              pid=\"127.0.0.1:4001/stream/127.0.0.1:4002\"\n    INFO[0001] new message                                   fields.msg=hello\n```\n\n----------------------------------------\n\nTITLE: Executing mDNS Discovery on Port 4002\nDESCRIPTION: This snippet illustrates the execution of the mDNS discovery process on port 4002. It shows the server startup, event subscription, process initialization, and successful discovery of a remote engine on port 4001.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/examples/mdns/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./bin/arm/mdns -port 4002\n    <omitted standart logs>\n    INFO[0000] [REMOTE] server started                       listenAddr=\"127.0.0.1:4002\"\n    TRAC[0000] [EVENTSTREAM] subscribe                       id=1432518515 subs=1\n    TRAC[0000] [PROCESS] started                             pid=\"127.0.0.1:4002/chat\"\n    TRAC[0000] [PROCESS] started                             pid=\"127.0.0.1:4002/mdns\"\n    INFO[0000] [DISCOVERY] remote discovered                 ID=engine_1682994395132833000 addrs=\"127.0.0.1:4001\"\n    TRAC[0000] [INBOX] started                               pid=\"127.0.0.1:4002/stream/127.0.0.1:4001\"\n    TRAC[0000] [STREAM WRITER] connected                     remote=\"127.0.0.1:4001\"\n    TRAC[0000] [STREAM ROUTER] new stream route              pid=\"127.0.0.1:4002/stream/127.0.0.1:4001\"\n    INFO[0000] new message                                   fields.msg=hello\n```\n\n----------------------------------------\n\nTITLE: Running Hollywood Benchmark with Profiling\nDESCRIPTION: Executes the benchmark suite with profiling enabled, generating CPU and memory profiles for analysis.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/_bench/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake bench-profile\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Profile with pprof Web Interface\nDESCRIPTION: Launches a web server to provide an interactive interface for analyzing the CPU profile using pprof.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/_bench/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof -http=:8080 cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Analyzing CPU Profile with pprof Basic View\nDESCRIPTION: Uses the pprof tool to analyze the CPU profile generated from the benchmark, opening a basic web view of the results.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/_bench/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof cpu.prof\n> web\n```\n\n----------------------------------------\n\nTITLE: Analyzing Memory Profile with pprof Web Interface\nDESCRIPTION: Launches a web server to provide an interactive interface for analyzing the memory profile using pprof.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/_bench/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof -http=:8080 mem.prof\n```\n\n----------------------------------------\n\nTITLE: Analyzing Memory Profile with pprof Basic View\nDESCRIPTION: Uses the pprof tool to analyze the memory profile generated from the benchmark, opening a basic web view of the results.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/_bench/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof mem.prof\n> web\n```\n\n----------------------------------------\n\nTITLE: Running Hollywood Benchmark\nDESCRIPTION: Executes the benchmark suite for the Hollywood framework using a Makefile command.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/_bench/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake bench\n```\n\n----------------------------------------\n\nTITLE: Running Hollywood Tests\nDESCRIPTION: Shows the command to run tests for the Hollywood framework using the Makefile target.\nSOURCE: https://github.com/anthdm/hollywood/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```"
  }
]