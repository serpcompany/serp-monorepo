[
  {
    "owner": "azuread",
    "repo": "azure-activedirectory-library-for-android",
    "content": "TITLE: Requesting an Authentication Token with ADAL\nDESCRIPTION: Using the AuthenticationContext to request a token from Azure AD with the specified resource, client ID, and redirect URI. This example shows how to trigger the interactive authentication flow.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nmContext.acquireToken(MainActivity.this, resource, clientId, redirect, user_loginhint, PromptBehavior.Auto, \"\",\n                callback);\n```\n\n----------------------------------------\n\nTITLE: Initializing AuthenticationContext in Android\nDESCRIPTION: Creating an instance of AuthenticationContext in the main Activity to prepare for Azure AD authentication. This uses SharedPreferences as the default token cache.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Authority is in the form of https://login.windows.net/yourtenant.onmicrosoft.com\nmContext = new AuthenticationContext(MainActivity.this, authority, true); // This will use SharedPreferences as default cache\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Callback for Azure AD\nDESCRIPTION: Defining a callback to handle authentication results, including success and error cases. This callback processes the authentication result containing the access token and related information.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate AuthenticationCallback<AuthenticationResult> callback = new AuthenticationCallback<AuthenticationResult>() {\n\n        @Override\n        public void onError(Exception exc) {\n            if (exc instanceof AuthenticationException) {\n                textViewStatus.setText(\"Cancelled\");\n                Log.d(TAG, \"Cancelled\");\n            } else {\n                textViewStatus.setText(\"Authentication error:\" + exc.getMessage());\n                Log.d(TAG, \"Authentication error:\" + exc.getMessage());\n            }\n        }\n\n        @Override\n        public void onSuccess(AuthenticationResult result) {\n            mResult = result;\n\n            if (result == null || result.getAccessToken() == null\n                    || result.getAccessToken().isEmpty()) {\n                textViewStatus.setText(\"Token is empty\");\n                Log.d(TAG, \"Token is empty\");\n            } else {\n                // request is successful\n                Log.d(TAG, \"Status:\" + result.getStatus() + \" Expired:\"\n                        + result.getExpiresOn().toString());\n                textViewStatus.setText(PASSED);\n            }\n        }\n    };\n```\n\n----------------------------------------\n\nTITLE: Silent Token Acquisition with ADAL\nDESCRIPTION: Using the acquireTokenSilentSync method to obtain a token without showing UI. This approach uses cached tokens and handles token refresh automatically. It requires a userId obtained from a previous interactive authentication.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nmContext.acquireTokenSilentSync(String resource, String clientId, String userId);\n```\n\n----------------------------------------\n\nTITLE: Silent Token Request in ADAL for Android\nDESCRIPTION: Shows how to perform a silent token request from cache and refresh without UI pop-up, returning a token from cache if available or refreshing if expired.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nFuture<AuthenticationResult> result = mContext.acquireTokenSilent(resource, clientid, userId, callback );\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Silent Token Acquisition with ADAL\nDESCRIPTION: Using the acquireTokenSilent method to asynchronously obtain a token without showing UI. This approach handles caching and token refresh automatically with a callback for result handling.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nmContext.acquireTokenSilent(\n    String resource,\n    String clientId,\n    String userId,\n    final AuthenticationCallback<AuthenticationResult> callback);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for ADAL Authentication\nDESCRIPTION: Required Android manifest entries for using the Azure AD Authentication Library, including internet permissions and registering the AuthenticationActivity component.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.INTERNET\" />\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n<application\n    android:allowBackup=\"true\"\n    android:debuggable=\"true\"\n    android:icon=\"@drawable/ic_launcher\"\n    android:label=\"@string/app_name\"\n    android:theme=\"@style/AppTheme\" >\n\n    <activity\n        android:name=\"com.microsoft.aad.adal.AuthenticationActivity\"\n        android:label=\"@string/title_login_hello_app\" >\n    </activity>\n....\n<application/>\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Activity Result in Android\nDESCRIPTION: Implementation of onActivityResult method to handle the result from the AuthenticationActivity after user enters credentials and receives authorization code.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (mContext != null) {\n        mContext.onActivityResult(requestCode, resultCode, data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Android Fragment with ADAL\nDESCRIPTION: Example of how to request an authentication token when implementing authentication logic in a Fragment by wrapping it in an IWindowComponent interface.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nmContext.acquireToken(\n    wrapFragment(MainFragment.this),\n    resource,\n    clientId,\n    redirect,\n    user_loginhint,\n    PromptBehavior.Auto,\n    \"\",\n    callback);\n\nprivate IWindowComponent wrapFragment(final Fragment fragment){\n    return new IWindowComponent() {\n        Fragment refFragment = fragment;\n        @Override\n        public void startActivityForResult(Intent intent, int requestCode) {\n            refFragment.startActivityForResult(intent, requestCode);\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ADAL Dependencies with Gradle\nDESCRIPTION: Gradle configuration to include ADAL library dependencies in an Android project. Includes repository configuration and compile-time dependency with optional exclusions for support libraries.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    mavenCentral()\n    maven {\n        // Surface Duo SDK dependency.\n        url 'https://pkgs.dev.azure.com/MicrosoftDeviceSDK/DuoSDK-Public/_packaging/Duo-SDK-Feed%40Local/maven/v1'\n    }\n}\ndependencies {\n    // your dependencies here...\n    compile('com.microsoft.aad:adal:3.0.1') {\n        // if your app includes android support\n        // libraries, Gson or Surface Duo SDK \n        // in its dependencies, exclude that \n        // groupId from ADAL's compile task by \n        // un-commenting the appropriate line below\n\n        // exclude group: 'com.android.support'\n        // exclude group: 'com.google.code.gson'\n        // exclude group: 'com.microsoft.device.display'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ADAL Dependencies with Maven\nDESCRIPTION: Maven pom.xml configuration to include ADAL library as an AAR dependency in an Android project.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.microsoft.aad</groupId>\n    <artifactId>adal</artifactId>\n    <version>3.0.1</version>\n    <type>aar</type>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Items in ADAL for Android\nDESCRIPTION: Demonstrates how to retrieve the current cache from AuthenticationContext and provide a custom cache implementation.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nITokenCacheStore cache = mContext.getCache();\n```\n\nLANGUAGE: java\nCODE:\n```\nmContext = new AuthenticationContext(MainActivity.this, authority, true, yourCache);\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for ADAL in Android\nDESCRIPTION: Demonstrates how to set up a custom logger for ADAL to handle log messages and write them to a file.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nLogger.getInstance().setExternalLogger(new ILogger() {\n     @Override\n     public void Log(String tag, String message, String additionalMessage, LogLevel level, ADALError errorCode) {\n      ...\n      // You can write this to logfile depending on level or errorcode.\n      writeToLogFile(getApplicationContext(), tag +\":\" + message + \"-\" + additionalMessage);\n     }\n });\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate syncronized void writeToLogFile(Context ctx, String msg) {\n       File directory = ctx.getDir(ctx.getPackageName(), Context.MODE_PRIVATE);\n       File logFile = new File(directory, \"logfile\");\n       FileOutputStream outputStream = new FileOutputStream(logFile, true);\n       OutputStreamWriter osw = new OutputStreamWriter(outputStream);\n       osw.write(msg);\n       osw.flush();\n       osw.close();\n}\n```\n\n----------------------------------------\n\nTITLE: ProGuard Configuration for ADAL in Android\nDESCRIPTION: Provides a ProGuard rule to disable obfuscation of ADAL classes, ensuring proper functionality and easier debugging.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_12\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class com.microsoft.** {\n  *;\n}\n```\n\n----------------------------------------\n\nTITLE: Resource String Overrides for ADAL in Android\nDESCRIPTION: Shows XML string resources that can be overridden in the application to provide localized versions of ADAL's default English strings.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<string name=\"app_loading\">Loading...</string>\n<string name=\"broker_processing\">Broker is processing</string>\n<string name=\"http_auth_dialog_username\">Username</string>\n<string name=\"http_auth_dialog_password\">Password</string>\n<string name=\"http_auth_dialog_title\">Sign In</string>\n<string name=\"http_auth_dialog_login\">Login</string>\n<string name=\"http_auth_dialog_cancel\">Cancel</string>\n```\n\n----------------------------------------\n\nTITLE: Clearing Session Cookies in WebView for ADAL Android\nDESCRIPTION: Provides code to clear session cookies from the WebView after the app is closed, which is not done automatically by Android.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nCookieSyncManager.createInstance(getApplicationContext());\nCookieManager cookieManager = CookieManager.getInstance();\ncookieManager.removeSessionCookie();\nCookieSyncManager.getInstance().sync();\n```\n\n----------------------------------------\n\nTITLE: Encryption Key Generation for ADAL in Android\nDESCRIPTION: Shows how to generate a custom encryption key for ADAL using password-based encryption, although this approach is now deprecated.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/README.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n    SecretKeyFactory keyFactory = SecretKeyFactory\n        .getInstance(\"PBEWithSHA256And256BitAES-CBC-BC\");\n    SecretKey generatedSecretKey = keyFactory.generateSecret(new PBEKeySpec(your_password,\n        byte-code-for-your-salt, 100, 256));\n    SecretKey secretKey = new SecretKeySpec(generatedSecretKey.getEncoded(), \"AES\");\n    AuthenticationSettings.INSTANCE.setSecretKey(secretKey.getEncoded());\n```\n\n----------------------------------------\n\nTITLE: Excluding Surface Duo SDK dependency from ADAL implementation in Gradle\nDESCRIPTION: Gradle configuration to exclude the com.microsoft.device.display group when implementing ADAL version 3.0.1. This is useful for apps that want to include their own copy of the Surface Duo SDK.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/changelog.txt#2025-04-23_snippet_0\n\nLANGUAGE: Gradle\nCODE:\n```\nimplementation (\"com.microsoft.aad:adal:3.0.1\") {\n    exclude group: 'com.microsoft.device.display'\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Azure Active Directory Library for Android\nDESCRIPTION: This snippet demonstrates how to clone the Azure Active Directory Library for Android repository, navigate to the project directory, and add the upstream remote.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:username/azure-activedirectory-library-for-android.git\n$ cd azure-activedirectory-library-for-android\n$ git remote add upstream git@github.com:MSOpenTech/azure-activedirectory-library-for-android.git\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Git Branch with Upstream Changes\nDESCRIPTION: These commands fetch the latest changes from the upstream repository and rebase the current branch on top of them.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git fetch upstream\n$ git rebase upstream/v0.1  # or upstream/master\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git\nDESCRIPTION: This command creates a new feature branch in Git for working on a new feature or bug fix.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Pushing a Feature Branch to Origin\nDESCRIPTION: This command pushes the local feature branch to the origin remote repository.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/contributing.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Git User Information\nDESCRIPTION: These commands set the global Git configuration for user name and email, which are used in commit messages.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git config --global user.name \"J. Random User\"\n$ git config --global user.email \"j.random.user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Version Range in CocoaPods\nDESCRIPTION: Example showing how to use the tilde operator in a CocoaPods podfile to accept all updates within a MINOR version (all 1.1.x versions but not 1.2).\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'ADALiOS', '~> 1.1'\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Version Range in NuGet\nDESCRIPTION: Example showing how to specify a version range in NuGet package references to include all updates from 1.1.0 to 1.1.x but prevent updating to 1.2.\nSOURCE: https://github.com/azuread/azure-activedirectory-library-for-android/blob/dev/RELEASES.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"ADALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```"
  }
]