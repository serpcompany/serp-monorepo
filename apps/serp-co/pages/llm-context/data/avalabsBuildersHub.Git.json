[
  {
    "owner": "ava-labs",
    "repo": "builders-hub.git",
    "content": "TITLE: Defining a Smart Contract Skeleton - Solidity\nDESCRIPTION: This snippet demonstrates the basic syntax and structure of a Solidity smart contract. The example shows how to declare a contract using the \"contract\" keyword, followed by the contract name and containing blocks for state variables and functions. No dependencies are required to use this basic structure; it serves as the starting point for building any contract in Solidity. It does not include particular state variables or functions and is used solely to illustrate contract definition.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/04-contracts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract <ContractName> {\n \n  // State Variables go here\n  \n  // Contract functions go here\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Core VM Interface in AvalancheGo (Go)\nDESCRIPTION: This Go interface (`common.VM`) specifies the essential methods required for any Virtual Machine operating within the Avalanche network. It covers initialization with network context and genesis state, lifecycle management (bootstrapping, shutdown), health checks, validator connection handling, version reporting, and the creation of both static and chain-specific HTTP API endpoints. Dependencies include AvalancheGo's `snow`, `manager`, `health`, and `validators` packages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// VM describes the interface that all consensus VMs must implement\ntype VM interface {\n    // Contains handlers for VM-to-VM specific messages\n\tAppHandler\n\n\t// Returns nil if the VM is healthy.\n\t// Periodically called and reported via the node's Health API.\n\thealth.Checkable\n\n\t// Connector represents a handler that is called on connection connect/disconnect\n\tvalidators.Connector\n\n\t// Initialize this VM.\n\t// [ctx]: Metadata about this VM.\n\t//     [ctx.networkID]: The ID of the network this VM's chain is running on.\n\t//     [ctx.chainID]: The unique ID of the chain this VM is running on.\n\t//     [ctx.Log]: Used to log messages\n\t//     [ctx.NodeID]: The unique staker ID of this node.\n\t//     [ctx.Lock]: A Read/Write lock shared by this VM and the consensus\n\t//                 engine that manages this VM. The write lock is held\n\t//                 whenever code in the consensus engine calls the VM.\n\t// [dbManager]: The manager of the database this VM will persist data to.\n\t// [genesisBytes]: The byte-encoding of the genesis information of this\n\t//                 VM. The VM uses it to initialize its state. For\n\t//                 example, if this VM were an account-based payments\n\t//                 system, `genesisBytes` would probably contain a genesis\n\t//                 transaction that gives coins to some accounts, and this\n\t//                 transaction would be in the genesis block.\n\t// [toEngine]: The channel used to send messages to the consensus engine.\n\t// [fxs]: Feature extensions that attach to this VM.\n\tInitialize(\n\t\tctx *snow.Context,\n\t\tdbManager manager.Manager,\n\t\tgenesisBytes []byte,\n\t\tupgradeBytes []byte,\n\t\tconfigBytes []byte,\n\t\ttoEngine chan<- Message,\n\t\tfxs []*Fx,\n\t\tappSender AppSender,\n\t) error\n\n\t// Bootstrapping is called when the node is starting to bootstrap this chain.\n\tBootstrapping() error\n\n\t// Bootstrapped is called when the node is done bootstrapping this chain.\n\tBootstrapped() error\n\n\t// Shutdown is called when the node is shutting down.\n\tShutdown() error\n\n\t// Version returns the version of the VM this node is running.\n\tVersion() (string, error)\n\n\t// Creates the HTTP handlers for custom VM network calls.\n\t//\n\t// This exposes handlers that the outside world can use to communicate with\n\t// a static reference to the VM. Each handler has the path:\n\t// [Address of node]/ext/VM/[VM ID]/[extension]\n\t//\n\t// Returns a mapping from [extension]s to HTTP handlers.\n\t//\n\t// Each extension can specify how locking is managed for convenience.\n\t//\n\t// For example, it might make sense to have an extension for creating\n\t// genesis bytes this VM can interpret.\n\tCreateStaticHandlers() (map[string]*HTTPHandler, error)\n\n\t// Creates the HTTP handlers for custom chain network calls.\n\t//\n\t// This exposes handlers that the outside world can use to communicate with\n\t// the chain. Each handler has the path:\n\t// [Address of node]/ext/bc/[chain ID]/[extension]\n\t//\n\t// Returns a mapping from [extension]s to HTTP handlers.\n\t//\n\t// Each extension can specify how locking is managed for convenience.\n\t//\n\t// For example, if this VM implements an account-based payments system,\n\t// it have an extension called `accounts`, where clients could get\n\t// information about their accounts.\n\tCreateHandlers() (map[string]*HTTPHandler, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Function with Parameters and Calculation in Solidity\nDESCRIPTION: This Solidity snippet defines a `public` function `getSquare` that accepts an unsigned integer `num` as input (`uint num`). Inside the function body, it declares a local variable `square` of type `uint`, calculates the square of the input `num` using the exponentiation operator (`** 2`), assigns the result to `square`, and then returns this calculated value. The function is marked `public` and implicitly has default state mutability (it's not `view` or `pure` because it performs calculations based on input, though it doesn't modify state).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/03-functions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSquare(uint num) public returns(uint) {\n    uint square = num ** 2;\n    return square;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ChainID in Genesis JSON File\nDESCRIPTION: To set up a ChainID for your blockchain, you need to add it to the genesis JSON file at the top level. This example shows setting the ChainID to 99999, which helps prevent transaction replay attacks between different chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/03-setup-chainid.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"chainId\": 99999\n```\n\n----------------------------------------\n\nTITLE: Fulfilling VRF Requests and Sending Cross-Chain Response in Solidity\nDESCRIPTION: This function handles the callback from Chainlink VRF, encodes the random words, and sends them back as a cross-chain message to the original requester using the TeleporterMessenger.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/03-orchestrating-vrf-requests.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal override {\n    require(pendingRequests[requestId].destinationAddress != address(0), \"Invalid request ID\");\n    // Create CrossChainResponse struct\n    CrossChainResponse memory crossChainResponse = CrossChainResponse({\n        requestId: requestId,\n        randomWords: randomWords\n    });\n    bytes memory encodedMessage = abi.encode(crossChainResponse);\n    // Send cross chain message using ITeleporterMessenger interface\n    TeleporterMessageInput memory messageInput = TeleporterMessageInput({\n        destinationBlockchainID: pendingRequests[requestId].destinationBlockchainId,\n        destinationAddress: pendingRequests[requestId].destinationAddress,\n        feeInfo: TeleporterFeeInfo({ feeTokenAddress: address(0), amount: 0 }),\n        requiredGasLimit: 100000,\n        allowedRelayerAddresses: new address[](0),\n        message: encodedMessage\n    });\n    teleporterMessenger.sendCrossChainMessage(messageInput);\n    delete pendingRequests[requestId];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ERC-20 Token Interface in Solidity\nDESCRIPTION: This Solidity interface defines the standard functions and events required for an ERC-20 compliant token contract. It includes methods for checking total supply (`totalSupply`), individual balances (`balanceOf`), transferring tokens (`transfer`), checking allowances (`allowance`), approving spending (`approve`), and transferring tokens on behalf of an owner (`transferFrom`), along with events for transfers (`Transfer`) and approvals (`Approval`). This interface ensures interoperability between different ERC-20 tokens and applications on EVM-compatible blockchains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/01-erc20-intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing Solidity Variables Simultaneously\nDESCRIPTION: Demonstrates a concise way to declare and initialize variables in a single line in Solidity. It shows examples for `address`, `uint256`, and `bool` types, combining the declaration and assignment steps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/02-primitive-value-and-types.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\naddress addr = 0x7f610402ccc4CC1BEbcE9699819200f5f28ED6e3;\nuint256 num = 0;\nbool b = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing PeerListAck Message for Peer Acknowledgment\nDESCRIPTION: The PeerListAck message is sent in response to PeerList to acknowledge the subset of peers that the peer will attempt to connect to.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PeerListAck {\n  reserved 1; // deprecated; used to be tx_ids\n  repeated PeerAck peer_acks = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Hello World Precompile Integration with Subnet-EVM in TypeScript\nDESCRIPTION: This TypeScript code demonstrates testing the Hello World precompile contract using Subnet-EVM's test utilities within a Hardhat environment. It first sets up a test DS-Test contract, connecting to Hello World via a designated admin. Each test verifies default greetings and mutation logic, as well as the emission of the GreetingChanged event using Chai's assertions. Required dependencies include Hardhat, Chai, ethers, and the custom Subnet-EVM test utility; it expects specific contract addresses defined as constants, and operates in a Hardhat test lifecycle by initializing via beforeEach hooks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// (c) 2019-2022, Ava Labs, Inc. All rights reserved.\\n// See the file LICENSE for licensing terms.\\n\\nimport { expect } from \\\"chai\\\";\\nimport { SignerWithAddress } from \\\"@nomiclabs/hardhat-ethers/signers\\\";\\nimport { Contract } from \\\"ethers\\\";\\nimport { ethers } from \\\"hardhat\\\";\\nimport { test } from \\\"./utils\\\";\\n\\n// make sure this is always an admin for hello world precompile\\nconst ADMIN_ADDRESS = \\\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\\\";\\nconst HELLO_WORLD_ADDRESS = \\\"0x0300000000000000000000000000000000000000\\\";\\n\\ndescribe(\\\"ExampleHelloWorldTest\\\", function () {\\n  this.timeout(\\\"30s\\\");\\n\\n  beforeEach(\\\"Setup DS-Test contract\\\", async function () {\\n    const signer = await ethers.getSigner(ADMIN_ADDRESS);\\n    const helloWorldPromise = ethers.getContractAt(\\n      \\\"IHelloWorld\\\",\\n      HELLO_WORLD_ADDRESS,\\n      signer\\n    );\\n\\n    return ethers\\n      .getContractFactory(\\\"ExampleHelloWorldTest\\\", { signer })\\n      .then((factory) => factory.deploy())\\n      .then((contract) => {\\n        this.testContract = contract;\\n        return contract.deployed().then(() => contract);\\n      })\\n      .then(() => Promise.all([helloWorldPromise]))\\n      .then(([helloWorld]) => helloWorld.setAdmin(this.testContract.address))\\n      .then((tx) => tx.wait());\\n  });\\n\\n  test(\\\"should gets default hello world\\\", [\\\"step_getDefaultHelloWorld\\\"]);\\n\\n  test(\\n    \\\"should not set greeting before enabled\\\",\\n    \\\"step_doesNotSetGreetingBeforeEnabled\\\"\\n  );\\n\\n  test(\\n    \\\"should set and get greeting with enabled account\\\",\\n    \\\"step_setAndGetGreeting\\\"\\n  );\\n});\\n\\ndescribe(\\\"IHelloWorld events\\\", function () {\\n  let owner: SignerWithAddress;\\n  let contract: Contract;\\n  let defaultGreeting = \\\"Hello, World!\\\";\\n  before(async function () {\\n    owner = await ethers.getSigner(ADMIN_ADDRESS);\\n    contract = await ethers.getContractAt(\\n      \\\"IHelloWorld\\\",\\n      HELLO_WORLD_ADDRESS,\\n      owner\\n    );\\n\\n    // reset greeting\\n    let tx = await contract.setGreeting(defaultGreeting);\\n    await tx.wait();\\n  });\\n\\n  it(\\\"should emit GreetingChanged event\\\", async function () {\\n    let newGreeting = \\\"helloprecompile\\\";\\n    await expect(contract.setGreeting(newGreeting))\\n      .to.emit(contract, \\\"GreetingChanged\\\")\\n      .withArgs(\\n        owner.address,\\n        // old greeting\\n        defaultGreeting,\\n        // new greeting\\n        newGreeting\\n      );\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ITeleporterReceiver Interface in Solidity\nDESCRIPTION: This code reference indicates that to receive messages on the destination Avalanche L1, the contract must implement the ITeleporterReceiver interface. This interface is crucial for handling incoming cross-chain messages sent via Teleporter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/01-icm-basics.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nITeleporterReceiver\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Chain Messages with Teleporter in Solidity\nDESCRIPTION: This snippet demonstrates how to send a cross-chain message using the Teleporter system on Avalanche. It calls the sendCrossChainMessage function on the TeleporterMessenger contract to initiate the cross-chain communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/01-icm-basics.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nsendCrossChainMessage\n```\n\n----------------------------------------\n\nTITLE: Configuring Node API Access\nDESCRIPTION: Command line argument to enable remote API calls to an Avalanche node. This configuration allows API access from remote machines on port 9650.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/how-to-stake.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--http-host=\n```\n\n----------------------------------------\n\nTITLE: Integrating useChains into a React Chain Selector Component (TSX)\nDESCRIPTION: Provides an example of a React functional component (`ChainSelector`) that utilizes the `useChains` hook to fetch the list of available chains (`getChains`) and display the name of the currently selected chain (`getChain`). It uses React's `useState` hook to manage the selected chain ID and renders a dropdown menu for chain selection. Depends on `@avalabs/builderkit` and `react`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/chains.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction ChainSelector() {\n  const { getChains, getChain } = useChains();\n  const [selectedChainId, setSelectedChainId] = useState<number>();\n  \n  const chains = getChains();\n  const selectedChain = selectedChainId ? getChain(selectedChainId) : undefined;\n  \n  return (\n    <div>\n      <h2>Current Chain: {selectedChain?.name}</h2>\n      <select \n        value={selectedChainId} \n        onChange={(e) => setSelectedChainId(Number(e.target.value))}\n      >\n        {chains.map(chain => (\n          <option key={chain.id} value={chain.id}>\n            {chain.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Provider in React Application (TSX)\nDESCRIPTION: Demonstrates wrapping a React application's root component (`YourApp`) with the `Web3Provider` from '@avalabs/builderkit'. It involves importing necessary modules, defining the supported blockchain chains (including Avalanche mainnet, Fuji testnet, and custom chains like 'echo' and 'dispatch'), and passing configuration props like `appName`, `projectId`, and the `chains` array to the provider. This setup enables wallet connectivity and chain management features within the application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Web3Provider } from '@avalabs/builderkit';\nimport { avalanche, avalancheFuji } from '@wagmi/core/chains';\nimport { echo } from './chains/definitions/echo';\nimport { dispatch } from './chains/definitions/dispatch';\n\n// Configure chains\nconst chains = [avalanche, avalancheFuji, echo, dispatch];\n\nfunction App() {\n  return (\n    <Web3Provider\n      appName=\"My DApp\"\n      projectId=\"YOUR_PROJECT_ID\" // Replace with your actual project ID\n      chains={chains}\n    >\n      <YourApp />\n    </Web3Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subnet Blockchain with Avalanche CLI\nDESCRIPTION: Command syntax and flags for creating a new blockchain subnet using Avalanche CLI. Supports various configurations including custom VMs, Subnet-EVM, and different consensus mechanisms.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_132\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet create [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--custom use                        a custom VM template\n--custom-vm-branch string           custom vm branch or commit\n--custom-vm-build-script string     custom vm build-script\n--custom-vm-path string             file path of custom vm to use\n--custom-vm-repo-url string         custom vm repository url\n--debug enable                      blockchain debugging (default true)\n--evm use                           the Subnet-EVM as the base template\n--evm-chain-id uint                 chain ID to use with Subnet-EVM\n--evm-defaults deprecation          notice: use '--production-defaults'\n--evm-token string                  token symbol to use with Subnet-EVM\n--external-gas-token use            a gas token from another blockchain\n-f, --force overwrite               the existing configuration if one exists\n--from-github-repo generate         custom VM binary from github repository\n--genesis string                    file path of genesis to use\n-h, --help help                     for create\n--icm interoperate                  with other blockchains using ICM\n--icm-registry-at-genesis setup     ICM registry smart contract on genesis [experimental]\n--latest use                        latest Subnet-EVM released version, takes precedence over --vm-version\n--pre-release use                   latest Subnet-EVM pre-released version, takes precedence over --vm-version\n--production-defaults use           default production settings for your blockchain\n--proof-of-authority use            proof of authority(PoA) for validator management\n--proof-of-stake use                proof of stake(PoS) for validator management\n--proxy-contract-owner string       EVM address that controls ProxyAdmin for TransparentProxy of ValidatorManager contract\n--reward-basis-points uint          (PoS only) reward basis points for PoS Reward Calculator (default 100)\n--sovereign set                     to false if creating non-sovereign blockchain (default true)\n--teleporter interoperate           with other blockchains using ICM\n--test-defaults use                 default test settings for your blockchain\n--validator-manager-owner string    EVM address that controls Validator Manager Owner\n--vm string                         file path of custom vm to use. alias to custom-vm-path\n--vm-version string                 version of Subnet-EVM template to use\n--warp generate                     a vm with warp support (needed for ICM) (default true)\n--config string                     config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                  log level for the application (default \"ERROR\")\n--skip-update-check skip            check for new versions\n```\n\n----------------------------------------\n\nTITLE: AllowList Solidity Interface Definition\nDESCRIPTION: The Solidity interface for interacting with AllowList functionality. This interface defines methods for setting and reading role permissions (Admin, Manager, Enabled, None) for addresses. The interface is used by precompiles that implement permission control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/evm-precompiles/allowlist.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ninterface IAllowList {\n  // Set [addr] to have the admin role over the precompile contract.\n  function setAdmin(address addr) external;\n  \n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have the manager role over the precompile contract.\n  function setManager(address addr) external;\n\n  // Set [addr] to have no role for the precompile contract.\n  function setNone(address addr) external;\n  \n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic HelloWorld Smart Contract in Solidity\nDESCRIPTION: This Solidity code defines a simple smart contract named `HelloWorld`. It includes a single public function `sayHello` that takes no arguments, does not read or modify state (marked as `pure`), and returns the constant string \"Hello World\". This serves as a minimal example contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/04-create-new-smart-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract HelloWorld {\n    function sayHello() public pure returns (string memory) {\n        return \"Hello World\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Basic Solidity Contract Example\nDESCRIPTION: This snippet provides a complete example of a basic, compilable Solidity source file. It includes the SPDX license identifier (`MIT`), a compatible compiler version pragma (`^0.8.0`), and a simple contract `A` with a state variable `num` and functions to get (`getNum`) and set (`setNum`) its value. This illustrates how the license and pragma directives are used in practice.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/05-solidity-file-structure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n​\ncontract A {\n \n    uint256 num;\n  \n    function getNum() public view returns(uint) {\n        return num; \n    }\n  \n    function setNum(uint _num) public {\n        num = _num;\n    }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Importing Private Key to C-Chain in Go\nDESCRIPTION: This function allows a user to gain control over an address by providing the private key. It requires the username, password, and the private key to be imported.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\navax.importKey({\n    username: string,\n    password:string,\n    privateKey:string\n}) -> {address: string}\n```\n\n----------------------------------------\n\nTITLE: Implementing Incentivized Sender Contract with Teleporter in Solidity\nDESCRIPTION: A Solidity contract that implements cross-chain messaging with ERC20 token fees using the Teleporter protocol. The contract handles fee transfers, approvals, and message sending with specified gas limits and blockchain destinations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/06-incentivize-an-awm-relayer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport {IERC20} from \"@openzeppelin/contracts@4/token/ERC20/IERC20.sol\";\n\ncontract SenderWithFeesOnCChain {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n    /**\n     * @dev Sends a message to another chain.\n     */\n    function sendMessage(address destinationAddress, string calldata message, address feeAddress) external {\n        IERC20 feeContract = IERC20(feeAddress);\n        uint256 feeAmount = 500000000000000;\n        feeContract.transferFrom(msg.sender, address(this), feeAmount);\n        feeContract.approve(address(teleporterMessenger),feeAmount);\n\n        messenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                destinationBlockchainID: 0x108ce15038973062d8628fd20c8c657effe993dd8324297353e350dfc05dacad,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: feeAddress, amount: feeAmount}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: abi.encode(message)\n            })\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Contract in Solidity - Solidity\nDESCRIPTION: This code snippet demonstrates how to define a basic smart contract in Solidity named \"A\". The contract contains a single public pure function, getOne(), which returns an unsigned integer value of 1. No external dependencies are needed other than the Solidity compiler (>=0.4.22 recommended). The function is \"pure\", meaning it neither reads nor modifies contract state. Inputs: None. Outputs: Returns 1 as uint when getOne() is called. Useful for illustrating function declaration and return values in Solidity.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/02-what-is-solidity.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n    function getOne() public pure returns(uint) {\n        return 1;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying ICM Messenger and Registry\nDESCRIPTION: This command deploys ICM Messenger and Registry into a given L1. It provides options for specifying blockchain targets, deployment configurations, and contract addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_164\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Chain Node Settings in JSON\nDESCRIPTION: JSON configuration file for Avalanche C-Chain node settings. This config disables pruning for archive node functionality and enables various Ethereum API endpoints. The file should be placed at $HOME/.avalanchego/configs/chains/C/config.json.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/exchange-integration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snowman-api-enabled\": false,\n  \"coreth-admin-api-enabled\": false,\n  \"local-txs-enabled\": true,\n  \"pruning-enabled\": false,\n  \"eth-apis\": [\n    \"internal-eth\",\n    \"internal-blockchain\",\n    \"internal-transaction\",\n    \"internal-tx-pool\",\n    \"internal-account\",\n    \"internal-personal\",\n    \"debug-tracer\",\n    \"web3\",\n    \"eth\",\n    \"eth-filter\",\n    \"admin\",\n    \"net\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Transfer Event Example in Solidity\nDESCRIPTION: This code provides a concrete example of defining an event named `Transfer` within a Solidity smart contract. This event is designed to log information about transfers, taking the sender's address (`_from`), receiver's address (`_to`), and the transferred amount (`_value`) as arguments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/06-events.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address _from, address _to, uint256 _value);\n```\n\n----------------------------------------\n\nTITLE: Managing Allow Lists with BuilderKit useAllowList Hook in TypeScript\nDESCRIPTION: Shows how to use the useAllowList React hook to set or read roles for Avalanche precompile addresses. Depends on @avalabs/builderkit and requires a valid precompileAddress. Functions cover setting admin/manager roles, enabling/disabling addresses, and querying roles. Inputs are address strings and chain ID; outputs are transaction data or current role.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAllowList } from '@avalabs/builderkit';\\n\\nconst { setAdmin, setEnabled, setManager, setNone, readAllowList } = useAllowList(precompileAddress);\\n\\n// Set admin role\\nconst data = setAdmin(\\\"0x1234...\\\");\\n\\n// Read current role\\nconst role = await readAllowList(43114, \\\"0x1234...\\\");\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Solidity Interface\nDESCRIPTION: This snippet defines a basic Solidity interface named `IExample`. It specifies two function signatures: `getValue`, a view function returning a uint256, and `setValue`, an external function taking a uint256 argument. Interfaces only declare function signatures without providing implementations, acting as a contract structure blueprint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/03-interfaces.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IExample {\n    function getValue() external view returns (uint256);\n    function setValue(uint256 _value) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Avalanche Teleporter Commands\nDESCRIPTION: This command suite provides tools for interacting with ICM messenger contracts, including deployment and message sending operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_163\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Token Name with Solidity\nDESCRIPTION: Shows a contract that encapsulates logic to retrieve the name of the token using the IERC20 interface and a stored token address. Requires that tokenAddress be set to a valid ERC-20 token contract. The getName function returns the token's name as a string and does not modify state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/03-interacting-with-erc20-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Test {\\n    address tokenAddress;\\n  \\n    function getName() public view returns(string memory) {\\n      return IERC20(tokenAddress).name();\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Subnet-EVM Directory in Bash\nDESCRIPTION: Changes the current directory to the Subnet-EVM source code location within the standard Go workspace path ($GOPATH). This is a prerequisite step for working with the Subnet-EVM codebase.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/subnet-evm\n```\n\n----------------------------------------\n\nTITLE: Declaring Different Variable Types in Solidity\nDESCRIPTION: Provides examples of declaring variables with specific primitive types in Solidity: `address`, `uint256` (unsigned integer of 256 bits), and `bool` (boolean). This demonstrates the practical application of the declaration syntax.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/02-primitive-value-and-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress addr;\nuint256 num;\nbool b;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Blockchain Configuration with Avalanche CLI\nDESCRIPTION: This command uses the Avalanche CLI to display comprehensive information about a specific blockchain configuration named 'myblockchain'. The output includes network identifiers, VM details, validation method, ICM addresses, token configuration, initial allocations, deployed smart contracts, precompile settings, node information, and wallet connection parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/view-avalanche-l1s.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> avalanche blockchain describe myblockchain\n\n+---------------------------------------------------------------------------------------------------------------------------------+\n|                                                           MYBLOCKCHAIN                                                          |\n+---------------+-----------------------------------------------------------------------------------------------------------------+\n| Name          | myblockchain                                                                                                    |\n+---------------+-----------------------------------------------------------------------------------------------------------------+\n| VM ID         | qDNV9vtxZYYNqm7TN1mYBuaaknLdefDbFK8bFmMLTJQJKaWjV                                                               |\n+---------------+-----------------------------------------------------------------------------------------------------------------+\n| VM Version    | v0.7.0                                                                                                          |\n+---------------+-----------------------------------------------------------------------------------------------------------------+\n| Validation    | Proof Of Authority                                                                                              |\n+---------------+--------------------------+--------------------------------------------------------------------------------------+\n| Local Network | ChainID                  | 12345                                                                                |\n|               +--------------------------+--------------------------------------------------------------------------------------+\n|               | SubnetID                 | fvx83jt2BWyibBRL4SRMa6WzjWp7GSFUeUUeoeBe1AqJ5Ey5w                                    |\n|               +--------------------------+--------------------------------------------------------------------------------------+\n|               | BlockchainID (CB58)      | 2QGB9GbEhsFJLSRVii2mKs8dxugHzmK98G5391P2bvXSCb4sED                                   |\n|               +--------------------------+--------------------------------------------------------------------------------------+\n|               | BlockchainID (HEX)       | 0xb883b54815c84a3f0903dbccd289ed5563395dd61c189db626e2d2680546b990                   |\n|               +--------------------------+--------------------------------------------------------------------------------------+\n|               | RPC Endpoint             | http://127.0.0.1:60538/ext/bc/2QGB9GbEhsFJLSRVii2mKs8dxugHzmK98G5391P2bvXSCb4sED/rpc |\n+---------------+--------------------------+--------------------------------------------------------------------------------------+\n\n+------------------------------------------------------------------------------------+\n|                                         ICM                                        |\n+---------------+-----------------------+--------------------------------------------+\n| Local Network | ICM Messenger Address | 0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf |\n|               +-----------------------+--------------------------------------------+\n|               | ICM Registry Address  | 0x695Ea5FbeBBdc99cA679F5fD7768f179d2281d74 |\n+---------------+-----------------------+--------------------------------------------+\n\n+-------------------------------+\n|           TOKEN               |\n+--------------+----------------+\n| Token Name   | TUTORIAL Token |\n+--------------+----------------+\n| Token Symbol | TUTORIAL       |\n+--------------+----------------+\n\n+----------------------------------------------------------------------------------------------------------------------------------------+\n|                                                        INITIAL TOKEN ALLOCATION                                                        |\n+-------------------------+------------------------------------------------------------------+---------------+---------------------------+\n| DESCRIPTION             | ADDRESS AND PRIVATE KEY                                          | AMOUNT (OWEN) | AMOUNT (WEI)              |\n+-------------------------+------------------------------------------------------------------+---------------+---------------------------+\n| Main funded account     | 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC                       | 1000000       | 1000000000000000000000000 |\n| ewoq                    | 56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027 |               |                           |\n+-------------------------+------------------------------------------------------------------+---------------+---------------------------+\n| Used by ICM             | 0x001CBe3650FAD190d9ccBd57b289124F5131AA57                       | 600           | 600000000000000000000     |\n| cli-teleporter-deployer | d00b93e1526d05a30b681911a3e0f5e5528add205880c1cafa4f84cdb2746b00 |               |                           |\n+-------------------------+------------------------------------------------------------------+---------------+---------------------------+\n\n+-----------------------------------------------------------------------------------------------------------------+\n|                                                 SMART CONTRACTS                                                 |\n+-----------------------+--------------------------------------------+--------------------------------------------+\n| DESCRIPTION           | ADDRESS                                    | DEPLOYER                                   |\n+-----------------------+--------------------------------------------+--------------------------------------------+\n| Proxy Admin           | 0xC0fFEE1234567890aBCdeF1234567890abcDef34 | 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC |\n+-----------------------+--------------------------------------------+--------------------------------------------+\n| PoA Validator Manager | 0x0C0DEbA5E0000000000000000000000000000000 |                                            |\n+-----------------------+--------------------------------------------+--------------------------------------------+\n| Transparent Proxy     | 0x0Feedc0de0000000000000000000000000000000 |                                            |\n+-----------------------+--------------------------------------------+--------------------------------------------+\n\n+----------------------------------------------------------------------+\n|                      INITIAL PRECOMPILE CONFIGS                      |\n+------------+-----------------+-------------------+-------------------+\n| PRECOMPILE | ADMIN ADDRESSES | MANAGER ADDRESSES | ENABLED ADDRESSES |\n+------------+-----------------+-------------------+-------------------+\n| Warp       | n/a             | n/a               | n/a               |\n+------------+-----------------+-------------------+-------------------+\n\n+--------------------------------------------------------------------------+\n|                                   NODES                                  |\n+-------+------------------------------------------+-----------------------+\n| NAME  | NODE ID                                  | LOCALHOST ENDPOINT    |\n+-------+------------------------------------------+-----------------------+\n| node1 | NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg | http://127.0.0.1:9650 |\n+-------+------------------------------------------+-----------------------+\n| node2 | NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ | http://127.0.0.1:9652 |\n+-------+------------------------------------------+-----------------------+\n\n+--------------------------------------------------------------------------------------------------------+\n|                                            WALLET CONNECTION                                           |\n+-----------------+--------------------------------------------------------------------------------------+\n| Network RPC URL | http://127.0.0.1:60538/ext/bc/2QGB9GbEhsFJLSRVii2mKs8dxugHzmK98G5391P2bvXSCb4sED/rpc |\n+-----------------+--------------------------------------------------------------------------------------+\n| Network Name    | myblockchain                                                                         |\n+-----------------+--------------------------------------------------------------------------------------+\n| Chain ID        | 12345                                                                                |\n+-----------------+--------------------------------------------------------------------------------------+\n| Token Symbol    | TUTORIAL                                                                             |\n+-----------------+--------------------------------------------------------------------------------------+\n| Token Name      | TUTORIAL Token                                                                       |\n+-----------------+--------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing getCurrentMessage Query Function in Solidity\nDESCRIPTION: View function that allows querying the latest message received from a specific blockchain ID. Returns the sender address and message content.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Check the current message from another chain.\n     */\n    function getCurrentMessage(\n        bytes32 sourceBlockchainID\n    ) external view returns (address, string memory) {\n        Message memory messageInfo = _messages[sourceBlockchainID];\n        return (messageInfo.sender, messageInfo.message);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Sender Contract in Solidity\nDESCRIPTION: This Solidity contract defines a SenderOnCChain that uses ITeleporterMessenger to send cross-chain messages. It imports the necessary interface, initializes the messenger, and provides a function to send messages to a destination chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/04-create-sender-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.\";\n\ncontract SenderOnCChain {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    /**\n     * @dev Sends a message to another chain.\n     */\n    function sendMessage(address destinationAddress, string calldata message) external {\n        messenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                // Replace with blockchainID of your Avalanche L1 (see instructions in Readme)\n                destinationBlockchainID: 0x3861e061737eaeb8d00f0514d210ad1062bfacdb4bd22d1d1f5ef876ae3a8921,\n                destinationAddress: destinationAddress, \n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: abi.encode(message)\n            })\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Visibility in Solidity Inheritance\nDESCRIPTION: This snippet introduces variable and function visibility keywords ('private' and 'internal') to show how Solidity enforces access restrictions in inherited contracts. Variables and functions marked 'private' in contract A are not accessible in contract B, while those marked 'internal' or 'public' are inherited. Deployment in a Solidity-compatible environment is required, and the snippet is essential for understanding security and encapsulation in contract inheritance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/02-inheritance.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n  \n  uint private num1;\n  string internal name;\n  \n  function getOne() private pure returns(uint) {\n    return 1;\n  }\n  \n  function getTwo() public pure returns(uint) {\n    return 2;\n  }\n}\n​\ncontract B is A {}\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-721 Interface in Solidity\nDESCRIPTION: This snippet presents the interface definition for the ERC-721 non-fungible token (NFT) standard as proposed in the original specification. It outlines all required events (Transfer, Approval, ApprovalForAll) and function signatures that a compliant contract must implement, including token querying, transfer, and approval mechanisms. Dependencies include the Solidity compiler and an Ethereum-compatible environment, and all key parameters (addresses, token IDs, and optional data) are documented through extensive comments. The interface is intended to be imported or implemented in Solidity contracts that wish to be ERC-721 compliant, with return values and error behavior for each function specified in the doc comments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/01-erc721-intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ERC721 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Gas Fee Configuration Benchmark Values\nDESCRIPTION: Example configuration showing recommended benchmark values for gas fee parameters including gasLimit, minBaseFee, targetGas, and other related settings for an EVM blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/06-configuring-gas-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"feeConfig\": {\n        \"gasLimit\": 15000000,\n        \"minBaseFee\": 25000000000,\n        \"targetGas\": 15000000,\n        \"baseFeeChangeDenominator\": 36,\n        \"minBlockGasCost\": 0,\n        \"maxBlockGasCost\": 1000000,\n        \"targetBlockRate\": 2,\n        \"blockGasCostStep\": 200000\n      },\n        \n\"gasLimit\": 0xe4e1c0,\n```\n\n----------------------------------------\n\nTITLE: Implementing the Configuration Verification Method in Go (config.go)\nDESCRIPTION: Presents the `Verify` method implementation for the `Config` struct in `precompile/helloworld/config.go`. This method is called on startup to validate the precompile's configuration. The template includes verification for the embedded `AllowListConfig` and indicates where to add custom validation rules.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Verify tries to verify Config and returns an error accordingly.\nfunc (c *Config) Verify() error {\n\t// Verify AllowList first\n\tif err := c.AllowListConfig.Verify(); err != nil {\n\t\treturn err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\t// Add your own custom verify code for Config here\n\t// and return an error accordingly\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: WarpMessenger Precompile Interface in Solidity\nDESCRIPTION: The Solidity interface for the WarpMessenger precompile located at address 0x0200000000000000000000000000000000000005. Defines structures for WarpMessage and WarpBlockHash, along with functions for sending and verifying Warp messages and retrieving blockchain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/warpmessenger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2022-2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nstruct WarpMessage {\n  bytes32 sourceChainID;\n  address originSenderAddress;\n  bytes payload;\n}\n\nstruct WarpBlockHash {\n  bytes32 sourceChainID;\n  bytes32 blockHash;\n}\n\ninterface IWarpMessenger {\n  event SendWarpMessage(address indexed sender, bytes32 indexed messageID, bytes message);\n\n  // sendWarpMessage emits a request for the subnet to send a warp message from [msg.sender]\n  // with the specified parameters.\n  // This emits a SendWarpMessage log from the precompile. When the corresponding block is accepted\n  // the Accept hook of the Warp precompile is invoked with all accepted logs emitted by the Warp\n  // precompile.\n  // Each validator then adds the UnsignedWarpMessage encoded in the log to the set of messages\n  // it is willing to sign for an off-chain relayer to aggregate Warp signatures.\n  function sendWarpMessage(bytes calldata payload) external returns (bytes32 messageID);\n\n  // getVerifiedWarpMessage parses the pre-verified warp message in the\n  // predicate storage slots as a WarpMessage and returns it to the caller.\n  // If the message exists and passes verification, returns the verified message\n  // and true.\n  // Otherwise, returns false and the empty value for the message.\n  function getVerifiedWarpMessage(uint32 index) external view returns (WarpMessage calldata message, bool valid);\n\n  // getVerifiedWarpBlockHash parses the pre-verified WarpBlockHash message in the\n  // predicate storage slots as a WarpBlockHash message and returns it to the caller.\n  // If the message exists and passes verification, returns the verified message\n  // and true.\n  // Otherwise, returns false and the empty value for the message.\n  function getVerifiedWarpBlockHash(\n    uint32 index\n  ) external view returns (WarpBlockHash calldata warpBlockHash, bool valid);\n\n  // getBlockchainID returns the snow.Context BlockchainID of this chain.\n  // This blockchainID is the hash of the transaction that created this blockchain on the P-Chain\n  // and is not related to the Ethereum ChainID.\n  function getBlockchainID() external view returns (bytes32 blockchainID);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Solidity Compiler Version\nDESCRIPTION: This snippet demonstrates the basic syntax for specifying the exact Solidity compiler version required for a source file using the `pragma solidity` directive. This ensures the code is compiled with the intended version, preventing potential issues due to compiler differences.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/05-solidity-file-structure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity <version>;\n```\n\n----------------------------------------\n\nTITLE: Subnet-EVM HelloWorld Test Contract\nDESCRIPTION: Test contract for Subnet-EVM that verifies the functionality of the HelloWorld precompile. This tests accessing the default greeting, permission checks, and setting custom greetings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ExampleHelloWorld.sol\";\nimport \"../interfaces/IHelloWorld.sol\";\nimport \"./AllowListTest.sol\";\n\ncontract ExampleHelloWorldTest is AllowListTest {\n  IHelloWorld helloWorld = IHelloWorld(HELLO_WORLD_ADDRESS);\n\n  function step_getDefaultHelloWorld() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    assertEq(example.sayHello(), \"Hello World!\");\n  }\n\n  function step_doesNotSetGreetingBeforeEnabled() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    try example.setGreeting(\"testing\") {\n      assertTrue(false, \"setGreeting should fail\");\n    } catch {}\n  }\n\n  function step_setAndGetGreeting() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    helloWorld.setEnabled(exampleAddress);\n    assertRole(\n      helloWorld.readAllowList(exampleAddress),\n      AllowList.Role.Enabled\n    );\n    string memory greeting = \"testgreeting\";\n    example.setGreeting(greeting);\n    assertEq(example.sayHello(), greeting);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Registration with ERC20 Tokens\nDESCRIPTION: Function to initiate validator registration using ERC20 tokens. It takes parameters for node ID, BLS public key, registration expiry, ownership details, delegation fee, minimum stake duration, and stake amount.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateValidatorRegistration(\n    bytes memory nodeID,\n    bytes memory blsPublicKey,\n    uint64 registrationExpiry,\n    PChainOwner memory remainingBalanceOwner,\n    PChainOwner memory disableOwner,\n    uint16 delegationFeeBips,\n    uint64 minStakeDuration,\n    uint256 stakeAmount\n) external nonReentrant returns (bytes32 validationID)\n```\n\n----------------------------------------\n\nTITLE: Implementing an Abstract Contract in Solidity\nDESCRIPTION: This example demonstrates how a concrete contract `DerivedContract` inherits from the abstract `BaseContract` using the `is` keyword. It provides a specific implementation for the inherited abstract function `getValue()`, marked with the `override` keyword. This implementation returns the value of a private state variable `value`. Because all inherited abstract functions are implemented, `DerivedContract` is a concrete contract and can be deployed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/04-abstract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// Abstract contract defining a required function\nabstract contract BaseContract {\n    function getValue() public view virtual returns (uint256);\n}\n\n// Concrete contract inheriting from BaseContract\ncontract DerivedContract is BaseContract {\n    uint256 private value = 42;\n\n    function getValue() public view override returns (uint256) {\n        return value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RewardManager Precompile Interface Definition in Solidity\nDESCRIPTION: Solidity interface defining the RewardManager precompile contract. It includes functions for setting reward addresses, allowing fee recipients, disabling rewards, and checking current configurations, along with their associated events.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/rewardmanager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IRewardManager {\n  // RewardAddressChanged is the event logged whenever reward address is modified\n  event RewardAddressChanged(\n    address indexed sender,\n    address indexed oldRewardAddress,\n    address indexed newRewardAddress\n  );\n\n  // FeeRecipientsAllowed is the event logged whenever fee recipient is modified\n  event FeeRecipientsAllowed(address indexed sender);\n\n  // RewardsDisabled is the event logged whenever rewards are disabled\n  event RewardsDisabled(address indexed sender);\n\n  // setRewardAddress sets the reward address to the given address\n  function setRewardAddress(address addr) external;\n\n  // allowFeeRecipients allows block builders to claim fees\n  function allowFeeRecipients() external;\n\n  // disableRewards disables block rewards and starts burning fees\n  function disableRewards() external;\n\n  // currentRewardAddress returns the current reward address\n  function currentRewardAddress() external view returns (address rewardAddress);\n\n  // areFeeRecipientsAllowed returns true if fee recipients are allowed\n  function areFeeRecipientsAllowed() external view returns (bool isAllowed);\n  \n  // IAllowList\n  event RoleSet(uint256 indexed role, address indexed account, address indexed sender, uint256 oldRole);\n\n  // Set [addr] to have the admin role over the precompile contract.\n  function setAdmin(address addr) external;\n\n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have the manager role over the precompile contract.\n  function setManager(address addr) external;\n\n  // Set [addr] to have no role for the precompile contract.\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IHelloWorld Precompile Interface in Solidity\nDESCRIPTION: Defines the IHelloWorld interface for Solidity contracts, inheriting from IAllowList. It declares an event 'GreetingChanged' and two core functions: sayHello (read-only, returns greeting) and setGreeting (writes a greeting). Requires the '@avalabs/subnet-evm-contracts' package for imports, compatible with Solidity version >= 0.8.0. Inputs: greeting strings; Outputs: stored strings and events. Designed for use as a precompile binding specification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\nimport \"@avalabs/subnet-evm-contracts/contracts/interfaces/IAllowList.sol\";\n\ninterface IHelloWorld is IAllowList {\n  event GreetingChanged(\n    address indexed sender,\n    string oldGreeting,\n    string newGreeting\n  );\n\n  // sayHello returns the stored greeting string\n  function sayHello() external view returns (string calldata result);\n\n  // setGreeting stores the greeting string\n  function setGreeting(string calldata response) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the avalanche blockchain command suite\nDESCRIPTION: Basic usage syntax for the avalanche blockchain command suite. This command provides tools for developing and deploying blockchains on the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-721 Token Interface - Solidity\nDESCRIPTION: This Solidity snippet defines the ERC-721 interface for Non-Fungible Tokens as specified by EIP-721. It details all required events and functions that contracts must implement for full compliance, specifying parameter use and operational constraints. Dependencies include the Ethereum Virtual Machine, Solidity compiler, and optionally ERC-165 for interface detection; inputs are addresses, token IDs, and transaction data, while outputs include state changes and return values as described in EIP-721. This snippet is intended as an interface declaration, not a full contract implementation, and should be inherited or referenced in derivative contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/03-interacting-with-erc721-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n/// @title ERC-721 Non-Fungible Token Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface ERC721 {\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n    ///  may be created and assigned without emitting Transfer. At the time of\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n​\\n    /// @dev This emits when the approved address for an NFT is changed or\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\n    ///  When a Transfer event emits, this also indicates that the approved\\n    ///  address for that NFT (if any) is reset to none.\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n​\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\n    ///  The operator can manage all NFTs of the owner.\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n​\\n    /// @notice Count all NFTs assigned to an owner\\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of NFTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n​\\n    /// @notice Find the owner of an NFT\\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an NFT\\n    /// @return The address of the owner of the NFT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n​\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n    ///  `onERC721Received` on `_to` and throws if the return value is not\\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    /// @param data Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;\\n​\\n    /// @notice Transfers the ownership of an NFT from one address to another address\\n    /// @dev This works identically to the other function with an extra data parameter,\\n    ///  except this function just sets data to \"\".\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n​\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n​\\n    /// @notice Change or reaffirm the approved address for an NFT\\n    /// @dev The zero address indicates there is no approved address.\\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n    ///  operator of the current owner.\\n    /// @param _approved The new approved NFT controller\\n    /// @param _tokenId The NFT to approve\\n    function approve(address _approved, uint256 _tokenId) external payable;\\n​\\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\\n    ///  all of `msg.sender`'s assets\\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\\n    ///  multiple operators per owner.\\n    /// @param _operator Address to add to the set of authorized operators\\n    /// @param _approved True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n​\\n    /// @notice Get the approved address for a single NFT\\n    /// @dev Throws if `_tokenId` is not a valid NFT.\\n    /// @param _tokenId The NFT to find the approved address for\\n    /// @return The approved address for this NFT, or the zero address if there is none\\n    function getApproved(uint256 _tokenId) external view returns (address);\\n​\\n    /// @notice Query if an address is an authorized operator for another address\\n    /// @param _owner The address that owns the NFTs\\n    /// @param _operator The address that acts on behalf of the owner\\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing sayHello Function in Go\nDESCRIPTION: Implementation of the sayHello function that retrieves and returns the stored greeting value from the contract's state. Includes gas cost deduction and proper error handling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc sayHello(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, SayHelloGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tcurrentState := accessibleState.GetStateDB()\n\tvalue := GetGreeting(currentState)\n\tpackedOutput, err := PackSayHelloOutput(value)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Storage\nDESCRIPTION: Adding state variable for storing the latest message received from each source chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n    mapping(bytes32 sourceBlockchainID => Message message) private _messages;\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Key and GetGreeting Helper Function in Go\nDESCRIPTION: Defines a storage key hash and implements a helper function to retrieve greeting values from the contract's stateDB. The storage key is used to avoid conflicts with other storage elements.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nvar (\n  storageKeyHash = common.BytesToHash([]byte(\"storageKey\"))\n)\n\nfunc GetGreeting(stateDB contract.StateDB) string {\n\tvalue := stateDB.GetState(ContractAddress, storageKeyHash)\n\treturn string(common.TrimLeftZeroes(value.Bytes()))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Control with Abstract Contracts in Solidity\nDESCRIPTION: Shows an abstract contract `AccessControl` designed for managing ownership and restricting function access. It includes an `owner` state variable, a constructor to initialize the owner, an `onlyOwner` modifier, and a `virtual` function `restrictedFunction` protected by the modifier. The `SecureContract` inherits `AccessControl`, gaining the ownership logic and modifier, and provides a concrete implementation for `restrictedFunction` using the `override` keyword.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/04-abstract.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract AccessControl {\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the owner\");\n        _;\n    }\n\n    function restrictedFunction() public view virtual onlyOwner returns (string memory);\n}\n\ncontract SecureContract is AccessControl {\n    function restrictedFunction() public view override onlyOwner returns (string memory) {\n        return \"Access granted!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ICTT Hooks for Token Transfers in Avalanche (TypeScript/React)\nDESCRIPTION: Demonstrates the use of the useICTT hook from @avalabs/builderkit to interact with Avalanche's Inter-Chain Token Transfer (ICTT) system. The snippet shows how to retrieve the interchain messenger, generate and execute both ERC20 and native token cross-chain transfers, extract message IDs from transaction logs, and fetch receive transaction details. Key dependencies include @avalabs/builderkit (supplying useICTT) and BigNumber for amount specification; required parameters include contract addresses, chain IDs, token details, and standard function arguments for the hooks. Outputs range from transaction data structures to message IDs for further tracking. Limitations include the necessity of correct on-chain addresses, BigNumber compatibility, and functioning within an async/await or React context.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/ictt.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useICTT } from '@avalabs/builderkit';\n\nconst { \n  getInterchainMessenger,\n  send,\n  sendNative,\n  getMessageId,\n  getReceiveTransaction,\n  getHomeHopMessageId\n} = useICTT();\n\n// Get messenger contract\nconst messenger = await getInterchainMessenger(43114);\n\n// Send ERC20 tokens\nconst sendData = send(\n  transferer,           // Transferer contract\n  destinationChainHex,  // Destination chain ID in hex\n  destTransferer,       // Destination transferer\n  receiver,            // Recipient address\n  feeTokenAddr,        // Fee token address\n  amount,              // Amount to send\n  decimals,            // Token decimals\n  isMultiHop           // Whether this is a multi-hop transfer\n);\n\n// Send native token\nconst sendNativeData = sendNative(\n  transferer,           // Transferer contract\n  destinationChainHex,  // Destination chain ID in hex\n  destTransferer,       // Destination transferer\n  receiver,            // Recipient address\n  feeTokenAddr,        // Fee token address\n  amount,              // Amount to send\n  decimals,            // Token decimals\n  isMultiHop           // Whether this is a multi-hop transfer\n);\n\n// Get message ID from log\nconst messageId = getMessageId(txLog);\n\n// Get receive transaction\nconst receiveData = await getReceiveTransaction(\n  43114,              // Chain ID\n  messageId           // Message ID\n);\n\n// Get home hop message ID\nconst hopMessageId = await getHomeHopMessageId(\n  43114,              // Chain ID\n  txHash              // Transaction hash\n);\n```\n\n----------------------------------------\n\nTITLE: Understanding PrecompileTest Structure for Contract Testing\nDESCRIPTION: This snippet shows the standard test structure used for precompile contract testing. The PrecompileTest struct allows customization of test parameters including caller address, input data, gas limits, and hooks for state verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// PrecompileTest is a test case for a precompile\ntype PrecompileTest struct {\n\t// Caller is the address of the precompile caller\n\tCaller common.Address\n\t// Input the raw input bytes to the precompile\n\tInput []byte\n\t// InputFn is a function that returns the raw input bytes to the precompile\n\t// If specified, Input will be ignored.\n\tInputFn func(t *testing.T) []byte\n\t// SuppliedGas is the amount of gas supplied to the precompile\n\tSuppliedGas uint64\n\t// ReadOnly is whether the precompile should be called in read only\n\t// mode. If true, the precompile should not modify the state.\n\tReadOnly bool\n\t// Config is the config to use for the precompile\n\t// It should be the same precompile config that is used in the\n\t// precompile's configurator.\n\t// If nil, Configure will not be called.\n\tConfig precompileconfig.Config\n\t// BeforeHook is called before the precompile is called.\n\tBeforeHook func(t *testing.T, state contract.StateDB)\n\t// AfterHook is called after the precompile is called.\n\tAfterHook func(t *testing.T, state contract.StateDB)\n\t// ExpectedRes is the expected raw byte result returned by the precompile\n\tExpectedRes []byte\n\t// ExpectedErr is the expected error returned by the precompile\n\tExpectedErr string\n\t// BlockNumber is the block number to use for the precompile's block context\n\tBlockNumber int64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DexERC20Wrapper Smart Contract in Solidity\nDESCRIPTION: A smart contract that wraps exchange functionality to handle cross-chain token swaps. It includes features for receiving tokens, querying prices, and executing swaps with both native and wrapped tokens. The contract implements IERC20SendAndCallReceiver interface and uses SafeERC20 for secure token transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/13-cross-chain-token-swaps/07-exchange-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity 0.8.18;\n\nimport {IERC20SendAndCallReceiver} from \"../interfaces/IERC20SendAndCallReceiver.sol\";\nimport {SafeERC20TransferFrom} from \"../utils/SafeERC20TransferFrom.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts@4.8.1/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts@4.8.1/token/ERC20/IERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts@4.8.1/utils/Context.sol\";\n\nimport {IWAVAX} from \"./interface/IWAVAX.sol\";\nimport {IUniswapFactory} from \"./interface/IUniswapFactory.sol\";\nimport {IUniswapPair} from \"./interface/IUniswapPair.sol\";\n\ncontract DexERC20Wrapper is Context, IERC20SendAndCallReceiver {\n    using SafeERC20 for IERC20;\n\n    address public immutable WNATIVE;\n    address public immutable factory;\n\n    struct SwapOptions {\n        address tokenOut;\n        uint256 minAmountOut;\n    }\n\n    constructor(\n        address wrappedNativeAddress,\n        address dexFactoryAddress\n    ) {\n        WNATIVE = wrappedNativeAddress;\n        factory = dexFactoryAddress;\n    }\n\n    event TokensReceived(\n        bytes32 indexed sourceBlockchainID,\n        address indexed originTokenTransferrerAddress,\n        address indexed originSenderAddress,\n        address token,\n        uint256 amount,\n        bytes payload\n    );\n\n    receive() external payable {}\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1e3 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function query(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) internal view returns (uint256 amountOut) {\n        if (tokenIn == tokenOut || amountIn == 0) {\n            return 0;\n        }\n        address pair = IUniswapFactory(factory).getPair(tokenIn, tokenOut);\n        if (pair == address(0)) {\n            return 0;\n        }\n        (uint256 r0, uint256 r1, ) = IUniswapPair(pair).getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = tokenIn < tokenOut ? (r0, r1) : (r1, r0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            amountOut = getAmountOut(amountIn, reserveIn, reserveOut);\n        }\n    }\n\n    function swap(\n        uint256 amountIn,\n        uint256 amountOut,\n        address tokenIn,\n        address tokenOut,\n        address to\n    ) internal {\n        address pair = IUniswapFactory(factory).getPair(tokenIn, tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (tokenIn < tokenOut)\n            ? (uint256(0), amountOut) : (amountOut, uint256(0));\n        IERC20(tokenIn).safeTransfer(pair, amountIn);\n        IUniswapPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n\n    function receiveTokens(\n        bytes32 sourceBlockchainID,\n        address originTokenTransferrerAddress,\n        address originSenderAddress,\n        address token,\n        uint256 amount,\n        bytes calldata payload\n    ) external {\n        emit TokensReceived({\n            sourceBlockchainID: sourceBlockchainID,\n            originTokenTransferrerAddress: originTokenTransferrerAddress,\n            originSenderAddress: originSenderAddress,\n            token: token,\n            amount: amount,\n            payload: payload\n        });\n\n        require(payload.length > 0, \"DexERC20Wrapper: empty payload\");\n\n        IERC20 _token = IERC20(token);\n        SafeERC20TransferFrom.safeTransferFrom(_token, _msgSender(), amount);\n\n        uint256 amountOut = query(amount, token, WNATIVE);\n        require(amountOut > 0, \"DexERC20Wrapper: insufficient liquidity\");\n\n        SwapOptions memory swapOptions = abi.decode(payload, (SwapOptions));\n        require(amountOut >= swapOptions.minAmountOut, \"DexERC20Wrapper: slippage exceeded\");\n        \n        if (swapOptions.tokenOut == address(0)) {\n            swap(amount, amountOut, token, WNATIVE, address(this));\n            IWAVAX(WNATIVE).withdraw(amountOut);\n            payable(originSenderAddress).transfer(amountOut);\n        } else {\n            swap(amount, amountOut, token, WNATIVE, originSenderAddress);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the IERC20 Interface in Solidity\nDESCRIPTION: Defines the standard ERC-20 interface used to interact with ERC-20 token contracts. This interface outlines the required functions for any ERC-20 compliant token, including transfer, approve, and allowance methods, as well as state-querying functions. No dependencies other than Solidity ^0.8.0 are required; this serves as the foundational type needed for subsequent contract interactions, requiring the token address as a parameter when used.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/03-interacting-with-erc20-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20TokenRemote Contract in Solidity\nDESCRIPTION: ERC20TokenRemote is a concrete implementation of TokenRemote, IERC20TokenTransferrer, and IERC20. It handles minting and burning of ERC20 assets and inherits standard OpenZeppelin ERC20 implementation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/05-token-remote.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ERC20TokenRemote is TokenRemote, IERC20TokenTransferrer, IERC20 {\n    constructor(string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) {\n        // Constructor implementation\n    }\n    // Other implementation details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Smart Contract\nDESCRIPTION: Command to compile a Solidity contract into Go bindings using Abigen.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/smart-contract-dev/interact-golang-app.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nabigen --sol counter.sol --pkg main --out counter.go\n```\n\n----------------------------------------\n\nTITLE: Registering Stateful Precompile Functions in Go\nDESCRIPTION: This code registers mathematical operations (moduloPlus, powOfThree, simplFrac) as stateful precompile functions. It maps function names to their implementations, verifies each against the ABI, and creates function handlers with the appropriate method IDs. Finally, it constructs and returns a stateful precompile contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar functions []*contract.StatefulPrecompileFunction\n\nabiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{\n\t\"moduloPlus\": moduloPlus,\n\t\"powOfThree\": powOfThree,\n\t\"simplFrac\":  simplFrac,\n}\n\nfor name, function := range abiFunctionMap {\n\tmethod, ok := CalculatorplusABI.Methods[name]\n\tif !ok {\n\t\tpanic(fmt.Errorf(\"given method (%s) does not exist in the ABI\", name))\n\t}\n\tfunctions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))\n}\n// Construct the contract with no fallback function.\nstatefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)\nif err != nil {\n\tpanic(err)\n}\nreturn statefulContract\n```\n\n----------------------------------------\n\nTITLE: ERC721 NFT Smart Contract Implementation\nDESCRIPTION: Solidity implementation of an ERC721 NFT contract with minting functionality. Uses OpenZeppelin's ERC721 implementation and Counters utility.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\n// contracts/ERC721.sol\n\npragma solidity >=0.6.2;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract NFT is ERC721 {\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  constructor() ERC721(\"GameItem\", \"ITM\") {}\n\n  // commented out unused variable\n  // function awardItem(address player, string memory tokenURI)\n  function awardItem(address player)\n    public\n    returns (uint256)\n  {\n    _tokenIds.increment();\n\n    uint256 newItemId = _tokenIds.current();\n    _mint(player, newItemId);\n    // _setTokenURI(newItemId, tokenURI);\n\n    return newItemId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getString Function for EVM Contract in Go\nDESCRIPTION: Function to retrieve a string value from EVM state, managing gas consumption and packing the output for return. It uses the GetString helper function to retrieve and process the stored value from the state database.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/04-read-date-from-evm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc getString(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, GetStringGasCost); err != nil {\n        return nil, 0, err\n    }\n    // no input provided for this function\n\n    // CUSTOM CODE STARTS HERE\n\n    var output string // CUSTOM CODE FOR AN OUTPUT\n\n    currentState := accessibleState.GetStateDB()\n    output = GetString(currentState)\n\n    packedOutput, err := PackGetStringOutput(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing If/Else Branching in Solidity - Solidity\nDESCRIPTION: Demonstrates the standard syntax for if/else statements in Solidity, enabling conditional branching within smart contract functions. No external dependencies are required. The snippet serves as a template for introducing logic that executes alternative code paths based on boolean expressions. Inputs involve boolean conditions and there are no specific outputs as it shows a general control structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/02-control-flow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nif (<boolean-statement>) {\\n    \\n} else {\\n  \\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Precompile Files Shell Script\nDESCRIPTION: Shell command to generate the precompile contract files from an ABI definition\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/02-generating-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/generate_precompile.sh --abi ./contracts/abis/ICalculatorPlus.abi --type Calculatorplus --pkg calculatorplus --out ./calculatorplus\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Receiver Contract in Solidity\nDESCRIPTION: Complete implementation of a contract that can receive and store messages from the Interchain Messaging system. Includes message storage structure, authorization checks, and message processing functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/05-receiving-a-message.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.18;\n\nimport \"https://github.com/ava-labs/teleporter/blob/main/contracts/src/Teleporter/ITeleporterMessenger.sol\";\nimport \"https://github.com/ava-labs/teleporter/blob/main/contracts/src/Teleporter/ITeleporterReceiver.sol\";\n\ncontract MessageReceiver is ITeleporterReceiver {\n    // Messages sent to this contract.\n    struct Message {\n        address sender;\n        string message;\n    }\n  \n  \tmapping(bytes32 => Message) private _messages;\n\n    ITeleporterMessenger public immutable teleporterMessenger;\n\n    // Errors\n    error Unauthorized();\n\n    constructor(address teleporterMessengerAddress) {\n        teleporterMessenger = ITeleporterMessenger(teleporterMessengerAddress);\n    }\n\n    /**\n     * @dev See {ITeleporterReceiver-receiveTeleporterMessage}.\n     *\n     * Receives a message from another chain.\n     */\n    function receiveTeleporterMessage(\n        bytes32 originChainID,\n        address originSenderAddress,\n        bytes calldata message\n    ) external {\n      \t// Only the Interchain Messaging receiver can deliver a message.\n        if (msg.sender != address(teleporterMessenger)) {\n            revert Unauthorized();\n        }\n      \n        string memory messageString = abi.decode(message, (string));\n        _messages[originChainID] = Message(originSenderAddress, messageString);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Solidity Interface in a Contract\nDESCRIPTION: This snippet demonstrates how to implement a Solidity interface. The `ExampleContract` contract uses the `is` keyword to declare that it implements `IExample`. It provides concrete implementations for both `getValue` and `setValue` functions, using the `override` keyword to indicate they fulfill the interface requirements. All functions defined in the interface must be implemented in the contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/03-interfaces.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// Define the interface\ninterface IExample {\n    function getValue() external view returns (uint256);\n    function setValue(uint256 _value) external;\n}\n\n// Implement the interface in a contract\ncontract ExampleContract is IExample {\n    uint256 private value;\n\n    function getValue() external view override returns (uint256) {\n        return value;\n    }\n\n    function setValue(uint256 _value) external override {\n        value = _value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Solidity Constructor Example\nDESCRIPTION: Provides a practical example of a Solidity contract 'A' with a constructor. The constructor takes an unsigned integer '_num' as input during deployment and initializes the contract's state variable 'num' with this value. This pattern is commonly used to set initial parameters or owner addresses for a contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/04-contract-constructor.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n    uint num;\n  \n    constructor(uint _num) {\n        num = _num;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Glacier API Hook to Retrieve Chain Info and ERC20 Balances - TypeScript/TSX\nDESCRIPTION: Demonstrates importing the useGlacier hook from BuilderKit and destructuring two API functions: getChainInformation and listErc20Balances. The code shows how to asynchronously fetch blockchain chain data and ERC20 token balances for a wallet by providing the required chain ID and address. Requires @avalabs/builderkit, and is intended to be run in a React TypeScript/TSX environment. Inputs are the chain ID (number) and address (string), outputs are the retrieved chain info object and an array of token balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/glacier.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useGlacier } from '@avalabs/builderkit';\n\nconst { \n  getChainInformation,\n  listErc20Balances\n} = useGlacier();\n\n// Get chain information\nconst chainInfo = await getChainInformation(43114);\n\n// Get ERC20 token balances\nconst balances = await listErc20Balances(\n  43114,                 // Chain ID\n  \"0x1234...\"           // Wallet address\n);\n```\n\n----------------------------------------\n\nTITLE: Using the useUniswapV2 Hook for Basic Uniswap V2 Operations in TypeScript\nDESCRIPTION: This snippet demonstrates importing the `useUniswapV2` hook from `@avalabs/builderkit` and utilizing its core functions to interact with Uniswap V2 pairs on Avalanche (Chain ID 43114). It shows how to get the pair address (`getPair`), retrieve reserves (`getReserves`), calculate the output amount for a trade (`getAmountOut`), and prepare swap transaction data (`getSwapTransaction`). Assumes `tokenA`, `tokenB` (token info objects), and `BigNumber` are defined elsewhere.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/uniswap.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useUniswapV2 } from '@avalabs/builderkit';\n\nconst { \n  getPair,\n  getReserves,\n  getAmountOut,\n  getQuote,\n  getMinAmountOut,\n  getSwapTransaction\n} = useUniswapV2();\n\n// Get pair address\nconst pairAddress = await getPair(\n  43114,                 // Chain ID\n  tokenA,               // Token A info\n  tokenB                // Token B info\n);\n\n// Get pair reserves\nconst reserves = await getReserves(\n  43114,                // Chain ID\n  pairAddress           // Pair address\n);\n\n// Calculate output amount\nconst amountOut = getAmountOut(\n  reserves,             // [reserve0, reserve1]\n  new BigNumber(\"1.0\"), // Amount in\n  tokenA,              // Token in info\n  tokenB               // Token out info\n);\n\n// Get swap transaction data\nconst swapData = await getSwapTransaction(\n  43114,               // Chain ID\n  tokenA,             // Token in info\n  tokenB,             // Token out info\n  new BigNumber(\"1.0\"), // Amount in\n  amountOut,          // Minimum amount out\n  \"0x1234...\"         // Recipient\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing the block.ChainVM Interface for Avalanche Snowman (Go)\nDESCRIPTION: This Go snippet defines the block.ChainVM interface along with its supporting Getter and Parser interfaces, specifying required methods to support Snowman-based consensus within Avalanche. It details how a VM must expose functions to build blocks, set block preference, provide access to the last accepted block, and offer mechanisms to load/parse blocks by IDs or byte streams. Implementing this interface (and its sub-interfaces) is mandatory for VM compatibility with linear blockchains in Avalanche. Dependencies: common, snowman, ids packages. Inputs/outputs follow the method contracts as specified in the comments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ChainVM defines the required functionality of a Snowman VM.\n//\n// A Snowman VM is responsible for defining the representation of the state,\n// the representation of operations in that state, the application of operations\n// on that state, and the creation of the operations. Consensus will decide on\n// if the operation is executed and the order operations are executed.\n//\n// For example, suppose we have a VM that tracks an increasing number that\n// is agreed upon by the network.\n// The state is a single number.\n// The operation is setting the number to a new, larger value.\n// Applying the operation will save to the database the new value.\n// The VM can attempt to issue a new number, of larger value, at any time.\n// Consensus will ensure the network agrees on the number at every block height.\ntype ChainVM interface {\n\tcommon.VM\n\tGetter\n\tParser\n\n\t// Attempt to create a new block from data contained in the VM.\n\t//\n\t// If the VM doesn't want to issue a new block, an error should be\n\t// returned.\n\tBuildBlock() (snowman.Block, error)\n\n\t// Notify the VM of the currently preferred block.\n\t//\n\t// This should always be a block that has no children known to consensus.\n\tSetPreference(ids.ID) error\n\n\t// LastAccepted returns the ID of the last accepted block.\n\t//\n\t// If no blocks have been accepted by consensus yet, it is assumed there is\n\t// a definitionally accepted block, the Genesis block, that will be\n\t// returned.\n\tLastAccepted() (ids.ID, error)\n}\n\n// Getter defines the functionality for fetching a block by its ID.\ntype Getter interface {\n\t// Attempt to load a block.\n\t//\n\t// If the block does not exist, an error should be returned.\n\t//\n\tGetBlock(ids.ID) (snowman.Block, error)\n}\n\n// Parser defines the functionality for fetching a block by its bytes.\ntype Parser interface {\n\t// Attempt to create a block from a stream of bytes.\n\t//\n\t// The block should be represented by the full byte array, without extra\n\t// bytes.\n\tParseBlock([]byte) (snowman.Block, error)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ITeleporterReceiver Interface in Solidity\nDESCRIPTION: Definition of the ITeleporterReceiver interface that must be implemented by cross-chain applications to receive messages from Teleporter. Contains a single method receiveTeleporterMessage that handles incoming cross-chain messages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/05-receiving-a-message.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.18;\n\n/**\n * @dev Interface that cross-chain applications must implement to receive messages from Teleporter.\n */\ninterface ITeleporterReceiver {\n    /**\n     * @dev Called by TeleporterMessenger on the receiving chain.\n     *\n     * @param originChainID is provided by the TeleporterMessenger contract.\n     * @param originSenderAddress is provided by the TeleporterMessenger contract.\n     * @param message is the TeleporterMessage payload set by the sender.\n     */\n    function receiveTeleporterMessage(\n        bytes32 originChainID,\n        address originSenderAddress,\n        bytes calldata message\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModuloPlus Function in Go\nDESCRIPTION: This snippet shows the implementation of the moduloPlus function, which performs modulo operation and returns both the quotient and remainder. It includes input unpacking, gas deduction, and output packing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc moduloPlus(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, ModuloPlusGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tinputStruct, err := UnpackModuloPlusInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\tvar output ModuloPlusOutput\n\toutput.Multiple, output.Remainder = big.NewInt(0).DivMod(inputStruct.Dividend, inputStruct.Divisor, output.Remainder)\n\n\tpackedOutput, err := PackModuloPlusOutput(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the `onlyOwner` Modifier to Secure Contract Functions in Solidity\nDESCRIPTION: This snippet presents the complete `Safe` contract, integrating the `owner` state variable, the constructor to set the owner, the `onlyOwner` modifier definition, and its application to the `deposit` and `withdraw` functions. By adding `onlyOwner()` after the `public` keyword for these functions, it ensures that only the address stored in the `owner` variable can successfully call them.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/05-modifiers.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Safe {\n  \n  address owner;\n  \n  modifier onlyOwner() {\n  require(msg.sender == owner, \"You are not the owner\"!);\n  _;\n  }\n  \n  constructor() {\n    owner = msg.sender; \n  }\n  \n  function deposit() public onlyOwner() {}\n  \n  function withdraw() public onlyOwner() {}\n​\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC EVM Endpoint Path Format for Avalanche L1\nDESCRIPTION: Defines the generic endpoint path format for accessing the JSON-RPC interface of an EVM (Ethereum Virtual Machine) running on a specific Avalanche L1. The `[blockchainID]` placeholder must be replaced with the actual ID of the target blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/ext/bc/[blockchainID]/rpc\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useChains Hook in TSX\nDESCRIPTION: Demonstrates importing the `useChains` hook from `@avalabs/builderkit` and using its destructured functions (`getChains`, `getChain`, `getProvider`, `getBlock`) to retrieve information about configured blockchain networks, specific chains, their providers, and individual blocks. Requires the `@avalabs/builderkit` package.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/chains.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useChains } from '@avalabs/builderkit';\n\nconst { \n  getChains,\n  getChain,\n  getProvider,\n  getBlock\n} = useChains();\n\n// Get all configured chains\nconst chains = getChains();\n\n// Get specific chain info\nconst chain = getChain(43114); // Avalanche C-Chain\n\n// Get provider for a chain\nconst provider = getProvider(43114);\n\n// Get block information\nconst block = await getBlock(43114, 12345);\n```\n```\n\n----------------------------------------\n\nTITLE: TokenList Component with Token Balances - React - TypeScript\nDESCRIPTION: Demonstrates rendering TokenList with the showBalances prop enabled, allowing token balances to be displayed for each token. Requires React, a list of tokens with optional balance property, and a token selection handler. This setup is useful for users needing to see their token holdings as part of the selection process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-list.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TokenList \n  chain_id={43114}\n  list={tokens}\n  showBalances={true}\n  onClick={handleTokenSelect}\n/>\n```\n\n----------------------------------------\n\nTITLE: Integrating useUniswapV2 Hook in a React Swap Interface in TypeScript\nDESCRIPTION: This snippet showcases a React functional component (`SwapInterface`) that integrates the `useUniswapV2` hook to create a user interface for swapping tokens. It uses `useState` to manage input amounts and `useEffect` to fetch swap quotes (`getQuote`) dynamically. The `handleSwap` function calculates the minimum output amount considering slippage (`getMinAmountOut`) and prepares the transaction data (`getSwapTransaction`) to be potentially used with a `TransactionButton` component. Assumes `tokenA`, `tokenB`, `account`, `BigNumber`, and `TransactionButton` are defined or imported.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/uniswap.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction SwapInterface() {\n  const { getQuote, getMinAmountOut, getSwapTransaction } = useUniswapV2();\n  const [amountIn, setAmountIn] = useState(\"\");\n  const [amountOut, setAmountOut] = useState(\"\");\n  \n  // Calculate output amount when input changes\n  useEffect(() => {\n    const calculateOutput = async () => {\n      if (!amountIn) return;\n      \n      const output = await getQuote(\n        43114,\n        tokenA,\n        tokenB,\n        new BigNumber(amountIn)\n      );\n      setAmountOut(output.toString());\n    };\n    \n    calculateOutput();\n  }, [amountIn]);\n  \n  // Execute swap\n  const handleSwap = async () => {\n    const minOut = getMinAmountOut(new BigNumber(amountOut), 0.5); // 0.5% slippage\n    \n    const data = await getSwapTransaction(\n      43114,\n      tokenA,\n      tokenB,\n      new BigNumber(amountIn),\n      minOut,\n      account\n    );\n    \n    return (\n      <TransactionButton\n        chain_id={43114}\n        title=\"Swap Tokens\"\n        description=\"Swapping tokens on Trader Joe\"\n        data={data}\n      />\n    );\n  };\n  \n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={amountIn}\n        onChange={(e) => setAmountIn(e.target.value)}\n        placeholder=\"Amount in\"\n      />\n      <div>Output: {amountOut}</div>\n      {handleSwap()}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Hardware Specification for Avalanche Validator Node\nDESCRIPTION: This snippet outlines the recommended hardware specification for running an AvalancheGo validator node on the Primary Network. It includes CPU, RAM, storage, OS, and network requirements.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-production-infra.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- CPU: Equivalent of 8 AWS vCPU\n- RAM: 16 GiB\n- Storage: 1 TiB with at least 3000 IOPS\n- OS: Ubuntu 20.04\n- Network: Reliable IPv4 or IPv6 network connection, with an open public port\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Teleporter Messaging Contract in Solidity\nDESCRIPTION: A smart contract that implements ITeleporterReceiver interface to enable both sending and receiving of cross-chain messages. It includes functionality to send messages to a destination address on another chain and receive messages back through the Teleporter protocol.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/02-sender-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"@teleporter/ITeleporterReceiver.sol\";\n\ncontract SenderOnCChain is ITeleporterReceiver {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    string public roundtripMessage;\n\n    /**\n     * @dev Sends a message to another chain.\n     */\n    function sendMessage(address destinationAddress) external {\n        messenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                // Replace with blockchainID of your Avalanche L1 (see instructions in Readme)\n                destinationBlockchainID: 0xb72b346fcc8c1ebb30087e2d2841eac9302dde8fc5969dcc84fad6db5ebd261d,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: abi.encode(\"Hello\")\n            })\n        );\n    }\n\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\n        // Only the Interchain Messaging receiver can deliver a message.\n        require(msg.sender == address(messenger), \"SenderOnCChain: unauthorized TeleporterMessenger\");\n\n        // Store the message.\n        roundtripMessage = abi.decode(message, (string));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Factorial with For-Loop in Solidity - Solidity\nDESCRIPTION: Implements a factorial function using a for-loop in Solidity. The function accepts a uint256 integer parameter and returns its factorial. Edge cases (0 and 1) return 1 directly; for greater numbers, the result is calculated iteratively. Requires only Solidity standard types, with 'num' as input and its factorial as output. Constraints: valid for non-negative integers, may overflow for large inputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/02-control-flow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction factorial(uint256 num) public pure returns(uint256) {\\n    if (num == 0) {\\n      return 1;\\n    } else if (num == 1) {\\n      return 1;\\n    }\\n    uint256 result = num;\\n    for (uint i = 2; i < num; i++) {\\n      result = result * i;\\n    }\\n    return result;\\n}\n```\n\n----------------------------------------\n\nTITLE: ICM Command Suite Usage\nDESCRIPTION: Command suite for interacting with ICM messenger contracts, including deployment and message sending capabilities.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\navalanche icm [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions to a Smart Contract with cast send (Shell)\nDESCRIPTION: This shell command uses cast send to execute a state-changing transaction, specifically calling the setNum(uint) function of a deployed NumberStorage contract at address 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25. It requires the RPC endpoint, a private key in $PK for signing, the contract address, function signature, and argument (42). Key constraints include the necessity for the private key to control an account with sufficient funds and that the ABI matches the target contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25 \"setNum(uint)\" 42\n```\n\n----------------------------------------\n\nTITLE: Implementing the Configure Function for Precompiled Contracts in Go\nDESCRIPTION: The Configure function is called once per precompile contract activation and gives access to the contract's state. It allows initialization of the contract's state using the provided config and stateDB parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/09-define-default-values-via-go.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Configure configures [state] with the given [cfg] precompileconfig.\n// This function is called by the EVM once per precompile contract activation.\n// You can use this function to set up your precompile contract's initial state,\n// by using the [cfg] config and [state] stateDB.\nfunc (*configurator) Configure(chainConfig precompileconfig.ChainConfig, cfg precompileconfig.Config, state contract.StateDB, blockContext contract.ConfigurationBlockContext) error {\n    config, ok := cfg.(*Config)\n    if !ok {\n        return fmt.Errorf(\"incorrect config %T: %v\", config, config)\n    }\n    // CUSTOM CODE STARTS HERE\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing incrementCounter Function in Go\nDESCRIPTION: Implements an incrementCounter function that retrieves the current counter value, increments it by one, and stores the new value. The implementation includes checks for readOnly mode and proper gas management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/05-implement-getcounter-increment.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc incrementCounter(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, IncrementCounterGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tif readOnly {\n\t\treturn nil, remainingGas, vmerrs.ErrWriteProtection\n\t}\n\t// no input provided for this function\n\n\t// CUSTOM CODE STARTS HERE\n\t// Get the current state\n\tcurrentState := accessibleState.GetStateDB()\n\n\t// Get the value of the counter\n\tvalue := GetCounterValue(currentState)\n\n\t// Set the value\n\tStoreCounterValue(currentState, value.Add(value, big.NewInt(1)))\n\n\t// this function does not return an output, leave this one as is\n\tpackedOutput := []byte{}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Provider with Custom L1 Chain\nDESCRIPTION: This snippet demonstrates how to add a custom L1 chain to the BuilderKit Web3Provider component. It imports the custom chain definition and configures the provider to support both the standard Avalanche chain and the custom L1 chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/chains.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Web3Provider } from '@avalabs/builderkit';\nimport { avalanche } from '@wagmi/core/chains';\nimport { myL1 } from './chains/definitions/my-l1';\n\nfunction App() {\n  return (\n    <Web3Provider\n      chains={[avalanche, myL1]}\n      defaultChain={avalanche}\n    >\n      <YourApp />\n    </Web3Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Subnet Teleporter Messages - Bash\nDESCRIPTION: These bash snippets demonstrate using the Avalanche CLI to send messages across subnets via Teleporter, testing and verifying the deployment and connectivity between source and destination subnets on a devnet. Prerequisites include a running Avalanche cluster with properly deployed Teleporter contracts and relayers. Key parameters include the source chain, destination chain, message string (e.g., 'Hello World'), and the cluster name. Output confirms the message relay process and indicates successful delivery, limited by the operational status of relayers and contract deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter msg C-Chain chain1 \"Hello World\" --cluster <devnetName>\n\nDelivering message \"this is a message\" to source subnet \"C-Chain\" (2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6)\nWaiting for message to be received at destination subnet subnet \"chain1\" (fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p)\nMessage successfully Teleported!\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter msg chain2 chain1 \"Hello World\" --cluster <devnetName>\n\nDelivering message \"this is a message\" to source subnet \"chain2\" (29WP91AG7MqPUFEW2YwtKnsnzVrRsqcWUpoaoSV1Q9DboXGf4q)\nWaiting for message to be received at destination subnet subnet \"chain1\" (fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p)\nMessage successfully Teleported!\n```\n\n----------------------------------------\n\nTITLE: Implementing a Precompile Function Using Unpacked Inputs\nDESCRIPTION: Example implementation of the add function in the Calculator precompile that uses UnpackAddInput to extract parameters, performs the addition, and then packs the output before returning it.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/03-unpacking-and-packing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc add(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, AddGasCost); err != nil {\n        return nil, 0, err\n    }\n    // attempts to unpack [input] into the arguments to the AddInput.\n    // Assumes that [input] does not include selector\n    // You can use unpacked [inputStruct] variable in your code\n    inputStruct, err := UnpackAddInput(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // CUSTOM CODE STARTS HERE\n    var output *big.Int // CUSTOM CODE FOR AN OUTPUT\n\n    output = big.NewInt(0).Add(inputStruct.Value1, inputStruct.Value2)\n\n    packedOutput, err := PackAddOutput(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Solidity Smart Contract for Avalanche\nDESCRIPTION: A basic Solidity smart contract that stores and updates a number. It includes a public state variable 'myNumber' and a function 'setNumber' that allows updating the stored number.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/deploy-a-dapp-on-c-chain-with-foundry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 public myNumber;\n\n    function setNumber(uint256 _num) public {\n        myNumber = _num;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Chain Calculator Sender Contract in Solidity\nDESCRIPTION: A Solidity contract that implements the sender part of a cross-chain calculator. It uses the Teleporter protocol to send two numbers from C-Chain to Avalanche L1 for calculation. The contract includes functionality to encode parameters and send cross-chain messages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/03-create-simple-calculator-sender.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\n\ncontract SimpleCalculatorSenderOnCChain {\n    ITeleporterMessenger public immutable teleporterMessenger =\n        ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    function sendAddMessage(address destinationAddress, uint256 num1, uint256 num2) external {\n        teleporterMessenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                destinationBlockchainID: 0xd7ed7b978d4d6c478123bf9b326d47e69f959206d34e42ea4de2d1d2acbc93ea,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: encodeAddData(num1, num2)\n            })\n        );\n    }\n\n    function encodeAddData(uint256 a, uint256 b) public pure returns (bytes memory) {\n        bytes memory paramsData = abi.encode(a, b);\n        return paramsData;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Allowance Before ERC20 Transfer in Solidity\nDESCRIPTION: Enhances token transfer safety by checking allocated allowance before calling transferFrom on an ERC-20 contract. The doTransferFrom function checks that the contract's allowance is greater than or equal to amt for the specified sender. If not enough tokens are allowed, it returns false, saving computation and gas. Suitable for applications requiring safe conditional transfers, the snippet relies on correct implementation of the IERC20 interface and setting of all state variables.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/03-interacting-with-erc20-tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Test {\\n    address token;\\n    address from;\\n    address to;\\n    uint amt;\\n  \\n    function getName() public view returns(string memory) {\\n      return IERC20(token).name();\\n    }\\n  \\n    function doTransferFrom() public returns(bool) {\\n        if (IERC20(token).allowance(from, address(this) < amt) {\\n            return false;\\n        }\\n        return IERC20(token).transferFrom(from, to, amt);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Hello World Precompile Integration with Precompile-EVM in TypeScript\nDESCRIPTION: This TypeScript test script targets the Hello World precompile contract in the context of Precompile-EVM, employing Hardhat, Chai, ethers, and the Subnet-EVM contracts test library for its functionality. It ensures admin setup, contract initialization, and validates state and event emission for greeting updates. The code expects external dependencies such as Hardhat and @avalabs/subnet-evm-contracts; it also uses statically defined addresses and tests for both typical and edge-case greeting update scenarios, verifying emitted events for contract changes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// (c) 2019-2022, Ava Labs, Inc. All rights reserved.\\n// See the file LICENSE for licensing terms.\\n\\nimport { expect } from \\\"chai\\\";\\nimport { SignerWithAddress } from \\\"@nomiclabs/hardhat-ethers/signers\\\";\\nimport { Contract } from \\\"ethers\\\";\\nimport { ethers } from \\\"hardhat\\\";\\nimport { test } from \\\"@avalabs/subnet-evm-contracts\\\";\\n\\n// make sure this is always an admin for hello world precompile\\nconst ADMIN_ADDRESS = \\\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\\\";\\nconst HELLO_WORLD_ADDRESS = \\\"0x0300000000000000000000000000000000000000\\\";\\n\\ndescribe(\\\"ExampleHelloWorldTest\\\", function () {\\n  this.timeout(\\\"30s\\\");\\n\\n  beforeEach(\\\"Setup DS-Test contract\\\", async function () {\\n    const signer = await ethers.getSigner(ADMIN_ADDRESS);\\n    const helloWorldPromise = ethers.getContractAt(\\n      \\\"IHelloWorld\\\",\\n      HELLO_WORLD_ADDRESS,\\n      signer\\n    );\\n\\n    return ethers\\n      .getContractFactory(\\\"ExampleHelloWorldTest\\\", { signer })\\n      .then((factory) => factory.deploy())\\n      .then((contract) => {\\n        this.testContract = contract;\\n        return contract.deployed().then(() => contract);\\n      })\\n      .then(() => Promise.all([helloWorldPromise]))\\n      .then(([helloWorld]) => helloWorld.setAdmin(this.testContract.address))\\n      .then((tx) => tx.wait());\\n  });\\n\\n  test(\\\"should gets default hello world\\\", [\\\"step_getDefaultHelloWorld\\\"]);\\n\\n  test(\\n    \\\"should not set greeting before enabled\\\",\\n    \\\"step_doesNotSetGreetingBeforeEnabled\\\"\\n  );\\n\\n  test(\\n    \\\"should set and get greeting with enabled account\\\",\\n    \\\"step_setAndGetGreeting\\\"\\n  );\\n});\\n\\ndescribe(\\\"IHelloWorld events\\\", function () {\\n  let owner: SignerWithAddress;\\n  let contract: Contract;\\n  let defaultGreeting = \\\"Hello, World!\\\";\\n  before(async function () {\\n    owner = await ethers.getSigner(ADMIN_ADDRESS);\\n    contract = await ethers.getContractAt(\\n      \\\"IHelloWorld\\\",\\n      HELLO_WORLD_ADDRESS,\\n      owner\\n    );\\n\\n    // reset greeting\\n    let tx = await contract.setGreeting(defaultGreeting);\\n    await tx.wait();\\n  });\\n\\n  it(\\\"should emit GreetingChanged event\\\", async function () {\\n    let newGreeting = \\\"helloprecompile\\\";\\n    await expect(contract.setGreeting(newGreeting))\\n      .to.emit(contract, \\\"GreetingChanged\\\")\\n      .withArgs(\\n        owner.address,\\n        // old greeting\\n        defaultGreeting,\\n        // new greeting\\n        newGreeting\\n      );\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TransactionManager for Multi-step Protocol Interaction in TSX\nDESCRIPTION: Illustrates using the TransactionManager component for a more complex, three-step interaction with a protocol, such as approving two different tokens (USDC and AVAX) and then adding liquidity. Each step is defined in the `transactions` array with specific titles, descriptions, and data. Requires `approveUsdcData`, `approveAvaxData`, and `addLiquidityData` variables.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transaction/transaction-manager.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<TransactionManager\n  chain_id={43114}\n  transactions={[\n    {\n      title: \"Step 1: Approve USDC\",\n      description: \"Approve USDC spending\",\n      data: approveUsdcData\n    },\n    {\n      title: \"Step 2: Approve AVAX\",\n      description: \"Approve AVAX spending\",\n      data: approveAvaxData\n    },\n    {\n      title: \"Step 3: Add Liquidity\",\n      description: \"Add liquidity to pool\",\n      data: addLiquidityData\n    }\n  ]}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Example Implementation: Echo L1 Chain Definition\nDESCRIPTION: A complete example of defining the Echo L1 chain with viem. It includes all required properties and optional metadata such as the chain's icon URL and ICM registry contract address for a fully configured testnet chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/chains.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineChain } from \"viem\";\n\nexport const echo = defineChain({\n    id: 173750,\n    name: 'Echo L1',\n    network: 'echo',\n    nativeCurrency: {\n        decimals: 18,\n        name: 'Ech',\n        symbol: 'ECH',\n    },\n    rpcUrls: {\n        default: {\n            http: ['https://subnets.avax.network/echo/testnet/rpc']\n        },\n    },\n    blockExplorers: {\n        default: { \n            name: 'Explorer', \n            url: 'https://subnets-test.avax.network/echo' \n        },\n    },\n    iconUrl: \"/chains/logo/173750.png\",\n    icm_registry: \"0xF86Cb19Ad8405AEFa7d09C778215D2Cb6eBfB228\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Abstract Contract in Solidity\nDESCRIPTION: This snippet defines a simple abstract contract named `BaseContract` in Solidity. It contains one function signature `getValue()` which is declared `public view virtual` but lacks an implementation (body). Because it has an unimplemented function, `BaseContract` cannot be deployed directly and must be inherited by another contract that provides the implementation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/04-abstract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Abstract contract defining a base structure\nabstract contract BaseContract {\n    function getValue() public view virtual returns (uint256);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITeleporterMessenger Interface in Solidity\nDESCRIPTION: This code snippet defines the ITeleporterMessenger interface, which includes structures for message input and fee information, as well as the sendCrossChainMessage function for initiating cross-chain communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/03-sending-a-message.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.18;\n\nstruct TeleporterMessageInput {\n    bytes32 destinationBlockchainID;\n    address destinationAddress;\n    TeleporterFeeInfo feeInfo;\n    uint256 requiredGasLimit;\n    address[] allowedRelayerAddresses;\n    bytes message;\n}\n\nstruct TeleporterFeeInfo {\n    address feeTokenAddress;\n    uint256 amount;\n}\n\n/**\n * @dev Interface that describes functionalities for a cross chain messenger.\n */\ninterface ITeleporterMessenger {\n    /**\n     * @dev Emitted when sending a interchain message cross chain.\n     */\n \tevent SendCrossChainMessage(\n        uint256 indexed messageID,\n        bytes32 indexed destinationBlockchainID,\n        TeleporterMessage message,\n        TeleporterFeeInfo feeInfo\n    );\n\n    /**\n     * @dev Called by transactions to initiate the sending of a cross L1 message.\n     */\n\tfunction sendCrossChainMessage(TeleporterMessageInput calldata messageInput)\n        external\n        returns (uint256);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor Inheritance in Solidity\nDESCRIPTION: This example showcases how to inherit and execute parent contract constructors in Solidity using the 'constructor() <parent-name>()' syntax. Contract A initializes its state variable, and contract B calls A's constructor during its own initialization, then sets its own variable. Requires Solidity to deploy. Demonstrates correct practice for initializing inherited contracts and chaining constructors for composed state management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/02-inheritance.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n  uint numl;\n  constructor() {\n    num1 = 5;\n  }\n}\n​\ncontract B is A {\n  uint num2;\n  constructor() A() {\n    num2 = 7;\n  }\n}   \n```\n\n----------------------------------------\n\nTITLE: Hardhat Configuration for Avalanche Networks\nDESCRIPTION: TypeScript configuration file for Hardhat defining networks, compilers, and forking settings for Avalanche deployment\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { task } from \"hardhat/config\";\nimport { SignerWithAddress } from \"@nomiclabs/hardhat-ethers/signers\";\nimport { BigNumber } from \"ethers\";\nimport \"@nomiclabs/hardhat-waffle\";\n\nconst FORK_FUJI = false;\nconst FORK_MAINNET = false;\nconst forkingData = FORK_FUJI\n  ? {\n      url: \"https://api.avax-test.network/ext/bc/C/rpc\",\n    }\n  : FORK_MAINNET\n  ? {\n      url: \"https://api.avax.network/ext/bc/C/rpc\",\n    }\n  : undefined;\n\nexport default {\n  solidity: {\n    compilers: [\n      {\n        version: \"0.5.16\",\n      },\n      {\n        version: \"0.6.2\",\n      },\n      {\n        version: \"0.6.4\",\n      },\n      {\n        version: \"0.7.0\",\n      },\n      {\n        version: \"0.8.0\",\n      },\n    ],\n  },\n  networks: {\n    hardhat: {\n      gasPrice: 225000000000,\n      chainId: !forkingData ? 43112 : undefined,\n      forking: forkingData,\n    },\n    local: {\n      url: \"http://localhost:9650/ext/bc/C/rpc\",\n      gasPrice: 225000000000,\n      chainId: 43112,\n      accounts: [\n        \"0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027\",\n        \"0x7b4198529994b0dc604278c99d153cfd069d594753d471171a1d102a10438e07\",\n        \"0x15614556be13730e9e8d6eacc1603143e7b96987429df8726384c2ec4502ef6e\",\n        \"0x31b571bf6894a248831ff937bb49f7754509fe93bbd2517c9c73c4144c0e97dc\",\n        \"0x6934bef917e01692b789da754a0eae31a8536eb465e7bff752ea291dad88c675\",\n        \"0xe700bdbdbc279b808b1ec45f8c2370e4616d3a02c336e68d85d4668e08f53cff\",\n        \"0xbbc2865b76ba28016bc2255c7504d000e046ae01934b04c694592a6276988630\",\n        \"0xcdbfd34f687ced8c6968854f8a99ae47712c4f4183b78dcc4a903d1bfe8cbf60\",\n        \"0x86f78c5416151fe3546dece84fda4b4b1e36089f2dbc48496faf3a950f16157c\",\n        \"0x750839e9dbbd2a0910efe40f50b2f3b2f2f59f5580bb4b83bd8c1201cf9a010a\",\n      ],\n    },\n    fuji: {\n      url: \"https://api.avax-test.network/ext/bc/C/rpc\",\n      gasPrice: 225000000000,\n      chainId: 43113,\n      accounts: [],\n    },\n    mainnet: {\n      url: \"https://api.avax.network/ext/bc/C/rpc\",\n      gasPrice: 225000000000,\n      chainId: 43114,\n      accounts: [],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating and Indexing X-Chain Blocks via AvalancheGo Indexer in Go\nDESCRIPTION: This Go code snippet demonstrates how to continuously poll the /ext/index/X/block endpoint to retrieve and parse newly accepted X-Chain blocks following the Cortina upgrade. It utilizes the AvalancheGo Go SDK libraries for interacting with the indexer and parsing both proposerVM and AVM blocks. Prerequisites include the AvalancheGo Go SDK dependencies (indexer, proposervm/block, wallet/chain/x, wallet/subnet/primary), active network connectivity to a node running the Index API, and Go 1.18 or higher. The main parameters are the endpoint URI, the index for the next block, and context for cancellation. The code logs block IDs and transaction counts and iterates through accepted transactions, handling errors and re-polling as needed. Output consists of log statements for each block and transaction processed. This approach assumes continuous operation and proper network permissions to the API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/x-chain-migration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport (\\n\\t\\\"context\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"log\\\"\\n\\t\\\"time\\\"\\n\\n\\t\\\"github.com/ava-labs/avalanchego/indexer\\\"\\n\\t\\\"github.com/ava-labs/avalanchego/vms/proposervm/block\\\"\\n\\t\\\"github.com/ava-labs/avalanchego/wallet/chain/x\\\"\\n\\t\\\"github.com/ava-labs/avalanchego/wallet/subnet/primary\\\"\\n)\\n\\nfunc main() {\\n\\tvar (\\n\\t\\turi       = fmt.Sprintf(\\\"%s/ext/index/X/block\\\", primary.LocalAPIURI)\\n\\t\\tclient    = indexer.NewClient(uri)\\n\\t\\tctx       = context.Background()\\n\\t\\tnextIndex uint64\\n\\t)\\n\\tfor {\\n\\t\\tlog.Printf(\\\"polling for next accepted block\\\")\\n\\t\\tcontainer, err := client.GetContainerByIndex(ctx, nextIndex)\\n\\t\\tif err != nil {\\n\\t\\t\\ttime.Sleep(time.Second)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tproposerVMBlock, err := block.Parse(container.Bytes)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Fatalf(\\\"failed to parse proposervm block: %s\\\\n\\\", err)\\n\\t\\t}\\n\\n\\t\\tavmBlockBytes := proposerVMBlock.Block()\\n\\t\\tavmBlock, err := x.Parser.ParseBlock(avmBlockBytes)\\n\\t\\tif err != nil {\\n\\t\\t\\tlog.Fatalf(\\\"failed to parse avm block: %s\\\\n\\\", err)\\n\\t\\t}\\n\\n\\t\\tacceptedTxs := avmBlock.Txs()\\n\\t\\tlog.Printf(\\\"accepted block %s with %d transactions\\\", avmBlock.ID(), len(acceptedTxs))\\n\\n\\t\\tfor _, tx := range acceptedTxs {\\n\\t\\t\\tlog.Printf(\\\"accepted transaction %s\\\", tx.ID())\\n\\t\\t}\\n\\n\\t\\tnextIndex++\\n\\t}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Initiating Interactive Devnet Setup with Avalanche-CLI in Bash\nDESCRIPTION: This command starts the interactive wizard (`wiz`) for setting up an Avalanche Developer Network (Devnet) using Avalanche-CLI. It prompts the user for configuration details such as cluster name, cloud provider, node specifications, and the Avalanche L1 details to deploy, guiding them through the creation process step-by-step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/setup-devnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Defining Teleporter Message Structs in Solidity\nDESCRIPTION: Defines the core structs used for cross-chain messaging in Teleporter, including TeleporterMessageInput and TeleporterFeeInfo. The structs specify the destination chain, address, fee information, gas limits, allowed relayers, and the message payload. The fee information includes the ERC20 contract address and amount in wei for incentivizing relayers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/04-setting-incentives.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity 0.8.18;\n\nstruct TeleporterMessageInput {\n    bytes32 destinationBlockchainID;\n    address destinationAddress;\n    TeleporterFeeInfo feeInfo;\n    uint256 requiredGasLimit; \n    address[] allowedRelayerAddresses;\n    bytes message;\n}\n\nstruct TeleporterFeeInfo {\n    address contractAddress;\n    uint256 amount;\n}\n\ninterface ITeleporterMessenger {\n    function sendCrossChainMessage(TeleporterMessageInput calldata messageInput)\n        external\n    returns (bytes32);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StatefulPrecompiledContract Interface in Go\nDESCRIPTION: Defines the core interface for executing precompiled contracts with state access capabilities.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/09-stateful-precompiles/00-intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype StatefulPrecompiledContract interface {\n    Run(accessibleState AccessibleState, \n        caller common.Address, \n        addr common.Address, \n        input []byte, \n        suppliedGas uint64, \n        readOnly bool) \n        (ret []byte, remainingGas uint64, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a View Function in a Smart Contract using Cast Call (Bash)\nDESCRIPTION: This bash command uses `cast call` to read data from the deployed `NumberStorage` contract. It specifies the RPC URL (`local-c`), the contract address, and the function signature (`\"getNum()(uint)\"`) for the view function `getNum`. No private key is needed as this is a read-only operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25 \"getNum()(uint)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Base Token Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the mandatory structure for any token used in BuilderKit flows. It specifies key fields such as contract address, name, symbol, decimals, and the chain ID where the token resides. Required dependencies include TypeScript and project types, and each property must be populated as per specification for integration into BuilderKit. Inputs are expected as objects implementing this interface, with no default values assumed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BaseToken {\n  // Contract address of the token, use \"native\" for native chain token\n  address: string;      \n  \n  // Human-readable name of the token\n  name: string;         \n  \n  // Token symbol/ticker\n  symbol: string;       \n  \n  // Number of decimal places the token uses\n  decimals: number;     \n  \n  // ID of the chain where this token exists\n  chain_id: number;     \n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Storage Smart Contract in Solidity\nDESCRIPTION: This Solidity snippet defines a simple smart contract named NumberStorage, which stores and retrieves a uint256 number. It includes two external functions: getNum (read-only, returns current value) and setNum (writes a new value). The contract requires Solidity 0.8.0 or higher and has no dependencies, making it suitable for basic storage tests, as well as for illustrating deployment and interaction examples in the rest of the file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract NumberStorage {\\n \\n    uint256 num;\\n  \\n    function getNum() public view returns(uint) {\\n        return num; \\n    }\\n  \\n    function setNum(uint _num) public {\\n        num = _num;\\n    }\\n  \\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of TransactionManager in TSX\nDESCRIPTION: Demonstrates how to import the TransactionManager component from '@avalabs/builderkit' and use it with basic configuration. It sets up a two-step transaction sequence (approve and transfer) for a specific chain ID (43114) and includes callback functions `onTransactionSent` and `onTransactionConfirmed` to log completion events. Requires `approveData` and `transferData` variables containing transaction details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transaction/transaction-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { TransactionManager } from '@avalabs/builderkit';\n\n// Basic usage\n<TransactionManager\n  chain_id={43114}\n  transactions={[\n    {\n      title: \"Approve Token\",\n      description: \"Approving token for transfer\",\n      data: approveData\n    },\n    {\n      title: \"Transfer Token\",\n      description: \"Transferring tokens to recipient\",\n      data: transferData\n    }\n  ]}\n  onTransactionSent={(timestamp) => {\n    console.log('Step completed at:', timestamp);\n  }}\n  onTransactionConfirmed={(receipt) => {\n    console.log('All transactions completed:', receipt);\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Interacting with Deployer Allow List using Foundry Cast\nDESCRIPTION: Example command showing how to add an address to the Deployer Allow List using the Foundry Cast tool. This demonstrates interaction with the IAllowList interface at the precompile address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast send 0x0200000000000000000000000000000000000000 setEnabled(address addr) <ADDRESS_TO_ENABLE> --rpc-url $MY_L1_RPC --private-key $ADMIN_PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Header Syntax in Solidity\nDESCRIPTION: This snippet illustrates the required syntax structure for defining a function header in Solidity. It includes the `function` keyword, a placeholder for the function name (`<function_name>`), parentheses for arguments (`<args>`), and a placeholder for the visibility modifier (`<visibility>`). The actual implementation would replace these placeholders with specific names, types, and visibility keywords (public, private, internal, or external).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/03-functions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction <function_name>(<args>) <visibility>\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Chain Transaction Pool in YAML\nDESCRIPTION: YAML configuration for the C-Chain transaction pool, including settings for local transactions, unprotected transactions, gossip behavior, and pool limits. This snippet demonstrates how to tune transaction handling and propagation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/c-chain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlocal-txs-enabled: false\nallow-unprotected-txs: false\nallow-unprotected-tx-hashes: []\npush-gossip-percent-stake: 0.9\npush-gossip-num-validators: 100\npush-gossip-num-peers: 0\npush-regossip-num-validators: 10\npush-regossip-num-peers: 0\npush-gossip-frequency: 100000000\npull-gossip-frequency: 1000000000\ntx-pool-price-limit: 1\ntx-pool-price-bump: 10\ntx-pool-account-slots: 16\ntx-pool-global-slots: 5120\ntx-pool-account-queue: 64\ntx-pool-global-queue: 1024\ntx-pool-lifetime: 600000000000\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapped Token Contract in Solidity\nDESCRIPTION: This Solidity contract implements a basic wrapped token. It includes functions for depositing native tokens to mint wrapped tokens and withdrawing native tokens by burning wrapped tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/05-deploy-and-interact-wrapped-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WrappedToken is ERC20 {\n    address public nativeTokenHolder;\n\n    constructor() ERC20(\"Wrapped Token\", \"WTKN\") {}\n\n    function deposit() external payable {\n        _mint(msg.sender, msg.value);\n        nativeTokenHolder = msg.sender;\n    }\n\n    function withdraw(uint256 amount) external {\n        _burn(msg.sender, amount);\n        payable(msg.sender).transfer(amount);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AmountInput with Maximum Value Validation in React (TypeScript)\nDESCRIPTION: This snippet uses AmountInput as a controlled input, adding maxAmount logic in the onChange handler to restrict input to values not exceeding a maximum. It demonstrates controlled component pattern and real-time validation, requiring React, a state variable 'amount', and a 'maxAmount' value. The input is type text, placeholder guides the user, and value is tied to component state. The onChange enforces the maximum constraint before updating controlled state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/amount-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<AmountInput \n  type=\"text\"\n  placeholder=\"Enter amount\"\n  value={amount}\n  onChange={(value) => {\n    if (parseFloat(value) <= maxAmount) {\n      setAmount(value);\n    }\n  }}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Registration via Contract Call\nDESCRIPTION: This function call initiates the process of registering a new validator on the `ValidatorManager` smart contract. The transaction sender is designated as the validator owner. The function checks churn limitations and constructs a `RegisterL1ValidatorMessage` Warp message to be sent to the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Identifier\nCODE:\n```\ninitializeValidatorRegistration\n```\n\n----------------------------------------\n\nTITLE: Defining the AllowList Interface in Solidity\nDESCRIPTION: The complete Solidity interface definition for IAllowList, which includes methods for setting different permission roles (Admin, Manager, Enabled) and reading the current status of an address. This interface is implemented by multiple precompiles in the Subnet-EVM.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/allowlist.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IAllowList {\n  event RoleSet(uint256 indexed role, address indexed account, address indexed sender, uint256 oldRole);\n\n  // Set [addr] to have the admin role over the precompile contract.\n  function setAdmin(address addr) external;\n\n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have the manager role over the precompile contract.\n  function setManager(address addr) external;\n\n  // Set [addr] to have no role for the precompile contract.\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Cross-Chain VRF Requests in Solidity\nDESCRIPTION: This function receives cross-chain messages for VRF requests, verifies authorization, and initiates a request to Chainlink VRF. It handles message decoding, subscription verification, and keeps track of pending requests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/03-orchestrating-vrf-requests.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction receiveTeleporterMessage(\n    bytes32 originChainID,\n    address originSenderAddress,\n    bytes calldata message\n) external {\n    require(msg.sender == address(teleporterMessenger), \"Caller is not the TeleporterMessenger\");\n    // Verify that the origin sender address is authorized\n    require(authorizedSubscriptions[originSenderAddress].isAuthorized, \"Origin sender is not authorized\");\n    uint256 subscriptionId = authorizedSubscriptions[originSenderAddress].subscriptionId;\n    // Verify that the subscription ID belongs to the correct owner\n    (,,,, address[] memory consumers) = s_vrfCoordinator.getSubscription(subscriptionId);\n    // Check wrapper contract is a consumer of the subscription\n    bool isConsumer = false;\n    for (uint256 i = 0; i < consumers.length; i++) {\n        if (consumers[i] == address(this)) {\n            isConsumer = true;\n            break;\n        }\n    }\n    require(isConsumer, \"Contract is not a consumer of this subscription\");\n    // Decode message to get the VRF parameters\n    CrossChainRequest memory vrfMessage = abi.decode(message, (CrossChainRequest));\n    // Request random words\n    VRFV2PlusClient.RandomWordsRequest memory req = VRFV2PlusClient.RandomWordsRequest({\n        keyHash: vrfMessage.keyHash,\n        subId: subscriptionId,\n        requestConfirmations: vrfMessage.requestConfirmations,\n        callbackGasLimit: vrfMessage.callbackGasLimit,\n        numWords: vrfMessage.numWords,\n        extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: vrfMessage.nativePayment}))\n    });\n    uint256 requestId = s_vrfCoordinator.requestRandomWords(req);\n    pendingRequests[requestId] = CrossChainReceiver({\n        destinationBlockchainId: originChainID,\n        destinationAddress: originSenderAddress\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Genesis Block for Subnet-EVM\nDESCRIPTION: Example of a complete genesis block configuration including chain settings, fee configuration, and initial account allocation. Contains essential parameters like chainId, feeConfig settings, transaction allowlist, and initial state allocations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/01-genesis-block.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 43214,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"subnetEVMTimestamp\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 15000000,\n      \"minBaseFee\": 25000000000,\n      \"targetGas\": 15000000,\n      \"baseFeeChangeDenominator\": 36,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 1000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 200000\n    },\n    \"allowFeeRecipients\": false, \n    \"txAllowListConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\n        \"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"\n      ]\n    }\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x295BE96E64066972000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0xe4e1c0\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Privy Login Flow with Hooks (TypeScript)\nDESCRIPTION: These TypeScript snippets demonstrate the core logic for initiating user login with Privy. The `usePrivy` hook provides `ready` (to check if Privy is initialized) and `authenticated` (to check user login status) states. The `useLogin` hook provides the `login` function, which, when called (e.g., via the button's `onClick` handler), opens the Privy login modal configured in `PrivyProvider`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePrivy, useLogin } from '@privy-io/react-auth';\n\n// Inside your React component\nconst { ready, authenticated } = usePrivy();\nconst { login } = useLogin();\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<button onClick={login}>Login via Privy</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Gas Costs for Precompile Functions in Go\nDESCRIPTION: Constants declaration for setting gas costs of precompile functions including Add, NextTwo, and Repeat operations. Default values are set to 1 but should be modified to prevent DoS attacks while maintaining reasonable costs for users.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/06-setting-base-gasfees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    // Gas costs for each function. These are set to 1 by default.\n    // You should set a gas cost for each function in your contract.\n    // Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.\n    // There are some predefined gas costs in contract/utils.go that you can use.\n    AddGasCost     uint64 = 1 /* SET A GAS COST HERE */\n    NextTwoGasCost uint64 = 1 /* SET A GAS COST HERE */\n    RepeatGasCost  uint64 = 1 /* SET A GAS COST HERE */\n)\n```\n\n----------------------------------------\n\nTITLE: Registry-Based Sender Verification in Solidity\nDESCRIPTION: Enhanced implementation using TeleporterRegistry to verify message senders dynamically. This approach allows for contract version updates without requiring changes to the receiver contract code.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/05-verify-sender-is-icm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nimport \"@teleporter/upgrades/TeleporterRegistry.sol\";\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"@teleporter/ITeleporterReceiver.sol\";\n\ncontract ReceiverOnDispatchWithRegistry is ITeleporterReceiver {\n    TeleporterRegistry public immutable teleporterRegistry =\n        TeleporterRegistry(0x827364Da64e8f8466c23520d81731e94c8DDe510);\n\n    string public lastMessage;\n\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\n        teleporterRegistry.getVersionFromAddress(msg.sender);\n\n        // Store the message.\n        lastMessage = abi.decode(message, (string));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying CrossChainVRFWrapper Contract using Forge\nDESCRIPTION: This command deploys the CrossChainVRFWrapper contract to a supported L1 chain using the forge create command. It requires the RPC URL, private key, and TeleporterMessenger address as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/05-deploy-vrf-wrapper.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> src/CrossChainVRFWrapper.sol:CrossChainVRFWrapper --constructor-args <TELEPORTER_MESSENGER_ADDRESS> --broadcast\n```\n\n----------------------------------------\n\nTITLE: Using the useTokens Hook for ERC20 Operations in TypeScript\nDESCRIPTION: Demonstrates importing the `useTokens` hook from `@avalabs/builderkit` and utilizing its functions (`getCustomToken`, `getBalance`, `getAllowance`, `approve`) to interact with ERC20 tokens. It shows how to fetch token metadata, check balances/allowances for specific addresses, and generate the data needed for an approval transaction. Dependencies include `@avalabs/builderkit` and potentially `BigNumber`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { useTokens } from '@avalabs/builderkit';\n\nconst { \n  getCustomToken,\n  getBalance,\n  getAllowance,\n  approve\n} = useTokens();\n\n// Get token information\nconst [name, symbol, decimals] = await getCustomToken(\n  43114,                 // Chain ID\n  \"0x1234...\"           // Token address\n);\n\n// Get token balance\nconst balance = await getBalance(\n  43114,                 // Chain ID\n  \"0x1234...\",          // Token address\n  \"0x5678...\"           // Wallet address\n);\n\n// Check allowance\nconst allowance = await getAllowance(\n  43114,                 // Chain ID\n  \"0x1234...\",          // Token address\n  \"0x5678...\",          // Owner address\n  \"0x9012...\"           // Spender address\n);\n\n// Generate approve transaction\nconst approveData = approve(\n  \"0x1234...\",          // Token address\n  \"0x5678...\",          // Spender address\n  new BigNumber(\"1.0\"),  // Amount\n  18                     // Decimals\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the ConnectButton Component in TSX\nDESCRIPTION: This snippet demonstrates how to import the `ConnectButton` component from the `@avalabs/builderkit` package and integrate it into a React application. It shows both a basic usage example and an example utilizing the `showConnectedWallet` and `checkWrongNetwork` props to display the connected wallet information and validate the network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/control/connect-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { ConnectButton } from '@avalabs/builderkit';\n\n// Basic usage\n<ConnectButton />\n\n// With wallet display\n<ConnectButton \n  showConnectedWallet={true}\n  checkWrongNetwork={true}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying a Smart Contract to Avalanche Fuji C-Chain with Forge\nDESCRIPTION: Command to deploy the MyContract smart contract to Avalanche's Fuji C-Chain testnet using Foundry's forge tool. It requires specifying the RPC URL for Fuji C-Chain and the private key for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/deploy-a-dapp-on-c-chain-with-foundry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nforge create --rpc-url fuji-c --private-key <private-key> src/MyContract.sol:MyContract\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Chain Messages using TeleporterRegistry in Solidity\nDESCRIPTION: This contract demonstrates how to use the TeleporterRegistry to retrieve the latest Teleporter messenger and send a cross-chain message. It imports the necessary interfaces, initializes the registry, and uses it to get the latest messenger before sending a message.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/04-retrieving-icm-from-registry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nimport \"@teleporter/upgrades/TeleporterRegistry.sol\";\nimport \"@teleporter/ITeleporterMessenger.sol\";\n\ncontract SenderOnCChain {\n    TeleporterRegistry public immutable teleporterRegistry = TeleporterRegistry(0x827364Da64e8f8466c23520d81731e94c8DDe510);\n\n    /**\n     * @dev Sends a message to another chain.\n     */\n    function sendMessage(address destinationAddress, string calldata message) external {\n        ITeleporterMessenger messenger = teleporterRegistry.getLatestTeleporter();\n\n        messenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                destinationBlockchainID: 0x92756d698399805f0088fc07fc42af47c67e1d38c576667ac6c7031b8df05293,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: abi.encode(message)\n            })\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Chainlink Price Feeds in Solidity on Avalanche\nDESCRIPTION: This Solidity smart contract demonstrates how to retrieve the latest price data from a Chainlink Data Feed on the Avalanche Primary Network. It imports the `AggregatorV3Interface`, initializes it with the hardcoded address for the AVAX/USD feed, and provides a function `getChainlinkDataFeedLatestAnswer` to return the latest price. Note: This is example code and includes hardcoded values; it is not recommended for production use without modifications and audits.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/chainlink-data-feeds.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED\n * VALUES FOR CLARITY.\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\n\n\ncontract DataConsumerV3 {\n    AggregatorV3Interface internal dataFeed;\n\n    /**\n     * Network: Avalanche Primary Network\n     * Aggregator: AVAX/USD\n     * Address: 0x0A77230d17318075983913bC2145DB16C7366156\n     */\n    constructor() {\n        dataFeed = AggregatorV3Interface(\n            0x0A77230d17318075983913bC2145DB16C7366156\n        );\n    }\n\n    /**\n     * Returns the latest answer.\n     */\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\n        // prettier-ignore\n        (\n            /* uint80 roundID */,\n            int answer,\n            /*uint startedAt*/,\n            /*uint timeStamp*/,\n            /*uint80 answeredInRound*/\n        ) = dataFeed.latestRoundData();\n        return answer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenHome for Cross-Chain Token Transfers in Solidity\nDESCRIPTION: TokenHome is an abstract contract that implements ITokenTransferrer for managing token transfers from the 'home' chain to multiple 'remote' chains. It supports a single token type (ERC20 or native) and handles locking, unlocking, and multi-hop transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/04-token-home.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract TokenHome is ITokenTransferrer {\n    // Implementation details not provided in the given text\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-256 Hash Precompile in Go\nDESCRIPTION: This snippet demonstrates a SHA-256 hash implementation as a precompile. It shows how to deduct gas, unpack input arguments, compute the SHA-256 hash, and properly return the result with remaining gas.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"crypto/sha256\"\n    //...\n)\n\n// ...\n\nfunc hashWithSHA256(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, HashWithSHA256GasCost); err != nil {\n        return nil, 0, err\n    }\n    // attempts to unpack [input] into the arguments to the HashWithSHA256Input.\n    // Assumes that [input] does not include selector\n    // You can use unpacked [inputStruct] variable in your code\n    inputStruct, err := UnpackHashWithSHA256Input(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // CUSTOM CODE STARTS HERE\n    _ = inputStruct // CUSTOM CODE OPERATES ON INPUT\n\n    var output [32]byte // CUSTOM CODE FOR AN OUTPUT\n\n    output = sha256.Sum256([]byte(inputStruct))\n    \n    packedOutput, err := PackHashWithSHA256Output(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Native Minter Solidity Interface\nDESCRIPTION: Solidity interface definition for the Native Minter precompile located at address 0x0200000000000000000000000000000000000001. It includes functions for minting native coins and managing address permissions through a role-based system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/evm-precompiles/native-minter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface INativeMinter is IAllowList {\n  event NativeCoinMinted(address indexed sender, address indexed recipient, uint256 amount);\n\n  // Mint [amount] number of native coins and send to [addr]\n  function mintNativeCoin(address addr, uint256 amount) external;\n}\n\ninterface IAllowList {\n  event RoleSet(uint256 indexed role, address indexed account, address indexed sender, uint256 oldRole);\n\n  // Enabled addresses can mint native tokens\n  function setEnabled(address addr) external;  \n\n  // Admins can mint native tokens and enable/disable addresses\n  function setManager(address addr) external;\n  \n  // Admins can mint native tokens and enable/disable addresses and give/revoke manager and admin rights\n  function setAdmin(address addr) external;\n\n  // Revoke the role from that address\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC20TokenHome for ERC20 Token Transfers in Solidity\nDESCRIPTION: ERC20TokenHome is a concrete implementation of TokenHome and IERC20TokenTransferrer that handles the locking and releasing of ERC20 tokens for cross-chain transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/04-token-home.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ERC20TokenHome is TokenHome, IERC20TokenTransferrer {\n    // Implementation details not provided in the given text\n}\n```\n\n----------------------------------------\n\nTITLE: Starting AvalancheGo on Mainnet\nDESCRIPTION: Launches AvalancheGo node on the Avalanche Mainnet network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/avalanchego\n./build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Generated MD5 Precompile Contract in Go\nDESCRIPTION: Generated Go code for the MD5 precompile contract. This includes the necessary structs, constants, methods for packing/unpacking inputs and outputs, and a placeholder for the actual MD5 hash implementation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/02-generate-the-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Code generated\n// This file is a generated precompile contract config with stubbed abstract functions.\n// The file is generated by a template. Please inspect every code and comment in this file before use.\n\npackage md5\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"math/big\"\n\n\t\"github.com/ava-labs/subnet-evm/accounts/abi\"\n\t\"github.com/ava-labs/subnet-evm/precompile/contract\"\n\t\"github.com/ava-labs/subnet-evm/vmerrs\"\n\n\t_ \"embed\"\n\n\t\"github.com/ethereum/go-ethereum/common\"\n)\n\nconst (\n\t// Gas costs for each function. These are set to 1 by default.\n\t// You should set a gas cost for each function in your contract.\n\t// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.\n\t// There are some predefined gas costs in contract/utils.go that you can use.\n\tHashWithMD5GasCost uint64 = 1 /* SET A GAS COST HERE */\n)\n\n// CUSTOM CODE STARTS HERE\n// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.\nvar (\n\t_ = abi.JSON\n\t_ = errors.New\n\t_ = big.NewInt\n\t_ = vmerrs.ErrOutOfGas\n\t_ = common.Big0\n)\n\n// Singleton StatefulPrecompiledContract and signatures.\nvar (\n\n\t// Md5RawABI contains the raw ABI of Md5 contract.\n\t//go:embed contract.abi\n\tMd5RawABI string\n\n\tMd5ABI = contract.ParseABI(Md5RawABI)\n\n\tMd5Precompile = createMd5Precompile()\n)\n\n// UnpackHashWithMD5Input attempts to unpack [input] into the string type argument\n// assumes that [input] does not include selector (omits first 4 func signature bytes)\nfunc UnpackHashWithMD5Input(input []byte) (string, error) {\n\tres, err := Md5ABI.UnpackInput(\"hashWithMD5\", input)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tunpacked := *abi.ConvertType(res[0], new(string)).(*string)\n\treturn unpacked, nil\n}\n\n// PackHashWithMD5 packs [value] of type string into the appropriate arguments for hashWithMD5.\n// the packed bytes include selector (first 4 func signature bytes).\n// This function is mostly used for tests.\nfunc PackHashWithMD5(value string) ([]byte, error) {\n\treturn Md5ABI.Pack(\"hashWithMD5\", value)\n}\n\n// PackHashWithMD5Output attempts to pack given hash of type [16]byte\n// to conform the ABI outputs.\nfunc PackHashWithMD5Output(hash [16]byte) ([]byte, error) {\n\treturn Md5ABI.PackOutput(\"hashWithMD5\", hash)\n}\n\n// UnpackHashWithMD5Output attempts to unpack given [output] into the [16]byte type output\n// assumes that [output] does not include selector (omits first 4 func signature bytes)\nfunc UnpackHashWithMD5Output(output []byte) ([16]byte, error) {\n\tres, err := Md5ABI.Unpack(\"hashWithMD5\", output)\n\tif err != nil {\n\t\treturn [16]byte{}, err\n\t}\n\tunpacked := *abi.ConvertType(res[0], new([16]byte)).(*[16]byte)\n\treturn unpacked, nil\n}\n\nfunc hashWithMD5(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, HashWithMD5GasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t// attempts to unpack [input] into the arguments to the HashWithMD5Input.\n\t// Assumes that [input] does not include selector\n\t// You can use unpacked [inputStruct] variable in your code\n\tinputStruct, err := UnpackHashWithMD5Input(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\t_ = inputStruct // CUSTOM CODE OPERATES ON INPUT\n\n\tvar output [16]byte // CUSTOM CODE FOR AN OUTPUT\n\tpackedOutput, err := PackHashWithMD5Output(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n\n// createMd5Precompile returns a StatefulPrecompiledContract with getters and setters for the precompile.\n\nfunc createMd5Precompile() contract.StatefulPrecompiledContract {\n\tvar functions []*contract.StatefulPrecompileFunction\n\n\tabiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{\n\t\t\"hashWithMD5\": hashWithMD5,\n\t}\n\n\tfor name, function := range abiFunctionMap {\n\t\tmethod, ok := Md5ABI.Methods[name]\n\t\tif !ok {\n\t\t\tpanic(fmt.Errorf(\"given method (%s) does not exist in the ABI\", name))\n\t\t}\n\t\tfunctions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))\n\t}\n\t// Construct the contract with no fallback function.\n\tstatefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn statefulContract\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Hardhat Console for Local Network (Bash)\nDESCRIPTION: Starts the Hardhat console, connecting it to the specified local network (`--network local`). This provides an interactive REPL environment (NodeJS-based) for interacting with the deployed smart contracts and the network using libraries like Ethers.js.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn console --network local\n```\n\n----------------------------------------\n\nTITLE: Updating Teleporter Import for Upgrade Support\nDESCRIPTION: Import statement modification to support contract upgrades by replacing ITeleporterReceiver with TeleporterOwnerUpgradeable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n- import {ITeleporterReceiver} from \"@teleporter/ITeleporterReceiver.sol\";\n+ import {TeleporterOwnerUpgradeable} from \"@teleporter/upgrades/TeleporterOwnerUpgradeable.sol\";\n```\n\n----------------------------------------\n\nTITLE: Implementing MD5 Hash Precompile in Go\nDESCRIPTION: This snippet shows the implementation of an MD5 hash precompile. It follows the same pattern as the SHA-256 example, importing the md5 package, deducting gas, computing the hash with md5.Sum(), and returning the packed result.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/md5\"\n\t// ...\n)\n\n// ...\n\nfunc hashWithMD5(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {func hashWithMD5(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, HashWithMD5GasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t// attempts to unpack [input] into the arguments to the HashWithMD5Input.\n\t// Assumes that [input] does not include selector\n\t// You can use unpacked [inputStruct] variable in your code\n\tinputStruct, err := UnpackHashWithMD5Input(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\t_ = inputStruct // CUSTOM CODE OPERATES ON INPUT\n\n\tvar output [16]byte // CUSTOM CODE FOR AN OUTPUT\n\toutput = md5.Sum([]byte(inputStruct))\n\n\tpackedOutput, err := PackHashWithMD5Output(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Multiple Values with abi.decode() in Solidity\nDESCRIPTION: This snippet demonstrates how to use abi.decode() to unpack multiple values from a bytes array. It shows the importance of specifying the correct types in the same order as they were encoded.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/02-encoding-multiple-values.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n(\n  string memory someString,\n  uint someNumber,\n  address someAddress\n) = abi.decode(message, (string, uint, address));\n```\n\n----------------------------------------\n\nTITLE: Managing Chain Fees with BuilderKit useFeeManager Hook in TypeScript\nDESCRIPTION: Outlines how to use the useFeeManager React hook to get or set Avalanche chain fee configurations. Requires @avalabs/builderkit; includes methods for setting fee parameters and querying current configuration or last change timestamp. Inputs are fee parameters or chain ID; outputs include transaction data or fee configs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useFeeManager } from '@avalabs/builderkit';\\n\\nconst { \\n  setFeeConfig, \\n  getFeeConfig, \\n  getFeeConfigLastChangedAt \\n} = useFeeManager();\\n\\n// Configure fees\\nconst data = setFeeConfig(\\n  \\\"0x5F5E100\\\", // gasLimit\\n  \\\"2\\\",         // targetBlockRate\\n  \\\"0x5F5E100\\\", // minBaseFee\\n  \\\"0x5F5E100\\\", // targetGas\\n  \\\"48\\\",        // baseFeeChangeDenominator\\n  \\\"0x0\\\",       // minBlockGasCost\\n  \\\"0x0\\\",       // maxBlockGasCost\\n  \\\"0x0\\\"        // blockGasCostStep\\n);\\n\\n// Get current config\\nconst config = await getFeeConfig(43114);\n```\n\n----------------------------------------\n\nTITLE: Requesting Random Words via CrossChainVRFConsumer\nDESCRIPTION: Command to request random words from the CrossChainVRFConsumer contract. This sends a cross-chain message to the VRF wrapper with specified parameters including key hash, confirmations, gas limits, and payment options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/08-request-random-words.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> $VRF_CONSUMER \"requestRandomWords(bytes32 keyHash, uint16 requestConfirmations, uint32 callbackGasLimit, uint32 numWords, bool nativePayment, uint32 requiredGasLimit)\" <KEY_HASH> <CONFIRMATIONS> <GAS_LIMIT> <NUM_WORDS> <NATIVE_PAYMENT> <REQUIRED_GAS_LIMIT>\n```\n\n----------------------------------------\n\nTITLE: Running AvalancheGo from Pre-built Binary\nDESCRIPTION: Commands for running AvalancheGo node from terminal using pre-built binaries on different platforms\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/upgrade.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-<VERSION>/build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Displaying Transaction Status with TransactionStatus (React / TypeScript)\nDESCRIPTION: This snippet illustrates the use of the TransactionStatus component from @avalabs/builderkit to show the real-time status of a blockchain transaction. It demonstrates configuring the component with a transaction hash, adding auto-refresh behavior via refreshInterval, supplying a confirmation callback, and enabling custom UI aspects such as progress and explorer link display. Key dependencies include @avalabs/builderkit; the main parameter is hash, with optional customization via showProgress, showExplorerLink, and event callbacks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transactions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionStatus } from '@avalabs/builderkit';\\n\\n// Basic usage\\n<TransactionStatus\\n  hash=\\\"0x123...\\\"\\n/>\\n\\n// With auto-refresh\\n<TransactionStatus\\n  hash=\\\"0x123...\\\"\\n  refreshInterval={3000}\\n  onConfirmed={(receipt) => {\\n    console.log('Transaction confirmed!');\\n  }}\\n/>\\n\\n// Custom display\\n<TransactionStatus\\n  hash=\\\"0x123...\\\"\\n  showProgress\\n  showExplorerLink\\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Token Vesting in Solidity\nDESCRIPTION: A smart contract that implements a linear token vesting schedule with cliff period support. The contract allows for controlled token distribution over time, includes cliff period validation, and calculates vested amounts based on time elapsed. It implements an ERC20 interface for token transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/06-distribution/02-vesting-schedules.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenVesting {\n    address public beneficiary;\n    uint256 public start;\n    uint256 public duration;\n    uint256 public cliff;\n    uint256 public totalTokens;\n    uint256 public released;\n\n    IERC20 public token;\n\n    constructor(\n        address _token,\n        address _beneficiary,\n        uint256 _start,\n        uint256 _cliffDuration,\n        uint256 _duration,\n        uint256 _totalTokens\n    ) {\n        require(_beneficiary != address(0), \"Invalid beneficiary\");\n        require(_cliffDuration <= _duration, \"Cliff longer than duration\");\n        require(_duration > 0, \"Duration must be > 0\");\n\n        token = IERC20(_token);\n        beneficiary = _beneficiary;\n        start = _start;\n        cliff = _start + _cliffDuration;\n        duration = _duration;\n        totalTokens = _totalTokens;\n    }\n\n    function release() public {\n        require(block.timestamp >= cliff, \"Cliff period not reached\");\n        uint256 unreleased = releasableAmount();\n        require(unreleased > 0, \"No tokens to release\");\n\n        released += unreleased;\n        token.transfer(beneficiary, unreleased);\n    }\n\n    function releasableAmount() public view returns (uint256) {\n        return vestedAmount() - released;\n    }\n\n    function vestedAmount() public view returns (uint256) {\n        if (block.timestamp < cliff) {\n            return 0;\n        } else if (block.timestamp >= start + duration) {\n            return totalTokens;\n        } else {\n            return (totalTokens * (block.timestamp - start)) / duration;\n        }\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OpenZeppelin ERC-20 Contract\nDESCRIPTION: Imports the ERC20PresetMinterPauser contract from OpenZeppelin, which provides a standard implementation of ERC-20 with minting and pausing capabilities.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/smart-contract-dev/erc-20-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.9/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n```\n\n----------------------------------------\n\nTITLE: Initializing AvaCloudSDK in Server-Side Component\nDESCRIPTION: This snippet initializes the AvaCloudSDK with the AvaCloud API key and configures it to interact with the Avalanche Mainnet (chainId 43114). The SDK will be used to make Data API calls from the server-side components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/02-understanding-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AvaCloudSDK } from \"@avalabs/avacloud-sdk\";\nconst avaCloudSDK = new AvaCloudSDK({\n  apiKey: process.env.AVACLOUD_API_KEY,\n  chainId: \"43114\", // Avalanche Mainnet\n  network: \"mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-20 Token Balance Mapping in Solidity\nDESCRIPTION: This snippet shows the core structure of an ERC-20 token contract, focusing on the balance mapping that associates addresses with token amounts. It demonstrates how token ownership is tracked within the contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/02-erc-20-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    \n  mapping(address account => uint256) private _balances;\n  \n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing TransactionButton for Blockchain Submissions (React / TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the TransactionButton component from the @avalabs/builderkit package to submit a blockchain transaction with status tracking. It shows basic usage with transaction details, as well as advanced usage with onTransactionSent and onTransactionConfirmed callbacks for handling transaction lifecycle events. Dependencies include the @avalabs/builderkit library, and the component expects props such as chain_id, title, description, and data; callbacks receive the transaction hash or receipt, and the output is a rendered React button that manages submission and status.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transactions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionButton } from '@avalabs/builderkit';\\n\\n// Basic usage\\n<TransactionButton\\n  chain_id={43114}\\n  title=\\\"Send AVAX\\\"\\n  description=\\\"Sending AVAX to recipient\\\"\\n  data={{\\n    to: \\\"0x1234...\\\",\\n    value: \\\"1000000000000000000\\\" // 1 AVAX\\n  }}\\n/>\\n\\n// With callbacks\\n<TransactionButton\\n  chain_id={43114}\\n  title=\\\"Stake Tokens\\\"\\n  description=\\\"Staking tokens in the protocol\\\"\\n  data={stakeData}\\n  onTransactionSent={(hash) => {\\n    console.log('Transaction sent:', hash);\\n  }}\\n  onTransactionConfirmed={(receipt) => {\\n    console.log('Transaction confirmed:', receipt);\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Transactions with TransactionManager (React / TypeScript)\nDESCRIPTION: This snippet shows how to leverage the TransactionManager component from @avalabs/builderkit to process and monitor multiple blockchain transactions in sequence or batch. TransactionManager accepts a transactions array prop, each containing title, description, and data for individual transactions, along with callbacks for tracking sent and confirmed states. The component is suitable for workflows requiring chained or grouped transaction handling; required dependencies include @avalabs/builderkit, and key parameters are chain_id and transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transactions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionManager } from '@avalabs/builderkit';\\n\\n// Basic usage\\n<TransactionManager\\n  chain_id={43114}\\n  transactions={[\\n    {\\n      title: \\\"Approve Token\\\",\\n      description: \\\"Approving token for transfer\\\",\\n      data: approveData\\n    },\\n    {\\n      title: \\\"Transfer Token\\\",\\n      description: \\\"Transferring tokens to recipient\\\",\\n      data: transferData\\n    }\\n  ]}\\n/>\\n\\n// With callbacks\\n<TransactionManager\\n  chain_id={43114}\\n  transactions={transactions}\\n  onTransactionSent={(hash) => {\\n    console.log('Transaction sent:', hash);\\n  }}\\n  onTransactionConfirmed={(receipt) => {\\n    console.log('Transaction confirmed:', receipt);\\n  }}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Using AvalancheJS Core Functionality\nDESCRIPTION: Example of importing and using core AvalancheJS functions for different chains and utility operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { avm /** X-chain */, pvm /** P-chain */, evm /** C-chain */, utils } from \"@avalabs/avalanchejs\"\n\n// example calls\nconst exportTx = avm.newExportTx(...) // constructs a new export tx from X\nconst addValidatorTx = pvm.newAddPermissionlessValidatorTx(...) // constructs a new add validator tx on P\nconst importTx = evm.newImportTx(...) // constructs a new import tx to C\n\nconst publicKeyBytes = utils.hexToBuffer(publicKeyHex)\nconst signature = utils.signHash(bytes, privateKeyBytes)\n```\n\n----------------------------------------\n\nTITLE: Declaring the ERC-721 NFT Interface - Solidity\nDESCRIPTION: This Solidity snippet defines the ERC-721 interface for creating interoperable non-fungible tokens. The interface encompasses all required methods and events, such as token transfers, operator/approval management, and secure asset movement. Dependencies include Solidity ^0.4.20 and ERC-165 compatibility. Contracts implementing this interface must handle balance queries, ownership tracking, permissions (approve/setApprovalForAll), and safe token transfers (safeTransferFrom), with strict input validations and revert behavior for incorrect calls. Required parameters include owner addresses, operator addresses, token IDs, and optional data bytes; functions return balances, owners, or approval status as applicable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/02-technical-walkthrough.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\npragma solidity ^0.4.20;\n​\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface ERC721 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n​\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n​\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n​\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n​\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n​\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\n​\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n​\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n​\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n​\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n​\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n​\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ERC-20 Token Interface in Solidity\nDESCRIPTION: This code defines the standard interface for ERC-20 tokens, including functions for retrieving token information, checking balances, and performing transfers. It outlines the core functionality that all ERC-20 tokens must implement to ensure compatibility with decentralized applications.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/02-erc-20-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Custom Blockchain with Avalanche CLI\nDESCRIPTION: Terminal output showing the complete process of deploying a custom blockchain named 'myblockchain' using the Avalanche CLI. The output shows network initialization, subnet creation, blockchain deployment, ICM messenger setup, and final configuration details including RPC endpoints and token allocation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> avalanche blockchain deploy myblockchain\n\n✔ Local Network\nDeploying [myblockchain] to Local Network\n\nAvalancheGo path: /Users/felipe.madero/.avalanche-cli/bin/avalanchego/avalanchego-v1.13.0/avalanchego\n\nBooting Network. Wait until healthy...\n\nNode logs directory: /Users/felipe.madero/.avalanche-cli/runs/network_20250410_104205/<NodeID>/logs\n\nNetwork ready to use.\n\nUsing [P-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p] to be set as a change owner for leftover AVAX\nAvalancheGo path: /Users/felipe.madero/.avalanche-cli/bin/avalanchego/avalanchego-v1.13.0/avalanchego\n\n✓ Local cluster myblockchain-local-node-local-network not found. Creating...\nStarting local avalanchego node using root: /Users/felipe.madero/.avalanche-cli/local/myblockchain-local-node-local-network ...\n✓ Booting Network. Wait until healthy...\n✓ Avalanchego started and ready to use from /Users/felipe.madero/.avalanche-cli/local/myblockchain-local-node-local-network\n\nNode logs directory: /Users/felipe.madero/.avalanche-cli/local/myblockchain-local-node-local-network/<NodeID>/logs\n\nNetwork ready to use.\n\nURI: http://127.0.0.1:60172\nNodeID: NodeID-NuQc8BQ8mV9TVksgMtpyc57VnWzU2J6aN\n\nYour blockchain control keys: [P-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p]\nYour blockchain auth keys for chain creation: [P-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p]\nCreateSubnetTx fee: 0.000010278 AVAX\nBlockchain has been created with ID: 2W9boARgCWL25z6pMFNtkCfNA5v28VGg9PmBgUJfuKndEdhrvw\nNow creating blockchain...\nCreateChainTx fee: 0.000129564 AVAX\n+--------------------------------------------------------------------+\n|                         DEPLOYMENT RESULTS                         |\n+---------------+----------------------------------------------------+\n| Chain Name    | myblockchain                                       |\n+---------------+----------------------------------------------------+\n| Subnet ID     | 2W9boARgCWL25z6pMFNtkCfNA5v28VGg9PmBgUJfuKndEdhrvw |\n+---------------+----------------------------------------------------+\n| VM ID         | qDNV9vtxZYYNqm7TN1mYBuaaknLdefDbFK8bFmMLTJQJKaWjV  |\n+---------------+----------------------------------------------------+\n| Blockchain ID | Yt9d8RRW9JcoqfvyefqJJMX14HawtBc28J9CQspQKPkdonp1y  |\n+---------------+                                                    |\n| P-Chain TXID  |                                                    |\n+---------------+----------------------------------------------------+\nNow calling ConvertSubnetToL1Tx...\nConvertSubnetToL1Tx fee: 0.000036992 AVAX\nConvertSubnetToL1Tx ID: 2d2EE7AorEhfKLBtnDGnAtcDYMGfPbWnHYDpNDm3SopYg6VtpV\nWaiting for the Subnet to be converted into a sovereign L1 ... 100% [===============]\n\nValidator Manager Protocol: ACP99\nRestarting node NodeID-NuQc8BQ8mV9TVksgMtpyc57VnWzU2J6aN to track newly deployed subnet/s\nWaiting for blockchain Yt9d8RRW9JcoqfvyefqJJMX14HawtBc28J9CQspQKPkdonp1y to be bootstrapped\n✓ Local Network successfully tracking myblockchain\n✓ Checking if node is healthy...\n✓ Node is healthy after 0 seconds\nInitializing Proof of Authority Validator Manager contract on blockchain myblockchain ...\n✓ Proof of Authority Validator Manager contract successfully initialized on blockchain myblockchain\n\nYour L1 is ready for on-chain interactions.\n\nRPC Endpoint: http://127.0.0.1:60172/ext/bc/Yt9d8RRW9JcoqfvyefqJJMX14HawtBc28J9CQspQKPkdonp1y/rpc\nICM Messenger successfully deployed to myblockchain (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nICM Registry successfully deployed to myblockchain (0xEc7018552DC7E197Af85f157515f5976b1A15B12)\nICM Messenger successfully deployed to c-chain (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nICM Registry successfully deployed to c-chain (0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25)\n✓ ICM is successfully deployed\n\nGenerating relayer config file at /Users/felipe.madero/.avalanche-cli/runs/network_20250410_104205/icm-relayer-config.json\nRelayer version icm-relayer-v1.6.2\nExecuting Relayer\n✓ Relayer is successfully deployed\n\n+--------------------------------------------------------------------------------------------------------------------------------+\n|                                                          MYBLOCKCHAIN                                                          |\n+---------------+----------------------------------------------------------------------------------------------------------------+\n| Name          | myblockchain                                                                                                   |\n+---------------+----------------------------------------------------------------------------------------------------------------+\n| VM ID         | qDNV9vtxZYYNqm7TN1mYBuaaknLdefDbFK8bFmMLTJQJKaWjV                                                              |\n+---------------+----------------------------------------------------------------------------------------------------------------+\n| VM Version    | v0.7.3                                                                                                         |\n+---------------+----------------------------------------------------------------------------------------------------------------+\n| Validation    | Proof Of Authority                                                                                             |\n+---------------+--------------------------+-------------------------------------------------------------------------------------+\n| Local Network | ChainID                  | 888                                                                                 |\n|               +--------------------------+-------------------------------------------------------------------------------------+\n|               | SubnetID                 | 2W9boARgCWL25z6pMFNtkCfNA5v28VGg9PmBgUJfuKndEdhrvw                                  |\n|               +--------------------------+-------------------------------------------------------------------------------------+\n|               | Owners (Threhold=1)      | P-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p                                     |\n|               +--------------------------+-------------------------------------------------------------------------------------+\n|               | BlockchainID (CB58)      | Yt9d8RRW9JcoqfvyefqJJMX14HawtBc28J9CQspQKPkdonp1y                                   |\n|               +--------------------------+-------------------------------------------------------------------------------------+\n|               | BlockchainID (HEX)       | 0x48644613a5ef255fa171bf4773df668b57ea0ea9593df8927a6d9f32376a9c6f                  |\n|               +--------------------------+-------------------------------------------------------------------------------------+\n|               | RPC Endpoint             | http://127.0.0.1:60172/ext/bc/Yt9d8RRW9JcoqfvyefqJJMX14HawtBc28J9CQspQKPkdonp1y/rpc |\n+---------------+--------------------------+-------------------------------------------------------------------------------------+\n\n+------------------------------------------------------------------------------------+\n|                                         ICM                                        |\n+---------------+-----------------------+--------------------------------------------+\n| Local Network | ICM Messenger Address | 0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf |\n|               +-----------------------+--------------------------------------------+\n|               | ICM Registry Address  | 0xEc7018552DC7E197Af85f157515f5976b1A15B12 |\n+---------------+-----------------------+--------------------------------------------+\n\n+--------------------------+\n|           TOKEN          |\n+--------------+-----------+\n| Token Name   | TST Token |\n+--------------+-----------+\n| Token Symbol | TST       |\n+--------------+-----------+\n\n+---------------------------------------------------------------------------------------------------------------------------------------+\n|                                                        INITIAL TOKEN ALLOCATION                                                       |\n+-------------------------+------------------------------------------------------------------+--------------+---------------------------+\n| DESCRIPTION             | ADDRESS AND PRIVATE KEY                                          | AMOUNT (TST) | AMOUNT (WEI)              |\n+-------------------------+------------------------------------------------------------------+--------------+---------------------------+\n| Main funded account     | 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC                       | 1000000      | 1000000000000000000000000 |\n| ewoq                    | 56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027 |              |                           |\n+-------------------------+------------------------------------------------------------------+--------------+---------------------------+\n| Used by ICM             | 0xf34408C05e3B339B1c89d15163d4B9D96845597A                       | 600          | 600000000000000000000     |\n| cli-teleporter-deployer | 30d57c7b6e7e393e2e4ce8166768b497cc37930361a15b1c647d6e665d88afff |              |                           |\n+-------------------------+------------------------------------------------------------------+--------------+---------------------------+\n\n+----------------------------------------------------------------------------------------------------------------------------------+\n|                                                          SMART CONTRACTS                                                         |\n+----------------------------------------+--------------------------------------------+--------------------------------------------+\n| DESCRIPTION                            | ADDRESS                                    | DEPLOYER                                   |\n```\n\n----------------------------------------\n\nTITLE: Customizing Priority Regossip Behavior Parameters (JSON)\nDESCRIPTION: Defines regossip-related parameters to fine-tune the frequency, number of transactions, and per-address limits for priority regossip logic in the Avalanche node. Useful for performance tuning or supporting high-throughput accounts. Parameters include priority-regossip-frequency (e.g., '1s'), overall max txs, list of priority addresses, and per-address tx rebroadcast caps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"priority-regossip-frequency\": \"1s\",\n  \"priority-regossip-max-txs\": 32,\n  \"priority-regossip-addresses\": [\"<YOUR 0x-ADDRESS>\"],\n  \"priority-regossip-txs-per-address\": 16\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Owner Query Function in Solidity\nDESCRIPTION: Extends the Caller contract with a function that queries the owner of an NFT with a specific ID. It casts the tokenAddress to the ERC721 interface and calls the ownerOf method.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/03-interacting-with-erc721-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Caller {\n​\n    address tokenAddress;\n  \n    uint tokenId;\n​\n    function getNFTOwner() public view returns(address) {\n        return ERC721(tokenAddress).ownerOf(tokenId);\n    }\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Public Pure Function in Solidity\nDESCRIPTION: This Solidity snippet defines a basic function named `getOne`. It is marked `public` for external and internal accessibility and `pure` because it neither reads from nor writes to the contract's state. The function takes no arguments (`()`), specifies its visibility (`public`), its state mutability (`pure`), indicates it returns an unsigned integer (`returns(uint)`), and its body simply returns the constant value `1`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/03-functions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getOne() public pure returns(uint) {\n    return 1; \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock ERC20 SendAndCall Receiver in Solidity\nDESCRIPTION: This contract implements the IERC20SendAndCallReceiver interface for testing purposes. It includes functionality to receive tokens, emit events, and block senders. The contract uses SafeERC20 for token transfers and requires a non-empty payload.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/04-mock-receivers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.25;\n\nimport {IERC20SendAndCallReceiver} from \"../interfaces/IERC20SendAndCallReceiver.sol\";\nimport {SafeERC20TransferFrom} from \"../utils/SafeERC20TransferFrom.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts@5.0.2/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts@5.0.2/utils/Context.sol\";\n\n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\n\n/**\n * @notice This is mock implementation of {receiveTokens} to be used in tests.\n * This contract DOES NOT provide a mechanism for accessing the tokens transfered to it.\n * Real implementations must ensure that tokens are properly handled and not incorrectly locked.\n */\ncontract MockERC20SendAndCallReceiver is Context, IERC20SendAndCallReceiver {\n    using SafeERC20 for IERC20;\n\n    mapping(bytes32 blockchainID => mapping(address senderAddress => bool blocked)) public\n        blockedSenders;\n\n    /**\n     * @dev Emitted when receiveTokens is called.\n     */\n    event TokensReceived(\n        bytes32 indexed sourceBlockchainID,\n        address indexed originTokenTransferrerAddress,\n        address indexed originSenderAddress,\n        address token,\n        uint256 amount,\n        bytes payload\n    );\n\n    /** // [!code highlight:28]\n     * @dev See {IERC20SendAndCallReceiver-receiveTokens}\n     */\n    function receiveTokens(\n        bytes32 sourceBlockchainID,\n        address originTokenTransferrerAddress,\n        address originSenderAddress,\n        address token,\n        uint256 amount,\n        bytes calldata payload\n    ) external {\n        require(\n            !blockedSenders[sourceBlockchainID][originSenderAddress],\n            \"MockERC20SendAndCallReceiver: sender blocked\"\n        );\n        emit TokensReceived({\n            sourceBlockchainID: sourceBlockchainID,\n            originTokenTransferrerAddress: originTokenTransferrerAddress,\n            originSenderAddress: originSenderAddress,\n            token: token,\n            amount: amount,\n            payload: payload\n        });\n\n        require(payload.length > 0, \"MockERC20SendAndCallReceiver: empty payload\");\n\n        SafeERC20TransferFrom.safeTransferFrom(IERC20(token), _msgSender(), amount);\n    }\n\n    /**\n     * @notice Block a sender from sending tokens to this contract.\n     * @param blockchainID The blockchain ID of the sender.\n     * @param senderAddress The address of the sender.\n     */\n    function blockSender(bytes32 blockchainID, address senderAddress) external {\n        blockedSenders[blockchainID][senderAddress] = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain API Handlers in TimestampVM with Rust\nDESCRIPTION: This code defines the chain-specific API handlers for TimestampVM. It includes functions for pinging the VM, proposing new blocks, retrieving the last accepted block, and fetching specific blocks. These functions interact with a specific instance of the VM.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/apis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Defines RPCs specific to the chain.\n#[rpc]\npub\ttrait\tRpc {\n    /// Pings\t\tth\te VM.\n    #[rpc(name = \"ping\", alias(\"timestampvm.ping\"))]\n\tfn\tping(&self) -> BoxFuture<Result<PingResponse>>;\n\n    /// Proposes th\te arbitrary data.\n    #[rpc(name = \"proposeBlock\", alias(\"timestampvm.proposeBlock\"))]\n\tfn\tpropose_block(&self,args:ProposeBlockArgs)->BoxFuture<Result<ProposeBlockResponse>>;\n\n   /// Fetches th\te last accepted\tblock.\n   #[rpc(name=\"lastAccepted\",alias(\"timestampvm.lastAccepted\"))] \n   fn\tlast_accepted(&self)->BoxFuture<Result<LastAcceptedResponse>>;\n\n   /// Fetches th\te block.\n   #[rpc(name=\"getBlock\",alias(\"timestampvm.getBlock\"))] \n   fn\tget_block(&self,args:GetBlockArgs)->BoxFutur e <Result<GetBl ock Response>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions via Privy Embedded Wallet (TypeScript)\nDESCRIPTION: These TypeScript snippets demonstrate how to send a transaction using the user's Privy embedded wallet. The `useSendTransaction` hook provides the `sendTransaction` function. A button triggers the custom `transfer` function. The `transfer` function first checks if the user is authenticated and the address is available. It then constructs a transaction object specifying the value (`ethers.parseUnits` converts ECH amount to Wei), destination address (`to`), and sender address (`from`, which is the user's embedded wallet address). Calling `sendTransaction` with this object prompts the user with a Privy modal to review and approve the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendTransaction } from '@privy-io/react-auth';\n```\n\nLANGUAGE: typescript\nCODE:\n```\n<button onClick={transfer}>Send Test Transfer via Privy</button>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendTransaction, usePrivy } from '@privy-io/react-auth';\nimport { ethers } from 'ethers';\n\n// Inside your React component\nconst { authenticated, user } = usePrivy(); // Get user object for wallet address\nconst { sendTransaction } = useSendTransaction();\nconst address = user?.wallet?.address; // Get embedded wallet address\n\nconst transfer = () => {\n    if (authenticated === false || address === undefined) {\n        console.log('User not authenticated or address not found');\n        return;\n    }\n    let receiver = \"0x...\"; // Replace with a valid receiver address\n    const tx = {\n        value: ethers.parseUnits(\"0.01\", \"ether\"),\n        to: receiver as `0x${string}`,\n        from: address as `0x${string}`, // logged in user's embedded wallet address\n        // No 'chainId' or 'gas' needed, Privy handles this\n    };\n\n    console.log('Attempting to send transaction:', tx);\n\n    sendTransaction(tx).then(receipt => {\n        console.log('Transaction successful:', receipt);\n    }).catch((err) => {\n        console.error('Transaction failed:', err);\n        // handle err (e.g., show error message to user)\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Changing to Root Directory for Precompile Generation\nDESCRIPTION: This command navigates back to the root directory of the precompile-evm project to run the precompile generation script that will create Go files based on the calculator ABI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/02-generating-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Change to root\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Deploying Teleporter Receiver Contract with Forge\nDESCRIPTION: Command to deploy the ReceiverOnSubnet contract using Foundry's Forge tool. Requires an RPC URL and private key for deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/06-create-receiver-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK contracts/interchain-messaging/send-receive/receiverOnSubnet.sol:ReceiverOnSubnet --broadcast\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeTokenRemote Contract in Solidity\nDESCRIPTION: NativeTokenRemote is a concrete implementation of TokenRemote, INativeTokenTransferrer, and IWrappedNativeToken. It handles minting and burning of native EVM assets using the native minter precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/05-token-remote.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract NativeTokenRemote is TokenRemote, INativeTokenTransferrer, IWrappedNativeToken {\n    constructor(string memory nativeAssetSymbol) {\n        // Constructor implementation\n    }\n    // Other implementation details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Token Approval Logic in a React Component using useTokens\nDESCRIPTION: Provides a practical example of a React functional component (`TokenApproval`) that uses the `useTokens` hook. It fetches the current allowance for a given token and spender using `getAllowance` within a `useEffect` hook and prepares an approval transaction using `approve` when a button (represented by `TransactionButton`) is invoked. Requires React, `@avalabs/builderkit`, state management (e.g., for `account`), and likely a `TransactionButton` component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nfunction TokenApproval({ token, spender }: { token: string, spender: string }) {\n  const { getAllowance, approve } = useTokens();\n  const [allowance, setAllowance] = useState(\"0\");\n  \n  useEffect(() => {\n    const checkAllowance = async () => {\n      const amount = await getAllowance(43114, token, account, spender);\n      setAllowance(amount.toString());\n    };\n    \n    checkAllowance();\n  }, [token, spender]);\n  \n  const handleApprove = () => {\n    const data = approve(token, spender, new BigNumber(\"1000\"), 18);\n    \n    return (\n      <TransactionButton\n        chain_id={43114}\n        title=\"Approve Token\"\n        description=\"Approving token for spending\"\n        data={data}\n      />\n    );\n  };\n  \n  return (\n    <div>\n      <div>Current Allowance: {allowance}</div>\n      {handleApprove()}\n    </div>\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Structs for Multiple Inputs and Outputs in Go\nDESCRIPTION: Generated structs for Calculator precompile that handle multiple function parameters. These are created whenever a Solidity interface function has multiple inputs or outputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/03-unpacking-and-packing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype AddInput struct {\n    Value1 *big.Int\n    Value2 *big.Int\n}\n\ntype NextTwoOutput struct {\n    Result1 *big.Int\n    Result2 *big.Int\n}\n\ntype RepeatInput struct {\n    Times *big.Int\n    Text  string\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Chain Messages via Teleporter\nDESCRIPTION: Examples of sending messages between C-Chain and other chains using Teleporter CLI commands in local network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter msg C-Chain chain1 \"Hello World\" --local\n\navalanche teleporter msg chain2 chain1 \"Hello World\" --local\n```\n\n----------------------------------------\n\nTITLE: Inheriting Functions and State Variables in Solidity Contracts\nDESCRIPTION: This snippet expands upon basic inheritance by adding a state variable ('num') and a public function ('square') to contract A. Contract B inherits from A, gaining access to both the state variable and the public function. Solidity is required to deploy or interact with these contracts, and 'square' accepts a uint as input and returns its squared value. The example illustrates inheritance of public state and method members.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/02-inheritance.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n  uint num;\n  \n  function square(uint base) public pure returns(uint) {\n        return base ** 2;\n  }\n}\n​\ncontract B is A {}\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeTokenHome for Native Token Transfers in Solidity\nDESCRIPTION: NativeTokenHome is a concrete implementation of TokenHome and INativeTokenTransferrer that handles the locking and release of the native EVM asset for cross-chain transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/04-token-home.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract NativeTokenHome is TokenHome, INativeTokenTransferrer {\n    // Implementation details not provided in the given text\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExampleHelloWorld Solidity Contract\nDESCRIPTION: Example Solidity contract that interfaces with the HelloWorld precompile. This contract wraps the precompile functions by casting the precompile address to the IHelloWorld interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./IHelloWorld.sol\";\n\n// ExampleHelloWorld shows how the HelloWorld precompile can be used in a smart contract.\ncontract ExampleHelloWorld {\n  address constant HELLO_WORLD_ADDRESS =\n    0x0300000000000000000000000000000000000000;\n  IHelloWorld helloWorld = IHelloWorld(HELLO_WORLD_ADDRESS);\n\n  function sayHello() public view returns (string memory) {\n    return helloWorld.sayHello();\n  }\n\n  function setGreeting(string calldata greeting) public {\n    helloWorld.setGreeting(greeting);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Sending Function\nDESCRIPTION: Function declaration for sending cross-chain messages with support for relayer fees and gas limits.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Send a new message to another chain.\n     */\n    function sendMessage(\n        bytes32 destinationBlockchainID,\n        address destinationAddress,\n        address feeTokenAddress,\n        uint256 feeAmount,\n        uint256 requiredGasLimit,\n        string calldata message\n    ) external returns (bytes32 messageID) {\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrapped NAT Token Contract in Solidity\nDESCRIPTION: A Solidity smart contract that implements an ERC-20 compliant wrapped token for native blockchain assets. The contract includes functionality for depositing native tokens, withdrawing them, and performing standard ERC-20 operations like transfers and approvals. It maintains balances and allowances using mappings and includes safety checks for insufficient balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/11-create-a-wrapped-native-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract WrappedNAT {\n    string public name = \"Wrapped NAT\";\n    string public symbol = \"WNAT\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    \n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowances;\n    \n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n        totalSupply += msg.value;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        totalSupply -= amount;\n        payable(msg.sender).transfer(amount);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowances[msg.sender][spender] = amount;\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowances[owner][spender];\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        require(balances[from] >= amount, \"Insufficient balance\");\n        require(allowances[from][msg.sender] >= amount, \"Allowance exceeded\");\n        balances[from] -= amount;\n        allowances[from][msg.sender] -= amount;\n        balances[to] += amount;\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: State Upgrade Configuration in Subnet-EVM\nDESCRIPTION: JSON configuration for network state upgrades including code modification, balance changes, and storage updates. Specifies changes to be applied at a specific block timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stateUpgrades\": [\n    {\n      \"blockTimestamp\": 1678239000,\n      \"accounts\": {\n        \"0x71562b71999873DB5b286dF957af199Ec94617F7\": {\n          \"code\": \"0x6080604052348015600f57600080fd5b506004361060285760003560e01c80632e64cec114602d575b600080fd5b60336047565b604051603e91906067565b60405180910390f35b60008054905090565b6000819050919050565b6061816050565b82525050565b6000602082019050607a6000830184605a565b9291505056fea26469706673582212209421042a1fdabcfa2486fb80942da62c28e61fc8362a3f348c4a96a92bccc63c64736f6c63430008120033\"\n        },\n        \"0xb794f5ea0ba39494ce839613fffba74279579268\": {\n          \"balanceChange\": \"0x64\",\n          \"storage\": {\n            \"0x0000000000000000000000000000000000000000000000000000000000001234\": \"0x0000000000000000000000000000000000000000000000000000000000006666\"\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: NativeMinter Solidity Interface Definition\nDESCRIPTION: Complete Solidity interface for the NativeMinter precompile located at address 0x0200000000000000000000000000000000000001. Includes functions for minting native coins and managing access control via the AllowList interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/nativeminter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface INativeMinter {\n  event NativeCoinMinted(address indexed sender, address indexed recipient, uint256 amount);\n  // Mint [amount] number of native coins and send to [addr]\n  function mintNativeCoin(address addr, uint256 amount) external;\n\n  // IAllowList\n  event RoleSet(uint256 indexed role, address indexed account, address indexed sender, uint256 oldRole);\n\n  // Set [addr] to have the admin role over the precompile contract.\n  function setAdmin(address addr) external;\n\n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have the manager role over the precompile contract.\n  function setManager(address addr) external;\n\n  // Set [addr] to have no role for the precompile contract.\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Precompiles in Subnet-EVM Registry\nDESCRIPTION: Shows how precompiles are registered in Subnet-EVM through force imports in the registry file. Each precompile package is imported with an underscore to ensure its init function runs and registers the precompile with the system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// Force imports of each precompile to ensure each precompile's init function runs and registers itself\n// with the registry.\nimport (\n\t_ \"github.com/ava-labs/subnet-evm/precompile/contracts/deployerallowlist\"\n\n\t_ \"github.com/ava-labs/subnet-evm/precompile/contracts/nativeminter\"\n\n\t_ \"github.com/ava-labs/subnet-evm/precompile/contracts/txallowlist\"\n\n\t_ \"github.com/ava-labs/subnet-evm/precompile/contracts/feemanager\"\n\n\t_ \"github.com/ava-labs/subnet-evm/precompile/contracts/rewardmanager\"\n\n\t_ \"github.com/ava-labs/subnet-evm/precompile/contracts/helloworld\"\n\t// ADD YOUR PRECOMPILE HERE\n\t// _ \"github.com/ava-labs/subnet-evm/precompile/contracts/yourprecompile\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorManagerSettings Struct in Solidity\nDESCRIPTION: This struct defines the settings for the ValidatorManager contract, including the admin address, subnetID, churn period duration, and maximum churn percentage. These parameters are crucial for initializing and configuring the PoA system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ValidatorManagerSettings {\n    address admin;\n    bytes32 subnetID;\n    uint64 churnPeriodSeconds;\n    uint8 maximumChurnPercentage;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing setCounter Method in Go Smart Contract\nDESCRIPTION: This code snippet demonstrates how to implement the setCounter method for a smart contract. It defines a storage key hash for the counter value, implements a StoreCounterValue helper function to store integers in contract storage, and implements the setCounter function that processes inputs, deducts gas, and stores the counter value.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/03-implement-set-counter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// storageKeyHash\nstorageKeyHash = common.BytesToHash([]byte(\"counterValue\"))\n\n// StoreGreeting sets the value of the storage key in the contract storage.\nfunc StoreCounterValue(stateDB contract.StateDB, value *big.Int) {\n\t// Convert uint to left padded bytes\n\tinputPadded := common.LeftPadBytes(value.Bytes(), 32)\n\tinputHash := common.BytesToHash(inputPadded)\n\n\tstateDB.SetState(ContractAddress, storageKeyHash, inputHash)\n}\n\n//setCounter sets the counter value in the contract storage.\nfunc setCounter(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, SetCounterGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tif readOnly {\n\t\treturn nil, remainingGas, vmerrs.ErrWriteProtection\n\t}\n\t// attempts to unpack [input] into the arguments to the SetCounterInput.\n\t// Assumes that [input] does not include selector\n\t// You can use unpacked [inputStruct] variable in your code\n\tinputStruct, err := UnpackSetCounterInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\n\t// Get the current state\n\tcurrentState := accessibleState.GetStateDB()\n\n\t// Set the value\n\tStoreCounterValue(currentState, inputStruct)\n\n\t// this function does not return an output, leave this one as is\n\tpackedOutput := []byte{}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IHelloWorld Solidity Interface\nDESCRIPTION: Defines the `IHelloWorld` Solidity interface, which inherits from `IAllowList`. It includes a view function `sayHello()`, a state-changing function `setGreeting(string)`, and an event `GreetingChanged`. This interface specifies the functions the stateful precompile must implement.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2022-2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\nimport \"./IAllowList.sol\";\n\ninterface IHelloWorld is IAllowList {\n  event GreetingChanged(\n    address indexed sender,\n    string oldGreeting,\n    string newGreeting\n  );\n\n  // sayHello returns the stored greeting string\n  function sayHello() external view returns (string calldata result);\n\n  // setGreeting  stores the greeting string\n  function setGreeting(string calldata response) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Avalanche Mainnet Configuration Parameters\nDESCRIPTION: Data structure containing configuration parameters for adding Avalanche Mainnet to MetaMask, including chainId, network name, currency details, RPC URLs, and block explorer URLs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/add-network-programmatically.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nexport const AVALANCHE_MAINNET_PARAMS = {\n  chainId: \"0xA86A\",\n  chainName: \"Avalanche Mainnet C-Chain\",\n  nativeCurrency: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n  blockExplorerUrls: [\"https://snowtrace.io/\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Icons with BuilderKit in TypeScript/React\nDESCRIPTION: This snippet demonstrates the use of the TokenIcon and TokenIconWithChain React components from @avalabs/builderkit to display token logos, optionally linked to a specific blockchain via chain_id. The 'address' prop specifies the token contract, while the optional 'chain_id' enables chain context. Additional styles can be provided via the 'className' prop. These components output token images and, if applicable, the corresponding chain icon, but require the proper token and chain_id to render appropriate visuals.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenIcon, TokenIconWithChain } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenIcon address=\"0x1234...\" />\n\n// With chain information\n<TokenIconWithChain \n  address=\"0x1234...\"\n  chain_id={43114}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Transaction History with TransactionHistory (React / TypeScript)\nDESCRIPTION: This snippet covers the TransactionHistory component from @avalabs/builderkit, which renders a paginated or filtered list of recent blockchain transactions for a specific address. Usage includes core configuration with an address, filter objects to limit results by type or token, and options to adjust display via limit, showAmount, and showDate props. The dependency is @avalabs/builderkit, required input is the wallet address, and outputs are the rendered transaction history UI reflecting the given criteria.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transactions.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionHistory } from '@avalabs/builderkit';\\n\\n// Basic usage\\n<TransactionHistory\\n  address=\\\"0x1234...\\\"\\n/>\\n\\n// With filtering\\n<TransactionHistory\\n  address=\\\"0x1234...\\\"\\n  filter={{\\n    type: 'transfer',\\n    token: 'AVAX'\\n  }}\\n/>\\n\\n// Custom display\\n<TransactionHistory\\n  address=\\\"0x1234...\\\"\\n  limit={10}\\n  showAmount\\n  showDate\\n/>\n```\n\n----------------------------------------\n\nTITLE: Administering Role-Based Access with BuilderKit useAllowList in TypeScript\nDESCRIPTION: Provides a full React component example showing how to check, grant, or remove roles using useAllowList and render TransactionButton components. Requires @avalabs/builderkit and a valid precompile address; demonstrates role checking and secure UI for role assignment. Inputs include chain ID, target address, and outputs are transaction data for various access operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction AdminPanel() {\\n  const { readAllowList, setEnabled, setAdmin, setNone } = useAllowList(precompileAddress);\\n  \\n  // Check current role\\n  const checkAccess = async (address) => {\\n    const role = await readAllowList(43114, address);\\n    return role; // Returns: 0 (None), 1 (Enabled), 2 (Admin)\\n  };\\n  \\n  // Grant Enabled role\\n  const grantEnabled = async (address) => {\\n    const data = setEnabled(address);\\n    return (\\n      <TransactionButton\\n        chain_id={43114}\\n        title=\\\"Grant Access\\\"\\n        description=\\\"Granting enabled role\\\"\\n        data={data}\\n      />\\n    );\\n  };\\n  \\n  // Grant Admin role\\n  const grantAdmin = async (address) => {\\n    const data = setAdmin(address);\\n    return (\\n      <TransactionButton\\n        chain_id={43114}\\n        title=\\\"Grant Admin\\\"\\n        description=\\\"Granting admin role\\\"\\n        data={data}\\n      />\\n    );\\n  };\\n  \\n  // Remove all roles\\n  const removeAccess = async (address) => {\\n    const data = setNone(address);\\n    return (\\n      <TransactionButton\\n        chain_id={43114}\\n        title=\\\"Remove Access\\\"\\n        description=\\\"Removing all roles\\\"\\n        data={data}\\n      />\\n    );\\n  };\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Tests for Precompile Functions in Go\nDESCRIPTION: This code snippet defines a set of unit tests for precompile functions including 'add', 'nextTwo', and 'repeat'. It tests both insufficient gas scenarios and correct function outputs. The tests are structured using a map of testutils.PrecompileTest objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/09-unit-tests.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    expectedNextTwoOutcome, _ = PackNextTwoOutput(NextTwoOutput{big.NewInt(2), big.NewInt(3)})\n    expectedRepeatOutcome, _  = PackRepeatOutput(\"EGSEGS\")\n    expectedAddOutcome        = common.LeftPadBytes(big.NewInt(3).Bytes(), common.HashLength)\n\n    tests = map[string]testutils.PrecompileTest{\n        \"insufficient gas for add should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // populate test input here\n                testInput := AddInput{big.NewInt(1), big.NewInt(1)}\n                input, err := PackAdd(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: AddGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"insufficient gas for nextTwo should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // set test input to a value here\n                // var testInput *big.Int\n                testInput := big.NewInt(1)\n                input, err := PackNextTwo(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: NextTwoGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"insufficient gas for repeat should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // populate test input here\n                testInput := RepeatInput{big.NewInt(1), \"EGS\"}\n                input, err := PackRepeat(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: RepeatGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"testing add\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                value1 := big.NewInt(1)\n                value2 := big.NewInt(2)\n                testInput := AddInput{value1, value2}\n                input, err := PackAdd(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: AddGasCost,\n            ReadOnly:    true,\n            ExpectedRes: expectedAddOutcome,\n        },\n        \"testing nextTwo\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                testInput := big.NewInt(1)\n                input, err := PackNextTwo(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: NextTwoGasCost,\n            ReadOnly:    true,\n            ExpectedRes: expectedNextTwoOutcome,\n        },\n        \"testing repeat\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                baseString := \"EGS\"\n                timesToRepeat := big.NewInt(2)\n                input, err := PackRepeat(RepeatInput{timesToRepeat, baseString})\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: RepeatGasCost,\n            ReadOnly:    true,\n            ExpectedRes: expectedRepeatOutcome,\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: AllowList Interface Definition (Solidity)\nDESCRIPTION: This Solidity interface defines the AllowList mechanism used for permission control in precompiles. It provides methods to set different permission roles (admin, enabled, manager, none) and to read an address's current role.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAllowList {\n  event RoleSet(\n    uint256 indexed role,\n    address indexed account,\n    address indexed sender,\n    uint256 oldRole\n  );\n\n  // Set [addr] to have the admin role over the precompile contract.\n  function setAdmin(address addr) external;\n\n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have the manager role over the precompile contract.\n  function setManager(address addr) external;\n\n  // Set [addr] to have no role for the precompile contract.\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenRow with Balance and Click Handler - React TypeScript\nDESCRIPTION: Shows how to render TokenRow with a balance (BigNumber) and an onClick event handler for user interactions. Dependencies include BigNumber and a click handler function (handleTokenSelect). Main parameters are chain_id, address, name, symbol, balance, and onClick; output is interactive UI with formatted balance. This snippet is suitable for scenarios requiring token selection logic.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-row.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n  balance={new BigNumber(\"1.234\")}\n  onClick={() => handleTokenSelect()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TokenList Component - React - TypeScript\nDESCRIPTION: Demonstrates how to import the TokenList component from an external library and use it in a React application. Shows both basic list rendering and usage with advanced props like showing balances and handling selected tokens. Requires React and the TokenList component (from '@avalabs/builderkit'), and expects a list of token objects conforming to the specified structure. The component accepts various props including chain_id, list of tokens, event handlers, and options for display.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TokenList } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenList \n  chain_id={43114}\n  list={[\n    {\n      chain_id: 43114,\n      address: \"0x1234567890123456789012345678901234567890\",\n      name: \"Avalanche\",\n      symbol: \"AVAX\"\n    },\n    // ... more tokens\n  ]}\n  onClick={(address) => console.log('Selected token:', address)}\n/>\n\n// With balances and selected token\n<TokenList \n  chain_id={43114}\n  list={tokens}\n  showBalances={true}\n  selected={{ address: selectedTokenAddress }}\n  onClick={handleTokenSelect}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing receiveTeleporterMessage Function in Solidity\nDESCRIPTION: Implementation of message receiving logic that stores the received message and emits an event. The function decodes the message bytes into a string and saves it in a mapping.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n        // Store the message.\n        string memory messageString = abi.decode(message, (string));\n        _messages[sourceBlockchainID] = Message(\n            originSenderAddress,\n            messageString\n        );\n        emit ReceiveMessage(\n            sourceBlockchainID,\n            originSenderAddress,\n            messageString\n        );\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens Using transferFrom in Solidity\nDESCRIPTION: Implements a contract for executing read and write ERC-20 operations, specifically fetching token name and invoking transferFrom to move tokens between accounts. Requires addresses for the ERC-20 contract, sender, recipient, and transfer amount to be set. The doTransferFrom function attempts to transfer tokens from 'from' to 'to', returning a boolean for success, but does not check for allowances before attempting the write operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/03-interacting-with-erc20-tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Test {\\n    address tokenAddress;\\n    address from;\\n    address to;\\n    uint amt;\\n  \\n    function getName() public view returns(string memory) {\\n      return IERC20(tokenAddress).name();\\n    }\\n  \\n    function doTransferFrom() public returns(bool) {\\n        return IERC20(tokenAddress).transferFrom(from, to, amt);\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Create Command Flags Configuration\nDESCRIPTION: Comprehensive list of available flags for the blockchain create command, including options for VM configuration, chain settings, and deployment parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--custom use                        a custom VM template\n--custom-vm-branch string           custom vm branch or commit\n--custom-vm-build-script string     custom vm build-script\n--custom-vm-path string             file path of custom vm to use\n--custom-vm-repo-url string         custom vm repository url\n--debug enable                      blockchain debugging (default true)\n--evm use                           the Subnet-EVM as the base template\n--evm-chain-id uint                 chain ID to use with Subnet-EVM\n--evm-defaults deprecation          notice: use '--production-defaults'\n--evm-token string                  token symbol to use with Subnet-EVM\n--external-gas-token use            a gas token from another blockchain\n-f, --force overwrite               the existing configuration if one exists\n--from-github-repo generate         custom VM binary from github repository\n--genesis string                    file path of genesis to use\n-h, --help help                     for create\n--icm interoperate                  with other blockchains using ICM\n--icm-registry-at-genesis setup     ICM registry smart contract on genesis [experimental]\n--latest use                        latest Subnet-EVM released version, takes precedence over --vm-version\n--pre-release use                   latest Subnet-EVM pre-released version, takes precedence over --vm-version\n--production-defaults use           default production settings for your blockchain\n--proof-of-authority use            proof of authority(PoA) for validator management\n--proof-of-stake use                proof of stake(PoS) for validator management\n--proxy-contract-owner string       EVM address that controls ProxyAdmin for TransparentProxy of ValidatorManager contract\n--reward-basis-points uint          (PoS only) reward basis points for PoS Reward Calculator (default 100)\n--sovereign set                     to false if creating non-sovereign blockchain (default true)\n--teleporter interoperate           with other blockchains using ICM\n--test-defaults use                 default test settings for your blockchain\n--validator-manager-owner string    EVM address that controls Validator Manager Owner\n--vm string                         file path of custom vm to use. alias to custom-vm-path\n--vm-version string                 version of Subnet-EVM template to use\n--warp generate                     a vm with warp support (needed for ICM) (default true)\n--config string                     config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                  log level for the application (default \"ERROR\")\n--skip-update-check skip            check for new versions\n```\n\n----------------------------------------\n\nTITLE: Creating Stateful Precompiled Contract for Calculator Plus in Go\nDESCRIPTION: This function creates a stateful precompiled contract with calculator-like operations. It maps ABI functions to their implementations, creates precompile functions, and constructs the final contract without a fallback function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/02-generating-precompile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc createCalculatorplusPrecompile() contract.StatefulPrecompiledContract {\n    var functions []*contract.StatefulPrecompileFunction\n\n    abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{\n        \"moduloPlus\": moduloPlus,\n        \"powOfThree\": powOfThree,\n        \"simplFrac\":  simplFrac,\n    }\n\n    for name, function := range abiFunctionMap {\n        method, ok := CalculatorplusABI.Methods[name]\n        if !ok {\n            panic(fmt.Errorf(\"given method (%s) does not exist in the ABI\", name))\n        }\n        functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))\n    }\n    // Construct the contract with no fallback function.\n    statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)\n    if err != nil {\n        panic(err)\n    }\n    return statefulContract\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Data Structure in Rust for TimestampVM\nDESCRIPTION: The Block structure implementation in Rust that fulfills the SnowmanVM Block interface requirements. It stores parent ID, height, timestamp, data, along with status tracking fields and a reference to the VM state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/blocks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n/// Represents a block, specific to `Vm` (crate::vm::Vm).\n#[serde_as]\n#[derive(Serialize, Deserialize, Clone, Derivative, Default)]\n#[derivative(Debug, PartialEq, Eq)]\npub struct Block {\n    /// The block Id of the parent block.\n    parent_id: ids::Id,\n    /// This block's height.\n    /// The height of the genesis block is 0.\n    height: u64,\n    /// Unix second when this block was proposed.\n    timestamp: u64,\n    /// Arbitrary data.\n    #[serde_as(as = \"Hex0xBytes\")]\n    data: Vec<u8>,\n\n    /// Current block status.\n    #[serde(skip)]\n    status: choices::status::Status,\n    /// This block's encoded bytes.\n    #[serde(skip)]\n    bytes: Vec<u8>,\n    /// Generated block Id.\n    #[serde(skip)]\n    id: ids::Id,\n\n    /// Reference to the Vm state manager for blocks.\n    #[derivative(Debug = \"ignore\", PartialEq = \"ignore\")]\n    #[serde(skip)]\n    state: state::State,\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Project\nDESCRIPTION: Command to create and initialize a new Hardhat project with default configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/hardhat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx hardhat\n```\n\n----------------------------------------\n\nTITLE: Navigating to Subnet-EVM Directory for Deployment\nDESCRIPTION: Command to navigate to the Subnet-EVM directory in order to use relative file paths for the genesis JSON file. This is the first step before running Avalanche Network Runner.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/precompile-deployment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/subnet-evm\n```\n\n----------------------------------------\n\nTITLE: Using Button Component in React with Web3 (TypeScript)\nDESCRIPTION: Demonstrates how to use the Button component from @avalabs/builderkit in a React (TypeScript) environment, showcasing basic usage, loading, and disabled states. The Button component requires a label, an action handler function, and can accept optional status and CSS class properties. Inputs include the label string and action function; outputs are button UI elements rendered in varying states. Dependencies include React and the Button export from @avalabs/builderkit, and the code should run in a React environment with TypeScript support.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Button } from '@avalabs/builderkit';\n\n// Basic usage\n<Button \n  label=\"Click me\"\n  action={() => console.log('Button clicked')}\n/>\n\n// With loading state\n<Button \n  label=\"Processing...\"\n  action={() => {}}\n  status=\"loading\"\n/>\n\n// Disabled state\n<Button \n  label=\"Unavailable\"\n  action={() => {}}\n  status=\"disabled\"\n/>\n\n```\n\n----------------------------------------\n\nTITLE: HelloWorld Test Results\nDESCRIPTION: Output showing successful execution of HelloWorld contract tests with compilation and test passing details\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nCombined output:\n\nCompiling 2 files with 0.8.0\nCompilation finished successfully\n\n\n  ExampleHelloWorldTest\n    ✓ should gets default hello world (4057ms)\n    ✓ should not set greeting before enabled (4067ms)\n    ✓ should set and get greeting with enabled account (4074ms)\n\n\n\n  3 passing (33s)\n\n\n  < Exit [It] hello world - /Users/avalabs/go/src/github.com/ava-labs/subnet-evm/tests/precompile/solidity/suites.go:64 @ 01/27/23 10:34:17.484 (11.48s)\n• [11.480 seconds]\n```\n\n----------------------------------------\n\nTITLE: Scaling Tokens from Remote (18 decimals) to Home (6 decimals)\nDESCRIPTION: This code snippet illustrates the reverse scaling process when transferring tokens from a remote chain with 18 decimal places back to a home chain with 6 decimal places. It shows how 100 USDC is scaled down to maintain its value.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/01-math-example.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n100 × 10^{18} ÷ 10^{12} = 100 × 10^6\n```\n\n----------------------------------------\n\nTITLE: Flags for Subnet Publish Command in Avalanche CLI\nDESCRIPTION: Flags for the subnet publish command, including options for repository aliases, forced publishing, and file path specifications.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_151\n\nLANGUAGE: bash\nCODE:\n```\n--alias string               We publish to a remote repo, but identify the repo locally under a user-provided alias (e.g. myrepo).\n--force If                   true, ignores if the subnet has been published in the past, and attempts a forced publish.\n-h, --help help              for publish\n--no-repo-path string        Do not let the tool manage file publishing, but have it only generate the files and put them in the location given by this flag.\n--repo-url string            The URL of the repo where we are publishing\n--subnet-file-path string    Path to the Subnet description file. If not given, a prompting sequence will be initiated.\n--vm-file-path string        Path to the VM description file. If not given, a prompting sequence will be initiated.\n--config string              config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string           log level for the application (default \"ERROR\")\n--skip-update-check skip     check for new versions\n```\n\n----------------------------------------\n\nTITLE: Integrating ERC20 Token Balances with Glacier API in a React Component - TypeScript/TSX\nDESCRIPTION: Presents a functional React component named TokenBalances that fetches and displays the ERC20 token balances for a given address using the useGlacier hook. Utilizes useEffect to trigger data fetching on address change and useState to store token balances. The retrieved balances are rendered in a JSX list. Dependencies: React, @avalabs/builderkit, and TypeScript. The component receives an address prop (string) and displays token symbols and formatted amounts as output. Designed for inclusion in a larger React application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/glacier.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nfunction TokenBalances({ address }: { address: string }) {\n  const { listErc20Balances } = useGlacier();\n  const [balances, setBalances] = useState([]);\n  \n  useEffect(() => {\n    const fetchBalances = async () => {\n      const tokenBalances = await listErc20Balances(43114, address);\n      setBalances(tokenBalances);\n    };\n    \n    fetchBalances();\n  }, [address]);\n  \n  return (\n    <div className=\"space-y-2\">\n      {balances.map(balance => (\n        <div key={balance.token_address} className=\"flex justify-between\">\n          <span>{balance.symbol}</span>\n          <span>{balance.formatted_amount}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeIDs for Avalanche Banff Upgrade in Go\nDESCRIPTION: This code defines the type IDs used by Avalanche for various block and transaction types. It includes both Apricot (previous version) IDs and adds new type IDs for Banff blocks and transactions. These IDs are used for type identification during serialization and deserialization.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/banff-changes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nApricotProposalBlock = 0\nApricotAbortBlock = 1\nApricotCommitBlock = 2\nApricotStandardBlock = 3\nApricotAtomicBlock = 4\n\nsecp256k1fx.TransferInput = 5\nsecp256k1fx.MintOutput = 6\nsecp256k1fx.TransferOutput = 7\nsecp256k1fx.MintOperation = 8\nsecp256k1fx.Credential = 9\nsecp256k1fx.Input = 10\nsecp256k1fx.OutputOwners = 11\n\nAddValidatorTx = 12\nAddSubnetValidatorTx = 13\nAddDelegatorTx = 14\nCreateChainTx = 15\nCreateSubnetTx = 16\nImportTx = 17\nExportTx = 18\nAdvanceTimeTx = 19\nRewardValidatorTx = 20\n\nstakeable.LockIn = 21\nstakeable.LockOut = 22\n\nRemoveSubnetValidatorTx = 23\nTransformSubnetTx = 24\nAddPermissionlessValidatorTx = 25\nAddPermissionlessDelegatorTx = 26\n\nEmptyProofOfPossession = 27\nBLSProofOfPossession   = 28\n\nBanffProposalBlock = 29\nBanffAbortBlock = 30\nBanffCommitBlock = 31\nBanffStandardBlock = 32\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AmountInput with Optional Icon in React (TypeScript)\nDESCRIPTION: This snippet demonstrates importing the AmountInput component from the builderkit library and using it in two ways: a basic controlled input for numeric amounts and an input with a currency icon using the DollarSign component. Dependencies include React, @avalabs/builderkit, and lucide-react for the icon. Key props like type, placeholder, icon, and onChange are utilized. The onChange handler receives the formatted amount. Inputs expect numeric text, and outputs are validated/parsed number strings. The snippet supports controlled value handling and optional icon display.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/amount-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AmountInput } from '@avalabs/builderkit';\nimport { DollarSign } from 'lucide-react';\n\n// Basic usage\n<AmountInput \n  type=\"text\"\n  placeholder=\"Enter amount...\"\n  onChange={(value) => console.log('Amount:', value)}\n/>\n\n// With currency icon\n<AmountInput \n  type=\"text\"\n  placeholder=\"0.00\"\n  icon={<DollarSign className=\"w-4 h-4\" />}\n  onChange={handleAmountChange}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Contract Inheritance in Solidity\nDESCRIPTION: This snippet demonstrates the simplest form of contract inheritance in Solidity, where contract B directly inherits from contract A. It serves as an introductory example for extending smart contract logic by inheriting properties and functionality from a parent contract. No dependencies are required beyond a Solidity environment and both contracts contain no state variables or functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/02-inheritance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {}\n​\ncontract B is A {}\n```\n\n----------------------------------------\n\nTITLE: Using the Input Component in React (TSX)\nDESCRIPTION: Demonstrates basic usage of the `Input` component from `@avalabs/builderkit`, including how to handle `onChange` events, display an icon using `lucide-react`, and set the `disabled` state. It requires importing `Input` and optionally an icon component like `Search`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Input } from '@avalabs/builderkit';\nimport { Search } from 'lucide-react';\n\n// Basic usage\n<Input \n  type=\"text\"\n  placeholder=\"Enter text...\"\n  onChange={(value) => console.log('Input value:', value)}\n/>\n\n// With icon\n<Input \n  type=\"text\"\n  placeholder=\"Search...\"\n  icon={<Search className=\"w-4 h-4\" />}\n  onChange={handleSearch}\n/>\n\n// Disabled state\n<Input \n  type=\"text\"\n  placeholder=\"Disabled input\"\n  disabled={true}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating ERC-20 Token Receiver Contract in Solidity\nDESCRIPTION: A smart contract that can receive ERC-20 tokens from other addresses. It implements the transferFrom function and requires the token address as a constructor parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/09-transfer-erc20-to-sc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts@4.8.1/token/ERC20/IERC20.sol\";\n\ncontract TokenReceiver {\n    IERC20 public token;\n\n    constructor(address tokenAddress) {\n        token = IERC20(tokenAddress);\n    }\n\n    function receiveTokens(address from, uint256 amount) public {\n        require(token.transferFrom(from, address(this), amount), \"Transfer failed\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Avalanche L1 Chain using viem\nDESCRIPTION: This code shows how to define a custom L1 chain using viem's defineChain function. It includes setting essential properties like chain ID, name, network identifier, native currency details, RPC URLs, and block explorers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/chains.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineChain } from \"viem\";\n\nexport const myL1 = defineChain({\n    id: 173750,  // Your L1 chain ID\n    name: 'My L1',  // Display name\n    network: 'my-l1',  // Network identifier\n    nativeCurrency: {\n        decimals: 18,\n        name: 'Token',\n        symbol: 'TKN',\n    },\n    rpcUrls: {\n        default: {\n            http: ['https://api.avax.network/ext/L1/rpc']\n        },\n    },\n    blockExplorers: {\n        default: { \n            name: 'Explorer', \n            url: 'https://explorer.avax.network/my-l1' \n        },\n    },\n    // Optional: Custom metadata\n    iconUrl: \"/chains/logo/my-l1.png\",\n    icm_registry: \"0x...\"  // ICM registry contract\n});\n```\n\n----------------------------------------\n\nTITLE: Initial Precompile Configuration with Admin Addresses in Avalanche L1/Subnet-EVM (JSON)\nDESCRIPTION: Illustrates a basic chain configuration file that enables feeManagerConfig from a specific block timestamp and restricts control to specified admin addresses. Used to grant sensitive network fee structure management privileges only to authorized accounts. No additional dependencies required; place file in chain-config directory and restart the node. Only adminAddresses listed can alter the network fee configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"precompileUpgrades\": [\n    {\n      \"feeManagerConfig\": {\n        \"blockTimestamp\": 1668950000,\n        \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional Messaging in Solidity Receiver Contract\nDESCRIPTION: This Solidity contract extends the receiver functionality to send messages back to the sender. It uses the TeleporterMessenger to handle cross-chain communication, receiving messages and sending responses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/04-receiver-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger\";\nimport \"@teleporter/ITeleporterReceiver\";\n\ncontract ReceiverOnSubnet is ITeleporterReceiver {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    function receiveTeleporterMessage(bytes32 sourceBlockchainID, address originSenderAddress, bytes calldata message)\n        external\n    {\n        // Only the Interchain Messaging receiver can deliver a message.\n        require(msg.sender == address(messenger), \"ReceiverOnSubnet: unauthorized TeleporterMessenger\");\n\n        // Send Roundtrip message back to sender\n        string memory response = string.concat(abi.decode(message, (string)), \" World!\");\n\n        messenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                // Blockchain ID of C-Chain\n                destinationBlockchainID: sourceBlockchainID,\n                destinationAddress: originSenderAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: abi.encode(response)\n            })\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Unsigned Add Delegator Transaction in Avalanche\nDESCRIPTION: A detailed example showing how to construct an unsigned Add Delegator transaction by combining various components including BaseTx, NodeID, time parameters, weight, stake, and rewards owner information. The example shows both the component-wise breakdown and the complete byte representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_40\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx       <- 0x0000000e000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    NodeID       <- 0xe9094f73698002fd52c90819b457b9fbc866ab80\n    StarTime     <- 0x000000005f21f31d\n    EndTime      <- 0x000000005f497dc6\n    Weight       <- 0x000000000000d431\n    Stake        <- 0x0000000139c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d55008800000007000001d1a94a2000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c\n    RewardsOwner <- 0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    0x00, 0x00, 0x00, 0x01,\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Node ID\n    0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,\n    0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,\n    0xc8, 0x66, 0xab, 0x80,\n    // StartTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,\n    // EndTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,\n    // Weight\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // Stake\n    0x00, 0x00, 0x00, 0x01, 0x39, 0xc3, 0x3a, 0x49,\n    0x9c, 0xe4, 0xc3, 0x3a, 0x3b, 0x09, 0xcd, 0xd2,\n    0xcf, 0xa0, 0x1a, 0xe7, 0x0d, 0xbf, 0x2d, 0x18,\n    0xb2, 0xd7, 0xd1, 0x68, 0x52, 0x44, 0x40, 0xe5,\n    0x5d, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,\n    0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,\n    0x61, 0xe1, 0xb2, 0x9c,\n    // RewardsOwner\n    0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n]\n```\n\n----------------------------------------\n\nTITLE: Restoring AvalancheGo Node Files Using SCP\nDESCRIPTION: Command to securely copy backed up node files from a local directory to a remote machine using SCP, restoring the node's identity.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nscp ~/avalanche_backup/{staker.*,signer.key} ubuntu@PUBLICIP:/home/ubuntu/.avalanchego/staking\n```\n\n----------------------------------------\n\nTITLE: Implementing Openfort Core Functionality\nDESCRIPTION: Complete implementation showing authentication, provider initialization, gas sponsorship policy creation, and transaction handling with sponsored transactions on Avalanche C-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/openfort.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Authentication\nconst authResponse = await openfort.logInWithEmailPassword({\n  email: \"user@example.com\",\n  password: \"password123\"\n});\n\n// Initialize Provider\nconst provider = await openfort.getProvider();\nawait provider.request({ \n  method: 'wallet_switchEthereumChain',\n  params: [{ chainId: `0x${avalancheChain.id.toString(16)}` }]\n});\n\n// Create a gas sponsorship policy (server-side)\nconst policy = await openfortServer.policies.create({\n  chainId: 43114, // Avalanche C-Chain\n  name: \"Gas Sponsorship Policy\",\n  strategy: {\n    sponsorSchema: \"pay_for_user\"\n  }\n});\n\n// Create transaction intent with sponsorship (server-side)\nconst transactionIntent = await openfortServer.transactionIntents.create({\n  player: \"PLAYER_ID\",\n  chainId: 43114,\n  optimistic: true,\n  policy: policy.id,\n  interactions: [{\n    contract: \"CONTRACT_ADDRESS\",\n    functionName: \"transfer\",\n    functionArgs: [recipientAddress, amount]\n  }]\n});\n\n// Sign and send the sponsored transaction (client-side)\nconst response = await openfortClient.sendSignatureTransactionIntentRequest(\n  transactionIntent.id,\n  transactionIntent.nextAction.payload.userOperationHash\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Avalanche-CLI - Bash\nDESCRIPTION: Downloads and executes the official Avalanche-CLI installation script using curl and sh, which fetches the CLI binary into the ~/bin directory. This is the recommended fastest way to install the latest Avalanche-CLI. Requires a functional bash shell and network connectivity to github.com.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://raw.githubusercontent.com/ava-labs/avalanche-cli/main/scripts/install.sh | sh -s\n\n```\n\n----------------------------------------\n\nTITLE: Testing Cross-Chain Teleporter Message\nDESCRIPTION: Sends a test message between two deployed Avalanche L1 chains using Teleporter messaging system to verify cross-chain communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter msg chain2 chain1 \"Hello World\" --local\n```\n\n----------------------------------------\n\nTITLE: AccessibleState Interface Definition in Go\nDESCRIPTION: Interface that provides access to state database, block context, and snow context for precompile contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/09-stateful-precompiles/00-intro.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype AccessibleState interface {\n    GetStateDB() StateDB\n    GetBlockContext() BlockContext\n    GetSnowContext() *snow.Context\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Complete Token URI with OpenZeppelin ERC721URIStorage in Solidity\nDESCRIPTION: This function overrides the tokenURI method from the OpenZeppelin ERC721URIStorage contract. It checks ownership, fetches the token-specific URI from the _tokenURIs mapping, and concatenates it with a configurable base URI if present. Required dependencies include OpenZeppelin's ERC721URIStorage, access to the _baseURI function, and Solidity 0.8.x or later. The input is a tokenId (uint256), and output is a string memory URI. Limitations include requiring that tokenId exists and is owned; otherwise, _requireOwned should revert.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/05-uris.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n​\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n​\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n​\n        return super.tokenURI(tokenId);\n}\n```\n\n----------------------------------------\n\nTITLE: MultiChainTokenInput with Balance Display and Custom Styling in React/TypeScript\nDESCRIPTION: Demonstrates extending MultiChainTokenInput to show token balances and apply custom CSS classes for layout customization. The className property is set to adjust width and max-width using TailwindCSS-like utilities. Shows full property binding for selected, list, onSelectionChanged, showBalances, and className. Requires supporting styling system (e.g., TailwindCSS) in the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/multi-chain-token-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n<MultiChainTokenInput \n  selected={currentToken}\n  list={allChainTokens}\n  onSelectionChanged={handleTokenChange}\n  showBalances={true}\n  className=\"w-full max-w-sm\"\n/>\n```\n\n----------------------------------------\n\nTITLE: PrecompiledContract Interface Definition (Go)\nDESCRIPTION: This code defines the basic interface for native Go precompiled contracts. It requires two methods: RequiredGas to calculate gas consumption and Run to execute the contract logic.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// PrecompiledContract is the basic interface for native Go contracts. The implementation\n// requires a deterministic gas count based on the input size of the Run method of the\n// contract.\ntype PrecompiledContract interface {\n\tRequiredGas(input []byte) uint64  // RequiredPrice calculates the contract gas use\n\tRun(input []byte) ([]byte, error) // Run runs the precompiled contract\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Calculator Sender Implementation\nDESCRIPTION: Implements the sender contract that encodes function calls and parameters for cross-chain communication using Teleporter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/06-encoding-function-name.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"./CalculatorActions.sol\";\n\ncontract CalculatorSenderOnCChain {\n    ITeleporterMessenger public immutable teleporterMessenger =\n        ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    function sendAddMessage(address destinationAddress, uint256 num1, uint256 num2) external {\n        teleporterMessenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                destinationBlockchainID: 0x92756d698399805f0088fc07fc42af47c67e1d38c576667ac6c7031b8df05293,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: encodeAddData(num1, num2)\n            })\n        );\n    }\n\n    function sendConcatenateMessage(address destinationAddress, string memory text1, string memory text2) external {\n        teleporterMessenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                destinationBlockchainID: 0x382d2a20c299b03b638dd4d42b96e7401f6c3e88209b764abce83cf71c0c30cd,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: encodeConcatenateData(text1, text2)\n            })\n        );\n    }\n\n    function encodeAddData(uint256 a, uint256 b) public pure returns (bytes memory) {\n        bytes memory paramsData = abi.encode(a, b);\n        return abi.encode(CalculatorAction.add, paramsData);\n    }\n\n    function encodeConcatenateData(string memory a, string memory b) public pure returns (bytes memory) {\n        bytes memory paramsData = abi.encode(a, b);\n        return abi.encode(CalculatorAction.concatenate, paramsData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Token Rows with BuilderKit in TypeScript/React\nDESCRIPTION: This snippet illustrates the usage of the TokenRow React component, permitting display of comprehensive token information. Along with standard details such as chain_id, address, name, and symbol, it supports showing a balance (using a BigNumber object) and an optional click handler via onClick. Dependencies include TokenRow from @avalabs/builderkit and BigNumber from 'bignumber.js'. This component is suitable for list or table views where richer token data and interaction are required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenRow } from '@avalabs/builderkit';\nimport { BigNumber } from 'bignumber.js';\n\n// Basic usage\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234...\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n/>\n\n// With balance and click handler\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234...\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n  balance={new BigNumber(100)}\n  onClick={() => handleTokenSelect()}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TokenChip Component in React (TypeScript)\nDESCRIPTION: This snippet shows how to import the TokenChip component from the @avalabs/builderkit package and demonstrates its basic and extended usage in a React (TSX) file. Required dependencies include React and the TokenChip component. Key props include chain_id, address, symbol, name, showChainIcon (optional), and allowCopyToClipboard (optional). Inputs are the various props; outputs are rendered token UI chips displaying icons and info. The snippet highlights both minimal and feature-rich component usage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-chip.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenChip } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n/>\n\n// With chain icon and copy functionality\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n  showChainIcon={true}\n  allowCopyToClipboard={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Endpoint for C-Chain Interaction\nDESCRIPTION: The endpoint path to interact with Avalanche's C-Chain through JSON-RPC requests. Used for accessing Ethereum-compatible functionalities.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n/ext/bc/C/rpc\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain Action Interface in Go\nDESCRIPTION: Core interface definition showing required methods for implementing Actions in HyperSDK including compute units calculation, state key management, type identification, and execution logic.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/02-actions.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nComputeUnits(Rules) uint64\nStateKeys(actor codec.Address) state.Keys\nGetTypeID() uint8\nValidRange(Rules) (start int64, end int64)\nExecute(\n       ctx context.Context,\n       r Rules,\n       mu state.Mutable,\n       timestamp int64,\n       actor codec.Address,\n       actionID ids.ID,\n   ) (outputs [][]byte, err error)\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Avalanche Network using CLI\nDESCRIPTION: Command to start a local, multi-node Avalanche network with customizable options such as node count, avalanchego version, and snapshot selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\navalanche network start [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: TokenItem Type Definition for TokenList - TypeScript\nDESCRIPTION: Defines the TokenItem interface used by TokenList, specifying all required and optional fields per token. The structure supports fields for identification, display, balances, and whitelisting. Dependencies include TypeScript for type definitions and (optionally) BigNumber for representing large balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-list.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TokenItem = {\n  chain_id: number;\n  address: string;\n  name: string;\n  symbol: string;\n  balance?: BigNumber; // Optional, used when showBalances is true\n  whitelisted?: boolean; // Optional, for token verification\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Transaction Permissions with BuilderKit useTransactionAllowList Hook in TypeScript\nDESCRIPTION: Explains how to use useTransactionAllowList for enabling addresses to transact or querying their status. This hook requires @avalabs/builderkit and works with addresses and chain IDs to generate transaction data or check current permission state. Useful for permission gating on Avalanche chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useTransactionAllowList } from '@avalabs/builderkit';\\n\\nconst { setEnabled, readAllowList } = useTransactionAllowList();\\n\\n// Enable address for transactions\\nconst data = setEnabled(\\\"0x1234...\\\");\\n\\n// Check address status\\nconst status = await readAllowList(43114, \\\"0x1234...\\\");\n```\n\n----------------------------------------\n\nTITLE: Initiating Cross-Chain Token Swap\nDESCRIPTION: Execute a cross-chain token swap by sending ERC20 tokens from Avalanche L1 to Fuji using cast send command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/13-cross-chain-token-swaps/08-deploy-wrapped-exchange-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url echo --private-key $PK $ERC20_HOME_C_CHAIN \"sendAndCall((bytes32, address, address, bytes, uint256, uint256, address, address, address, uint256, uint256), uint256)\" \"(${C_CHAIN_BLOCKCHAIN_ID_HEX}, ${ERC20_TOKEN_REMOTE_L1}, ${WRAPPED_EXCHANGE_ADDRESS}, 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 2500000, 2000000, 0x0000000000000000000000000000000000000000, ${FUNDED_ADDRESS}, ${ERC20_HOME_C_CHAIN}, 0, 0)\" 100000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Hash Type Definition and StateDB Interface in Go\nDESCRIPTION: Defines the Hash type for state storage and the StateDB interface for accessing EVM state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/09-stateful-precompiles/00-intro.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    HashLength = 32\n)\n\ntype Hash [HashLength]byte\n\ntype StateDB interface {\n    GetState(common.Address, common.Hash) common.Hash\n    SetState(common.Address, common.Hash, common.Hash)\n    SetNonce(common.Address, uint64)\n    GetNonce(common.Address) uint64\n    GetBalance(common.Address) *big.Int\n    AddBalance(common.Address, *big.Int)\n    CreateAccount(common.Address)\n    Exist(common.Address) bool\n    AddLog(addr common.Address, topics []common.Hash, data []byte, blockNumber uint64)\n    GetPredicateStorageSlots(address common.Address) ([]byte, bool)\n    Suicide(common.Address) bool\n    Finalise(deleteEmptyObjects bool)\n    Snapshot() int\n    RevertToSnapshot(int)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Payable Function in Solidity\nDESCRIPTION: Basic smart contract example demonstrating a payable function that can receive native tokens and track the amount received. The contract includes a state variable to store received amounts and a payable function to handle incoming transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/05-transfers-in-smart-contracts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\ncontract PayableExample {\n    uint public amountReceived = 0 ;\n\n    function receiveNative() public payable {\n        amountReceived += msg.value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Native Token Minting Configuration in Avalanche L1\nDESCRIPTION: CLI prompt for configuring whether new native tokens can be minted beyond the initial supply. Allows choosing between a hard-capped supply or enabling the Native Minter Precompile for flexible token minting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/03-native-token-allocation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Allow minting of new native tokens?: \n  ▸ No, I want the supply of the native tokens to be hard-capped\n    Yes, I want to be able to mint additional native tokens (Native Minter Precompile ON)\n```\n\n----------------------------------------\n\nTITLE: Implementing Calculator Precompile Functions in Go\nDESCRIPTION: This code snippet shows the implementation of three functions (add, repeat, nextTwo) in the Calculator precompile. Each function follows a similar pattern: deducting gas, unpacking input, performing the calculation, and packing output.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc add(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, AddGasCost); err != nil {\n        return nil, 0, err\n    }\n    // attempts to unpack [input] into the arguments to the AddInput.\n    // Assumes that [input] does not include selector\n    // You can use unpacked [inputStruct] variable in your code\n    inputStruct, err := UnpackAddInput(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // CUSTOM CODE STARTS HERE\n  \n    _ = inputStruct          // CUSTOM CODE OPERATES ON INPUT\n  \n    var output *big.Int // CUSTOM CODE FOR AN OUTPUT\n\n    output = big.NewInt(0).Add(inputStruct.Value1, inputStruct.Value2)\n\n    packedOutput, err := PackAddOutput(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n// ...\n\nfunc repeat(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, RepeatGasCost); err != nil {\n        return nil, 0, err\n    }\n    // attempts to unpack [input] into the arguments to the RepeatInput.\n    // Assumes that [input] does not include selector\n    // You can use unpacked [inputStruct] variable in your code\n    inputStruct, err := UnpackRepeatInput(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // CUSTOM CODE STARTS HERE\n    _ = inputStruct          // CUSTOM CODE OPERATES ON INPUT\n  \n    var output string // CUSTOM CODE FOR AN OUTPUT\n\n    output = strings.Repeat(inputStruct.Text, int(inputStruct.Times.Int64()))\n\n    packedOutput, err := PackRepeatOutput(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n\n// ...\n\nfunc nextTwo(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, NextTwoGasCost); err != nil {\n        return nil, 0, err\n    }\n    // attempts to unpack [input] into the arguments to the NextTwoInput.\n    // Assumes that [input] does not include selector\n    // You can use unpacked [inputStruct] variable in your code\n    inputStruct, err := UnpackNextTwoInput(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // CUSTOM CODE STARTS HERE\n  \n    _ = inputStruct          // CUSTOM CODE OPERATES ON INPUT\n  \n    var output NextTwoOutput // CUSTOM CODE FOR AN OUTPUT\n\n    output.Result1 = big.NewInt(0).Add(inputStruct, big.NewInt(1))\n    output.Result2 = big.NewInt(0).Add(inputStruct, big.NewInt(2))\n\n    packedOutput, err := PackNextTwoOutput(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Deployment Permissions with BuilderKit useDeployerAllowList Hook in TypeScript\nDESCRIPTION: Details how to use useDeployerAllowList to set or verify deployment permissions for Avalanche contract deployers. Depends on @avalabs/builderkit; setEnabled and readAllowList manage permissions for a given address and chain ID. Outputs transaction data or allow-list status.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useDeployerAllowList } from '@avalabs/builderkit';\\n\\nconst { setEnabled, readAllowList } = useDeployerAllowList();\\n\\n// Enable address for deployments\\nconst data = setEnabled(\\\"0x1234...\\\");\\n\\n// Check address status\\nconst status = await readAllowList(43114, \\\"0x1234...\\\");\n```\n\n----------------------------------------\n\nTITLE: Packing and Emitting Custom Events in Go Precompile\nDESCRIPTION: Example of packing event data and preparing it for emission in a precompile. This code deducts gas for reading state, fetches the old greeting, and prepares the event data structure for the GreetingChanged event.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nif remainingGas, err = contract.DeductGas(remainingGas, contract.ReadGasCostPerSlot); err != nil {\n  return nil, 0, err\n}\noldGreeting := GetGreeting(stateDB)\n\neventData := GreetingChangedEventData{\n  OldGreeting: oldGreeting,\n  NewGreeting: inputStruct,\n}\ntopics, data, err := PackGreetingChangedEvent(caller, eventData)\nif err != nil {\n  return nil, remainingGas, err\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with a Counter Smart Contract - React/TypeScript\nDESCRIPTION: This snippet uses TransactionButton to create UI controls that send 'increase' and 'decrease' calls to a deployed counter contract on Fuji testnet. Each button prepares and invokes the respective contract method, logs confirmation or errors, and requires the contract instance and correct method signatures. Inputs include the contract address (hardcoded), and outputs include transaction status callbacks for user feedback.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n <TransactionButton\\n    transaction={() => {\\n        const transaction = prepareContractCall({\\n        contract,\\n        method: \\\"function increase()\\\",\\n        params: [],\\n        });\\n    return transaction;\\n    }}\\n    onTransactionConfirmed={() => { console.log(\\\"Transaction confirmed\\\") }}\\n    onError={() => { console.log(\\\"Transaction error\\\") }}\\n    >\\n    Increase Count\\n</TransactionButton>\\n\\n<TransactionButton\\n    transaction={() => {\\n        const transaction = prepareContractCall({\\n        contract,\\n        method: \\\"function decrease()\\\",\\n        params: [],\\n        });\\n    return transaction;\\n    }}\\n    onTransactionConfirmed={() => { console.log(\\\"Transaction confirmed\\\") }}\\n    onError={() => { console.log(\\\"Transaction error\\\") }}\\n    >\\n    Decrease Count\\n</TransactionButton>\n```\n\n----------------------------------------\n\nTITLE: Deploying a Solidity Contract using Forge CLI\nDESCRIPTION: This command utilizes the Forge CLI tool to deploy the `HelloWorld` smart contract, defined in `src/my-contracts/HelloWorld.sol`. It targets a local Avalanche C-Chain instance specified by `--rpc-url local-c`, uses a private key provided via the `$PK` environment variable for signing the transaction, and specifies the contract to deploy (`HelloWorld.sol:HelloWorld`). The `--broadcast` flag sends the transaction to the network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/04-create-new-smart-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK src/my-contracts/HelloWorld.sol:HelloWorld --broadcast\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-721 Token Balances in TypeScript\nDESCRIPTION: This function is a placeholder for implementing the retrieval of ERC-721 token balances for a given address. It will make a call to the backend to fetch the balances using the listErc721Balances method.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/02-understanding-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC721Balances = async (address: string) => {\n    //\n    // TODO: Implement this!\n    //\n    return [] as Erc721TokenBalance[];\n  }\n```\n\n----------------------------------------\n\nTITLE: Genesis Configuration JSON for Custom Precompile\nDESCRIPTION: Complete genesis configuration file that includes the MD5 precompile setup along with other network parameters. Includes chain ID, fee configuration, and precompile activation timestamps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/05-configkey-and-contractaddr.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 99999,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"subnetEVMTimestamp\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 20000000,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 500000\n    },\n    \"sha256Config\": {\n      \"blockTimestamp\": 0\n    },\n    \"md5Config\": {\n      \"blockTimestamp\": 0\n    } \n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0x1312D00\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions to Access and Modify State Variables - Solidity\nDESCRIPTION: This snippet provides a full Solidity contract that includes a state variable and two functions: one to set and one to get its value. The function setNum(uint _num) allows external callers to update the num variable, while getNum() returns its current value. The contract demonstrates best practices for managing internal state through functions in Solidity. Expected inputs include an unsigned integer for setNum; getNum returns an unsigned integer. No special dependencies are required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/04-contracts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n \n    uint num;\n  \n    function setNum(uint _num) public {\n        num = _num; \n    }\n  \n    function getNum() public view returns(uint) {\n        return num; \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Digital Signature Components in React\nDESCRIPTION: Imports React components for digital signature operations including generating keys, signing messages, and verifying signatures. Also imports UI components for creating a step-by-step guide interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-schemes-demo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GenerateKeysButton, SignMessageButton, VerifySignatureButton } from '@/components/signatureSchemes'\nimport { Steps, Step } from 'fumadocs-ui/components/steps'\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Registration in ValidatorManager Contract\nDESCRIPTION: This function allows the admin to initiate the registration of a new validator. It takes parameters such as nodeID, BLS public key, registration expiry, remaining balance owner, disable owner, and weight. It's part of the two-step process for adding new validators.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateValidatorRegistration(\n    bytes memory nodeID,\n    bytes memory blsPublicKey,\n    uint64 registrationExpiry,\n    PChainOwner memory remainingBalanceOwner,\n    PChainOwner memory disableOwner,\n    uint64 weight\n) public onlyOwner returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: Deploy Command Flags for Avalanche CLI\nDESCRIPTION: Complete list of available flags for the subnet deploy command, including options for configuring validators, networks, keys, and various blockchain parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_135\n\nLANGUAGE: bash\nCODE:\n```\n--aggregator-allow-private-peers allow                 the signature aggregator to connect to peers with private IP (default true)\n--aggregator-extra-endpoints strings                   endpoints for extra nodes that are needed in signature aggregation\n--aggregator-log-level string                          log level to use with signature aggregator (default \"Off\")\n--avalanchego-path string                              use this avalanchego binary path\n--avalanchego-version string                           use this version of avalanchego (ex: v1.17.12) (default \"latest-prerelease\")\n--balance float                                        set the AVAX balance of each bootstrap validator that will be used for continuous fee on P-Chain (default 0.1)\n--blockchain-genesis-key use                           genesis allocated key to fund validator manager initialization\n--blockchain-key string                                CLI stored key to use to fund validator manager initialization\n--blockchain-private-key string                        private key to use to fund validator manager initialization\n--bootstrap-endpoints strings                          take validator node info from the given endpoints\n--bootstrap-filepath string                            JSON file path that provides details about bootstrap validators, leave Node-ID and BLS values empty if using --generate-node-id=true\n--cchain-funding-key string                            key to be used to fund relayer account on cchain\n--cchain-icm-key string                                key to be used to pay for ICM deploys on C-Chain\n--change-owner-address string                          address that will receive change if node is no longer L1 validator\n--cluster string                                       operate on the given cluster\n--control-keys strings                                 addresses that may make subnet changes\n--convert-only avoid                                   node track, restart and poa manager setup\n--devnet operate                                       on a devnet network\n--endpoint string                                      use the given endpoint for network operations\n-e, --ewoq use                                         ewoq key [fuji/devnet deploy only]\n-f, --fuji testnet                                     operate on fuji (alias to testnet\n--generate-node-id whether                             to create new node id for bootstrap validators (Node-ID and BLS values in bootstrap JSON file will be overridden if --bootstrap-filepath flag is used)\n-h, --help help                                        for deploy\n--icm-key string                                       key to be used to pay for ICM deploys (default \"cli-teleporter-deployer\")\n--icm-version string                                   ICM version to deploy (default \"latest\")\n-k, --key string                                       select the key to use [fuji/devnet deploy only]\n-g, --ledger use                                       ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)\n--ledger-addrs strings                                 use the given ledger addresses\n-l, --local operate                                    on a local network\n-m, --mainnet operate                                  on mainnet\n--mainnet-chain-id uint32                              use different ChainID for mainnet deployment\n--noicm skip                                           automatic ICM deploy\n--num-bootstrap-validators int                         (only if --generate-node-id is true) number of bootstrap validators to set up in sovereign L1 validator)\n--num-local-nodes int                                  number of nodes to be created on local machine\n--num-nodes uint32                                     number of nodes to be created on local network deploy (default 2)\n--output-tx-path string                                file path of the blockchain creation tx\n--partial-sync set                                     primary network partial sync for new validators (default true)\n--pos-maximum-stake-amount uint                        maximum stake amount (default 1000)\n--pos-maximum-stake-multiplier uint8                   maximum stake multiplier (default 1)\n--pos-minimum-delegation-fee uint16                    minimum delegation fee (default 1)\n--pos-minimum-stake-amount uint                        minimum stake amount (default 1)\n--pos-minimum-stake-duration uint                      minimum stake duration (default 100)\n--pos-weight-to-value-factor uint                      weight to value factor (default 1)\n--relay-cchain relay                                   C-Chain as source and destination (default true)\n--relayer-allow-private-ips allow                      relayer to connec to private ips (default true)\n--relayer-amount float                                 automatically fund relayer fee payments with the given amount\n--relayer-key string                                   key to be used by default both for rewards and to pay fees\n--relayer-log-level string                             log level to be used for relayer logs (default \"info\")\n--relayer-path string                                  relayer binary to use\n--relayer-version string                               relayer version to deploy (default \"latest-prerelease\")\n-s, --same-control-key use                             the fee-paying key as control key\n--skip-icm-deploy skip                                 automatic ICM deploy\n--skip-local-teleporter skip                           automatic ICM deploy on local networks [to be deprecated]\n--skip-relayer skip                                    relayer deploy\n--skip-teleporter-deploy skip                          automatic ICM deploy\n--subnet-auth-keys strings                             control keys that will be used to authenticate chain creation\n-u, --subnet-id string                                 do not create a subnet, deploy the blockchain into the given subnet id\n--subnet-only only                                     create a subnet\n--teleporter-messenger-contract-address-path string    path to an ICM Messenger contract address file\n--teleporter-messenger-deployer-address-path string    path to an ICM Messenger deployer address file\n--teleporter-messenger-deployer-tx-path string         path to an ICM Messenger deployer tx file\n--teleporter-registry-bytecode-path string             path to an ICM Registry bytecode file\n--teleporter-version string                            ICM version to deploy (default \"latest\")\n-t, --testnet fuji                                     operate on testnet (alias to fuji)\n--threshold uint32                                     required number of control key signatures to make subnet changes\n--use-local-machine use                                local machine as a blockchain validator\n--config string                                        config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                                     log level for the application (default \"ERROR\")\n--skip-update-check skip                               check for new versions\n```\n\n----------------------------------------\n\nTITLE: Unpacking Function Inputs in Go Precompiles\nDESCRIPTION: Demonstrates how to unpack input byte arrays for functions with single and multiple parameters. The UnpackAddInput returns a struct while UnpackNextTwoInput returns a single big.Int value.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/03-unpacking-and-packing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// UnpackAddInput attempts to unpack [input] as AddInput\n// assumes that [input] does not include selector (omits first 4 func signature bytes)\nfunc UnpackAddInput(input []byte) (AddInput, error) {\n    inputStruct := AddInput{}\n    err := CalculatorABI.UnpackInputIntoInterface(&inputStruct, \"add\", input)\n    return inputStruct, err\n}\n\n// UnpackNextTwoInput attempts to unpack [input] into the *big.Int type argument\n// assumes that [input] does not include selector (omits first 4 func signature bytes)\nfunc UnpackNextTwoInput(input []byte) (*big.Int, error) {\n    res, err := CalculatorABI.UnpackInput(\"nextTwo\", input)\n    if err != nil {\n        return big.NewInt(0), err\n    }\n    unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)\n    return unpacked, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NativeMinter in Genesis JSON\nDESCRIPTION: JSON configuration required in the genesis file to activate the NativeMinter precompile. This includes specifying the block timestamp for activation and the admin addresses that will have permission to mint tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/nativeminter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"contractNativeMinterConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Snowman Block Interface in AvalancheGo (Go)\nDESCRIPTION: This Go interface (`snowman.Block`) defines the structure and behavior of blocks within the Snowman consensus protocol, used for linear chains in Avalanche. It extends `choices.Decidable` and includes methods to retrieve the parent block's ID, verify the block's validity based on its parent, return its serialized byte representation for network transmission, and report its height in the chain. It relies on the `choices` and `ids` packages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/index.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Block is a possible decision that dictates the next canonical block.\n//\n// Blocks are guaranteed to be Verified, Accepted, and Rejected in topological\n// order. Specifically, if Verify is called, then the parent has already been\n// verified. If Accept is called, then the parent has already been accepted. If\n// Reject is called, the parent has already been accepted or rejected.\n//\n// If the status of the block is Unknown, ID is assumed to be able to be called.\n// If the status of the block is Accepted or Rejected; Parent, Verify, Accept,\n// and Reject will never be called.\ntype Block interface {\n    choices.Decidable\n\n    // Parent returns the ID of this block's parent.\n    Parent() ids.ID\n\n    // Verify that the state transition this block would make if accepted is\n    // valid. If the state transition is invalid, a non-nil error should be\n    // returned.\n    //\n    // It is guaranteed that the Parent has been successfully verified.\n    Verify() error\n\n    // Bytes returns the binary representation of this block.\n    //\n    // This is used for sending blocks to peers. The bytes should be able to be\n    // parsed into the same block on another node.\n    Bytes() []byte\n\n    // Height returns the height of this block in the chain.\n    Height() uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Unpacking Precompile setGreeting Input via ABI in Go\nDESCRIPTION: Demonstrates two versions of an Unpacker utility for extracting arguments from ABI-encoded bytes for the setGreeting function. The first version supports optional strict mode for legacy compatibility (truncating input to common.HashLength), while the second omits strict mode for post-Durango deployments. Both depend on a valid ABI instance (HelloWorldABI) and correct function selector. Input is the ABI-encoded byte array, and output is a Go string or decode error. Requires correct ABI JSON and Go-Ethereum ABI bindings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// UnpackSetGreetingInput attempts to unpack [input] into the string type argument\n// assumes that [input] does not include selector (omits first 4 func signature bytes)\n// if [useStrictMode] is true, it will return an error if the length of [input] is not [common.HashLength]\nfunc UnpackSetGreetingInput(input []byte, useStrictMode bool) (string, error) {\n\t// Initially we had this check to ensure that the input was the correct length.\n\t// However solidity does not always pack the input to the correct length, and allows\n\t// for extra padding bytes to be added to the end of the input. Therefore, we have removed\n\t// this check with the Durango. We still need to keep this check for backwards compatibility.\n\tif useStrictMode && len(input) > common.HashLength {\n\t\treturn \"\", ErrInputExceedsLimit\n\t}\n\tres, err := HelloWorldABI.UnpackInput(\"setGreeting\", input, useStrictMode)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tunpacked := *abi.ConvertType(res[0], new(string)).(*string)\n\treturn unpacked, nil\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc UnpackSetGreetingInput(input []byte) (string, error) {\n\tres, err := HelloWorldABI.UnpackInput(\"setGreeting\", input, false)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tunpacked := *abi.ConvertType(res[0], new(string)).(*string)\n\treturn unpacked, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Validator with ERC20 Tokens in Solidity\nDESCRIPTION: Demonstrates the two-step process for registering a new validator using an ERC20 token. First, the user must approve the `erc20StakingManager` contract to spend their tokens. Then, `initiateValidatorRegistration` is called with validator parameters (NodeID, BLS key, expiry, owners, fee, duration, amount), followed by `completeValidatorRegistration` after receiving an off-chain confirmation message, identified by `messageIndex`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\n// First, approve the StakingManager to spend your tokens\nerc20Token.approve(erc20StakingManager, 1000 * 10**18);\n\n// 1. Initiate validator registration with 1000 tokens\nbytes32 validationID = erc20StakingManager.initiateValidatorRegistration(\n    nodeID,\n    blsPublicKey,\n    block.timestamp + 7 days, // registration expiry\n    pChainRemainingBalanceOwner,\n    pChainDisableOwner, \n    500, // 5% delegation fee (in basis points)\n    60 days, // minimum stake duration\n    1000 * 10**18 // stake amount (1000 tokens)\n);\n\n// 2. Complete registration after receiving confirmation message\nerc20StakingManager.completeValidatorRegistration(messageIndex);\n```\n\n----------------------------------------\n\nTITLE: Rendering Ethereum Address with Optional Abbreviation - React - TypeScript\nDESCRIPTION: This snippet demonstrates importing and using an Address React component from the builderkit library to display an Ethereum address. It includes both standard address rendering and an option to abbreviate the address for concise UI display. Key props are 'address' (required, the Ethereum address) and 'abbreviate' (optional, shows a shortened version when true). It is intended for TypeScript/TSX React environments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Address } from '@avalabs/builderkit';\n\n// Basic usage\n<Address address=\"0x1234567890123456789012345678901234567890\" />\n\n// With abbreviation\n<Address \n  address=\"0x1234567890123456789012345678901234567890\"\n  abbreviate={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: ChainDropdown with Custom Styling\nDESCRIPTION: Shows how to apply custom styling to the ChainDropdown component using Tailwind CSS classes. This example demonstrates how to customize the appearance of the dropdown to fit specific design requirements.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-dropdown.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainDropdown \n  selected={43114}\n  list={[43114, 43113]}\n  onSelectionChanged={handleChainChange}\n  className=\"w-full max-w-sm bg-gray-100\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Placeholder Functions for API Methods in TypeScript\nDESCRIPTION: This code block contains placeholder functions for implementing various API methods including getBlockHeight, listERC721Balances, listErc1155Balances, and listRecentTransactions. These functions will be implemented to call the Data API through the AvaCloudSDK.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/02-understanding-code.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getBlockHeight() {\n    //\n    // TODO: Implement this!\n    //\n    return\n}\n\nconst listERC721Balances = async (address: string) => {\n    //\n    // TODO: Implement this!\n    //\n    return\n}\n\nconst listErc1155Balances = async (address: string) => {\n    //\n    // TODO: Implement this!\n    //\n    return\n}\n\nconst listRecentTransactions = async (address: string) => {\n    //\n    // TODO: Implement this!\n    //\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Keystore User with AvalancheGo API - Shell\nDESCRIPTION: This shell snippet shows how to send a JSON-RPC request via curl to delete a keystore user from an AvalancheGo node. The keystore.deleteUser method requires username and password parameters, submitted as a JSON payload to the /ext/keystore endpoint. The endpoint expects local access; the method is deprecated as of v1.9.12. On success, an empty object is returned in the result field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.deleteUser\",\n    \"params\" : {\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/keystore\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Devnet with Teleporter\nDESCRIPTION: Command to create a devnet with 5 validators in AWS us-east-1 region and deploy an Avalanche L1 chain with Teleporter integration. Includes deployment of Messenger and Registry contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-devnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz <devnetName> <chain1> --aws --node-type default --region us-east-1 --num-validators 5 --num-apis 0 --enable-monitoring=false --default-validator-params\n```\n\n----------------------------------------\n\nTITLE: Skeleton Implementation of moduloPlus Function in Go\nDESCRIPTION: This code shows the starter template for implementing the moduloPlus function. It includes the gas deduction, input unpacking, and output packing, but leaves the core calculation logic to be implemented.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc moduloPlus(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, ModuloPlusGasCost); err != nil {\n        return nil, 0, err\n    }\n    // attempts to unpack [input] into the arguments to the ModuloPlusInput.\n    // Assumes that [input] does not include selector\n    // You can use unpacked [inputStruct] variable in your code\n    inputStruct, err := UnpackModuloPlusInput(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // CUSTOM CODE STARTS HERE\n    _ = inputStruct             // CUSTOM CODE OPERATES ON INPUT\n    var output ModuloPlusOutput // CUSTOM CODE FOR AN OUTPUT\n    \n    packedOutput, err := PackModuloPlusOutput(output)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n\n    // Return the packed output and the remaining gas\n    return packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Token IDs to URIs in Solidity\nDESCRIPTION: This snippet defines a private mapping in Solidity that associates each NFT's tokenId with its corresponding URI string. It is intended for use within ERC-721 contracts to store per-token metadata locations, typically referencing off-chain assets like images. Dependencies include the Solidity language (version 0.8.x or compatible) and an ERC-721 contract context; the mapping should reside within a contract body.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/05-uris.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(uint256 tokenId => string) private _tokenURIs;\n```\n\n----------------------------------------\n\nTITLE: Activating WarpMessenger Precompile in Avalanche Subnet-EVM\nDESCRIPTION: JSON configuration for activating the WarpMessenger Precompile in the upgrade.json file. The blockTimestamp must be set to a timestamp after Durango date, and quorumNumerator (defaulting to 67) must be between 33 and 100.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/warpmessenger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warpConfig\": {\n    \"blockTimestamp\": (uint),\n    \"quorumNumerator\": (uint)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Devnet and Deploying an Avalanche L1 using Avalanche CLI (Bash)\nDESCRIPTION: This command uses the Avalanche CLI's `devnet wiz` subcommand to create a new development network named `<devnetName>` on AWS in the `us-east-1` region. It simultaneously deploys an Avalanche L1 blockchain named `<chain1>` into this Devnet. The command configures the Devnet with 5 default-type validator nodes, zero API nodes, disables monitoring, and automatically deploys and configures Teleporter contracts (Messenger and Registry) on both the new L1 and the C-Chain, along with setting up the AWM Teleporter Relayer service on one of the validator nodes. Requires Avalanche CLI and configured AWS credentials.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz <devnetName> <chain1> --aws --node-type default --region us-east-1 --num-validators 5 --num-apis 0 --enable-monitoring=false --default-validator-params \n\nCreating the devnet...\n\nCreating new EC2 instance(s) on AWS...\n...\n\nDeploying [chain1] to Cluster <devnetName>\n...\n\nconfiguring AWM RElayer on host i-0f1815c016b555fcc\n\nSetting the nodes as subnet trackers\n...\n\nSetting up teleporter on subnet\n\nTeleporter Messenger successfully deployed to chain1 (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nTeleporter Registry successfully deployed to chain1 (0xb623C4495220C603D0A939D32478F55891a61750)\nTeleporter Messenger successfully deployed to c-chain (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nTeleporter Registry successfully deployed to c-chain (0x5DB9A7629912EBF95876228C24A848de0bfB43A9)\n\nStarting AWM Relayer Service\n\nsetting AWM Relayer on host i-0f1815c016b555fcc to relay subnet chain1\nupdating configuration file ~/.avalanche-cli/nodes/i-0f1815c016b555fcc/services/awm-relayer/awm-relayer-config.json\n\nDevnet <devnetName> is successfully created and is now validating subnet chain1!\n\nSubnet <chain1> RPC URL: http://67.202.23.231:9650/ext/bc/fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p/rpc\n \n✓ Cluster information YAML file can be found at ~/.avalanche-cli/nodes/inventories/<devnetName>/clusterInfo.yaml at local host\n```\n\n----------------------------------------\n\nTITLE: Sending Unrestricted Cross-Chain Message\nDESCRIPTION: Example of sending a cross-chain message with no relayer restrictions by passing an empty array for allowedRelayerAddresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/11-restricting-the-relayer/02-allowed-relayers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nmessenger.sendCrossChainMessage( \n    TeleporterMessageInput({\n        destinationBlockchainID: 0x3861e061737eaeb8d00f0514d210ad1062bfacdb4bd22d1d1f5ef876ae3a8921,\n        destinationAddress: destinationAddress, \n        feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n        requiredGasLimit: 100000,\n        allowedRelayerAddresses: new address[](0),\n        message: abi.encode(message)\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployer Allow List in Genesis JSON\nDESCRIPTION: An example of enabling the contractDeployerAllowList precompile in the genesis.json file. This configuration specifies admin addresses that can manage the list and enabled addresses that can deploy contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n \"contractDeployerAllowListConfig\": {\n      \"adminAddresses\": [ // Addresses that can manage (add/remove) enabled addresses. They are also enabled themselves for contract deployment.\n        \"0x4f9e12d407b18ad1e96e4f139ef1c144f4058a4e\",\n        \"0x4b9e5977a46307dd93674762f9ddbe94fb054def\"\n      ],\n      \"blockTimestamp\": 0,\n      \"enabledAddresses\": [\n        \"0x09c6fa19dd5d41ec6d0f4ca6f923ec3d941cc569\" // Addresses that can only deploy contracts \n      ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Serializing Avalanche Unsigned Add Validator TX to Raw Bytes - Text\nDESCRIPTION: This snippet demonstrates how an Unsigned Add Validator TX is serialized, combining a Base TX, validator info (node, period, weight), staked outputs, rewards owner, and reward shares. Each field follows big-endian encoding and must be ordered as shown, with complex objects pre-serialized as noted. Required fields include node identifiers and staking info, and all numbers (e.g., times, weights) must be correctly converted to binary. No external libraries needed, but types/fields must match specification strictly.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx       <- 0x0000000c000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    NodeID       <- 0xe9094f73698002fd52c90819b457b9fbc866ab80\n    StarTime     <- 0x000000005f21f31d\n    EndTime      <- 0x000000005f497dc6\n    Weight       <- 0x000000000000d431\n    Stake        <- 0x0000000139c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d55008800000007000001d1a94a2000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c\n    RewardsOwner <- 0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c\n    Shares       <- 0x00000064\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x68, 0x70, 0xb7, 0xd6,\n    0x6a, 0xc3, 0x25, 0x40, 0x31, 0x13, 0x79, 0xe5,\n    0xb5, 0xdb, 0xad, 0x28, 0xec, 0x7e, 0xb8, 0xdd,\n    0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    0x00, 0x00, 0x00, 0x01,\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Node ID\n    0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,\n    0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,\n    0xc8, 0x66, 0xab, 0x80,\n    // StartTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,\n    // EndTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,\n    // Weight\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // Stake\n    0x00, 0x00, 0x00, 0x01, 0x39, 0xc3, 0x3a, 0x49,\n    0x9c, 0xe4, 0xc3, 0x3a, 0x3b, 0x09, 0xcd, 0xd2,\n    0xcf, 0xa0, 0x1a, 0xe7, 0x0d, 0xbf, 0x2d, 0x18,\n    0xb2, 0xd7, 0xd1, 0x68, 0x52, 0x44, 0x40, 0xe5,\n    0x5d, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,\n    0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,\n    0x61, 0xe1, 0xb2, 0x9c,\n    // RewardsOwner\n    0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    // Shares\n    0x00, 0x00, 0x00, 0x64,\n]\n```\n\n----------------------------------------\n\nTITLE: Using Identity Context Provider in React with TypeScript\nDESCRIPTION: Demonstrates basic usage of the Identity provider component from @avalabs/builderkit. The snippet wraps Domain and Address components with Identity so both receive the Ethereum address via context. Dependencies include React and @avalabs/builderkit, and the address prop is required. The example shows default usage with a hardcoded testnet-compatible address and abbreviation of the displayed Address component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/identity.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Identity, Address, Domain } from '@avalabs/builderkit';\\n\\n// Basic usage\\n<Identity address=\\\"0x1234567890123456789012345678901234567890\\\">\\n  <Domain showAddressIfNotAvailable={true} />\\n  <Address abbreviate={true} />\\n</Identity>\n```\n\n----------------------------------------\n\nTITLE: Minting Native Tokens with BuilderKit useNativeMinter Hook in TypeScript\nDESCRIPTION: Demonstrates the useNativeMinter React hook to mint native Avalanche tokens. Requires @avalabs/builderkit; mintNativeCoin function accepts recipient address and amount (in hex). Returns transaction data for transfering native coins, typically integrated with transaction components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useNativeMinter } from '@avalabs/builderkit';\\n\\nconst { mintNativeCoin } = useNativeMinter();\\n\\n// Mint tokens\\nconst data = mintNativeCoin(\\n  \\\"0x1234...\\\", // recipient\\n  \\\"0x1000000000000000\\\" // amount in hex\\n);\n```\n\n----------------------------------------\n\nTITLE: Emitting Precompile Contract Events via StateDB in Go\nDESCRIPTION: Illustrates how to emit EVM events in state-changing Go contract logic by packing topics and data and invoking StateDB.AddLog. This snippet requires a generated event packer (PackMyEvent) and an accessible StateDB and BlockContext. Expected usage is inside stateful precompile functions. Inputs are event parameters for PackMyEvent; outputs involve logging to the EVM. Limitations include inability to emit events from view functions and the requirement for correct topic/data encoding and gas cost accounting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntopics, data, err := PackMyEvent(\n\ttopic1,\n\ttopic2,\n\tdata1,\n\tdata2,\n)\nif err != nil {\n\treturn nil, remainingGas, err\n}\naccessibleState.GetStateDB().AddLog(\n\tContractAddress,\n\ttopics,\n\tdata,\n\taccessibleState.GetBlockContext().Number().Uint64(),\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Validator Weight\nDESCRIPTION: Internal function to calculate the validator weight based on the staked amount and a conversion factor.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _calculateValidatorWeight(uint256 amount) internal view returns (uint64) {\n    return uint64(amount / weightToValueFactor);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Configure Method for Default Values\nDESCRIPTION: The Configure method implementation that reads the DefaultString value from the Config struct and stores it using the StoreString function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/10-define-default-values-via-genesis.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (*configurator) Configure(chainConfig contract.ChainConfig, cfg precompileconfig.Config, state contract.StateDB, _ contract.BlockContext) error {\n    config, ok := cfg.(*Config)\n    if !ok {\n        return fmt.Errorf(\"incorrect config %T: %v\", config, config)\n    }\n    // CUSTOM CODE STARTS HERE\n    StoreString(state, config.DefaultString)\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Calculator Plus Precompile Contract Implementation\nDESCRIPTION: Generated Go code for the calculator plus precompile contract including input/output structs, gas costs, and function implementations for modulo, power of three, and fraction simplification operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/02-generating-precompile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Code generated\n// This file is a generated precompile contract config with stubbed abstract functions.\n// The file is generated by a template. Please inspect every code and comment in this file before use.\n\npackage calculatorplus\n\nimport (\n    \"errors\"\n    \"fmt\"\n    \"math/big\"\n\n    \"github.com/ava-labs/subnet-evm/accounts/abi\"\n    \"github.com/ava-labs/subnet-evm/precompile/contract\"\n    \"github.com/ava-labs/subnet-evm/vmerrs\"\n\n    _ \"embed\"\n\n    \"github.com/ethereum/go-ethereum/common\"\n)\n\nconst (\n    ModuloPlusGasCost uint64 = 1\n    PowOfThreeGasCost uint64 = 1\n    SimplFracGasCost  uint64 = 1\n)\n\nvar (\n    _ = abi.JSON\n    _ = errors.New\n    _ = big.NewInt\n    _ = vmerrs.ErrOutOfGas\n    _ = common.Big0\n)\n\nvar (\n    //go:embed contract.abi\n    CalculatorplusRawABI string\n\n    CalculatorplusABI = contract.ParseABI(CalculatorplusRawABI)\n\n    CalculatorplusPrecompile = createCalculatorplusPrecompile()\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring HelloWorld Precompile State in Go\nDESCRIPTION: Initializes state for the HelloWorld precompile contract by setting a default greeting and configuring the allow list. This function depends on the implemented Config struct, uses the StoreGreeting helper to persist state, and invokes AllowListConfig.Configure for access control. Requires the Go Ethereum-compatible StateDB, EVM context, contract config types, and a correct implementation of StoreGreeting. Inputs include EVM chainConfig, precompile config, and state database, with output being an error or nil; incorrect configs result in errors.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst defaultGreeting = \"Hello World!\"\n\n// Configure configures [state] with the given [cfg] precompileconfig.\n// This function is called by the EVM once per precompile contract activation.\n// You can use this function to set up your precompile contract's initial state,\n// by using the [cfg] config and [state] stateDB.\nfunc (*configurator) Configure(chainConfig contract.ChainConfig, cfg precompileconfig.Config, state contract.StateDB, _ contract.BlockContext) error {\n\tconfig, ok := cfg.(*Config)\n\tif !ok {\n\t\treturn fmt.Errorf(\"incorrect config %T: %v\", config, config)\n\t}\n\t// CUSTOM CODE STARTS HERE\n\n\t// This will be called in the first block where HelloWorld stateful precompile is enabled.\n\t// 1) If BlockTimestamp is nil, this will not be called\n\t// 2) If BlockTimestamp is 0, this will be called while setting up the genesis block\n\t// 3) If BlockTimestamp is 1000, this will be called while processing the first block\n\t// whose timestamp is >= 1000\n\t//\n\t// Set the initial value under [common.BytesToHash([]byte(\"storageKey\")] to \"Hello World!\"\n\tStoreGreeting(state, defaultGreeting)\n\t// AllowList is activated for this precompile. Configuring allowlist addresses here.\n\treturn config.AllowListConfig.Configure(state, ContractAddress)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IERC20SendAndCallReceiver Interface in Solidity\nDESCRIPTION: This interface defines the receiveTokens function for contracts that handle receiving ERC20 token transfers. It includes parameters for source blockchain ID, origin addresses, token address, amount, and payload.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/03-send-and-call-receivers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20SendAndCallReceiver {\n    function receiveTokens(\n        bytes32 sourceBlockchainID,\n        address originTokenTransferrerAddress,\n        address originSenderAddress,\n        address token,\n        uint256 amount,\n        bytes calldata payload\n    ) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Chainlink VRF Callback and Sending Cross-Chain Response in Solidity\nDESCRIPTION: This function processes the callback from Chainlink VRF, encodes the random words, and sends them back as a cross-chain message to the original requester. It uses the TeleporterMessenger to facilitate cross-chain communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/03-orchestrating-vrf-requests.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal override {\n    require(pendingRequests[requestId].destinationAddress != address(0), \"Invalid request ID\");\n    // Create CrossChainResponse struct\n    CrossChainResponse memory crossChainResponse = CrossChainResponse({\n        requestId: requestId,\n        randomWords: randomWords\n    });\n    bytes memory encodedMessage = abi.encode(crossChainResponse);\n    // Send cross chain message using ITeleporterMessenger interface\n    TeleporterMessageInput memory messageInput = TeleporterMessageInput({\n        destinationBlockchainID: pendingRequests[requestId].destinationBlockchainId,\n        destinationAddress: pendingRequests[requestId].destinationAddress,\n        feeInfo: TeleporterFeeInfo({ feeTokenAddress: address(0), amount: 0 }),\n        requiredGasLimit: 100000,\n        allowedRelayerAddresses: new address[](0),\n        message: encodedMessage\n    });\n    teleporterMessenger.sendCrossChainMessage(messageInput);\n    delete pendingRequests[requestId];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchains with cURL\nDESCRIPTION: Shows how to create blockchains using a cURL POST request to the ANR API, specifying VM name, genesis file, and subnet ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/createblockchains' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"blockchainSpecs\": [\n    {\n      \"vm_name\": \"subnetevm\",\n      \"genesis\": \"/path/to/genesis.json\", \n      \"subnet_id\": \"p433wpuXyJiDhyazPYyZMJeaoPSW76CBZ2x7wrVPLgvokotXz\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Checking ERC-20 Token Balance using Cast on C-Chain\nDESCRIPTION: This command uses Cast to call the balanceOf function of the deployed ERC-20 token contract on the local C-Chain. It checks the balance of the funded address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/02-deploy-erc-20-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c $ERC20_C_CHAIN \"balanceOf(address)(uint256)\" $FUNDED_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: FeeManager Precompile Solidity Interface - Solidity\nDESCRIPTION: Defines the IFeeManager Solidity interface implemented by the FeeConfigManager precompile, which extends IAllowList for access control. The interface provides functions to set and read dynamic fee configuration parameters, retrieve the last change block, and emit events on config changes. Prerequisites are a Solidity ^0.8.0 environment and the IAllowList contract, with all config parameters passed as uint256. Only addresses with the appropriate permissions may invoke configuration methods. Outputs are either event emissions or configuration state queries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./IAllowList.sol\";\n\ninterface IFeeManager is IAllowList {\n  struct FeeConfig {\n    uint256 gasLimit;\n    uint256 targetBlockRate;\n    uint256 minBaseFee;\n    uint256 targetGas;\n    uint256 baseFeeChangeDenominator;\n    uint256 minBlockGasCost;\n    uint256 maxBlockGasCost;\n    uint256 blockGasCostStep;\n  }\n  event FeeConfigChanged(\n    address indexed sender,\n    FeeConfig oldFeeConfig,\n    FeeConfig newFeeConfig\n  );\n\n  // Set fee config fields to contract storage\n  function setFeeConfig(\n    uint256 gasLimit,\n    uint256 targetBlockRate,\n    uint256 minBaseFee,\n    uint256 targetGas,\n    uint256 baseFeeChangeDenominator,\n    uint256 minBlockGasCost,\n    uint256 maxBlockGasCost,\n    uint256 blockGasCostStep\n  ) external;\n\n  // Get fee config from the contract storage\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint256 gasLimit,\n      uint256 targetBlockRate,\n      uint256 minBaseFee,\n      uint256 targetGas,\n      uint256 baseFeeChangeDenominator,\n      uint256 minBlockGasCost,\n      uint256 maxBlockGasCost,\n      uint256 blockGasCostStep\n    );\n\n  // Get the last block number changed the fee config from the contract storage\n  function getFeeConfigLastChangedAt()\n    external\n    view\n    returns (uint256 blockNumber);\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Avalanche Devnet\nDESCRIPTION: Command suite for managing development networks including subnet deployment and wizard-based setup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_95\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing PrivyProvider in Next.js (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to wrap a Next.js page component (`Home`) with the `PrivyProvider`. It initializes Privy with the required `appId` obtained from the Privy dashboard and a configuration object. The configuration specifies appearance settings (theme, accent color, logo), enables embedded wallets for users without existing ones (`createOnLogin: 'users-without-wallets'`), sets the default and supported chain (using the previously defined `echo` chain object), and lists the allowed login methods (email, external wallet, Google, Apple).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrivyProvider } from '@privy-io/react-auth';\nimport { echo } from './chains'; // Assuming echo is defined in './chains.ts'\n\nexport default function Home() {\n  const content = <div>Your App Content Here</div>; // Placeholder for actual app content\n\n  return (\n    <PrivyProvider\n      appId=\"your-privy-app-id\" // Replace with your actual Privy App ID\n      config={{\n        appearance: {\n          theme: 'dark',\n          accentColor: '#e84242',\n          logo: 'https://your-logo-url', // Replace with your logo URL\n        },\n        embeddedWallets: {\n          createOnLogin: 'users-without-wallets',\n        },\n        defaultChain: echo,\n        supportedChains: [echo],\n        loginMethods: ['email', 'wallet', 'google', 'apple']\n      }}\n    >\n      { content }\n    </PrivyProvider>\n  );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Allow List in Genesis File (JSON)\nDESCRIPTION: JSON configuration for activating the TxAllowList precompile in the genesis file. It sets up an admin address that can manage the allow list for transaction submissions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"txAllowListConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Request Body for Smart Contract Verification on Snowtrace\nDESCRIPTION: JSON structure for the body of an API call to verify a smart contract on Snowtrace. It includes parameters such as contract address, source code, compiler version, and optimization settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contractaddress\": \"YOUR_CONTRACT_ADDRESS\",\n  \"sourceCode\": \"YOUR_FLATTENED_SOURCE_CODE\",\n  \"codeformat\": \"solidity-single-file\",\n  \"contractname\": \"YOUR_CONTRACT_NAME\",\n  \"compilerversion\": \"YOUR_COMPILER_VERSION\",\n  \"optimizationUsed\": \"YOUR_OPTIMIZATION_VALUE\",  // 0 if not optimized, 1 if optimized\n  \"runs\": \"YOUR_OPTIMIZATION_RUNS\",  // remove if not applicable\n  \"licenseType\": \"YOUR_LICENSE_TYPE\",  // 1 if not specified\n  \"apikey\": \"API_KEY_PLACEHOLDER\", // you don't need an API key, use a placeholder\n  \"evmversion\": \"YOUR_EVM_VERSION_ON_REMIX\",\n  \"constructorArguments\": \"YOUR_CONSTRUCTOR_ARGUMENTS\"  // Remove if not applicable\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the BuilderKit Button Component in TSX\nDESCRIPTION: Demonstrates how to import and use the `Button` component from `@avalabs/builderkit`. Shows basic usage with a `label` and `action` prop, how to display a loading state by setting the `status` prop to 'loading', and how to disable the button by setting `status` to 'disabled'. Requires the `@avalabs/builderkit` package.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/control/button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { Button } from '@avalabs/builderkit';\n\n// Basic usage\n<Button \n  label=\"Click me\"\n  action={() => console.log('Button clicked')}\n/>\n\n// With loading state\n<Button \n  label=\"Processing...\"\n  action={() => {}}\n  status=\"loading\"\n/>\n\n// Disabled state\n<Button \n  label=\"Unavailable\"\n  action={() => {}}\n  status=\"disabled\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Encoded Message via Teleporter in Solidity\nDESCRIPTION: This function demonstrates how to encode multiple values and send them as a cross-chain message using the Teleporter protocol. It includes setting up the message parameters and calling the sendCrossChainMessage function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/02-encoding-multiple-values.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sendMessage(address destinationAddress) external returns (uint256 messageID) {\n  string someString = \"test\";\n  uint someNumber = 43;\n  address someAddress = address(0);\n\n  bytes message = abi.encode(\n      someString,\n      someNumber,\n      someAddress\n  );\n\n  return teleporterMessenger.sendCrossChainMessage(\n      TeleporterMessageInput({\n        destinationChainID: destinationChainID,\n        destinationAddress: destinationAddress,\n        feeInfo: TeleporterFeeInfo({\n          feeTokenAddress: feeContractAddress,\n          amount: adjustedFeeAmount\n        }),\n        requiredGasLimit: requiredGasLimit,\n        allowedRelayerAddresses: new address[](0),\n        message: message\n      })\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Blockchain with CLI\nDESCRIPTION: Command syntax and flags for creating a new blockchain using Avalanche CLI. Supports various configurations including Subnet-EVM, custom VMs, and different consensus mechanisms like PoA and PoS.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Initiating Delegator Registration with Native Tokens\nDESCRIPTION: Function to initiate delegator registration using native tokens. It is payable and takes only the validation ID as a parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateDelegatorRegistration(\n    bytes32 validationID\n) external payable nonReentrant returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: ERC721Base Contract Implementation\nDESCRIPTION: Sample implementation of an ERC721 base contract that inherits from ThirdWeb's ERC721Base.sol. The contract includes constructor parameters for name, symbol, royalty recipient, and royalty percentage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/thirdweb.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.x;\n\nimport \"@third-web/dev/contracts/base/ERC721Base.sol\";\n\ncontract Contract is ERC721Base {\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    ) ERC721Base(_name,_symbol,_royaltyRecipient,_royaltyBps){}\n }\n```\n\n----------------------------------------\n\nTITLE: BlockContext Interface Definition in Go\nDESCRIPTION: Interface that provides information about the current block including number and timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/09-stateful-precompiles/00-intro.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype BlockContext interface {\n    Number() *big.Int\n    Timestamp() *big.Int\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Faucet Flow with Individual Components in TSX\nDESCRIPTION: Illustrates how to construct a custom faucet interface using individual, composable components (`FaucetProvider`, `TokenSelector`, `FaucetButton`, `RequestStatus`, `BalanceDisplay`) exported from `@avalabs/builderkit/faucet/components`. This approach allows for greater flexibility in layout and functionality compared to the default `Faucet` component. Components must be wrapped within `FaucetProvider`, which manages the state and logic, requiring `chainId` and `tokens` props.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/faucet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { \n  FaucetProvider,\n  TokenSelector,\n  FaucetButton,\n  RequestStatus,\n  BalanceDisplay\n} from '@avalabs/builderkit/faucet/components';\n\nfunction CustomFaucet() {\n  const tokens = [\n    // Array of tokens following the BaseToken interface\n    // See /docs/builderkit/tokens for configuration details\n    ...\n  ];\n\n  return (\n    <FaucetProvider\n      chainId={43113}\n      tokens={tokens}\n    >\n      <div className=\"space-y-4\">\n        <TokenSelector onSelect={handleTokenSelect} />\n        <BalanceDisplay token={selectedToken} address={userAddress} />\n        <FaucetButton token={selectedToken} />\n        <RequestStatus requestId={currentRequestId} />\n      </div>\n    </FaucetProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing TypeScript Validator Script with ts-node via Node.js - Bash\nDESCRIPTION: This snippet shows the bash command for running a TypeScript script (`validate.ts`) located in the `examples/p-chain/` directory using ts-node/esm as a loader with Node.js. The command enables execution of ES module TypeScript files directly in the terminal without a pre-build step. Dependencies include Node.js, the `ts-node` package, and access to the Avalanche Fuji network configured within the script. The command expects the correct file path and environment settings for AVAX Fuji; it outputs the transaction ID on successful submission.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/node-validator.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm examples/p-chain/validate.ts\n```\n\n----------------------------------------\n\nTITLE: Sending Incentivized Cross-Chain Message\nDESCRIPTION: Calls the 'sendMessage' function on the sender contract to send an incentivized message to the receiver contract on the custom blockchain. Includes the receiver address, message content, and ERC20 fee address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $SENDER_ADDRESS \"sendMessage(address, string, address)\" $RECEIVER_ADDRESS \"Hello\" $ERC20_fee_address\n```\n\n----------------------------------------\n\nTITLE: Implementing Snowball Algorithm in Pseudocode\nDESCRIPTION: This pseudocode demonstrates the core logic of the Snowball algorithm, a building block of Avalanche consensus. It shows how nodes repeatedly sample other nodes to converge on a decision.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/avalanche-consensus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\npreference := pizza\nconsecutiveSuccesses := 0\nwhile not decided:\n  ask k random people their preference\n  if >= α give the same response:\n    preference := response with >= α\n    if preference == old preference:\n      consecutiveSuccesses++\n    else:\n      consecutiveSuccesses = 1\n  else:\n    consecutiveSuccesses = 0\n  if consecutiveSuccesses > β:\n    decide(preference)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Mapping - Solidity\nDESCRIPTION: Demonstrates the basic syntax for declaring a mapping in Solidity, which stores key-value pairs as a state variable. The mapping can only be defined at the state variable level, not within functions. No dependencies are required beyond a Solidity contract; key and value types must be specified. This snippet shows defining a mapping from an arbitrary <key-type> to a <value-type> via generic syntax.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(<key-type> => (value-type)) <optional-visibility> <mapping-name>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Avalanche L1 Information using Blockchain Describe Command\nDESCRIPTION: This command retrieves detailed information about a specific Avalanche L1 chain, including RPC URL, Blockchain ID, Teleporter Messenger address, and Teleporter Registry address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe <chain1>\n```\n\n----------------------------------------\n\nTITLE: Implementing sendAndCall Interface in Solidity for Cross-Chain Token Transfers\nDESCRIPTION: The sendAndCall function in the token transferrer contracts allows bridging tokens and interacting with smart contracts on other chains. It grants allowance, encodes messages, checks execution success, manages allowances, and handles fallback scenarios.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/01-intro.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20SendAndCallReceiver {\n    function receiveToken(/* parameters */) external;\n}\n\ninterface INativeSendAndCallReceiver {\n    function receiveToken(/* parameters */) external;\n}\n\ncontract TokenTransferrer {\n    function sendAndCall(/* parameters */) external {\n        // Grant allowance to destination contract\n        // Encode message for receiveToken function\n        // Check execution success\n        // Retrieve remaining allowance\n        // Remove allowance\n        // Handle fallback scenarios\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Avalanche Blockchain Configuration\nDESCRIPTION: Command to write the details of an existing Avalanche Blockchain deploy to a file. It prompts for an output path or accepts one via the --output flag.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain export [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Teleporter Receiver Contract in Solidity\nDESCRIPTION: A Solidity contract that implements ITeleporterReceiver interface to receive and store messages sent through the Teleporter protocol. The contract validates the message sender and decodes the received message into a string format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/06-create-receiver-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\n// SPDX-License-Identifier: Ecosystem\n\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"@teleporter/ITeleporterReceiver.sol\";\n\ncontract ReceiverOnSubnet is ITeleporterReceiver {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    string public lastMessage;\n\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\n        // Only the Interchain Messaging receiver can deliver a message.\n        require(msg.sender == address(messenger), \"ReceiverOnSubnet: unauthorized TeleporterMessenger\");\n\n        // Store the message.\n        lastMessage = abi.decode(message, (string));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subnet-EVM Genesis File in JSON\nDESCRIPTION: This JSON object represents a Genesis file for an Avalanche Subnet-EVM. It defines critical configuration parameters such as the chain ID, EIP activation blocks, fee settings (`feeConfig`), contract deployer allowlist (`contractDeployerAllowListConfig`), initial account balances (`alloc`), and other blockchain initialization values. These parameters dictate the initial state and operational rules of the custom blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/08-customizability/01-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 99999,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"subnetEVMTimestamp\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 20000000,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 500000\n    },\n    \"contractDeployerAllowListConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\n        \"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"\n      ]\n    }\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    },\n    \"0x0Fa8EA536Be85F32724D57A37758761B86416123\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0x1312D00\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Token Amount Inputs with Validation and Price Conversion using BuilderKit in TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the TokenInput React component to handle token amount entry, validation, and formatting. 'value' represents the current input state, 'onChange' is called on updates, and 'token' specifies the relevant asset. Additional features include enforcing a maximum allowed amount (maxAmount), displaying a 'max' button, and optionally showing price conversion to USD via a priceOracle. This requires TokenInput from @avalabs/builderkit and custom logic for state and price data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenInput } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenInput\n  value={amount}\n  onChange={setAmount}\n  token=\"AVAX\"\n/>\n\n// With balance validation\n<TokenInput\n  value={amount}\n  onChange={setAmount}\n  token=\"USDC\"\n  maxAmount={balance}\n  showMax\n/>\n\n// With price conversion\n<TokenInput\n  value={amount}\n  onChange={setAmount}\n  token=\"AVAX\"\n  showUsdPrice\n  priceOracle={priceOracle}\n/>\n```\n\n----------------------------------------\n\nTITLE: FeeManager Precompile Solidity Interface\nDESCRIPTION: The full Solidity interface for the FeeManager precompile. This interface defines methods for setting and retrieving fee configurations, tracking changes, and managing access permissions through the AllowList functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/feemanager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IFeeManager {\n  struct FeeConfig {\n    uint256 gasLimit;\n    uint256 targetBlockRate;\n    uint256 minBaseFee;\n    uint256 targetGas;\n    uint256 baseFeeChangeDenominator;\n    uint256 minBlockGasCost;\n    uint256 maxBlockGasCost;\n    uint256 blockGasCostStep;\n  }\n  event FeeConfigChanged(address indexed sender, FeeConfig oldFeeConfig, FeeConfig newFeeConfig);\n\n  // Set fee config fields to contract storage\n  function setFeeConfig(\n    uint256 gasLimit,\n    uint256 targetBlockRate,\n    uint256 minBaseFee,\n    uint256 targetGas,\n    uint256 baseFeeChangeDenominator,\n    uint256 minBlockGasCost,\n    uint256 maxBlockGasCost,\n    uint256 blockGasCostStep\n  ) external;\n\n  // Get fee config from the contract storage\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint256 gasLimit,\n      uint256 targetBlockRate,\n      uint256 minBaseFee,\n      uint256 targetGas,\n      uint256 baseFeeChangeDenominator,\n      uint256 minBlockGasCost,\n      uint256 maxBlockGasCost,\n      uint256 blockGasCostStep\n    );\n\n  // Get the last block number changed the fee config from the contract storage\n  function getFeeConfigLastChangedAt() external view returns (uint256 blockNumber);\n\n  // IAllowList\n  event RoleSet(uint256 indexed role, address indexed account, address indexed sender, uint256 oldRole);\n\n  // Set [addr] to have the admin role over the precompile contract.\n  function setAdmin(address addr) external;\n\n  // Set [addr] to be enabled on the precompile contract.\n  function setEnabled(address addr) external;\n\n  // Set [addr] to have the manager role over the precompile contract.\n  function setManager(address addr) external;\n\n  // Set [addr] to have no role for the precompile contract.\n  function setNone(address addr) external;\n\n  // Read the status of [addr].\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Identity Context with useIdentityContext Hook in TypeScript\nDESCRIPTION: Shows how to access the address from the Identity provider using the useIdentityContext hook. The example imports the hook from @avalabs/builderkit, extracts the address, and renders it inside a div. This pattern requires that MyComponent is rendered as a child of an Identity provider, and highlights how to access context-provided values deep in the component tree.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/identity.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useIdentityContext } from '@avalabs/builderkit';\\n\\nfunction MyComponent() {\\n  const { address } = useIdentityContext();\\n  return <div>Current address: {address}</div>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ICTT Token Transfers with a React Component (TypeScript/React)\nDESCRIPTION: Provides an example of embedding ICTT transfer logic inside a React component named ICTTTransfer, leveraging the useICTT hook from BuilderKit. The component initializes key transfer utilities, sets up a handler that generates a cross-chain transaction (including chain and token specification), and integrates with a TransactionButton component for UI execution and message ID retrieval upon confirmation. Dependencies include React, BuilderKit's useICTT, and a TransactionButton UI component; key parameters mirror those of the ICTT hook API. Limitations: requires correct prop and dependency injection, BigNumber support, and assumes on-chain readiness and log event reliability.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/ictt.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nfunction ICTTTransfer() {\n  const { getInterchainMessenger, send, getMessageId } = useICTT();\n  \n  const handleTransfer = async () => {\n    // Get messenger contract\n    const messenger = await getInterchainMessenger(43114);\n    \n    // Generate transfer transaction\n    const data = send(\n      transfererContract,\n      \"0x0000000000000000000000000000000000000000000000000000000000002aef\", // 43114 in hex\n      destinationTransferer,\n      receiverAddress,\n      \"0x0000000000000000000000000000000000000000\", // Zero address for native fee\n      new BigNumber(\"1.0\"),\n      18,\n      false\n    );\n    \n    return (\n      <TransactionButton\n        chain_id={43114}\n        title=\"Transfer Tokens\"\n        description=\"Sending tokens cross-chain\"\n        data={data}\n        onTransactionConfirmed={(receipt) => {\n          const messageId = getMessageId(receipt.logs[0]);\n          console.log('Transfer message ID:', messageId);\n        }}\n      />\n    );\n  };\n  \n  return (\n    <div>\n      {handleTransfer()}\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Greeting Action in Go for HyperSDK\nDESCRIPTION: Implements a custom Greeting action that reads user balance and returns a formatted greeting message. The action demonstrates key HyperSDK concepts including state management, action execution, and result handling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/03-creating-actions/01-create-custom-action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage actions\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n\n\t\"github.com/ava-labs/avalanchego/ids\"\n\n\t\"github.com/ava-labs/hypersdk-starter/consts\"\n\t\"github.com/ava-labs/hypersdk-starter/storage\"\n\t\"github.com/ava-labs/hypersdk/chain\"\n\t\"github.com/ava-labs/hypersdk/codec\"\n\t\"github.com/ava-labs/hypersdk/state\"\n\t\"github.com/ava-labs/hypersdk/utils\"\n)\n\nvar _ chain.Action = (*Greeting)(nil)\n\ntype Greeting struct {\n\tName string `serialize:\"true\" json:\"name\"`\n}\n\nfunc (*Greeting) GetTypeID() uint8 {\n\treturn consts.HiID\n}\n\nfunc (g *Greeting) StateKeys(actor codec.Address) state.Keys {\n\treturn state.Keys{\n\t\tstring(storage.BalanceKey(actor)): state.Read,\n\t}\n}\n\nfunc (g *Greeting) Execute(\n\tctx context.Context,\n\t_ chain.Rules,\n\tmu state.Mutable,\n\ttimestamp int64,\n\tactor codec.Address,\n\t_ ids.ID,\n) (codec.Typed, error) {\n\tbalance, err := storage.GetBalance(ctx, mu, actor)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tcurrentTime := time.Unix(timestamp/1000, 0).Format(\"January 2, 2006\")\n\tgreeting := fmt.Sprintf(\n\t\t\"Hi, dear %s! Today, %s, your balance is %s %s.\",\n\t\tg.Name,\n\t\tcurrentTime,\n\t\tutils.FormatBalance(balance),\n\t\tconsts.Symbol,\n\t)\n\n\treturn &GreetingResult{\n\t\tGreeting: greeting,\n\t}, nil\n}\n\nfunc (*Greeting) ComputeUnits(chain.Rules) uint64 {\n\treturn 1\n}\n\nfunc (*Greeting) ValidRange(chain.Rules) (int64, int64) {\n\treturn -1, -1\n}\n\ntype GreetingResult struct {\n\tGreeting string `serialize:\"true\" json:\"greeting\"`\n}\n\nvar _ codec.Typed = (*GreetingResult)(nil)\n\nfunc (g *GreetingResult) GetTypeID() uint8 {\n\treturn consts.HiID\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AVAX API Call Example in Shell\nDESCRIPTION: This curl command demonstrates how to make an API call to import AVAX to the C-Chain. It includes the destination address, source chain, and user credentials.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avax.importAVAX\",\n    \"params\" :{\n        \"to\":\"0x4b879aff6b3d24352Ac1985c1F45BA4c3493A398\",\n        \"sourceChain\":\"X\",\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/avax\n```\n\n----------------------------------------\n\nTITLE: Defining Validator and Delegation Data Structures in Solidity\nDESCRIPTION: Defines the `Validator` and `Delegation` structs in Solidity. These structures hold the state information for individual validators and delegations within the staking contract, tracking details like status, IDs, amounts, timeframes, fees, and ownership.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Validator {\n    ValidatorStatus status;\n    bytes nodeID;\n    uint64 startingWeight;\n    uint64 sentNonce;\n    uint64 receivedNonce;\n    uint64 weight;\n    uint64 startTime;\n    uint64 endTime;\n    uint64 delegationFeeBips;\n    uint64 minimumStakeDuration;\n    uint256 stakeAmount;\n    address owner;\n}\n\nstruct Delegation {\n    DelegationStatus status;\n    bytes32 validationID;\n    uint256 amount;\n    uint64 startTime;\n    uint64 endTime;\n    address owner;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Reward Logic for PoS Validators in Solidity\nDESCRIPTION: Complete example of creating a custom validator manager with modified reward calculation logic. This contract inherits from PoSValidatorManager and overrides the reward calculation functions to implement custom distribution mechanisms.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/custom-validator-manager.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\nimport \"./PoSValidatorManager.sol\";\n\ncontract CustomRewardValidatorManager is PoSValidatorManager {\n    function calculateValidatorReward(address validator) internal view override returns (uint256) {\n        // Implement custom reward calculation logic\n        return super.calculateValidatorReward(validator) * 2; // Example: double the reward\n    }\n\n    function calculateDelegatorReward(address delegator) internal view override returns (uint256) {\n        // Implement custom delegator reward calculation logic\n        return super.calculateDelegatorReward(delegator) / 2; // Example: halve the reward\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Token Minting Interface in Solidity\nDESCRIPTION: Interface definition for the Native Minter Precompile that enables minting of new native tokens. It includes a function to mint tokens to a specified address and an event to track minting operations. Only addresses with the Enabled role can execute the minting function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/05-native-minter-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface INativeMinter {\n  event NativeCoinMinted(address indexed sender, address indexed recipient, uint256 amount);\n\n  function mintNativeCoin(address addr, uint256 amount) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Private Key with Avalanche-CLI in Bash\nDESCRIPTION: This command removes the private key identified as 'mytestkey' using Avalanche-CLI. It requires that the key exists and that the user confirms deletion, as this operation permanently removes key data. Deletion is irreversible, and it is recommended to ensure an available key for any transactions before executing this command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche key delete mytestkey\n```\n\n----------------------------------------\n\nTITLE: Initializing CalculatorPlus Precompile in Go\nDESCRIPTION: This snippet defines constants, imports, and initializes the CalculatorPlus precompile contract. It sets up the ABI and creates the singleton precompile instance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tModuloPlusGasCost uint64 = 1 /* SET A GAS COST HERE */\n\tPowOfThreeGasCost uint64 = 1 /* SET A GAS COST HERE */\n\tSimplFracGasCost  uint64 = 1 /* SET A GAS COST HERE */\n)\n\n// Singleton StatefulPrecompiledContract and signatures.\nvar (\n\t//go:embed contract.abi\n\tCalculatorplusRawABI string\n\n\tCalculatorplusABI = contract.ParseABI(CalculatorplusRawABI)\n\n\tCalculatorplusPrecompile = createCalculatorplusPrecompile()\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Collectible Component in React\nDESCRIPTION: Demonstrates how to import and use the Collectible component with basic configuration to display an NFT by specifying chain_id, contract address, and token_id.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/collectibles/collectible.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Collectible } from '@avalabs/builderkit';\n\n// Basic usage\n<Collectible \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  token_id={1}\n/>\n\n// With custom styling\n<Collectible \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  token_id={1}\n  className=\"border-2 rounded-xl\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC-20 Tokens\nDESCRIPTION: Command to transfer ERC-20 tokens using Cast, specifying the contract address, recipient address, and amount in ether units.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/08-transfer-an-erc-20-token.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send $ERC20_CONTRACT_L1 --value 0 --private-key $PK \"transfer(address,uint256)\" $MYADDRESS 200ether --rpc-url myblockchain\n```\n\n----------------------------------------\n\nTITLE: AllowList Interface Definition\nDESCRIPTION: Solidity interface defining the AllowList functionality for precompile contracts with role management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAllowList {\n  event RoleSet(\n    uint256 indexed role,\n    address indexed account,\n    address indexed sender,\n    uint256 oldRole\n  );\n\n  function setAdmin(address addr) external;\n  function setEnabled(address addr) external;\n  function setManager(address addr) external;\n  function setNone(address addr) external;\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Protobuf Specification for Unsigned Create Chain Transaction in Avalanche\nDESCRIPTION: A Protobuf message definition for the CreateChainTx structure, specifying the fields and their types for an unsigned Create Chain transaction in Avalanche. This provides a standardized format for serializing transaction data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_42\n\nLANGUAGE: text\nCODE:\n```\nmessage CreateChainTx {\n    BaseTx base_tx = 1;               // size(base_tx)\n    SubnetID subnet_id = 2;           // 32 bytes\n    ChainName chain_name = 3;         // 2 + len(chain_name) bytes\n    VMID vm_id = 4;                   // 32 bytes\n    FxIDs fx_ids = 5;                 // 4 + size(fx_ids) bytes\n    GenesisData genesis_data = 6      // 4 + size(genesis_data) bytes\n    SubnetAuth subnet_auth = 7;       // size(subnet_auth) bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Hardhat Test Script for StringStore in TypeScript\nDESCRIPTION: This TypeScript file sets up the Hardhat test environment for StringStore. It deploys the test contract, defines test cases using the test helper function, and specifies the precompile address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/11-testing-precompile-hardhat.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\"\nimport { test } from \"@avalabs/subnet-evm-contracts\"\nimport { factory } from \"typescript\"\n\nconst STRINGSTORE_ADDRESS = \"0x0300000000000000000000000000000000000005\"\n\ndescribe(\"StringStoreTest\", function() {\n    this.timeout(\"30s\")\n\n    beforeEach(\"Setup DS-Test\", async function () {\n        const stringStorePromise = ethers.getContractAt(\"IStringStore\", STRINGSTORE_ADDRESS)\n\n        return ethers.getContractFactory(\"StringStoreTest\").then(factory => factory.deploy())\n        .then(contract => {\n          this.testContract = contract\n          return contract.deployed().then(() => contract)\n        })\n    })\n\n    test(\"Testing get function\", \"step_getString\")\n\n    test(\"Testing get and set function\", \"step_getSet\")\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleCalculatorReceiverOnSubnet Contract in Solidity\nDESCRIPTION: This Solidity contract implements a simple calculator receiver that can accept two numbers via cross-chain messaging, add them, and store the result. It uses the Teleporter protocol for interchain communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/04-create-simple-calulcator-receiver.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"@teleporter/ITeleporterReceiver.sol\";\n\ncontract SimpleCalculatorReceiverOnSubnet is ITeleporterReceiver {\n    ITeleporterMessenger public immutable teleporterMessenger =\n        ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    uint256 public result_num;\n\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\n        // Only the Interchain Messaging receiver can deliver a message.\n        require(\n            msg.sender == address(teleporterMessenger), \"CalculatorReceiverOnSubnet: unauthorized TeleporterMessenger\"\n        );\n\n        (uint256 a, uint256 b) = abi.decode(message, (uint256, uint256));\n        _calculatorAdd(a, b);\n    }\n\n    function _calculatorAdd(uint256 _num1, uint256 _num2) internal {\n        result_num = _num1 + _num2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Bytes in Solidity\nDESCRIPTION: Shows how to decode a bytes message back into its original values using abi.decode() with proper type specifications\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/02-recap-bytes-encoding-decoding.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(\n  string memory someString,\n  uint someNumber\n) = abi.decode(message, (string, uint));\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Transactions with AvaCloud SDK in TypeScript\nDESCRIPTION: This function retrieves the 20 most recent native token transactions using the AvaCloud SDK's Data API. It paginates through results and combines them into a single array of NativeTransaction objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/03-modifying-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getRecentTransactions = async () => {\n    const result = await avaCloudSDK.data.evm.transactions.listLatestTransactions({\n        pageSize: 3,\n    });\n\n    let count = 0;\n    const transactions: NativeTransaction[] = [];\n    for await (const page of result) {\n        if (count === 20) {\n            break;\n        }\n        transactions.push(...page.result.transactions);\n        count++;\n    }\n    return transactions;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FeeConfigManager in Genesis Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to activate the FeeConfigManager feature in the genesis configuration. It specifies the activation timestamp and admin addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/03-dynamic-fee-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"feeManagerConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 with Avalanche-CLI - Bash\nDESCRIPTION: This command-line snippet demonstrates deploying an Avalanche L1 blockchain configuration using the Avalanche-CLI. Users must substitute <blockchainName> with the name of their existing L1 configuration. The command prompts the user to select the network target. Dependencies include Avalanche-CLI installed and an L1 configuration to deploy. Input is the configuration name, and output is the deployment of the blockchain to the local environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Generating Random Numbers Within Range using Chainlink VRF\nDESCRIPTION: Demonstrates how to generate a random number within a specified range (1-50) using modulo operation on VRF response\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/chainlink-vrf.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fulfillRandomWords(\n  uint256, /* requestId */\n  uint256[] memory randomWords\n) internal override {\n  // Assuming only one random word was requested.\n  s_randomRange = (randomWords[0] % 50) + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Precompile Configuration Struct in Go (config.go)\nDESCRIPTION: Shows the Go struct definition for `Config` in `precompile/helloworld/config.go`. This struct implements the `precompileconfig.Config` interface and embeds `allowlist.AllowListConfig` and `precompileconfig.Upgrade` to manage access control and upgrade scheduling for the precompile. Custom configuration fields can be added here.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Config implements the precompileconfig.Config interface and\n// adds specific configuration for HelloWorld.\ntype Config struct {\n\tallowlist.AllowListConfig\n\tprecompileconfig.Upgrade\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigKey for MD5 Precompile in Go\nDESCRIPTION: Sets up the configuration key used to identify the precompile in chainConfig. This key must be unique across all precompiles and is used in genesis configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/05-configkey-and-contractaddr.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ConfigKey is the key used in json config files to specify this precompile precompileconfig.\n// must be unique across all precompiles.\nconst ConfigKey = \"md5Config\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Deployed Contract with Foundry on Avalanche Fuji Testnet\nDESCRIPTION: This command uses forge verify-contract to verify a deployed NFT contract on the Avalanche Fuji testnet. It specifies the chain ID, constructor arguments, contract address, and contract name.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nforge verify-contract --chain-id 43113 --watch --constructor-args $(cast abi-encode \"constructor(string,string)\" \"GameItem\" \"ITM\") 0x8e982a4ef70430f8317b5652bd5c28f147fbf912 NFT\n```\n\n----------------------------------------\n\nTITLE: Implementing Approval Management for NFTs in Solidity\nDESCRIPTION: Completes the Caller contract by adding a function that gives the caller approval rights to all NFTs owned by the contract. Uses the setApprovalForAll method of the ERC721 interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/03-interacting-with-erc721-tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Caller {\n​\n    address tokenAddress;\n    uint tokenId;\n​\n    function getNFTOwner() public view returns(address) {\n        return ERC721(tokenAddress).ownerOf(tokenId);\n    }\n​\n    function transferNFT() public {\n        ERC721(tokenAddress).safeTransferFrom(address(this), msg.sender, tokenId);\n    }\n​\n    function giveAllTransferRights() public {\n        ERC721(tokenAddress).setApprovalForAll(msg.sender, true);\n    }\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Precompiles in Precompile-EVM Main Plugin\nDESCRIPTION: Demonstrates how precompiles are registered in Precompile-EVM through imports in the main plugin file. Similar to Subnet-EVM, each precompile package is imported with an underscore to trigger its self-registering init function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// (c) 2019-2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/ava-labs/avalanchego/version\"\n\t\"github.com/ava-labs/subnet-evm/plugin/evm\"\n\t\"github.com/ava-labs/subnet-evm/plugin/runner\"\n\n\t// Each precompile generated by the precompilegen tool has a self-registering init function\n\t// that registers the precompile with the subnet-evm. Importing the precompile package here\n\t// will cause the precompile to be registered with the subnet-evm.\n\t_ \"github.com/ava-labs/precompile-evm/helloworld\"\n\t// ADD YOUR PRECOMPILE HERE\n\t//_ \"github.com/ava-labs/precompile-evm/{yourprecompilepkg}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Avalanche Node Configuration Log Output for Upgrade Verification (Bash/Console)\nDESCRIPTION: Sample log output from an Avalanche Node/Validator process showing the loaded chain configuration after a restart, including ChainID, EVM upgrades, fee configuration, and the currently applied precompileUpgrades section. Used for verifying that the desired JSON configuration has been properly loaded and applied. No direct dependencies, but assumes the node is properly restarted with the intended config file in place.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nINFO [08-15|15:09:36.772] <2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt Chain>\ngithub.com/ava-labs/subnet-evm/eth/backend.go:155: Initialised chain configuration\nconfig=“{ChainID: 11111 Homestead: 0 EIP150: 0 EIP155: 0 EIP158: 0 Byzantium: 0\nConstantinople: 0 Petersburg: 0 Istanbul: 0, Muir Glacier: 0, Subnet EVM: 0, FeeConfig:\n{\\“gasLimit\\“:20000000,\\“targetBlockRate\\“:2,\\“minBaseFee\\“:1000000000,\\“targetGas\\“:100000000,\\“baseFeeChangeDenominator\\“:48,\\“minBlockGasCost\\“:0,\\“maxBlockGasCost\\“:10000000,\\“blockGasCostStep\\“:500000}, AllowFeeRecipients: false, NetworkUpgrades: {\\“subnetEVMTimestamp\\“:0}, PrecompileUpgrade: {}, UpgradeConfig: {\\\"precompileUpgrades\\\":[{\\\"feeManagerConfig\\\":{\\\"adminAddresses\\\":[\\\"0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\\\"],\\\"enabledAddresses\\\":null,\\\"blockTimestamp\\\":1668950000}},{\\\"txAllowListConfig\\\":{\\\"adminAddresses\\\":[\\\"0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\\\"],\\\"enabledAddresses\\\":null,\\\"blockTimestamp\\\":1668960000}},{\\\"feeManagerConfig\\\":{\\\"adminAddresses\\\":null,\\\"enabledAddresses\\\":null,\\\"blockTimestamp\\\":1668970000,\\\"disable\\\":true}}]}, Engine: Dummy Consensus Engine}\"\n```\n\n----------------------------------------\n\nTITLE: Basic ERC-20 Token Contract Structure\nDESCRIPTION: Shows the fundamental structure of an ERC-20 token contract with the balance mapping that tracks token ownership for each address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/07-erc-20-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    \n  mapping(address account => uint256) private _balances;\n\t\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Configuration Equality Check Method in Go (config.go)\nDESCRIPTION: Shows the `Equal` method for the `Config` struct in `precompile/helloworld/config.go`. This function compares the current configuration instance with another (`s`) to check for equality, which is crucial for detecting configuration changes during upgrades. The template includes equality checks for embedded `Upgrade` and `AllowListConfig` fields and indicates where custom field comparisons should be added.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Equal returns true if [s] is a [*Config] and it has been configured identical to [c].\nfunc (c *Config) Equal(s precompileconfig.Config) bool {\n\t// typecast before comparison\n\tother, ok := (s).(*Config)\n\tif !ok {\n\t\treturn false\n\t}\n\t// CUSTOM CODE STARTS HERE\n\t// modify this boolean accordingly with your custom Config, to check if [other] and the current [c] are equal\n\t// if Config contains only Upgrade  and AllowListConfig  you can skip modifying it.\n\tequals := c.Upgrade.Equal(&other.Upgrade) && c.AllowListConfig.Equal(&other.AllowListConfig)\n\treturn equals\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts Using Forge (Shell)\nDESCRIPTION: This shell command demonstrates deploying a Solidity contract using the forge create command from the Foundry toolchain. It uses flags to specify the RPC server (--rpc-url), private key (--private-key), and contract path + name. The command assumes that $PK is set in the environment and that the target Solidity source and contract are available; successful execution will deploy the NumberStorage contract to the specified Avalanche network endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK src/my-contracts/NumberStorage.sol:NumberStorage \n```\n\n----------------------------------------\n\nTITLE: Ledger Signing Prompt for Avalanche Transaction\nDESCRIPTION: Output shown when the Avalanche-CLI is waiting for a signature from a connected Ledger hardware wallet. It displays the Ledger's P-chain address and prompts the user to confirm the transaction on their device.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nLedger address: P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\n*** Please sign TX hash on the ledger device ***\n```\n\n----------------------------------------\n\nTITLE: Handling API Requests in NextJS Server-Side Route\nDESCRIPTION: This function handles GET requests to the server-side API route. It parses the request parameters and calls the appropriate internal method based on the 'method' parameter. It supports listERC721Balances, listERC1155Balances, and listRecentTransactions methods.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/02-understanding-code.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const method = searchParams.get('method')\n  let address\n  try {\n    let result\n    switch (method) {\n      case 'listERC721Balances':\n        address = searchParams.get('address')!\n        result = await listERC721Balances(address)\n        break\n      case 'listERC1155Balances':\n        address = searchParams.get('address')!\n        result = await listErc1155Balances(address)\n        break\n      case 'listRecentTransactions':\n        address = searchParams.get('address')!\n        result = await listRecentTransactions(address)\n        break\n      default:\n        return NextResponse.json({ error: 'Invalid method' }, { status: 400 })\n    }\n    return NextResponse.json(result)\n  } catch (error) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Precompile Activation Time in Avalanche-CLI Wizard\nDESCRIPTION: After selecting the 'Transaction Allow List' precompile, the Avalanche-CLI wizard prompts for the activation time. This timestamp determines when the precompile changes will take effect network-wide. Options include relative times (5 minutes, 1 day) or a custom UTC timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n✔ Transaction Allow List\nSet parameters for the \"Manage Fee Settings\" precompile\nUse the arrow keys to navigate: ↓ ↑ → ← \n? When should the precompile be activated?:\n  ▸ In 5 minutes\n    In 1 day\n    In 1 week\n    In 2 weeks\n    Custom\n```\n\n----------------------------------------\n\nTITLE: Encoding Multiple Values with abi.encode() in Solidity\nDESCRIPTION: This snippet shows how to use abi.encode() to pack multiple values of different types (string, uint, and address) into a single bytes array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/02-encoding-multiple-values.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes message = abi.encode(\n      someString,\n      someNumber,\n      someAddress\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing simplFrac Function in Go\nDESCRIPTION: A Go function that simplifies fractions by computing their GCD. It handles zero denominator cases, manages gas costs, and includes input/output parameter packing. The function takes accessible state, caller address, and other parameters while returning simplified fraction components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc simplFrac(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {func simplFrac(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, SimplFracGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t// attempts to unpack [input] into the arguments to the SimplFracInput.\n\t// Assumes that [input] does not include selector\n\t// You can use unpacked [inputStruct] variable in your code\n\tinputStruct, err := UnpackSimplFracInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\t_ = inputStruct            // CUSTOM CODE OPERATES ON INPUT\n\tvar output SimplFracOutput // CUSTOM CODE FOR AN OUTPUT\n\n\t// If denominator is 0, return both 0\n\tif inputStruct.Denominator.Cmp(big.NewInt(0)) == 0 {\n\t\toutput.SimplDenom = big.NewInt(0)\n\t\toutput.SimplNum = big.NewInt(0)\n\t} else {\n\t\t// First, find common denominator\n\t\tvar gcd big.Int\n\t\tgcd.GCD(nil, nil, inputStruct.Numerator, inputStruct.Denominator)\n\n\t\t// Now, simplify fraction\n\t\toutput.SimplNum = big.NewInt(0).Div(inputStruct.Numerator, &gcd)\n\t\toutput.SimplDenom = big.NewInt(0).Div(inputStruct.Denominator, &gcd)\n\t}\n\n\tpackedOutput, err := PackSimplFracOutput(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC20TokenRemote Contract with Forge\nDESCRIPTION: Uses the 'forge create' command to deploy the ERC20TokenRemote contract with specific constructor arguments including the Interchain Messaging Registry Address, manager address, source blockchain ID, token home address, and token details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/03-deploy-token-remote.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain2 --private-key $PK \\\nlib/icm-contracts/contracts/ictt/TokenRemote/ERC20TokenRemote.sol:ERC20TokenRemote \\\n--constructor-args \"(${TELEPORTER_REGISTRY_CHAIN2}, ${FUNDED_ADDRESS}, ${C_CHAIN_BLOCKCHAIN_ID_HEX}, ${ERC20_HOME_C_CHAIN}, 18)\" \"TOK\" \"TOK\" 18 --broadcast\n```\n\n----------------------------------------\n\nTITLE: ABI Generation Commands using Solc\nDESCRIPTION: Bash commands to compile the Solidity interface and generate ABI file using solc compiler.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd contracts\n\nnpx solc@latest --abi ./contracts/interfaces/ICalculatorPlus.sol -o ./abis --base-path . --include-path ./node_modules\n\nmv ./abis/contracts_interfaces_ICalculatorPlus_sol_ICalculatorPlus.abi ./abis/ICalculatorPlus.abi\n```\n\n----------------------------------------\n\nTITLE: Registering a Validator with Native Tokens (AVAX) in Solidity\nDESCRIPTION: Shows the two-step process for registering a new validator using the native blockchain token (e.g., AVAX). The stake amount is sent directly with the `initiateValidatorRegistration` call using `msg.value`. Similar to the ERC20 process, `completeValidatorRegistration` is called later with a `messageIndex` to finalize the registration after off-chain confirmation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\n// 1. Initiate validator registration with 1000 AVAX\nbytes32 validationID = nativeStakingManager.initiateValidatorRegistration{value: 1000 * 10**18}(\n    nodeID,\n    blsPublicKey,\n    block.timestamp + 7 days, // registration expiry\n    pChainRemainingBalanceOwner,\n    pChainDisableOwner, \n    500, // 5% delegation fee (in basis points)\n    60 days // minimum stake duration\n);\n\n// 2. Complete registration after receiving confirmation message\nnativeStakingManager.completeValidatorRegistration(messageIndex);\n```\n\n----------------------------------------\n\nTITLE: Defining Native Minter Interface (Solidity)\nDESCRIPTION: Solidity interface for the ContractNativeMinter precompile. It extends the IAllowList interface and defines the mintNativeCoin function for minting native coins.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\n// (c) 2022-2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\npragma solidity ^0.8.0;\nimport \"./IAllowList.sol\";\n\ninterface INativeMinter is IAllowList {\n  event NativeCoinMinted(\n    address indexed sender,\n    address indexed recipient,\n    uint256 amount\n  );\n\n  // Mint [amount] number of native coins and send to [addr]\n  function mintNativeCoin(address addr, uint256 amount) external;\n}\n```\n\n----------------------------------------\n\nTITLE: AVAX Transaction Function\nDESCRIPTION: Main function for creating, signing and sending AVAX transactions with dynamic fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nconst sendAvax = async (\n  amount,\n  to,\n  maxFeePerGas = undefined,\n  maxPriorityFeePerGas = undefined,\n  nonce = undefined\n) => {\n  if (nonce == undefined) {\n    nonce = await HTTPSProvider.getTransactionCount(address);\n  }\n\n  ({ maxFeePerGas, maxPriorityFeePerGas } = await calcFeeData(\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  ));\n\n  maxFeePerGas = ethers.utils.parseUnits(maxFeePerGas, \"gwei\");\n  maxPriorityFeePerGas = ethers.utils.parseUnits(maxPriorityFeePerGas, \"gwei\");\n\n  const tx = {\n    type: 2,\n    nonce,\n    to,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    value: ethers.utils.parseEther(amount),\n    chainId,\n  };\n\n  tx.gasLimit = await HTTPSProvider.estimateGas(tx);\n\n  const signedTx = await wallet.signTransaction(tx);\n  const txHash = ethers.utils.keccak256(signedTx);\n\n  console.log(\"Sending signed transaction\");\n\n  await (await HTTPSProvider.sendTransaction(signedTx)).wait();\n\n  console.log(\n    `View transaction with nonce ${nonce}: https://testnet.snowtrace.io/tx/${txHash}`\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Plugin Main File with SHA256 and MD5 Precompiles Registered in Go\nDESCRIPTION: An updated version of plugin/main.go that demonstrates how to register the SHA256 and MD5 precompiles by importing their packages. The imports use the blank identifier (_) which runs the packages' init functions without creating a name in the current scope.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/06-register-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// (c) 2019-2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/ava-labs/avalanchego/version\"\n    \"github.com/ava-labs/subnet-evm/plugin/evm\"\n    \"github.com/ava-labs/subnet-evm/plugin/runner\"\n\n    // Each precompile generated by the precompilegen tool has a self-registering init function\n    // that registers the precompile with the subnet-evm. Importing the precompile package here\n    // will cause the precompile to be registered with the subnet-evm.\n    _ \"github.com/ava-labs/precompile-evm/sha256\"\n    _ \"github.com/ava-labs/precompile-evm/md5\" \n)\n\nconst Version = \"v0.1.4\"\n\nfunc main() {\n    versionString := fmt.Sprintf(\"Precompile-EVM/%s Avalanche L1-EVM/%s [AvalancheGo=%s, rpcchainvm=%d]\", Version, evm.Version, version.Current, version.RPCChainVMProtocol)\n    runner.Run(versionString)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Gas Costs for Precompile Operations in Go\nDESCRIPTION: Sets constant values for gas costs associated with read and write operations that serve as a baseline for precompile functions. These constants define 20,000 gas for writing to a storage slot and 5,000 gas for reading from a storage slot.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Gas costs for stateful precompiles\nconst (\n\tWriteGasCostPerSlot = 20_000\n\tReadGasCostPerSlot  = 5_000\n)\n```\n\n----------------------------------------\n\nTITLE: Using the stats Command in Avalanche CLI (Bash)\nDESCRIPTION: Shows the basic command structure for `avalanche blockchain stats`. This command is used to display validator statistics for a specified Avalanche blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain stats [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying a Solidity Smart Contract using Forge Create (Bash)\nDESCRIPTION: This bash command uses `forge create` to deploy the `NumberStorage` smart contract. It specifies the RPC URL (`local-c`), the private key for deployment via the `$PK` environment variable, the path to the contract file (`src/my-contracts/NumberStorage.sol`), the contract name (`NumberStorage`), and the `--broadcast` flag to send the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK src/my-contracts/NumberStorage.sol:NumberStorage --broadcast\n```\n\n----------------------------------------\n\nTITLE: Deploying Second Avalanche L1 Chain with Teleporter\nDESCRIPTION: Deploys an additional Avalanche L1 chain with Teleporter contracts, reusing existing C-Chain deployments. Updates relayer configuration and provides network endpoints for both chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <chain2> --local\n```\n\n----------------------------------------\n\nTITLE: Integrating Transaction Data with TransactionButton in a React App Using BuilderKit (TypeScript)\nDESCRIPTION: Demonstrates how to generate precompile transaction data (e.g., minting coins) and pass it into transaction-oriented React components. Relies on useNativeMinter and TransactionButton from @avalabs/builderkit, requiring chain ID, data, and UI texts. Useful for seamless DApp integration on Avalanche.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction App() {\\n  const { mintNativeCoin } = useNativeMinter();\\n  \\n  const handleMint = () => {\\n    const data = mintNativeCoin(\\\"0x1234...\\\", \\\"0x1000000000000000\\\");\\n    \\n    return (\\n      <TransactionButton\\n        chain_id={43114}\\n        title=\\\"Mint Tokens\\\"\\n        description=\\\"Minting native tokens\\\"\\n        data={data}\\n      />\\n    );\\n  };\\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Restricted Cross-Chain Message\nDESCRIPTION: Example of sending a cross-chain message with a specific allowed relayer address, restricting message delivery to only that relayer.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/11-restricting-the-relayer/02-allowed-relayers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nmessenger.sendCrossChainMessage( \n    TeleporterMessageInput({\n        destinationBlockchainID: 0x3861e061737eaeb8d00f0514d210ad1062bfacdb4bd22d1d1f5ef876ae3a8921,\n        destinationAddress: destinationAddress, \n        feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n        requiredGasLimit: 100000,\n        allowedRelayerAddresses: [0x321f6B73b6dFdE5C73731C39Fd9C89c7788D5EBc],\n        message: abi.encode(message)\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Installing VM Plugin Binary to AvalancheGo Plugins Directory\nDESCRIPTION: Command to copy the Subnet-EVM plugin binary to the AvalancheGo plugins directory with the correct VM ID as its filename. This example uses the WAGMI Subnet's VM ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/considerations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp subnet-evm ~/avalanche-node/plugins/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Unsigned Create Asset TX Specification\nDESCRIPTION: Protocol Buffer message definition for the Unsigned Create Asset Transaction in Avalanche. This extends the Base TX with fields for creating a new asset, including name, symbol, denomination and initial states.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_39\n\nLANGUAGE: proto\nCODE:\n```\nmessage CreateAssetTx {\n    BaseTx base_tx = 1;                       // size(base_tx)\n    string name = 2;                          // 2 bytes + len(name)\n    name symbol = 3;                          // 2 bytes + len(symbol)\n    uint8 denomination = 4;                   // 1 bytes\n    repeated InitialState initial_states = 5; // 4 bytes + size(initial_states)\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Registration with Native Tokens\nDESCRIPTION: Function to initiate validator registration using native tokens. It is similar to the ERC20 version but is payable and doesn't include a separate stake amount parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateValidatorRegistration(\n    bytes memory nodeID,\n    bytes memory blsPublicKey,\n    uint64 registrationExpiry,\n    PChainOwner memory remainingBalanceOwner,\n    PChainOwner memory disableOwner,\n    uint16 delegationFeeBips,\n    uint64 minStakeDuration\n) external payable nonReentrant returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: Using the Interchain command suite in Avalanche CLI\nDESCRIPTION: Main interchain command that provides access to subcommands for managing interoperability between blockchains, including messenger, relayer, and token transferrer operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing State Functions for TimestampVM (Rust)\nDESCRIPTION: Implementation of State functions that manage block persistence, verification, and retrieval. This includes methods for setting/getting the last accepted block, adding/removing verified blocks, and writing/reading blocks to the database storage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/state.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl State {\n    /// Persists the last accepted block Id to state.\n    /// # Errors\n    /// Fails if the db can't be updated\n    pub async fn set_last_accepted_block(&self, blk_id: &ids::Id) -> io::Result<()> {\n        let mut db = self.db.write().await;\n        db.put(LAST_ACCEPTED_BLOCK_KEY, &blk_id.to_vec())\n            .await\n            .map_err(|e| {\n                Error::new(\n                    ErrorKind::Other,\n                    format!(\"failed to put last accepted block: {e:?}\"),\n                )\n            })\n    }\n\n    /// Returns \"true\" if there's a last accepted block found.\n    /// # Errors\n    /// Fails if the db can't be read\n    pub async fn has_last_accepted_block(&self) -> io::Result<bool> {\n        let db = self.db.read().await;\n        match db.has(LAST_ACCEPTED_BLOCK_KEY).await {\n            Ok(found) => Ok(found),\n            Err(e) => Err(Error::new(\n                ErrorKind::Other,\n                format!(\"failed to load last accepted block: {e}\"),\n            )),\n        }\n    }\n\n    /// Returns the last accepted block Id from state.\n    /// # Errors\n    /// Can fail if the db can't be read\n    pub async fn get_last_accepted_block_id(&self) -> io::Result<ids::Id> {\n        let db = self.db.read().await;\n        match db.get(LAST_ACCEPTED_BLOCK_KEY).await {\n            Ok(d) => Ok(ids::Id::from_slice(&d)),\n            Err(e) => {\n                if subnet::rpc::errors::is_not_found(&e) {\n                    return Ok(ids::Id::empty());\n                }\n                Err(e)\n            }\n        }\n    }\n\n    /// Adds a block to \"`verified_blocks`\".\n    pub async fn add_verified(&mut self, block: &Block) {\n        let blk_id = block.id();\n        log::info!(\"verified added {blk_id}\");\n\n        let mut verified_blocks = self.verified_blocks.write().await;\n        verified_blocks.insert(blk_id, block.clone());\n    }\n\n    /// Removes a block from \"`verified_blocks`\".\n    pub async fn remove_verified(&mut self, blk_id: &ids::Id) {\n        let mut verified_blocks = self.verified_blocks.write().await;\n        verified_blocks.remove(blk_id);\n    }\n\n    /// Returns \"true\" if the block Id has been already verified.\n    pub async fn has_verified(&self, blk_id: &ids::Id) -> bool {\n        let verified_blocks = self.verified_blocks.read().await;\n        verified_blocks.contains_key(blk_id)\n    }\n\n    /// Writes a block to the state storage.\n    /// # Errors\n    /// Can fail if the block fails to serialize or if the db can't be updated\n    pub async fn write_block(&mut self, block: &Block) -> io::Result<()> {\n        let blk_id = block.id();\n        let blk_bytes = block.to_vec()?;\n\n        let mut db = self.db.write().await;\n\n        let blk_status = BlockWithStatus {\n            block_bytes: blk_bytes,\n            status: block.status(),\n        };\n        let blk_status_bytes = blk_status.encode()?;\n\n        db.put(&block_with_status_key(&blk_id), &blk_status_bytes)\n            .await\n            .map_err(|e| Error::new(ErrorKind::Other, format!(\"failed to put block: {e:?}\")))\n    }\n\n    /// Reads a block from the state storage using the `block_with_status_key`.\n    /// # Errors\n    /// Can fail if the block is not found in the state storage, or if the block fails to deserialize\n    pub async fn get_block(&self, blk_id: &ids::Id) -> io::Result<Block> {\n        // check if the block exists in memory as previously verified.\n        let verified_blocks = self.verified_blocks.read().await;\n        if let Some(b) = verified_blocks.get(blk_id) {\n            return Ok(b.clone());\n        }\n\n        let db = self.db.read().await;\n\n        let blk_status_bytes = db.get(&block_with_status_key(blk_id)).await?;\n        let blk_status = BlockWithStatus::from_slice(blk_status_bytes)?;\n\n        let mut blk = Block::from_slice(&blk_status.block_bytes)?;\n        blk.set_status(blk_status.status);\n\n        Ok(blk)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Removal in ValidatorManager Contract\nDESCRIPTION: This function allows the admin to initiate the removal of a validator from the network. It takes the validation ID as a parameter and is part of the two-step process for removing validators.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateValidatorRemoval(\n    bytes32 validationID\n) public onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Priority Regossip Address Configuration (JSON)\nDESCRIPTION: Shows how to set a list of Ethereum addresses for priority regossip in the chain configuration file, allowing transactions from these addresses to be preferentially rebroadcast by validators. This improves transaction inclusion speed for important actors. Requires valid 0x-prefixed addresses. Can be combined with further regossip parameter adjustments as shown in the following example.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"priority-regossip-addresses\": [\"<YOUR 0x-ADDRESS>\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Full URL for Info API on Local Node\nDESCRIPTION: Shows a complete URL for accessing the Info API on a local Avalanche node. This combines the example local base URL (`127.0.0.1:9650`) with the specific endpoint path for the Info API (`/ext/info`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Defining PullQuery Message Structure in Protobuf\nDESCRIPTION: Defines the structure of a PullQuery message, which requests the preferences of a remote peer given a container id. It includes chain_id, request_id, deadline, container_id, engine_type, and requested_height fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PullQuery {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  bytes container_id = 4;\n  EngineType engine_type = 5;\n  uint64 requested_height = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Faucet Component Usage in TSX\nDESCRIPTION: Demonstrates the basic integration of the pre-built `Faucet` component from `@avalabs/builderkit` into a React application using TSX. It shows importing the component and rendering it with the necessary `chainId` (e.g., 43113 for Fuji Testnet) and an array of `tokens` conforming to the required interface. This provides a ready-to-use faucet interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/faucet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Faucet } from '@avalabs/builderkit';\n\nfunction App() {\n  const tokens = [\n    // Array of tokens following the BaseToken interface\n    // See /docs/builderkit/tokens for configuration details\n    ...\n  ];\n\n  return (\n    <Faucet \n      chainId={43113}  // Fuji Testnet\n      tokens={tokens}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning AvalancheGo Repository\nDESCRIPTION: Clones the AvalancheGo repository from GitHub into the created directory structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs\ngit clone https://github.com/ava-labs/avalanchego.git\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens\nDESCRIPTION: Shows how to transfer tokens between accounts using the transfer() method of the ERC20 contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = await coin.transfer(accounts[1], 100)\n```\n\n----------------------------------------\n\nTITLE: Gantt EVM Input Specification in Coreth\nDESCRIPTION: Defines the byte structure of an EVMInput used in Coreth atomic transactions. An EVMInput contains a 20-byte address, 8-byte amount, 32-byte asset ID, and 8-byte nonce, totaling 68 bytes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+----------+----------+-------------------------+\n| address  : [20]byte |                20 bytes |\n+----------+----------+-------------------------+\n| amount   : uint64   |                08 bytes |\n+----------+----------+-------------------------+\n| asset_id : [32]byte |                32 bytes |\n+----------+----------+-------------------------+\n| nonce    : uint64   |                08 bytes |\n+----------+----------+-------------------------+\n                      |                68 bytes |\n                      +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Starting ANR Server in Bash\nDESCRIPTION: Illustrates how to start the Avalanche Network Runner server using the CLI command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner server\n```\n\n----------------------------------------\n\nTITLE: Declaring Message Struct and Events\nDESCRIPTION: Defining the Message struct and events for tracking cross-chain message sending and receiving.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Messages sent to this contract.\n     */\n    struct Message {\n        address sender;\n        string message;\n    }\n\n    /**\n     * @dev Emitted when a message is submited to be sent.\n     */\n    event SendMessage(\n        bytes32 indexed destinationBlockchainID,\n        address indexed destinationAddress,\n        address feeTokenAddress,\n        uint256 feeAmount,\n        uint256 requiredGasLimit,\n        string message\n    );\n\n    /**\n     * @dev Emitted when a new message is received from a given chain ID.\n     */\n    event ReceiveMessage(\n        bytes32 indexed sourceBlockchainID,\n        address indexed originSenderAddress,\n        string message\n    );\n```\n\n----------------------------------------\n\nTITLE: Initializing Solidity Contract with Imports\nDESCRIPTION: Setting up the initial contract file with required Solidity version and importing necessary interfaces and dependencies.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity 0.8.18;\n\nimport {ITeleporterMessenger, TeleporterMessageInput, TeleporterFeeInfo} from \"@teleporter/ITeleporterMessenger.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/[email protected]/security/ReentrancyGuard.sol\";\n```\n\n----------------------------------------\n\nTITLE: Example Transferable Input Data in Hexadecimal\nDESCRIPTION: Provides a concrete example of Transferable Input data with hexadecimal values for TxID, UTXOIndex, AssetID, and Input components. Includes both the abstract representation and byte-level detail.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[\n    TxID      <- 0x0dfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a\n    Input     <- 0x0000000500000000ee6b28000000000100000000\n]\n=\n[\n    // txID:\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00\n]\n```\n\n----------------------------------------\n\nTITLE: Defining TokenItem Type Structure in TypeScript\nDESCRIPTION: Defines the TypeScript type `TokenItem` used by the `TokenInput` component. It specifies the required properties (`chain_id`, `address`, `name`, `symbol`) and an optional `balance` property of type `BigNumber`. This structure represents the data expected for each token in the `list` prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/token-input.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx\ntype TokenItem = {\n  chain_id: number;\n  address: string;\n  name: string;\n  symbol: string;\n  balance?: BigNumber;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamic Fee Calculation Function\nDESCRIPTION: Function to calculate maximum gas fees and priority fees based on network conditions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nconst calcFeeData = async (\n  maxFeePerGas = undefined,\n  maxPriorityFeePerGas = undefined\n) => {\n  const baseFee = parseInt(await cchain.getBaseFee(), 16) / 1e9;\n  maxPriorityFeePerGas =\n    maxPriorityFeePerGas == undefined\n      ? parseInt(await cchain.getMaxPriorityFeePerGas(), 16) / 1e9\n      : maxPriorityFeePerGas;\n  maxFeePerGas =\n    maxFeePerGas == undefined ? baseFee + maxPriorityFeePerGas : maxFeePerGas;\n\n  if (maxFeePerGas < maxPriorityFeePerGas) {\n    throw \"Error: Max fee per gas cannot be less than max priority fee per gas\";\n  }\n\n  return {\n    maxFeePerGas: maxFeePerGas.toString(),\n    maxPriorityFeePerGas: maxPriorityFeePerGas.toString(),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing AvalancheJS via NPM\nDESCRIPTION: Command to install AvalancheJS using the NPM package manager.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @avalabs/avalanchejs\n```\n\n----------------------------------------\n\nTITLE: Querying C-Chain Parameters\nDESCRIPTION: Command to retrieve C-Chain specific information including RPC URL, chain ID, and Teleporter contract addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary describe --local\n```\n\n----------------------------------------\n\nTITLE: Generating ABI using Solidity Compiler (solc) in Bash\nDESCRIPTION: Uses the Solidity compiler (`solc`) to generate the Application Binary Interface (ABI) for the `IHelloWorld.sol` interface. The `--abi` flag specifies ABI generation, and the `-o ./abis` flag directs the output to the `./abis` directory, creating a file named `IHelloWorld.abi`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsolc --abi ./contracts/interfaces/IHelloWorld.sol -o ./abis\n```\n\n----------------------------------------\n\nTITLE: Building Subnet-EVM Binary in Bash\nDESCRIPTION: Commands to build the Subnet-EVM binary. This places the compiled binary in the AvalancheGo plugins directory for use during testing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/subnet-evm\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Implementation of powOfThree Function in Go\nDESCRIPTION: This solution implements the powOfThree function which calculates the second, third, and fourth powers of a given number. It uses big.Int's Exp method to compute each power efficiently.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc powOfThree(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {func powOfThree(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, PowOfThreeGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t// attempts to unpack [input] into the arguments to the PowOfThreeInput.\n\t// Assumes that [input] does not include selector\n\t// You can use unpacked [inputStruct] variable in your code\n\tinputStruct, err := UnpackPowOfThreeInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\t_ = inputStruct             // CUSTOM CODE OPERATES ON INPUT\n\tvar output PowOfThreeOutput // CUSTOM CODE FOR AN OUTPUT\n\n\toutput.SecondPow = big.NewInt(0).Exp(inputStruct, big.NewInt(2), nil)\n\toutput.ThirdPow = big.NewInt(0).Exp(inputStruct, big.NewInt(3), nil)\n\toutput.FourthPow = big.NewInt(0).Exp(inputStruct, big.NewInt(4), nil)\n\n\tpackedOutput, err := PackPowOfThreeOutput(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Genesis Block with CalculatorPlus Precompile in JSON\nDESCRIPTION: This JSON configuration defines the genesis block for a custom blockchain. It includes various EIP configurations, fee settings, and precompile configurations including the new CalculatorPlus precompile. The file also specifies initial account allocations and other blockchain parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/06-create-genesis-block.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 99999,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"subnetEVMTimestamp\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 20000000,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 500000\n    },\n    \"sha256Config\": {\n      \"blockTimestamp\": 0\n    },\n    \"calculatorConfig\": {\n      \"blockTimestamp\": 0\n    },\n    \"calculatorplusConfig\" : {\n        \"blockTimestamp\": 0\n    }\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0x1312D00\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NFT Transfer Function in Solidity\nDESCRIPTION: Adds a transferNFT function to the Caller contract that transfers an NFT from the contract to the function caller (msg.sender). Uses the safeTransferFrom method of the ERC721 interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/03-interacting-with-erc721-tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Caller {\n​\n    address tokenAddress;\n    uint tokenId;\n​\n    function getNFTOwner() public view returns(address) {\n        return ERC721(token).ownerOf(tokenId);\n    }\n​\n    function transferNFT() public {\n        ERC721(tokenAddress).safeTransferFrom(address(this), msg.sender, tokenId);\n    }\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Remote Bridge\nDESCRIPTION: Registers the remote bridge with the home bridge by sending a transaction with dummy message data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/04-deploy-remote.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $ERC20_TOKEN_REMOTE_L1 \"registerWithHome((address, uint256))\" \"(0x0000000000000000000000000000000000000000, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Blockchain Configuration\nDESCRIPTION: Create a new blockchain configuration using Avalanche CLI, specifying the custom VM binary and genesis file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/12-build-your-precompile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain --custom --vm $AVALANCHEGO_PLUGIN_PATH/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy --genesis ./.devcontainer/genesis-example.json\n```\n\n----------------------------------------\n\nTITLE: Populated NFT Metadata Example in JSON\nDESCRIPTION: Example of a fully populated NFT metadata file with sample values including name, tokenId, image URL from Pinata IPFS, and description.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/deploy-nft-collection/prep-nft-files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Cool Photography\",\n  \"tokenId\": 0,\n  \"image\": \"https://gateway.pinata.cloud/ipfs/QmPWbixyMsaNkR9v612bBFbncKGmgXDKz9CgMtDDD7Bymw/0.png\",\n  \"description\": \"A cool image\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimplFrac Function in Go\nDESCRIPTION: This snippet implements the simplFrac function, which simplifies a fraction by finding the greatest common divisor. It includes input unpacking, gas deduction, and output packing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc simplFrac(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, SimplFracGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tinputStruct, err := UnpackSimplFracInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\tvar output SimplFracOutput\n\tif inputStruct.Denominator.Cmp(big.NewInt(0)) == 0 {\n\t\toutput.SimplDenom = big.NewInt(0)\n\t\toutput.SimplNum = big.NewInt(0)\n\t} else {\n\t\tvar gcd big.Int\n\t\tgcd.GCD(nil, nil, inputStruct.Numerator, inputStruct.Denominator)\n\t\toutput.SimplNum = big.NewInt(0).Div(inputStruct.Numerator, &gcd)\n\t\toutput.SimplDenom = big.NewInt(0).Div(inputStruct.Denominator, &gcd)\n\t}\n\n\tpackedOutput, err := PackSimplFracOutput(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Avalanche L1 Dashboard Variables\nDESCRIPTION: This snippet shows the format for configuring Avalanche L1 variables in the Grafana dashboard. It includes examples for Spaces and WAGMI subnets on the Fuji testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSubnet name:<BlockchainID>\n```\n\nLANGUAGE: bash\nCODE:\n```\nSpaces (Fuji) : 2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt, WAGMI (Fuji) : 2AM3vsuLoJdGBGqX2ibE8RGEq4Lg7g4bot6BT1Z7B9dH5corUD\n```\n\n----------------------------------------\n\nTITLE: Defining the ICTTToken Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for token objects used within the ICTT flow. Each `ICTTToken` object requires basic token details, flags for ICTT support, optional transferer information, and a `mirrors` array specifying the corresponding token representations on other Avalanche chains, including their addresses, transferers, chain IDs, and decimals.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/ictt.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICTTToken {\n  // Basic token information\n  address: string;          // Token contract address\n  name: string;            // Token name\n  symbol: string;          // Token symbol\n  decimals: number;        // Token decimals\n  chain_id: number;        // Chain ID where token exists\n  \n  // ICTT specific fields\n  supports_ictt: boolean;  // Whether token supports ICTT\n  transferer?: string;     // Transferer contract address\n  is_transferer?: boolean; // Whether token is a transferer\n  \n  // Mirror tokens on other chains\n  mirrors: {\n    address: string;       // Mirror token address\n    transferer: string;    // Mirror token transferer\n    chain_id: number;      // Mirror token chain ID\n    decimals: number;      // Mirror token decimals\n    home?: boolean;        // Whether this is the home chain\n  }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing listErc20Balances Function with AvaCloud SDK in TypeScript\nDESCRIPTION: Function that fetches ERC-20 token balances for a given address at a specific block height. It pages through results from the AvaCloud SDK and combines them into a single array of Erc20TokenBalance objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/03-modifying-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nasync function listErc20Balances(address: string, blockNumber: string) {\n    const result = await avaCloudSDK.data.evm.balances.listErc20Balances({\n        blockNumber: blockNumber,\n        pageSize: 10,\n        address: address,\n      });\n    const balances: Erc20TokenBalance[] = [];\n    for await (const page of result) {\n        balances.push(...page.result.erc20TokenBalances);\n    }\n    return balances\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Forge Contract Deployment\nDESCRIPTION: This snippet shows the typical output displayed in the terminal after successfully deploying a smart contract using the `forge create` command. It confirms the deployment by listing the deployer's address, the address assigned to the newly deployed contract on the blockchain, and the unique transaction hash.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/04-create-new-smart-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[⠒]\nDeployer: 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\nDeployed to: 0x52C84043CD9c865236f11d9Fc9F56aa003c1f922\nTransaction hash: 0x28247e1292e9489c3b51456e2b848eeb6b82ccbcda18836a638f5d81605ac508\n```\n\n----------------------------------------\n\nTITLE: Configuring Precompile Upgrades in Avalanche L1/Subnet-EVM (JSON)\nDESCRIPTION: Demonstrates how to structure the 'precompileUpgrades' array in the chain configuration JSON file for Avalanche L1 or Subnet-EVM. Each object configures the activation or deactivation of precompiles (e.g., feeManagerConfig, txAllowListConfig) at a specific block timestamp, with allowed admin addresses and optional disabling. This enables upgrade scheduling, access control, and feature toggling. Requires valid block timestamps and the Avalanche node to be restarted for the changes to take effect.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"precompileUpgrades\": [\n    {\n      \"feeManagerConfig\": {\n        \"blockTimestamp\": 1668950000,\n        \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n      }\n    },\n    {\n      \"txAllowListConfig\": {\n        \"blockTimestamp\": 1668960000,\n        \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n      }\n    },\n    {\n      \"feeManagerConfig\": {\n        \"blockTimestamp\": 1668970000,\n        \"disable\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SHA256 Precompile Implementation (Go)\nDESCRIPTION: This snippet demonstrates the implementation of SHA256 as a precompiled contract. It includes a method to calculate required gas based on input size and the main Run method that computes the SHA256 hash.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype sha256hash struct{}\n\n// RequiredGas returns the gas required to execute the pre-compiled contract.\n//\n// This method does not require any overflow checking as the input size gas costs\n// required for anything significant is so high it's impossible to pay for.\nfunc (c *sha256hash) RequiredGas(input []byte) uint64 {\n\treturn uint64(len(input)+31)/32*params.Sha256PerWordGas + params.Sha256BaseGas\n}\n\nfunc (c *sha256hash) Run(input []byte) ([]byte, error) {\n\th := sha256.Sum256(input)\n\treturn h[:], nil\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Token Balances with Optional Formatting and Auto-Refresh using BuilderKit in TypeScript/React\nDESCRIPTION: This snippet demonstrates various usages of the TokenBalance React component, which fetches and displays the balance for a specified wallet address and token (by symbol or contract address). It supports different number formatting modes ('standard', 'currency', or 'compact'), accepts a custom decimals value, and can automatically refresh the displayed balance if given a refreshInterval in milliseconds. Dependencies include TokenBalance from @avalabs/builderkit, and accurate display depends on the provided token/address and formatting options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenBalance } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenBalance \n  address=\"0x1234567890123456789012345678901234567890\"\n  token=\"AVAX\"\n/>\n\n// With custom formatting\n<TokenBalance \n  address=\"0x1234...\"\n  token=\"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\" // USDC\n  decimals={6}\n  format=\"currency\"\n/>\n\n// Auto-updating balance\n<TokenBalance \n  address=\"0x1234...\"\n  token=\"AVAX\"\n  refreshInterval={5000} // Update every 5 seconds\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchERC20Balances Function in React Component\nDESCRIPTION: This function makes a call to the backend API to retrieve ERC-20 token balances for a given address. It first gets the current block height and then calls the listErc20Balances method, returning the balances as an array of Erc20TokenBalance objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/02-understanding-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC20Balances = async (address: string) => {\n  //\n  // TODO: Implement fetchERC20Balances\n  //\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Validator Set in ValidatorManager Contract\nDESCRIPTION: This function initializes the validator set when an L1 is first converted from a subnet. It validates conversion data, registers initial validators, sets up the initial total weight, and enables validator management functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initializeValidatorSet(\n    ConversionData calldata conversionData,\n    uint32 messageIndex\n) public virtual override\n```\n\n----------------------------------------\n\nTITLE: Linux System Updates\nDESCRIPTION: Commands to update and upgrade Linux system packages for security patches, followed by a system reboot.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt upgrade -y\nsudo reboot\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Mint Operation in Protocol Buffers\nDESCRIPTION: Protocol Buffers message definition for SECP256K1 Mint Operation, specifying field types and their byte sizes. This provides a standardized serialization format for SECP256K1 Mint Operation data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1MintOperation {\n    uint32 typeID = 1;                   // 4 bytes\n    repeated uint32 address_indices = 2; // 04 bytes + 04 bytes * len(address_indices)\n    MintOutput mint_output = 3;          // size(mint_output\n    TransferOutput transfer_output = 4;  // size(transfer_output)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Genesis File for HelloWorld Precompile in JSON\nDESCRIPTION: A genesis file configuration that enables the HelloWorld precompile at genesis with an admin address. This file needs to be placed at /tests/precompile/genesis/hello_world.json to match the test file name.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 99999,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 20000000,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 500000\n    },\n    \"helloWorldConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    },\n    \"0x0Fa8EA536Be85F32724D57A37758761B86416123\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x66321C34\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0x1312D00\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Avalanche Blockchain Configuration\nDESCRIPTION: This snippet illustrates the CLI prompt for choosing to customize blockchain settings rather than using default values. This option allows for manual configuration of the native token.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/02-configure-custom-native-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? Do you want to use default values for the Blockchain configuration?: \n    I want to use defaults for a test environment\n    I want to use defaults for a production environment\n  ▸ I don't want to use default values\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for AvalancheGo\nDESCRIPTION: Creates the necessary directory structure in GOPATH for building AvalancheGo.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $GOPATH/src/github.com/ava-labs\n```\n\n----------------------------------------\n\nTITLE: Implementing Static API Handlers in TimestampVM with Rust\nDESCRIPTION: This code defines the static API handlers for TimestampVM. It includes a single function 'ping' that is not associated with any specific instance of the VM. The #[rpc] attribute marks this trait for RPC implementation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/apis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Defines static handler RPCs for this VM.\n#[rpc]\npub trait Rpc {\n    #[rpc(name = \"ping\", alias(\"timestampvm.ping\"))]\n    fn ping(&self) -> BoxFuture<Result<crate::api::PingResponse>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking NFT Ownership using Cast on Avalanche\nDESCRIPTION: This command uses Cast to call the ownerOf function on the NFT contract, checking the owner of a specific token ID. It demonstrates how to query contract state using Cast.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY <NFT-CONTRACT-ADDRESS> \"ownerOf(uint256)\" 1\n```\n\n----------------------------------------\n\nTITLE: Configuring FeeConfigManager Parameters - JSON\nDESCRIPTION: Defines the initial configuration for the FeeConfigManager precompile directly in the genesis file. The JSON snippet sets the activation block timestamp and assigns admin addresses authorized to manage fee settings. Key parameters include 'blockTimestamp' for the precompile activation and 'adminAddresses' for administrative control. The configuration must be included under the 'config' object during network genesis, and all addresses must adhere to the chain's address format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"feeManagerConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subnets in Bash\nDESCRIPTION: Illustrates how to create Avalanche L1 subnets using the ANR control command, specifying participant nodes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control create-subnets '[{\"participants\": [\"node1\", \"node2\", \"node3\", \"node4\", \"node5\"]}]'\n```\n\n----------------------------------------\n\nTITLE: Add Permissionless Validator TX Protobuf Definition\nDESCRIPTION: Protocol buffer message definition for add permissionless validator transaction with all required fields and their respective sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nmessage AddPermissionlessValidatorTx {\n    BaseTx base_tx = 1;         // size(base_tx)\n    Validator validator = 2;    // 44 bytes\n    SubnetID subnet_id = 3;     // 32 bytes\n    Signer signer = 4; // 148 bytes\n    repeated TransferOut stake_outs = 5; // 4 bytes + size(stake_outs)\n    SECP256K1OutputOwners validator_rewards_owner = 6; // size(validator_rewards_owner) bytes\n    SECP256K1OutputOwners delegator_rewards_owner = 7; // size(delegator_rewards_owner) bytes\n    uint32 delegation_shares = 8; // 4 bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AllowList Interface in Solidity\nDESCRIPTION: This Solidity interface defines the AllowList contract used to manage permissions for the Native Minter Precompile. It includes functions to set roles, read permissions, and emits events for role changes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/04-activating-native-minter-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\ninterface IAllowList {\n  event RoleSet(uint256 indexed role, address indexed account, address indexed sender, uint256 oldRole);\n\n  function setAdmin(address addr) external;\n  function setEnabled(address addr) external;\n  function setManager(address addr) external;\n  function setNone(address addr) external;\n  function readAllowList(address addr) external view returns (uint256 role);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building AvalancheGo from Source\nDESCRIPTION: Complete sequence of commands for cloning the AvalancheGo repository and building from source\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/upgrade.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanchego.git\ncd avalanchego\ngit pull\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Setting a Value in a Smart Contract using Cast Send (Bash)\nDESCRIPTION: This bash command uses `cast send` to call the `setNum` function on the deployed `NumberStorage` contract. It specifies the RPC URL (`local-c`), the private key (`$PK`), the contract address, the function signature (`\"setNum(uint)\"`), and the value to store (`42`). This sends a transaction to modify the contract's state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25 \"setNum(uint)\" 42\n```\n\n----------------------------------------\n\nTITLE: Listing All Keys and Addresses with Avalanche-CLI in Bash\nDESCRIPTION: This command outputs all stored private keys and their associated addresses for different chains and networks, formatted in a table. The command is intended for users managing multiple keys on their system and relies on Avalanche-CLI's local key storage and formatting. Output includes C-Chain/Ethereum hex addresses and P-Chain Bech32 addresses for both Local and Fuji networks, assisting in account management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| KEY NAME  |             CHAIN             |                     ADDRESS                     |    NETWORK    |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| othertest | C-Chain (Ethereum hex format) | 0x36c83263e33f9e87BB98D3fEb54a01E35a3Fa735      | All           |\n+           +-------------------------------+-------------------------------------------------+---------------+\n|           | P-Chain (Bech32 format)       | P-custom1n5n4h99j3nx8hdrv50v8ll7aldm383nap6rh42 | Local Network |\n+           +                               +-------------------------------------------------+---------------+\n|           |                               | P-fuji1n5n4h99j3nx8hdrv50v8ll7aldm383na7j4j7q   | Fuji          |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n| mytestkey | C-Chain (Ethereum hex format) | 0x86BB07a534ADF43786ECA5Dd34A97e3F96927e4F      | All           |\n+           +-------------------------------+-------------------------------------------------+---------------+\n|           | P-Chain (Bech32 format)       | P-custom1a3azftqvygc4tlqsdvd82wks2u7nx85rg7v8ta | Local Network |\n+           +                               +-------------------------------------------------+---------------+\n|           |                               | P-fuji1a3azftqvygc4tlqsdvd82wks2u7nx85rhk6zqh   | Fuji          |\n+-----------+-------------------------------+-------------------------------------------------+---------------+\n```\n\n----------------------------------------\n\nTITLE: Starting Local Avalanche Network (Bash)\nDESCRIPTION: Uses `avalanche-network-runner` to start a local Avalanche network consisting of 5 nodes. It specifies the log level, API endpoint, number of nodes, and the path to the AvalancheGo executable defined by the `AVALANCHEGO_EXEC_PATH` variable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control start \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\" \\\n--number-of-nodes=5 \\\n--avalanchego-path ${AVALANCHEGO_EXEC_PATH}\n```\n\n----------------------------------------\n\nTITLE: Embedding AmountInput in a Form with Validation and Submission in React (TypeScript)\nDESCRIPTION: Demonstrates usage of AmountInput inside a React form element, integrating controlled value management, custom styling (mb-4 margin), and conditional disabling of the submit button based on the amount's validity. This pattern uses a handleSubmit function for form submission, and supports validation by disabling the button unless a valid amount greater than zero is entered. Inputs include a controlled value and onChange handler (setAmount). Outputs are the submitted value upon a valid form submission.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/amount-input.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<form onSubmit={handleSubmit}>\n  <AmountInput \n    type=\"text\"\n    placeholder=\"Amount to send\"\n    value={amount}\n    onChange={setAmount}\n    className=\"mb-4\"\n  />\n  <button \n    type=\"submit\" \n    disabled={!amount || parseFloat(amount) <= 0}\n  >\n    Send\n  </button>\n</form>\n\n```\n\n----------------------------------------\n\nTITLE: Precompile-EVM HelloWorld Test Contract\nDESCRIPTION: Test contract for Precompile-EVM that imports AllowListTest from the @avalabs/subnet-evm-contracts NPM package. Tests the same functionality as the Subnet-EVM version but with different import statements.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../ExampleHelloWorld.sol\";\nimport \"../interfaces/IHelloWorld.sol\";\nimport \"@avalabs/subnet-evm-contracts/contracts/test/AllowListTest.sol\";\n\ncontract ExampleHelloWorldTest is AllowListTest {\n  IHelloWorld helloWorld = IHelloWorld(HELLO_WORLD_ADDRESS);\n\n  function step_getDefaultHelloWorld() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    assertEq(example.sayHello(), \"Hello World!\");\n  }\n\n  function step_doesNotSetGreetingBeforeEnabled() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    try example.setGreeting(\"testing\") {\n      assertTrue(false, \"setGreeting should fail\");\n    } catch {}\n  }\n\n  function step_setAndGetGreeting() public {\n    ExampleHelloWorld example = new ExampleHelloWorld();\n    address exampleAddress = address(example);\n    assertRole(helloWorld.readAllowList(exampleAddress), AllowList.Role.None);\n    helloWorld.setEnabled(exampleAddress);\n    assertRole(\n      helloWorld.readAllowList(exampleAddress),\n      AllowList.Role.Enabled\n    );\n    string memory greeting = \"testgreeting\";\n    example.setGreeting(greeting);\n    assertEq(example.sayHello(), greeting);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Transferable Output Data in Hexadecimal\nDESCRIPTION: Provides a concrete example of Transferable Output data with hexadecimal values for both the asset ID (32 bytes) and the output components. Includes both the abstract representation and byte-level detail.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[\n    AssetID <- 0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a,\n    Output  <- 0x0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c,\n]\n=\n[\n    // assetID:\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Precompile Configuration Structure in JSON\nDESCRIPTION: Describes the JSON format used in upgrade/genesis files to provide configuration for the 'helloWorldConfig' precompile, specifically showing the 'blockTimestamp' parameter. This structure is referenced by the `ConfigKey` set in the precompile's module file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"helloWorldConfig\": {\n    \"blockTimestamp\": 0\n\t\t...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StateSummaryFrontier Response Message\nDESCRIPTION: The StateSummaryFrontier message is sent in response to a GetStateSummaryFrontier request, containing the chain ID, original request ID, and the requested state summary.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage StateSummaryFrontier {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  bytes summary = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending AVAX Transaction with ethers.js\nDESCRIPTION: Creates and sends an AVAX transaction between two C-Chain addresses using ethers.js. Includes wallet creation from private key and transaction formatting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/fuji-workflow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"ethers\";\nconst network = \"https://api.avax-test.network/ext/bc/C/rpc\";\nconst provider = new ethers.providers.JsonRpcProvider(network);\n\nlet privateKey = \"cd30aef1af167238c627593537e162ecf5aad1d4ab4ea98ed2f96ad4e47006dc\";\nlet wallet = new ethers.Wallet(privateKey, provider);\nlet receiverAddress = \"0x25d83F090D842c1b4645c1EFA46B15093d4CaC7C\";\nlet amountInAvax = \"0.01\";\nlet tx = {\n  to: receiverAddress,\n  value: ethers.utils.parseEther(amountInAvax),\n};\nwallet.sendTransaction(tx).then((txObj) => {\n  console.log(`\"tx, https://testnet.snowtrace.io/tx/${txObj.hash}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Avalanche Node for Multi-L1 Subnet Tracking - JSON\nDESCRIPTION: This example JSON snippet demonstrates how to configure an Avalanche node to track multiple L1 subnets by specifying the 'track-subnets' key within the node config file. You must provide a comma-separated list of Avalanche L1 IDs (SubnetIDs) as the value for 'track-subnets'. Required for nodes that wish to sync or validate on multiple Layer 1s. Place this JSON in '.avalanchego/configs/node.json' or your node's configuration file depending on your deployment method. Inputs are custom SubnetIDs; outputs are node behavior syncing with each specified subnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-production-infra.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"public-ip-resolution-service\": \"opendns\",\n  \"http-host\": \"\",\n  \"track-subnets\": \"28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY,Ai42MkKqk8yjXFCpoHXw7rdTWSHiKEMqh5h8gbxwjgkCUfkrk\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 Blockchain Locally via Avalanche CLI - Bash\nDESCRIPTION: This code example shows how to deploy the previously created Avalanche L1 blockchain <chain1> to a local network using the Avalanche CLI. It starts backend controllers, waits for network readiness, deploys Teleporter Messenger and Registry smart contracts to both C-Chain and <chain1>, and launches the AWM Relayer for message handling. The deployment script outputs endpoint URLs, key details, and funding addresses for browser extension configuration. Designed for local test environments and requires local Avalanche CLI setup with appropriate permissions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <chain1> --local\n\nDeploying [<chain1>] to Local Network\nBackend controller started, pid: 149427, output at: ~/.avalanche-cli/runs/server_20240229_165923/avalanche-cli-backend.log\n\nBooting Network. Wait until healthy...\nNode logs directory: ~/.avalanche-cli/runs/network_20240229_165923/node<i>/logs\nNetwork ready to use.\n\nDeploying Blockchain. Wait until network acknowledges...\n\nTeleporter Messenger successfully deployed to c-chain (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nTeleporter Registry successfully deployed to c-chain (0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25)\n\nTeleporter Messenger successfully deployed to <chain1> (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nTeleporter Registry successfully deployed to <chain1> (0x9EDc4cB4E781413b1b82CC3A92a60131FC111F58)\n\nUsing latest awm-relayer version (v1.1.0)\nExecuting AWM-Relayer...\n\nBlockchain ready to use. Local network node endpoints:\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n| NODE  |     VM    |                                        URL                                         |                  ALIAS URL                 |\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n| node1 | <chain1> | http://127.0.0.1:9650/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc | http://127.0.0.1:9650/ext/bc/<chain1>/rpc |\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n| node2 | <chain1> | http://127.0.0.1:9652/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc | http://127.0.0.1:9652/ext/bc/<chain1>/rpc |\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n| node3 | <chain1> | http://127.0.0.1:9654/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc | http://127.0.0.1:9654/ext/bc/<chain1>/rpc |\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n| node4 | <chain1> | http://127.0.0.1:9656/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc | http://127.0.0.1:9656/ext/bc/<chain1>/rpc |\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n| node5 | <chain1> | http://127.0.0.1:9658/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc | http://127.0.0.1:9658/ext/bc/<chain1>/rpc |\n+-------+-----------+------------------------------------------------------------------------------------+--------------------------------------------+\n\nBrowser Extension connection details (any node URL from above works):\nRPC URL:          http://127.0.0.1:9650/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc\nFunded address:   0x0EF8151A3e6ad1d4e17C8ED4128b20EB5edc58B1 with 1000000 (10^18) - private key: 16289399c9466912ffffffdc093c9b51124f0dc54ac7a766b2bc5ccf558d8eee\nNetwork name:     <chain1>\nChain ID:         1\nCurrency Symbol:  TOKEN1\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat via NPM\nDESCRIPTION: Command to install Hardhat as a development dependency in a Node.js project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/hardhat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev hardhat\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Asset Export Using avax.export API\nDESCRIPTION: Example of a cURL request to export an asset from the C-Chain to X-Chain or P-Chain. This API enables cross-chain transfer of assets within the Avalanche ecosystem.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avax.export\",\n    \"params\" :{\n        \"to\":\"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5\",\n        \"amount\": 500,\n        \"assetID\": \"2nzgmhZLuVq8jc7NNu2eahkKwoJcbFWXWJCxHBVWAJEZkhquoK\",\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/avax\n```\n\n----------------------------------------\n\nTITLE: Implementing PowOfThree Function in Go\nDESCRIPTION: This snippet implements the powOfThree function, which calculates the second, third, and fourth powers of the input number. It includes input unpacking, gas deduction, and output packing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc powOfThree(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, PowOfThreeGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tinputStruct, err := UnpackPowOfThreeInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\tvar output PowOfThreeOutput\n\toutput.SecondPow = big.NewInt(0).Exp(inputStruct, big.NewInt(2), nil)\n\toutput.ThirdPow = big.NewInt(0).Exp(inputStruct, big.NewInt(3), nil)\n\toutput.FourthPow = big.NewInt(0).Exp(inputStruct, big.NewInt(4), nil)\n\n\tpackedOutput, err := PackPowOfThreeOutput(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building AvalancheGo Node\nDESCRIPTION: Executes the build script to compile AvalancheGo from source code.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/avalanchego\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Autogenerated Precompile Contract Test Structure in Go\nDESCRIPTION: This code snippet shows the structure of an autogenerated precompile contract test file in Go. It includes package imports, test variables, and test functions for running and benchmarking the tests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/08-autogenerated-tests.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Code generated\n// This file is a generated precompile contract test with the skeleton of test functions.\n// The file is generated by a template. Please inspect every code and comment in this file before use.\n\npackage calculator\n\nimport (\n    \"testing\"\n\n    \"github.com/ava-labs/subnet-evm/core/state\"\n    \"github.com/ava-labs/subnet-evm/precompile/testutils\"\n    \"github.com/ava-labs/subnet-evm/vmerrs\"\n    \"github.com/ethereum/go-ethereum/common\"\n    \"github.com/stretchr/testify/require\"\n)\n\n// These tests are run against the precompile contract directly with\n// the given input and expected output. They're just a guide to\n// help you write your own tests. These tests are for general cases like\n// allowlist, readOnly behaviour, and gas cost. You should write your own\n// tests for specific cases.\nvar (\n    tests = map[string]testutils.PrecompileTest{\n        \"insufficient gas for add should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // populate test input here\n                testInput := AddInput{}\n                input, err := PackAdd(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: AddGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"insufficient gas for nextTwo should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // set test input to a value here\n                var testInput *big.Int\n                input, err := PackNextTwo(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: NextTwoGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"insufficient gas for repeat should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // populate test input here\n                testInput := RepeatInput{}\n                input, err := PackRepeat(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: RepeatGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n    }\n)\n\n// TestCalculatorEmptyRun tests the Run function of the precompile contract.\nfunc TestCalculatorEmptyRun(t *testing.T) {\n    // Run tests.\n    for name, test := range tests {\n        t.Run(name, func(t *testing.T) {\n            test.Run(t, Module, state.NewTestStateDB(t))\n        })\n    }\n}\n\nfunc BenchmarkCalculatorEmpty(b *testing.B) {\n    // Benchmark tests.\n    for name, test := range tests {\n        b.Run(name, func(b *testing.B) {\n            test.Bench(b, Module, state.NewTestStateDB(b))\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Subnet-EVM Genesis Configuration\nDESCRIPTION: A sample JSON configuration for initializing a Subnet-EVM blockchain. The file includes chainId, EVM fork activation blocks, fee configuration parameters, initial account allocation, and various genesis block header settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 43214,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 15000000,\n      \"minBaseFee\": 25000000000,\n      \"targetGas\": 15000000,\n      \"baseFeeChangeDenominator\": 36,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 1000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 200000\n    },\n    \"allowFeeRecipients\": false\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x295BE96E64066972000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0xe4e1c0\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Static Array - Solidity\nDESCRIPTION: Provides the generic syntax for declaring a static array in Solidity, where size is fixed at compile-time. Prerequisites: valid <array-type> and positive <array-size>. No special dependencies. Declares a state variable array with predefined length.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n<array-type>[<array-size>] <array-name>;\n```\n\n----------------------------------------\n\nTITLE: Node ID Response in JSON\nDESCRIPTION: This JSON snippet shows the expected response when retrieving the node ID. The 'nodeID' field contains the unique identifier for the Avalanche node, which is used in various network operations and validations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/latitude.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": { \"nodeID\": \"KhDnAoZDW8iRJ3F26iQgK5xXVFMPcaYeu\" },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Bootstrapping Progress via API\nDESCRIPTION: cURL command to check the bootstrapping progress of a specific chain using the info.isBootstrapped API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"X\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Token Transfer Function in Solidity\nDESCRIPTION: This snippet demonstrates a simple ERC-20 style token contract in Solidity where balances are maintained in a mapping and tokens can be transferred via a transfer function. The contract checks that the sender has enough balance before proceeding with the transfer. No imports or dependencies are required; inputs include the recipient address and amount, and key output is the updated balances. Limitations include lack of additional ERC-20 features such as events or allowances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/01-contract-standarization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Token {\n​\n    mapping(address => uint) balances;\n​\n    function transfer(address to, uint amount) public {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Base TX Example with Binary Representation\nDESCRIPTION: Complete example of a Base Transaction with sample values for all fields including TypeID, NetworkID, BlockchainID, Outputs, Inputs, and Memo. The example shows both the logical structure and the corresponding binary representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID       <- 0x00000000\n    NetworkID    <- 0x00000004\n    BlockchainID <- 0xffffffffeeeeeeeeddddddddcccccccbbbbbbbbaaaaaaaa9999999988888888\n    Outputs      <- [\n        0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n    ]\n    Inputs       <- [\n        0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd15000000020000000700000003\n    ]\n    Memo <- 0x00010203\n]\n=\n[\n    // typeID\n    0x00, 0x00, 0x00, 0x00,\n    // networkID:\n    0x00, 0x00, 0x00, 0x04,\n    // blockchainID:\n    0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,\n    0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,\n    0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,\n    0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,\n    // number of outputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable output:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n    // number of inputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable input:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03,\n    // Memo length:\n    0x00, 0x00, 0x00, 0x04,\n    // Memo:\n    0x00, 0x01, 0x02, 0x03,\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing getBlockHeight Function with AvaCloud SDK in TypeScript\nDESCRIPTION: Function that fetches the latest blocks from the AvaCloud Data API and returns the highest block number. It uses the evm.blocks.getLatestBlocks method with a pageSize of 1 to retrieve only the most recent block.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/03-modifying-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getBlockHeight() {\n    const result = await avaCloudSDK.data.evm.blocks.getLatestBlocks({\n        pageSize: 1,\n      });\n    return result.result.blocks[0].blockNumber\n}\n```\n\n----------------------------------------\n\nTITLE: Running AvalancheGo Node Container\nDESCRIPTION: Docker command to run an AvalancheGo node with proper port mappings for HTTP API (9650) and P2P networking (9651).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-docker.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -ti -p 9650:9650 -p 9651:9651 avaplatform/avalanchego:xxxxxxxx /avalanchego/build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Verifying Message Receipt on Sender Contract\nDESCRIPTION: Calls the roundtripMessage function on the sender contract to verify if the message was received successfully. Returns 'Hello World!' if the message was successfully processed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/06-send-a-roundtrip-message.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c $SENDER_ADDRESS \"roundtripMessage()(string)\"\n```\n\n----------------------------------------\n\nTITLE: CalculatorPlus Interface Implementation in Solidity\nDESCRIPTION: Extends calculator functionality with three advanced math operations: powOfThree for power calculations, moduloPlus for division operations, and simplFrac for fraction simplification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ICalculatorPlus {\n    function powOfThree(uint256 base) external view returns(uint256 secondPow, uint256 thirdPow, uint256 fourthPow);\n\n    function moduloPlus(uint256 dividend, uint256 divisor) external view returns(uint256 multiple, uint256 remainder);\n\n    function simplFrac(uint256 numerator, uint256 denominator) external view returns(uint256 simplNum, uint256 simplDenom);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Role Permissions with AllowList (JSON)\nDESCRIPTION: Provides a JSON configuration template for initializing a fee manager in a precompile using the AllowList pattern, including admin, manager, and enabled addresses. This is essential for upgrades or new precompiles, enabling controlled access for account management. Each property must contain appropriate address lists for on-chain roles.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feeManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"adminAddresses\": [<list of addresses>],\n    \"managerAddresses\": [<list of addresses>],\n    \"enabledAddresses\": [<list of addresses>],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Subnet-EVM Upgrade File with Avalanche-CLI\nDESCRIPTION: This command uses Avalanche-CLI to initiate the generation of an `upgrade.json` file for a specific Avalanche L1 named 'testblockchain'. It requires Avalanche-CLI to be installed. If the named blockchain definition exists, it launches an interactive wizard to configure precompile upgrades; otherwise, it returns an error.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade generate testblockchain\n```\n\n----------------------------------------\n\nTITLE: Implementing PeerList Message for Network Metadata\nDESCRIPTION: The PeerList message contains network-level metadata for a set of validators, including a list of claimed IP and port pairs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PeerList {\n  repeated ClaimedIpPort claimed_ip_ports = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Token Multiplier for Cross-Chain Transfers\nDESCRIPTION: This diagram illustrates the process of calculating the token multiplier used for scaling token amounts when transferring between chains with different decimal systems. It shows the interaction between TokenHome.sol, TokenRemote.sol, and the resulting Token Multiplier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/01-math-example.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Home as TokenHome.sol (_homeTokenDecimals)\n    participant Remote as TokenRemote.sol (_tokenDecimals)\n    participant Multiplier as Token Multiplier (_tokenMultiplier)\n    \n    Home->>Remote: Calculate _tokenDecimals - _homeTokenDecimals\n    Remote->>Multiplier: 18 - 6 = 12\n    Multiplier-->>Multiplier: 10^12\n```\n\n----------------------------------------\n\nTITLE: General Relayer Configuration in JSON\nDESCRIPTION: JSON snippet showing the general configuration for the relayer, including P-Chain and Info API endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/04-relayer-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"p-chain-api\": {\n    \"base-url\": \"http://127.0.0.1:9650\",\n    \"query-parameters\": {},\n    \"http-headers\": null\n  },\n  \"info-api\": {\n    \"base-url\": \"http://127.0.0.1:9650\",\n    \"query-parameters\": {},\n    \"http-headers\": null\n  },\n   \t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Minter in Genesis File (JSON)\nDESCRIPTION: JSON configuration for activating the ContractNativeMinter precompile in the genesis file. It sets up admin addresses that can manage native coin minting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"contractNativeMinterConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Register L1 Validator P-Chain Transaction Identifier\nDESCRIPTION: This identifier represents the P-Chain transaction type that carries the `RegisterL1ValidatorMessage` as its Warp message payload to register the validator on the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Identifier\nCODE:\n```\nRegisterL1ValidatorTx\n```\n\n----------------------------------------\n\nTITLE: Initial Precompile Configuration with Fee Parameters in Avalanche L1/Subnet-EVM (JSON)\nDESCRIPTION: Configures feeManagerConfig in the precompileUpgrades array with initialFeeConfig, enabling the precompile to apply a defined fee schedule (including gas limits and fee calculation parameters) at activation, without specifying admin addresses. This disables manual future changes unless re-enabled with new config. Requires chain restart and is suitable for immutable or fixed network fee environments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"precompileUpgrades\": [\n    {\n      \"feeManagerConfig\": {\n        \"blockTimestamp\": 1668950000,\n        \"initialFeeConfig\": {\n          \"gasLimit\": 20000000,\n          \"targetBlockRate\": 2,\n          \"minBaseFee\": 1000000000,\n          \"targetGas\": 100000000,\n          \"baseFeeChangeDenominator\": 48,\n          \"minBlockGasCost\": 0,\n          \"maxBlockGasCost\": 10000000,\n          \"blockGasCostStep\": 500000\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Validator GetBalance Command in Bash\nDESCRIPTION: The getBalance command retrieves the remaining validator P-Chain balance available to pay P-Chain continuous fees. This helps monitor validator status to prevent inactivity.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_173\n\nLANGUAGE: bash\nCODE:\n```\navalanche validator getBalance [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenChip with Chain Icon (TypeScript)\nDESCRIPTION: Renders TokenChip with the chain icon visible by setting showChainIcon to true. Requires the same dependencies as the basic version. The key parameter, showChainIcon, enables the display of the corresponding chain icon next to the token icon. Output includes both token and chain visual indicators for improved context.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-chip.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n  showChainIcon={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ChainVM Trait for Snowman Consensus in Rust\nDESCRIPTION: Definition of the ChainVM trait that VMs must implement to interact with the Snowman Consensus Engine. It includes methods for building blocks, issuing transactions, setting preferences, and retrieving the last accepted block.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/defining-vm-itself.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// ref. <https://pkg.go.dev/github.com/ava-labs/avalanchego/snow/engine/snowman/block#ChainVm>\n#[tonic::async_trait]\npub trait ChainVm: CommonVm + BatchedChainVm + Getter + Parser {\n    type Block: snowman::Block;\n\n    /// Attempt to create a new block from ChainVm data\n    /// Returns either a block or an error\n    async fn build_block(&self) -> Result<<Self as ChainVm>::Block>;\n\n    /// Issues a transaction to the chain\n    async fn issue_tx(&self) -> Result<<Self as ChainVm>::Block>;\n\n    /// Notify the Vm of the currently preferred block.\n    async fn set_preference(&self, id: Id) -> Result<()>;\n\n    /// Returns ID of last accepted block.\n    async fn last_accepted(&self) -> Result<Id>;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Avalanche Network with Network Runner\nDESCRIPTION: Command to start a five node Avalanche staking network using the Avalanche Network Runner tool.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/avalanche-network-runner\n# start a five node staking network\n./go run examples/local/fivenodenetwork/main.go\n```\n\n----------------------------------------\n\nTITLE: Reading State from a Smart Contract using cast call (Shell)\nDESCRIPTION: This shell command shows how to use cast call for a read-only function invocation (no transaction required) on a deployed contract. It calls getNum()(uint) at the specified address and outputs the numeric value stored in the NumberStorage contract. Prerequisites are a running RPC endpoint and a deployed compatible contract at the given address. No private key is needed for cast call, since this is a view operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncast call --rpc-url local-c 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25 \"getNum()(uint)\"\n```\n\n----------------------------------------\n\nTITLE: Getting VM ID by Name with avalanche-network-runner (Bash)\nDESCRIPTION: Shows how to retrieve the VM ID corresponding to a given VM name (e.g., 'subnetevm') using 'avalanche-network-runner control vmid'. Includes both the CLI command example and the equivalent HTTP API call via curl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control vmid vm-name [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n/build/avalanche-network-runner control vmid subnetevm\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/vmid' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"vmName\": \"subnetevm\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Avalanche Subnet VM\nDESCRIPTION: This command allows upgrading a Blockchain's VM binary for both local and publicly deployed Blockchains. It provides options for specifying upgrade versions, deployment types, and custom binaries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_160\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade vm [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Blocks with AvaCloud SDK in TypeScript\nDESCRIPTION: This function fetches the 20 most recent blocks using the AvaCloud SDK's Data API. It iterates through paginated results and combines them into a single array of EvmBlock objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/03-modifying-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getRecentBlocks = async () => {\n    const result = await avaCloudSDK.data.evm.blocks.getLatestBlocks({\n        pageSize: 1,\n      });\n\n    let count = 0;\n    const blocks: EvmBlock[] = [];\n    for await (const page of result) {\n        if (count === 20) {\n            break;\n        }\n        blocks.push(...page.result.blocks);\n        count++;\n    }\n    return blocks\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC20TokenHome Contract on Avalanche C-Chain\nDESCRIPTION: This command uses Forge to deploy the ERC20TokenHome contract on the local C-chain. It requires a private key, Teleporter registry address, funded address, ERC20 token address, and decimals as constructor arguments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/03-deploy-home.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK lib/icm-contracts/contracts/ictt/TokenHome/ERC20TokenHome.sol:ERC20TokenHome --optimize --optimizer-runs 200 --broadcast --constructor-args \"$TELEPORTER_REGISTRY_C_CHAIN\" \"$FUNDED_ADDRESS\" \"1\" \"$ERC20_C_CHAIN\" \"18\"\n```\n\n----------------------------------------\n\nTITLE: SECP256K1 Transfer Input Example with Hexadecimal Representation\nDESCRIPTION: Example of a SECP256K1TransferInput with specific values for type ID (5), amount (500000000000), and address indices ([0]), showing both the logical representation and the corresponding byte-level hexadecimal encoding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID         <- 0x00000005\n    Amount         <- 500000000000 = 0x000000746a528800,\n    AddressIndices <- [0x00000000]\n]\n=\n[\n    // type id:\n    0x00, 0x00, 0x00, 0x05,\n    // amount:\n    0x00, 0x00, 0x00, 0x74, 0x6a, 0x52, 0x88, 0x00,\n    // length:\n    0x00, 0x00, 0x00, 0x01,\n    // sig[0]\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Encoding a 64-bit Long Integer in Avalanche\nDESCRIPTION: Demonstrates how 64-bit long integers are packed in BigEndian format into the message payload.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    0x0102030405060708\nResults in:\n    [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Verification in TimestampVM\nDESCRIPTION: The verify function checks if a block is valid by ensuring its height follows its parent, its timestamp is after its parent's timestamp but not too far in the future, and adds it to the verified blocks collection upon successful verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/blocks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Verifies [`Block`](Block) properties (e.g., heights),\n/// and once verified, records it to the `State` (crate::state::State).\n/// # Errors\n/// Can fail if the parent block can't be retrieved.\npub async fn verify(&mut self) -> io::Result<()> {\n    if self.height == 0 && self.parent_id == ids::Id::empty() {\n        log::debug!(\n            \"block {} has an empty parent Id since it's a genesis block -- skipping verify\",\n            self.id\n        );\n        self.state.add_verified(&self.clone()).await;\n        return Ok(());\n    }\n\n    // if already exists in database, it means it's already accepted\n    // thus no need to verify once more\n    if self.state.get_block(&self.id).await.is_ok() {\n        log::debug!(\"block {} already verified\", self.id);\n        return Ok(());\n    }\n\n    let prnt_blk = self.state.get_block(&self.parent_id).await?;\n\n    // ensure the height of the block is immediately following its parent\n    if prnt_blk.height != self.height - 1 {\n        return Err(Error::new(\n            ErrorKind::InvalidData,\n            format!(\n                \"parent block height {} != current block height {} - 1\",\n                prnt_blk.height, self.height\n            ),\n        ));\n    }\n\n    // ensure block timestamp is after its parent\n    if prnt_blk.timestamp > self.timestamp {\n        return Err(Error::new(\n            ErrorKind::InvalidData,\n            format!(\n                \"parent block timestamp {} > current block timestamp {}\",\n                prnt_blk.timestamp, self.timestamp\n            ),\n        ));\n    }\n\n    let one_hour_from_now = Utc::now() + Duration::hours(1);\n    let one_hour_from_now = one_hour_from_now\n        .timestamp()\n        .try_into()\n        .expect(\"failed to convert timestamp from i64 to u64\");\n\n    // ensure block timestamp is no more than an hour ahead of this nodes time\n    if self.timestamp >= one_hour_from_now {\n        return Err(Error::new(\n            ErrorKind::InvalidData,\n            format!(\n                \"block timestamp {} is more than 1 hour ahead of local time\",\n                self.timestamp\n            ),\n        ));\n    }\n\n    // add newly verified block to memory\n    self.state.add_verified(&self.clone()).await;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Weight in ValidatorManager Contract\nDESCRIPTION: This function allows the admin to modify a validator's weight, which affects their influence in the consensus process. It takes the validation ID and the new weight as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateValidatorWeightUpdate(\n    bytes32 validationID,\n    uint64 newWeight\n) public onlyOwner returns (uint64, bytes32)\n```\n\n----------------------------------------\n\nTITLE: Testing C-Chain to L1 Teleporter Message\nDESCRIPTION: Sends a test message from C-Chain to the first deployed chain using Teleporter messaging system to verify cross-chain communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter msg C-Chain chain1 \"Hello World\" --local\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Users with AvalancheGo API - Shell\nDESCRIPTION: This shell/curl example issues a keystore.listUsers call to enumerate usernames registered in the AvalancheGo node's keystore. The curl POST sends only the method parameter, with no additional payload, to the /ext/keystore endpoint. The response enumerates usernames in a users array. This RPC is deprecated after v1.9.12.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.listUsers\"\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/keystore\n```\n\n----------------------------------------\n\nTITLE: Implementing a Search Input with Icon in React (TSX)\nDESCRIPTION: Demonstrates creating a search input using the `Input` component. It features a placeholder, an `onChange` handler (`handleSearch`), displays a `Search` icon (styled with `text-gray-400`), and sets a custom background color (`bg-gray-100`) using the `className` prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Input \n  type=\"text\"\n  placeholder=\"Search items...\"\n  icon={<Search className=\"text-gray-400\" />}\n  onChange={handleSearch}\n  className=\"bg-gray-100\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TransactionButton Component in React (TypeScript)\nDESCRIPTION: Demonstrates how to import the TransactionButton from the builderkit package and use it for submitting blockchain transactions. Dependencies include the @avalabs/builderkit library, and the component expects chain_id, title, description, and data as props. Input data includes transaction details such as recipient address and value in wei. Outputs are UI state changes (loading, sent, confirmed) and callbacks, with toast notifications and chain explorer integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transaction/transaction-button.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TransactionButton } from '@avalabs/builderkit';\n\n// Basic usage\n<TransactionButton\n  chain_id={43114}\n  title=\"Send AVAX\"\n  description=\"Sending AVAX to recipient\"\n  data={{\n    to: \"0x1234...\",\n    value: \"1000000000000000000\" // 1 AVAX\n  }}\n/>\n\n// With callbacks\n<TransactionButton\n  chain_id={43114}\n  title=\"Stake Tokens\"\n  description=\"Staking tokens in the protocol\"\n  data={stakeData}\n  onTransactionSent={(timestamp) => {\n    console.log('Transaction sent at:', timestamp);\n  }}\n  onTransactionConfirmed={(receipt) => {\n    console.log('Transaction confirmed:', receipt);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake to a Validator using ERC20 Tokens in Solidity\nDESCRIPTION: Illustrates the two-step process for delegating ERC20 tokens to an existing validator. Requires approving the `erc20StakingManager` first. `initiateDelegatorRegistration` is called with the target `validationID` and the delegation amount. `completeDelegatorRegistration` finalizes the delegation using the returned `delegationID` and a `messageIndex` from an off-chain message.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\n// First, approve the StakingManager to spend your tokens\nerc20Token.approve(erc20StakingManager, 100 * 10**18);\n\n// 1. Initiate delegation with 100 tokens\nbytes32 delegationID = erc20StakingManager.initiateDelegatorRegistration(\n    validationID,\n    100 * 10**18 // delegation amount (100 tokens)\n);\n\n// 2. Complete delegation after receiving confirmation message\nerc20StakingManager.completeDelegatorRegistration(delegationID, messageIndex);\n```\n\n----------------------------------------\n\nTITLE: StringStore Genesis Configuration\nDESCRIPTION: JSON configuration for initializing the StringStore precompile with a default string value and block timestamp settings in the genesis file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/09-stateful-precompiles/01-interacting-with-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n      \"chainId\": 99999,\n      // ...\n      \"stringStoreConfig\" : {\n        \"blockTimestamp\": 0,\n        \"defaultString\": \"Cornell\"\n     }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet Address with Foundry\nDESCRIPTION: Command to generate a new wallet using Foundry's cast tool. This creates a new Ethereum-compatible address and private key that can be used for deploying contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/deploy-a-dapp-on-c-chain-with-foundry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast wallet new\n```\n\n----------------------------------------\n\nTITLE: Defining the IERC20 Interface in Solidity\nDESCRIPTION: Defines the standard interface (`IERC20`) for ERC-20 compliant tokens in Solidity, as specified in EIP-20. This interface mandates the implementation of core functions for token management, including retrieving token information (name, symbol, decimals, total supply), checking balances, transferring tokens, and managing allowances for third-party spending.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/02-technical-walkthrough.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20 {\n​\n    function name() external view returns (string memory);\n​\n    function symbol() external view returns (string memory);\n​\n    function decimals() external view returns (uint8);\n​\n    function totalSupply() external view returns (uint256);\n​\n    function balanceOf(address _owner) external view returns (uint256 balance);\n​\n    function transfer(address _to, uint256 _value) external returns (bool success);\n​\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n​\n    function approve(address _spender, uint256 _value) external returns (bool success);\n​\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Gantt Transferable Input Specification in Coreth\nDESCRIPTION: Defines the byte structure of a TransferableInput used in Coreth atomic transactions. Contains a 32-byte transaction ID, 4-byte UTXO index, 32-byte asset ID, and a variable-sized Input field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n+------------+----------+------------------------+\n| tx_id      : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| utxo_index : int      |               04 bytes |\n+------------+----------+------------------------+\n| asset_id   : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| input      : Input    |      size(input) bytes |\n+------------+----------+------------------------+\n                        | 68 + size(input) bytes |\n                        +------------------------+\n```\n\n----------------------------------------\n\nTITLE: Completing Validator End (Expiry Case) via Contract Call\nDESCRIPTION: This function can be called on the `ValidatorManager` contract to remove a validator's pending registration from the contract state if the P-Chain registration did not complete before the specified `expiry` timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_4\n\nLANGUAGE: Identifier\nCODE:\n```\ncompleteEndValidation\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Transfer Output in Protocol Buffers\nDESCRIPTION: Protocol Buffers message definition for NFT Transfer Output, specifying field types and their respective byte sizes. This provides a standardized way to serialize NFT transfer data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nmessage NFTTransferOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint32 group_id = 2;          // 04 bytes\n    bytes payload = 3;            // 04 bytes + len(payload)\n    uint64 locktime = 4           // 08 bytes\n    uint32 threshold = 5;         // 04 bytes\n    repeated bytes addresses = 6; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AvaCloud SDK for Avalanche Mainnet (TSX)\nDESCRIPTION: Server-side code that initializes the AvaCloud SDK with API credentials and configuration. It sets up the SDK to connect to the Avalanche Mainnet (chain ID 43114) using the API key stored in environment variables.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/02-understanding-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AvaCloudSDK } from \"@avalabs/avacloud-sdk\";\nconst avaCloudSDK = new AvaCloudSDK({\n  apiKey: process.env.AVACLOUD_API_KEY,\n  chainId: \"43114\", // Avalanche Mainnet\n  network: \"mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Assigning the Precompile Contract Address in Go (module.go)\nDESCRIPTION: Demonstrates how to define the `ContractAddress` variable in `helloworld/module.go` using `common.HexToAddress`. This variable holds the unique blockchain address assigned to the precompile, ensuring it can be correctly identified and invoked by the Subnet-EVM.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ContractAddress is the defined address of the precompile contract.\n// This should be unique across all precompile contracts.\n// See params/precompile_modules.go for registered precompile contracts and more information.\nvar ContractAddress = common.HexToAddress(\"0x0300000000000000000000000000000000000000\")\n```\n\n----------------------------------------\n\nTITLE: Installing BuilderKit React Component Library with NPM or Yarn - Bash\nDESCRIPTION: These commands install the BuilderKit package using either NPM or Yarn, which are Node.js package managers widely used in React development. Run one of these commands from the root of your React project to add BuilderKit as a dependency. The installed package provides all of the components and hooks necessary for building Web3 applications on Avalanche.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @avalabs/builderkit\n# or\nyarn add @avalabs/builderkit\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TokenIconWithChain in React (TSX)\nDESCRIPTION: This snippet demonstrates how to import the TokenIconWithChain component from the @avalabs/builderkit library and render it in a React (TSX) application. The component requires a chain_id (number) and an address (string) to identify which token and chain logos to display, and optionally accepts a className parameter for custom styling. Inputs: chain_id and address; Output: a composite token+chain icon element.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon-with-chain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenIconWithChain } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenIconWithChain \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n/>\n\n// With custom styling\n<TokenIconWithChain \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  className=\"w-8 h-8\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Choosing a Stateful Precompile Address in Go (Subnet-EVM)\nDESCRIPTION: Illustrates the standard address allocation for stateful precompiles within Subnet-EVM, referencing `precompile/registry/registry.go`. It shows example addresses and advises developers forking Subnet-EVM to use addresses starting from `0x0300...` to avoid conflicts. This snippet provides context for setting the `ContractAddress` variable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// This list is kept just for reference. The actual addresses defined in respective packages of precompiles.\n// Note: it is important that none of these addresses conflict with each other or any other precompiles\n// in core/vm/contracts.go.\n// The first stateful precompiles were added in coreth to support nativeAssetCall and nativeAssetBalance. New stateful precompiles\n// originating in coreth will continue at this prefix, so we reserve this range in subnet-evm so that they can be migrated into\n// subnet-evm without issue.\n// These start at the address: 0x0100000000000000000000000000000000000000 and will increment by 1.\n// Optional precompiles implemented in subnet-evm start at 0x0200000000000000000000000000000000000000 and will increment by 1\n// from here to reduce the risk of conflicts.\n// For forks of subnet-evm, users should start at 0x0300000000000000000000000000000000000000 to ensure\n// that their own modifications do not conflict with stateful precompiles that may be added to subnet-evm\n// in the future.\n// ContractDeployerAllowListAddress = common.HexToAddress(\"0x0200000000000000000000000000000000000000\")\n// ContractNativeMinterAddress      = common.HexToAddress(\"0x0200000000000000000000000000000000000001\")\n// TxAllowListAddress               = common.HexToAddress(\"0x0200000000000000000000000000000000000002\")\n// FeeManagerAddress                = common.HexToAddress(\"0x0200000000000000000000000000000000000003\")\n// RewardManagerAddress             = common.HexToAddress(\"0x0200000000000000000000000000000000000004\")\n// HelloWorldAddress                = common.HexToAddress(\"0x0300000000000000000000000000000000000000\")\n// ADD YOUR PRECOMPILE HERE\n// {YourPrecompile}Address          = common.HexToAddress(\"0x03000000000000000000000000000000000000??\")\n```\n\n----------------------------------------\n\nTITLE: Initiating Cross-chain Token Transfer\nDESCRIPTION: Command to start the token transfer process between chains using Avalanche CLI\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/06-deploy-with-avalanche-cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche key transfer\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Interaction Implementation\nDESCRIPTION: Complete Golang implementation showing how to connect to Avalanche network, deploy a smart contract, and interact with it. Includes connection setup, contract deployment, transaction handling, and value retrieval.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/smart-contract-dev/interact-golang-app.mdx#2025-04-23_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/big\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/ava-labs/avalanchego/utils/constants\"\n\t\"github.com/ava-labs/avalanchego/utils/formatting\"\n\t\"github.com/ava-labs/coreth/accounts/abi/bind\"\n\t\"github.com/ava-labs/coreth/core/types\"\n\t\"github.com/ava-labs/coreth/ethclient\"\n\t\"github.com/ava-labs/coreth/params\"\n\t\"github.com/ava-labs/coreth/rpc\"\n\t\"github.com/decred/dcrd/dcrec/secp256k1/v3\"\n\t\"github.com/ethereum/go-ethereum/common\"\n\t\"github.com/ethereum/go-ethereum/crypto\"\n)\n\nfunc main() {\n\t// setup client\n\trc, err := rpc.Dial(\"http://localhost:9650/ext/bc/C/rpc\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tec := ethclient.NewClient(rc)\n\n\tctx := context.Background()\n\n\t// fetch networkid\n\tnetworkId, err := ec.ChainID(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// parse key\n\tprivateKeyString := \"PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN\"\n\tprivateKeyBytes, err := formatting.Decode(formatting.CB58, strings.TrimPrefix(privateKeyString, constants.SecretKeyPrefix))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tprivateKey := secp256k1.PrivKeyFromBytes(privateKeyBytes)\n\tprivateKeyECDSA := privateKey.ToECDSA()\n\n\t// derive 'c' address\n\tcAddress := crypto.PubkeyToAddress(privateKeyECDSA.PublicKey)\n\n\t// setup signer and transaction options.\n\tsigner := types.LatestSignerForChainID(networkId)\n\tto := &bind.TransactOpts{\n\t\tSigner: func(address common.Address, transaction *types.Transaction) (*types.Transaction, error) {\n\t\t\treturn types.SignTx(transaction, signer, privateKeyECDSA)\n\t\t},\n\t\tFrom:     cAddress,\n\t\tContext:  ctx,\n\t\tGasLimit: params.ApricotPhase1GasLimit,\n\t}\n\n\t// deploy the contract\n\tstorageAddress, storageTransaction, storageContract, err := DeployStorage(to, ec)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// wait for the transaction to be accepted\n\tfor {\n\t\tr, err := ec.TransactionReceipt(ctx, storageTransaction.Hash())\n\t\tif err != nil {\n\t\t\tif err.Error() != \"not found\" {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tif r.Status != 0 {\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\n\tlog.Println(\"storageAddress\", storageAddress)\n\tlog.Println(\"storageTransaction\", storageTransaction)\n\n\t// Call store on the contract\n\tstoreTransaction, err := storageContract.Store(to, big.NewInt(1), common.BytesToAddress([]byte(\"addr1\")))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// wait for the transaction\n\tfor {\n\t\tr, err := ec.TransactionReceipt(ctx, storeTransaction.Hash())\n\t\tif err != nil {\n\t\t\tif err.Error() != \"not found\" {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t\tcontinue\n\t\t}\n\t\tif r.Status != 0 {\n\t\t\tbreak\n\t\t}\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\n\tlog.Println(\"storeTransaction\", storeTransaction)\n\n\t// setup call options for storage\n\tco := &bind.CallOpts{\n\t\tAccepted: true,\n\t\tContext:  ctx,\n\t\tFrom:     storageAddress,\n\t}\n\n\t// retrieve the value of the contract\n\tstorageValue, err := storageContract.Retrieve(co)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tlog.Println(\"storageValue\", storageValue)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Blockchain with Custom Native Token\nDESCRIPTION: This snippet demonstrates how to create a new Avalanche blockchain using the avalanche CLI tool. It's the first step in configuring a custom native token.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/02-configure-custom-native-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain\n```\n\n----------------------------------------\n\nTITLE: Serializing ImportTx Structures - Avalanche Coreth - Text\nDESCRIPTION: This snippet shows the full field breakdown and serialization layout for an ImportTx, describing how to build a transaction importing assets from another chain in the Avalanche Coreth EVM. Required dependencies include TransferableInputs and EVMOutputs, and users must assign correct chain/network IDs. The expected input is a set of transaction fields; the output is a byte array suitable for inclusion in block data or transport over peer-to-peer protocols. Field order, sizes, and input/output array counts must comply with the specification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID           <- 0x00000000\n    NetworkID        <- 0x00003039\n    BlockchainID     <- 0x91060eabfb5a571720109b5896e5ff00010a1cfe6b103d585e6ebf27b97a1735\n    SourceChain      <- 0xd891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf\n    ImportedInputs   <- [\n        0x6613a40dcdd8d22ea4aa99a4c84349056317cf550b6685e045e459954f258e5900000001dbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db00000005000000746a5288000000000100000000\n    ]\n    Outs             <- [\n        0x0eb5ccb85c29009b6060decb353a38ea3b52cd20000000746a528800dbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db\n    ]\n]\n=\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x00,\n    // networkID:\n    0x00, 0x00, 0x00, 0x04,\n    // blockchainID:\n    0x91, 0x06, 0x0e, 0xab, 0xfb, 0x5a, 0x57, 0x17,\n    0x20, 0x10, 0x9b, 0x58, 0x96, 0xe5, 0xff, 0x00,\n    0x01, 0x0a, 0x1c, 0xfe, 0x6b, 0x10, 0x3d, 0x58,\n    0x5e, 0x6e, 0xbf, 0x27, 0xb9, 0x7a, 0x17, 0x35,\n    // sourceChain:\n    0xd8, 0x91, 0xad, 0x56, 0x05, 0x6d, 0x9c, 0x01,\n    0xf1, 0x8f, 0x43, 0xf5, 0x8b, 0x5c, 0x78, 0x4a,\n    0xd0, 0x7a, 0x4a, 0x49, 0xcf, 0x3d, 0x1f, 0x11,\n    0x62, 0x38, 0x04, 0xb5, 0xcb, 0xa2, 0xc6, 0xbf,\n    // importedInputs[] count:\n    0x00, 0x00, 0x00, 0x01,\n    // importedInputs[0]\n    0x66, 0x13, 0xa4, 0x0d, 0xcd, 0xd8, 0xd2, 0x2e,\n    0xa4, 0xaa, 0x99, 0xa4, 0xc8, 0x43, 0x49, 0x05,\n    0x63, 0x17, 0xcf, 0x55, 0x0b, 0x66, 0x85, 0xe0,\n    0x45, 0xe4, 0x59, 0x95, 0x4f, 0x25, 0x8e, 0x59,\n    0x00, 0x00, 0x00, 0x01, 0xdb, 0xcf, 0x89, 0x0f,\n    0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48, 0xb7,\n    0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a,\n    0x68, 0x70, 0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12,\n    0xba, 0x53, 0xf2, 0xdb, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x74, 0x6a, 0x52, 0x88, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n    // outs[] count\n    0x00, 0x00, 0x00, 0x01,\n    // outs[0]\n    0x0e, 0xb5, 0xcc, 0xb8, 0x5c, 0x29, 0x00, 0x9b,\n    0x60, 0x60, 0xde, 0xcb, 0x35, 0x3a, 0x38, 0xea,\n    0x3b, 0x52, 0xcd, 0x20, 0x00, 0x00, 0x00, 0x74,\n    0x6a, 0x52, 0x88, 0x00, 0xdb, 0xcf, 0x89, 0x0f,\n    0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48, 0xb7,\n    0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a,\n    0x68, 0x70, 0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12,\n    0xba, 0x53, 0xf2, 0xdb,\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Chain in TypeScript\nDESCRIPTION: Example of defining a custom blockchain (Echo L1) using the defineChain function from viem. This includes setting chain ID, name, native currency, RPC URLs, and block explorer information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/08-deploy-your-own-frontend.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from \"viem\";\n\nexport const echo = defineChain({\n    id: 173750,\n    name: 'Echo L1',\n    network: 'echo',\n    nativeCurrency: {\n        decimals: 18,\n        name: 'Ech',\n        symbol: 'ECH',\n    },\n    rpcUrls: {\n        default: {\n            http: ['https://subnets.avax.network/echo/testnet/rpc']\n        },\n    },\n    blockExplorers: {\n        default: { name: 'Explorer', url: 'https://subnets-test.avax.network/echo' },\n    },\n    iconUrl: \"/chains/logo/173750.png\"\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Height Retrieval in TypeScript\nDESCRIPTION: Function to fetch the latest block height using AvaCloud SDK's Data API. Returns the block number of the most recent block.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getBlockHeight() {\n    const result = await avaCloudSDK.data.evm.blocks.getLatestBlocks({\n        pageSize: 1,\n      });\n    return result.result.blocks[0].blockNumber\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapped Token Contract Interface in Solidity\nDESCRIPTION: This code snippet defines the interface for a wrapped token contract in Solidity. It includes functions for depositing and withdrawing native tokens, as well as standard ERC-20 functions like totalSupply, balanceOf, transfer, allowance, approve, and transferFrom.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/04-wrapped-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IWrappedToken {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external;\n    \n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Recent Transaction Listing\nDESCRIPTION: Function to fetch and process recent transactions for an address within a specified block range. Handles different transaction types and pagination.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst listRecentTransactions = async (address: string) => {\n    const blockHeight = await getBlockHeight()\n    const result = await avaCloudSDK.data.evm.transactions.listTransactions({\n        pageSize: 10,\n        startBlock: blockHeight - 100000,\n        endBlock: blockHeight,\n        address: address,\n        sortOrder: \"desc\",\n      });\n    const transactions: TransactionDetails = {\n        erc20Transfers: [],\n        erc721Transfers: [],\n        erc1155Transfers: [],\n        nativeTransaction: {\n            blockNumber: '',\n            blockTimestamp: 0,\n            blockHash: '',\n            blockIndex: 0,\n            txHash: '',\n            txStatus: '',\n            txType: 0,\n            gasLimit: '',\n            gasUsed: '',\n            gasPrice: '',\n            nonce: '',\n            from: {\n                name: undefined,\n                symbol: undefined,\n                decimals: undefined,\n                logoUri: undefined,\n                address: ''\n            },\n            to: {\n                name: undefined,\n                symbol: undefined,\n                decimals: undefined,\n                logoUri: undefined,\n                address: ''\n            },\n            value: ''\n        },\n    }\n    for await (const page of result) {\n        for (const transaction of page.result.transactions) {\n            if (transaction.erc20Transfers) {\n                if (transactions.erc20Transfers) {\n                    transactions.erc20Transfers.push(...transaction.erc20Transfers);\n                }\n            } \n            else if (transaction.erc721Transfers) {\n                if (transactions.erc721Transfers) {\n                    transactions.erc721Transfers.push(...transaction.erc721Transfers);\n                }\n            }\n            else if (transaction.erc1155Transfers) {\n                if (transactions.erc1155Transfers) {\n                    transactions.erc1155Transfers.push(...transaction.erc1155Transfers);\n                }\n            }\n        }\n    }\n    return transactions\n}\n```\n\n----------------------------------------\n\nTITLE: AvalancheGo Reinstallation Commands\nDESCRIPTION: Commands for updating the installer script and performing a node reinstallation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget -nd -m https://raw.githubusercontent.com/ava-labs/builders-hub/master/scripts/avalanchego-installer.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --reinstall\n```\n\n----------------------------------------\n\nTITLE: StatefulPrecompiledContract Interface Definition (Go)\nDESCRIPTION: This code defines the interface for stateful precompiled contracts used in Avalanche EVMs (Coreth and Subnet-EVM). It extends the regular precompile with state access functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/index.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// StatefulPrecompiledContract is the interface for executing a precompiled contract\ntype StatefulPrecompiledContract interface {\n\t// Run executes the precompiled contract.\n\tRun(accessibleState PrecompileAccessibleState,\n\tcaller common.Address,\n\taddr  common.Address,\n\tinput []byte,\n\tsuppliedGas uint64,\n\treadOnly bool)\n\t(ret []byte, remainingGas uint64, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Activating the RewardManager Precompile in Genesis File\nDESCRIPTION: JSON configuration required in the genesis file to activate the RewardManager precompile. The configuration includes the block timestamp for activation and admin addresses that can manage the precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/rewardmanager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"rewardManagerConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building AvalancheGo Docker Image\nDESCRIPTION: Command to build the Docker image for AvalancheGo using the provided build script.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-docker.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build_image.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Devnet Nodes\nDESCRIPTION: Command to list all nodes in the devnet, showing their IDs, IP addresses, and roles (Validator/Relayer).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-devnet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche node list\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Receiving Interface\nDESCRIPTION: Adding ITeleporterReceiver interface implementation for receiving cross-chain messages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Receive a new message from another chain.\n     */\n    function receiveTeleporterMessage(\n        bytes32 sourceBlockchainID,\n        address originSenderAddress,\n        bytes calldata message\n    ) external {\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Warp Message Topic Hash in Bash\nDESCRIPTION: This command generates the keccak hash of the SendWarpMessage event signature, which is used as the topic for Warp Message events.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/04-register-validators.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast keccak \"SendWarpMessage(address,bytes32,bytes)\"\n```\n\n----------------------------------------\n\nTITLE: Deploying NativeTokenStakingManager in Genesis Configuration\nDESCRIPTION: Example of how to deploy the NativeTokenStakingManager contract by including its bytecode in the genesis configuration. This method allows setting the contract address as an admin for the Native Minter precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\" : {\n        ...\n        \"contractNativeMinterConfig\": {\n            \"blockTimestamp\": 0,\n            \"adminAddresses\": [\n                \"0xffffffffffffffffffffffffffffffffffffffff\"\n            ]\n        }\n    },\n    \"alloc\": {\n        \"0xffffffffffffffffffffffffffffffffffffffff\": {\n            \"balance\": \"0x0\",\n            \"code\": \"<NativeTokenStakingManagerByteCode>\",\n            \"nonce\": 1\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subnet Validators with cURL\nDESCRIPTION: Demonstrates adding Avalanche L1 validators to a subnet using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/addsubnetvalidators' \\\n--header 'Content-Type: application/json' \\\n--data '[{\"subnetId\": \"p433wpuXyJiDhyazPYyZMJeaoPSW76CBZ2x7wrVPLgvokotXz\", \"nodeNames\":[\"node1\"]}]'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ChainIcon Component in React (TypeScript TSX)\nDESCRIPTION: Demonstrates how to import the ChainIcon component from '@avalabs/builderkit' and use it with the required chain_id prop. Shows both basic usage and how to apply custom CSS classes for styling. Requires that the image asset for the specified chain_id exists in the standardized chain logo path as described elsewhere in the documentation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChainIcon } from '@avalabs/builderkit';\n\n// Basic usage\n<ChainIcon chain_id={43114} />\n\n// With custom styling\n<ChainIcon \n  chain_id={43114}\n  className=\"w-8 h-8 rounded-full\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Default MDX Components for Consistent Rendering - Javascript\nDESCRIPTION: This snippet imports the default component set provided by the fumadocs-ui library under the alias 'defaultMdxComponents'. It enables consistent styling and functional components throughout the documentation. Prerequisites include access to the 'fumadocs-ui/mdx' package. The imported object is intended to be spread as a 'components' prop into MDX/React components for rendering customization.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/07-native-token-minting-rights.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Javascript\nCODE:\n```\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Stopping the Network with avalanche-network-runner (Bash)\nDESCRIPTION: Shows how to stop the currently running local Avalanche network using 'avalanche-network-runner control stop'. Includes the simple CLI command and the equivalent API call using curl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control stop [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control stop\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/stop'\n```\n\n----------------------------------------\n\nTITLE: Hardhat Verify Command for Smart Contract Verification\nDESCRIPTION: Bash command to verify a deployed smart contract using Hardhat's verify task. It includes the contract address, constructor arguments, and network specification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat verify 0x3972c87769886C4f1Ff3a8b52bc57738E82192D5 MockNFT Mock ipfs://QmQ2RFEmZaMds8bRjZCTJxo4DusvcBdLTS6XuDbhp5BZjY 100 --network fuji\n```\n\n----------------------------------------\n\nTITLE: Implementing GetAncestors Message for Container Ancestry\nDESCRIPTION: The GetAncestors message requests the ancestors for a given container, specifying the chain, request ID, deadline, container ID, and engine type.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetAncestors {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  bytes container_id = 4;\n  EngineType engine_type = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Joining a Subnet as a Validator in Avalanche CLI\nDESCRIPTION: Command for configuring a validator node to validate a new blockchain. Requires access to the validator machine and supports both automatic and manual configuration updates.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_146\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet join [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Integrating TokenInput into a Swap Form in TSX\nDESCRIPTION: Shows how to use multiple `TokenInput` components within a form structure, simulating a token swap interface. It demonstrates managing separate state for 'from' and 'to' tokens (`fromToken`, `toToken`, `setFromToken`, `setToToken`), filtering the list for the second input, and handling form submission (`handleSwap`). Both inputs display balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/token-input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<form onSubmit={handleSwap}>\n  <div className=\"space-y-4\">\n    <TokenInput \n      selected={fromToken}\n      chain_id={43114}\n      list={tokens}\n      onSelectionChanged={setFromToken}\n      showBalances={true}\n    />\n    <TokenInput \n      selected={toToken}\n      chain_id={43114}\n      list={tokens.filter(t => t.address !== fromToken.address)}\n      onSelectionChanged={setToToken}\n      showBalances={true}\n    />\n    <button type=\"submit\">\n      Swap\n    </button>\n  </div>\n</form>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Avalanche L1 Smart Contract Deployment\nDESCRIPTION: This snippet mentions how to adjust hardhat.config.ts to deploy contracts on an Avalanche L1 subnet by changing the 'url' and 'chainId' parameters in the configuration file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/deploy-smart-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In hardhat.config.ts, adjust the following:\n// - url: pointing to your Avalanche L1 RPC endpoint \n// - chainId: matching your Subnet-EVM ChainID\n```\n\n----------------------------------------\n\nTITLE: Declaring a Nested Mapping - Solidity\nDESCRIPTION: Shows how to define a nested mapping, mapping from one uint key to another mapping (which itself maps to an address). No special dependencies other than Solidity. This pattern allows for creating more complex key structures for value lookup (e.g., mapping two integers to an address), often used for multidimensional data storage in contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(uint => mapping(uint => address)) mapTwo;\n```\n\n----------------------------------------\n\nTITLE: Hardhat Custom Tasks Implementation\nDESCRIPTION: TypeScript implementation of custom Hardhat tasks for listing accounts and checking balances\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntask(\n  \"accounts\",\n  \"Prints the list of accounts\",\n  async (args, hre): Promise<void> => {\n    const accounts: SignerWithAddress[] = await hre.ethers.getSigners();\n    accounts.forEach((account: SignerWithAddress): void => {\n      console.log(account.address);\n    });\n  }\n);\n\ntask(\n  \"balances\",\n  \"Prints the list of AVAX account balances\",\n  async (args, hre): Promise<void> => {\n    const accounts: SignerWithAddress[] = await hre.ethers.getSigners();\n    for (const account of accounts) {\n      const balance: BigNumber = await hre.ethers.provider.getBalance(\n        account.address\n      );\n      console.log(`${account.address} has balance ${balance.toString()}`);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Keystore User with AvalancheGo API - Shell\nDESCRIPTION: This shell snippet demonstrates how to create a new user on a local AvalancheGo node by issuing a JSON-RPC call to the /ext/keystore endpoint using curl. The JSON payload specifies the keystore.createUser method with username and password parameters. Dependencies: curl, a running AvalancheGo node, and local access to the node's API port. The username and password must meet length and complexity requirements. Expects an empty JSON object in result if successful.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.createUser\",\n    \"params\" :{\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/keystore\n```\n\n----------------------------------------\n\nTITLE: Receiving and Decoding Teleporter Message in Solidity\nDESCRIPTION: This function shows how to receive a Teleporter message, verify the sender, and decode the message back into its original values using abi.decode(). It then calls an internal function with the decoded parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/02-encoding-multiple-values.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction receiveTeleporterMessage(\n  bytes32 originChainID,\n  address originSenderAddress,\n  bytes calldata message\n) external {\n  // Only the Interchain Messaging receiver can deliver a message.\n  if (msg.sender != address(teleporterMessenger)) {\n    revert Unauthorized();\n  }\n\n  // Decoding the function parameters\n  (\n    string someString,\n    uint256 someNumber,\n    address someAddress\n  ) = abi.decode(message, (string, uint256, address));\n  \n  // Calling the internal function\n  _someFunction(someString, someNumber, someAddress)\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Generated ABI for IHelloWorld Interface in JSON\nDESCRIPTION: Shows the JSON ABI generated for the `IHelloWorld` interface. It includes definitions for the `GreetingChanged` event, the `sayHello` and `setGreeting` functions, as well as functions inherited from the `IAllowList` interface (`RoleSet` event, `readAllowList`, `setAdmin`, `setEnabled`, `setManager`, `setNone`). This ABI is required by the precompile generation tool.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"oldGreeting\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"newGreeting\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"GreetingChanged\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"role\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"oldRole\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"RoleSet\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"readAllowList\",\n    \"outputs\": [\n      { \"internalType\": \"uint256\", \"name\": \"role\", \"type\": \"uint256\" }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"sayHello\",\n    \"outputs\": [\n      { \"internalType\": \"string\", \"name\": \"result\", \"type\": \"string\" }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setAdmin\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setEnabled\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"string\", \"name\": \"response\", \"type\": \"string\" }\n    ],\n    \"name\": \"setGreeting\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setManager\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setNone\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Modifying a Dynamic Array with push and pop in a Function - Solidity\nDESCRIPTION: Demonstrates how to add and remove elements of a dynamic storage array in Solidity using push and pop. Includes a state variable declaration and a function that pushes the value 1 and then removes the latest element. No dependencies outside the contract definition. Input is the value to push; output is the modified storage array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nuint[] arr;\n​\nfunction test() public {\n    arr.push(1);\n    arr.pop();\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting a Transfer Event within a Function in Solidity\nDESCRIPTION: This code snippet demonstrates how to emit the previously defined `Transfer` event from within the `emitEvent` function using the `emit` keyword. It passes arbitrary values (zero address for sender and receiver, and zero for the value) as arguments to the `Transfer` event upon function execution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/06-events.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emitEvent() public {\n    emit Transfer(address(0), address(0), 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Plan for Avalanche Node Deployment\nDESCRIPTION: Run the Terraform plan command to preview the infrastructure changes that will be made to deploy an Avalanche node on Google Cloud Platform. This command should be executed in the project directory containing the Terraform configuration files.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/google-cloud.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntf plan\n```\n\n----------------------------------------\n\nTITLE: Multiple Address Genesis Allocation Example\nDESCRIPTION: Example showing genesis allocation for multiple addresses with different balance amounts in Wei.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"alloc\": {\n  \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n    \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n  },\n  \"Ab5801a7D398351b8bE11C439e05C5B3259aeC9B\": {\n    \"balance\": \"0xa796504b1cb5a7c0000\"\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Teleporter Integration\nDESCRIPTION: Adding Teleporter messenger instance and constructor initialization.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n    ITeleporterMessenger public immutable teleporterMessenger;\n\n    constructor(address teleporterMessengerAddress) {\n        teleporterMessenger = ITeleporterMessenger(teleporterMessengerAddress);\n    }\n```\n\n----------------------------------------\n\nTITLE: ValidatorManager State Updates\nDESCRIPTION: Contract state updates performed during validator registration including storing validation messages and updating validator records\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/13-registering-validator/registering-validator.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n$._pendingRegisterValidationMessages[validationID] = registerSubnetValidatorMessage;\n$._registeredValidators[input.nodeID] = validationID;\nbytes32 messageID = WARP_MESSENGER.sendWarpMessage(registerSubnetValidatorMessage);\n$._validationPeriods[validationID] = Validator({\n  status: ValidatorStatus.PendingAdded,\n  nodeID: input.nodeID,\n  startingWeight: weight,\n  messageNonce: 0,\n  weight: weight,\n  startedAt: 0, // The validation period only starts once the registration is acknowledged.\n  endedAt: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Fee Settings in Genesis\nDESCRIPTION: JSON configuration snippet for activating the FeeManager precompile with initial fee configuration. This allows defining the complete fee structure to take effect immediately at the activation timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/feemanager.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feeManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"initialFeeConfig\": {\n      \"gasLimit\": 20000000,\n      \"targetBlockRate\": 2,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"blockGasCostStep\": 500000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Backend API Endpoints for Faucet Flow in TypeScript\nDESCRIPTION: Defines the required backend API endpoints (`/api/faucet/request` POST and `/api/faucet/status/:requestId` GET) for the Faucet flow. It specifies the expected request body (address, token, chainId), parameters (requestId), and response structure for handling token requests and checking their status (pending, completed, failed). This API is necessary for the frontend components to handle token distribution and rate limiting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/faucet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Required API Endpoints\nPOST /api/faucet/request\n  body: {\n    address: string;    // Recipient address\n    token: string;      // Token symbol\n    chainId: number;    // Network ID\n  }\n  response: {\n    requestId: string;  // Unique request identifier\n  }\n\nGET /api/faucet/status/:requestId\n  response: {\n    status: 'pending' | 'completed' | 'failed';\n    txHash?: string;    // Transaction hash if completed\n    error?: string;     // Error message if failed\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Event Syntax in Solidity\nDESCRIPTION: This snippet illustrates the basic syntax structure for defining an event within a Solidity smart contract. It specifies the `event` keyword followed by a chosen event name and a list of arguments (event_args) the event will carry.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/06-events.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent <event_name>(event_args)\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Mapping Values - Solidity\nDESCRIPTION: Demonstrates how to access a value within a two-level nested mapping. The code accesses the value at mapTwo[5][6] and assigns it to an address variable. Prerequisite: previously declared and populated nested mapping. Input is a pair of uint keys, output is an address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\naddress addr = mapTwo[5][6];\n```\n\n----------------------------------------\n\nTITLE: Deploying Sender Contract with Forge on C-Chain\nDESCRIPTION: This command uses Forge to compile and deploy the SenderOnCChain contract to the local C-Chain network. It requires a private key for transaction signing and broadcasts the deployment transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/03-create-sender-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK contracts/interchain-messaging/send-roundtrip/senderOnCChain.sol:SenderOnCChain --broadcast\n```\n\n----------------------------------------\n\nTITLE: WebSocket Endpoint for C-Chain\nDESCRIPTION: The endpoint path to interact with C-Chain via websocket. Used for real-time data streaming and subscription-based APIs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n/ext/bc/C/ws\n```\n\n----------------------------------------\n\nTITLE: Initiating Allowlist Configuration for Native Minter via CLI\nDESCRIPTION: Presents the CLI menu for managing the allowlist of addresses authorized to mint native tokens. The user selects 'Add an address for a role to the allow list' to begin adding administrators or other roles.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/08-activate-native-minter.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n? Configure the addresses that are allowed to mint native tokens: \n  ▸ Add an address for a role to the allow list\n    Preview Allow List\n    Confirm Allow List\n    Cancel\n```\n\n----------------------------------------\n\nTITLE: NFT Mint Operation Protobuf Definition\nDESCRIPTION: Protocol Buffer message definition for NFT mint operation specifying all required fields and their types.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage NFTMintOp {\n    uint32 typeID = 1;                   // 04 bytes\n    repeated uint32 address_indices = 2; // 04 bytes + 04 bytes * len(address_indices)\n    uint32 group_id = 3;                 // 04 bytes\n    bytes payload = 4;                   // 04 bytes + len(payload)\n    repeated bytes outputs = 5;          // 04 bytes + size(outputs)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissionless Validators to Elastic Avalanche L1\nDESCRIPTION: Command to add permissionless validators to an already transformed Elastic Avalanche L1. The command allows specifying node ID, stake amount, start time, and staking period.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/elastic-avalanche-l1s/make-avalanche-l1-permissionless.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain join <blockchainName> --elastic\n```\n\n----------------------------------------\n\nTITLE: Enabling Sticky Sessions in AvalancheJS\nDESCRIPTION: Configures the AvalancheJS library instance (`avalanche`) to use sticky sessions by setting the `withCredentials` request configuration to `true`. This is crucial when interacting with the load-balanced public API server to ensure consecutive API calls are consistently routed to the same backend node, preventing potential state inconsistencies. Requires an initialized `avalanche` object from the AvalancheJS library.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/rpc-providers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\navalanche.setRequestConfig(\"withCredentials\", true);\n```\n\n----------------------------------------\n\nTITLE: Implementing setString Function for EVM Precompile in Go\nDESCRIPTION: Main function to handle string storage in EVM state with gas management and input validation\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/02-store-data-in-evm.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc setString(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n    if remainingGas, err = contract.DeductGas(suppliedGas, SetStringGasCost); err != nil {\n        return nil, 0, err\n    }\n    if readOnly {\n        return nil, remainingGas, vmerrs.ErrWriteProtection\n    }\n    inputStruct, err := UnpackSetStringInput(input)\n    if err != nil {\n        return nil, remainingGas, err\n    }\n    currentState := accessibleState.GetStateDB()\n    StoreString(currentState, inputStruct)\n    packedOutput := []byte{}\n    return packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node ID from info.getNodeID Response\nDESCRIPTION: This JSON response shows the result of calling the info.getNodeID endpoint, which returns the node ID and proof of possession for a validator node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"nodeID\": \"NodeID-Q8Gfaaio9FAqCmZVEXDq9bFvNPvDi7rt5\",\n    \"nodePOP\": {\n      \"publicKey\": \"0x85675db18b326a9585bfd43892b25b71bf01b18587dc5fac136dc5343a9e8892cd6c49b0615ce928d53ff5dc7fd8945d\",\n      \"proofOfPossession\": \"0x98a56f092830161243c1f1a613ad68a7f1fb25d2462ecf85065f22eaebb4e93a60e9e29649a32252392365d8f628b2571174f520331ee0063a94473f8db6888fc3a722be330d5c51e67d0d1075549cb55376e1f21d1b48f859ef807b978f65d9\"\n    }\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Token Selection with TokenInput in TSX\nDESCRIPTION: Illustrates a basic implementation of the `TokenInput` component for token selection. It uses state variables (`currentToken`, `availableTokens`) and a handler function (`handleTokenChange`) for managing the selected token and the available token list. Balances are hidden (`showBalances={false}`) in this example.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/token-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<TokenInput \n  selected={currentToken}\n  chain_id={43114}\n  list={availableTokens}\n  onSelectionChanged={handleTokenChange}\n  showBalances={false}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Go Constants for Testing\nDESCRIPTION: Implementation of required gas constant in Go for testing the cross-chain messenger contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage myexamplecrosschainmessenger\n\nimport \"math/big\"\n\nvar SendMessageRequiredGas = big.NewInt(300000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Churn Rate Control in ValidatorManager Contract\nDESCRIPTION: This private function checks and updates the churn tracker to enforce churn rate limits. It ensures that the maximum percentage of total weight change within a churn period is not exceeded and maintains a minimum total weight for network security.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkAndUpdateChurnTracker(\n    uint64 newValidatorWeight,\n    uint64 oldValidatorWeight\n) private {\n    // ... implementation details\n    if ($._maximumChurnPercentage * churnTracker.initialWeight < churnTracker.churnAmount * 100) {\n        revert MaxChurnRateExceeded(churnTracker.churnAmount);\n    }\n    // ... more implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenChip with Address Copy-to-Clipboard (TypeScript)\nDESCRIPTION: Enables copy-to-clipboard functionality for the token address by setting allowCopyToClipboard to true. When clicked, the address is copied and users receive confirmation feedback. Key parameters are allowCopyToClipboard and the address. Outputs a chip with copy icon and feedback, requiring browser clipboard access support.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-chip.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n  allowCopyToClipboard={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fee Recipient Address Configuration\nDESCRIPTION: Validator configuration for specifying fee collection address when allowFeeRecipients is enabled.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feeRecipient\": \"<YOUR 0x-ADDRESS>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the ICTT Component in React (TSX)\nDESCRIPTION: This snippet demonstrates how to import and use the `<ICTT>` component from `@avalabs/builderkit` in a basic React functional component. It requires an array of tokens conforming to the `ICTTToken` interface (details in `/docs/builderkit/tokens`) and initial configuration props like the input token address, source chain ID, and destination chain ID to render the pre-built token transfer interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/ictt.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ICTT } from '@avalabs/builderkit';\n\nfunction App() {\n  const tokens = [\n    // Array of tokens following the ICTTToken interface\n    // See /docs/builderkit/tokens for configuration details\n    [...]\n  ];\n\n  return (\n    <ICTT \n      tokens={tokens}\n      token_in=\"0x1234...\"  // Address of the input token\n      source_chain_id={43113}\n      destination_chain_id={173750}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Linear Bonding Curve in Solidity Smart Contract\nDESCRIPTION: This Solidity snippet defines a basic bonding curve mechanism for token minting and redemption. Users can buy tokens by sending ETH, with token pricing determined using a linear function based on the contract’s total supply; selling tokens returns ETH based on the same formula. Key dependencies include Solidity ≥0.8.0 and an Ethereum-compatible environment. Inputs are ETH sent with buy transactions and token amounts for sell transactions. Outputs are token balances and ETH payouts. The code uses simplified calculations and is for demonstration; for production, ensure secure math and review floating-point and security handling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/06-distribution/03-bonding-curves.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract BondingCurve {\\n    uint256 public totalSupply;\\n    uint256 public constant a = 1e18; // Slope\\n    uint256 public constant b = 1e18; // Intercept\\n    mapping(address => uint256) public balances;\\n\\n    function buy() external payable {\\n        uint256 tokensToMint = calculateTokensToMint(msg.value);\\n        balances[msg.sender] += tokensToMint;\\n        totalSupply += tokensToMint;\\n    }\\n\\n    function sell(uint256 tokenAmount) external {\\n        require(balances[msg.sender] >= tokenAmount, \\\"Insufficient balance\\\");\\n        uint256 ethToReturn = calculateEthToReturn(tokenAmount);\\n        balances[msg.sender] -= tokenAmount;\\n        totalSupply -= tokenAmount;\\n        payable(msg.sender).transfer(ethToReturn);\\n    }\\n\\n    function calculatePrice(uint256 supply) public pure returns (uint256) {\\n        return a * supply + b;\\n    }\\n\\n    function calculateTokensToMint(uint256 ethAmount) public view returns (uint256) {\\n        // Simplified calculation for demonstration purposes\\n        uint256 tokens = ethAmount / calculatePrice(totalSupply);\\n        return tokens;\\n    }\\n\\n    function calculateEthToReturn(uint256 tokenAmount) public view returns (uint256) {\\n        // Simplified calculation for demonstration purposes\\n        uint256 ethAmount = tokenAmount * calculatePrice(totalSupply);\\n        return ethAmount;\\n    }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Abbreviated Ethereum Address in React with Address Component\nDESCRIPTION: Illustrates the abbreviation feature of the Address component by passing abbreviate={true}. Outputs a truncated string for user-friendly address display. Requires a valid address and expects boolean true for the abbreviate prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/address.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Address \n  address=\"0x1234567890123456789012345678901234567890\"\n  abbreviate={true}\n/>\n// Output: 0x1234...5678\n```\n\n----------------------------------------\n\nTITLE: Handling Ramp Widget Events\nDESCRIPTION: Event listener implementation for tracking purchase creation, success, and widget closure events.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ramp-network.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nramp.on('PURCHASE_CREATED', (event) => {\n  console.log(`User started purchase: ${event.purchase.id}`);\n});\n\nramp.on('PURCHASE_SUCCESSFUL', (event) => {\n  console.log(`Purchase successful: ${event.purchase.id}`);\n});\n\nramp.on('WIDGET_CLOSE', () => {\n  console.log('Widget closed');\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Blockchain Configuration with Avalanche CLI\nDESCRIPTION: Bash commands for configuring a blockchain using the avalanche-cli tool. This process involves executing the configure command, selecting the chain.json option, and providing the path to the configuration file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain configure blockchainName\n```\n\n----------------------------------------\n\nTITLE: Register Action in Go VM\nDESCRIPTION: Register a new Greeting action with the VM's ActionParser.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/03-creating-actions/02-register-action.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nActionParser.Register(&actions.Greeting{}, nil),\n```\n\n----------------------------------------\n\nTITLE: Defining GetAcceptedFrontier Message for Bootstrapping\nDESCRIPTION: The GetAcceptedFrontier message requests the accepted frontier from a peer, specifying the chain, request ID, deadline, and consensus engine type.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetAcceptedFrontier {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  EngineType engine_type = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Genesis Balance Distribution in Wei\nDESCRIPTION: Shows the conversion of hex balance values to their decimal equivalents in Wei.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC: 100000000 (0x52B7D2DCC80CD2E4000000=100000000000000000000000000 Wei)\n0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B: 49463 (0xa796504b1cb5a7c0000=49463000000000000000000 Wei)\n```\n\n----------------------------------------\n\nTITLE: TokenList Component with Preselected Token and CSS Class - React - TypeScript\nDESCRIPTION: Illustrates how to render TokenList with a preselected token and a custom CSS class for styling. The selected prop highlights the specified token, improving UX for pre-filled forms or edit scenarios. Needs React, a tokens array, a selected token address, and a handler for token selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-list.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TokenList \n  chain_id={43114}\n  list={tokens}\n  selected={{ address: selectedToken.address }}\n  onClick={handleTokenSelect}\n  className=\"max-h-[400px]\"\n/>\n```\n\n----------------------------------------\n\nTITLE: TeleporterRegistry Latest Version Retrieval Functions\nDESCRIPTION: Implements functions to get the latest TeleporterMessenger version and its corresponding address. Includes validation to ensure non-zero versions and existing addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/02-how-the-icm-registry-works.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TeleporterRegistry {\n    mapping(uint256 version => address protocolAddress) private _versionToAddress;\n    uint256 public latestVersion;\n\n    function getLatestTeleporter() external view returns (ITeleporterMessenger) {\n        return ITeleporterMessenger(getAddressFromVersion(latestVersion));\n    }\n\n    function getAddressFromVersion(uint256 version) public view returns (address) {\n        require(version != 0, \"TeleporterRegistry: zero version\");\n        address protocolAddress = _versionToAddress[version];\n        require(protocolAddress != address(0), \"TeleporterRegistry: version not found\");\n        return protocolAddress;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Primary Network in Avalanche CLI\nDESCRIPTION: This snippet demonstrates the usage and flags for the 'avalanche node validate primary' command, which enables all nodes in a cluster to be validators of the Primary Network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_120\n\nLANGUAGE: bash\nCODE:\n```\navalanche node validate primary [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-e, --ewoq use               ewoq key [fuji/devnet only]\n-h, --help help              for primary\n-k, --key string             select the key to use [fuji only]\n-g, --ledger use             ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)\n--ledger-addrs strings       use the given ledger addresses\n--stake-amount uint          how many AVAX to stake in the validator\n--staking-period duration    how long validator validates for after start time\n--start-time string          UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n--config string              config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string           log level for the application (default \"ERROR\")\n--skip-update-check skip     check for new versions\n```\n\n----------------------------------------\n\nTITLE: Foundry Configuration File\nDESCRIPTION: Configuration settings for Foundry project including source directory, output directory, library paths and dependency remappings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[profile.default]\nsrc = 'contracts'\nout = 'out'\nlibs = [\"node_modules\", \"lib\"]\nremappings = [\n    '@ensdomains/=node_modules/@ensdomains/',\n    '@openzeppelin/=node_modules/@openzeppelin/',\n    'hardhat/=node_modules/hardhat/',\n]\n```\n\n----------------------------------------\n\nTITLE: Using Abstract Contracts for Token Standards (ERC-20 Example) in Solidity\nDESCRIPTION: Illustrates how abstract contracts facilitate token standards like ERC-20. An abstract `ERC20` contract defines the `transfer` function signature as `virtual`. A concrete token contract, `MyToken`, inherits `ERC20` and provides its specific implementation for the `transfer` function, ensuring adherence to the standard while allowing custom logic. The `override` keyword is required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/04-abstract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract ERC20 {\n    function transfer(address recipient, uint256 amount) public virtual returns (bool);\n}\n\ncontract MyToken is ERC20 {\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        // Token transfer logic\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Node APIs Programmatically - Avalanche Network Runner - Go\nDESCRIPTION: This Go code demonstrates making API requests to a node's Info and XChain APIs through the node client. It retrieves the node's ID and queries balance information. Prerequisites: a healthy, running network, valid address and assetID variables. Returns requested data or error values depending on network/node state and provided arguments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_28\n\nLANGUAGE: go\nCODE:\n```\nid, _ := node.GetAPIClient().InfoAPI().GetNodeID() // Gets the node's node ID\nbalance, _ := node.GetAPIClient().XChainAPI().GetBalance(address,assetID,false) // Pretend these arguments are defined\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic AddressInput in TSX\nDESCRIPTION: Provides a simple example of rendering the `AddressInput` component. It includes a `placeholder` and an `onChange` callback function (`setRecipientAddress`) which is invoked only when a valid Ethereum address is entered.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/address-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<AddressInput \n  placeholder=\"Enter Ethereum address\"\n  onChange={setRecipientAddress}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Illustrating SECP256K1 Transfer Input Binary Encoding with Example\nDESCRIPTION: A detailed example showing how a SECP256K1 Transfer Input with specific field values is encoded into binary format. Demonstrates the exact byte representation of each field and the complete input structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID         <- 0x00000005\n    Amount         <- 123456789 = 0x00000000075bcd15,\n    AddressIndices <- [0x00000003, 0x00000007]\n]\n=\n[\n    // type id:\n    0x00, 0x00, 0x00, 0x05,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    // length:\n    0x00, 0x00, 0x00, 0x02,\n    // sig[0]\n    0x00, 0x00, 0x00, 0x03,\n    // sig[1]\n    0x00, 0x00, 0x00, 0x07,\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing StringStore Solidity Interface\nDESCRIPTION: A Solidity interface for the StringStore precompile with two functions: getString to retrieve a string and setString to store a string in the precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IStringStore {\n    function getString() external view returns (string memory value);\n    function setString(string memory value) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchERC20Balances Function in React Frontend\nDESCRIPTION: Frontend function that makes API calls to the backend to fetch ERC-20 token balances. It first gets the latest block height and then uses that to fetch token balances for a specific address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/03-modifying-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC20Balances = async (address: string) => {\n    const blockResult = await fetch(\"api/balance?method=getBlockHeight\");\n    const blockNumber = await blockResult.json();\n    const balanceResult = await fetch(\"api/balance?method=listErc20Balances&address=\" + address + \"&blockNumber=\" + blockNumber);\n    const balances = await balanceResult.json();\n    return balances as Erc20TokenBalance[];\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Remote Token with Home Transferer\nDESCRIPTION: Register the remote token on the home chain to recognize the transferer contracts. This step is crucial for the token transfer process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $NATIVE_TOKEN_REMOTE_L1 \"registerWithHome((address, uint256))\" \"(0x0000000000000000000000000000000000000000, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Calling MD5 Precompile Using Foundry's Cast\nDESCRIPTION: This command uses Foundry's cast tool to call the MD5 precompile at address 0x0300000000000000000000000000000000000002. It invokes the hashWithMD5 function with the string \"test\" as input, which returns a bytes16 hash.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/08-interact-with-md5.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain --private-key $PK 0x0300000000000000000000000000000000000002 \"hashWithMD5(string)(bytes16)\" \"test\"\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple Simultaneous VRF Requests\nDESCRIPTION: Shows how to handle multiple concurrent VRF requests using mappings to track requestIds and requesters\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/chainlink-vrf.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(uint256 => uint256[]) public s_requestIdToRandomWords;\nmapping(uint256 => address) public s_requestIdToAddress;\nuint256 public s_requestId;\n\nfunction requestRandomWords() external onlyOwner returns (uint256) {\n  uint256 requestId = s_vrfCoordinator.requestRandomWords(\n      VRFV2PlusClient.RandomWordsRequest({\n          keyHash: keyHash,\n          subId: s_vrfSubscriptionId,\n          requestConfirmations: requestConfirmations,\n          callbackGasLimit: callbackGasLimit,\n          numWords: numWords,\n          extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: true})) // new parameter\n      })\n  );\n  s_requestIdToAddress[requestId] = msg.sender;\n\n  // Store the latest requestId for this example.\n  s_requestId = requestId;\n\n  // Return the requestId to the requester.\n  return requestId;\n}\n\nfunction fulfillRandomWords(\n    uint256 requestId,\n    uint256[] memory randomWords\n  ) internal override {\n  // You can return the value to the requester,\n  // but this example simply stores it.\n  s_requestIdToRandomWords[requestId] = randomWords;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Rewards\nDESCRIPTION: Function in the RewardCalculator contract to calculate staking rewards based on stake amount, validator start time, staking period, and uptime.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction calculateReward(\n    uint256 stakeAmount,\n    uint64 validatorStartTime,\n    uint64 stakingStartTime,\n    uint64 stakingEndTime,\n    uint64 uptimeSeconds\n) external view returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Implementing setGreeting Function in Go\nDESCRIPTION: Implementation of setGreeting function that handles state changes, permission checks, and event emission. Includes Durango activation checks and proper gas management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc setGreeting(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, SetGreetingGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\tif readOnly {\n\t\treturn nil, remainingGas, vmerrs.ErrWriteProtection\n\t}\n\tuseStrictMode := !contract.IsDurangoActivated(accessibleState)\n\tinputStruct, err := UnpackSetGreetingInput(input, useStrictMode)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\tstateDB := accessibleState.GetStateDB()\n\tcallerStatus := allowlist.GetAllowListStatus(stateDB, ContractAddress, caller)\n\tif !callerStatus.IsEnabled() {\n\t\treturn nil, remainingGas, fmt.Errorf(\"%w: %s\", ErrCannotSetGreeting, caller)\n\t}\n\tif contract.IsDurangoActivated(accessibleState) {\n\t\tif remainingGas, err = contract.DeductGas(remainingGas, contract.ReadGasCostPerSlot); err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\toldGreeting := GetGreeting(stateDB)\n\t\teventData := GreetingChangedEventData{\n\t\t\tOldGreeting: oldGreeting,\n\t\t\tNewGreeting: inputStruct,\n\t\t}\n\t\ttopics, data, err := PackGreetingChangedEvent(caller, eventData)\n\t\tif err != nil {\n\t\t\treturn nil, remainingGas, err\n\t\t}\n\t\teventGasCost := GetGreetingChangedEventGasCost(eventData)\n\t\tif remainingGas, err = contract.DeductGas(remainingGas, eventGasCost); err != nil {\n\t\t\treturn nil, 0, err\n\t\t}\n\t\tstateDB.AddLog(\n\t\t\tContractAddress,\n\t\t\ttopics,\n\t\t\tdata,\n\t\t\taccessibleState.GetBlockContext().Number().Uint64(),\n\t\t)\n\t}\n\tStoreGreeting(stateDB, inputStruct)\n\tpackedOutput := []byte{}\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Assigning Values in a Mapping - Solidity\nDESCRIPTION: Illustrates declaration and value assignment for a mapping in Solidity. The code initializes a mapping from Ethereum addresses to uint values and assigns a value to a specific address key. Prerequisites include a valid Solidity contract context. Inputs are address keys, outputs are mapped uint values. This demonstrates storage-level assignment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => uint) map;\n​\nmap[0xc0ffee254729296a45a3885639AC7E10F9d54979 = 5;\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveSubnetValidatorTx Structure in Go\nDESCRIPTION: This code defines the RemoveSubnetValidatorTx structure used to remove a validator from a specific subnet. It includes the node ID to remove, the subnet ID, and subnet authorization to prove the issuer has permission to remove the node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/banff-changes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype RemoveSubnetValidatorTx struct {\n\tBaseTx `serialize:\"true\"`\n\t// The node to remove from the Avalanche L1.\n\tNodeID ids.NodeID `serialize:\"true\" json:\"nodeID\"`\n\t// The Avalanche L1 to remove the node from.\n\tSubnet ids.ID `serialize:\"true\" json:\"subnet\"`\n\t// Proves that the issuer has the right to remove the node from the Avalanche L1.\nSubnetAuth verify.Verifiable `serialize:\"true\" json:\"subnetAuthorization\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Display of TokenRow - React TypeScript\nDESCRIPTION: Shows a minimal TokenRow instance displaying only core token details without balance or click interaction. Dependencies are the same as the core component; input parameters are chain_id, address, name, and symbol. Outputs a non-interactive token row UI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-row.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Validator with Avalanche CLI - Bash\nDESCRIPTION: Provides the command-line instruction for adding a validator to a deployed Avalanche L1 blockchain. Requires the user to run 'avalanche blockchain addValidator' with the chain name, triggering an interactive dialog to input validator details. The command must be run by the owner of the controlling private key, and is dependent on a properly deployed L1. No parameters are required besides the blockchain name.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain addValidator testblockchain\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the TokenIcon Component in TSX\nDESCRIPTION: Demonstrates how to import the TokenIcon component from '@avalabs/builderkit' and use it in a TSX application. It shows basic usage with the required 'chain_id' and 'address' props, and an example of applying custom styling using the 'className' prop for size and shape.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenIcon } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenIcon \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n/>\n\n// With custom styling\n<TokenIcon \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  className=\"w-8 h-8 rounded-full\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWM Relayer for Avalanche Networks\nDESCRIPTION: This JSON configuration file sets up the AWM Relayer for communication between Avalanche L1 networks. It specifies API endpoints, source and destination blockchain details, and message contract settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/09-avalanche-warp-messaging/04-awm-relayer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"info-api\": {\n    \"base-url\": \"https://api.avax-test.network\"\n  },\n  \"p-chain-api\": {\n    \"base-url\": \"https://api.avax-test.network\"\n  },\n  \"source-blockchains\": [\n    {\n      \"subnet-id\": \"11111111111111111111111111111111LpoYY\",\n      \"blockchain-id\": \"yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"https://api.avax-test.network/ext/bc/C/rpc\"\n      },\n      \"ws-endpoint\": {\n        \"base-url\": \"wss://api.avax-test.network/ext/bc/C/ws\"\n      },\n      \"message-contracts\": {\n        \"0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\": {\n          \"message-format\": \"teleporter\",\n          \"settings\": {\n            \"reward-address\": \"0x5072...\"\n          }\n        }\n      }\n    }\n  ],\n  \"destination-blockchains\": [\n    {\n      \"subnet-id\": \"7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5\",\n      \"blockchain-id\": \"2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"https://subnets.avax.network/dispatch/testnet/rpc\"\n      },\n      \"account-private-key\": \"0x7493...\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Running AvalancheGo Processes in Bash\nDESCRIPTION: This command lists all running processes containing 'avalanche' in their name, which helps identify if an AvalancheGo node is currently running in the background.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/preparing-environment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep avalanche\n```\n\n----------------------------------------\n\nTITLE: Setting Up Transak Webhook Handler in Express.js\nDESCRIPTION: Implements a webhook endpoint using Express.js to receive and process Transak transaction updates server-side.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/transak.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/transak-webhook', (req, res) => {\n  const payload = req.body;\n  \n  if (payload.status === 'COMPLETED') {\n    // Process completed transaction\n  }\n  \n  res.status(200).send('Webhook received');\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-20 Token Contract on Avalanche\nDESCRIPTION: Command to deploy a basic ERC-20 token contract on Avalanche L1 using the integrated CLI tool. Includes interactive configuration for network selection, private key, token symbol, supply, and initial holder.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/08-transfer-an-erc-20-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche contract deploy erc20\n```\n\n----------------------------------------\n\nTITLE: Creating Unsigned Add Permissionless Delegator Transaction in Avalanche P-Chain\nDESCRIPTION: A detailed byte-by-byte example of constructing an unsigned add permissionless delegator transaction using predefined components including BaseTx, Validator, SubnetID, StakeOuts, and DelegatorRewardsOwner. The example shows both the high-level components and their binary representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx       <- 0x0000001a00003039e902a9a86640bfdb1cd0e36c0cc982b83e5765fad5f6bbe6abdcce7b5ae7d7c700000000000000014a177205df5c29929d06db9d941f83d5ea985de302015e99252d16469a6610db000000003d0ad12b8ee8928edf248ca91ca55600fb383f07c32bff1d6dec472b25cf59a700000005000001d1a94a2000000000010000000000000000\n    Validator    <- 0x5fa29ed4356903dac2364713c60f57d8472c7dda00000000639761970000000063beee97000001d1a94a2000\n    SubnetID     <- 0xf3086d7bfc35be1c68db664ba9ce61a2060126b0d6b4bfb09fd7a5fb7678cada\n    StakeOuts    <- 0x000000013d0ad12b8ee8928edf248ca91ca55600fb383f07c32bff1d6dec472b25cf59a700000007000001d1a94a20000000000000000000000000010000000133eeffc64785cf9d80e7731d9f31f67bd03c5cf0\n    DelegatorRewardsOwner <- 0x0000000b0000000000000000000000010000000172f3eb9aeaf8283011ce6e437fdecd65eace8f52\n]\n=\n[\n    // BaseTx\n    0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x30, 0x39,\n    0xe9, 0x02, 0xa9, 0xa8, 0x66, 0x40, 0xbf, 0xdb,\n    0x1c, 0xd0, 0xe3, 0x6c, 0x0c, 0xc9, 0x82, 0xb8,\n    0x3e, 0x57, 0x65, 0xfa, 0xd5, 0xf6, 0xbb, 0xe6,\n    0xab, 0xdc, 0xce, 0x7b, 0x5a, 0xe7, 0xd7, 0xc7,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x4a, 0x17, 0x72, 0x05, 0xdf, 0x5c, 0x29, 0x92,\n    0x9d, 0x06, 0xdb, 0x9d, 0x94, 0x1f, 0x83, 0xd5,\n    0xea, 0x98, 0x5d, 0xe3, 0x02, 0x01, 0x5e, 0x99,\n    0x25, 0x2d, 0x16, 0x46, 0x9a, 0x66, 0x10, 0xdb,\n    0x00, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0xd1, 0x2b,\n    0x8e, 0xe8, 0x92, 0x8e, 0xdf, 0x24, 0x8c, 0xa9,\n    0x1c, 0xa5, 0x56, 0x00, 0xfb, 0x38, 0x3f, 0x07,\n    0xc3, 0x2b, 0xff, 0x1d, 0x6d, 0xec, 0x47, 0x2b,\n    0x25, 0xcf, 0x59, 0xa7, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Validator\n    // NodeID\n    0x5f, 0xa2, 0x9e, 0xd4, 0x35, 0x69, 0x03, 0xda,\n    0xc2, 0x36, 0x47, 0x13, 0xc6, 0x0f, 0x57, 0xd8,\n    0x47, 0x2c, 0x7d, 0xda,\n    // Start time\n    0x00, 0x00, 0x00, 0x00, 0x63, 0x97, 0x61, 0x97,\n    // End time\n    0x00, 0x00, 0x00, 0x00, 0x63, 0xbe, 0xee, 0x97,\n    // Weight\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    // Stake_outs\n    // Num stake outs\n    0x00, 0x00, 0x00, 0x01,\n    // Stake out 0\n    // AssetID\n    0x3d, 0x0a, 0xd1, 0x2b, 0x8e, 0xe8, 0x92, 0x8e,\n    0xdf, 0x24, 0x8c, 0xa9, 0x1c, 0xa5, 0x56, 0x00,\n    0xfb, 0x38, 0x3f, 0x07, 0xc3, 0x2b, 0xff, 0x1d,\n    0x6d, 0xec, 0x47, 0x2b, 0x25, 0xcf, 0x59, 0xa7,\n    // TypeID\n    0x00, 0x00, 0x00, 0x07,\n    // Amount\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    // Locktime\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // Threshold\n    0x00, 0x00, 0x00, 0x01,\n    // Num addrs\n    0x00, 0x00, 0x00, 0x01,\n    // Addr 0\n    0x33, 0xee, 0xff, 0xc6, 0x47, 0x85, 0xcf, 0x9d,\n    0x80, 0xe7, 0x73, 0x1d, 0x9f, 0x31, 0xf6, 0x7b,\n    0xd0, 0x3c, 0x5c, 0xf0,\n    // Delegator_rewards_owner\n    // TypeID\n    0x00, 0x00, 0x00, 0x0b,\n    // Locktime\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // Threshold\n    0x00, 0x00, 0x00, 0x01,\n    // Num addrs\n    0x00, 0x00, 0x00, 0x01,\n    // Addr 0\n    0x72, 0xf3, 0xeb, 0x9a, 0xea, 0xf8, 0x28, 0x30,\n    0x11, 0xce, 0x6e, 0x43, 0x7f, 0xde, 0xcd, 0x65,\n    0xea, 0xce, 0x8f, 0x52,\n]\n```\n\n----------------------------------------\n\nTITLE: Deciding on Transaction Fee Burning via CLI Prompt\nDESCRIPTION: Shows the final CLI prompt in this sequence, asking whether collected transaction fees should be burned (sent to an unspendable 'blackhole' address, the default on Avalanche) or if a custom distribution mechanism should be used (enabled via a Reward Manager Precompile). The example selects 'Yes' to burn the fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/10-configure-transaction-fees.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n? Do you want the transaction fees to be burned (sent to a blackhole address)? All transaction fees on Avalanche are burned by default:\n  ▸ Yes, I want the transaction fees to be burned\n    No, I want to customize accumulated transaction fees distribution (Reward Manager Precompile ON)\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Generating BIP39 Mnemonic with AvalancheJS\nDESCRIPTION: Creates a 256-bit strength 24-word English mnemonic phrase using AvalancheJS library. This mnemonic can be used to derive hierarchical deterministic wallets.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/fuji-workflow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mnemonic } from \"avalanche\";\nconst mnemonic: Mnemonic = Mnemonic.getInstance();\nconst strength: number = 256;\nconst wordlist = mnemonic.getWordlists(\"english\") as string[];\nconst m: string = mnemonic.generateMnemonic(strength, randomBytes, wordlist);\nconsole.log(m);\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenRemote Abstract Contract in Solidity\nDESCRIPTION: TokenRemote is an abstract implementation of ITokenTransferrer for receiving and routing token transfers between chains. It handles minting, burning, and routing of tokens through a TokenHome contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/05-token-remote.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract TokenRemote is ITokenTransferrer {\n    // Implementation details not provided in the text\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Generated MD5 ABI in JSON Format\nDESCRIPTION: The resulting ABI (Application Binary Interface) for the MD5 hash function in JSON format, detailing the function signature, inputs, outputs, and stateMutability.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"string\",\n                \"name\": \"value\",\n                \"type\": \"string\"\n            }\n        ],\n        \"name\": \"hashWithMD5\",\n        \"outputs\": [\n            {\n                \"internalType\": \"bytes16\",\n                \"name\": \"hash\",\n                \"type\": \"bytes16\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Signed Transaction Structure in Avalanche X-Chain\nDESCRIPTION: Definition of a Signed Transaction format which extends an Unsigned Transaction by adding an array of credentials. This includes the CodecID, UnsignedTx, and Credentials components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Implementing ICTT Component in TSX\nDESCRIPTION: Example of implementing the ICTT (Interchain Token Transfer) component in a React application, passing token configurations and chain IDs as props.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/08-deploy-your-own-frontend.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ICTT tokens={tokens} token_in=\"0x8D6f0E153B1D4Efb46c510278Db3678Bb1Cc823d\" source_chain_id={43113} destination_chain_id={173750}></ICTT>\n```\n\n----------------------------------------\n\nTITLE: Calculating Effective Gas Tip Formula\nDESCRIPTION: Formula showing how the effective gas tip is calculated based on MaxFeeCap, BaseFee, and GasTipCap parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/manually-adjust-gas-price.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEffectiveTip = min(MaxFeeCap - BaseFee, GasTipCap)\n```\n\n----------------------------------------\n\nTITLE: Deploying Subnet to Devnet\nDESCRIPTION: Command for deploying a subnet into a devnet cluster with options for subnet creation and blockchain transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_96\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Avalanche Signed Transaction Gantt Specification\nDESCRIPTION: Byte-level specification for Avalanche signed transactions in Gantt chart format. Shows the structure including codec ID, unsigned transaction, and credentials array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_50\n\nLANGUAGE: text\nCODE:\n```\n+---------------------+--------------+------------------------------------------------+\n| codec_id            : uint16       |                                        2 bytes |\n+---------------------+--------------+------------------------------------------------+\n| unsigned_tx         : UnsignedTx   |                        size(unsigned_tx) bytes |\n+---------------------+--------------+------------------------------------------------+\n| credentials         : []Credential |                    4 + size(credentials) bytes |\n+---------------------+--------------+------------------------------------------------+\n                                     | 6 + size(unsigned_tx) + len(credentials) bytes |\n                                     +------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Domain Component with Address Fallback in TSX\nDESCRIPTION: Illustrates how to use the `Domain` component with the `showAddressIfNotAvailable` prop set to `true`. This configuration ensures that if an Avalanche domain name is not resolved for the provided Ethereum address, an abbreviated version of the address (e.g., '0x1234...5678') is displayed as a fallback instead of rendering nothing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/domain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// With address fallback\n<Domain \n  address=\"0x1234567890123456789012345678901234567890\"\n  showAddressIfNotAvailable={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Completing Validator Exit in Solidity\nDESCRIPTION: Describes the process of completing validator exit by calling the completeEndValidation function on the ValidatorManager contract. This function is called after receiving a signed SubnetValidatorRegistrationMessage from the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nValidatorManager.completeEndValidation()\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Health via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to check the health status of all nodes in the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control health \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Chain Configuration\nDESCRIPTION: Export commands to set up environment variables for Teleporter Registry and blockchain IDs\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/03-use-erc20-as-native-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEPORTER_REGISTRY_C_CHAIN=0x...\nexport FUNDED_ADDRESS=0x...\nexport TELEPORTER_REGISTRY_L1=0x...\nexport L1_BLOCKCHAIN_ID_HEX=0x...\nexport C_CHAIN_BLOCKCHAIN_ID_HEX=0x...\n```\n\n----------------------------------------\n\nTITLE: Delegating Stake to a Validator using Native Tokens (AVAX) in Solidity\nDESCRIPTION: Demonstrates the two-step process for delegating native tokens (e.g., AVAX) to a validator. The delegation amount is sent directly via `msg.value` when calling `initiateDelegatorRegistration` with the target `validationID`. The delegation is finalized by calling `completeDelegatorRegistration` with the `delegationID` and a `messageIndex` obtained from an off-chain confirmation message.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\n// 1. Initiate delegation with 100 AVAX\nbytes32 delegationID = nativeStakingManager.initiateDelegatorRegistration{value: 100 * 10**18}(\n    validationID\n);\n\n// 2. Complete delegation after receiving confirmation message\nnativeStakingManager.completeDelegatorRegistration(delegationID, messageIndex);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transak SDK Integration in JavaScript\nDESCRIPTION: Initializes the Transak SDK with comprehensive configuration options including API key, environment settings, network parameters, and UI customization options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/transak.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport transakSDK from '@transak/transak-sdk';\n\nconst transak = new transakSDK({\n  apiKey: 'YOUR_API_KEY',\n  environment: 'PRODUCTION', // or 'STAGING' for testing\n  defaultCryptoCurrency: 'AVAX',\n  network: 'avalanche',\n  walletAddress: userWalletAddress, // Pre-fill user's wallet\n  themeColor: '000000', // Custom color in hex\n  hostURL: window.location.origin,\n  widgetHeight: '650px',\n  widgetWidth: '450px',\n  hideMenu: false,\n  exchangeScreenTitle: 'Buy Crypto',\n  disableWalletAddressForm: false,\n});\n\ntransak.init();\n```\n\n----------------------------------------\n\nTITLE: Setting Stake Weight for Validator in Avalanche-CLI\nDESCRIPTION: This snippet shows the Avalanche-CLI prompt for setting the stake amount (weight) for the new validator during the primary network validation setup. Users can choose the default minimum stake (1 AVAX for Fuji) or specify a custom amount.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/validate-primary-network.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n What stake weight would you like to assign to the validator?:\n  ▸ Default (1.00 AVAX)\n    Custom\n```\n\n----------------------------------------\n\nTITLE: Calculating Gas Costs for Custom Events in Go\nDESCRIPTION: Implementation of gas cost calculation for a custom event in a precompile. This function calculates the gas cost for emitting the GreetingChanged event, accounting for base costs, topic costs, and data size costs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc GetGreetingChangedEventGasCost(data GreetingChangedEventData) uint64 {\n\tgas := contract.LogGas // base gas cost\n\n\t// Add topics gas cost (2 topics)\n\t// Topics always include the signature hash of the event. The rest are the indexed event arguments.\n\tgas += contract.LogTopicGas * 2\n\n\t// CUSTOM CODE STARTS HERE\n\t// Keep in mind that the data here will be encoded using the ABI encoding scheme.\n\t// So the computation cost might change according to the data type + data size and should be charged accordingly.\n\t// i.e gas += LogDataGas * uint64(len(data.oldGreeting))\n\tgas += contract.LogDataGas * uint64(len(data.OldGreeting)) // * ...\n\t// CUSTOM CODE ENDS HERE\n\t// CUSTOM CODE STARTS HERE\n\t// Keep in mind that the data here will be encoded using the ABI encoding scheme.\n\t// So the computation cost might change according to the data type + data size and should be charged accordingly.\n\t// i.e gas += LogDataGas * uint64(len(data.newGreeting))\n\tgas += contract.LogDataGas * uint64(len(data.NewGreeting)) // * ...\n\t// CUSTOM CODE ENDS HERE\n\n\t// CUSTOM CODE STARTS HERE\n\treturn gas\n}\n```\n\n----------------------------------------\n\nTITLE: PoS Validator Manager Contract Identifier\nDESCRIPTION: Represents a specific type of Validator Manager contract that supports Proof-of-Stake functionalities, including delegation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_8\n\nLANGUAGE: Identifier\nCODE:\n```\nPoSValidatorManager\n```\n\n----------------------------------------\n\nTITLE: Deriving C-Chain Addresses from Mnemonic\nDESCRIPTION: Derives BIP32-compliant hierarchical deterministic keypairs for the C-Chain using a mnemonic seed. Generates the first three addresses in the derivation path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/fuji-workflow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport HDNode from \"avalanche/dist/utils/hdnode\";\nimport { Avalanche, Mnemonic, Buffer } from \"avalanche\";\nimport { EVMAPI, KeyChain } from \"avalanche/dist/apis/evm\";\nimport { ethers } from \"ethers\";\n\nconst ip: string = \"api.avax-test.network\";\nconst port: number = 443;\nconst protocol: string = \"https\";\nconst networkID: number = 5;\nconst avalanche: Avalanche = new Avalanche(ip, port, protocol, networkID);\nconst cchain: EVMAPI = avalanche.CChain();\n\nconst mnemonic: Mnemonic = Mnemonic.getInstance();\nconst m: string = \"chimney asset heavy ecology accuse window gold weekend annual oil emerge alley retreat rabbit seed advance define off amused board quick wealth peasant disorder\";\nconst seed: Buffer = mnemonic.mnemonicToSeedSync(m);\nconst hdnode: HDNode = new HDNode(seed);\n\nconst keyChain: KeyChain = cchain.newKeyChain();\n\nconst cAddresses: string[] = [];\n\nfor (let i: number = 0; i <= 2; i++) {\n  const child: HDNode = hdnode.derive(`m/44'/60'/0'/0/${i}`);\n  keyChain.importKey(child.privateKey);\n  const cchainAddress = ethers.utils.computeAddress(child.privateKey);\n  cAddresses.push(cchainAddress);\n}\nconsole.log(cAddresses);\n```\n\n----------------------------------------\n\nTITLE: Adding Validator to Primary Network in Avalanche CLI\nDESCRIPTION: This snippet demonstrates the usage and flags for the 'avalanche primary addValidator' command, which adds a node as a validator in the Primary Network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_124\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary addValidator [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string                operate on the given cluster\n--delegation-fee uint32         set the delegation fee (20 000 is equivalent to 2%)\n--devnet operate                on a devnet network\n--endpoint string               use the given endpoint for network operations\n-f, --fuji testnet              operate on fuji (alias to testnet\n-h, --help help                 for addValidator\n-k, --key string                select the key to use [fuji only]\n-g, --ledger use                ledger instead of key (always true on mainnet, defaults to false on fuji)\n--ledger-addrs strings          use the given ledger addresses\n-m, --mainnet operate           on mainnet\n--nodeID string                 set the NodeID of the validator to add\n--proof-of-possession string    set the BLS proof of possession of the validator to add\n--public-key string             set the BLS public key of the validator to add\n--staking-period duration       how long this validator will be staking\n--start-time string             UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n-t, --testnet fuji              operate on testnet (alias to fuji)\n--weight uint                   set the staking weight of the validator to add\n--config string                 config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string              log level for the application (default \"ERROR\")\n--skip-update-check skip        check for new versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Tokens for ICTT in TypeScript\nDESCRIPTION: Example of configuring tokens for Interchain Token Transfer (ICTT), including setting up token addresses, names, symbols, and mirror configurations across different chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/08-deploy-your-own-frontend.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = [\n  {\n    address: \"0x8D6f0E153B1D4Efb46c510278Db3678Bb1Cc823d\",\n    name: \"TOK\",\n    symbol: \"TOK\",\n    decimals: 18,\n    chain_id: 43113,\n    supports_ictt: true,\n    transferer: \"0xD63c60859e6648b20c38092cCceb92c5751E32fF\",\n    mirrors: [\n      {\n        address: \"0x8D6f0E153B1D4Efb46c510278Db3678Bb1Cc823d\",\n        transferer: \"0x8D6f0E153B1D4Efb46c510278Db3678Bb1Cc823d\",\n        chain_id: 173750,\n        decimals: 18\n      }\n    ]\n  },\n  {\n    address: \"0x8D6f0E153B1D4Efb46c510278Db3678Bb1Cc823d\",\n    name: \"TOK.e\",\n    symbol: \"TOK.e\",\n    decimals: 18,\n    chain_id: 173750,\n    supports_ictt: true,\n    is_transferer: true,\n    mirrors: [\n      {\n        home: true,\n        address: \"0x8D6f0E153B1D4Efb46c510278Db3678Bb1Cc823d\",\n        transferer: \"0xD63c60859e6648b20c38092cCceb92c5751E32fF\",\n        chain_id: 43113,\n        decimals: 18\n      }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Submitting a Basic Blockchain Transaction with TransactionButton (React TypeScript)\nDESCRIPTION: Shows how to render the TransactionButton for a simple token transfer, supplying recipient and amount dynamically. Requires recipientAddress and amount variables. The component manages wallet connection and transaction status, returning toast notifications with status links.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transaction/transaction-button.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TransactionButton\n  chain_id={43114}\n  title=\"Send Tokens\"\n  description=\"Sending tokens to recipient\"\n  data={{\n    to: recipientAddress,\n    value: amount\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Put Message Structure in Protobuf\nDESCRIPTION: Defines the structure of a Put message, which is sent in response to a Get request with the requested block. It includes chain_id, request_id, container, and engine_type fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Put {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  bytes container = 3;\n  EngineType engine_type = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Validator Status in Solidity\nDESCRIPTION: This code snippet shows how the ValidatorManager contract updates the validator status after completing the registration process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/04-register-validators.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ndelete $._pendingRegisterValidationMessages[validationID];\n$._validationPeriods[validationID].status = ValidatorStatus.Active;\n$._validationPeriods[validationID].startedAt = uint64(block.timestamp);\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 Blockchain\nDESCRIPTION: Command to deploy an Avalanche L1 blockchain locally. This creates a three-node network with two primary validators and one sovereign validator.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain\n```\n\n----------------------------------------\n\nTITLE: Base URL Format for Avalanche Node API Calls\nDESCRIPTION: Defines the structure of the base URL used for connecting to an Avalanche node's API. It consists of the node's IP address (`node-ip`) and the HTTP port (`http-port`) it listens on. The default port is 9650, configurable via the `http-port` command-line argument.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[node-ip]:[http-port]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Arbitrary Transfer Function Names in Solidity\nDESCRIPTION: This snippet shows several possible arbitrary function names for transferring tokens, including transferSomeTokens, doTransfer, and sendTokens. These one-line function stubs illustrate the potential confusion caused by non-standardized naming in token contracts. No implementation is provided; the snippet's purpose is to exhibit the variability in function signatures. There are no dependencies, and these are purely illustrative, not for deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/01-contract-standarization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferSomeTokens() public {}\nfunction doTransfer() public {}\nfunction sendTokens() public {}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Transak Event Handlers in JavaScript\nDESCRIPTION: Sets up event listeners for handling various Transak widget events including widget closure, successful orders, and failed transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/transak.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransak.on(transak.EVENTS.TRANSAK_WIDGET_CLOSE, () => {\n  // Handle widget close\n});\n\ntransak.on(transak.EVENTS.TRANSAK_ORDER_SUCCESSFUL, (orderData) => {\n  // Handle successful purchase\n  console.log(orderData);\n});\n\ntransak.on(transak.EVENTS.TRANSAK_ORDER_FAILED, (orderData) => {\n  // Handle failed purchase\n  console.log(orderData);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing TokenIcon Size in TSX\nDESCRIPTION: Shows how to customize the size of the TokenIcon component by passing Tailwind CSS utility classes for width ('w-12') and height ('h-12') via the 'className' prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenIcon \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  className=\"w-12 h-12\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Specifying State Variable Visibility - Solidity\nDESCRIPTION: This snippet demonstrates how to explicitly define the visibility of state variables in a Solidity contract. The contract \"A\" declares three variables with private, internal, and public visibilities respectively. The example shows how visibility affects inheritance and access from other contracts, as well as automatically generating getter functions for public variables. No additional dependencies or inputs are required; the variables are not initialized or accessed in this snippet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/04-contracts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n​\n    address private addr;\n    uint internal num;\n    int public numTwo;\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Avalanche L1 Settings in JSON\nDESCRIPTION: JSON configuration file for Avalanche L1 settings that will be used with the MorpheusVM. This config specifies proposer parameters and is generated by a script from the HyperSDK repository.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proposerMinBlockDelay\": 0,\n  \"proposerNumHistoricalBlocks\": 512\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balance on New L1\nDESCRIPTION: Verify the token balance on the new L1 blockchain after the transfer process is complete. This confirms the successful transfer and minting of tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncast balance --rpc-url myblockchain $FUNDED_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Network with Hello World Precompile\nDESCRIPTION: Command to start a local network with 5 nodes using Avalanche Network Runner. This includes specifying the blockchain configuration with the Hello World precompile's genesis file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/precompile-deployment.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n  avalanche-network-runner control start \\\n  --log-level debug \\\n  --endpoint=\"0.0.0.0:8080\" \\\n  --number-of-nodes=5 \\\n  --avalanchego-path ${AVALANCHEGO_EXEC_PATH} \\\n  --plugin-dir ${AVALANCHEGO_PLUGIN_PATH} \\\n  --blockchain-specs '[{\"vm_name\": \"subnetevm\", \"genesis\": \"./tests/precompile/genesis/hello_world.json\"}]'\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Hash Type in Go\nDESCRIPTION: Demonstrates how to convert big.Int numbers to Hash type for EVM storage\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/02-store-data-in-evm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvalueHash := common.BigToHash(value)\n```\n\n----------------------------------------\n\nTITLE: Adding Permissionless Delegators to Validators in Elastic Avalanche L1\nDESCRIPTION: Command to add permissionless delegators to a validator in an Elastic Avalanche L1. This allows users to delegate tokens to existing validators with configurable stake amount, timing, and duration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/elastic-avalanche-l1s/make-avalanche-l1-permissionless.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain addPermissionlessDelegator <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC20 Contract using Avalanche-CLI\nDESCRIPTION: This command deploys a demo ERC20 contract on the local Avalanche C-Chain network using the Avalanche-CLI. It prompts for token symbol, supply, and recipient address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/05-deploy-fee-token-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche contract deploy erc20\n```\n\n----------------------------------------\n\nTITLE: Registration Expiry Parameter Identifier\nDESCRIPTION: A timestamp parameter included in the validator registration request (`RegisterL1ValidatorMessage`). The registration message must be delivered to the P-Chain before this time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Identifier\nCODE:\n```\nexpiry\n```\n\n----------------------------------------\n\nTITLE: Using ConnectButton for Wallet Connection in React (TypeScript)\nDESCRIPTION: Provides example usage of the ConnectButton component from @avalabs/builderkit for managing user wallet connections in a Web3 React (TypeScript) application. Shows both default and customized configurations, where parameters such as showConnectedWallet and checkWrongNetwork can control wallet address display and network validation. The component requires no mandatory props but accepts options for extended behavior; it outputs interactive controls for wallet connectivity. Dependencies are React and the ConnectButton from @avalabs/builderkit, suitable for decentralized apps needing wallet integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/control.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ConnectButton } from '@avalabs/builderkit';\n\n// Basic usage\n<ConnectButton />\n\n// With wallet display\n<ConnectButton \n  showConnectedWallet={true}\n  checkWrongNetwork={true}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Defining the TimestampVM Structure in Rust\nDESCRIPTION: Core definition of the VM struct representing TimestampVM, including its state management, application sender channel, and mempool for managing proposed blocks before processing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/defining-vm-itself.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub struct Vm<A> {\n   /// Maintains Vm-specific states.\n   pub state: Arc<RwLock<State>>,\n\n   pub app_sender: Option<A>,\n\n   /// A queue not yet proposed into a block.\n   pub mempool: Arc<RwLock<VecDeque<Vec<u8>>>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Proto EVM Input Specification in Coreth\nDESCRIPTION: Protocol buffer message definition for an EVMInput used in Coreth transactions. Specifies fields for address (20 bytes), amount (8 bytes), assetID (32 bytes), and nonce (8 bytes).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmessage  {\n    bytes address = 1; // 20 bytes\n    uint64 amount = 2; // 08 bytes\n    bytes assetID = 3; // 32 bytes\n    uint64 nonce = 4;  // 08 bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Size for TokenIconWithChain in React (TSX)\nDESCRIPTION: This code demonstrates passing a className prop to TokenIconWithChain to change its size using Tailwind CSS utility classes in a TSX file. The chain_id and address identify the token and chain, while the className 'w-12 h-12' sets the icon's width and height. The output is a larger icon with proper overlay; ensure Tailwind CSS is available in the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon-with-chain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenIconWithChain \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  className=\"w-12 h-12\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Inheriting from ValidatorManager in Solidity\nDESCRIPTION: Basic example of creating a custom validator manager by inheriting from the base ValidatorManager contract. This provides a starting point for implementing custom validator management logic.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/custom-validator-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.0;\n\nimport \"./ValidatorManager.sol\";\n\ncontract CustomValidatorManager is ValidatorManager {\n    // Your custom logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Selection with ChainDropdown in React TSX\nDESCRIPTION: The ChainDropdown component provides network selection functionality. It takes a selected chain ID, a list of available chain IDs, and a callback function that executes when the user changes their selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChainDropdown } from '@avalabs/builderkit';\n\n// Basic usage\n<ChainDropdown\n  selected={43114}\n  list={[43114, 43113]}\n  onSelectionChanged={(chainId) => {\n    console.log('Selected chain:', chainId);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Encoding SECP256K1 Transfer Output in Avalanche\nDESCRIPTION: Shows the encoding of a SECP256K1 transfer output, including type ID, amount, locktime, threshold, and addresses. The example provides both the input values and the resulting byte array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID    <- 0x00000007\n    Amount    <- 0x00000000000f4240\n    Locktime  <- 0x0000000000000000\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x66f90db6137a78f76b3693f7f2bc507956dae563\n    ]\n]\n=\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x07,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x42, 0x40,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0x66, 0xf9, 0x0d, 0xb6, 0x13, 0x7a, 0x78, 0xf7,\n    0x6b, 0x36, 0x93, 0xf7, 0xf2, 0xbc, 0x50, 0x79,\n    0x56, 0xda, 0xe5, 0x63,\n]\n```\n\n----------------------------------------\n\nTITLE: App Bootstrapping with ThirdWebProvider - React/TypeScript\nDESCRIPTION: This snippet illustrates how the root of the React app is wrapped with the ThirdWebProvider and QueryClientProvider for context provisioning, enabling access to ThirdWeb client and server state management across all components. Dependencies include thirdweb, react, react-dom, and react-query libraries. The main input is the DOM element with id 'root', and the main output is the rendered app structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nReactDOM.createRoot(document.getElementById(\\\"root\\\") as HTMLElement).render(\\n  <ThirdwebProvider>\\n    <QueryClientProvider client={queryClient}>\\n      <App />\\n    </QueryClientProvider>\\n  </ThirdwebProvider>\\n);\n```\n\n----------------------------------------\n\nTITLE: Source Blockchain Configuration in JSON\nDESCRIPTION: JSON configuration for the source blockchain, including subnet ID, blockchain ID, VM type, RPC and WebSocket endpoints, and message contract settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/04-relayer-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  // General Config ...\n\n  \"source-blockchains\": [\n\t{\n      \"subnet-id\": \"11111111111111111111111111111111LpoYY\",\n      \"blockchain-id\": \"epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"ws-endpoint\": {\n        \"base-url\": \"ws://127.0.0.1:9650/ext/bc/epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku/ws\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"message-contracts\": {\n        \"0x0000000000000000000000000000000000000000\": {\n          \"message-format\": \"off-chain-registry\",\n          \"settings\": {\n            \"teleporter-registry-address\": \"0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25\"\n          }\n        },\n        \"0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\": {\n          \"message-format\": \"teleporter\",\n          \"settings\": {\n            \"reward-address\": \"0xbAE6Ff34d6Da45128C1ddFEDA008e55A328f5665\"\n          }\n        }\n      }\n    }\n  ]\n\n  // Destination Blockchains\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Blockchain Import Public Subcommand (Bash)\nDESCRIPTION: Shows the usage syntax for the `avalanche blockchain import public` subcommand. This command imports a blockchain configuration directly from a running public or private network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain import public [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Domain Component within Identity Context in TSX\nDESCRIPTION: Shows how the `Domain` component can derive the Ethereum address from a parent `Identity` component's context, removing the need to explicitly pass the `address` prop. This example also sets `showAddressIfNotAvailable` to true, enabling fallback display to the abbreviated address if no domain is found.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/domain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Using context (inside Identity provider)\n<Domain showAddressIfNotAvailable={true} />\n```\n\n----------------------------------------\n\nTITLE: Rendering the Application and Wallet Connect Button - React/TypeScript\nDESCRIPTION: This functional React component renders the styled application container, ConnectButton, and the TransferAvax and Counter components. It connects the app to specified wallets, network and client context, facilitating user login and interaction. Dependencies include styled-components and previously initialized client/wallets/chain objects. No explicit input parameters; outputs the rendered app UI structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\\n\\n  return (\\n    <StyledApp>\\n      <AppContainer>\\n        <FlexBoxCol>\\n          <FlexBoxRow>\\n            <ConnectButton client={client} wallets={wallets} chain={avalancheFuji} showAllWallets={false} />\\n          </FlexBoxRow>\\n          <TransferAvax />\\n          <Counter />\\n        </FlexBoxCol>\\n      </AppContainer>\\n    </StyledApp>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: SECP256K1 Credential Serialization Example\nDESCRIPTION: Example of serializing a SECP256K1 credential with TypeID 9 and signature data. Shows both the logical structure and byte-level representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID         <- 0x00000009\n    Signatures     <- [\n        0x0acccf47a820549a84428440e2421975138790e41be262f7197f3d93faa26cc8741060d743ffaf025782c8c86b862d2b9febebe7d352f0b4591afbd1a737f8a30010199dbf,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Receiving and Processing Random Words from Cross-Chain VRF\nDESCRIPTION: Implementation of receiveTeleporterMessage function that handles incoming random numbers from Chainlink VRF through cross-chain communication. Includes validation of the message source and processing of random words.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/04-bring-vrf-to-unsupported-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction receiveTeleporterMessage(\n    bytes32 originChainID,\n    address originSenderAddress,\n    bytes calldata message\n) external {\n    require(originChainID == DATASOURCE_BLOCKCHAIN_ID, \"Invalid originChainID\");\n    require(msg.sender == address(teleporterMessenger), \"Caller is not the TeleporterMessenger\");\n    require(originSenderAddress == vrfRequesterContract, \"Invalid sender\");\n    \n    // Decode the message to get the request ID and random words\n    CrossChainResponse memory response = abi.decode(message, (CrossChainResponse));\n    \n    // Fulfill the request by calling the internal function\n    fulfillRandomWords(response.requestId, response.randomWords);\n}\n\nfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal {\n    // Logic to handle the fulfillment of random words\n    // Implement your custom logic here\n\n    // Emit event for received random words\n    emit RandomWordsReceived(requestId);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding ValidatorManager Functions in Solidity\nDESCRIPTION: Example of overriding an existing function in the ValidatorManager contract to customize its behavior. This allows for modification of core validator registration functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/custom-validator-manager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initializeValidatorRegistration() public override {\n    // Custom implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Cast Call (Bash)\nDESCRIPTION: This shows the expected output after running the `cast call` command to retrieve the stored number. The command prompt and the returned value (`42`) are displayed, confirming the value previously set using `cast send`. This is illustrative output and not a command to be executed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n@martineckardt ➜ /workspaces/avalanche-starter-kit (main) $ cast call --rpc-url local-c 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25 \"getNum()(uint)\"\n42\n```\n\n----------------------------------------\n\nTITLE: Selecting Key Source for Transaction Fees in Avalanche-CLI\nDESCRIPTION: This snippet displays the interactive prompt presented by the Avalanche-CLI during the primary network validation setup. It asks the user to choose between using a stored key or a Ledger device to pay the transaction fees required for adding the validator. The example highlights selecting 'Use stored key' for the Fuji testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/validate-primary-network.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n Which key source should be used to pay transaction fees?:\n  ▸ Use stored key\n    Use ledger\n```\n\n----------------------------------------\n\nTITLE: Implementing State Keys in Go\nDESCRIPTION: Defines and implements accessor functions for single-value state keys used in the key-value store.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar (\n\theightKey    = []byte{heightPrefix}\n\ttimestampKey = []byte{timestampPrefix}\n\tfeeKey      = []byte{feePrefix}\n)\n\nfunc HeightKey() (k []byte) {\n\treturn heightKey\n}\n\nfunc TimestampKey() (k []byte) {\n\treturn timestampKey\n}\n\nfunc FeeKey() (k []byte) {\n\treturn feeKey\n}\n```\n\n----------------------------------------\n\nTITLE: Validator Configuration TypeScript Code\nDESCRIPTION: TypeScript code snippets showing how to configure validation period, delegation fee rate, and stake amount\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/node-validator.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst startTime = await new PVMApi().getTimestamp();\nconst startDate = new Date(startTime.timestamp);\nconst start = BigInt(startDate.getTime() / 1000);\n\n// Set the end time to a specific date and time\nconst endTime = new Date('2024-05-15T11:20:00'); // May 15, 2024, at 11:20 AM\nconst end = BigInt(endTime.getTime() / 1000);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = newAddPermissionlessValidatorTx(\n  context,\n  utxos,\n  [bech32ToBytes(P_CHAIN_ADDRESS)],\n  nodeID,\n  PrimaryNetworkID.toString(),\n  start,\n  end,\n  BigInt(2e9), // the amount to stake\n  [bech32ToBytes(P_CHAIN_ADDRESS)],\n  [bech32ToBytes(P_CHAIN_ADDRESS)],\n  1e4 * 10,\n  undefined,\n  1,\n  0n,\n  blsPublicKey,\n  blsSignature,\n);\n```\n\n----------------------------------------\n\nTITLE: HelloWorld Precompile Config in Genesis JSON\nDESCRIPTION: The specific HelloWorld precompile configuration extracted from the genesis file. This enables the precompile at block 0 with an admin address that has privileged access.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"helloWorldConfig\": {\n    \"blockTimestamp\": 0,\n    \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransformSubnetTx Structure in Go\nDESCRIPTION: This code defines the TransformSubnetTx structure used to transform a subnet with customizable parameters like asset ID, supply limits, stake requirements, consumption rates, and delegation settings. It includes numerous fields with specific restrictions to control the subnet's economic and governance model.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/banff-changes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype TransformSubnetTx struct {\n\t// Metadata, inputs and outputs\n\tBaseTx `serialize:\"true\"`\n\t// ID of the Subnet to transform\n\t// Restrictions:\n\t// - Must not be the Primary Network ID\n\tSubnet ids.ID `serialize:\"true\" json:\"subnetID\"`\n\t// Asset to use when staking on the Avalanche L1\n\t// Restrictions:\n\t// - Must not be the Empty ID\n\t// - Must not be the AVAX ID\n\tAssetID ids.ID `serialize:\"true\" json:\"assetID\"`\n\t// Amount to initially specify as the current supply\n\t// Restrictions:\n\t// - Must be > 0\n\tInitialSupply uint64 `serialize:\"true\" json:\"initialSupply\"`\n\t// Amount to specify as the maximum token supply\n\t// Restrictions:\n\t// - Must be >= [InitialSupply]\n\tMaximumSupply uint64 `serialize:\"true\" json:\"maximumSupply\"`\n\t// MinConsumptionRate is the rate to allocate funds if the validator's stake\n\t// duration is 0\n\tMinConsumptionRate uint64 `serialize:\"true\" json:\"minConsumptionRate\"`\n\t// MaxConsumptionRate is the rate to allocate funds if the validator's stake\n\t// duration is equal to the minting period\n\t// Restrictions:\n\t// - Must be >= [MinConsumptionRate]\n\t// - Must be <= [reward.PercentDenominator]\n\tMaxConsumptionRate uint64 `serialize:\"true\" json:\"maxConsumptionRate\"`\n\t// MinValidatorStake is the minimum amount of funds required to become a\n\t// validator.\n\t// Restrictions:\n\t// - Must be > 0\n\t// - Must be <= [InitialSupply]\n\tMinValidatorStake uint64 `serialize:\"true\" json:\"minValidatorStake\"`\n\t// MaxValidatorStake is the maximum amount of funds a single validator can\n\t// be allocated, including delegated funds.\n\t// Restrictions:\n\t// - Must be >= [MinValidatorStake]\n\t// - Must be <= [MaximumSupply]\n\tMaxValidatorStake uint64 `serialize:\"true\" json:\"maxValidatorStake\"`\n\t// MinStakeDuration is the minimum number of seconds a staker can stake for.\n\t// Restrictions:\n\t// - Must be > 0\n\tMinStakeDuration uint32 `serialize:\"true\" json:\"minStakeDuration\"`\n\t// MaxStakeDuration is the maximum number of seconds a staker can stake for.\n\t// Restrictions:\n\t// - Must be >= [MinStakeDuration]\n\t// - Must be <= [GlobalMaxStakeDuration]\n\tMaxStakeDuration uint32 `serialize:\"true\" json:\"maxStakeDuration\"`\n\t// MinDelegationFee is the minimum percentage a validator must charge a\n\t// delegator for delegating.\n\t// Restrictions:\n\t// - Must be <= [reward.PercentDenominator]\n\tMinDelegationFee uint32 `serialize:\"true\" json:\"minDelegationFee\"`\n\t// MinDelegatorStake is the minimum amount of funds required to become a\n\t// delegator.\n\t// Restrictions:\n\t// - Must be > 0\n\tMinDelegatorStake uint64 `serialize:\"true\" json:\"minDelegatorStake\"`\n\t// MaxValidatorWeightFactor is the factor which calculates the maximum\n\t// amount of delegation a validator can receive.\n\t// Note: a value of 1 effectively disables delegation.\n\t// Restrictions:\n\t// - Must be > 0\n\tMaxValidatorWeightFactor byte `serialize:\"true\" json:\"maxValidatorWeightFactor\"`\n\t// UptimeRequirement is the minimum percentage a validator must be online\n\t// and responsive to receive a reward.\n\t// Restrictions:\n\t// - Must be <= [reward.PercentDenominator]\n\tUptimeRequirement uint32 `serialize:\"true\" json:\"uptimeRequirement\"`\n\t// Authorizes this transformation\nSubnetAuth verify.Verifiable `serialize:\"true\" json:\"subnetAuthorization\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ping Message in Avalanche Protocol\nDESCRIPTION: The Ping message reports a peer's perceived uptime percentage on the primary network and subnets, with values ranging from 0 to 100.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Ping {\n  uint32 uptime = 1;\n  repeated SubnetUptime subnet_uptimes = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blockchain Information\nDESCRIPTION: Command to get detailed information about a Teleporter-enabled blockchain including RPC URLs, IDs, and contract addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe <chain1>\n```\n\n----------------------------------------\n\nTITLE: Unsigned Export TX Example in Avalanche X-Chain\nDESCRIPTION: Detailed example of an unsigned Export TX that includes a BaseTx with TypeID 4, DestinationChain, and an array of outputs. The example shows both the logical structure and the byte-level representation of the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_42\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx           <- 0x0000000400000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    DestinationChain <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Outs <- [\n        000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x04\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // destination_chain:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // outs[] count:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Entering BLS Public Key and Proof of Possession in Avalanche CLI - Bash\nDESCRIPTION: These prompts collect the node's BLS public key and its proof of possession, as required for staking on a Proof of Stake enabled Avalanche network. Both are essential for node authentication and secure validation. The user must obtain these values from the node configuration or console log. Checkpoints are given for both the public key and its proof, with references to the node documentation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNext, we need the public key and proof of possession of the node's BLS\nCheck https://build.avax.network/docs/api-reference/info-api#infogetnodeid for instructions on calling info.getNodeID API\n\\u2717 What is the node's BLS public key?:\n```\n\nLANGUAGE: bash\nCODE:\n```\n\\u2717 What is the node's BLS proof of possession?:\n```\n\n----------------------------------------\n\nTITLE: Defining Calculator Actions Enum in Solidity\nDESCRIPTION: Defines an enum for different calculator operations that can be performed across chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/06-encoding-function-name.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nenum CalculatorAction {\n    add,\n    concatenate\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Openfort Client and Server\nDESCRIPTION: Initialize Openfort with client-side publishable keys and server-side secret key configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/openfort.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize Openfort with client and server configurations\n// Client side\nconst openfortClient = new Openfort({\n  baseConfiguration: {\n    publishableKey: \"YOUR_OPENFORT_PUBLISHABLE_KEY\",\n  },\n  shieldConfiguration: {\n    shieldPublishableKey: \"YOUR_SHIELD_PUBLISHABLE_KEY\",\n  },\n});\n\n// Server side\nconst openfortServer = new Openfort(\"YOUR_SECRET_KEY\");\n```\n\n----------------------------------------\n\nTITLE: Querying Chain Information with AvaCloud Data API (Bash)\nDESCRIPTION: These curl commands demonstrate how to list all chains and get specific chain information using the AvaCloud Data API. They use GET requests to the Glacier API endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Adding Basic avalanche-types Dependency to Cargo.toml\nDESCRIPTION: A basic example of adding the avalanche-types crate to your Rust project's Cargo.toml file. This configuration imports the core functionality needed for Avalanche VM development.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/rust-vms/setting-up-environment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\navalanche-types = \"0.1.4\"\n```\n\n----------------------------------------\n\nTITLE: Defining Deploy Script Configuration (TypeScript/JSON)\nDESCRIPTION: Shows the configuration line for a `deploy` script, likely within `package.json`. It uses `npx hardhat run scripts/deploy.ts` to execute the deployment logic defined in the `deploy.ts` script file. This script handles the deployment of smart contracts to the specified network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n\"deploy\": \"npx hardhat run scripts/deploy.ts\"\n```\n\n----------------------------------------\n\nTITLE: Prompting for Enabled Address Configuration (Transaction Allow List)\nDESCRIPTION: Once the admin address configuration is complete ('Done'), the Avalanche-CLI wizard prompts the user whether they want to configure 'enabledAddresses'. These are the addresses specifically permitted to submit transactions once the Transaction Allow List precompile is active.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n✔ Done\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Add 'enabledAddresses'?:\n  ▸ Yes\n    No\n```\n\n----------------------------------------\n\nTITLE: Navigating to Precompile-EVM Directory\nDESCRIPTION: Change directory to the Precompile-EVM root folder in the GOPATH.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/07-build-and-run.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/precompile-evm\n```\n\n----------------------------------------\n\nTITLE: Advanced Hardhat Verification Script with Array Arguments\nDESCRIPTION: TypeScript script demonstrating how to verify a smart contract with complex constructor arguments, including arrays. This script uses Hardhat's 'verify:verify' task for verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport console from \"console\"\nconst hre = require(\"hardhat\")\n\n// Define the NFT\nconst name = \"MockNFT\"\nconst symbol = \"Mock\"\nconst _metadataUri =\n  \"ipfs://QmQn2jepp3jZ3tVxoCisMMF8kSi8c5uPKYxd71xGWG38hV/Example\"\nconst _royaltyRecipient = \"0xcd3b766ccdd6ae721141f452c550ca635964ce71\"\nconst _royaltyValue = \"50000000000000000\"\nconst _custodians = [\n  \"0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199\",\n  \"0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\",\n  \"0xdd2fd4581271e230360230f9337d5c0430bf44c0\",\n]\nconst _saleLength = \"172800\"\nconst _claimAddress = \"0xcd3b766ccdd6ae721141f452c550ca635964ce71\"\n\nasync function main() {\n  await hre.run(\"verify:verify\", {\n    address: \"0x08bf160B8e56899723f2E6F9780535241F145470\",\n    constructorArguments: [\n      name,\n      symbol,\n      _metadataUri,\n      _royaltyRecipient,\n      _royaltyValue,\n      _custodians,\n      _saleLength,\n      _claimAddress,\n    ],\n  })\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive ChainRow with Hover Effects\nDESCRIPTION: Shows how to add hover effects and cursor styling to make the ChainRow component interactive.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-row.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainRow \n  chain_id={43114}\n  name=\"Avalanche C-Chain\"\n  className=\"hover:bg-gray-100 cursor-pointer\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running AvalancheJS Example Script\nDESCRIPTION: Example of running a specific AvalancheJS example script (C-Chain export) using Node.js with ts-node/esm loader.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm examples/c-chain/export.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Storage Key Constants in Go\nDESCRIPTION: Defines storage key constants and ABI variables for the StringStore precompile contract\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/02-store-data-in-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    // StringStoreRawABI contains the raw ABI of StringStore contract.\n    //go:embed contract.abi\n    StringStoreRawABI string\n\n    StringStoreABI = contract.ParseABI(StringStoreRawABI)\n\n    StringStorePrecompile = createStringStorePrecompile()\n\n    // Key that defines where our string will be stored\n    storageKeyHash = common.BytesToHash([]byte(\"storageKey\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Authorizing Address for VRF Random Word Requests\nDESCRIPTION: Command to authorize a specific address with a subscription ID to request random words through the VRF wrapper contract. This is a prerequisite step before making any random word requests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/08-request-random-words.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> $VRF_WRAPPER \"addAuthorizedAddress(address caller, uint256 subscriptionId)\" $VRF_CONSUMER $VRF_SUBSCRIPTION_ID\n```\n\n----------------------------------------\n\nTITLE: Fetching C-Chain Transaction Data with eth_getTransactionReceipt\nDESCRIPTION: This snippet shows how to fetch data about a C-Chain transaction using the eth_getTransactionReceipt method in Postman, utilizing an environment variable for the transaction hash.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-postman/making-api-calls.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_getTransactionReceipt\",\n  \"params\": [\n    \"{{transaction_hash}}\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenRow with Balance - React TypeScript\nDESCRIPTION: Demonstrates using TokenRow to display both token details and a formatted token balance via BigNumber. Requires BigNumber. Inputs include the same as basic usage, plus balance. Outputs the token row showing balance with 3 decimal places.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-row.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n  balance={new BigNumber(\"1.234\")}\n/>\n```\n\n----------------------------------------\n\nTITLE: ChainDropdown with Chain Filtering\nDESCRIPTION: Demonstrates how to filter the list of available chains based on supported chains. This example shows how to use JavaScript array methods to provide only specific chains to the dropdown component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-dropdown.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainDropdown \n  selected={43114}\n  list={chains.filter(id => supportedChains.includes(id))}\n  onSelectionChanged={handleChainChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blockchain ID using Avalanche-CLI\nDESCRIPTION: This bash command uses the Avalanche-CLI to describe a blockchain and retrieve its ID. The output includes various details about the blockchain, including its hexadecimal ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/04-create-sender-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe myblockchain\n```\n\n----------------------------------------\n\nTITLE: Attaching Peer to Node with cURL\nDESCRIPTION: Illustrates attaching a peer to a node using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/attachpeer' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"nodeName\":\"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-1155 Balance Fetching\nDESCRIPTION: Function to retrieve ERC-1155 token balances for a given address. Handles pagination and combines results into a single array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst listErc1155Balances = async (address: string) => {\n    const result = await avaCloudSDK.data.evm.balances.listErc1155Balances({\n        pageSize: 10,\n        address: address,\n      });\n    const balances: Erc1155TokenBalance[] = [];\n    for await (const page of result) {\n        balances.push(...page.result.erc1155TokenBalances);\n    }\n    return balances\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Owner State in a Solidity Contract Constructor\nDESCRIPTION: This snippet enhances the `Safe` contract by adding an `owner` state variable of type `address`. The `constructor` function initializes this `owner` variable with the address of the contract deployer (`msg.sender`), establishing the basis for ownership-based access control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/05-modifiers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Safe {\n  \n  address owner;\n  \n  constructor() {\n    owner = msg.sender; \n  }\n  \n  function deposit() public {}\n  \n  function withdraw() public {}\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Packing sayHello Output via ABI in Go\nDESCRIPTION: Packs the output of the sayHello contract function into an ABI-compliant byte array. This relies on a valid ABI instance (HelloWorldABI) and the Go Ethereum ABI library. Input is a Go string result, and output is an encoded []byte or error. Primarily used before returning values to the EVM. Require correct matching of ABI definition and function name; erroneous outputs may lead to reverts or call failures.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// PackSayHelloOutput attempts to pack given result of type string\n// to conform the ABI outputs.\nfunc PackSayHelloOutput(result string) ([]byte, error) {\n\treturn HelloWorldABI.PackOutput(\"sayHello\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Decidable Interface for Consensus Elements in AvalancheGo (Go)\nDESCRIPTION: This Go interface (`choices.Decidable`) provides a common structure for any element involved in the Avalanche consensus process, such as transactions or blocks. It requires implementing methods to return a unique identifier (`ID`), trigger acceptance (`Accept`) or rejection (`Reject`) based on consensus outcomes, and report the current processing status (`Status`). It depends on the `ids` package for unique identifiers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/index.mdx#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Decidable represents element that can be decided.\n//\n// Decidable objects are typically thought of as either transactions, blocks, or\n// vertices.\ntype Decidable interface {\n\t// ID returns a unique ID for this element.\n\t//\n\t// Typically, this is implemented by using a cryptographic hash of a\n\t// binary representation of this element. An element should return the same\n\t// IDs upon repeated calls.\n\tID() ids.ID\n\n\t// Accept this element.\n\t//\n\t// This element will be accepted by every correct node in the network.\n\tAccept() error\n\n\t// Reject this element.\n\t//\n\t// This element will not be accepted by any correct node in the network.\n\tReject() error\n\n\t// Status returns this element's current status.\n\t//\n\t// If Accept has been called on an element with this ID, Accepted should be\n\t// returned. Similarly, if Reject has been called on an element with this\n\t// ID, Rejected should be returned. If the contents of this element are\n\t// unknown, then Unknown should be returned. Otherwise, Processing should be\n\t// returned.\n\tStatus() Status\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TIE Client and Fetching Avalanche Metrics\nDESCRIPTION: Demonstrates how to initialize The TIE client using an API key and fetch various metrics for AVAX including price, volume, and sentiment data at hourly intervals.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/thetie.mdx#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom thetie import TieClient\n\nclient = TieClient(api_key='your-api-key')\n\n# Fetch Avalanche metrics\navalanche_data = client.get_metrics(\n    asset='AVAX',\n    metrics=['price', 'volume', 'sentiment'],\n    interval='1h'\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Rejection in TimestampVM\nDESCRIPTION: The reject function marks a block as rejected in the VM state. It updates the block's status, persists it to storage, and removes it from the verified blocks collection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/blocks.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n/// Mark this [`Block`](Block) rejected and updates `State` (crate::state::State) accordingly.\n/// # Errors\n/// Returns an error if the state can't be updated.\npub async fn reject(&mut self) -> io::Result<()> {\n    self.set_status(choices::status::Status::Rejected);\n\n    // only decided blocks are persistent -- no reorg\n    self.state.write_block(&self.clone()).await?;\n\n    self.state.remove_verified(&self.id()).await;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Structure in Protocol Buffers for Avalanche Network\nDESCRIPTION: The main Message proto message that serves as a container for all peer-to-peer communication, supporting various message types and compression algorithms including Gzip and Zstd.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Message {\n  oneof message {\n    bytes compressed_gzip = 1;\n    bytes compressed_zstd = 2;\n    // ... (other compression algorithms can be added)\n    Ping ping = 11;\n    Pong pong = 12;\n    Version version = 13;\n    PeerList peer_list = 14;\n    // ... (other message types)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INativeSendAndCallReceiver Interface in Solidity\nDESCRIPTION: This interface defines the receiveTokens function for contracts that handle receiving native token transfers. It is similar to IERC20SendAndCallReceiver but omits token and amount parameters, and the function is payable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/03-send-and-call-receivers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ninterface INativeSendAndCallReceiver {\n    function receiveTokens(\n        bytes32 sourceBlockchainID,\n        address originTokenTransferrerAddress,\n        address originSenderAddress,\n        bytes calldata payload\n    ) external payable;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Custom VM Deployment Error Output in Bash\nDESCRIPTION: Illustrates a potential error output (`context deadline exceeded`) when deploying a custom VM using `avalanche blockchain deploy`. While the error message is similar to a general timeout, a common cause in this context is an RPC protocol version mismatch between the custom VM and the version of AvalancheGo used by Avalanche-CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/troubleshooting.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[~]$ avalanche blockchain deploy myblockchain\n\n✔ Local Network\nDeploying [myblockchain] to Local Network\nBackend controller started, pid: 26388, output at: /Users/user/.avalanche-cli/runs/server_20221231_111605/avalanche-cli-backend\nVMs ready.\nStarting network...\n.........\nBlockchain has been deployed. Wait until network acknowledges...\n..................................................................................\n..................................................................................\n......Error: failed to query network health: rpc error: code = DeadlineExceeded desc = context deadline exceeded\n```\n\n----------------------------------------\n\nTITLE: Using AddressInput Component in TSX\nDESCRIPTION: Demonstrates basic and icon-enhanced usage of the `AddressInput` component. It shows how to import the component and `lucide-react` icons, and render the input with `placeholder`, `onChange` handler, and an optional `icon` prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/address-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { AddressInput } from '@avalabs/builderkit';\nimport { Wallet } from 'lucide-react';\n\n// Basic usage\n<AddressInput \n  placeholder=\"Enter address...\"\n  onChange={(address) => console.log('Valid address:', address)}\n/>\n\n// With icon\n<AddressInput \n  placeholder=\"Recipient address\"\n  icon={<Wallet className=\"w-4 h-4\" />}\n  onChange={handleAddressChange}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting a Specific Reward Address in RewardManager\nDESCRIPTION: JSON configuration to direct all transaction rewards to a specific address. This configuration sets up the precompile to send all fees to the defined rewardAddress.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/rewardmanager.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewardManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"initialRewardConfig\": {\n      \"rewardAddress\": \"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Logout with Privy Hook (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to implement user logout functionality using Privy's `useLogout` hook. The hook provides a `logout` function that, when called (typically via a button click), terminates the user's session and logs them out of the application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLogout } from '@privy-io/react-auth';\n\n// Inside your React component\nconst { logout } = useLogout();\n\n// Example usage with a button:\n// <button onClick={logout}>Logout</button>\n```\n\n----------------------------------------\n\nTITLE: Completing Delegator Registration via Contract Call (PoS)\nDESCRIPTION: This function call is made on the `PoSValidatorManager`, providing the `L1ValidatorWeightMessage` received from the P-Chain. It finalizes the delegator registration or removal process on the C-Chain after the corresponding weight change has been acknowledged by the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_12\n\nLANGUAGE: Identifier\nCODE:\n```\ncompleteDelegatorRegistration\n```\n\n----------------------------------------\n\nTITLE: Importing an Interface from Subnet-EVM Contracts in Solidity\nDESCRIPTION: This Solidity code imports the IAllowList interface from the Subnet-EVM contracts package using the Node.js module resolution path. This import statement enables type and interface inheritance from a third-party library, requiring '@avalabs/subnet-evm-contracts' to be listed in the JavaScript project's package.json and installed via npm. Essential for accessing allow list related functionality in custom contracts. No direct input/output beyond import resolution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@avalabs/subnet-evm-contracts/contracts/interfaces/IAllowList.sol\";\n```\n\n----------------------------------------\n\nTITLE: Adding the First Admin Address via Wizard\nDESCRIPTION: This snippet shows the user selecting 'Add' from the admin address management menu and then providing the first admin address (e.g., '0xaaaabbbbccccddddeeeeffff1111222233334444') in the subsequent prompt within the Avalanche-CLI wizard.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n✔ Add\n✔ Add an address: 0xaaaabbbbccccddddeeeeffff1111222233334444\n```\n\n----------------------------------------\n\nTITLE: Rewards Owner Gantt Specification\nDESCRIPTION: Binary layout specification for the Rewards Owner structure showing field sizes and data types\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_60\n\nLANGUAGE: text\nCODE:\n```\n+------------------------+-------------------------------+\n| type_id   : int        | 4 bytes                       |\n+------------------------+-------------------------------+\n| locktime  : long       | 8 bytes                       |\n+------------------------+-------------------------------+\n| threshold : int        | 4 bytes                       |\n+------------------------+-------------------------------+\n| addresses : [][20]byte | 4 + 20 * len(addresses) bytes |\n+------------------------+-------------------------------+\n|                        | 40 bytes                      |\n+------------------------+-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing ChainRow in a List Layout\nDESCRIPTION: Demonstrates how to use multiple ChainRow components in a vertical list with flex layout and spacing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-row.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex flex-col gap-2\">\n  <ChainRow \n    chain_id={43114}\n    name=\"Avalanche C-Chain\"\n  />\n  <ChainRow \n    chain_id={43113}\n    name=\"Fuji Testnet\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom Avalanche VM in Go\nDESCRIPTION: This Go code snippet shows how to initialize a VM by invoking its Initialize method with several parameters, including context, database manager, genesis data, upgrade and configuration objects, message channel, feature extensions, and sender. This step is typically required before the VM can participate in block processing and ensures all necessary internal state (such as database/mempool/genesis) is set up. Prerequisites: appropriate arguments and dependencies provided via AvalancheGo during chain startup. Input parameters must satisfy respective types for context and feature extensions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nif err := vm.Initialize(\n    ctx.Context,\n    vmDBManager,\n    genesisData,\n    chainConfig.Upgrade,\n    chainConfig.Config,\n    msgChan,\n    fxs,\n    sender,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Cross-Chain Message Reception\nDESCRIPTION: Command to verify the received message on the Avalanche L1 chain by calling the lastMessage function on the receiver contract. Uses Cast CLI to make a read call to the blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/07-send-a-message.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain $RECEIVER_ADDRESS \"lastMessage()(string)\"\n```\n\n----------------------------------------\n\nTITLE: Listing RPCs in Bash\nDESCRIPTION: Shows how to list RPCs for all blockchains in the network using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control list-rpcs\n```\n\n----------------------------------------\n\nTITLE: Configuring Precompile Upgrades - JSON\nDESCRIPTION: Specifies the structure of an upgrade.json file that defines how and when precompiles are enabled or disabled in the subnet-EVM chain. Each entry in 'precompileUpgrades' sets a precompile's activation timestamp and any required parameters, such as admin addresses. The configuration must be sorted in order of activation, and any mistakes in timestamps or sequence can cause node startup failures. Each precompile upgrade block contains one precompile setting per activation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"precompileUpgrades\": [\n    {\n      \"[PRECOMPILE_NAME]\": {\n        \"blockTimestamp\": \"[ACTIVATION_TIMESTAMP]\", // unix timestamp precompile should activate at\n        \"[PARAMETER]\": \"[VALUE]\" // precompile specific configuration options, eg. \"adminAddresses\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modifier Syntax in Solidity\nDESCRIPTION: This snippet illustrates the basic syntax for defining a modifier in Solidity. It shows the `modifier` keyword followed by the modifier name and optional arguments within parentheses, enclosing the modifier's logic within curly braces.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/05-modifiers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier <modifier-name>(<arguments>) {}\n```\n\n----------------------------------------\n\nTITLE: Sample Precompile Upgrade Configuration\nDESCRIPTION: JSON configuration for blockchain precompile upgrades, including txAllowList configuration with admin addresses and block timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"precompileUpgrades\": [\n        {\n            \"txAllowListConfig\": {\n                \"adminAddresses\": [\n                    \"0xb3d82b1367d362de99ab59a658165aff520cbd4d\"\n                ],\n                \"enabledAddresses\": null,\n                \"blockTimestamp\": 1677550447\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC-721 Balance Fetching\nDESCRIPTION: Function to retrieve ERC-721 token balances for a given address. Handles pagination and combines results into a single array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst listERC721Balances = async (address: string) => {\n    const result = await avaCloudSDK.data.evm.balances.listErc721Balances({\n        pageSize: 10,\n        address: address,\n      });\n    const balances: Erc721TokenBalance[] = [];\n    for await (const page of result) {\n        balances.push(...page.result.erc721TokenBalances);\n    }\n    return balances\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana\nDESCRIPTION: Command to execute step 2 of the installer script which installs and configures Grafana.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh --2\n```\n\n----------------------------------------\n\nTITLE: Selecting Precompile to Configure in Avalanche-CLI Wizard\nDESCRIPTION: This section of the wizard output, following the initial warnings, prompts the user to select which Subnet-EVM precompile they wish to configure for the network upgrade (e.g., Contract Deployment Allow List, Manage Fee Settings). It advises configuring only one precompile per upgrade for simplicity.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAvalanchego and this tool support configuring multiple precompiles.\nHowever, we suggest to only configure one per upgrade.\n\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Select the precompile to configure:\n  ▸ Contract Deployment Allow List\n    Manage Fee Settings\n    Native Minting\n    Transaction Allow List\n```\n\n----------------------------------------\n\nTITLE: Creating UTXO with NFT Transfer Output in Avalanche\nDESCRIPTION: Detailed binary structure of a UTXO containing an NFT Transfer Output. Shows the complete byte-level structure with CodecID, TxID, UTXOIndex, AssetID, and the NFT transfer output which includes payload data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_52\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID   <- 0x0000\n    TxID      <- 0xa68f794a7de7bdfc5db7ba5b73654304731dd586bbf4a6d7b05be6e49de2f936\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7\n    Output    <- 0000000b000000000000000b4e4654205061796c6f6164000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0xa6, 0x8f, 0x79, 0x4a, 0x7d, 0xe7, 0xbd, 0xfc,\n    0x5d, 0xb7, 0xba, 0x5b, 0x73, 0x65, 0x43, 0x04,\n    0x73, 0x1d, 0xd5, 0x86, 0xbb, 0xf4, 0xa6, 0xd7,\n    0xb0, 0x5b, 0xe6, 0xe4, 0x9d, 0xe2, 0xf9, 0x36,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x03, 0xc6, 0x86, 0xef, 0xe8, 0xd8, 0x0c, 0x51,\n    0x9f, 0x35, 0x69, 0x29, 0xf6, 0xda, 0x94, 0x5f,\n    0x7f, 0xf9, 0x03, 0x78, 0xf0, 0x04, 0x4b, 0xb0,\n    0xe1, 0xa5, 0xd6, 0xc1, 0xad, 0x06, 0xba, 0xe7,\n    // nft transfer output:\n    0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x0b, 0x4e, 0x46, 0x54, 0x20,\n    0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x3c,\n    0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a, 0x0e,\n    0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68, 0x61,\n    0xe1, 0xb2, 0x9c, 0x62, 0x76, 0xaa, 0x2a,\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Fuji Testnet AVAX Balance with Ethers.js in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve the AVAX balance for a specific address on the Fuji Testnet using the ethers.js library. It initializes an ethers provider connected to the Fuji Testnet RPC endpoint, fetches the balance using `provider.getBalance()`, converts the balance from wei to AVAX using `ethers.utils.formatEther()`, and logs the result to the console. Requires the `ethers` library to be installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/fuji-workflow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst ethers = require(\"ethers\");\nconst network = \"https://api.avax-test.network/ext/bc/C/rpc\";\nconst provider = ethers.getDefaultProvider(network);\nconst address = \"0x25d83F090D842c1b4645c1EFA46B15093d4CaC7C\";\n\nconst main = async (): Promise<any> => {\n  provider.getBalance(address).then((balance) => {\n    // convert a currency unit from wei to ether\n    const balanceInAvax = ethers.utils.formatEther(balance);\n    console.log(`balance: ${balanceInAvax} AVAX`);\n    // balance: 0.02 AVAX\n  });\n};\n\nmain();\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Validator Nodes on GCP via CLI\nDESCRIPTION: This command initiates the creation of one or more Avalanche validator nodes on Google Cloud Platform (GCP). The nodes are grouped under the specified `<clusterName>`. Running this command requires Avalanche-CLI to be installed and configured with GCP credentials. It interactively prompts for GCP region, monitoring setup, and Avalanche Go version. It provisions GCP instances (defaulting to e2-standard-8, Ubuntu 20.04, 1TB storage), installs Avalanche Go and CLI, downloads access keys (.pem, staker.crt, staker.key), and starts the node bootstrapping process. Note: This command is experimental (ALPHA) and incurs GCP costs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-gcp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node create <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Reward for Avalanche Validator Staking\nDESCRIPTION: This LaTeX formula computes the maximum reward a validator can receive when staking for the entire minting period in the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/how-to-stake.mdx#2025-04-23_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nMax Reward = \\left(MaximumSupply - Supply \\right) \\times \\frac{Stake}{Supply} \\times \\frac{MaxConsumptionRate}{PercentDenominator}\n```\n\n----------------------------------------\n\nTITLE: Saving Deployed Contract Address as Environment Variable\nDESCRIPTION: This bash command saves the deployed contract address as an environment variable named RECEIVER_ADDRESS for future use in the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/04-create-simple-calulcator-receiver.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport RECEIVER_ADDRESS=0x5DB9A7629912EBF95876228C24A848de0bfB43A9\n```\n\n----------------------------------------\n\nTITLE: Cloning Avalanche DApp SDKs Repository\nDESCRIPTION: Commands to clone and set up the avalanche-dapp-sdks repository which contains examples for Core wallet integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/add-network-programmatically.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanche-dapp-sdks.git\ncd avalanche-dapp-sdks\nyarn bootstrap\n```\n\n----------------------------------------\n\nTITLE: Managing Token Transferrers with Avalanche CLI\nDESCRIPTION: Command suite for deploying and managing Token Transferrers, providing tools for cross-chain token transfers in Avalanche ecosystem.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain tokenTransferrer [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Acceptance in TimestampVM\nDESCRIPTION: The accept function marks a block as accepted in the VM state. It updates the block's status, persists it to storage, updates the last accepted block reference, and removes it from the verified blocks collection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/blocks.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n/// Mark this [`Block`](Block) accepted and updates `State` (crate::state::State) accordingly.\n/// # Errors\n/// Returns an error if the state can't be updated.\npub async fn accept(&mut self) -> io::Result<()> {\n    self.set_status(choices::status::Status::Accepted);\n\n    // only decided blocks are persistent -- no reorg\n    self.state.write_block(&self.clone()).await?;\n    self.state.set_last_accepted_block(&self.id()).await?;\n\n    self.state.remove_verified(&self.id()).await;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Network Upgrade Override Configuration\nDESCRIPTION: JSON configuration for rescheduling mandatory network upgrades like Durango by specifying new activation timestamps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"networkUpgradeOverrides\": {\n    \"{networkUpgrade1}\": timestamp1,\n    \"{networkUpgrade2}\": timestamp2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SECP256K1 Credential Protobuf Definition\nDESCRIPTION: Protocol Buffer definition for SECP256K1 Credential structure containing typeID and signatures.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1Credential {\n    uint32 typeID = 1;             // 4 bytes\n    repeated bytes signatures = 2; // 4 bytes + 65 bytes * len(signatures)\n}\n```\n\n----------------------------------------\n\nTITLE: Signature for X-Chain API Method avm.getTxStatus\nDESCRIPTION: Defines the method signature for `avm.getTxStatus` within the X-Chain API. It indicates that the method takes one argument, `txID` (represented as bytes), and returns a single value, `status` (represented as a string). Note that TXIDs are typically provided in CB58 format in requests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\navm.getTxStatus(txID:bytes) -> (status:string)\n```\n\n----------------------------------------\n\nTITLE: Completing Validator Registration\nDESCRIPTION: Smart contract function to complete the validator registration process by processing the signed warp message\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/13-registering-validator/registering-validator.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction completeValidatorRegistration(uint32 messageIndex)\n```\n\n----------------------------------------\n\nTITLE: Using Identity Context with Address Component in React (TypeScript)\nDESCRIPTION: Demonstrates integration of Address with an Identity context. The address is provided via the context (Identity provider), allowing child components like Address to extract it and optionally abbreviate. Requires the Identity context/provider, Address component, and a valid address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/address.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Identity address=\"0x1234567890123456789012345678901234567890\">\n  <Address abbreviate={true} />\n</Identity>\n```\n\n----------------------------------------\n\nTITLE: Managing Admin Addresses in Avalanche-CLI Wizard\nDESCRIPTION: After confirming the intention to add admin addresses ('Yes'), the Avalanche-CLI wizard presents this menu. It allows the user to 'Add' new addresses, 'Delete' existing ones, 'Preview' the current list, get 'More Info', or indicate they are 'Done' managing the list.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n✔ Yes\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Provide 'adminAddresses':\n  ▸ Add\n    Delete\n    Preview\n    More Info\n↓   Done\n```\n\n----------------------------------------\n\nTITLE: Executing Cross-Chain Addition via Sender Contract\nDESCRIPTION: Send a transaction to the sender contract to initiate a cross-chain addition operation with two numbers (2 and 3) using the sendAddMessage function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/05-call-simple-calculator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $SENDER_ADDRESS \"sendAddMessage(address, uint256, uint256)\" $RECEIVER_ADDRESS 2 3\n```\n\n----------------------------------------\n\nTITLE: Setting Source Blockchain ID Environment Variable in Bash\nDESCRIPTION: This command sets the SOURCE_BLOCKCHAIN_ID_HEX environment variable with the obtained blockchain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/03-deploy-native-token-home.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SOURCE_BLOCKCHAIN_ID_HEX=0x...\n```\n\n----------------------------------------\n\nTITLE: Implementing IERC20TokenTransferrer and INativeTokenTransferrer Interfaces in Solidity\nDESCRIPTION: These interfaces define the external functions for interacting with ERC20 and native token transfer contract implementations. The key difference is that native token transferrer functions are 'payable' and use 'msg.value', while ERC20 functions require an explicit amount parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/03-file-structure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20TokenTransferrer {\n    // ERC20 token transfer functions (not payable, explicit amount)\n}\n\ninterface INativeTokenTransferrer {\n    // Native token transfer functions (payable, uses msg.value)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying L1 Validator Set using AvaCloud Data API Response\nDESCRIPTION: This JSON structure represents the response format when querying the L1 validator set using the AvaCloud Data API. It includes details about each validator such as their ID, node ID, subnet ID, weight, remaining balance, and ownership information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/09-query-validator-set.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nextPageToken\": \"<string>\",\n  \"validators\": [\n    {\n      \"validationId\": \"<string>\",\n      \"nodeId\": \"<string>\",\n      \"subnetId\": \"<string>\",\n      \"weight\": 123,\n      \"remainingBalance\": 123,\n      \"creationTimestamp\": 123,\n      \"blsCredentials\": {},\n      \"remainingBalanceOwner\": {\n        \"addresses\": [\n          \"<string>\"\n        ],\n        \"threshold\": 123\n      },\n      \"deactivationOwner\": {\n        \"addresses\": [\n          \"<string>\"\n        ],\n        \"threshold\": 123\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Proto Definition for AddValidatorTx Message - Text\nDESCRIPTION: This code block defines the structure of the AddValidatorTx Protobuf message, used to serialize Avalanche validator transactions over RPC or for signing. It declares dependencies on the messages BaseTx, Validator, Stake, and SECP256K1OutputOwners, all of which must be pre-defined according to AVAX protocol specs. The message requires five fields: a base transaction, validator details, staking outputs, a rewards owner, and reward shares; sizes may vary depending on nested objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nmessage AddValidatorTx {\n    BaseTx base_tx = 1;                      // size(base_tx)\n    Validator validator = 2;                 // 44 bytes\n    Stake stake = 3;                         // size(LockedOuts)\n    SECP256K1OutputOwners rewards_owner = 4; // size(rewards_owner)\n    uint32 shares = 5;                       // 04 bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Packing Output Data from Go Byte Array to Solidity Format\nDESCRIPTION: Function that packs a Go [16]byte array into the format expected by Solidity's staticcall return value. Uses ABI definitions to ensure proper encoding of the output data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/03-unpack-input-pack-output.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// PackHashWithMd5Output attempts to pack given hash of type [16]byte\n// to conform the ABI outputs.\nfunc PackHashWithMd5Output(hash [16]byte) ([]byte, error) {\n    return Md5ABI.PackOutput(\"hash_with_md5\", hash)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Subnet Configuration on Avalanche Nodes\nDESCRIPTION: This subcommand updates all nodes in a cluster with the latest subnet configuration and VM for custom VMs. The updated subnet bootstrap status can be checked with the status command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_117\n\nLANGUAGE: bash\nCODE:\n```\navalanche node update subnet [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for subnet\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Applying Subnet Upgrade with Avalanche CLI\nDESCRIPTION: Command to apply generated upgrade bytes to running Blockchain nodes, triggering a network upgrade. It supports both local and public network upgrades and can automatically update node configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_155\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade apply [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Composing Native AVAX Transfers with TransactionButton - React/TypeScript\nDESCRIPTION: This snippet demonstrates the use of TransactionButton for initiating on-chain native token transfers (AVAX) to a target address. The function prepares the transaction using the input recipient, amount, and network, then triggers it upon user confirmation. It logs events for success or error and depends on correctly initialized client, avaxRecipient, avalancheFuji, and toWei helper.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n <TransactionButton\\n    transaction={() => {\\n        const transaction = prepareTransaction({\\n        to: avaxRecipient,\\n        chain: avalancheFuji,\\n        client: client,\\n        value: toWei(avaxAmount),\\n    });\\n    return transaction;\\n    }}\\n    onTransactionConfirmed={() => { console.log(\\\"Transaction confirmed\\\") }}\\n    onError={() => { console.log(\\\"Transaction error\\\") }}\\n    >\\n    Confirm Transaction\\n</TransactionButton>\n```\n\n----------------------------------------\n\nTITLE: Deploying CrossChainVRFWrapper Contract using Forge\nDESCRIPTION: This command deploys the CrossChainVRFWrapper contract to a supported L1 chain using the forge create command. It requires the RPC URL, private key, and TeleporterMessenger address as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/05-deploy-vrf-wrapper.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> src/CrossChainVRFWrapper.sol:CrossChainVRFWrapper --constructor-args <TELEPORTER_MESSENGER_ADDRESS> --broadcast\n```\n\n----------------------------------------\n\nTITLE: Implementing Ancestors Response Message\nDESCRIPTION: The Ancestors message is sent in response to GetAncestors, containing the chain ID, original request ID, and ancestry containers for the requested container.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Ancestors {\n  reserved 4; // Until Cortina upgrade is activated\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  repeated bytes containers = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HelloWorld Precompile Gas Costs Based on Operation Type\nDESCRIPTION: Sets appropriate gas costs for the HelloWorld precompile functions based on their operations. SayHelloGasCost is set to the cost of reading one slot, while SetGreetingGasCost combines the cost of writing one slot plus the cost of reading from the AllowList.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nSayHelloGasCost    uint64 = contract.ReadGasCostPerSlot\nSetGreetingGasCost uint64 = contract.WriteGasCostPerSlot + allowlist.ReadAllowListGasCost\n```\n\n----------------------------------------\n\nTITLE: Executing Avalanche Blockchain Upgrade Command\nDESCRIPTION: Command to initiate the blockchain upgrade process with interactive prompt for deployment selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade apply testblockchain\nUse the arrow keys to navigate: ↓ ↑ → ←\n? What deployment would you like to upgrade:\n  ▸ Existing local deployment\n```\n\n----------------------------------------\n\nTITLE: Encoding a 32-bit Integer in Avalanche\nDESCRIPTION: Illustrates how 32-bit integers are packed in BigEndian format into the message payload.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    0x01020304\nResults in:\n    [0x01, 0x02, 0x03, 0x04]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Details in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint fetches details of a specific asset in a blockchain of the Avalanche mainnet. It requires the blockchain ID and asset ID as path parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM/assets/{assetId} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Deploying NativeTokenRemote Contract\nDESCRIPTION: Deploy the NativeTokenRemote contract on the new L1 blockchain using Forge. This contract will handle the remote token functionality on the new chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK lib/icm-contracts/contracts/ictt/TokenRemote/NativeTokenRemote.sol:NativeTokenRemote --optimize --optimizer-runs 200 --broadcast --constructor-args \"($TELEPORTER_REGISTRY_L1, $FUNDED_ADDRESS, \\\"1\\\", $C_CHAIN_BLOCKCHAIN_ID_HEX, $USDC_HOME_C_CHAIN, 6)\" \"USDC\" 100000000000000000000 0\n```\n\n----------------------------------------\n\nTITLE: Initiating Avalanche L1 Deployment with CLI\nDESCRIPTION: Command to start the Avalanche L1 deployment process using Avalanche-CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy testAvalanche L1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node ID with cURL in Bash\nDESCRIPTION: This code snippet demonstrates how to retrieve the node ID of an Avalanche node using a cURL request to the node's API. The 'info.getNodeID' method is used to obtain this information, which is necessary for various node operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/latitude.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"info.getNodeID\"\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Server Output Showing Successful Network Startup\nDESCRIPTION: Example output from the server terminal showing successful network startup. This displays the blockchain RPC endpoints for each node that can be used to interact with the deployed precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/precompile-deployment.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[blockchain RPC for \"srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\"] \"http://127.0.0.1:9650/ext/bc/2jDWMrF9yKK8gZfJaaaSfACKeMasiNgHmuZip5mWxUfhKaYoEU\"\n[blockchain RPC for \"srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\"] \"http://127.0.0.1:9652/ext/bc/2jDWMrF9yKK8gZfJaaaSfACKeMasiNgHmuZip5mWxUfhKaYoEU\"\n[blockchain RPC for \"srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\"] \"http://127.0.0.1:9654/ext/bc/2jDWMrF9yKK8gZfJaaaSfACKeMasiNgHmuZip5mWxUfhKaYoEU\"\n[blockchain RPC for \"srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\"] \"http://127.0.0.1:9656/ext/bc/2jDWMrF9yKK8gZfJaaaSfACKeMasiNgHmuZip5mWxUfhKaYoEU\"\n[blockchain RPC for \"srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\"] \"http://127.0.0.1:9658/ext/bc/2jDWMrF9yKK8gZfJaaaSfACKeMasiNgHmuZip5mWxUfhKaYoEU\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Local Avalanche Network with Network Runner\nDESCRIPTION: This command uses the Avalanche Network Runner to deploy a local five-node Avalanche network for development and testing purposes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngo run examples/local/fivenodenetwork/main.go\n```\n\n----------------------------------------\n\nTITLE: Sending AVAX Between Accounts via Yarn Script (Bash)\nDESCRIPTION: Executes the `send-avax-wallet-signer` yarn script (which runs `npx hardhat run scripts/sendAvaWalletSigner.ts`) targeting the local network. This script transfers AVAX from the primary funded account to other accounts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn send-avax-wallet-signer --network local\n\n# output\nyarn run v1.22.4\nnpx hardhat run scripts/sendAvaWalletSigner.ts --network local\nSeeding addresses with AVAX\n✨  Done in 1.33s.\n```\n\n----------------------------------------\n\nTITLE: Creating Default Network with Custom Binary Path - Avalanche Network Runner - Go\nDESCRIPTION: This Go snippet shows initializing a default Avalanche network where each node runs a user-specified AvalancheGo binary from a custom directory. It invokes local.NewDefaultNetwork with a logger and the explicit file path as parameters. Useful for cases where different environments or custom-built binaries are tested. Requires the Avalanche Network Runner Go package and the given binary directory to exist.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nnetwork, err := local.NewDefaultNetwork(log,\"/home/user/go/src/github.com/ava-labs/avalanchego/build\")\n```\n\n----------------------------------------\n\nTITLE: AWS SSH Key Configuration Commands\nDESCRIPTION: Commands to set up SSH keypair for EC2 instance access including moving the keypair file, setting permissions and adding to SSH agent.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# In this example we have a keypair called avalanche.pem which was downloaded from AWS to ~/Downloads/avalanche.pem\n# Confirm the file exists with the following command\ntest -f ~/Downloads/avalanche.pem && echo \"Avalanche.pem exists.\"\n\n# Move the avalanche.pem keypair from the ~/Downloads directory to the hidden ~/.ssh directory\nmv ~/Downloads/avalanche.pem ~/.ssh\n\n# Next add the private key identity to the OpenSSH authentication agent\nssh-add ~/.ssh/avalanche.pem;\n\n# Change file modes or Access Control Lists\nsudo chmod 600 ~/.ssh/avalanche.pem\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Blockchain Configuration Defaults - Text\nDESCRIPTION: Presents options for applying test or production default values to the blockchain configuration. Selecting \\'I want to use defaults for a test environment\\' automates suitable parameters for local experimentation. This prompt is part of the interactive CLI setup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n? Do you want to use default values for the Blockchain configuration?: \n  ▸ I want to use defaults for a test environment\n    I want to use defaults for a production environment\n    I don't want to use default values\n    Explain the difference\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ZeroDev ECDSA Kernel Account Client\nDESCRIPTION: JavaScript code to create and initialize a ZeroDev ECDSA kernel account client with project ID and wallet client configuration\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/zerodev.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createEcdsaKernelAccountClient } from \"@zerodev/sdk\"\n\nconst client = await createEcdsaKernelAccountClient({\n  projectId: \"YOUR_PROJECT_ID\",\n  owner: yourWalletClient,\n})\n```\n\n----------------------------------------\n\nTITLE: Initiating Primary Network Validation with Avalanche-CLI\nDESCRIPTION: This Bash command uses the Avalanche-CLI tool to start the configuration process for making all nodes in the specified `<clusterName>` validators on the Primary Network. It requires a pre-existing, bootstrapped cluster and initiates an interactive wizard for further configuration steps. Validation starts 20 seconds after successful execution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/validate-primary-network.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node validate primary <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Installing Privy, Viem, and Ethers Dependencies (Bash)\nDESCRIPTION: This command installs necessary Node.js packages for the project. `@privy-io/react-auth` is the core Privy SDK for React applications. `viem` is used as a lightweight interface for interacting with Ethereum-like blockchains (including Avalanche L1). `ethers` provides utility functions, often used here for formatting blockchain values like balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @privy-io/react-auth@latest\nnpm i viem@latest\nnpm i ethers@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying Mock ERC20 Receiver Contract using Forge on Avalanche L1\nDESCRIPTION: This command deploys the MockERC20SendAndCallReceiver contract using Forge. It requires the RPC URL and private key for deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/05-mock-receiver.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK lib/icm-contracts/contracts/ictt/mocks/MockERC20SendAndCallReceiver.sol:MockERC20SendAndCallReceiver --broadcast\n```\n\n----------------------------------------\n\nTITLE: Setting NativeTokenHome Contract Address Environment Variable in Bash\nDESCRIPTION: This command sets the ERC20_HOME_BRIDGE_L1 environment variable with the deployed contract address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/03-deploy-native-token-home.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_HOME_BRIDGE_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: Implementing AcceptedStateSummary Response Message\nDESCRIPTION: The AcceptedStateSummary message is sent in response to GetAcceptedStateSummary, containing the chain ID, original request ID, and the requested state summary IDs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AcceptedStateSummary {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  repeated bytes summary_ids = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying DexERC20Wrapper Contract using Forge\nDESCRIPTION: Deploy the DexERC20Wrapper contract using Forge with specified WAVAX and Factory V1 contract addresses as constructor arguments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/13-cross-chain-token-swaps/08-deploy-wrapped-exchange-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK contracts/interchain-token-transfer/cross-chain-token-swaps/DexERC20Wrapper.sol:DexERC20Wrapper --broadcast --constructor-args 0xd00ae08403B9bbb9124bB305C09058E32C39A48c 0xF5c7d9733e5f53abCC1695820c4818C59B457C2C\n```\n\n----------------------------------------\n\nTITLE: Configuring FeeManager Precompile in Genesis\nDESCRIPTION: JSON configuration snippet for activating the FeeManager precompile in the genesis block. This configuration specifies the block timestamp for activation and admin addresses that can manage the fee configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/feemanager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"feeManagerConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying NFT Transfer Output Structure in Text Format\nDESCRIPTION: Gantt chart representation of the NFT Transfer Output binary format, showing field types, sizes, and the total size calculation. This specification details how NFT Transfer Output data is structured in memory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n+-----------+------------+-------------------------------+\n| type_id   : int        |                       4 bytes |\n+-----------+------------+-------------------------------+\n| group_id  : int        |                       4 bytes |\n+-----------+------------+-------------------------------+\n| payload   : []byte     |        4 + len(payload) bytes |\n+-----------+------------+-------------------------------+\n| locktime  : long       |                       8 bytes |\n+-----------+------------+-------------------------------+\n| threshold : int        |                       4 bytes |\n+-----------+------------+-------------------------------+\n| addresses : [][20]byte | 4 + 20 * len(addresses) bytes |\n+-----------+------------+-------------------------------+\n                         |             28 + len(payload) |\n                         |  + 20 * len(addresses) bytes  |\n                         +-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Avalanche Mainnet\nDESCRIPTION: These commands set the RPC URL and private key environment variables for interacting with the Avalanche Mainnet. This allows the previous commands to be adapted for mainnet use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport RPC_URL=https://api.avax.network/ext/bc/C/rpc\nexport PRIVATE_KEY=<YOUR-PRIVATE-KEY>\n```\n\n----------------------------------------\n\nTITLE: Selecting Admin Role for Minting Address via CLI\nDESCRIPTION: Illustrates the CLI prompt where the user assigns a role (Admin, Manager, or Enabled) to an address being added to the native minter allowlist. Selecting 'Admin' grants the highest level of minting privileges.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/08-activate-native-minter.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n? What role should the address have?: \n  ▸ Admin\n    Manager\n    Enabled\n    Explain the difference\n    Cancel\n```\n\n----------------------------------------\n\nTITLE: Interchain command flags in Avalanche CLI\nDESCRIPTION: Basic flags for the interchain command, including help, config file specification, log level, and update check control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for interchain\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Saving ERC20 Token Remote Address as Environment Variable\nDESCRIPTION: This command saves the deployed ERC20TokenRemote contract address as an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/04-deploy-erc20-token-remote.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_TOKEN_REMOTE_C_CHAIN=0x...\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic TokenList in React - TypeScript\nDESCRIPTION: Shows a minimal integration scenario where TokenList displays tokens and reacts to token selection, with essential props chain_id, list, and onClick. Suitable for simple listings with no balance display. Requires React, TokenList, chain ID, a tokens array, and a token selection handler.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TokenList \n  chain_id={43114}\n  list={tokens}\n  onClick={handleTokenSelect}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Token Chip with TokenChip (TypeScript)\nDESCRIPTION: Renders a TokenChip for a token with standard information such as chain ID, address, symbol, and name. This example demonstrates basic usage, requiring the TokenChip component, React, and TypeScript support. All props must be provided as specified; outputs a visual chip with token icon and name. No optional visual or copy-to-clipboard features are enabled.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-chip.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Chain Logos in a Flex List (TypeScript TSX)\nDESCRIPTION: Presents a method for displaying several ChainIcon components within a flexbox container. Each ChainIcon can be associated with a different chain_id, and the container uses Tailwind CSS utility classes for styling and spacing. Requires logo assets for all listed chain IDs to be present.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-icon.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex gap-2\">\n  <ChainIcon chain_id={43114} />\n  <ChainIcon chain_id={43113} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Avalanche CLI to PATH Permanently\nDESCRIPTION: Command to permanently add Avalanche CLI to the system PATH by modifying shell initialization scripts. This example appends the export command to .bashrc file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/install-avalanche-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=~/bin:$PATH >> .bashrc\n```\n\n----------------------------------------\n\nTITLE: Initializing Contract Instance with Ethers.js\nDESCRIPTION: Creates a contract factory and attaches it to an existing deployed contract address to interact with an ERC20 token contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst Coin = await ethers.getContractFactory('ExampleERC20');\nconst coin = await Coin.attach('0x17aB05351fC94a1a67Bf3f56DdbB941aE6')\n```\n\n----------------------------------------\n\nTITLE: Providing Node API URL and SubnetID for L1 Import (Nodes Deployed)\nDESCRIPTION: When nodes are already deployed ('Yes' selected previously), this prompt asks for the API URL (including http/https and port) of an accessible validating node and the SubnetID of the Avalanche L1. The node URL is used to query the exact running VM version, bypassing manual version selection. The node must be accessible from the machine running the CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPlease provide an API URL of such a node so we can query its VM version (e.g. http://111.22.33.44:5555): http://154.42.240.119:9650\nWhat is the ID of the subnet?: 28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic FeeConfig - JSON\nDESCRIPTION: Establishes the initial dynamic fee structure for the precompile by specifying fee configuration data at network genesis or upgrade. All fee algorithm parameters, such as gas limits and base fee values, must be set inside the 'initialFeeConfig' object. This ensures the dynamic fee settings activate as soon as the precompile is enabled. Values must be chosen according to desired network economics, and the data must be placed within the correct genesis or upgrade key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feeManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"initialFeeConfig\": {\n      \"gasLimit\": 20000000,\n      \"targetBlockRate\": 2,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"blockGasCostStep\": 500000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AvalancheJS in JavaScript\nDESCRIPTION: Example of importing AvalancheJS modules in a JavaScript project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { avm, pvm, evm } from '@avalabs/avalanchejs';\n```\n\n----------------------------------------\n\nTITLE: Using the Messenger SendMsg command in Avalanche CLI\nDESCRIPTION: Command for sending and waiting for reception of an ICM message between two subnets, with options for specifying source and destination endpoints, addresses, and authentication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain messenger sendMsg [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Chits Message Structure in Protobuf\nDESCRIPTION: Defines the structure of a Chits message, which contains the preferences of a peer in response to a PushQuery or PullQuery message. It includes chain_id, request_id, preferred_id, accepted_id, and preferred_id_at_height fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_20\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Chits {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  bytes preferred_id = 3;\n  bytes accepted_id = 4;\n  bytes preferred_id_at_height = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Chain Messages with BuilderKit useWarpMessenger Hook in TypeScript\nDESCRIPTION: Showcases the useWarpMessenger React hook for sending and verifying cross-chain (warp) messages. Depends on @avalabs/builderkit and provides message send/verify functions using chain ID, message index, or destination address. Designed for integration with bridge or L1 messaging workflows.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWarpMessenger } from '@avalabs/builderkit';\\n\\nconst { \\n  sendWarpMessage, \\n  getVerifiedWarpMessage,\\n  getVerifiedWarpBlockHash,\\n  getBlockchainId \\n} = useWarpMessenger();\\n\\n// Send message\\nconst data = await sendWarpMessage(\\\"0x1234...\\\");\\n\\n// Verify message\\nconst message = await getVerifiedWarpMessage(43114, 0);\\nconst blockHash = await getVerifiedWarpBlockHash(43114, 0);\n```\n\n----------------------------------------\n\nTITLE: Approving Token Spending for ERC20TokenRemote on Source Blockchain\nDESCRIPTION: Executes a token approval transaction on the source blockchain (myblockchain) to allow the ERC20TokenRemote contract to spend tokens on behalf of the sender. The approval amount is set to 2000 tokens (assuming 18 decimal places).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/03-deploy-token-remote.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $ERC20_TOKEN_REMOTE_L1 \\\n\"approve(address, uint256)\" $ERC20_TOKEN_REMOTE_L1 2000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Starting Load Test with Avalanche-CLI\nDESCRIPTION: This command initiates a load test on an Avalanche L1 cluster. It creates a new cloud server to run the test, requiring the load test name, cluster name, and blockchain name as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-loadtest.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node loadtest start <loadtestName> <clusterName> <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Chain Metrics, Snapshots, and Logging in YAML\nDESCRIPTION: YAML configuration for enabling metrics, managing snapshots, and setting up logging for the C-Chain. This snippet shows how to configure performance monitoring, snapshot generation, and log output formats.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/c-chain.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetrics-enabled: false\nmetrics-expensive-enabled: false\nsnapshot-async: true\nsnapshot-verification-enabled: false\nlog-level: \"info\"\nlog-json-format: false\n```\n\n----------------------------------------\n\nTITLE: Requesting Random Words via Cross-Chain Communication\nDESCRIPTION: Implementation of requestRandomWords function that sends a cross-chain message to request random numbers from Chainlink VRF. Uses TeleporterMessenger for cross-chain communication and handles request parameters through a CrossChainRequest struct.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/04-bring-vrf-to-unsupported-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction requestRandomWords(\n    bytes32 keyHash,\n    uint16 requestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    bool nativePayment,\n    uint32 requiredGasLimit\n) external {\n    // Create CrossChainRequest struct\n    CrossChainRequest memory crossChainRequest = CrossChainRequest({\n        keyHash: keyHash,\n        requestConfirmations: requestConfirmations,\n        callbackGasLimit: callbackGasLimit,\n        numWords: numWords,\n        nativePayment: nativePayment\n    });\n    // Send Teleporter message\n    bytes memory encodedMessage = abi.encode(crossChainRequest);\n    TeleporterMessageInput memory messageInput = TeleporterMessageInput({\n        destinationBlockchainID: DATASOURCE_BLOCKCHAIN_ID, \n        destinationAddress: vrfRequesterContract,\n        feeInfo: TeleporterFeeInfo({ feeTokenAddress: address(0), amount: 0 }),\n        requiredGasLimit: requiredGasLimit,\n        allowedRelayerAddresses: new address[](0),\n        message: encodedMessage\n    });\n    teleporterMessenger.sendCrossChainMessage(messageInput);\n}\n```\n\n----------------------------------------\n\nTITLE: Backing up AvalancheGo Node Files Using SCP\nDESCRIPTION: Command to securely copy essential node files from a remote machine to a local backup directory using SCP. This backs up the staker certificate, key, and BLS signer key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscp -r ubuntu@PUBLICIP:/home/ubuntu/.avalanchego/staking ~/avalanche_backup\n```\n\n----------------------------------------\n\nTITLE: Querying Latest ICM Messenger Version on C-Chain\nDESCRIPTION: This command uses the 'cast' tool to call the 'latestVersion' function on the C-Chain ICM Registry contract, retrieving the latest version of the ICM Messenger.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/03-interact-with-the-registry.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c $C_CHAIN_REGISTRY_ADDRESS \"latestVersion()(uint256)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler in NextJS Server Component\nDESCRIPTION: This function handles GET requests to the backend API, routing them to the appropriate method based on the 'method' parameter. It supports 'getBlockHeight' and 'listErc20Balances' methods, processing their parameters and returning the results as JSON responses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/02-understanding-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const method = searchParams.get('method')\n  try {\n    let result\n    switch (method) {\n      case 'getBlockHeight':\n        result = await getBlockHeight()\n        break\n      case 'listErc20Balances':\n        const address: string = searchParams.get('address')!\n        const blockNumber: string = searchParams.get('blockNumber')!\n        result = await listErc20Balances(address, blockNumber);\n        break\n      default:\n        return NextResponse.json({ error: 'Invalid method' }, { status: 400 })\n    }\n    return NextResponse.json(result)\n  } catch (error) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Blockchain Upgrade VM Command\nDESCRIPTION: Command to upgrade a Blockchain's VM binary with options for both local and public deployments on Fuji and Mainnet networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade vm [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing GetAccepted Message for Frontier Request\nDESCRIPTION: The GetAccepted message sends a request with the sender's accepted frontier to a remote peer, specifying chain, request ID, deadline, container IDs, and engine type.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetAccepted {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  repeated bytes container_ids = 4;\n  EngineType engine_type = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Values in Solidity\nDESCRIPTION: Demonstrates how to encode multiple values (string and uint) into a single bytes message using abi.encode()\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/02-recap-bytes-encoding-decoding.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstring memory someString = \"test\";\nuint someNumber = 42;\n\nbytes message = abi.encode(someString, someNumber);\n```\n\n----------------------------------------\n\nTITLE: Running Precompile Tests Without AllowList Helper\nDESCRIPTION: Alternative approach to run precompile tests directly without using the AllowList helper function. This is useful when the precompile doesn't utilize AllowList functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-test-cases.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttest.Run(t, module, newStateDB(t))\n\t\t})\n\t}\n```\n\n----------------------------------------\n\nTITLE: Creating First Teleporter-Enabled Avalanche L1 Chain\nDESCRIPTION: Command to create the first Avalanche L1 chain (chain1) with Teleporter enabled, using the latest Subnet-EVM version. Configures chain ID 1 and TOKEN1 as the token name with default Subnet-EVM parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create <chain1> --evm --latest\\\n    --evm-chain-id 1 --evm-token TOKEN1 --evm-defaults\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Status Check Request\nDESCRIPTION: CURL command to check if the Avalanche node has completed bootstrapping via the info.isBootstrapped API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"P\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Native Minter in Genesis File (JSON)\nDESCRIPTION: JSON configuration for setting up an initial native coin minting without admin addresses. This allows for a one-time mint of native coins to specified addresses upon activation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contractNativeMinterConfig\": {\n    \"blockTimestamp\": 0,\n    \"initialMint\": {\n      \"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": \"1000000000000000000\",\n      \"0x10037Fb06Ec4aB8c870a92AE3f00cD58e5D484b3\": \"0xde0b6b3a7640000\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node URIs via Avalanche Network Runner (Bash)\nDESCRIPTION: Navigates to the `avalanche-network-runner` directory and uses the `control uris` command to retrieve the URIs (including RPC ports) for the nodes running in the local network. This is useful for debugging connection issues (like `Error HH108`) by verifying the correct node ports.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/avalanche-network-runner\n\n# next command\navalanche-network-runner control uris \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Chain API Endpoints in YAML\nDESCRIPTION: YAML configuration for enabling various API endpoints in the C-Chain, including debug, account, and personal namespaces. This snippet shows how to enable or disable specific RPC calls and set related parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/c-chain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninternal-debug: false\ndebug-handler: false\ninternal-account: true\ninternal-personal: false\nrpc-gas-cap: 50000000\nrpc-tx-fee-cap: 100\napi-max-duration: 0\napi-max-blocks-per-request: 0\nws-cpu-refill-rate: 0\nws-cpu-max-stored: 0\nallow-unfinalized-queries: false\naccepted-cache-size: 0\n```\n\n----------------------------------------\n\nTITLE: Stopping a Local Avalanche Network using CLI\nDESCRIPTION: Command to stop a local Avalanche network, with options to gracefully shut down deployed Subnets and save their state to a named or default snapshot.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\navalanche network stop [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Validator Nodes on AWS via Avalanche-CLI - Bash\nDESCRIPTION: This bash command initializes one or more Avalanche validator nodes in a specified AWS cluster using Avalanche-CLI. The user must pre-configure an AWS credentials file with a default profile, and should be aware that this will result in cloud resource usage and costs. The <clusterName> parameter determines the cluster identifier and applies cluster-wide commands to all associated nodes. Outputs include node IDs, public IPs, SSH instructions, and potentially Grafana monitoring links. Limitations include restricted available server specs until customization is supported.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-aws.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node create <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Describe Command Flags for Avalanche CLI\nDESCRIPTION: Available flags for the subnet describe command, including options to print the raw genesis file instead of a summary.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_137\n\nLANGUAGE: bash\nCODE:\n```\n-g, --genesis Print         the genesis to the console directly instead of the summary\n-h, --help help             for describe\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Wallet RPC and Network Details - Avalanche L1 - Bash\nDESCRIPTION: Provides the configuration settings necessary to connect a Core or MetaMask wallet to the newly created Avalanche L1. These parameters include the Network Name, RPC URL, Chain ID, and Symbol. The values must be entered into the custom network settings of the wallet UI, not executed as a script.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n- Network Name: testblockchain\n- RPC URL: [http://127.0.0.1:9650/ext/bc/2U7vNdB78xTiN6QtZ9aetfKoGtQhfeEPQG6QZC8bpq8QMf4cDx/rpc]\n- Chain ID: 3333\n- Symbol: TST\n```\n\n----------------------------------------\n\nTITLE: Interactive TokenRow with Hover and Click - React TypeScript\nDESCRIPTION: Example of TokenRow configured for interactive selection, showing usage with an onClick handler and custom Tailwind CSS classes for hover effects. Inputs include chain_id, address, name, symbol, onClick handler, and className. Useful for interactive token lists where user engagement is required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-row.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n  onClick={() => selectToken(\"AVAX\")}\n  className=\"hover:bg-gray-100 cursor-pointer\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Downloading Avalanche-CLI Binary using Curl in Bash\nDESCRIPTION: This command downloads and installs the latest release of Avalanche-CLI binary into the ~/bin directory. It uses curl to fetch the installation script and executes it using sh.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/get-avalanche-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://raw.githubusercontent.com/ava-labs/avalanche-cli/main/scripts/install.sh | sh -s\n```\n\n----------------------------------------\n\nTITLE: Calculating Primary Network Validator Rewards in LaTeX\nDESCRIPTION: This LaTeX formula calculates the reward for a responsive Primary Network validator based on stake amount, staking period, and network parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/rewards-formula.mdx#2025-04-23_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\nReward = \\left(MaximumSupply - Supply \\right) \\times \\frac{Stake}{Supply} \\times \\frac{Staking Period}{Minting Period} \\times EffectiveConsumptionRate\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Fee Config in Genesis (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to set an initial fee configuration in the genesis or upgrade file. It includes parameters for gas limits, base fees, and block rates.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/03-dynamic-fee-configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"feeManagerConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"],\n      \"initialFeeConfig\": {\n        \"gasLimit\": 15000000,\n        \"minBaseFee\": 25000000000,\n        \"targetGas\": 15000000,\n        \"baseFeeChangeDenominator\": 36,\n        \"minBlockGasCost\": 0,\n        \"maxBlockGasCost\": 1000000,\n        \"targetBlockRate\": 2,\n        \"blockGasCostStep\": 200000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the upgrade apply Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Shows the basic usage for the `avalanche blockchain upgrade apply` subcommand. This command applies previously generated upgrade bytes to running blockchain nodes, initiating a network upgrade process on local, testnet (Fuji), or mainnet environments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade apply [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Status Response\nDESCRIPTION: Example JSON response from the bootstrap status check indicating successful completion.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"isBootstrapped\": true\n    },\n    \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PrivyProvider Component\nDESCRIPTION: TypeScript code showing how to configure and initialize the PrivyProvider component with theme and chain settings\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/privy.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Home() {\n\n  return (\n    <PrivyProvider\n      appId=\"your-privy-app-id\"\n      config={{\n        appearance: {\n          theme: 'dark',\n          accentColor: '#e84242',\n          logo: 'https://your-logo-url',\n        },\n        embeddedWallets: {\n          createOnLogin: 'users-without-wallets',\n        },\n        defaultChain: echo,\n        supportedChains: [echo],\n        loginMethods: ['email', 'wallet', 'google', 'apple']\n      }}\n    >\n      { content }\n    </PrivyProvider>\n  );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Messenger Deploy command in Avalanche CLI\nDESCRIPTION: Command for deploying ICM Messenger and Registry into a specified L1 blockchain, with various configuration options for deployment targets and parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain messenger deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring SubnetEVM with Genesis File in JSON\nDESCRIPTION: This JSON snippet shows a SubnetEVM genesis configuration file that defines various blockchain parameters. It includes chain ID, EIP block activations, fee configuration, contract deployer allowlist, and initial account allocations with balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avalanche-fundamentals/06-vm-customization/01-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"chainId\": 99999,\n    \"homesteadBlock\": 0,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"subnetEVMTimestamp\": 0,\n    \"feeConfig\": {\n      \"gasLimit\": 20000000,\n      \"minBaseFee\": 1000000000,\n      \"targetGas\": 100000000,\n      \"baseFeeChangeDenominator\": 48,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 10000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 500000\n    },\n    \"contractDeployerAllowListConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\n        \"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"\n      ]\n    }\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    },\n    \"0x0Fa8EA536Be85F32724D57A37758761B86416123\": {\n      \"balance\": \"0x52B7D2DCC80CD2E4000000\"\n    }\n  },\n  \"nonce\": \"0x0\",\n  \"timestamp\": \"0x0\",\n  \"extraData\": \"0x00\",\n  \"gasLimit\": \"0x1312D00\",\n  \"difficulty\": \"0x0\",\n  \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n  \"number\": \"0x0\",\n  \"gasUsed\": \"0x0\",\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n\n----------------------------------------\n\nTITLE: NetworkID to Bech32 HRP Mapping in Avalanche\nDESCRIPTION: A JavaScript object that maps Avalanche network IDs to their corresponding Human-Readable Part (HRP) prefixes used in Bech32 address encoding. These mappings determine the prefix used in addresses for different Avalanche networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/cryptographic-primitives.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  0: \"custom\",\n  1: \"avax\",\n  2: \"cascade\",\n  3: \"denali\",\n  4: \"everest\",\n  5: \"fuji\",\n  1337: \"custom\",\n  12345: \"local\"\n```\n\n----------------------------------------\n\nTITLE: Disabling a Precompile via Network Upgrade - JSON\nDESCRIPTION: Illustrates the recommended JSON pattern for deactivating a precompile via the upgrade.json file. The snippet schedules the specified precompile for disabling at a future block timestamp by setting the 'disable' field to true. The 'blockTimestamp' must be a valid future Unix timestamp, and only one precompile change is allowed per block. If the timing is misconfigured, startup will fail.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"precompileUpgrades\": [\n    {\n      \"<precompileName>\": {\n        \"blockTimestamp\": \"[DEACTIVATION_TIMESTAMP]\", // unix timestamp the precompile should deactivate at\n        \"disable\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Validator Exit in Solidity\nDESCRIPTION: Explains the process of initiating validator exit using the ValidatorManager contract. It covers the use of initializeEndValidation and forceInitializeEndValidation functions, as well as the optional ValidationUptimeMessage for PoS validators.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nValidatorManager.initializeEndValidation()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nValidatorManager.forceInitializeEndValidation()\n```\n\n----------------------------------------\n\nTITLE: Importing SwitchChain Component in React\nDESCRIPTION: This snippet imports the SwitchChain component from a specific path and wraps it in a ToolboxMdxWrapper component. It's used to integrate the chain switching functionality into a larger React application or documentation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/10-switch-chain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport SwitchChain from \"../../../../toolbox/src/toolbox/Wallet/SwitchChain.tsx\"\n\n<ToolboxMdxWrapper>\n    <SwitchChain />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Saving Deployed Contract Address as Environment Variable\nDESCRIPTION: This command saves the address of the deployed CrossChainVRFWrapper contract as an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/05-deploy-vrf-wrapper.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VRF_WRAPPER=<address>\n```\n\n----------------------------------------\n\nTITLE: Avalanche UTXO Protocol Buffer Specification\nDESCRIPTION: Protocol Buffer message definition for Avalanche UTXOs, showing the fields for codec ID, transaction ID, output index, asset ID, and output object with their respective sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_54\n\nLANGUAGE: text\nCODE:\n```\nmessage Utxo {\n    uint32 codec_id = 1;     // 02 bytes\n    bytes tx_id = 2;         // 32 bytes\n    uint32 output_index = 3; // 04 bytes\n    bytes asset_id = 4;      // 32 bytes\n    Output output = 5;       // size(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HelloWorld Precompile Test in Go\nDESCRIPTION: The customized Ginkgo test implementation for the HelloWorld precompile. This registers the test with the Ginkgo framework and uses runDefaultHardhatTests to execute the tests with the appropriate blockchainID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nginkgo.It(\"hello world\", ginkgo.Label(\"Precompile\"), ginkgo.Label(\"HelloWorld\"), func() {\n  ctx, cancel := context.WithTimeout(context.Background(), time.Minute)\n  defer cancel()\n\n  blockchainID := subnetsSuite.GetBlockchainID(\"hello_world\")\n  runDefaultHardhatTests(ctx, blockchainID, \"hello_world\")\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Keystore User Response - AvalancheGo API - JSON\nDESCRIPTION: This JSON snippet represents the typical result returned from a successful keystore.createUser call to the AvalancheGo API. The response object includes jsonrpc version, request id, and an empty result object, indicating success. No extra fields or error messages are present for this operation if it is successful.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EVM Chain Settings in JSON\nDESCRIPTION: JSON configuration for setting up multiple EVM chains including Fuji C-Chain and WAGMI testnet. Defines chain parameters, token amounts, fees and rate limiting rules.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"evmchains\": [\n    {\n        \"ID\": \"C\",\n        \"NAME\": \"Fuji (C-Chain)\",\n        \"TOKEN\": \"AVAX\",\n        \"RPC\": \"https://api.avax-test.network/ext/C/rpc\",\n        \"CHAINID\": 43113,\n        \"EXPLORER\": \"https://testnet.snowtrace.io\",\n        \"IMAGE\": \"/avaxred.png\",\n        \"MAX_PRIORITY_FEE\": \"2000000000\",\n        \"MAX_FEE\": \"100000000000\",\n        \"DRIP_AMOUNT\": 2000000000,\n        \"RECALIBRATE\": 30,\n        \"RATELIMIT\": {\n            \"MAX_LIMIT\": 1,\n            \"WINDOW_SIZE\": 1440\n        }\n    },\n    {\n        \"ID\": \"WAGMI\",\n        \"NAME\": \"WAGMI Testnet\",\n        \"TOKEN\": \"WGM\",\n        \"RPC\": \"https://subnets.avax.network/wagmi/wagmi-chain-testnet/rpc\",\n        \"CHAINID\": 11111,\n        \"EXPLORER\": \"https://subnets.avax.network/wagmi/wagmi-chain-testnet/explorer\",\n        \"IMAGE\": \"/wagmi.png\",\n        \"MAX_PRIORITY_FEE\": \"2000000000\",\n        \"MAX_FEE\": \"100000000000\",\n        \"DRIP_AMOUNT\": 2000000000,\n        \"RATELIMIT\": {\n            \"MAX_LIMIT\": 1,\n            \"WINDOW_SIZE\": 1440\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Config Struct Definition in Go\nDESCRIPTION: The initial Config struct that implements the precompileconfig.Config interface for StringStore, containing only the Upgrade struct.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/10-define-default-values-via-genesis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Config implements the precompileconfig.Config interface and\n// adds specific configuration for StringStore.\ntype Config struct {\n    precompileconfig.Upgrade\n    // CUSTOM CODE STARTS HERE\n    // Add your own custom fields for Config here\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Native Tokens\nDESCRIPTION: Cast command to send native tokens to the contract by calling the receiveNative function\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/05-transfers-in-smart-contracts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $PAYABLE_CONTRACT \"receiveNative()\" --value 100000\n```\n\n----------------------------------------\n\nTITLE: Transforming Permissioned Avalanche L1 to Elastic Network with CLI\nDESCRIPTION: Command to transform a permissioned Avalanche L1 into an Elastic (permissionless) Avalanche L1. This transformation is irreversible and requires specifying the blockchain name and network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/elastic-avalanche-l1s/make-avalanche-l1-permissionless.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain elastic <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Configuring C-Chain Keystore and Database in YAML\nDESCRIPTION: YAML configuration for C-Chain keystore settings and database optimizations. This snippet demonstrates how to set up key storage, external signers, and various caching and pruning options for the database.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/c-chain.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkeystore-directory: \"\"\nkeystore-external-signer: \"\"\nkeystore-insecure-unlock-allowed: false\ntrie-clean-cache: 512\ntrie-dirty-cache: 256\ntrie-dirty-commit-target: 20\ntrie-prefetcher-parallelism: 16\nsnapshot-cache: 256\ntrie-clean-journal: \"\"\ntrie-clean-rejournal: 0\nacceptor-queue-limit: 64\ncommit-interval: 4096\npruning-enabled: true\nallow-missing-tries: false\n```\n\n----------------------------------------\n\nTITLE: EVM Genesis Configuration Template\nDESCRIPTION: Comprehensive JSON template for EVM genesis configuration including chain settings, fee configuration, and blockchain initialization parameters. Contains placeholders for customizable values like chain ID, gas limits, and wallet addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/02-create-your-genesis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n      \"chainId\":  <your-chain-id>,\n      \"homesteadBlock\": 0,\n      \"eip150Block\": 0,\n      \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n      \"eip155Block\": 0,\n      \"eip158Block\": 0,\n      \"byzantiumBlock\": 0,\n      \"constantinopleBlock\": 0,\n      \"petersburgBlock\": 0,\n      \"istanbulBlock\": 0,\n      \"muirGlacierBlock\": 0,\n      \"subnetEVMTimestamp\": 0,\n      \"feeConfig\": {\n        \"gasLimit\": <your-gas-limit>,\n        \"minBaseFee\": <your-min-base-fee>,\n        \"targetGas\": <your-target-gas>,\n        \"baseFeeChangeDenominator\": 36,\n        \"minBlockGasCost\": <your-min-block-gas-cost>,\n        \"maxBlockGasCost\": <your-max-block-gas-cost>,\n        \"targetBlockRate\": <your-target-block-rate>,\n        \"blockGasCostStep\": <your-block-gas-cost-step>\n      },\n      \"allowFeeRecipients\": false\n    },\n    \"alloc\": {\n      \"<your-test-wallet-address>\": {\n        \"balance\": \"<your-initial-balance-converted-to-hex>\"\n      }\n    },\n    \"nonce\": \"0x0\",\n    \"timestamp\": \"0x0\",\n    \"extraData\": \"0x00\",\n    \"gasLimit\": <your-gas-limit>,\n    \"difficulty\": \"0x0\",\n    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n    \"number\": \"0x0\",\n    \"gasUsed\": \"0x0\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Project Dependencies - Bash\nDESCRIPTION: This bash snippet demonstrates the commands required to clone the Telegram Mini-App Starter Kit repository and initialize the project dependencies with Yarn. It assumes yarn is installed globally and the user has access to the correct repo URL. The inputs are the repository cloning URL and the desired folder name. It prepares the local development environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <new-repo-url>\\ncd <new repo>\\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Mapping Precompiled Contracts in Ethereum VM (Go)\nDESCRIPTION: This snippet shows how precompiled contracts are mapped to addresses in the Ethereum Virtual Machine's Berlin release. Each contract is assigned a specific address starting from 0x01.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// PrecompiledContractsBerlin contains the default set of pre-compiled Ethereum\n// contracts used in the Berlin release.\nvar PrecompiledContractsBerlin = map[common.Address]PrecompiledContract{\n\tcommon.BytesToAddress([]byte{1}): &ecrecover{},\n\tcommon.BytesToAddress([]byte{2}): &sha256hash{},\n\tcommon.BytesToAddress([]byte{3}): &ripemd160hash{},\n\tcommon.BytesToAddress([]byte{4}): &dataCopy{},\n\tcommon.BytesToAddress([]byte{5}): &bigModExp{eip2565: true},\n\tcommon.BytesToAddress([]byte{6}): &bn256AddIstanbul{},\n\tcommon.BytesToAddress([]byte{7}): &bn256ScalarMulIstanbul{},\n\tcommon.BytesToAddress([]byte{8}): &bn256PairingIstanbul{},\n\tcommon.BytesToAddress([]byte{9}): &blake2F{},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Upgrades with upgrade.json for WAGMI Avalanche L1\nDESCRIPTION: JSON configuration file that defines precompile upgrades for WAGMI Avalanche L1, enabling FeeManager with admin permissions starting August 16, 2022, and NativeMinter with admin and manager permissions starting February 23, 2024.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/wagmi-avalanche-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"precompileUpgrades\": [\n    {\n      \"feeManagerConfig\": {\n        \"adminAddresses\": [\"0x6f0f6DA1852857d7789f68a28bba866671f3880D\"],\n        \"blockTimestamp\": 1660658400\n      }\n    },\n    {\n      \"contractNativeMinterConfig\": {\n        \"blockTimestamp\": 1708696800,\n        \"adminAddresses\": [\"0x6f0f6DA1852857d7789f68a28bba866671f3880D\"],\n        \"managerAddresses\": [\"0xadFA2910DC148674910c07d18DF966A28CD21331\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Structure in TimestampVM (Rust)\nDESCRIPTION: The State struct definition that maintains the blockchain state for TimestampVM. It contains a database for storing accepted blocks and a hashmap for tracking verified but not yet accepted blocks. Both are wrapped in Arc and RwLock for concurrent access.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/state.mdx#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Manages block and chain states for this Vm, both in-memory and persistent.\n#[derive(Clone)]\npub struct State {\n    pub db: Arc<RwLock<Box<dyn subnet::rpc::database::Database + Send + Sync>>>,\n\n    /// Maps block Id to Block.\n    /// Each element is verified but not yet accepted/rejected (e.g., preferred).\n    pub verified_blocks: Arc<RwLock<HashMap<ids::Id, Block>>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UTXO with SECP Mint Output in Avalanche\nDESCRIPTION: Detailed byte breakdown of a UTXO with a SECP Mint Output, showing the CodecID, TxID, UTXOIndex, AssetID, and Output structure. The example demonstrates how these components are organized in binary format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_49\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID   <- 0x0000\n    TxID      <- 0x47c92ed62d18e3cccda512f60a0d5b1e939b6ab73fb2d011e5e306e79bd0448f\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x47c92ed62d18e3cccda512f60a0d5b1e939b6ab73fb2d011e5e306e79bd0448f\n    Output    <- 00000006000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0x47, 0xc9, 0x2e, 0xd6, 0x2d, 0x18, 0xe3, 0xcc,\n    0xcd, 0xa5, 0x12, 0xf6, 0x0a, 0x0d, 0x5b, 0x1e,\n    0x93, 0x9b, 0x6a, 0xb7, 0x3f, 0xb2, 0xd0, 0x11,\n    0xe5, 0xe3, 0x06, 0xe7, 0x9b, 0xd0, 0x44, 0x8f,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x47, 0xc9, 0x2e, 0xd6, 0x2d, 0x18, 0xe3, 0xcc,\n    0xcd, 0xa5, 0x12, 0xf6, 0x0a, 0x0d, 0x5b, 0x1e,\n    0x93, 0x9b, 0x6a, 0xb7, 0x3f, 0xb2, 0xd0, 0x11,\n    0xe5, 0xe3, 0x06, 0xe7, 0x9b, 0xd0, 0x44, 0x8f,\n    // secp mint output:\n    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n    0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n    0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n    0x62, 0x76, 0xaa, 0x2a,\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Precompile-EVM for StringStore Tests in Go\nDESCRIPTION: This Go code snippet updates the suites.go file to include StringStore tests in the precompile-evm testing suite. It specifies the test file name and uses the RunDefaultHardhatTests function to execute the tests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/11-testing-precompile-hardhat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nginkgo.It(\"StringStore\", ginkgo.Label(\"Precompile\"), ginkgo.Label(\"StringStore\"), func() {\n    ctx, cancel := context.WithTimeout(context.Background(), time.Minute)\n    defer cancel()\n\n    utils.RunDefaultHardhatTests(ctx, \"StringStore\")\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying AvalancheGo Version in Bash\nDESCRIPTION: Command to verify the AvalancheGo build was successful by checking its version. This displays the version, commit hash, and important compatibility information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego --version\n```\n\n----------------------------------------\n\nTITLE: Implementing Avalanche Consensus Algorithm in Pseudo-code\nDESCRIPTION: This pseudo-code snippet illustrates the Avalanche consensus algorithm. It demonstrates the process of querying other validators, changing preferences based on responses, and finalizing decisions after consecutive successes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avalanche-fundamentals/02-avalanche-consensus-intro/03-snowman-consensus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: pseudo\nCODE:\n```\npreferredValue = initialPreference()\nconsecutiveSuccesses = 0\n\nwhile consecutiveSuccesses < β do\n    responses = sample(k)\n    if !isPreferred(preferredValue, responses, α) then\n        preferredValue = majorityValue(responses)\n        consecutiveSuccesses = 0\n    else\n        consecutiveSuccesses += 1\n    end if\nend while\n\naccept(preferredValue)\n```\n\n----------------------------------------\n\nTITLE: Sending an Outbound Message with avalanche-network-runner (Bash)\nDESCRIPTION: Illustrates how to send a specific outbound message from one node to an attached peer using 'avalanche-network-runner control send-outbound-message'. The CLI example specifies the node name, peer ID, message operation type, and base64 encoded message bytes. The curl example shows the corresponding API request.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control send-outbound-message node-name [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control send-outbound-message \\\n--request-timeout=3m \\\n--log-level debug \\\n--endpoint=\"localhost:8080\" \\\n--node-name node1 \\\n--peer-id \"7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\" \\\n--message-op=16 \\\n--message-bytes-b64=\"EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAAPpAqmoZkC/2xzQ42wMyYK4Pldl+tX2u+ar3M57WufXx0oXcgXfXCmSnQbbnZQfg9XqmF3jAgFemSUtFkaaZhDbX6Ke1DVpA9rCNkcTxg9X2EcsfdpKXgjYioitjqca7WA=\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/sendoutboundmessage -d '{\"nodeName\":\"node1\",\"peerId\":\"7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\",\"op\":16,\"bytes\":\"EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKgAAAAPpAqmoZkC/2xzQ42wMyYK4Pldl+tX2u+ar3M57WufXx0oXcgXfXCmSnQbbnZQfg9XqmF3jAgFemSUtFkaaZhDbX6Ke1DVpA9rCNkcTxg9X2EcsfdpKXgjYioitjqca7WA=\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Lock Profile for C-Chain Admin API in Text\nDESCRIPTION: This admin function runs a mutex profile for the C-Chain, writing to the 'coreth_performance_c' directory. It doesn't require any parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\nadmin.lockProfile() -> {}\n```\n\n----------------------------------------\n\nTITLE: Gantt Format Specification for Unsigned Add Delegator TX\nDESCRIPTION: A structured layout diagram showing the byte structure of an unsigned add delegator transaction, including its components: BaseTx, Validator, Stake, and RewardsOwner, with their respective sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n+---------------+-----------------------+-----------------------------------------+\n| base_tx       : BaseTx                |                     size(base_tx) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| validator     : Validator             |                                44 bytes |\n+---------------+-----------------------+-----------------------------------------+\n| stake         : Stake                 |                  size(LockedOuts) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| rewards_owner : SECP256K1OutputOwners |               size(rewards_owner) bytes |\n+---------------+-----------------------+-----------------------------------------+\n                |    44 + size(stake) + size(rewards_owner) + size(base_tx) bytes |\n                +-----------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Restoring AvalancheGo Node Files Using SCP with SSH Key\nDESCRIPTION: Command to securely copy backed up node files from a local directory to a remote machine using SCP with a specified SSH key file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nscp -i /path/to/the/key.pem ~/avalanche_backup/{staker.*,signer.key} ubuntu@PUBLICIP:/home/ubuntu/.avalanchego/staking\n```\n\n----------------------------------------\n\nTITLE: Reviewing and Confirming Native Minter Allowlist via CLI\nDESCRIPTION: Shows the preview table summarizing the configured roles (Admins, Manager, Enabled) and their assigned addresses in the native minter allowlist. The user confirms the setup by selecting 'Yes'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/08-activate-native-minter.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n+---------+--------------------------------------------+\n| Admins  | 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC |\n+---------+--------------------------------------------+\n| Manager |                                            |\n+---------+--------------------------------------------+\n| Enabled |                                            |\n+---------+--------------------------------------------+\n\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Confirm?: \n  ▸ Yes\n    No, keep editing\n```\n\n----------------------------------------\n\nTITLE: Implementing Accepted Response Message\nDESCRIPTION: The Accepted message is sent in response to GetAccepted, containing the chain ID, original request ID, and subset of container IDs that the sender has accepted.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Accepted {\n  reserved 4; // Until Cortina upgrade is activated\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  repeated bytes container_ids = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppGossip Message Structure in Protobuf\nDESCRIPTION: Defines the structure of an AppGossip message, which is a VM-defined message. It includes chain_id and app_bytes fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AppGossip {\n  bytes chain_id = 1;\n  bytes app_bytes = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Text Input in React (TSX)\nDESCRIPTION: Example of using the `Input` component for text entry. It includes a placeholder, an `onChange` handler (`handleNameChange`), and applies custom border and rounded corner styles using Tailwind CSS classes via the `className` prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Input \n  type=\"text\"\n  placeholder=\"Enter your name\"\n  onChange={handleNameChange}\n  className=\"border rounded-lg\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Building Subnet-EVM Plugin\nDESCRIPTION: Commands to build the Subnet-EVM and save it as a plugin with the specific VMID in the .avalanchego plugins directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/avalanche-l1-nodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/subnet-evm\n./scripts/build.sh ~/.avalanchego/plugins/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\n```\n\n----------------------------------------\n\nTITLE: Defining ERC-721 Interface and Basic Caller Contract in Solidity\nDESCRIPTION: Comprehensive implementation of the ERC-721 Non-Fungible Token Standard interface with detailed documentation of each method and event. Includes a basic Caller contract that stores the NFT contract address and token ID for interaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/03-interacting-with-erc721-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n​\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface ERC721 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n​\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n​\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n​\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n​\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n​\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;\n​\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n​\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n​\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n​\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n​\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n​\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n​\ncontract Caller {\n​\n    address tokenAddress;\n  \n    uint tokenId;\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Querying C-Chain Network Information with Avalanche CLI\nDESCRIPTION: Command to retrieve detailed C-Chain network parameters including RPC URL, EVM Chain ID, token symbol, addresses, and blockchain details using the primary describe command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-devnet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary describe --cluster <devnetName>\n```\n\n----------------------------------------\n\nTITLE: Encoding a String in Avalanche\nDESCRIPTION: Demonstrates how strings are encoded as UTF-8 bytes with a 2-byte short integer length prefix.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    \"Avax\"\nResults in:\n    [0x00, 0x04, 0x41, 0x76, 0x61, 0x78]\n\n```\n\n----------------------------------------\n\nTITLE: Node Bootstrapping Log Output for Avalanche L1 Chain Initialization - Bash\nDESCRIPTION: This bash log excerpt captures the typical sequence of log messages produced when an Avalanche node detects, initializes, and begins bootstrapping an L1 network chain. The messages show the chain and VM identifiers being registered and indicate successful consensus start after block synchronization. Dependencies include a working node setup with properly configured tracking and VM binaries. No direct input is required; output is the logged status stream. Useful for operational monitoring and debugging chain initialization progress.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-production-infra.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nJul 30 18:26:31 node-fuji avalanchego[1728308]: [07-30|18:26:31.422] INFO chains/manager.go:262 creating chain:\nJul 30 18:26:31 node-fuji avalanchego[1728308]:     ID: 2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt\nJul 30 18:26:31 node-fuji avalanchego[1728308]:     VMID:srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\n```\n\n----------------------------------------\n\nTITLE: Flags for the upgrade export Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Lists the command-line flags available for the `avalanche blockchain upgrade export` subcommand. Key flags include specifying the output file path (`--upgrade-filepath`) for the upgrade bytes and forcing overwrite of existing files (`--force`). Common flags like help, config file, log level, and skip update check are also available.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n--force If                   true, overwrite a possibly existing file without prompting\n-h, --help help              for export\n--upgrade-filepath string    Export upgrade bytes file to location of choice on disk\n--config string              config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string           log level for the application (default \"ERROR\")\n--skip-update-check skip     check for new versions\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Op Structure with Gantt Specification\nDESCRIPTION: Specification for the structure of a Transferable Op, which describes a set of UTXOs with a provided transfer operation. It contains an AssetID, UTXOIDs array, and a TransferOp field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n+-------------+------------+------------------------------+\n| asset_id    : [32]byte   |                     32 bytes |\n+-------------+------------+------------------------------+\n| utxo_ids    : []UTXOID   | 4 + 36 * len(utxo_ids) bytes |\n+-------------+------------+------------------------------+\n| transfer_op : TransferOp |      size(transfer_op) bytes |\n+-------------+------------+------------------------------+\n                           |   36 + 36 * len(utxo_ids)    |\n                           |    + size(transfer_op) bytes |\n                           +------------------------------+\n```\n\n----------------------------------------\n\nTITLE: WebSocket Endpoint for Custom EVM Instances\nDESCRIPTION: Endpoint format for websocket connections to other EVM instances. The blockchainID parameter should be replaced with the actual blockchain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n/ext/bc/blockchainID/ws\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Hash Type in Go\nDESCRIPTION: Shows the process of converting string values to Hash type for EVM storage through multiple steps\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/02-store-data-in-evm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ninput := \"Hello World\"\ninputAsBytes := []byte(input)\ninputPadded := common.LeftPadBytes(inputAsBytes, common.HashLength)\ninputHash := common.BytesToHash(inputPadded)\n```\n\n----------------------------------------\n\nTITLE: Initializing Delegator Registration in Solidity (PoS only)\nDESCRIPTION: Explains how to register a delegator in a PoS ValidatorManager by calling the initializeDelegatorRegistration function. This function requires specifying the amount to stake.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nPoSValidatorManager.initializeDelegatorRegistration()\n```\n\n----------------------------------------\n\nTITLE: Defining FeeConfigManager Interface (Solidity)\nDESCRIPTION: This Solidity interface defines the structure and methods of the FeeConfigManager precompile. It includes functions for setting and retrieving fee configurations, as well as the AllowList interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/03-dynamic-fee-configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./IAllowList.sol\";\n\ninterface IFeeManager is IAllowList {\n  struct FeeConfig {\n    uint256 gasLimit;\n    uint256 targetBlockRate;\n    uint256 minBaseFee;\n    uint256 targetGas;\n    uint256 baseFeeChangeDenominator;\n    uint256 minBlockGasCost;\n    uint256 maxBlockGasCost;\n    uint256 blockGasCostStep;\n  }\n  event FeeConfigChanged(\n    address indexed sender,\n    FeeConfig oldFeeConfig,\n    FeeConfig newFeeConfig\n  );\n\n  function setFeeConfig(\n    uint256 gasLimit,\n    uint256 targetBlockRate,\n    uint256 minBaseFee,\n    uint256 targetGas,\n    uint256 baseFeeChangeDenominator,\n    uint256 minBlockGasCost,\n    uint256 maxBlockGasCost,\n    uint256 blockGasCostStep\n  ) external;\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint256 gasLimit,\n      uint256 targetBlockRate,\n      uint256 minBaseFee,\n      uint256 targetGas,\n      uint256 baseFeeChangeDenominator,\n      uint256 minBlockGasCost,\n      uint256 maxBlockGasCost,\n      uint256 blockGasCostStep\n    );\n\n  function getFeeConfigLastChangedAt()\n    external\n    view\n    returns (uint256 blockNumber);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Teleporter Message Structure in Solidity\nDESCRIPTION: Definition of the TeleporterMessageInput struct and ITeleporterMessenger interface that specify the structure for cross-chain message sending, including relayer configuration options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/11-restricting-the-relayer/02-allowed-relayers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct TeleporterMessageInput {\n    bytes32 destinationBlockchainID;\n    address destinationAddress;\n    TeleporterFeeInfo feeInfo;\n    uint256 requiredGasLimit;\n    address[] allowedRelayerAddresses;\n    bytes message;\n}\n\ninterface ITeleporterMessenger {\n    function sendCrossChainMessage(TeleporterMessageInput calldata messageInput)\n        external\n        returns (bytes32);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Avalanche Chain Logo with ChainIcon (TypeScript TSX)\nDESCRIPTION: Illustrates the most basic use of the ChainIcon component by specifying only the chain_id prop. Useful for quickly visualizing the default logo for a given chain. Relies on the presence of /chains/logo/{chain_id}.png for the specified chain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainIcon chain_id={43114} />\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 on Local Network Without Prompt - Bash\nDESCRIPTION: This snippet offers an alternative deployment command that bypasses the interactive network prompt by using the --local flag. As with the previous command, users replace <blockchainName> with their L1 configuration name. Avalanche-CLI must be installed and initialized, and an existing L1 configuration is required. The output is a locally deployed Avalanche L1 node, and the process is suitable for automation and scripting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <blockchainName> --local\n```\n\n----------------------------------------\n\nTITLE: Installing Avalanche Network Runner via Curl Script\nDESCRIPTION: This command downloads and runs an installation script to install the Avalanche Network Runner binary in the ~/bin directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSfL https://raw.githubusercontent.com/ava-labs/avalanche-network-runner/main/scripts/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Signed Transaction Binary Example\nDESCRIPTION: Detailed hexadecimal example of a signed transaction showing codec ID, unsigned transaction data and credentials in byte format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_46\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID     <- 0x0000\n    UnsignedTx  <- 0x0000000100000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    Credentials <- [\n        0x0000000900000002000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Message for Container Request in Consensus\nDESCRIPTION: The Get message requests a specific container from a remote peer, specifying the chain, request ID, deadline, container ID, and consensus engine type.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Get {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  bytes container_id = 4;\n  EngineType engine_type = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating an ABI from Solidity with solc in Bash\nDESCRIPTION: Invokes the Solidity compiler (solc) to generate the ABI for IHelloWorld.sol, specifying output directory and path resolution for imports. This command depends on solc being installed, access to node_modules for third-party contract references, and correct project structure under './contracts/'. Inputs: source Solidity file; Outputs: ABI JSON files in './abis'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsolc --abi ./contracts/interfaces/IHelloWorld.sol -o ./abis --base-path . --include-path ./node_modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Fees in chainConfig JSON\nDESCRIPTION: Example configuration showing the structure of feeConfig within chainConfig. Includes settings for gas limits, base fees, target rates, and block gas costs. The configuration demonstrates both the standard EVM gasLimit and Avalanche's specific fee configuration parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/05-gas-fee-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"feeConfig\": {\n      \"gasLimit\": 15000000,\n      \"minBaseFee\": 25000000000,\n      \"targetGas\": 15000000,\n      \"baseFeeChangeDenominator\": 36,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 1000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 200000\n    },\n    \"allowFeeRecipients\": false\n  },\n  \"alloc\": {\n  },\n  \"gasLimit\": 0xe4e1c0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reward Settings with BuilderKit useRewardManager Hook in TypeScript\nDESCRIPTION: Illustrates using useRewardManager to set reward addresses or check reward/fee permissions for Avalanche. Requires @avalabs/builderkit; key functions allow enabling/disabling rewards or fee recipients, and querying the reward address. Inputs are chain ID or address; outputs include transaction data and current config/state values.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/hooks/precompiles.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useRewardManager } from '@avalabs/builderkit';\\n\\nconst { \\n  setRewardAddress, \\n  allowFeeRecipients, \\n  disableRewards,\\n  currentRewardAddress,\\n  areFeeRecipientsAllowed \\n} = useRewardManager();\\n\\n// Set reward address\\nconst data = await setRewardAddress(\\\"0x1234...\\\");\\n\\n// Check current settings\\nconst address = await currentRewardAddress(43114);\\nconst allowed = await areFeeRecipientsAllowed(43114);\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Function\nDESCRIPTION: TypeScript implementation of token transfer function using Privy's sendTransaction hook\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/privy.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transfer = () => {\n    if (authenticated === false || address === undefined) {\n        return;\n    }\n    let receiver = \"0x...\"; // receiver address\n    sendTransaction({\n        \"value\": ethers.parseUnits(\"0.01\", \"ether\"),\n        \"to\": receiver, // destination address\n        \"from\": address, // logged in user's embedded wallet address\n    }).catch(() => {\n        // handle err \n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Fuji Testnet Service Configuration\nDESCRIPTION: Systemd service configuration for running AvalancheGo on Fuji testnet. Includes user configuration, restart policies, and network settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[Unit]\nDescription=Avalanche Node service\nAfter=network.target\n\n[Service]\nUser='YourUserHere'\nGroup='YourUserHere'\nRestart=always\nPrivateTmp=true\nTimeoutStopSec=60s\nTimeoutStartSec=10s\nStartLimitInterval=120s\nStartLimitBurst=5\nWorkingDirectory=/Your/Path/To/avalanchego\nExecStart=/Your/Path/To/avalanchego/./avalanchego \\\n   --network-id=fuji \\\n   --api-metrics-enabled=true \n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Listing Latest Transactions in Avalanche Network (Bash)\nDESCRIPTION: This endpoint retrieves a list of the latest transactions in a blockchain of the Avalanche network. It requires the network and blockchain ID as path parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/{network}/blockchains/{blockchainId}/transactions \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Navigating to Repository Root Directory in Bash\nDESCRIPTION: Changes the current directory back to the parent directory, which is assumed to be the root of the Subnet-EVM or Precompile-EVM repository. This positions the user correctly to run scripts located in the 'scripts/' directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: UTXO Gantt Format Specification\nDESCRIPTION: Binary format specification for UTXO structure showing codec_id, tx_id, output_index, asset_id and output fields with byte sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_47\n\nLANGUAGE: text\nCODE:\n```\n+--------------+----------+-------------------------+\n| codec_id     : uint16   |                 2 bytes |\n+--------------+----------+-------------------------+\n| tx_id        : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output_index : int      |                 4 bytes |\n+--------------+----------+-------------------------+\n| asset_id     : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output       : Output   |      size(output) bytes |\n+--------------+----------+-------------------------+\n                          | 70 + size(output) bytes |\n                          +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating a Subnet-EVM Avalanche Blockchain - Bash\nDESCRIPTION: Initializes a new blockchain named \\'myblockchain\\' using the Avalanche-CLI. This command launches a wizard process guiding the user through a series of interactive prompts to configure their Subnet-EVM blockchain. Prerequisite: Avalanche-CLI must be installed and accessible via path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Subnet-EVM Repository - Bash Shell\nDESCRIPTION: This command clones the Subnet-EVM repository via SSH into the Go workspace. It is needed to access and modify the Subnet-EVM codebase for EVM customization. Dependencies include having Git installed, appropriate SSH keys configured, and the required directory structure in place. The command checks out the repository into the current directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/background-requirements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:ava-labs/subnet-evm.git\n```\n\n----------------------------------------\n\nTITLE: Successful VM Loading Response in JSON\nDESCRIPTION: Example JSON response from the loadVMs API call showing successfully loaded virtual machines. The response includes VM IDs and their registered aliases that can be used to access the VM's API endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/rust-vms/installing-vm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"newVMs\": {\n      \"tGas3T58KzdjcJ32c6GpePhtqo9rrHJ1oR9wFBtCcMgaosthX\": [\n        \"timestampvm-rs\",\n        \"timestamp-rs\"\n      ],\n      \"spdxUxVJQbX85MGxMHbKw1sHxMnSqJ3QBzDyDYEP3h6TLuxqQ\": []\n    }\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: ERC-20 Interface Definition\nDESCRIPTION: Defines the standard interface that all ERC-20 tokens must implement, including core functions for token operations like transfers, allowances, and balance queries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/07-erc-20-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ninterface IERC20 {\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Address for Random Word Requests in Bash\nDESCRIPTION: This command authorizes a specific address with a given subscription ID to make random word requests through the CrossChainVRFWrapper contract. It uses the 'addAuthorizedAddress' function to grant permission.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/08-request-random-words.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> $VRF_WRAPPER \"addAuthorizedAddress(address caller, uint256 subscriptionId)\" $VRF_CONSUMER $VRF_SUBSCRIPTION_ID\n```\n\n----------------------------------------\n\nTITLE: Example JSON RPC Call using Curl (X-Chain getTxStatus)\nDESCRIPTION: Demonstrates how to make a JSON RPC 2.0 call to the `avm.getTxStatus` method of the X-Chain API using the `curl` command-line tool. It sends a POST request with a JSON payload specifying the `jsonrpc` version, a unique request `id`, the target `method` (`avm.getTxStatus`), and the required `params` (the `txID`). The request targets a local node's X-Chain endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :4,\n    \"method\" :\"avm.getTxStatus\",\n    \"params\" :{\n        \"txID\":\"2QouvFWUbjuySRxeX5xMbNCuAaKWfbk5FeEa2JmoF85RKLk2dD\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/X\n```\n\n----------------------------------------\n\nTITLE: Creating and Deploying New Avalanche Blockchain\nDESCRIPTION: Use Avalanche CLI to create a new blockchain and deploy it on a local network. This sets up the environment for deploying USDC as the native token.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain\n```\n\n----------------------------------------\n\nTITLE: Complex Constructor Pattern\nDESCRIPTION: Example of a complex constructor pattern with inheritance that may cause verification issues with constructor arguments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/snowtrace.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nabstract contract Parent {\n  constructor () {\n    address msgSender = ...;\n    emit Something(address(0), msgSender);\n  }\n}\ncontract Main is Parent {\n  constructor (\n          string memory _name,\n          address deposit,\n          uint fee\n  ) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Updated Account Balances via Yarn Script (Bash)\nDESCRIPTION: Re-executes the `balances` yarn script targeting the local network to confirm that AVAX transfers performed by the previous script have successfully updated the account balances. The output reflects the new balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn balances --network local\n\n# output\nyarn run v1.22.4\nnpx hardhat balances --network local\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC has balance 49999999995275000000000000\n0x9632a79656af553F58738B0FB750320158495942 has balance 1000010000000000000000\n0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430 has balance 1000010000000000000000\n0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4 has balance 1000010000000000000000\n0x0B891dB1901D4875056896f28B6665083935C7A8 has balance 1000010000000000000000\n0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2 has balance 1000010000000000000000\n0x78A23300E04FB5d5D2820E23cc679738982e1fd5 has balance 1000010000000000000000\n0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293 has balance 1000010000000000000000\n0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB has balance 1000010000000000000000\n0x0Fa8EA536Be85F32724D57A37758761B86416123 has balance 1000010000000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in JavaScript/TypeScript\nDESCRIPTION: Imports the `Callout` component from the 'fumadocs-ui/components/callout' module. This component is used later in the JSX to display a styled message box.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/create-wallet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from 'fumadocs-ui/components/callout';\n```\n\n----------------------------------------\n\nTITLE: Confirming Custom Fee Configuration Values via CLI Output\nDESCRIPTION: Shows the summary output from the CLI after the user has input all custom fee parameters, reflecting the settings chosen for the example enterprise blockchain scenario. This step confirms the gas limit, target block rate, minimum base fee, target gas, base fee change denominator, minimum/maximum block gas cost, and block gas cost step before finalizing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/10-configure-transaction-fees.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n✔ Customize fee config\nCustomizing fee config\nSet gas limit: 15000000\nSet target block rate: 10\nSet min base fee: 25000000000\nSet target gas: 15000000\nSet base fee change denominator: 50\nSet min block gas cost: 500000\nSet max block gas cost: 1000000\n✔ Set block gas cost step: 200000\n```\n\n----------------------------------------\n\nTITLE: Validating Subnet in Avalanche CLI\nDESCRIPTION: This snippet shows the usage and flags for the 'avalanche node validate subnet' command, which enables all nodes in a cluster to be validators of a Subnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_121\n\nLANGUAGE: bash\nCODE:\n```\navalanche node validate subnet [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--default-validator-params use    default weight/start/duration params for subnet validator\n-e, --ewoq use                    ewoq key [fuji/devnet only]\n-h, --help help                   for subnet\n-k, --key string                  select the key to use [fuji/devnet only]\n-g, --ledger use                  ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)\n--ledger-addrs strings            use the given ledger addresses\n--no-checks do                    not check for bootstrapped status or healthy status\n--no-validation-checks do         not check if subnet is already synced or validated (default true)\n--stake-amount uint               how many AVAX to stake in the validator\n--staking-period duration         how long validator validates for after start time\n--start-time string               UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n--validators strings              validate subnet for the given comma separated list of validators. defaults to all cluster nodes\n--config string                   config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                log level for the application (default \"ERROR\")\n--skip-update-check skip          check for new versions\n```\n\n----------------------------------------\n\nTITLE: Protobuf Definition for Unsigned Add Delegator TX\nDESCRIPTION: The protobuf message definition for the AddDelegatorTx transaction type, specifying its four fields: base_tx, validator, stake, and rewards_owner, with their respective data types.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_39\n\nLANGUAGE: text\nCODE:\n```\nmessage AddDelegatorTx {\n    BaseTx base_tx = 1;                      // size(base_tx)\n    Validator validator = 2;                 // 44 bytes\n    Stake stake = 3;                         // size(LockedOuts)\n    SECP256K1OutputOwners rewards_owner = 4; // size(rewards_owner)\n}\n```\n\n----------------------------------------\n\nTITLE: Unsigned Import TX Structure and Example in Avalanche X-Chain\nDESCRIPTION: Detailed example of an unsigned Import TX that includes a BaseTx with TypeID 3, SourceChain, and an array of inputs. The example shows both the logical structure and the byte-level representation of the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_40\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx        <- 0x0000000300000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    SourceChain <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Ins <- [\n        f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd15000000020000000300000007,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x03,\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // source chain:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // input count:\n    0x00, 0x00, 0x00, 0x01,\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n]\n```\n\n----------------------------------------\n\nTITLE: Restarting Avalanche Node\nDESCRIPTION: Command to restart the Avalanche node using systemctl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start avalanchego\n```\n\n----------------------------------------\n\nTITLE: Monitoring Node Logs\nDESCRIPTION: Command to view the Avalanche node's logs after restoration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl -u avalanchego -f\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bash Commands\nDESCRIPTION: Commands to clone the quickstart repository and install necessary packages using yarn\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanche-smart-contract-quickstart.git\ncd avalanche-smart-contract-quickstart\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Committing Signed Validator Addition Transaction\nDESCRIPTION: Command to submit a fully signed validator addition transaction to the Avalanche network. The CLI will detect the network and submit appropriately.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction commit testblockchain --input-tx-filepath partialAddValidatorTx.txt\n```\n\n----------------------------------------\n\nTITLE: Using While-Loops in Solidity - Solidity\nDESCRIPTION: Showcases the basic while-loop syntax in Solidity, which repeatedly executes the contained statements as long as the boolean condition evaluates to true. This control structure is essential for writing contracts that require iterative processing with dynamic conditions. No dependencies or initializations are given, serving as a generic template.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/02-control-flow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nwhile (<boolean-condition>) {\\n       \\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche L1 Blockchain with Subnet-EVM - Bash\nDESCRIPTION: This code snippet illustrates how to create an Avalanche L1 blockchain named <chain1> using the Avalanche CLI. It sets the EVM chain ID, token name, and applies default Subnet-EVM parameters. The process initializes the blockchain's genesis, configures an airdrop address, loads a Teleporter deployer key, and uses the latest Teleporter version. Outputs indicate successful subnet configuration. Dependencies include the Avalanche CLI and access to relevant CLI key stores. Parameters such as --evm-chain-id and --evm-token define chain identity. The output contains creation logs and instructions for subsequent operations. Intended for local development and testing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create <chain1> --evm --latest\\\n    --evm-chain-id 1 --evm-token TOKEN1 --evm-defaults\n\ncreating genesis for <blockchain chain1>\nconfiguring airdrop to stored key \"subnet_<chain1>_airdrop\" with address 0x0EF8151A3e6ad1d4e17C8ED4128b20EB5edc58B1\nloading stored key \"cli-teleporter-deployer\" for teleporter deploys\n  (evm address, genesis balance) = (0xE932784f56774879e03F3624fbeC6261154ec711, 600000000000000000000)\nusing latest teleporter version (v1.0.0)\n✓ Successfully created subnet configuration\n\n```\n\n----------------------------------------\n\nTITLE: IHelloWorld ABI Output Example in JSON\nDESCRIPTION: Displays the generated ABI in JSON format from the Solidity IHelloWorld interface, including inherited functions and events from IAllowList. The ABI precisely describes contract callable methods, events, parameters, and types for precompile template generation. This object is produced by solc as output, and is required as input to the precompile generator tool. No code execution but critical for type-safe contract bindings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"oldGreeting\",\n        \"type\": \"string\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"string\",\n        \"name\": \"newGreeting\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"GreetingChanged\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"role\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"oldRole\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"RoleSet\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"readAllowList\",\n    \"outputs\": [\n      { \"internalType\": \"uint256\", \"name\": \"role\", \"type\": \"uint256\" }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"sayHello\",\n    \"outputs\": [\n      { \"internalType\": \"string\", \"name\": \"result\", \"type\": \"string\" }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setAdmin\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setEnabled\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"string\", \"name\": \"response\", \"type\": \"string\" }\n    ],\n    \"name\": \"setGreeting\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setManager\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      { \"internalType\": \"address\", \"name\": \"addr\", \"type\": \"address\" }\n    ],\n    \"name\": \"setNone\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fee Recipients in RewardManager\nDESCRIPTION: JSON configuration to allow custom fee recipients by setting the appropriate field in the initialRewardConfig. This configuration enables block producers to claim fees by specifying their own addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/rewardmanager.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewardManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"initialRewardConfig\": {\n      \"allowFeeRecipients\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Path Structure for Token Logos in BuilderKit\nDESCRIPTION: Defines the standardized file path structure for token logos used in components like TokenIcon, TokenChip, and TokenRow.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/asset-requirements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/tokens/logo/{chain_id}/{address}.png\n```\n\n----------------------------------------\n\nTITLE: Basic ChainRow Display Example\nDESCRIPTION: Shows a simple implementation of the ChainRow component with the Avalanche C-Chain data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-row.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainRow \n  chain_id={43114}\n  name=\"Avalanche C-Chain\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Basic NFT Display Example with Collectible Component\nDESCRIPTION: Shows the simplest implementation of the Collectible component for displaying a single NFT with required properties of chain_id, address, and token_id.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/collectibles/collectible.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Collectible \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  token_id={1}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Devnet with Custom VM using Avalanche-CLI Flags in Bash\nDESCRIPTION: Creates an Avalanche Devnet named `<clusterName>` on AWS, deploying a custom VM based Avalanche L1 named `<blockchainName>` (e.g., MorpheusVM built with HyperSDK). It uses flags to specify the custom VM details (`--custom-subnet`, repository URL, branch, build script), configuration files (`--subnet-genesis`, `--chain-config`, `--subnet-config`, `--node-config`), cloud provider details (`--aws`), node counts (`--num-apis`, `--num-validators`), regions, validator parameters (`--default-validator-params`), node type (`--node-type default`), and authorizes SSH access (`--authorize-access`). This non-interactive command bypasses the wizard prompts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/setup-devnet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz <clusterName> <blockchainName> --custom-subnet \\\n  --subnet-genesis <genesisPath> --custom-vm-repo-url <repoUrl> \\\n  --custom-vm-branch <branch> --custom-vm-build-script <buildScript> \\\n  --chain-config <chainConfigPath> --subnet-config <subnetConfigPath> \\\n  --node-config <avagoConfigPath> --authorize-access --aws --num-apis 1,1,1,1,1 \\\n  --num-validators 5,5,5,5,5  --region us-west-2,us-east-1,ap-south-1,ap-northeast-1,eu-west-1 \\\n  --default-validator-params --node-type default\n\nCreating the subnet\n...\nCreating the devnet\n...\nWaiting for node(s) in cluster <clusterName> to be healthy...\n...\nNodes healthy after 33 seconds\n\nDeploying the subnet\n...\nSetting the nodes as subnet trackers\n...\nWaiting for node(s) in cluster <clusterName>to be healthy...\nNodes healthy after 33 seconds\n...\nWaiting for node(s) in cluster <clusterName> to be syncing subnet <blockchainName>...\nNodes Syncing <blockchainName> after 5 seconds\n\nAdding nodes as subnet validators\n...\nWaiting for node(s) in cluster <clusterName> to be validating subnet <blockchainName>...\nNodes Validating <blockchainName> after 23 seconds\n\nDevnet <clusterName> has been created and is validating subnet <blockchainName>!\n```\n\n----------------------------------------\n\nTITLE: Flags for Avalanche Blockchain Join (Bash)\nDESCRIPTION: Lists flags for the `avalanche blockchain join` command. Flags control validator configuration paths (`--avalanchego-config`, `--data-dir`, `--plugin-dir`), target network (`--fuji`, `--mainnet`, etc.), NodeID (`--node-id`), staking details (`--stake-amount`, `--staking-period`, `--start-time`), key/Ledger usage (`--key`, `--ledger`), and output options (`--print`, `--force-write`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n--avalanchego-config string    file path of the avalanchego config file\n--cluster string               operate on the given cluster\n--data-dir string              path of avalanchego's data dir directory\n--devnet operate               on a devnet network\n--endpoint string              use the given endpoint for network operations\n--force-write if               true, skip to prompt to overwrite the config file\n-f, --fuji testnet             operate on fuji (alias to testnet\n-h, --help help                for join\n-k, --key string               select the key to use [fuji only]\n-g, --ledger use               ledger instead of key (always true on mainnet, defaults to false on fuji)\n--ledger-addrs strings         use the given ledger addresses\n-l, --local operate            on a local network\n-m, --mainnet operate          on mainnet\n--node-id string               set the NodeID of the validator to check\n--plugin-dir string            file path of avalanchego's plugin directory\n--print if                     true, print the manual config without prompting\n--stake-amount uint            amount of tokens to stake on validator\n--staking-period duration      how long validator validates for after start time\n--start-time string            start time that validator starts validating\n-t, --testnet fuji             operate on testnet (alias to fuji)\n--config string                config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string             log level for the application (default \"ERROR\")\n--skip-update-check skip       check for new versions\n```\n\n----------------------------------------\n\nTITLE: Serializing ExportTx Structures - Avalanche Coreth - Text\nDESCRIPTION: This snippet demonstrates how to construct and serialize an ExportTx for the Avalanche Coreth EVM, showing the mapping between high-level fields and their byte-wise encoding. Dependencies include knowledge of field values, TransferableInputs, TransferableOutputs, and EVMOutput structure. Inputs are field values and structured binary representations; output is the byte array serialization, suitable for network transmission or persistent storage. Field order, sizes, and formatting must strictly follow the specification to ensure interoperability.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID           <- 0x00000001\n    NetworkID        <- 0x00003039\n    BlockchainID     <- 0x91060eabfb5a571720109b5896e5ff00010a1cfe6b103d585e6ebf27b97a1735\n    DestinationChain <- 0xd891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf\n    Inputs           <- [\n        0xc3344128e060128ede3523a24a461c8943ab08590000000000003039000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000000000001\n    ]\n    ExportedOutputs  <- [\n        0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2dbdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db0000000700000000000f42400000000000000000000000010000000166f90db6137a78f76b3693f7f2bc507956dae563\n    ]\n]\n=\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x01,\n    // networkID:\n    0x00, 0x00, 0x00, 0x04,\n    // blockchainID:\n    0x91, 0x06, 0x0e, 0xab, 0xfb, 0x5a, 0x57, 0x17,\n    0x20, 0x10, 0x9b, 0x58, 0x96, 0xe5, 0xff, 0x00,\n    0x01, 0x0a, 0x1c, 0xfe, 0x6b, 0x10, 0x3d, 0x58,\n    0x5e, 0x6e, 0xbf, 0x27, 0xb9, 0x7a, 0x17, 0x35,\n    // destination_chain:\n    0xd8, 0x91, 0xad, 0x56, 0x05, 0x6d, 0x9c, 0x01,\n    0xf1, 0x8f, 0x43, 0xf5, 0x8b, 0x5c, 0x78, 0x4a,\n    0xd0, 0x7a, 0x4a, 0x49, 0xcf, 0x3d, 0x1f, 0x11,\n    0x62, 0x38, 0x04, 0xb5, 0xcb, 0xa2, 0xc6, 0xbf,\n    // inputs[] count:\n    0x00, 0x00, 0x00, 0x01,\n    // inputs[0]\n    0x8d, 0xb9, 0x7c, 0x7c, 0xec, 0xe2, 0x49, 0xc2,\n    0xb9, 0x8b, 0xdc, 0x02, 0x26, 0xcc, 0x4c, 0x2a,\n    0x57, 0xbf, 0x52, 0xfc, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x1e, 0x84, 0x80, 0xdb, 0xcf, 0x89, 0x0f,\n    0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48, 0xb7,\n    0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a,\n    0x68, 0x70, 0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12,\n    0xba, 0x53, 0xf2, 0xdb, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // exportedOutputs[] count\n    0x00, 0x00, 0x00, 0x01,\n    // exportedOutputs[0]\n    0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,\n    0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,\n    0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,\n    0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x0f, 0x42, 0x40, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x66, 0xf9, 0x0d, 0xb6,\n    0x13, 0x7a, 0x78, 0xf7, 0x6b, 0x36, 0x93, 0xf7,\n    0xf2, 0xbc, 0x50, 0x79, 0x56, 0xda, 0xe5, 0x63,\n]\n```\n\n----------------------------------------\n\nTITLE: Selecting Network in Avalanche CLI Validator Flow - Bash\nDESCRIPTION: This interactive prompt allows users to select which Avalanche network (Local Network, Devnet, Fuji Testnet, Mainnet) will be used for the validator operation. This is a typical selection prompt output generated by the CLI tool. The user must choose the desired network, which will guide all further blockchain actions. The tool requires the Avalanche CLI to be installed and preconfigured.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Choose a network for the operation: \n  \\u25b8 Local Network\n    Devnet\n    Fuji Testnet\n    Mainnet\n```\n\n----------------------------------------\n\nTITLE: RPC Endpoint Format\nDESCRIPTION: Example formats for accessing the node's RPC endpoints, both locally and via public IP.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/avalanche-l1-nodes.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlocalhost:9650/ext/bc/<BlockchainID>/rpc\nXXX.XX.XX.XXX:9650/ext/bc/<BlockchainID>/rpc\n```\n\n----------------------------------------\n\nTITLE: Using the upgrade import Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Displays the basic usage syntax for the `avalanche blockchain upgrade import` subcommand. This command is used to import an upgrade bytes file from a specified path into the local Avalanche CLI environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade import [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing String Storage Helper Function in Go\nDESCRIPTION: Helper function to store string values in EVM state with proper type conversion\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/02-store-data-in-evm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc StoreString(stateDB contract.StateDB, newValue string) {\n    newValuePadded := common.LeftPadBytes([]byte(newValue), common.HashLength)\n    newValueHash := common.BytesToHash(newValuePadded)\n    stateDB.SetState(ContractAddress, storageKeyHash, newValueHash)\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Mode ABI Unpacking for setGreeting (Go, Legacy)\nDESCRIPTION: Shows a legacy approach to unpacking contract call inputs in strict mode, using the HelloWorldABI.UnpackInput method for the setGreeting function. Strict mode enforces input length, causing errors if there are additional padded bytes. Outputs the unpacked greeting string or an error; compatible with legacy Solidity contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc UnpackSetGreetingInput(input []byte) (string, error) {\n  // This function was using strict mode unpacking by default.\n\tres, err := HelloWorldABI.UnpackInput(\"setGreeting\", input)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tunpacked := *abi.ConvertType(res[0], new(string)).(*string)\n\treturn unpacked, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Paths for AvalancheGo and Plugins\nDESCRIPTION: Commands to set environment variables pointing to the AvalancheGo binary and plugin paths. These paths are required for the Avalanche Network Runner to find and use the compiled binaries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/precompile-deployment.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport AVALANCHEGO_EXEC_PATH=\"${GOPATH}/src/github.com/ava-labs/avalanchego/build/avalanchego\"\nexport AVALANCHEGO_PLUGIN_PATH=\"${GOPATH}/src/github.com/ava-labs/avalanchego/build/plugins\"\n```\n\n----------------------------------------\n\nTITLE: Destination Blockchain Configuration in JSON\nDESCRIPTION: JSON configuration for the destination blockchain, including subnet ID, blockchain ID, VM type, RPC endpoint, and account details for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/04-relayer-configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"destination-blockchains\": [\n    {\n      \"subnet-id\": \"11111111111111111111111111111111LpoYY\",\n      \"blockchain-id\": \"epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"kms-key-id\": \"\",\n      \"kms-aws-region\": \"\",\n      \"account-private-key\": \"6dc6ba26b9b17f82b7b44fc316857a35ff201613072d500231ce3f2ee235bc16\"\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Key with Avalanche-CLI in Bash\nDESCRIPTION: This Bash command uses Avalanche-CLI to generate a new local private key named 'mytestkey', printing associated addresses for various networks (C-Chain, P-Chain on Local and Fuji). Requires Avalanche-CLI to be installed and configured. The command accepts a key name and outputs addresses needed to interact with the networks; the operation stores the key on the system and should only be used for non-Mainnet/test networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche key create mytestkey\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Subnet-EVM Precompiles (Go)\nDESCRIPTION: Demonstrates how to charge gas and emit custom events within a Go-based Subnet-EVM precompile. Relies on event-specific gas cost computation (GetGreetingChangedEventGasCost), the contract's DeductGas method, and stateDB.AddLog for event emission. Inputs include the encoded event data and contextual state information, with error handling for insufficient gas.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Charge the gas for emitting the event.\neventGasCost := GetGreetingChangedEventGasCost(eventData)\nif remainingGas, err = contract.DeductGas(remainingGas, eventGasCost); err != nil {\n  return nil, 0, err\n}\n\n// Emit the event\nstateDB.AddLog(\n  ContractAddress,\n  topics,\n  data,\n  accessibleState.GetBlockContext().Number().Uint64(),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Token Logo Asset Path Structure\nDESCRIPTION: Specifies the required directory structure and naming convention for token logo image assets used by the TokenIcon component. The path must follow the format `/tokens/logo/{chain_id}/{address}.png`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n/tokens/logo/{chain_id}/{address}.png\n```\n\n----------------------------------------\n\nTITLE: Fetching Chain Configuration with eth_getChainConfig API\nDESCRIPTION: Example of a cURL request to eth_getChainConfig API that returns the blockchain's configuration details. This is an Avalanche-specific extension to Ethereum APIs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"eth_getChainConfig\",\n    \"params\" :[]\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/rpc\n```\n\n----------------------------------------\n\nTITLE: Installing Openfort Dependencies\nDESCRIPTION: Install the required npm packages including Openfort client and server SDKs along with ethers and viem libraries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/openfort.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install dependencies\nnpm install @openfort/openfort-js @openfort/openfort-node\nnpm install ethers viem\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Staking Manager Deployment Component in React\nDESCRIPTION: This snippet imports the DeployStakingManager component and a wrapper component, then renders them within the page. It's used to create an interactive deployment interface for the Native Token Staking Manager.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/01-deploy-staking-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport DeployStakingManager from \"../../../../toolbox/src/toolbox/StakingManager/DeployStakingManager.tsx\";\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\";\n\n<ToolboxMdxWrapper>\n    <DeployStakingManager />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Submitting Uptime Proof\nDESCRIPTION: Function for validators to submit uptime proofs. It takes the validation ID and timestamp as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction submitUptimeProof(\n    bytes32 validationID,\n    uint64 timestamp\n) public\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Avalanche L1 for AWM Relayer\nDESCRIPTION: JSON configuration for setting up source blockchains in the AWM Relayer. Includes subnet ID, blockchain ID, VM type, RPC/WS endpoints, and message contract settings. Defines how the relayer connects to and monitors source chains for messages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/09-avalanche-warp-messaging/06-message-pickup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"source-blockchains\": [\n    {\n      \"subnet-id\": \"11111111111111111111111111111111LpoYY\",\n      \"blockchain-id\": \"yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"https://api.avax-test.network/ext/bc/C/rpc\"\n      },\n      \"ws-endpoint\": {\n        \"base-url\": \"wss://api.avax-test.network/ext/bc/C/ws\"\n      },\n      \"message-contracts\": {\n        \"0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf\": {\n          \"message-format\": \"teleporter\",\n          \"settings\": {\n            \"reward-address\": \"0x5072...\"\n          }\n        }\n      }\n    }\n  ],\n```\n\n----------------------------------------\n\nTITLE: Destroying Local Avalanche Node\nDESCRIPTION: The local destroy command cleans up a local node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_105\n\nLANGUAGE: bash\nCODE:\n```\navalanche node local destroy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Loading VMs on a Running Node Using JSON-RPC API\nDESCRIPTION: Uses the admin.loadVMs API to load virtual machines on an already running AvalancheGo node. This curl command sends a JSON-RPC request to the node's admin API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/rust-vms/installing-vm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sX POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.loadVMs\",\n    \"params\" :{}\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/admin\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables Syntax in Solidity\nDESCRIPTION: Shows the basic syntax for declaring a variable in Solidity. Due to Solidity's static typing, the variable's type must be specified before its name upon declaration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/02-primitive-value-and-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n<type> <name>;\n```\n\n----------------------------------------\n\nTITLE: Scaling Tokens from Home (6 decimals) to Remote (18 decimals)\nDESCRIPTION: This code snippet demonstrates the mathematical operation for scaling tokens when transferring from a home chain with 6 decimal places to a remote chain with 18 decimal places. It shows how 100 USDC is represented in both systems.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/01-math-example.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n100 × 10^6 × 10^{12} = 100 × 10^{18}\n```\n\n----------------------------------------\n\nTITLE: Generating Precompile Template for Precompile-EVM\nDESCRIPTION: This command generates precompile template files for Precompile-EVM in the ./helloworld directory using the IHelloWorld.abi file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_precompile.sh --abi ./contracts/abis/IHelloWorld.abi --type HelloWorld --pkg helloworld --out ./helloworld\n```\n\n----------------------------------------\n\nTITLE: Selecting Transfer Step (Send/Receive) in Avalanche CLI (zsh)\nDESCRIPTION: Displays the interactive prompt from the `avalanche key transfer` command asking the user to choose the step of the transfer process. For native same-chain transfers, only 'Send' is required. Cross-chain transfers involve both 'Send' and 'Receive' steps, often initiated with specific flags like `--fund-p-chain` or `--fund-x-chain`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n? Step of the transfer:\n  ▸ Send\n    Receive\n```\n\n----------------------------------------\n\nTITLE: Flags for Subnet Join Command in Avalanche CLI\nDESCRIPTION: Flags for the subnet join command, including options for specifying avalanchego configuration, network types, staking parameters, and node identifiers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_147\n\nLANGUAGE: bash\nCODE:\n```\n--avalanchego-config string    file path of the avalanchego config file\n--cluster string               operate on the given cluster\n--data-dir string              path of avalanchego's data dir directory\n--devnet operate               on a devnet network\n--endpoint string              use the given endpoint for network operations\n--force-write if               true, skip to prompt to overwrite the config file\n-f, --fuji testnet             operate on fuji (alias to testnet\n-h, --help help                for join\n-k, --key string               select the key to use [fuji only]\n-g, --ledger use               ledger instead of key (always true on mainnet, defaults to false on fuji)\n--ledger-addrs strings         use the given ledger addresses\n-l, --local operate            on a local network\n-m, --mainnet operate          on mainnet\n--node-id string               set the NodeID of the validator to check\n--plugin-dir string            file path of avalanchego's plugin directory\n--print if                     true, print the manual config without prompting\n--stake-amount uint            amount of tokens to stake on validator\n--staking-period duration      how long validator validates for after start time\n--start-time string            start time that validator starts validating\n-t, --testnet fuji             operate on testnet (alias to fuji)\n--config string                config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string             log level for the application (default \"ERROR\")\n--skip-update-check skip       check for new versions\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Input Structure with Gantt Specification\nDESCRIPTION: Specification for the structure of a Transferable Input, which describes a specific UTXO with a provided transfer input. It contains TxID, UTXOIndex, AssetID, and an Input field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n+------------+----------+------------------------+\n| tx_id      : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| utxo_index : int      |               04 bytes |\n+------------+----------+------------------------+\n| asset_id   : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| input      : Input    |      size(input) bytes |\n+------------+----------+------------------------+\n                        | 68 + size(input) bytes |\n                        +------------------------+\n```\n\n----------------------------------------\n\nTITLE: Conditionally Using Strict Mode for ABI Unpacking (Go, Durango Runtime)\nDESCRIPTION: Presents an example of dynamically enabling or disabling strict ABI unpacking at runtime when calling UnpackSetGreetingInput in a contract. The useStrictMode flag is set based on the status of the Durango activation, influencing how input data is validated. Proper error handling ensures compatibility and prevents unintended failures during upgrades.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// do not use strict mode after Durango\nuseStrictMode := !contract.IsDurangoActivated(accessibleState)\n// attempts to unpack [input] into the arguments to the SetGreetingInput.\n// Assumes that [input] does not include selector\n// You can use unpacked [inputStruct] variable in your code\ninputStruct, err := UnpackSetGreetingInput(input, useStrictMode)\nif err != nil {\n  return nil, remainingGas, err\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Node on Linux (Fuji Testnet)\nDESCRIPTION: Command to start an Avalanche node on Linux for the Fuji Testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-<VERSION>-linux/avalanchego --network-id=fuji\n```\n\n----------------------------------------\n\nTITLE: Node ID Response\nDESCRIPTION: Example JSON response containing the node's ID\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"jsonrpc\":\"2.0\",\"result\":{\"nodeID\":\"NodeID-DznHmm3o7RkmpLkWMn9NqafH66mqunXbM\"},\"id\":1}\n```\n\n----------------------------------------\n\nTITLE: Building Abigen Tool\nDESCRIPTION: Commands to clone Coreth repository and build the Abigen tool for generating Go bindings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/smart-contract-dev/interact-golang-app.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [email protected]:ava-labs/coreth.git\ncd coreth/\ngo build -o abigen cmd/abigen/*.go\ncp abigen ~/bin\n```\n\n----------------------------------------\n\nTITLE: Adding a Validator - Avalanche Blockchain CLI - Bash\nDESCRIPTION: This Bash command demonstrates how to add a validator to an L1 Avalanche network (Fuji Testnet or Mainnet) through the CLI. The process may involve a signature from the validator manager for proof-of-authority or staking tokens for proof-of-stake, and issues a RegisterL1ValidatorTx. Key parameters control network selection, authentication keys, staking details, and optional features like ledger usage or endpoint selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain addValidator [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Serializing a Complete Signed Transaction in Avalanche\nDESCRIPTION: Example of a complete serialized signed transaction with codec ID (0), an unsigned transaction, and a credential. Shows how all components are combined into a single byte array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_52\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID     <- 0x0000\n    UnsignedTx  <- 0x0000000100000003ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000003000000070000000400010203\n    Credentials <- [\n        0x0000000900000002000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n=\n[\n    // Codec ID\n    0x00, 0x00,\n    // unsigned transaction:\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,\n    0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,\n    0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,\n    0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,\n    0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n    0x00, 0x00, 0x00, 0x01, 0xf1, 0xe1, 0xd1, 0xc1,\n    0xb1, 0xa1, 0x91, 0x81, 0x71, 0x61, 0x51, 0x41,\n    0x31, 0x21, 0x11, 0x01, 0xf0, 0xe0, 0xd0, 0xc0,\n    0xb0, 0xa0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40,\n    0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x02, 0x03\n    // number of credentials:\n    0x00, 0x00, 0x00, 0x01,\n    // credential[0]:\n    0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n    0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,\n    0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,\n    0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,\n    0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d,\n    0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,\n    0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d,\n    0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,\n    0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e,\n    0x7f, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Fee Recipient Address in Validator EVM Chain Configuration\nDESCRIPTION: This JSON configuration specifies the fee recipient address for a validator. The feeRecipient field should be set to the desired Ethereum-style address where fees will be sent for blocks produced by this validator.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/04-fee-distribution.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feeRecipient\": \"<YOUR 0x-ADDRESS>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Balance Information with AvaCloud Data API (Bash)\nDESCRIPTION: These curl commands show how to retrieve various types of token balances using the AvaCloud Data API, including native tokens, ERC-20, ERC-721, ERC-1155, and collectibles.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/balances:getNative \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/balances:listErc20 \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/balances:listErc721 \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/balances:listErc1155 \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/balances:listCollectibles \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Using Multiple TokenIcons in a List Layout (TSX)\nDESCRIPTION: Illustrates how to display multiple TokenIcon components side-by-side within a flex container. This example uses different chain IDs and addresses for each icon and applies spacing using 'gap-2'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex gap-2\">\n  <TokenIcon \n    chain_id={43114}\n    address=\"0x1234567890123456789012345678901234567890\"\n  />\n  <TokenIcon \n    chain_id={43113}\n    address=\"0x5678901234567890123456789012345678901234\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Default X-Chain Configuration in JSON\nDESCRIPTION: This JSON snippet shows the default configuration values for the X-Chain. It includes settings for transaction indexing and checksums.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/x-chain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"index-transactions\": false,\n  \"index-allow-incomplete\": false,\n  \"checksums-enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Avalanche Multisig Transactions\nDESCRIPTION: This command signs a multisig transaction. It provides options for specifying the transaction file, key selection, and ledger usage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_168\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction sign [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Blockchain Upgrade Print Command\nDESCRIPTION: Command to print the upgrade.json file content with configuration options for log level and update checks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade print [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining AddPermissionlessDelegatorTx Structure in Go\nDESCRIPTION: This code defines the AddPermissionlessDelegatorTx structure used to add a permissionless delegator to a validator. It includes validator details, subnet ID, stake outputs, and rewards owner fields. This transaction allows delegators to delegate tokens to validators without requiring permission.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/banff-changes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype AddPermissionlessDelegatorTx struct {\n\t// Metadata, inputs and outputs\n\tBaseTx `serialize:\"true\"`\n\t// Describes the validator\n\tValidator validator.Validator `serialize:\"true\" json:\"validator\"`\n\t// ID of the Avalanche L1 this validator is validating\n\tSubnet ids.ID `serialize:\"true\" json:\"subnet\"`\n\t// Where to send staked tokens when done validating\n\tStake []*avax.TransferableOutput `serialize:\"true\" json:\"stake\"`\n\t// Where to send staking rewards when done validating\n\tRewardsOwner fx.Owner `serialize:\"true\" json:\"rewardsOwner\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes in an Avalanche Devnet using Avalanche CLI (Bash)\nDESCRIPTION: This command uses the Avalanche CLI's `node list` subcommand to display the nodes currently running within the specified Devnet (here named `<devnetName>`). The output includes the AWS EC2 instance ID, the Avalanche NodeID, the public IP address, and the roles assigned to each node (e.g., Validator, Relayer). This helps identify which node hosts the AWM Relayer service. Requires Avalanche CLI and an existing Devnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche node list\n\nCluster \"<devnetName>\" (Devnet)\n  Node i-0f1815c016b555fcc (NodeID-91PGQ7keavfSV1XVFva2WsQXWLWZqqqKe) 67.202.23.231 [Validator,Relayer]\n  Node i-026392a651571232c (NodeID-AkPyyTs9e9nPGShdSoxdvWYZ6X2zYoyrK) 52.203.183.68 [Validator]\n  Node i-0d1b98d5d941d6002 (NodeID-ByEe7kuwtrPStmdMgY1JiD39pBAuFY2mS) 50.16.235.194 [Validator]\n  Node i-0c291f54bb38c2984 (NodeID-8SE2CdZJExwcS14PYEqr3VkxFyfDHKxKq) 52.45.0.56 [Validator]\n  Node i-049916e2f35231c29 (NodeID-PjQY7xhCGaB8rYbkXYddrr1mesYi29oFo) 3.214.163.110 [Validator]\n```\n\n----------------------------------------\n\nTITLE: Encoding SECP256K1 Transfer Output in Avalanche\nDESCRIPTION: Example of a SECP256K1 transfer output with TypeID 7, Amount 3999000000, Locktime 0, Threshold 1, and one Address. Shows both the logical structure and byte-level representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID    <- 0x00000007\n    Amount    <- 0x00000000ee5be5c0\n    Locktime  <- 0x0000000000000000\n    Threshold <- 0x00000001\n    Addresses <- [\n        0xda2bee01be82ecc00c34f361eda8eb30fb5a715c,\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x07,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0xee, 0x5b, 0xe5, 0xc0,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0xda, 0x2b, 0xee, 0x01, 0xbe, 0x82, 0xec, 0xc0,\n    0x0c, 0x34, 0xf3, 0x61, 0xed, 0xa8, 0xeb, 0x30,\n    0xfb, 0x5a, 0x71, 0x5c,\n]\n```\n\n----------------------------------------\n\nTITLE: Confirming AllowList Configuration\nDESCRIPTION: This bash snippet shows the final step in configuring the AllowList, where the user can confirm the configuration or make further changes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/04-activating-native-minter-precompile.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n? Configure the addresses that are allowed to mint native tokens: \n  ▸ Confirm Allow List\n    Add an address for a role to the allow list\n    Remove an address from the allow list\n    Preview Allow List\n    Cancel\n```\n\n----------------------------------------\n\nTITLE: Initiating Blockchain VM Upgrade Wizard using Bash\nDESCRIPTION: This command starts the Avalanche-CLI interactive wizard to upgrade the Virtual Machine (VM) for a specified blockchain. The user must replace `<blockchainName>` with the actual name of the Avalanche L1 they wish to upgrade. This command should be run after stopping the local network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-virtual-machine.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade vm <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Rendering ChainIcon with Border Styling (TypeScript TSX)\nDESCRIPTION: Demonstrates how to apply border and rounding to the ChainIcon using custom Tailwind utility classes via the className prop. Enhances visual separation or theming. Asset requirements for the specific chain_id apply.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-icon.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainIcon \n  chain_id={43114}\n  className=\"border-2 border-gray-200 rounded-full\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Deploying ExampleWNATV Contract using Forge on Avalanche L1\nDESCRIPTION: This command uses Forge to compile and deploy the ExampleWNATV.sol contract to a specified blockchain. It requires a private key for transaction signing and broadcasts the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/02-deploy-wrapped-native.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK contracts/interchain-token-transfer/ExampleWNATV.sol:WNATV --broadcast\n```\n\n----------------------------------------\n\nTITLE: Connecting to Ledger using JavaScript SDK\nDESCRIPTION: Shows how to establish a connection to a Ledger device using the JavaScript SDK. The code imports the Ledger package and creates a new instance to connect to the hardware wallet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ledger.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Ledger from '@avalabs/ledger-avalanche'\n\nconst ledger = new Ledger()\nawait ledger.connect()\n```\n\n----------------------------------------\n\nTITLE: Saving Sender Contract Address\nDESCRIPTION: Exports the deployed sender contract address as an environment variable for later use in the process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SENDER_ADDRESS=0xa4DfF80B4a1D748BF28BC4A271eD834689Ea3407\n```\n\n----------------------------------------\n\nTITLE: Deploying NativeTokenHome Contract with Foundry in Bash\nDESCRIPTION: This command uses Foundry's forge create to deploy the NativeTokenHome contract with specified constructor arguments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/03-deploy-native-token-home.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK lib/icm-contracts/contracts/ictt/TokenHome/NativeTokenHome.sol:NativeTokenHome --optimize --optimizer-runs 200 --broadcast --constructor-args $TELEPORTER_REGISTRY_L1 $FUNDED_ADDRESS \"1\" $WRAPPED_ERC20_L1\n```\n\n----------------------------------------\n\nTITLE: Implementing Durango Activation Check in Go\nDESCRIPTION: Code snippet showing how to check if the Durango network upgrade is activated before executing Durango-specific code. This is necessary for backward compatibility.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nif contract.IsDurangoActivated(accessibleState) {\n ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Cost in EVM-based Chains\nDESCRIPTION: This snippet shows the formula for calculating transaction cost in EVM-based chains. The cost is determined by multiplying the number of gas units required for the transaction by the gas price set by the user.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/01-introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTransaction Cost = Gas Units * Gas Price\n```\n\n----------------------------------------\n\nTITLE: Reissuing and Cancelling Stuck Transactions in Rust for Avalanche C-Chain\nDESCRIPTION: This code snippet demonstrates how to reissue a stuck transaction with a higher priority fee and how to cancel a stuck transaction by sending a zero-amount transaction with the same nonce. It uses a function called sendAvax to send AVAX tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// reissuing transaction with nonce 25\nsendAvax(\"0.01\", \"0x856EA4B78947c3A5CD2256F85B2B147fEBDb7124\", 100, 10, 25);\n\n// cancelling transaction with nonce 25\nsendAvax(\"0\", \"0x856EA4B78947c3A5CD2256F85B2B147fEBDb7124\", 100, 10, 25);\n```\n\n----------------------------------------\n\nTITLE: Querying C-Chain Information with Avalanche CLI\nDESCRIPTION: Uses the 'avalanche primary describe' command to display detailed C-Chain information including RPC URL, EVM Chain ID, token symbol, addresses, and blockchain details. Returns a formatted table with key parameters and their corresponding values.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary describe --cluster <devnetName>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Fees in Avalanche L1 JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the chainConfig, specifically focusing on the feeConfig field. It includes various parameters such as gasLimit, minBaseFee, targetGas, and others that control the gas and fee behavior of the blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/02-transaction-fee-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    // ...\n    \"feeConfig\": { // [!code highlight]\n      \"gasLimit\": 15000000,\n      \"minBaseFee\": 25000000000,\n      \"targetGas\": 15000000,\n      \"baseFeeChangeDenominator\": 36,\n      \"minBlockGasCost\": 0,\n      \"maxBlockGasCost\": 1000000,\n      \"targetBlockRate\": 2,\n      \"blockGasCostStep\": 200000\n    },\n    \"allowFeeRecipients\": false\n  },\n  \"alloc\": {\n    // ...\n  },\n  // ...\n    \n  \"gasLimit\": 0xe4e1c0,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating MultiChainTokenInput into Cross-Chain Bridge Form in React/TypeScript\nDESCRIPTION: Illustrates embedding multiple instances of MultiChainTokenInput within a token bridge form. Shows coordinated state management for source and destination tokens, dynamically updating the destination list to exclude the currently selected source chain. The form structure demonstrates allowing users to select both source and destination tokens while preserving balance visibility. Requires implementation of handleBridge, setSourceToken, setDestinationToken functions and allTokens/sourceToken/destinationToken variables in parent scope.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/multi-chain-token-input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<form onSubmit={handleBridge}>\n  <div className=\"space-y-4\">\n    <MultiChainTokenInput \n      selected={sourceToken}\n      list={allTokens}\n      onSelectionChanged={setSourceToken}\n      showBalances={true}\n    />\n    <MultiChainTokenInput \n      selected={destinationToken}\n      list={allTokens.filter(t => t.chain_id !== sourceToken.chain_id)}\n      onSelectionChanged={setDestinationToken}\n      showBalances={true}\n    />\n    <button type=\"submit\">\n      Bridge\n    </button>\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: NFT Transfer Operation Protobuf Definition\nDESCRIPTION: Protocol Buffer message definition for NFT transfer operation with field definitions and byte sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_30\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage NFTTransferOp {\n    uint32 typeID = 1;                   // 04 bytes\n    repeated uint32 address_indices = 2; // 04 bytes + 04 bytes * len(address_indices)\n    uint32 group_id = 3;                 // 04 bytes\n    bytes payload = 4;                   // 04 bytes + len(payload)\n    uint64 locktime = 5;                 // 08 bytes\n    uint32 threshold = 6;                // 04 bytes\n    repeated bytes addresses = 7;        // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subnets with cURL\nDESCRIPTION: Demonstrates creating Avalanche L1 subnets using a cURL POST request to the ANR API, specifying participant nodes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/createsubnets' \\\n--header 'Content-Type: application/json' \\\n--data '\n{\n    \"participants\": [\n        \"node1\",\n        \"node2\",\n        \"node3\",\n        \"node4\",\n        \"node5\"\n    ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing handleSetAddress Function for User Input Processing in React\nDESCRIPTION: Function that validates an Ethereum address input by the user and updates application state with the address and its associated ERC-20 token balances. It uses a regex pattern to validate the address format before proceeding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/03-modifying-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleSetAddress = async () => {\n    const addressInput = document.getElementById(\"address\") as HTMLInputElement;\n    const address = addressInput.value;\n    const addressPattern = /^0x[a-fA-F0-9]{40}$/;  \n\n    if (addressInput && addressPattern.test(address)) {\n      setAddress(address);\n      setBalances(await fetchERC20Balances(address));\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Prompting for Admin Address Configuration (Transaction Allow List)\nDESCRIPTION: Following the activation time setting for the 'Transaction Allow List' precompile, the Avalanche-CLI wizard asks the user if they want to configure 'adminAddresses'. These addresses gain privileges to manage the allow list (add other admins or enabled addresses) after activation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nThe chosen block activation time is 2023-03-31 14:00:00\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Add 'adminAddresses'?:\n  ▸ Yes\n    No\n```\n\n----------------------------------------\n\nTITLE: Initializing FrostyMetrics SDK Client and Fetching Metrics in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to integrate FrostyMetrics into an application. It imports the `FrostyMetricsClient` from the SDK, initializes it with a required API key, and then demonstrates fetching real-time transaction metrics for the last 24 hours using the asynchronous `getMetrics` method. Requires the `@frostymetrics/sdk` package to be installed and a valid API key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/frostymetrics.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FrostyMetricsClient } from '@frostymetrics/sdk';\n\nconst client = new FrostyMetricsClient({\n  apiKey: 'your-api-key'\n});\n\n// Fetch real-time metrics\nconst metrics = await client.getMetrics({\n  type: 'transaction',\n  timeframe: '24h'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Output Owners Output in Protocol Buffers\nDESCRIPTION: Protocol Buffers message definition for the SECP256K1 Output Owners Output, specifying field types and sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1OutputOwnersOutput {\n    uint32 type_id = 1;           // 04 bytes\n    uint64 locktime = 2;          // 08 bytes\n    uint32 threshold = 3;         // 04 bytes\n    repeated bytes addresses = 4; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Validator Node\nDESCRIPTION: Command for creating a validator node on cloud infrastructure with various configuration options for AWS/GCP deployment, monitoring, and network settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_93\n\nLANGUAGE: bash\nCODE:\n```\navalanche node create [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Flags for the stats Command in Avalanche CLI (Bash)\nDESCRIPTION: Lists the command-line flags available for the `avalanche blockchain stats` command. These flags allow specifying the target cluster or network environment (devnet, fuji/testnet, mainnet, local) and network endpoint for retrieving validator statistics.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string            operate on the given cluster\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for stats\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Complete Directory Structure for Chain and Token Assets\nDESCRIPTION: Shows the complete public assets directory structure for organizing both chain and token logos across different networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/asset-requirements.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npublic/\n├── chains/\n│   └── logo/\n│       ├── 43114.png\n│       ├── 43113.png\n│       └── 173750.png\n└── tokens/\n    └── logo/\n        ├── 43114/\n        │   ├── 0x1234....png\n        │   └── 0x5678....png\n        └── 43113/\n            ├── 0x9012....png\n            └── 0xabcd....png\n```\n\n----------------------------------------\n\nTITLE: Specifying Compatible Solidity Compiler Version Range\nDESCRIPTION: This snippet shows how to use the caret (`^`) symbol with the `pragma solidity` directive. The caret indicates that the source file can be compiled with any Solidity version compatible with the specified version (e.g., `^0.8.0` allows any `0.8.x` version). This offers flexibility while maintaining compatibility within a specific major/minor release series.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/05-solidity-file-structure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^<version>;\n```\n\n----------------------------------------\n\nTITLE: Deploying Secondary Avalanche L1 Blockchain Locally - Bash\nDESCRIPTION: This snippet demonstrates deploying the Avalanche L1 blockchain <chain2> to the same local Avalanche network. It checks for previously deployed Teleporter contracts on C-Chain, deploys Teleporter Messenger and Registry to <chain2>, executes the AWM Relayer, and presents endpoint URLs for network interaction. The deployment process ensures that smart contracts are not redundantly redeployed on the C-Chain. Outputs include deployment logs and configuration information. Requires previously set up local Avalanche environment and Avalanche CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <chain2> --local\n\nDeploying [<chain2>] to Local Network\n\nDeploying Blockchain. Wait until network acknowledges...\n\nTeleporter Messenger has already been deployed to c-chain\n\nTeleporter Messenger successfully deployed to <chain2> (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nTeleporter Registry successfully deployed to <chain2> (0x9EDc4cB4E781413b1b82CC3A92a60131FC111F58)\n\nUsing latest awm-relayer version (v1.1.0)\nExecuting AWM-Relayer...\n\nBlockchain ready to use. Local network node endpoints:\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| NODE  |     VM    |                                         URL                                         |                  ALIAS URL                 |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node1 | <chain2> | http://127.0.0.1:9650/ext/bc/2tVGwEQmeXtdnFURW1YSq5Yf4jbJPfTBfVcu68KWHdHe5e5gX5/rpc | http://127.0.0.1:9650/ext/bc/<chain2>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node1 | <chain1> | http://127.0.0.1:9650/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc  | http://127.0.0.1:9650/ext/bc/<chain1>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node2 | <chain2> | http://127.0.0.1:9652/ext/bc/2tVGwEQmeXtdnFURW1YSq5Yf4jbJPfTBfVcu68KWHdHe5e5gX5/rpc | http://127.0.0.1:9652/ext/bc/<chain2>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node2 | <chain1> | http://127.0.0.1:9652/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc  | http://127.0.0.1:9652/ext/bc/<chain1>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node3 | <chain2> | http://127.0.0.1:9654/ext/bc/2tVGwEQmeXtdnFURW1YSq5Yf4jbJPfTBfVcu68KWHdHe5e5gX5/rpc | http://127.0.0.1:9654/ext/bc/<chain2>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node3 | <chain1> | http://127.0.0.1:9654/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc  | http://127.0.0.1:9654/ext/bc/<chain1>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node4 | <chain2> | http://127.0.0.1:9656/ext/bc/2tVGwEQmeXtdnFURW1YSq5Yf4jbJPfTBfVcu68KWHdHe5e5gX5/rpc | http://127.0.0.1:9656/ext/bc/<chain2>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node4 | <chain1> | http://127.0.0.1:9656/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc  | http://127.0.0.1:9656/ext/bc/<chain1>/rpc |\n+-------+-----------+-------------------------------------------------------------------------------------+--------------------------------------------+\n| node5 | <chain1> | http://127.0.0.1:9658/ext/bc/MzN4AbtFzQ3eKqPhFaDpwCMJmagciWSCgghkZx6YeC6jRdvb6/rpc  | http://127.0.0.1:9658/ext/bc/<chain1>/rpc |\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Base Fee with eth_baseFee API\nDESCRIPTION: Example of a cURL request to the eth_baseFee API endpoint that returns the base fee for the next block. This is an Avalanche extension to the standard Ethereum APIs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"eth_baseFee\",\n    \"params\" :[]\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/rpc\n```\n\n----------------------------------------\n\nTITLE: Selecting Destination Chain for Transfer in Avalanche CLI (zsh)\nDESCRIPTION: Displays the interactive prompt from the `avalanche key transfer` command where the user selects the destination chain for the AVAX funds. The available options (P-Chain, X-Chain in this example) depend on the previously selected source chain. This step applies primarily to native transfers within the primary network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\n? Destination Chain:\n  ▸ P-Chain\n    X-Chain\n```\n\n----------------------------------------\n\nTITLE: Avalanche Network Start Command Flags\nDESCRIPTION: Available flags for the network start command, allowing customization of node count, binary paths, versions, and snapshot configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\n--avalanchego-path string       use this avalanchego binary path\n--avalanchego-version string    use this version of avalanchego (ex: v1.17.12) (default \"latest-prerelease\")\n-h, --help help                 for start\n--num-nodes uint32              number of nodes to be created on local network (default 2)\n--relayer-path string           use this relayer binary path\n--relayer-version string        use this relayer version (default \"latest-prerelease\")\n--snapshot-name string          name of snapshot to use to start the network from (default \"default-1654102509\")\n--config string                 config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string              log level for the application (default \"ERROR\")\n--skip-update-check skip        check for new versions\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Mint Output in Protocol Buffers\nDESCRIPTION: Provides a Protocol Buffers message definition for the NFT Mint output, specifying field types and sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nmessage NFTMintOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint32 group_id = 2;          // 04 bytes\n    uint64 locktime = 3;          // 08 bytes\n    uint32 threshold = 4;         // 04 bytes\n    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Transfer Output Format in Protocol Buffer\nDESCRIPTION: Describes the SECP256K1 Transfer Output structure using Protocol Buffer notation, specifying fields for TypeID (4 bytes), Amount (8 bytes), Locktime (8 bytes), Threshold (4 bytes), and Addresses (variable size).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1TransferOutput {\n    uint32 type_id = 1;           // 04 bytes\n    uint64 amount = 2;            // 08 bytes\n    uint64 locktime = 3;          // 08 bytes\n    uint32 threshold = 4;         // 04 bytes\n    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Subnet-EVM Version in Bash\nDESCRIPTION: Command to verify the Subnet-EVM build and check compatibility with AvalancheGo. The RPCChainVM version must match between AvalancheGo and Subnet-EVM.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$GOPATH/src/github.com/ava-labs/avalanchego/build/plugins/srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy --version\n```\n\n----------------------------------------\n\nTITLE: Adding addresses to an AvaCloud webhook\nDESCRIPTION: This curl command adds blockchain addresses to be monitored by an existing webhook. This allows tracking of specific addresses for the events configured in the webhook. The ID should be replaced with the actual webhook identifier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PATCH \\\n     --url https://glacier-api.avax.network/v1/webhooks/id/addresses \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Getting Network Status with avalanche-network-runner (Bash)\nDESCRIPTION: Demonstrates retrieving the current status of the network using 'avalanche-network-runner control status'. Examples show the basic CLI command and the equivalent HTTP API POST request using curl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control status [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanche-network-runner control status\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/status'\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche L1 Blockchain (Example) - Bash\nDESCRIPTION: This is a concrete example of initializing an Avalanche L1 blockchain named 'myblockchain' with sovereignty explicitly disabled. The resulting execution creates configuration files and sets up the L1 blockchain in the user's environment. The command requires the Avalanche CLI to be installed and configured beforehand.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain --sovereign=false\n```\n\n----------------------------------------\n\nTITLE: Defining the TimestampVM State Structure in Rust\nDESCRIPTION: Definition of the State struct that represents VM-specific states, including context, version, genesis information, persistent state representation, preferred block ID, and consensus engine messaging channel.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/defining-vm-itself.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n/// Represents VM-specific states.\n/// Defined separately for interior mutability in [`Vm`](vm).\n/// Protected with 'Arc' and 'RwLock'.\npub struct State {\n  pub ctx : Option<Context<ValidatorStateClient>>,\n  pub version : Version,\n  pub genesis : Genesis,\n\n  // Persistent Vm state representation \n  pub state : Option<state::State>,\n  \n  // Preferred block Id \n  pub preferred : ids::Id,\n  \n  // Channel for messages to snowman consensus engine \n  pub bootstrapped : bool,\n}\n```\n\n----------------------------------------\n\nTITLE: Entering Validator AVAX Balance in Avalanche CLI - Bash\nDESCRIPTION: This prompt asks the user to input the amount of AVAX tokens to allocate for validator staking, which will be used to pay continuous P-Chain staking fees. The user must specify the numeric balance in AVAX denomination based on staking requirements. The system expects only valid, non-negative balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\\u2717 What balance would you like to assign to the validator (in AVAX)?: \n```\n\n----------------------------------------\n\nTITLE: Example: Domain Display Using Identity Context in TSX\nDESCRIPTION: Illustrates nesting the `Domain` component within an `Identity` provider component. The `Domain` component implicitly uses the address from the `Identity` context and enables fallback display via `showAddressIfNotAvailable={true}`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/domain.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Identity address=\"0x1234567890123456789012345678901234567890\">\n  <Domain showAddressIfNotAvailable={true} />\n</Identity>\n```\n\n----------------------------------------\n\nTITLE: Configuring TxAllowList Precompile Configuration Example in JSON\nDESCRIPTION: Example JSON configuration for the txAllowList precompile contract, showing how to set up admin and enabled addresses. This configuration only affects the txAllowList precompile and does not impact other precompiles.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/evm-precompiles/allowlist.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"txAllowListConfig\": {\n  \"blockTimestamp\": 0,\n  \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\",\"0x0000...\", \"... and more\"],\n  \"enabledAddresses\": [\"... and even more\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Autogenerated Unit Tests with Valid Arguments in Go\nDESCRIPTION: This code snippet demonstrates how to modify autogenerated unit tests by adding valid arguments for each test input. It shows examples for the 'add', 'nextTwo', and 'repeat' functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/08-autogenerated-tests.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar (\n    tests = map[string]testutils.PrecompileTest{\n        \"insufficient gas for add should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // populate test input here\n                testInput := AddInput{big.NewInt(1), big.NewInt(1)}\n                input, err := PackAdd(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: AddGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"insufficient gas for nextTwo should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // set test input to a value here\n                // var testInput *big.Int\n                testInput := big.NewInt(1)\n                input, err := PackNextTwo(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: NextTwoGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n        \"insufficient gas for repeat should fail\": {\n            Caller: common.Address{1},\n            InputFn: func(t testing.TB) []byte {\n                // CUSTOM CODE STARTS HERE\n                // populate test input here\n                testInput := RepeatInput{big.NewInt(1), \"EGS\"}\n                input, err := PackRepeat(testInput)\n                require.NoError(t, err)\n                return input\n            },\n            SuppliedGas: RepeatGasCost - 1,\n            ReadOnly:    false,\n            ExpectedErr: vmerrs.ErrOutOfGas.Error(),\n        },\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Messenger SendMsg command flags in Avalanche CLI\nDESCRIPTION: Available flags for configuring ICM message sending between subnets, including network selection, RPC endpoints, keys for authentication, and message format options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string                operate on the given cluster\n--dest-rpc string               use the given destination blockchain rpc endpoint\n--destination-address string    deliver the message to the given contract destination address\n--devnet operate                on a devnet network\n--endpoint string               use the given endpoint for network operations\n-f, --fuji testnet              operate on fuji (alias to testnet\n--genesis-key use               genesis allocated key as message originator and to pay source blockchain fees\n-h, --help help                 for sendMsg\n--hex-encoded given             message is hex encoded\n--key string                    CLI stored key to use as message originator and to pay source blockchain fees\n-l, --local operate             on a local network\n--private-key string            private key to use as message originator and to pay source blockchain fees\n--source-rpc string             use the given source blockchain rpc endpoint\n-t, --testnet fuji              operate on testnet (alias to fuji)\n--config string                 config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string              log level for the application (default \"ERROR\")\n--skip-update-check skip        check for new versions\n```\n\n----------------------------------------\n\nTITLE: Implementing Ramp Off-Ramp Widget\nDESCRIPTION: Configuration for the Ramp off-ramp widget setup, enabling users to convert crypto back to fiat currency.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ramp-network.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RampInstantSDK } from '@ramp-network/ramp-instant-sdk';\n\nconst ramp = new RampInstantSDK({\n  hostAppName: 'Your App Name',\n  hostLogoUrl: 'https://yourdomain.com/logo.png',\n  swapAsset: 'AVAX',\n  userAddress: '0x...', // User's wallet address\n  hostApiKey: 'YOUR_API_KEY',\n  variant: 'auto',\n  defaultFlow: 'OFFRAMP',\n});\n\nramp.show();\n```\n\n----------------------------------------\n\nTITLE: Starting Local Avalanche Node\nDESCRIPTION: The local start command sets up a validator on a local server for the Avalanche Primary Network and selected Subnet. It runs an interactive wizard to guide through the setup process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_106\n\nLANGUAGE: bash\nCODE:\n```\navalanche node local start [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Changing Validator Weight - Avalanche Blockchain CLI - Bash\nDESCRIPTION: This Bash command updates the staking weight of a Subnet Validator in a Proof of Authority Subnet-Only Validator Subnet. It supports customization via network, node id, key selection, and logging options, facilitating operational management for validator rotations and stake configuration. The operation is primarily targeted at authority-based subnet environments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain changeWeight [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1Credential Message Structure - Avalanche Coreth - Protobuf\nDESCRIPTION: This proto snippet defines the SECP256K1Credential structure for including one or more 65-byte recoverable ECDSA signatures along with a type identifier within Avalanche transactions. The message requires a typeID (uint32) and a repeated signatures field (bytes). Properly formed credentials ensure correspondence with the accompanying input signature indices. Input: serialized signatures and an assigned typeID. Output: proto-encoded message structure, typically used within transaction wrapping or for signature validation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_16\n\nLANGUAGE: proto\nCODE:\n```\nmessage SECP256K1Credential {\n    uint32 typeID = 1;             // 4 bytes\n    repeated bytes signatures = 2; // 4 bytes + 65 bytes * len(signatures)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Blockchain\nDESCRIPTION: Deploy the configured custom blockchain to a local Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/12-build-your-precompile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain\n```\n\n----------------------------------------\n\nTITLE: Defining AddPermissionlessValidatorTx Structure in Go\nDESCRIPTION: This code defines the AddPermissionlessValidatorTx structure used to add a permissionless validator to a subnet. It includes validator details, subnet ID, stake outputs, reward owners, and delegation fee settings. This transaction allows validators to join without requiring permission from subnet owners.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/banff-changes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype AddPermissionlessValidatorTx struct {\n\t// Metadata, inputs and outputs\n\tBaseTx `serialize:\"true\"`\n\t// Describes the validator\n\tValidator validator.Validator `serialize:\"true\" json:\"validator\"`\n\t// ID of the Avalanche L1 this validator is validating\n\tSubnet ids.ID `serialize:\"true\" json:\"subnet\"`\n\t// Where to send staked tokens when done validating\n\tStakeOuts []*avax.TransferableOutput `serialize:\"true\" json:\"stake\"`\n\t// Where to send validation rewards when done validating\n\tValidatorRewardsOwner fx.Owner `serialize:\"true\" json:\"validationRewardsOwner\"`\n\t// Where to send delegation rewards when done validating\n\tDelegatorRewardsOwner fx.Owner `serialize:\"true\" json:\"delegationRewardsOwner\"`\n\t// Fee this validator charges delegators as a percentage, times 10,000\n\t// For example, if this validator has DelegationShares=300,000 then they\n\t// take 30% of rewards from delegators\n\tDelegationShares uint32 `serialize:\"true\" json:\"shares\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Details in Avalanche Network (Bash)\nDESCRIPTION: This endpoint fetches details of a specific transaction in a blockchain of the Avalanche network. It requires the network, blockchain ID, and transaction hash as path parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Displaying ENS or Domain Names with Fallback - React - TypeScript\nDESCRIPTION: This snippet imports and utilizes the Domain component to render human-readable blockchain domain names, such as ENS, from a given address. It shows basic usage as well as an option to fall back to displaying the address if domain resolution fails via 'showAddressIfNotAvailable'. Core props are 'address' (required, the address to resolve) and 'showAddressIfNotAvailable' (optional, controls fallback behavior). Designed for integration with TypeScript-based React frontends.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Domain } from '@avalabs/builderkit';\n\n// Basic usage\n<Domain address=\"0x1234567890123456789012345678901234567890\" />\n\n// With fallback to address\n<Domain \n  address=\"0x1234567890123456789012345678901234567890\"\n  showAddressIfNotAvailable={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Safe Contract Outline in Solidity\nDESCRIPTION: This snippet shows the initial structure of a `Safe` contract in Solidity. It defines two public functions, `deposit` and `withdraw`, but lacks access control, illustrating the need for modifiers to restrict function calls.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/05-modifiers.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Safe {\n  \n  function deposit() public {}\n  \n  function withdraw() public {}\n​\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Contract Structure\nDESCRIPTION: Creating the initial contract structure that inherits from ReentrancyGuard for security.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyExampleCrossChainMessenger is\n    ReentrancyGuard\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Issuing Transaction on C-Chain in Shell\nDESCRIPTION: This function sends a signed transaction to the network. It requires the transaction data in hex format and optionally specifies the encoding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\navax.issueTx({\n    tx: string,\n    encoding: string, //optional\n}) -> {\n    txID: string\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Image Build Command\nDESCRIPTION: Command to build a Docker image for the faucet application\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t faucet-image\n```\n\n----------------------------------------\n\nTITLE: addValidator Command Flags - Avalanche Blockchain CLI - Bash\nDESCRIPTION: This code snippet lists the configurable flags for the 'addValidator' command in Bash. Flags such as --aggregator-allow-private-peers, --balance, --blockchain-key, --bls-public-key, --stake-amount, and --weight allow detailed specification of validator registration, network environment, key management, and staking parameters. Additional options support configuration, logging, and network management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--aggregator-allow-private-peers allow    the signature aggregator to connect to peers with private IP (default true)\n--aggregator-extra-endpoints strings      endpoints for extra nodes that are needed in signature aggregation\n--aggregator-log-level string             log level to use with signature aggregator (default \"Off\")\n--balance uint                            set the AVAX balance of the validator that will be used for continuous fee on P-Chain\n--blockchain-genesis-key use              genesis allocated key to pay fees for completing the validator's registration (blockchain gas token)\n--blockchain-key string                   CLI stored key to use to pay fees for completing the validator's registration (blockchain gas token)\n--blockchain-private-key string           private key to use to pay fees for completing the validator's registration (blockchain gas token)\n--bls-proof-of-possession string          set the BLS proof of possession of the validator to add\n--bls-public-key string                   set the BLS public key of the validator to add\n--cluster string                          operate on the given cluster\n--create-local-validator create           additional local validator and add it to existing running local node\n--default-duration                        (for Subnets, not L1s) set duration so as to validate until primary validator ends its period\n--default-start-time                      (for Subnets, not L1s) use default start time for subnet validator (5 minutes later for fuji & mainnet, 30 seconds later for devnet)\n--default-validator-params                (for Subnets, not L1s) use default weight/start/duration params for subnet validator\n--delegation-fee uint16                   (PoS only) delegation fee (in bips) (default 100)\n--devnet operate                          on a devnet network\n--disable-owner string                    P-Chain address that will able to disable the validator with a P-Chain transaction\n--endpoint string                         use the given endpoint for network operations\n-e, --ewoq use                            ewoq key [fuji/devnet only]\n-f, --fuji testnet                        operate on fuji (alias to testnet\n-h, --help help                           for addValidator\n-k, --key string                          select the key to use [fuji/devnet only]\n-g, --ledger use                          ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)\n--ledger-addrs strings                    use the given ledger addresses\n-l, --local operate                       on a local network\n-m, --mainnet operate                     on mainnet\n--node-endpoint string                    gather node id/bls from publicly available avalanchego apis on the given endpoint\n--node-id string                          node-id of the validator to add\n--output-tx-path string                   (for Subnets, not L1s) file path of the add validator tx\n--partial-sync set                        primary network partial sync for new validators (default true)\n--remaining-balance-owner string          P-Chain address that will receive any leftover AVAX from the validator when it is removed from Subnet\n--rpc string                              connect to validator manager at the given rpc endpoint\n--stake-amount uint                       (PoS only) amount of tokens to stake\n--staking-period duration                 how long this validator will be staking\n--start-time string                       (for Subnets, not L1s) UTC start time when this validator starts validating, in 'YYYY-MM-DD HH:MM:SS' format\n--subnet-auth-keys strings                (for Subnets, not L1s) control keys that will be used to authenticate add validator tx\n-t, --testnet fuji                        operate on testnet (alias to fuji)\n--wait-for-tx-acceptance                  (for Subnets, not L1s) just issue the add validator tx, without waiting for its acceptance (default true)\n--weight uint                             set the staking weight of the validator to add (default 20)\n--config string                           config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                        log level for the application (default \"ERROR\")\n--skip-update-check skip                  check for new versions\n```\n\n----------------------------------------\n\nTITLE: Previewing AllowList Configuration\nDESCRIPTION: This bash snippet displays the command line output for previewing the current AllowList configuration, showing the addresses assigned to each role (Admin, Manager, Enabled).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/04-activating-native-minter-precompile.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n✔ Preview Allow List\n+---------+--------------------------------------------+\n| Admins  | 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC |\n+---------+--------------------------------------------+\n| Manager |                                            |\n+---------+--------------------------------------------+\n| Enabled |                                            |\n+---------+--------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of TokenIconWithChain in React (TSX)\nDESCRIPTION: This snippet shows the simplest way to use TokenIconWithChain by specifying only the required chain_id and address props in a TypeScript React environment. The component will render the token icon with its chain overlay for the provided parameters. There are no extra dependencies besides the component import.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon-with-chain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenIconWithChain \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing StoreGreeting Helper Function in Go\nDESCRIPTION: Helper function to store greeting values in the contract's stateDB with proper padding and hash conversion.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc StoreGreeting(stateDB contract.StateDB, input string) {\n\tinputPadded := common.LeftPadBytes([]byte(input), common.HashLength)\n\tinputHash := common.BytesToHash(inputPadded)\n\tstateDB.SetState(ContractAddress, storageKeyHash, inputHash)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subnet Validators in Bash\nDESCRIPTION: Illustrates how to add Avalanche L1 validators to a subnet using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control add-subnet-validators '[{\"subnet_id\": \"p433wpuXyJiDhyazPYyZMJeaoPSW76CBZ2x7wrVPLgvokotXz\", \"node_names\":[\"node1\"]}]'\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ChainDropdown in React\nDESCRIPTION: Demonstrates the basic implementation of the ChainDropdown component with minimal configuration. It shows how to set up the component with a selected chain ID, a list of available chains, and a callback function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-dropdown.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChainDropdown } from '@avalabs/builderkit';\n\n// Basic usage\n<ChainDropdown \n  selected={43114}\n  list={[43114, 43113]}\n  onSelectionChanged={(chainId) => console.log('Selected chain:', chainId)}\n/>\n\n// With custom styling\n<ChainDropdown \n  selected={43114}\n  list={[43114, 43113]}\n  onSelectionChanged={handleChainChange}\n  className=\"w-64\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Hardcoded Sender Verification in Solidity\nDESCRIPTION: Implementation of a receiver contract that uses hardcoded address verification to ensure messages come from an authorized Teleporter Messenger contract. Demonstrates basic message receiving and storage functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/05-verify-sender-is-icm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"@teleporter/ITeleporterReceiver.sol\";\n\ncontract ReceiverOnSubnet is ITeleporterReceiver {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    string public lastMessage;\n\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\n        // Only the Interchain Messaging receiver can deliver a message.\n        require(msg.sender == address(messenger), \"ReceiverOnSubnet: unauthorized TeleporterMessenger\");\n\n        // Store the message.\n        lastMessage = abi.decode(message, (string));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying SECP256K1 Output Owners Output Structure in Avalanche\nDESCRIPTION: Gantt chart representation of the SECP256K1 Output Owners Output structure, showing the size and arrangement of its components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 20 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Syncing Avalanche Nodes with a Blockchain\nDESCRIPTION: This command enables all nodes in a cluster to be bootstrapped to a specific blockchain. It includes options to bypass validation checks and specify subnet aliases and validators for RPC calls.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_115\n\nLANGUAGE: bash\nCODE:\n```\navalanche node sync [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for sync\n--no-checks do              not check for bootstrapped/healthy status or rpc compatibility of nodes against subnet\n--subnet-aliases strings    subnet alias to be used for RPC calls. defaults to subnet blockchain ID\n--validators strings        sync subnet into given comma separated list of validators. defaults to all cluster nodes\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Update Command in Bash\nDESCRIPTION: The update command checks if an Avalanche CLI update is available and prompts the user to install it. It includes options to confirm installation automatically and display version information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_169\n\nLANGUAGE: bash\nCODE:\n```\navalanche update [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Command to create a new directory for storing smart contracts\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/05-transfers-in-smart-contracts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p src/my-contracts\n```\n\n----------------------------------------\n\nTITLE: Upgrading Subnet with Avalanche CLI\nDESCRIPTION: Command suite for updating developmental and deployed Blockchains. It includes subcommands for applying upgrades, exporting and importing upgrade files, generating upgrades, and upgrading VM binaries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_154\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Monitoring for eRPC with Docker Compose\nDESCRIPTION: Commands to set up the monitoring stack (Prometheus, Grafana) for eRPC using Docker Compose. This enables visualization of metrics collected by the proxy service.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/rpc-providers.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# clone the repo if you haven't\ngit clone https://github.com/erpc/erpc.git\ncd erpc\n\n# bring up the monitoring stack\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Fetching Priority Fee with eth_maxPriorityFeePerGas API\nDESCRIPTION: Example of a cURL request to the eth_maxPriorityFeePerGas API that returns the priority fee needed for transaction inclusion. An Avalanche extension to standard Ethereum APIs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"eth_maxPriorityFeePerGas\",\n    \"params\" :[]\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/rpc\n```\n\n----------------------------------------\n\nTITLE: Importing AVAX to C-Chain in Go\nDESCRIPTION: This function finalizes a transfer of AVAX from the X-Chain or P-Chain to the C-Chain. It requires the destination address, source chain, and user credentials.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_24\n\nLANGUAGE: go\nCODE:\n```\navax.importAVAX({\n    to: string,\n    sourceChain: string,\n    baseFee: int, // optional\n    username: string,\n    password:string,\n}) -> {txID: string}\n```\n\n----------------------------------------\n\nTITLE: Ledger Signing for Add Validator Transaction\nDESCRIPTION: Prompt for the user to sign the add validator transaction using their Ledger hardware wallet. The CLI shows the Ledger's address and instructs the user to confirm the action on their device.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nLedger address: P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\n*** Please sign add validator hash on the ledger device ***\n```\n\n----------------------------------------\n\nTITLE: Serializing Avalanche L1 Auth\nDESCRIPTION: Example of serializing an Avalanche L1 Auth structure, which includes TypeID and AddressIndices. The example provides both a compact representation and a detailed byte-level breakdown.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_58\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID                <- 0x0000000a\n    AddressIndices        <-  [\n       0x00000000\n    ]\n]\n\n=\n[\n  // type id\n  0x00, 0x00, 00x0, 0x0a,\n\n  // num address indices\n  0x00, 0x00, 0x00, 0x01,\n\n  // address index 1\n  0x00, 0x00, 0x00, 0x00\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Network Health with cURL\nDESCRIPTION: Shows how to check the health of the local cluster using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/health'\n```\n\n----------------------------------------\n\nTITLE: C-Chain Offline Pruning Configuration\nDESCRIPTION: JSON configuration for enabling offline pruning with specified data directory path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"offline-pruning-enabled\": true,\n  \"offline-pruning-data-directory\": \"/home/ubuntu/offline-pruning\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default String Values in a Precompiled Contract in Go\nDESCRIPTION: This example shows how to set a default value (\"EGS\") for a string in a precompiled contract by calling the StoreString function within the Configure method.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/09-define-default-values-via-go.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Configure configures [state] with the given [cfg] precompileconfig.\n// This function is called by the EVM once per precompile contract activation.\n// You can use this function to set up your precompile contract's initial state,\n// by using the [cfg] config and [state] stateDB.\nfunc (*configurator) Configure(chainConfig precompileconfig.ChainConfig, cfg precompileconfig.Config, state contract.StateDB, blockContext contract.ConfigurationBlockContext) error {\n    config, ok := cfg.(*Config)\n    if !ok {\n        return fmt.Errorf(\"incorrect config %T: %v\", config, config)\n    }\n    // CUSTOM CODE STARTS HERE\n    StoreString(state, \"EGS\")\n\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Flags for Avalanche Blockchain Import File (Bash)\nDESCRIPTION: Lists flags specific to the `avalanche blockchain import file` subcommand. Flags allow specifying the source repository (`--repo`), branch (`--branch`), subnet configuration within the repo (`--subnet`), and forcing overwrites (`--force`), in addition to common flags like `--config`, `--log-level`, and `--skip-update-check`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n--branch string             the repo branch to use if downloading a new repo\n-f, --force overwrite       the existing configuration if one exists\n-h, --help help             for file\n--repo string               the repo to import (ex: ava-labs/avalanche-plugins-core) or url to download the repo from\n--subnet string             the subnet configuration to import from the provided repo\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Response Format for eth_getChainConfig API\nDESCRIPTION: Example response from the eth_getChainConfig API displaying chain configuration details including Ethereum network upgrades and Avalanche-specific parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"chainId\": 43112,\n    \"homesteadBlock\": 0,\n    \"daoForkBlock\": 0,\n    \"daoForkSupport\": true,\n    \"eip150Block\": 0,\n    \"eip150Hash\": \"0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0\",\n    \"eip155Block\": 0,\n    \"eip158Block\": 0,\n    \"byzantiumBlock\": 0,\n    \"constantinopleBlock\": 0,\n    \"petersburgBlock\": 0,\n    \"istanbulBlock\": 0,\n    \"muirGlacierBlock\": 0,\n    \"apricotPhase1BlockTimestamp\": 0,\n    \"apricotPhase2BlockTimestamp\": 0,\n    \"apricotPhase3BlockTimestamp\": 0,\n    \"apricotPhase4BlockTimestamp\": 0,\n    \"apricotPhase5BlockTimestamp\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Network via CLI in Bash\nDESCRIPTION: This command uses the Avalanche CLI (`avalanche`) to restart a previously deployed and stopped Avalanche network snapshot within a GitHub Codespace. It boots up the network nodes based on the saved state, making them ready for use. Requires the Avalanche CLI to be installed and a network snapshot to exist from a previous run.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/pause-and-resume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche network start\n```\n\n----------------------------------------\n\nTITLE: Defining GetStateSummaryFrontier Message for State Sync\nDESCRIPTION: The GetStateSummaryFrontier message requests a peer's most recently accepted state summary, specifying the chain, a unique request ID, and a deadline.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetStateSummaryFrontier {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Forge Create Deployment (Bash)\nDESCRIPTION: This shows the expected console output after successfully running the `forge create` command. It includes compilation status, the deployer's address, the deployed contract's address, and the transaction hash. This is illustrative output and not a command to be executed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[⠒] Compiling...\n[⠢] Compiling 1 files with 0.8.18\n[⠆] Solc 0.8.18 finished in 14.67ms\nCompiler run successful!\nDeployer: 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\nDeployed to: 0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25\nTransaction hash: 0x5717e501e12f40d644c60030bc0ab9569ddb9f4cba968546ab597fb516eae09b\n```\n\n----------------------------------------\n\nTITLE: Using the Interchain Messenger command in Avalanche CLI\nDESCRIPTION: Command for interacting with ICM messenger contracts, providing subcommands for deployment and message sending between subnets.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain messenger [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Transaction Function Example Usage\nDESCRIPTION: Example of sending an AVAX transaction with specified gas fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nsendAvax(\"0.01\", \"0x856EA4B78947c3A5CD2256F85B2B147fEBDb7124\", 100, 2);\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Receive Confirmation\nDESCRIPTION: Shows the confirmation prompt summarizing the receive operation details: amount and target address. The user must confirm by selecting 'Yes' to proceed with signing the transaction on Ledger B.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nthis operation is going to:\n- receive 4.496000000 AVAX at target address P-avax1r4aceznjkz8ch4pmpqrmkq4f3sl952mdrdt6xm:\n\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Confirm transfer:\n    No\n  ▸ Yes\n```\n\n----------------------------------------\n\nTITLE: Cleaning Local Network State - Avalanche CLI - Bash\nDESCRIPTION: This snippet provides the command to clean and reset the local network state for Avalanche L1 deployments using the Avalanche CLI. It is only applicable for L1s deployed to a local test network and will not affect Mainnet or Fuji deployments. Running this command removes all persistent network data, so use with caution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/delete-avalanche-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche network clean\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Transfer Input in Protocol Buffers\nDESCRIPTION: Protocol Buffers message definition for SECP256K1 Transfer Input, specifying field types and their byte sizes. This provides a standardized serialization format for SECP256K1 Transfer Input data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1TransferInput {\n    uint32 typeID = 1;                   // 04 bytes\n    uint64 amount = 2;                   // 08 bytes\n    repeated uint32 address_indices = 3; // 04 bytes + 04 bytes * len(address_indices)\n}\n```\n\n----------------------------------------\n\nTITLE: Managing ERC-721 Balances and Ownership in Solidity\nDESCRIPTION: This code demonstrates the dual-mapping strategy used in ERC-721 contracts to manage non-fungible token ownership and balances. One mapping records the number of tokens owned by an address, while the second maps a unique token ID to the owner's address. These structures are prerequisites for ERC-721 implementations in Solidity and ensure the correct handling of NFT uniqueness compared to fungible tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/01-erc721-intro.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => uint) balances;\nmapping(uint => address) holders;\n```\n\n----------------------------------------\n\nTITLE: Updated Config Struct with JSON Field Mapping\nDESCRIPTION: Enhanced Config struct that includes a DefaultString field mapped to the \"defaultString\" JSON property with the omitempty option.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/10-define-default-values-via-genesis.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    precompileconfig.Upgrade\n    // CUSTOM CODE STARTS HERE\n    // Add your own custom fields for Config here\n    DefaultString string `json:\"defaultString,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain ID and Token Symbol for Avalanche Blockchain\nDESCRIPTION: This snippet demonstrates setting the Chain ID and token symbol for the custom native token. The Chain ID should be unique, and the token symbol represents the native token in transactions and applications.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/02-configure-custom-native-token.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n✔ Chain ID: 123456\n✔ Token Symbol: CNT\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Mint Output in Protocol Buffers\nDESCRIPTION: Provides a Protocol Buffers message definition for the SECP256K1 Mint output, specifying field types and sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1MintOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint64 locktime = 2;          // 08 bytes\n    uint32 threshold = 3;         // 04 bytes\n    repeated bytes addresses = 4; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens Between Chains\nDESCRIPTION: This command initiates a token transfer of 100 TOK from the ewoq address on C-Chain to the blockchain_airdrop address on the custom Avalanche L1 subnet using the Teleporter Token Bridge.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-token-bridge.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche key transfer\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format for L1 Subnet Details\nDESCRIPTION: This JSON structure represents the expected response format when querying L1 subnet details. It includes various properties such as creation timestamp, subnet ID, owner addresses, and blockchain information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/08-query-l1-details.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createBlockTimestamp\": 123,\n  \"createBlockIndex\": \"<string>\",\n  \"subnetId\": \"<string>\",\n  \"ownerAddresses\": [\n    \"<string>\"\n  ],\n  \"threshold\": 123,\n  \"locktime\": 123,\n  \"subnetOwnershipInfo\": {\n    \"locktime\": 0,\n    \"threshold\": 1,\n    \"addresses\": [\n      \"avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw\"\n    ]\n  },\n  \"isL1\": true,\n  \"l1ConversionTransactionHash\": \"<string>\",\n  \"l1ValidatorManagerDetails\": {\n    \"blockchainId\": \"<string>\",\n    \"contractAddress\": \"<string>\"\n  },\n  \"blockchains\": [\n    {\n      \"blockchainId\": \"<string>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of the Domain Component in TSX\nDESCRIPTION: Demonstrates the fundamental use of the `Domain` component by importing it from `@avalabs/builderkit` and providing an Ethereum address directly via the `address` prop. By default (`showAddressIfNotAvailable` is false), it displays the resolved Avalanche domain name or nothing if no domain is found.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/domain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Domain } from '@avalabs/builderkit';\n\n// Basic usage\n<Domain address=\"0x1234567890123456789012345678901234567890\" />\n```\n\n----------------------------------------\n\nTITLE: Running ICTT Frontend Application\nDESCRIPTION: Command to start the ICTT frontend application in development mode using Yarn.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/08-deploy-your-own-frontend.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Prometheus TLS Configuration\nDESCRIPTION: YAML configuration for enabling TLS support in Prometheus when connecting to AvalancheGo API. Used when the node has TLS enabled.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n- job_name: \"avalanchego\"\n  metrics_path: \"/ext/metrics\"\n  scheme: \"https\"\n  tls_config:\n    insecure_skip_verify: true\n  static_configs:\n    - targets: [\"localhost:9650\"]\n```\n\n----------------------------------------\n\nTITLE: Defining ITokenTransferrer Interface for Interchain Token Transfers in Solidity\nDESCRIPTION: This interface defines the events that token transfer contract implementations must emit and specifies the message types and formats for communication between all implementations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/05-avalanche-interchain-token-transfer/03-file-structure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ITokenTransferrer {\n    // Event definitions and message type specifications\n}\n```\n\n----------------------------------------\n\nTITLE: Styling MultiChainTokenInput with Custom CSS Classes in React/TypeScript\nDESCRIPTION: Presents an example of applying custom background color, border radius, and padding to the MultiChainTokenInput using the className property. Useful for seamlessly integrating the component into different UI themes. Requires the tokens, token, and handleTokenChange variables, with the environment supporting custom utility classes or a CSS framework.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/multi-chain-token-input.mdx#2025-04-23_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n<MultiChainTokenInput \n  selected={token}\n  list={tokens}\n  onSelectionChanged={handleTokenChange}\n  showBalances={true}\n  className=\"bg-gray-100 rounded-lg p-2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Deploying CrossChainVRFConsumer Contract using Forge\nDESCRIPTION: Command to deploy the CrossChainVRFConsumer contract using Forge CLI. Requires RPC URL, private key, TeleporterMessenger address, and CrossChainVRFWrapper address as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/06-deploy-vrf-consumer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> src/CrossChainVRFConsumer.sol:CrossChainVRFConsumer --constructor-args <TELEPORTER_MESSENGER_ADDRESS> $VRF_WRAPPER --broadcast\n```\n\n----------------------------------------\n\nTITLE: Flags for the upgrade apply Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Lists the command-line flags for the `avalanche blockchain upgrade apply` subcommand. Flags control aspects like specifying the AvalancheGo chain config directory, forcing application without confirmation, selecting the target network (local, fuji/testnet, mainnet), and printing manual configuration instructions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n--avalanchego-chain-config-dir string    avalanchego's chain config file directory (default \"/Users/owen.wahlgren/.avalanchego/chains\")\n--config create                          upgrade config for future subnet deployments (same as generate)\n--force If                               true, don't prompt for confirmation of timestamps in the past\n--fuji fuji                              apply upgrade existing fuji deployment (alias for `testnet`)\n-h, --help help                          for apply\n--local local                            apply upgrade existing local deployment\n--mainnet mainnet                        apply upgrade existing mainnet deployment\n--print if                               true, print the manual config without prompting (for public networks only)\n--testnet testnet                        apply upgrade existing testnet deployment (alias for `fuji`)\n--log-level string                       log level for the application (default \"ERROR\")\n--skip-update-check skip                 check for new versions\n```\n\n----------------------------------------\n\nTITLE: Send Token API Request\nDESCRIPTION: cURL command to request tokens from the faucet for a specific address and chain\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -d '{\n    \"address\": \"0x3EA53fA26b41885cB9149B62f0b7c0BAf76C78D4\"\n    \"chain\": \"C\"\n}' -H 'Content-Type: application/json' http://localhost:8000/api/sendToken\n```\n\n----------------------------------------\n\nTITLE: Basic Chain Selection Example\nDESCRIPTION: Shows a simple implementation of the ChainDropdown for basic chain selection functionality. This example demonstrates how to set up the component with the essential props for chain selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-dropdown.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainDropdown \n  selected={43114}\n  list={[43114, 43113]}\n  onSelectionChanged={handleChainChange}\n/>\n```\n\n----------------------------------------\n\nTITLE: Removing an Avalanche L1 Validator with avalanche-network-runner (Bash)\nDESCRIPTION: Shows how to remove an Avalanche L1 validator from a specific subnet using the 'avalanche-network-runner control remove-subnet-validator' command. Examples provide both CLI usage with JSON specification and the equivalent HTTP API call using curl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control remove-subnet-validator removeValidatorSpec [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control remove-subnet-validator '[{\"subnet_id\": \"p433wpuXyJiDhyazPYyZMJeaoPSW76CBZ2x7wrVPLgvokotXz\", \"node_names\":[\"node1\"]}]'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/removesubnetvalidator' \\\n--header 'Content-Type: application/json' \\\n--data '[{\"subnetId\": \"p433wpuXyJiDhyazPYyZMJeaoPSW76CBZ2x7wrVPLgvokotXz\", \"nodeNames\":[\"node1\"]}]'\n```\n\n----------------------------------------\n\nTITLE: Saving ERC20Home Contract Address on Avalanche C-Chain\nDESCRIPTION: This command exports the deployed ERC20Home contract address as an environment variable for future use. Replace the placeholder with the actual contract address obtained from the deployment output.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/03-deploy-home.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_HOME_C_CHAIN=0x...\n```\n\n----------------------------------------\n\nTITLE: Checking ERC20 Token Balances\nDESCRIPTION: Demonstrates how to check token balances for different accounts using the balanceOf() method.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet value = await coin.balanceOf(accounts[0])\nvalue.toString()\nvalue = await coin.balanceOf(accounts[1])\nvalue.toString()\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Avalanche L1 Chain Configuration (TypeScript)\nDESCRIPTION: This TypeScript code defines a custom chain configuration object for an Avalanche L1, named 'Echo L1', using Viem's `defineChain` utility. It specifies the chain ID, name, native currency details (name, symbol, decimals), RPC endpoint URL, and block explorer URL. This object is later used to configure Privy and Viem clients to interact with this specific chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineChain } from 'viem';\n\nexport const echo = defineChain({\n  id: 173750,\n  name: 'Echo L1',\n  network: 'echo',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ech',\n    symbol: 'ECH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://subnets.avax.network/echo/testnet/rpc']\n    },\n  },\n  blockExplorers: {\n    default: {name: 'Explorer', url: 'https://subnets-test.avax.network/echo'},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Token Configuration Interface in TypeScript\nDESCRIPTION: Specifies the `Token` interface structure required for each token object within the `tokens` array prop used by the `Faucet` component and related elements. It outlines the necessary properties: `address` (contract address or 'native'), `name`, `symbol`, `decimals`, and the `chain_id` where the token exists.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/faucet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Token {\n  address: string;      // Contract address or \"native\" for native token\n  name: string;         // Token name\n  symbol: string;       // Token symbol\n  decimals: number;     // Token decimals\n  chain_id: number;     // Chain ID where token exists\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Node IP Addresses in Avalanche Cluster\nDESCRIPTION: This command obtains the current IP addresses for all nodes with dynamic IPs in the cluster and updates the local node information used by CLI commands. It supports AWS profile specification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_110\n\nLANGUAGE: bash\nCODE:\n```\navalanche node refresh-ips [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--aws-profile string        aws profile to use (default \"default\")\n-h, --help help             for refresh-ips\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Unsigned Add Permissionless Delegator TX Protocol Buffer Definition\nDESCRIPTION: A protocol buffer message definition for the unsigned add permissionless delegator transaction. This specifies the fields and their order for serialization and deserialization of the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nmessage AddPermissionlessDelegatorTx {\n    BaseTx base_tx = 1;         // size(base_tx)\n    Validator validator = 2;    // size(validator)\n    SubnetID subnet_id = 3;     // 32 bytes\n    repeated TransferOut stake_outs = 4; // 4 bytes + size(stake_outs)\n    SECP256K1OutputOwners delegator_rewards_owner = 5; // size(delegator_rewards_owner) bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Token Transferrer deployment command in Avalanche CLI\nDESCRIPTION: Command for deploying a Token Transferrer into specified Network and Subnets with various configuration options for home and remote chains, token types, and network environments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\navalanche ictt deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Validator Addition Transaction Configuration\nDESCRIPTION: Interactive process for configuring validator details including NodeID, start time, end time, and weight. The CLI walks through the necessary parameters needed to create a validator addition transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nNext, we need the NodeID of the validator you want to whitelist.\n\nCheck https://build.avax.network/docs/apis/avalanchego/apis/info#infogetnodeid for instructions about how to query the NodeID from your node\n(Edit host IP address and port to match your deployment, if needed).\nWhat is the NodeID of the validator you'd like to whitelist?: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\n✔ Default (20)\nWhen should your validator start validating?\nIf your validator is not ready by this time, Avalanche L1 downtime can occur.\n✔ Custom\nWhen should the validator start validating? Enter a UTC datetime in 'YYYY-MM-DD HH:MM:SS' format: 2022-11-22 23:00:00\n✔ Until primary network validator expires\nNodeID: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\nNetwork: Local Network\nStart time: 2022-11-22 23:00:00\nEnd time: 2023-11-22 15:57:27\nWeight: 20\nInputs complete, issuing transaction to add the provided validator information...\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components and Utilities in Next.js (JavaScript)\nDESCRIPTION: This snippet shows import statements in a Next.js project, bringing in routing, utility functions, UI button variants, and step components. Dependencies include Next.js, an internal 'cn' utility function, a button variant utility, and 'fumadocs-ui' for steps. These imports are foundational for rendering functional user interfaces and step-by-step instructions in the application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/set-up.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Link from 'next/link';\nimport { cn } from '@/utils/cn';\nimport { buttonVariants } from '@/components/ui/button.tsx'\nimport { Step, Steps } from 'fumadocs-ui/components/steps';\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain and Node - Avalanche Blockchain CLI - Bash\nDESCRIPTION: This command configures AvalancheGo node, subnet, and chain-specific configuration files, supporting both global and per-node setups. It can be used to define operational parameters for subnets, chains, or the node itself using file paths specified via flags. This command is essential for custom deployments or when special VM/channel requirements exist.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain configure [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting Custom Token Allocation via CLI (Bash)\nDESCRIPTION: This snippet shows an interactive prompt from a CLI tool used for blockchain configuration. It asks the user how the initial native token allocation should be structured, highlighting the selection of 'Define a custom allocation' as the recommended option for production environments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/06-configure-token-allocation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n? How should the initial token allocation be structured?: \n    Allocate 1m tokens to a new account\n    Allocate 1m to the ewoq account 0x8db...2FC (Only recommended for testing, not recommended for production)\n  ▸ Define a custom allocation (Recommended for production)\n```\n\n----------------------------------------\n\nTITLE: AvalancheGo Installation Output\nDESCRIPTION: Sample output showing the installation process including architecture detection, file downloading, and unpacking of node files.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/installing-avalanche-go.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAvalancheGo installer\n---------------------\nPreparing environment...\nFound arm64 architecture...\nLooking for the latest arm64 build...\nWill attempt to download:\n https://github.com/ava-labs/avalanchego/releases/download/v1.1.1/avalanchego-linux-arm64-v1.1.1.tar.gz\navalanchego-linux-arm64-v1.1.1.tar.gz 100%[=========================================================================>]  29.83M  75.8MB/s    in 0.4s\n2020-12-28 14:57:47 URL:https://github-production-release-asset-2e65be.s3.amazonaws.com/246387644/f4d27b00-4161-11eb-8fb2-156a992fd2c8?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20201228%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20201228T145747Z&X-Amz-Expires=300&X-Amz-Signature=ea838877f39ae940a37a076137c4c2689494c7e683cb95a5a4714c062e6ba018&X-Amz-SignedHeaders=host&actor_id=0&key_id=0&repo_id=246387644&response-content-disposition=attachment%3B%20filename%3Davalanchego-linux-arm64-v1.1.1.tar.gz&response-content-type=application%2Foctet-stream [31283052/31283052] -> \"avalanchego-linux-arm64-v1.1.1.tar.gz\" [1]\nUnpacking node files...\navalanchego-v1.1.1/plugins/\navalanchego-v1.1.1/plugins/evm\navalanchego-v1.1.1/avalanchego\nNode files unpacked into /home/ubuntu/avalanche-node\n```\n\n----------------------------------------\n\nTITLE: P-Chain Gas Consumption Formula\nDESCRIPTION: Mathematical formula for calculating total gas consumption on Avalanche's P-Chain. It combines four dimensions: bandwidth (transaction size), reads, writes, and compute time to determine the total gas used.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/txn-fees.mdx#2025-04-23_snippet_2\n\nLANGUAGE: math\nCODE:\n```\nG = B + 1000R + 1000W + 4C\n```\n\n----------------------------------------\n\nTITLE: Exporting a Private Key to Hex with Avalanche-CLI in Bash\nDESCRIPTION: This command prints the raw private key associated with 'mytestkey' in hexadecimal format directly to stdout. It relies on Avalanche-CLI, and only the key owner should execute this operation as it exposes the private key. Exported keys are sensitive; ensure secure handling and avoid sharing the output.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche key export mytestkey\n21940fbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb5f0b\n```\n\n----------------------------------------\n\nTITLE: Defining AVAX Minting Formula in LaTeX\nDESCRIPTION: This LaTeX formula defines how AVAX tokens are minted. It includes variables for total tokens, unminted supply, staking amount and time, and governable parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/avax-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nR_j = R_l + \\sum_{\\forall u} \\rho(u.s_{amount}, u.s_{time}) \\times \\frac{c_j}{L} \\times \\left( \\sum_{i=0}^{j}\\frac{1}{\\left(\\gamma + \\frac{1}{1 + i^\\lambda}\\right)^i} \\right)\n```\n\n----------------------------------------\n\nTITLE: Running Ginkgo Tests Filtered by Label in Bash\nDESCRIPTION: Command to run only the HelloWorld precompile tests using Ginkgo label filtering. The GINKGO_LABEL_FILTER environment variable restricts which tests will execute.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nGINKGO_LABEL_FILTER=HelloWorld ./scripts/run_ginkgo.sh\n```\n\n----------------------------------------\n\nTITLE: Removing a Node via HTTP\nDESCRIPTION: This curl command removes (stops) a node named 'node5' from the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/removenode -d '{\"name\":\"node5\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Genesis Token Allocation in Subnet-EVM\nDESCRIPTION: Defines initial token balances for addresses in the genesis block. Uses hex values for balances denominated in Wei, with addresses specified without 0x prefix.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"alloc\": {\n  \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n    \"balance\": \"0x295BE96E64066972000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node Bootstrap Status via CLI\nDESCRIPTION: This command checks if all nodes within the specified `<clusterName>` have finished bootstrapping on the Avalanche network. This step is necessary after node creation (using `avalanche node create`) to ensure the nodes are ready to become validators. This check is typically ignored for Devnet deployments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-gcp.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche node status <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event in Solidity for Precompiles\nDESCRIPTION: Example of defining a custom event in a Solidity interface for a precompile. This event is emitted when the greeting is changed in the hello world precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent GreetingChanged(address indexed sender, string oldGreeting, string newGreeting)\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Request to AvaCloud Data API using Curl\nDESCRIPTION: This curl command demonstrates how to make an authenticated request to the AvaCloud Data API. It includes the necessary headers for content type and API key authentication, querying the '/v1/chains' endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/03-environment-setup/01-avacloud-account.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: Application/json\" -H \"x-glacier-api-key: <your_api_key>\" \\\n  \"https://glacier-api.avax.network/v1/chains\"\n```\n\n----------------------------------------\n\nTITLE: Querying L1 Validator Fee Information via P-Chain API (JSON-RPC)\nDESCRIPTION: Describes P-Chain API endpoints for retrieving L1 validator fee data: `platform.getValidatorFeeState` fetches the current dynamic fee rate (nAVAX/sec), `platform.getL1Validator` gets details about a specific L1 validator including its remaining balance, and `platform.getValidatorFeeConfig` returns the configuration parameters (like target validator count T, minimum fee M, constant K) used in the fee calculation formula defined by ACP-77.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/l1-validator-fee.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json-rpc\nCODE:\n```\nplatform.getValidatorFeeState\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\nplatform.getL1Validator\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\nplatform.getValidatorFeeConfig\n```\n\n----------------------------------------\n\nTITLE: Using Avalanche CLI Subnet Deploy Command\nDESCRIPTION: The deploy command is used to deploy a blockchain configuration locally, to Fuji Testnet, or to Mainnet. It supports various flags for customizing the deployment process including validator configuration, network selection, and teleporter/relayer options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_134\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing AcceptedFrontier Response Message\nDESCRIPTION: The AcceptedFrontier message contains the remote peer's last accepted frontier, including the chain ID, original request ID, and container ID of the frontier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AcceptedFrontier {\n  reserved 4; // Until Cortina upgrade is activated\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  bytes container_id = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Declared Solidity Variables\nDESCRIPTION: Illustrates how to assign values to previously declared variables (`addr`, `num`, `b`) of types `address`, `uint256`, and `bool` respectively. This step, known as defining or initializing the variable, follows the declaration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/02-primitive-value-and-types.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddr = 0x7f610402ccc4CC1BEbcE9699819200f5f28ED6e3;\nnum = 0;\nb = false;\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Relayer\nDESCRIPTION: Command to start the AWM Relayer execution on a specified devnet cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-devnet.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer start --cluster <devnetName>\n```\n\n----------------------------------------\n\nTITLE: Retrieving AvalancheGo Configuration for All Nodes in a Cluster\nDESCRIPTION: Demonstrates how to get the AvalancheGo configuration for all nodes in a specified cluster using the 'avalanche node ssh' command with 'cat /home/ubuntu/.avalanchego/configs/node.json'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/execute-ssh-commands.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh <clusterName> cat /home/ubuntu/.avalanchego/configs/node.json\n[i-0cf58a280bf3ef9a1] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem cat /home/ubuntu/.avalanchego/configs/node.json\n{\n  \"bootstrap-ids\": \"\",\n  \"bootstrap-ips\": \"\",\n  \"genesis-file\": \"/home/ubuntu/.avalanchego/configs/genesis.json\",\n  \"http-allowed-hosts\": \"*\",\n  \"http-allowed-origins\": \"*\",\n  \"http-host\": \"\",\n  \"log-display-level\": \"info\",\n  \"log-level\": \"info\",\n  \"network-id\": \"network-1338\",\n  \"public-ip\": \"44.219.113.190\",\n  \"track-subnets\": \"giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML\"\n}\n[i-0e2abd71a586e56b4] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem cat /home/ubuntu/.avalanchego/configs/node.json\n{\n  \"bootstrap-ids\": \"NodeID-EzxsrhoumLsQSWxsohfMFrM1rJcaiaBK8\",\n  \"bootstrap-ips\": \"44.219.113.190:9651\",\n  \"genesis-file\": \"/home/ubuntu/.avalanchego/configs/genesis.json\",\n  \"http-allowed-hosts\": \"*\",\n  \"http-allowed-origins\": \"*\",\n  \"http-host\": \"\",\n  \"log-display-level\": \"info\",\n  \"log-level\": \"info\",\n  \"network-id\": \"network-1338\",\n  \"public-ip\": \"3.212.206.161\",\n  \"track-subnets\": \"giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML\"\n}\n[i-027417a4f2ca0a478] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem cat /home/ubuntu/.avalanchego/configs/node.json\n{\n  \"bootstrap-ids\": \"NodeID-EzxsrhoumLsQSWxsohfMFrM1rJcaiaBK8,NodeID-6veKG5dAz1uJvKc7qm7v6wAPDod8hctb9\",\n  \"bootstrap-ips\": \"44.219.113.190:9651,3.212.206.161:9651\",\n  \"genesis-file\": \"/home/ubuntu/.avalanchego/configs/genesis.json\",\n  \"http-allowed-hosts\": \"*\",\n  \"http-allowed-origins\": \"*\",\n  \"http-host\": \"\",\n  \"log-display-level\": \"info\",\n  \"log-level\": \"info\",\n  \"network-id\": \"network-1338\",\n  \"public-ip\": \"54.87.168.26\",\n  \"track-subnets\": \"giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML\"\n}\n[i-0360a867aa295d8a4] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem cat /home/ubuntu/.avalanchego/configs/node.json\n{\n  \"bootstrap-ids\": \"NodeID-EzxsrhoumLsQSWxsohfMFrM1rJcaiaBK8,NodeID-6veKG5dAz1uJvKc7qm7v6wAPDod8hctb9,NodeID-ASseyUweBT82XquiGpmUFjd9QfkUjxiAY\",\n  \"bootstrap-ips\": \"44.219.113.190:9651,3.212.206.161:9651,54.87.168.26:9651\",\n  \"genesis-file\": \"/home/ubuntu/.avalanchego/configs/genesis.json\",\n  \"http-allowed-hosts\": \"*\",\n  \"http-allowed-origins\": \"*\",\n  \"http-host\": \"\",\n  \"log-display-level\": \"info\",\n  \"log-level\": \"info\",\n  \"network-id\": \"network-1338\",\n  \"public-ip\": \"3.225.42.57\",\n  \"track-subnets\": \"giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML\"\n}\n[i-0759b102acfd5b585] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem cat /home/ubuntu/.avalanchego/configs/node.json\n{\n  \"bootstrap-ids\": \"NodeID-EzxsrhoumLsQSWxsohfMFrM1rJcaiaBK8,NodeID-6veKG5dAz1uJvKc7qm7v6wAPDod8hctb9,NodeID-ASseyUweBT82XquiGpmUFjd9QfkUjxiAY,NodeID-LfwbUp9dkhmWTSGffer9kNWNzqUQc2TEJ\",\n  \"bootstrap-ips\": \"44.219.113.190:9651,3.212.206.161:9651,54.87.168.26:9651,3.225.42.57:9651\",\n  \"genesis-file\": \"/home/ubuntu/.avalanchego/configs/genesis.json\",\n  \"http-allowed-hosts\": \"*\",\n  \"http-allowed-origins\": \"*\",\n  \"http-host\": \"\",\n  \"log-display-level\": \"info\",\n  \"log-level\": \"info\",\n  \"network-id\": \"network-1338\",\n  \"public-ip\": \"107.21.158.224\",\n  \"track-subnets\": \"giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Interrupted Avalanche Key Transfer via CLI in Bash\nDESCRIPTION: This snippet shows the modified Bash command to resume an interrupted Avalanche 'key transfer' operation using the '--receive-recovery-step 1' argument, as instructed by the CLI. It requires the Avalanche CLI, correct Ledger device connection, and specification of the correct recovery step. This approach ensures that the transfer resumes from the previously failed point, mitigating the risk of incomplete transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\navalanche key transfer --receive-recovery-step 1\n```\n\n----------------------------------------\n\nTITLE: Selecting Validator Disable Address in Avalanche CLI - Bash\nDESCRIPTION: This prompt lets users designate which Avalanche blockchain address is authorized to disable the validator through P-Chain transactions. The selection can be made from user's stored keys or a custom address entry. This step provides control over validator lifecycle via on-chain operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n Which address do you want to be able to disable the validator using P-Chain transactions?: \n  \\u25b8 Get address from an existing stored key (created from avalanche key create or avalanche key import)\n    Custom\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche L1 Blockchain - Bash\nDESCRIPTION: This command initializes a new Avalanche L1 blockchain configuration using the Avalanche CLI. The <name> parameter should be replaced with the desired blockchain identifier (e.g., myblockchain). The --sovereign=false flag specifies the subnet sovereignty option. No additional dependencies beyond the Avalanche CLI are required. The command outputs configuration files to a specific directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create <name> --sovereign=false\n```\n\n----------------------------------------\n\nTITLE: Calling a SHA256 Precompiled Contract from Solidity\nDESCRIPTION: This example demonstrates how to interface with and call a SHA256 precompiled contract from a Solidity smart contract. The code defines an interface for the SHA256 precompile, instantiates it with a specific address (0x030...01), and calls its hashing function. The actual implementation exists in Go rather than Solidity.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/evm-precompiles/precompiles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ISHA256 {\n\n  \t// Computes the SHA256 hash of value\n\tfunction hashWithSHA256(string memory value) external view returns(bytes32 hash);\n  \n}\n\ncontract MyContract {\n    \n    ISHA256 mySHA256Precompile = ISHA256(0x0300000000000000000000000000000000000001);\n\n    function doSomething() public {\n        bytes32 hash = mySHA256Precompile.hashWithSHA256(\"test\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PushQuery Message Structure in Protobuf\nDESCRIPTION: Defines the structure of a PushQuery message, which requests the preferences of a remote peer given a container. It includes chain_id, request_id, deadline, container, engine_type, and requested_height fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PushQuery {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  bytes container = 4;\n  EngineType engine_type = 5;\n  uint64 requested_height = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend ERC-1155 Balance Fetching Implementation\nDESCRIPTION: Frontend function to fetch ERC-1155 balances by calling the backend API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC1155Balances = async (address: string) => {\n    const result = await fetch(`api/wallet?method=listERC1155Balances&address=${address}`);\n    const balances = await result.json();\n    return balances as Erc1155TokenBalance[];\n  }\n```\n\n----------------------------------------\n\nTITLE: Gantt EVM Output Specification in Coreth\nDESCRIPTION: Defines the byte structure of an EVMOutput used in Coreth atomic transactions. An EVMOutput contains a 20-byte address, 8-byte amount, and 32-byte asset ID, totaling 60 bytes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n+----------+----------+-------------------------+\n| address  : [20]byte |                20 bytes |\n+----------+----------+-------------------------+\n| amount   : uin64    |                08 bytes |\n+----------+----------+-------------------------+\n| asset_id : [32]byte |                32 bytes |\n+----------+----------+-------------------------+\n                      |                60 bytes |\n                      +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Importing and Using TokenInput Component in TSX\nDESCRIPTION: Shows how to import the `TokenInput` component from `@avalabs/builderkit` and use it with basic props like `selected`, `chain_id`, `list`, `onSelectionChanged`, and `showBalances`. Requires a pre-defined `tokenList` array containing objects matching the `TokenItem` structure and a selected token object.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/token-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport { TokenInput } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenInput \n  selected={{ address: \"0x1234...\", symbol: \"AVAX\" }}\n  chain_id={43114}\n  list={tokenList}\n  onSelectionChanged={(token) => console.log('Selected token:', token)}\n  showBalances={true}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Token Transferrer with Avalanche CLI\nDESCRIPTION: Command for deploying a Token Transferrer into specified networks and subnets, enabling cross-chain token transfers between home and remote chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_77\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain tokenTransferrer deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Chains in TSX\nDESCRIPTION: Example of importing a custom blockchain definition and adding it to the chains array in a React component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/08-deploy-your-own-frontend.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { myblockchain } from './chains/definitions';\n\nconst chains = [avalanche, avalancheFuji, echo, dispatch, myblockchain];\n```\n\n----------------------------------------\n\nTITLE: Compiling Smart Contracts via Yarn Script (Bash)\nDESCRIPTION: Executes the `compile` yarn script defined in `package.json`. This command runs `npx hardhat compile`, which processes the Solidity source files and generates necessary artifacts (like ABIs and bytecode). The output confirms successful compilation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn compile\n\n# output\nyarn run v1.22.4\nrimraf ./build/\nnpx hardhat compile\nCompiling 1 file with 0.6.4\nCompilation finished successfully\n✨  Done in 2.13s.\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory in Precompile-EVM Using Bash\nDESCRIPTION: Sets the current shell's working directory to the Precompile-EVM source directory, which is necessary prior to performing further Git and compilation operations. This snippet assumes that the GOPATH environment variable is set and the precompile-evm repository has already been cloned. The command expects an established Go development environment. No outputs are produced other than changing directory state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/precompile-evm\n```\n\n----------------------------------------\n\nTITLE: Implementing getCounter and GetCounterValue Functions in Go\nDESCRIPTION: Implements a GetCounterValue helper function to retrieve the counter value from state storage and a getCounter function that uses this helper to retrieve and return the counter value. The implementation includes gas cost deduction and proper output packing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/05-implement-getcounter-increment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GetCounterValue gets the value of the storage key in the contract storage.\nfunc GetCounterValue(stateDB contract.StateDB) *big.Int {\n\t// Get the value\n\tvalue := stateDB.GetState(ContractAddress, storageKeyHash)\n\n\t// Convert bytes to uint\n\treturn new(big.Int).SetBytes(value.Bytes())\n}\n\nfunc getCounter(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, GetCounterGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t// no input provided for this function\n\n\t// Get the current state\n\tcurrentState := accessibleState.GetStateDB()\n\t// Get the value set at recipient\n\tvalue := GetCounterValue(currentState)\n\n\tpackedOutput, err := PackGetCounterOutput(value)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Deployed Smart Contract Function using Cast CLI\nDESCRIPTION: This command uses the Cast CLI tool to interact with the previously deployed `HelloWorld` contract. It specifies the target network via `--rpc-url local-c`, provides the address of the deployed contract (`0x52C...`), and indicates the function to call along with its signature and return type (`\"sayHello()(string)\"`). This invokes the `sayHello` function on the specified contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/04-create-new-smart-contract.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c 0x52C84043CD9c865236f11d9Fc9F56aa003c1f922 \"sayHello()(string)\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Cast Send Transaction (Bash)\nDESCRIPTION: This shows example transaction details returned after executing the `cast send` command to set the number. It includes information like block hash, block number, gas used, transaction hash, and status, indicating a successful state change on the blockchain. This is illustrative output and not a command to be executed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nblockHash               0x02eb13d317a43976ea8ba21a76e5deb6d02d257a0b98c1a84734e0609b8a6fec\nblockNumber             3\ncontractAddress         \ncumulativeGasUsed       43516\neffectiveGasPrice       28000000000\nfrom                    0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\ngasUsed                 43516\nlogs                    []\nlogsBloom               0xnroot                    \nstatus                  1\ntransactionHash         0xd382101a4955f05f8a96e4ab4b62457700697930dc6ed84246a346e51d41d3cb\ntransactionIndex        0\ntype                    2\nto                      0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Transactions from Backend API in TypeScript\nDESCRIPTION: This frontend function makes an API call to the backend to retrieve recent transactions. It fetches data from the '/api/explorer' endpoint with the 'getRecentTransactions' method and returns an array of NativeTransaction objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/03-modifying-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchRecentTransactions = async () => {\n    const response = await fetch(`/api/explorer?method=getRecentTransactions`)\n    const data = await response.json()\n    return data as NativeTransaction[]\n  }\n```\n\n----------------------------------------\n\nTITLE: Example JSON RPC Error Response Structure\nDESCRIPTION: Shows the structure of a JSON RPC 2.0 error response. Instead of a `result` field, it contains an `error` object detailing the failure. This object includes a numerical `code`, a descriptive `message`, and optionally, a `data` field with more specific error information. The `id` still matches the original request.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": -32600,\n        \"message\": \"[Some error message here]\",\n        \"data\": [Object with additional information about the error]\n    },\n    \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Unique Chain IDs from Token List in TypeScript\nDESCRIPTION: Demonstrates how to retrieve a deduplicated list of chain IDs from an array of tokens using JavaScript/TypeScript built-ins. This is used within the MultiChainTokenInput component to generate chain filter options. Takes a token list where each token contains a chain_id, and returns a new array containing only the unique chain_id values. No dependencies apart from ES6 support for Set, Array.from, and arrow functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/multi-chain-token-input.mdx#2025-04-23_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nlet chains = Array.from(new Set(list.map(t => t.chain_id)));\n```\n\n----------------------------------------\n\nTITLE: Deploying Local Avalanche Blockchain\nDESCRIPTION: Command to deploy an Avalanche L1 blockchain locally with a specified name\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <blockchainName> --local\n```\n\n----------------------------------------\n\nTITLE: Importing GenesisBuilder Component in JSX\nDESCRIPTION: This code imports the GenesisBuilder component from a specific file path. The GenesisBuilder is likely the main tool used for creating and customizing the genesis file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/04-create-genesis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport GenesisBuilder from \"../../../../toolbox/src/toolbox/L1/GenesisBuilder.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Avalanche-CLI Key Listing for Ledger on Mainnet - Bash\nDESCRIPTION: This snippet is the illustrative output from running the 'avalanche key list --ledger 0 --mainnet' command, showing a table of Ledger addresses, associated names, chain types, addresses, balances, and network. Though actual results will vary, this demonstrates the format and fields returned, helping users verify CLI output while managing validator addresses. No dependencies required beyond a successful command execution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-mainnet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n|  KIND  |  NAME   |          CHAIN          |                    ADDRESS                    | BALANCE | NETWORK |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n| ledger | index 0 | P-Chain (Bech32 format) | P-avax1ucykh6ls8thqpuwhg3vp8vvu6spg5e8tp8a25j |      11 | Mainnet |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Dependencies with NPM\nDESCRIPTION: Initialize a new Node.js project and install required dependencies for OKX OS integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/okxos.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir avalanche-dashboard\ncd avalanche-dashboard\nnpm init -y\nnpm install crypto-js\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch createAccount.js getAssets.js getTx.js\n```\n\n----------------------------------------\n\nTITLE: API Health Check Request\nDESCRIPTION: cURL command to check the health status of the faucet server\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000/health\n```\n\n----------------------------------------\n\nTITLE: Process Listing for AvalancheGo\nDESCRIPTION: Command output showing running AvalancheGo processes with their details\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/upgrade.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nubuntu  6834  0.0  0.0   2828   676 pts/1    S+   19:54   0:00 grep avalanche\nubuntu  2630 26.1  9.4 2459236 753316 ?      Sl   Dec02 1220:52 /home/ubuntu/build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Displaying TokenChip with Only Symbol (TypeScript)\nDESCRIPTION: Shows only the token symbol in the TokenChip by setting showName to false. All other props (chain_id, address, symbol, name) are required. The showName parameter hides the full token name, outputting a chip with just the symbol and icon, suitable for constrained UIs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-chip.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n  showName={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initiating P-Chain Transfer using Avalanche CLI\nDESCRIPTION: This command starts the interactive process for transferring funds between P-Chain addresses using the Avalanche CLI. It will prompt the user for details like network, send/receive step, key source, addresses, and amount.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche key transfer\n```\n\n----------------------------------------\n\nTITLE: Importing Avalanche Postman Collection URL\nDESCRIPTION: The URL to import the Avalanche Postman collection JSON file. This collection contains all public API calls available for an AvalancheGo instance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-postman/add-postman-collection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://raw.githubusercontent.com/ava-labs/avalanche-postman-collection/master/Avalanche.postman_collection.json\n```\n\n----------------------------------------\n\nTITLE: Programmatic Smart Contract Verification Script using Hardhat\nDESCRIPTION: TypeScript script (verify.ts) for programmatically verifying a smart contract using Hardhat. It defines contract parameters and uses the 'verify:verify' task to perform the verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport console from \"console\"\nconst hre = require(\"hardhat\")\n\n// Define the NFT\nconst name = \"MockNFT\"\nconst symbol = \"Mock\"\nconst _metadataUri = \"ipfs://QmQ2RFEmZaMds8bRjZCTJxo4DusvcBdLTS6XuDbhp5BZjY\"\nconst _maxTokens = \"100\"\n\nasync function main() {\n  await hre.run(\"verify:verify\", {\n    address: \"0x3972c87769886C4f1Ff3a8b52bc57738E82192D5\",\n    constructorArguments: [name, symbol, _metadataUri, _maxTokens],\n  })\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Listing Subnets in Bash\nDESCRIPTION: Demonstrates how to list all Avalanche L1 IDs (SubnetID) in the network using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control list-subnets\n```\n\n----------------------------------------\n\nTITLE: Adding Avalanche-CLI to PATH in Bash\nDESCRIPTION: This command adds the ~/bin directory to the system PATH by appending an export command to the .bashrc file. This allows the avalanche binary to be called from anywhere in the system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/get-avalanche-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=~/bin:$PATH >> .bashrc\n```\n\n----------------------------------------\n\nTITLE: Gantt Signed Transaction Format Specification\nDESCRIPTION: Detailed specification of the binary format for signed transactions including codec_id, atomic_tx and credentials fields with byte sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n+---------------------+--------------+------------------------------------------------+\n| codec_id            : uint16       |                                        2 bytes |\n+---------------------+--------------+------------------------------------------------+\n| atomic_tx           : AtomicTx     |                          size(atomic_tx) bytes |\n+---------------------+--------------+------------------------------------------------+\n| credentials         : []Credential |                    4 + size(credentials) bytes |\n+---------------------+--------------+------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Gantt Chart Specification for Unsigned Increase L1 Validator Balance TX\nDESCRIPTION: A Gantt chart representation showing the byte structure of an unsigned increase L1 validator balance transaction. It details the fields, their types, and sizes in bytes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_63\n\nLANGUAGE: text\nCODE:\n```\n+----------------+------------------+----------------------------------+\n| base_tx        : BaseTx           |              size(base_tx) bytes |\n+----------------+------------------+----------------------------------+\n| validation_id  : [32]byte         |                         32 bytes |\n+----------------+------------------+----------------------------------+\n| balance        : uint64           |                          8 bytes |\n+----------------+------------------+----------------------------------+\n| 40 + size(base_tx) bytes                                            |\n+----------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Listing Avalanche Ledger Keys via CLI in Bash\nDESCRIPTION: This snippet demonstrates how to use the Avalanche command-line interface in Bash to list keys (accounts) stored on a Ledger device for mainnet. The command connects to the device, accesses specified indices (0-5), and outputs current account details. It requires the Avalanche CLI and a connected Ledger device with the Avalanche app open. No inputs other than the command arguments are needed, and the output is a tabular list of keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --mainnet --ledger 0,1,2,3,4,5\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Relayer\nDESCRIPTION: Command to start the AWM Relayer execution on a specific cluster. Returns confirmation message upon successful execution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer start --cluster <devnetName>\n```\n\n----------------------------------------\n\nTITLE: Creating ThirdWeb Contract via CLI\nDESCRIPTION: Command to initialize a new smart contract project using thirdweb's CLI tool.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/thirdweb.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb create contract\n```\n\n----------------------------------------\n\nTITLE: Pruning Progress Log Sample\nDESCRIPTION: Sample log output showing the progress of state snapshot iteration during offline pruning.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nINFO [02-09|00:20:15.625] Iterating state snapshot                 accounts=297,231 slots=6,669,708 elapsed=16.001s eta=1m29.03s\nINFO [02-09|00:20:23.626] Iterating state snapshot                 accounts=401,907 slots=10,698,094 elapsed=24.001s eta=1m32.522s\nINFO [02-09|00:20:31.626] Iterating state snapshot                 accounts=606,544 slots=13,891,948 elapsed=32.002s eta=1m10.927s\n```\n\n----------------------------------------\n\nTITLE: Fetching C-Chain Transaction Data with eth_getTransactionByHash\nDESCRIPTION: This snippet demonstrates how to fetch data about a C-Chain transaction using the eth_getTransactionByHash method in Postman.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-postman/making-api-calls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_getTransactionByHash\",\n  \"params\": [\n    \"0x20cb0c03dbbe39e934c7bb04979e3073cc2c93defa30feec41198fde8fabc9b8\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Blockchain Genesis Configuration - Bash\nDESCRIPTION: Command to display the genesis configuration of the newly created blockchain named \\'myblockchain\\'. Useful for developers to verify or modify genesis parameters prior to deployment. Requires that a blockchain configuration was previously created.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe myblockchain --genesis\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a Dynamic Array - Solidity\nDESCRIPTION: Shows the syntax to declare a dynamic array of arbitrary type, where the array size is not determined at compile time. Commonly used as a state variable. Upon deployment, array elements are empty, and methods such as push/pop can be used to modify contents.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\n<array-type>[] <array-name>;\n```\n\n----------------------------------------\n\nTITLE: Error Output for Non-Existent Blockchain Upgrade Generation\nDESCRIPTION: This shows the console output from the `avalanche blockchain upgrade generate` command when the specified Avalanche L1 ('testblockchain') does not exist in the Avalanche-CLI configuration. This indicates that the blockchain must be created before an upgrade file can be generated for it.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade generate testblockchain\nThe provided Avalanche L1 name \"testblockchain\" does not exist\n```\n\n----------------------------------------\n\nTITLE: Error Handling Patterns - React/TypeScript\nDESCRIPTION: Error handling implementation guidelines covering async operations and error boundary usage for different scenarios.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/toolbox/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- All async errors should be caught with try/catch blocks\n- Use the `showBoundary` function from `useErrorBoundary` to display errors that should block the whole page\n- For errors that shouldn't block the page, handle them locally with state management and UI feedback\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Receiver Key Source Selection (Ledger)\nDESCRIPTION: Shows the interactive prompt asking the user to choose the key source for signing the receiving transactions. User selects 'Use ledger' (Ledger B).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n? Which key source should be used to  for the receiver address?:\n    Use stored key\n  ▸ Use ledger\n```\n\n----------------------------------------\n\nTITLE: Configuring Avalanche Fuji C-Chain Network Parameters\nDESCRIPTION: Network configuration parameters required to connect to the Avalanche Fuji C-Chain testnet, including RPC endpoints, chain ID, and block explorer URL.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/networks/fuji-testnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **Network Name**: Avalanche Fuji C-Chain\n- **RPC URL**: https://api.avax-test.network/ext/bc/C/rpc\n- **WebSocket URL**: wss://api.avax-test.network/ext/bc/C/ws\n- **ChainID**: `43113`\n- **Symbol**: `AVAX`\n- **Explorer**: https://subnets-test.avax.network/c-chain\n```\n\n----------------------------------------\n\nTITLE: Selecting P-Chain Fee Payer for Validator Removal - Bash\nDESCRIPTION: Presents an interactive prompt for choosing a key on the P-Chain to pay transaction fees for the validator removal. Options include using a stored key or a connected ledger device. This step is required for proper authorization and transaction completion on the Avalanche P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/remove-validator-l1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? Which key should be used to pay for transaction fees on P-Chain?: \n  ▸ Use stored key\n    Use ledger\n```\n\n----------------------------------------\n\nTITLE: Configuring a Number Input in React (TSX)\nDESCRIPTION: Example of using the `Input` component with `type=\"number\"`. It includes a placeholder, binds the input value to the `amount` state variable, uses `handleAmountChange` for the `onChange` event, and aligns the text to the right using the `text-right` Tailwind CSS class.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Input \n  type=\"number\"\n  placeholder=\"Enter amount\"\n  value={amount}\n  onChange={handleAmountChange}\n  className=\"text-right\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Avalanche Network Status Command Flags\nDESCRIPTION: Available flags for the network status command, including help, config file path, log level configuration, and update check options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_86\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for status\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: NFT Transfer Operation Binary Format\nDESCRIPTION: Example of an NFT transfer operation with TypeID 13, showing the binary representation including address indices, groupID, payload, locktime, threshold and addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID         <- 0x0000000d\n    AddressIndices <- [\n        0x00000007,\n        0x00000003,\n    ]\n    GroupID        <- 0x00003039\n    Payload        <- 0x431100\n    Locktime       <- 0x000000000000d431\n    Threshold      <- 00000001\n    Addresses      <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Styling to an Input in React (TSX)\nDESCRIPTION: Demonstrates how to apply conditional styling for validation feedback on an `Input` component used for email entry (`type=\"email\"`). The border color changes based on the `isValidEmail` boolean state (`border-green-500` for valid, `border-red-500` for invalid) via the `className` prop. It uses `email` for the controlled value and `handleEmailChange` for updates.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/input.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<Input \n  type=\"email\"\n  placeholder=\"Enter email\"\n  value={email}\n  onChange={handleEmailChange}\n  className={isValidEmail ? 'border-green-500' : 'border-red-500'}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Endpoint Aliases in foundry.toml (TOML)\nDESCRIPTION: This TOML config snippet defines multiple RPC endpoints, mapping logical aliases (like local-c, myblockchain, fuji-c, and dispatch) to their actual network URLs. Foundry commands reference these aliases via the --rpc-url flag. The config file must be present at the project root, and each URL must be reachable from the environment where scripts and commands are run; developers can easily extend this section to add custom endpoints as needed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[rpc_endpoints]\\nlocal-c = \"http://localhost:9650/ext/bc/C/rpc\"\\nmyblockchain = \"http://localhost:9650/ext/bc/myblockchain/rpc\"\\nfuji-c = \"https://api.avax-test.network/ext/bc/C/rpc\"\\ndispatch = \"https://subnets.avax.network/dispatch/testnet/rpc\"\\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Node ID and POP\nDESCRIPTION: API call to verify the node's ID and Proof of Possession after restart.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeID\"\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Default Behavior Configuration for RewardManager\nDESCRIPTION: JSON configuration showing the default behavior setup where the precompile inherits the feeRecipients mechanism from genesis. This configuration only specifies adminAddresses without an initialRewardConfig.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/rewardmanager.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewardManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Avalanche Network\nDESCRIPTION: Command to resume a stopped Avalanche network\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\navalanche network start\n```\n\n----------------------------------------\n\nTITLE: Granting Native Minting Rights\nDESCRIPTION: Command to grant minting rights to NativeTokenRemote contract via Native Minter Precompile\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/04-use-any-native-as-native-token.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK 0x0200000000000000000000000000000000000001 \"setEnabled(address)\" $NATIVE_TOKEN_REMOTE_L1\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-20 Token to C-Chain\nDESCRIPTION: This command deploys an ERC-20 token named TOK to the C-Chain using the Avalanche CLI. It allocates 100000 TOK tokens to the EWOQ address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-token-bridge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche contract deploy erc20\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial TX Allow List in Genesis File (JSON)\nDESCRIPTION: JSON configuration for setting up an initial TX allow list without admin addresses. This enables specific addresses to submit transactions from the start.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"txAllowListConfig\": {\n    \"blockTimestamp\": 0,\n    \"enabledAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Hardhat Deployment and Verification\nDESCRIPTION: JSON configuration file (.env.json) containing the wallet seed phrase for Hardhat deployment and verification on Snowtrace. This file is used to securely store sensitive information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"MNEMONIC\": \"your-wallet-seed-phrase\",\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Grafana Dashboard JSON File\nDESCRIPTION: This command downloads the C-chain dashboard JSON file from the Avalanche monitoring GitHub repository.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n2021-11-05 14:57:47 URL:https://raw.githubusercontent.com/ava-labs/avalanche-monitoring/master/grafana/dashboards/c_chain.json [50282/50282] -> \"c_chain.json\" [1]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project (Bash)\nDESCRIPTION: This command uses npx to run the `create-next-app` package, scaffolding a new Next.js project in the current directory. It sets up the basic file structure and dependencies for a React application using the Next.js framework.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying ICTT Transfer Contracts\nDESCRIPTION: Commands to deploy ERC20TokenHome and NativeTokenRemote contracts for interchain token transfers\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/03-use-erc20-as-native-token.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK lib/icm-contracts/contracts/ictt/TokenHome/ERC20TokenHome.sol:ERC20TokenHome --constructor-args $TELEPORTER_REGISTRY_C_CHAIN $FUNDED_ADDRESS $ERC20_HOME_C_CHAIN 18 --broadcast\n```\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK lib/icm-contracts/contracts/ictt/TokenRemote/NativeTokenRemote.sol:NativeTokenRemote --constructor-args \"($TELEPORTER_REGISTRY_L1, $FUNDED_ADDRESS, $C_CHAIN_BLOCKCHAIN_ID_HEX, $ERC20_HOME_TRANSFERER_C_CHAIN, 18)\" \"EXMP.b\" 100000000000000000000 0 false 0 --broadcast\n```\n\n----------------------------------------\n\nTITLE: Terminating All Cluster Nodes with Avalanche-CLI in Bash\nDESCRIPTION: This command terminates all nodes within a specified Avalanche cluster managed by Avalanche-CLI. Replace `<clusterName>` with the actual name of the cluster. It deletes the associated cloud server instances (AWS/GCP), releases their static public IPs, and removes the local `staker.crt` and `staker.key` backup files from the `.avalanche-cli` directory. This command is currently experimental and irreversible, leading to data loss for the cluster nodes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/stop-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche node destroy <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Status Response in JSON\nDESCRIPTION: This JSON snippet shows the expected response from the node when it has finished bootstrapping. The 'isBootstrapped' field will be set to true, indicating that the node is fully synchronized with the network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/latitude.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"isBootstrapped\": true\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Local Avalanche L1 Configurations with Avalanche CLI (Bash)\nDESCRIPTION: This command lists all Avalanche L1 blockchain configurations created locally using the Avalanche CLI. The output displays a table with details such as the subnet name, chain name, chain ID, VM ID, VM type, VM version, and whether it was created from a repository. Requires Avalanche CLI to be installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/view-avalanche-l1s.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> avalanche blockchain list\n+--------------+--------------+----------+---------------------------------------------------+------------+------------+-----------+\n|    SUBNET    |    CHAIN     | CHAINID  |                       VMID                        |    TYPE    | VM VERSION | FROM REPO |\n+--------------+--------------+----------+---------------------------------------------------+------------+------------+-----------+\n| myblockchain | myblockchain |      111 | qDNV9vtxZYYNqm7TN1mYBuaaknLdefDbFK8bFmMLTJQJKaWjV | Subnet-EVM | v0.7.0     | false     |\n+--------------+--------------+----------+---------------------------------------------------+------------+------------+-----------+\n```\n\n----------------------------------------\n\nTITLE: Completing Validator Registration\nDESCRIPTION: Function to complete the validator registration process after receiving confirmation via a Warp message. It takes a message index as a parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction completeValidatorRegistration(\n    uint32 messageIndex\n) public\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Minter Permissions in Genesis\nDESCRIPTION: JSON configuration for setting up initial Native Minter permissions in the genesis block. This example sets an admin address that can mint native tokens and manage other addresses' permissions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/evm-precompiles/native-minter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"contractNativeMinterConfig\": {\n      \"blockTimestamp\": 0,\n      \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Validator Reward in Avalanche Network using LaTeX\nDESCRIPTION: This LaTeX formula calculates the reward for a responsive validator in the Avalanche network based on stake amount, staking period, and network parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/how-to-stake.mdx#2025-04-23_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nReward = \\left(MaximumSupply - Supply \\right) \\times \\frac{Stake}{Supply} \\times \\frac{Staking Period}{Minting Period} \\times EffectiveConsumptionRate\n```\n\n----------------------------------------\n\nTITLE: Checking AVAX Balance with ethers.js\nDESCRIPTION: Queries the AVAX balance of a C-Chain address using ethers.js library and the Fuji testnet RPC endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/fuji-workflow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst ethers = require(\"ethers\");\nconst network = \"https://api.avax-test.network/ext/bc/C/rpc\";\nconst provider = ethers.getDefaultProvider(network);\nconst address = \"0x2d1d87fF3Ea2ba6E0576bCA4310fC057972F2559\";\n\nconst main = async (): Promise<any> => {\n  provider.getBalance(address).then((balance) => {\n    const balanceInAvax = ethers.utils.formatEther(balance);\n    console.log(`balance: ${balanceInAvax} AVAX`);\n  });\n};\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Example: Domain Display with Address Fallback Output in TSX\nDESCRIPTION: Demonstrates the behavior of the `Domain` component when `showAddressIfNotAvailable` is set to true. The comments show the expected output: the resolved '.avax' domain name if found, or the abbreviated Ethereum address if no domain is associated.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/domain.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Domain \n  address=\"0x1234567890123456789012345678901234567890\"\n  showAddressIfNotAvailable={true}\n/>\n// Output: \"mydomain.avax\" (if resolved)\n// Output: \"0x1234...5678\" (if no domain found)\n```\n\n----------------------------------------\n\nTITLE: Starting AvalancheGo with Custom Chain Config Directory\nDESCRIPTION: Command to start AvalancheGo node with a custom chain configuration directory path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego --chain-config-dir=/home/ubuntu/chain-configs\n```\n\n----------------------------------------\n\nTITLE: Retrieving a webhook by ID from AvaCloud API\nDESCRIPTION: This curl command fetches a specific webhook by its ID from the AvaCloud API. The ID should be replaced with the actual webhook identifier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/webhooks/id \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Compilation Script\nDESCRIPTION: Command to execute the compile.sh shell script which handles the compilation of smart contracts\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/toolbox/contracts/icm-contracts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncompile.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Node on MacOS (Fuji Testnet)\nDESCRIPTION: Command to start an Avalanche node on MacOS for the Fuji Testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-<VERSION>/build/avalanchego --network-id=fuji\n```\n\n----------------------------------------\n\nTITLE: Navigating and Selecting Deployment Network - Avalanche CLI - Bash\nDESCRIPTION: Demonstrates using the Avalanche CLI to select the Fuji network and a private key for deployment. Assumes the user is deploying a blockchain with the CLI, with prompts for network and private key selection. Requires the Avalanche CLI installed and a testblockchain to be deployed on a fully bootstrapped local node connected to Fuji. Inputs are provided interactively, and the output confirms the selection and initiates deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n✔ Fuji\nDeploying [testblockchain] to Fuji\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Which private key should be used to issue the transaction?:\n    test\n  ▸ mytestkey\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to AddressInput in TSX\nDESCRIPTION: Shows how to customize the appearance of the `AddressInput` component. It utilizes the `icon` prop to add a visual element and the `className` prop to apply custom CSS classes for styling (e.g., background color, border radius).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/address-input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<AddressInput \n  placeholder=\"Enter address\"\n  icon={<Wallet />}\n  className=\"bg-gray-100 rounded-lg\"\n  onChange={handleAddress}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Transferable Output Example with Byte Representation\nDESCRIPTION: Complete example of a Transferable Output instance showing both the high-level structure and the corresponding byte representation. The example includes an AssetID and an Output field with a SECP256K1 Transfer Output.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[\n    AssetID <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Output  <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n]\n=\n[\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Preparing Project Directories - Bash Shell\nDESCRIPTION: This snippet demonstrates how to set up the Go workspace directory structure required for building EVM precompiles. It creates necessary nested directories under $GOPATH and changes the working directory, preparing the environment for repository cloning. Prerequisites include having Go installed and $GOPATH properly set; expected output is a set of valid directories for Go project development.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/background-requirements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH\\nmkdir -p src/github.com/ava-labs\\ncd src/github.com/ava-labs\n```\n\n----------------------------------------\n\nTITLE: Example Genesis JSON Configuration for StringStore\nDESCRIPTION: The genesis JSON configuration showing how to set the blockTimestamp for the StringStore precompiled contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/10-define-default-values-via-genesis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"stringStoreConfig\" : {\n    \"blockTimestamp\": 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Staking Manager Initialization Component in TypeScript/JSX\nDESCRIPTION: This snippet imports the necessary components and renders the Initialize component wrapped in a ToolboxMdxWrapper. It sets up the structure for initializing the Staking Manager in a React-based application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/03-init-staking-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\";\nimport Initialize from \"../../../../toolbox/src/toolbox/StakingManager/Initialize.tsx\";\n\n<ToolboxMdxWrapper>\n    <Initialize />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Stopping Avalanche Relayer\nDESCRIPTION: Command to stop the AWM Relayer execution on a specific cluster. Returns confirmation message upon successful execution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer stop --cluster <devnetName>\n```\n\n----------------------------------------\n\nTITLE: Proto EVM Output Specification in Coreth\nDESCRIPTION: Protocol buffer message definition for an EVMOutput used in Coreth transactions. Specifies fields for address (20 bytes), amount (8 bytes), and assetID (32 bytes).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nmessage  {\n    bytes address = 1; // 20 bytes\n    uint64 amount = 2; // 08 bytes\n    bytes assetID = 3; // 32 bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NodeID via API Request in Bash\nDESCRIPTION: This curl command sends a POST request to the Avalanche node's API to retrieve the NodeID. The NodeID is essential for validator operations and must be noted for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeID\"\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Executing SSH Command on a Single Avalanche Node\nDESCRIPTION: Shows how to execute an SSH command on a single node using node ID, IP address, or instance ID with the 'avalanche node ssh' command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/execute-ssh-commands.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh i-0225fc39626b1edd3 <command>\n[or]\navalanche node ssh NodeID-9wdKQ3KJU3GqvgFTc4CUYvmefEFe8t6ka <command>\n[or]\navalanche node ssh 54.159.59.123 <command>\n```\n\n----------------------------------------\n\nTITLE: Starting a Network with avalanche-network-runner (Bash)\nDESCRIPTION: Shows how to start a new local Avalanche network using 'avalanche-network-runner control start'. The CLI example specifies the number of nodes and blockchain specifications. The curl example demonstrates the equivalent API call with JSON payload.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control start [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control start \\\n  --log-level debug \\\n  --endpoint=\"localhost:8080\" \\\n  --number-of-nodes=5 \\\n  --blockchain-specs '[{\"vm_name\": \"subnetevm\", \"genesis\": \"./path/to/config.json\"}]'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/start' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"numNodes\": 5,\n  \"blockchainSpecs\": [\n    {\n      \"vm_name\": \"subnetevm\",\n      \"genesis\": \"/path/to/config.json\"\n    }\n  ]\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Default Network Programmatically - Avalanche Network Runner - Go\nDESCRIPTION: This Go snippet demonstrates initializing a default Avalanche network programmatically using the 'local.NewDefaultNetwork' function. It requires a logger instance and the binary path string to the AvalancheGo executable. The function returns a network object and an error; the network encapsulates running nodes managed through Go APIs. Dependencies: Avalanche Network Runner Go library, proper logger (logging.Logger), and a valid AvalancheGo binary path. Used for programmatic testing or orchestration of local Avalanche clusters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nnetwork, err := local.NewDefaultNetwork(log, binaryPath)\n```\n\n----------------------------------------\n\nTITLE: Adding a Validator to an Avalanche L1\nDESCRIPTION: Command to add a validator to an existing Avalanche L1 blockchain named 'testblockchain'. This initiates an interactive process requiring the validator's NodeID, BLS keys, and AVAX allocation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-mainnet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain addValidator testblockchain\n```\n\n----------------------------------------\n\nTITLE: Creating NFT Metadata Structure in JSON\nDESCRIPTION: Basic metadata template following NFT marketplace standards with empty fields for name, tokenId, image URL, description and attributes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/deploy-nft-collection/prep-nft-files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"\",\n  \"tokenId\": 0,\n  \"image\": \"\",\n  \"description\": \"\",\n  \"attributes\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Avalanche Transactions\nDESCRIPTION: This command commits a transaction by submitting it to the P-Chain. It requires the path to a transaction file signed by all signatories.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_167\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction commit [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying a List of Token Icons with Chains in React (TSX)\nDESCRIPTION: This example embeds multiple TokenIconWithChain components inside a flexbox container in React (TSX), enabling a horizontal list layout. It uses different chain_id and address values to show various tokens. Depends on Tailwind CSS for layout (className 'flex gap-4') and @avalabs/builderkit for the component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon-with-chain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex gap-4\">\n  <TokenIconWithChain \n    chain_id={43114}\n    address=\"0x1234567890123456789012345678901234567890\"\n  />\n  <TokenIconWithChain \n    chain_id={43113}\n    address=\"0x5678901234567890123456789012345678901234\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic TokenIcon Rendering Example in TSX\nDESCRIPTION: Provides a minimal example of rendering the TokenIcon component with only the required 'chain_id' and 'address' props. This assumes default styling is sufficient.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenIcon \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Backing Up Node Credentials\nDESCRIPTION: Command to securely copy node's staking credentials to local machine\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nscp -r ubuntu@PUBLICIP:/home/ubuntu/.avalanchego/staking ~/aws_avalanche_backup\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Message Flow Steps Structure\nDESCRIPTION: A structured markdown representation of the cross-chain message flow process using Fumadocs UI components, detailing six key steps from message initialization to processing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/09-avalanche-warp-messaging/05-dataflow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Steps>\n<Step>\n### Message Initialization\nCross-Chain dApp initiating the message calls the Interchain Messaging Contract on the source Avalanche L1\n</Step>\n\n<Step>\n### Warp Precompile\nThe Interchain Messaging contracts interacts with the AWM precompile of the EVM\n</Step>\n\n<Step>\n### Message Relaying\nAn AWM Relayer relays the message to the destination Chain. It periodically checks the source Avalanche L1 for outgoing messages and delivers these by calling the Interchain Messaging contract on the destination Avalanche L1.\n</Step>\n\n<Step>\n### Signature Verification\nThe Interchain Messaging contract on the destination chain interacts with AWM to verify the signature of the message and whether it has been signed by a sufficiently large stake share of the source Avalanche L1's validator set.\n</Step>\n\n<Step>\n### Destination Contract Call\nThe Interchain Messaging contract then calls the destination dApp contract\n</Step>\n\n<Step>\n### Message Processing\nThe dApp decodes the message payload and processes it accordingly.\n</Step>\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Setting Blockchain ID Environment Variable\nDESCRIPTION: Exports the Blockchain ID in hexadecimal format as an environment variable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/02-deploy-additional-blockchain.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SOURCE_BLOCKCHAIN2_ID_HEX=0xcdd5b2b99ae462c32a8e4ea47e94f2c7804519353558fd4127cf7ae11d8a6e52\n```\n\n----------------------------------------\n\nTITLE: L1 Validator Weight Warp Message Identifier\nDESCRIPTION: This identifier represents a Warp message signed by the P-Chain and sent to the `PoSValidatorManager` on the C-Chain. It acknowledges a change in the validator's weight on the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_11\n\nLANGUAGE: Identifier\nCODE:\n```\nL1ValidatorWeightMessage\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Endpoint for Custom EVM Instances\nDESCRIPTION: Endpoint format for interacting with other instances of the Ethereum Virtual Machine via JSON-RPC on Avalanche. Requires substituting the actual blockchain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n/ext/bc/blockchainID/rpc\n```\n\n----------------------------------------\n\nTITLE: MoonPay React SDK Integration\nDESCRIPTION: React SDK implementation with provider setup and widget component usage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/moonpay.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MoonPayProvider, useMoonPaySdk } from '@moonpay/moonpay-react-sdk';\n\nfunction BuyButton() {\n  const { showWidget } = useMoonPaySdk();\n  \n  const handleClick = () => {\n    showWidget({\n      flow: 'buy',\n      params: {\n        apiKey: 'YOUR_API_KEY',\n        currencyCode: 'avax',\n        walletAddress: userWalletAddress\n      }\n    });\n  };\n  \n  return <button onClick={handleClick}>Buy AVAX</button>;\n}\n\nfunction App() {\n  return (\n    <MoonPayProvider>\n      <BuyButton />\n    </MoonPayProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Cross-Chain Calculation Result\nDESCRIPTION: Query the receiver contract to verify the result of the cross-chain addition calculation by calling the result_num function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/05-call-simple-calculator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain $RECEIVER_ADDRESS \"result_num()(uint)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n5\n```\n\n----------------------------------------\n\nTITLE: Importing Gallery Component in JavaScript/JSX\nDESCRIPTION: This JavaScript code imports the `Gallery` component from the project's component library (`@/components/content-design/gallery`). This component is used elsewhere in the file to render image galleries, likely for illustrating user interface steps. It relies on the project's module system (with `@` alias) and the existence of the specified component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/import-ewoq-account.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gallery from '@/components/content-design/gallery';\n```\n\n----------------------------------------\n\nTITLE: Saving Receiver Contract Address\nDESCRIPTION: Exports the deployed receiver contract address as an environment variable for later use in the process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport RECEIVER_ADDRESS=0xe336d36FacA76840407e6836d26119E1EcE0A2b4\n```\n\n----------------------------------------\n\nTITLE: Configuring Avalanche L1 Blockchain with AvalancheGo Settings\nDESCRIPTION: This snippet shows the command-line interaction for configuring the Avalanche L1 blockchain with the AvalancheGo settings using Avalanche-CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain configure blockchainName\n```\n\n----------------------------------------\n\nTITLE: State Sync Configuration Example\nDESCRIPTION: Example JSON configuration for state sync peer IDs in C-Chain config file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/c-chain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"--state-sync-ids=\\\"NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg,NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Subnet Stats with Avalanche CLI\nDESCRIPTION: Command to print validator statistics for a given Blockchain. It provides options to specify the network and other configuration parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_153\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet stats [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Initial Account Balances via Yarn Script (Bash)\nDESCRIPTION: Executes the `balances` yarn script (which runs `npx hardhat balances`) targeting the local network. This command checks and displays the AVAX balance for each configured account after initial funding. The output shows the balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn balances --network local\n\n# output\nyarn run v1.22.4\nnpx hardhat balances --network local\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC has balance 50000001000000000000000000\n0x9632a79656af553F58738B0FB750320158495942 has balance 1000000000000000000\n0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430 has balance 1000000000000000000\n0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4 has balance 1000000000000000000\n0x0B891dB1901D4875056896f28B6665083935C7A8 has balance 1000000000000000000\n0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2 has balance 1000000000000000000\n0x78A23300E04FB5d5D2820E23cc679738982e1fd5 has balance 1000000000000000000\n0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293 has balance 1000000000000000000\n0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB has balance 1000000000000000000\n0x0Fa8EA536Be85F32724D57A37758761B86416123 has balance 1000000000000000000\n✨  Done in 0.72s.\n```\n\n----------------------------------------\n\nTITLE: Importing Private Key API Call Example in Shell\nDESCRIPTION: This curl command shows how to make an API call to import a private key to the C-Chain. It includes the username, password, and the private key to be imported.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avax.importKey\",\n    \"params\" :{\n        \"username\" :\"myUsername\",\n        \"password\":\"myPassword\",\n        \"privateKey\":\"PrivateKey-2o2uPgTSf3aR5nW6yLHjBEAiatAFKEhApvYzsjvAJKRXVWCYkE\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/avax\n```\n\n----------------------------------------\n\nTITLE: Backing up AvalancheGo Node Staking Files\nDESCRIPTION: Commands to backup the staker certificate and key files from the default installation directory to the home directory\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd\ncp ~/.avalanchego/staking/staker.crt .\ncp ~/.avalanchego/staking/staker.key .\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Node Command Suite in Bash\nDESCRIPTION: Basic usage of the avalanche node command with its flags. This is the main command that provides tools for creating and maintaining validators on Avalanche Network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_89\n\nLANGUAGE: bash\nCODE:\n```\navalanche node [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Avalanche L1 Deployment Results Table\nDESCRIPTION: Console output displaying the results of a successful Avalanche L1 deployment. The table contains important identifiers and access information including the Subnet ID, VM ID, Blockchain ID, RPC URL, and transaction ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n+--------------------+-------------------------------------------------------------------------------------+\n| DEPLOYMENT RESULTS |                                                                                     |\n+--------------------+-------------------------------------------------------------------------------------+\n| Chain Name         | testblockchain                                                                          |\n+--------------------+-------------------------------------------------------------------------------------+\n| Subnet ID          | 2qUKjvPx68Fgc1NMi8w4mtaBt5hStgBzPhsQrS1m7vSub2q9ew                                  |\n+--------------------+-------------------------------------------------------------------------------------+\n| VM ID              | rW1esjm6gy4BtGvxKMpHB2M28MJGFNsqHRY9AmnchdcgeB3ii                                   |\n+--------------------+-------------------------------------------------------------------------------------+\n| Blockchain ID      | 2fx9EF61C964cWBu55vcz9b7gH9LFBkPwoj49JTSHA6Soqqzoj                                  |\n+--------------------+-------------------------------------------------------------------------------------+\n| RPC URL            | http://127.0.0.1:9650/ext/bc/2fx9EF61C964cWBu55vcz9b7gH9LFBkPwoj49JTSHA6Soqqzoj/rpc |\n+--------------------+-------------------------------------------------------------------------------------+\n| P-Chain TXID       | 2fx9EF61C964cWBu55vcz9b7gH9LFBkPwoj49JTSHA6Soqqzoj                                  |\n+--------------------+-------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Global Rate Limiter Configuration\nDESCRIPTION: JSON configuration for global rate limiting settings including proxy handling and request limits\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"GLOBAL_RL\": {\n    \"ID\": \"GLOBAL\",\n    \"RATELIMIT\": {\n        \"REVERSE_PROXIES\": 4,\n        \"MAX_LIMIT\": 40,\n        \"WINDOW_SIZE\": 1,\n        \"PATH\": \"/\",\n        \"SKIP_FAILED_REQUESTS\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Avalanche L1 Configuration - Avalanche CLI - Bash\nDESCRIPTION: This snippet demonstrates how to delete a previously created Avalanche L1 configuration using the Avalanche CLI. Usage requires the user to specify the <blockchainName> parameter, representing the name of the L1 to remove. Only applicable for configurations that have not been deployed to immutable environments; no additional dependencies aside from a working Avalanche CLI installation and proper permissions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/delete-avalanche-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain delete <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Custom Styled TokenChip Chip Example (TypeScript)\nDESCRIPTION: Shows how to pass a custom className to TokenChip for additional styling using Tailwind CSS classes. Add custom visual tweaks such as background color, border radius, and padding, with the className parameter. Output is a visually customized token chip; depends on Tailwind CSS setup in the hosting project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-chip.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n  className=\"bg-gray-100 rounded-lg p-2\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting a New Avalanche Network via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to start a new network with 5 nodes using the specified AvalancheGo executable path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control start \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\" \\\n--number-of-nodes=5 \\\n--avalanchego-path ${AVALANCHEGO_EXEC_PATH}\n```\n\n----------------------------------------\n\nTITLE: Specifying Proof of Stake Validator Parameters via CLI Flags - Bash\nDESCRIPTION: These CLI flags are used to supply Proof of Stake-specific configuration during validator registration. The flags allow direct input of delegation fee (in basis points), staking amount, and staking duration. Users can also provide these values interactively if not included as flags. Requires a POS-enabled Avalanche network, and all flags expect correct types (uint16, uint, duration string).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--delegation-fee uint16                delegation fee (in bips)\n--stake-amount uint                    amount of native tokens to stake\n--staking-period duration              how long this validator will be staking\n```\n\n----------------------------------------\n\nTITLE: SHA256 Hash Output Example\nDESCRIPTION: The result of calling the SHA256 precompile with the input string \"test\". This is the bytes32 hash representation of the string.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/06-precompiles/03-interact-wtih-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n0xa770b926e13a31fb823282e9473fd1da9e85afe23690336770c490986ef1b1fc\n```\n\n----------------------------------------\n\nTITLE: Rendering AddValidator Component in React for Avalanche L1\nDESCRIPTION: This code snippet demonstrates how to render the AddValidator component within a ToolboxMdxWrapper. This component likely provides a user interface for adding a validator to an Avalanche L1 blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/04-validator-management/01-add-validator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <AddValidator />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Importing Multi-Signature Component in MDX\nDESCRIPTION: Imports a reusable component for multi-signature schemes documentation and includes a quiz component with ID 310.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/08-securing-cross-chain-communication/04-multi-signature-schemes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport MultiSignatureSchemes from \"@/content/common/cryptography/multi-signature-schemes.mdx\"\n\n<MultiSignatureSchemes />\n\n<Quiz quizId=\"310\"/>\n```\n\n----------------------------------------\n\nTITLE: Publishing Subnet Configurations in Avalanche CLI\nDESCRIPTION: Command for publishing blockchain VM configurations to a repository. Supports both automatic and manual file management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_150\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet publish [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining AppResponse Message Structure in Protobuf\nDESCRIPTION: Defines the structure of an AppResponse message, which is a VM-defined response sent in response to AppRequest. It includes chain_id, request_id, and app_bytes fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AppResponse {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  bytes app_bytes = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a New Avalanche Network via HTTP\nDESCRIPTION: This curl command starts a new Avalanche network with 5 nodes using the specified AvalancheGo executable path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/start -d '{\"execPath\":\"'${AVALANCHEGO_EXEC_PATH}'\",\"numNodes\":5}'\n```\n\n----------------------------------------\n\nTITLE: Checking Node Bootstrap Status with cURL in Bash\nDESCRIPTION: This code snippet demonstrates how to check if an Avalanche node has finished bootstrapping using a cURL request to the node's API. It uses the 'info.isBootstrapped' method to query the status of the X-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/latitude.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"X\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Blockchain List Command (Bash)\nDESCRIPTION: Shows the usage syntax for the `avalanche blockchain list` command. This command displays the names and basic information of all locally created/imported blockchain configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain list [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Validator Management Type - Text\nDESCRIPTION: Displays an interactive choice for the user to select the validator management consensus (Proof Of Authority or Proof Of Stake). User should select \\'Proof Of Authority\\' for the test environment as recommended. This prompt occurs in the blockchain creation wizard process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n? Which validator management type would you like to use in your blockchain?: \n  ▸ Proof Of Authority\n    Proof Of Stake\n    Explain the difference\n\n```\n\n----------------------------------------\n\nTITLE: AmountInput with Custom Currency Symbol and Text Alignment in React (TypeScript)\nDESCRIPTION: This example customizes AmountInput by attaching a currency symbol ('$') as the icon and setting right-aligned text via the className prop. The component uses controlled updates (handleAmount) and applies additional styling with Tailwind CSS classes. Dependencies include React, and all standard AmountInput props are supported. Expects numeric text input and outputs formatted strings. Demonstrates how to visually augment the input field and enforce layout preferences.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/amount-input.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AmountInput \n  type=\"text\"\n  placeholder=\"0.00\"\n  icon={<span className=\"text-gray-400\">$</span>}\n  onChange={handleAmount}\n  className=\"text-right\"\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MorpheusVM Blockchain Settings in JSON\nDESCRIPTION: JSON configuration file for MorpheusVM blockchain specifying parameters like chunk build frequency, mempool size, execution cores, and other performance settings. This config is generated by a script from the HyperSDK repository.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"chunkBuildFrequency\": 250,\n  \"targetChunkBuildDuration\": 250,\n  \"blockBuildFrequency\": 100,\n  \"mempoolSize\": 2147483648,\n  \"mempoolSponsorSize\": 10000000,\n  \"authExecutionCores\": 16,\n  \"precheckCores\": 16,\n  \"actionExecutionCores\": 8,\n  \"missingChunkFetchers\": 48,\n  \"verifyAuth\": true,\n  \"authRPCCores\": 48,\n  \"authRPCBacklog\": 10000000,\n  \"authGossipCores\": 16,\n  \"authGossipBacklog\": 10000000,\n  \"chunkStorageCores\": 16,\n  \"chunkStorageBacklog\": 10000000,\n  \"streamingBacklogSize\": 10000000,\n  \"continuousProfilerDir\":\"/home/ubuntu/morpheusvm-profiles\",\n  \"logLevel\": \"INFO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Avalanche L1 Configurations with Avalanche CLI (Bash)\nDESCRIPTION: This command uses the `--deployed` flag with `avalanche blockchain list` to show the deployment status of Avalanche L1 blockchains across different networks. The output table indicates whether each configured blockchain is deployed on the Local Network, Fuji Testnet, or Mainnet. Requires Avalanche CLI to be installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/view-avalanche-l1s.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> avalanche blockchain list --deployed\n+--------------+--------------+---------------------------------------------------+---------------+----------------+---------+\n|    SUBNET    |    CHAIN     |                       VM ID                       | LOCAL NETWORK | FUJI (TESTNET) | MAINNET |\n+--------------+--------------+---------------------------------------------------+---------------+----------------+---------+\n| myblockchain | myblockchain | qDNV9vtxZYYNqm7TN1mYBuaaknLdefDbFK8bFmMLTJQJKaWjV | Yes           | No             | No      |\n+--------------+--------------+---------------------------------------------------+---------------+----------------+---------+\n```\n\n----------------------------------------\n\nTITLE: Adding a Node Using curl HTTP API - Shell/curl\nDESCRIPTION: This snippet demonstrates how to add a new node to the Avalanche Network Runner cluster via an HTTP POST request using curl. It sends a JSON payload containing a node name and the execution path for the AvalancheGo binary. Requires a running network runner HTTP server at the specified endpoint (default: localhost:8081), and curl must be installed. Input parameters: node name (here, 'node99') and execPath (path to AvalancheGo binary). Returns an API response indicating success or failure. Ensure your network runner instance is configured to allow incoming requests before using this endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/addnode -d '{\"name\":\"node99\",\"execPath\":\"'${AVALANCHEGO_EXEC_PATH}'\"}'\n```\n\n----------------------------------------\n\nTITLE: Customizing ChainIcon Size (TypeScript TSX)\nDESCRIPTION: Shows how to alter the rendered icon's width and height through the className prop. Useful for adjusting visual prominence of the logo in a UI. Assumes corresponding chain logo image is available in the correct asset directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-icon.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainIcon \n  chain_id={43114}\n  className=\"w-12 h-12\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Component in Next.js/Markdown - JavaScript\nDESCRIPTION: This code snippet imports the \"Networks\" React/MDX component from a shared content directory. The intention is to embed the component (which likely renders network information or interactive diagrams) within the Markdown document. This approach requires that the build system supports MDX, and the component path is accessible in the project structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/06-networks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Networks from \"@/content/common/avalanche-starter-kit/networks.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Unsigned Export TX Structure Specification in Avalanche X-Chain\nDESCRIPTION: Gantt and Protocol Buffer specifications for the Unsigned Export TX format, which includes BaseTx, DestinationChain, and an array of Transferable Outputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_41\n\nLANGUAGE: text\nCODE:\n```\n+-------------------+---------------+--------------------------------------+\n| base_tx           : BaseTx        |                  size(base_tx) bytes |\n+-------------------+---------------+--------------------------------------+\n| destination_chain : [32]byte      |                             32 bytes |\n+-------------------+---------------+--------------------------------------+\n| outs              : []TransferOut |                 4 + size(outs) bytes |\n+-------------------+---------------+--------------------------------------+\n                          | 36 + size(outs) + size(base_tx) bytes |\n                          +---------------------------------------+\n```\n\nLANGUAGE: text\nCODE:\n```\nmessage ExportTx {\n    BaseTx base_tx = 1;            // size(base_tx)\n    bytes destination_chain = 2;   // 32 bytes\n    repeated TransferOut outs = 3; // 4 bytes + size(outs)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ThirdWeb Client and Accepted Wallets - React/TypeScript\nDESCRIPTION: This code initializes the ThirdWeb SDK client using a client ID sourced from the .env file and defines an array of wallet providers (in-app, core app, WalletConnect) with specific authentication methods. It is a foundational setup required to connect user wallets and authorize transactions. Inputs include the client ID environment variable and wallet configuration, and outputs are the client instance and wallets array used throughout the app.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const client = createThirdwebClient({ clientId: import.meta.env.VITE_THIRDWEB_CLIENT_ID });\\n\\nconst wallets = [\\n  inAppWallet({\\n    auth: {\\n      options: [\\n        \\\"email\\\",\\n        \\\"phone\\\",\\n      ],\\n    },\\n  }),\\n  createWallet(\\\"app.core\\\"),\\n  createWallet(\\\"walletConnect\\\")\\n];\n```\n\n----------------------------------------\n\nTITLE: Gantt Specification for Unsigned Create Chain Transaction in Avalanche\nDESCRIPTION: A schematic representation of the structure for an unsigned Create Chain transaction in Avalanche, showing component fields, their types, and byte sizes. This specification includes BaseTx, SubnetID, ChainName, VMID, FxIDs, GenesisData, and SubnetAuth.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_41\n\nLANGUAGE: text\nCODE:\n```\n+--------------+-------------+------------------------------------------+\n| base_tx      : BaseTx      |                      size(base_tx) bytes |\n+--------------+-------------+------------------------------------------+\n| subnet_id    : SubnetID    |                                 32 bytes |\n+--------------+-------------+------------------------------------------+\n| chain_name   : ChainName   |                2 + len(chain_name) bytes |\n+--------------+-------------+------------------------------------------+\n| vm_id        : VMID        |                                 32 bytes |\n+--------------+-------------+------------------------------------------+\n| fx_ids       : FxIDs       |                   4 + size(fx_ids) bytes |\n+--------------+-------------+------------------------------------------+\n| genesis_data : GenesisData |             4 + size(genesis_data) bytes |\n+--------------+-------------+------------------------------------------+\n| subnet_auth  : SubnetAuth  |                  size(subnet_auth) bytes |\n+--------------+-------------+------------------------------------------+\n               | 74 + size(base_tx) + size(chain_name) + size(fx_ids) + |\n               |           size(genesis_data) + size(subnet_auth) bytes |\n+--------------+--------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Node Configuration with Custom TLS and Binary - Avalanche Network Runner - Go\nDESCRIPTION: This Go code creates a nodeConfig struct with custom staking certificate and key (generated using staking.NewCertAndKeyBytes), node name, and binary path. It's used when adding a highly customized node, for example, with bespoke binaries or keys. Dependencies: key/cert generation utilities, Avalanche Network Runner Go library, and relevant types node.Config and local.NodeConfig.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n  stakingCert, stakingKey, err := staking.NewCertAndKeyBytes()\n  if err != nil {\n   return err\n  }\n  nodeConfig := node.Config{\n    Name: \"New Node\",\n    ImplSpecificConfig: local.NodeConfig{\n      BinaryPath: \"/tmp/my-avalanchego/build\",\n    },\n    StakingKey:  stakingKey,\n    StakingCert: stakingCert,\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Dashboards\nDESCRIPTION: Command to execute step 4 of the installer script which installs the AvalancheGo Grafana dashboards.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh --4\n```\n\n----------------------------------------\n\nTITLE: Replacing Database After Direct Copy\nDESCRIPTION: Commands to remove the old database and move the copied database into place.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/.avalanchego/db\nmv db ~/.avalanchego/db\n```\n\n----------------------------------------\n\nTITLE: Creating UTXO with NFT Mint Output in Avalanche\nDESCRIPTION: Binary structure breakdown of a UTXO with an NFT Mint Output, detailing the CodecID, TxID, UTXOIndex, AssetID, and the NFT mint output section. This example demonstrates the format used for NFT creation transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_51\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID   <- 0x0000\n    TxID      <- 0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7\n    Output    <- 0000000a00000000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0x03, 0xc6, 0x86, 0xef, 0xe8, 0xd8, 0x0c, 0x51,\n    0x9f, 0x35, 0x69, 0x29, 0xf6, 0xda, 0x94, 0x5f,\n    0x7f, 0xf9, 0x03, 0x78, 0xf0, 0x04, 0x4b, 0xb0,\n    0xe1, 0xa5, 0xd6, 0xc1, 0xad, 0x06, 0xba, 0xe7,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x03, 0xc6, 0x86, 0xef, 0xe8, 0xd8, 0x0c, 0x51,\n    0x9f, 0x35, 0x69, 0x29, 0xf6, 0xda, 0x94, 0x5f,\n    0x7f, 0xf9, 0x03, 0x78, 0xf0, 0x04, 0x4b, 0xb0,\n    0xe1, 0xa5, 0xd6, 0xc1, 0xad, 0x06, 0xba, 0xe7,\n    // nft mint output:\n    0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,\n    0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,\n    0x61, 0xe1, 0xb2, 0x9c, 0x62, 0x76, 0xaa, 0x2a,\n]\n```\n\n----------------------------------------\n\nTITLE: Submitting Uptime Proof in Solidity (PoS only)\nDESCRIPTION: Explains how to submit an uptime proof by calling the submitUptimeProof function. This function can be called by anyone to update the validator's uptime information for reward calculations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nPoSValidatorManager.submitUptimeProof()\n```\n\n----------------------------------------\n\nTITLE: Selecting Sender Key in Avalanche CLI (zsh)\nDESCRIPTION: Displays the interactive prompts from the `avalanche key transfer` command for selecting the source key for the transfer. The user first chooses between using a key stored within the Avalanche CLI or a Ledger hardware wallet, and then selects the specific key (e.g., DemoKey, MyKey) if using a stored one.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\n? Which key should be used as the sender?:\n  ▸ Use stored key\n    Use ledger\n? Which stored key should be used as the sender address?:\n  ▸ DemoKey\n    MyKey\n    ewoq\n```\n\n----------------------------------------\n\nTITLE: Keccak256 String Processing Example\nDESCRIPTION: Example demonstrating how keccak256 strings are processed by the C-Chain Explorer, including those in comments which can affect constructor argument verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/snowtrace.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n/// keccak256(\"1\");\nkeccak256(\"2\");\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Exit via Contract Call\nDESCRIPTION: This function call initiates the process for a validator to exit (stop validating). Once called, the `PoSValidatorManager` assumes the validator is deactivated on the P-Chain, preventing further delegator additions or removals from being initiated.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_13\n\nLANGUAGE: Identifier\nCODE:\n```\ninitializeEndValidation\n```\n\n----------------------------------------\n\nTITLE: AvalancheGo Installation Examples\nDESCRIPTION: Various examples of installation commands with different configuration options for Fuji testnet, archival nodes, and state sync.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --fuji --ip static --index\n```\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --archival --ip dynamic --db-dir /home/node/db\n```\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --state-sync on --ip dynamic --rpc local\n```\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --reinstall --ip 1.2.3.4 --version v1.7.10 --rpc local\n```\n\n----------------------------------------\n\nTITLE: Token Transfer and Collateralization Commands\nDESCRIPTION: Commands for approving tokens, adding collateral, and performing cross-chain token transfers\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/03-use-erc20-as-native-token.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_C_CHAIN \"approve(address, uint256)\" $ERC20_HOME_TRANSFERER_C_CHAIN 2000000000000000000000\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_TRANSFERER_C_CHAIN \"addCollateral(bytes32, address, uint256)\" $L1_BLOCKCHAIN_ID_HEX $NATIVE_TOKEN_REMOTE_L1 100000000000000000000\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_TRANSFERER_C_CHAIN \"send((bytes32, address, address, address, uint256, uint256, uint256, address), uint256)\" \"(${L1_BLOCKCHAIN_ID_HEX}, ${NATIVE_TOKEN_REMOTE_L1}, ${FUNDED_ADDRESS}, ${ERC20_HOME_C_CHAIN}, 0, 0, 250000, 0x0000000000000000000000000000000000000000)\" 1000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Cloning AvalancheJS Repository\nDESCRIPTION: Git command to clone the AvalancheJS repository for building from source.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanchejs.git\n```\n\n----------------------------------------\n\nTITLE: ICM Send Message Command Usage\nDESCRIPTION: Command to send and track ICM messages between two subnets with options for specifying source and destination endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\navalanche icm sendMsg [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 Subnet with Teleporter Contracts - Bash\nDESCRIPTION: This script uses the Avalanche CLI to deploy a new Avalanche L1 subnet (chain2) to an existing devnet cluster, automatically handling validator setup and deploying Teleporter contracts if they haven\\'t been deployed already. It configures and restarts the AWM Relayer Service, sets up tracking and messaging infrastructure, and finalizes the subnet deployment. Dependencies include a running Avalanche CLI, a configured devnet, and correct node permissions. Input parameters are <devnetName> (the cluster name) and <chain2> (the new subnet), and outputs include network updates and contract addresses, with constraints tied to correct network state and configuration paths.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz <devnetName> <chain2> --default-validator-params \n\nAdding subnet into existing devnet <devnetName>...\n...\n\nDeploying [chain2] to Cluster <devnetName>\n...\n\nStopping AWM Relayer Service\n\nSetting the nodes as subnet trackers\n...\n\nSetting up teleporter on subnet\n\nTeleporter Messenger successfully deployed to chain2 (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nTeleporter Registry successfully deployed to chain2 (0xb623C4495220C603D0A939D32478F55891a61750)\nTeleporter Messenger has already been deployed to c-chain\n\nStarting AWM Relayer Service\n\nsetting AWM Relayer on host i-0f1815c016b555fcc to relay subnet chain2\nupdating configuration file ~/.avalanche-cli/nodes/i-0f1815c016b555fcc/services/awm-relayer/awm-relayer-config.json\n\nDevnet <devnetName> is now validating subnet chain2\n\nSubnet <chain2> RPC URL: http://67.202.23.231:9650/ext/bc/7gKt6evRnkA2uVHRfmk9WrH3dYZH9gEVVxDAknwtjvtaV3XuQ/rpc\n\n✓ Cluster information YAML file can be found at ~/.avalanche-cli/nodes/inventories/<devnetName>/clusterInfo.yaml at local host\n```\n\n----------------------------------------\n\nTITLE: Importing Etna Upgrade Motivation Component in MDX\nDESCRIPTION: MDX import statement to include the Etna upgrade motivation content from a common directory structure for multi-chain architecture documentation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avalanche-fundamentals/03-multi-chain-architecture-intro/03a-etna-upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport EtnaUpgradeMotivation from '@/content/common/multi-chain-architecture/etna-upgrade-motivation.mdx';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Avalanche Subnet VMID\nDESCRIPTION: This command prints the virtual machine ID (VMID) for a given Blockchain. It includes options for specifying a config file and log level.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_162\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet vmid [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Validator Manager Initialization in React\nDESCRIPTION: This code imports necessary components for rendering the Validator Manager initialization tool. It includes a wrapper component and the main Initialize component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/03-initialize-poa.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport Initialize from \"../../../../toolbox/src/toolbox/ValidatorManager/Initialize.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Issuing Transaction API Call Example in Shell\nDESCRIPTION: This curl command demonstrates how to make an API call to issue a transaction on the C-Chain. It includes the transaction data in hex format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avax.issueTx\",\n    \"params\" :{\n        \"tx\":\"0x00000009de31b4d8b22991d51aa6aa1fc733f23a851a8c9400000000000186a0000000005f041280000000005f9ca900000030390000000000000001fceda8f90fcb5d30614b99d79fc4baa29307762668f16eb0259a57c2d3b78c875c86ec2045792d4df2d926c40f829196e0bb97ee697af71f5b0a966dabff749634c8b729855e937715b0e44303fd1014daedc752006011b730\",\n        \"encoding\": \"hex\"\n\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/avax\n```\n\n----------------------------------------\n\nTITLE: Example Local Node Base URL\nDESCRIPTION: Provides an example base URL for making API calls to an Avalanche node running on the local machine (`127.0.0.1`) using the default HTTP port (`9650`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1:9650\n```\n\n----------------------------------------\n\nTITLE: Starting AWM Relayer with Avalanche CLI\nDESCRIPTION: Command for starting an AWM relayer on a specified network, with options for binary path, cluster, and network endpoint configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer start [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting Network for Validator Addition - Avalanche CLI - Bash\nDESCRIPTION: Shows the CLI interactive prompt for choosing the network (e.g., Fuji) when adding a validator to the blockchain. This selection ensures the correct network context for the validator addition transaction. Assumes that the preceding command to add a validator has been issued, and the user must select Fuji via keyboard navigation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Choose a network to deploy on:\n  ▸ Fuji\n```\n\n----------------------------------------\n\nTITLE: Selecting Avalanche Network for Validator Removal - Bash\nDESCRIPTION: This CLI prompt allows the user to select which Avalanche network (Local Network, Devnet, Fuji Testnet, Mainnet) they wish to target for validator removal. This is an interactive menu displayed by the Avalanche CLI when multiple network options are configured. Proper selection ensures operations are performed against the correct environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/remove-validator-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Choose a network for the operation: \n  ▸ Local Network\n    Devnet\n    Fuji Testnet\n    Mainnet\n```\n\n----------------------------------------\n\nTITLE: Avalanche Subnet AddValidator Command\nDESCRIPTION: CLI command for adding a validator to an L1 network with support for both PoA and PoS networks. Includes extensive configuration options for validator setup including BLS keys, staking parameters, and network endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_128\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet addValidator [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying User Info and Fetching Balance with Viem (TypeScript)\nDESCRIPTION: These TypeScript snippets show how to display user information after login and fetch their wallet balance. The first snippet (JSX) accesses the `user` object from Privy (likely via `usePrivy`) to display the user's Privy ID (`user.id`) and embedded wallet address (`user.wallet.address`). The second snippet sets up a Viem `createPublicClient` configured for the custom `echo` chain and uses its `getBalance` method to fetch the native token balance for the user's address. The balance (returned as a BigInt) is then formatted into a readable string using `ethers.formatEther` and stored in component state (`setBalance`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/use-privy-on-l1.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming 'user' object is available from usePrivy() hook\n// Assuming 'balance' state variable exists\n<span>{user.id}</span>\n<span>{user.wallet.address}</span>\n<span>{balance} ECH</span>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from 'viem';\nimport { ethers } from 'ethers';\nimport { echo } from './chains'; // Assuming echo is defined in './chains.ts'\nimport { useState, useEffect } from 'react';\n\n// Inside your React component, assuming 'address' is the user's wallet address\nconst [balance, setBalance] = useState<string>('0');\n\nuseEffect(() => {\n  if (address) {\n    const client = createPublicClient({\n        chain: echo,\n        transport: http(),\n    });\n    // get native asset balance\n    client.getBalance({\n        address: address as `0x${string}`, // Cast address to Viem's expected Address type\n    }).then(balance => {\n        setBalance(ethers.formatEther(balance));\n    }).catch(console.error); // Add error handling\n  }\n}, [address]); // Re-run effect when address changes\n```\n\n----------------------------------------\n\nTITLE: Deploying an Avalanche L1 Blockchain\nDESCRIPTION: Command to initiate the deployment of a new Avalanche L1 blockchain named 'testblockchain'. This starts an interactive CLI process where the user selects network, validators, and signs transactions with a Ledger device.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-mainnet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy testblockchain\n```\n\n----------------------------------------\n\nTITLE: Streaming Network Status with avalanche-network-runner (Bash)\nDESCRIPTION: Illustrates how to initiate a stream of network status updates using 'avalanche-network-runner control stream-status'. The CLI command example and the equivalent curl request to the API endpoint are provided. The `--push-interval` flag controls the update frequency.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control stream-status [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control stream-status\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/streamstatus'\n```\n\n----------------------------------------\n\nTITLE: Adding a Validator Using Avalanche CLI - Bash\nDESCRIPTION: This command initializes the process of adding a validator to a specified Avalanche L1 blockchain using the Avalanche CLI. The required dependency is the installed and configured Avalanche CLI tool. The <blockchainName> parameter identifies the target blockchain to which the validator is to be added. The command expects prior network setup and an appropriate NodeID and interacts with additional prompts to finalize the action. The output is a guided workflow for validator registration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain addValidator <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Gantt Format Specification for Unsigned Add Avalanche L1 Validator TX\nDESCRIPTION: A structured layout diagram showing the byte structure of an unsigned add validator transaction, including its components: BaseTx, Validator, SubnetID, and SubnetAuth, with their respective sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n+---------------+----------------------+-----------------------------------------+\n| base_tx       : BaseTx               |                     size(base_tx) bytes |\n+---------------+----------------------+-----------------------------------------+\n| validator     : Validator            |                                44 bytes |\n+---------------+----------------------+-----------------------------------------+\n| subnet_id     : [32]byte             |                                32 bytes |\n+---------------+----------------------+-----------------------------------------+\n| subnet_auth   : SubnetAuth           |        4 bytes + len(sig_indices) bytes |\n+---------------+----------------------+-----------------------------------------+\n                                   | 80 + len(sig_indices) + size(base_tx) bytes |\n                                   +---------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Generating a shared secret for AvaCloud webhooks\nDESCRIPTION: This curl command generates a new shared secret for webhook security. The shared secret is used to verify that webhook notifications are coming from a trusted source.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url https://glacier-api.avax.network/v1/webhooks:generateOrRotateSharedSecret \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Relayer Deploy Configuration Flags\nDESCRIPTION: Available configuration flags for the relayer deploy command, including options for private IP connections, blockchain funding, endpoint specification, and network selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\n--allow-private-ips allow          relayer to connec to private ips (default true)\n--amount float                     automatically fund l1s fee payments with the given amount\n--bin-path string                  use the given relayer binary\n--blockchain-funding-key string    key to be used to fund relayer account on all l1s\n--blockchains strings              blockchains to relay as source and destination\n--cchain relay                     C-Chain as source and destination\n--cchain-amount float              automatically fund cchain fee payments with the given amount\n--cchain-funding-key string        key to be used to fund relayer account on cchain\n--cluster string                   operate on the given cluster\n--devnet operate                   on a devnet network\n--endpoint string                  use the given endpoint for network operations\n-f, --fuji testnet                 operate on fuji (alias to testnet\n-h, --help help                    for deploy\n--key string                       key to be used by default both for rewards and to pay fees\n-l, --local operate                on a local network\n--log-level string                 log level to use for relayer logs\n-t, --testnet fuji                 operate on testnet (alias to fuji)\n--version string                   version to deploy (default \"latest-prerelease\")\n--config string                    config file (default is $HOME/.avalanche-cli/config.json)\n--skip-update-check skip           check for new versions\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Avalanche Ledger B Key List CLI in Bash\nDESCRIPTION: This sample output represents the results from the 'avalanche key list' command when run with Ledger B, listing account information including balances on the mainnet. The output is formatted as a table, enabling users to compare post-transfer state between ledgers. No direct dependencies are required to view this output besides executing the CLI command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n|  KIND  |  NAME   |          CHAIN          |                    ADDRESS                    | BALANCE | NETWORK |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n| ledger | index 0 | P-Chain (Bech32 format) | P-avax1r4aceznjkz8ch4pmpqrmkq4f3sl952mdrdt6xm |   4.496 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 1 |                         | P-avax18e9qsm30du590lhkwydhmkfwhcc9999gvxcaez |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 2 |                         | P-avax1unkkjstggvdty5gtnfhc0mgnl7qxa52z2d4c9y |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 3 |                         | P-avax1ek7n0zky3py7prxcrgnmh44y3wm6lc7r7x5r8e |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 4 |                         | P-avax1rsz6nt6qht5ep37qjk7ht0u9h30mgfhehsmqea |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 5 |                         | P-avax17u5wm4tfex7xr27xlwejm28pyk84tj0jzp42zz |       0 | Mainnet |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Listing Blockchains in Avalanche Network (Bash)\nDESCRIPTION: This endpoint retrieves a list of blockchains in the specified Avalanche network. The network identifier is required as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/{network}/blockchains \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Fee Adjustability Post-Genesis via CLI Prompt\nDESCRIPTION: Displays the CLI prompt asking if transaction fee parameters should be modifiable after the blockchain launch without requiring a network upgrade. This typically involves enabling a Fee Manager Precompile. The example shows selecting 'No', meaning fees are fixed at genesis.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/10-configure-transaction-fees.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n? Should transaction fees be adjustable without a network upgrade?:\n  ▸ No, use the transaction fee configuration set in the genesis block\n    Yes, allow adjustment of the transaction fee configuration as needed. Recommended for production (Fee Manager Precompile ON)\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Adding Node to Network with cURL\nDESCRIPTION: Shows how to add a new node to the network using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/addnode' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"node6\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Network ID Check Request\nDESCRIPTION: CURL command to check the network ID of the Avalanche node via the info.getNetworkID API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNetworkID\",\n    \"params\": {\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Avalanche Subnet ChangeOwner Command\nDESCRIPTION: CLI command for transferring subnet ownership with options for specifying control keys and authentication parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_129\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet changeOwner [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Instantiating a New Avalanche VM via Factory Go Implementation\nDESCRIPTION: This Go snippet demonstrates how to implement the New method for a VM factory, returning a fresh VM instance as required by the AvalancheGo node when initializing a chain. The function signature uses a pointer to a snow.Context and returns either a pointer to the VM or an error. No parameters are consumed beyond the context pointer, and dependencies include the vm and snow packages. Inputs: context pointer; Outputs: VM instance or error. Required for enabling plug-and-play VM instantiation during chain creation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Returning a new VM instance from VM's factory\nfunc (f *Factory) New(*snow.Context) (interface{}, error) { return &vm.VM{}, nil }\n\n```\n\n----------------------------------------\n\nTITLE: Describing Avalanche Blockchain Configuration\nDESCRIPTION: Command to print the details of an Avalanche Blockchain configuration. By default, it prints a summary, but can output the raw genesis file with the --genesis flag.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Getting Snapshot Names in Bash\nDESCRIPTION: Shows how to list available snapshots using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control get-snapshot-names\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Avalanche CLI Keys\nDESCRIPTION: Commands for creating, deleting, exporting, listing, and transferring Avalanche CLI keys. These keys are used for creating and controlling test Subnets.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\navalanche key create [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche key delete [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche key export [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche key transfer [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Auth Key Selection for Validator Addition\nDESCRIPTION: Interactive prompt for selecting the authentication keys needed to sign the validator addition transaction. The CLI displays available P-chain addresses and allows users to select the required signers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n✔ Mainnet\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Choose an Avalanche L1 auth key:\n  ▸ P-avax1wryu62weky9qjlp40cpmnqf6ml2hytnagj5q28\n    P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\n    P-avax12gcy0xl0al6gcjrt0395xqlcuq078ml93wl5h8\n    P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\n    P-avax1g4eryh40dtcsltmxn9zk925ny07gdq2xyjtf4g\n```\n\n----------------------------------------\n\nTITLE: Monitoring Node Synchronization\nDESCRIPTION: Command to monitor the node synchronization process through system logs\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl -fu avalanchego\n```\n\n----------------------------------------\n\nTITLE: Avalanche Validator Command Flags in Bash\nDESCRIPTION: Command line flags for the Avalanche validator command suite. These flags provide options for displaying help information, specifying config file location, setting log level, and skipping update checks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_172\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for validator\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Basic Calculator Interface Implementation in Solidity\nDESCRIPTION: Defines a basic calculator interface with three functions: add for addition, nextTwo for getting next two numbers, and repeat for string repetition.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ICalculator {\n    function add(uint value1, uint value2) external view returns(uint result);\n\n    function nextTwo(uint value1) external view returns(uint result1, uint result2);\n\n    function repeat(uint times, string memory text) external view returns(string memory result);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AmountInput Declaration in React (TypeScript)\nDESCRIPTION: Shows a basic implementation of the AmountInput component with text input type and placeholder, attaching an onChange callback for controlled value management. No icons or extra features are used. Inputs are numeric text strings, and outputs are formatted numeric strings. Assumes dependencies on React TypeScript, and the component supports controlled updates via the setAmount function provided to onChange.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/amount-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<AmountInput \n  type=\"text\"\n  placeholder=\"0.00\"\n  onChange={setAmount}\n/>\n\n```\n\n----------------------------------------\n\nTITLE: Logging Bootstrap Progress in Avalanche Node\nDESCRIPTION: This code snippet shows log output from an Avalanche node during the bootstrapping process. It demonstrates how the node reports progress for fetching and executing blocks, including estimates for time remaining.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/bootstrapping.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[02-16|17:31:42.950] INFO <P Chain> bootstrap/bootstrapper.go:494 fetching blocks {\"numFetchedBlocks\": 5000, \"numTotalBlocks\": 101357, \"eta\": \"2m52s\"}\n[02-16|17:31:58.110] INFO <P Chain> bootstrap/bootstrapper.go:494 fetching blocks {\"numFetchedBlocks\": 10000, \"numTotalBlocks\": 101357, \"eta\": \"3m40s\"}\n[02-16|17:32:04.554] INFO <P Chain> bootstrap/bootstrapper.go:494 fetching blocks {\"numFetchedBlocks\": 15000, \"numTotalBlocks\": 101357, \"eta\": \"2m56s\"}\n...\n[02-16|17:36:52.404] INFO <P Chain> queue/jobs.go:203 executing operations {\"numExecuted\": 17881, \"numToExecute\": 101357, \"eta\": \"2m20s\"}\n[02-16|17:37:22.467] INFO <P Chain> queue/jobs.go:203 executing operations {\"numExecuted\": 35009, \"numToExecute\": 101357, \"eta\": \"1m54s\"}\n[02-16|17:37:52.468] INFO <P Chain> queue/jobs.go:203 executing operations {\"numExecuted\": 52713, \"numToExecute\": 101357, \"eta\": \"1m23s\"}\n```\n\n----------------------------------------\n\nTITLE: Entering NodeID for Validator Whitelisting - Avalanche CLI - Bash\nDESCRIPTION: Captures the CLI prompt for entering the NodeID of a new validator to be added to the Avalanche L1. The entered NodeID identifies the validator node that will be whitelisted on the network. The prompt expects a string identifier matching the format 'NodeID-...', and is required during the interactive addition process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nWhat is the NodeID of the validator you'd like to whitelist?: NodeID-BFa1paAAAAAAAAAAAAAAAAAAAAQGjPhUy\n```\n\n----------------------------------------\n\nTITLE: Secure File Transfer Between Avalanche Nodes\nDESCRIPTION: This command securely copies files to and from nodes using a flexible addressing format. It supports transferring files between local and remote locations, and between multiple nodes. File transfers to nodes are parallelized.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_112\n\nLANGUAGE: bash\nCODE:\n```\navalanche node scp [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--compress use              compression for ssh\n-h, --help help             for scp\n--recursive copy            directories recursively\n--with-loadtest include     loadtest node for scp cluster operations\n--with-monitor include      monitoring node for scp cluster operations\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Encoding a Byte Value in Avalanche\nDESCRIPTION: Demonstrates how a single byte is packed into a message payload with no additional formatting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    0x01\nResults in:\n    [0x01]\n```\n\n----------------------------------------\n\nTITLE: Relayer Stop Configuration Flags\nDESCRIPTION: Available configuration flags for the relayer stop command, including options for cluster operation, endpoint specification, and network selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string            operate on the given cluster\n--endpoint string           use the given endpoint for network operations\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for stop\n-l, --local operate         on a local network\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: VM Upgrade Configuration Completion Message (CLI Output)\nDESCRIPTION: This message is displayed by the Avalanche-CLI upgrade wizard upon successful selection of the new Virtual Machine. It confirms that the upgrade configuration is complete and the local network is ready to be restarted to apply the changes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-virtual-machine.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUpgrade complete. Ready to restart the network.\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-20 Contract on C-Chain\nDESCRIPTION: Forge command to deploy an ERC-20 token contract on Avalanche C-Chain with 18 decimals\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/03-use-erc20-as-native-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK lib/icm-contracts/contracts/ictt/mocks/ExampleERC20Decimals.sol:ExampleERC20Decimals --constructor-args 18 --broadcast\n```\n\n----------------------------------------\n\nTITLE: Describing Primary Network in Avalanche CLI\nDESCRIPTION: This snippet shows the usage and flags for the 'avalanche primary describe' command, which prints details of the primary network configuration to the console.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_125\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary describe [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string            operate on the given cluster\n-h, --help help             for describe\n-l, --local operate         on a local network\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Launching the Development Server - Bash\nDESCRIPTION: This command launches the project in development mode using Yarn. It assumes all dependencies are installed and the .env configuration is present. The expected output is a running development server hosting the Telegram Mini-App frontend.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Encoding EVM Output in Avalanche\nDESCRIPTION: Demonstrates the encoding of an EVM output with address, amount, and asset ID. The example shows both the input values and the resulting byte array representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[\n    Address   <- 0x0eb5ccb85c29009b6060decb353a38ea3b52cd20,\n    Amount    <- 0x000000746a528800\n    AssetID   <- 0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db\n]\n=\n[\n    // address:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n    // amount:\n    0x00, 0x00, 0x00, 0x74, 0x6a, 0x52, 0x88, 0x00,\n    // assetID:\n    0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,\n    0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,\n    0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,\n    0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,\n]\n```\n\n----------------------------------------\n\nTITLE: Example Websocket URL for C-Chain on Local Node\nDESCRIPTION: Shows the websocket URL (`ws://`) for establishing a persistent connection to the C-Chain's EVM API on a local Avalanche node. Note that HTTPS/WSS should be used for secure connections or public endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nws://127.0.0.1:9650/ext/bc/C/ws\n```\n\n----------------------------------------\n\nTITLE: Avalanche Node AddDashboard Command Flags in Bash\nDESCRIPTION: Command-specific flags for the addDashboard command, allowing specification of dashboard JSON file, subnet association, and other options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_92\n\nLANGUAGE: bash\nCODE:\n```\n--add-grafana-dashboard string    path to additional grafana dashboard json file\n-h, --help help                   for addDashboard\n--subnet string                   subnet that the dasbhoard is intended for (if any)\n--config string                   config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                log level for the application (default \"ERROR\")\n--skip-update-check skip          check for new versions\n```\n\n----------------------------------------\n\nTITLE: Checking Avalanche Network Status using CLI\nDESCRIPTION: Command to check the status of a local Avalanche network, displaying whether the network is running and providing basic network statistics.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\navalanche network status [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Network Selection Prompt for Validator Addition\nDESCRIPTION: Interactive prompt allowing users to select which network (Fuji Testnet or Mainnet) to add the validator to. The CLI uses arrow keys for navigation through the options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Choose a network to add validator to.:\n  ▸ Fuji\n    Mainnet\n```\n\n----------------------------------------\n\nTITLE: Messenger Deploy command flags in Avalanche CLI\nDESCRIPTION: Available flags for configuring ICM Messenger and Registry deployment, including blockchain selection, key management, network options, and deployment paths.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\n--blockchain string                         deploy ICM into the given CLI blockchain\n--blockchain-id string                      deploy ICM into the given blockchain ID/Alias\n--c-chain deploy                            ICM into C-Chain\n--cchain-key string                         key to be used to pay fees to deploy ICM to C-Chain\n--cluster string                            operate on the given cluster\n--deploy-messenger deploy                   ICM Messenger (default true)\n--deploy-registry deploy                    ICM Registry (default true)\n--devnet operate                            on a devnet network\n--endpoint string                           use the given endpoint for network operations\n--force-registry-deploy deploy              ICM Registry even if Messenger has already been deployed\n-f, --fuji testnet                          operate on fuji (alias to testnet\n--genesis-key use                           genesis allocated key to fund ICM deploy\n-h, --help help                             for deploy\n--include-cchain deploy                     ICM also to C-Chain\n--key string                                CLI stored key to use to fund ICM deploy\n-l, --local operate                         on a local network\n--messenger-contract-address-path string    path to a messenger contract address file\n--messenger-deployer-address-path string    path to a messenger deployer address file\n--messenger-deployer-tx-path string         path to a messenger deployer tx file\n--private-key string                        private key to use to fund ICM deploy\n--registry-bytecode-path string             path to a registry bytecode file\n--rpc-url string                            use the given RPC URL to connect to the subnet\n-t, --testnet fuji                          operate on testnet (alias to fuji)\n--version string                            version to deploy (default \"latest\")\n--config string                             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                          log level for the application (default \"ERROR\")\n--skip-update-check skip                    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing Gallery Component in JSX\nDESCRIPTION: Imports the Gallery component from the content-design directory to display instructional images for the Avalanche Core wallet configuration process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/testnet-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Gallery from '@/components/content-design/gallery';\n```\n\n----------------------------------------\n\nTITLE: Flags for Subnet List Command in Avalanche CLI\nDESCRIPTION: Flags for the subnet list command, including options for showing deployment information and help documentation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_149\n\nLANGUAGE: bash\nCODE:\n```\n--deployed show             additional deploy information\n-h, --help help             for list\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Querying Current Validators on Avalanche Fuji Testnet\nDESCRIPTION: This curl command demonstrates how to call the platform.getCurrentValidators endpoint to check for current validators on the Fuji testnet for a specific node ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.avax-test.network/ext/bc/P' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getCurrentValidators\",\n    \"params\": {\n        \"subnetID\": \"11111111111111111111111111111111LpoYY\",\n        \"nodeIDs\": [\"NodeID-Q8Gfaaio9FAqCmZVEXDq9bFvNPvDi7rt5\"]\n    },\n    \"id\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Minter Permissions\nDESCRIPTION: Command to grant native minting rights to the NativeTokenRemote contract using the Native Minter Precompile\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/03-use-erc20-as-native-token.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK 0x0200000000000000000000000000000000000001 \"setEnabled(address)\" $NATIVE_TOKEN_REMOTE_L1\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balance using Cast\nDESCRIPTION: Command to verify the token balance of the receiver contract using the balanceOf function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/09-transfer-erc20-to-sc.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast call $ERC20_CONTRACT_L1 \"balanceOf(address)(uint256)\" $ERC20_RECEIVER_L1 --rpc-url myblockchain\n```\n\n----------------------------------------\n\nTITLE: Pinging ANR Server in Bash\nDESCRIPTION: Demonstrates how to ping the Avalanche Network Runner server using the CLI command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner ping\n```\n\n----------------------------------------\n\nTITLE: Listing Asset Transactions in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of transactions for a specific asset in a blockchain of the Avalanche mainnet. It requires the blockchain ID and asset ID as path parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM/assets/{assetId}/transactions \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Avalanche Subnet ChangeWeight Command\nDESCRIPTION: CLI command for modifying validator weights in a Proof of Authority Subnet-Only Validator Subnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_130\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet changeWeight [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting AVAX Change Owner Address in Avalanche CLI - Bash\nDESCRIPTION: This option determines which address will receive any leftover AVAX if the validator node is removed. It prompts users to pick an address from existing stored keys or to input a custom address. This ensures clear routing of excess funds when validator status changes. Prerequisites include pre-generated or imported Avalanche keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n? Which key would you like to set as change owner for leftover AVAX if the node is removed from validator set?: \n \\u25b8 Get address from an existing stored key (created from avalanche key create or avalanche key import)\n    Custom\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Transaction Details using OKX API in JavaScript\nDESCRIPTION: This script retrieves transaction details from the OKX API for a specified transaction hash on the Avalanche C-Chain. It formats and displays various aspects of the transaction including basic info, gas details, addresses involved, token transfers, and internal transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/okxos.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst CryptoJS = require(\"crypto-js\");\n\nconst getRequestUrl = (baseUrl, path, params = null) => {\n    const url = new URL(baseUrl + path);\n    if (params) {\n        Object.keys(params).forEach((key) =>\n            url.searchParams.append(key, params[key]),\n        );\n    }\n    return url.toString();\n};\n\nconst apiBaseUrl = \"https://www.okx.com\";\nconst params = {\n    txHash: '0xaf54d1cb2c21bed094095bc503ec76128f80c815db8631fd74c6e49781b94bd1', // Changed from txhash to txHash\n    chainIndex: '43114'\n};\n\nconst timestamp = new Date().toISOString();\nconst method = \"GET\";\nconst path = '/api/v5/wallet/post-transaction/transaction-detail-by-txhash';\nconst queryString = `?txHash=${params.txHash}&chainIndex=${params.chainIndex}`; // Changed from txhash to txHash\n\nconst signString = timestamp + method + path + queryString;\nconst signature = CryptoJS.enc.Base64.stringify(\n    CryptoJS.HmacSHA256(signString, \"YOUR API SECRET\"),\n);\n\nconst headersParams = {\n    \"Content-Type\": \"application/json\",\n    \"OK-ACCESS-PROJECT\": \"YOUR PROJECT ID\",\n    \"OK-ACCESS-KEY\": \"YOUR API KEY\",\n    \"OK-ACCESS-SIGN\": signature,\n    \"OK-ACCESS-PASSPHRASE\": \"YOUR API PASSPHRASE\",\n    \"OK-ACCESS-TIMESTAMP\": timestamp,\n};\n\nconst getTransactionDetailData = async () => {\n    const apiRequestUrl = getRequestUrl(apiBaseUrl, path, params);\n\n    const response = await fetch(apiRequestUrl, {\n        method: \"GET\",\n        headers: headersParams,\n    });\n\n    return response.json();\n};\n\nconst formatDate = (timestamp) => {\n    return new Date(parseInt(timestamp)).toLocaleString();\n};\n\nconst formatGas = (gas) => {\n    return parseFloat(gas).toLocaleString();\n};\n\ngetTransactionDetailData()\n    .then((response) => {\n        console.log('\\n=== Transaction Details ===\\n');\n\n        if (response.code === \"0\" && response.data && response.data.length > 0) {\n            const tx = response.data[0];\n\n            // Transaction Basic Info\n            console.log('📝 Basic Information');\n            console.log('------------------');\n            console.log(`Hash: ${tx.txhash}`);\n            console.log(`Status: ${tx.txStatus.toUpperCase()}`);\n            console.log(`Block: ${formatGas(tx.height)}`);\n            console.log(`Time: ${formatDate(tx.txTime)}`);\n            console.log(`Method ID: ${tx.methodId}`);\n            console.log(`Chain: ${tx.chainIndex} (${tx.symbol})`);\n\n            // Gas Info\n            console.log('\\n⛽ Gas Information');\n            console.log('----------------');\n            console.log(`Gas Limit: ${formatGas(tx.gasLimit)}`);\n            console.log(`Gas Used: ${formatGas(tx.gasUsed)}`);\n            console.log(`Gas Price: ${formatGas(tx.gasPrice)} Wei`);\n            console.log(`Nonce: ${tx.nonce}`);\n\n            // From Address\n            console.log('\\n📤 From Address');\n            console.log('-------------');\n            tx.fromDetails.forEach(from => {\n                console.log(`Address: ${from.address}`);\n                console.log(`Type: ${from.isContract ? 'Contract' : 'Wallet'}`);\n            });\n\n            // To Address\n            console.log('\\n📥 To Address');\n            console.log('-----------');\n            tx.toDetails.forEach(to => {\n                console.log(`Address: ${to.address}`);\n                console.log(`Type: ${to.isContract ? 'Contract' : 'Wallet'}`);\n            });\n\n            // Token Transfers\n            if (tx.tokenTransferDetails && tx.tokenTransferDetails.length > 0) {\n                console.log('\\n🔄 Token Transfers');\n                console.log('---------------');\n                tx.tokenTransferDetails.forEach((transfer, index) => {\n                    console.log(`\\nTransfer #${index + 1}:`);\n                    console.log(`Token: ${transfer.symbol}`);\n                    console.log(`Amount: ${transfer.amount}`);\n                    console.log(`From: ${transfer.from} ${transfer.isFromContract ? '(Contract)' : '(Wallet)'}`);\n                    console.log(`To: ${transfer.to} ${transfer.isToContract ? '(Contract)' : '(Wallet)'}`);\n                    console.log(`Contract: ${transfer.tokenContractAddress}`);\n                });\n            }\n\n            // Internal Transactions (if any)\n            if (tx.internalTransactionDetails && tx.internalTransactionDetails.length > 0) {\n                console.log('\\n💱 Internal Transactions');\n                console.log('--------------------');\n                tx.internalTransactionDetails.forEach((internal, index) => {\n                    console.log(`\\nInternal Transfer #${index + 1}:`);\n                    console.log(`From: ${internal.from}`);\n                    console.log(`To: ${internal.to}`);\n                    console.log(`Amount: ${internal.amount} ${tx.symbol}`);\n                    console.log(`Status: ${internal.state}`);\n                });\n            }\n\n        } else {\n            console.log('Status:', response.code);\n            console.log('Message:', response.msg);\n            console.log('Data:', response.data);\n        }\n    })\n    .catch(error => console.error('Error:', error));\n```\n\n----------------------------------------\n\nTITLE: Displaying Avalanche Blockchain Connection Details (Console Output)\nDESCRIPTION: This snippet provides a formatted CLI output table detailing network parameters such as the Network RPC URL, Network Name, Chain ID, Token Symbol, and Token Name for use in prepping a custom network wallet connection. It demonstrates the structure in which information is retrieved via 'avalanche blockchain deploy' or 'describe' commands. The snippet serves as an example for users configuring connections and carries the constraint that the RPC port (9650) must be public.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/add-blockchain-to-wallet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n+-------------------------------------------------------------------------------------------------------+\n|                                           WALLET CONNECTION                                           |\n+-----------------+-------------------------------------------------------------------------------------+\n| Network RPC URL | https://humble-tribble-q7qvgwr6j44265v6-9650.app.github.dev/ext/bc/myblockchain/rpc |\n|                 | Please make sure to set visibility of port 9650 to public                           |\n+-----------------+-------------------------------------------------------------------------------------+\n| Network Name    | myblockchain                                                                        |\n+-----------------+-------------------------------------------------------------------------------------+\n| Chain ID        | 9999                                                                                |\n+-----------------+-------------------------------------------------------------------------------------+\n| Token Symbol    | TOK                                                                                 |\n+-----------------+-------------------------------------------------------------------------------------+\n| Token Name      | TOK Token                                                                           |\n+-----------------+-------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon for IPv6 (JSON)\nDESCRIPTION: This JSON snippet is intended for inclusion in the Docker daemon.json configuration file to enable IPv6 and set a specific IPv6 CIDR block. No external dependencies beyond Docker itself are required, but administrative privileges and a Docker installation are prerequisites. The key parameters are \"ipv6\" (enables support for IPv6 networking) and \"fixed-cidr-v6\" (sets the IPv6 subnet for containers). Input is a JSON object, and a Docker daemon restart is required for changes to take effect. Incorrect configuration may disrupt networking.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/run-with-docker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"fd00::/80\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Contract Deployer Configuration\nDESCRIPTION: Configuration for enabling contract deployment restrictions with initial enabled addresses but no admin management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contractDeployerAllowListConfig\": {\n    \"blockTimestamp\": 0,\n    \"enabledAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Blocks from Backend API in TypeScript\nDESCRIPTION: This frontend function makes an API call to the backend to retrieve recent block information. It fetches data from the '/api/explorer' endpoint with the 'getRecentBlocks' method and returns an array of EvmBlock objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/03-modifying-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchRecentBlocks = async () => {\n    const response = await fetch(`/api/explorer?method=getRecentBlocks`)\n    const data = await response.json()\n    return data as EvmBlock[]\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Version Message for P2P Handshake in Avalanche\nDESCRIPTION: The Version message is the first outbound message sent during the P2P handshake, containing network identifiers, timestamps, peer information, and tracked subnets.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Version {\n  uint32 network_id = 1;\n  uint64 my_time = 2;\n  bytes ip_addr = 3;\n  uint32 ip_port = 4;\n  string my_version = 5;\n  uint64 my_version_time = 6;\n  bytes sig = 7;\n  repeated bytes tracked_subnets = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Teleporter Contract Addresses Table\nDESCRIPTION: Markdown table showing deployed addresses for TeleporterMessenger and TeleporterRegistry contracts across different chains and networks. TeleporterMessenger uses a universal address across all chains while TeleporterRegistry has distinct addresses for Mainnet and Fuji C-Chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/addresses.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Contract              | Address                                        | Chain                    |\n| --------------------- | ---------------------------------------------- | ------------------------ |\n| `TeleporterMessenger` | **0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf** | All chains, all networks |\n| `TeleporterRegistry`  | **0x7C43605E14F391720e1b37E49C78C4b03A488d98** | Mainnet C-Chain          |\n| `TeleporterRegistry`  | **0xF86Cb19Ad8405AEFa7d09C778215D2Cb6eBfB228** | Fuji C-Chain             |\n```\n\n----------------------------------------\n\nTITLE: Defining Unsigned BaseTx in Protocol Buffers\nDESCRIPTION: Protocol Buffers message definition for the Unsigned BaseTx, specifying field types and sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nmessage BaseTx {\n    uint32 type_id = 1;          // 04 bytes\n    uint32 network_id = 2;       // 04 bytes\n    bytes blockchain_id = 3;     // 32 bytes\n    repeated Output outputs = 4; // 04 bytes + size(outs)\n    repeated Input inputs = 5;   // 04 bytes + size(ins)\n    bytes memo = 6;              // 04 bytes + size(memo)\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Delegator Registration via Contract Call (PoS)\nDESCRIPTION: This function call, specific to the `PoSValidatorManager`, initiates the registration of a delegator to an active validator. It requires the stake amount and checks churn restrictions. Successful initiation leads to adjusting the validator's weight on the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_9\n\nLANGUAGE: Identifier\nCODE:\n```\ninitializeDelegatorRegistration\n```\n\n----------------------------------------\n\nTITLE: Listing Network URIs with avalanche-network-runner (Bash)\nDESCRIPTION: Demonstrates how to list the URIs associated with the nodes in the network using 'avalanche-network-runner control uris'. Examples provide the CLI command and the equivalent curl POST request to the API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control uris [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control uris\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/uris'\n```\n\n----------------------------------------\n\nTITLE: Stopping the Avalanche Relayer\nDESCRIPTION: This command stops the Relayer execution on the local Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer stop --local\n```\n\n----------------------------------------\n\nTITLE: Example JSON-RPC URL for DFK Network on Local Node\nDESCRIPTION: Illustrates the full JSON-RPC URL for interacting with the DFK Network (an Avalanche L1 hosting DeFi Kingdoms:Crystalvale) running on a local node. It uses the specific blockchain ID for the DFK Network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1/ext/bc/q2aTwKuyzgs8pynF7UXBZCU7DejbZbZ6EUyHr3JQzYgwNPUPi/rpc\n```\n\n----------------------------------------\n\nTITLE: Proto Signed Transaction Specification\nDESCRIPTION: Protocol buffer message definition for signed transactions specifying field types and numbers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nmessage Tx {\n    uint16 codec_id = 1;                 // 2 bytes\n    AtomicTx atomic_tx = 2;              // size(atomic_tx)\n    repeated Credential credentials = 3; // 4 bytes + size(credentials)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Status via HTTP\nDESCRIPTION: This curl command retrieves the current status of the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/status -d ''\n```\n\n----------------------------------------\n\nTITLE: Rendering Cross-Chain Transfer Component in MDX\nDESCRIPTION: This MDX code snippet renders the CrossChainTransfer component wrapped in a ToolboxMdxWrapper. It provides the user interface for transferring AVAX between chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/02-transfer-pchain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ToolboxMdxWrapper>\n\n<CrossChainTransfer />\n\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Example Output of Starting Avalanche Network in Bash\nDESCRIPTION: Shows the typical console output after successfully running the `avalanche network start` command. It includes details like the backend controller process ID, log file location, network status confirmation (\"Network ready to use\"), RPC URLs for both local and Codespace access (including specific blockchain RPC endpoints), and a table listing the running nodes with their IDs and respective endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/pause-and-resume.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ avalanche network start\nBackend controller started, pid: 1781, output at: /home/vscode/.avalanche-cli/runs/server_20241007_035854/avalanche-cli-backend.log\nStarting previously deployed and stopped snapshot\nBooting Network. Wait until healthy...\nNode logs directory: /home/vscode/.avalanche-cli/runs/network_20241007_035856/node<i>/logs\n\nNetwork ready to use.\n\n+------------------------------------------------------------------------------------------------------------------------------------+\n|                                                          TESTEXP RPC URLS                                                          |\n+-----------+------------------------------------------------------------------------------------------------------------------------+\n| Localhost | http://127.0.0.1:9650/ext/bc/testexp/rpc                                                                               |\n|           +------------------------------------------------------------------------------------------------------------------------+\n|           | http://127.0.0.1:9650/ext/bc/ZJ3iFLF2DJo31Koq7Ah2F7EwSmSCpXBG2LLX1bFhsdEfmxkWD/rpc                                     |\n+-----------+------------------------------------------------------------------------------------------------------------------------+\n| Codespace | https://musical-lamp-5rgwvggj75xh777g-9650.app.github.dev/ext/bc/testexp/rpc                                           |\n|           +------------------------------------------------------------------------------------------------------------------------+\n|           | https://musical-lamp-5rgwvggj75xh777g-9650.app.github.dev/ext/bc/ZJ3iFLF2DJo31Koq7Ah2F7EwSmSCpXBG2LLX1bFhsdEfmxkWD/rpc | \n+-----------+------------------------------------------------------------------------------------------------------------------------+\n\n+--------------------------------------------------------------------------------------------------------------------------------------+\n|                                                                 NODES                                                                |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n| NAME  | NODE ID                                  | LOCALHOST ENDPOINT    | CODESPACE ENDPOINT                                        |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n| node1 | NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg | http://127.0.0.1:9650 | https://musical-lamp-5rgwvggj75xh777g-9650.app.github.dev |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n| node2 | NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ | http://127.0.0.1:9652 | https://musical-lamp-5rgwvggj75xh777g-9652.app.github.dev |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n| node3 | NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN | http://127.0.0.1:9654 | https://musical-lamp-5rgwvggj75xh777g-9654.app.github.dev |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n| node4 | NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu | http://127.0.0.1:9656 | https://musical-lamp-5rgwvggj75xh777g-9656.app.github.dev |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n| node5 | NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5 | http://127.0.0.1:9658 | https://musical-lamp-5rgwvggj75xh777g-9658.app.github.dev |\n+-------+------------------------------------------+-----------------------+-----------------------------------------------------------+\n\nusing awm-relayer version (v1.4.0)\nExecuting AWM-Relayer...\n```\n\n----------------------------------------\n\nTITLE: Generating Precompile Template for Subnet-EVM\nDESCRIPTION: This command generates precompile template files for Subnet-EVM in the ./precompile/contracts/helloworld directory using the IHelloWorld.abi file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_precompile.sh --abi ./contracts/abis/IHelloWorld.abi --type HelloWorld --pkg helloworld\n```\n\n----------------------------------------\n\nTITLE: Avalanche Key Management Overview\nDESCRIPTION: Introduction to the key command suite for creating and managing signing keys in Avalanche CLI, providing tools for key generation, deletion, export, listing, and fund transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\navalanche key [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring TransactionManager for Token Approval and Transfer in TSX\nDESCRIPTION: Provides a specific example of configuring the TransactionManager component for a two-step process involving token approval followed by token transfer. It defines the `chain_id` and the `transactions` array with titles, descriptions, and data for each step. Assumes `approveData` and `transferData` variables are defined elsewhere.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transaction/transaction-manager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<TransactionManager\n  chain_id={43114}\n  transactions={[\n    {\n      title: \"Step 1: Approve\",\n      description: \"Approve token spending\",\n      data: approveData\n    },\n    {\n      title: \"Step 2: Transfer\",\n      description: \"Transfer tokens to recipient\",\n      data: transferData\n    }\n  ]}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying First Avalanche L1 Chain with Teleporter\nDESCRIPTION: Deploys the first Avalanche L1 chain locally with Teleporter Messenger and Registry contracts. Sets up AWM-Relayer and configures network endpoints. Includes browser extension connection details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <chain1> --local\n```\n\n----------------------------------------\n\nTITLE: Frontend ERC-721 Balance Fetching Implementation\nDESCRIPTION: Frontend function to fetch ERC-721 balances by calling the backend API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC721Balances = async (address: string) => {\n    const result = await fetch(`api/wallet?method=listERC721Balances&address=${address}`);\n    const balances = await result.json();\n    return balances as Erc721TokenBalance[];\n  }\n```\n\n----------------------------------------\n\nTITLE: Successful Upgrade Output Display\nDESCRIPTION: Output showing the successful application of upgrade bytes to network nodes with endpoint details for each node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n✔ Existing local deployment\n.......\nNetwork restarted and ready to use. Upgrade bytes have been applied to running nodes at these endpoints.\nThe next upgrade will go into effect 2023-03-31 09:00:00\n+-------+------------+-----------------------------------------------------------------------------------+\n| NODE  |     VM     |                                        URL                                        |\n+-------+------------+-----------------------------------------------------------------------------------+\n| node1 | testblockchain | http://0.0.0.0:9650/ext/bc/2YTRV2roEhgvwJz7D7vr33hUZscpaZgcYgUTjeMK9KH99NFnsH/rpc |\n+-------+------------+-----------------------------------------------------------------------------------+\n| node2 | testblockchain | http://0.0.0.0:9652/ext/bc/2YTRV2roEhgvwJz7D7vr33hUZscpaZgcYgUTjeMK9KH99NFnsH/rpc |\n+-------+------------+-----------------------------------------------------------------------------------+\n| node3 | testblockchain | http://0.0.0.0:9654/ext/bc/2YTRV2roEhgvwJz7D7vr33hUZscpaZgcYgUTjeMK9KH99NFnsH/rpc |\n+-------+------------+-----------------------------------------------------------------------------------+\n| node4 | testblockchain | http://0.0.0.0:9656/ext/bc/2YTRV2roEhgvwJz7D7vr33hUZscpaZgcYgUTjeMK9KH99NFnsH/rpc |\n+-------+------------+-----------------------------------------------------------------------------------+\n| node5 | testblockchain | http://0.0.0.0:9658/ext/bc/2YTRV2roEhgvwJz7D7vr33hUZscpaZgcYgUTjeMK9KH99NFnsH/rpc |\n+-------+------------+-----------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Querying Pending Validators with Specific Node ID\nDESCRIPTION: This curl command shows how to query pending validators on the Fuji testnet for a specific node ID using the platform.getPendingValidators endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.avax-test.network/ext/bc/P' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getPendingValidators\",\n    \"params\": {\n        \"subnetID\": \"11111111111111111111111111111111LpoYY\",\n        \"nodeIDs\": [\"NodeID-Q8Gfaaio9FAqCmZVEXDq9bFvNPvDi7rt5\"]\n    },\n    \"id\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: Avalanche Validator GetBalance Command Flags in Bash\nDESCRIPTION: Command line flags for the Avalanche validator getBalance command. These flags provide network selection options (cluster, devnet, testnet, mainnet, local), endpoint specification, node identification, and general configuration options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_174\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string            operate on the given cluster\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for getBalance\n--l1 string                 name of L1\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n--node-id string            node ID of the validator\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--validation-id string      validation ID of the validator\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Moving Existing Database\nDESCRIPTION: Command to rename the existing database before restoring from backup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmv .avalanchego/db .avalanchego/db-old\n```\n\n----------------------------------------\n\nTITLE: ERC20 Balance Check Task Implementation\nDESCRIPTION: TypeScript implementation of a Hardhat task to check ERC20 token balances\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntask(\n  \"check-erc20-balance\",\n  \"Prints out the ERC20 balance of your account\"\n).setAction(async function (taskArguments, hre) {\n  const genericErc20Abi = require(\"./erc20.abi.json\");\n  const tokenContractAddress = \"0x...\";\n  const provider = ethers.getDefaultProvider(\n    \"https://api.avax.network/ext/bc/C/rpc\"\n  );\n  const contract = new ethers.Contract(\n    tokenContractAddress,\n    genericErc20Abi,\n    provider\n  );\n  const balance = await contract.balanceOf(\"0x...\");\n  console.log(`Balance in wei: ${balance}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching X-Chain Block Data with avm.getBlock\nDESCRIPTION: This snippet shows how to fetch data about an X-Chain block using the avm.getBlock method in Postman.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-postman/making-api-calls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"avm.getBlock\",\n  \"params\": {\n    \"blockID\": \"<block_id_here>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Funding C-Chain Addresses via Yarn Script (Bash)\nDESCRIPTION: Navigates to the `avalanche-smart-contract-quickstart` project directory and executes the `fund-cchain-addresses` yarn script. This script transfers AVAX from the X-Chain to C-Chain addresses defined in `hardhat.config.ts`, which is necessary before deploying contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/avalanche-smart-contract-quickstart\nyarn fund-cchain-addresses\n```\n\n----------------------------------------\n\nTITLE: Listing Blockchains in Bash\nDESCRIPTION: Illustrates how to list all blockchain IDs in the network using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control list-blockchains\n```\n\n----------------------------------------\n\nTITLE: Signing Validator Addition Transaction with Second Key\nDESCRIPTION: Command to continue the signing process for a validator addition transaction with the second required key. The command references a partially signed transaction file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction sign testblockchain --input-tx-filepath partialAddValidatorTx.txt\n```\n\n----------------------------------------\n\nTITLE: Interchain Messenger command flags in Avalanche CLI\nDESCRIPTION: Basic flags for the messenger command, including help, config file specification, log level, and update check control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for messenger\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Listing Ledger Addresses for Avalanche Mainnet using Avalanche-CLI - Bash\nDESCRIPTION: This snippet shows the Bash command for enumerating the Ledger hardware wallet address for Avalanche Mainnet using Avalanche-CLI. It assumes the Avalanche-CLI is installed and a Ledger device is connected, unlocked, and running the Avalanche app. Key parameters are '--ledger 0' (using the first derivation index) and '--mainnet' (querying Mainnet addresses). The command outputs the P-Chain address and balance for the Ledger index requested and may be repeated with different indexes for other addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-mainnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --ledger 0 --mainnet\n```\n\n----------------------------------------\n\nTITLE: Checking Node Bootstrap Status with info.isBootstrapped API\nDESCRIPTION: A curl command to check if an Avalanche node is done bootstrapping by calling the info.isBootstrapped API endpoint. This verifies if the P-Chain is ready for operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-mainnet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"P\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Selecting Subnet-EVM for Avalanche Blockchain\nDESCRIPTION: This code block shows the CLI prompt for selecting Subnet-EVM as the virtual machine for the new blockchain. Subnet-EVM is essential for configuring custom native tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/02-configure-custom-native-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Which Virtual Machine would you like to use?: \n  ▸ Subnet-EVM\n    Custom VM\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisAsset Structure in Protocol Buffers for Avalanche\nDESCRIPTION: This specification details the GenesisAsset structure using Protocol Buffers format, listing all fields with their data types and byte sizes. It provides a more modern representation of the same structure defined in the Gantt format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_54\n\nLANGUAGE: text\nCODE:\n```\nmessage GenesisAsset {\n    string alias = 1;                          // 2 bytes + len(alias)\n    uint32 network_id = 2;                     // 04 bytes\n    bytes blockchain_id = 3;                   // 32 bytes\n    repeated Output outputs = 4;               // 04 bytes + size(outputs)\n    repeated Input inputs = 5;                 // 04 bytes + size(inputs)\n    bytes memo = 6;                            // 04 bytes + size(memo)\n    string name = 7;                           // 2 bytes + len(name)\n    name symbol = 8;                           // 2 bytes + len(symbol)\n    uint8 denomination = 9;                    // 1 bytes\n    repeated InitialState initial_states = 10; // 4 bytes + size(initial_states)\n}\n```\n\n----------------------------------------\n\nTITLE: Prompting to Configure Another Precompile\nDESCRIPTION: After the user finishes configuring the 'enabledAddresses' for the selected precompile (and selects 'Done'), the Avalanche-CLI wizard asks if they wish to configure another precompile within the same upgrade operation. Selecting 'No' concludes the wizard and saves the upgrade file internally.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n✔ Done\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Should we configure another precompile?:\n  ▸ No\n    Yes\n```\n\n----------------------------------------\n\nTITLE: Setting Subnet-EVM Version for Avalanche Blockchain\nDESCRIPTION: This code block shows the CLI prompt for selecting the Subnet-EVM version. Using the latest release version is recommended for configuring custom native tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/02-configure-custom-native-token.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n✔ Subnet-EVM\n✔ I don't want to use default values\n? Version: \n  ▸ Use latest release version\n    Specify custom version\n```\n\n----------------------------------------\n\nTITLE: Viewing AWM Relayer Logs on a Devnet Node using Avalanche CLI and SSH (Bash)\nDESCRIPTION: This command uses the Avalanche CLI's `node ssh` subcommand to securely connect to a specific node within the Devnet, identified by its instance ID (`i-0f1815c016b555fcc` in this example, which is marked as the Relayer). It then executes the `journalctl -u awm-relayer --no-pager` command remotely on that node to retrieve and display the logs for the `awm-relayer` systemd service without pagination. This is useful for debugging and monitoring the Teleporter Relayer's activity. Requires Avalanche CLI, an existing Devnet, and SSH access configured (usually handled by the CLI).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh i-0f1815c016b555fcc \"journalctl -u awm-relayer --no-pager\"\n\n  [Node i-0f1815c016b555fcc (NodeID-91PGQ7keavfSV1XVFva2WsQXWLWZqqqKe) 67.202.23.231 [Validator,Relayer]]\nWarning: Permanently added '67.202.23.231' (ED25519) to the list of known hosts.\n-- Logs begin at Fri 2024-04-05 14:11:43 UTC, end at Fri 2024-04-05 14:30:24 UTC. --\nApr 05 14:15:06 ip-172-31-47-187 systemd[1]: Started AWM Relayer systemd service.\nApr 05 14:15:07 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:07.018Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:66\",\"msg\":\"Initializing awm-relayer\"}\nApr 05 14:15:07 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:07.018Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:71\",\"msg\":\"Set config options.\"}\nApr 05 14:15:07 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:07.018Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:78\",\"msg\":\"Initializing destination clients\"}\nApr 05 14:15:07 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:07.021Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:97\",\"msg\":\"Initializing app request network\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.159Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:309\",\"msg\":\"starting metrics server...\",\"port\":9090}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.160Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:251\",\"msg\":\"Creating relayer\",\"originBlockchainID\":\"fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.160Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:251\",\"msg\":\"Creating relayer\",\"originBlockchainID\":\"2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.160Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/relayer.go:114\",\"msg\":\"Creating relayer\",\"subnetID\":\"11111111111111111111111111111111LpoYY\",\"subnetIDHex\":\"0000000000000000000000000000000000000000000000000000000000000000\",\"blockchainID\":\"2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6\",\"blockchainIDHex\":\"a2b6b947cf2b9bf6df03c8caab08e38ab951d8b120b9c37265d9be01d86bb170\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.160Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/relayer.go:114\",\"msg\":\"Creating relayer\",\"subnetID\":\"giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML\",\"subnetIDHex\":\"5a2e2d87d74b4ec62fdd6626e7d36a44716484dfcc721aa4f2168e8a61af63af\",\"blockchainID\":\"fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p\",\"blockchainIDHex\":\"582fc7bd55472606c260668213bf1b6d291df776c9edf7e042980a84cce7418a\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.171Z\",\"logger\":\"awm-relayer\",\"caller\":\"evm/subscriber.go:247\",\"msg\":\"Successfully subscribed\",\"blockchainID\":\"2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.171Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/relayer.go:161\",\"msg\":\"processed-missed-blocks set to false, starting processing from chain head\",\"blockchainID\":\"2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.172Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/message_relayer.go:662\",\"msg\":\"Updating latest processed block in database\",\"relayerID\":\"0xea06381426934ec1800992f41615b9d362c727ad542f6351dbfa7ad2849a35bf\",\"latestBlock\":6}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.173Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/message_relayer.go:662\",\"msg\":\"Updating latest processed block in database\",\"relayerID\":\"0x175e14327136d57fe22d4bdd295ff14bea8a7d7ab1884c06a4d9119b9574b9b3\",\"latestBlock\":6}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.173Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:272\",\"msg\":\"Created relayer\",\"blockchainID\":\"2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.173Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:295\",\"msg\":\"Relayer initialized. Listening for messages to relay.\",\"originBlockchainID\":\"2EfJg86if9Ka5Ag73JRfoqWz4EGuFwtemaNf4XiBBpUW4YngS6\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.178Z\",\"logger\":\"awm-relayer\",\"caller\":\"evm/subscriber.go:247\",\"msg\":\"Successfully subscribed\",\"blockchainID\":\"fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.178Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/relayer.go:161\",\"msg\":\"processed-missed-blocks set to false, starting processing from chain head\",\"blockchainID\":\"fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p\"}\nApr 05 14:15:08 ip-172-31-47-187 awm-relayer[6886]: {\"level\":\"info\",\"timestamp\":\"2024-04-05T14:15:08.179Z\",\"logger\":\"awm-relayer\",\"caller\":\"relayer/message_relayer.go:662\",\"msg\":\"Updating latest processed block in database\",\"relayerID\":\"0xe584ccc0df44506255811f6b54375e46abd5db40a4c84fd9235a68f7b69c6f06\",\"latestBlock\":6}\n```\n\n----------------------------------------\n\nTITLE: Exporting Avalanche Node Configuration\nDESCRIPTION: Command to export cluster configuration and node settings to a file or stdout. Can optionally include sensitive information like keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_98\n\nLANGUAGE: bash\nCODE:\n```\navalanche node export [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vertex Details in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint fetches details of a specific vertex in a blockchain of the Avalanche mainnet. It requires the blockchain ID and vertex hash as path parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM/vertices/vertexHash \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Frontend ERC-20 Balance Fetching Implementation\nDESCRIPTION: Frontend function to fetch ERC-20 balances by calling the backend API endpoints. Retrieves block height and token balances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC20Balances = async (address: string) => {\n    const blockResult = await fetch(\"api/balance?method=getBlockHeight\");\n    const blockNumber = await blockResult.json();\n    const balanceResult = await fetch(\"api/balance?method=listErc20Balances&address=\" + address + \"&blockNumber=\" + blockNumber);\n    const balances = await balanceResult.json();\n    return balances as Erc20TokenBalance[];\n};\n```\n\n----------------------------------------\n\nTITLE: Allocating AVAX Balance for Validator - Avalanche CLI - Bash\nDESCRIPTION: Displays the CLI prompt for specifying the amount of AVAX to allocate to the new validator. The provided value represents the funds the validator will use for ongoing participation and transaction fees on P-Chain. This prompt is part of the interactive session when adding a validator, and typically expects a numeric input.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nWhat balance would you like to assign to the validator (in AVAX)?: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche Account\nDESCRIPTION: Creates a new account/key pair using the Avalanche CLI\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/03-transfer-native-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche key create myAddress\n```\n\n----------------------------------------\n\nTITLE: Remote Content Plugin Configuration Example\nDESCRIPTION: Detailed example of configuring a remote content plugin instance for importing and transforming markdown content from GitHub, including content modification and metadata addition.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/editing-guides/remote-github-content-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    \"docusaurus-plugin-remote-content\",\n    {\n      name: \"awm-overview\",\n      sourceBaseUrl:\n        \"https://raw.githubusercontent.com/ava-labs/avalanchego/master/vms/platformvm/warp/\",\n      documents: [\"README.md\"],\n      outDir: \"docs/build/cross-chain/awm/\",\n      modifyContent(filename, content) {\n        if (filename.includes(\"README\")) {\n          const updatedContent = replaceRelativeLinks(\n            content,\n            \"https://github.com/ava-labs/avalanchego/tree/master/vms/platformvm/warp/\"\n          );\n          return {\n            filename: \"deep-dive.md\",\n            content: `---\ntags: [Avalanche Warp Messaging, AWM, cross-Avalanche L1 Communication, Cross-Chain Communication]\ndescription: Avalanche Warp Messaging (AWM) provides a primitive for cross-Avalanche L1 communication on the Avalanche Network.\nkeywords: [ docs, documentation, avalanche, awm, cross-Avalanche L1 communication, cross-chain, cross-chain communication ]\nsidebar_label: Deep Dive\n---\n\n${updatedContent}`,\n          };\n        }\n        return undefined;\n      },\n    },\n  ]\n```\n\n----------------------------------------\n\nTITLE: Disabling Rewards and Burning Fees in RewardManager\nDESCRIPTION: JSON configuration to disable rewards and start burning fees. This is achieved by providing an empty initialRewardConfig object in the rewardManagerConfig.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/default-precompiles/rewardmanager.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewardManagerConfig\": {\n    \"blockTimestamp\": 0,\n    \"initialRewardConfig\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pong Message in Avalanche Protocol\nDESCRIPTION: The Pong message is sent in response to a Ping. Note that the uptime fields are deprecated as this information is now sent in Ping messages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Pong {\n  uint32 uptime = 1; // Deprecated: uptime is now sent in Ping\n  repeated SubnetUptime subnet_uptimes = 2; // Deprecated: uptime is now sent in Ping\n}\n```\n\n----------------------------------------\n\nTITLE: Running AvalancheJS TypeScript Scripts\nDESCRIPTION: Command to run TypeScript scripts in the AvalancheJS repository using Node.js with ts-node/esm loader.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode --loader ts-node/esm path/script_name.ts\n```\n\n----------------------------------------\n\nTITLE: Saving ERC-20 Token Contract Address as Environment Variable\nDESCRIPTION: This command exports the deployed ERC-20 token contract address as an environment variable for later use. Replace '0x...' with the actual contract address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/02-deploy-erc-20-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_C_CHAIN=0x...\n```\n\n----------------------------------------\n\nTITLE: Monitoring Service Status\nDESCRIPTION: Example output of AvalancheGo service status showing running state and logs\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsocopower@avalanche-node-01:~$ sudo systemctl status avalanchego\n● avalanchego.service - Avalanche Node service\n     Loaded: loaded (/etc/systemd/system/avalanchego.service; enabled; vendor p>\n     Active: active (running) since Tue 2023-08-29 23:14:45 UTC; 5h 46min ago\n   Main PID: 2226 (avalanchego)\n      Tasks: 27 (limit: 38489)\n     Memory: 8.7G\n        CPU: 5h 50min 31.165s\n     CGroup: /system.slice/avalanchego.service\n             └─2226 /usr/local/bin/avalanchego/./avalanchego --network-id=fuji\n\nAug 30 03:02:50 avalanche-node-01 avalanchego[2226]: INFO [08-30|03:02:50.685] >\nAug 30 03:02:51 avalanche-node-01 avalanchego[2226]: INFO [08-30|03:02:51.185] >\nAug 30 03:03:09 avalanche-node-01 avalanchego[2226]: [08-30|03:03:09.380] INFO >\nAug 30 03:03:23 avalanche-node-01 avalanchego[2226]: [08-30|03:03:23.983] INFO >\nAug 30 03:05:15 avalanche-node-01 avalanchego[2226]: [08-30|03:05:15.192] INFO >\nAug 30 03:05:15 avalanche-node-01 avalanchego[2226]: [08-30|03:05:15.237] INFO >\nAug 30 03:05:15 avalanche-node-01 avalanchego[2226]: [08-30|03:05:15.238] INFO >\nAug 30 03:05:19 avalanche-node-01 avalanchego[2226]: [08-30|03:05:19.809] INFO >\nAug 30 03:05:19 avalanche-node-01 avalanchego[2226]: [08-30|03:05:19.809] INFO >\nAug 30 05:00:47 avalanche-node-01 avalanchego[2226]: [08-30|05:00:47.001] INFO\n```\n\n----------------------------------------\n\nTITLE: Handling Avalanche Key Transfer Recovery Errors via CLI in Bash\nDESCRIPTION: This Bash snippet illustrates a typical error message emitted by the Avalanche CLI during partial failures in the 'key transfer' operation, for instance due to network issues. The error output instructs the user to provide an extra argument '--receive-recovery-step 1' to resume the operation. This message is a built-in part of the CLI error-handling, aiding users in recovery without data loss.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nERROR: restart from this step by using the same command with extra arguments: --receive-recovery-step 1\n```\n\n----------------------------------------\n\nTITLE: Adding Balance Operations in Go\nDESCRIPTION: Implements function to add balance to an account with creation control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc AddBalance(\n\tctx context.Context,\n\tmu state.Mutable,\n\taddr codec.Address,\n\tamount uint64,\n\tcreate bool,\n) (uint64, error) {\n\tkey, bal, exists, err := getBalance(ctx, mu, addr)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tif !exists && !create {\n\t\treturn 0, nil\n\t}\n\tnbal, err := smath.Add(bal, amount)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\n\t\t\t\"%w: could not add balance (bal=%d, addr=%v, amount=%d)\",\n\t\t\tErrInvalidBalance,\n\t\t\tbal,\n\t\t\taddr,\n\t\t\tamount,\n\t\t)\n\t}\n\treturn nbal, setBalance(ctx, mu, key, nbal)\n}\n```\n\n----------------------------------------\n\nTITLE: Node ID Request\nDESCRIPTION: CURL command to retrieve the node's ID via the info.getNodeID API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://127.0.0.1:9650/ext/info' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeID\",\n    \"params\" :{\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Querying Avalanche L1 and Teleporter Deployment Information - Bash\nDESCRIPTION: This bash snippet uses the Avalanche CLI to query and print detailed information about a Teleporter-enabled Avalanche L1, including RPC endpoints, blockchain, network identifiers, and Teleporter contract addresses. Required dependencies are a running devnet with at least one deployed Teleporter-enabled subnet. Input parameter is the chain name (e.g., <chain1>), and output is a formatted information block listing key deployment data for operational or diagnostic use. Output is informational and limited to the available fields exposed by avalanche blockchain describe.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-devnet.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe <chain1>\n\n _____       _        _ _\n|  __ \\     | |      (_) |\n| |  | | ___| |_ __ _ _| |___\n| |  | |/ _ \\ __/ _  | | / __|\n| |__| |  __/ || (_| | | \\__ \\\n|_____/ \\___|\\__\\__,_|_|_|___/\n\n+--------------------------------+----------------------------------------------------------------------------------------+\n|           PARAMETER            |                               VALUE                                                    |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Blockchain Name                    | chain1                                                                                 |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| ChainID                        | 1                                                                                      |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Token Name                     | TOKEN1 Token                                                                           |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Token Symbol                   | TOKEN1                                                                                 |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| VM Version                     | v0.6.3                                                                                 |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| VM ID                          | srEXiWaHjFEgKSgK2zBgnWQUVEy2MZA7UUqjqmBSS7MZYSCQ5                                      |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Cluster <devnetName> SubnetID  | giY8tswWgZmcAWzPkoNrmjjrykited7GJ9799SsFzTiq5a1ML                                      |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Cluster <devnetName> RPC URL   | http://67.202.23.231:9650/ext/bc/fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p/rpc |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Cluster <devnetName>           | fqcM24LNb3kTV7KD1mAvUJXYy5XunwP8mrE44YuNwPjgZHY6p                                      |\n| BlockchainID                   |                                                                                        |\n+                                +----------------------------------------------------------------------------------------+\n|                                | 0x582fc7bd55472606c260668213bf1b6d291df776c9edf7e042980a84cce7418a                     |\n|                                |                                                                                        |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Cluster <devnetName> Teleporter| 0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf                                             |\n| Messenger Address              |                                                                                        |\n+--------------------------------+----------------------------------------------------------------------------------------+\n| Cluster <devnetName> Teleporter| 0xb623C4495220C603D0A939D32478F55891a61750                                             |\n| Registry Address               |                                                                                        |\n+--------------------------------+----------------------------------------------------------------------------------------+\n...\n```\n\n----------------------------------------\n\nTITLE: Assigning Values within a Static Memory Array in a Function - Solidity\nDESCRIPTION: Shows how to assign a value via index within a dynamic memory array in a function. Demonstrates declaring a temporary uint[] memory array, and assigning to index 7. Inputs include the array and index; output is the updated array in function memory. Note that array 'arr' is not initialized to any length, which may cause issues.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction test() public {\n        uint[] memory arr;\n        arr[7] = 4;\n    }\n```\n\n----------------------------------------\n\nTITLE: Selecting Deployment Target for VM Upgrade (CLI Output)\nDESCRIPTION: This output is displayed by the Avalanche-CLI upgrade wizard after running the `avalanche blockchain upgrade vm` command. It prompts the user to choose whether to update the configuration for future deployments or upgrade an existing local deployment. The selection determines if the change affects only future deployments or the currently running local instance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-virtual-machine.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? What deployment would you like to upgrade:\n  ▸ Update config for future deployments\n    Existing local deployment\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Token Options with Avalanche CLI - Bash\nDESCRIPTION: This CLI snippet illustrates the interactive prompt that appears when creating a new Avalanche blockchain using the CLI. It shows how users can opt out of default blockchain configuration values, enabling the specification of custom blockchain parameters such as ChainID and token symbol. The snippet simulates the user selecting the 'I don\\'t want to use default values' option, which allows for more granular control over the blockchain\\'s native token and other settings. No external code dependencies are required; the code is intended to be run within the Avalanche CLI tool. Inputs involve user selections at the prompt; output is the CLI\\'s updated configuration process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/04-configure-native-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n? Do you want to use default values for the Blockchain configuration?: \n    I want to use defaults for a test environment\n    I want to use defaults for a production environment\n  \\u25B8 I don't want to use default values\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Starting AvalancheGo on Fuji Testnet\nDESCRIPTION: Launches AvalancheGo node on the Fuji Testnet network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/avalanchego\n./build/avalanchego --network-id=fuji\n```\n\n----------------------------------------\n\nTITLE: Example Subnet-EVM Configuration Structure\nDESCRIPTION: Complete configuration schema showing all available options for Subnet-EVM. These settings control various aspects like API enablement, gas caps, cache sizes, pruning behavior, and transaction pool management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/subnet-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"airdrop\": \"path/to/airdrop/file\",\n  \"snowman-api-enabled\": false,\n  \"admin-api-enabled\": false,\n  \"admin-api-dir\": \"\",\n  \"warp-api-enabled\": false,\n  \"validators-api-enabled\": true,\n  \"eth-apis\": [\"eth\", \"eth-filter\", \"net\", \"web3\", \"internal-eth\", \"internal-blockchain\", \"internal-transaction\"],\n  \"continuous-profiler-dir\": \"\",\n  \"continuous-profiler-frequency\": \"15m\",\n  \"continuous-profiler-max-files\": 5,\n  \"rpc-gas-cap\": 50000000,\n  \"rpc-tx-fee-cap\": 100.0,\n  \"trie-clean-cache\": 512,\n  \"trie-dirty-cache\": 512,\n  \"trie-dirty-commit-target\": 20,\n  \"trie-prefetcher-parallelism\": 16,\n  \"snapshot-cache\": 256,\n  \"preimages-enabled\": false,\n  \"snapshot-wait\": false,\n  \"snapshot-verification-enabled\": false,\n  \"pruning-enabled\": true,\n  \"accepted-queue-limit\": 64,\n  \"commit-interval\": 4096,\n  \"allow-missing-tries\": false,\n  \"populate-missing-tries-parallelism\": 1024,\n  \"prune-warp-db-enabled\": false,\n  \"metrics-expensive-enabled\": true,\n  \"tx-pool-price-limit\": 1,\n  \"tx-pool-price-bump\": 10,\n  \"tx-pool-account-slots\": 16,\n  \"tx-pool-global-slots\": 5120,\n  \"tx-pool-account-queue\": 64,\n  \"tx-pool-global-queue\": 1024,\n  \"tx-pool-lifetime\": \"10m\",\n  \"local-txs-enabled\": false,\n  \"api-max-duration\": \"0\",\n  \"ws-cpu-refill-rate\": \"0\",\n  \"ws-cpu-max-stored\": \"0\",\n  \"api-max-blocks-per-request\": 0,\n  \"allow-unfinalized-queries\": false,\n  \"allow-unprotected-txs\": false,\n  \"keystore-directory\": \"\",\n  \"keystore-external-signer\": \"\",\n  \"keystore-insecure-unlock-allowed\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Network Selection for Transfer\nDESCRIPTION: Shows the interactive prompt from the `avalanche key transfer` command asking the user to select the network (Mainnet, Fuji, or Local Network) for the transfer operation. User selects Mainnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Network to use:\n  ▸ Mainnet\n    Fuji\n    Local Network\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic NumberStorage Smart Contract in Solidity\nDESCRIPTION: This Solidity code defines a simple smart contract named `NumberStorage`. It includes a state variable `num` to store an unsigned integer, a function `getNum` to retrieve the stored number, and a function `setNum` to update it. The contract requires Solidity version 0.8.0 or higher and is licensed under MIT.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/06-build-basic-smart-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n​\ncontract NumberStorage {\n \n    uint256 num;\n  \n    function getNum() public view returns(uint) {\n        return num; \n    }\n  \n    function setNum(uint _num) public {\n        num = _num;\n    }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: AvalancheGo Node Configuration\nDESCRIPTION: Example of node configuration JSON file showing IP resolution and HTTP host settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"public-ip-resolution-service\": \"opendns\",\n  \"http-host\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level API Call Example in Shell\nDESCRIPTION: This curl command shows how to make an API call to set the log level for the C-Chain using the admin API. It includes the desired log level as a parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.setLogLevel\",\n    \"params\": {\n        \"level\":\"info\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/admin\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for NodeID Request\nDESCRIPTION: This is an example of the JSON response received when requesting the NodeID. The NodeID is found in the 'result' object and should be copied for future reference.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"jsonrpc\":\"2.0\",\"result\":{\"nodeID\":\"NodeID-Lve2PzuCvXZrqn8Stqwy9vWZux6VyGUCR\"},\"id\":1}\n```\n\n----------------------------------------\n\nTITLE: Removing a Node via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to remove (stop) a node named 'node5' from the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control remove-node node5 \\\n--request-timeout=3m \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\" \\\n```\n\n----------------------------------------\n\nTITLE: Export Command Flags for Avalanche CLI\nDESCRIPTION: Flags available for the subnet export command, including options for specifying custom VM configurations and output file path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_139\n\nLANGUAGE: bash\nCODE:\n```\n--custom-vm-branch string          custom vm branch\n--custom-vm-build-script string    custom vm build-script\n--custom-vm-repo-url string        custom vm repository url\n-h, --help help                    for export\n-o, --output string                write the export data to the provided file path\n--config string                    config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                 log level for the application (default \"ERROR\")\n--skip-update-check skip           check for new versions\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Blockchain Join Command (Bash)\nDESCRIPTION: Shows the usage syntax for the `avalanche blockchain join` command. This command configures a local validator node to start validating a specified blockchain/subnet by updating its configuration, requiring access to the validator machine.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain join [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Managing Relayer Execution\nDESCRIPTION: Commands for stopping and starting the Teleporter relayer service in local environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer stop --local\n\navalanche interchain relayer start --local\n```\n\n----------------------------------------\n\nTITLE: Layout Specification Table for Unsigned Add Validator TX - Text\nDESCRIPTION: This is a visual summary table for the serialized layout of an Unsigned Add Validator TX. The table defines the byte order and relative offsets for the transaction's base, validator, stake, rewards owner, and share fields. This format enforces field order and shows which fields have dynamic size based on nested objects. No code or execution occurs; it's intended for serialization standard reference.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n+---------------+-----------------------+-----------------------------------------+\n| base_tx       : BaseTx                |                     size(base_tx) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| validator     : Validator             |                                44 bytes |\n+---------------+-----------------------+-----------------------------------------+\n| stake         : Stake                 |                  size(LockedOuts) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| rewards_owner : SECP256K1OutputOwners |               size(rewards_owner) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| shares        : Shares                |                                 4 bytes |\n+---------------+-----------------------+-----------------------------------------+\n              | 48 + size(stake) + size(rewards_owner) + size(base_tx) bytes |\n              +--------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Adding SSH Key Permissions\nDESCRIPTION: Commands to add the private key to SSH agent and set proper read-only permissions\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-add ~/.ssh/avalanche.pem; chmod 400 ~/.ssh/avalanche.pem\n```\n\n----------------------------------------\n\nTITLE: EWOQ Test Private Key Value\nDESCRIPTION: This string is the private key (56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027) associated with the EWOQ test address. It is publicly known and should only be used for development and testing. Importing this key into a wallet grants control over the corresponding test address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/import-ewoq-account.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027\n```\n\n----------------------------------------\n\nTITLE: Viewing AWM Relayer Logs\nDESCRIPTION: Command to view the logs of the AWM Relayer service on a specific node, showing initialization and message relay status.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-devnet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh i-0f1815c016b555fcc \"journalctl -u awm-relayer --no-pager\"\n```\n\n----------------------------------------\n\nTITLE: Basic Display of Ethereum Address with Address Component (TypeScript/React)\nDESCRIPTION: Shows usage of the Address component to render a full Ethereum address. Only the address prop is required. Expected input is a valid Ethereum address string, and the output is the plain address displayed. Throws if the address is invalid or absent.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/address.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Address address=\"0x1234567890123456789012345678901234567890\" />\n// Output: 0x1234567890123456789012345678901234567890\n```\n\n----------------------------------------\n\nTITLE: Listing Latest Blocks in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of the latest blocks in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/11111111111111111111111111111111LpoYY/blocks \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Implementing API Route Handler for Block Explorer (TSX)\nDESCRIPTION: Server-side API handler that processes incoming requests and routes them to the appropriate function based on the method parameter. It handles requests for recent transactions and blocks, returning the results as JSON or appropriate error responses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/02-understanding-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const method = searchParams.get('method')\n  try {\n    let result\n    switch (method) {\n      case 'getRecentTransactions':\n        result = await getRecentTransactions()\n        break\n      case 'getRecentBlocks':\n        result = await getRecentBlocks()\n        break\n      default:\n        return NextResponse.json({ error: 'Invalid method' }, { status: 400 })\n    }\n    return NextResponse.json(result)\n  } catch (error) {\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming AVAX Transfer Details in Avalanche CLI (zsh)\nDESCRIPTION: Displays the final confirmation prompt from the `avalanche key transfer` command. It summarizes the transaction details, including the amount, source address, destination address, and transaction fee, asking the user for final confirmation ('Yes' or 'No') before executing the transfer.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_8\n\nLANGUAGE: zsh\nCODE:\n```\nthis operation is going to:\n- send 100.000000000 AVAX from P-avax1gmuqt8xg9j4h88kj3hyprt23nf50azlfg8txn2 to destination address P-avax1f630gvct4ht35ragcheapnn2n5cv2tkmq73ec0\n- take a fee of 0.001000000 AVAX from source address P-avax1gmuqt8xg9j4h88kj3hyprt23nf50azlfg8txn2\n? Confirm transfer:\n    No\n  ▸ Yes\n```\n\n----------------------------------------\n\nTITLE: Hardhat Configuration for Avalanche Network Deployment and Verification\nDESCRIPTION: TypeScript configuration file (hardhat.config.ts) for Hardhat, setting up network configurations for Avalanche Fuji testnet and mainnet, as well as task definitions for account management and balance checking.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { task } from \"hardhat/config\"\nimport { SignerWithAddress } from \"@nomiclabs/hardhat-ethers/signers\"\nimport { BigNumber } from \"ethers\"\nimport \"@typechain/hardhat\"\nimport \"@nomiclabs/hardhat-ethers\"\nimport \"@nomiclabs/hardhat-waffle\"\nimport \"hardhat-gas-reporter\"\nimport \"@nomiclabs/hardhat-etherscan\"\nimport { MNEMONIC, APIKEY } from \"./.env.json\"\n\n// When using the hardhat network, you may choose to fork Fuji or Avalanche Mainnet\n// This will allow you to debug contracts using the hardhat network while keeping the current network state\n// To enable forking, turn one of these booleans on, and then run your tasks/scripts using ``--network hardhat``\n// For more information go to the hardhat guide\n// https://hardhat.org/hardhat-network/\n// https://hardhat.org/guides/mainnet-forking.html\nconst FORK_FUJI = false\nconst FORK_MAINNET = false\nconst forkingData = FORK_FUJI\n  ? {\n      url: \"https://api.avax-test.network/ext/bc/C/rpc\",\n    }\n  : FORK_MAINNET\n  ? {\n      url: \"https://api.avax.network/ext/bc/C/rpc\",\n    }\n  : undefined\n\ntask(\n  \"accounts\",\n  \"Prints the list of accounts\",\n  async (args, hre): Promise<void> => {\n    const accounts: SignerWithAddress[] = await hre.ethers.getSigners()\n    accounts.forEach((account: SignerWithAddress): void => {\n      console.log(account.address)\n    })\n  }\n)\n\ntask(\n  \"balances\",\n  \"Prints the list of AVAX account balances\",\n  async (args, hre): Promise<void> => {\n    const accounts: SignerWithAddress[] = await hre.ethers.getSigners()\n    for (const account of accounts) {\n      const balance: BigNumber = await hre.ethers.provider.getBalance(\n        account.address\n      )\n      console.log(`${account.address} has balance ${balance.toString()}`)\n    }\n  }\n)\nexport default {\n  etherscan: {\n    // Your don't need an API key for Snowtrace\n  },\n\n  solidity: {\n    compilers: [\n      {\n        version: \"0.8.0\",\n      },\n      {\n        version: \"0.8.10\",\n      },\n    ],\n  },\n  networks: {\n    hardhat: {\n      gasPrice: 225000000000,\n      chainId: 43114, //Only specify a chainId if we are not forking\n      // forking: {\n      //   url: 'https://api.avax.network/ext/bc/C/rpc',\n      // },\n    },\n    fuji: {\n      url: \"https://api.avax-test.network/ext/bc/C/rpc\",\n      gasPrice: 225000000000,\n      chainId: 43113,\n      accounts: { mnemonic: MNEMONIC },\n    },\n    mainnet: {\n      url: \"https://api.avax.network/ext/bc/C/rpc\",\n      gasPrice: 225000000000,\n      chainId: 43114,\n      accounts: { mnemonic: MNEMONIC },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Transfer Output in Protocol Buffers\nDESCRIPTION: Provides a Protocol Buffers message definition for the SECP256K1 Transfer output, specifying field types and sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1TransferOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint64 amount = 2;            // 08 bytes\n    uint64 locktime = 3;          // 08 bytes\n    uint32 threshold = 4;         // 04 bytes\n    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Subnet-EVM Plugin Binary with wget\nDESCRIPTION: Command to download the Subnet-EVM plugin binary release archive from GitHub using wget. This example downloads version 0.2.9 for Linux with AMD64 architecture.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/considerations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/ava-labs/subnet-evm/releases/download/v0.2.9/subnet-evm_0.2.9_linux_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Validator Struct in ValidatorManager Contract\nDESCRIPTION: This struct defines the structure for storing validator information. It includes fields for status, nodeID, weights, nonces, and time-related data. This is used to track the state and properties of each validator in the system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Validator {\n    ValidatorStatus status;\n    bytes nodeID;\n    uint64 startingWeight;\n    uint64 sentNonce;\n    uint64 receivedNonce;\n    uint64 weight;\n    uint64 startTime;\n    uint64 endTime;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Relayer Fee in Solidity\nDESCRIPTION: Example calculation of the minimum fee to incentivize a relayer to deliver a cross-chain message. This snippet demonstrates how to convert the calculated fee from nTLP to weiTLP for use in Solidity contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/03-determining-the-fee-amount.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// Amount = 550,000 nTLP\n// Amount = 550,000,000,000,000 weiTLP\n```\n\n----------------------------------------\n\nTITLE: Remove Validator TX Protobuf Definition\nDESCRIPTION: Protocol buffer message definition for remove validator transaction specifying the required fields and their sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nmessage RemoveSubnetValidatorTx {\n    BaseTx base_tx = 1;         // size(base_tx)\n    string node_id = 2;         // 20 bytes\n    SubnetID subnet_id = 3;     // 32 bytes\n    SubnetAuth subnet_auth = 4; // 04 bytes + len(sig_indices)\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Relayer Configuration File in Avalanche-CLI\nDESCRIPTION: Command to open the automatically created relayer configuration JSON file using the code editor.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/04-relayer-configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/.avalanche-cli/runs/network_xxxx_xxxx/awm-relayer-config.json\n```\n\n----------------------------------------\n\nTITLE: Encoding an IPv6 Address in Avalanche\nDESCRIPTION: Demonstrates how IPv6 addresses are encoded in their native 16-byte format, followed by a 2-byte port number.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    \"[2001:0db8:ac10:fe01::]:12345\"\nResults in:\n    [\n        0x20, 0x01, 0x0d, 0xb8, 0xac, 0x10, 0xfe, 0x01,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x30, 0x39,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Enhanced TestCalculatorRun with Fuzz Testing in Go\nDESCRIPTION: This enhanced version of TestCalculatorRun adds fuzz testing capabilities. It first runs the predefined tests, then generates and tests 1,000 random input pairs for addition operations, validating each result against the expected outcome.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/10-fuzz-tests.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// TestCalculatorRun tests the Run function of the precompile contract.\nfunc TestCalculatorRun(t *testing.T) {\n    // Run tests.\n    for name, test := range tests {\n        t.Run(name, func(t *testing.T) {\n            test.Run(t, Module, state.NewTestStateDB(t))\n        })\n    }\n    // Defining own test cases here\n    N := 1_000\n    n := new(big.Int).Exp(big.NewInt(2), big.NewInt(int64(128)), nil)\n\n    // Fuzzing N times\n    for i := 0; i < N; i++ {\n        // Adding randomization test here\n        randomInt1, err := rand.Int(rand.Reader, n)\n        randomInt2, err := rand.Int(rand.Reader, n)\n        // Expected outcome\n        expectedRandOutcome := common.LeftPadBytes(big.NewInt(0).Add(randomInt1, randomInt2).Bytes(), common.HashLength)\n\n        // Pack add input\n        randTestInput := AddInput{randomInt1, randomInt2}\n        randInput, err := PackAdd(randTestInput)\n        require.NoError(t, err)\n\n        randTest := testutils.PrecompileTest{\n            Caller:      common.Address{1},\n            Input:       randInput,\n            SuppliedGas: AddGasCost,\n            ReadOnly:    true,\n            ExpectedRes: expectedRandOutcome,\n        }\n\n        t.Run(\"Testing random sum!\", func(t *testing.T) {\n            randTest.Run(t, Module, state.NewTestStateDB(t))\n        })\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Node Names and Accessing Nodes - Avalanche Network Runner - Go\nDESCRIPTION: This Go snippet retrieves all node names from the running network using GetNodeNames, then accesses the first node by name using GetNode. It demonstrates fetching network membership details and direct node access for further API or status calls. Requires an initialized network instance. Typical use case: querying topology for programmatic orchestration or testing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_27\n\nLANGUAGE: go\nCODE:\n```\nnames, _ := network.GetNodeNames()\nnode, _ := network.GetNode(names[0])\n```\n\n----------------------------------------\n\nTITLE: Using TokenInput with Balances and Custom Styling in TSX\nDESCRIPTION: Demonstrates using the `TokenInput` component with the `showBalances` prop set to true to display user token balances. It also shows how to apply custom styling using Tailwind CSS classes via the `className` prop. Requires state variables (`currentToken`, `availableTokens`) and a handler (`handleTokenChange`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/token-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<TokenInput \n  selected={currentToken}\n  chain_id={43114}\n  list={availableTokens}\n  onSelectionChanged={handleTokenChange}\n  showBalances={true}\n  className=\"w-full max-w-sm\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Inputting Amount and Destination Address in Avalanche CLI (zsh)\nDESCRIPTION: Displays the interactive prompts from the `avalanche key transfer` command where the user specifies the amount of AVAX to be transferred (in whole AVAX units) and the recipient's address (a P-Chain address in this example).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\n✗ Amount to send (AVAX units): 100\n✗ Destination address: P-avax1zgjx8zj7z7zj7z7zj7z7zj7z7zj7zj7zj7zj7e\n```\n\n----------------------------------------\n\nTITLE: Importing Subnets from Files in Avalanche CLI\nDESCRIPTION: Command for importing blockchain configurations from files or git repositories. Can be used with a file path or through an interactive wizard.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_142\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet import file [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Initial Plugin Main File without Registered Precompiles in Go\nDESCRIPTION: The starting point plugin/main.go file that shows the structure for registering precompiles but doesn't have any precompiles registered yet. This file initializes the Precompile-EVM plugin and includes a placeholder comment for adding precompiles.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/06-register-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// (c) 2019-2023, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/ava-labs/avalanchego/version\"\n    \"github.com/ava-labs/subnet-evm/plugin/evm\"\n    \"github.com/ava-labs/subnet-evm/plugin/runner\"\n\n    // Each precompile generated by the precompilegen tool has a self-registering init function\n    // that registers the precompile with the subnet-evm. Importing the precompile package here\n    // will cause the precompile to be registered with the subnet-evm.\n    // ADD YOUR PRECOMPILE HERE\n    //_ \"github.com/ava-labs/precompile-evm/{yourprecompilepkg}\"\n)\n\nconst Version = \"v0.1.4\"\n\nfunc main() {\n    versionString := fmt.Sprintf(\"Precompile-EVM/%s Avalanche L1-EVM/%s [AvalancheGo=%s, rpcchainvm=%d]\", Version, evm.Version, version.Current, version.RPCChainVMProtocol)\n    runner.Run(versionString)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Etna Upgrade Motivation Component\nDESCRIPTION: JSX/MDX component usage to render the imported Etna upgrade motivation content.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avalanche-fundamentals/03-multi-chain-architecture-intro/03a-etna-upgrade.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<EtnaUpgradeMotivation />\n```\n\n----------------------------------------\n\nTITLE: Specifying L1 Validator Remaining Balance Owner (Plaintext)\nDESCRIPTION: The `remainingBalanceOwner` parameter is specified within the `RegisterL1ValidatorTx`. It designates the P-Chain address that will receive any unused portion of the validator's balance when the validator is explicitly stopped using the `DisableL1ValidatorTx`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/l1-validator-fee.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nremainingBalanceOwner\n```\n\n----------------------------------------\n\nTITLE: Viewing Raw Genesis File Configuration in Avalanche Blockchain\nDESCRIPTION: Example output of the 'avalanche blockchain describe' command with the --genesis flag, showing the complete genesis configuration including chain settings, fee configuration, warp settings, and initial account allocations. The genesis file contains important blockchain initialization parameters like chain ID, gas limits, and pre-allocated accounts with their balances and contract deployments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/view-avalanche-l1s.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> avalanche blockchain describe myblockchain --genesis\n\n{\n    \"config\": {\n        \"berlinBlock\": 0,\n        \"byzantiumBlock\": 0,\n        \"chainId\": 111,\n        \"constantinopleBlock\": 0,\n        \"eip150Block\": 0,\n        \"eip155Block\": 0,\n        \"eip158Block\": 0,\n        \"feeConfig\": {\n            \"gasLimit\": 12000000,\n            \"targetBlockRate\": 2,\n            \"minBaseFee\": 25000000000,\n            \"targetGas\": 60000000,\n            \"baseFeeChangeDenominator\": 36,\n            \"minBlockGasCost\": 0,\n            \"maxBlockGasCost\": 1000000,\n            \"blockGasCostStep\": 200000\n        },\n        \"homesteadBlock\": 0,\n        \"istanbulBlock\": 0,\n        \"londonBlock\": 0,\n        \"muirGlacierBlock\": 0,\n        \"petersburgBlock\": 0,\n        \"warpConfig\": {\n            \"blockTimestamp\": 1734549536,\n            \"quorumNumerator\": 67,\n            \"requirePrimaryNetworkSigners\": true\n        }\n    },\n    \"nonce\": \"0x0\",\n    \"timestamp\": \"0x67632020\",\n    \"extraData\": \"0x\",\n    \"gasLimit\": \"0xb71b00\",\n    \"difficulty\": \"0x0\",\n    \"mixHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n    \"alloc\": {\n        \"001cbe3650fad190d9ccbd57b289124f5131aa57\": {\n            \"balance\": \"0x2086ac351052600000\"\n        },\n        \"0c0deba5e0000000000000000000000000000000\": {\n            \"code\": \"<PoA validator manager deployed bytecode>\",\n            \"balance\": \"0x0\",\n            \"nonce\": \"0x1\"\n        },\n        \"0feedc0de0000000000000000000000000000000\": {\n            \"code\": \"<transparent proxy deployed bytecode>\",\n            \"storage\": {\n                \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\": \"0x0000000000000000000000000c0deba5e0000000000000000000000000000000\",\n                \"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\": \"0x000000000000000000000000c0ffee1234567890abcdef1234567890abcdef34\"\n            },\n            \"balance\": \"0x0\",\n            \"nonce\": \"0x1\"\n        },\n        \"8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\": {\n            \"balance\": \"0xd3c21bcecceda1000000\"\n        },\n        \"c0ffee1234567890abcdef1234567890abcdef34\": {\n            \"code\": \"<proxy admin deployed bytecode>\",\n            \"storage\": {\n                \"0x0000000000000000000000000000000000000000000000000000000000000000\": \"0x0000000000000000000000008db97c7cece249c2b98bdc0226cc4c2a57bf52fc\"\n            },\n            \"balance\": \"0x0\",\n            \"nonce\": \"0x1\"\n        }\n    },\n    \"airdropHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"airdropAmount\": null,\n    \"number\": \"0x0\",\n    \"gasUsed\": \"0x0\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    \"baseFeePerGas\": null,\n    \"excessBlobGas\": null,\n    \"blobGasUsed\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Execution Paths for VRF Responses\nDESCRIPTION: Complete contract example showing how to implement different execution paths for VRF responses using enums and conditional processing\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/chainlink-vrf.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n// An example of a consumer contract that relies on a subscription for funding.\n// It shows how to setup multiple execution paths for handling a response.\npragma solidity 0.8.19;\n\nimport {LinkTokenInterface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\";\nimport {IVRFCoordinatorV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\";\nimport {VRFConsumerBaseV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\";\nimport {VRFV2PlusClient} from \"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\";\n\n/**\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n * DO NOT USE THIS CODE IN PRODUCTION.\n */\n\ncontract VRFv2MultiplePaths is VRFConsumerBaseV2Plus {\n\n    // Your subscription ID.\n    uint256 s_subscriptionId;\n\n    // Avalanche Primary Network coordinator.\n    address vrfCoordinatorV2Plus = 0xE40895D055bccd2053dD0638C9695E326152b1A4;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    // For a list of available gas lanes on each network,\n    // see https://docs.chain.link/docs/vrf/v2-5/supported-networks\n    bytes32 keyHash =\n        0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae;\n\n    uint32 callbackGasLimit = 100000;\n\n    // The default is 3, but you can set this higher.\n    uint16 requestConfirmations = 3;\n\n    // For this example, retrieve 1 random value in one request.\n    // Cannot exceed VRFCoordinatorV2_5.MAX_NUM_WORDS.\n    uint32 numWords = 1;\n\n    enum Variable {\n        A,\n        B,\n        C\n    }\n\n    uint256 public variableA;\n    uint256 public variableB;\n    uint256 public variableC;\n\n    mapping(uint256 => Variable) public requests;\n\n    // events\n    event FulfilledA(uint256 requestId, uint256 value);\n    event FulfilledB(uint256 requestId, uint256 value);\n    event FulfilledC(uint256 requestId, uint256 value);\n\n    constructor(uint256 subscriptionId) VRFConsumerBaseV2Plus(vrfCoordinatorV2Plus) {\n        s_vrfCoordinator = IVRFCoordinatorV2Plus(vrfCoordinatorV2Plus);\n        s_subscriptionId = subscriptionId;\n    }\n\n    function updateVariable(uint256 input) public {\n      uint256 requestId = s_vrfCoordinator.requestRandomWords(VRFV2PlusClient.RandomWordsRequest({\n            keyHash: keyHash,\n            subId: s_subscriptionId,\n            requestConfirmations: requestConfirmations,\n            callbackGasLimit: callbackGasLimit,\n            numWords: numWords,\n            extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: true}))\n          })\n        );\n\n        if (input % 2 == 0) {\n            requests[requestId] = Variable.A;\n        } else if (input % 3 == 0) {\n            requests[requestId] = Variable.B;\n        } else {\n            requests[requestId] = Variable.C;\n        }\n    }\n\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal override {\n        Variable variable = requests[requestId];\n        if (variable == Variable.A) {\n            fulfillA(requestId, randomWords[0]);\n        } else if (variable == Variable.B) {\n            fulfillB(requestId, randomWords[0]);\n        } else if (variable == Variable.C) {\n            fulfillC(requestId, randomWords[0]);\n        }\n    }\n\n    function fulfillA(uint256 requestId, uint256 randomWord) private {\n        // execution path A\n        variableA = randomWord;\n        emit FulfilledA(requestId, randomWord);\n    }\n\n    function fulfillB(uint256 requestId, uint256 randomWord) private {\n        // execution path B\n        variableB = randomWord;\n        emit FulfilledB(requestId, randomWord);\n    }\n\n    function fulfillC(uint256 requestId, uint256 randomWord) private {\n        // execution path C\n        variableC = randomWord;\n        emit FulfilledC(requestId, randomWord);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating NFT Transfer Output Binary Encoding with Example\nDESCRIPTION: A comprehensive example showing how an NFT Transfer Output with specific field values is encoded into binary format. Demonstrates the exact byte representation of each field and the complete output.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID    <- 0x0000000b\n    GroupID   <- 0x00003039\n    Payload   <- 0x4e4654205061796c6f6164\n    Locktime  <- 0x000000000000d431\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // TypeID:\n    0x00, 0x00, 0x00, 0x0b,\n    // groupID:\n    0x00, 0x00, 0x30, 0x39,\n    // length of payload:\n    0x00, 0x00, 0x00, 0x0b,\n    // payload:\n    0x4e, 0x46, 0x54, 0x20, 0x50, 0x61, 0x79, 0x6c,\n    0x6f, 0x61, 0x64,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Computing Effective Consumption Rate for Avalanche Staking Rewards\nDESCRIPTION: This LaTeX formula calculates the Effective Consumption Rate used in determining validator rewards, based on minimum and maximum consumption rates and staking period.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/how-to-stake.mdx#2025-04-23_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nEffectiveConsumptionRate = \n\\frac{MinConsumptionRate}{PercentDenominator} \\times \\left(1- \\frac{Staking Period}{Minting Period}\\right) + \\frac{MaxConsumptionRate}{PercentDenominator} \\times \\frac{Staking Period}{Minting Period}\n```\n\n----------------------------------------\n\nTITLE: Deploying SimpleCalculatorReceiverOnSubnet Contract using Forge\nDESCRIPTION: This bash command deploys the SimpleCalculatorReceiverOnSubnet contract to an Avalanche L1 blockchain using the Forge tool. It requires a configured RPC URL and private key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/04-create-simple-calulcator-receiver.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK contracts/interchain-messaging/invoking-functions/SimpleCalculatorReceiverOnSubnet.sol:SimpleCalculatorReceiverOnSubnet --broadcast\n```\n\n----------------------------------------\n\nTITLE: Check Account Balance\nDESCRIPTION: Queries the balance of an address on the custom L1 blockchain using Foundry's cast command\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/03-transfer-native-tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast balance $MYADDRESS --rpc-url myblockchain\n```\n\n----------------------------------------\n\nTITLE: AvalancheJS Installation Commands\nDESCRIPTION: Commands for installing AvalancheJS either by cloning the repository or adding to an existing project\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/node-validator.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanchejs.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @avalabs/avalanchejs\n```\n\n----------------------------------------\n\nTITLE: Generating ABI from Solidity Interface\nDESCRIPTION: Bash commands to compile the Counter interface to an ABI file and rename it appropriately for further use in the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Move to contracts directory\ncd contracts\n\n# Compile ICounter.sol to ABI\nnpx solc@latest --abi ./contracts/interfaces/ICounter.sol -o ./abis --base-path . --include-path ./node_modules\n\n# Rename \nmv ./abis/contracts_interfaces_ICounter_sol_ICounter.abi ./abis/ICounter.abi\n```\n\n----------------------------------------\n\nTITLE: Selecting Custom Fee Configuration via CLI Prompt\nDESCRIPTION: Displays the initial CLI prompt where the user selects how to configure transaction fees. The example highlights choosing the 'Customize fee config' option over predefined profiles (Low, Medium, High throughput) to initiate a detailed fee parameter setup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/10-configure-transaction-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n? How should the transaction fees be configured on your Blockchain?:\n    Low block size    / Low Throughput    12 mil gas per block\n    Medium block size / Medium Throughput 15 mil gas per block (C-Chain's setting)\n    High block size   / High Throughput   20 mil gas per block\n  ▸ Customize fee config\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Example: Deployment Timeout Error Output in Bash\nDESCRIPTION: Shows example terminal output indicating a deployment timeout error (`context deadline exceeded`) when using `avalanche blockchain deploy`. This often occurs if another AvalancheGo instance is running, as Avalanche-CLI supports only one local network at a time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[~]$ avalanche blockchain deploy myblockchain\n\n✔ Local Network\nDeploying [myblockchain] to Local Network\nBackend controller started, pid: 26388, output at: /Users/user/.avalanche-cli/runs/server_20221231_111605/avalanche-cli-backend\nVMs ready.\nStarting network...\n..................................................................................\n..................................................................................\n......Error: failed to query network health: rpc error: code = DeadlineExceeded desc = context deadline exceeded\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring via Avalanche-CLI Prompt\nDESCRIPTION: Shows an example of the interactive prompt from the `avalanche node create` command, asking whether to set up a separate GCP instance dedicated to monitoring the validator nodes. Choosing 'Yes' deploys an additional instance (incurring costs) with Grafana for centralized dashboarding and logging.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-gcp.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  Do you want to set up a separate instance to host monitoring? (This enables you to monitor all your set up instances in one dashboard): \n  ▸ Yes\n    No\n```\n\n----------------------------------------\n\nTITLE: Specifying Node Configurations with CLI - Shell\nDESCRIPTION: This snippet provides an example of how to pass node-specific configuration parameters to a new node using the --node-config flag in the avalanche-network-runner CLI tool. It accepts a JSON string defining AvalancheGo runtime options such as index enabling, admin API access, and peer gossip frequency. The option should be appended to the add-node or similar CLI commands. Limitations: certain flags (like --log-dir, --db-dir) are controlled by the network runner and will be ignored if set here.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n    --node-config '{\"index-enabled\":false, \"api-admin-enabled\":true,\"network-peer-list-gossip-frequency\":\"300ms\"}'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Avalanche Node in Bash\nDESCRIPTION: This bash command demonstrates how to upgrade an Avalanche node to the latest version. It involves running the installer script again, which will update the node software to the most recent release.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/latitude.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh\n```\n\n----------------------------------------\n\nTITLE: Unzipping Avalanche Binary for Linux (ARM64)\nDESCRIPTION: Command to unzip the downloaded Avalanche binary file for Linux ARM64 architecture.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar -xvf avalanchego-linux-arm64-<VERSION>.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Selecting the Virtual Machine Type during L1 Import\nDESCRIPTION: After retrieving basic L1 information (using public APIs if no node URL was provided), this prompt asks the user to specify the type of Virtual Machine (VM) used by the L1 (e.g., Subnet-EVM, Custom). This selection helps the CLI locate the correct VM repository and available versions. Custom VMs might have limited support.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nGetting information from the Fuji network...\nRetrieved information. BlockchainID: 2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt, Name: WAGMI, VMID: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\nUse the arrow keys to navigate: ↓ ↑ → ←\n? What's this VM's type?:\n  ▸ Subnet-EVM\n    Custom\n```\n\n----------------------------------------\n\nTITLE: Resizing Avalanche Cluster Node Resources\nDESCRIPTION: This command changes the amount of CPU, memory, and disk space available for cluster nodes. It allows specification of disk size and node type for the resize operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_111\n\nLANGUAGE: bash\nCODE:\n```\navalanche node resize [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--aws-profile string        aws profile to use (default \"default\")\n--disk-size string          Disk size to resize in Gb (e.g. 1000Gb)\n-h, --help help             for resize\n--node-type string          Node type to resize (e.g. t3.2xlarge)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing Custom YouTube Component - Next.js - JavaScript\nDESCRIPTION: This snippet imports a custom YouTube component from the project's content-design directory for embedding YouTube videos into a Next.js page or component. It assumes the \\'@/components/content-design/youtube\\' path is configured in the jsconfig/tsconfig paths. This import enables the rendering of YouTube videos as React components within the application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/install.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport YouTube from '@/components/content-design/youtube';\n```\n\n----------------------------------------\n\nTITLE: Stopping Load Test with Avalanche-CLI\nDESCRIPTION: This command stops the load test process on the specified load test instance and terminates the instance. It requires the load test name as a parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-loadtest.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche node loadtest stop <loadtestName>\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Transfer\nDESCRIPTION: This command checks the token balances after the transfer, confirming that 100 TOK tokens have been moved from C-Chain to the custom Avalanche L1 subnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-token-bridge.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --local --keys ewoq,blockchain_airdrop --subnets c,testblockchain --tokens 0x5DB9A7629912EBF95876228C24A848de0bfB43A9,0x7DD1190e6F6CE8eE13C08F007FdAEE2f881B45D0\n```\n\n----------------------------------------\n\nTITLE: Serializing Avalanche Base TX to Raw Bytes - Text\nDESCRIPTION: This snippet demonstrates how a Base TX is serialized to a flat byte array for submission to the Avalanche network. The process involves encoding network and blockchain identifiers, then ordered input and output objects (hex-formatted), adjusted for types and memo length. No external dependencies are required, though input and output objects must already be serialized elsewhere. All numeric fields must be big-endian, and the strict order/format is essential for transaction validity.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID       <- 0x00000000\n    NetworkID    <- 0x00003039\n    BlockchainID <- 0x000000000000000000000000000000000000000000000000000000000000000\n    Outputs      <- [\n        0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c\n    ]\n    Inputs       <- [\n        0xdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x00,\n    // networkID:\n    0x00, 0x00, 0x30, 0x39,\n    // blockchainID:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // number of outputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable output:\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    // number of inputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable input:\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    // Memo length:\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Removing an Avalanche Validator via CLI - Bash\nDESCRIPTION: Executes the core CLI command to remove a validator from an Avalanche blockchain using the Avalanche CLI. Requires the Avalanche CLI tool, the target blockchain name, correct credentials, and fee payment options. The <blockchainName> parameter refers to the identifier of the Avalanche L1 you are modifying. Output is shown in the subsequent prompts and confirmation steps; this command initiates the removal process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/remove-validator-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain removeValidator <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Specifying Node Deployment Status for L1 Import\nDESCRIPTION: This interactive prompt asks whether validator nodes have already been deployed and are validating the Avalanche L1 being imported. The user selects 'Yes' or 'No' using arrow keys. The answer determines the subsequent steps for gathering VM information (querying a node vs. querying public APIs/repository).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Have nodes already been deployed to this subnet?:\n    Yes\n  ▸ No\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Configuration\nDESCRIPTION: Configure a new blockchain using Avalanche CLI with custom VM settings, including genesis configuration, EVM token, and Warp features.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/07-build-and-run.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain \\\n --custom \\\n --vm $VM_PATH \\\n --genesis \"./.devcontainer/genesis-example.json\" \\\n --force \\\n --sovereign=false \\\n --evm-token \"TOK\" \\\n --warp \\\n --icm\n```\n\n----------------------------------------\n\nTITLE: Rewards Owner Protobuf Definition\nDESCRIPTION: Protocol Buffer definition for the Rewards Owner structure\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_61\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage RewardsOwner {\n    string type_id = 1;           // 4 bytes\n    uint64 locktime = 2;          // 08 bytes\n    uint32 threshold = 3;         // 04 bytes\n    repeated bytes addresses = 4; // 04 bytes + 20 bytes * len(addresses)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Data with AvaCloud Data API (Bash)\nDESCRIPTION: These curl commands demonstrate various transaction-related queries using the AvaCloud Data API, including deployment transactions, contract deployments, ERC transfers, and listing different types of transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/contracts/{address}/transactions:getDeployment \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/contracts/{address}/deployments \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/tokens/{address}/transfers \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/transactions \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/transactions:listNative \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/transactions:listErc20 \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/transactions:listErc721 \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/transactions:listErc1155 \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/transactions:listInternals \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/transactions/{txHash} \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/blocks/{blockId}/transactions \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/transactions \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring AllowList for Native Minter Precompile\nDESCRIPTION: This bash snippet demonstrates the command line interface for configuring the AllowList, which controls permissions for minting native tokens. It allows adding addresses for different roles.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/04-activating-native-minter-precompile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? Configure the addresses that are allowed to mint native tokens: \n  ▸ Add an address for a role to the allow list\n    Preview Allow List\n    Confirm Allow List\n    Cancel\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Node Endpoints Table\nDESCRIPTION: Terminal output showing the local network endpoints for 5 nodes running the myblockchain VM. Each node has a unique port number from 9650-9658 and shares the same blockchain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nStarting previously deployed and stopped snapshot\nBooting Network. Wait until healthy...\n...............\nNetwork ready to use. Local network node endpoints:\n+-------+----------+------------------------------------------------------------------------------------+\n| NODE  |    VM    |                                        URL                                         |\n+-------+----------+------------------------------------------------------------------------------------+\n| node5 | myblockchain | http://127.0.0.1:9658/ext/bc/SPqou41AALqxDquEycNYuTJmRvZYbfoV9DYApDJVXKXuwVFPz/rpc |\n+-------+----------+------------------------------------------------------------------------------------+\n| node1 | myblockchain | http://127.0.0.1:9650/ext/bc/SPqou41AALqxDquEycNYuTJmRvZYbfoV9DYApDJVXKXuwVFPz/rpc |\n+-------+----------+------------------------------------------------------------------------------------+\n| node2 | myblockchain | http://127.0.0.1:9652/ext/bc/SPqou41AALqxDquEycNYuTJmRvZYbfoV9DYApDJVXKXuwVFPz/rpc |\n+-------+----------+------------------------------------------------------------------------------------+\n| node3 | myblockchain | http://127.0.0.1:9654/ext/bc/SPqou41AALqxDquEycNYuTJmRvZYbfoV9DYApDJVXKXuwVFPz/rpc |\n+-------+----------+------------------------------------------------------------------------------------+\n| node4 | myblockchain | http://127.0.0.1:9656/ext/bc/SPqou41AALqxDquEycNYuTJmRvZYbfoV9DYApDJVXKXuwVFPz/rpc |\n+-------+----------+------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Data with AvaCloud Data API (Bash)\nDESCRIPTION: These curl commands show how to list the latest blocks and get information about a specific block using the AvaCloud Data API. They use GET requests to the Glacier API endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/blocks \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/blocks/{blockId} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Deploying Sender Contract using Foundry\nDESCRIPTION: This bash command uses Foundry to deploy the SenderOnCChain contract to a local C-Chain network. It specifies the RPC URL, private key, and contract file path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/04-create-sender-contract.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK contracts/interchain-messaging/send-receive/senderOnCChain.sol:SenderOnCChain --broadcast\n```\n\n----------------------------------------\n\nTITLE: UTXO Protocol Buffer Specification\nDESCRIPTION: Protocol Buffer message definition for UTXO structure including codec_id, tx_id, output_index, asset_id and output fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_48\n\nLANGUAGE: text\nCODE:\n```\nmessage Utxo {\n    uint16 codec_id = 1;     // 02 bytes\n    bytes tx_id = 2;         // 32 bytes\n    uint32 output_index = 3; // 04 bytes\n    bytes asset_id = 4;      // 32 bytes\n    Output output = 5;       // size(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Output Format in Gantt Chart Notation\nDESCRIPTION: Specifies the binary format for Transferable Output which wraps an output with a 32-byte asset ID. This structure is used for representing outputs in transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n+----------+----------+-------------------------+\n| asset_id : [32]byte |                32 bytes |\n+----------+----------+-------------------------+\n| output   : Output   |      size(output) bytes |\n+----------+----------+-------------------------+\n                      | 32 + size(output) bytes |\n                      +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Blockchain Registry Address as Environment Variable\nDESCRIPTION: This command saves the custom blockchain's ICM Registry address as an environment variable for easy access in subsequent operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/03-interact-with-the-registry.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MYBLOCKCHAIN_REGISTRY_ADDRESS=0x98F9971D3832B94241A2FbBC39712d6e13D8Df99\n```\n\n----------------------------------------\n\nTITLE: Destroying Avalanche Node\nDESCRIPTION: Command for terminating running nodes in cloud servers and cleaning up associated resources including storage disks and static IP addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_94\n\nLANGUAGE: bash\nCODE:\n```\navalanche node destroy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Address\nDESCRIPTION: Command to store the deployed contract address in an environment variable\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/05-transfers-in-smart-contracts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport PAYABLE_CONTRACT=0X..\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper Function to Get String from EVM State in Go\nDESCRIPTION: A utility function that retrieves a string value from the EVM contract storage using a pre-defined storage key. The function trims leading zeroes from the byte representation to get the original string.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/04-read-date-from-evm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GetString returns the value of the storage key \"storageKey\" in the contract storage,\n// with leading zeroes trimmed.\nfunc GetString(stateDB contract.StateDB) string {\n    // Get the value set at recipient\n    value := stateDB.GetState(ContractAddress, storageKeyHash)\n    return string(common.TrimLeftZeroes(value.Bytes()))\n}\n```\n\n----------------------------------------\n\nTITLE: Claiming Delegation Fees in Solidity (PoS only)\nDESCRIPTION: Describes how validators can claim their delegation fees by calling the claimDelegationFees function after the validation period has ended.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nPoSValidatorManager.claimDelegationFees()\n```\n\n----------------------------------------\n\nTITLE: Selecting Change Owner for Leftover AVAX - Avalanche CLI - Bash\nDESCRIPTION: Illustrates the selection prompt for choosing which stored key should receive any leftover AVAX if the validator is removed from the subnet. Ensures that funds are properly transferred or stored should validator removal occur. The user must choose from available keys via keyboard navigation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n Which stored key should be used be set as a change owner for leftover AVAX?:\n    test\n  ▸ mytestkey\n```\n\n----------------------------------------\n\nTITLE: Implementing handleSetAddress Function in React Component\nDESCRIPTION: This function will be triggered when a user clicks the 'Set Address' button. It validates the input address, updates the React state, and then calls fetchERC20Balances to retrieve token balances for the specified address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/02-understanding-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleSetAddress = async () => {\n  //\n  // TODO: Implement handleSetAddress\n  //\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes to TokenInput in TSX\nDESCRIPTION: Example demonstrating how to customize the appearance of the `TokenInput` component by passing CSS utility classes (like Tailwind CSS) through the `className` prop for custom styling. Requires state (`token`, `tokens`) and a handler (`handleTokenChange`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/token-input.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<TokenInput \n  selected={token}\n  chain_id={43114}\n  list={tokens}\n  onSelectionChanged={handleTokenChange}\n  showBalances={true}\n  className=\"bg-gray-100 rounded-lg p-2\"\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Forge Deployment Output for Sender Contract\nDESCRIPTION: This snippet shows the output of the Forge deployment command, including compilation details, deployer address, deployed contract address, and transaction hash. The deployed contract address is highlighted for emphasis.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/03-create-sender-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[⠊] Compiling...\n[⠢] Compiling 1 files with Solc 0.8.18\n[⠆] Solc 0.8.18 finished in 165.79ms\nCompiler run successful!\nDeployer: 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\nDeployed to: 0xA4cD3b0Eb6E5Ab5d8CE4065BcCD70040ADAB1F00 // [!code highlight]\nTransaction hash: 0x4f41cf829fbc525b64d9773c41dc9fabb3b93dfd03bf6c1568dcc4a4c6bdeb1a\n```\n\n----------------------------------------\n\nTITLE: Configuring Faucet Client-Side Settings (JSON)\nDESCRIPTION: Illustrates the structure of the client-side configuration file (`client/src/config.json`). This file contains non-sensitive settings like API endpoints for development and production environments, API timeout duration, and the Google reCAPTCHA v3 site key required for user verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"banner\": \"/banner.png\",\n  \"apiBaseEndpointProduction\": \"/api/\",\n  \"apiBaseEndpointDevelopment\": \"http://localhost:8000/api/\",\n  \"apiTimeout\": 10000,\n  \"CAPTCHA\": {\n    \"siteKey\": \"6LcNScYfAAAAAJH8fauA-okTZrmAxYqfF9gOmujf\",\n    \"action\": \"faucetdrip\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Avalanche Node Status Check\nDESCRIPTION: Command to check the status of the AvalancheGo service using systemctl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status avalanchego\n```\n\n----------------------------------------\n\nTITLE: Creating AvalancheGo Service File\nDESCRIPTION: Command to create a new systemd service file for AvalancheGo\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo nano /etc/systemd/system/avalanchego.service\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Health with avalanche-network-runner (Bash)\nDESCRIPTION: Illustrates how to pause execution until the local cluster and any custom VMs are reported as healthy using 'avalanche-network-runner control wait-for-healthy'. Examples show the CLI command and the corresponding curl POST request to the API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control wait-for-healthy [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanche-network-runner control wait-for-healthy\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/waitforhealthy'\n```\n\n----------------------------------------\n\nTITLE: Tracking Accumulated Fees in AvalancheGo State (Go)\nDESCRIPTION: Represents the `endAccumulatedFee` field within AvalancheGo's platformvm state for an L1 validator. This value tracks the total fees expected to accumulate in the future at the current fee rate before the validator's balance would be depleted, determining when the validator becomes inactive if no further balance is added.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/l1-validator-fee.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nendAccumulatedFee\n```\n\n----------------------------------------\n\nTITLE: Defining the SnowmanVM Block Interface in Go\nDESCRIPTION: The interface declaration for blocks that work with the Snowman Consensus Engine. This interface requires methods for tracking parentage, verification, serialization, height information, and timestamps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/timestamp-vm/blocks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Block interface {\n\tchoices.Decidable\n\n\t// Parent returns the ID of this block's parent.\n\tParent() ids.ID\n\n\t// Verify that the state transition this block would make if accepted is\n\t// valid. If the state transition is invalid, a non-nil error should be\n\t// returned.\n\t//\n\t// It is guaranteed that the Parent has been successfully verified.\n\t//\n\t// If nil is returned, it is guaranteed that either Accept or Reject will be\n\t// called on this block, unless the VM is shut down.\n\tVerify(context.Context) error\n\n\t// Bytes returns the binary representation of this block.\n\t//\n\t// This is used for sending blocks to peers. The bytes should be able to be\n\t// parsed into the same block on another node.\n\tBytes() []byte\n\n\t// Height returns the height of this block in the chain.\n\tHeight() uint64\n\n\t// Time this block was proposed at. This value should be consistent across\n\t// all nodes. If this block hasn't been successfully verified, any value can\n\t// be returned. If this block is the last accepted block, the timestamp must\n\t// be returned correctly. Otherwise, accepted blocks can return any value.\n\tTimestamp() time.Time\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting a Node via HTTP\nDESCRIPTION: This curl command restarts a node named 'node1' using the specified AvalancheGo executable path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/restartnode -d '{\"name\":\"node1\",\"execPath\":\"'${AVALANCHEGO_EXEC_PATH}'\"}'\n```\n\n----------------------------------------\n\nTITLE: Stopping AvalancheGo Node using systemctl\nDESCRIPTION: This command stops the AvalancheGo node service using systemctl. It requires sudo privileges to execute.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/managing-avalanche-go.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop avalanchego\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Node on MacOS (Mainnet)\nDESCRIPTION: Command to start an Avalanche node on MacOS for the Avalanche Mainnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-<VERSION>/build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Example Output of Cast Function Call\nDESCRIPTION: This snippet shows the expected output returned by the `cast call` command when successfully invoking the `sayHello` function on the deployed `HelloWorld` contract. The output is the string literal \"Hello World\", enclosed in quotes, representing the value returned by the smart contract function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/04-create-new-smart-contract.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Avalanche Validator Removal - Bash\nDESCRIPTION: Displays diagnostic and confirmation messages after executing the validator removal process, including information on the fee payer, RPC endpoint, validator forcing (for PoS bootstrap validators), relevant IDs, fee amounts, and success confirmation. Prerequisites include correct authority, node IDs, and sufficient funds for gas. Output informs the user of transaction completion or relevant errors.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/remove-validator-l1.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nValidator manager owner 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC pays for the initialization of the validator's removal (Blockchain gas token)\nRPC Endpoint: http://127.0.0.1:9652/ext/bc/2qmU6w47Mp7D7fGhbRuZm6Z1Nn6FZXZAxKpaeTMFiRQW9CBErh/rpc\nForcing removal of NodeID-7cQrriPWGXa5yuJGZUgsxxwH9j4T8pPkY as it is a PoS bootstrap validator\nUsing validationID: 228zzCgDmAmuaJDGnFkFgnVqbbJPRF7qF1Xpd3dhtqGDhMjJK2 for nodeID: NodeID-7cQrriPWGXa5yuJGZUgsxxwH9j4T8pPkY\nValidationID: 228zzCgDmAmuaJDGnFkFgnVqbbJPRF7qF1Xpd3dhtqGDhMjJK2\nSetSubnetValidatorWeightTX fee: 0.000078836 AVAX\nSetSubnetValidatorWeightTx ID: 2FUimPZ37DscPJiQDLrtKtumER3LNr48MJi6VR2jGXkYEKpCaq\n✓ Validator successfully removed from the Subnet\n```\n\n----------------------------------------\n\nTITLE: Getting Snapshot Names with cURL\nDESCRIPTION: Illustrates how to list available snapshots using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/getsnapshotnames' \n```\n\n----------------------------------------\n\nTITLE: Relayer Start Configuration Flags\nDESCRIPTION: Available configuration flags for the relayer start command, including options for binary path, cluster operation, endpoint specification, and network selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\n--bin-path string           use the given relayer binary\n--cluster string            operate on the given cluster\n--endpoint string           use the given endpoint for network operations\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for start\n-l, --local operate         on a local network\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--version string            version to use (default \"latest-prerelease\")\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Devnet with Subnet-EVM using Avalanche-CLI Flags in Bash\nDESCRIPTION: Creates an Avalanche Devnet named `<clusterName>` on AWS, deploying a Subnet-EVM based L1 named `<blockchainName>`. It specifies 5 validators and 1 API node across 5 AWS regions (us-west-2, us-east-1, ap-south-1, ap-northeast-1, eu-west-1), using 'c7g.8xlarge' EC2 instances with 'io2' volume type, sets default validator parameters, and authorizes SSH access (`--authorize-access`). This non-interactive command uses flags to bypass the wizard prompts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/setup-devnet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz <clusterName> <blockchainName> --authorize-access \\\n  --aws --num-apis 1,1,1,1,1 --num-validators 5,5,5,5,5 \\\n  --region us-west-2,us-east-1,ap-south-1,ap-northeast-1,eu-west-1 --default-validator-params \\\n  --node-type c7g.8xlarge --aws-volume-type=io2\n\nCreating the devnet\n...\nWaiting for node(s) in cluster <clusterName> to be healthy...\n...\nNodes healthy after 33 seconds\n\nDeploying the subnet\n...\nSetting the nodes as subnet trackers\n...\nWaiting for node(s) in cluster <clusterName>to be healthy...\nNodes healthy after 33 seconds\n...\nWaiting for node(s) in cluster <clusterName> to be syncing subnet <blockchainName>...\nNodes Syncing <blockchainName> after 5 seconds\n\nAdding nodes as subnet validators\n...\nWaiting for node(s) in cluster <clusterName> to be validating subnet <blockchainName>...\nNodes Validating <blockchainName> after 23 seconds\n\nDevnet <clusterName> has been created and is validating subnet <blockchainName>!\n```\n\n----------------------------------------\n\nTITLE: Deploying ICM Relayer with Avalanche CLI\nDESCRIPTION: Command for deploying an ICM Relayer for a specified network with various configuration options such as blockchain selection, funding amounts, and network endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting the Network for L1 Import in Avalanche-CLI\nDESCRIPTION: This interactive prompt asks the user to specify the public network (Fuji Testnet or Mainnet) from which the Avalanche L1 is being imported. The user navigates using arrow keys. Importing from local networks is not supported by this command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Choose a network to import from:\n  ▸ Fuji\n    Mainnet\n```\n\n----------------------------------------\n\nTITLE: Getting API Endpoints via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to retrieve the API endpoints of all nodes in the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control uris \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Teleporter Token Bridge\nDESCRIPTION: This command deploys the Teleporter Token Bridge to the local network, with the Home Contract on C-Chain and the Remote Contract on a custom Avalanche L1 subnet. It requires the ERC-20 token address as input.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-token-bridge.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter bridge deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Foundry Configuration\nDESCRIPTION: Adds the RPC endpoint for myblockchain2 to the foundry.toml configuration file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/02-deploy-additional-blockchain.mdx#2025-04-23_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[rpc_endpoints]\nlocal-c = \"http://localhost:9650/ext/bc/C/rpc\"\nmyblockchain = \"http://localhost:9650/ext/bc/myblockchain/rpc\"\nmyblockchain2 = \"http://localhost:9650/ext/bc/myblockchain2/rpc\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Deploying New Blockchain\nDESCRIPTION: Commands to create and deploy a new blockchain using the Avalanche CLI\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/04-use-any-native-as-native-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain\navalanche blockchain deploy myblockchain\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Validator List Command in Bash\nDESCRIPTION: The list command retrieves and displays a list of validators for the specified L1. This provides visibility into the active validators in the network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_177\n\nLANGUAGE: bash\nCODE:\n```\navalanche validator list [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example: Basic Domain Display Output in TSX\nDESCRIPTION: Provides an example of using the `Domain` component with a specific Ethereum address. The comments indicate the expected output: either the resolved '.avax' domain name or nothing (null) if resolution fails and fallback is disabled.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/domain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Domain address=\"0x1234567890123456789012345678901234567890\" />\n// Output: \"mydomain.avax\" (if resolved)\n// Output: null (if no domain found)\n```\n\n----------------------------------------\n\nTITLE: NFT Transfer Operation Gantt Specification\nDESCRIPTION: Gantt chart specification for NFT transfer operation detailing the byte structure of all fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n+------------------------------+------------------------------------+\n| type_id         : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| address_indices : []int      | 4 + 4 * len(address_indices) bytes |\n+-----------------+------------+------------------------------------+\n| group_id        : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| payload         : []byte     |             4 + len(payload) bytes |\n+-----------------+------------+------------------------------------+\n| locktime        : long       |                            8 bytes |\n+-----------+------------+------------------------------------------+\n| threshold       : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| addresses       : [][20]byte |      4 + 20 * len(addresses) bytes |\n+-----------------+------------+------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Transferable Input Example with Hexadecimal Representation\nDESCRIPTION: Example of a TransferableInput with specific values for transaction ID, UTXO index, asset ID, and input, showing both the logical representation and the corresponding byte-level hexadecimal encoding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[\n    TxID      <- 0x6613a40dcdd8d22ea4aa99a4c84349056317cf550b6685e045e459954f258e59\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db\n    Input     <- 0x0000000500000000075bcd15000000020000000700000003\n]\n=\n[\n    // txID:\n    0x66, 0x13, 0xa4, 0x0d, 0xcd, 0xd8, 0xd2, 0x2e,\n    0xa4, 0xaa, 0x99, 0xa4, 0xc8, 0x43, 0x49, 0x05,\n    0x63, 0x17, 0xcf, 0x55, 0x0b, 0x66, 0x85, 0xe0,\n    0x45, 0xe4, 0x59, 0x95, 0x4f, 0x25, 0x8e, 0x59,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,\n    0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,\n    0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,\n    0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74,\n    0x6a, 0x52, 0x88, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Defining WarpMessenger Interface in ValidatorManager Contract\nDESCRIPTION: This constant defines the interface for the Warp Messenger, which is used for cross-chain communication between the ValidatorManager contract and the P-Chain. It's crucial for validator operations that require interaction with the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nIWarpMessenger public constant WARP_MESSENGER =\n    IWarpMessenger(0x0200000000000000000000000000000000000005);\n```\n\n----------------------------------------\n\nTITLE: Examining SHA-256 Precompile Interface in Solidity\nDESCRIPTION: A reference implementation of the SHA-256 hash function interface that takes a string value as input and returns a 32-byte hash. This serves as a template for creating the MD5 interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ISHA256 {\n    /// Compute the hash of value\n    /// @param value the value to be hashed\n    /// @return hash the hash of the value\n    function hashWithSHA256(string memory value) external view returns(bytes32 hash);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Op with Proto Specification\nDESCRIPTION: Protocol buffer message specifications for UTXOID and TransferableOp. The UTXOID contains a tx_id and utxo_index, while TransferableOp includes an asset_id, an array of UTXOIDs, and a transfer_op.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nmessage UTXOID {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n}\nmessage TransferableOp {\n    bytes asset_id = 1;           // 32 bytes\n    repeated UTXOID utxo_ids = 2; // 4 + 36 * len(utxo_ids) bytes\n    TransferOp transfer_op = 3;   // size(transfer_op)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Input with Proto Specification\nDESCRIPTION: Protocol buffer message specification for a Transferable Input, showing the tx_id field as a 32-byte array, utxo_index as a uint32, asset_id as a 32-byte array, and the input field containing an Input object.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmessage TransferableInput {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n    bytes asset_id = 3;    // 32 bytes\n    Input input = 4;       // size(input)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts to Mainnet via Yarn Script (Bash)\nDESCRIPTION: Executes the `deploy` yarn script, specifically targeting the Avalanche Mainnet by using the `--network mainnet` flag. This command runs the deployment script (`scripts/deploy.ts`) configured for the Mainnet environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn deploy --network mainnet\n```\n\n----------------------------------------\n\nTITLE: Defining StringStore Test Contract in Solidity\nDESCRIPTION: This Solidity contract defines test cases for the StringStore precompile. It includes tests for getting the default string and setting a new string value. The contract inherits from DSTest to use assertion functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/11-testing-precompile-hardhat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity >= 0.8.0;\n\nimport \"ds-test/src/test.sol\"; \nimport {IStringStore} from \"../contracts/interfaces/IStringStore.sol\";\n\ncontract StringStoreTest is DSTest {\n\n    IStringStore stringStore = IStringStore(0x0300000000000000000000000000000000000005);\n\n    function step_getString() public {\n        assertEq(stringStore.getString(), \"Cornell\");\n    }\n\n    function step_getSet() public {\n        string memory newStr = \"Apple\";\n        stringStore.setString(newStr);\n        assertEq(stringStore.getString(), newStr);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetAcceptedStateSummary Message for State Request\nDESCRIPTION: The GetAcceptedStateSummary message requests a set of state summaries at specified block heights, including the chain ID, request ID, deadline, and requested heights.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetAcceptedStateSummary {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  repeated uint64 heights = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Common Flags for Avalanche Blockchain Import (Bash)\nDESCRIPTION: Lists common flags applicable to the `avalanche blockchain import` command and its subcommands. These flags control configuration file location (`--config`), logging verbosity (`--log-level`), and whether to skip update checks (`--skip-update-check`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for import\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Reusable MDX Content\nDESCRIPTION: MDX code that imports a component named `CloseAndReopen` from a shared MDX file located at `@/content/common/codespaces/close-and-reopen-codespace.mdx`. It then renders the content of that imported component within the current page using JSX syntax. This promotes content reuse across different documentation pages.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/02-avalanche-starter-kit/03-close-and-reopen-codespace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\nimport CloseAndReopen from \"@/content/common/codespaces/close-and-reopen-codespace.mdx\";\n\n<CloseAndReopen />\n```\n\n----------------------------------------\n\nTITLE: Deploying Wrapped Token Contract using Forge\nDESCRIPTION: This command uses Forge to deploy the WrappedToken contract to a specified blockchain. It requires the RPC URL and a private key for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/05-deploy-and-interact-wrapped-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK WrappedToken.sol:WrappedToken --broadcast\n```\n\n----------------------------------------\n\nTITLE: Styling ChainRow with Custom Border and Shadow Effects\nDESCRIPTION: Demonstrates applying custom border, padding, shadow, and rounded corner styling to the ChainRow component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-row.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainRow \n  chain_id={43114}\n  name=\"Avalanche C-Chain\"\n  className=\"border border-gray-200 rounded-lg p-3 shadow-xs\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Deploying Token Transfer Contracts\nDESCRIPTION: Command to deploy Interchain Token Transfer contracts on both source (C-Chain) and destination chains using Avalanche CLI\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/06-deploy-with-avalanche-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain tokenTransferrer deploy\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Send Confirmation\nDESCRIPTION: Shows the confirmation prompt summarizing the send operation details: amount, source address, target address, and the fee. The user must confirm by selecting 'Yes' to proceed with signing the transaction on Ledger A.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nthis operation is going to:\n- send 4.496000000 AVAX from P-avax10an3cucdfqru984pnvv6y0rspvvclz63e523m0 to target address P-avax1r4aceznjkz8ch4pmpqrmkq4f3sl952mdrdt6xm\n- take a fee of 0.004000000 AVAX from source address P-avax10an3cucdfqru984pnvv6y0rspvvclz63e523m0\n\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Confirm transfer:\n    No\n  ▸ Yes\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Faucet Docker Container\nDESCRIPTION: This command runs a Docker container for the Avalanche faucet application. It maps port 3000 on the host to port 8000 in the container, names the container 'faucet-container', and uses environment variables from a .env file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3000:8000 --name faucet-container --env-file ../.env faucet-image\n```\n\n----------------------------------------\n\nTITLE: Final State Updates\nDESCRIPTION: Final contract state updates performed when completing validator registration\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/13-registering-validator/registering-validator.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\ndelete $._pendingRegisterValidationMessages[validationID];\n$._validationPeriods[validationID].status = ValidatorStatus.Active;\n$._validationPeriods[validationID].startedAt = uint64(block.timestamp);\n```\n\n----------------------------------------\n\nTITLE: Listing Account Balances\nDESCRIPTION: Command to list addresses and their token balances for both native and ERC-20 tokens on the local blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/08-transfer-an-erc-20-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list -l --blockchains myblockchain --tokens $ERC20_CONTRACT_L1,native  --keys myAddress,ewoq\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC20 Token Remote Contract\nDESCRIPTION: Uses Forge to deploy the ERC20TokenRemote contract with constructor arguments including registry address, blockchain IDs, and token details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/04-deploy-remote.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK lib/icm-contracts/contracts/ictt/TokenRemote/ERC20TokenRemote.sol:ERC20TokenRemote --optimize --optimizer-runs 200 --broadcast --constructor-args \"(${TELEPORTER_REGISTRY_L1}, ${FUNDED_ADDRESS}, \"1\", ${C_CHAIN_BLOCKCHAIN_ID_HEX}, ${ERC20_HOME_C_CHAIN}, 18)\" \"TOK\" \"TOK\" 18\n```\n\n----------------------------------------\n\nTITLE: Adding Avalanche CLI to System PATH\nDESCRIPTION: Command to temporarily add the Avalanche CLI binary to the system PATH. This allows users to call the avalanche command from anywhere in the terminal.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/install-avalanche-cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=~/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Querying Pending Validators on Avalanche Fuji Testnet\nDESCRIPTION: This curl command demonstrates how to call the platform.getPendingValidators endpoint to check for pending validators on the Fuji testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://api.avax-test.network/ext/bc/P' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getPendingValidators\",\n    \"params\": {\n        \"subnetID\": \"11111111111111111111111111111111LpoYY\",\n        \"nodeIDs\": []\n    },\n    \"id\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Fee Recipient in Subnet-EVM\nDESCRIPTION: JSON configuration for specifying the fee recipient address where transaction fees should be sent. Requires allowFeeRecipients to be enabled.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feeRecipient\": \"<YOUR 0x-ADDRESS>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Faucet Address API Request\nDESCRIPTION: cURL command to retrieve the faucet address for a specific chain\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000/api/faucetAddress?chain=C\n```\n\n----------------------------------------\n\nTITLE: Creating UTXO with SECP Transfer Output in Avalanche\nDESCRIPTION: Byte-level breakdown of a UTXO with a SECP Transfer Output from a signed transaction. The example shows the precise binary structure including CodecID, TxID, UTXOIndex, AssetID, and the SECP transfer output component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_50\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID   <- 0x0000\n    TxID      <- 0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7\n    UTXOIndex <- 0x00000000\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Output    <-     0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0xf9, 0x66, 0x75, 0x0f, 0x43, 0x88, 0x67, 0xc3,\n    0xc9, 0x82, 0x8d, 0xdc, 0xdb, 0xe6, 0x60, 0xe2,\n    0x1c, 0xcd, 0xbb, 0x36, 0xa9, 0x27, 0x69, 0x58,\n    0xf0, 0x11, 0xba, 0x47, 0x2f, 0x75, 0xd4, 0xe7,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x00,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // secp transfer output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,\n    0x24, 0x25, 0x26, 0x27,\n]\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Pattern for Avalanche Addresses\nDESCRIPTION: A regular expression that matches addresses on the X-Chain, P-Chain and C-Chain for Mainnet, Fuji and localhost networks. It validates the format of Avalanche addresses, though some invalid addresses may still match this pattern.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/cryptographic-primitives.mdx#2025-04-23_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n^([XPC]|[a-km-zA-HJ-NP-Z1-9]{36,72})-[a-zA-Z]{1,83}1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$\n```\n\n----------------------------------------\n\nTITLE: Adding a Node Using Network Runner CLI - Shell\nDESCRIPTION: This shell command uses the avalanche-network-runner CLI tool to add a new node (named 'node99') to the cluster. It specifies a request timeout, the endpoint for network runner control, and the path to the AvalancheGo binary. Requires avalanche-network-runner installed and the control endpoint accessible. Parameters include node name, timeout (e.g., 3m), endpoint, and AvalancheGo binary path environment variable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\navalanche-network-runner control add-node node99 \\\n--request-timeout=3m \\\n--endpoint=\"0.0.0.0:8080\" \\\n--avalanchego-path ${AVALANCHEGO_EXEC_PATH}\n```\n\n----------------------------------------\n\nTITLE: Setting AVALANCHEGO_EXEC_PATH Environment Variable\nDESCRIPTION: This shell command sets the AVALANCHEGO_EXEC_PATH environment variable to the path of the AvalancheGo executable. It's recommended to add this to your shell configuration file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAVALANCHEGO_EXEC_PATH=\"${HOME}/go/src/github.com/ava-labs/avalanchego/build/avalanchego\"\n```\n\n----------------------------------------\n\nTITLE: Displaying AvalancheGo Installer Help\nDESCRIPTION: Command to show the complete usage instructions for the AvalancheGo installer script.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --help\n```\n\n----------------------------------------\n\nTITLE: Disabling Rate Limiters in TypeScript\nDESCRIPTION: Code snippet showing how to disable rate limiters by commenting out initialization code\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnew RateLimiter(app, [GLOBAL_RL]);\nnew RateLimiter(app, evmchains);\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 Blockchain using CLI Command\nDESCRIPTION: The basic command syntax for deploying an Avalanche blockchain, which requires specifying a name for the blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <name>\n```\n\n----------------------------------------\n\nTITLE: Network Upgrade Log Output\nDESCRIPTION: Example log output showing successful application of network upgrade overrides and scheduled activation timestamps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nINFO [03-22|14:04:48.284] <fPypUHjNvJqBKXBx2LEoJ9u5b8rRxMtEhb4v2QEDQejEiTtMG Chain> github.com/ava-labs/subnet-evm/plugin/evm/vm.go:367: Applying network upgrade overrides overrides=\"{\\\"durangoTimestamp\\\":1712419200}\"\n...\nINFO [03-22|14:04:48.288] <fPypUHjNvJqBKXBx2LEoJ9u5b8rRxMtEhb4v2QEDQejEiTtMG Chain> github.com/ava-labs/subnet-evm/core/blockchain.go:335: Avalanche Upgrades (timestamp based):\nINFO [03-22|14:04:48.288] <fPypUHjNvJqBKXBx2LEoJ9u5b8rRxMtEhb4v2QEDQejEiTtMG Chain> github.com/ava-labs/subnet-evm/core/blockchain.go:335:  - SubnetEVM Timestamp:           @0          (https://github.com/ava-labs/avalanchego/releases/tag/v1.10.0)\nINFO [03-22|14:04:48.288] <fPypUHjNvJqBKXBx2LEoJ9u5b8rRxMtEhb4v2QEDQejEiTtMG Chain> github.com/ava-labs/subnet-evm/core/blockchain.go:335:  - Durango Timestamp:            @1712419200 (https://github.com/ava-labs/avalanchego/releases/tag/v1.11.0)\n...\n```\n\n----------------------------------------\n\nTITLE: Approving and Transferring USDC Tokens\nDESCRIPTION: Approve USDC for transfer, add collateral to the transferer contract, and send tokens from C-Chain to the new L1. This process involves multiple steps to ensure proper token locking and minting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $USDC \"approve(address, uint256)\" $USDC_HOME_C_CHAIN 2000000000000000000000\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $USDC_HOME_C_CHAIN \"addCollateral(bytes32, address, uint256)\" $L1_BLOCKCHAIN_ID_HEX $NATIVE_TOKEN_REMOTE_L1 100000000000000000000\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain $NATIVE_TOKEN_REMOTE_L1 \"isCollateralized()(bool)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $USDC_HOME_C_CHAIN \"send((bytes32, address, address, address, uint256, uint256, uint256, address), uint256)\" \"(${L1_BLOCKCHAIN_ID_HEX}, ${NATIVE_TOKEN_REMOTE_L1}, ${FUNDED_ADDRESS}, ${USDC}, 0, 0, 250000, 0x0000000000000000000000000000000000000000)\" 1000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Initialize Validator Manager Command Usage\nDESCRIPTION: Command to initialize PoA or PoS Validator Manager contract with configuration options for aggregator settings, stake amounts, and network selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\navalanche contract initValidatorManager [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Encoding Transferable Output in Avalanche\nDESCRIPTION: Illustrates the encoding of a transferable output, which includes an asset ID and a SECP256K1 transfer output. The example provides both the input values and the resulting byte array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[\n    AssetID <- 0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db\n    Output  <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n]\n=\n[\n    // assetID:\n    0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,\n    0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,\n    0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,\n    0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,\n    // output:\n    0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,\n    0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,\n    0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,\n    0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x0f, 0x42, 0x40, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x66, 0xf9, 0x0d, 0xb6,\n    0x13, 0x7a, 0x78, 0xf7, 0x6b, 0x36, 0x93, 0xf7,\n    0xf2, 0xbc, 0x50, 0x79, 0x56, 0xda, 0xe5, 0x63,\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying NFTs in a Grid Layout with Collectible Component\nDESCRIPTION: Demonstrates how to render multiple NFTs in a responsive grid layout by mapping through an array of NFT data and rendering a Collectible component for each one.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/collectibles/collectible.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"grid grid-cols-3 gap-4\">\n  {nfts.map(nft => (\n    <Collectible \n      key={nft.token_id}\n      chain_id={nft.chain_id}\n      address={nft.address}\n      token_id={nft.token_id}\n    />\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Blockchain Creation Success - Bash\nDESCRIPTION: Printed output indicating successful blockchain configuration. Confirms setup completion before proceeding to deployment. The output is informational, not a command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n✓ Successfully created blockchain configuration\n\n```\n\n----------------------------------------\n\nTITLE: AVAX Get UTXOs Method Signature\nDESCRIPTION: Method signature for retrieving UTXOs associated with addresses, supporting pagination and optional encoding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\navax.getUTXOs(\n    {\n        addresses: string,\n        limit: int, //optional\n        startIndex: { //optional\n            address: string,\n            utxo: string\n        },\n        sourceChain: string,\n        encoding: string, //optional\n    },\n) ->\n{\n    numFetched: int,\n    utxos: []string,\n    endIndex: {\n        address: string,\n        utxo: string\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Proto UTXO Specification\nDESCRIPTION: Protocol buffer message definition for UTXO data structure with field types and numbers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nmessage Utxo {\n    uint16 codec_id = 1;     // 02 bytes\n    bytes tx_id = 2;         // 32 bytes\n    uint32 output_index = 3; // 04 bytes\n    bytes asset_id = 4;      // 32 bytes\n    Output output = 5;       // size(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balance After Transfer\nDESCRIPTION: Verifies the token balance of the recipient address on the destination blockchain using the cast call command to ensure the transfer was successful.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/04-multihop.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain2 $ERC20_TOKEN_REMOTE_CHAIN2 \"balanceOf(address)(uint)\" $FUNDED_ADDRESS\n```\n\nLANGUAGE: bash\nCODE:\n```\n500000000000000 [5e14]\n```\n\n----------------------------------------\n\nTITLE: Deploying Wrapped Native Token Contract\nDESCRIPTION: Command to deploy a wrapped token contract on C-Chain using Forge\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/04-use-any-native-as-native-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK lib/icm-contracts/contracts/ictt/WrappedNativeToken.sol:WrappedNativeToken --broadcast\n```\n\n----------------------------------------\n\nTITLE: ICTT Command Suite Usage\nDESCRIPTION: Command suite for deploying and managing Interchain Token Transferrers across networks and subnets.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\navalanche ictt [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Required NPM Dependencies\nDESCRIPTION: Installation commands for required Node.js packages including ethers, avalanche, and dotenv.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ethers avalanche dotenv\n```\n\n----------------------------------------\n\nTITLE: Updating Sender Address Environment Variable\nDESCRIPTION: This command updates the SENDER_ADDRESS environment variable with the newly deployed contract address. This step is crucial for subsequent operations that rely on the sender contract's address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/03-create-sender-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SENDER_ADDRESS=0xA4cD3b0Eb6E5Ab5d8CE4065BcCD70040ADAB1F00\n```\n\n----------------------------------------\n\nTITLE: Gantt Base TX Specification in Avalanche\nDESCRIPTION: Detailed byte layout for the Base Transaction type in Avalanche. This specification shows the structure with field sizes including type ID, network ID, blockchain ID, outputs, inputs, and memo fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n+--------------------------------------+-----------------------------------------+\n| type_id       : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| network_id    : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| blockchain_id : [32]byte             |                                32 bytes |\n+---------------+----------------------+-----------------------------------------+\n| outputs       : []TransferableOutput |                 4 + size(outputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| inputs        : []TransferableInput  |                  4 + size(inputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| memo          : [256]byte            |                    4 + size(memo) bytes |\n+---------------+----------------------+-----------------------------------------+\n                          | 52 + size(outputs) + size(inputs) + size(memo) bytes |\n                          +------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: changeOwner Command Flags - Avalanche Blockchain CLI - Bash\nDESCRIPTION: This Bash snippet lists available --flags to customize the 'changeOwner' subnet ownership operation, including network selection, key management, ledger address options, logging, signature thresholds, and output control. Careful configuration of these flags enables fine-tuned administrative transfer and operational flexibility during subnet owner changes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string              operate on the given cluster\n--control-keys strings        addresses that may make subnet changes\n--devnet operate              on a devnet network\n--endpoint string             use the given endpoint for network operations\n-e, --ewoq use                ewoq key [fuji/devnet]\n-f, --fuji testnet            operate on fuji (alias to testnet\n-h, --help help               for changeOwner\n-k, --key string              select the key to use [fuji/devnet]\n-g, --ledger use              ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)\n--ledger-addrs strings        use the given ledger addresses\n-l, --local operate           on a local network\n-m, --mainnet operate         on mainnet\n--output-tx-path string       file path of the transfer subnet ownership tx\n-s, --same-control-key use    the fee-paying key as control key\n--subnet-auth-keys strings    control keys that will be used to authenticate transfer subnet ownership tx\n-t, --testnet fuji            operate on testnet (alias to fuji)\n--threshold uint32            required number of control key signatures to make subnet changes\n--config string               config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string            log level for the application (default \"ERROR\")\n--skip-update-check skip      check for new versions\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts to Local Network via Yarn Script (Bash)\nDESCRIPTION: Executes the `deploy` yarn script, targeting the local network created by `avalanche-network-runner` using the `--network local` flag. The output shows the address of the deployed contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nyarn deploy --network local\n\n# output\nyarn run v1.22.4\nnpx hardhat run scripts/deploy.ts --network local\nCoin deployed to: 0x17aB05351fC94a1a67Bf3f56DdbB941aE6\n✨  Done in 1.28s.\n```\n\n----------------------------------------\n\nTITLE: Deploying ThirdWeb Contract\nDESCRIPTION: Command to deploy the smart contract to any EVM compatible network using thirdweb's deploy functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/thirdweb.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx thirdweb deploy\n```\n\n----------------------------------------\n\nTITLE: Toggling Strict and Non-Strict ABI Unpacking for setGreeting (Go, Durango)\nDESCRIPTION: Illustrates a flexible ABI unpacking function supporting both strict and non-strict modes for the setGreeting input in Subnet-EVM. Decides on strictness based on a runtime flag, maintaining backward compatibility with earlier contracts while allowing for extra padding in new ones. Throws an error if the input exceeds allowed length in strict mode, and outputs the unpacked string or error.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/durango-upgrade.mdx#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// UnpackSetGreetingInput attempts to unpack [input] into the string type argument\n// assumes that [input] does not include selector (omits first 4 func signature bytes)\n// if [useStrictMode] is true, it will return an error if the length of [input] is not [common.HashLength]\nfunc UnpackSetGreetingInput(input []byte, useStrictMode bool) (string, error) {\n\t// Initially we had this check to ensure that the input was the correct length.\n\t// However solidity does not always pack the input to the correct length, and allows\n\t// for extra padding bytes to be added to the end of the input. Therefore, we have removed\n\t// this check with the Durango. We still need to keep this check for backwards compatibility.\n\tif useStrictMode && len(input) > common.HashLength {\n\t\treturn \"\", ErrInputExceedsLimit\n\t}\n\tres, err := HelloWorldABI.UnpackInput(\"setGreeting\", input, useStrictMode)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tunpacked := *abi.ConvertType(res[0], new(string)).(*string)\n\treturn unpacked, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Precompile Generation Script Help in Bash\nDESCRIPTION: Executes the `generate_precompile.sh` script located in the `./scripts` directory with the `--help` flag. This displays the usage instructions and available options for the precompile generation tool.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_precompile.sh --help\n```\n\n----------------------------------------\n\nTITLE: Selecting Control Keys for Transaction Signing\nDESCRIPTION: Example of selecting specific addresses to sign the Avalanche L1 deployment transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n✔ 2\n✔ P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\n✔ P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\nYour subnet auth keys for chain creation: [P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5 P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af]\n*** Please sign Avalanche L1 creation hash on the ledger device ***\n```\n\n----------------------------------------\n\nTITLE: Flags for Avalanche Blockchain Publish (Bash)\nDESCRIPTION: Lists flags for the `avalanche blockchain publish` command. Flags control the target repository URL (`--repo-url`), an optional local alias (`--alias`), paths to subnet and VM description files (`--subnet-file-path`, `--vm-file-path`), forcing publication (`--force`), and handling file generation manually (`--no-repo-path`), alongside common flags.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n--alias string               We publish to a remote repo, but identify the repo locally under a user-provided alias (e.g. myrepo).\n--force If                   true, ignores if the subnet has been published in the past, and attempts a forced publish.\n-h, --help help              for publish\n--no-repo-path string        Do not let the tool manage file publishing, but have it only generate the files and put them in the location given by this flag.\n--repo-url string            The URL of the repo where we are publishing\n--subnet-file-path string    Path to the Subnet description file. If not given, a prompting sequence will be initiated.\n--vm-file-path string        Path to the VM description file. If not given, a prompting sequence will be initiated.\n--config string              config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string           log level for the application (default \"ERROR\")\n--skip-update-check skip     check for new versions\n```\n\n----------------------------------------\n\nTITLE: MultiChainTokenInput for Basic Multi-Chain Selection in React/TypeScript\nDESCRIPTION: Showcases a straightforward usage of MultiChainTokenInput with specific variables for the selected token, the available tokens from all chains, and an event handler for selection changes. Demonstrates toggling the showBalances property off for scenarios where the user does not require balance display. Intended to be used inside a React component with pre-defined currentToken, allChainTokens, and handleTokenChange variables.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/multi-chain-token-input.mdx#2025-04-23_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<MultiChainTokenInput \n  selected={currentToken}\n  list={allChainTokens}\n  onSelectionChanged={handleTokenChange}\n  showBalances={false}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Contract Address\nDESCRIPTION: Stores the deployed remote contract address as an environment variable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/04-deploy-remote.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_TOKEN_REMOTE_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: Configuring eRPC Proxy with YAML Configuration\nDESCRIPTION: Example YAML configuration file for setting up eRPC, a fault-tolerant EVM RPC proxy and caching solution. This configuration defines project ID and upstream endpoints that will be automatically detected by eRPC.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/rpc-providers.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogLevel: debug\nprojects:\n  - id: main\n    upstreams:\n      # You don't need to define architecture (e.g. evm) or chain id (e.g. 43114)\n      # as they will be detected automatically by eRPC.\n      - endpoint: https://ava-mainnet.blastapi.io/xxxx\n      - endpoint: evm+alchemy://xxxx-my-alchemy-api-key-xxxx\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running AvalancheGo Installer\nDESCRIPTION: Downloads the AvalancheGo installer script from GitHub, makes it executable, and runs it to begin the installation process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/installing-avalanche-go.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -nd -m https://raw.githubusercontent.com/ava-labs/avalanche-docs/master/scripts/avalanchego-installer.sh;\nchmod 755 avalanchego-installer.sh;\n./avalanchego-installer.sh\n```\n\n----------------------------------------\n\nTITLE: ValidatorManager Registration Initialization\nDESCRIPTION: Smart contract function to initialize validator registration by locking native tokens and creating validation records\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/13-registering-validator/registering-validator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initializeValidatorRegistration(\n        ValidatorRegistrationInput calldata registrationInput,\n        uint16 delegationFeeBips,\n        uint64 minStakeDuration) payable returns (bytes32 validationID)\n```\n\n----------------------------------------\n\nTITLE: Querying Chain Interactions for Addresses in Avalanche Network (Bash)\nDESCRIPTION: This endpoint retrieves chain interactions for specified addresses in the Avalanche network. It requires the network identifier as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/{network}/addresses:listChainIds \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: ICM Deploy Command Usage\nDESCRIPTION: Command to deploy ICM Messenger and Registry contracts to a specified L1 blockchain with various configuration options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\navalanche icm deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: AVAX Get Atomic Transaction Signature\nDESCRIPTION: Method signature for retrieving atomic transaction details including transaction data, encoding format, and block height.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_20\n\nLANGUAGE: go\nCODE:\n```\navax.getAtomicTx({\n    txID: string,\n    encoding: string, //optional\n}) -> {\n    tx: string,\n    encoding: string,\n    blockHeight: string\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Sender Contract Address as Environment Variable\nDESCRIPTION: This bash command saves the deployed sender contract address as an environment variable for later use in the development process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/04-create-sender-contract.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SENDER_ADDRESS=0x5DB9A7629912EBF95876228C24A848de0bfB43A9\n```\n\n----------------------------------------\n\nTITLE: Interchain Relayer command flags in Avalanche CLI\nDESCRIPTION: Basic flags for the relayer command, including help, config file specification, log level, and update check control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for relayer\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Installing Solidity Compiler\nDESCRIPTION: Commands to install and verify the Solidity compiler installation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/smart-contract-dev/interact-golang-app.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp linux-amd64/solc-linux-amd64-v0.8.9+commit.e5eed63a ~/bin\n```\n\nLANGUAGE: bash\nCODE:\n```\nsolc --version\n```\n\n----------------------------------------\n\nTITLE: Listing Subnets in Avalanche CLI\nDESCRIPTION: Command for listing all created blockchain configurations. Can show additional deployment information when used with the --deployed flag.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_148\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet list [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Exporting Keystore User with AvalancheGo API - Shell\nDESCRIPTION: This shell script demonstrates exporting a keystore user from an AvalancheGo node using the keystore.exportUser JSON-RPC method. Invoke curl with a POST request to /ext/keystore, passing username and password as parameters. The result will include the encrypted user data and encoding type (default: hex). This method is deprecated as of v1.9.12 and only works on a local node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.exportUser\",\n    \"params\" :{\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/keystore\n```\n\n----------------------------------------\n\nTITLE: Minting NFT using Cast on Avalanche\nDESCRIPTION: This command uses Cast to interact with the deployed NFT contract and mint a new token. It calls the awardItem function, specifying the contract address and recipient address. The RPC URL and private key are set as environment variables.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url=$RPC_URL  <NFT-CONTRACT-ADDRESS> \"awardItem(address)\" <NFT-RECIPIENT-ADDRESS> --private-key=$PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Address Allocations in Genesis JSON\nDESCRIPTION: This snippet shows how to allocate initial token balances to multiple addresses in the genesis configuration. It includes the well-known test address and a custom address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/07-initial-token-allocation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    // ...\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x295BE96E64066972000000\" // 50,000,000 tokens\n    },\n    \"<your_address>\": {\n      \"balance\": \"0x295BE96E64066972000000\" // 50,000,000 tokens\n    }\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Amount to Receive Input\nDESCRIPTION: Shows the interactive prompt where the user enters the amount of AVAX to receive, which should match the amount sent (4.496 AVAX).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n✗ Amount to send (AVAX units): 4.496\n```\n\n----------------------------------------\n\nTITLE: Building Precompile-EVM\nDESCRIPTION: Execute the build script to compile the Precompile-EVM project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/12-build-your-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Signature for avax.export Method\nDESCRIPTION: API signature for the avax.export method showing required parameters to export assets from C-Chain to X-Chain or P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_17\n\nLANGUAGE: go\nCODE:\n```\navax.export({\n    to: string,\n    amount: int,\n    assetID: string,\n    baseFee: int,\n    username: string,\n    password:string,\n}) -> {txID: string}\n```\n\n----------------------------------------\n\nTITLE: Generating Warp Message Topic Hash\nDESCRIPTION: Command to generate the keccak hash for the SendWarpMessage event signature used in Warp messaging\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/13-registering-validator/registering-validator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast keccak \"SendWarpMessage(address,bytes32,bytes)\"\n```\n\n----------------------------------------\n\nTITLE: Exporting EWOQ Address\nDESCRIPTION: Command to save the EWOQ account address as an environment variable for token transfer.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/08-transfer-an-erc-20-token.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport EWOQ=0x...\n```\n\n----------------------------------------\n\nTITLE: Initializing Validator Registration in Solidity\nDESCRIPTION: This function from the NativeTokenStakingManager contract initializes the validator registration process. It locks native tokens, generates validation and message IDs, and stores registration data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/04-register-validators.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initializeValidatorRegistration(\n        ValidatorRegistrationInput calldata registrationInput,\n        uint16 delegationFeeBips,\n        uint64 minStakeDuration) payable returns (bytes32 validationID)\n```\n\n----------------------------------------\n\nTITLE: Response from platform.getPendingValidators\nDESCRIPTION: This JSON response shows the result of calling the platform.getPendingValidators endpoint, listing pending validators on the Fuji testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"validators\": [\n      {\n        \"txID\": \"4d7ZboCrND4FjnyNaF3qyosuGQsNeJ2R4KPJhHJ55VCU1Myjd\",\n        \"startTime\": \"1673411918\",\n        \"endTime\": \"1675313170\",\n        \"stakeAmount\": \"1000000000\",\n        \"nodeID\": \"NodeID-Q8Gfaaio9FAqCmZVEXDq9bFvNPvDi7rt5\",\n        \"delegationFee\": \"2.0000\",\n        \"connected\": false,\n        \"delegators\": null\n      }\n    ],\n    \"delegators\": []\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Avalanche CLI\nDESCRIPTION: Command to download and install the latest release of Avalanche CLI. The script installs the binary in the ~/bin directory, creating it if it doesn't exist.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/install-avalanche-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sSfL https://raw.githubusercontent.com/ava-labs/avalanche-cli/main/scripts/install.sh | sh -s\n```\n\n----------------------------------------\n\nTITLE: Querying ERC-20 Portfolio with AvaCloud Data API\nDESCRIPTION: Example of using the AvaCloud Data API to fetch a user's ERC-20 token balances. This endpoint simplifies the process of retrieving token portfolio information compared to making multiple RPC calls.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/02-apis-vs-rpc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address}/balances:listErc20 \\\n  --header 'x-glacier-api-key: <api-key>'\n```\n\n----------------------------------------\n\nTITLE: Token Registration and Transfer Operations\nDESCRIPTION: Commands for registering remote token, approving transfers, and managing collateral\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/04-use-any-native-as-native-token.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $NATIVE_TOKEN_REMOTE_L1 \"registerWithHome((address, uint256))\" \"(0x0000000000000000000000000000000000000000, 0)\"\n\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_C_CHAIN \"approve(address, uint256)\" $ERC20_HOME_TRANSFERER_C_CHAIN 2000000000000000000000\n\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_TRANSFERER_C_CHAIN \"addCollateral(bytes32, address, uint256)\" $L1_BLOCKCHAIN_ID_HEX $NATIVE_TOKEN_REMOTE_L1 100000000000000000000\n\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_TRANSFERER_C_CHAIN \"send((bytes32, address, address, address, uint256, uint256, uint256, address), uint256)\" \"(${L1_BLOCKCHAIN_ID_HEX}, ${NATIVE_TOKEN_REMOTE_L1}, ${FUNDED_ADDRESS}, ${ERC20_HOME_C_CHAIN}, 0, 0, 250000, 0x0000000000000000000000000000000000000000)\" 1000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Transferring Ownership of ValidatorManager Contract in Solidity\nDESCRIPTION: This function allows the current owner of the ValidatorManager contract to transfer ownership to a new address. It's inherited from OpenZeppelin's OwnableUpgradeable contract and includes a check to prevent transferring ownership to the zero address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n    _transferOwnership(newOwner);\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Node Configuration\nDESCRIPTION: This is the default configuration applied to all nodes if no custom configuration is provided.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network-peer-list-gossip-frequency\": \"250ms\",\n  \"network-max-reconnect-delay\": \"1s\",\n  \"public-ip\": \"127.0.0.1\",\n  \"health-check-frequency\": \"2s\",\n  \"api-admin-enabled\": true,\n  \"index-enabled\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Transferable Input Example with Byte Representation\nDESCRIPTION: Complete example of a Transferable Input instance showing both the high-level structure and the corresponding byte representation. The example includes TxID, UTXOIndex, AssetID, and an Input field with a SECP256K1 Transfer Input.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[\n    TxID      <- 0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000\n    UTXOIndex <- 0x00000005\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Input     <- 0x0000000500000000075bcd15000000020000000700000003\n]\n=\n[\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07\n]\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Cross-Chain AVAX Transfer\nDESCRIPTION: This snippet imports necessary React components for displaying a cross-chain transfer interface. It includes a wrapper component and the main CrossChainTransfer component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/02-transfer-pchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport CrossChainTransfer from \"../../../../toolbox/src/toolbox/Wallet/CrossChainTransfer.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Primary Network Operations in Avalanche CLI\nDESCRIPTION: This snippet shows the usage and flags for the 'avalanche primary' command suite, which provides tools for interacting with the Primary Network, including adding validators and describing network configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_123\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for primary\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Declaring a Static Array with Size in Storage - Solidity\nDESCRIPTION: Shows a concrete example of a state variable static array of five unsigned integers. Array elements will default to zero. Storage arrays must have a known, constant size.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nuint[5] arr;\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Validator Command Suite in Bash\nDESCRIPTION: The validator command suite provides tools for managing validator balance on the P-Chain. When a validator's balance reaches 0, it becomes inactive and no longer participates in validating the L1.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_171\n\nLANGUAGE: bash\nCODE:\n```\navalanche validator [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Interchain Messaging Prompt in Avalanche CLI (plaintext)\nDESCRIPTION: This snippet displays the Avalanche CLI prompt that asks users to enable interoperability between their blockchain and other blockchains or the C-Chain. No dependencies or prerequisites are needed as this is part of the CLI onboarding process. The expected user input determines whether interchain messaging (via warp precompile and contracts) will be activated, with options to enable, isolate, or seek an explanation. The output affects blockchain connectivity and contract activation within Avalanche. Limitations: users must follow subsequent deployment instructions for full enablement.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/05-interoperability/04-activating-interchain-messaging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n? Do you want to connect your blockchain with other blockchains or the C-Chain?: \\n  \\u25B8 Yes, I want to enable my blockchain to interoperate with other blockchains and the C-Chain\\n    No, I want to run my blockchain isolated\\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Avalanche Key List CLI Operation in Bash\nDESCRIPTION: This snippet displays a representative output from running the 'avalanche key list' command in Bash, showing key information such as kind, name, chain, address, balance, and network in tabular format. The output documents account indices and their corresponding balances on mainnet, with the P-Chain in Bech32 format. No dependencies are required to interpret the output, and its purpose is to verify correct state after a transfer operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n|  KIND  |  NAME   |          CHAIN          |                    ADDRESS                    | BALANCE | NETWORK |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n| ledger | index 0 | P-Chain (Bech32 format) | P-avax1g8yucm7j0cnwwru4rp5lkzw6dpdxjmc2rfkqs9 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 1 |                         | P-avax1drppshkst2ccygyq37m2z9e3ex2jhkd2txcm5r |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 2 |                         | P-avax10an3cucdfqru984pnvv6y0rspvvclz63e523m0 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 3 |                         | P-avax1yfpm7v5y5rej2nu7t2r0ffgrlpfq36je0rc5k6 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 4 |                         | P-avax17nqvwcqsa8ddgeww8gzmfe932pz2syaj2vyd89 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 5 |                         | P-avax1jzvnd05vsfksrtatm2e3rzu6eux9a287493yf8 |       0 | Mainnet |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Querying L1 Details using REST API\nDESCRIPTION: This snippet shows the REST API endpoint for querying L1 subnet details. It requires the network name and subnet ID as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/08-query-l1-details.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGET https://glacier-api.avax.network/v1/networks/{network}/subnets/{subnetId}\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Transfer Output Structure in Text\nDESCRIPTION: Specifies the structure of a SECP256K1 Transfer output using a Gantt-style diagram. It shows the byte layout for TypeID, Amount, Locktime, Threshold, and Addresses fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| amount    : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 28 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Sample Relayer Log Output\nDESCRIPTION: Example of JSON-formatted log entries showing relayer initialization, client setup, and message processing activities.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/06-analyze-relayer-logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{\"level\":\"info\",\"timestamp\":\"2024-07-11T01:38:40.093Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:94\",\"msg\":\"Initializing awm-relayer\"}\n{\"level\":\"info\",\"timestamp\":\"2024-07-11T01:38:40.093Z\",\"logger\":\"awm-relayer\",\"caller\":\"main/main.go:99\",\"msg\":\"Set config options.\"}\n[...additional log entries...]\n```\n\n----------------------------------------\n\nTITLE: Deleting Keystore User Response - AvalancheGo API - JSON\nDESCRIPTION: This JSON data shows the standard response from a successful keystore.deleteUser operation. The result is an empty object, confirming that the user deletion request was processed without error. Applies to deprecated API versions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Avalanche Blockchain Configuration - Bash\nDESCRIPTION: This command retrieves and displays the current configuration details for a specified Avalanche blockchain. Replace <name> with the relevant blockchain name (e.g., myblockchain). It requires the Avalanche CLI to be installed and previously configured.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe <name>\n```\n\n----------------------------------------\n\nTITLE: Cloning Precompile-EVM Repository - Bash Shell\nDESCRIPTION: This command clones the Precompile-EVM repository using SSH, which serves as a template or starting point for building precompiles externally without forking Subnet-EVM. Required tools are Git and SSH. After execution, the complete repository will be available locally for development.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/background-requirements.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:ava-labs/precompile-evm.git\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Node AddDashboard Command in Bash\nDESCRIPTION: Usage of the addDashboard command which adds custom dashboards to the Grafana monitoring dashboard for a cluster. This is currently in experimental (ALPHA) mode.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_91\n\nLANGUAGE: bash\nCODE:\n```\navalanche node addDashboard [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Response Format for eth_baseFee API\nDESCRIPTION: Example response from the eth_baseFee API showing the hexadecimal representation of the base fee for the next block.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x34630b8a00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Avalanche Faucet Docker Container\nDESCRIPTION: This command restarts the previously stopped 'faucet-container' Docker container.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker start faucet-container\n```\n\n----------------------------------------\n\nTITLE: Initial Token Allocation Options in Avalanche L1\nDESCRIPTION: CLI prompt showing options for structuring initial token allocation in an Avalanche L1 blockchain. Options include allocating tokens to a new account, allocating to an existing ewoq account, or defining a custom allocation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/03-native-token-allocation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n? How should the initial token allocation be structured?: \n  ▸ Allocate 1m tokens to a new account\n    Allocate 1m to the ewoq account 0x8db...2FC (Only recommended for testing, not recommended for production)\n    Define a custom allocation (Recommended for production)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node ID\nDESCRIPTION: Command to extract the Node ID from system logs, which is required for staking and node identification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/installing-avalanche-go.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl -u avalanchego | grep \"NodeID\"\n```\n\n----------------------------------------\n\nTITLE: Starting AvalancheGo Node using systemctl\nDESCRIPTION: This command starts the AvalancheGo node service using systemctl. It requires sudo privileges to execute.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/managing-avalanche-go.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start avalanchego\n```\n\n----------------------------------------\n\nTITLE: Creating a webhook with the AvaCloud API\nDESCRIPTION: This curl command creates a new webhook with the event type set to monitor address activity. The request is sent to the AvaCloud API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url https://glacier-api.avax.network/v1/webhooks \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json' \\\n     --data '\n{\n  \"eventType\": \"address_activity\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting VRF Subscription ID Environment Variable\nDESCRIPTION: Exports the Chainlink VRF subscription ID as an environment variable for use in configuring the CrossChainVRFWrapper contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/07-create-vrf-subscription.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VRF_SUBSCRIPTION_ID=<subscription_id>\n```\n\n----------------------------------------\n\nTITLE: AVAX Import Method Signature\nDESCRIPTION: Method signature for importing assets from X-Chain or P-Chain to C-Chain, requiring destination address and chain details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_23\n\nLANGUAGE: go\nCODE:\n```\navax.import({\n    to: string,\n    sourceChain: string,\n    baseFee: int, // optional\n    username: string,\n    password:string,\n}) -> {txID: string}\n```\n\n----------------------------------------\n\nTITLE: Durango Upgrade Rescheduling Example\nDESCRIPTION: Specific example of rescheduling the Durango network upgrade to a new timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"networkUpgradeOverrides\": {\n    \"durangoTimestamp\": 1712419200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contracts\nDESCRIPTION: Command suite for deploying and interacting with smart contracts, including ERC20 token deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\navalanche contract [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Precompile-EVM from Source\nDESCRIPTION: Navigate to the Precompile-EVM directory and execute the build script to compile the EVM implementation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/08-build-and-run-custom-genesis-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/precompile-evm\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Stopping AvalancheGo Node Service\nDESCRIPTION: Command to stop the AvalancheGo node service using systemctl, typically used before restoring backup files.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop avalanchego\n```\n\n----------------------------------------\n\nTITLE: Example Chain Logo File Paths\nDESCRIPTION: Examples of file paths for different blockchain networks including Avalanche C-Chain, Fuji Testnet, and Echo L1.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/asset-requirements.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/chains/logo/43114.png  // Avalanche C-Chain\n/chains/logo/43113.png  // Fuji Testnet\n/chains/logo/173750.png // Echo L1\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Public Key in Bash\nDESCRIPTION: An example of a public key represented as a hexadecimal string. This is the key that can be shared publicly and is used to verify signatures created with the corresponding private key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-schemes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nb470edf87dc8decad6a39ed105a6a6411b88275c6a0ac06c0dea3144980eaf0635fabda79ceda360583acd0802adb27e\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Blockchain Publish Command (Bash)\nDESCRIPTION: Shows the usage syntax for the `avalanche blockchain publish` command. This command is used to publish a blockchain's Virtual Machine (VM) definition files to a specified repository.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain publish [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Avalanche CLI Subnet Export Command\nDESCRIPTION: The export command writes the details of an existing blockchain deployment to a file. It prompts for an output path or accepts one via the --output flag.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_138\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet export [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example of SECP256K1 Transfer Output Binary Representation\nDESCRIPTION: Demonstrates the binary representation of a SECP256K1 Transfer output with specific values for TypeID, Amount, Locktime, Threshold, and two Addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x07,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Removing AvalancheGo Node Container in Docker\nDESCRIPTION: This command removes the Docker container for the AvalancheGo node. Note that this does not remove the node's state and credentials stored in the ~/.avalanchego directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/06-run-validator-nodes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm avago\n```\n\n----------------------------------------\n\nTITLE: Listing Primary Network Parameters on Mainnet in Markdown\nDESCRIPTION: This code block lists the Primary Network parameters on Mainnet, including asset ID, supply limits, consumption rates, staking durations, and other important network configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/rewards-formula.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `AssetID = Avax`\n- `InitialSupply = 240_000_000 Avax`\n- `MaximumSupply = 720_000_000 Avax`.\n- `MinConsumptionRate = 0.10 * reward.PercentDenominator`.\n- `MaxConsumptionRate = 0.12 * reward.PercentDenominator`.\n- `Minting Period = 365 * 24 * time.Hour`.\n- `MinValidatorStake = 2_000 Avax`.\n- `MaxValidatorStake = 3_000_000 Avax`.\n- `MinStakeDuration = 2 * 7 * 24 * time.Hour`.\n- `MaxStakeDuration = 365 * 24 * time.Hour`.\n- `MinDelegationFee = 20000`, that is `2%`.\n- `MinDelegatorStake = 25 Avax`.\n- `MaxValidatorWeightFactor = 5`. This is a platformVM parameter rather than a genesis one, so it's shared across networks.\n- `UptimeRequirement = 0.8`, that is `80%`.\n```\n\n----------------------------------------\n\nTITLE: API Naming Deprecation Table\nDESCRIPTION: Mapping of deprecated API names to their current equivalents in configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/c-chain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"public-eth\": \"eth\",\n  \"public-eth-filter\": \"eth-filter\",\n  \"private-admin\": \"admin\",\n  \"private-debug\": \"debug\",\n  \"public-debug\": \"debug\",\n  \"internal-public-eth\": \"internal-eth\",\n  \"internal-public-blockchain\": \"internal-blockchain\",\n  \"internal-public-transaction-pool\": \"internal-transaction\",\n  \"internal-public-tx-pool\": \"internal-tx-pool\",\n  \"internal-public-debug\": \"internal-debug\",\n  \"internal-private-debug\": \"internal-debug\",\n  \"internal-public-account\": \"internal-account\",\n  \"internal-private-personal\": \"internal-personal\"\n}\n```\n\n----------------------------------------\n\nTITLE: Depositing Native Tokens using Cast\nDESCRIPTION: This command uses cast to call the deposit function of the wrapped token contract, sending native tokens to be wrapped. The amount is specified in wei.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/05-deploy-and-interact-wrapped-tokens.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast send $WRAPPED_TOKEN \"deposit()\" --value <AMOUNT> --rpc-url myblockchain --private-key $PK\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Receiver Address\nDESCRIPTION: Command to store the deployed receiver contract address as an environment variable.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/09-transfer-erc20-to-sc.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_RECEIVER_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: changeWeight Command Flags - Avalanche Blockchain CLI - Bash\nDESCRIPTION: Lists modifiable flags for the 'changeWeight' command in Bash, enabling granular control over node selection, key authentication, ledger usage, validator weight, and environment targeting. Default values and supported options facilitate scripted, repeatable infrastructure changes in validator operations for POA Subnets.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string            operate on the given cluster\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n-e, --ewoq use              ewoq key [fuji/devnet only]\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for changeWeight\n-k, --key string            select the key to use [fuji/devnet only]\n-g, --ledger use            ledger instead of key (always true on mainnet, defaults to false on fuji/devnet)\n--ledger-addrs strings      use the given ledger addresses\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n--node-id string            node-id of the validator\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--weight uint               set the new staking weight of the validator (default 20)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Example Output of Avalanche CLI Help Command (Text Output)\nDESCRIPTION: This snippet displays the expected help output after executing 'avalanche -h'. It lists available commands and usage instructions for Avalanche CLI. The content serves as a reference for correct installation and quick orientation of subcommands and capabilities. No additional dependencies are required, but the output assumes Avalanche CLI is run in an appropriate environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/set-up.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nAvalanche-CLI is a command-line tool that gives developers access to\neverything Avalanche. This release specializes in helping developers\nbuild and test Avalanche L1s.\n\nTo get started, look at the documentation for the subcommands or jump right\nin with avalanche blockchain create myNewAvalanche L1.\n\nUsage:\n  avalanche [command]\n\nAvailable Commands:\n  config                Modify configuration for Avalanche-CLI\n  help                  Help about any command\n  key                   Create and manage testnet signing keys\n```\n\n----------------------------------------\n\nTITLE: Specifying SECP256K1 Transfer Input Structure in Avalanche\nDESCRIPTION: Gantt chart representation of the SECP256K1 Transfer Input structure, showing the size and arrangement of its components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------+-------------------------------------+\n| type_id         : int   |                             4 bytes |\n+-----------------+-------+-------------------------------------+\n| amount          : long  |                             8 bytes |\n+-----------------+-------+-------------------------------------+\n| address_indices : []int |  4 + 4 * len(address_indices) bytes |\n+-----------------+-------+-------------------------------------+\n                          | 16 + 4 * len(address_indices) bytes |\n                          +-------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Retrieving AvalancheGo PID for All Nodes in a Cluster\nDESCRIPTION: Shows how to get the AvalancheGo process ID for all nodes in a specified cluster using the 'avalanche node ssh' command with 'pgrep avalanchego'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/execute-ssh-commands.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh <clusterName> pgrep avalanchego\n[i-0cf58a280bf3ef9a1] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem pgrep avalanchego\n14508\n\n[i-0e2abd71a586e56b4] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem pgrep avalanchego\n14555\n\n[i-027417a4f2ca0a478] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem pgrep avalanchego\n14545\n\n[i-0360a867aa295d8a4] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem pgrep avalanchego\n14531\n\n[i-0759b102acfd5b585] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem pgrep avalanchego\n14555\n```\n\n----------------------------------------\n\nTITLE: Encoding a Variable-Length Integer Array in Avalanche\nDESCRIPTION: Shows how variable-length integer arrays are encoded with a 4-byte integer length prefix followed by the array contents.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    [0x03040506]\nResults in:\n    [0x00, 0x00, 0x00, 0x01, 0x03, 0x04, 0x05, 0x06]\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Log Example\nDESCRIPTION: Example of log output when chains complete bootstrapping process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n[09-09|17:01:45.295] INFO <C Chain> snowman/transitive.go:392 consensus starting {\"lastAcceptedBlock\": \"2qaFwDJtmCCbMKP4jRpJwH8EFws82Q2yC1HhWgAiy3tGrpGFeb\"}\n[09-09|17:01:46.199] INFO <P Chain> snowman/transitive.go:392 consensus starting {\"lastAcceptedBlock\": \"2ofmPJuWZbdroCPEMv6aHGvZ45oa8SBp2reEm9gNxvFjnfSGFP\"}\n[09-09|17:01:51.628] INFO <X Chain> snowman/transitive.go:334 consensus starting {\"lenFrontier\": 1}\n```\n\n----------------------------------------\n\nTITLE: Sending Message Between Contracts on Avalanche\nDESCRIPTION: Sends a message to a receiver address using the sendMessage function through the cast command line tool. Requires a private key and sender address configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/06-send-a-roundtrip-message.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $SENDER_ADDRESS \"sendMessage(address)\" $RECEIVER_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Storing Validator Registration Data in Solidity\nDESCRIPTION: This code snippet shows how the NativeTokenStakingManager contract stores validator registration data, including pending messages, registered validators, and validation periods.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/04-register-validators.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n$._pendingRegisterValidationMessages[validationID] = registerSubnetValidatorMessage;\n$._registeredValidators[input.nodeID] = validationID;\nbytes32 messageID = WARP_MESSENGER.sendWarpMessage(registerSubnetValidatorMessage);\n$._validationPeriods[validationID] = Validator({\n  status: ValidatorStatus.PendingAdded,\n  nodeID: input.nodeID,\n  startingWeight: weight,\n  messageNonce: 0,\n  weight: weight,\n  startedAt: 0, // The validation period only starts once the registration is acknowledged.\n  endedAt: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Output Log for Transfer Completion\nDESCRIPTION: Shows the final output log from the Avalanche CLI after the receive step is confirmed and executed. It indicates the sequence of Import/Export transactions across the P-Chain and X-Chain that complete the transfer.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nIssuing ImportTx P -> X\nIssuing ExportTx X -> P\nIssuing ImportTx X -> P\n```\n\n----------------------------------------\n\nTITLE: Flags for Public Network Import in Avalanche CLI\nDESCRIPTION: Flags for the public network import command, including options for specifying blockchain IDs, network types, and validator node URLs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_145\n\nLANGUAGE: bash\nCODE:\n```\n--blockchain-id string      the blockchain ID\n--cluster string            operate on the given cluster\n--custom use                a custom VM template\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n--evm import                a subnet-evm\n--force overwrite           the existing configuration if one exists\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for public\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n--node-url string           [optional] URL of an already running subnet validator\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Network Selection Options for Avalanche Deployment\nDESCRIPTION: Interactive prompt showing network options for blockchain deployment: Local Network, Devnet, Fuji Testnet, and Mainnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n? Choose a network for the operation: \n  ▸ Local Network\n    Devnet\n    Fuji Testnet\n    Mainnet\n```\n\n----------------------------------------\n\nTITLE: Enabling Centralized Monitoring with Avalanche-CLI Prompt - Bash\nDESCRIPTION: This CLI prompt asks the user if they want to enable monitoring on a dedicated AWS instance. If confirmed, a separate server with similar specs (except for 50 GB storage) is set up to host Grafana dashboards and aggregated logs. This enables centralized observability of all nodes in the cluster. Additional AWS costs will apply for the monitoring instance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-aws.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  Do you want to set up a separate instance to host monitoring? (This enables you to monitor all your set up instances in one dashboard): \n  ▸ Yes\n    No\n```\n\n----------------------------------------\n\nTITLE: Rendering an Imported MDX Component in Markdown using MDX - JavaScript\nDESCRIPTION: This snippet demonstrates how to render an imported MDX component directly within a Markdown (MDX) document by placing the JSX-like tag <Networks />. This allows dynamic or interactive content to be displayed in place, assuming the documentation build pipeline processes MDX correctly. Prerequisites include a compatible MDX environment and the presence of the imported component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/06-networks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Networks />\n```\n\n----------------------------------------\n\nTITLE: Stopping AvalancheGo Node in Docker\nDESCRIPTION: This command stops the AvalancheGo node running in a Docker container. The node's state and credentials are persisted in the ~/.avalanchego directory, allowing it to resume from where it left off when restarted.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/06-run-validator-nodes.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop avago\n```\n\n----------------------------------------\n\nTITLE: Listing Delegators in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of delegators in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/delegators \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Chain-Specific Settings in AvalancheGo JSON\nDESCRIPTION: Example JSON configuration file structure for chain-specific settings in AvalancheGo. This should be placed in the appropriate directory based on chain ID or alias.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/chain-configs/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow-unfainalized-queries\": true,\n  \"pruning-enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance with Foundry on EVM Blockchain\nDESCRIPTION: This command checks the balance of a specified address using the cast tool from Foundry. It requires the RPC URL of your blockchain and returns the balance in wei.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/04-your-evm-blockchain/03-sending-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast balance --rpc-url myblockchain 0x321f6B73b6dFdE5C73731C39Fd9C89c7788D5EBc\n```\n\n----------------------------------------\n\nTITLE: Response Format for avax.export API\nDESCRIPTION: Example response from the avax.export API showing the transaction ID of the completed export transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"txID\": \"2W5JuFENitZKTpJsy9igBpTcEeBKxBHHGAUkgsSUnkjVVGQ9i8\"\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: GenesisAsset Example with Byte-Level Representation in Avalanche\nDESCRIPTION: This example demonstrates a complete GenesisAsset with specific values for each field and shows its corresponding byte-level representation. It illustrates how the structure is serialized in practice, with detailed comments for each field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_55\n\nLANGUAGE: text\nCODE:\n```\n[\n    Alias         <- 0x617373657431\n    NetworkID     <- 0x00003039\n    BlockchainID  <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Outputs       <- []\n    Inputs        <- []\n    Memo          <- 0x66x726f6d20736e6f77666c616b6520746f206176616c616e636865\n    Name          <- 0x617373657431\n    Symbol        <- 0x66x726f6d20736e6f77666c616b6520746f206176616c616e636865\n    Denomination  <- 0x66x726f6d20736e6f77666c616b6520746f206176616c616e636865\n    InitialStates <- [\n        0x0000000000000001000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n    ]\n]\n=\n[\n    // asset alias len:\n    0x00, 0x06,\n    // asset alias:\n    0x61, 0x73, 0x73, 0x65, 0x74, 0x31,\n    // network_id:\n    0x00, 0x00, 0x30, 0x39,\n    // blockchain_id:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // output_len:\n    0x00, 0x00, 0x00, 0x00,\n    // input_len:\n    0x00, 0x00, 0x00, 0x00,\n    // memo_len:\n    0x00, 0x00, 0x00, 0x1b,\n    // memo:\n    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,\n    0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65,\n    // asset_name_len:\n    0x00, 0x0f,\n    // asset_name:\n    0x6d, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74,\n    // symbol_len:\n    0x00, 0x04,\n    // symbol:\n    0x4d, 0x46, 0x43, 0x41,\n    // denomination:\n    0x07,\n    // number of InitialStates:\n    0x00, 0x00, 0x00, 0x01,\n    // InitialStates[0]:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Avalanche-specific API Endpoint for Custom EVM Instances\nDESCRIPTION: Endpoint format for accessing Avalanche-specific functionality on other EVM instances. Requires substituting the actual blockchain ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n/ext/bc/blockchainID/avax\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchain Configuration with Avalanche CLI\nDESCRIPTION: Configure a new blockchain using Avalanche CLI with custom parameters including VM path, genesis file, token settings, and Warp/ICM features.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/08-build-and-run-custom-genesis-blockchain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain \\\n --custom \\\n --vm $VM_PATH \\\n --genesis \"./.devcontainer/genesis-example.json\" \\\n --force \\\n --sovereign=false \\\n --evm-token \"TOK\" \\\n --warp \\\n --icm\n```\n\n----------------------------------------\n\nTITLE: Encoding a Fixed-Length Byte Array in Avalanche\nDESCRIPTION: Illustrates how fixed-length byte arrays are packed in order without any length prefix when the size is known by context.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    [0x01, 0x02]\nResults in:\n    [0x01, 0x02]\n```\n\n----------------------------------------\n\nTITLE: Deploying Calculator Sender Contract using Forge\nDESCRIPTION: Command for deploying the SimpleCalculatorSenderOnCChain contract to the local C-Chain using Forge with deployment output showing the contract address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/03-create-simple-calculator-sender.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK contracts/interchain-messaging/invoking-functions/SimpleCalculatorSenderOnCChain.sol:SimpleCalculatorSenderOnCChain --broadcast\n```\n\n----------------------------------------\n\nTITLE: Defining Proof of Possession Format in Gantt Chart Notation\nDESCRIPTION: Specifies the binary format for Proof of Possession which contains a 48-byte public key and a 96-byte signature. This structure is used for BLS key verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+------------+----------+-------------------------+\n| public_key : [48]byte |                48 bytes |\n+------------+----------+-------------------------+\n| signature  : [96]byte |                96 bytes |\n+------------+----------+-------------------------+\n                        |               144 bytes |\n                        +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Unsigned Import Transaction Example in Avalanche Protocol\nDESCRIPTION: A complete example of an unsigned import transaction in Avalanche, showing both the abstract components (BaseTx, SourceChain, Ins) and their corresponding byte representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_43\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx        <- 0x00000011000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    SourceChain   <- 0x787cd3243c002e9bf5bbbaea8a42a16c1a19cc105047c66996807cbf16acee10\n    Ins <- [\n            // input:\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x11,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x39, 0xc3, 0x3a, 0x49, 0x9c, 0xe4, 0xc3, 0x3a,\n    0x3b, 0x09, 0xcd, 0xd2, 0xcf, 0xa0, 0x1a, 0xe7,\n    0x0d, 0xbf, 0x2d, 0x18, 0xb2, 0xd7, 0xd1, 0x68,\n    0x52, 0x44, 0x40, 0xe5, 0x5d, 0x55, 0x00, 0x88,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x12, 0x30,\n    0x9c, 0xd5, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n    0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n    0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // sourceChain\n    0x78, 0x7c, 0xd3, 0x24, 0x3c, 0x00, 0x2e, 0x9b,\n    0xf5, 0xbb, 0xba, 0xea, 0x8a, 0x42, 0xa1, 0x6c,\n    0x1a, 0x19, 0xcc, 0x10, 0x50, 0x47, 0xc6, 0x69,\n    0x96, 0x80, 0x7c, 0xbf, 0x16, 0xac, 0xee, 0x10,\n    // input count:\n    0x00, 0x00, 0x00, 0x01,\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Avalanche blockchain command flags\nDESCRIPTION: Available flags for the avalanche blockchain command suite, including options for help, configuration file path, log level, and update check skipping.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for blockchain\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing Network Upgrades Configuration\nDESCRIPTION: Bash command for importing network upgrades configuration for a blockchain using the avalanche-cli tool. This sets up any future network upgrades for the blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade import blockchainName\n```\n\n----------------------------------------\n\nTITLE: Avalanche Validator IncreaseBalance Command Flags in Bash\nDESCRIPTION: Command line flags for the Avalanche validator increaseBalance command. These flags specify the amount to increase the balance by, network selection options, key selection, node identification, and general configuration options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_176\n\nLANGUAGE: bash\nCODE:\n```\n--balance float             amount of AVAX to increase validator's balance by\n--cluster string            operate on the given cluster\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for increaseBalance\n-k, --key string            select the key to use [fuji/devnet deploy only]\n--l1 string                 name of L1 (to increase balance of bootstrap validators only)\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n--node-id string            node ID of the validator\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--validation-id string      validationIDStr of the validator\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Deleting an Avalanche Subnet via CLI\nDESCRIPTION: This Bash command utilizes the `avalanche` CLI tool to remove a subnet. The `subnet delete` subcommand is used, followed by the name of the subnet to be deleted ('myblockchain'). Requires the Avalanche CLI to be installed and configured.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/delete-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet delete myblockchain\n```\n\n----------------------------------------\n\nTITLE: Remove Validator TX Gantt Specification\nDESCRIPTION: Byte layout specification for unsigned remove validator transaction showing the structure of BaseTx, NodeID, SubnetID, and signature indices.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n+---------------+----------------------+------------------------------------------------+\n| base_tx       : BaseTx               |                            size(base_tx) bytes |\n+---------------+----------------------+------------------------------------------------+\n| node_id       : [20]byte             |                                       20 bytes |\n+---------------+----------------------+------------------------------------------------+\n| subnet_id     : [32]byte             |                                       32 bytes |\n+---------------+----------------------+------------------------------------------------+\n| sig_indices   : SubnetAuth           |               4 bytes + len(sig_indices) bytes |\n+---------------+----------------------+------------------------------------------------+\n| 56 + len(sig_indices) + size(base_tx) bytes                                           |\n+---------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project\nDESCRIPTION: Command to create a new Next.js project using create-next-app\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/privy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract\nDESCRIPTION: Forge command to deploy the PayableExample contract to the blockchain using a private key\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/05-transfers-in-smart-contracts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK src/my-contracts/PayableExample.sol:PayableExample --broadcast\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC-20 Token Address\nDESCRIPTION: Command to display the stored ERC-20 token address on C-Chain\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/06-deploy-with-avalanche-cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $ERC20_C_CHAIN\n```\n\n----------------------------------------\n\nTITLE: Initiating Avalanche L1 Import with Avalanche-CLI\nDESCRIPTION: This command starts the interactive process for importing an existing public Avalanche L1 (Subnet) configuration into Avalanche-CLI. It is used when an L1 was created manually or outside the CLI and needs to be managed by the tool. Requires Avalanche-CLI to be installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain import public\n```\n\n----------------------------------------\n\nTITLE: Importing ToolboxMdxWrapper and CreateChain Components in TypeScript\nDESCRIPTION: This code snippet imports the ToolboxMdxWrapper component and the CreateChain component from specific paths. These components are used to create an interactive tool for blockchain creation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/05-create-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport CreateChain from \"../../../../toolbox/src/toolbox/L1/CreateChain.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Faucet Server Environment Variables (Bash/.env)\nDESCRIPTION: Shows the format for defining necessary secret environment variables in a `.env` file for the faucet server. This includes private keys for the wallets funding the faucet drops (either chain-specific or a fallback `PK`) and the Google reCAPTCHA secret key for server-side verification. These variables should not be committed to version control.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nC=\"C chain private key\"\nWAGMI=\"Wagmi chain private key\"\nPK=\"Sender Private Key with Funds in it\"\nCAPTCHA_SECRET=\"Google reCAPTCHA Secret\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Unsigned BaseTx Structure in Avalanche\nDESCRIPTION: Gantt chart representation of the Unsigned BaseTx structure, showing the size and arrangement of its components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n+---------------+----------------------+-----------------------------------------+\n| type_id       : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| network_id    : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| blockchain_id : [32]byte             |                                32 bytes |\n+---------------+----------------------+-----------------------------------------+\n| outputs       : []TransferableOutput |                 4 + size(outputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| inputs        : []TransferableInput  |                  4 + size(inputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| memo          : [256]byte            |                    4 + size(memo) bytes |\n+---------------+----------------------+-----------------------------------------+\n                          | 52 + size(outputs) + size(inputs) + size(memo) bytes |\n                          +------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Removing a Network Snapshot with avalanche-network-runner (Bash)\nDESCRIPTION: Demonstrates how to remove a saved network snapshot using the 'avalanche-network-runner control remove-snapshot' command via both the command-line interface (CLI) and its corresponding HTTP API endpoint. The snapshot to be removed is identified by its name (e.g., 'node5').\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control remove-snapshot snapshot-name [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control remove-snapshot node5\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/removesnapshot' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"snapshot_name\":\"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Viewing AvalancheGo Node Logs in Docker\nDESCRIPTION: This command allows you to follow the logs of the AvalancheGo node running in a Docker container. It's useful for monitoring the node's status and troubleshooting issues.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/06-run-validator-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f avago\n```\n\n----------------------------------------\n\nTITLE: Applying Generated Upgrade Configuration Locally\nDESCRIPTION: This command uses Avalanche-CLI to apply the previously generated (or imported) upgrade configuration to a locally running deployment of the 'testblockchain'. It requires that the blockchain is already deployed locally and the upgrade configuration exists within the tool's internal storage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade apply testblockchain\n```\n\n----------------------------------------\n\nTITLE: Providing the Genesis File Path during L1 Import\nDESCRIPTION: This prompt requires the user to enter the local filesystem path to the genesis file of the Avalanche L1 being imported. The CLI initially shows an '✗' indicating input is needed. A valid path to the genesis JSON file is required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n✗ Provide the path to the genesis file: /tmp/subnet_evm.genesis.json\n```\n\n----------------------------------------\n\nTITLE: Partial Transaction Signing Status and Export\nDESCRIPTION: Status message indicating that a transaction has been partially signed and needs additional signatures. The CLI prompts for a file path to save the partially signed transaction for further signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nPartial TX created\n\n1 of 2 required Add Validator signatures have been signed. Saving TX to disk to enable remaining signing.\n\nPath to export partially signed TX to:\n```\n\n----------------------------------------\n\nTITLE: Contract Deployer AllowList Configuration\nDESCRIPTION: Genesis configuration for restricting contract deployment permissions using an allow list.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contractDeployerAllowListConfig\": {\n    \"blockTimestamp\": 0,\n    \"adminAddresses\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Script in package.json (JSON)\nDESCRIPTION: Shows the `compile` script definition within a `package.json` file. This script uses `npx hardhat compile` to compile the Solidity smart contracts in the Hardhat project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"compile\": \"npx hardhat compile\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Public IP for Node\nDESCRIPTION: Command line configuration for setting a node's public IP address to ensure proper connectivity and maintain high uptime for validation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/how-to-stake.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--public-ip=[NODE'S PUBLIC IP]\n```\n\n----------------------------------------\n\nTITLE: Transaction Fully Signed Confirmation Message\nDESCRIPTION: Output displayed when all required signatures for a transaction have been collected. The message confirms the transaction is fully signed, overwrite's the existing file, and suggests the commit command to execute.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nAll 2 required Tx signatures have been signed. Saving TX to disk to enable commit.\n\nOverwriting partiallySigned.txt\n\nTx is fully signed, and ready to be committed\n\nCommit command: avalanche transaction commit testblockchain --input-tx-filepath partiallySigned.txt\n```\n\n----------------------------------------\n\nTITLE: Rendering Subnet Creation Component in JSX\nDESCRIPTION: This JSX code renders the CreateSubnet component wrapped in a ToolboxMdxWrapper. It provides the user interface for creating a Subnet on the Avalanche P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/03-create-subnet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <CreateSubnet />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Network Selection for Receive\nDESCRIPTION: Shows the interactive prompt for network selection during the receive step. User selects 'Mainnet', consistent with the send step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Network to use:\n  ▸ Mainnet\n    Fuji\n    Local Network\n```\n\n----------------------------------------\n\nTITLE: Restarting the Local Avalanche Network using Bash\nDESCRIPTION: This command uses the Avalanche-CLI tool to restart the local Avalanche network after the VM upgrade configuration is complete. Successfully restarting the network applies the VM upgrade. Note that if multiple Avalanche L1s are running, they must all use compatible RPC Protocol versions for the network to start correctly.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-virtual-machine.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche network start\n```\n\n----------------------------------------\n\nTITLE: Node ID Response Format\nDESCRIPTION: Example JSON response showing the node ID, BLS public key and proof of possession\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/node-validator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"nodeID\": \"NodeID-5mb46qkSBj81k9g9e4VFjGGSbaaSLFRzD\",\n    \"nodePOP\": {\n      \"publicKey\": \"0x8f95423f7142d00a48e1014a3de8d28907d420dc33b3052a6dee03a3f2941a393c2351e354704ca66a3fc29870282e15\",\n      \"proofOfPossession\": \"0x86a3ab4c45cfe31cae34c1d06f212434ac71b1be6cfe046c80c162e057614a94a5bc9f1ded1a7029deb0ba4ca7c9b71411e293438691be79c2dbf19d1ca7c3eadb9c756246fc5de5b7b89511c7d7302ae051d9e03d7991138299b5ed6a570a98\"\n    }\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Validators in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of validators in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/validators \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Rendering the CertificatePage Component in JSX\nDESCRIPTION: This JSX snippet renders the `CertificatePage` React component. It passes the specific course identifier 'multichain-architecture' via the `courseId` prop, instructing the component which certificate to display. This component relies on the prior import statement.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/certificate.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CertificatePage courseId=\"multichain-architecture\"/>\n```\n\n----------------------------------------\n\nTITLE: Using the removeValidator Command in Avalanche CLI (Bash)\nDESCRIPTION: Demonstrates the basic usage structure for the `avalanche blockchain removeValidator` command. This command is used to stop a whitelisted subnet validator by providing its NodeID. Flags can be used to bypass interactive prompts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain removeValidator [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Validator Manager Deployment\nDESCRIPTION: Imports necessary React components for deploying the Validator Manager, including message handling and the main deployment component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/01-deploy-validator-manager.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport DeployValidatorMessages from \"../../../../toolbox/src/toolbox/ValidatorManager/DeployValidatorMessages.tsx\"\nimport DeployValidatorManager from \"../../../../toolbox/src/toolbox/ValidatorManager/DeployValidatorManager.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Cross-Chain Messenger\nDESCRIPTION: Shell commands to create the necessary directory structure and contract file for the cross-chain messenger application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir teleporter/contracts/src/CrossChainApplications/MyExampleCrossChainMessenger/\ntouch teleporter/contracts/src/CrossChainApplications/MyExampleCrossChainMessenger/MyExampleCrossChainMessenger.sol\n```\n\n----------------------------------------\n\nTITLE: Token Transferrer deployment flags in Avalanche CLI\nDESCRIPTION: Available flags for configuring Token Transferrer deployment, including chain specifications, network options, token parameters, and key management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\n--c-chain-home set               the Transferrer's Home Chain into C-Chain\n--c-chain-remote set             the Transferrer's Remote Chain into C-Chain\n--cluster string                 operate on the given cluster\n--deploy-erc20-home string       deploy a Transferrer Home for the given Chain's ERC20 Token\n--deploy-native-home deploy      a Transferrer Home for the Chain's Native Token\n--deploy-native-remote deploy    a Transferrer Remote for the Chain's Native Token\n--devnet operate                 on a devnet network\n--endpoint string                use the given endpoint for network operations\n-f, --fuji testnet               operate on fuji (alias to testnet\n-h, --help help                  for deploy\n--home-blockchain string         set the Transferrer's Home Chain into the given CLI blockchain\n--home-genesis-key use           genesis allocated key to deploy Transferrer Home\n--home-key string                CLI stored key to use to deploy Transferrer Home\n--home-private-key string        private key to use to deploy Transferrer Home\n--home-rpc string                use the given RPC URL to connect to the home blockchain\n-l, --local operate              on a local network\n--remote-blockchain string       set the Transferrer's Remote Chain into the given CLI blockchain\n--remote-genesis-key use         genesis allocated key to deploy Transferrer Remote\n--remote-key string              CLI stored key to use to deploy Transferrer Remote\n--remote-private-key string      private key to use to deploy Transferrer Remote\n--remote-rpc string              use the given RPC URL to connect to the remote blockchain\n--remote-token-decimals uint8    use the given number of token decimals for the Transferrer Remote [defaults to token home's decimals (18 for a new wrapped native home token)]\n--remove-minter-admin remove     the native minter precompile admin found on remote blockchain genesis\n-t, --testnet fuji               operate on testnet (alias to fuji)\n--use-home string                use the given Transferrer's Home Address\n--version string                 tag/branch/commit of Avalanche Interchain Token Transfer (ICTT) to be used (defaults to main branch)\n--config string                  config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string               log level for the application (default \"ERROR\")\n--skip-update-check skip         check for new versions\n```\n\n----------------------------------------\n\nTITLE: X-Chain API Endpoint URL Format\nDESCRIPTION: Specifies the format for the endpoint URL used to send API calls to the X-Chain API on an Avalanche node. It combines the node's base URL (`[node-ip]:[http-port]`) with the X-Chain specific path (`/ext/bc/X`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n[node-ip]:[http-port]/ext/bc/X\n```\n\n----------------------------------------\n\nTITLE: Unsigned Add Permissionless Delegator TX Specification with Gantt Chart\nDESCRIPTION: A specification for the structure of an unsigned add permissionless delegator transaction, presented as a Gantt chart. It details the components, their sizes, and the overall byte layout of the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n+---------------+----------------------+------------------------------------------------+\n| base_tx       : BaseTx               |                            size(base_tx) bytes |\n+---------------+----------------------+------------------------------------------------+\n| validator     : Validator            |                                       44 bytes |\n+---------------+----------------------+------------------------------------------------+\n| subnet_id     : [32]byte             |                                       32 bytes |\n+---------------+----------------------+------------------------------------------------+\n| stake_outs    : []TransferOut        |                     4 + size(stake_outs) bytes |\n+---------------+----------------------+------------------------------------------------+\n| delegator_rewards_owner : SECP256K1OutputOwners | size(delegator_rewards_owner) bytes |\n+---------------+----------------------+------------------------------------------------+\n| 80 + size(base_tx) + size(stake_outs) + size(delegator_rewards_owner) bytes           |\n+---------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Querying and Setting HelloWorld AllowList Role in Go\nDESCRIPTION: Provides auto-generated helper functions for querying and updating the AllowList role for an address in the HelloWorld precompile. These functions depend on the allowlist module, the contract's storage structure, and an initialized StateDB. Key inputs are the contract's storage address, the user address, and the desired role. Outputs are the queried role or the update action. They abstract underlying key construction and storage logic; precompile authors must avoid key collisions for their own data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// GetHelloWorldAllowListStatus returns the role of [address] for the HelloWorld list.\nfunc GetHelloWorldAllowListStatus(stateDB contract.StateDB, address common.Address) allowlist.Role {\n\treturn allowlist.GetAllowListStatus(stateDB, ContractAddress, address)\n}\n\n// SetHelloWorldAllowListStatus sets the permissions of [address] to [role] for the\n// HelloWorld list. Assumes [role] has already been verified as valid.\n// This stores the [role] in the contract storage with address [ContractAddress]\n// and [address] hash. It means that any reusage of the [address] key for different value\n// conflicts with the same slot [role] is stored.\n// Precompile implementations must use a different key than [address] for their storage.\nfunc SetHelloWorldAllowListStatus(stateDB contract.StateDB, address common.Address, role allowlist.Role) {\n\tallowlist.SetAllowListRole(stateDB, ContractAddress, address, role)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Prefixes in Go\nDESCRIPTION: Defines constant prefixes for different types of data in the key-value store to organize various state elements.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\t// Active state\n\tbalancePrefix   = 0x0\n\theightPrefix    = 0x1\n\ttimestampPrefix = 0x2\n\tfeePrefix       = 0x3\n)\n```\n\n----------------------------------------\n\nTITLE: Serializing StakeableLockOut in Avalanche\nDESCRIPTION: Example of serializing a StakeableLockOut structure in Avalanche, which includes TypeID, Locktime, and TransferableOutput. The example shows both a compact representation and a detailed byte-level breakdown.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_57\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID              <- 0x00000016\n    Locktime            <- 0x000000000000d431\n    TransferableOutput  <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x16,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // transferable_out\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Cross-Chain Message using Cast\nDESCRIPTION: Command to send a 'Hello' message from C-chain to Avalanche L1 using the deployed sender contract. Uses Cast CLI with local RPC URL and private key for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/07-send-a-message.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $SENDER_ADDRESS \"sendMessage(address,string)\" $RECEIVER_ADDRESS \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Output Format in Protocol Buffer\nDESCRIPTION: Describes the Transferable Output structure using Protocol Buffer notation, specifying a 32-byte asset ID field and an output field of variable size.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmessage TransferableOutput {\n    bytes asset_id = 1; // 32 bytes\n    Output output = 2;  // size(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Source Chain for Transfer in Avalanche CLI (zsh)\nDESCRIPTION: Displays the interactive prompt from the `avalanche key transfer` command where the user selects the source chain (P-Chain or C-Chain) from which the AVAX funds will be sent. The option 'My blockchain isn't listed' might be relevant for subnet interactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n? Where are the funds to transfer?:\n  ▸ P-Chain\n    C-Chain\n    My blockchain isn't listed\n```\n\n----------------------------------------\n\nTITLE: Listing Subnets with cURL\nDESCRIPTION: Shows how to list all Avalanche L1 IDs (SubnetID) in the network using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/listsubnets'\n```\n\n----------------------------------------\n\nTITLE: Transferring Database Backup\nDESCRIPTION: SCP command to transfer the compressed database backup to another machine.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nscp -r ubuntu@PUBLICIP:/home/ubuntu/avalanche_db_backup.zip ~/avalanche_db_backup.zip\n```\n\n----------------------------------------\n\nTITLE: Importing a Private Key File with Avalanche-CLI in Bash\nDESCRIPTION: This Avalanche-CLI command imports a private key from a specified file ('/tmp/test.pk') and registers it under the name 'othertest'. It displays status messages upon loading the user key. The '--file' argument must point to a valid private key in hexadecimal format; requires Avalanche-CLI installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche key create othertest --file /tmp/test.pk\nLoading user key...\nKey loaded\n```\n\n----------------------------------------\n\nTITLE: Gantt Unsigned Create Asset TX Specification\nDESCRIPTION: Byte layout specification for an Unsigned Create Asset Transaction in Avalanche. It extends the Base TX with additional fields for asset creation including name, symbol, denomination, and initial states.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n+----------------+----------------+--------------------------------------+\n| base_tx        : BaseTx         |                  size(base_tx) bytes |\n+----------------+----------------+--------------------------------------+\n| name           : string         |                  2 + len(name) bytes |\n+----------------+----------------+--------------------------------------+\n| symbol         : string         |                2 + len(symbol) bytes |\n+----------------+----------------+--------------------------------------+\n| denomination   : byte           |                              1 bytes |\n+----------------+----------------+--------------------------------------+\n| initial_states : []InitialState |       4 + size(initial_states) bytes |\n+----------------+----------------+--------------------------------------+\n                                  | size(base_tx) + size(initial_states) |\n                                  |  + 9 + len(name) + len(symbol) bytes |\n                                  +--------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Avalanche Node Loadtest Command\nDESCRIPTION: The loadtest command suite starts and stops a load test for an existing devnet cluster. It includes subcommands for starting and stopping load tests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_101\n\nLANGUAGE: bash\nCODE:\n```\navalanche node loadtest [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Avalanche Blockchain with CLI\nDESCRIPTION: Command syntax and flags for deleting an existing blockchain configuration using Avalanche CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain delete [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing a Static Memory Array - Solidity\nDESCRIPTION: Demonstrates simultaneous declaration and initialization of a static array in memory within a function. Assigns five initial values to a uint8[5] memory array. Input is the explicit array; output is a ready-to-use in-memory static array.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nuint8[5] memory arr = [1, 2, 3, 4, 5];\n```\n\n----------------------------------------\n\nTITLE: Executing Multi-hop Token Transfer Using Foundry Cast\nDESCRIPTION: Initiates a token transfer from the source blockchain to a destination blockchain via Avalanche C-Chain using the cast send command. The transfer includes parameters for source chain ID, token addresses, recipient address, and transfer amount.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/04-multihop.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $ERC20_TOKEN_REMOTE_L1 \\\n\"send((bytes32, address, address, address, uint256, uint256, uint256, address), uint256)\" \\\n\"(${SOURCE_BLOCKCHAIN2_ID_HEX}, ${ERC20_TOKEN_REMOTE_CHAIN2}, ${FUNDED_ADDRESS}, ${ERC20_C_CHAIN}, 0, 0, 250000, ${FUNDED_ADDRESS})\" 500000000000000\n```\n\n----------------------------------------\n\nTITLE: Deploying Token Receiver Contract using Forge\nDESCRIPTION: Command to deploy the TokenReceiver contract using Forge with constructor arguments for the ERC20 token address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/09-transfer-erc20-to-sc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK src/my-contracts/TokenReceiver.sol:TokenReceiver --broadcast --constructor-args $ERC20_CONTRACT_L1\n```\n\n----------------------------------------\n\nTITLE: Monitoring Relayer Logs in Avalanche\nDESCRIPTION: Checks the relayer logs to understand the detailed message transmission process in the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/06-send-a-roundtrip-message.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer logs\n```\n\n----------------------------------------\n\nTITLE: Confirming Genesis File Path Validation in Avalanche-CLI\nDESCRIPTION: This shows the state after the user has provided a valid path to the genesis file. The checkmark '✔' indicates that Avalanche-CLI has successfully located and validated the existence of the specified file on the local disk.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n✔ Provide the path to the genesis file: /tmp/subnetevm_genesis.json\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Cost in EVM\nDESCRIPTION: Basic formula showing how transaction costs are calculated in EVM-based networks by multiplying gas units with gas price.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/04-gas-fees-and-limit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTransaction Cost = Gas Units * Gas Price\n```\n\n----------------------------------------\n\nTITLE: Adding Avalanche-CLI to System Path - Bash\nDESCRIPTION: Temporarily adds the ~/bin directory (where Avalanche-CLI is installed) to the user\\'s PATH for the current session. This lets users invoke the \\'avalanche\\' command directly from any terminal without specifying the full path. Requires that ~/bin exists and contains the avalanche binary.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=~/bin:$PATH\n\n```\n\n----------------------------------------\n\nTITLE: Resuming a Node with avalanche-network-runner (Bash)\nDESCRIPTION: Provides examples for resuming a previously paused or stopped node using the 'avalanche-network-runner control resume-node' command. Both the simple CLI command and the equivalent HTTP API call via curl are shown.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control resume-node node-name [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control resume-node node5\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/resumenode' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Stored Key Selection - Text\nDESCRIPTION: Prompts the user to select one of the existing stored keys (e.g., ewoq) for use as the controller of the ValidatorManager contract. Essential for determining who can manage validators. Intended for use during test network setup; warns against using EWOQ key in production.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n? Which stored key should be used enable as controller of ValidatorManager contract?: \n  ▸ ewoq\n    cli-awm-relayer\n    cli-teleporter-deployer\n\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balances\nDESCRIPTION: Command to display token balances across multiple chains and addresses\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/06-deploy-with-avalanche-cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --local --keys ewoq  --blockchains c,myblockchain --tokens $ERC20_C_CHAIN,$ERC20_REMOTE_L1\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus\nDESCRIPTION: Command to execute step 1 of the installer script which installs and configures Prometheus.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh --1\n```\n\n----------------------------------------\n\nTITLE: Removing Node in Bash\nDESCRIPTION: Demonstrates how to remove a specific node from the network using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control remove-node node5\n```\n\n----------------------------------------\n\nTITLE: Listing Subnets in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of subnets in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/subnets \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Permanently Adding Avalanche-CLI to Bash PATH - Bash\nDESCRIPTION: Appends the path modification command to the user\\'s ~/.bashrc file and reloads the file to permanently set ~/bin in the PATH for future shell sessions. This is necessary to ensure the \\'avalanche\\' CLI remains accessible after reboots or new terminal sessions. The user must be using bash as their shell for this to take effect.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 'export PATH=~/bin:$PATH' >> ~/.bashrc\nsource ~/.bashrc\n\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Token Symbol - Text\nDESCRIPTION: Prompts the user to input a string as the native token symbol for the blockchain (e.g., AVAX, JOE, BTC). This input is a part of the startup configuration and does not require uniqueness across all blockchains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n✗ Token Symbol: \n\n```\n\n----------------------------------------\n\nTITLE: Logging Avalanche Node Reinitialization and Chain Bootstrapping\nDESCRIPTION: This log snippet shows the process of reinitializing the blockchain after pruning and the beginning of the bootstrapping process for the C-Chain, X-Chain, and P-Chain. It includes information on the most recent local header and full block, as well as the initialization of various APIs and routes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_6\n\nLANGUAGE: log\nCODE:\n```\nINFO [02-09|00:59:34.367] Completed offline pruning. Re-initializing blockchain.\nINFO [02-09|00:59:34.387] Loaded most recent local header          number=10,671,401 hash=b52d0a..7bd166 age=40m29s\nINFO [02-09|00:59:34.387] Loaded most recent local full block      number=10,671,401 hash=b52d0a..7bd166 age=40m29s\nINFO [02-09|00:59:34.387] Initializing snapshots                   async=true\nDEBUG[02-09|00:59:34.390] Reinjecting stale transactions           count=0\nINFO [02-09|00:59:34.395] Transaction pool price threshold updated price=470,000,000,000\nINFO [02-09|00:59:34.396] Transaction pool price threshold updated price=225,000,000,000\nINFO [02-09|00:59:34.396] Transaction pool price threshold updated price=0\nINFO [02-09|00:59:34.396] lastAccepted = 0xb52d0a1302e4055b487c3a0243106b5e13a915c6e178da9f8491cebf017bd166\nINFO [02-09|00:59:34] <C Chain> snow/engine/snowman/transitive.go#67: initializing consensus engine\nINFO [02-09|00:59:34] <C Chain> snow/engine/snowman/bootstrap/bootstrapper.go#220: Starting bootstrap...\n// ... additional logs for X-Chain and P-Chain initialization ...\nINFO [02-09|00:59:49] <C Chain> snow/engine/snowman/bootstrap/bootstrapper.go#406: bootstrapping fetched 1241 blocks. Executing state transitions...\n```\n\n----------------------------------------\n\nTITLE: Flags for the removeValidator Command in Avalanche CLI (Bash)\nDESCRIPTION: Lists the available command-line flags for the `avalanche blockchain removeValidator` command. These flags control various aspects like signature aggregation, key usage for fees, network selection (devnet, fuji, mainnet, local), node identification, transaction output paths, authentication keys, and uptime calculation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n--aggregator-allow-private-peers allow    the signature aggregator to connect to peers with private IP (default true)\n--aggregator-extra-endpoints strings      endpoints for extra nodes that are needed in signature aggregation\n--aggregator-log-level string             log level to use with signature aggregator (default \"Off\")\n--blockchain-genesis-key use              genesis allocated key to pay fees for completing the validator's removal (blockchain gas token)\n--blockchain-key string                   CLI stored key to use to pay fees for completing the validator's removal (blockchain gas token)\n--blockchain-private-key string           private key to use to pay fees for completing the validator's removal (blockchain gas token)\n--cluster string                          operate on the given cluster\n--devnet operate                          on a devnet network\n--endpoint string                         use the given endpoint for network operations\n--force force                             validator removal even if it's not getting rewarded\n-f, --fuji testnet                        operate on fuji (alias to testnet\n-h, --help help                           for removeValidator\n-k, --key string                          select the key to use [fuji deploy only]\n-g, --ledger use                          ledger instead of key (always true on mainnet, defaults to false on fuji)\n--ledger-addrs strings                    use the given ledger addresses\n-l, --local operate                       on a local network\n-m, --mainnet operate                     on mainnet\n--node-endpoint string                    remove validator that responds to the given endpoint\n--node-id string                          node-id of the validator\n--output-tx-path string                   (for non-SOV blockchain only) file path of the removeValidator tx\n--rpc string                              connect to validator manager at the given rpc endpoint\n--subnet-auth-keys strings                (for non-SOV blockchain only) control keys that will be used to authenticate the removeValidator tx\n-t, --testnet fuji                        operate on testnet (alias to fuji)\n--uptime uint                             validator's uptime in seconds. If not provided, it will be automatically calculated\n--config string                           config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                        log level for the application (default \"ERROR\")\n--skip-update-check skip                  check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Validator Manager Ownership Transfer\nDESCRIPTION: This snippet imports the TransferOwnership component from the StakingManager module and a ToolboxMdxWrapper component. These components are used to create a user interface for transferring Validator Manager ownership.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/04-transfer-ownership.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport TransferOwnership from \"../../../../toolbox/src/toolbox/StakingManager/TransferOwnership.tsx\";\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block defining the page metadata including title, description and index status.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Toolchains\ndescription: Learn about different toolchains available on the Avalanche C-chain.\nindex: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Subnet Configuration\nDESCRIPTION: Command to create a config.json file with track-subnets configuration for the specified SubnetID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/avalanche-l1-nodes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/.avalanchego\necho '{\"track-subnets\": \"28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY\"}' > config.json\n```\n\n----------------------------------------\n\nTITLE: Alternative Node Startup Command\nDESCRIPTION: Alternative command to run AvalancheGo node using command line flag instead of config file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/avalanche-l1-nodes.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanchego --track-subnets 28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY --network-id=fuji\n```\n\n----------------------------------------\n\nTITLE: L1 Transaction Specifications\nDESCRIPTION: Collection of L1 transaction type definitions including Convert Subnet, Register Validator, Set Weight, and Disable Validator\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_62\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ConvertSubnetToL1Tx {\n    BaseTx base_tx = 1;              // size(base_tx)\n    SubnetID subnet = 2;             // 32 bytes\n    ChainID chain_id = 3;            // 32 bytes\n    bytes address = 4;               // 4 + len(address) bytes\n    repeated L1Validator validators = 5; // 4 + size(validators) bytes\n    SubnetAuth subnet_auth = 6;      // 4 bytes + len(sig_indices)\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage RegisterL1ValidatorTx {\n    BaseTx base_tx = 1;        // size(base_tx)\n    uint64 balance = 2;        // 8 bytes\n    bytes signer = 3;          // 96 bytes\n    WarpMessage message = 4;   // size(message) bytes\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SetL1ValidatorWeightTx {\n    BaseTx base_tx = 1;        // size(base_tx)\n    WarpMessage message = 2;   // size(message) bytes\n}\n```\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DisableL1ValidatorTx {\n    BaseTx base_tx = 1;            // size(base_tx)\n    bytes validation_id = 2;       // 32 bytes\n    Verifiable disable_auth = 3;   // size(disable_auth) bytes\n}\n```\n\n----------------------------------------\n\nTITLE: BeforeSuite Test Execution Output\nDESCRIPTION: Initial test suite execution output showing the BeforeSuite setup and AvalancheGo node startup\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nld: warning: could not create compact unwind for _blst_sha256_block_data_order: does not use RBP or RSP based frame\n\nCompiled load.test\nRunning Suite: subnet-evm precompile ginkgo test suite - /Users/avalabs/go/src/github.com/ava-labs/subnet-evm\n===================================================================================================================\nRandom Seed: 1674833631\n\nWill run 1 of 7 specs\n------------------------------\n[BeforeSuite]\n/Users/avalabs/go/src/github.com/ava-labs/subnet-evm/tests/precompile/precompile_test.go:31\n  > Enter [BeforeSuite] TOP-LEVEL - /Users/avalabs/go/src/github.com/ava-labs/subnet-evm/tests/precompile/precompile_test.go:31 @ 01/27/23 10:33:51.001\nINFO [01-27|10:33:51.002] Starting AvalancheGo node                wd=/Users/avalabs/go/src/github.com/ava-labs/subnet-evm\nINFO [01-27|10:33:51.002] Executing                                cmd=\"./scripts/run.sh \"\n[streaming output] Using branch: hello-world-tutorial-walkthrough\n...\n[BeforeSuite] PASSED [15.002 seconds]\n```\n\n----------------------------------------\n\nTITLE: Rebuild Docker Container\nDESCRIPTION: Docker command to rebuild and restart the VM container with the new action registration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/03-creating-actions/02-register-action.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -t 1; docker compose up -d --build devnet faucet frontend\n```\n\n----------------------------------------\n\nTITLE: Proto Specification for Unsigned Transform Avalanche L1 TX\nDESCRIPTION: A Protocol Buffer message definition for the Transform Avalanche L1 transaction, specifying each field and its corresponding type.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nmessage TransformSubnetTx {\n    BaseTx base_tx = 1;              // size(base_tx)\n    SubnetID subnet_id = 2;          // 32 bytes\n    bytes asset_id = 3;              // 32 bytes\n    uint64 initial_supply = 4;       // 08 bytes\n    uint64 maximum_supply = 5;       // 08 bytes\n    uint64 min_consumption_rate = 6; // 08 bytes\n    uint64 max_consumption_rate = 7; // 08 bytes\n    uint64 min_validator_stake = 8;  // 08 bytes\n    uint64 max_validator_stake = 9;  // 08 bytes\n    uint32 min_stake_duration = 10;  // 04 bytes\n    uint32 max_stake_duration = 11;  // 04 bytes\n    uint32 min_delegation_fee = 12;  // 04 bytes\n    uint32 min_delegator_stake = 13; // 08 bytes\n    byte max_validator_weight_factor = 14; // 01 byte\n    uint32 uptime_requirement = 15; // 04 bytes\n    SubnetAuth subnet_auth = 16;    // 04 bytes + len(sig_indices)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balances Across Chains\nDESCRIPTION: This command lists the token balances for specified addresses across different subnets (C-Chain and custom L1) in the local network. It shows the initial distribution of TOK tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-token-bridge.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --local --keys ewoq,blockchain_airdrop --subnets c,testblockchain --tokens 0x5DB9A7629912EBF95876228C24A848de0bfB43A9,0x7DD1190e6F6CE8eE13C08F007FdAEE2f881B45D0\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Token Minting via CLI Prompt\nDESCRIPTION: Displays the CLI prompt asking the user whether to enable the Native Minter Precompile. Selecting 'Yes' activates the feature, allowing further configuration of minting permissions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/08-activate-native-minter.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n? Allow minting of new native tokens?: \n    No, I want the supply of the native tokens be hard-capped\n  ▸ Yes, I want to be able to mint additional the native tokens (Native Minter Precompile ON)\n```\n\n----------------------------------------\n\nTITLE: Specifying Devnet Endpoint in Avalanche CLI (zsh)\nDESCRIPTION: Illustrates the prompt and example input required when the 'Devnet' option is chosen during the `avalanche key transfer` workflow. The user needs to provide the base RPC URL for their specific Devnet environment (excluding the C-Chain specific path).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n✔ Devnet Endpoint: https://demo.avax-dev.network\n```\n\n----------------------------------------\n\nTITLE: AVAX Get Atomic Transaction Status Signature\nDESCRIPTION: Method signature for checking atomic transaction status, returning status and block height for accepted transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\navax.getAtomicTxStatus({txID: string}) -> {\n  status: string,\n  blockHeight: string // returned when status is Accepted\n}\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube Component in React/Next.js\nDESCRIPTION: This code imports a custom YouTube component from the project's components directory, which is used to embed a YouTube video explaining the Etna upgrade in the article.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/multi-chain-architecture/etna-upgrade-motivation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport YouTube from '@/components/content-design/youtube';\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Node Load Test\nDESCRIPTION: The loadtest start command initiates load testing for an existing devnet cluster. It can create a separate cloud server and build the load test binary based on provided parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_102\n\nLANGUAGE: bash\nCODE:\n```\navalanche node loadtest start [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Completion Log Example\nDESCRIPTION: Example log output indicating the completion of bootstrapping for different chains in the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[09-09|17:01:45.295] INFO <C Chain> snowman/transitive.go:392 consensus starting {\"lastAcceptedBlock\": \"2qaFwDJtmCCbMKP4jRpJwH8EFws82Q2yC1HhWgAiy3tGrpGFeb\"}\n[09-09|17:01:46.199] INFO <P Chain> snowman/transitive.go:392 consensus starting {\"lastAcceptedBlock\": \"2ofmPJuWZbdroCPEMv6aHGvZ45oa8SBp2reEm9gNxvFjnfSGFP\"}\n[09-09|17:01:51.628] INFO <X Chain> snowman/transitive.go:334 consensus starting {\"lenFrontier\": 1}\n```\n\n----------------------------------------\n\nTITLE: Executing Avalanche Devnet Wizard Command\nDESCRIPTION: Command for creating a development network and deploying, synchronizing and validating a subnet. Includes extensive configuration options for cloud providers, monitoring, and subnet deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_97\n\nLANGUAGE: bash\nCODE:\n```\navalanche node devnet wiz [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Testnet Settings for Avalanche C-Chain\nDESCRIPTION: Network configuration parameters for setting up a local Avalanche C-Chain testnet connection in Core Wallet. Includes network name, RPC URL, chain ID, and token symbol.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/smart-contract-dev/deploy-with-remix-ide.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNetwork Name: Avalanche Local C-Chain\nNew RPC URL: http://127.0.0.1:34890/ext/bc/C/rpc\nChainID: 43112\nSymbol: AVAX\nExplorer: N/A\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA256 Precompile Call in Solidity\nDESCRIPTION: Demonstrates how to define an interface for SHA256 precompile and call it from a Solidity smart contract. The precompile is accessed through a reserved address and performs SHA256 hashing operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/06-precompiles/01-what-are-precompiles.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ISHA256 {\n    // Computes the SHA256 hash of value\n    function hashWithSHA256(string memory value) external view returns(bytes32 hash);\n}\n\ncontract MyContract {  \n    ISHA256 mySHA256Precompile = ISHA256(0x0300000000000000000000000000000000000001);\n    \n    function doSomething() public {\n        bytes32 hash = mySHA256Precompile.hashWithSHA256(\"test\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Message Receipt on Custom Blockchain\nDESCRIPTION: Calls the 'lastMessage' function on the receiver contract to verify that the sent message was successfully received on the destination chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain $RECEIVER_ADDRESS \"lastMessage()(string)\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Relayer Logs with Avalanche CLI\nDESCRIPTION: Command for displaying formatted AWM relayer logs with options to filter by first/last N lines and raw output formatting.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer logs [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: MD5 Hash Result\nDESCRIPTION: The output of the MD5 precompile call showing the bytes16 hash of the string \"test\". This is the expected result when calling the hashWithMD5 function with \"test\" as input.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/08-interact-with-md5.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n0x098f6bcd4621d373cade4e832627b4f6\n```\n\n----------------------------------------\n\nTITLE: Avalanche Subnet CLI Global Flags\nDESCRIPTION: Defines the global flags available for all subnet commands including help, config file location, log level, and update check options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_127\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for subnet\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Getting Node ID\nDESCRIPTION: API call to retrieve the node's unique identifier\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeID\"\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Using Avalanche CLI Subnet Describe Command\nDESCRIPTION: The describe command prints the details of a blockchain configuration to the console. By default, it shows a summary, but with the --genesis flag, it outputs the raw genesis file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_136\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet describe [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Entering Node-ID for Validator Removal - Bash\nDESCRIPTION: Prompts the user to enter the Node-ID of the validator that should be removed. This interactive CLI step ensures that the correct node identity is targeted. The Node-ID must match the identifier found in the node's configuration or startup logs. Failure to enter the correct Node-ID will prevent validator removal.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/remove-validator-l1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n✗ What is the NodeID of the node you want to remove as a blockchain validator?: \n```\n\n----------------------------------------\n\nTITLE: Pausing Node with cURL\nDESCRIPTION: Illustrates pausing a specific node in the network using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/pausenode' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Registering Remote Contract with Home Contract\nDESCRIPTION: Uses the 'cast send' command to call the registerWithHome method on the deployed ERC20TokenRemote contract, initializing the connection between the remote and home contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/03-deploy-token-remote.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain2 --private-key $PK $ERC20_TOKEN_REMOTE_CHAIN2 \\\n\"registerWithHome((address, uint256))\" \"(0x0000000000000000000000000000000000000000, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Transaction Fully Signed Confirmation for Validator Addition\nDESCRIPTION: Confirmation message displayed when all required signatures for the validator addition transaction have been collected. It confirms the transaction is ready to be committed and provides the command to do so.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nAll 2 required Tx signatures have been signed. Saving TX to disk to enable commit.\n\nOverwriting partialAddValidatorTx.txt\n\nTx is fully signed, and ready to be committed\n\nCommit command: avalanche transaction commit testblockchain --input-tx-filepath partialAddValidatorTx.txt\n```\n\n----------------------------------------\n\nTITLE: Declaring a Static Array in Memory - Solidity\nDESCRIPTION: Presents syntax required to declare a static array in memory for function-local use in Solidity. Requires the memory keyword; array size must be known at compile time. Used for temporary array operations within functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n<array-type>[<array-size>] memory <array-name>;\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Transfer Input in Protocol Buffers\nDESCRIPTION: Protocol Buffers message definition for the SECP256K1 Transfer Input, specifying field types and sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1TransferInput {\n    uint32 type_id = 1;                  // 04 bytes\n    uint64 amount = 2;                   // 08 bytes\n    repeated uint32 address_indices = 3; // 04 bytes + 4 bytes * len(address_indices)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ramp On-Ramp Widget\nDESCRIPTION: Implementation of the Ramp on-ramp widget configuration and display, including host app details, swap asset configuration, and user address settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ramp-network.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RampInstantSDK } from '@ramp-network/ramp-instant-sdk';\n\nconst ramp = new RampInstantSDK({\n  hostAppName: 'Your App Name',\n  hostLogoUrl: 'https://yourdomain.com/logo.png',\n  swapAsset: 'AVAX',\n  swapAmount: '100000000000000000', // Optional, in wei\n  userAddress: '0x...', // User's wallet address\n  hostApiKey: 'YOUR_API_KEY',\n  variant: 'auto', // or 'desktop', 'mobile', 'embedded'\n  webhookStatusUrl: 'https://your-webhook-endpoint.com', // Optional\n  defaultFlow: 'ONRAMP', // or 'OFFRAMP'\n});\n\nramp.show();\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 on Mac ARM64 for Avalanche L1 Deployment - Bash\nDESCRIPTION: This command installs Rosetta 2, required for running Avalanche-CLI on ARM64-based Macs. The snippet is intended for Mac users attempting to deploy Avalanche L1s locally using Bash. It requires administrator privileges. There are no inputs other than the default prompt; output is the installation of Rosetta 2 or a notification if already installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsoftwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Adding Advanced avalanche-types Dependency with Features to Cargo.toml\nDESCRIPTION: An enhanced configuration for adding avalanche-types with specific features enabled. This setup is recommended when using TimestampVM as a reference, enabling subnet and codec_base64 features.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/rust-vms/setting-up-environment.mdx#2025-04-23_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\navalanche-types = { version = \"0.1.4\", features = [\"subnet\", \"codec_base64\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Output Structure with Gantt Specification\nDESCRIPTION: Specification for the structure of a Transferable Output, which wraps an output with an asset ID. It contains an AssetID (32 bytes) and an Output field whose size depends on the output type.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+----------+----------+-------------------------+\n| asset_id : [32]byte |                32 bytes |\n+----------+----------+-------------------------+\n| output   : Output   |      size(output) bytes |\n+----------+----------+-------------------------+\n                      | 32 + size(output) bytes |\n                      +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Building AvalancheGo Binary in Bash\nDESCRIPTION: Commands to build AvalancheGo, which is required to run the tests. The binary will be used by the network runner to create a local test network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/avalanchego\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing an RPC Alias in Foundry Commands (Shell)\nDESCRIPTION: This shell snippet shows using the --rpc-url local-c flag with Foundry commands to select a preset RPC endpoint alias rather than a full URL. Using aliases from the Foundry TOML configuration improves readability and reduces command length. The alias (e.g. local-c) must be defined in the project’s foundry.toml file to resolve to the correct RPC endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n--rpc-url local-c\n```\n\n----------------------------------------\n\nTITLE: Installing BuilderKit Package (Bash)\nDESCRIPTION: Installs the '@avalabs/builderkit' package using either npm or yarn package managers. This command adds BuilderKit as a dependency to the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @avalabs/builderkit\n# or\nyarn add @avalabs/builderkit\n```\n\n----------------------------------------\n\nTITLE: Response Format for eth_maxPriorityFeePerGas API\nDESCRIPTION: Example response from the eth_maxPriorityFeePerGas API showing the hexadecimal value of the priority fee needed for transaction inclusion.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": \"0x2540be400\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Validator Manager Initialization Tool in React\nDESCRIPTION: This snippet renders the Initialize component wrapped in a ToolboxMdxWrapper. It provides an interactive interface for users to configure and initialize the Validator Manager contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/04-initialize-poa.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <Initialize />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Transfer Tokens\nDESCRIPTION: Executes a token transfer transaction using Foundry's cast command with specified value and private key\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/03-transfer-native-tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send $MYADDRESS --value 200000  --private-key $PK --rpc-url myblockchain\n```\n\n----------------------------------------\n\nTITLE: Viewing Blockchain Validators\nDESCRIPTION: Command to list and view statistics about blockchain subnet validators across different networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain validators [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Extracting Database Backup\nDESCRIPTION: Command to unzip the database backup into the Avalanche node's directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nunzip avalanche_db_backup.zip\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Setup for Deployment\nDESCRIPTION: Commands to set up required environment variables for contract deployment including RPC URL and private key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport RPC_URL=<YOUR-RPC-ENDPOINT>\nexport PRIVATE_KEY=<YOUR-PRIVATE-KEY>\nexport RPC_URL=https://api.avax-test.network/ext/bc/C/rpc\nexport ETHERSCAN_API_KEY=<YOUR-SNOWTRACE-API-KEY>\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level for C-Chain Admin API in Text\nDESCRIPTION: This admin function sets the log level of the C-Chain. It requires the desired log level as a parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\nadmin.setLogLevel({level:string}) -> {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node ID and BLS Information\nDESCRIPTION: API call to get the node's ID, BLS public key and signature using the info.getNodeID endpoint\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/node-validator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeID\"\n}' -H 'content-type:application/json' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Example JSON RPC Success Response Structure\nDESCRIPTION: Illustrates the structure of a successful JSON RPC 2.0 response. It includes the `jsonrpc` version, the `id` corresponding to the original request, and a `result` object containing the data returned by the API method (in this case, the transaction `Status`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Status\": \"Accepted\"\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Flags for Avalanche Blockchain Import Public (Bash)\nDESCRIPTION: Lists flags for the `avalanche blockchain import public` subcommand. These flags allow specifying the blockchain ID (`--blockchain-id`), target network (e.g., `--fuji`, `--mainnet`, `--devnet`, `--local`, `--custom`), network endpoint (`--endpoint`), VM type (`--evm`), optional node URL (`--node-url`), forcing overwrites (`--force`), and common flags.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n--blockchain-id string      the blockchain ID\n--cluster string            operate on the given cluster\n--custom use                a custom VM template\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n--evm import                a subnet-evm\n--force overwrite           the existing configuration if one exists\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for public\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n--node-url string           [optional] URL of an already running subnet validator\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Attaching a Modifier to a Function in Solidity\nDESCRIPTION: This snippet demonstrates the syntax for applying a previously defined modifier to a Solidity function. The modifier name (and any required arguments) is placed after the function's visibility keyword (e.g., `public`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/05-modifiers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction func() public <modifier>(<arguments>){}\n```\n\n----------------------------------------\n\nTITLE: Saving Deployed Contract Address as Environment Variable\nDESCRIPTION: This command saves the deployed contract address as an environment variable for easy access in subsequent commands.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/05-deploy-and-interact-wrapped-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport WRAPPED_TOKEN=<address>\n```\n\n----------------------------------------\n\nTITLE: Adding a Second Admin Address via Wizard\nDESCRIPTION: This demonstrates adding a second address to the admin list in the Avalanche-CLI wizard. The user selects 'Add' again and provides the next address ('0x1111222233334444aaaabbbbccccddddeeeeffff').\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n✔ Add\nAdd an address: 0xaaaabbbbccccddddeeeeffff1111222233334444\n✔ Add\n✔ Add an address: 0x1111222233334444aaaabbbbccccddddeeeeffff\n```\n\n----------------------------------------\n\nTITLE: Approving Token Transfer using Cast\nDESCRIPTION: Command to approve the receiver contract to spend tokens on behalf of the user using the ERC20 approve function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/09-transfer-erc20-to-sc.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast send $ERC20_CONTRACT_L1 --private-key $PK \"approve(address,uint256)\" $ERC20_RECEIVER_L1 20ether --rpc-url myblockchain\n```\n\n----------------------------------------\n\nTITLE: Managing Local Avalanche Network\nDESCRIPTION: Commands for managing a local, multi-node Avalanche network, including starting, stopping, checking status, and cleaning the network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_82\n\nLANGUAGE: bash\nCODE:\n```\navalanche network [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche network clean [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche network start [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche network status [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche network stop [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Avalanche Node Clusters\nDESCRIPTION: Command to display all available clusters and their associated nodes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_100\n\nLANGUAGE: bash\nCODE:\n```\navalanche node list [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Blockchains with cURL\nDESCRIPTION: Demonstrates listing all blockchain IDs in the network using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/listblockchains'\n```\n\n----------------------------------------\n\nTITLE: Defining an `onlyOwner` Access Control Modifier in Solidity\nDESCRIPTION: This snippet defines a Solidity modifier named `onlyOwner`. It uses a `require` statement to check if the transaction sender (`msg.sender`) matches the stored `owner` address. If the condition fails, it reverts with an error message. If it succeeds, the `_` placeholder transfers execution control back to the function the modifier is attached to. This modifier depends on an `owner` state variable being defined and initialized elsewhere in the contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/05-modifiers.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyOwner() {\n  require(msg.sender == owner, \"You are not the owner\"!);\n  _;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering CreateDefaultBlockchain Component in JSX\nDESCRIPTION: This code snippet imports the CreateDefaultBlockchain component and default MDX components, then renders the CreateDefaultBlockchain component with the default MDX components passed as props.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/03-create-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CreateDefaultBlockchain from \"@/content/common/avalanche-starter-kit/create-default-blockchain.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<CreateDefaultBlockchain components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Load Test Skip Output\nDESCRIPTION: Final test output showing the load simulator test being skipped\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nRunning Suite: subnet-evm small load simulator test suite - /Users/avalabs/go/src/github.com/ava-labs/subnet-evm\n======================================================================================================================\nRandom Seed: 1674833658\n\nWill run 0 of 1 specs\nS [SKIPPED]\n[Load Simulator]\n/Users/avalabs/go/src/github.com/ava-labs/subnet-evm/tests/load/load_test.go:49\n  basic subnet load test [load]\n  /Users/avalabs/go/src/github.com/ava-labs/subnet-evm/tests/load/load_test.go:50\n------------------------------\n\nRan 0 of 1 Specs in 0.000 seconds\nSUCCESS! -- 0 Passed | 0 Failed | 0 Pending | 1 Skipped\nPASS\n```\n\n----------------------------------------\n\nTITLE: Unfinalized Data Query Error Message\nDESCRIPTION: Error message shown when attempting to query unfinalized data, usually caused by networking misconfiguration preventing proper validator connections.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/common-errors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nerr=\"cannot query unfinalized data\"\n```\n\n----------------------------------------\n\nTITLE: Packing Multiple Outputs in Go Precompiles\nDESCRIPTION: Example of packing multiple outputs into a byte array using the PackNextTwoOutput function. This demonstrates how to handle functions that return multiple values by using structs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/03-unpacking-and-packing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// PackHashWithMd5Output attempts to pack given hash of type [16]\n// PackNextTwoOutput attempts to pack given [outputStruct] of type NextTwoOutput\n// to conform the ABI outputs.\nfunc PackNextTwoOutput(outputStruct NextTwoOutput) ([]byte, error) {\n    return CalculatorABI.PackOutput(\"nextTwo\",\n        outputStruct.Result1,\n        outputStruct.Result2,\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Wallet Configuration\nDESCRIPTION: Setting up the wallet instance for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst wallet = new ethers.Wallet(privateKey);\nconst address = wallet.address;\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Callout in JSX\nDESCRIPTION: Renders a `Callout` component with its `type` prop set to 'warn'. The enclosed text serves as a warning, advising users to employ a separate wallet for testing activities to safeguard their actual crypto funds. This component requires the `fumadocs-ui` library.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/create-wallet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"warn\">We recommend using a separate wallet for testing and keeping your actual crypto funds, just to be sure.</Callout>\n```\n\n----------------------------------------\n\nTITLE: Relayer Logs Configuration Flags\nDESCRIPTION: Available configuration flags for the relayer logs command, including options for endpoint specification, log filtering, and network selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\n--endpoint string           use the given endpoint for network operations\n--first uint                output first N log lines\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for logs\n--last uint                 output last N log lines\n-l, --local operate         on a local network\n--raw raw                   logs output\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Encoding an IPv4 Address in Avalanche\nDESCRIPTION: Shows how IPv4 addresses are represented in 16-byte IPv6 format with 12 bytes of leading zeros, followed by a 2-byte port number.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    \"127.0.0.1:9650\"\nResults in:\n    [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x01,\n        0x25, 0xb2,\n    ]\n```\n\n----------------------------------------\n\nTITLE: Stopping the Cluster Using Network Runner CLI - Shell\nDESCRIPTION: This CLI invocation uses avalanche-network-runner to stop the cluster, specifies additional log level and network endpoint parameters. Requires the CLI installed and the network runner process reachable at the given endpoint. After execution, the cluster is terminated but the controlling RPC process may still need to be stopped manually.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\navalanche-network-runner control stop \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Blockchain Import File Subcommand (Bash)\nDESCRIPTION: Shows the usage syntax for the `avalanche blockchain import file` subcommand. This command imports a blockchain configuration specifically from a local file or a git repository, either via command-line arguments or an interactive wizard.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain import file [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Fetching ERC-1155 Token Balances in TypeScript\nDESCRIPTION: This function is a placeholder for implementing the retrieval of ERC-1155 token balances for a given address. It will make a call to the backend to fetch the balances using the listErc1155Balances method.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/02-understanding-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchERC1155Balances = async (address: string) => {\n     //\n    // TODO: Implement this!\n    //\n    return [] as Erc1155TokenBalance[];\n  }\n```\n\n----------------------------------------\n\nTITLE: Restarting a Node via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to restart a node named 'node1' using the specified AvalancheGo executable path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control restart-node node1 \\\n--request-timeout=3m \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\" \\\n--avalanchego-path ${AVALANCHEGO_EXEC_PATH}\n```\n\n----------------------------------------\n\nTITLE: Enabling Fee Recipients in Config\nDESCRIPTION: Configuration to enable fee recipients for block producers instead of burning fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/customize-avalanche-l1.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"allowFeeRecipients\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchRecentTransactions Function in React Client (TSX)\nDESCRIPTION: A client-side function responsible for fetching recent blockchain transactions. This function will make an API call to the backend server, which will in turn query the Data API to retrieve transaction data and return it as an array of NativeTransaction objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/02-understanding-code.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchRecentTransactions = async () => {\n    //\n    // TODO: Implement this!\n    //\n    return data as NativeTransaction[]\n  }\n```\n\n----------------------------------------\n\nTITLE: Loading Snapshot with cURL\nDESCRIPTION: Demonstrates loading a network snapshot using cURL POST requests to the ANR API, with options for specifying execution path and plugin directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/loadsnapshot' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"snapshotName\":\"snapshot\"\n}'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/loadsnapshot -d '{\"snapshotName\":\"node5\",\"execPath\":\"/path/to/avalanchego/binary\",\"pluginDir\":\"/path/to/avalanchego/plugins\"}'\n```\n\n----------------------------------------\n\nTITLE: Navigating to Contracts Directory in Precompile-EVM Using Bash\nDESCRIPTION: Changes the shell's current directory to the 'contracts' subdirectory within the Precompile-EVM repo. Subsequent contract-related files will be managed in this directory. Assumes that the Precompile-EVM repository folder structure adheres to expectations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd contracts/\n```\n\n----------------------------------------\n\nTITLE: Defining Staking Reward Function in LaTeX\nDESCRIPTION: This LaTeX formula defines the staking reward function ρ, which is used to calculate the proportion of new tokens minted based on staking amount and time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/avax-token.mdx#2025-04-23_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\rho(u.s_{amount}, u.s_{time}) = (0.002 \\times u.s_{time} + 0.896) \\times \\frac{u.s_{amount}}{R_j}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relayer Configuration File\nDESCRIPTION: Command to open the automatically created relayer configuration file using the code editor.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/05-multichain-relayer-config.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/.avalanche-cli/runs/network_xxxx_xxxx/awm-relayer-config.json\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Validator IncreaseBalance Command in Bash\nDESCRIPTION: The increaseBalance command increases a validator's P-Chain balance. This is essential for maintaining validator operation as the P-Chain balance is used to pay continuous fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_175\n\nLANGUAGE: bash\nCODE:\n```\navalanche validator increaseBalance [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Multi-Signature Scheme Tutorial in React\nDESCRIPTION: Imports necessary UI components from fumadocs-ui and custom signature scheme components for the interactive tutorial. These components enable functionality for generating keys, signing messages, verifying signatures, and aggregating cryptographic elements.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/multi-signature-schemes-demo.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps, Step } from 'fumadocs-ui/components/steps';\nimport { GenerateKeysButton, SignMessageButton, VerifySignatureButton, AggregateSignaturesButton, AggregatePublicKeysButton, VerifyAggregateSignatureButton } from '@/components/signatureSchemes'\n```\n\n----------------------------------------\n\nTITLE: Configuring a New Avalanche L1 for the Faucet (JSON)\nDESCRIPTION: Defines the JSON structure required to configure a new Avalanche L1 within the `config.json` file of the Avalanche Faucet repository. Each key specifies essential details like network identifiers, RPC endpoints, gas fee parameters, drip amounts, and rate limits needed for the faucet to interact with the chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ID\": string,\n    \"NAME\": string,\n    \"TOKEN\": string,\n    \"RPC\": string,\n    \"CHAINID\": number,\n    \"EXPLORER\": string,\n    \"IMAGE\": string,\n    \"MAX_PRIORITY_FEE\": string,\n    \"MAX_FEE\": string,\n    \"DRIP_AMOUNT\": number,\n    \"RATELIMIT\": {\n        \"MAX_LIMIT\": number,\n        \"WINDOW_SIZE\": number\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Subnet Command Usage in Avalanche CLI\nDESCRIPTION: Shows the basic usage syntax for the avalanche subnet command with subcommands and flags.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_126\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Viewing Installer Help\nDESCRIPTION: Command to display help information for the monitoring installer script and its available options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh --help\n```\n\n----------------------------------------\n\nTITLE: Managing Local Avalanche Nodes\nDESCRIPTION: The local command suite provides a collection of commands related to local nodes, including destroying, starting, checking status, stopping, and tracking nodes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_104\n\nLANGUAGE: bash\nCODE:\n```\navalanche node local [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Step-by-Step Digital Signature Guide UI with React\nDESCRIPTION: Creates a structured step-by-step UI interface for guiding users through the digital signature process using Steps and Step components. Each step includes explanatory text and an interactive button component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-schemes-demo.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Steps>\n<Step>\n\n### Generate Keys\nStart by generating a Key Pair consisting of a Public and a Secret Key.\n\n<GenerateKeysButton />\n\n</Step>\n<Step>\n\n### Sign a Message\n\nNow use the generated Secret Key to sign a Message. Pick any message you want to sign, e.g. \"Per consensum ad astra\".\n\n<SignMessageButton />\n\n</Step>\n<Step>\n\n### Verify the Signature\n\nAnyone, that has access to your Public Key corresponding to the Private Key used for signing the message can now verify the signature of the Message. Therefore, the Authenticity, Non-Repudiation and Integrity of the Message can be trusted.\n\n<VerifySignatureButton />\n\n</Step>\n</Steps>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Functions for Data API Integration (TSX)\nDESCRIPTION: Empty implementation functions that will be responsible for calling the Avalanche Data API through the AvaCloud SDK. These functions will fetch recent blocks and transactions to be displayed in the blockchain explorer interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/02-understanding-code.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst getRecentBlocks = async () => {\n   //\n    // TODO: Implement this!\n    //\n}\n\nconst getRecentTransactions = async () => {\n    //\n    // TODO: Implement this!\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Avalanche P-Chain L1 Validator Transactions (Plaintext)\nDESCRIPTION: Lists key P-Chain transactions related to L1 validator lifecycle management: `RegisterL1ValidatorTx` for adding a validator and setting its initial balance, `IncreaseL1ValidatorBalanceTx` for adding funds to an existing validator's balance (can be called by anyone), and `DisableL1ValidatorTx` for stopping validation and reclaiming the remaining balance to the designated owner.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/l1-validator-fee.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRegisterL1ValidatorTx\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIncreaseL1ValidatorBalanceTx\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nDisableL1ValidatorTx\n```\n\n----------------------------------------\n\nTITLE: Exporting VRF Subscription ID in Bash\nDESCRIPTION: This command exports the Chainlink VRF subscription ID as an environment variable for use in configuring the CrossChainVRFWrapper contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/07-create-vrf-subscription.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VRF_SUBSCRIPTION_ID=<subscription_id>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Contracts Directory in Bash\nDESCRIPTION: Changes the current directory to the 'contracts/' subdirectory within the Subnet-EVM project. This is where the Solidity interface file will be created.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd contracts/\n```\n\n----------------------------------------\n\nTITLE: Setting USDC and TokenHome Addresses\nDESCRIPTION: Export environment variables for USDC and TokenHome contract addresses on the Fuji C-Chain. These addresses are used in subsequent steps for token transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport USDC=0x5425890298aed601595a70ab815c96711a31bc65\nexport USDC_HOME_C_CHAIN=0x546526F786115af1FE7c11aa8Ac5682b8c181E3A\n```\n\n----------------------------------------\n\nTITLE: Selecting AWS Region for Node Deployment via Avalanche-CLI Prompt - Bash\nDESCRIPTION: This code block shows the CLI interactive prompt for choosing the AWS region where the node(s) will be deployed. The user can select from common AWS regions or input a custom one. This step ensures correct geolocation and resource distribution for deployed validators. It requires running the Avalanche-CLI node creation command and responding to the prompt.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-aws.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n Which AWS region do you want to set up your node in?: \n  ▸ us-east-1\n    us-east-2\n    us-west-1\n    us-west-2\n    Choose custom region (list of regions available at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html)\n```\n\n----------------------------------------\n\nTITLE: Customizing TransactionButton Appearance (React TypeScript)\nDESCRIPTION: Illustrates the use of the className prop for customizing styling on the TransactionButton. This example performs a custom blockchain action with user-provided data and modifies button colors using Tailwind CSS classes. Relies on the @avalabs/builderkit library and requires actionData as a prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/transaction/transaction-button.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TransactionButton\n  chain_id={43114}\n  title=\"Custom Action\"\n  description=\"Performing custom action\"\n  data={actionData}\n  className=\"bg-purple-600 hover:bg-purple-700\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Running Modified Tests Using Bash Script\nDESCRIPTION: This command runs the modified tests using a bash script. It should be executed from the project root directory after modifying the autogenerated tests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/08-autogenerated-tests.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build_test.sh\n```\n\n----------------------------------------\n\nTITLE: Running Ginkgo Tests for StringStore\nDESCRIPTION: Command to run specific test suite using Ginkgo with StringStore label filter\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/11-testing-precompile-hardhat.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGINKGO_LABEL_FILTER=StringStore ./scripts/run_ginkgo.sh\n```\n\n----------------------------------------\n\nTITLE: Basic Widget Integration with JavaScript\nDESCRIPTION: Simple URL-based widget integration for MoonPay's payment interface using JavaScript URL API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/moonpay.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst moonpayUrl = new URL('https://buy.moonpay.com');\nmoonpayUrl.searchParams.append('apiKey', 'YOUR_API_KEY');\nmoonpayUrl.searchParams.append('currencyCode', 'avax');\nmoonpayUrl.searchParams.append('walletAddress', userWalletAddress);\n\nwindow.open(moonpayUrl.href, '_blank');\n```\n\n----------------------------------------\n\nTITLE: TeleporterRegistry Version Address Lookup\nDESCRIPTION: Implements the getAddressFromVersion function that allows lookup of specific TeleporterMessenger contract addresses by their version number.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/02-how-the-icm-registry-works.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TeleporterRegistry {\n    mapping(uint256 version => address protocolAddress) private _versionToAddress;\n\n    function getAddressFromVersion(uint256 version) public view returns (address) {\n        require(version != 0, \"TeleporterRegistry: zero version\");\n        address protocolAddress = _versionToAddress[version];\n        require(protocolAddress != address(0), \"TeleporterRegistry: version not found\");\n        return protocolAddress;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Border and Rounded Styling to TokenIcon in TSX\nDESCRIPTION: Demonstrates adding a visual border and rounded corners to the TokenIcon component using Tailwind CSS classes passed through the 'className' prop ('border-2', 'border-gray-200', 'rounded-full').\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenIcon \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  className=\"border-2 border-gray-200 rounded-full\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Avalanche CLI Blockchain Creation Output - Plaintext\nDESCRIPTION: This snippet illustrates the typical output after successfully completing Avalanche L1 blockchain configuration. It shows command invocation, wizard selections, details like Chain ID, Token Symbol, prefunding actions, software installation, and the final success confirmation. Use this as a reference for verifying proper installation and setup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n@martineckardt ➜ /workspaces/avalanche-starter-kit (main) $ avalanche blockchain create myblockchain\n✔ Subnet-EVM\n✔ I want to use defaults for a test environment\nChain ID: 9999\nToken Symbol: TOK\n✔ Token Symbol: TOK\nprefunding address 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC with balance 1000000000000000000000000\nInstalling subnet-evm-v0.6.8...\nsubnet-evm-v0.6.8 installation successful\n✓ Successfully created blockchain configuration\n```\n\n----------------------------------------\n\nTITLE: Example of NFT Mint Output Binary Representation\nDESCRIPTION: Demonstrates the binary representation of an NFT Mint output with specific values for TypeID, GroupID, Locktime, Threshold, and two Addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n[\n    // TypeID\n    0x00, 0x00, 0x00, 0x0a,\n    // groupID:\n    0x00, 0x00, 0x30, 0x39,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing a Private Key Environment Variable in Foundry Commands (Shell)\nDESCRIPTION: This snippet shows the --private-key $PK shell flag usage, which is appended to Foundry transactions to provide the deployer's private key from the $PK environment variable. It ensures that commands use a consistent, preloaded private key for deployments and interactions, mainly for development and test environments. Developers are cautioned not to use this method with public blockchains or in production due to possible key exposure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n--private-key $PK\n```\n\n----------------------------------------\n\nTITLE: Example of Unsigned Transform Avalanche L1 TX\nDESCRIPTION: A detailed example of an unsigned Transform Avalanche L1 transaction, including hexadecimal representations of each field and their explanations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx       <- 0000001800003039e902a9a86640bfdb1cd0e36c0cc982b83e5765fad5f6bbe6abdcce7b5ae7d7c700000000000000014a177205df5c29929d06db9d941f83d5ea985de302015e99252d16469a6610db000000003d0ad12b8ee8928edf248ca91ca55600fb383f07c32bff1d6dec472b25cf59a70000000500000000000f4240000000010000000000000000\n    SubnetID     <- 0x5fa29ed4356903dac2364713c60f57d8472c7dda4a5e08d88a88ad8ea71aed60\n    AssetID      <- 0xf3086d7bfc35be1c68db664ba9ce61a2060126b0d6b4bfb09fd7a5fb7678cada\n    InitialSupply <- 0x000000e8d4a51000\n    MaximumSupply <- 0x000009184e72a000\n    MinConsumptionRate <- 0x0000000000000001\n    MaxConsumptionRate <- 0x000000000000000a\n    MinValidatorStake <- 0x000000174876e800\n    MaxValidatorStake <- 0x000001d1a94a2000\n    MinStakeDuration <- 0x00015180\n    MaxStakeDuration <- 0x01e13380\n    MinDelegationFee <- 0x00002710\n    MinDelegatorStake <- 0x000000174876e800\n    MaxValidatorWeightFactor <- 0x05\n    UptimeRequirement <- 0x000c3500\n    SubnetAuth   <- 0x0000000a0000000100000000\n]\n=\n[\n    // BaseTx:\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x30, 0x39,\n    0xe9, 0x02, 0xa9, 0xa8, 0x66, 0x40, 0xbf, 0xdb,\n    0x1c, 0xd0, 0xe3, 0x6c, 0x0c, 0xc9, 0x82, 0xb8,\n    0x3e, 0x57, 0x65, 0xfa, 0xd5, 0xf6, 0xbb, 0xe6,\n    0xab, 0xdc, 0xce, 0x7b, 0x5a, 0xe7, 0xd7, 0xc7,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x4a, 0x17, 0x72, 0x05, 0xdf, 0x5c, 0x29, 0x92,\n    0x9d, 0x06, 0xdb, 0x9d, 0x94, 0x1f, 0x83, 0xd5,\n    0xea, 0x98, 0x5d, 0xe3, 0x02, 0x01, 0x5e, 0x99,\n    0x25, 0x2d, 0x16, 0x46, 0x9a, 0x66, 0x10, 0xdb,\n    0x00, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0xd1, 0x2b,\n    0x8e, 0xe8, 0x92, 0x8e, 0xdf, 0x24, 0x8c, 0xa9,\n    0x1c, 0xa5, 0x56, 0x00, 0xfb, 0x38, 0x3f, 0x07,\n    0xc3, 0x2b, 0xff, 0x1d, 0x6d, 0xec, 0x47, 0x2b,\n    0x25, 0xcf, 0x59, 0xa7, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x42, 0x40,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0xa2, 0x9e, 0xd4,\n    0x35, 0x69, 0x03, 0xda, 0xc2, 0x36, 0x47, 0x13,\n    0xc6, 0x0f, 0x57, 0xd8, 0x47, 0x2c, 0x7d, 0xda,\n    0x4a, 0x5e, 0x08, 0xd8, 0x8a, 0x88, 0xad, 0x8e,\n    0xa7, 0x1a, 0xed, 0x60, 0xf3, 0x08, 0x6d, 0x7b,\n    0xfc, 0x35, 0xbe, 0x1c, 0x68, 0xdb, 0x66, 0x4b,\n    0xa9, 0xce, 0x61, 0xa2, 0x06, 0x01, 0x26, 0xb0,\n    0xd6, 0xb4, 0xbf, 0xb0, 0x9f, 0xd7, 0xa5, 0xfb,\n    0x76, 0x78, 0xca, 0xda, 0x00, 0x00, 0x00, 0xe8,\n    0xd4, 0xa5, 0x10, 0x00, 0x00, 0x00, 0x09, 0x18,\n    0x4e, 0x72, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x17,\n    0x48, 0x76, 0xe8, 0x00, 0x00, 0x00, 0x01, 0xd1,\n    0xa9, 0x4a, 0x20, 0x00, 0x00, 0x01, 0x51, 0x80,\n    0x01, 0xe1, 0x33, 0x80, 0x00, 0x00, 0x27, 0x10,\n    0x00, 0x00, 0x00, 0x17, 0x48, 0x76, 0xe8, 0x00,\n    0x05, 0x00, 0x0c, 0x35, 0x00, 0x00, 0x00, 0x00,\n    0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,\n    0x00,\n    // SubnetID\n    0x5f, 0xa2, 0x9e, 0xd4, 0x35, 0x69, 0x03, 0xda,\n    0xc2, 0x36, 0x47, 0x13, 0xc6, 0x0f, 0x57, 0xd8,\n    0x47, 0x2c, 0x7d, 0xda, 0x4a, 0x5e, 0x08, 0xd8,\n    0x8a, 0x88, 0xad, 0x8e, 0xa7, 0x1a, 0xed, 0x60,\n    // AssetID\n    0xf3, 0x08, 0x6d, 0x7b, 0xfc, 0x35, 0xbe, 0x1c,\n    0x68, 0xdb, 0x66, 0x4b, 0xa9, 0xce, 0x61, 0xa2,\n    0x06, 0x01, 0x26, 0xb0, 0xd6, 0xb4, 0xbf, 0xb0,\n    0x9f, 0xd7, 0xa5, 0xfb, 0x76, 0x78, 0xca, 0xda,\n    // InitialSupply\n    0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00,\n    // MaximumSupply\n    0x00, 0x00, 0x09, 0x18, 0x4e, 0x72, 0xa0, 0x00,\n    // MinConsumptionRate\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    // MaxConsumptionRate\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,\n    // MinValidatorStake\n    0x00, 0x00, 0x00, 0x17, 0x48, 0x76, 0xe8, 0x00,\n    // MaxValidatorStake\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    // MinStakeDuration\n    0x00, 0x01, 0x51, 0x80,\n    // MaxStakeDuration\n    0x01, 0xe1, 0x33, 0x80,\n    // MinDelegationFee\n    0x00, 0x00, 0x27, 0x10,\n    // MinDelegatorStake\n    0x00, 0x00, 0x00, 0x17, 0x48, 0x76, 0xe8, 0x00,\n    // MaxValidatorWeightFactor\n    0x05,\n    // UptimeRequirement\n    0x00, 0x0c, 0x35, 0x00,\n    // SubnetAuth TypeID\n    0x00, 0x00, 0x00, 0x0a,\n    // SigIndices length\n    0x00, 0x00, 0x00, 0x01,\n    // SigIndices\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Avalanche Subnet Upgrade Print Command\nDESCRIPTION: This command prints the content of the upgrade.json file. It includes options for specifying a config file, setting log level, and skipping version checks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_159\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade print [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Avalanche Node Bootstrap Status\nDESCRIPTION: This command retrieves the bootstrap status of all nodes in a cluster with the Primary Network. It can be used to check the bootstrap status of a node with a specific blockchain using the --blockchain flag.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_114\n\nLANGUAGE: bash\nCODE:\n```\navalanche node status [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--blockchain string         specify the blockchain the node is syncing with\n-h, --help help             for status\n--subnet string             specify the blockchain the node is syncing with\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Deleting Subnet Blockchain with Avalanche CLI\nDESCRIPTION: Command syntax and flags for deleting an existing blockchain configuration using Avalanche CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_133\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet delete [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for delete\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Custom Layout for Identity Provider in TypeScript\nDESCRIPTION: Provides an example of customizing the layout of children inside the Identity context provider. Using a flexbox-enabled className, this snippet combines Domain and Address presentation, separated by a visual bar. This allows developers to compose UI elements flexibly while still propagating the address context. The main dependency is @avalabs/builderkit, and the address must be valid.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/identity.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Identity address=\\\"0x1234567890123456789012345678901234567890\\\">\\n  <div className=\\\"flex items-center gap-2\\\">\\n    <Domain showAddressIfNotAvailable={true} />\\n    <span>|</span>\\n    <Address abbreviate={true} />\\n  </div>\\n</Identity>\n```\n\n----------------------------------------\n\nTITLE: Committing Signed Transaction to Avalanche Network\nDESCRIPTION: Command to submit a fully signed transaction to the Avalanche network. The CLI will automatically detect the deployment network and submit the transaction appropriately.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction commit testblockchain --input-tx-filepath partiallySigned.txt\n```\n\n----------------------------------------\n\nTITLE: Encoding SECP256K1 Transfer Input in Avalanche\nDESCRIPTION: Example of a SECP256K1 transfer input with TypeID 5, Amount 4000000000, and AddressIndices [0]. Shows both the logical structure and byte-level representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID         <- 0x00000005\n    Amount         <- 0x00000000ee6b2800,\n    AddressIndices <- [0x00000000]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x05,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0xee, 0x6b, 0x28, 0x00,\n    // length:\n    0x00, 0x00, 0x00, 0x01,\n    // address_indices[0]\n    0x00, 0x00, 0x00, 0x00\n]\n```\n\n----------------------------------------\n\nTITLE: Choosing P-Chain Fee Payer Key in Avalanche CLI - Bash\nDESCRIPTION: This CLI prompt requests the user to select the key source for paying P-Chain transaction fees. The options typically include using a stored local key or a connected hardware ledger. The input determines which key material will sign and fund subsequent P-Chain actions during validator addition. Dependencies include initialized key stores within Avalanche CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n? Which key should be used to pay for transaction fees on P-Chain?: \n  \\u25b8 Use stored key\n    Use ledger\n```\n\n----------------------------------------\n\nTITLE: Fetching Ethereum Accounts\nDESCRIPTION: Retrieves the list of available accounts from the local Ethereum provider.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet accounts = await ethers.provider.listAccounts()\n```\n\n----------------------------------------\n\nTITLE: Deploying CrossChainVRFConsumer Contract using Forge\nDESCRIPTION: Command to deploy the CrossChainVRFConsumer contract using Forge. Requires RPC URL, private key, TeleporterMessenger address, and VRF wrapper address as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/06-deploy-vrf-consumer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> src/CrossChainVRFConsumer.sol:CrossChainVRFConsumer --constructor-args <TELEPORTER_MESSENGER_ADDRESS> $VRF_WRAPPER --broadcast\n```\n\n----------------------------------------\n\nTITLE: Creating Secondary Avalanche L1 Blockchain with Subnet-EVM - Bash\nDESCRIPTION: This Bash snippet demonstrates the creation of a second Avalanche L1 blockchain named <chain2> with similar parameters to <chain1> but a unique EVM chain ID and token. It follows the same process as the first, generating a genesis block, configuring airdrops, loading the Teleporter deployer key, and enabling the latest Teleporter version. The script produces console output confirming successful configuration, and is useful for expanding the network for local interoperability testing. Requires Avalanche CLI and proper local environment configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/cross-chain/teleporter-local-network.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create <chain2> --evm --latest\\\n    --evm-chain-id 2 --evm-token TOKEN2 --evm-defaults\n\ncreating genesis for <blockchain chain2>\nconfiguring airdrop to stored key \"subnet_<chain2>_airdrop\" with address 0x0EF815FFFF6ad1d4e17C8ED4128b20EB5edAABBB\nloading stored key \"cli-teleporter-deployer\" for teleporter deploys\n  (evm address, genesis balance) = (0xE932784f56774879e03F3624fbeC6261154ec711, 600000000000000000000)\nusing latest teleporter version (v1.0.0)\n✓ Successfully created subnet configuration\n\n```\n\n----------------------------------------\n\nTITLE: Server-Side Function Placeholders for AvaCloud SDK Integration\nDESCRIPTION: This code defines placeholder functions that will be implemented to interact with the AvaCloud SDK. The getBlockHeight function will retrieve the current block height, while listErc20Balances will fetch token balances for a specific address at a given block number.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/04-erc20-token-balance-app/02-understanding-code.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nasync function getBlockHeight() {\n   //\n   // TODO: Implement getBlockHeight\n   //\n}\nasync function listErc20Balances(address: string, blockNumber: string) {\n   //\n   // TODO: Implement listErc20Balances\n   //\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AvaCloud SDK in TypeScript\nDESCRIPTION: This code snippet initializes the AvaCloudSDK with an API key and configures it for the Avalanche Mainnet. It sets up the SDK for making calls to the Data API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/02-understanding-code.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AvaCloudSDK } from \"@avalabs/avacloud-sdk\";\nconst avaCloudSDK = new AvaCloudSDK({\n  apiKey: process.env.AVACLOUD_API_KEY,\n  chainId: \"43114\", // Avalanche Mainnet\n  network: \"mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Interactive Quiz Component - MDX\nDESCRIPTION: This code snippet demonstrates the usage of a custom MDX component named 'Quiz' with a specified 'quizId' prop. This pattern is used to embed interactive quizzes within documentation. The required dependency is the 'Quiz' MDX/React component, which is expected to handle quiz logic based on the passed quizId value (410 in this case). The result is a rendered quiz interactive block in the page output.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/07-native-token-minting-rights.mdx#2025-04-23_snippet_3\n\nLANGUAGE: MDX\nCODE:\n```\n<Quiz quizId=\"410\"/>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Node Bootstrap Progress\nDESCRIPTION: Command to monitor the node's bootstrapping progress in real-time through system logs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/installing-avalanche-go.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo journalctl -u avalanchego -f\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Sender Ledger Index Input\nDESCRIPTION: Shows the interactive prompt where the user inputs the index of the address on the connected Ledger device that will be used as the source of the funds. In this example, index '2' is entered.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n✗ Ledger index to use: 2\n```\n\n----------------------------------------\n\nTITLE: Stopping CPU Profiler for C-Chain Admin API in Text\nDESCRIPTION: This admin function stops and writes a CPU profile for the C-Chain. It doesn't require any parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nadmin.stopCPUProfiler() -> {}\n```\n\n----------------------------------------\n\nTITLE: Adding Node to Network in Bash\nDESCRIPTION: Demonstrates how to add a new node to the network using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control add-node node6\n```\n\n----------------------------------------\n\nTITLE: Calculating L1 Validator Fee Rate (LaTeX/Math)\nDESCRIPTION: Presents the mathematical formulas used to determine the L1 validator fee rate per second, as defined in ACP-77. The primary formula calculates the fee based on a minimum price (M), an exponential function (`exp`), a variable 'x' reflecting validator supply vs. target, and a constant 'K' controlling price sensitivity. The secondary formula updates 'x' each second based on the difference between the current number of active validators (V) and the target number (T), ensuring 'x' remains non-negative.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/l1-validator-fee.mdx#2025-04-23_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nM \\cdot \\exp\\left(\\frac{x}{K}\\right)\n```\n\nLANGUAGE: latex\nCODE:\n```\nx = \\max(x + V - T, 0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Token Allocation in Genesis JSON\nDESCRIPTION: This snippet demonstrates how to set up the 'alloc' field in the genesis configuration JSON. It allocates an initial balance to a specific address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/07-initial-token-allocation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    // ...\n  },\n  \"alloc\": {\n    \"8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\": {\n      \"balance\": \"0x295BE96E64066972000000\" // 50,000,000 tokens\n    }\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking AvalancheGo Service Status\nDESCRIPTION: Command to verify the AvalancheGo service status using systemctl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/installing-avalanche-go.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status avalanchego\n```\n\n----------------------------------------\n\nTITLE: Compressing Avalanche Database\nDESCRIPTION: Command to create a zip archive of the Avalanche node's database for backup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nzip -r avalanche_db_backup.zip .avalanchego/db\n```\n\n----------------------------------------\n\nTITLE: Gantt UTXO Format Specification\nDESCRIPTION: Binary format specification for UTXO data structure including all fields and their sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n+--------------+----------+-------------------------+\n| codec_id     : uint16   |                 2 bytes |\n+--------------+----------+-------------------------+\n| tx_id        : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output_index : int      |                 4 bytes |\n+--------------+----------+-------------------------+\n| asset_id     : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output       : Output   |      size(output) bytes |\n+--------------+----------+-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Encoding a Fixed-Length Integer Array in Avalanche\nDESCRIPTION: Shows how fixed-length integer arrays are packed when the array length is known ahead of time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    [0x03040506]\nResults in:\n    [0x03, 0x04, 0x05, 0x06]\n```\n\n----------------------------------------\n\nTITLE: Avalanche Update Command Flags in Bash\nDESCRIPTION: Command line flags for the Avalanche CLI update command. These flags provide options for confirming installation, displaying help information, showing version details, specifying config file location, setting log level, and skipping update checks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_170\n\nLANGUAGE: bash\nCODE:\n```\n-c, --confirm Assume        yes for installation\n-h, --help help             for update\n-v, --version version       for update\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Creating Genesis File for MorpheusVM in JSON\nDESCRIPTION: This snippet shows the contents of the genesis file for the MorpheusVM. It includes various configuration parameters and initial token allocations for addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stateBranchFactor\":16,\n  \"minBlockGap\":1000,\n  \"minUnitPrice\":[1,1,1,1,1],\n  \"maxChunkUnits\":[1800000,18446744073709551615,18446744073709551615,18446744073709551615,18446744073709551615],\n  \"epochDuration\":60000,\n  \"validityWindow\":59000,\n  \"partitions\":8,\n  \"baseUnits\":1,\n  \"baseWarpUnits\":1024,\n  \"warpUnitsPerSigner\":128,\n  \"outgoingWarpComputeUnits\":1024,\n  \"storageKeyReadUnits\":5,\n  \"storageValueReadUnits\":2,\n  \"storageKeyAllocateUnits\":20,\n  \"storageValueAllocateUnits\":5,\n  \"storageKeyWriteUnits\":10,\n  \"storageValueWriteUnits\":3,\n  \"customAllocation\": [\n    {\n      \"address\":\"morpheus1qrzvk4zlwj9zsacqgtufx7zvapd3quufqpxk5rsdd4633m4wz2fdjk97rwu\",\n      \"balance\":3000000000000000000\n    },\n    {\"address\":\"morpheus1qryyvfut6td0l2vwn8jwae0pmmev7eqxs2vw0fxpd2c4lr37jj7wvrj4vc3\",\n      \"balance\":3000000000000000000\n    },\n    {\"address\":\"morpheus1qp52zjc3ul85309xn9stldfpwkseuth5ytdluyl7c5mvsv7a4fc76g6c4w4\",\n      \"balance\":3000000000000000000\n    },\n    {\"address\":\"morpheus1qzqjp943t0tudpw06jnvakdc0y8w790tzk7suc92aehjw0epvj93s0uzasn\",\n      \"balance\":3000000000000000000\n    },\n    {\"address\":\"morpheus1qz97wx3vl3upjuquvkulp56nk20l3jumm3y4yva7v6nlz5rf8ukty8fh27r\",\n      \"balance\":3000000000000000000\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Random Words from CrossChainVRFConsumer in Bash\nDESCRIPTION: This command sends a request for random words from the CrossChainVRFConsumer contract on an unsupported L1 chain. It calls the 'requestRandomWords' function with various parameters to specify the VRF request details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/08-request-random-words.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> $VRF_CONSUMER \"requestRandomWords(bytes32 keyHash, uint16 requestConfirmations, uint32 callbackGasLimit, uint32 numWords, bool nativePayment, uint32 requiredGasLimit)\" <KEY_HASH> <CONFIRMATIONS> <GAS_LIMIT> <NUM_WORDS> <NATIVE_PAYMENT> <REQUIRED_GAS_LIMIT>\n```\n\n----------------------------------------\n\nTITLE: Setting Receiver Contract Address Environment Variable\nDESCRIPTION: Command to store the deployed contract address in an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/06-create-receiver-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport RECEIVER_ADDRESS=0x52C84043CD9c865236f11d9Fc9F56aa003c1f922\n```\n\n----------------------------------------\n\nTITLE: Setting Teleporter Registry Address Environment Variable in Bash\nDESCRIPTION: This command sets the TELEPORTER_REGISTRY_L1 environment variable with the obtained address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/03-deploy-native-token-home.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEPORTER_REGISTRY_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: Saving a Network Snapshot with avalanche-network-runner (Bash)\nDESCRIPTION: Demonstrates saving the current state of the network as a snapshot using 'avalanche-network-runner control save-snapshot'. Examples show assigning a name to the snapshot via the CLI and the equivalent HTTP API call using curl.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control save-snapshot snapshot-name [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control save-snapshot snapshotName\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/savesnapshot' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"snapshot_name\":\"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing AvalancheJS via Yarn\nDESCRIPTION: Command to install AvalancheJS using the Yarn package manager.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @avalabs/avalanchejs\n```\n\n----------------------------------------\n\nTITLE: Creating Blockchains in Bash\nDESCRIPTION: Demonstrates how to create blockchains using the ANR control command with specified VM name, genesis file, and subnet ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control create-blockchains '[{\"vm_name\":\"subnetevm\",\"genesis\":\"/path/to/genesis.json\", \"subnet_id\": \"p433wpuXyJiDhyazPYyZMJeaoPSW76CBZ2x7wrVPLgvokotXz\"}]'\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche Blockchain with CLI\nDESCRIPTION: Command to deploy an Avalanche blockchain configuration locally, to Fuji Testnet, or to Mainnet. It supports various flags for customization and prints the RPC URL for interaction at the end.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Selecting GCP Region via Avalanche-CLI Prompt\nDESCRIPTION: Displays an example of the interactive prompt presented by the `avalanche node create` command, asking the user to select the desired Google Cloud Platform region for deploying the validator node(s). Users can choose from common regions or specify a custom one.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/run-validators-gcp.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWhich Google Region do you want to set up your node(s) in?:\n  ▸ us-east1\n    us-central1\n    us-west1\n    Choose custom Google Region (list of Google Regions available at https://cloud.google.com/compute/docs/regions-zones/)\n```\n\n----------------------------------------\n\nTITLE: Checking Network Health in Bash\nDESCRIPTION: Demonstrates how to check the health of the local cluster using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanche-network-runner control health\n```\n\n----------------------------------------\n\nTITLE: Upgrading AvalancheGo Node\nDESCRIPTION: Command to run the installer script for upgrading the node software\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Virtual Machine Selection - Text\nDESCRIPTION: Presents the user with a text-based choice of VM types when running the blockchain creation wizard. User must select \\'Subnet-EVM\\' to proceed with a standard Avalanche L1 deployment. This prompt is part of the interactive CLI flow; no coding required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n? Which Virtual Machine would you like to use?: \n  ▸ Subnet-EVM\n    Custom VM\n    Explain the difference\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Compact Token Information Chips with BuilderKit in TypeScript/React\nDESCRIPTION: This snippet shows how to use the TokenChip React component to create compact UI elements summarizing token details, including contract address, chain, symbol, and optionally, name. It allows features such as copy-to-clipboard and displaying chain icons or names depending on props. It requires props like chain_id, address, and symbol, and can be extended with options like allowCopyToClipboard, showChainIcon, and showName to improve user interaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenChip } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234...\"\n  symbol=\"AVAX\"\n/>\n\n// With additional options\n<TokenChip \n  chain_id={43114}\n  address=\"0x1234...\"\n  symbol=\"AVAX\"\n  name=\"Avalanche\"\n  allowCopyToClipboard={true}\n  showChainIcon={true}\n  showName={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Custom Blockchain Addition Component in JSX\nDESCRIPTION: This code imports a reusable component for adding a blockchain to the Core wallet and renders it with default MDX components. It's likely part of a larger documentation or tutorial page.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/04-add-blockchain-to-wallet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AddBlockchainToWallet from \"@/content/common/core-wallet/add-blockchain-to-wallet.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<AddBlockchainToWallet components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: NFT Mint Operation Gantt Specification\nDESCRIPTION: Gantt chart specification for NFT mint operation showing byte layout of fields including type_id, address_indices, group_id, payload, and outputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n+------------------------------+------------------------------------+\n| type_id         : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| address_indices : []int      | 4 + 4 * len(address_indices) bytes |\n+-----------------+------------+------------------------------------+\n| group_id        : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| payload         : []byte     |             4 + len(payload) bytes |\n+-----------------+------------+------------------------------------+\n| outputs         : []Output   |            4 + size(outputs) bytes |\n+-----------------+------------+------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Using Gallery Component to Show Core Wallet Import Steps (1/2) in JSX\nDESCRIPTION: This JSX snippet utilizes the imported `Gallery` component to display two images side-by-side. The images (`go-to-account-manager.png` and `go-to-import-private-key.png`) illustrate the initial steps required to import a private key within the Core wallet interface. It depends on the `Gallery` component being correctly imported and the specified image paths being valid.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/import-ewoq-account.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Gallery url1=\"/common-images/core-wallet/go-to-account-manager.png\" url2=\"/common-images/core-wallet/go-to-import-private-key.png\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Deploying New Avalanche Blockchain\nDESCRIPTION: Commands to create and deploy a new Proof of Authority blockchain with Native Minter Precompile using Avalanche CLI\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/03-use-erc20-as-native-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain\n```\n\n----------------------------------------\n\nTITLE: Setting AvalancheGo Executable Path (Bash)\nDESCRIPTION: Sets the environment variable `AVALANCHEGO_EXEC_PATH` to specify the location of the AvalancheGo executable. This path is used by subsequent `avalanche-network-runner` commands. The example comment suggests a typical location.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# e.g., ${HOME}/go/src/github.com/ava-labs/avalanchego/build/avalanchego\n\nAVALANCHEGO_EXEC_PATH=\"avalanchego\"\n```\n\n----------------------------------------\n\nTITLE: Avalanche Network Stop Command Flags\nDESCRIPTION: Available flags for the network stop command, including options to control snapshot saving, naming snapshots, and configuring log levels.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_88\n\nLANGUAGE: bash\nCODE:\n```\n--dont-save do              not save snapshot, just stop the network\n-h, --help help             for stop\n--snapshot-name string      name of snapshot to use to save network state into (default \"default-1654102509\")\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Debugging Snowman Consensus Conflict Resolution in Avalanche Logs\nDESCRIPTION: Log output showing how the Snowman consensus algorithm resolves conflicts between multiple proposed blocks. The log demonstrates the polling and filtering process that eventually leads to accepting one block and rejecting others.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/simple-vm-any-language.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n... snowman/voter.go:58 filtering poll results ...\n... snowman/voter.go:65 finishing poll ...\n... snowman/voter.go:87 Snowman engine can't quiesce\n... \n... snowman/voter.go:58 filtering poll results ...\n... snowman/voter.go:65 finishing poll ...\n... snowman/topological.go:600 accepting block\n```\n\n----------------------------------------\n\nTITLE: Configuring Ramp Sandbox Environment\nDESCRIPTION: Setup for testing Ramp integration in the sandbox environment before production deployment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ramp-network.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ramp = new RampInstantSDK({\n  // ...your configuration\n  url: 'https://ri-widget-staging.firebaseapp.com/', // Use staging environment\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC-20 Token Contract using Forge on C-Chain\nDESCRIPTION: This command deploys the MyToken.sol contract to the local C-Chain network using Forge. It requires a private key and broadcasts the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/02-deploy-erc-20-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK contracts/interchain-token-transfer/MyToken.sol:TOK --broadcast\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Validator Addition in Avalanche L1\nDESCRIPTION: This code snippet imports necessary React components for adding a validator to an Avalanche L1 blockchain. It includes a custom MDX wrapper and a specific AddValidator component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/04-validator-management/01-add-validator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport AddValidator from \"../../../../toolbox/src/toolbox/ValidatorManager/AddValidator.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Struct as a State Variable - Solidity\nDESCRIPTION: Shows the creation and assignment of a Person struct as a state variable. Assigns age and name during instantiation. The struct instance will persist in contract storage. This syntax only works for state variables, not inside functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nPerson person = Person(5, \"Rodrigo\");\n```\n\n----------------------------------------\n\nTITLE: Choosing Dynamic vs. Constant Fees via CLI Prompt\nDESCRIPTION: Presents the CLI prompt asking the user to decide whether the blockchain should implement dynamic fees (adjusting based on network conditions) or use constant gas prices. The example shown selects 'No', preferring constant fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/10-configure-transaction-fees.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n? Do you want dynamic fees on your blockchain?:\n  ▸ No, I prefer to have constant gas prices\n    Yes, I would like my blockchain to have dynamic fees\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Initial State Protobuf Definition\nDESCRIPTION: Protocol Buffer definition for Initial State structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nmessage InitialState {\n    uint32 fx_id = 1;                  // 04 bytes\n    repeated Output outputs = 2;       // 04 + size(outputs) bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Teleporter Registry Address in Bash\nDESCRIPTION: This command describes the 'myblockchain' to obtain the Teleporter Registry Address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/03-deploy-native-token-home.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe myblockchain\n```\n\n----------------------------------------\n\nTITLE: Adding Validator to Avalanche L1 Blockchain\nDESCRIPTION: Command to initiate the process of adding a validator to an Avalanche L1 blockchain. This operation also requires multisignature approval when the blockchain is controlled by a multisig.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain addValidator testblockchain\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Definition for Export Transactions\nDESCRIPTION: Protocol buffer message definition for Export transactions in Avalanche, specifying fields for the base transaction, destination chain, and outputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_45\n\nLANGUAGE: text\nCODE:\n```\nmessage ExportTx {\n    BaseTx base_tx = 1;            // size(base_tx)\n    bytes destination_chain = 2;   // 32 bytes\n    repeated TransferOut outs = 3; // 4 bytes + size(outs)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Details in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint fetches details of a specific block in the Avalanche mainnet. It requires the block ID as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/11111111111111111111111111111111LpoYY/blocks/{blockId} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Displaying P-Chain Address Examples in Markdown\nDESCRIPTION: Shows examples of P-Chain addresses for both mainnet and testnet in Avalanche. These addresses use the Bech32 format with specific prefixes and network identifiers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/01-connect-core.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nMainnet: P-avax1kj06lhgx84h39snsljcey3tpc046ze68mek3g5\nTestnet: P-fuji1n3axecsjsrfxrgcadsd0km0kgcheuxw4t53886\n```\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd Daemon\nDESCRIPTION: Command to reload systemd daemon after service file changes\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Base TX Specification\nDESCRIPTION: Protocol Buffer message definition for the Base Transaction in Avalanche. It defines the structure with fields for typeID, network_id, blockchain_id, outputs, inputs, and memo with their respective byte sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_36\n\nLANGUAGE: proto\nCODE:\n```\nmessage BaseTx {\n    uint32 typeID = 1;           // 04 bytes\n    uint32 network_id = 2;       // 04 bytes\n    bytes blockchain_id = 3;     // 32 bytes\n    repeated Output outputs = 4; // 04 bytes + size(outs)\n    repeated Input inputs = 5;   // 04 bytes + size(ins)\n    bytes memo = 6;              // 04 bytes + size(memo)\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing SECP256K1 Credentials in Avalanche\nDESCRIPTION: Example showing how to serialize SECP256K1 signatures into a credential format. The credential consists of a type ID (0x9), length indicator, and multiple 65-byte signatures.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_49\n\nLANGUAGE: text\nCODE:\n```\n[\n    Signatures <- [\n        0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00,\n        0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n=\n[\n    // Type ID\n    0x00, 0x00, 0x00, 0x09,\n    // length:\n    0x00, 0x00, 0x00, 0x02,\n    // sig[0]\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n    0x00,\n    // sig[1]\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,\n    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d, 0x5f,\n    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d, 0x6f,\n    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n    0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Protobuf Definition for Unsigned Add Avalanche L1 Validator TX\nDESCRIPTION: The protobuf message definition for the AddSubnetValidatorTx transaction type, specifying its four fields: base_tx, validator, subnet_id, and subnet_auth, with their respective data types.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_36\n\nLANGUAGE: text\nCODE:\n```\nmessage AddSubnetValidatorTx {\n    BaseTx base_tx = 1;         // size(base_tx)\n    Validator validator = 2;    // size(validator)\n    SubnetID subnet_id = 3;     // 32 bytes\n    SubnetAuth subnet_auth = 4; // 04 bytes + len(sig_indices)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Balance State in Go\nDESCRIPTION: Implements functions for reading balance information from the immutable state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc GetBalance(\n\tctx context.Context,\n\tim state.Immutable,\n\taddr codec.Address,\n) (uint64, error) {\n\t_, bal, _, err := getBalance(ctx, im, addr)\n\treturn bal, err\n}\n\nfunc getBalance(\n\tctx context.Context,\n\tim state.Immutable,\n\taddr codec.Address,\n) ([]byte, uint64, bool, error) {\n\tk := BalanceKey(addr)\n\tbal, exists, err := innerGetBalance(im.GetValue(ctx, k))\n\treturn k, bal, exists, err\n}\n\nfunc innerGetBalance(\n\tv []byte,\n\terr error,\n) (uint64, bool, error) {\n\tif errors.Is(err, database.ErrNotFound) {\n\t\treturn 0, false, nil\n\t}\n\tif err != nil {\n\t\treturn 0, false, err\n\t}\n\tval, err := database.ParseUInt64(v)\n\tif err != nil {\n\t\treturn 0, false, err\n\t}\n\treturn val, true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating a webhook in AvaCloud API\nDESCRIPTION: This curl command deactivates a webhook by its ID, effectively stopping notifications for the configured events. The ID parameter should be replaced with the actual webhook identifier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url https://glacier-api.avax.network/v1/webhooks/id \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Validation Duration in Avalanche-CLI\nDESCRIPTION: This snippet displays the Avalanche-CLI prompt asking the user to define the validation period for the node being configured as a Primary Network validator. Options typically include the minimum allowed duration or a custom timeframe.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/validate-primary-network.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n How long should your validator validate for?:\n  ▸ Minimum staking duration on primary network\n    Custom\n```\n\n----------------------------------------\n\nTITLE: Completing Validator Removal\nDESCRIPTION: Function to complete the validator removal process after receiving confirmation via a Warp message. It takes the validation ID and message index as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction completeValidatorRemoval(\n    bytes32 validationID,\n    uint32 messageIndex\n) public\n```\n\n----------------------------------------\n\nTITLE: Starting CPU Profiler for C-Chain Admin API in Text\nDESCRIPTION: This admin function starts a CPU profile for the C-Chain. It doesn't require any parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\nadmin.startCPUProfiler() -> {}\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Transfer Output Format in Gantt Chart Notation\nDESCRIPTION: Specifies the binary format for SECP256K1 Transfer Output which contains TypeID, Amount, Locktime, Threshold, and Addresses. This structure is used for sending assets to a collection of addresses after a specified time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| amount    : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 28 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Selecting Default EVM Configuration - Plaintext\nDESCRIPTION: This snippet displays the prompt for default blockchain configuration values during the Avalanche CLI setup. Users are advised to select 'I want to use defaults for a test environment' to streamline test setup. This step occurs after selecting the VM type in the CLI's interactive wizard.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n? Do you want to use default values for the Blockchain configuration?: \n  ▸ I want to use defaults for a test environment\n    I want to use defaults for a production environment\n    I don't want to use default values\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Unzipping Avalanche Binary for Linux (AMD64)\nDESCRIPTION: Command to unzip the downloaded Avalanche binary file for Linux AMD64 architecture.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar -xvf avalanchego-linux-amd64-<VERSION>.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Cloning Subnet-EVM Repository\nDESCRIPTION: Command to clone the Subnet-EVM repository into the GOPATH directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/avalanche-l1-nodes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs\ngit clone https://github.com/ava-labs/subnet-evm.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the Avalanche Faucet Repository using SSH (Bash)\nDESCRIPTION: Provides an alternative method to clone the Avalanche Faucet repository using SSH. This method requires prior configuration of SSH keys with GitHub for authentication. Requires Git to be installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:ava-labs/avalanche-faucet.git\n```\n\n----------------------------------------\n\nTITLE: Displaying Chain Information with ChainRow in React TSX\nDESCRIPTION: The ChainRow component displays detailed chain information including chain ID and name. It accepts a className prop for custom styling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChainRow } from '@avalabs/builderkit';\n\n// Basic usage\n<ChainRow\n  chain_id={43114}\n  name=\"Avalanche C-Chain\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Chain Logos with ChainIcon in React TSX\nDESCRIPTION: The ChainIcon component displays chain logos based on the provided chain ID. It accepts additional CSS classes through the className prop for custom styling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChainIcon } from '@avalabs/builderkit';\n\n// Basic usage\n<ChainIcon chain_id={43114} />\n```\n\n----------------------------------------\n\nTITLE: Stopping AWM Relayer with Avalanche CLI\nDESCRIPTION: Command for stopping an AWM relayer on a specified network, with options for cluster operation and network endpoint configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer stop [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Response Format for avax.exportAVAX API\nDESCRIPTION: Example response from the deprecated avax.exportAVAX API showing the transaction ID of the completed export transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"txID\": \"2ffcxdkiKXXA4JdyRoS38dd7zoThkapNPeZuGPmmLBbiuBBHDa\"\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Blockchain with Avalanche CLI\nDESCRIPTION: Creates a new Subnet-EVM blockchain named 'myblockchain2' with Chain ID 2 and token symbol 'chain2'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/02-deploy-additional-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create myblockchain2\n```\n\n----------------------------------------\n\nTITLE: Installing node_exporter\nDESCRIPTION: Command to execute step 3 of the installer script which installs and configures node_exporter for system metrics collection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh --3\n```\n\n----------------------------------------\n\nTITLE: Importing Subnet Upgrade File with Avalanche CLI\nDESCRIPTION: Command to import an upgrade bytes file into the local environment. It requires specifying the filepath of the upgrade file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_158\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade import [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Node Validation Commands in Avalanche CLI\nDESCRIPTION: This snippet shows the usage and flags for the 'avalanche node validate' command suite, which provides commands for nodes to join the Primary Network and Subnets as validators.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_119\n\nLANGUAGE: bash\nCODE:\n```\navalanche node validate [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for validate\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Stopping Avalanche Node Load Test\nDESCRIPTION: The loadtest stop command halts load testing for an existing devnet cluster and terminates the separate cloud server created to host the load test.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_103\n\nLANGUAGE: bash\nCODE:\n```\navalanche node loadtest stop [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Receiving Cross-Chain VRF Requests in Solidity\nDESCRIPTION: This function receives cross-chain messages for VRF requests, verifies authorization, decodes the message, and initiates a request to Chainlink VRF. It also stores the request details for later callback handling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/03-orchestrating-vrf-requests.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction receiveTeleporterMessage(\n    bytes32 originChainID,\n    address originSenderAddress,\n    bytes calldata message\n) external {\n    require(msg.sender == address(teleporterMessenger), \"Caller is not the TeleporterMessenger\");\n    // Verify that the origin sender address is authorized\n    require(authorizedSubscriptions[originSenderAddress].isAuthorized, \"Origin sender is not authorized\");\n    uint256 subscriptionId = authorizedSubscriptions[originSenderAddress].subscriptionId;\n    // Verify that the subscription ID belongs to the correct owner\n    (,,,, address[] memory consumers) = s_vrfCoordinator.getSubscription(subscriptionId);\n    // Check wrapper contract is a consumer of the subscription\n    bool isConsumer = false;\n    for (uint256 i = 0; i < consumers.length; i++) {\n        if (consumers[i] == address(this)) {\n            isConsumer = true;\n            break;\n        }\n    }\n    require(isConsumer, \"Contract is not a consumer of this subscription\");\n    // Decode message to get the VRF parameters\n    CrossChainRequest memory vrfMessage = abi.decode(message, (CrossChainRequest));\n    // Request random words\n    VRFV2PlusClient.RandomWordsRequest memory req = VRFV2PlusClient.RandomWordsRequest({\n        keyHash: vrfMessage.keyHash,\n        subId: subscriptionId,\n        requestConfirmations: vrfMessage.requestConfirmations,\n        callbackGasLimit: vrfMessage.callbackGasLimit,\n        numWords: vrfMessage.numWords,\n        extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: vrfMessage.nativePayment}))\n    });\n    uint256 requestId = s_vrfCoordinator.requestRandomWords(req);\n    pendingRequests[requestId] = CrossChainReceiver({\n        destinationBlockchainId: originChainID,\n        destinationAddress: originSenderAddress\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Nodes Programmatically - Avalanche Network Runner - Go\nDESCRIPTION: This Go snippet demonstrates adding a new node to the network and removing an existing node (by name). AddNode takes a nodeConfig structure with runtime options; RemoveNode takes a node's name and removes it from the cluster. Requires a valid, running network instance and appropriate node configuration details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nnewNode, _ := network.AddNode(nodeConfig)\nerr := network.RemoveNode(names[0])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validator Access Control in Solidity\nDESCRIPTION: Example of implementing custom access control for validator operations using Solidity modifiers. This ensures that only authorized validators can perform certain actions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/custom-validator-manager.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyValidator() {\n    require(isValidator(msg.sender), \"Not a validator\");\n    _;\n}\n```\n\n----------------------------------------\n\nTITLE: Transferable Op Example with Byte Representation\nDESCRIPTION: Complete example of a Transferable Op instance showing both the high-level structure and the corresponding byte representation. The example includes an AssetID, UTXOIDs array with one UTXOID, and a TransferOp field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n[\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    UTXOIDs   <- [\n        {\n            TxID:0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000\n            UTXOIndex:5\n        }\n    ]\n    Op     <- 0x0000000d0000000200000003000000070000303900000003431100000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // number of utxoIDs:\n    0x00, 0x00, 0x00, 0x01,\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // op:\n    0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x03,\n    0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,\n    0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61, 0xfb,\n    0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8, 0x34,\n    0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55, 0xc3,\n    0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e, 0xde,\n    0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89, 0x43,\n    0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Signed Transaction Protocol Buffer Specification\nDESCRIPTION: Protocol Buffer message definition for signed transactions including codec_id, unsigned_tx, and credentials fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_45\n\nLANGUAGE: text\nCODE:\n```\nmessage Tx {\n    uint16 codec_id = 1;                 // 2 bytes\n    UnsignedTx unsigned_tx = 2;          // size(unsigned_tx)\n    repeated Credential credentials = 3; // 4 bytes + size(credentials)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ValidatorChurnPeriod Struct in Solidity\nDESCRIPTION: This struct defines the structure for tracking validator churn periods. It includes the start time, initial weight, total weight, and churn amount for each period. This is used to implement churn rate control in the ValidatorManager contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/00-proof-of-authority.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nstruct ValidatorChurnPeriod {\n    uint256 startTime;\n    uint64 initialWeight;\n    uint64 totalWeight;\n    uint64 churnAmount;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenesisAsset Structure in Gantt Format for Avalanche\nDESCRIPTION: This specification details the GenesisAsset structure using Gantt format, listing all fields with their data types and byte sizes. It includes fields like alias, network_id, blockchain_id, outputs, inputs, memo, name, symbol, denomination, and initial_states.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_53\n\nLANGUAGE: text\nCODE:\n```\n+----------------+----------------------+--------------------------------+\n| alias          : string               |           2 + len(alias) bytes |\n+----------------+----------------------+--------------------------------+\n| network_id     : int                  |                        4 bytes |\n+----------------+----------------------+--------------------------------+\n| blockchain_id  : [32]byte             |                       32 bytes |\n+----------------+----------------------+--------------------------------+\n| outputs        : []TransferableOutput |        4 + size(outputs) bytes |\n+----------------+----------------------+--------------------------------+\n| inputs         : []TransferableInput  |         4 + size(inputs) bytes |\n+----------------+----------------------+--------------------------------+\n| memo           : [256]byte            |           4 + size(memo) bytes |\n+----------------+----------------------+--------------------------------+\n| name           : string               |            2 + len(name) bytes |\n+----------------+----------------------+--------------------------------+\n| symbol         : string               |          2 + len(symbol) bytes |\n+----------------+----------------------+--------------------------------+\n| denomination   : byte                 |                        1 bytes |\n+----------------+----------------------+--------------------------------+\n| initial_states : []InitialState       | 4 + size(initial_states) bytes |\n+----------------+----------------------+--------------------------------+\n|           59 + size(alias) + size(outputs) + size(inputs) + size(memo) |\n|                 + len(name) + len(symbol) + size(initial_states) bytes |\n+------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Set L1 Validator Weight P-Chain Transaction Identifier\nDESCRIPTION: This identifier represents the P-Chain transaction type used to adjust a registered validator's weight, typically triggered by adding or removing delegation via the `PoSValidatorManager`.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_10\n\nLANGUAGE: Identifier\nCODE:\n```\nSetL1ValidatorWeightTx\n```\n\n----------------------------------------\n\nTITLE: Approving Tokens for Bridge Contract\nDESCRIPTION: Approves token spending allowance for the home bridge contract with a specified amount in wei.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/04-deploy-remote.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_C_CHAIN \"approve(address, uint256)\" $ERC20_HOME_C_CHAIN 2000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a Message to be Signed with BLS\nDESCRIPTION: A simple text message that will be signed using BLS cryptography. This example shows the content to be signed before demonstrating signature aggregation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-key-aggregation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPer consensum ad astra\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 on macOS in Bash\nDESCRIPTION: Executes the command to install Rosetta 2 on macOS. This is required on Apple Silicon (M1/M2) Macs to run x86-compiled binaries, such as potentially older versions of AvalancheGo or related tools, resolving the 'bad CPU type in executable' error.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/troubleshooting.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n/usr/sbin/softwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Importing SignatureKeyAggregation Component in MDX\nDESCRIPTION: Imports a reusable MDX component for signature and key aggregation documentation along with default MDX components for UI rendering.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/08-securing-cross-chain-communication/05-signature-aggregation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SignatureKeyAggregation from \"@/content/common/cryptography/signature-key-aggregation.mdx\"\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<SignatureKeyAggregation components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering the Native Minter Component with Custom Components - MDX\nDESCRIPTION: This snippet shows how to render the previously imported 'NativeMinter' MDX component, supplying the imported 'defaultMdxComponents' object as a prop named 'components'. This approach allows the 'NativeMinter' to use the shared UI component library for its internal rendering, ensuring consistency with the rest of the documentation. The output is an MDX-rendered element on the page. The 'components' prop must match the expectations of both the MDX bundler and the NativeMinter content.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/07-native-token-minting-rights.mdx#2025-04-23_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<NativeMinter components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Token Airdrop via CLI (Bash)\nDESCRIPTION: This snippet demonstrates the interactive CLI process for defining a custom token airdrop. It shows the user inputting specific addresses and the corresponding amount of native tokens (1000 TOK) to be allocated to each at the network's start. The process repeats for multiple addresses, followed by a prompt asking if more tokens should be airdropped.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/06-configure-token-allocation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✔ Customize your airdrop\nAddress to airdrop to: 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\nAmount to airdrop (in TOK units): 1000\n✔ Yes\nAddress to airdrop to: 0xF0f06058ca7B6e46E2B238F6d34A604DB1E2612f\nAmount to airdrop (in TOK units): 1000\n✔ Yes\nAddress to airdrop to: 0x321f6B73b6dFdE5C73731C39Fd9C89c7788D5EBc\nAmount to airdrop (in TOK units): 1000\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Would you like to airdrop more tokens?: \n  ▸ No\n    Yes\n```\n\n----------------------------------------\n\nTITLE: Declaring State Variables in Contracts - Solidity\nDESCRIPTION: This snippet illustrates how to declare a state variable within a Solidity smart contract. The contract named \"A\" includes a single uint256 variable \"num\" initialized to 5. This demonstrates the concept of state variables, which retain values across transactions and are modifiable only by functions within the contract or during initialization. No external dependencies are needed, and inputs/outputs are not relevant unless accessor functions are added.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/04-hello-world-part-1/04-contracts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract A {\n \n    uint256 num = 5;\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Frontend Recent Transactions Fetching Implementation\nDESCRIPTION: Frontend function to fetch recent transactions by calling the backend API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/03-modifying-code.mdx#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchRecentTransactions = async (address: string) => {\n    const result = await fetch(`api/wallet?method=listRecentTransactions&address=${address}`);\n    const transactions = await result.json();\n    return transactions as TransactionDetails;\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Available AvalancheGo Versions\nDESCRIPTION: Commands to display and select from available AvalancheGo versions for installation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --list\n```\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --version v1.3.1\n```\n\n----------------------------------------\n\nTITLE: Checking for Running AvalancheGo Processes in Bash\nDESCRIPTION: Uses the `ps aux` command piped to `grep avalanchego` to list any currently running processes related to AvalancheGo. This helps identify lingering processes that might interfere with a new local network deployment via Avalanche-CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/troubleshooting.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nps aux | grep avalanchego\n```\n\n----------------------------------------\n\nTITLE: Register L1 Validator Warp Message Identifier\nDESCRIPTION: This identifier represents a Warp message sent from the C-Chain (`ValidatorManager`) to the P-Chain. It contains all necessary information to register the validator, including its stake weight and an expiry timestamp.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Identifier\nCODE:\n```\nRegisterL1ValidatorMessage\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Definition for SECP256K1 Credentials\nDESCRIPTION: Protocol buffer message definition for SECP256K1 credentials in Avalanche, specifying fields for TypeID and signatures used for transaction authorization.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_48\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1Credential {\n    uint32 TypeID = 1;             // 4 bytes\n    repeated bytes signatures = 2; // 4 bytes + 65 bytes * len(signatures)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Input Format in Protocol Buffer\nDESCRIPTION: Describes the Transferable Input structure using Protocol Buffer notation, specifying fields for TxID (32 bytes), UTXOIndex (4 bytes), AssetID (32 bytes), and an Input of variable size.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nmessage TransferableInput {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n    bytes asset_id = 3;    // 32 bytes\n    Input input = 4;       // size(input)\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Avalanche Smart Contract Project\nDESCRIPTION: Commands to clone the Avalanche smart contract quickstart repository and install dependencies.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanche-smart-contract-quickstart.git\ncd avalanche-smart-contract-quickstart\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Importing Keystore User with AvalancheGo API - Shell\nDESCRIPTION: This shell snippet shows how to import a previously exported keystore user into an AvalancheGo node by POSTing a keystore.importUser JSON-RPC call via curl. The json data must include username, password, user (the previously exported hex), and the optional encoding parameter. The API operates only on a node under local control and is deprecated from v1.9.12. Returns an empty object on success.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.importUser\",\n    \"params\" :{\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\",\n        \"user\"    :\"0x7655a29df6fc2747b0874e1148b423b954a25fcdb1f170d0ec8eb196430f7001942ce55b02a83b1faf50a674b1e55bfc000000008cf2d869\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/keystore\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of TokenRow - React TypeScript\nDESCRIPTION: Demonstrates how to import the TokenRow component from the builderkit and render it with basic required props. Requires the @avalabs/builderkit package and TypeScript/React setup. The snippet shows minimum setup with chain_id, address, name, and symbol for displaying a token row; no balance or click handler is present. Inputs include the on-chain parameters; no outputs are returned except rendered UI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-row.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TokenRow } from '@avalabs/builderkit';\n\n// Basic usage\n<TokenRow \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  name=\"Avalanche\"\n  symbol=\"AVAX\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Pause/Resume Content in MDX\nDESCRIPTION: This snippet shows how to import another MDX file (`pause-and-resume.mdx`) as a component named `PauseAndResume` within an MDX document.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/02-avalanche-starter-kit/05-pause-and-resume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport PauseAndResume from \"@/content/common/avalanche-starter-kit/pause-and-resume.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Changing Subnet Owner - Avalanche Blockchain CLI - Bash\nDESCRIPTION: This code demonstrates changing the subnet owner of a Blockchain via the CLI, allowing for secure transfer of subnet administrative privileges on supported networks. The command is extensible with flags to set authorized control keys, designate clusters, select the operating network, and manage output or logging parameters. The operation is supported on devnet, Fuji, and Mainnet environments, with optional ledger integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain changeOwner [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging State Pruning and Database Compaction for Avalanche Node\nDESCRIPTION: This log snippet shows the process of pruning state data and compacting the database for an Avalanche node. It includes information on the number of nodes pruned, size of data pruned, and timing for each step of the compaction process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_5\n\nLANGUAGE: log\nCODE:\n```\nINFO [02-09|00:42:45.359] Pruned state data                        nodes=98,744,430 size=24.82GiB  elapsed=19m40.938s\nINFO [02-09|00:42:45.360] Compacting database                      range=0x00-0x10 elapsed=\"2.157µs\"\nINFO [02-09|00:43:12.311] Compacting database                      range=0x10-0x20 elapsed=26.951s\nINFO [02-09|00:43:38.763] Compacting database                      range=0x20-0x30 elapsed=53.402s\n// ... additional compacting logs ...\nINFO [02-09|00:59:34.367] Compacting database                      range=0xf0-     elapsed=16m49.005s\nINFO [02-09|00:59:34.367] Database compaction finished             elapsed=16m49.006s\nINFO [02-09|00:59:34.367] State pruning successful                 pruned=24.82GiB elapsed=39m34.749s\n```\n\n----------------------------------------\n\nTITLE: Launching HyperSDK Development Environment\nDESCRIPTION: Docker Compose command to build and start the devnet, faucet, and frontend services in detached mode. This process may take approximately 5 minutes for dependency downloads.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/01-hypersdk-starter-kit/02-set-up.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d --build devnet faucet frontend\n```\n\n----------------------------------------\n\nTITLE: Obtaining C-Chain Information using Primary Describe Command\nDESCRIPTION: This command retrieves detailed information about the C-Chain, including RPC URL, EVM Chain ID, token symbol, address, balance, and other relevant details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary describe --local\n```\n\n----------------------------------------\n\nTITLE: Calculating Effective Consumption Rate in LaTeX\nDESCRIPTION: This LaTeX formula calculates the Effective Consumption Rate, which determines the reward rate based on the staking period selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/rewards-formula.mdx#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\nEffectiveConsumptionRate =\n\\frac{MinConsumptionRate}{PercentDenominator} \\times \\left(1- \\frac{Staking Period}{Minting Period}\\right) + \\frac{MaxConsumptionRate}{PercentDenominator} \\times \\frac{Staking Period}{Minting Period}\n```\n\n----------------------------------------\n\nTITLE: Starting the Avalanche Network Runner Server\nDESCRIPTION: This command starts the Avalanche Network Runner server, listening on port 8080 for gRPC and 8081 for HTTP requests.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner server \\\n--log-level debug \\\n--port=\":8080\" \\\n--grpc-gateway-port=\":8081\"\n```\n\n----------------------------------------\n\nTITLE: Copying VM Binary to Plugins Directory in Bash\nDESCRIPTION: Copies the VM binary executable to the plugins directory where AvalancheGo searches for and registers VM plugins. The '-n' flag ensures it doesn't overwrite existing files.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/rust-vms/installing-vm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp -n <path to your binary> $GOPATH/src/github.com/ava-labs/avalanchego/build/plugins/\n```\n\n----------------------------------------\n\nTITLE: Saving Wrapped Native Token Address as Environment Variable\nDESCRIPTION: This command saves the deployed contract address as an environment variable for future use. Replace the '0x...' with the actual deployed contract address obtained from the previous step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/02-deploy-wrapped-native.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport WRAPPED_ERC20_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: Custom Styled Collectible Component with Shadow Effects\nDESCRIPTION: Shows how to apply custom styling to the Collectible component using the className prop to add shadow effects and hover transitions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/collectibles/collectible.mdx#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Collectible \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  token_id={1}\n  className=\"shadow-lg hover:shadow-xl transition-shadow\"\n/>\n```\n\n----------------------------------------\n\nTITLE: ChainDropdown with Network Switching\nDESCRIPTION: Demonstrates how to implement network switching functionality with the ChainDropdown component. This example shows how to handle the selection change event to trigger a network switch with error handling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-dropdown.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<ChainDropdown \n  selected={currentChainId}\n  list={supportedChainIds}\n  onSelectionChanged={async (chainId) => {\n    try {\n      await switchNetwork(chainId);\n    } catch (error) {\n      console.error('Failed to switch network:', error);\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Delete Command Flags Configuration\nDESCRIPTION: Available flags for the blockchain delete command, including help, config file path, and logging options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for delete\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Signature for Deprecated avax.exportAVAX Method\nDESCRIPTION: API signature for the deprecated avax.exportAVAX method, which is specifically for transferring AVAX tokens between chains in the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_18\n\nLANGUAGE: go\nCODE:\n```\navax.exportAVAX({\n    to: string,\n    amount: int,\n    baseFee: int,\n    username: string,\n    password:string,\n}) -> {txID: string}\n```\n\n----------------------------------------\n\nTITLE: Error Applying Upgrade: No Local Deployment Target\nDESCRIPTION: This shows the output when running `avalanche blockchain upgrade apply testblockchain` if 'testblockchain' has been defined but not yet deployed locally. It returns an 'Error: no deployment target available' message and displays the command's usage instructions and flags for specifying deployment targets (e.g., `--local`, `--fuji`).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade apply testblockchain\nError: no deployment target available\nUsage:\n  avalanche blockchain upgrade apply [blockchainName] [flags]\n\nFlags:\n      --avalanchego-chain-config-dir string   avalanchego's chain config file directory (default \"/home/fabio/.avalanchego/chains\")\n      --config                                create upgrade config for future Avalanche L1 deployments (same as generate)\n      --fuji fuji                             apply upgrade existing fuji deployment (alias for `testnet`)\n  -h, --help                                  help for apply\n      --local local                           apply upgrade existing local deployment\n      --mainnet mainnet                       apply upgrade existing mainnet deployment\n      --print                                 if true, print the manual config without prompting (for public networks only)\n      --testnet testnet                       apply upgrade existing testnet deployment (alias for `fuji`)\n```\n\n----------------------------------------\n\nTITLE: Invoking Precompile Generation Script with Help in Bash\nDESCRIPTION: Runs the 'generate_precompile.sh' script with the '--help' argument from the repository's 'scripts/' directory, printing usage information for the precompile template generator. The script automates ABI to Go code generation for precompiles and expects the correct environment and dependencies. Input: '--help' flag; Output: script usage message for operator reference.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_precompile.sh --help\n```\n\n----------------------------------------\n\nTITLE: Downloading Monitoring Installer Script\nDESCRIPTION: Command to download and make executable the monitoring installer script from the Avalanche GitHub repository.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -nd -m https://raw.githubusercontent.com/ava-labs/avalanche-monitoring/main/grafana/monitoring-installer.sh ;\\\nchmod 755 monitoring-installer.sh;\n```\n\n----------------------------------------\n\nTITLE: Unattended AvalancheGo Installation\nDESCRIPTION: Example of automated installation with minimum required parameters for IP and RPC configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --ip 1.2.3.4 --rpc local\n```\n\n----------------------------------------\n\nTITLE: Unsigned Export Transaction Example in Avalanche Protocol\nDESCRIPTION: A complete example of an unsigned export transaction in Avalanche, showing both the abstract components and their corresponding byte representation with detailed annotations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_46\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx           <- 0x00000012000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    DestinationChain <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Outs <- [\n        000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x12\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // destination_chain:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // outs[] count:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Importing the CertificatePage Component in JavaScript\nDESCRIPTION: This JavaScript code imports the `CertificatePage` component from a local path within the project structure (`@/components/quizzes/certificates`). This component is likely used later in the file to render the certificate display.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/certificate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport CertificatePage from '@/components/quizzes/certificates';\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: Command to check if Docker is properly installed and get version information.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-docker.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Certificate Component in JSX\nDESCRIPTION: This snippet imports the CertificatePage component and renders it with the courseId prop set to 'l1-tokenomics'. It's used to generate and display a course completion certificate for the L1 Tokenomics course.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/certificate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport CertificatePage from '@/components/quizzes/certificates';\n\n<CertificatePage courseId=\"l1-tokenomics\"/>\n```\n\n----------------------------------------\n\nTITLE: Transferring ERC20 Tokens from C-Chain to Custom Blockchain using Foundry\nDESCRIPTION: This command uses Foundry's cast send to transfer ERC20 tokens from the Avalanche C-Chain to a custom blockchain. It specifies the source blockchain ID, token addresses, recipient address, and amount to be transferred.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/05-transfer-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_HOME_C_CHAIN \"send((bytes32, address, address, address, uint256, uint256, uint256, address), uint256)\" \"(${SOURCE_BLOCKCHAIN_ID_HEX}, ${ERC20_TOKEN_REMOTE_L1}, ${FUNDED_ADDRESS}, ${ERC20_C_CHAIN}, 0, 0, 250000, 0x0000000000000000000000000000000000000000)\" 1000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Snow Context Structure Definition in Go\nDESCRIPTION: Defines the structure containing network and chain-specific information for precompile execution environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/09-stateful-precompiles/00-intro.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Context struct {\n    NetworkID uint32\n    Avalanche L1ID  ids.ID\n    ChainID   ids.ID\n    NodeID    ids.NodeID\n    PublicKey *bls.PublicKey\n    XChainID    ids.ID\n    CChainID    ids.ID\n    AVAXAssetID ids.ID\n    Log          logging.Logger\n    Lock         sync.RWMutex\n    Keystore     keystore.BlockchainKeystore\n    SharedMemory atomic.SharedMemory\n    BCLookup     ids.AliaserReader\n    Metrics      metrics.OptionalGatherer\n    WarpSigner warp.Signer\n    ValidatorState validators.State\n    ChainDataDir string\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Pause and Resume Component in JSX\nDESCRIPTION: This snippet imports a PauseAndResume component and renders it with default MDX components. It's likely part of a documentation page explaining how to pause and resume Avalanche L1 deployments.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/03-avalanche-starter-kit/06-pause-and-resume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport PauseAndResume from \"@/content/common/avalanche-starter-kit/pause-and-resume.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<PauseAndResume components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Building Precompile-EVM Binary in Bash\nDESCRIPTION: Commands to build the Precompile-EVM binary as an alternative to Subnet-EVM. This places the compiled binary in the AvalancheGo plugins directory for use during testing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/precompile-evm\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Saving Remote Contract Address as Environment Variable\nDESCRIPTION: Exports the deployed ERC20TokenRemote contract address as an environment variable for future use in the deployment process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/03-deploy-token-remote.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_TOKEN_REMOTE_CHAIN2=<\"Deployed to\" address>\n```\n\n----------------------------------------\n\nTITLE: Encoding a Variable-Length Byte Array in Avalanche\nDESCRIPTION: Demonstrates how variable-length byte arrays are encoded with a 4-byte integer length prefix followed by the array contents.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    [0x01, 0x02]\nResults in:\n    [0x00, 0x00, 0x00, 0x02, 0x01, 0x02]\n```\n\n----------------------------------------\n\nTITLE: Retrieving C-Chain Registry Address using Avalanche CLI\nDESCRIPTION: This command uses the Avalanche CLI to describe the primary network, which includes the ICM Registry address for the C-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/03-interact-with-the-registry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche primary describe\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with AddressInput in TSX\nDESCRIPTION: Illustrates how to handle potential validation errors using the `onChange` prop. The callback checks if the emitted `address` is non-empty (indicating validity) and sets an error message if it's empty (invalid or cleared input).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/address-input.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<AddressInput \n  placeholder=\"Recipient address\"\n  onChange={(address) => {\n    if (address) {\n      handleValidAddress(address);\n    } else {\n      setError('Please enter a valid address');\n    }\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Validator Set Initialization in React/TypeScript\nDESCRIPTION: This code snippet imports necessary components for initializing the validator set. It includes a custom wrapper component and the main InitValidatorSet component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/05-initialize-validator-set.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport InitValidatorSet from \"../../../../toolbox/src/toolbox/ValidatorManager/InitValidatorSet.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Encoding SECP256K1 Output Owners Output in Avalanche\nDESCRIPTION: Example of a SECP256K1 output owners output with TypeID 11, Locktime 0, Threshold 1, and one Address. Shows both the logical structure and byte-level representation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID    <- 0x0000000b\n    Locktime  <- 0x0000000000000000\n    Threshold <- 0x00000001\n    Addresses <- [\n        0xda2bee01be82ecc00c34f361eda8eb30fb5a715c,\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x0b,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0xda, 0x2b, 0xee, 0x01, 0xbe, 0x82, 0xec, 0xc0,\n    0x0c, 0x34, 0xf3, 0x61, 0xed, 0xa8, 0xeb, 0x30,\n    0xfb, 0x5a, 0x71, 0x5c,\n]\n```\n\n----------------------------------------\n\nTITLE: Gantt SECP256K1 Transfer Input Specification in Coreth\nDESCRIPTION: Defines the byte structure of a SECP256K1TransferInput used in Coreth transactions. Contains a 4-byte type ID, 8-byte amount, and a variable-sized array of address indices. Total size depends on the number of address indices.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------+-------------------------------------+\n| type_id         : int   |                             4 bytes |\n+-----------------+-------+-------------------------------------+\n| amount          : long  |                             8 bytes |\n+-----------------+-------+-------------------------------------+\n| address_indices : []int |  4 + 4 * len(address_indices) bytes |\n+-----------------+-------+-------------------------------------+\n                          | 16 + 4 * len(address_indices) bytes |\n                          +-------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Gantt Specification for Unsigned Transform Avalanche L1 TX\nDESCRIPTION: A Gantt chart representation of the Transform Avalanche L1 transaction structure, detailing each field, its type, and size in bytes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n+----------------------+------------------+----------------------------------+\n| base_tx              : BaseTx           |              size(base_tx) bytes |\n+----------------------+------------------+----------------------------------+\n| subnet_id            : [32]byte         |                         32 bytes |\n+----------------------+------------------+----------------------------------+\n| asset_id             : [32]byte         |                         32 bytes |\n+----------------------+------------------+----------------------------------+\n| initial_supply       : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| maximum_supply       : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| min_consumption_rate : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| max_consumption_rate : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| min_validator_stake  : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| max_validator_stake  : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| min_stake_duration   : short            |                          4 bytes |\n+----------------------+------------------+----------------------------------+\n| max_stake_duration   : short            |                          4 bytes |\n+----------------------+------------------+----------------------------------+\n| min_delegation_fee   : short            |                          4 bytes |\n+----------------------+------------------+----------------------------------+\n| min_delegator_stake  : long             |                          8 bytes |\n+----------------------+------------------+----------------------------------+\n| max_validator_weight_factor : byte      |                           1 byte |\n+----------------------+------------------+----------------------------------+\n| uptime_requirement   : short            |                          4 bytes |\n+----------------------+------------------+----------------------------------+\n| subnet_auth          : SubnetAuth       | 4 bytes + len(sig_indices) bytes |\n+----------------------+------------------+----------------------------------+\n| 141 + size(base_tx) + len(sig_indices) bytes                               |\n+----------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Solidity Constructor Syntax\nDESCRIPTION: Illustrates the basic syntax for defining a constructor function within a Solidity contract. Constructors are special, optional functions executed only once during contract deployment to initialize state variables or perform setup tasks. They use the `constructor` keyword followed by parentheses for optional arguments and curly braces for the function body.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/04-contract-constructor.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(<arguments>) {      \n}\n```\n\n----------------------------------------\n\nTITLE: Generated ABI for CalculatorPlus Interface\nDESCRIPTION: The resulting ABI JSON file containing interface definitions for all CalculatorPlus functions with their inputs and outputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"dividend\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"divisor\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"moduloPlus\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"multiple\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"remainder\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"base\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"powOfThree\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"secondPow\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"thirdPow\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"fourthPow\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"numerator\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"denominator\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"simplFrac\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"simplNum\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"simplDenom\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Sender Contract with Correct Blockchain ID\nDESCRIPTION: This Solidity code snippet shows the updated SenderOnCChain contract with the correct destination blockchain ID. The ID is replaced with the hexadecimal value obtained from the Avalanche-CLI command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/04-icm-basics/04-create-sender-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SenderOnCChain {\n    ITeleporterMessenger public immutable messenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n\n    /**\n     * @dev Sends a message to another chain.\n     */\n    function sendMessage(address destinationAddress, string calldata message) external {\n        messenger.sendCrossChainMessage(\n            TeleporterMessageInput({\n                // Replace with blockchainID of your L1 (see instructions in Readme)\n                destinationBlockchainID: 0x6391b85bafc78f1b10aec35695c2399c2fb7fff9f3b18ea903f77345e9e96e3e,\n                destinationAddress: destinationAddress,\n                feeInfo: TeleporterFeeInfo({feeTokenAddress: address(0), amount: 0}),\n                requiredGasLimit: 100000,\n                allowedRelayerAddresses: new address[](0),\n                message: abi.encode(message)\n            })\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported PauseAndResume Component in JSX\nDESCRIPTION: This JSX snippet renders the `PauseAndResume` component that was imported earlier. It passes the `defaultMdxComponents` (imported from `fumadocs-ui`) via the `components` prop. This allows the `PauseAndResume` component to utilize the standard Fumadocs UI components for rendering its internal Markdown content, ensuring visual consistency across the documentation site.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/07-pause-and-resume.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PauseAndResume components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Returning to Repository Root Using Bash\nDESCRIPTION: Executes 'cd ..' to return the shell context to the parent directory of the current location. Used here to transition out of the 'contracts/' directory back to the Precompile-EVM repository root. No output except for changing the directory context.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Creating For-Loops in Solidity - Solidity\nDESCRIPTION: Illustrates the standard for-loop syntax in Solidity, which is used for iteration with initialization, a loop condition, and an increment step. This construct supports traversing indexes or processing sequences within contracts. No dependencies or required parameters are specified, as this is a general template for iteration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/02-control-flow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfor (<loop-variable>; <loop-condition>; <loop-incrementer>) {\\n  \\n}\n```\n\n----------------------------------------\n\nTITLE: Common Flags for the upgrade Command Suite in Avalanche CLI (Bash)\nDESCRIPTION: Lists common command-line flags available for the `avalanche blockchain upgrade` command and its subcommands. These include flags for accessing help, specifying a configuration file, setting the log level, and skipping update checks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for upgrade\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component in JSX\nDESCRIPTION: Import statement for the Steps and Step components from the fumadocs-ui library used for course navigation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Step, Steps } from 'fumadocs-ui/components/steps';\n```\n\n----------------------------------------\n\nTITLE: Navigating to Precompile-EVM Directory for Deployment\nDESCRIPTION: Alternative command to navigate to the Precompile-EVM directory if using that implementation instead of Subnet-EVM. This prepares for running Avalanche Network Runner.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/precompile-deployment.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/precompile-evm\n```\n\n----------------------------------------\n\nTITLE: Avalanche Key Management Configuration Flags\nDESCRIPTION: Available configuration flags for the main key command, including help options and application settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for key\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Rendering InitValidatorSet Component in React/JSX\nDESCRIPTION: This code snippet demonstrates how to render the InitValidatorSet component within the ToolboxMdxWrapper. This setup is likely used to provide a user interface for initializing the validator set.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/05-initialize-validator-set.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <InitValidatorSet />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Building a Custom ICTT Flow with Individual Components in React (TSX)\nDESCRIPTION: This snippet illustrates advanced usage by composing individual ICTT components (`ChainSelector`, `TokenSelector`, `AmountInput`, `TransferButton`, `TransferStatus`) from `@avalabs/builderkit/ictt/components` to build a custom user interface. The `ICTTProvider` wraps these components, managing the underlying state and logic, requiring the same token configuration and initial chain/token details as the basic `<ICTT>` component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/flows/ictt.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { \n  ICTTProvider,\n  ChainSelector, \n  TokenSelector,\n  AmountInput,\n  TransferButton,\n  TransferStatus \n} from '@avalabs/builderkit/ictt/components';\n\nfunction CustomICTT() {\n  const tokens = [\n    // Array of tokens following the ICTTToken interface\n    // See /docs/builderkit/tokens for configuration details\n    [...]\n  ];\n\n  return (\n    <ICTTProvider\n      tokens={tokens}\n      token_in=\"0x1234...\"\n      source_chain_id={43113}\n      destination_chain_id={173750}\n    >\n      <div className=\"space-y-4\">\n        <ChainSelector label=\"From Chain\" onSelect={handleSourceChainSelect} />\n        <TokenSelector chainId={sourceChainId} onSelect={handleTokenSelect} />\n        <AmountInput value={amount} onChange={setAmount} token={selectedToken} />\n        <ChainSelector label=\"To Chain\" onSelect={handleDestChainSelect} />\n        <TransferButton />\n        <TransferStatus />\n      </div>\n    </ICTTProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Status Response\nDESCRIPTION: Example JSON response showing successful bootstrap completion\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"isBootstrapped\": true\n    },\n    \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Token Transferrer Configuration Flags\nDESCRIPTION: Available configuration flags for the main tokenTransferrer command, including help options and application settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for tokenTransferrer\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Making RPC Request to eRPC Proxy\nDESCRIPTION: Example curl command to send an RPC request to the eRPC proxy. This demonstrates how to query for a specific block by number on the Avalanche C-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/rpc-providers.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:4000/main/evm/43114' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\n        \"0x2e76572\",\n        false\n    ],\n    \"id\": 9199,\n    \"jsonrpc\": \"2.0\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Complete VM Registration Implementation\nDESCRIPTION: Full implementation of the VM initialization including action and output registration, auth types, and VM creation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/03-creating-actions/02-register-action.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright (C) 2024, Ava Labs, Inc. All rights reserved.\n// See the file LICENSE for licensing terms.\n\npackage vm\n\nimport (\n\t\"github.com/ava-labs/avalanchego/utils/wrappers\"\n\n\t\"github.com/ava-labs/hypersdk-starter/actions\"\n\t\"github.com/ava-labs/hypersdk-starter/consts\"\n\t\"github.com/ava-labs/hypersdk-starter/storage\"\n\t\"github.com/ava-labs/hypersdk/auth\"\n\t\"github.com/ava-labs/hypersdk/chain\"\n\t\"github.com/ava-labs/hypersdk/codec\"\n\t\"github.com/ava-labs/hypersdk/genesis\"\n\t\"github.com/ava-labs/hypersdk/vm\"\n\t\"github.com/ava-labs/hypersdk/vm/defaultvm\"\n)\n\nvar (\n\tActionParser *codec.TypeParser[chain.Action]\n\tAuthParser   *codec.TypeParser[chain.Auth]\n\tOutputParser *codec.TypeParser[codec.Typed]\n)\n\n// Setup types\nfunc init() {\n\tActionParser = codec.NewTypeParser[chain.Action]()\n\tAuthParser = codec.NewTypeParser[chain.Auth]()\n\tOutputParser = codec.NewTypeParser[codec.Typed]()\n\n\terrs := &wrappers.Errs{}\n\terrs.Add(\n\t\t// When registering new actions, ALWAYS make sure to append at the end.\n\t\t// Pass nil as second argument if manual marshalling isn't needed (if in doubt, you probably don't)\n\t\tActionParser.Register(&actions.Transfer{}, nil),\n        ActionParser.Register(&actions.Greeting{}, nil),\n\n\t\t// When registering new auth, ALWAYS make sure to append at the end.\n\t\tAuthParser.Register(&auth.ED25519{}, auth.UnmarshalED25519),\n\t\tAuthParser.Register(&auth.SECP256R1{}, auth.UnmarshalSECP256R1),\n\t\tAuthParser.Register(&auth.BLS{}, auth.UnmarshalBLS),\n\n\t\tOutputParser.Register(&actions.TransferResult{}, nil),\n        OutputParser.Register(&actions.GreetingResult{}, nil),\n\n\t)\n\tif errs.Errored() {\n\t\tpanic(errs.Err)\n\t}\n}\n\n// NewWithOptions returns a VM with the specified options\nfunc New(options ...vm.Option) (*vm.VM, error) {\n\toptions = append(options, With()) // Add MorpheusVM API\n\treturn defaultvm.New(\n\t\tconsts.Version,\n\t\tgenesis.DefaultGenesisFactory{},\n\t\t&storage.StateManager{},\n\t\tActionParser,\n\t\tAuthParser,\n\t\tOutputParser,\n\t\tauth.Engines(),\n\t\toptions...,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Avalanche Starter Kit Setup Component in JSX\nDESCRIPTION: This code snippet imports the SetUp component from a specific path and the default MDX components from fumadocs-ui. It then renders the SetUp component, passing the default MDX components as a prop.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/02-set-up.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SetUp from \"@/content/common/avalanche-starter-kit/set-up.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<SetUp components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Flags for File Import in Avalanche CLI\nDESCRIPTION: Flags for the file import command, including options for specifying repository branches, forcing overwrites, and selecting specific subnet configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_143\n\nLANGUAGE: bash\nCODE:\n```\n--branch string             the repo branch to use if downloading a new repo\n-f, --force overwrite       the existing configuration if one exists\n-h, --help help             for file\n--repo string               the repo to import (ex: ava-labs/avalanche-plugins-core) or url to download the repo from\n--subnet string             the subnet configuration to import from the provided repo\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing Subnets from Public Networks in Avalanche CLI\nDESCRIPTION: Command for importing blockchain configurations from running networks. Supports importing from various network types including testnet and mainnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_144\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet import public [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Stopping Avalanche Relayer\nDESCRIPTION: Command to stop the AWM Relayer execution on a specified devnet cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-devnet.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer stop --cluster <devnetName>\n```\n\n----------------------------------------\n\nTITLE: Attaching Peer to Node in Bash\nDESCRIPTION: Shows how to attach a peer to a node using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control attach-peer node5\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Apply Command for AVAX Node Configuration\nDESCRIPTION: This snippet shows how to navigate to the project directory and execute the Terraform apply command. It's used to apply the Terraform configuration for the AVAX node project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/google-cloud.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-avax-project\ntf apply\n```\n\n----------------------------------------\n\nTITLE: Example of SECP256K1 Mint Output Binary Representation\nDESCRIPTION: Demonstrates the binary representation of a SECP256K1 Mint output with specific values for TypeID, Locktime, Threshold, and two Addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x06,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Subnet Upgrade with Avalanche CLI\nDESCRIPTION: Command to build a new upgrade.json file for customizing a Blockchain. It uses an interactive wizard to guide the user through the process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_157\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade generate [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Requesting Random Words via Cross-Chain Communication in Solidity\nDESCRIPTION: Implementation of requestRandomWords function that sends a cross-chain message to request random numbers from Chainlink VRF. Uses TeleporterMessenger for cross-chain communication and includes parameters for VRF configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/04-bring-vrf-to-unsupported-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction requestRandomWords(\n    bytes32 keyHash,\n    uint16 requestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    bool nativePayment,\n    uint32 requiredGasLimit\n) external {\n    // Create CrossChainRequest struct\n    CrossChainRequest memory crossChainRequest = CrossChainRequest({\n        keyHash: keyHash,\n        requestConfirmations: requestConfirmations,\n        callbackGasLimit: callbackGasLimit,\n        numWords: numWords,\n        nativePayment: nativePayment\n    });\n    // Send Teleporter message\n    bytes memory encodedMessage = abi.encode(crossChainRequest);\n    TeleporterMessageInput memory messageInput = TeleporterMessageInput({\n        destinationBlockchainID: DATASOURCE_BLOCKCHAIN_ID, \n        destinationAddress: vrfRequesterContract,\n        feeInfo: TeleporterFeeInfo({ feeTokenAddress: address(0), amount: 0 }),\n        requiredGasLimit: requiredGasLimit,\n        allowedRelayerAddresses: new address[](0),\n        message: encodedMessage\n    });\n    teleporterMessenger.sendCrossChainMessage(messageInput);\n}\n```\n\n----------------------------------------\n\nTITLE: List Avalanche Keys\nDESCRIPTION: Retrieves and lists the keys associated with the custom blockchain\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/03-transfer-native-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list -l --blockchains myblockchain --keys myAddress\n```\n\n----------------------------------------\n\nTITLE: Entering Custom Activation Datetime (Validated Input)\nDESCRIPTION: This demonstrates the Avalanche-CLI wizard prompt after a valid UTC datetime (e.g., '2023-03-31 14:00:00') has been entered for the custom activation time. The absence of the initial '✗' indicates the input format is accepted, though it must still represent a future time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n✔ Enter the block activation UTC datetime in 'YYYY-MM-DD HH:MM:SS' format: 2023-03-31 14:00:00\n```\n\n----------------------------------------\n\nTITLE: Deploying Receiver Contract with Forge\nDESCRIPTION: Command to deploy the ReceiverOnSubnet contract using Forge. The contract is deployed to a custom blockchain using a private key for authentication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/05-create-the-receiver-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK contracts/interchain-messaging/send-roundtrip/receiverOnSubnet.sol:ReceiverOnSubnet --broadcast\n```\n\n----------------------------------------\n\nTITLE: Signed Transaction Gantt Format Specification\nDESCRIPTION: Binary format specification for signed transactions showing codec_id, unsigned_tx, and credentials structure with byte sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_44\n\nLANGUAGE: text\nCODE:\n```\n+---------------------+--------------+------------------------------------------------+\n| codec_id            : uint16       |                                        2 bytes |\n+---------------------+--------------+------------------------------------------------+\n| unsigned_tx         : UnsignedTx   |                        size(unsigned_tx) bytes |\n+---------------------+--------------+------------------------------------------------+\n| credentials         : []Credential |                    4 + size(credentials) bytes |\n+---------------------+--------------+------------------------------------------------+\n                                     | 6 + size(unsigned_tx) + len(credentials) bytes |\n                                     +------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Importing Default Fumadocs UI MDX Components in JavaScript/MDX\nDESCRIPTION: This JavaScript import statement brings in the default set of components provided by the `fumadocs-ui/mdx` library. These components are typically used to render standard Markdown elements (like headings, paragraphs, lists, code blocks) with the Fumadocs styling and features.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/07-pause-and-resume.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Describing Blockchain Configuration\nDESCRIPTION: Retrieves the configuration details of 'myblockchain2' including the ICM Messenger and Registry addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/02-deploy-additional-blockchain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe myblockchain2\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported Component in JSX/MDX\nDESCRIPTION: This snippet uses JSX syntax to render the previously imported `Networks` component. It dynamically includes the content defined in the `networks.mdx` file at this specific location within the current document. This demonstrates how modular content is integrated into the page flow.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/02-avalanche-starter-kit/04-networks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Networks/>\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens to Mock Receiver Contract on Avalanche L1\nDESCRIPTION: This complex command sends tokens to the mock receiver contract. It includes various parameters such as blockchain ID, token addresses, and amounts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/05-mock-receiver.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $ERC20_HOME_C_CHAIN \n\"sendAndCall((bytes32, address, address, bytes, uint256, uint256, address, address, address, uint256, uint256), uint256)\" \n\"(${C_CHAIN_BLOCKCHAIN_ID_HEX}, ${ERC20_TOKEN_REMOTE_L1}, ${MOCK_RECEIVER_ADDRESS}, 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, 2500000, 2000000, 0x0000000000000000000000000000000000000000, ${FUNDED_ADDRESS}, ${ERC20_HOME_C_CHAIN}, 0, 0)\" 100000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Assets with OKX OS API\nDESCRIPTION: Script to retrieve and display token balances for tracked addresses using OKX OS API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/okxos.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CryptoJS = require(\"crypto-js\");\n\n    const getRequestUrl = (baseUrl, path, params = null) => {\n        const url = new URL(baseUrl + path);\n        if (params) {\n            Object.keys(params).forEach((key) =>\n                url.searchParams.append(key, params[key]),\n            );\n        }\n        return url.toString();\n    };\n\n    const apiBaseUrl = \"https://www.okx.com\";\n    const getAssetsParams = {\n        accountId: \"ACCOUNT ID FROM PREVIOUS STEP\",\n    };\n\n    const timestamp = new Date().toISOString();\n    const method = \"GET\";\n    const path = \"/api/v5/wallet/asset/wallet-all-token-balances\";\n    const queryString = `?accountId=${getAssetsParams.accountId}`;\n\n    const signString = timestamp + method + path + queryString;\n    const signature = CryptoJS.enc.Base64.stringify(\n        CryptoJS.HmacSHA256(signString, \"YOUR API SECRET KEY\"),\n    );\n\n    const headersParams = {\n        \"Content-Type\": \"application/json\",\n        \"OK-ACCESS-PROJECT\": \"YOUR PROJECT ID\",\n        \"OK-ACCESS-KEY\": \"YOUR API KEY\",\n        \"OK-ACCESS-SIGN\": signature,\n        \"OK-ACCESS-PASSPHRASE\": \"YOUR API PASSPHRASE\",\n        \"OK-ACCESS-TIMESTAMP\": timestamp,\n    };\n\n    const getAssetsData = async () => {\n        const apiRequestUrl = getRequestUrl(apiBaseUrl, path, getAssetsParams);\n\n        const response = await fetch(apiRequestUrl, {\n            method: \"GET\",\n            headers: headersParams,\n        });\n\n        return response.json();\n    };\n\n    getAssetsData()\n        .then(({ data }) => {\n            console.log(\"\\n=== Wallet Assets ===\\n\");\n\n            data.forEach((wallet) => {\n                const date = new Date(parseInt(wallet.timeStamp));\n                console.log(`Last Updated: ${date.toLocaleString()}\\n`);\n\n                console.log(\"Token Assets:\");\n                wallet.tokenAssets.forEach((token) => {\n                    console.log(`\n    Token: ${token.symbol}\n    Chain: ${token.chainIndex}\n    Balance: ${token.balance}\n    -----------------------------`);\n                });\n            });\n        })\n        .catch((error) => console.error(\"Error:\", error));\n```\n\n----------------------------------------\n\nTITLE: Rendering Validator Manager Deployment Components\nDESCRIPTION: Renders the imported React components for deploying the Validator Manager, wrapped in a ToolboxMdxWrapper component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/01-deploy-validator-manager.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ToolboxMdxWrapper>\n    <DeployValidatorMessages />\n    <DeployValidatorManager />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Transfer Step Selection (Send)\nDESCRIPTION: Shows the interactive prompt asking the user to specify the step of the transfer: Send or Receive. For the first part of the transfer, the user selects 'Send'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n? Step of the transfer:\n  ▸ Send\n    Receive\n```\n\n----------------------------------------\n\nTITLE: Proto Transferable Input Specification in Coreth\nDESCRIPTION: Protocol buffer message definition for a TransferableInput in Coreth. Specifies fields for transaction ID (32 bytes), UTXO index (4 bytes), asset ID (32 bytes), and a nested Input message.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmessage TransferableInput {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n    bytes asset_id = 3;    // 32 bytes\n    Input input = 4;       // size(input)\n}\n```\n\n----------------------------------------\n\nTITLE: SECP256K1 Mint Operation Byte Structure\nDESCRIPTION: Example of a SECP256K1 mint operation with TypeID 8, showing the binary structure including address indices, mint output, and transfer output fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID <- 0x00000008\n    AddressIndices <- [0x00000003, 0x00000007]\n    MintOutput <- 0x00000006000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c89\n    TransferOutput <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Avalanche Faucet Repository using HTTPS (Bash)\nDESCRIPTION: Demonstrates how to download the source code for the Avalanche Faucet application using the `git clone` command with the HTTPS URL. This is the first step in setting up a local instance for deployment or development. Requires Git to be installed.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/avalanche-faucet\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct - Solidity\nDESCRIPTION: Illustrates how to define a struct named Person in Solidity, grouping an age (uint256) together with a name (string). Struct definitions must be placed within contract scope and allow grouping multiple variables as a single type. No dependencies other than Solidity contract context. Structs do not include behavior—only data fields are supported.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Person {\n    uint256 age;\n    string name;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Partially Signed Transaction\nDESCRIPTION: Process of saving a partially signed transaction to a file for completing the multisig process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPath to export partially signed TX to: partiallySigned.txt\n\nAddresses remaining to sign the tx: P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\n\nConnect a ledger with one of the remaining addresses or choose a stored key and run the signing command, or send \"partiallySigned.txt\" to another user for signing.\n\nSigning command: avalanche transaction sign testblockchain --input-tx-filepath partiallySigned.txt\n```\n\n----------------------------------------\n\nTITLE: Airdrop Token Distribution Prompt (Shell)\nDESCRIPTION: This snippet presents the interactive shell prompt encountered during Avalanche L1 creation for distributing tokens. It shows the options available for airdropping tokens, including sending 1 million tokens to a default ewoq address or customizing the airdrop. The snippet is intended to illustrate how token distribution selection works and helps developers recognize which option securely provides deployer funds; no direct code execution is implied.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/foundry-quickstart.mdx#2025-04-23_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n? How would you like to distribute funds: \\n    Airdrop 1 million tokens to a newly generate address (stored key)\\n  \\u25B6 Airdrop 1 million tokens to the default ewoq address (do not use in production)\\n    Customize your airdrop\\n    Go back to previous step\n```\n\n----------------------------------------\n\nTITLE: Managing Avalanche Transactions\nDESCRIPTION: This command suite provides utilities for signing and committing multisig transactions on the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_166\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Loading Snapshot in Bash\nDESCRIPTION: Illustrates how to load a network snapshot using the ANR control command, with options for specifying AvalancheGo binary path and plugin directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control load-snapshot snapshot\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control load-snapshot snapshotName --avalanchego-path /path/to/avalanchego/binary --plugin-dir /path/to/avalanchego/plugins\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Images\nDESCRIPTION: Command to list Docker images and verify the successful creation of AvalancheGo image.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-docker.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Entering Custom Activation Datetime (Initial Prompt)\nDESCRIPTION: This shows the prompt displayed by the Avalanche-CLI wizard when the user selects 'Custom' for the precompile activation time. It specifies the required UTC format ('YYYY-MM-DD HH:MM:SS') and initially shows a validation marker ('✗') indicating pending input.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n✔ Custom\n✗ Enter the block activation UTC datetime in 'YYYY-MM-DD HH:MM:SS' format:\n```\n\n----------------------------------------\n\nTITLE: Additional Parameters for Starting a Network\nDESCRIPTION: These are optional parameters that can be added to the start command for configuring plugins, blockchain specs, and node configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n--plugin-dir ${AVALANCHEGO_PLUGIN_PATH} \\\n--blockchain-specs '[{\"vm_name\":\"subnetevm\",\"genesis\":\"/tmp/subnet-evm.genesis.json\"}]' \\\n--global-node-config '{\"index-enabled\":false, \"api-admin-enabled\":true,\"network-peer-list-gossip-frequency\":\"300ms\"}' \\\n--custom-node-configs\" '{\"node1\":{\"log-level\":\"debug\",\"api-admin-enabled\":false},\"node2\":{...},...}'\n```\n\n----------------------------------------\n\nTITLE: Selecting Virtual Machine in Avalanche CLI - Plaintext\nDESCRIPTION: This snippet represents the CLI wizard's prompt for selecting the virtual machine during Avalanche L1 blockchain configuration. Users should choose 'Subnet-EVM' as the VM option when prompted. No dependencies are required other than executing the 'avalanche blockchain create' command to reach this step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n? Which Virtual Machine would you like to use?: \n  ▸ Subnet-EVM\n    Custom VM\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Integrating AddressInput within a Form in TSX\nDESCRIPTION: Demonstrates using the `AddressInput` component as a controlled input within an HTML form. The `value` prop is bound to component state (`recipientAddress`), and `onChange` updates this state (`setRecipientAddress`). A submit button's disabled state is conditionally controlled based on whether `recipientAddress` is valid (non-empty).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/address-input.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\n<form onSubmit={handleSubmit}>\n  <AddressInput \n    placeholder=\"Recipient\"\n    value={recipientAddress}\n    onChange={setRecipientAddress}\n    className=\"mb-4\"\n  />\n  <button \n    type=\"submit\" \n    disabled={!recipientAddress}\n  >\n    Send\n  </button>\n</form>\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent Transactions in TypeScript\nDESCRIPTION: This function is a placeholder for implementing the retrieval of recent transactions for all tokens associated with a given address. It will make a call to the backend to fetch the transaction details using the listRecentTransactions method.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/05-wallet-portfolio-app/02-understanding-code.mdx#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n  const fetchRecentTransactions = async (address: string) => {\n    //\n    // TODO: Implement this!\n    //\n    return {} as TransactionDetails;\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of MultiChainTokenInput in React/TypeScript\nDESCRIPTION: Illustrates how to import the MultiChainTokenInput component from the builderkit and use it for basic multi-chain token selection in a TypeScript React application. The component is initialized with a selected token object, a list of tokens, a callback for selection changes, and an option to display balances. The snippet demonstrates typical parameter binding: selected, list, onSelectionChanged, and showBalances. Outputs the selected token object to the console when changed. Requires installation of '@avalabs/builderkit' and a valid multiChainTokenList.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/input/multi-chain-token-input.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { MultiChainTokenInput } from '@avalabs/builderkit';\n\n// Basic usage\n<MultiChainTokenInput \n  selected={{ \n    address: \"0x1234...\", \n    chain_id: 43114,\n    symbol: \"AVAX\" \n  }}\n  list={multiChainTokenList}\n  onSelectionChanged={(token) => console.log('Selected token:', token)}\n  showBalances={true}\n/>\n```\n\n----------------------------------------\n\nTITLE: Stopping Avalanche Node\nDESCRIPTION: Command to stop the Avalanche node before performing database operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop avalanchego\n```\n\n----------------------------------------\n\nTITLE: Backing up AvalancheGo Node Files Using SCP with SSH Key\nDESCRIPTION: Command to securely copy essential node files from a remote machine to a local backup directory using SCP with a specified SSH key file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscp -i /path/to/the/key.pem -r ubuntu@PUBLICIP:/home/ubuntu/.avalanchego/staking ~/avalanche_backup\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for L1 Details\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the AvaCloud Data API for retrieving L1 subnet details. It includes the necessary headers for accepting JSON response.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/08-query-l1-details.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://glacier-api.avax.network/v1/networks/{network}/subnets/{subnetId}\" \\\n  -H \"accept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Avalanche Network Runner Server Setup\nDESCRIPTION: Bash commands to start the Avalanche Network Runner server with debug logging\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner server \\\n--log-level debug \\\n--port=\":8080\" \\\n--grpc-gateway-port=\":8081\"\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter Metadata for Avalanche CLI Guides - Markdown/YAML\nDESCRIPTION: This snippet defines documentation metadata using markdown frontmatter, including a section title, description, and indexing flag for guides related to the Avalanche CLI. It requires markdown files to support YAML-style frontmatter, typically provided by static site generators such as Docusaurus or Jekyll. Key parameters include 'title', 'description', and 'index', which specify how the section appears in navigation and search results; no code is executed, and the content is strictly for documentation infrastructure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\ntitle: Miscellaneous Guides\\ndescription: General guides for Avalanche CLI.\\nindex: true\\n---\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Balances\nDESCRIPTION: Commands to check WAVAX token balance and native AVAX balance after the swap completion.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/13-cross-chain-token-swaps/08-deploy-wrapped-exchange-contract.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c 0xd00ae08403B9bbb9124bB305C09058E32C39A48c \"balanceOf(address)\" ${FUNDED_ADDRESS}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast balance --rpc-url local-c ${FUNDED_ADDRESS}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncast balance --rpc-url local-c ${FUNDED_ADDRESS} --ether\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles in AllowList via Command Line\nDESCRIPTION: This bash snippet shows the interface for assigning roles (Admin, Manager, Enabled) to addresses in the AllowList for the Native Minter Precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/04-activating-native-minter-precompile.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n? What role should the address have?: \n  ▸ Admin\n    Manager\n    Enabled\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for ERC-20 Bridge\nDESCRIPTION: Markdown structure defining the documentation layout for ERC-20 token bridge implementation, including metadata, imports, and implementation steps.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/01-erc-20-to-erc-20-bridge.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: ERC-20 to ERC-20 Bridge\ndescription: Transfer ERC-20 tokens between Avalanche L1s\nupdated: 2024-05-31\nauthors: [ashucoder9]\nicon: Book\n---\nimport { Step, Steps } from 'fumadocs-ui/components/steps';\nimport Link from 'next/link';\nimport { buttonVariants } from '@/components/ui/button.tsx'\n\n## Transfer an ERC-20 Token &rarr; Avalanche L1 as an ERC-20 Token\n\nThis chapter will show you how to send an ERC-20 Token on C-Chain to an Avalanche L1 using Interchain Messaging and Foundry. This demo is conducted on a local network, but can be applied to Fuji Testnet and Avalanche Mainnet directly.\n\n**All Avalanche Interchain Token Transfer contracts and interfaces implemented in this chapter implementation are maintained in the [`avalanche-interchain-token-transfer`](https://github.com/ava-labs/avalanche-interchain-token-transfer/tree/main/contracts/src) repository.**\n\nDeep dives on each template interface can be found [here](https://github.com/ava-labs/avalanche-interchain-token-transfer/blob/main/contracts/README.md).\n\n_Disclaimer: The avalanche-interchain-token-transfer contracts used in this tutorial are under active development and are not yet intended for production deployments. Use at your own risk._\n\n## What we will do\n\n1. Deploy an ERC-20 Contract on C-Chain\n2. Deploy the Interchain Token Transferer Contracts on C-Chain and Avalanche L1\n3. Register Remote Token contract with the Home Transferer contract\n4. Add Collateral and Start Sending Tokens\n```\n\n----------------------------------------\n\nTITLE: Setting Global Log Level Flag\nDESCRIPTION: Global flag configuration for setting the application log level with a default value of ERROR.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n--log-level string   log level for the application (default \"ERROR\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Reference - React/TypeScript\nDESCRIPTION: Main directory structure reference showing key folders like components and stores, with patterns for component reuse and state management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/toolbox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Reusable components are in `./src/components`\n- Put into shared components only the components that are already used in 2 or more tools.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata (YAML Frontmatter)\nDESCRIPTION: YAML frontmatter block defining metadata for the MDX documentation page. It includes the page title, a brief description, the last updated date, authors, and an icon identifier ('Terminal'). This metadata is typically used by static site generators or content management systems.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/02-avalanche-starter-kit/03-close-and-reopen-codespace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Close and Reopen Codespace\ndescription: Environment Setup\nupdated: 2024-05-31\nauthors: [martineckardt]\nicon: Terminal\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Keystore User Response - AvalancheGo API - JSON\nDESCRIPTION: This JSON snippet shows the successful result of the keystore.importUser method, returning an empty result object inside the standard JSON-RPC wrapper. This indicates the import completed without issues. Only the id field and an empty result object are present.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ConvertToL1 Component in TypeScript React\nDESCRIPTION: This code snippet imports necessary components for the Subnet to L1 conversion tool. It includes a ToolboxMdxWrapper and the ConvertToL1 component, which are likely custom React components for handling the conversion process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/07-convert-subnet-l1.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport ConvertToL1 from \"../../../../toolbox/src/toolbox/L1/ConvertToL1.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Unsigned Add Permissionless Validator TX Byte Representation in Avalanche\nDESCRIPTION: A complete byte-by-byte representation of an unsigned add permissionless validator transaction. This example combines several components including BaseTx, Validator information, SubnetID, Signer, StakeOuts, reward ownership information, and delegation shares.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx       <- 0x0000001a00003039e902a9a86640bfdb1cd0e36c0cc982b83e5765fad5f6bbe6abdcce7b5ae7d7c700000000000000014a177205df5c29929d06db9d941f83d5ea985de302015e99252d16469a6610db000000003d0ad12b8ee8928edf248ca91ca55600fb383f07c32bff1d6dec472b25cf59a700000005000001d1a94a2000000000010000000000000000\n    Validator    <- 0x5fa29ed4356903dac2364713c60f57d8472c7dda000000006397616e0000000063beee6e000001d1a94a2000\n    SubnetID     <- 0xf3086d7bfc35be1c68db664ba9ce61a2060126b0d6b4bfb09fd7a5fb7678cada\n    Signer       <- 0x0000001ca5af179e4188583893c2b99e1a8be27d90a9213cfbff1d75b74fe2bc9f3b072c2ded0863a9d9acd9033f223295810e429238e28d3c9b7f7212b63d746b2ae73a54fe08a3de61b132f2f89e9eeff97d4d7ca3a3c88986aa855cd36296fcfe8f02162d0258be494d267d4c5798bc081ab602ded90b0fc16d8a035e68ff5294794cb63ff1ee068fbfc2b4c8cd2d08ebf297\n    StakeOuts    <- 0x000000013d0ad12b8ee8928edf248ca91ca55600fb383f07c32bff1d6dec472b25cf59a700000007000001d1a94a20000000000000000000000000010000000133eeffc64785cf9d80e7731d9f31f67bd03c5cf0\n    ValidatorRewardsOwner  <- 0x0000000b0000000000000000000000010000000172f3eb9aeaf8283011ce6e437fdecd65eace8f52\n    DelegatorRewardsOwner  <- 0x0000000b0000000000000000000000010000000172f3eb9aeaf8283011ce6e437fdecd65eace8f52\n    DelegationShares       <- 0x00004e20\n]\n=\n[\n    // BaseTx\n    0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x30, 0x39,\n    0xe9, 0x02, 0xa9, 0xa8, 0x66, 0x40, 0xbf, 0xdb,\n    0x1c, 0xd0, 0xe3, 0x6c, 0x0c, 0xc9, 0x82, 0xb8,\n    0x3e, 0x57, 0x65, 0xfa, 0xd5, 0xf6, 0xbb, 0xe6,\n    0xab, 0xdc, 0xce, 0x7b, 0x5a, 0xe7, 0xd7, 0xc7,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x4a, 0x17, 0x72, 0x05, 0xdf, 0x5c, 0x29, 0x92,\n    0x9d, 0x06, 0xdb, 0x9d, 0x94, 0x1f, 0x83, 0xd5,\n    0xea, 0x98, 0x5d, 0xe3, 0x02, 0x01, 0x5e, 0x99,\n    0x25, 0x2d, 0x16, 0x46, 0x9a, 0x66, 0x10, 0xdb,\n    0x00, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0xd1, 0x2b,\n    0x8e, 0xe8, 0x92, 0x8e, 0xdf, 0x24, 0x8c, 0xa9,\n    0x1c, 0xa5, 0x56, 0x00, 0xfb, 0x38, 0x3f, 0x07,\n    0xc3, 0x2b, 0xff, 0x1d, 0x6d, 0xec, 0x47, 0x2b,\n    0x25, 0xcf, 0x59, 0xa7, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Validator\n    // NodeID\n    0x5f, 0xa2, 0x9e, 0xd4, 0x35, 0x69, 0x03, 0xda,\n    0xc2, 0x36, 0x47, 0x13, 0xc6, 0x0f, 0x57, 0xd8,\n    0x47, 0x2c, 0x7d, 0xda, 0x\n    // Start time\n    0x00, 0x00, 0x00, 0x00, 0x63, 0x97, 0x61, 0x6e,\n    // End time\n    0x00, 0x00, 0x00, 0x00, 0x63, 0xbe, 0xee, 0x6e,\n    // Weight\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    // SubnetID\n    0xf3, 0x08, 0x6d, 0x7b, 0xfc, 0x35, 0xbe, 0x1c,\n    0x68, 0xdb, 0x66, 0x4b, 0xa9, 0xce, 0x61, 0xa2,\n    0x06, 0x01, 0x26, 0xb0, 0xd6, 0xb4, 0xbf, 0xb0,\n    0x9f, 0xd7, 0xa5, 0xfb, 0x76, 0x78, 0xca, 0xda,\n    // Signer\n    // TypeID\n    0x00, 0x00, 0x00, 0x1c,\n    // Pub key\n    0xa5, 0xaf, 0x17, 0x9e, 0x41, 0x88, 0x58, 0x38,\n    0x93, 0xc2, 0xb9, 0x9e, 0x1a, 0x8b, 0xe2, 0x7d,\n    0x90, 0xa9, 0x21, 0x3c, 0xfb, 0xff, 0x1d, 0x75,\n    0xb7, 0x4f, 0xe2, 0xbc, 0x9f, 0x3b, 0x07, 0x2c,\n    0x2d, 0xed, 0x08, 0x63, 0xa9, 0xd9, 0xac, 0xd9,\n    0x03, 0x3f, 0x22, 0x32, 0x95, 0x81, 0x0e, 0x42,\n    // Sig\n    0x92, 0x38, 0xe2, 0x8d, 0x3c, 0x9b, 0x7f, 0x72,\n    0x12, 0xb6, 0x3d, 0x74, 0x6b, 0x2a, 0xe7, 0x3a,\n    0x54, 0xfe, 0x08, 0xa3, 0xde, 0x61, 0xb1, 0x32,\n    0xf2, 0xf8, 0x9e, 0x9e, 0xef, 0xf9, 0x7d, 0x4d,\n    0x7c, 0xa3, 0xa3, 0xc8, 0x89, 0x86, 0xaa, 0x85,\n    0x5c, 0xd3, 0x62, 0x96, 0xfc, 0xfe, 0x8f, 0x02,\n    0x16, 0x2d, 0x02, 0x58, 0xbe, 0x49, 0x4d, 0x26,\n    0x7d, 0x4c, 0x57, 0x98, 0xbc, 0x08, 0x1a, 0xb6,\n    0x02, 0xde, 0xd9, 0x0b, 0x0f, 0xc1, 0x6d, 0x8a,\n    0x03, 0x5e, 0x68, 0xff, 0x52, 0x94, 0x79, 0x4c,\n    0xb6, 0x3f, 0xf1, 0xee, 0x06, 0x8f, 0xbf, 0xc2,\n    0xb4, 0xc8, 0xcd, 0x2d, 0x08, 0xeb, 0xf2, 0x97,\n    // Stake outs\n    // Num stake outs\n    0x00, 0x00, 0x00, 0x01,\n    // AssetID\n    0x3d, 0x0a, 0xd1, 0x2b, 0x8e, 0xe8, 0x92, 0x8e,\n    0xdf, 0x24, 0x8c, 0xa9, 0x1c, 0xa5, 0x56, 0x00,\n    0xfb, 0x38, 0x3f, 0x07, 0xc3, 0x2b, 0xff, 0x1d,\n    0x6d, 0xec, 0x47, 0x2b, 0x25, 0xcf, 0x59, 0xa7,\n    // Output\n    // typeID\n    0x00, 0x00, 0x00, 0x07,\n    // Amount\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    // Locktime\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // Threshold\n    0x00, 0x00, 0x00, 0x01,\n    // Num addrs\n    0x00, 0x00, 0x00, 0x01,\n    // Addr 0\n    0x33, 0xee, 0xff, 0xc6, 0x47, 0x85, 0xcf, 0x9d,\n    0x80, 0xe7, 0x73, 0x1d, 0x9f, 0x31, 0xf6, 0x7b,\n    0xd0, 0x3c, 0x5c, 0xf0,\n    // Validator rewards owner\n    // TypeID\n    0x00, 0x00, 0x00, 0x0b,\n    // Locktime\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // Threshold\n    0x00, 0x00, 0x00, 0x01,\n    // Num addrs\n    0x00, 0x00, 0x00, 0x01,\n    // Addr 0\n    0x72, 0xf3, 0xeb, 0x9a, 0xea, 0xf8, 0x28, 0x30,\n    0x11, 0xce, 0x6e, 0x43, 0x7f, 0xde, 0xcd, 0x65,\n    0xea, 0xce, 0x8f, 0x52,\n    // Delegator rewards owner\n    // TypeID\n    0x00, 0x00, 0x00, 0x0b,\n    // Locktime\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // Threshold\n    0x00, 0x00, 0x00, 0x01,\n    // Num addrs\n    0x00, 0x00, 0x00, 0x01,\n    // Addr 0\n    0xb2, 0xb9, 0x13, 0x13, 0xac, 0x48, 0x7c, 0x22,\n    0x24, 0x45, 0x25, 0x4e, 0x26, 0xcd, 0x02, 0x6d,\n    0x21, 0xf6, 0xf4, 0x40,\n    // Delegation shares\n    0x00, 0x00, 0x4e, 0x20,\n]\n```\n\n----------------------------------------\n\nTITLE: Proto SECP256K1 Transfer Input Specification in Coreth\nDESCRIPTION: Protocol buffer message definition for a SECP256K1TransferInput in Coreth. Specifies fields for type ID (4 bytes), amount (8 bytes), and a repeated field for address indices with variable size.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nmessage SECP256K1TransferInput {\n    uint32 typeID = 1;                   // 04 bytes\n    uint64 amount = 2;                   // 08 bytes\n    repeated uint32 address_indices = 3; // 04 bytes + 04 bytes * len(address_indices)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SECP256K1 Mint Output Structure in Text\nDESCRIPTION: Specifies the structure of a SECP256K1 Mint output using a Gantt-style diagram. It shows the byte layout for TypeID, Locktime, Threshold, and Addresses fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n+-----------+------------+--------------------------------+\n| type_id   : int        |                       4 bytes  |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                       8 bytes  |\n+-----------+------------+--------------------------------+\n| threshold : int        |                       4 bytes  |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 20 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Storing Token Balances and Ownership for ERC-20 in Solidity\nDESCRIPTION: This snippet demonstrates the standard mapping used in ERC-20 tokens to assign balances to addresses. It utilizes a simple Solidity mapping from address to uint, which allows efficient lookup and modification of each account's fungible token holdings. It requires no additional dependencies beyond Solidity and is typically placed as a state variable in ERC-20 or similar contracts.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/08-erc721-smart-contracts/01-erc721-intro.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nmapping(address => uint) balances;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subnet Details by ID in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint fetches details of a specific subnet in the Avalanche mainnet. It requires the subnet ID as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/subnets/{subnetId} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Starting the Avalanche Relayer\nDESCRIPTION: This command starts the Relayer execution on the local Avalanche network, using the latest AWM-Relayer version.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer start --local\n```\n\n----------------------------------------\n\nTITLE: Flags for Avalanche Subnet Import Command\nDESCRIPTION: Available flags for the subnet import command, including help, config file location, log level setting, and update check options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_141\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for import\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Using Gallery Component to Show Core Wallet Import Steps (2/2) in JSX\nDESCRIPTION: Similar to the previous snippet, this JSX code uses the `Gallery` component to show two more images related to the Core wallet private key import process. These images (`import-account.png` and `account-advanced-options.png`) demonstrate entering the private key and viewing account details/options after import. It relies on the `Gallery` component and valid image paths.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/import-ewoq-account.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Gallery url1=\"/common-images/core-wallet/import-account.png\" url2=\"/common-images/core-wallet/account-advanced-options.png\" />\n```\n\n----------------------------------------\n\nTITLE: Starting the Avalanche Connector Example\nDESCRIPTION: Commands to navigate to and start the example connector project for Core wallet integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/add-network-programmatically.mdx#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\ncd packages/avalanche-connector-example\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Pausing Node in Bash\nDESCRIPTION: Shows how to pause a specific node in the network using the ANR control command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control pause-node node5\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Border to TokenIconWithChain in React (TSX)\nDESCRIPTION: This snippet demonstrates how to apply custom border and rounded styling to the TokenIconWithChain using the className prop with Tailwind CSS classes. The chain_id and address props specify the asset, while the border and background settings provide visual distinction for the icon. Tailwind CSS must be integrated into the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon-with-chain.mdx#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<TokenIconWithChain \n  chain_id={43114}\n  address=\"0x1234567890123456789012345678901234567890\"\n  className=\"border-2 border-gray-200 rounded-full\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Opening Relayer Log File\nDESCRIPTION: Command to open the JSON log file directly using the code editor.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/06-analyze-relayer-logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/.avalanche-cli/runs/awm-relayer.log\n```\n\n----------------------------------------\n\nTITLE: Adding Avalanche Network to MetaMask\nDESCRIPTION: Function to programmatically add the Avalanche network to MetaMask using the wallet_addEthereumChain method via web3 provider.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/add-network-programmatically.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfunction addAvalancheNetwork() {\n  injected.getProvider().then((provider) => {\n    provider\n      .request({\n        method: \"wallet_addEthereumChain\",\n        params: [AVALANCHE_MAINNET_PARAMS],\n      })\n      .catch((error: any) => {\n        console.log(error);\n      });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping the Local Avalanche Network using Bash\nDESCRIPTION: This command uses the Avalanche-CLI tool to stop the currently running local Avalanche network. This is a necessary first step before initiating a VM upgrade for a deployed Avalanche L1.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-virtual-machine.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche network stop\n```\n\n----------------------------------------\n\nTITLE: Sending ICM Messages Between Subnets\nDESCRIPTION: This command sends and waits for reception of an ICM message between two subnets. It includes options for specifying RPC endpoints, message details, and key management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_165\n\nLANGUAGE: bash\nCODE:\n```\navalanche teleporter sendMsg [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Unzipping Avalanche Binary for MacOS\nDESCRIPTION: Command to unzip the downloaded Avalanche binary file for MacOS.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nunzip avalanchego-macos-<VERSION>.zip\n```\n\n----------------------------------------\n\nTITLE: Warp Messenger Interface Declaration\nDESCRIPTION: Declaration of the Warp Messenger interface used for cross-chain communication between C-Chain and P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nIWarpMessenger public constant WARP_MESSENGER =\n    IWarpMessenger(0x0200000000000000000000000000000000000005);\n```\n\n----------------------------------------\n\nTITLE: Removing Subnet Validator with Avalanche CLI\nDESCRIPTION: Command to remove a whitelisted subnet network validator from validating a deployed Blockchain. It requires the validator's NodeID and offers various flags for configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_152\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet removeValidator [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Export Address Environment Variable\nDESCRIPTION: Sets the newly created address as an environment variable for subsequent commands\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/03-transfer-native-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport MYADDRESS=0x...\n```\n\n----------------------------------------\n\nTITLE: Token Transferrer Deploy Configuration Flags\nDESCRIPTION: Available configuration flags for the tokenTransferrer deploy command, including options for home/remote chain setup, key configuration, and network selection.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\n--c-chain-home set               the Transferrer's Home Chain into C-Chain\n--c-chain-remote set             the Transferrer's Remote Chain into C-Chain\n--cluster string                 operate on the given cluster\n--deploy-erc20-home string       deploy a Transferrer Home for the given Chain's ERC20 Token\n--deploy-native-home deploy      a Transferrer Home for the Chain's Native Token\n--deploy-native-remote deploy    a Transferrer Remote for the Chain's Native Token\n--devnet operate                 on a devnet network\n--endpoint string                use the given endpoint for network operations\n-f, --fuji testnet               operate on fuji (alias to testnet\n-h, --help help                  for deploy\n--home-blockchain string         set the Transferrer's Home Chain into the given CLI blockchain\n--home-genesis-key use           genesis allocated key to deploy Transferrer Home\n--home-key string                CLI stored key to use to deploy Transferrer Home\n--home-private-key string        private key to use to deploy Transferrer Home\n--home-rpc string                use the given RPC URL to connect to the home blockchain\n-l, --local operate              on a local network\n--remote-blockchain string       set the Transferrer's Remote Chain into the given CLI blockchain\n--remote-genesis-key use         genesis allocated key to deploy Transferrer Remote\n--remote-key string              CLI stored key to use to deploy Transferrer Remote\n--remote-private-key string      private key to use to deploy Transferrer Remote\n--remote-rpc string              use the given RPC URL to connect to the remote blockchain\n--remote-token-decimals uint8    use the given number of token decimals for the Transferrer Remote [defaults to token home's decimals (18 for a new wrapped native home token)]\n--remove-minter-admin remove     the native minter precompile admin found on remote blockchain genesis\n-t, --testnet fuji               operate on testnet (alias to fuji)\n--use-home string                use the given Transferrer's Home Address\n--version string                 tag/branch/commit of Avalanche Interchain Token Transfer (ICTT) to be used (defaults to main branch)\n--config string                  config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string               log level for the application (default \"ERROR\")\n--skip-update-check skip         check for new versions\n```\n\n----------------------------------------\n\nTITLE: Checking Node Bootstrap Status\nDESCRIPTION: API call to check if the AvalancheGo node has finished bootstrapping\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"X\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Implementing MD5 Precompile Interface in Solidity\nDESCRIPTION: The solution for creating an MD5 hash function interface that takes a string value as input and returns a 16-byte hash (bytes16 instead of bytes32 for SHA-256).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IMD5 {\n    function hashWithMD5(string memory value) external view returns (bytes16 hash);\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Access to Avalanche Cluster Nodes\nDESCRIPTION: This command executes specified commands over SSH on nodes in the cluster. Without a command, it prints the SSH command for connection. It can target an entire cluster or individual nodes and supports parallel execution.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_113\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for ssh\n--parallel run              ssh command on all nodes in parallel\n--with-loadtest include     loadtest node for ssh cluster operations\n--with-monitor include      monitoring node for ssh cluster operations\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorized Subscriptions for CrossChainVRFWrapper\nDESCRIPTION: This command adds an authorized address with a specific subscription ID to the CrossChainVRFWrapper contract, allowing it to request random words. It uses the cast send command to interact with the contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/05-deploy-vrf-wrapper.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> $VRF_WRAPPER \"addAuthorizedAddress(address caller, uint256 subscriptionId)\" <CALLER_ADDRESS> <SUBSCRIPTION_ID>\n```\n\n----------------------------------------\n\nTITLE: Importing P-Chain Component in MDX\nDESCRIPTION: MDX import statement for including P-Chain documentation component and quiz integration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/09-avalanche-warp-messaging/02-p-chain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport PChain from \"@/content/common/primary-network/p-chain.mdx\";\n\n<PChain />\n\n<Quiz quizId=\"311\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample Output of AvalancheGo Process Check in Bash\nDESCRIPTION: This snippet shows an example output of the process check command, displaying information about the running AvalancheGo process including its PID, CPU and memory usage, and the command used to start it.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/preparing-environment.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nubuntu  6834  0.0  0.0   2828   676 pts/1    S+   19:54   0:00 grep avalanche\nubuntu  2630 26.1  9.4 2459236 753316 ?      Sl   Dec02 1220:52 /home/ubuntu/build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Exporting Subnet Upgrade File with Avalanche CLI\nDESCRIPTION: Command to export the upgrade bytes file to a specified location on disk. It includes an option to force overwrite existing files.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_156\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet upgrade export [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Running AvalancheGo Node\nDESCRIPTION: Command to start AvalancheGo node with config file and network specification for Fuji testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/avalanche-l1-nodes.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/avalanchego\n./build/avalanchego --config-file ~/.avalanchego/config.json --network-id=fuji\n```\n\n----------------------------------------\n\nTITLE: EVM Input Example with Hexadecimal Representation\nDESCRIPTION: Example of an EVMInput with specific values for address, amount, assetID, and nonce, showing both the logical representation and the corresponding byte-level hexadecimal encoding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/txn-format.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[\n    Address   <- 0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc,\n    Amount    <- 0x00000000001e8480\n    AssetID   <- 0xdbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db\n    Nonce     <- 0x0000000000000000\n]\n=\n[\n    // address:\n    0x8d, 0xb9, 0x7c, 0x7c, 0xec, 0xe2, 0x49, 0xc2,\n    0xb9, 0x8b, 0xdc, 0x02, 0x26, 0xcc, 0x4c, 0x2a,\n    0x57, 0xbf, 0x52, 0xfc,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x84, 0x80,\n    // assetID:\n    0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96,\n    0x85, 0x76, 0x48, 0xb7, 0x2b, 0x77, 0xf9, 0xf8,\n    0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70, 0x4a, 0xf0,\n    0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,\n    // nonce:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for Avalanche Blockchain Setup\nDESCRIPTION: React/MDX import statements for setting up documentation components related to blockchain creation. Imports a custom component for creating a default blockchain and standard MDX components from fumadocs-ui.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/02-avalanche-starter-kit/03-create-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CreateDefaultBlockchain from \"@/content/common/avalanche-starter-kit/create-default-blockchain.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<CreateDefaultBlockchain components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Installing MoonPay React SDK\nDESCRIPTION: NPM installation command for MoonPay's React SDK package.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/moonpay.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @moonpay/moonpay-react-sdk\n```\n\n----------------------------------------\n\nTITLE: Context Provider Example with React Children in TypeScript\nDESCRIPTION: Illustrates using the Identity component to provide address context to className-wrapped child elements. The snippet shows a typical use-case where both Domain and Address components share access to the address value and are visually arranged within a div element. The address property is again statically set for demonstration, and Address is abbreviated.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/identity.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Identity address=\\\"0x1234567890123456789012345678901234567890\\\">\\n  <div>\\n    <p>Domain: <Domain /></p>\\n    <p>Address: <Address abbreviate={true} /></p>\\n  </div>\\n</Identity>\n```\n\n----------------------------------------\n\nTITLE: configure Command Flags - Avalanche Blockchain CLI - Bash\nDESCRIPTION: The snippet enumerates flags available for the 'configure' Bash command, covering file path assignment for chain, subnet, node, and per-node chain configs, as well as configuration and log settings. Usage of these flags ensures that all configuration files required for stable AvalancheGo operation and custom VM or Subnet logic are correctly referenced.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--chain-config string             path to the chain configuration\n-h, --help help                   for configure\n--node-config string              path to avalanchego node configuration\n--per-node-chain-config string    path to per node chain configuration for local network\n--subnet-config string            path to the subnet configuration\n--config string                   config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                log level for the application (default \"ERROR\")\n--skip-update-check skip          check for new versions\n```\n\n----------------------------------------\n\nTITLE: Defining AppRequest Message Structure in Protobuf\nDESCRIPTION: Defines the structure of an AppRequest message, which is a VM-defined request. It includes chain_id, request_id, deadline, and app_bytes fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/avalanche-network-protocol.mdx#2025-04-23_snippet_21\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AppRequest {\n  bytes chain_id = 1;\n  uint32 request_id = 2;\n  uint64 deadline = 3;\n  bytes app_bytes = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Content Modification Function Example\nDESCRIPTION: Example of a modifyContent function implementation that handles file renaming and content transformation with frontmatter metadata.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/editing-guides/remote-github-content-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodifyContent(filename, content) {\n        if (filename.includes(\"README\")) {\n          const updatedContent = replaceRelativeLinks(\n            content,\n            \"https://github.com/ava-labs/avalanchego/tree/master/vms/platformvm/warp/\"\n          );\n          return {\n            filename: \"deep-dive.md\",\n            content: `---\ntags: [Avalanche Warp Messaging, AWM, cross-Avalanche L1 Communication, Cross-Chain Communication]\ndescription: Avalanche Warp Messaging (AWM) provides a primitive for cross-Avalanche L1 communication on the Avalanche Network.\nkeywords: [ docs, documentation, avalanche, awm, cross-Avalanche L1 communication, cross-chain, cross-chain communication ]\nsidebar_label: Deep Dive\nsidebar_position: 1\n---\n\n${updatedContent}`,\n          };\n        }\n        return undefined;\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components and Utilities for React\nDESCRIPTION: Imports the button variants from a UI component library and a utility function for class name management. These are used to style the Telegram community link button.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/intro/course-chat.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { buttonVariants } from '@/components/ui/button';\nimport { cn } from '@/utils/cn';\n```\n\n----------------------------------------\n\nTITLE: SPDX License Declaration\nDESCRIPTION: Example showing the required SPDX license identifier that must be included in Solidity contracts for verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/snowtrace.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: ...\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SignatureSchemes Component in JSX\nDESCRIPTION: This snippet imports the SignatureSchemes component and renders it with default MDX components. It also includes a Quiz component with a specific quiz ID.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/08-securing-cross-chain-communication/02-signature-schemes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SignatureSchemes from \"@/content/common/cryptography/signature-schemes.mdx\"\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<SignatureSchemes components={defaultMdxComponents}/>\n\n<Quiz quizId=\"309\"/>\n```\n\n----------------------------------------\n\nTITLE: Example BLS Signature Output\nDESCRIPTION: An example of a BLS signature created from a private key. This demonstrates the typical length of a single BLS signature before aggregation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-key-aggregation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\na9c400aaf55071eedd5d151932d5cfe847ab3a5ad544521f9a3810ebb59b27c9913c86449405d3dff86c54fcc62ec48a19b182c7c87008619e88e281048f7c58b5c2cb07a1dfcf1a0e43a3678fb9efa04c218140fe5ec02d92c8eb9fbbdf312b\n```\n\n----------------------------------------\n\nTITLE: Setting Teleporter Registry Environment Variable\nDESCRIPTION: Sets the Teleporter Registry address as an environment variable for later use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/04-deploy-remote.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEPORTER_REGISTRY_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: System Update and Reboot\nDESCRIPTION: Commands to update the system packages and perform a reboot\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/amazon-web-services.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update; sudo apt upgrade -y; sudo reboot\n```\n\n----------------------------------------\n\nTITLE: Initiating AVAX Transfer with Avalanche CLI (zsh)\nDESCRIPTION: This command starts the interactive workflow for transferring AVAX tokens using the Avalanche CLI. It requires the Avalanche CLI to be installed and configured with funded keys. The command prompts the user for details like network, source/destination chain, amount, and keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\navalanche key transfer\n```\n\n----------------------------------------\n\nTITLE: Importing Networks Component in MDX\nDESCRIPTION: MDX import statement for a Networks component that explains different Avalanche network types\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/02-avalanche-starter-kit/04-networks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Networks from \"@/content/common/avalanche-starter-kit/networks.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Running the Transaction Details Script in Bash\nDESCRIPTION: This command executes the JavaScript script to fetch and display transaction details for a specified transaction hash on the Avalanche C-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/okxos.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode getTx.js\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Certificate Page Component - React/JSX\nDESCRIPTION: Imports and renders a CertificatePage component from the components/quizzes/certificates directory, passing a courseId prop for the interchain-messaging course.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/certificate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CertificatePage from '@/components/quizzes/certificates';\n\n<CertificatePage courseId=\"interchain-messaging\"/>\n```\n\n----------------------------------------\n\nTITLE: Building Production Assets\nDESCRIPTION: Command to generate static content in the .next directory for server-side rendering using Next.js\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnext build\n```\n\n----------------------------------------\n\nTITLE: Implementing Quiz Components with React/JSX\nDESCRIPTION: A series of Quiz component instances integrated into a learning progress page. Each quiz has a unique identifier and is separated by markdown dividers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/06-quiz-time.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Quiz quizId=\"205\"/>\n---\n<Quiz quizId=\"206\"/>\n---\n<Quiz quizId=\"207\"/>\n---\n<Quiz quizId=\"208\"/>\n---\n<Quiz quizId=\"209\"/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH Connection Instructions for Avalanche Clusters\nDESCRIPTION: Demonstrates how to get SSH connection instructions for all clusters using the 'avalanche node ssh' command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/execute-ssh-commands.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh\nCluster \"<clusterName>\" (Devnet)\n  [i-0cf58a280bf3ef9a1] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem \n  [i-0e2abd71a586e56b4] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem \n  [i-027417a4f2ca0a478] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem \n  [i-0360a867aa295d8a4] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem \n  [i-0759b102acfd5b585] ssh -o IdentitiesOnly=yes -o StrictHostKeyChecking=no [email protected] -i /home/fm/.ssh/fm-us-east-1-avalanche-cli-us-east-1-kp.pem \n```\n\n----------------------------------------\n\nTITLE: Importing Certificate Component in React/JSX\nDESCRIPTION: Imports and renders a certificate generation component for the interchain-token-transfer course completion\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/certificate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CertificatePage from '@/components/quizzes/certificates';\n\n<CertificatePage courseId=\"interchain-token-transfer\"/>\n```\n\n----------------------------------------\n\nTITLE: Importing the Native Minter Precompile Component - Javascript\nDESCRIPTION: This snippet demonstrates how to import a Native Minter component, typically defined in an .mdx or .tsx file, for rendering within the current documentation page. The import path uses aliasing (\"@/content/common/evm-precompiles/native-minter.mdx\") and expects the exported NativeMinter component. There are no required parameters for this import itself, but the component may require props at render-time. The output is a usable React/MDX component reference for later use in the JSX/MDX page.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/07-native-token-minting-rights.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\nimport NativeMinter from \"@/content/common/evm-precompiles/native-minter.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Displaying SSH Warning Message in Bash\nDESCRIPTION: Shows the expected warning message when executing an SSH command on a cluster for the first time.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/execute-ssh-commands.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWarning: Permanently added 'IP' (ED25519) to the list of known hosts.\n```\n\n----------------------------------------\n\nTITLE: X-Chain Transaction Fee Schedule\nDESCRIPTION: A table showing the fixed transaction fees for different operation types on Avalanche's X-Chain. Fees are denominated in AVAX and vary by transaction type with operations like asset creation costing more than standard transfers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/txn-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+----------+---------------------------+--------------------------------+\n| Chain    | Transaction Type          | Mainnet Transaction Fee (AVAX) |\n+----------+---------------------------+--------------------------------+\n| X        | Send                      |                          0.001 |\n+----------+---------------------------+--------------------------------+\n| X        | Create Asset              |                           0.01 |\n+----------+---------------------------+--------------------------------+\n| X        | Mint Asset                |                          0.001 |\n+----------+---------------------------+--------------------------------+\n| X        | Import AVAX               |                          0.001 |\n+----------+---------------------------+--------------------------------+\n| X        | Export AVAX               |                          0.001 |\n+----------+---------------------------+--------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Listing RPCs with cURL\nDESCRIPTION: Illustrates listing RPCs for all blockchains in the network using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/listrpcs'\n```\n\n----------------------------------------\n\nTITLE: Deploying a Named Avalanche Blockchain\nDESCRIPTION: Example command for deploying an Avalanche blockchain named 'myblockchain'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain\n```\n\n----------------------------------------\n\nTITLE: Listing Specific Ledger P-Chain Address using Avalanche CLI\nDESCRIPTION: This command lists the P-Chain address and balance for a specific index (index 0 in this case) associated with a connected Ledger device on the Mainnet. This is used to determine the target address for the transfer.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --mainnet --ledger 0\n```\n\n----------------------------------------\n\nTITLE: Adding Copyright Waiver to ACP in Markdown\nDESCRIPTION: This snippet shows how to include a copyright waiver in an Avalanche Community Proposal using Markdown format. It specifies that the author waives all copyright and related rights for the proposal.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/avalanche-community-proposals.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Copyright\nCopyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for Transaction Ordering Document\nDESCRIPTION: This code snippet defines the frontmatter for a markdown document about transaction ordering through consensus. It includes metadata such as title, description, update date, authors, and icon.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/blockchain-fundamentals/04-tx-ordering-through-consensus/01-tx-ordering-through-consensus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Transaction Ordering through Consensus\ndescription: TBD\nupdated: 2024-05-31\nauthors: [martineckardt]\nicon: Book\n---\n```\n\n----------------------------------------\n\nTITLE: Upgrading Avalanche Node Software Versions\nDESCRIPTION: This command suite allows nodes to update their avalanchego or VM versions. The status after upgrade can be checked with the node status command.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_118\n\nLANGUAGE: bash\nCODE:\n```\navalanche node upgrade [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for upgrade\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Importing UpgradeProxy Component in TypeScript/JSX\nDESCRIPTION: Imports the UpgradeProxy component, which is likely responsible for handling the actual proxy upgrade process for the ValidatorManager contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/02-upgrade-proxy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UpgradeProxy from \"../../../../toolbox/src/toolbox/ValidatorManager/UpgradeProxy.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Installing Transak SDK via NPM\nDESCRIPTION: Command to install the Transak SDK package using npm package manager.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/transak.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @transak/transak-sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing Transak Direct URL Integration in JavaScript\nDESCRIPTION: Creates a URL with required parameters to open Transak's payment gateway in a new window. Configures basic settings like API key, default cryptocurrency, network, and wallet address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/transak.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst transakUrl = new URL('https://global.transak.com/');\ntransakUrl.searchParams.append('apiKey', 'YOUR_API_KEY');\ntransakUrl.searchParams.append('defaultCryptoCurrency', 'AVAX');\ntransakUrl.searchParams.append('network', 'avalanche');\ntransakUrl.searchParams.append('walletAddress', userWalletAddress);\n\nwindow.open(transakUrl.href, '_blank');\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Status Check API Call\nDESCRIPTION: cURL command to check if the Avalanche node has completed bootstrapping by querying the local RPC endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"X\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffers Specification for Unsigned Increase L1 Validator Balance TX\nDESCRIPTION: A Protocol Buffers message definition for the unsigned increase L1 validator balance transaction. It defines the fields and their types in the protobuf format.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_64\n\nLANGUAGE: text\nCODE:\n```\nmessage IncreaseL1ValidatorBalanceTx {\n    BaseTx base_tx = 1;       // size(base_tx)\n    bytes validation_id = 2;  // 32 bytes\n    uint64 balance = 3;       // 8 bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Page Metadata Configuration - Markdown Frontmatter\nDESCRIPTION: Defines metadata for the certificate page including title, last updated date, authors, and icon using markdown frontmatter syntax.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/certificate.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Course Completion Certificate\nupdated: 2024-10-11\nauthors: [owenwahlgren]\nicon: BadgeCheck\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Docusaurus Plugins in JavaScript\nDESCRIPTION: Basic configuration snippet showing how to include remote content plugins in the Docusaurus configuration file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/editing-guides/remote-github-content-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  plugins: [...remoteContent],\n\n```\n\n----------------------------------------\n\nTITLE: Running eRPC Proxy with Docker\nDESCRIPTION: Command to run the eRPC proxy using Docker. This mounts the local configuration file and exposes the necessary ports for accessing the proxy service.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/rpc-providers.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd)/erpc.yaml:/root/erpc.yaml -p 4000:4000 -p 4001:4001 ghcr.io/erpc/erpc:latest\n```\n\n----------------------------------------\n\nTITLE: MoonPay Web SDK Integration\nDESCRIPTION: Detailed Web SDK implementation with configuration options and event handling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/moonpay.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MoonPayWebSdk } from '@moonpay/moonpay-web-sdk';\n\nconst moonpay = new MoonPayWebSdk({\n  flow: 'buy',\n  environment: 'production', // or 'sandbox' for testing\n  variant: 'overlay', // or 'embedded'\n  params: {\n    apiKey: 'YOUR_API_KEY',\n    currencyCode: 'avax',\n    walletAddress: userWalletAddress,\n    baseCurrencyCode: 'usd',\n    baseCurrencyAmount: 100,\n    externalTransactionId: 'YOUR_TRANSACTION_ID', // Optional \n    theme: 'light', // or 'dark'\n    showWalletAddressForm: true,\n    lockAmount: false\n  }\n});\n\n// Open the widget\nmoonpay.show();\n\n// Listen to events\nmoonpay.on('onClose', () => {\n  console.log('Widget closed');\n});\n\nmoonpay.on('onTransactionSuccess', (data) => {\n  console.log('Transaction created:', data);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying C-Chain Address Example in Markdown\nDESCRIPTION: Demonstrates an example of a C-Chain address in Avalanche, which uses the Ethereum hex format. This format is compatible with Ethereum tools and standards.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/01-connect-core.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nExample: `0x1234567890123456789012345678901234567890`\n```\n\n----------------------------------------\n\nTITLE: Executing Token Transfer to Smart Contract\nDESCRIPTION: Command to transfer tokens to the receiver contract by calling the receiveTokens function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/09-transfer-erc20-to-sc.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send $ERC20_RECEIVER_L1 --private-key $PK \"receiveTokens(address,uint256)\" $EWOQ 2ether --rpc-url myblockchain\n```\n\n----------------------------------------\n\nTITLE: Stopping Avalanche Faucet Docker Container\nDESCRIPTION: This command stops the running 'faucet-container' Docker container.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/add-utility/testnet-faucet.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop faucet-container\n```\n\n----------------------------------------\n\nTITLE: Rendering Instructor Profile Grid in JSX\nDESCRIPTION: Creates a responsive grid layout that maps through an array of instructor objects, rendering each instructor's profile with their image, name, title, and social media links. The component uses Tailwind CSS for styling.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/intro/instructors.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div class=\"grid gap-8 mb-6 lg:mb-16 md:grid-cols-3\">\n    { instructors.map(instructor => \n        <div key={instructor.name} class=\"p-5 bg-gray-50 rounded-lg shadow-sm flex flex-col dark:bg-gray-800 dark:border-gray-700\">\n            <a href={instructor.twitter} target='_blank' >\n                <img className=\"w-full aspect-square rounded-lg m-0\" width={100} height={100} src={`/common-images/intro/instructors/${instructor.name.toLowerCase().replaceAll(\" \", \"-\")}.jpeg`} alt=\"\" />\n            </a>\n\n                <h3 class=\"text-l font-bold tracking-tight\">\n                    <a href=\"#\">{instructor.name}</a>\n                </h3>\n                <p class=\"text-sm text-gray-500 dark:text-gray-400 mb-4 grow\">{instructor.title}</p>\n                {/*<p class=\"mt-3 mb-4 font-light text-gray-500 dark:text-gray-400\">TBD</p>*/}\n                <div class=\"flex space-x-4 sm:mt-0\">\n                    <a href={instructor.twitter} target='_blank' class=\"text-gray-500 hover:text-gray-900 dark:hover:text-white\">\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84\" /></svg>\n                    </a>\n\n                    <a href={instructor.linkedin} target='_blank' class=\"text-gray-500 hover:text-gray-900 dark:hover:text-white\">\n\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 30 30\">\n                            <path d=\"M24,4H6C4.895,4,4,4.895,4,6v18c0,1.105,0.895,2,2,2h18c1.105,0,2-0.895,2-2V6C26,4.895,25.105,4,24,4z M10.954,22h-2.95 v-9.492h2.95V22z M9.449,11.151c-0.951,0-1.72-0.771-1.72-1.72c0-0.949,0.77-1.719,1.72-1.719c0.948,0,1.719,0.771,1.719,1.719 C11.168,10.38,10.397,11.151,9.449,11.151z M22.004,22h-2.948v-4.616c0-1.101-0.02-2.517-1.533-2.517 c-1.535,0-1.771,1.199-1.771,2.437V22h-2.948v-9.492h2.83v1.297h0.04c0.394-0.746,1.356-1.533,2.791-1.533 c2.987,0,3.539,1.966,3.539,4.522V22z\"></path>\n                        </svg>\n                    </a>\n\n                    <a href={instructor.github} target='_blank' class=\"text-gray-500 hover:text-gray-900 dark:hover:text-white\">\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clip-rule=\"evenodd\" /></svg>\n                    </a>\n\n                    \n\n                    {/*<a href=\"#\" target='_blank' class=\"text-gray-500 hover:text-gray-900 dark:hover:text-white\">\n                        <svg class=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c5.51 0 10-4.48 10-10S17.51 2 12 2zm6.605 4.61a8.502 8.502 0 011.93 5.314c-.281-.054-3.101-.629-5.943-.271-.065-.141-.12-.293-.184-.445a25.416 25.416 0 00-.564-1.236c3.145-1.28 4.577-3.124 4.761-3.362zM12 3.475c2.17 0 4.154.813 5.662 2.148-.152.216-1.443 1.941-4.48 3.08-1.399-2.57-2.95-4.675-3.189-5A8.687 8.687 0 0112 3.475zm-3.633.803a53.896 53.896 0 013.167 4.935c-3.992 1.063-7.517 1.04-7.896 1.04a8.581 8.581 0 014.729-5.975zM3.453 12.01v-.26c.37.01 4.512.065 8.775-1.215.25.477.477.965.694 1.453-.109.033-.228.065-.336.098-4.404 1.42-6.747 5.303-6.942 5.629a8.522 8.522 0 01-2.19-5.705zM12 20.547a8.482 8.482 0 01-5.239-1.8c.152-.315 1.888-3.656 6.703-5.337.022-.01.033-.01.054-.022a35.318 35.318 0 011.823 6.475 8.4 8.4 0 01-3.341.684zm4.761-1.465c-.086-.52-.542-3.015-1.659-6.084 2.679-.423 5.022.271 5.314.369a8.468 8.468 0 01-3.655 5.715z\" clip-rule=\"evenodd\" /></svg>\n                    </a>*/}\n                </div>\n            </div>\n\n    )}\n    \n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Network Runner Server\nDESCRIPTION: Command to start the Avalanche Network Runner server in listening mode, waiting for API calls. The server is configured with debug logging and specific ports for communication.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/precompile-deployment.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner server \\\n--log-level debug \\\n--port=\":8080\" \\\n--grpc-gateway-port=\":8081\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Validator Removal\nDESCRIPTION: Function to initiate the process of removing a validator from the network. It takes the validation ID as a parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateValidatorRemoval(\n    bytes32 validationID\n) public\n```\n\n----------------------------------------\n\nTITLE: Listing Avalanche Subnet Validators\nDESCRIPTION: This command lists the validators of a blockchain's subnet and provides statistics about them. It includes options for specifying network types and endpoints.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_161\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet validators [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: C-Chain Atomic Transaction Gas Usage Schedule\nDESCRIPTION: A table detailing the gas costs for different components of atomic transactions on the C-Chain. It shows the gas used per byte of an unsigned transaction, per signature, and the base cost for each atomic transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/txn-fees.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+---------------------+-------+\n| Item                : Gas   |\n+---------------------+-------+\n| Unsigned Tx Byte    : 1     |\n+---------------------+-------+\n| Signature           : 1000  |\n+---------------------+-------+\n| Per Atomic Tx       : 10000 |\n+---------------------+-------+\n```\n\n----------------------------------------\n\nTITLE: Transfer Native Token Using Foundry Cast Send\nDESCRIPTION: Command to transfer native tokens from Avalanche L1 to C-Chain using the bridge contract. The command includes parameters for blockchain ID, token addresses, and transfer amount set to 1 ether.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/05-bridge-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK $ERC20_HOME_BRIDGE_L1 \\n\"send((bytes32, address, address, address, uint256, uint256, uint256, address))\" \\n\"(${C_CHAIN_BLOCKCHAIN_ID_HEX}, ${ERC20_TOKEN_REMOTE_C_CHAIN}, ${FUNDED_ADDRESS}, 0x0000000000000000000000000000000000000000, 0, 0, 250000, 0x0000000000000000000000000000000000000000)\"  --value 1ether\n```\n\n----------------------------------------\n\nTITLE: Extracting Subnet-EVM Archive\nDESCRIPTION: Command to extract the downloaded Subnet-EVM tar.gz archive using the tar command. This will unpack the archive contents to the current directory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/upgrade/considerations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar xvf subnet-evm_0.2.9_linux_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Importing Avalanche Node Configuration\nDESCRIPTION: Command to import cluster and node configurations from an exported file. Requires prior whitelisting of SSH public key and IP by cluster owner.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_99\n\nLANGUAGE: bash\nCODE:\n```\navalanche node import [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Precompile-EVM Environment\nDESCRIPTION: Command to build the precompile-evm environment before running tests\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/11-testing-precompile-hardhat.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Balance Keys in Go\nDESCRIPTION: Implements function to generate composite keys for balance storage by combining prefix and address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc BalanceKey(addr codec.Address) (k []byte) {\n\tk = make([]byte, 1+codec.AddressLen+consts.Uint16Len)\n\tk[0] = balancePrefix\n\tcopy(k[1:], addr[:])\n\tbinary.BigEndian.PutUint16(k[1+codec.AddressLen:], BalanceChunks)\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Genesis JSON with Default String Value\nDESCRIPTION: Updated genesis JSON configuration that includes both blockTimestamp and a custom defaultString value.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/10-define-default-values-via-genesis.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"stringStoreConfig\" : {\n    \"blockTimestamp\": 0,\n    \"defaultString\": \"EGS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting Minting Rights to NativeTokenRemote Contract\nDESCRIPTION: Grant minting rights to the NativeTokenRemote contract by interacting with the Native Minter Precompile. This allows the contract to mint native tokens when USDC is transferred from C-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/14-scaling-decimals/02-example.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK 0x0200000000000000000000000000000000000001 \"setEnabled(address)\" $NATIVE_TOKEN_REMOTE_L1\n```\n\n----------------------------------------\n\nTITLE: Pinging the Avalanche Network Runner Server via HTTP\nDESCRIPTION: This curl command sends a ping request to the Avalanche Network Runner server using HTTP.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/ping -d ''\n```\n\n----------------------------------------\n\nTITLE: Avalanche UTXO Gantt Specification\nDESCRIPTION: Byte-level specification for Avalanche UTXOs in Gantt chart format. Shows the structure including codec ID, transaction ID, output index, asset ID, and output object.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_53\n\nLANGUAGE: text\nCODE:\n```\n+--------------+----------+-------------------------+\n| codec_id     : uint16   |                 2 bytes |\n+--------------+----------+-------------------------+\n| tx_id        : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output_index : int      |                 4 bytes |\n+--------------+----------+-------------------------+\n| asset_id     : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output       : Output   |      size(output) bytes |\n+--------------+----------+-------------------------+\n                          | 70 + size(output) bytes |\n                          +-------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing StateKeys for Transfer Action in Go\nDESCRIPTION: Example implementation of StateKeys method for a Transfer action, showing how to specify read/write permissions for balance keys in state storage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/02-actions.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (t *Transfer) StateKeys(actor codec.Address) state.Keys {\n return state.Keys{\n  string(storage.BalanceKey(actor)): state.Read | state.Write,\n  string(storage.BalanceKey(t.To)):  state.All,\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites: AvalancheGo, Network Runner, solc - Bash Shell\nDESCRIPTION: This block installs essential dependencies: clones the AvalancheGo repository, installs Avalanche Network Runner using a remote shell script, and installs the Solidity compiler (solc) globally via npm. Prior requirements are a configured Go environment, Node.js, and npm. After execution, users will have AvalancheGo source code, Avalanche Network Runner, and solc available in their environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/background-requirements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:ava-labs/avalanchego.git\\ncurl -sSfL https://raw.githubusercontent.com/ava-labs/avalanche-network-runner/main/scripts/install.sh | sh -s\\nnpm install -g solc\n```\n\n----------------------------------------\n\nTITLE: Direct Database Copy via SSH\nDESCRIPTION: Command to directly copy the database from one machine to another using SSH and tar.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/backup-restore.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nssh -i /path/to/the/key.pem ubuntu@PUBLICIP 'tar czf - .avalanchego/db' | tar xvzf - -C .\n```\n\n----------------------------------------\n\nTITLE: State Management Guidelines - React/TypeScript\nDESCRIPTION: Guidelines for store creation and state persistence, emphasizing localStorage usage and derived store patterns.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/toolbox/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Create new stores when state shouldn't be shared with toolbox\n- State persists in localStorage except when it doesn't make sense to do so like in the Wallet store\n- Use derived stores to simplify dependencies (see `useViemChainStore` example)\n```\n\n----------------------------------------\n\nTITLE: AvaCloud Data API Response Format\nDESCRIPTION: Example JSON response from the AvaCloud Data API showing ERC-20 token balance information. The response includes token details, pricing, and formatted balance values.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/02-apis-vs-rpc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nextPageToken\": \"<string>\",\n  \"erc20TokenBalances\": [\n    {\n      \"address\": \"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\",\n      \"name\": \"Wrapped AVAX\",\n      \"symbol\": \"WAVAX\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg\",\n      \"ercType\": \"ERC-20\",\n      \"price\": {\n        \"currencyCode\": \"usd\",\n        \"value\": \"42.42\"\n      },\n      \"chainId\": \"43114\",\n      \"balance\": \"2000000000000000000\",\n      \"balanceValue\": {\n        \"currencyCode\": \"usd\",\n        \"value\": \"42.42\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building AvalancheJS from Source\nDESCRIPTION: Commands to build AvalancheJS from the cloned repository using NPM or Yarn.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-js.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Validator Weight in LaTeX\nDESCRIPTION: This LaTeX formula calculates the maximum weight a validator can have, which is used to determine the maximum amount of delegators' stake a validator can receive.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/rewards-formula.mdx#2025-04-23_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nMaxWeight = \\min(Validator.Weight \\times MaxValidatorWeightFactor, MaxValidatorStake)\n```\n\n----------------------------------------\n\nTITLE: Basic TestCalculatorRun Function Implementation in Go\nDESCRIPTION: This snippet shows the basic implementation of TestCalculatorRun that runs through predefined unit tests. It iterates through test cases defined in the tests variable and executes each one.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/10-fuzz-tests.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// TestCalculatorEmptyRun tests the Run function of the precompile contract.\nfunc TestCalculatorRun(t *testing.T) {\n    // Run tests.\n    for name, test := range tests {\n        t.Run(name, func(t *testing.T) {\n            test.Run(t, Module, state.NewTestStateDB(t))\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting AWM Relayer with Avalanche CLI\nDESCRIPTION: This command starts the AWM relayer to facilitate message delivery between local Avalanche L1s.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/02-control-the-avalanche-cli-relayer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer start\n```\n\n----------------------------------------\n\nTITLE: Checking Token Balance on Custom Blockchain using Foundry\nDESCRIPTION: This command uses Foundry's cast call to check the balance of wrapped tokens on the custom Avalanche L1 blockchain. It queries the balanceOf function of the ERC20 token contract for a specific address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/05-transfer-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain $ERC20_TOKEN_REMOTE_L1 \"balanceOf(address)(uint)\" $FUNDED_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Serializing UTXO in Avalanche\nDESCRIPTION: Example of serializing a UTXO (Unspent Transaction Output) in Avalanche, including CodecID, TxID, UTXOIndex, AssetID, and Output. The example shows both a compact representation and a detailed byte-by-byte breakdown.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_55\n\nLANGUAGE: text\nCODE:\n```\n[\n    CodecID   <- 0x0000\n    TxID      <- 0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7\n    UTXOIndex <- 0x00000000\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Output    <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // Codec ID:\n    0x00, 0x00,\n    // txID:\n    0xf9, 0x66, 0x75, 0x0f, 0x43, 0x88, 0x67, 0xc3,\n    0xc9, 0x82, 0x8d, 0xdc, 0xdb, 0xe6, 0x60, 0xe2,\n    0x1c, 0xcd, 0xbb, 0x36, 0xa9, 0x27, 0x69, 0x58,\n    0xf0, 0x11, 0xba, 0x47, 0x2f, 0x75, 0xd4, 0xe7,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x00,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,\n    0x24, 0x25, 0x26, 0x27,\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Blockchain\nDESCRIPTION: Deploy the configured blockchain locally using Avalanche CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/07-build-and-run.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain --local\n```\n\n----------------------------------------\n\nTITLE: Cleaning Local Avalanche Network State\nDESCRIPTION: Command to wipe the Avalanche L1 state, permanently deleting all data from locally deployed Avalanche L1s\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\navalanche network clean\n```\n\n----------------------------------------\n\nTITLE: Configuring AvalancheGo Flags in JSON\nDESCRIPTION: This snippet provides the JSON configuration for AvalancheGo flags. It includes various settings for logging, throttling, consensus, and network parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-level\":\"INFO\",\n  \"log-display-level\":\"INFO\",\n  \"proposervm-use-current-height\":true,\n  \"throttler-inbound-validator-alloc-size\":\"10737418240\",\n  \"throttler-inbound-at-large-alloc-size\":\"10737418240\",\n  \"throttler-inbound-node-max-processing-msgs\":\"1000000\",\n  \"throttler-inbound-node-max-at-large-bytes\":\"10737418240\",\n  \"throttler-inbound-bandwidth-refill-rate\":\"1073741824\",\n  \"throttler-inbound-bandwidth-max-burst-size\":\"1073741824\",\n  \"throttler-inbound-cpu-validator-alloc\":\"100000\",\n  \"throttler-inbound-cpu-max-non-validator-usage\":\"100000\",\n  \"throttler-inbound-cpu-max-non-validator-node-usage\":\"100000\",\n  \"throttler-inbound-disk-validator-alloc\":\"10737418240000\",\n  \"throttler-outbound-validator-alloc-size\":\"10737418240\",\n  \"throttler-outbound-at-large-alloc-size\":\"10737418240\",\n  \"throttler-outbound-node-max-at-large-bytes\":\"10737418240\",\n  \"consensus-on-accept-gossip-validator-size\":\"10\",\n  \"consensus-on-accept-gossip-peer-size\":\"10\",\n  \"network-compression-type\":\"zstd\",\n  \"consensus-app-concurrency\":\"128\",\n  \"profile-continuous-enabled\":true,\n  \"profile-continuous-freq\":\"1m\",\n  \"http-host\":\"\",\n  \"http-allowed-origins\": \"*\",\n  \"http-allowed-hosts\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping AWM Relayer with Avalanche CLI\nDESCRIPTION: This command stops the running AWM relayer that delivers messages between local Avalanche L1s.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/02-control-the-avalanche-cli-relayer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer stop\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Chain ID - Text\nDESCRIPTION: Requests a positive integer as the EVM-style ChainID for the new Avalanche L1. The user must avoid using IDs that collide with major public chains. This prompt requires manual entry and is crucial for chain uniqueness.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n✗ Chain ID: \n\n```\n\n----------------------------------------\n\nTITLE: Managing Local Node Tracking with Avalanche CLI\nDESCRIPTION: This command allows a local node in the cluster to track a specified blockchain. It includes options for specifying avalanchego binary path, version installation, and configuration settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_109\n\nLANGUAGE: bash\nCODE:\n```\navalanche node local track [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--avalanchego-path string                           use this avalanchego binary path\n--custom-avalanchego-version string                 install given avalanchego version on node/s\n-h, --help help                                     for track\n--latest-avalanchego-pre-release-version install    latest avalanchego pre-release version on node/s (default true)\n--latest-avalanchego-version install                latest avalanchego release version on node/s\n--config string                                     config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string                                  log level for the application (default \"ERROR\")\n--skip-update-check skip                            check for new versions\n```\n\n----------------------------------------\n\nTITLE: Successful Transaction Submission Confirmation\nDESCRIPTION: Output showing that a transaction was successfully submitted to the network. It displays the transaction ID which can be used to track the transaction status.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nTransaction successful, transaction ID: K7XNSwcmgjYX7BEdtFB3hEwQc6YFKRq9g7hAUPhW4J5bjhEJG\n```\n\n----------------------------------------\n\nTITLE: MoonPay Webhook Handler Implementation\nDESCRIPTION: Server-side webhook handler example using Express.js for processing MoonPay transaction events.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/moonpay.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\napp.post('/moonpay-webhook', (req, res) => {\n  const event = req.body;\n  \n  if (event.type === 'transaction_complete') {\n    // Handle completed transaction\n  }\n  \n  res.sendStatus(200);\n});\n```\n\n----------------------------------------\n\nTITLE: AVAX Export Key Method Signature\nDESCRIPTION: Method signature for exporting private keys associated with an address. Returns both CB58 encoded and hex formatted private keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_19\n\nLANGUAGE: go\nCODE:\n```\navax.exportKey({\n    username: string,\n    password:string,\n    address:string\n}) -> {privateKey: string}\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry RPC Endpoints for Custom Blockchain\nDESCRIPTION: This snippet shows how to update the foundry.toml file to add RPC endpoints for custom blockchain names. It includes existing endpoints and demonstrates how to add a new one for a custom blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n// [!code word:yourblockchainname]\n[rpc_endpoints]\nlocal-c = \"http://localhost:9650/ext/bc/C/rpc\"\nmyblockchain = \"http://localhost:9650/ext/bc/myblockchain/rpc\"\nyourblockchainname = \"http://localhost:9650/ext/bc/yourblockchainname/rpc\" \nfuji-c = \"https://api.avax-test.network/ext/bc/C/rpc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Avalanche CLI\nDESCRIPTION: Command to customize configuration settings for Avalanche-CLI including cloud access, metrics, and update preferences.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\navalanche config [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing webhooks from AvaCloud API\nDESCRIPTION: This curl command retrieves a list of all webhooks associated with the authenticated user from the AvaCloud API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/webhooks \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Gantt SECP256K1 Credential Specification\nDESCRIPTION: Binary format specification for SECP256K1 credentials in Avalanche, showing the structure and size of the TypeID and signatures array used for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_47\n\nLANGUAGE: text\nCODE:\n```\n+------------------------------+---------------------------------+\n| type_id         : int        |                         4 bytes |\n+-----------------+------------+---------------------------------+\n| signatures      : [][65]byte |  4 + 65 * len(signatures) bytes |\n+-----------------+------------+---------------------------------+\n                               |  8 + 65 * len(signatures) bytes |\n                               +---------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Output with Proto Specification\nDESCRIPTION: Protocol buffer message specification for a Transferable Output, showing the asset_id field as a 32-byte array and the output field containing an Output object.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmessage TransferableOutput {\n    bytes asset_id = 1; // 32 bytes\n    Output output = 2;  // size(output)\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing StakeableLockIn in Avalanche\nDESCRIPTION: Example of serializing a StakeableLockIn structure in Avalanche, which includes TypeID, Locktime, and TransferableIn. The example provides both a compact representation and a detailed byte-level breakdown.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_56\n\nLANGUAGE: text\nCODE:\n```\n[\n    TypeID    <- 0x00000015\n    Locktime  <- 0x000000000000d431\n    TransferableIn <- [\n        f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000100000000,\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x15,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // transferable_in\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Choosing Local Bootstrap Validator - Avalanche CLI - Bash\nDESCRIPTION: Shows the process of enabling the local machine as a bootstrap validator using Avalanche CLI. This step is necessary for Avalanche L1 bootstrapping when not using external validators. The CLI presents an interactive prompt to select 'Yes' or 'No'. Assumes the node is sync'd to Fuji, and interactive selection is required for validator designation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nYou can use your local machine as a bootstrap validator on the blockchain\nThis means that you don't have to to set up a remote server on a cloud service (e.g. AWS / GCP) to be a validator on the blockchain.\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Do you want to use your local machine as a bootstrap validator?:\n  ▸ Yes\n    No\n```\n\n----------------------------------------\n\nTITLE: Backing Up Staking Keys Using SCP in Bash\nDESCRIPTION: This scp command securely copies the staking keys from the Avalanche node to a local machine. It's crucial to replace 'EnterYourAzureIPHere' with the actual IP address of your Azure instance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/microsoft-azure.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nscp -i C:\\Avalanche\\avalanche_key.pem -r ubuntu@EnterYourAzureIPHere:/home/ubuntu/.avalanchego/staking C:\\Avalanche\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Listing Specific Ledger P-Chain Address\nDESCRIPTION: Shows example output from the `avalanche key list --ledger 0` command, displaying the P-Chain address and balance for index 0 of the connected Ledger B on Mainnet. This confirms the target address and its initial balance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n|  KIND  |  NAME   |          CHAIN          |                    ADDRESS                    | BALANCE | NETWORK |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n| ledger | index 0 | P-Chain (Bech32 format) | P-avax1r4aceznjkz8ch4pmpqrmkq4f3sl952mdrdt6xm |       0 | Mainnet |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Adding Control Keys for Multisig Setup\nDESCRIPTION: Example of adding multiple P-Chain addresses as control keys for the multisig setup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n✔ Custom list\n✔ Add\nEnter P-Chain address (Example: P-...): P-avax1wryu62weky9qjlp40cpmnqf6ml2hytnagj5q28\n✔ Add\nEnter P-Chain address (Example: P-...): P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\n✔ Add\nEnter P-Chain address (Example: P-...): P-avax12gcy0xl0al6gcjrt0395xqlcuq078ml93wl5h8\n✔ Add\nEnter P-Chain address (Example: P-...): P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\n✔ Add\nEnter P-Chain address (Example: P-...): P-avax1g4eryh40dtcsltmxn9zk925ny07gdq2xyjtf4g\n✔ Done\nYour Avalanche L1's control keys: [P-avax1wryu62weky9qjlp40cpmnqf6ml2hytnagj5q28 P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5 P-avax12gcy0xl0al6gcjrt0395xqlcuq078ml93wl5h8 P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af P-avax1g4eryh40dtcsltmxn9zk925ny07gdq2xyjtf4g]\n```\n\n----------------------------------------\n\nTITLE: Embedding Transaction Fee Chart with iframe in HTML\nDESCRIPTION: This code embeds an iframe displaying a chart of the 7-day average transaction fees on Ethereum from theblock.co data visualization service.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/multi-chain-architecture/transaction-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"100%\" height=\"420\" style={{border: 0}} src=\"https://www.theblock.co/data/on-chain-metrics/ethereum/average-transaction-fee-on-ethereum/embed\" title=\"Average Transaction Fee on Ethereum (7DMA)\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Defining Avalanche L1 Chain Configuration\nDESCRIPTION: TypeScript code defining the Echo L1 chain configuration with chain ID, currency details and RPC endpoints\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/privy.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const echo = defineChain({\n  id: 173750,\n  name: 'Echo L1',\n  network: 'echo',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ech',\n    symbol: 'ECH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://subnets.avax.network/echo/testnet/rpc']\n    },\n  },\n  blockExplorers: {\n    default: {name: 'Explorer', url: 'https://subnets-test.avax.network/echo'},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Transaction Signer\nDESCRIPTION: Demonstrates how to change the transaction signer to use a different account for contract interactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/hardhat.mdx#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nlet signer1 = await ethers.provider.getSigner(1)\nlet contractAsSigner1 = coin.connect(signer1)\n```\n\n----------------------------------------\n\nTITLE: Byte-Level Example of Unsigned Add Avalanche L1 Validator TX\nDESCRIPTION: A detailed example showing the binary representation of an add validator transaction, broken down by components with each field's hexadecimal value and the corresponding bytes in the final transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n[\n    BaseTx       <- 0x0000000d000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    NodeID       <- 0xe9094f73698002fd52c90819b457b9fbc866ab80\n    StarTime     <- 0x000000005f21f31d\n    EndTime      <- 0x000000005f497dc6\n    Weight       <- 0x000000000000d431\n    SubnetID     <- 0x58b1092871db85bc752742054e2e8be0adf8166ec1f0f0769f4779f14c71d7eb\n    SubnetAuth TypeID   <- 0x0000000a\n    SubnetAuth   <- 0x00000000\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x0d,\n    0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    0x00, 0x00, 0x00, 0x01,\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Node ID\n    0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,\n    0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,\n    0xc8, 0x66, 0xab, 0x80,\n    // StartTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,\n    // EndTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,\n    // Weight\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // SubnetID\n    0x58, 0xb1, 0x09, 0x28, 0x71, 0xdb, 0x85, 0xbc,\n    0x75, 0x27, 0x42, 0x05, 0x4e, 0x2e, 0x8b, 0xe0,\n    0xad, 0xf8, 0x16, 0x6e, 0xc1, 0xf0, 0xf0, 0x76,\n    0x9f, 0x47, 0x79, 0xf1, 0x4c, 0x71, 0xd7, 0xeb,\n    // SubnetAuth\n    // SubnetAuth TypeID\n    0x00, 0x00, 0x00, 0x0a,\n    // SigIndices length\n    0x00, 0x00, 0x00, 0x01,\n    // SigIndices\n    0x00, 0x00, 0x00, 0x00,\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering ImportEWOQAccount Component - MDX/JSX\nDESCRIPTION: This snippet renders the 'ImportEWOQAccount' component within the current page. It invokes the imported component, which encapsulates the UI and logic for importing the EWOQ account's private keys. The usage is typical in MDX/React environments, where such components are used to combine documentation and interactive content. Requires the component to be previously imported and exported as a valid functional component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/05-add-ewoq-account.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<ImportEWOQAccount/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Ledger Address for Mainnet Deployment\nDESCRIPTION: Output showing the first Mainnet Ledger address recognized by the CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nLedger address: P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\n```\n\n----------------------------------------\n\nTITLE: Network Selection Command Output\nDESCRIPTION: Interactive CLI output showing network selection options for Avalanche deployment, including Local Network, Devnet, Etna Devnet, Fuji Testnet, and Mainnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n? Choose a network for the operation: \n  ▸ Local Network\n    Devnet\n    Etna Devnet\n    Fuji Testnet\n    Mainnet\n```\n\n----------------------------------------\n\nTITLE: Whitelisting in Avalanche CLI\nDESCRIPTION: This snippet demonstrates the usage and flags for the 'avalanche node whitelist' command, which provides tools for granting access to the cluster by whitelisting IP addresses and SSH public keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_122\n\nLANGUAGE: bash\nCODE:\n```\navalanche node whitelist [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-y, --current-ip whitelist    current host ip\n-h, --help help               for whitelist\n--ip string                   ip address to whitelist\n--ssh string                  ssh public key to whitelist\n--config string               config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string            log level for the application (default \"ERROR\")\n--skip-update-check skip      check for new versions\n```\n\n----------------------------------------\n\nTITLE: Installing MoonPay Web SDK\nDESCRIPTION: NPM installation command for MoonPay's web SDK package.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/moonpay.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @moonpay/moonpay-web-sdk\n```\n\n----------------------------------------\n\nTITLE: Viewing Deployment Results - Avalanche CLI - Bash\nDESCRIPTION: Displays the CLI output table showing critical deployment results after an Avalanche L1 is created. This output includes the Chain Name, Subnet ID, VM ID, Blockchain ID, and P-Chain Transaction ID. It is provided automatically by the CLI upon successful deployment, detailing identifiers the user may use in Explorer tools. Users should save or reference this data for subsequent network operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n+--------------------+----------------------------------------------------+\n| DEPLOYMENT RESULTS |                                                    |\n+--------------------+----------------------------------------------------+\n| Chain Name         | testblockchain                                     |\n+--------------------+----------------------------------------------------+\n| Subnet ID          | 2cNuyBhvAd4jH5bFSGndezhB66Z4UHYAsLCMGoCpvhXVhrZfgd |\n+--------------------+----------------------------------------------------+\n| VM ID              | qcvkEX1zWSz7PtGd7CKvPRBqLVTzA7qyMPvkh5NMDWkuhrcCu  |\n+--------------------+----------------------------------------------------+\n| Blockchain ID      | 2U7vNdB78xTiN6QtZ9aetfKoGtQhfeEPQG6QZC8bpq8QMf4cDx |\n+--------------------+                                                    +\n| P-Chain TXID       |                                                    |\n+--------------------+----------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Deprecated AVAX Export Method Using avax.exportAVAX API\nDESCRIPTION: Example of a cURL request to the deprecated avax.exportAVAX API which sends AVAX from C-Chain to X-Chain or P-Chain. The avax.export method is now recommended instead.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avax.exportAVAX\",\n    \"params\" :{\n        \"from\": [\"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\"],\n        \"to\":\"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5\",\n        \"amount\": 500,\n        \"changeAddr\": \"0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\",\n        \"username\":\"myUsername\",\n        \"password\":\"myPassword\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/bc/C/avax\n```\n\n----------------------------------------\n\nTITLE: Flags for the upgrade generate Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Lists the command-line flags for the `avalanche blockchain upgrade generate` subcommand. These are primarily common flags for accessing help, specifying a configuration file, setting the log level, and skipping application update checks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for generate\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Balances in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint fetches balances in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/11111111111111111111111111111111LpoYY/balances \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Checking Local Avalanche Node Status\nDESCRIPTION: The local status command retrieves the status of a local node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_107\n\nLANGUAGE: bash\nCODE:\n```\navalanche node local status [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Add Permissionless Validator TX Gantt Specification\nDESCRIPTION: Byte layout specification for unsigned add permissionless validator transaction detailing all components including validator details, stake outputs, and reward configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n+---------------+----------------------+------------------------------------------------+\n| base_tx       : BaseTx               |                            size(base_tx) bytes |\n+---------------+----------------------+------------------------------------------------+\n| validator     : Validator            |                                       44 bytes |\n+---------------+----------------------+------------------------------------------------+\n| subnet_id     : [32]byte             |                                       32 bytes |\n+---------------+----------------------+------------------------------------------------+\n| signer        : Signer               |                                      144 bytes |\n+---------------+----------------------+------------------------------------------------+\n| stake_outs    : []TransferOut        |                     4 + size(stake_outs) bytes |\n+---------------+----------------------+------------------------------------------------+\n| validator_rewards_owner : SECP256K1OutputOwners | size(validator_rewards_owner) bytes |\n+---------------+----------------------+------------------------------------------------+\n| delegator_rewards_owner : SECP256K1OutputOwners | size(delegator_rewards_owner) bytes |\n+---------------+----------------------+------------------------------------------------+\n| delegation_shares   : uint32         |                                        4 bytes |\n+---------------+----------------------+------------------------------------------------+\n| 232 + size(base_tx) + size(stake_outs) +                                              |\n| size(validator_rewards_owner) + size(delegator_rewards_owner) bytes                   |\n+---------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Extending Base Token Interface for ICTT Compatibility in TypeScript\nDESCRIPTION: This interface extends BaseToken with additional properties to support ICTT (cross-chain transfer) tokens. It introduces fields like supports_ictt, transferer, is_transferer, and mirrors, including a nested structure for mirror token data. Use this interface for tokens requiring cross-chain capabilities in BuilderKit; all fields relating to ICTT integration and mirror configurations are required for proper setup. Inputs must satisfy both the base and extended requirements, and the mirrors array must contain at least one configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICTTToken extends BaseToken {\n  // Whether this token can be used with ICTT\n  supports_ictt: boolean;  \n  \n  // Address of the contract that handles transfers\n  transferer?: string;     \n  \n  // Whether this token instance is a transferer\n  is_transferer?: boolean; \n  \n  // Information about corresponding tokens on other chains\n  mirrors: {\n    // Contract address of the mirrored token\n    address: string;       \n    \n    // Transferer contract on the mirror chain\n    transferer: string;    \n    \n    // Chain ID where the mirror exists\n    chain_id: number;      \n    \n    // Decimal places of the mirrored token\n    decimals: number;      \n    \n    // Whether this is the home/original chain\n    home?: boolean;        \n  }[];\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Avalanche Network\nDESCRIPTION: Command to gracefully stop a running local Avalanche network while preserving state\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\navalanche network stop\n```\n\n----------------------------------------\n\nTITLE: Running AvalancheGo Installer Script\nDESCRIPTION: Command to run the installer script for upgrading an existing AvalancheGo installation\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/upgrade.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh\n```\n\n----------------------------------------\n\nTITLE: Defining AVAX Unit Conversion in Markdown\nDESCRIPTION: This snippet defines the relationship between nAVAX and AVAX units, showing that 1 nAVAX is equal to 0.000000001 AVAX.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/avax-token.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`1 nAVAX` is equal to `0.000000001 AVAX`.\n```\n\n----------------------------------------\n\nTITLE: Rendering CollectConversionSignatures Component in React\nDESCRIPTION: This code snippet demonstrates how to render the CollectConversionSignatures component wrapped in a ToolboxMdxWrapper. This setup is used to display the interface for collecting conversion signatures.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/04-collect-conversion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <CollectConversionSignatures />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Receiver Ledger Index Input\nDESCRIPTION: Shows the interactive prompt where the user inputs the index of the address on the connected Ledger device (Ledger B) that will receive the funds. In this example, index '0' is entered.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n✗ Ledger index to use: 0\n```\n\n----------------------------------------\n\nTITLE: Example Token Logo File Paths\nDESCRIPTION: Examples of file paths for token logos on different blockchain networks including tokens on C-Chain and Fuji.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/asset-requirements.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/tokens/logo/43114/0x1234567890123456789012345678901234567890.png  // Token on C-Chain\n/tokens/logo/43113/0x5678901234567890123456789012345678901234.png  // Token on Fuji\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Metadata with AvaCloud Data API (Bash)\nDESCRIPTION: This curl command demonstrates how to get contract metadata using the AvaCloud Data API. It uses a GET request to the Glacier API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/addresses/{address} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Using the Interchain Relayer command in Avalanche CLI\nDESCRIPTION: Command suite for deploying and configuring ICM relayers, with subcommands for deployment, log viewing, and relayer management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Full Avalanche Blockchain Deployment Output\nDESCRIPTION: Complete CLI output showing the successful deployment of an Avalanche blockchain, including ICM deployment, node configuration, token allocation, and RPC URLs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/create-default-blockchain.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n@martineckardt ➜ /workspaces/avalanche-starter-kit (main) $ avalanche blockchain deploy myblockchain\n✔ Local Network\nDeploying [myblockchain] to Local Network\nBackend controller started, pid: 5317, output at: /home/vscode/.avalanche-cli/runs/server_20240808_164902/avalanche-cli-backend.log\nInstalling avalanchego-v1.11.10...\navalanchego-v1.11.10 installation successful\n\nBooting Network. Wait until healthy...\nNode logs directory: /home/vscode/.avalanche-cli/runs/network_20240808_164903/node<i>/logs\nNetwork ready to use.\n\nDeploying Blockchain. Wait until network acknowledges...\n\nICM Messenger successfully deployed to c-chain (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nICM Registry successfully deployed to c-chain (0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25)\n\nICM Messenger successfully deployed to myblockchain (0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf)\nICM Registry successfully deployed to myblockchain (0x82EeEf8e31D4Bf95916219D7949D66c468Ac0681)\n\nusing awm-relayer version (v1.3.3)\nInstalling AWM-Relayer v1.3.3\nExecuting AWM-Relayer...\n\nBlockchain ready to use\n\n+---------------------------------------------------------------------------------------------------------------+\n|                                                  MYBLOCKCHAIN                                                 |\n+---------------+-----------------------------------------------------------------------------------------------+\n| Name          | myblockchain                                                                                  |\n+---------------+-----------------------------------------------------------------------------------------------+\n| VM ID         | qDNV9vtxZYYNqm7TN1mYBuaaknLdefDbFK8bFmMLTJQJKaWjV                                             |\n+---------------+-----------------------------------------------------------------------------------------------+\n| VM Version    | v0.6.8                                                                                        |\n+---------------+--------------------------+--------------------------------------------------------------------+\n| Local Network | ChainID                  | 9999                                                               |\n|               +--------------------------+--------------------------------------------------------------------+\n|               | SubnetID                 | 26eqgD4Kt1MvTKXC9BDjEwBAfhcBcHCKj2EXjR2UuFpSWoAHhw                 |\n|               +--------------------------+--------------------------------------------------------------------+\n|               | Owners (Threhold=1)      | P-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p                    |\n|               +--------------------------+--------------------------------------------------------------------+\n|               | BlockchainID (CB58)      | 2B7uAsN3XhsjLMrLxbP65QmwiUxyY4Ge5xsReMMPKawABuXW1B                 |\n|               +--------------------------+--------------------------------------------------------------------+\n|               | BlockchainID (HEX)       | 0x9aac23fef6508687ff42bb779b3484a72ced0ac1fb07baefa7d5b6d6fdf9a46e |\n+---------------+--------------------------+--------------------------------------------------------------------+\n\n+-------------------------------------------------------------------------------------------+\n|                                         ICM                                               |\n+---------------+------------------------------+--------------------------------------------+\n| Local Network | ICM Messenger Address |        0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf |\n|               +------------------------------+--------------------------------------------+\n|               | ICM Registry Address  |        0x82EeEf8e31D4Bf95916219D7949D66c468Ac0681 |\n+---------------+------------------------------+--------------------------------------------+\n\n+--------------------------+\n|           TOKEN          |\n+--------------+-----------+\n| Token Name   | TOK Token |\n+--------------+-----------+\n| Token Symbol | TOK       |\n+--------------+-----------+\n\n+------------------------------------------------------------------------------------------------------------------------------------------+\n|                                                         INITIAL TOKEN ALLOCATION                                                         |\n+--------------------------+------------------------------------------------------------------+----------------+---------------------------+\n| DESCRIPTION              | ADDRESS AND PRIVATE KEY                                          | AMOUNT (10^18) | AMOUNT (WEI)              |\n+--------------------------+------------------------------------------------------------------+----------------+---------------------------+\n| Main funded account EWOQ | 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC                       | 1000000        | 1000000000000000000000000 |\n|                          | 56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027 |                |                           |\n+--------------------------+------------------------------------------------------------------+----------------+---------------------------+\n| cli-teleporter-deployer  | 0x9D6D757c9466C2c05aa5e5DDa98e019112a44c59                       | 600            | 600000000000000000000     |\n| Used By ICM              | 86dbf5d3ebd8426f7fac2f83093310da978596290a77eecde31b981bd3089dfd |                |                           |\n+--------------------------+------------------------------------------------------------------+----------------+---------------------------+\n\n+----------------------------------------------------------------------+\n|                      INITIAL PRECOMPILE CONFIGS                      |\n+------------+-----------------+-------------------+-------------------+\n| PRECOMPILE | ADMIN ADDRESSES | MANAGER ADDRESSES | ENABLED ADDRESSES |\n+------------+-----------------+-------------------+-------------------+\n| Warp       | n/a             | n/a               | n/a               |\n+------------+-----------------+-------------------+-------------------+\n\n+---------------------------------------------------------------------------------------------------------------------------------------+\n|                                                         MYBLOCKCHAIN RPC URLS                                                         |\n+-----------+---------------------------------------------------------------------------------------------------------------------------+\n| Localhost | http://127.0.0.1:9650/ext/bc/myblockchain/rpc                                                                             |\n|           +---------------------------------------------------------------------------------------------------------------------------+\n|           | http://127.0.0.1:9650/ext/bc/2B7uAsN3XhsjLMrLxbP65QmwiUxyY4Ge5xsReMMPKawABuXW1B/rpc                                       |\n+-----------+---------------------------------------------------------------------------------------------------------------------------+\n| Codespace | https://humble-tribble-q7qvgwr6j44265v6-9650.app.github.dev/ext/bc/myblockchain/rpc                                       |\n|           +---------------------------------------------------------------------------------------------------------------------------+\n|           | https://humble-tribble-q7qvgwr6j44265v6-9650.app.github.dev/ext/bc/2B7uAsN3XhsjLMrLxbP65QmwiUxyY4Ge5xsReMMPKawABuXW1B/rpc |\n+-----------+---------------------------------------------------------------------------------------------------------------------------+\n\n+----------------------------------------------------------------------------------------------------------------------------------------+\n|                                                                  NODES                                                                 |\n+-------+------------------------------------------+-----------------------+-------------------------------------------------------------+\n| NAME  | NODE ID                                  | LOCALHOST ENDPOINT    | CODESPACE ENDPOINT                                          |\n+-------+------------------------------------------+-----------------------+-------------------------------------------------------------+\n| node1 | NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg | http://127.0.0.1:9650 | https://humble-tribble-q7qvgwr6j44265v6-9650.app.github.dev |\n+-------+------------------------------------------+-----------------------+-------------------------------------------------------------+\n| node2 | NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ | http://127.0.0.1:9652 | https://humble-tribble-q7qvgwr6j44265v6-9652.app.github.dev |\n+-------+------------------------------------------+-----------------------+-------------------------------------------------------------+\n| node3 | NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN | http://127.0.0.1:9654 | https://humble-tribble-q7qvgwr6j44265v6-9654.app.github.dev |\n+-------+------------------------------------------+-----------------------+-------------------------------------------------------------+\n| node4 | NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu | http://127.0.0.1:9656 | https://humble-tribble-q7qvgwr6j44265v6-9656.app.github.dev |\n+-------+------------------------------------------+-----------------------+-------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Initial Warnings in Avalanche-CLI Upgrade Wizard\nDESCRIPTION: This output displays the initial warnings shown by the `avalanche blockchain upgrade generate testblockchain` command's interactive wizard. It highlights the critical nature of network upgrades and the potential risks involved, requiring user confirmation ('Yes') to proceed with the configuration process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade generate testblockchain\nPerforming a network upgrade requires coordinating the upgrade network-wide.\nA network upgrade changes the rule set used to process and verify blocks, such that any node that\nupgrades incorrectly or fails to upgrade by the time that upgrade goes into effect may become\nout of sync with the rest of the network.\n\nAny mistakes in configuring network upgrades or coordinating them on validators may cause the\nnetwork to halt and recovering may be difficult.\nPlease consult\nhttps://build.avax.network/docs/subnets/customize-a-subnet#network-upgrades-enabledisable-precompiles\nfor more information\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Press [Enter] to continue, or abort by choosing 'no':\n  ▸ Yes\n    No\n```\n\n----------------------------------------\n\nTITLE: Managing AvalancheGo Service\nDESCRIPTION: Commands for enabling auto-start and managing the AvalancheGo service\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable avalanchego\nsudo systemctl start avalanchego\nsudo systemctl status avalanchego\n```\n\n----------------------------------------\n\nTITLE: Stopping the Network Using curl HTTP API - Shell/curl\nDESCRIPTION: This snippet shows how to gracefully terminate the Avalanche Network Runner cluster via a curl POST request. It sends an empty JSON payload to the stop endpoint. Requires a running network runner HTTP server accessible at the specified address. This effectively issues a stop command, but may also require manual termination of the RPC server process from the shell.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/stop -d ''\n```\n\n----------------------------------------\n\nTITLE: Listing Historical Rewards in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of historical rewards in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/rewards \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Avalanche Network\nDESCRIPTION: These commands set the RPC URL and a pre-funded private key for interacting with a locally deployed Avalanche network. This setup is intended for local development only.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport RPC_URL=http://localhost:9650/ext/bc/C/rpc\nexport PRIVATE_KEY=56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027\n```\n\n----------------------------------------\n\nTITLE: Upgrading AvalancheGo Node using Installer Script\nDESCRIPTION: This command runs the AvalancheGo installer script, which detects the existing installation and performs an upgrade to the latest version.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/managing-avalanche-go.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Receiver Address Input\nDESCRIPTION: Shows the interactive prompt where the user enters the P-Chain address of the recipient. This is the target address determined earlier (Ledger B, index 0).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n✗ Receiver address: P-avax1r4aceznjkz8ch4pmpqrmkq4f3sl952mdrdt6xm\n```\n\n----------------------------------------\n\nTITLE: Example Token Logo Asset Path\nDESCRIPTION: Provides a concrete example of the expected file path for a token logo image, corresponding to chain ID 43114 and a specific contract address, following the required structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-icon.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n/tokens/logo/43114/0x1234567890123456789012345678901234567890.png\n```\n\n----------------------------------------\n\nTITLE: Retrieving Network Details for Avalanche (Bash)\nDESCRIPTION: This endpoint fetches details about a specific Avalanche network. The network identifier is required as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/{network} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Avalanche Subnet Configure Command\nDESCRIPTION: CLI command for managing various configuration files for AvalancheGo nodes, including subnet-wide configs and chain-specific settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_131\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet configure [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Previewing Configured Admin Addresses in Wizard\nDESCRIPTION: This snippet shows the result of selecting the 'Preview' option in the admin address management menu. The Avalanche-CLI wizard displays the list of addresses entered so far (e.g., 0. 0x..., 1. 0x...), allowing the user to confirm their correctness before proceeding.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n✔ Preview\n0. 0xaaaAbbBBCccCDDddEeEEFFfF1111222233334444\n1. 0x1111222233334444aAaAbbBBCCCCDdDDeEeEffff\nUse the arrow keys to navigate: ↓ ↑ → ← \n? Provide 'adminAddresses':\n  ▸ Add\n    Delete\n    Preview\n    More Info\n↓   Done\n```\n\n----------------------------------------\n\nTITLE: Initial State Gantt Specification\nDESCRIPTION: Binary format specification for Initial State structure showing fx_id and outputs fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n+---------------+----------+-------------------------------+\n| fx_id         : int      |                       4 bytes |\n+---------------+----------+-------------------------------+\n| outputs       : []Output |       4 + size(outputs) bytes |\n+---------------+----------+-------------------------------+\n                           |       8 + size(outputs) bytes |\n                           +-------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Aggregating Signatures using Signature Aggregator in Bash\nDESCRIPTION: This curl command sends a request to the Signature Aggregator server to aggregate signatures from validators for a given message.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/04-register-validators.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8080/aggregate-signatures' \\\n--json '{\"message\": \"<hex encoded unsigned message bytes retrieved from the logs>\"'\n```\n\n----------------------------------------\n\nTITLE: Storing ThirdWeb Client ID in Environment File - Bash\nDESCRIPTION: This snippet shows how to set up the VITE_THIRDWEB_CLIENT_ID environment variable within a .env file in the root project directory. This value is required for authenticating the application with the ThirdWeb SDK and should be obtained from the ThirdWeb dashboard. The exact client ID value must be substituted by the user.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/telegram-miniapps-thirdweb.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_THIRDWEB_CLIENT_ID=...\n```\n\n----------------------------------------\n\nTITLE: Flags for Avalanche Blockchain List (Bash)\nDESCRIPTION: Lists flags for the `avalanche blockchain list` command. The `--deployed` flag retrieves and displays additional details for deployed blockchains, such as VMID, BlockchainID, and SubnetID. Common flags like `--config`, `--log-level`, and `--skip-update-check` are also available.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n--deployed show             additional deploy information\n-h, --help help             for list\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Generating Private Keys from Mnemonic\nDESCRIPTION: Generates both addresses and their corresponding private keys from a mnemonic phrase using the BIP44 derivation path for the first three indices.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/fuji-workflow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst cAddresses: string[] = [];\nconst privateKeys: string[] = [];\nfor (let i: number = 0; i <= 2; i++) {\n  const child: HDNode = hdnode.derive(`m/44'/60'/0'/0/${i}`);\n  keyChain.importKey(child.privateKey);\n  const cchainAddress = ethers.utils.computeAddress(child.privateKey);\n  privateKeys.push(child.privateKey.toString(\"hex\"));\n  cAddresses.push(cchainAddress);\n}\nconsole.log({ cAddresses, privateKeys });\n```\n\n----------------------------------------\n\nTITLE: Sample Test Execution Output\nDESCRIPTION: Example output showing successful execution of StringStore test suite with timing details\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/11-testing-precompile-hardhat.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n  StringStoreTest\n    ✓ Testing get function (4126ms)\n    ✓ Testing get and set function (4070ms)\n\n  2 passing (12s)\n\n  < Exit [It] StringStore - /Users/Rodrigo.Villar/go/src/github.com/ava-labs/precompile-evm/tests/precompile/solidity/suites.go:40 @ 07/19/23 15:37:03.574 (16.134s)\n• [16.134 seconds]\n------------------------------\n[AfterSuite] \n/Users/Rodrigo.Villar/go/pkg/mod/github.com/ava-labs/subnet-evm@v0.5.2/tests/utils/command.go:85\n  > Enter [AfterSuite] TOP-LEVEL - /Users/Rodrigo.Villar/go/pkg/mod/github.com/ava-labs/subnet-evm@v0.5.2/tests/utils/command.go:85 @ 07/19/23 15:37:03.575\n  < Exit [AfterSuite] TOP-LEVEL - /Users/Rodrigo.Villar/go/pkg/mod/github.com/ava-labs/subnet-evm@v0.5.2/tests/utils/command.go:85 @ 07/19/23 15:37:03.575 (0s)\n[AfterSuite] PASSED [0.000 seconds]\n------------------------------\n\nRan 2 of 3 Specs in 50.822 seconds\nSUCCESS! -- 2 Passed | 0 Failed | 0 Pending | 1 Skipped\nPASS\n```\n\n----------------------------------------\n\nTITLE: Receiving Random Words via Cross-Chain Communication in Solidity\nDESCRIPTION: Implementation of receiveTeleporterMessage function that processes incoming random words from Chainlink VRF through cross-chain communication. Includes validation checks and fulfillment logic for the received random numbers.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/04-bring-vrf-to-unsupported-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction receiveTeleporterMessage(\n    bytes32 originChainID,\n    address originSenderAddress,\n    bytes calldata message\n) external {\n    require(originChainID == DATASOURCE_BLOCKCHAIN_ID, \"Invalid originChainID\");\n    require(msg.sender == address(teleporterMessenger), \"Caller is not the TeleporterMessenger\");\n    require(originSenderAddress == vrfRequesterContract, \"Invalid sender\");\n    \n    // Decode the message to get the request ID and random words\n    CrossChainResponse memory response = abi.decode(message, (CrossChainResponse));\n    \n    // Fulfill the request by calling the internal function\n    fulfillRandomWords(response.requestId, response.randomWords);\n}\n\nfunction fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal {\n    // Logic to handle the fulfillment of random words\n    // Implement your custom logic here\n\n    // Emit event for received random words\n    emit RandomWordsReceived(requestId);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Avalanche Postman Environment URL\nDESCRIPTION: The URL to import the Avalanche Postman environment JSON file. This environment contains common variables such as node IP address and Avalanche addresses for use in API queries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-postman/add-postman-collection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://raw.githubusercontent.com/ava-labs/avalanche-postman-collection/master/Example-Avalanche-Environment.postman_environment.json\n```\n\n----------------------------------------\n\nTITLE: Pinging the Avalanche Network Runner Server via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to send a ping request to the server.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner ping \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: Listing UTXOs in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of UTXOs in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/11111111111111111111111111111111LpoYY/utxos \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Using the Avalanche Blockchain Import Command (Bash)\nDESCRIPTION: Shows the basic usage syntax for the `avalanche blockchain import` command in the Avalanche CLI. This command is used to import blockchain configurations, either from a file/repository or from a running public network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain import [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Template for Adding Precompile Tests in Go\nDESCRIPTION: The commented template code from suites.go file that shows how to add a new precompile test. This code needs to be uncommented and customized for the HelloWorld precompile.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/executing-test-cases.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ADD YOUR PRECOMPILE HERE\n/*\nginkgo.It(\"your precompile\", ginkgo.Label(\"Precompile\"), ginkgo.Label(\"YourPrecompile\"), func() {\n  ctx, cancel := context.WithTimeout(context.Background(), time.Minute)\n  defer cancel()\n\n  // Specify the name shared by the genesis file in ./tests/precompile/genesis/{your_precompile}.json\n  // and the test file in ./contracts/tests/{your_precompile}.ts\n  blockchainID := subnetsSuite.GetBlockchainID(\"{your_precompile}\")\n  runDefaultHardhatTests(ctx, blockchainID, \"{your_precompile}\")\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Adding an Enabled Address via Wizard\nDESCRIPTION: This demonstrates adding an address to the 'enabledAddresses' list within the Avalanche-CLI wizard. The user selects 'Add' (after choosing 'Yes' in the previous step) and provides the address (e.g., '0x55554444333322221111eeeeaaaabbbbccccdddd') that will be permitted to issue transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-precompile-config.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n✔ Add\n✔ Add an address: 0x55554444333322221111eeeeaaaabbbbccccdddd█\n```\n\n----------------------------------------\n\nTITLE: Rendering a List of TokenRows in a Flex Layout - React TypeScript\nDESCRIPTION: Shows how TokenRow can be used inside a flex column layout to display multiple tokens with dividers. Demonstrates the use of Tailwind CSS classes and BigNumber objects for balance. Inputs are multiple TokenRow instances within a parent div (flex, divide-y). Outputs are a vertically divided list of token rows for enhanced organization in UI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/tokens/token-row.mdx#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"flex flex-col divide-y\">\n  <TokenRow \n    chain_id={43114}\n    address=\"0x1234...\"\n    name=\"Avalanche\"\n    symbol=\"AVAX\"\n    balance={new BigNumber(\"1.234\")}\n  />\n  <TokenRow \n    chain_id={43114}\n    address=\"0x5678...\"\n    name=\"USD Coin\"\n    symbol=\"USDC\"\n    balance={new BigNumber(\"100.00\")}\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pinging ANR Server with cURL\nDESCRIPTION: Shows how to ping the Avalanche Network Runner server using a cURL POST request.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/ping'\n```\n\n----------------------------------------\n\nTITLE: Avalanche Help Command Usage\nDESCRIPTION: Generic help command that provides detailed information about any command in the Avalanche CLI application.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\navalanche help [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging Precompile Upgrade Configuration in Subnet-EVM\nDESCRIPTION: Log output showing how the AvalancheGo node loads and processes the upgrade.json file for the WAGMI Avalanche L1, confirming the configured precompile upgrades for FeeManager and NativeMinter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/wagmi-avalanche-l1.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nINFO [02-22|18:27:06.473] <2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt Chain> github.com/ava-labs/subnet-evm/core/blockchain.go:335: Upgrade Config: {\"precompileUpgrades\":[{\"feeManagerConfig\":{\"adminAddresses\":[\"0x6f0f6da1852857d7789f68a28bba866671f3880d\"],\"blockTimestamp\":1660658400}},{\"contractNativeMinterConfig\":{\"adminAddresses\":[\"0x6f0f6da1852857d7789f68a28bba866671f3880d\"],\"managerAddresses\":[\"0xadfa2910dc148674910c07d18df966a28cd21331\"],\"blockTimestamp\":1708696800}}]}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching to a New Branch with Git in Bash\nDESCRIPTION: Creates and checks out a new Git branch named 'hello-world-stateful-precompile'. This step is critical for isolating development of the HelloWorld precompile. Requires that Git is installed and the working directory is a valid Git repository. Output is a branch switch, enabling isolated work.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b hello-world-stateful-precompile\n```\n\n----------------------------------------\n\nTITLE: Updating Avalanche Node Configurations\nDESCRIPTION: This command suite provides functionality for nodes to update their avalanchego or VM configurations. It includes a subnet subcommand for updating subnet-specific configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_116\n\nLANGUAGE: bash\nCODE:\n```\navalanche node update [subcommand] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for update\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Configuring ERC20 Contract Deployment\nDESCRIPTION: This snippet shows the configuration process for deploying the ERC20 contract, including network selection, chain selection, private key usage, and token details specification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/05-deploy-fee-token-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✔ Local Network\n✔ C-Chain\n\nA private key is needed to pay for the contract deploy fees.\nIt will also be considered the owner address of the contract, beign able to call\nthe contract methods only available to owners.\n\n✔ Use the private key of the Genesis Allocated address 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\n\nWhich is the token symbol?\nToken symbol: FEE\nWhich is the total token supply?\nToken supply: 100000\nWhich address should receive the supply?\n\n✔ Use the Genesis Allocated address 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\n\nToken Address: 0x768AF58E63775354938e9F3FEdB764F601c038b4\n\nERC20 Contract Successfully Deployed!\n```\n\n----------------------------------------\n\nTITLE: Implementing If/Else If/Else Branching in Solidity - Solidity\nDESCRIPTION: Expands on the basic if/else structure to include multiple branches using if/else if/else in Solidity. This allows the execution of one among several code paths depending on multiple boolean conditions. The snippet is a generic template for multi-branch selection within smart contracts, with inputs as boolean conditions and general code blocks as outputs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/02-control-flow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nif (<boolean-statement>) {\\n    \\n} else if (<boolean-statement>) {\\n       \\n} else {\\n  \\n}\n```\n\n----------------------------------------\n\nTITLE: AvalancheGo Log Output for Version Mismatch\nDESCRIPTION: This log output indicates that the node is attempting to connect with a peer running a newer version of AvalancheGo. It suggests that an update may be necessary.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/managing-avalanche-go.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nJan 08 10:26:45 ip-172-31-16-229 avalanchego[6335]: INFO [01-08|10:26:45] avalanchego/network/peer.go#526: beacon 9CkG9MBNavnw7EVSRsuFr7ws9gascDQy3 attempting to connect with newer version avalanche/1.1.1. You may want to update your client\n```\n\n----------------------------------------\n\nTITLE: Selected Auth Keys Confirmation for Transaction\nDESCRIPTION: Confirmation message showing the selected authentication keys that will be used for the validator addition transaction. The CLI requires multiple keys for multisignature transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n✔ Mainnet\n✔ P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\n✔ P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\nYour subnet auth keys for add validator TX creation: [P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5 P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af].\n```\n\n----------------------------------------\n\nTITLE: Retrieving a shared secret for AvaCloud webhooks\nDESCRIPTION: This curl command fetches a previously generated shared secret for webhook security verification. The shared secret is used to validate the authenticity of incoming webhook notifications.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/webhooks:getSharedSecret \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Using the Subnet Import Command in Avalanche CLI\nDESCRIPTION: The basic command for importing blockchain configurations into avalanche-cli. This command supports importing from files or from public networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_140\n\nLANGUAGE: bash\nCODE:\n```\navalanche subnet import [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Address Component in React (TypeScript)\nDESCRIPTION: Demonstrates how to import the Address component from @avalabs/builderkit and render it in a React TypeScript/TSX environment using prop-based address assignment. No external state or context is required for this usage. Requires @avalabs/builderkit as a dependency.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/identity/address.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Address } from '@avalabs/builderkit';\n\n// Basic usage\n<Address address=\"0x1234567890123456789012345678901234567890\" />\n\n// With abbreviation\n<Address \n  address=\"0x1234567890123456789012345678901234567890\"\n  abbreviate={true}\n/>\n\n// Using context (inside Identity provider)\n<Address abbreviate={true} />\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Amount to Send Input\nDESCRIPTION: Shows the interactive prompt where the user enters the amount of AVAX to send. This amount excludes the transaction fee (0.004 AVAX). Here, 4.496 AVAX is entered.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n✗ Amount to send (AVAX units): 4.496\n```\n\n----------------------------------------\n\nTITLE: Exporting Keystore User Response - AvalancheGo API - JSON\nDESCRIPTION: This JSON object is the standard result from a keystore.exportUser RPC operation. The response contains the JSON-RPC version, id, and a result object with two fields: user (a hex string representing encrypted user data) and encoding (set to hex). The output can be used for subsequent import into another local node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"user\": \"7655a29df6fc2747b0874e1148b423b954a25fcdb1f170d0ec8eb196430f7001942ce55b02a83b1faf50a674b1e55bfc00000000\",\n    \"encoding\": \"hex\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Bootstrapping Completion and Consensus Startup Log Output - Bash\nDESCRIPTION: This bash log snippet reflects the message indicating the node has finished bootstrapping the Avalanche L1 and is starting chain consensus. Look for these messages to confirm the node is now synchronizing and validating the chain. This output is generated automatically after startup and chain sync; no manual input required. It is used by administrators to verify that the node is ready for transaction validation and overall network operation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-production-infra.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nJul 30 18:27:21 node-fuji avalanchego[1728308]: [07-30|18:27:21.055] INFO <2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt Chain> snowman/transitive.go:333 consensus starting with J5wjmotMCrM2DKxeBTBPfwgCPpvsjtuqWNozLog2TomTjSuGK as the last accepted block\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch in Bash\nDESCRIPTION: Creates and checks out a new Git branch named 'hello-world-stateful-precompile'. This isolates the work for the new stateful precompile feature.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/create-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b hello-world-stateful-precompile\n```\n\n----------------------------------------\n\nTITLE: Avalanche Validator List Command Flags in Bash\nDESCRIPTION: Command line flags for the Avalanche validator list command. These flags provide network selection options (cluster, devnet, testnet, mainnet, local), endpoint specification, and general configuration options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_178\n\nLANGUAGE: bash\nCODE:\n```\n--cluster string            operate on the given cluster\n--devnet operate            on a devnet network\n--endpoint string           use the given endpoint for network operations\n-f, --fuji testnet          operate on fuji (alias to testnet\n-h, --help help             for list\n-l, --local operate         on a local network\n-m, --mainnet operate       on mainnet\n-t, --testnet fuji          operate on testnet (alias to fuji)\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Creating Wallet Account with OKX OS API\nDESCRIPTION: Node.js script to create a new wallet account using OKX OS API with authentication and signature generation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/okxos.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst CryptoJS = require(\"crypto-js\");\n\nconst createWallet = async () => {\n    const timestamp = new Date().toISOString();\n    const method = \"POST\";\n    const path = \"/api/v5/wallet/account/create-wallet-account\";\n\n    const body = {\n        addresses: [\n            {\n                chainIndex: \"43114\",\n                address: \"0x2eFB50e952580f4ff32D8d2122853432bbF2E204\",\n            },\n        ],\n    };\n\n    const signString = timestamp + method + path + JSON.stringify(body);\n    const signature = CryptoJS.enc.Base64.stringify(\n        CryptoJS.HmacSHA256(signString, \"YOUR API SECRET KEY\"),\n    );\n\n    const response = await fetch(\n        \"https://www.okx.com/api/v5/wallet/account/create-wallet-account\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"OK-ACCESS-PROJECT\": \"YOUR PROJECT ID\",\n                \"OK-ACCESS-KEY\": \"YOUR API KEY\",\n                \"OK-ACCESS-SIGN\": signature,\n                \"OK-ACCESS-PASSPHRASE\": \"YOUR API PASSPHRASE\",\n                \"OK-ACCESS-TIMESTAMP\": timestamp,\n            },\n            body: JSON.stringify(body),\n        },\n    );\n\n    const data = await response.json();\n    return data;\n};\n\ncreateWallet()\n    .then((response) => console.log(\"Success:\", response))\n    .catch((error) => console.error(\"Error:\", error));\n```\n\n----------------------------------------\n\nTITLE: Example Terminal Output for Validator Submission - Bash\nDESCRIPTION: This snippet captures the typical output produced when running the validator submission script on the terminal. It includes an experimental warning due to the Node.js ES module loader, and displays the resulting transaction ID object upon successful validator addition. No user input is required for this output. The transaction ID can then be referenced when checking validator or transaction status. No code is to be executed from this snippet—it's for informational and verification purposes only.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/validate/node-validator.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nlaviniatalpas@Lavinias-MacBook-Pro avalanchejs % node --loader ts-node/esm examples/p-chain/validate.ts\n(node:87616) ExperimentalWarning: `--experimental-loader` may be removed in the future; instead use `register()`:\n--import 'data:text/javascript,import { register } from \"node:module\"; import { pathToFileURL } from \"node:url\"; register(\"ts-node/esm\", pathToFileURL(\"./\"));'\n(Use `node --trace-warnings ...` to show where the warning was created)\n{ txID: 'RVe3CFRieRbBvKXKPu24Zbt1QehdyGVT6X4tPWVBeACPX3Ab8' }\n```\n\n----------------------------------------\n\nTITLE: Network Deployment Configuration Output\nDESCRIPTION: Terminal output showing the complete deployment process of a local Avalanche network including subnet creation, blockchain deployment, ICM integration, and token setup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-locally.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n✔ Local Network\nDeploying [myblockchain] to Local Network\n\nAvalancheGo path: /Users/felipe.madero/.avalanche-cli/bin/avalanchego/avalanchego-v1.13.0/avalanchego\n\nBooting Network. Wait until healthy...\n\nNode logs directory: /Users/felipe.madero/.avalanche-cli/runs/network_20250410_104205/<NodeID>/logs\n\nNetwork ready to use.\n\nUsing [P-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p] to be set as a change owner for leftover AVAX\nAvalancheGo path: /Users/felipe.madero/.avalanche-cli/bin/avalanchego/avalanchego-v1.13.0/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Importing Shared MDX Content in JavaScript/MDX\nDESCRIPTION: This snippet imports the `Networks` component from a shared MDX file located at `@/content/common/avalanche-starter-kit/networks.mdx`. This pattern allows for content reuse across different documentation pages within a likely MDX-based framework (e.g., Docusaurus, Next.js). The imported component encapsulates information about Avalanche networks.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/02-avalanche-starter-kit/04-networks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Networks from \"@/content/common/avalanche-starter-kit/networks.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing ToolboxMdxWrapper Component in JSX\nDESCRIPTION: This code snippet imports the ToolboxMdxWrapper component from a specific file path. This component is likely used to wrap other components or content in the toolbox functionality.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/04-create-genesis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Sample Output for Listing Ledger P-Chain Addresses\nDESCRIPTION: Shows example output from the `avalanche key list` command, displaying the P-Chain addresses and balances for indices 0-5 of a connected Ledger on the Mainnet. This helps identify the address and index holding the funds to be transferred.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n|  KIND  |  NAME   |          CHAIN          |                    ADDRESS                    | BALANCE | NETWORK |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n| ledger | index 0 | P-Chain (Bech32 format) | P-avax1g8yucm7j0cnwwru4rp5lkzw6dpdxjmc2rfkqs9 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 1 |                         | P-avax1drppshkst2ccygyq37m2z9e3ex2jhkd2txcm5r |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 2 |                         | P-avax10an3cucdfqru984pnvv6y0rspvvclz63e523m0 |     4.5 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 3 |                         | P-avax1yfpm7v5y5rej2nu7t2r0ffgrlpfq36je0rc5k6 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 4 |                         | P-avax17nqvwcqsa8ddgeww8gzmfe932pz2syaj2vyd89 |       0 | Mainnet |\n+        +---------+                         +-----------------------------------------------+---------+---------+\n|        | index 5 |                         | P-avax1jzvnd05vsfksrtatm2e3rzu6eux9a287493yf8 |       0 | Mainnet |\n+--------+---------+-------------------------+-----------------------------------------------+---------+---------+\n```\n\n----------------------------------------\n\nTITLE: Using the upgrade generate Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Shows the basic command structure for `avalanche blockchain upgrade generate`. This command initiates an interactive wizard to help the user build a new `upgrade.json` file for customizing blockchain upgrades.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade generate [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Proof of Possession Format in Protocol Buffer\nDESCRIPTION: Describes the Proof of Possession structure using Protocol Buffer notation, specifying a 48-byte public key field and a 96-byte signature field.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmessage ProofOfPossession {\n    bytes public_key = 1; // 48 bytes\n    bytes signature = 2;  // 96 bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Avalanche L1 Dashboard\nDESCRIPTION: This command runs the monitoring installation script with the --5 flag to add the Avalanche L1s dashboard for monitoring Layer 1 chains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh --5\n```\n\n----------------------------------------\n\nTITLE: Pruning Status Log Sample\nDESCRIPTION: Sample log output showing the progress of state data pruning with size and time metrics.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nINFO [02-09|00:31:51.920] Pruning state data                       nodes=40,116,759 size=10.08GiB  elapsed=8m47.499s eta=12m50.961s\nINFO [02-09|00:31:59.921] Pruning state data                       nodes=41,659,059 size=10.47GiB  elapsed=8m55.499s eta=12m13.822s\n```\n\n----------------------------------------\n\nTITLE: Rendering TransferOwnership Component in MDX\nDESCRIPTION: This JSX snippet renders the TransferOwnership component wrapped in a ToolboxMdxWrapper. This structure allows the ownership transfer interface to be embedded within an MDX document.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/04-transfer-ownership.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ToolboxMdxWrapper>\n    <TransferOwnership />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Compilation Script\nDESCRIPTION: Command to execute the compile.sh shell script which handles the compilation of smart contracts\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/toolbox/contracts/openzeppelin-4.9/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncompile.sh\n```\n\n----------------------------------------\n\nTITLE: Providing and Validating the SubnetID for L1 Import\nDESCRIPTION: This prompt requests the SubnetID (Avalanche L1 ID) for the L1 being imported, especially relevant when node details aren't provided or nodes aren't deployed yet. The checkmark '✔' indicates that the provided ID format has been validated by the Avalanche-CLI tool. The correct SubnetID for the selected network (Fuji/Mainnet) is required.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n✔ What is the ID of the subnet?: 28nrH5T2BMvNrWecFcV3mfccjs6axM1TVyqe79MCv2Mhs8kxiY\n```\n\n----------------------------------------\n\nTITLE: Specifying Private Key for Validator Transaction - Avalanche CLI - Bash\nDESCRIPTION: Demonstrates the prompt for selecting which private key to use when paying transaction fees for adding a validator. Requires the user to interactively choose from a list of stored keys. This is necessary for authorizing and paying for the validator transaction on P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nUse the arrow keys to navigate: ↓ ↑ → ←\n?  Which key should be used to pay for transaction fees on P-Chain?:\n    test\n  ▸ mytestkey\n```\n\n----------------------------------------\n\nTITLE: Selecting Network for Transfer in Avalanche CLI (zsh)\nDESCRIPTION: Displays the interactive prompt presented by the `avalanche key transfer` command, asking the user to choose the target Avalanche network (Mainnet, Fuji Testnet, Devnet, or Local Network) for the AVAX transfer.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/native-send.mdx#2025-04-23_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n? On what Network do you want to execute the transfer?:\n  ▸ Mainnet\n    Fuji Testnet\n    Devnet\n    Local Network\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Remaining Signing Requirements\nDESCRIPTION: Information displayed about remaining signatures needed for a partially signed transaction. The CLI shows which addresses still need to sign and provides the command for continuing the signing process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nPath to export partially signed TX to: partialAddValidatorTx.txt\n\nAddresses remaining to sign the tx: P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\n\nConnect a Ledger with one of the remaining addresses or choose a stored key and run the signing command, or send \"partialAddValidatorTx.txt\" to another user for signing.\n\nSigning command: avalanche transaction sign testblockchain --input-tx-filepath partialAddValidatorTx.txt\n```\n\n----------------------------------------\n\nTITLE: Removing addresses from an AvaCloud webhook\nDESCRIPTION: This curl command removes blockchain addresses from an existing webhook's monitoring list. The ID should be replaced with the actual webhook identifier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n     --url https://glacier-api.avax.network/v1/webhooks/id/addresses \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Importing Subnet Creation Component in React/TypeScript\nDESCRIPTION: This code snippet imports necessary components for creating a Subnet using a custom toolbox component. It includes a wrapper component and the main CreateSubnet component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/03-create-subnet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport CreateSubnet from \"../../../../toolbox/src/toolbox/L1/CreateSubnet.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Sender Key Source Selection (Ledger)\nDESCRIPTION: Shows the interactive prompt asking the user to choose the key source for signing the sending transaction: a stored key or a Ledger device. User selects 'Use ledger'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n? Which key source should be used to  for the sender address?:\n    Use stored key\n  ▸ Use ledger\n```\n\n----------------------------------------\n\nTITLE: Selecting the VM Version for L1 Import (No Node Query)\nDESCRIPTION: If a node API wasn't queried (either 'No' was selected for deployed nodes, or the query failed), this prompt requires the user to manually select the desired VM version from a list of available releases fetched from the VM's repository (e.g., GitHub). The user must know the appropriate version for their setup as the tool cannot determine the exact running version.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n✔ Subnet-EVM\nUse the arrow keys to navigate: ↓ ↑ → ←\n? Pick the version for this VM:\n  ▸ v0.4.5\n    v0.4.5-rc.1\n    v0.4.4\n    v0.4.4-rc.0\n↓   v0.4.3\n```\n\n----------------------------------------\n\nTITLE: Running Monitoring Installation Script\nDESCRIPTION: This command executes the monitoring installation script to set up the basic set of dashboards for the Avalanche node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/monitoring.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./monitoring-installer.sh\n```\n\n----------------------------------------\n\nTITLE: Opening Interactive SSH Shell for Avalanche Node\nDESCRIPTION: Demonstrates how to open an interactive SSH session for a specific node using node ID, instance ID, or IP address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/execute-ssh-commands.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche node ssh i-0225fc39626b1edd3\n[or] \navalanche node ssh NodeID-9wdKQ3KJU3GqvgFTc4CUYvmefEFe8t6ka\n[or]\navalanche node ssh 54.159.59.123\n```\n\n----------------------------------------\n\nTITLE: Listing Pending Rewards in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of pending rewards in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/rewards:listPending \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Querying Current Validators Response Structure in JSON\nDESCRIPTION: This JSON example shows the response format of the platform.getCurrentValidators API call. It includes detailed information about validators including their transaction ID, staking timeframe, stake amount, node ID, reward owners, potential rewards, and connection status.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/on-third-party-services/aws-marketplace.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"validators\": [\n      {\n        \"txID\": \"2hy57Z7KiZ8L3w2KonJJE1fs5j4JDzVHLjEALAHaXPr6VMeDhk\",\n        \"startTime\": \"1673411918\",\n        \"endTime\": \"1675313170\",\n        \"stakeAmount\": \"1000000000\",\n        \"nodeID\": \"NodeID-Q8Gfaaio9FAqCmZVEXDq9bFvNPvDi7rt5\",\n        \"rewardOwner\": {\n          \"locktime\": \"0\",\n          \"threshold\": \"1\",\n          \"addresses\": [\n            \"P-fuji1tgj2c3k56enytw5d78rt0tsq3lzg8wnftffwk7\"\n          ]\n        },\n        \"validationRewardOwner\": {\n          \"locktime\": \"0\",\n          \"threshold\": \"1\",\n          \"addresses\": [\n            \"P-fuji1tgj2c3k56enytw5d78rt0tsq3lzg8wnftffwk7\"\n          ]\n        },\n        \"delegationRewardOwner\": {\n          \"locktime\": \"0\",\n          \"threshold\": \"1\",\n          \"addresses\": [\n            \"P-fuji1tgj2c3k56enytw5d78rt0tsq3lzg8wnftffwk7\"\n          ]\n        },\n        \"potentialReward\": \"5400963\",\n        \"delegationFee\": \"2.0000\",\n        \"uptime\": \"0.0000\",\n        \"connected\": false,\n        \"delegators\": null\n      }\n    ]\n  },\n  \"id\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Keystore Users Response - AvalancheGo API - JSON\nDESCRIPTION: This JSON block shows the typical output from the keystore.listUsers endpoint, listing all current usernames in the keystore. It provides an array of usernames in the result.users field. Used for verifying available user identities on a local node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/keystore-api.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"users\": [\"myUsername\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Commands to install required packages including Privy SDK, viem and ethers\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/privy.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @privy-io/react-auth@latest\nnpm i viem@latest\nnpm i ethers@latest\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt: Transfer Step Selection (Receive)\nDESCRIPTION: Shows the interactive prompt asking the user to specify the step of the transfer. For the second part, the user selects 'Receive'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n? Step of the transfer:\n    Send\n  ▸ Receive\n```\n\n----------------------------------------\n\nTITLE: Implementing Transfer Action Execute Method in Go\nDESCRIPTION: Complete implementation of Execute method for Transfer action, including balance verification, memo validation, and balance updates between sender and receiver.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/02-actions.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (t *Transfer) Execute(\n\tctx context.Context,\n\t_ chain.Rules,\n\tmu state.Mutable,\n\t_ int64,\n\tactor codec.Address,\n\t_ ids.ID,\n) (codec.Typed, error) {\n\tif t.Value == 0 {\n\t\treturn nil, ErrOutputValueZero\n\t}\n\tif len(t.Memo) > MaxMemoSize {\n\t\treturn nil, ErrOutputMemoTooLarge\n\t}\n\tsenderBalance, err := storage.SubBalance(ctx, mu, actor, t.Value)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treceiverBalance, err := storage.AddBalance(ctx, mu, t.To, t.Value, true)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &TransferResult{\n\t\tSenderBalance:   senderBalance,\n\t\tReceiverBalance: receiverBalance,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StatefulPrecompiledContract Interface in Go\nDESCRIPTION: Shows the required interface implementation for precompiled contracts in Avalanche L1-EVM. The interface defines the Run function that handles precompile execution with parameters for state access, caller info, and gas management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/06-precompiles/01-what-are-precompiles.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// StatefulPrecompiledContract is the interface for executing a precompiled contract\ntype StatefulPrecompiledContract interface {\n    // Run executes the precompiled contract.\n    Run(accessibleState AccessibleState, \n        caller common.Address, \n        addr common.Address, \n        input []byte, \n        suppliedGas uint64, \n        readOnly bool) \n        (ret []byte, remainingGas uint64, err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Signature in Bash\nDESCRIPTION: An example of a cryptographic signature represented as a hexadecimal string. This signature would be generated by signing a message with a private key and can be verified using the corresponding public key.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-schemes.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n8efb19ca904a1d061a84070d5bad61ce1ea44d0e1d9c0a2ecced89692a5546ea39bb02ff1563186767d0903901d5304c126c2ad97dc2efe97c2d528039aff266e9337646498e90b089a4ebfa624e2f353aceca545b7f14b7c2707f3340bd6827\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Validator Manager Initialization in React\nDESCRIPTION: This code imports necessary components for rendering the Validator Manager initialization tool. It includes a wrapper component and the main Initialize component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/04-initialize-poa.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport Initialize from \"../../../../toolbox/src/toolbox/ValidatorManager/Initialize.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Importing ToolboxMdxWrapper Component in TypeScript/JSX\nDESCRIPTION: Imports a custom MDX wrapper component for the toolbox functionality. This component likely provides context or styling for the upgrade process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/02-upgrade-proxy.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Successful L1 Import in Avalanche-CLI\nDESCRIPTION: This output confirms the selected VM version (indicated by the checkmark '✔' preceding the version number) and signals that the Avalanche L1 (named WAGMI in this example) has been successfully imported into the Avalanche-CLI configuration. Subsequent CLI commands can now manage this imported L1.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/guides/import-avalanche-l1.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n✔ v0.4.5\nSubnet WAGMI imported successfully\n```\n\n----------------------------------------\n\nTITLE: Example Proof of Possession Data in Hexadecimal\nDESCRIPTION: Provides a concrete example of Proof of Possession data with hexadecimal values for both the public key (48 bytes) and signature (96 bytes) components.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n    // Public Key:\n    0x85, 0x02, 0x5b, 0xca, 0x6a, 0x30, 0x2d, 0xc6,\n    0x13, 0x38, 0xff, 0x49, 0xc8, 0xba, 0xa5, 0x72,\n    0xde, 0xd3, 0xe8, 0x6f, 0x37, 0x59, 0x30, 0x4c,\n    0x7f, 0x61, 0x8a, 0x2a, 0x25, 0x93, 0xc1, 0x87,\n    0xe0, 0x80, 0xa3, 0xcf, 0xde, 0xc9, 0x50, 0x40,\n    0x30, 0x9a, 0xd1, 0xf1, 0x58, 0x95, 0x30, 0x67,\n    // Signature:\n    0x8b, 0x1d, 0x61, 0x33, 0xd1, 0x7e, 0x34, 0x83,\n    0x22, 0x0a, 0xd9, 0x60, 0xb6, 0xfd, 0xe1, 0x1e,\n    0x4e, 0x12, 0x14, 0xa8, 0xce, 0x21, 0xef, 0x61,\n    0x62, 0x27, 0xe5, 0xd5, 0xee, 0xf0, 0x70, 0xd7,\n    0x50, 0x0e, 0x6f, 0x7d, 0x44, 0x52, 0xc5, 0xa7,\n    0x60, 0x62, 0x0c, 0xc0, 0x67, 0x95, 0xcb, 0xe2,\n    0x18, 0xe0, 0x72, 0xeb, 0xa7, 0x6d, 0x94, 0x78,\n    0x8d, 0x9d, 0x01, 0x17, 0x6c, 0xe4, 0xec, 0xad,\n    0xfb, 0x96, 0xb4, 0x7f, 0x94, 0x22, 0x81, 0x89,\n    0x4d, 0xdf, 0xad, 0xd1, 0xc1, 0x74, 0x3f, 0x7f,\n    0x54, 0x9f, 0x1d, 0x07, 0xd5, 0x9d, 0x55, 0x65,\n    0x59, 0x27, 0xf7, 0x2b, 0xc6, 0xbf, 0x7c, 0x12\n```\n\n----------------------------------------\n\nTITLE: Checking Bootstrap Progress API Call\nDESCRIPTION: API call to check if a chain has completed bootstrapping.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/from-source.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --data '{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\":\"X\"\n    }\n}' -H 'content-type:application/json;' 127.0.0.1:9650/ext/info\n```\n\n----------------------------------------\n\nTITLE: Deploying New Blockchain\nDESCRIPTION: Deploys the newly created blockchain 'myblockchain2' to the local network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/02-deploy-additional-blockchain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Validator Details in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint fetches details of a specific validator in the Avalanche mainnet. It requires the node ID as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/validators/{nodeId} \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Rendering the FoundryQuickstart Instructional Component - MDX\nDESCRIPTION: This snippet shows how to include and render the FoundryQuickstart MDX component within the documentation file. Rendering this component injects comprehensive instructions on configuring Foundry for Avalanche development as part of the user documentation. This approach relies on the containing system's support for MDX components and presupposes the imported module exists at the referenced path.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/03-foundry-quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<FoundryQuickstart/>\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Balance\nDESCRIPTION: Cast command to query the amountReceived variable from the smart contract\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/05-transfers-in-smart-contracts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url myblockchain $PAYABLE_CONTRACT \"amountReceived()(uint)\"\n```\n\n----------------------------------------\n\nTITLE: Export Private Key\nDESCRIPTION: Sets the private key as an environment variable for transaction signing\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/03-transfer-native-tokens.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport PK=56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027\n```\n\n----------------------------------------\n\nTITLE: Selecting Transaction Allowlist Option in CLI Prompt\nDESCRIPTION: This snippet shows an interactive command-line prompt presented during the configuration of an Avalanche L1 blockchain. It asks the user whether to allow anyone to issue transactions or to activate the transaction allowlist, which restricts transaction issuance to only approved addresses. Selecting 'No' enables the allowlist.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/06-permissioning-users/05-activate-tx-allowlist.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n? Do you want to enable anyone to issue transactions to your blockchain?: \n    Yes, I want anyone to be able to issue transactions on my blockchain\n  ▸ No, I want only approved addresses to issue transactions on my blockchain (Transaction Allow List ON)\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Completing Validator Registration via Contract Call\nDESCRIPTION: This function call is made on the `ValidatorManager` contract, providing the `L1ValidatorRegistrationMessage` received from the P-Chain. It finalizes the validator registration process on the C-Chain. For PoS Validator Managers, staking rewards begin accruing at this point.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_7\n\nLANGUAGE: Identifier\nCODE:\n```\ncompleteValidatorRegistration\n```\n\n----------------------------------------\n\nTITLE: Calling SHA256 Precompile Using Foundry's Cast Tool\nDESCRIPTION: This command uses Foundry's cast tool to call the SHA256 precompile at address 0x0000000000000000000000000000000000000002. It sends the string \"test\" as input to the run function, which returns a bytes32 hash of the input string.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/06-precompiles/03-interact-wtih-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c --private-key $PK 0x0000000000000000000000000000000000000002 \"run(string)(bytes32)\" \"test\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a Contract to Store Token Address in Solidity\nDESCRIPTION: Demonstrates a minimal contract structure that stores the address of an ERC-20 token. This serves as a base for later functions that need access to an external token contract via its address. No additional logic or dependencies are defined.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/07-erc20-smart-contracts/03-interacting-with-erc20-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Test {\\n    address tokenAddress;\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SetUp Component for Avalanche Starter Kit in JSX\nDESCRIPTION: This code snippet imports the SetUp component from a shared content directory and renders it with default MDX components. It demonstrates how to integrate reusable documentation components in a React-based documentation system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/02-avalanche-starter-kit/02-set-up.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SetUp from \"@/content/common/avalanche-starter-kit/set-up.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<SetUp components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Fee Recipients in Avalanche L1 Genesis Configuration\nDESCRIPTION: This JSON snippet shows how to enable the allowFeeRecipients feature in the genesis file of an Avalanche L1 blockchain. When set to true, it allows block producers to specify fee recipient addresses.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/05-transaction-fees/04-fee-distribution.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"allowFeeRecipients\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering UpgradeProxy Component within ToolboxMdxWrapper in JSX\nDESCRIPTION: Renders the UpgradeProxy component wrapped inside the ToolboxMdxWrapper. This structure suggests a custom UI for performing the proxy upgrade within a styled or contextualized environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/02-upgrade-proxy.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <UpgradeProxy />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Prompting Contract Deployer Allowlist Configuration - CLI Interactive - Markdown\nDESCRIPTION: This code snippet displays an interactive CLI prompt, asking the user whether anyone or only an allowlisted address can deploy smart contracts on their blockchain. It is intended for use within a terminal-based configuration tool. The available options enable open deployments or restrict to approved addresses (allowlist), depending on the user's selection. There are no explicit dependencies but it presumes integration with a CLI framework or setup script.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/06-permissioning-users/07-activate-contract-deployer-allowlist.mdx#2025-04-23_snippet_0\n\nLANGUAGE: cli-interactive\nCODE:\n```\n? Do you want to enable anyone to deploy smart contracts on your blockchain?: \n    Yes, I want anyone to be able to deploy smart contracts on my blockchain\n  \\u25B8 No, I want only approved addresses to deploy smart contracts on my blockchain (Smart Contract Deployer Allow List ON)\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Example JSON-RPC URL for WAGMI L1 (Fuji) on Local Node\nDESCRIPTION: Provides the full JSON-RPC URL for interacting with the WAGMI Avalanche L1 deployed on the Fuji testnet, accessed via a local node. It uses the specific blockchain ID for the WAGMI Subnet on Fuji.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/guides/issuing-api-calls.mdx#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1/ext/bc/2ebCneCbwthjQ1rYT41nhd7M76Hc6YmosMAQrTFhBq8qeqh6tt/rpc\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video - Next.js - JSX\nDESCRIPTION: This snippet renders the custom YouTube React component with a specific video id (\\'X3sVqXHdhnw\\') as a JSX element. This enables direct embedding of the related YouTube video within the rendered content of the page. The component is dependent on the YouTube React component being available and expects an \\'id\\' prop for the YouTube video identifier. Input is a string ID, and output is the corresponding video rendered on the page.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/install.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<YouTube id=\"X3sVqXHdhnw\" />\n```\n\n----------------------------------------\n\nTITLE: Listing Vertices in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of vertices in a specific blockchain of the Avalanche mainnet. It requires the blockchain ID as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM/vertices \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Initiating P-Chain Transfer (Receive Step) using Avalanche CLI\nDESCRIPTION: This command starts the interactive process again for the second part (receiving) of the P-Chain fund transfer. Ledger B must be connected for this step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\navalanche key transfer\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens with Foundry on EVM Blockchain\nDESCRIPTION: This command sends 1 ether to a specified address using the cast tool from Foundry. It requires the RPC URL of your blockchain and a private key for transaction signing.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/04-your-evm-blockchain/03-sending-tokens.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url myblockchain --private-key $PK 0x321f6B73b6dFdE5C73731C39Fd9C89c7788D5EBc --value 1ether\n```\n\n----------------------------------------\n\nTITLE: Cross-Chain Calculator Receiver Implementation\nDESCRIPTION: Implements the receiver contract that decodes incoming cross-chain messages and executes the appropriate calculator functions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/06-encoding-function-name.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.18;\n\nimport \"@teleporter/ITeleporterMessenger.sol\";\nimport \"@teleporter/ITeleporterReceiver.sol\";\nimport \"./CalculatorActions.sol\";\n\ncontract CalculatorReceiverOnSubnet is ITeleporterReceiver {\n    ITeleporterMessenger public immutable teleporterMessenger =\n        ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf);\n    uint256 public result_num;\n    string public result_string;\n\n    function receiveTeleporterMessage(bytes32, address, bytes calldata message) external {\n        require(\n            msg.sender == address(teleporterMessenger), \"CalculatorReceiverOnSubnet: unauthorized TeleporterMessenger\"\n        );\n\n        (CalculatorAction actionType, bytes memory paramsData) = abi.decode(message, (CalculatorAction, bytes));\n\n        if (actionType == CalculatorAction.add) {\n            (uint256 a, uint256 b) = abi.decode(paramsData, (uint256, uint256));\n            _calculatorAdd(a, b);\n        } else if (actionType == ...) {\n            (string memory text1, string memory text2) = abi.decode(paramsData, (string, string));\n            _calculatorConcatenateStrings(text1, text2);\n        } else {\n            revert(\"CalculatorReceiverOnSubnet: invalid action\");\n        }\n    }\n\n    function _calculatorAdd(uint256 _num1, uint256 _num2) internal {\n        result_num = _num1 + _num2;\n    }\n\n    function _calculatorConcatenateStrings(string memory str1, string memory str2) internal {\n        bytes memory str1Bytes = bytes(str1);\n        bytes memory str2Bytes = bytes(str2);\n\n        bytes memory combined = new bytes(str1Bytes.length + str2Bytes.length + 1);\n\n        for (uint256 i = 0; i < str1Bytes.length; i++) {\n            combined[i] = str1Bytes[i];\n        }\n        combined[str1Bytes.length] = \" \";\n        for (uint256 i = 0; i < str2Bytes.length; i++) {\n            combined[str1Bytes.length + i + 1] = str2Bytes[i];\n        }\n\n        result_string = string(combined);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Avalanche Testnet Configuration Parameters\nDESCRIPTION: Data structure containing configuration parameters for adding Avalanche Testnet to MetaMask, including chainId, network name, currency details, RPC URLs, and block explorer URLs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/add-network-programmatically.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nexport const AVALANCHE_TESTNET_PARAMS = {\n  chainId: \"0xA869\",\n  chainName: \"Avalanche Testnet C-Chain\",\n  nativeCurrency: {\n    name: \"Avalanche\",\n    symbol: \"AVAX\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://api.avax-test.network/ext/bc/C/rpc\"],\n  blockExplorerUrls: [\"https://testnet.snowtrace.io/\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Interacting with Terminal Prompt for Permissioning (Markdown/Text)\nDESCRIPTION: This snippet illustrates the interactive prompt encountered in the terminal during blockchain setup, asking whether anyone should be able to issue transactions or deploy smart contracts. The user is instructed to select 'No' to enable permissioning. No software dependencies are required apart from the blockchain setup CLI. The snippet demonstrates a user-selection prompt, with possible options 'Yes', 'No', and 'Explain the difference'. Output is not programmatic but represents expected CLI interaction; it assumes familiarity with command-line environments and that further setup steps follow.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/06-permissioning-users/03-activate-permissioning.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n? Do you want to enable anyone to issue transactions and deploy smart contracts to your blockchain?: \n    Yes\n  ▸ No\n    Explain the difference\n```\n\n----------------------------------------\n\nTITLE: Subtracting Balance Operations in Go\nDESCRIPTION: Implements function to subtract balance from an account with validation and cleanup.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc SubBalance(\n\tctx context.Context,\n\tmu state.Mutable,\n\taddr codec.Address,\n\tamount uint64,\n) (uint64, error) {\n\tkey, bal, exists, err := getBalance(ctx, mu, addr)\n\tif !exists {\n\t\treturn 0, ErrInvalidAddress\n\t}\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tnbal, err := smath.Sub(bal, amount)\n\tif err != nil {\n\t\treturn 0, fmt.Errorf(\n\t\t\t\"%w: could not subtract balance (bal=%d, addr=%v, amount=%d)\",\n\t\t\tErrInvalidBalance,\n\t\t\tbal,\n\t\t\taddr,\n\t\t\tamount,\n\t\t)\n\t}\n\tif nbal == 0 {\n\t\treturn 0, mu.Remove(ctx, key)\n\t}\n\treturn nbal, setBalance(ctx, mu, key, nbal)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing EWOQ Account Component - JavaScript\nDESCRIPTION: This snippet imports the 'ImportEWOQAccount' component from a relative MDX file path. It is a dependency required for rendering the component that contains the logic and UI for importing private keys. The code is intended for use within a React or MDX documentation page, and expects the referenced MDX file to define a valid React component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/05-add-ewoq-account.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ImportEWOQAccount from \"@/content/common/core-wallet/import-ewoq-account.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Archival C-Chain Node with Debug APIs\nDESCRIPTION: JSON configuration file for setting up an Avalanche C-Chain node with archival mode enabled and debug APIs. Includes settings for disabling pruning and enabling specific Ethereum APIs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/end-to-end/launch-ethereum-dapp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eth-apis\": [\n    \"eth\",\n    \"eth-filter\",\n    \"net\",\n    \"web3\",\n    \"internal-eth\",\n    \"internal-blockchain\",\n    \"internal-transaction\",\n    \"debug-tracer\"\n  ],\n  \"pruning-enabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ChangeWeight Component in React\nDESCRIPTION: This snippet imports the ChangeWeight component and ToolboxMdxWrapper, then renders the ChangeWeight component wrapped in ToolboxMdxWrapper. It's used to display the interface for changing validator weight in Avalanche L1.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/04-validator-management/02-change-weight.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ChangeWeight from \"../../../../toolbox/src/toolbox/ValidatorManager/ChangeWeight\"\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\n\n<ToolboxMdxWrapper>\n  <ChangeWeight />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Rendering ValidatorManager Contract Reading Component in React\nDESCRIPTION: This JSX code renders the ReadContract component within a ToolboxMdxWrapper. It provides the user interface for interacting with and displaying data from the ValidatorManager contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/06-check-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <ReadContract />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Rendering Validator Manager Initialization Tool in React JSX\nDESCRIPTION: This snippet renders the Initialize component wrapped in a ToolboxMdxWrapper. It provides an interactive interface for users to configure and initialize the Validator Manager contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/03-initialize-poa.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <Initialize />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Saving ERC20 Contract Address as Environment Variable\nDESCRIPTION: This command saves the deployed ERC20 contract address as an environment variable for future use in the deployment process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/05-deploy-fee-token-contract.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_fee_address=0x768AF58E63775354938e9F3FEdB764F601c038b4\n```\n\n----------------------------------------\n\nTITLE: Querying Cluster Status via CLI\nDESCRIPTION: This command uses the Avalanche Network Runner CLI to retrieve the current status of the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control status \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: EWOQ Test Address Value\nDESCRIPTION: This string represents the EWOQ public address (0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC). This address corresponds to a publicly known private key and is intended solely for testing purposes within development environments. Do not send real funds to this address on any public blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/import-ewoq-account.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom VM on Avalanche\nDESCRIPTION: Bash commands for deploying a custom VM to an Avalanche node cluster. The sync command starts the nodes syncing with the subnet, effectively deploying the custom VM.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\navalanche node sync <clusterName> <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Encoding a Short Integer in Avalanche\nDESCRIPTION: Shows how 16-bit short integers are packed in BigEndian format into the message payload.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/standards/serialization-primitives.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPacking:\n    0x0102\nResults in:\n    [0x01, 0x02]\n```\n\n----------------------------------------\n\nTITLE: Hardcoded TeleporterMessenger Address in Solidity Contract\nDESCRIPTION: This snippet demonstrates a Solidity contract with a hardcoded TeleporterMessenger address. It shows the limitation of using a fixed address, which makes the contract less flexible and harder to upgrade.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/01-icm-registry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract SenderOnCChain {\n\n    ITeleporterMessenger public immutable teleporterMessenger = ITeleporterMessenger(0x253b2784c75e510dD0fF1da844684a1aC0aa5fcf); // [!code highlight]\n\n    function sendMessage(\n        address destinationAddress,\n        string calldata message\n    ) external {\n        teleporterMessenger.sendCrossChainMessage(\n            // ...\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Chain Creation Transaction with Avalanche-CLI\nDESCRIPTION: Commands to initiate the signing process for a chain creation transaction using Avalanche-CLI. The command references a partially signed transaction file and prompts the user to sign with their Ledger device.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\navalanche transaction sign testblockchain --input-tx-filepath partiallySigned.txt\n```\n\n----------------------------------------\n\nTITLE: Importing Foundry Quickstart Component in JSX\nDESCRIPTION: This code snippet imports the FoundryQuickstart component from a common MDX file and renders it with default MDX components. It's used to include the Foundry setup guide in the current page.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/03-avalanche-starter-kit/05-foundry-quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FoundryQuickstart from \"@/content/common/avalanche-starter-kit/foundry-quickstart.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<FoundryQuickstart components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Running Generate Precompile Script in Bash\nDESCRIPTION: Command to run the generation script that creates a boilerplate code for the MD5 precompile implementation based on the provided ABI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/02-generate-the-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_precompile.sh --abi ./contracts/abis/IMD5.abi --type Md5 --pkg md5 --out ./md5\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering RemoveValidator Component in JSX\nDESCRIPTION: This snippet imports the RemoveValidator component and a ToolboxMdxWrapper, then renders the RemoveValidator component wrapped in the ToolboxMdxWrapper. This setup likely provides a user interface for removing a validator from an Avalanche L1 network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/04-validator-management/03-remove-validator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RemoveValidator from \"../../../../toolbox/src/toolbox/ValidatorManager/RemoveValidator\"\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\n\n<ToolboxMdxWrapper>\n  <RemoveValidator />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Saving Mock Receiver Address as Environment Variable\nDESCRIPTION: After deployment, this command saves the deployed contract address as an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/12-send-and-call/05-mock-receiver.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MOCK_RECEIVER_ADDRESS=<address>\n```\n\n----------------------------------------\n\nTITLE: Stopping Local Avalanche Node\nDESCRIPTION: The local stop command halts a running local node.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_108\n\nLANGUAGE: bash\nCODE:\n```\navalanche node local stop [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Confirming Native Minter Allowlist Configuration via CLI\nDESCRIPTION: Displays the CLI menu after adding addresses to the native minter allowlist. Selecting 'Confirm Allow List' proceeds to the final review and confirmation step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/04-independent-tokenomics/08-activate-native-minter.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n? Configure the addresses that are allowed to mint native tokens: \n    Add an address for a role to the allow list\n    Remove address from the allow list\n    Preview Allow List\n  ▸ Confirm Allow List\n    Cancel\n```\n\n----------------------------------------\n\nTITLE: Using the upgrade Command Suite in Avalanche CLI (Bash)\nDESCRIPTION: Displays the basic usage syntax for the `avalanche blockchain upgrade` command suite. This command serves as an entry point for various subcommands related to upgrading developmental and deployed Avalanche blockchains.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Avalanche-specific API Endpoint for C-Chain\nDESCRIPTION: The endpoint path for accessing Avalanche-specific RPC calls on the C-Chain. Used for operations unique to Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n/ext/bc/C/avax\n```\n\n----------------------------------------\n\nTITLE: Deploying Sender Contract on C-Chain\nDESCRIPTION: Uses Forge to deploy the SenderWithFeesOnCChain contract to the C-Chain. The deployed contract address is returned and should be saved for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK contracts/interchain-messaging/incentivize-relayer/senderWithFees.sol:SenderWithFeesOnCChain --broadcast\n```\n\n----------------------------------------\n\nTITLE: Creating Avalanche L1 Blockchain using Avalanche-CLI\nDESCRIPTION: This snippet demonstrates the command-line interaction for creating an Avalanche L1 blockchain using the Avalanche-CLI. It includes selecting a custom VM, providing the genesis file path, and setting up the source code repository.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Check ERC-20 Balance Using Foundry Cast Call\nDESCRIPTION: Command to verify the balance of wrapped tokens on C-Chain after the bridge transfer. Uses the balanceOf function of the ERC-20 token contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/05-bridge-tokens.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncast call --rpc-url local-c $ERC20_TOKEN_REMOTE_C_CHAIN \"balanceOf(address)(uint)\" $FUNDED_ADDRESS\n```\n\nLANGUAGE: bash\nCODE:\n```\n1000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Initializing Ledger Connection with Go SDK\nDESCRIPTION: Demonstrates how to initialize a connection to a Ledger device using the Go SDK. The code establishes a connection to the Ledger hardware wallet and creates a new Ledger application instance.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ledger.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport ledger \"github.com/ava-labs/ledger-avalanche-go\"\n\n// Initialize connection\nledgerApp, err := ledger.NewLedgerApp()\nif err != nil {\n    // Handle connection error\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Reward Calculator Deployment Component in TypeScript/JSX\nDESCRIPTION: This snippet imports the DeployRewardCalculator component and a ToolboxMdxWrapper, then renders the deployment component wrapped in the ToolboxMdxWrapper. This setup allows for the integration of the deployment tool within a React-based documentation or application environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/02-deploy-reward-calculator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport DeployRewardCalculator from \"../../../../toolbox/src/toolbox/StakingManager/DeployRewardCalculator.tsx\";\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\";\n\n<ToolboxMdxWrapper>\n    <DeployRewardCalculator />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: TeleporterRegistry State Variables Implementation\nDESCRIPTION: Defines the core state variables of the TeleporterRegistry contract including the latest version tracker and mappings for version-to-address and address-to-version relationships.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/02-how-the-icm-registry-works.mdx#2025-04-23_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ncontract TeleporterRegistry {\n    // The latest protocol version. 0 means no protocol version has been added, and isn't a valid version.\n    uint256 public latestVersion;\n\n    // Mappings that keep track of the protocol version and corresponding contract address.\n    mapping(uint256 version => address protocolAddress) private _versionToAddress;\n    mapping(address protocolAddress => uint256 version) private _addressToVersion;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Avalanche L1 Blockchain on Fuji Network\nDESCRIPTION: This code snippet shows the process of deploying the created Avalanche L1 blockchain on the Fuji network using Avalanche-CLI. It includes selecting the network, choosing the key for transaction fees, and setting control keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-nodes/deploy-custom-vm.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy <blockchainName>\n```\n\n----------------------------------------\n\nTITLE: Library Reference Example in Bytecode\nDESCRIPTION: Example JSON output showing how library references appear in compiled bytecode, demonstrating the linkReferences structure for external libraries.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/snowtrace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linkReferences\": {\n    \"contracts/Storage.sol\": {\n      \"MathUtils\": [\n        {\n          \"length\": 20,\n          \"start\": 3203\n        }\n        ...\n      ]\n    }\n  },\n  \"object\": \"....\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Solidity Interface\nDESCRIPTION: A Solidity interface for the Counter precompile with three functions: getCounter to retrieve the counter value, incrementCounter to increment the counter, and setCounter to set a specific counter value.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface ICounter {\n\n    function getCounter() external view returns (uint value);\n    function incrementCounter() external;\n    function setCounter(uint value) external;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Compilation Script in Bash\nDESCRIPTION: This command executes the compile.sh shell script which is responsible for compiling the smart contracts in the project. The script likely automates the build process for the contracts in the AVA Labs Builders Hub.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/components/tools/common/icm-contracts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncompile.sh\n```\n\n----------------------------------------\n\nTITLE: Unpacking Input Data from Solidity to Go String\nDESCRIPTION: Function that unpacks byte array input from Solidity staticcall into a Go string. It uses the ABI definition to properly decode the input data, assuming the function selector is omitted.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/03-unpack-input-pack-output.mdx#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// UnpackHashWithMD5Input attempts to unpack [input] into the string type argument\n// assumes that [input] does not include selector (omits first 4 func signature bytes)\nfunc UnpackHashWithMD5Input(input []byte) (string, error) {\n    res, err := Md5ABI.UnpackInput(\"hashWithMD5\", input)\n    if err != nil {\n        return \"\", err\n    }\n    unpacked := *abi.ConvertType(res[0], new(string)).(*string)\n    return unpacked, nil\n}\n```\n\n----------------------------------------\n\nTITLE: File Path Structure for Chain Logos in BuilderKit\nDESCRIPTION: Defines the standardized file path structure for chain logos used in components like ChainIcon, ChainDropdown, and TokenIconWithChain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/asset-requirements.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/chains/logo/{chain_id}.png\n```\n\n----------------------------------------\n\nTITLE: Registering ERC20TokenRemote with NativeTokenHome using Cast\nDESCRIPTION: This command uses Cast to call the registerWithHome method on the ERC20TokenRemote contract, registering it with the NativeTokenHome contract on the custom Avalanche L1 blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/04-deploy-erc20-token-remote.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_TOKEN_REMOTE_C_CHAIN \"registerWithHome((address, uint256))\" \"(0x0000000000000000000000000000000000000000, 0)\"\n```\n\n----------------------------------------\n\nTITLE: Gantt Unsigned Export TX Specification\nDESCRIPTION: A binary format specification for unsigned export transactions in Avalanche, showing the structure and size of each component in the transaction.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_44\n\nLANGUAGE: text\nCODE:\n```\n+-------------------+---------------+--------------------------------------+\n| base_tx           : BaseTx        |                  size(base_tx) bytes |\n+-------------------+---------------+--------------------------------------+\n| destination_chain : [32]byte      |                             32 bytes |\n+-------------------+---------------+--------------------------------------+\n| outs              : []TransferOut |                 4 + size(outs) bytes |\n+-------------------+---------------+--------------------------------------+\n                          | 36 + size(outs) + size(base_tx) bytes |\n                          +---------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Managing NFT Data with AvaCloud Data API (Bash)\nDESCRIPTION: These curl commands show how to interact with NFT data using the AvaCloud Data API, including reindexing NFT metadata, listing tokens, and getting token details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/nfts/collections/{address}/tokens/tokenId:reindex \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/nfts/collections/{address}/tokens \\\n     --header 'accept: application/json'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/chains/{chainId}/nfts/collections/{address}/tokens/tokenId \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Listing Ledger P-Chain Addresses and Balances using Avalanche CLI\nDESCRIPTION: This command lists the P-Chain addresses and their AVAX balances for the specified indices (0 through 5) associated with a connected Ledger device on the Mainnet. It requires Avalanche CLI to be installed and the Ledger device connected with the Avalanche app running.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/transactions/ledger-p-chain-transfer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche key list --mainnet --ledger 0,1,2,3,4,5\n```\n\n----------------------------------------\n\nTITLE: Completing Delegator Registration in Solidity (PoS only)\nDESCRIPTION: Describes the process of completing delegator registration by calling the completeDelegatorRegistration function. This function is called after receiving a SubnetValidatorWeightUpdateMessage from the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nPoSValidatorManager.completeDelegatorRegistration()\n```\n\n----------------------------------------\n\nTITLE: Entering Validator NodeID in Avalanche CLI - Bash\nDESCRIPTION: This prompt asks for the NodeID of the Avalanche node to be registered as a validator. The NodeID must be retrieved from the node's configuration or console. The value is required for validator identification within the blockchain. No default is provided; user input is mandatory. Example: 'NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg'.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/add-validator-l1.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\\u2717 What is the NodeID of the node you want to add as a blockchain validator?:  \n```\n\n----------------------------------------\n\nTITLE: Importing Components for Collecting Conversion Signatures in React\nDESCRIPTION: This code snippet imports necessary components for collecting conversion signatures. It includes a wrapper component and the main CollectConversionSignatures component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/04-collect-conversion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport CollectConversionSignatures from \"../../../../toolbox/src/toolbox/L1/CollectConversionSignatures.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Failed Bootstrap Connection Error Message\nDESCRIPTION: Error message displayed when a node fails to connect to bootstrap nodes, typically due to internet connectivity issues or duplicate NodeID usage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/common-errors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWARN node/node.go:291 failed to connect to bootstrap nodes\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapped Exchange Address Environment Variable\nDESCRIPTION: Export the wrapped exchange contract address as an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/13-cross-chain-token-swaps/08-deploy-wrapped-exchange-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport WRAPPED_EXCHANGE_ADDRESS=0x38B097d95B96CD17966Cf617A71b7B20F61ba85B\n```\n\n----------------------------------------\n\nTITLE: Importing Foundry Documentation Component in JSX\nDESCRIPTION: React/JSX code for importing and rendering the Foundry quickstart documentation component with required dependencies.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/02-avalanche-starter-kit/05-foundry-quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport FoundryQuickstart from \"@/content/common/avalanche-starter-kit/foundry-quickstart.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<FoundryQuickstart components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Interface to ABI with solc\nDESCRIPTION: Bash commands for compiling the IMD5 Solidity interface to generate its ABI (Application Binary Interface) using the Solidity compiler (solc).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/01-create-solidity-interface.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd contracts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx solc@latest --abi ./contracts/interfaces/IMD5.sol -o ./abis --base-path . --include-path ./node_modules\n```\n\nLANGUAGE: bash\nCODE:\n```\nmv ./abis/contracts_interfaces_IMD5_sol_IMD5.abi ./abis/IMD5.abi\n```\n\n----------------------------------------\n\nTITLE: Example: 'Bad CPU Type' Error on M1/M2 Macs in Bash\nDESCRIPTION: Shows the specific error message (`zsh: bad CPU type in executable`) encountered on Apple Silicon (M1/M2) Macs when trying to run AvalancheGo binaries via Avalanche-CLI. This occurs because the binary is compiled for x86 architecture and Rosetta 2 (Apple's translation layer) is not installed or active.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/troubleshooting.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzsh: bad CPU type in executable:\n/Users/user.name/Downloads/build/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Getting P-Chain Height with platform.getHeight\nDESCRIPTION: This snippet demonstrates how to get the current P-Chain height using the platform.getHeight method in Postman.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-postman/making-api-calls.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"platform.getHeight\",\n  \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC20TokenRemote Contract on Avalanche C-Chain using Forge\nDESCRIPTION: This command deploys the ERC20TokenRemote contract to the Avalanche C-Chain using Forge. It includes constructor arguments for the Interchain Messaging Registry, manager address, source blockchain ID, token home address, and token details.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/08-native-to-erc-20-bridge/04-deploy-erc20-token-remote.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK lib/icm-contracts/contracts/ictt/TokenRemote/ERC20TokenRemote.sol:ERC20TokenRemote --optimize --optimizer-runs 200 --broadcast --constructor-args \"(${TELEPORTER_REGISTRY_C_CHAIN}, ${FUNDED_ADDRESS}, \"1\", ${SOURCE_BLOCKCHAIN_ID_HEX}, ${ERC20_HOME_BRIDGE_L1}, 18)\" \"Wrapped NATV\" \"WNATV\" 18\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Native Tokens using Cast\nDESCRIPTION: This command uses cast to call the withdraw function of the wrapped token contract, burning wrapped tokens to receive native tokens. The amount specifies the number of wrapped tokens to burn.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/01-basics/05-deploy-and-interact-wrapped-tokens.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send $WRAPPED_TOKEN \"withdraw(uint256)\" <AMOUNT> --rpc-url myblockchain --private-key $PK\n```\n\n----------------------------------------\n\nTITLE: L1 Validator Registration Warp Message Identifier\nDESCRIPTION: This identifier represents a Warp message signed by the P-Chain and sent back to the C-Chain (`ValidatorManager`). It indicates that the specified validator was successfully registered on the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_6\n\nLANGUAGE: Identifier\nCODE:\n```\nL1ValidatorRegistrationMessage\n```\n\n----------------------------------------\n\nTITLE: Implementing GenesisBuilder Tool in JSX\nDESCRIPTION: This JSX code wraps the GenesisBuilder component within the ToolboxMdxWrapper. This structure suggests that the GenesisBuilder tool is being presented within a specific toolbox context or layout.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/04-create-genesis.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ToolboxMdxWrapper>\n    <GenesisBuilder />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Setting Receiver Contract Environment Variable\nDESCRIPTION: Command to set the RECEIVER_ADDRESS environment variable with the newly deployed contract address for future reference.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/05-two-way-communication/05-create-the-receiver-contract.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport RECEIVER_ADDRESS=0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25\n```\n\n----------------------------------------\n\nTITLE: Balance Verification Commands\nDESCRIPTION: Commands to check token balances and collateralization status\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/04-use-any-native-as-native-token.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncast balance --rpc-url myblockchain $FUNDED_ADDRESS\n\ncast call --rpc-url myblockchain $NATIVE_TOKEN_REMOTE_L1 \"isCollateralized()(bool)\"\n```\n\n----------------------------------------\n\nTITLE: Using Gallery Component to Display Wallet Configuration Images\nDESCRIPTION: Implements the Gallery component to show step-by-step images of navigating through the Core wallet menu to access testnet mode settings.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/testnet-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Gallery url1=\"/common-images/core-wallet/go-to-menu.png\" url2=\"/common-images/core-wallet/go-to-advanced.png\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying and Verifying Smart Contract with Forge\nDESCRIPTION: Command to deploy and verify the NFT contract using Forge with constructor arguments for name and symbol.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/toolchains/foundry.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nforge create NFT --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY --verify --constructor-args GameItem ITM\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering MDX Setup Component\nDESCRIPTION: MDX code that imports and renders the Avalanche Starter Kit setup component with default MDX components configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/03-avalanche-starter-kit/02-set-up.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SetUp from \"@/content/common/avalanche-starter-kit/set-up.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<SetUp components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Starting AWM Relayer with Avalanche Starter Kit\nDESCRIPTION: Command to start the AWM relayer when using the Avalanche Starter Kit, which includes the relayer in its Dev Container.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/03-install-relayer.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer start\n```\n\n----------------------------------------\n\nTITLE: Importing Instructors Data in JSX\nDESCRIPTION: Imports instructor data from a predefined content file that contains instructor information including names, titles, and social media links.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/intro/instructors.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport instructors from '@/content/common/intro/instructors.tsx'\n```\n\n----------------------------------------\n\nTITLE: Creating Genesis File in VSCode\nDESCRIPTION: Command to create and open the genesis configuration file in VSCode editor within the specified project directory structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/02-create-your-genesis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncode ./tests/precompile/genesis/evm-configuration-genesis.json\n```\n\n----------------------------------------\n\nTITLE: Removing Node with cURL\nDESCRIPTION: Shows how to remove a specific node from the network using a cURL POST request to the ANR API.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/removenode' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"name\":\"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Exporting ERC-20 Contract Address\nDESCRIPTION: Command to save the deployed ERC-20 contract address as an environment variable for later use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/03-tokens/08-transfer-an-erc-20-token.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_CONTRACT_L1=0x...\n```\n\n----------------------------------------\n\nTITLE: Defining Transferable Input Format in Gantt Chart Notation\nDESCRIPTION: Specifies the binary format for Transferable Input which contains TxID, UTXOIndex, AssetID, and an Input. This structure is used for consuming outputs from previous transactions.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n+------------+----------+------------------------+\n| tx_id      : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| utxo_index : int      |               04 bytes |\n+------------+----------+------------------------+\n| asset_id   : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| input      : Input    |      size(input) bytes |\n+------------+----------+------------------------+\n                        | 68 + size(input) bytes |\n                        +------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorized Subscriptions for CrossChainVRFWrapper\nDESCRIPTION: This command calls the addAuthorizedAddress function on the deployed CrossChainVRFWrapper contract to authorize a specific address with a given subscription ID for requesting random words.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/05-deploy-vrf-wrapper.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url <RPC_URL> --private-key <PRIVATE_KEY> $VRF_WRAPPER \"addAuthorizedAddress(address caller, uint256 subscriptionId)\" <CALLER_ADDRESS> <SUBSCRIPTION_ID>\n```\n\n----------------------------------------\n\nTITLE: Basic Relayer Configuration Structure\nDESCRIPTION: Initial configuration structure for single-direction messaging between blockchains, including API endpoints, source and destination blockchain configurations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/05-multichain-relayer-config.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"p-chain-api\": {\n    \"base-url\": \"http://127.0.0.1:9650\",\n    \"query-parameters\": {},\n    \"http-headers\": null\n  },\n  \"info-api\": {\n    \"base-url\": \"http://127.0.0.1:9650\",\n    \"query-parameters\": {},\n    \"http-headers\": null\n  },  \n  \"source-blockchains\": [\n    {\n      \"subnet-id\": \"11111111111111111111111111111111LpoYY\",\n      \"blockchain-id\": \"epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/<blockchain-id>/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"ws-endpoint\": {\n        \"base-url\": \"ws://127.0.0.1:9650/ext/bc/<blockchain-id>/ws\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"message-contracts\": {\n        \"0x0000000000000000000000000000000000000000\": {\n          \"message-format\": \"off-chain-registry\",\n          \"settings\": {\n            \"teleporter-registry-address\": \"0x<registry-address>\"\n          }\n        },\n        \"0x<contract-address>\": {\n          \"message-format\": \"teleporter\",\n          \"settings\": {\n            \"reward-address\": \"0x<reward-address>\"\n          }\n        }\n      }\n    }\n  ],\n  \"destination-blockchains\": [\n    {\n      \"subnet-id\": \"11111111111111111111111111111111LpoYY\",\n      \"blockchain-id\": \"epm5fG6Pn1Y5rBHdTe36aZYeLqpXugreyHLZB5dV81rVTs7Ku\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/<blockchain-id>/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"kms-key-id\": \"\",\n      \"kms-aws-region\": \"\",\n      \"account-private-key\": \"<your-private-key>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Avalanche Signed Transaction Protocol Buffer Specification\nDESCRIPTION: Protocol Buffer message definition for Avalanche signed transactions, showing the fields for codec ID, unsigned transaction, and credentials array with their respective sizes.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_51\n\nLANGUAGE: text\nCODE:\n```\nmessage Tx {\n    uint32 codec_id = 1;                 // 2 bytes\n    UnsignedTx unsigned_tx = 2;          // size(unsigned_tx)\n    repeated Credential credentials = 3; // 4 bytes + size(credentials)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VRF_WRAPPER Environment Variable\nDESCRIPTION: This command sets an environment variable with the deployed CrossChainVRFWrapper contract address for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/05-deploy-vrf-wrapper.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VRF_WRAPPER=<address>\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Contract Address\nDESCRIPTION: Command to store the deployed remote contract address in environment variables\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/06-deploy-with-avalanche-cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ERC20_REMOTE_L1=<\"Remote address\">\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video using a Custom Component\nDESCRIPTION: This snippet utilizes a custom `<YouTube>` component, common in frameworks like MDX or React-based documentation sites, to embed a YouTube video. The `id` attribute specifies the unique identifier of the YouTube video ('gNhmxIYj9ME') to be displayed. This component abstracts the underlying iframe embedding logic.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/07-permissioning-validators/03-case-study-intain-markets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<YouTube id=\"gNhmxIYj9ME\" />\n```\n\n----------------------------------------\n\nTITLE: Running Memory Profile for C-Chain Admin API in Text\nDESCRIPTION: This admin function runs and writes a memory profile for the C-Chain. It doesn't require any parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\nadmin.memoryProfile() -> {}\n```\n\n----------------------------------------\n\nTITLE: Signature Aggregation Request\nDESCRIPTION: cURL command to request signature aggregation from validators via the Signature Aggregator server\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/13-registering-validator/registering-validator.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8080/aggregate-signatures' \\\n--json '{\"message\": \"<hex encoded unsigned message bytes retrieved from the logs>\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchRecentBlocks Function in React Client (TSX)\nDESCRIPTION: A client-side function for retrieving recent blocks from the blockchain. This function will call the backend API, which will use the AvaCloud SDK to fetch block data from the Avalanche Data API and return it as an array of EvmBlock objects.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/06-block-explorer-app/02-understanding-code.mdx#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst fetchRecentBlocks = async () => {\n    //\n    // TODO: Implement this!\n    //\n    return data as EvmBlock[]\n  }\n```\n\n----------------------------------------\n\nTITLE: Restarting a Node with avalanche-network-runner (Bash)\nDESCRIPTION: Illustrates how to restart a specific node within the network using 'avalanche-network-runner control restart-node'. The CLI example demonstrates using flags like '--request-timeout', '--log-level', and '--endpoint'. The corresponding curl example shows the API call structure.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control restart-node node-name [options] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control restart-node \\\n--request-timeout=3m \\\n--log-level debug \\\n--endpoint=\"localhost:8080\" \\\nnode1 \n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8081/v1/control/restartnode' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"name\": \"node5\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Approving ERC20 Token Expense for Cross-Chain Messaging\nDESCRIPTION: Calls the 'approve' function on the ERC20 fee contract to allow the sender contract to spend tokens on behalf of the message sender. This is necessary for paying relayer fees.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncast send --rpc-url local-c --private-key $PK $ERC20_fee_address \"approve(address,uint256)\" $SENDER_ADDRESS 500000000000000\n```\n\n----------------------------------------\n\nTITLE: Setting VRF Consumer Environment Variable\nDESCRIPTION: Command to store the deployed CrossChainVRFConsumer contract address as an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/14-access-chainlink-vrf-services/06-deploy-vrf-consumer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VRF_CONSUMER=<address>\n```\n\n----------------------------------------\n\nTITLE: HTTP Provider Setup\nDESCRIPTION: Configuring HTTP provider for connecting to Avalanche Fuji testnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconst nodeURL = \"https://api.avax-test.network/ext/bc/C/rpc\";\nconst HTTPSProvider = new ethers.providers.JsonRpcProvider(nodeURL);\n```\n\n----------------------------------------\n\nTITLE: Activating Native Minter Precompile via Command Line\nDESCRIPTION: This bash snippet shows the command line interface for activating the Native Minter Precompile. It prompts the user to choose whether they want to allow minting of new native tokens.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/02-native-tokens/04-activating-native-minter-precompile.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n? Allow minting of new native tokens?: \n  ▸ Yes, I want to be able to mint additional native tokens (Native Minter Precompile ON)\n    No, I want the supply of the native tokens to be hard-capped\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Foundry Quickstart MDX Component - TypeScript\nDESCRIPTION: This snippet demonstrates how to import a shared MDX module containing Foundry quickstart instructions into a Markdown/MDX document. The imported component is intended for rendering documentation content that guides users through Foundry setup. The path designates a canonical location for starter kit documentation and assumes a build environment supporting MDX and TypeScript interoperability.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/03-smart-contracts/03-foundry-quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport FoundryQuickstart from \"@/content/common/avalanche-starter-kit/foundry-quickstart.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Struct in Memory within a Function - Solidity\nDESCRIPTION: Demonstrates how to create a temporary Person struct within a function by specifying the memory location. This is required for function-local struct instances. Inputs are the struct values; output is a memory-resident Person object, valid only during the function call. No special dependencies.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/03-data-structures.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nPerson memory person = Person(5, \"Rodrigo\")\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Example for C-Chain\nDESCRIPTION: A complete example showing how to establish a websocket connection to the C-Chain's Ethereum APIs on localhost.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/c-chain/api.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nws://127.0.0.1:9650/ext/bc/C/ws\n```\n\n----------------------------------------\n\nTITLE: Defining Normalization Factor in LaTeX\nDESCRIPTION: This LaTeX formula defines the normalization factor L used in the AVAX minting formula.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/quick-start/avax-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nL = \\left(\\sum_{i=0}^{\\infty} \\frac{1}{\\left(\\gamma + \\frac{1}{1 + i^\\lambda} \\right)^i} \\right)\n```\n\n----------------------------------------\n\nTITLE: Cloning HyperSDK Starter Kit Repository\nDESCRIPTION: Command to clone the HyperSDK Starter Kit repository from Github to the local environment.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/01-hypersdk-starter-kit/02-set-up.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ava-labs/hypersdk-starter-kit.git\n```\n\n----------------------------------------\n\nTITLE: Listing addresses monitored by an AvaCloud webhook\nDESCRIPTION: This curl command retrieves all blockchain addresses currently being monitored by a specific webhook. The ID should be replaced with the actual webhook identifier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/webhooks/id/addresses \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Streaming Cluster Status\nDESCRIPTION: This command streams the cluster status at regular intervals using the Avalanche Network Runner CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control \\\n--request-timeout=3m \\\nstream-status \\\n--push-interval=5s \\\n--log-level debug \\\n--endpoint=\"0.0.0.0:8080\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Receiver Contract on Custom Blockchain\nDESCRIPTION: Uses Forge to deploy the ReceiverOnSubnet contract to a custom blockchain named 'myblockchain'. The deployed contract address is returned and should be saved.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/12-incentivizing-a-relayer/07-interaction-flow-with-fees.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url myblockchain --private-key $PK contracts/interchain-messaging/incentivize-relayer/receiverWithFees.sol:ReceiverOnSubnet --broadcast\n```\n\n----------------------------------------\n\nTITLE: Specifying SECP256K1 Transfer Input Structure in Text Format\nDESCRIPTION: Gantt chart representation of the SECP256K1 Transfer Input binary format, detailing field types, sizes, and total size calculation. This specification shows how SECP256K1 Transfer Input data is organized in memory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n+-------------------------+-------------------------------------+\n| type_id         : int   |                             4 bytes |\n+-----------------+-------+-------------------------------------+\n| amount          : long  |                             8 bytes |\n+-----------------+-------+-------------------------------------+\n| address_indices : []int |  4 + 4 * len(address_indices) bytes |\n+-----------------+-------+-------------------------------------+\n                          | 16 + 4 * len(address_indices) bytes |\n                          +-------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Setting Consumer Contract Address Environment Variable\nDESCRIPTION: Command to store the deployed CrossChainVRFConsumer contract address in an environment variable for future use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/01-access-chainlink-vrf-services/06-deploy-vrf-consumer.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VRF_CONSUMER=<address>\n```\n\n----------------------------------------\n\nTITLE: Importing CreateDefaultBlockchain Component in JSX\nDESCRIPTION: This snippet imports the CreateDefaultBlockchain component from a specific path and renders it with default MDX components. It's used to provide instructions for creating a default blockchain using Avalanche-CLI.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/04-your-evm-blockchain/02-create-your-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CreateDefaultBlockchain from \"@/content/common/avalanche-starter-kit/create-default-blockchain.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<CreateDefaultBlockchain components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering CreateChain Component within ToolboxMdxWrapper in JSX\nDESCRIPTION: This JSX code renders the CreateChain component wrapped inside the ToolboxMdxWrapper component. This creates the interactive tool for blockchain creation mentioned in the document.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/02-l1-creation/05-create-blockchain.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<ToolboxMdxWrapper>\n    <CreateChain />\n</ToolboxMdxWrapper>\n```\n\n----------------------------------------\n\nTITLE: Importing Gallery Component in Next.js (JavaScript)\nDESCRIPTION: This snippet imports the Gallery component from the '@/components/content-design/gallery' module, typically used in a Next.js (React-based) project. The Gallery component likely provides a user interface element for displaying images or instructional content within documentation pages. There are no runtime dependencies other than the existence of the specified module.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/core-wallet/add-blockchain-to-wallet.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Gallery from '@/components/content-design/gallery';\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternative Token Transfer Function Name in Solidity\nDESCRIPTION: This snippet is a variant of the previous token contract where the transfer function is renamed to transferTokens. The functionality remains unchanged: it maintains balances in a mapping and moves tokens after checking the sender's balance. This demonstrates how naming inconsistency can create integration issues for users and other contracts. Same inputs/outputs and constraints as the earlier snippet; the only difference is the function name.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/06-contract-standarization/01-contract-standarization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Token {\n​\n    mapping(address => uint) balances;\n​\n    function transferTokens(address to, uint amount) public {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a webhook in AvaCloud API\nDESCRIPTION: This curl command updates an existing webhook identified by its ID. The request allows modifying webhook configuration parameters. The ID should be replaced with the actual webhook identifier.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/04-webhooks.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PATCH \\\n     --url https://glacier-api.avax.network/v1/webhooks/id \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: CLI Prompt for Validator Controller Address - Text\nDESCRIPTION: Lists options for selecting the address that will control the ValidatorManager contract on the blockchain. User is advised to use an existing stored key created with the Avalanche CLI. Security notice indicates EWOQ key should not be used in production.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-avalanche-l1.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n? Which address do you want to enable as controller of ValidatorManager contract?: \n  ▸ Get address from an existing stored key (created from avalanche key create or avalanche key import)\n    Custom\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Setting up environment variables for secure private key storage.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPRIVATEKEY=<YOUR_PRIVATE_KEY>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Blockchain Registry Address using Avalanche CLI\nDESCRIPTION: This command uses the Avalanche CLI to describe a custom blockchain named 'myblockchain', which includes its ICM Registry address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/03-interact-with-the-registry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe myblockchain\n```\n\n----------------------------------------\n\nTITLE: Importing PauseAndResume Content Module in JavaScript/MDX\nDESCRIPTION: This JavaScript import statement loads the content and associated components defined in the `pause-and-resume.mdx` file. The `@` likely represents an alias for a source directory (e.g., `src`), making the `PauseAndResume` variable hold the exported content/component from that file.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/03-avalanche-starter-kit/07-pause-and-resume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport PauseAndResume from \"@/content/common/avalanche-starter-kit/pause-and-resume.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Health via HTTP\nDESCRIPTION: This curl command checks the health status of all nodes in the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/health -d ''\n```\n\n----------------------------------------\n\nTITLE: Importing and Basic Usage of ChainRow Component in React\nDESCRIPTION: Shows how to import the ChainRow component from @avalabs/builderkit and implement it with basic properties including chain_id and name.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/builderkit/components/chains/chain-row.mdx#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChainRow } from '@avalabs/builderkit';\n\n// Basic usage\n<ChainRow \n  chain_id={43114}\n  name=\"Avalanche C-Chain\"\n/>\n\n// With custom styling\n<ChainRow \n  chain_id={43114}\n  name=\"Avalanche C-Chain\"\n  className=\"bg-gray-100 p-2 rounded-lg\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Avalanche Network Using Bash Command\nDESCRIPTION: Executes the 'avalanche network clean' bash command to delete all local data associated with a running Avalanche network instance. Requires Avalanche CLI to be installed in the user's environment and appropriate permissions to delete files and processes related to the network. The command takes no parameters and is typically run in a terminal; it has the irreversible effect of removing all persistent local data associated with the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/clean-network.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche network clean\n```\n\n----------------------------------------\n\nTITLE: Listing Staking Transactions in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of staking transactions in the Avalanche mainnet. It does not require any additional parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/11111111111111111111111111111111LpoYY/transactions:listStaking \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Teleporter Registry Address\nDESCRIPTION: Command to describe blockchain configuration and obtain the Teleporter Registry address.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/06-erc-20-to-erc-20-bridge/04-deploy-remote.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain describe myblockchain\n```\n\n----------------------------------------\n\nTITLE: Defining NFT Mint Output Structure in Text\nDESCRIPTION: Specifies the structure of an NFT Mint output using a Gantt-style diagram. It shows the byte layout for TypeID, GroupID, Locktime, Threshold, and Addresses fields.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| group_id  : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 24 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Specifying SECP256K1 Mint Operation Structure in Text Format\nDESCRIPTION: Gantt chart representation of the SECP256K1 Mint Operation binary format, showing field types, sizes, and total size calculation. This specification details how SECP256K1 Mint Operation data is structured in memory.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/x-chain/txn-format.mdx#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n+----------------------------------+------------------------------------+\n| type_id         : int            |                            4 bytes |\n+----------------------------------+------------------------------------+\n| address_indices : []int          | 4 + 4 * len(address_indices) bytes |\n+----------------------------------+------------------------------------+\n| mint_output     : MintOutput     |            size(mint_output) bytes |\n+----------------------------------+------------------------------------+\n| transfer_output : TransferOutput |        size(transfer_output) bytes |\n+----------------------------------+------------------------------------+\n                                   |       8 + 4 * len(address_indices) |\n                                   |                + size(mint_output) |\n                                   |      + size(transfer_output) bytes |\n                                   +------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Saving C-Chain Registry Address as Environment Variable\nDESCRIPTION: This command saves the C-Chain ICM Registry address as an environment variable for easy access in subsequent operations.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/07-icm-registry/03-interact-with-the-registry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport C_CHAIN_REGISTRY_ADDRESS=0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25\n```\n\n----------------------------------------\n\nTITLE: Importing Etna Upgrade Motivation Component in MDX\nDESCRIPTION: This code imports a React component called 'EtnaUpgradeMotivation' from a common content path and then renders it in the document. The component likely contains the detailed explanation of the Avalanche9000 upgrade motivation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/guides/etna-upgrade-motivation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport EtnaUpgradeMotivation from '@/content/common/multi-chain-architecture/etna-upgrade-motivation.mdx';\n\n<EtnaUpgradeMotivation />\n```\n\n----------------------------------------\n\nTITLE: Extended Two-Way Messaging Configuration\nDESCRIPTION: Complete configuration structure for bidirectional messaging between two blockchains, including dual source and destination configurations with separate contract addresses and private keys.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/05-multichain-relayer-config.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"p-chain-api\": {\n    \"base-url\": \"http://127.0.0.1:9650\",\n    \"query-parameters\": {},\n    \"http-headers\": null\n  },\n  \"info-api\": {\n    \"base-url\": \"http://127.0.0.1:9650\",\n    \"query-parameters\": {},\n    \"http-headers\": null\n  },\n  \"source-blockchains\": [\n    {\n      \"subnet-id\": \"<blockchain-id-A>\",\n      \"blockchain-id\": \"<blockchain-id-A>\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/<blockchain-id-A>/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"ws-endpoint\": {\n        \"base-url\": \"ws://127.0.0.1:9650/ext/bc/<blockchain-id-A>/ws\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"message-contracts\": {\n        \"0x0000000000000000000000000000000000000000\": {\n          \"message-format\": \"off-chain-registry\",\n          \"settings\": {\n            \"teleporter-registry-address\": \"0x<registry-address-A>\"\n          }\n        },\n        \"0x<contract-address-A>\": {\n          \"message-format\": \"teleporter\",\n          \"settings\": {\n            \"reward-address\": \"0x<reward-address-A>\"\n          }\n        }\n      }\n    },\n    {\n      \"subnet-id\": \"<blockchain-id-B>\",\n      \"blockchain-id\": \"<blockchain-id-B>\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/<blockchain-id-B>/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"ws-endpoint\": {\n        \"base-url\": \"ws://127.0.0.1:9650/ext/bc/<blockchain-id-B>/ws\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"message-contracts\": {\n        \"0x0000000000000000000000000000000000000000\": {\n          \"message-format\": \"off-chain-registry\",\n          \"settings\": {\n            \"teleporter-registry-address\": \"0x<registry-address-B>\"\n          }\n        },\n        \"0x<contract-address-B>\": {\n          \"message-format\": \"teleporter\",\n          \"settings\": {\n            \"reward-address\": \"0x<reward-address-B>\"\n          }\n        }\n      }\n    }\n  ],\n  \"destination-blockchains\": [\n    {\n      \"subnet-id\": \"<blockchain-id-A>\",\n      \"blockchain-id\": \"<blockchain-id-A>\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/<blockchain-id-A>/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"kms-key-id\": \"\",\n      \"kms-aws-region\": \"\",\n      \"account-private-key\": \"<your-private-key-A>\"\n    },\n    {\n      \"subnet-id\": \"<blockchain-id-B>\",\n      \"blockchain-id\": \"<blockchain-id-B>\",\n      \"vm\": \"evm\",\n      \"rpc-endpoint\": {\n        \"base-url\": \"http://127.0.0.1:9650/ext/bc/<blockchain-id-B>/rpc\",\n        \"query-parameters\": null,\n        \"http-headers\": null\n      },\n      \"kms-key-id\": \"\",\n      \"kms-aws-region\": \"\",\n      \"account-private-key\": \"<your-private-key-B>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CloseAndReopen Component in React/JSX\nDESCRIPTION: This code imports a reusable component named CloseAndReopen from a common location in the project structure. The component is then rendered in the current file, presumably to display instructions for closing and reopening a Codespace.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/03-avalanche-starter-kit/03-close-and-reopen-codespace.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CloseAndReopen from \"@/content/common/codespaces/close-and-reopen-codespace.mdx\";\n\n<CloseAndReopen />\n```\n\n----------------------------------------\n\nTITLE: Selecting New VM for Upgrade (CLI Output)\nDESCRIPTION: This output is shown during the Avalanche-CLI upgrade wizard, asking the user how they want to update the Avalanche L1's virtual machine. Options typically include upgrading to the latest Subnet-EVM version, selecting a specific version, or providing a custom VM binary, depending on the L1's current configuration.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/upgrade/avalanche-l1-virtual-machine.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n? How would you like to update your Avalanche L1's virtual machine:\n  ▸ Update to latest version\n    Update to a specific version\n    Update to a custom binary\n```\n\n----------------------------------------\n\nTITLE: Implementation of moduloPlus Function in Go\nDESCRIPTION: This solution implements the moduloPlus function which calculates the quotient and remainder when dividing the dividend by the divisor. It uses big.Int's DivMod method to perform both operations in a single step.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/08-calculator-precompile/04-implementing-precompile.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc moduloPlus(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {func moduloPlus(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {\n\tif remainingGas, err = contract.DeductGas(suppliedGas, ModuloPlusGasCost); err != nil {\n\t\treturn nil, 0, err\n\t}\n\t// attempts to unpack [input] into the arguments to the ModuloPlusInput.\n\t// Assumes that [input] does not include selector\n\t// You can use unpacked [inputStruct] variable in your code\n\tinputStruct, err := UnpackModuloPlusInput(input)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// CUSTOM CODE STARTS HERE\n\t_ = inputStruct             // CUSTOM CODE OPERATES ON INPUT\n\tvar output ModuloPlusOutput // CUSTOM CODE FOR AN OUTPUT\n\toutput.Multiple, output.Remainder = big.NewInt(0).DivMod(inputStruct.Dividend, inputStruct.Divisor, output.Remainder)\n\n\tpackedOutput, err := PackModuloPlusOutput(output)\n\tif err != nil {\n\t\treturn nil, remainingGas, err\n\t}\n\n\t// Return the packed output and the remaining gas\n\treturn packedOutput, remainingGas, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Teleporter Registry Environment Variable\nDESCRIPTION: Exports the Teleporter Registry Address as an environment variable for later use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/07-tokens-on-multiple-chains/02-deploy-additional-blockchain.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport TELEPORTER_REGISTRY_CHAIN2=0xa3493940a13b426BD2f7dA6E55A39c060C0e6020\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Private Key in Bash\nDESCRIPTION: An example of a private key represented as a hexadecimal string. This is the secret key used for signing messages in a signature scheme.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/cryptography/signature-schemes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n0c29dd3d37fc2f1f26609d4088023b25618cdded6fc7b4eb75d75898aba2cd3a\n```\n\n----------------------------------------\n\nTITLE: Setting Sender Contract Address Environment Variable\nDESCRIPTION: Bash command to export the deployed contract address as an environment variable for later use.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/06-invoking-functions/03-create-simple-calculator-sender.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SENDER_ADDRESS=0x789a5FDac2b37FCD290fb2924382297A6AE65860\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Function in Solidity\nDESCRIPTION: This snippet shows the definition of a simple public function named `emitEvent` in Solidity. It currently has an empty body and is used as a placeholder to later demonstrate how to emit an event from within a function.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/05-hello-world-part-2/06-events.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emitEvent() public {}\n```\n\n----------------------------------------\n\nTITLE: Using the upgrade export Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Demonstrates the basic usage syntax for the `avalanche blockchain upgrade export` subcommand. This command is used to export the generated upgrade bytes file to a specified location on the disk.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain upgrade export [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Signature Schemes Component in MDX\nDESCRIPTION: This code imports a reusable SignatureSchemes component from a common cryptography directory and the default MDX components from fumadocs-UI, then renders the imported component with the proper props.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/blockchain-fundamentals/04-signatures/xx-signature-schemes.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SignatureSchemes from \"@/content/common/cryptography/signature-schemes.mdx\"\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<SignatureSchemes components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Getting API Endpoints via HTTP\nDESCRIPTION: This curl command retrieves the API endpoints of all nodes in the cluster.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/introduction.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -k http://localhost:8081/v1/control/uris -d ''\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validator Logic Functions in Solidity\nDESCRIPTION: Example of adding new functions to implement custom validator management logic. This extends the functionality beyond what's provided by the base contract.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/custom-validator-manager.mdx#2025-04-23_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction customValidatorLogic(address validator) public {\n    // Implement custom logic\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Balance Output after Token Transfer\nDESCRIPTION: This snippet shows the expected output of the balance check command, representing 1 ether in wei (1 * 10^18).\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/04-your-evm-blockchain/03-sending-tokens.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n1000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering CertificatePage Component in React\nDESCRIPTION: This code snippet imports the CertificatePage component and renders it with the courseId prop set to 'interchain-messaging'. It's used to display a course completion certificate for the user.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/icm-chainlink/certificate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport CertificatePage from '@/components/quizzes/certificates';\n\n<CertificatePage courseId=\"interchain-messaging\"/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blockchain VMID\nDESCRIPTION: Command to print the virtual machine ID (VMID) for a specified blockchain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain vmid [subcommand] [flags]\n```\n\n----------------------------------------\n\nTITLE: Initiating Delegator Registration with ERC20 Tokens\nDESCRIPTION: Function to initiate delegator registration using ERC20 tokens. It takes the validation ID and delegation amount as parameters.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/05-pos-staking-manager/00-proof-of-stake.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initiateDelegatorRegistration(\n    bytes32 validationID,\n    uint256 delegationAmount\n) external nonReentrant returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fuji Testnet Network Parameters\nDESCRIPTION: Network configuration parameters required to add Avalanche Fuji Testnet to wallets like Core or MetaMask\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/deploy-nft-collection/deploy-erc-721.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNetwork Name: Avalanche C-Chain\nNew RPC URL: https://api.avax-test.network/ext/bc/C/rpc\nChainID: 43113\nSymbol: AVAX\nExplorer: https://testnet.snowtrace.io\n```\n\n----------------------------------------\n\nTITLE: Importing CreateDefaultBlockchain Component in JSX\nDESCRIPTION: This code snippet imports the CreateDefaultBlockchain component from a common directory and renders it with default MDX components. It's used to include instructions for creating a default blockchain in the Avalanche network.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/03-avalanche-starter-kit/03-create-blockchain.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport CreateDefaultBlockchain from \"@/content/common/avalanche-starter-kit/create-default-blockchain.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<CreateDefaultBlockchain components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Setting ContractAddress for MD5 Precompile in Go\nDESCRIPTION: Defines the unique contract address for the precompile. Uses the 0x03 range reserved for custom precompiles, with the specific address 0x0300000000000000000000000000000000000002.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/05-configkey-and-contractaddr.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar ContractAddress = common.HexToAddress(\"0x0300000000000000000000000000000000000002\") // SET A SUITABLE HEX ADDRESS HERE\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for ValidatorManager Contract Interaction in React\nDESCRIPTION: This code imports custom components used to create an interactive tool for checking the ValidatorManager contract. It includes a wrapper component and a specific component for reading contract data.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-validator-management/03-deploy-validator-manager/06-check-contract.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ToolboxMdxWrapper from \"../../../../toolbox/src/toolbox/components/ToolboxMdxWrapper.tsx\"\nimport ReadContract from \"../../../../toolbox/src/toolbox/ValidatorManager/ReadContract.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that opens a browser window and supports live reloading\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run start\n```\n\n----------------------------------------\n\nTITLE: Installing ZeroDev SDK via NPM\nDESCRIPTION: Command to install the ZeroDev SDK package using npm package manager\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/zerodev.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @zerodev/sdk\n```\n\n----------------------------------------\n\nTITLE: Register Action Output in Go VM\nDESCRIPTION: Register the GreetingResult output type with the VM's OutputParser.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/03-creating-actions/02-register-action.mdx#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nOutputParser.Register(&actions.GreetingResult{}, nil),\n```\n\n----------------------------------------\n\nTITLE: Installing Ramp SDK via NPM\nDESCRIPTION: Command to install the Ramp Network SDK package in a Node.js project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/integrations/ramp-network.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ramp-network/ramp-instant-sdk\n```\n\n----------------------------------------\n\nTITLE: Flags for the upgrade import Subcommand in Avalanche CLI (Bash)\nDESCRIPTION: Lists the command-line flags for the `avalanche blockchain upgrade import` subcommand. The key flag is `--upgrade-filepath` which specifies the path to the upgrade bytes file to be imported. Common flags like help, config file, log level, and skip update check are also included.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help              for import\n--upgrade-filepath string    Import upgrade bytes file into local environment\n--config string              config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string           log level for the application (default \"ERROR\")\n--skip-update-check skip     check for new versions\n```\n\n----------------------------------------\n\nTITLE: Writing Balance State in Go\nDESCRIPTION: Implements functions for writing balance information to the mutable state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/02-concepts/03-storage.mdx#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc SetBalance(\n\tctx context.Context,\n\tmu state.Mutable,\n\taddr codec.Address,\n\tbalance uint64,\n) error {\n\tk := BalanceKey(addr)\n\treturn setBalance(ctx, mu, k, balance)\n}\n\nfunc setBalance(\n\tctx context.Context,\n\tmu state.Mutable,\n\tkey []byte,\n\tbalance uint64,\n) error {\n\treturn mu.Insert(ctx, key, binary.BigEndian.AppendUint64(nil, balance))\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Vertices by Height in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of vertices at a specific height in a blockchain of the Avalanche mainnet. It requires the blockchain ID as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM/vertices:listByHeight \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Executing Contract Compilation Script in Shell\nDESCRIPTION: Command to run the compile.sh shell script which handles the compilation of contracts. This script likely contains all the necessary commands to compile smart contracts in the project.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/components/tools/common/openzeppelin-contracts-4.9/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncompile.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing MorpheusVM Container Logs\nDESCRIPTION: Command to access logs within the Docker container by opening a bash terminal and navigating to the network folder containing MorpheusVM logs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/upcoming_content/hypersdk/01-hypersdk-starter-kit/03-explore-morpheusvm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it devnet bash -c \"cd /root/.tmpnet/networks/latest_morpheusvm-e2e-tests && bash\"\n```\n\n----------------------------------------\n\nTITLE: Avalanche Node Command Global Flags in Bash\nDESCRIPTION: Global flags available for all avalanche node commands, including help flag, config file path, log level, and update check options.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/deploy-a-avalanche-l1/cli_structure.md#2025-04-23_snippet_90\n\nLANGUAGE: bash\nCODE:\n```\n-h, --help help             for node\n--config string             config file (default is $HOME/.avalanche-cli/config.json)\n--log-level string          log level for the application (default \"ERROR\")\n--skip-update-check skip    check for new versions\n```\n\n----------------------------------------\n\nTITLE: Navigating to Precompile-EVM Directory\nDESCRIPTION: Change directory to the Precompile-EVM project root folder in the GOPATH.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/10-stateful-counter-precompile/12-build-your-precompile.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $GOPATH/src/github.com/ava-labs/precompile-evm\n```\n\n----------------------------------------\n\nTITLE: Rendering Source, Message, and Destination Components in Markdown\nDESCRIPTION: This snippet demonstrates how to create a flexible layout using markdown and HTML to display information about source, message, and destination in interoperable blockchain systems. It includes images and descriptions for each component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/02-interoperability/02-source-message-destination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"flex space-x-8\">\n    <div class=\"flex-1\">\n        ![](/common-images/teleporter/source.png)\n        # Source\n        - Origin of communication\n        - Sender calls contract\n    </div>\n    <div class=\"flex-1\">\n        ![](/common-images/teleporter/message.png)\n        # Message\n        - Contains source, destination, and encoded data\n        - Signature guarantees  authenticity\n    </div>\n    <div class=\"flex-1\">\n        ![](/common-images/teleporter/destination.png)\n        # Destination\n        - Submission of message as transaction\n        - Verifies signatures\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Building Precompile-EVM\nDESCRIPTION: Execute the build script to compile the custom EVM implementation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/07-hash-function-precompile/07-build-and-run.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/build.sh\n```\n\n----------------------------------------\n\nTITLE: Validator Binary Structure Example\nDESCRIPTION: Example showing the binary structure of a validator with NodeID, Start time, End time and Weight parameters\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/api-reference/p-chain/txn-format.mdx#2025-04-23_snippet_59\n\nLANGUAGE: text\nCODE:\n```\n[\n    NodeID  <- 0xaa18d3991cf637aa6c162f5e95cf163f69cd8291\n    Start   <- 0x61ef3d98\n    End     <- 0x620303df\n    Wght    <- 0x14\n]\n\n=\n[\n  // node id\n  0xaa, 0x18, 0xd3, 0x99, 0x1c, 0xf6, 0x37,\n  0xaa, 0x6c, 0x16, 0x2f, 0x5e, 0x95, 0xcf,\n  0x16, 0x3f, 0x69, 0xcd, 0x82, 0x91,\n  // start\n  0x61, 0xef, 0x3d, 0x98,\n  // end\n  0x62, 0x03, 0x03, 0xdf,\n  // wght\n  0x14,\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies and Configuration\nDESCRIPTION: Initial setup importing required modules and configuring private key access.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nconst ethers = require(\"ethers\");\nconst Avalanche = require(\"avalanche\").Avalanche;\nrequire(\"dotenv\").config();\n\nconst privateKey = process.env.PRIVATEKEY;\n```\n\n----------------------------------------\n\nTITLE: Rendering Course Certificate Component in React/JSX\nDESCRIPTION: Imports and renders a CertificatePage component that generates a completion certificate for the Avalanche Fundamentals course. The component receives a courseId prop to identify which course the certificate is for.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avalanche-fundamentals/get-certificate.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CertificatePage courseId=\"avalanche-fundamentals\"/>\n```\n\n----------------------------------------\n\nTITLE: Deploying ICTT Contracts\nDESCRIPTION: Commands to deploy NativeTokenHome and NativeTokenRemote contracts on both chains\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/03-multi-chain-ecosystems/04-use-any-native-as-native-token.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nforge create --rpc-url local-c --private-key $PK lib/icm-contracts/contracts/ictt/TokenHome/NativeTokenHome.sol:NativeTokenHome --constructor-args $TELEPORTER_REGISTRY_C_CHAIN $FUNDED_ADDRESS $WRAPPED_NATIVE_C_CHAIN --broadcast\n\nforge create --rpc-url myblockchain --private-key $PK lib/icm-contracts/contracts/ictt/TokenRemote/NativeTokenRemote.sol:NativeTokenRemote --constructor-args \"(${TELEPORTER_REGISTRY_L1}, ${FUNDED_ADDRESS}, ${C_CHAIN_BLOCKCHAIN_ID_HEX}, ${NATIVE_HOME_TRANSFERER_C_CHAIN})\" \"NATV\" 700000000000000000000 0 false 0 --broadcast\n```\n\n----------------------------------------\n\nTITLE: Completing Delegator Removal in Solidity (PoS only)\nDESCRIPTION: Describes the process of completing delegator removal by calling the completeEndDelegation function. This function is called after receiving a SubnetValidatorWeightUpdateMessage from the P-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nPoSValidatorManager.completeEndDelegation()\n```\n\n----------------------------------------\n\nTITLE: Validator Manager Contract Identifier\nDESCRIPTION: Represents the smart contract responsible for managing validator registration and state on the C-Chain.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/avalanche-l1s/validator-manager/add-validator.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Identifier\nCODE:\n```\nValidatorManager\n```\n\n----------------------------------------\n\nTITLE: Rendering Imported MDX Component\nDESCRIPTION: This snippet demonstrates rendering the imported `PauseAndResume` component within the MDX file. This effectively includes the content from the imported file at this location.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/solidity-foundry/02-avalanche-starter-kit/05-pause-and-resume.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PauseAndResume />\n```\n\n----------------------------------------\n\nTITLE: Deploying Custom Blockchain Locally\nDESCRIPTION: Deploy the configured blockchain to a local environment using Avalanche CLI. The process takes approximately 1 minute and provides an RPC URL upon completion.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/customizing-evm/05-genesis-configuration/08-build-and-run-custom-genesis-blockchain.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain deploy myblockchain --local\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering PauseAndResume Component in JSX\nDESCRIPTION: This snippet imports the PauseAndResume component and default MDX components, then renders the PauseAndResume component with the default MDX components passed as props. This setup is likely part of a documentation or guide page for Avalanche L1 management.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/02-avalanche-starter-kit/06-pause-and-resume.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PauseAndResume from \"@/content/common/avalanche-starter-kit/pause-and-resume.mdx\";\n\nimport defaultMdxComponents from \"fumadocs-ui/mdx\";\n\n<PauseAndResume components={defaultMdxComponents}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Navigation Component in JSX\nDESCRIPTION: JSX code that creates a navigation interface using Cards component to display different interoperability protocols. Each card links to detailed documentation about specific cross-chain communication protocols.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n<Card title=\"Avalanche Interchain Messaging\" description=\"Learn about Avalanche Interchain Messaging, a protocol for cross-chain communication.\" href=\"/docs/cross-chain/avalanche-warp-messaging/overview\" />\n\n<Card title=\"ICM Contracts\" description=\"Learn about ICM Contracts, a protocol for cross-chain communication between EVM Chains.\" href=\"/docs/cross-chain/teleporter/overview\" />\n\n<Card title=\"Interchain Token Transfer\" description=\"Learn about Avalanche Interchain Token Transfer (ICTT), a protocol for transferring tokens between Avalanche L1s.\" href=\"/docs/cross-chain/interchain-token-transfer/overview\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Creating Second Teleporter-Enabled Avalanche L1 Chain\nDESCRIPTION: Command to create the second Avalanche L1 chain (chain2) with similar Teleporter-enabled settings using the latest Subnet-EVM version.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/cross-chain/teleporter/teleporter-on-local-network.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche blockchain create <chain2> --evm --latest\\\n```\n\n----------------------------------------\n\nTITLE: C-Chain API Configuration\nDESCRIPTION: Setting up Avalanche C-Chain API connection for fee estimation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/advanced-tutorials/dynamic-gas-fees.mdx#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nconst chainId = 43113;\nconst avalanche = new Avalanche(\n  \"api.avax-test.network\",\n  undefined,\n  \"https\",\n  chainId\n);\nconst cchain = avalanche.CChain();\n```\n\n----------------------------------------\n\nTITLE: Hardhat Run Command for Verification Script Execution\nDESCRIPTION: Bash command to execute a Hardhat script for smart contract verification. It specifies the script file and the network to use for verification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/dapps/verify-contract/hardhat.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/verify.ts --network fuji\n```\n\n----------------------------------------\n\nTITLE: Disabled Pruning Configuration\nDESCRIPTION: JSON configuration to disable offline pruning after completion while maintaining the data directory reference.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/reduce-disk-usage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"offline-pruning-enabled\": false,\n  \"offline-pruning-data-directory\": \"/home/ubuntu/offline-pruning\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mainnet Service Configuration\nDESCRIPTION: Systemd service configuration for running AvalancheGo on mainnet. Similar to testnet config but without network-id specification.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/maintain/run-as-background-service.mdx#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[Unit]\nDescription=Avalanche Node service\nAfter=network.target\n\n[Service]\nUser='YourUserHere'\nGroup='YourUserHere'\nRestart=always\nPrivateTmp=true\nTimeoutStopSec=60s\nTimeoutStartSec=10s\nStartLimitInterval=120s\nStartLimitBurst=5\nWorkingDirectory=/Your/Path/To/avalanchego\nExecStart=/Your/Path/To/avalanchego/./avalanchego \\\n   --api-metrics-enabled=true\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Starting Avalanche Node on Linux (Mainnet)\nDESCRIPTION: Command to start an Avalanche node on Linux for the Avalanche Mainnet.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/run-a-node/using-binary.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-<VERSION>-linux/avalanchego\n```\n\n----------------------------------------\n\nTITLE: Removing AvalancheGo Installation\nDESCRIPTION: Command to remove the AvalancheGo node installation from the system.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/nodes/using-install-script/node-config-maintenance.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./avalanchego-installer.sh --remove\n```\n\n----------------------------------------\n\nTITLE: Getting RPC Server Version with avalanche-network-runner (Bash)\nDESCRIPTION: Shows how to retrieve the RPC server version using 'avalanche-network-runner control rpc_version'. Includes both the CLI command and the corresponding simple POST request using curl to the API endpoint.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/avalanche-network-runner/anr-commands.mdx#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\navalanche-network-runner control rpc_version [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build/avalanche-network-runner control rpc_version\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8081/v1/control/rpcversion'\n```\n\n----------------------------------------\n\nTITLE: Selecting Validator Disable Key - Avalanche CLI - Bash\nDESCRIPTION: Shows the prompt for choosing which stored key can later disable the validator via P-Chain transactions. This key acts as an administrative control for disabling validator participation. Interactive selection is required during the validator addition workflow to set this permission.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-on-fuji-testnet.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n? Which stored key should be used be able to disable the validator using P-Chain transactions?:\n    test\n  ▸ mytestkey\n```\n\n----------------------------------------\n\nTITLE: Second Ledger Signing Prompt for Validator Transaction\nDESCRIPTION: Prompt for the second signer to confirm the validator addition transaction on their Ledger hardware wallet. The CLI displays the address from the connected Ledger device.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nLedger address: P-avax1g7nkguzg8yju8cq3ndzc9lql2yg69s9ejqa2af\n*** Please sign TX hash on the ledger device ***\n```\n\n----------------------------------------\n\nTITLE: Ledger Error Message for Incorrect Authentication Keys\nDESCRIPTION: Error message displayed when attempting to sign a transaction with a Ledger device that doesn't contain the required Avalanche L1 authentication keys. The CLI detects the incorrect keys and aborts the signing process.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/create-deploy-avalanche-l1s/deploy-with-multisig-auth.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nLedger address: P-avax1kdzq569g2c9urm9887cmldlsa3w3jhxe0knfy5\nError: wallet does not contain Avalanche L1 auth keys\nexit status 1\n```\n\n----------------------------------------\n\nTITLE: Cleaning Local Avalanche Network with Avalanche-CLI in Bash\nDESCRIPTION: This command uses Avalanche-CLI to shut down and remove any local Avalanche networks previously started by the tool. The `--hard` flag ensures a complete cleanup. This is a step to resolve deployment timeouts caused by conflicting network instances.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/tooling/maintain/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\navalanche network clean --hard\n```\n\n----------------------------------------\n\nTITLE: Setting Default Gas Costs for HelloWorld Precompile Functions\nDESCRIPTION: Example of default gas cost configuration for precompile functions that need to be modified. Shows placeholders for the SayHelloGasCost and SetGreetingGasCost with a note to include AllowList read costs.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/docs/virtual-machines/custom-precompiles/defining-precompile.mdx#2025-04-23_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nSayHelloGasCost    uint64 = 0                                  // SET A GAS COST HERE\nSetGreetingGasCost uint64 = 0 + allowlist.ReadAllowListGasCost // SET A GAS COST HERE\n```\n\n----------------------------------------\n\nTITLE: Listing Blocks Proposed by Node in Avalanche Mainnet (Bash)\nDESCRIPTION: This endpoint retrieves a list of blocks proposed by a specific node in the Avalanche mainnet. It requires the node ID as a path parameter.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/02-overview/03-dataapi-endpoints.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n     --url https://glacier-api.avax.network/v1/networks/mainnet/blockchains/11111111111111111111111111111111LpoYY/nodes/{nodeId}/blocks \\\n     --header 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Setting AvaCloud API Key Environment Variable\nDESCRIPTION: Creates a .env file in the project root and sets the AVACLOUD_API_KEY environment variable with the API key value.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/03-environment-setup/02-setup-starter-kit.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAVACLOUD_API_KEY=ac_rGIKESl9_9DWuLfJJQLSV5nlzbKR7eHxym6XW3XEQJeNBDRxI...\n```\n\n----------------------------------------\n\nTITLE: Starting NextJS Development Server\nDESCRIPTION: Launches the NextJS application in development mode with hot reload enabled using yarn.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/avacloudapis/03-environment-setup/02-setup-starter-kit.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Relayer Logs via CLI\nDESCRIPTION: Command to view relayer logs through the Avalanche CLI interface.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-messaging/10-running-a-relayer/06-analyze-relayer-logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\navalanche interchain relayer logs\n```\n\n----------------------------------------\n\nTITLE: Generating Payload for Token Swap\nDESCRIPTION: TypeScript code to generate the encoded payload for token swap parameters including tokenOut address and minAmountOut.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/interchain-token-transfer/13-cross-chain-token-swaps/08-deploy-wrapped-exchange-contract.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ethers } = require(\"ethers\");\n\nfunction encode() {\n\n    const struct = {\n        tokenOut: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n        minAmountOut: 0\n    };\n\n    const types = [\"address\", \"uint256\"];\n    const encoded = ethers.AbiCoder.defaultAbiCoder().encode(types, [ struct.tokenOut, struct.minAmountOut ]);\n\n    console.log(encoded);\n\n}\n\nencode();\n```\n\n----------------------------------------\n\nTITLE: Initializing Delegator Removal in Solidity (PoS only)\nDESCRIPTION: Explains how to initiate the removal of a delegator by calling the initializeEndDelegation function. An optional uptime proof can be provided to determine rewards eligibility.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/03-staking-contract-post-etna.mdx#2025-04-23_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nPoSValidatorManager.initializeEndDelegation()\n```\n\n----------------------------------------\n\nTITLE: Completing Validator Registration in Solidity\nDESCRIPTION: This function from the ValidatorManager contract completes the validator registration process by processing the signed Warp Message and updating the contract state.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/l1-tokenomics/04-staking/04-register-validators.mdx#2025-04-23_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction completeValidatorRegistration(uint32 messageIndex)\n```\n\n----------------------------------------\n\nTITLE: Embedding an Interactive Quiz Component in Markdown\nDESCRIPTION: This snippet embeds an interactive quiz element within the documentation page using a custom component tag `<Quiz>`. The specific quiz is identified by the `quizId` attribute. This requires the underlying documentation framework to recognize and render the component.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/academy/multi-chain-architecture/06-permissioning-users/02-compliance.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Quiz quizId=\"407\"/>\n```\n\n----------------------------------------\n\nTITLE: Verifying Avalanche CLI Installation with Command-Line (Bash)\nDESCRIPTION: This snippet demonstrates how to verify if the Avalanche CLI is properly installed within a hosted environment by running 'avalanche -h' in the terminal. It expects the Avalanche CLI to be pre-installed or otherwise accessible from the terminal, with no additional parameters required. The command outputs the CLI's help menu, confirming successful installation.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/avalanche-starter-kit/set-up.mdx#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\navalanche -h\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled Telegram Community Link Button in React\nDESCRIPTION: Creates a styled anchor element that links to the Avalanche Academy Telegram community. The button uses the cn utility to apply button variants with a large size.\nSOURCE: https://github.com/ava-labs/builders-hub.git/blob/master/content/common/intro/course-chat.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<a\n    href=\"https://t.me/avalancheacademy\"\n    target='_blank'\n    className={cn(buttonVariants({ size: 'lg' }))}\n>\n    Join Telegram Course Chat\n</a>\n```"
  }
]