[
  {
    "owner": "punkpeye",
    "repo": "fastmcp",
    "content": "TITLE: Authenticating Clients in FastMCP (TypeScript)\nDESCRIPTION: This example demonstrates how to authenticate clients connecting to a FastMCP server using a custom authentication function. The `authenticate` function intercepts incoming requests, extracts authentication information (e.g., an API key from the headers), and validates it. Upon successful authentication, it returns session data that is accessible within the tool's context. If authentication fails, it throws an error, preventing access to the server.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthError } from \"fastmcp\";\n\nconst server = new FastMCP({\n  name: \"My Server\",\n  version: \"1.0.0\",\n  authenticate: ({request}) => {\n    const apiKey = request.headers[\"x-api-key\"];\n\n    if (apiKey !== '123') {\n      throw new Response(null, {\n        status: 401,\n        statusText: \"Unauthorized\",\n      });\n    }\n\n    // Whatever you return here will be accessible in the `context.session` object.\n    return {\n      id: 1,\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Data in FastMCP Tools (TypeScript)\nDESCRIPTION: This snippet shows how to access authenticated session data within a FastMCP tool's `execute` function. The `session` object, passed in the context, contains the data returned by the `authenticate` function during the authentication process. This data can be used to personalize the tool's behavior or enforce access control based on the authenticated user.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addTool({\n  name: \"sayHello\",\n  execute: async (args, { session }) => {\n    return `Hello, ${session.id}!`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Prompt to FastMCP (TypeScript)\nDESCRIPTION: This code snippet shows how to add a prompt to a FastMCP server. A prompt defines a reusable template for generating text, often used for interactions with language models. The `load` function takes arguments and constructs the final prompt text, which is then sent to the language model. This example creates a prompt for generating Git commit messages.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addPrompt({\n  name: \"git-commit\",\n  description: \"Generate a Git commit message\",\n  arguments: [\n    {\n      name: \"changes\",\n      description: \"Git diff or description of changes\",\n      required: true,\n    },\n  ],\n  load: async (args) => {\n    return `Generate a concise but descriptive commit message for these changes:\\n\\n${args.changes}`;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Server Events in FastMCP (TypeScript)\nDESCRIPTION: This example demonstrates how to listen for events emitted by the FastMCP server using the `on` method. The code shows how to listen for `connect` and `disconnect` events, logging information about the client session when these events occur. This allows developers to react to client connection and disconnection events, enabling features like session tracking and resource management.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nserver.on(\"connect\", (event) => {\n  console.log(\"Client connected:\", event.session);\n});\n\nserver.on(\"disconnect\", (event) => {\n  console.log(\"Client disconnected:\", event.session);\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing User Errors in FastMCP (JavaScript)\nDESCRIPTION: This snippet illustrates how to throw a `UserError` in FastMCP to indicate errors that should be displayed to the user. A `UserError` instance is created and thrown when a specific condition is met (e.g., the URL starts with a disallowed domain). This signals to the client that the error is user-facing and should be presented accordingly.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserError } from \"fastmcp\";\n\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    if (args.url.startsWith(\"https://example.com\")) {\n      throw new UserError(\"This URL is not allowed\");\n    }\n\n    return \"done\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Resource to FastMCP (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add a resource to a FastMCP server, making data available to clients. It defines a resource with a URI, name, and MIME type, and provides an asynchronous `load` function that returns the resource content (in this case, the text content from reading a log file). This example shows how to serve text-based resources, such as log files.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addResource({\n  uri: \"file:///logs/app.log\",\n  name: \"Application Logs\",\n  mimeType: \"text/plain\",\n  async load() {\n    return {\n      text: await readLogFile(),\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Prompt Argument Auto-completion in FastMCP (JavaScript)\nDESCRIPTION: This example illustrates how to provide auto-completion for prompt arguments. Similar to resource templates, prompts can define a `complete` function for each argument. This function is called by the client to get suggestions, improving the user experience when interacting with prompts. The function asynchronously returns suggested values based on the current input.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addPrompt({\n  name: \"countryPoem\",\n  description: \"Writes a poem about a country\",\n  load: async ({ name }) => {\n    return `Hello, ${name}!`;\n  },\n  arguments: [\n    {\n      name: \"name\",\n      description: \"Name of the country\",\n      required: true,\n      complete: async (value) => {\n        if (value === \"Germ\") {\n          return {\n            values: [\"Germany\"],\n          };\n        }\n\n        return {\n          values: [],\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Resource Template Argument Auto-completion in FastMCP (TypeScript)\nDESCRIPTION: This example demonstrates how to provide auto-completion suggestions for resource template arguments. The `arguments` array includes a `complete` function, which is called by the client to get possible values for a given argument. The `complete` function returns an object with a `values` array, containing the suggested values. This improves the user experience by providing intelligent suggestions for resource template arguments.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addResourceTemplate({\n  uriTemplate: \"file:///logs/{name}.log\",\n  name: \"Application Logs\",\n  mimeType: \"text/plain\",\n  arguments: [\n    {\n      name: \"name\",\n      description: \"Name of the log\",\n      required: true,\n      complete: async (value) => {\n        if (value === \"Example\") {\n          return {\n            values: [\"Example Log\"],\n          };\n        }\n\n        return {\n          values: [],\n        };\n      },\n    },\n  ],\n  async load({ name }) {\n    return {\n      text: `Example log content for ${name}`,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Prompt Argument Auto-completion using Enum in FastMCP (JavaScript)\nDESCRIPTION: This snippet shows how to use the `enum` property to automatically provide auto-completion suggestions for prompt arguments. By defining an `enum` array, the server automatically populates the suggestions with the values in the array. This simplifies the process of providing suggestions for arguments with a limited set of valid values.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addPrompt({\n  name: \"countryPoem\",\n  description: \"Writes a poem about a country\",\n  load: async ({ name }) => {\n    return `Hello, ${name}!`;\n  },\n  arguments: [\n    {\n      name: \"name\",\n      description: \"Name of the country\",\n      required: true,\n      enum: [\"Germany\", \"France\", \"Italy\"],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Sampling in FastMCP Session (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a sampling request using the `requestSampling` method of a `FastMCPSession` object. The code defines the messages for the sampling request, along with system prompt, context inclusion and max tokens limit. The `requestSampling` method returns the response from the sampling request.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nawait session.requestSampling({\n  messages: [\n    {\n      role: \"user\",\n      content: {\n        type: \"text\",\n        text: \"What files are in the current directory?\",\n      },\n    },\n  ],\n  systemPrompt: \"You are a helpful file system assistant.\",\n  includeContext: \"thisServer\",\n  maxTokens: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning Combination of Content Types\nDESCRIPTION: Adds a tool to the FastMCP server that returns a combination of text, image, and audio content in a single response. It shows how to combine different content types to provide a rich and informative result to the client.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: \"Hello, world!\",\n        },\n        {\n          type: \"image\",\n          data: \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n          mimeType: \"image/png\",\n        },\n        {\n          type: \"audio\",\n          data: \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n          mimeType: \"audio/mpeg\",\n        },\n      ],\n    };\n  },\n\n  // or...\n  // execute: async (args) => {\n  //   const imgContent = imageContent({\n  //     url: \"https://example.com/image.png\",\n  //   });\n  //   const audContent = audioContent({\n  //     url: \"https://example.com/audio.mp3\",\n  //   });\n  //   return {\n  //     content: [\n  //       {\n  //         type: \"text\",\n  //         text: \"Hello, world!\",\n  //       },\n  //       imgContent,\n  //       audContent,\n  //     ],\n  //   };\n  // },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Resources in FastMCP (TypeScript)\nDESCRIPTION: This code snippet shows how the `load` function can return an array of resources, enabling the server to provide multiple resources in response to a single request. This is useful for scenarios where a single URI represents a collection of data, like files in a directory. The example returns two text-based resources.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nasync load() {\n  return [\n    {\n      text: \"First file content\",\n    },\n    {\n      text: \"Second file content\",\n    },\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Progress in FastMCP (JavaScript)\nDESCRIPTION: This code shows how to report progress updates to the client using the `reportProgress` function within the context object. The `reportProgress` function takes an object with `progress` and `total` properties, allowing clients to visualize the progress of long-running operations. The snippet demonstrates reporting progress at the start and end of a file download.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args, { reportProgress }) => {\n    reportProgress({\n      progress: 0,\n      total: 100,\n    });\n\n    // ...\n\n    reportProgress({\n      progress: 100,\n      total: 100,\n    });\n\n    return \"done\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Logging Messages to Client in FastMCP (JavaScript)\nDESCRIPTION: This snippet demonstrates how to log messages to the client using the `log` object within the `execute` function of a FastMCP tool. The `log` object provides methods such as `info`, `debug`, `warn`, and `error` for different logging levels. The example shows logging an informational message with associated data (URL) during a file download process.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args, { log }) => {\n    log.info(\"Downloading file...\", {\n      url,\n    });\n\n    // ...\n\n    log.info(\"Downloaded file\");\n\n    return \"done\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Binary Content in FastMCP (TypeScript)\nDESCRIPTION: This example demonstrates how to return binary data as a resource.  The `load` function returns an object containing a `blob` property, which holds the base64-encoded binary data. Clients can then decode and use this binary data as needed.  This snippet is used to send any kind of binary data, for example images, to the client.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nasync load() {\n  return {\n    blob: 'base64-encoded-data'\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tool with ArkType Schema\nDESCRIPTION: Adds a tool to the FastMCP server using ArkType for parameter validation.  The tool fetches the content of a URL and returns it. ArkType is used to define the schema of the tool's parameters.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type } from \"arktype\";\n\nserver.addTool({\n  name: \"fetch-arktype\",\n  description: \"Fetch the content of a url (using ArkType)\",\n  parameters: type({\n    url: \"string\",\n  }),\n  execute: async (args) => {\n    return await fetchWebpageContent(args.url);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool with Zod Schema\nDESCRIPTION: Adds a tool to the FastMCP server using Zod for parameter validation. The tool fetches the content of a URL and returns it.  Zod is used to define the schema of the tool's parameters.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\n\nserver.addTool({\n  name: \"fetch-zod\",\n  description: \"Fetch the content of a url (using Zod)\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return await fetchWebpageContent(args.url);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool with Valibot Schema\nDESCRIPTION: Adds a tool to the FastMCP server using Valibot for parameter validation.  The tool fetches the content of a URL and returns it. Valibot is used to define the schema of the tool's parameters.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as v from \"valibot\";\n\nserver.addTool({\n  name: \"fetch-valibot\",\n  description: \"Fetch the content of a url (using Valibot)\",\n  parameters: v.object({\n    url: v.string(),\n  }),\n  execute: async (args) => {\n    return await fetchWebpageContent(args.url);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning Image Content\nDESCRIPTION: Adds a tool to the FastMCP server that returns an image as part of its response.  It demonstrates how to use the `imageContent` helper function to construct the image content object using a URL, file path, or buffer.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { imageContent } from \"fastmcp\";\n\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return imageContent({\n      url: \"https://example.com/image.png\",\n    });\n\n    // or...\n    // return imageContent({\n    //   path: \"/path/to/image.png\",\n    // });\n\n    // or...\n    // return imageContent({\n    //   buffer: Buffer.from(\"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\", \"base64\"),\n    // });\n\n    // or...\n    // return {\n    //   content: [\n    //     await imageContent(...)\n    //   ],\n    // };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning Audio Content\nDESCRIPTION: Adds a tool to the FastMCP server that returns audio content. It uses the `audioContent` helper to construct the audio content object, allowing specification of the audio source via URL, file path, or buffer.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { audioContent } from \"fastmcp\";\n\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return audioContent({\n      url: \"https://example.com/audio.mp3\",\n    });\n\n    // or...\n    // return audioContent({\n    //   path: \"/path/to/audio.mp3\",\n    // });\n\n    // or...\n    // return audioContent({\n    //   buffer: Buffer.from(\"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\", \"base64\"),\n    // });\n\n    // or...\n    // return {\n    //   content: [\n    //     await audioContent(...)\n    //   ],\n    // };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning Audio Data\nDESCRIPTION: Adds a tool to the FastMCP server which returns raw audio data. This example explicitly sets the `type`, `data` (base64 encoded), and `mimeType` properties in the `content` object.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return {\n      content: [\n        {\n          type: \"audio\",\n          data: \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n          mimeType: \"audio/mpeg\",\n        },\n      ],\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Events in FastMCP (TypeScript)\nDESCRIPTION: This example demonstrates how to listen for events emitted by a FastMCPSession using the `on` method. The code shows how to listen for `rootsChanged` and `error` events, logging information about the root changes or errors. This allows developers to react to session-specific events.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nsession.on(\"rootsChanged\", (event) => {\n  console.log(\"Roots changed:\", event.roots);\n});\n\nsession.on(\"error\", (event) => {\n  console.error(\"Error:\", event.error);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Client Capabilities in FastMCP Session (TypeScript)\nDESCRIPTION: This snippet shows how to access the client capabilities using the `clientCapabilities` property of a `FastMCPSession` object.  The client capabilities provide information about the client's features and limitations, allowing the server to adapt its behavior accordingly.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nsession.clientCapabilities;\n```\n\n----------------------------------------\n\nTITLE: Accessing Logging Level in FastMCP Session (TypeScript)\nDESCRIPTION: This snippet shows how to access the logging level set by the client using the `loggingLevel` property of a `FastMCPSession` object. The server can adjust its logging verbosity based on the client's preferences. The loggingLevel is determined by the client settings.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nsession.loggingLevel;\n```\n\n----------------------------------------\n\nTITLE: Accessing Roots in FastMCP Session (TypeScript)\nDESCRIPTION: This snippet shows how to access the roots set by the client using the `roots` property of a `FastMCPSession` object. The roots property defines the allowed base directories for the client for any file operations.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nsession.roots;\n```\n\n----------------------------------------\n\nTITLE: Adding a Resource Template in FastMCP (TypeScript)\nDESCRIPTION: This snippet illustrates how to add a resource template to a FastMCP server. A resource template defines a URI pattern with placeholders (e.g., `{name}`), which are filled in based on provided arguments. The `load` function receives these arguments and uses them to generate the resource content. This enables dynamic resource generation based on client-specified parameters.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nserver.addResourceTemplate({\n  uriTemplate: \"file:///logs/{name}.log\",\n  name: \"Application Logs\",\n  mimeType: \"text/plain\",\n  arguments: [\n    {\n      name: \"name\",\n      description: \"Name of the log\",\n      required: true,\n    },\n  ],\n  async load({ name }) {\n    return {\n      text: `Example log content for ${name}`,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Sessions in FastMCP (TypeScript)\nDESCRIPTION: This snippet shows how to access the active client sessions in FastMCP by referencing the `server.sessions` property. Each client connection results in a new server instance, facilitating 1:1 communication. The documentation doesn't describe what is returned but highlights its existence.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nserver.sessions;\n```\n\n----------------------------------------\n\nTITLE: Accessing Server in FastMCP Session (TypeScript)\nDESCRIPTION: This snippet shows how to access the MCP server associated with the session using the `server` property of a `FastMCPSession` object. The server property contains an instance of the MCP server.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nsession.server;\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning String Content Object\nDESCRIPTION: Adds a tool to the FastMCP server that returns a content object containing a string.  This demonstrates the explicit way to return text content from a tool.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: \"Hello, world!\",\n        },\n      ],\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning Image Data\nDESCRIPTION: Adds a tool to the FastMCP server that returns image data directly within a content object.  This shows the explicit structure of the content object when returning an image.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return {\n      content: [\n        {\n          type: \"image\",\n          data: \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\",\n          mimeType: \"image/png\",\n        },\n      ],\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning List of Messages\nDESCRIPTION: Adds a tool to the FastMCP server that returns a list of messages within a content object. This allows the tool to return multiple text-based responses.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return {\n      content: [\n        { type: \"text\", text: \"First message\" },\n        { type: \"text\", text: \"Second message\" },\n      ],\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Tool Returning String\nDESCRIPTION: Adds a tool to the FastMCP server that returns a simple string as the result of its execution.  The execute function returns the string \"Hello, world!\".\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nserver.addTool({\n  name: \"download\",\n  description: \"Download a file\",\n  parameters: z.object({\n    url: z.string(),\n  }),\n  execute: async (args) => {\n    return \"Hello, world!\";\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing FastMCP Server\nDESCRIPTION: Initializes a FastMCP server, defines a simple addition tool, and starts the server using the stdio transport. The server listens for input on standard input and writes output to standard output.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FastMCP } from \"fastmcp\";\nimport { z } from \"zod\"; // Or any validation library that supports Standard Schema\n\nconst server = new FastMCP({\n  name: \"My Server\",\n  version: \"1.0.0\",\n});\n\nserver.addTool({\n  name: \"add\",\n  description: \"Add two numbers\",\n  parameters: z.object({\n    a: z.number(),\n    b: z.number(),\n  }),\n  execute: async (args) => {\n    return String(args.a + args.b);\n  },\n});\n\nserver.start({\n  transportType: \"stdio\",\n});\n```\n\n----------------------------------------\n\nTITLE: Starting FastMCP Server with SSE Support\nDESCRIPTION: Starts a FastMCP server with Server-Sent Events (SSE) support, specifying the endpoint and port for SSE connections. The server listens for SSE connections on the specified endpoint and port, allowing clients to receive real-time updates.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nserver.start({\n  transportType: \"sse\",\n  sse: {\n    endpoint: \"/sse\",\n    port: 8080,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to FastMCP Server via SSE\nDESCRIPTION: Connects to a FastMCP server using the SSEClientTransport. This code snippet demonstrates how to establish a connection to a FastMCP server that is configured to use Server-Sent Events for communication.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SSEClientTransport } from \"@modelcontextprotocol/sdk/client/sse.js\";\n\nconst client = new Client(\n  {\n    name: \"example-client\",\n    version: \"1.0.0\",\n  },\n  {\n    capabilities: {},\n  },\n);\n\nconst transport = new SSEClientTransport(new URL(`http://localhost:8080/sse`));\n\nawait client.connect(transport);\n```\n\n----------------------------------------\n\nTITLE: Testing FastMCP Server with CLI/Inspector\nDESCRIPTION: Commands to test the FastMCP server using the command line interface (CLI) and MCP Inspector. These commands clone the FastMCP repository, install dependencies, build the project, and then run the server example using both the CLI and Inspector tools.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/punkpeye/fastmcp.git\ncd fastmcp\n\npnpm install\npnpm build\n\n# Test the addition server example using CLI:\nnpx fastmcp dev src/examples/addition.ts\n# Test the addition server example using MCP Inspector:\nnpx fastmcp inspect src/examples/addition.ts\n```\n\n----------------------------------------\n\nTITLE: Installing FastMCP\nDESCRIPTION: Installs the FastMCP package using npm. This command adds FastMCP as a dependency to your project, allowing you to use its features for building MCP servers.\nSOURCE: https://github.com/punkpeye/fastmcp/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install fastmcp\n```"
  }
]