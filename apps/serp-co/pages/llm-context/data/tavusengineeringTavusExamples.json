[
  {
    "owner": "tavus-engineering",
    "repo": "tavus-examples",
    "content": "TITLE: Installing Dependencies for Tavus CVI Project\nDESCRIPTION: Command to install all required npm dependencies for the Tavus Conversational Video Interface project. This must be run before setting up the environment or starting the development server.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-quickstart-react/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Tavus Conversation Payload (TypeScript)\nDESCRIPTION: This code snippet shows the JSON payload structure used to create or configure a conversation via the Tavus API within the `createConversation.ts` file. It specifies the Persona ID, Replica ID, conversation name, conversational context, custom greeting, and language.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/showcase/santa-demo/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbody: JSON.stringify({\n  // Replace with your own Persona ID\n  persona_id: \"p5317866\", // Santa's unique persona ID in Tavus\n  replica_id: \"r79e1c033f\", // Santa's unique replica ID\n  conversation_name: \"A Chat with Santa\", // Name of the Santa-themed conversation\n  conversational_context: \"You are about to talk to Santa Claus, the jolly figure of holiday cheer...\", // Adds context for the conversation\n  custom_greeting: \"Ho Ho Ho! Merry Christmas! How can Santa help you today?\", // Santa's iconic greeting\n  properties: {\n    language: \"english\" // Language for the conversation (30 avalible languages!)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Bash)\nDESCRIPTION: This command installs all necessary node module dependencies listed in the project's package.json file. It's the first step required to set up the development environment locally.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/showcase/santa-demo/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the Demo Repository using Git (bash)\nDESCRIPTION: This snippet demonstrates how to clone the repository that contains the Flask chat API with ISS integration and change into the project directory. It requires git to be installed and network access to GitHub. The resulting directory will have the application's source code and configuration files.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/yourusername/iss-chat-api.git\ncd iss-chat-api\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies (bash)\nDESCRIPTION: This snippet installs all required Python packages specified in the requirements.txt file, using pip. The project depends on Python 3.7 or newer, Flask, OpenAI's Python SDK, requests, aiohttp, and python-dotenv among others. Run this command in the project directory to install dependencies before starting the server.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating .env File with OpenAI API Key (bash)\nDESCRIPTION: This command writes the OpenAI API key to a .env file in the project root, allowing the Flask application to authenticate requests to OpenAI's endpoints. Be sure to replace 'your_openai_api_key_here' with a valid OpenAI API key. The application uses python-dotenv to load environment variables.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Sending a Chat Completion Request (json)\nDESCRIPTION: This snippet exemplifies the JSON payload structure required for the /chat/completions POST endpoint. The messages array must include at least one object with 'role' and 'content' keys, and can be extended for conversation history. The endpoint expects this standardized structure per OpenAI's Chat API.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\"role\": \"user\", \"content\": \"What is the current location of the ISS?\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Flask Chat Server (bash)\nDESCRIPTION: This snippet launches the Flask web server hosting the chat completion API, making it accessible at http://localhost:5000. Ensure all dependencies are installed and environment variables configured before running this command.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython app.py\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for Tavus API Key\nDESCRIPTION: Example of creating a .env file with the Tavus API key configuration. The API key is required for authenticating with the Tavus API and can be created from the Tavus platform.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-quickstart-react/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_APP_TAVUS_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Starting the Tavus CVI Development Server\nDESCRIPTION: Command to start the local development server for the Tavus Conversational Video Interface application. This launches the application for local testing after dependencies are installed.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-quickstart-react/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment and Dependencies (Bash)\nDESCRIPTION: Creates a Python 3 virtual environment named 'venv', activates it for the current shell session, and installs required packages listed in the 'requirements.txt' file. This prepares the local environment for running the Python backend.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok Tunnel (Bash)\nDESCRIPTION: Starts an ngrok tunnel, forwarding public HTTPS requests to the local server running on port 8080. This makes the local development server accessible from the internet, which is necessary for external services or frontend testing. Requires ngrok to be installed and configured.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nngrok http 8080\n```\n\n----------------------------------------\n\nTITLE: Running the Python Backend Server (Bash)\nDESCRIPTION: Executes the 'server.py' script using the Python interpreter within the activated virtual environment. This command starts the main backend application server, which likely connects to LLM services and handles API requests.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npython server.py\n```\n\n----------------------------------------\n\nTITLE: Running Tavus Examples Project with Vite Development Server\nDESCRIPTION: This command starts the development server using Vite, which will compile and serve the project with hot module replacement.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/hack-cvi-shop/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Tavus Examples Project with npm\nDESCRIPTION: This command installs all required dependencies for the Tavus Examples project as defined in package.json.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/hack-cvi-shop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server (Bash)\nDESCRIPTION: This command starts the local development server, typically using Vite as indicated in the project's tech stack. It allows you to run and test the Santa Demo application on your machine.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/showcase/santa-demo/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example API Request Body Structure (json)\nDESCRIPTION: This JSON object demonstrates the expected request payload format for the chat endpoint, where 'messages' is an array of chat message objects. Each message includes a 'role' (such as 'user') and a 'content' field containing the message text. This format aligns with OpenAI's API for easy integration.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\"role\": \"user\", \"content\": \"Your message here\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ngrok URL Environment Variable (Bash)\nDESCRIPTION: Sets the NGROK_URL environment variable to the public URL generated by ngrok. This variable is likely read by the application (e.g., within server.py or the frontend) to know the public endpoint. The user should replace the example URL with their actual ngrok URL and typically store this in a '.env' file.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nNGROK_URL=\"https://4290-2601-646-4200-a830-b837-c808-f27e-2fbe.ngrok-free.app\"\n```\n\n----------------------------------------\n\nTITLE: Listing Python Project Dependencies\nDESCRIPTION: This snippet defines the dependencies required for a Python project.  It utilizes the pip package manager. The dependencies are listed with their specific versions. The file is intended to be used in conjunction with pip to install the necessary packages for the project's functionality. The output can be used with `pip install -r requirements.txt` to install all dependencies.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-custom-llm-with-backend/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nFlask==2.3.3\nrequests==2.31.0\nopenai==1.25.1\npython-dotenv==0.20.0\naiohttp==3.9.5\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Using npm in Bash\nDESCRIPTION: This code snippet demonstrates the command to install all required dependencies for the React Tavus CVI project using npm. It assumes Node.js and npm are already installed on the system. Running this command sets up the environment by installing all necessary libraries for the application to function correctly.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-transparent-background/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Using npm in Bash\nDESCRIPTION: This snippet shows the command to start the development server for the Tavus React project. Running this command launches the app in development mode, enabling live preview and hot-reloading on code changes. This aids in building and testing the video conversational interface with transparent background effect locally.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-transparent-background/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Replica Process (Bash)\nDESCRIPTION: Executes the 'spawn_room.py' script using the Python interpreter within the activated virtual environment. This command likely starts a secondary process related to the application's replica or room functionality, potentially for managing specific instances or connections.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npython spawn_room.py\n```\n\n----------------------------------------\n\nTITLE: Setting up and running Tavus Examples\nDESCRIPTION: This code block shows the complete process for setting up the Tavus examples project. It installs dependencies via npm, requires creating a config.js file with a Replicate API token, and then starts the development server.\nSOURCE: https://github.com/tavus-engineering/tavus-examples/blob/main/examples/cvi-frontend-backend-tools/local-node/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n\ncreate config.js file with\nexports.REPLICATE_API_TOKEN = '';\n\nnpm run dev\n```"
  }
]