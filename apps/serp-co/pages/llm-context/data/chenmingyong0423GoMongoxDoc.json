[
  {
    "owner": "chenmingyong0423",
    "repo": "go-mongox-doc",
    "content": "TITLE: Implementing Insert Hooks in Mongox\nDESCRIPTION: This snippet demonstrates how to implement the BeforeInsert and AfterInsert hooks in a Mongox model. These hooks allow you to perform actions before and after inserting a document into MongoDB. The code includes the User struct, the hook function implementations, plugin initialization, and examples of using InsertOne and InsertMany.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/hooks/model-hooks.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\",inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\nfunc (u *User) BeforeInsert(ctx context.Context) error {\n\tfmt.Println(\"BeforeInsert called\")\n\treturn nil\n}\n\nfunc (u *User) AfterInsert(ctx context.Context) error {\n\tfmt.Println(\"AfterInsert called\")\n\treturn nil\n}\n\nmongox.InitPlugin(&mongox.PluginConfig{\n    EnableModelHook:        true,\n})\n\nuser := &User{Name: \"Mingyong Chen\", Age: 18}\ninsertOneResult, err := userColl.Creator().InsertOne(context.Background(), user)\n\nusers := []*User{\n    {Name: \"Mingyong Chen\", Age: 18},\n    {Name: \"chenmingyong\", Age: 18},\n}\ninsertManyResult, err := userColl.Creator().InsertMany(context.Background(), users)\n\n// 你也可以使用 ModelHook 方法传递一个实现了 BeforeInsert 和 AfterInsert 方法的对象。\n// 注意：通过 ModelHook 传递的对象优先级高于 InsertOne 方法中传递的参数。\n// userColl.Creator().ModelHook(user).InsertOne(context.Background(), user)\n```\n\n----------------------------------------\n\nTITLE: Define Model Struct with Auto-populated Fields in Go\nDESCRIPTION: This code defines the `Model` struct with `ID`, `CreatedAt`, `UpdatedAt`, and `DeletedAt` fields. The `ID` field is tagged with `mongox:\"autoID\"` to automatically generate a new `bson.ObjectID` upon insertion.  The `CreatedAt` and `UpdatedAt` fields are automatically populated with the current time during insertion, and `UpdatedAt` is updated on document update. The `DeletedAt` field represents the deletion time.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/model.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Model struct {\n\tID        bson.ObjectID `bson:\"_id,omitempty\" mongox:\"autoID\"`\n\tCreatedAt time.Time     `bson:\"created_at\"`\n\tUpdatedAt time.Time     `bson:\"updated_at\"`\n\tDeletedAt time.Time     `bson:\"deleted_at,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Define User Struct with Auto-Generated ID in Go\nDESCRIPTION: This code defines a `User` struct with an `ID` field of type `bson.ObjectID` and the `mongox:\"autoID\"` tag. When a new `User` document is inserted into MongoDB, `mongox` will automatically generate a unique `ObjectID` for the `ID` field if it's a zero value.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/model.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    ID bson.ObjectID `bson:\"_id,omitempty\" mongox:\"autoID\"`\n    Name string `bson:\"name\"`\n    Age int `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Insert Single Document with Creator in Go\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a MongoDB collection using the `Creator` object's `InsertOne` method from the go-mongox library. It takes a context and a pointer to a struct representing the document to be inserted. The method returns an `InsertOneResult` and an error. An options parameter can be passed as the third argument.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/creator.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ninsertOneResult, err := userColl.Creator().InsertOne(context.Background(), &User{Name: \"Mingyong Chen\", Age: 18})\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Document with InsertOne - Go\nDESCRIPTION: This code snippet demonstrates how to insert a single document into a MongoDB collection using the `InsertOne` method of the `Creator` object. It takes a context and a pointer to a struct of the generic type `User` as parameters. The function returns an `*mongo.InsertOneResult` and an error.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/creator.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ninsertOneResult, err := userColl.Creator().InsertOne(context.Background(), &User{Name: \"Mingyong Chen\", Age: 18})\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Document using FindOne in Go\nDESCRIPTION: This snippet demonstrates how to query a single document from a MongoDB collection using the `FindOne` method of the `Finder` type in the `go-mongox` library. The `Filter` method is used to specify the query condition based on the `_id` field. The result is unmarshalled into a pointer of a user-defined generic type `*User`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/finder.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser, err := userColl.Finder().Filter(query.Id(\"60e96214a21b1b0001c3d69e\")).FindOne(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Find a Single Document with Finder in go-mongox\nDESCRIPTION: This code snippet demonstrates how to use the `FindOne` method of the `Finder` in go-mongox to retrieve a single document from a MongoDB collection. It uses the `Filter` method to specify the query condition, searching for a document where the `_id` field matches a given value. The result is a pointer to a `User` object.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/finder.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuser, err := userColl.Finder().Filter(query.Id(\"60e96214a21b1b0001c3d69e\")).FindOne(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Delete Multiple Documents with go-mongox\nDESCRIPTION: This snippet shows how to delete multiple documents from a MongoDB collection using the `DeleteMany` method of the `Deleter` object in `go-mongox`.  A `Filter` is used to specify the documents to be deleted, and a `context.Context` is needed for the operation. The `deleteResult` provides details about the deletion.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/deleter.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndeleteResult, err := userColl.Deleter().Filter(query.In(\"_id\", \"60e96214a21b1b0001c3d69e\", \"80e96214a21b1b0001c3d70e\")).DeleteMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Auto-populating ID field in a Go struct with mongox\nDESCRIPTION: This code snippet demonstrates how to use the `mongox:\"autoID\"` tag to automatically populate the `ID` field of type `bson.ObjectID` when inserting a new document.  If the field's value is the zero value, `mongox` will automatically set it.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/model.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    ID bson.ObjectID `bson:\"_id,omitempty\" mongox:\"autoID\"`\n    Name string `bson:\"name\"`\n    Age int `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents with InsertMany - Go\nDESCRIPTION: This code snippet demonstrates how to insert multiple documents into a MongoDB collection using the `InsertMany` method of the `Creator` object. It takes a context and a slice of pointers to structs of the generic type `User` as parameters. The function returns an `*mongo.InsertManyResult` and an error.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/creator.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nusers := []*User{\n\t\t{Name: \"Mingyong Chen\", Age: 18},\n\t\t{Name: \"Burt\", Age: 18},\n\t}\ninsertManyResult, err := userColl.Creator().InsertMany(context.Background(), users)\n```\n\n----------------------------------------\n\nTITLE: Upsert Document with Mongox Updater in Go\nDESCRIPTION: This snippet demonstrates how to perform an upsert operation (update if exists, insert if not) on a single document in a MongoDB collection using the `Updater` method of the go-mongox library. It uses the `Filter` method to find a document based on a specified criteria, and defines the fields to update or insert using `update.NewBuilder().Set(...)`. The `Upsert` method performs the operation within the provided context.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/updater.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().\n\t\tFilter(query.Eq(\"name\", \"Mingyong Chen\")).\n\t\tUpdates(update.NewBuilder().Set(\"name\", \"Mingyong Chen\").Set(\"age\", 18).Build()).\n\t\tUpsert(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Grouping users by age with go-mongox\nDESCRIPTION: This code snippet demonstrates how to use the `go-mongox` library to create a `$group` aggregation stage in a MongoDB pipeline. It groups users by age, calculates the count of users in each age group using `$sum`, and collects the names of users in each age group using `$push`.  It requires the `go-mongox` library and `bson` package.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/group.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$group\", Value:bson.D{bson.E{Key:\"_id\", Value:\"$age\"}, bson.E{Key:\"count\", Value:bson.D{bson.E{Key:\"$sum\", Value:1}}}, bson.E{Key:\"names\", Value:bson.D{bson.E{Key:\"$push\", Value:\"$name\"}}}}}}}\n//[\n//  {\n//    \"$group\": {\n//      \"_id\": \"$age\",\n//      \"count\": { \"$sum\": 1 },\n//      \"names\": { \"$push\": \"$name\" }\n//    }\n//  }\n//]\naggregation.NewStageBuilder().Group(\"$age\",\n    aggregation.NewBuilder().Sum(\"count\", 1).Push(\"names\", \"$name\").Build()..., \n).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $eq Query with Builder in Go\nDESCRIPTION: This snippet showcases the use of the `query` package's `Builder` to construct an $eq query condition. It demonstrates how to create a single equality condition and also how to chain multiple `Eq` calls to build a composite query.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/eq.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"name\", Value:bson.D{bson.E{Key:\"$eq\", Value:\"Mingyong Chen\"}}}}\neq := query.NewBuilder().Eq(\"name\", \"Mingyong Chen\").Build()\n\n// bson.D{bson.E{Key:\"name\", Value:bson.D{bson.E{Key:\"$eq\", Value:\"Mingyong Chen\"}}}, bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$eq\", Value:18}}}}\neq = query.NewBuilder().Eq(\"name\", \"Mingyong Chen\").Eq(\"age\", 18).Build()\n```\n\n----------------------------------------\n\nTITLE: Create mongox Client in Go\nDESCRIPTION: This snippet shows how to create a `mongox` client instance using an existing MongoDB client and a `mongox.Config` object.  It depends on the `newMongoClient` function (or equivalent) being defined, and the `mongo` and `mongox` packages being imported. The MongoDB client and config are passed to `mongox.NewClient`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/client/client.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmongoClient, err := newMongoClient()\nif err != nil {\n\tpanic(err)\n}\n\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\n```\n\n----------------------------------------\n\nTITLE: Defining a Model struct with mongox tags in Go\nDESCRIPTION: This code snippet shows the definition of the `Model` struct in `mongox` which includes fields for ID, creation time, update time, and deletion time. The `bson` tags define how these fields map to MongoDB document fields, and the `mongox` tag specifies auto-generation of the ID.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/model.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Model struct {\n\tID        bson.ObjectID `bson:\"_id,omitempty\" mongox:\"autoID\"`\n\tCreatedAt time.Time     `bson:\"created_at\"`\n\tUpdatedAt time.Time     `bson:\"updated_at\"`\n\tDeletedAt time.Time     `bson:\"deleted_at,omitempty\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing mongox Client and Database\nDESCRIPTION: This code snippet shows how to initialize a `mongox` client and database using an existing MongoDB client.  It first creates a MongoDB client using `newMongoClient`. Then it creates a `mongox` client with specified MongoDB client and configuration, finally creates a database.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/generic-collection.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmongoClient, err := newMongoClient()\nif err != nil {\n  panic(err)\n}\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n```\n\n----------------------------------------\n\nTITLE: Embed mongox.Model in Custom Struct in Go\nDESCRIPTION: This code demonstrates how to embed the `mongox.Model` struct into a custom `User` struct. The `bson:\",inline\"` tag ensures that the fields from `mongox.Model` are directly included in the `User` document in MongoDB.  This avoids creating a nested structure within the document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/model.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\",inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Collection in mongox with Go\nDESCRIPTION: This snippet creates a generic `mongox.Collection` for the `User` struct. It uses the `mongox.NewCollection` function, specifying the `User` type, the database object, and the collection name. This allows for type-safe operations on the MongoDB collection.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/generic-collection.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nuserColl := mongox.NewCollection[User](database, \"users\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Mongox Database in Go\nDESCRIPTION: This snippet demonstrates how to create a new `mongox.Database` object by first creating a `mongox.Client` from a MongoDB client instance. A `mongox.Config` is also provided. This database object is then used for subsequent operations, including registering plugins.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/plugins/plugins.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Documents using Find in Go\nDESCRIPTION: This snippet shows how to query multiple documents from a MongoDB collection using the `Find` method of the `Finder` type in `go-mongox`. The `Filter` method is used to specify the query condition using the `query.In` function to filter based on multiple `_id` values. The result is a slice of pointers of a user-defined generic type `[]*User`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/finder.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nusers, err := userColl.Finder().Filter(query.In(\"_id\", \"60e96214a21b1b0001c3d69e\", \"80e96214a21b1b0001c3d70e\")).Find(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Defining a User struct with mongox Model\nDESCRIPTION: Defines a `User` struct that embeds `mongox.Model` and includes custom fields like `Name` and `Age` with corresponding bson tags. The `mongox.Model` embedding provides default fields like `ID` and timestamps.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/generic-collection.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n  mongox.Model `bson:\"inline\"`\n  Name         string `bson:\"name\"`\n  Age          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Client in Go\nDESCRIPTION: This code snippet demonstrates how to create a MongoDB client using the official Go driver. It includes setting connection options, authenticating, and pinging the database to verify the connection. The function returns a pointer to the MongoDB client and an error, if any.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/client/client.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 示例代码，不是最佳的创建方式\nfunc newMongoClient() (*mongo.Client, error) {\n\tclient, err := mongo.Connect(options.Client().ApplyURI(\"mongodb://localhost:27017\").SetAuth(options.Credential{\n\t\tUsername:   \"test\",\n\t\tPassword:   \"test\",\n\t\tAuthSource: \"db-test\",\n\t}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = client.Ping(context.Background(), readpref.Primary())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn client, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Building $eq Query Condition with Builder in Go\nDESCRIPTION: This snippet shows how to create an $eq query condition using the `Builder` from the `query` package. It initializes a new builder, adds an $eq condition for the 'name' field with the value 'Mingyong Chen', and then builds the query.  The second example shows building multiple $eq conditions.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/eq.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"name\", Value:bson.D{bson.E{Key:\"$eq\", Value:\"Mingyong Chen\"}}}}\nquery.NewBuilder().Eq(\"name\", \"Mingyong Chen\").Build()\n\n// bson.D{bson.E{Key:\"name\", Value:bson.D{bson.E{Key:\"$eq\", Value:\"Mingyong Chen\"}}}, bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$eq\", Value:18}}}}\nquery.NewBuilder().Eq(\"name\", \"Mingyong Chen\").Eq(\"age\", 18).Build()\n```\n\n----------------------------------------\n\nTITLE: Insert Multiple Documents with Creator in Go\nDESCRIPTION: This code snippet demonstrates how to insert multiple documents into a MongoDB collection using the `Creator` object's `InsertMany` method from the go-mongox library. It takes a context and a slice of pointers to structs representing the documents to be inserted. The method returns an `InsertManyResult` and an error. An options parameter can be passed as the third argument.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/creator.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nusers := []*User{\n\t\t{Name: \"Mingyong Chen\", Age: 18},\n\t\t{Name: \"Burt\", Age: 18},\n\t}\ninsertManyResult, err := userColl.Creator().InsertMany(context.Background(), users)\n```\n\n----------------------------------------\n\nTITLE: Building $eq Query with Function in Go\nDESCRIPTION: This snippet demonstrates how to construct an $eq query condition using the `Eq` function from the `query` package. It creates an equality comparison for the \"name\" field with the value \"Mingyong Chen\".\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/eq.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key: \"name\", Value: bson.D{bson.E{Key: \"$eq\", Value: \"Mingyong Chen\"}}}}\neq := query.Eq(\"name\", \"Mingyong Chen\")\n```\n\n----------------------------------------\n\nTITLE: Creating a mongox Database Instance in Go\nDESCRIPTION: This code snippet illustrates how to create a `mongox` database instance using the `mongox.NewClient` function and the `NewDatabase` method. It takes a `mongo.Client` and a `mongox.Config` as input, then creates a new database named \"db-test\". It relies on having a configured mongoClient. It then passes the mongo client to mongox to create a mangox client.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/database/database.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmongoClient, err := newMongoClient()\nif err != nil {\n    panic(err)\n}\n\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n```\n\n----------------------------------------\n\nTITLE: Building Complex Query with Builder (Gte and Lte) in Go\nDESCRIPTION: This code snippet showcases how to build a complex query condition using the `Builder` in the `query` package, combining both '$gte' (greater than or equal to) and '$lte' (less than or equal to) conditions. This demonstrates the flexibility of the builder pattern for constructing sophisticated queries with multiple criteria. The `Build` method returns the final BSON document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/gte.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gte\", Value:18}, bson.E{Key:\"$lte\", Value:30}}}}\nquery.NewBuilder().Gte(\"age\", 18).Lte(\"age\", 30).Build()\n```\n\n----------------------------------------\n\nTITLE: Update Single Document with Mongox Updater in Go\nDESCRIPTION: This snippet demonstrates how to update a single document in a MongoDB collection using the `Updater` method provided by the go-mongox library. It uses the `Filter` method to specify the document to update and the `Updates` method in conjunction with `update.Set` to define the update operation. The `UpdateOne` method executes the update operation in the given context.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/updater.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().\n\t\tFilter(query.Id(\"60e96214a21b1b0001c3d69e\")).\n\t\tUpdates(update.Set(\"name\", \"Mingyong Chen\")).\n\t\tUpdateOne(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building $project Stage with Aggregation Builder in Go\nDESCRIPTION: This snippet demonstrates how to build a `$project` stage using the `aggregation.NewStageBuilder` and `aggregation.NewBuilder` in Go. It configures the stage to exclude the `_id` field, include the `name` field, and create a new `isAdult` field that is true if the user's age is greater than or equal to 18.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/project.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Project(\n    aggregation.NewBuilder().AddKeyValues(\"_id\", 0).\n        AddKeyValues(\"name\", 1).\n        Gte(\"isAdult\", \"$age\", 18).Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Update Single Document with go-mongox\nDESCRIPTION: This code snippet demonstrates how to update a single document in a MongoDB collection using the `Updater` feature of the go-mongox library. It uses `Filter` to specify the document to update and `Updates` to specify the update operation, setting the 'name' field to 'Mingyong Chen'.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/updater.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().\n\t\tFilter(query.Id(\"60e96214a21b1b0001c3d69e\")).\n\t\tUpdates(update.Set(\"name\", \"Mingyong Chen\")).\n\t\tUpdateOne(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building Composite $gt and $lt Query with Builder in Go\nDESCRIPTION: This example demonstrates building a composite query condition involving both '$gt' (greater than) and '$lt' (less than) operators using the `Builder` pattern. It constructs a BSON document to filter documents where 'age' is greater than 18 and less than 30.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/gt.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:18}, bson.E{Key:\"$lt\", Value:30}}}}\nquery.NewBuilder().Gt(\"age\", 18).Lt(\"age\", 30).Build()\n```\n\n----------------------------------------\n\nTITLE: Count Documents with Finder in go-mongox\nDESCRIPTION: This code snippet illustrates how to use the `Count` method of the `Finder` in go-mongox to count the number of documents in a MongoDB collection that match a given filter. It uses a `NewBuilder` to create a complex query with both `Gt` and `Lt` conditions on the `age` field, specifying a range between 18 and 24. The result is an `int64` representing the number of documents matching the criteria.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/finder.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncount, err := userColl.Finder().\n\t\tFilter(query.NewBuilder().Gt(\"age\", 18).Lt(\"age\", 24).Build()).\n\t\tCount(context.Background())\n```\n\n----------------------------------------\n\nTITLE: MongoDB $match Stage Construction in Go\nDESCRIPTION: This code snippet shows how to create a `$match` aggregation stage to filter documents based on a condition using `aggregation.NewStageBuilder` and the `Match` method. It filters `User` documents where the `age` field is greater than 18. It uses the go-mongox library.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/match.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$match\", Value:bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:[]interface {}{18}}}}}}}}}\n//[\n//  {\n//    \"$match\": {\n//      \"age\": { \"$gt\": 18 }\n//    }\n//  }\n//]\naggregation.NewStageBuilder().Match(aggregation.Gt(\"age\", 18)).Build()\n```\n\n----------------------------------------\n\nTITLE: Querying Documents with Find Hooks in go-mongox\nDESCRIPTION: This example demonstrates how to use find hooks when querying documents from a MongoDB collection in go-mongox. It uses `ModelHook` to pass an object that implements the `BeforeFind` interface, triggering the `BeforeFind` method before the query is executed. Requires `userColl` representing the MongoDB collection, and `query` from `go.mongodb.org/mongo-driver/bson/primitive`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nuser, err := userColl.Finder().ModelHook(new(findHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).FindOne(context.Background())\n\nusers, err := userColl.Finder().Filter(query.In(\"name\", \"Mingyong Chen\", \"chenmingyong\")).Find(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Aggregating with Field Omission in go-mongox\nDESCRIPTION: This code snippet demonstrates how to use the `Aggregator` to perform an aggregation query that omits a specific field ('age') from the results. It utilizes the `Pipeline` method to define the aggregation pipeline with a `Project` stage, and the `Aggregate` method to execute the query and retrieve the results.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/aggregator.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 忽略年龄字段，只查询名字\nusers, err := userColl.Aggregator().\n    Pipeline(aggregation.NewStageBuilder().Project(bsonx.M(\"age\", 0)).Build()).\n    Aggregate(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Basic $lookup Aggregation with Go Mongox\nDESCRIPTION: This snippet demonstrates a basic `$lookup` operation to find orders associated with each user in the `users` collection.  It joins the `orders` collection based on the `_id` field in `users` and the `userId` field in `orders`, storing the results in the `userOrders` array within each user document. It depends on the `mongox` package for model definitions and `aggregation` for stage building.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/lookup.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$lookup\", Value:bson.D{bson.E{Key:\"from\", Value:\"orders\"}, bson.E{Key:\"localField\", Value:\"_id\"}, bson.E{Key:\"foreignField\", Value:\"userId\"}, bson.E{Key:\"as\", Value:\"userOrders\"}}}}}\n//[\n//  {\n//    \"$lookup\": {\n//      \"from\": \"orders\",\n//      \"localField\": \"_id\",\n//      \"foreignField\": \"userId\",\n//      \"as\": \"userOrders\"\n//    }\n//  }\n//]\naggregation.NewStageBuilder().Lookup(\"orders\", \"userOrders\", &aggregation.LookUpOptions{\n    LocalField:   \"_id\",\n    ForeignField: \"userId\",\n}).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $bucketAuto stage with aggregation builder in Go\nDESCRIPTION: Constructs a `$bucketAuto` aggregation pipeline stage using `aggregation.NewStageBuilder`. It groups documents by the 'age' field, divides them into 4 buckets, and calculates the count, average age, and names within each bucket, setting the output using `BucketAutoOptions`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/bucketAuto.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().BucketAuto(\n    \"$age\",\n    4,\n    &types.BucketAutoOptions{\n        Output: aggregation.NewBuilder().\n            Sum(\"count\", 1).\n            Avg(\"averageAge\", \"$age\").\n            Push(\"names\", \"$name\").Build(),\n    },\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $in Query with Builder in Go\nDESCRIPTION: Constructs a MongoDB $in query condition using the `Builder` from the `query` package. This approach is suitable for building complex query conditions, allowing chaining of methods like `Eq` and `In`. The resulting BSON document filters documents based on multiple criteria, including the $in operator for the specified field.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/in.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"enabled\", Value:bson.D{bson.E{Key:\"$eq\", Value:true}}}, bson.E{Key:\"name\", Value:bson.D{bson.E{Key :\"$in\", Value:[]interface {}{\"陈明勇\", \"Mingyong Chen\"}}}}}\nquery.NewBuilder().Eq(\"enabled\", true).In(\"name\", \"陈明勇\", \"Mingyong Chen\").Build()\n```\n\n----------------------------------------\n\nTITLE: Updating Documents with Update Hooks in go-mongox\nDESCRIPTION: This example shows how to use update hooks when updating documents in a MongoDB collection with go-mongox. It demonstrates the use of `ModelHook` with `UpdateOne` and `UpdateMany` operations. Requires `userColl` representing the MongoDB collection, `query` and `update` from `go.mongodb.org/mongo-driver/bson/primitive`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nupdateOneResult, err := userColl.Updater().ModelHook(new(updateHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).Updates(update.Set(\"age\", 6)).UpdateOne(context.Background())\n\nupdateManyResult, err := userColl.Updater().ModelHook(new(updateHook)).Filter(query.In(\"name\", \"Mingyong Chen\", \"chenmingyong\")).Updates(update.Set(\"age\", 6)).UpdateMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building $limit Aggregation Stage with go-mongox\nDESCRIPTION: This code snippet demonstrates how to create a `$limit` stage within a MongoDB aggregation pipeline using the `go-mongox` library. It defines a `User` struct with fields for `Name` and `Age`, then uses `aggregation.NewStageBuilder().Limit(5).Build()` to construct the `$limit` stage, restricting the results to 5 documents. The BSON representation shows the equivalent MongoDB pipeline stage.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/limit.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$limit\", Value:5}}}\n//[\n//  {\n//    \"$limit\": 5\n//  }\n//]\naggregation.NewStageBuilder().Limit(5).Build()\n```\n\n----------------------------------------\n\nTITLE: Composite Gte/Lte Query Condition - Builder - Go\nDESCRIPTION: Demonstrates building a composite query condition using the `Builder` that includes both $gte and $lte conditions on the same field. This creates a query that filters for values within a specific range. The `Build()` method returns the final query.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/gte.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gte\", Value:18}, bson.E{Key:\"$lte\", Value:30}}}}\nquery.NewBuilder().Gte(\"age\", 18).Lte(\"age\", 30).Build()\n```\n\n----------------------------------------\n\nTITLE: Find Multiple Documents with Finder in go-mongox\nDESCRIPTION: This code snippet shows how to use the `Find` method of the `Finder` in go-mongox to retrieve multiple documents from a MongoDB collection. It uses the `Filter` method with the `query.In` function to specify an `IN` query on the `_id` field. The result is a slice of pointers to `User` objects.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/finder.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nusers, err := userColl.Finder().Filter(query.In(\"_id\", \"60e96214a21b1b0001c3d69e\", \"80e96214a21b1b0001c3d70e\")).Find(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building Combined $gt and $lt Queries with Builder in Go\nDESCRIPTION: This code snippet demonstrates how to combine `$gt` (greater than) and `$lt` (less than) queries using the `Builder` pattern from the `query` package.  It creates a query that finds documents where the 'age' field is greater than 18 and less than 30.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/gt.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:18}, bson.E{Key:\"$lt\", Value:30}}}}\nquery.NewBuilder().Gt(\"age\", 18).Lt(\"age\", 30).Build()\n```\n\n----------------------------------------\n\nTITLE: Distinct Query with Finder (v2) in go-mongox\nDESCRIPTION: This code snippet shows how to perform a distinct query on a MongoDB collection using the `Distinct` method in go-mongox, specifically using the `mongo-driver v2` approach. It retrieves the distinct values of the `age` field. It also shows how to use `DistinctWithParse` to parse the result into a slice.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/finder.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistinctResult := userColl.Finder().Distinct(context.Background(), \"age\")\nif distinctResult.Err() != nil {\n    panic(distinctResult.Err())\n}\n\n// you can parse the result to slices using the DistinctWithParse method\nageSlice := make([]int, 0)\nerr := userColl.Finder().DistinctWithParse(context.Background(), \"age\", &ageSlice)\n```\n\n----------------------------------------\n\nTITLE: Building $gt Query with Builder in Go\nDESCRIPTION: This code snippet shows how to use the `Builder` from the `query` package to construct a MongoDB '$gt' query condition. The builder pattern allows for chaining multiple query conditions together, resulting in a more complex query.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/gt.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:18}}}}\nquery.NewBuilder().Gt(\"age\", 18).Build()\n```\n\n----------------------------------------\n\nTITLE: Build $group aggregation stage in Go\nDESCRIPTION: Demonstrates building a `$group` aggregation pipeline stage using `aggregation.NewStageBuilder` in Go. It groups documents by the `age` field and calculates the count of users and a list of names for each age group using `$sum` and `$push` accumulators.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/group.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\naggregation.NewStageBuilder().Group(\"$age\",\n    aggregation.NewBuilder().Sum(\"count\", 1).Push(\"names\", \"$name\").Build()..., \n).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $eq Query Condition with Function in Go\nDESCRIPTION: This snippet shows how to create an $eq query condition for MongoDB using the `Eq` function from the `query` package. It sets the 'name' field equal to 'Mingyong Chen'. The function returns a `bson.D` representing the query.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/eq.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key: \"name\", Value: bson.D{bson.E{Key: \"$eq\", Value: \"Mingyong Chen\"}}}}\nquery.Eq(\"name\", \"Mingyong Chen\")\n```\n\n----------------------------------------\n\nTITLE: Building $gte Query Condition with Function in Go\nDESCRIPTION: This code snippet demonstrates how to build a '$gte' (greater than or equal to) query condition using the `Gte` function from the `query` package. The function takes a field name and a value as input and returns a BSON document representing the query condition. This is a direct approach for creating simple '$gte' queries.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/gte.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gte\", Value:18}}}}\nquery.Gte(\"age\", 18)\n```\n\n----------------------------------------\n\nTITLE: Ignoring Fields with Aggregation Pipeline in Go\nDESCRIPTION: This snippet demonstrates how to use the `Aggregator()` method with the `Pipeline()` and `Aggregate()` methods to exclude a specific field (`age`) from the aggregation results. It utilizes the `NewStageBuilder()` to construct a `Project` stage, specifying the field to exclude.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/aggregator.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Ignoring the age field, query only by name\nusers, err := userColl.Aggregator().\n    Pipeline(aggregation.NewStageBuilder().Project(bsonx.M(\"age\", 0)).Build()).\n    Aggregate(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Define User struct for MongoDB aggregation in Go\nDESCRIPTION: Defines a `User` struct with `Name` and `Age` fields, using `mongox.Model` for MongoDB integration. This struct is used as the basis for creating the aggregation pipeline to group users by age.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/group.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Client in Go\nDESCRIPTION: This snippet demonstrates how to create a MongoDB client using the official `go.mongodb.org/mongo-driver/mongo` package. It configures the client with a connection URI, username, password, and authentication source. The function also includes a ping operation to verify the connection.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/generic-collection.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Example code for reference\nfunc newMongoClient() (*mongo.Client, error) {\n  client, err := mongo.Connect(options.Client().ApplyURI(\"mongodb://localhost:27017\").SetAuth(options.Credential{\n      Username:   \"test\",\n      Password:   \"test\",\n      AuthSource: \"db-test\",\n  }))\n  if err != nil {\n      return nil, err\n  }\n  err = client.Ping(context.Background(), readpref.Primary())\n  if err != nil {\n      panic(err)\n  }\n  return client, nil\n}\n```\n\n----------------------------------------\n\nTITLE: NewCollection Usage (Updated)\nDESCRIPTION: Shows the updated usage of `mongox.NewCollection` in version 2.2.0. It now requires a `mongox.Database` object and the collection name.  A `mongox.Client` needs to be initialized first to create the database object. The database name is 'db-test' and collection name is 'users'.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/changelog.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Now\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n\nuserColl := mongox.NewCollection[User](database, \"users\")\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Documents with Mongox Updater in Go\nDESCRIPTION: This snippet demonstrates how to update multiple documents in a MongoDB collection using the `Updater` method provided by the go-mongox library. It utilizes the `Updates` method and `update.Set` to specify the update operation and then executes it on multiple documents using the `UpdateMany` method within the given context.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/updater.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().\n\t\tUpdates(update.Set(\"name\", \"Mingyong Chen\")).\n\t\tUpdateMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building $gt Query Condition with Builder in Go\nDESCRIPTION: This snippet shows how to build a '$gt' (greater than) query condition using the `Builder` pattern provided by the `query` package. It uses chained method calls to construct BSON documents representing query conditions.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/gt.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:18}}}}\nquery.NewBuilder().Gt(\"age\", 18).Build()\n```\n\n----------------------------------------\n\nTITLE: Aggregation $set Stage with Go\nDESCRIPTION: This code snippet demonstrates how to create an aggregation pipeline stage with the `$set` operator in Go. It uses the `aggregation.NewStageBuilder` and `aggregation.NewBuilder` to construct a pipeline stage that adds two new fields: `isAdult` (based on age) and `birthYear` (calculated from age). It shows how to use the `Gte` and `Subtract` methods to define the logic for creating these new fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/set.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$addFields\", Value:bson.D{bson.E{Key:\"isAdult\", Value:bson.D{bson.E{Key:\"$gte\", Value:[]interface {}{\"$age\", 18}}}}, bson.E{Key:\"birthYear\", Value:bson.D{bson.E{Key:\"$subtract\", Value:[]interface {}{2024, \"$age\"}}}}}}}}\n//[\n// {\n//   \"$set\": {\n//     \"isAdult\": {\n//       \"$gte\": [\"$age\", 18]\n//     },\n//     \"birthYear\": {\n//       \"$subtract\": [2024, \"$age\"]\n//     }\n//   }\n// }\n//]\naggregation.NewStageBuilder().Set(\n    aggregation.NewBuilder().\n        // If age is greater than or equal to 18, isAdult is true\n        Gte(\"isAdult\", \"$age\", 18).\n        // Calculate the birth year\n        Subtract(\"birthYear\", 2024, \"$age\").Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Registering and Removing Plugins in Go\nDESCRIPTION: This snippet illustrates the process of registering and removing a plugin within the `mongox` database context.  It defines a `User` struct for example usage in the plugin's callback function. The `RegisterPlugin` function associates a callback function with a specific operation type, and the `RemovePlugin` function removes the plugin by name and operation type. This example registers an \"after find\" plugin that prints user data after a find operation and then removes it.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/plugins/plugins.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// 注册插件\ndatabase.RegisterPlugin(\"after find\", func(ctx context.Context, opCtx *operation.OpContext, opts ...any) error {\n    if user, ok := opCtx.Doc.(*User); ok {\n        fmt.Println(user)\n    }\n    if users, ok := opCtx.Doc.([]*User); ok {\n        fmt.Println(users)\n    }\n    return nil\n}, operation.OpTypeAfterFind)\n\n// 移除插件\ndatabase.RemovePlugin(\"after find\", operation.OpTypeAfterFind)\n```\n\n----------------------------------------\n\nTITLE: Advanced $lookup Aggregation with Filtering in go-mongox\nDESCRIPTION: This snippet demonstrates an advanced `$lookup` aggregation stage that joins the `users` collection with the `orders` collection, filtering the orders to only include those with a `totalAmount` greater than 100. It utilizes the `Let` and `Pipeline` options to achieve this filtering using the `$expr` and `$and` operators within the pipeline.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/lookup.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Lookup(\"orders\", \"largeOrders\", &aggregation.LookUpOptions{\n    Let: bsonx.D(\"userId\", \"$_id\"),\n    Pipeline: aggregation.NewStageBuilder().Match(\n        aggregation.And(\"$expr\", aggregation.EqWithoutKey(\"$userId\", \"$$userId\"), aggregation.GtWithoutKey(\"$totalAmount\", 100)),\n    ).Build(),\n}).Build()\n```\n\n----------------------------------------\n\nTITLE: MongoDB $set Stage Construction in Go\nDESCRIPTION: This snippet demonstrates how to construct a MongoDB `$set` aggregation pipeline stage using the `aggregation.NewStageBuilder` and `aggregation.NewBuilder`. It creates a stage that adds an `isAdult` field (true if age is >= 18) and a `birthYear` field (calculated as 2024 - age). Requires the `mongox` package and assumes an existing `User` struct with `age` field.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/set.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\naggregation.NewStageBuilder().Set(\n    aggregation.NewBuilder().\n        // 如果年龄大于或等于 18，isAdult 为 true\n        Gte(\"isAdult\", \"$age\", 18).\n        // 计算出生年份\n        Subtract(\"birthYear\", 2024, \"$age\").Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $in Query with Function in Go\nDESCRIPTION: Constructs a MongoDB $in query condition using the `In` function from the `query` package. This function takes the field name and a variable number of values to include in the $in operator. The resulting BSON document filters documents where the specified field's value is among the provided values.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/in.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"name\", Value:bson.D{bson.E{Key:\"$in\", Value:[]string{\"陈明勇\", \"Mingyong Chen\"}}}}}\nquery.In(\"name\", \"陈明勇\", \"Mingyong Chen\")\n```\n\n----------------------------------------\n\nTITLE: Aggregating with Field Renaming & Parsing in go-mongox\nDESCRIPTION: This code snippet demonstrates how to use the `Aggregator` to perform an aggregation query that renames a field ('name' to 'real_name') and then parses the results into a custom struct (`RealUser`). It uses `Pipeline` to set up the aggregation pipeline with a `Project` stage, and `AggregateWithParse` to execute the query and parse the results into the provided slice.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/aggregator.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 字段重命名，聚合查询并解析结果\ntype RealUser struct {\n    mongox.Model `bson:\"inline\"`\n    RealName     string `bson:\"real_name\"`\n    Age          int    `bson:\"age\"`\n}\nvar results []*RealUser\nerr := userColl.Aggregator().\n    Pipeline(aggregation.NewStageBuilder().Project(\n        bsonx.NewD().Add(\"real_name\", \"$name\").Add(\"age\", 1).Build(),\n    ).Build()).\n    AggregateWithParse(context.Background(), &results)\n```\n\n----------------------------------------\n\nTITLE: MongoDB $limit Stage Construction with go-mongox\nDESCRIPTION: This code snippet demonstrates how to use the `go-mongox` library to create a MongoDB aggregation pipeline stage that limits the number of returned documents. It defines a `User` struct with `mongox.Model` embedding and constructs the `$limit` stage using `aggregation.NewStageBuilder().Limit(5).Build()`. This stage limits the result to a maximum of 5 documents.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/limit.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$limit\", Value:5}}}\n//[\n//  {\n//    \"$limit\": 5\n//  }\n//]\naggregation.NewStageBuilder().Limit(5).Build()\n```\n\n----------------------------------------\n\nTITLE: Defining User struct and building $sortByCount stage in Go\nDESCRIPTION: This snippet defines a `User` struct with `Name` and `Age` fields and uses `aggregation.NewStageBuilder().SortByCount(\"$age\").Build()` to create a `$sortByCount` stage in a MongoDB aggregation pipeline. The `User` struct includes `mongox.Model` inline.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/sortByCount.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$sortByCount\", Value:\"$age\"}}}\n//[\n//  {\n//    \"$sortByCount\": \"$age\"\n//  }\n//]\naggregation.NewStageBuilder().SortByCount(\"$age\").Build()\n```\n\n----------------------------------------\n\nTITLE: Creating BSON data with helper functions in Go\nDESCRIPTION: This code snippet showcases the use of helper functions `bsonx.M`, `bsonx.E`, `bsonx.D`, and `bsonx.A` to create BSON data structures.  `bsonx.M` creates a BSON document (map), `bsonx.E` creates a BSON element, `bsonx.D` creates a BSON document (slice of key-value pairs), and `bsonx.A` creates a BSON array.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/bsonx.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nm := bsonx.M(\"name\", \"陈明勇\")\ne := bsonx.E(\"name\", \"陈明勇\")\nd := bsonx.D(\"name\", \"陈明勇\")\na := bsonx.A(\"Mingyong Chen\", \"陈明勇\")\n```\n\n----------------------------------------\n\nTITLE: Callback Function Signature for mongox Plugins\nDESCRIPTION: This snippet defines the signature of the callback function (`CbFn`) used for `mongox` plugins. It takes a context, an operation context (`opCtx`), and optional parameters (`opts`) as input, and returns an error.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/plugins/plugins.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype CbFn func(ctx context.Context, opCtx *operation.OpContext, opts ...any) error\n```\n\n----------------------------------------\n\nTITLE: Building $add Expression with AddWithoutKey Function in Go\nDESCRIPTION: This snippet demonstrates how to build a `$add` expression using the `AddWithoutKey` function from the `aggregation` package.  It takes two field names as input (`$price` and `$fee`) and returns a `bson.D` representing the `$add` expression without a surrounding key. The expected output is a BSON document adding the values of the 'price' and 'fee' fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/expression/accumulators/add.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\naggregation.AddWithoutKey(\"$price\", \"$fee\")\n```\n\n----------------------------------------\n\nTITLE: Creating BSON data using functions in Go\nDESCRIPTION: This snippet shows how to use the `bsonx.M`, `bsonx.E`, `bsonx.D`, and `bsonx.A` functions to create BSON data structures directly. These functions provide a more concise way to create BSON objects without needing to use builders. The `bsonx` package needs to be imported.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/bsonx.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nm := bsonx.M(\"name\", \"Mingyong Chen\")\ne := bsonx.E(\"name\", \"Mingyong Chen\")\nd := bsonx.D(\"name\", \"Mingyong Chen\")\na := bsonx.A(\"Mingyong Chen\", \"Burt\")\n```\n\n----------------------------------------\n\nTITLE: Building $bucket stage in Go\nDESCRIPTION: This code snippet demonstrates how to construct a `$bucket` aggregation stage using the `aggregation.NewStageBuilder` in Go. It groups users by age into buckets based on the provided `boundaries`. It also configures a default bucket named \"Other\" and defines an output structure to count documents and collect names in each bucket. The dependencies are `aggregation` and `types` packages.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/bucket.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Bucket(\n    \"$age\",\n    []any{0, 19, 31, 46, math.Inf(1)},\n    &types.BucketOptions{\n        DefaultKey: \"Other\",\n        Output:     aggregation.NewBuilder().Sum(\"count\", 1).Push(\"names\", \"$name\").Build(),\n    },\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $facet aggregation stage in Go\nDESCRIPTION: This snippet showcases constructing a MongoDB `$facet` aggregation pipeline stage using `aggregation.NewStageBuilder` from the go-mongox library. The stage computes the total number of users, groups users by age, and filters users older than 18, projecting only their name and age. It demonstrates the use of `Count`, `Group`, `Sum`, `Sort`, `Match`, and `Project` methods to define the facets.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/facet.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Facet(\n    bsonx.NewD().\n        Add(\"totalUsers\", aggregation.NewStageBuilder().Count(\"totalUsers\").Build()).\n        Add(\n            \"ageGroups\",\n            aggregation.NewStageBuilder().\n                Group(\"$age\", aggregation.Sum(\"count\", 1)...).\n                Sort(bsonx.D(\"_id\", 1)).Build(),\n        ).\n        Add(\n            \"over18\",\n            aggregation.NewStageBuilder().\n                Match(aggregation.Gt(\"age\", 18)).\n                Project(bsonx.NewD().Add(\"name\", 1).Add(\"age\", 1).Build()).Build()).\n        Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Build $match aggregation stage with mongox in Go\nDESCRIPTION: Builds a $match aggregation stage using mongox's NewStageBuilder.  It filters documents where the 'age' field is greater than 18. The `aggregation.Gt` function creates a greater than condition for the 'age' field, and the `Match` method applies this condition to the aggregation stage.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/match.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Match(aggregation.Gt(\"age\", 18)).Build()\n```\n\n----------------------------------------\n\nTITLE: Building bson.D with DBuilder in Go\nDESCRIPTION: This code snippet demonstrates how to use `bsonx.NewD()` to create a `DBuilder` and then use its `Add()` method to add key-value pairs to build a `bson.D` document. The `Build()` method finalizes the construction of the `bson.D`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/bsonx.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nd := bsonx.NewD().Add(\"name\", \"Mingyong Chen\").Add(\"name\", \"Burt\").Build()\n```\n\n----------------------------------------\n\nTITLE: Add Aggregation Function Construction in Go\nDESCRIPTION: Demonstrates how to construct a $add aggregation expression in Go using the `Add` and `AddWithoutKey` functions from the `aggregation` package.  These functions create a bson.D representation of the $add expression, adding specified fields together.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/expression/accumulators/add.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"$add\", Value:[]interface {}{\"$price\", \"$fee\"}}}\n/*\n    {\n      \"$add\": [\"$price\", \"$fee\"]\n    }\n*/\naggregation.AddWithoutKey(\"$price\", \"$fee\")\n\n// bson.D{bson.E{Key:\"total\", Value:bson.D{bson.E{Key:\"$add\", Value:[]interface {}{\"$price\", \"$fee\"}}}}}\n/*\n    {\n      \"total\": {\n        \"$add\": [\"$price\", \"$fee\"]\n      }\n    }\n*/\naggregation.Add(\"total\", \"$price\", \"$fee\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Upsert Hooks in Mongox\nDESCRIPTION: This snippet shows how to implement and use the `BeforeUpsert` and `AfterUpsert` hooks with Mongox using the `ModelHook`. It defines an `upsertHook` struct, implementing both hook methods, and then applies it to an `Upsert` operation using `ModelHook`. The example emphasizes that the hooks only trigger when the hook object is passed via `ModelHook`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/hooks/model-hooks.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype upsertHook struct{}\n\nfunc (u *upsertHook) BeforeUpsert(ctx context.Context) error {\n\tfmt.Println(\"BeforeUpsert called\")\n\treturn nil\n}\n\nfunc (u *upsertHook) AfterUpsert(ctx context.Context) error {\n\tfmt.Println(\"AfterUpsert called\")\n\treturn nil\n}\n\nmongox.InitPlugin(&mongox.PluginConfig{\n    EnableModelHook: true,\n})\n\nupdateResult, err := userColl.Updater().ModelHook(new(upsertHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).Updates(update.Set(\"age\", 6)).Upsert(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Project Stage Construction with aggregation package in Go\nDESCRIPTION: This code snippet demonstrates how to construct a `$project` stage for a MongoDB aggregation pipeline using the `aggregation.NewStageBuilder` and `aggregation.NewBuilder` from the provided Go package. It projects the `name` field and creates a calculated boolean field `isAdult` based on whether the `age` field is greater than or equal to 18. The `_id` field is suppressed.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/project.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Project(\n    aggregation.NewBuilder().AddKeyValues(\"_id\", 0).\n        AddKeyValues(\"name\", 1).\n        Gte(\"isAdult\", \"$age\", 18).Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Updating with $currentDate using Builder in Go\nDESCRIPTION: This snippet demonstrates how to build a `$currentDate` update document using the `Builder` from the `update` package. It sets both the `last_modified` field to the current date and the `created_at` field to the current timestamp.  Requires the `update` and `bsonx` packages. It builds a more complex update document by chaining `CurrentDate` calls and then calling `Build()` to finalize the document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/update/field/currentDate.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nupdate.NewBuilder().\n    CurrentDate(\"last_modified\", true).\n    CurrentDate(\"created_at\", bsonx.D(\"$type\", \"timestamp\")).\n    Build()\n```\n\n----------------------------------------\n\nTITLE: Updating with $currentDate using a Function in Go\nDESCRIPTION: This snippet demonstrates using the `CurrentDate` function from the `update` package to build a `$currentDate` update document. It sets the `last_modified` field to the current date. It requires the `go-mongox` library.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/update/field/currentDate.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"$currentDate\", Value:bson.D{bson.E{Key:\"last_modified\", Value:true}}}}\n/*\n    {\n      \"$currentDate\": {\n        \"last_modified\": true\n      }\n    }\n*/\nupdate.CurrentDate(\"last_modified\", true)\n```\n\n----------------------------------------\n\nTITLE: Defining User struct with mongox for MongoDB\nDESCRIPTION: Defines a `User` struct with `mongox.Model` embedded for common MongoDB fields and `Name` and `Age` fields with `bson` tags for field mapping. This struct will be used in MongoDB operations.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/sort.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Insert Hooks in go-mongox\nDESCRIPTION: This code snippet demonstrates how to define `BeforeInsert` and `AfterInsert` hooks for a `User` struct in go-mongox. These hooks are called before and after inserting a document into the MongoDB collection, respectively. Requires the `mongox` package and `fmt` for printing.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\",inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\nfunc (u *User) BeforeInsert(ctx context.Context) error {\n\tfmt.Println(\"BeforeInsert called\")\n\treturn nil\n}\n\nfunc (u *User) AfterInsert(ctx context.Context) error {\n\tfmt.Println(\"AfterInsert called\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Updating mongox.NewCollection Usage in Go\nDESCRIPTION: Demonstrates the change in how to use `mongox.NewCollection` in version 2.2.0.  Previously, it directly accepted a `mongoColl` object.  Now, it requires a `mongox.Database` object and a collection name, with the `mongox.Database` object being created using a `mongox.Client`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/changelog.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 以前\nuserColl := mongox.NewCollection[User](mongoColl)\n\n// 现在\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n\nuserColl := mongox.NewCollection[User](database, \"users\")\n```\n\n----------------------------------------\n\nTITLE: Performing a Distinct Query in Go\nDESCRIPTION: This snippet demonstrates the usage of the `Distinct` and `DistinctWithParse` methods to retrieve distinct values for a specified field from a MongoDB collection.  The `Distinct` method returns a `*mongo.DistinctResult` (in v2) or a `[]any` (in v1). `DistinctWithParse` is used to directly parse the distinct values into a slice.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/finder.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ndistinctResult := userColl.Finder().Distinct(context.Background(), \"age\")\nif distinctResult.Err() != nil {\n    panic(distinctResult.Err())\n}\n\n// 你可以使用 DistinctWithParse 方法来解析结果到一个切片\nageSlice := make([]int, 0)\nerr := userColl.Finder().DistinctWithParse(context.Background(), \"age\", &ageSlice)\n```\n\n----------------------------------------\n\nTITLE: Defining Find Hooks in go-mongox\nDESCRIPTION: This snippet showcases how to define and implement `BeforeFind` and `AfterFind` hooks for querying documents using go-mongox. It includes both an `AfterFind` method attached to the `User` struct and separate `BeforeFind` and `AfterFind` methods implemented on a `findHook` struct. Requires the `mongox` package.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\",inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\nfunc (u *User) AfterFind(ctx context.Context) error {\n\tfmt.Println(\"AfterFind called\")\n\treturn nil\n}\n\ntype findHook struct{}\n\nfunc (b *findHook) BeforeFind(ctx context.Context) error {\n\tfmt.Println(\"BeforeFind called\")\n\treturn nil\n}\n\nfunc (b *findHook) AfterFind(ctx context.Context) error {\n\tfmt.Println(\"AfterFind called\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields and Parsing Aggregation Result in Go\nDESCRIPTION: This snippet illustrates how to rename fields during aggregation and parse the results into a custom struct (`RealUser`). It uses `AggregateWithParse()` to handle the parsing. The `Project` stage is built using `bsonx.NewD()` to define the field renaming mapping.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/aggregator.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Field renaming, aggregate query and parse the result\ntype RealUser struct {\n    mongox.Model `bson:\"inline\"`\n    RealName     string `bson:\"real_name\"`\n    Age          int    `bson:\"age\"`\n}\nvar results []*RealUser\nerr := userColl.Aggregator().\n    Pipeline(aggregation.NewStageBuilder().Project(\n        bsonx.NewD().Add(\"real_name\", \"$name\").Add(\"age\", 1).Build(),\n    ).Build()).\n    AggregateWithParse(context.Background(), &results)\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB client in Go\nDESCRIPTION: Creates a MongoDB client using the official `go.mongodb.org/mongo-driver` package. It configures the client with connection options like URI, username, password, and authentication source, then pings the server to verify the connection.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/generic-collection.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 示例代码，仅供参考\nfunc newMongoClient() (*mongo.Client, error) {\n  client, err := mongo.Connect(options.Client().ApplyURI(\"mongodb://localhost:27017\").SetAuth(options.Credential{\n      Username:   \"test\",\n      Password:   \"test\",\n      AuthSource: \"db-test\",\n  }))\n  if err != nil {\n      return nil, err\n  }\n  err = client.Ping(context.Background(), readpref.Primary())\n  if err != nil {\n      panic(err)\n  }\n  return client, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic $lookup Aggregation with go-mongox\nDESCRIPTION: This snippet demonstrates a basic `$lookup` aggregation stage that joins the `users` collection with the `orders` collection based on the `_id` and `userId` fields. The joined orders are added to each user document as an array named `userOrders`. It uses the `Lookup` method with `LocalField` and `ForeignField`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/lookup.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Lookup(\"orders\", \"userOrders\", &aggregation.LookUpOptions{\n    LocalField:   \"_id\",\n    ForeignField: \"userId\",\n}).Build()\n```\n\n----------------------------------------\n\nTITLE: Defining User struct for MongoDB with go-mongox\nDESCRIPTION: This snippet defines a `User` struct that represents a user document in MongoDB. It includes fields for ID, name, and age. The `mongox.Model` struct is embedded to include common fields like `_id`, `createdAt`, and `updatedAt`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/lookup.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Updating with $currentDate using a Builder in Go\nDESCRIPTION: This snippet demonstrates using the `Builder` method from the `update` package to build a `$currentDate` update document. It sets the `last_modified` field to the current date and `created_at` to a timestamp. It requires the `go-mongox` and `bsonx` libraries.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/update/field/currentDate.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"$currentDate\", Value:bson.D{bson.E{Key:\"last_modified\", Value:true}, bson.E{Key:\"created_at\", Value:bson.D{bson.E{Key:\"$type\", Value:\"timestamp\"}}}}}}\n/*\n    {\n      \"$currentDate\": {\n        \"last_modified\": true,\n        \"created_at\": {\n          \"$type\": \"timestamp\"\n        }\n      }\n    }\n*/\nupdate.NewBuilder().\n    CurrentDate(\"last_modified\", true).\n    CurrentDate(\"created_at\", bsonx.D(\"$type\", \"timestamp\")).\n    Build()\n```\n\n----------------------------------------\n\nTITLE: Building $add Expression with Add Function in Go\nDESCRIPTION: This snippet shows how to build a `$add` expression using the `Add` function from the `aggregation` package. It takes a key (`total`) and two field names (`$price` and `$fee`) as input. The function returns a `bson.D` that includes the `$add` expression nested under the specified key. The expected output is a BSON document with a \"total\" field containing the result of adding the 'price' and 'fee' fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/expression/accumulators/add.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\naggregation.Add(\"total\", \"$price\", \"$fee\")\n```\n\n----------------------------------------\n\nTITLE: Embedding mongox.Model into a custom struct in Go\nDESCRIPTION: This example demonstrates how to embed the `mongox.Model` struct into a custom `User` struct. The `bson:\",inline\"` tag ensures that the fields from `mongox.Model` are embedded directly into the `User` struct's corresponding MongoDB document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/model.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\",inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: OpType Definition in Go\nDESCRIPTION: This code snippet defines the `OpType` type as a string alias in Go. It serves as a type for specifying when a plugin should be executed relative to MongoDB operations (e.g., before insert, after update). There are no dependencies beyond the Go language itself.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/plugins/op-type.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype OpType string\n```\n\n----------------------------------------\n\nTITLE: Define User Struct with Custom Timestamp Fields in Go\nDESCRIPTION: This code defines a `User` struct with various timestamp fields and `mongox` tags to customize how creation and update times are handled. It demonstrates using `time.Time`, `int`, and `int64` types, along with the `autoCreateTime` and `autoUpdateTime` tags to specify different timestamp precisions (seconds, milliseconds, nanoseconds).\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/model.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tCreatedAt        time.Time // 在插入文档时，如果该字段的值为零值，则会自动设置为当前时间\n\tUpdatedAt        int       // 在插入文档时，如果该字段的值为零值或更新文档时，会自动设置为当前时间戳秒数\n\tCreateSecondTime int64     `mongox:\"autoCreateTime\"`        // 使用秒级时间戳填充字段\n\tUpdateSecondTime int64     `mongox:\"autoUpdateTime:second\"` // 使用秒级时间戳填充字段\n\tCreateMilliTime  int64     `mongox:\"autoCreateTime:milli\"`  // 使用毫秒级时间戳填充字段\n\tUpdateMilliTime  int64     `mongox:\"autoUpdateTime:milli\"`  // 使用毫秒级时间戳填充字段\n\tCreateNanoTime   int64     `mongox:\"autoCreateTime:nano\"`   // 使用纳秒级时间戳填充字段\n\tUpdateNanoTime   int64     `mongox:\"autoUpdateTime:nano\"`   // 使用纳秒级时间戳填充字段\n}\n```\n\n----------------------------------------\n\nTITLE: Build $bucket aggregation stage - Go\nDESCRIPTION: This code snippet builds a `$bucket` aggregation stage that groups users by age. It defines age boundaries (0, 19, 31, 46, +Inf), a default bucket named \"Other\" for ages outside these boundaries, and specifies output fields: `count` (sum of documents in each bucket) and `names` (an array of user names in each bucket).\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/bucket.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Bucket(\n    \"$age\",\n    []any{0, 19, 31, 46, math.Inf(1)},\n    &types.BucketOptions{\n        DefaultKey: \"Other\",\n        Output:     aggregation.NewBuilder().Sum(\"count\", 1).Push(\"names\", \"$name\").Build(),\n    },\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Define User struct for MongoDB in Go\nDESCRIPTION: Defines a `User` struct with fields for `Name`, `Age`, and `Hobbies`. The struct includes `mongox.Model` for MongoDB integration. The `bson` tags map the struct fields to corresponding fields in the MongoDB document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/unwind.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n\tHobbies      []string `bson:\"hobbies\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests with Make\nDESCRIPTION: This snippet shows how to use the `make ut` command to run unit tests and validate the functionality implemented in the local repository. Test cases should cover various scenarios, including edge and exceptional cases, to ensure code robustness and reliability.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/contribute.md#_snippet_2\n\nLANGUAGE: Makefile\nCODE:\n```\nmake ut\n```\n\n----------------------------------------\n\nTITLE: Registering and Removing Global Plugins in mongox Go\nDESCRIPTION: This code demonstrates how to register and remove global plugins within a `mongox` database. The `RegisterPlugin` function adds a plugin that executes after a find operation, printing the retrieved document or documents. The `RemovePlugin` function then removes the registered plugin using its name and operation type. It requires a defined struct named `User` which embeds `mongox.Model`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/database/database.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// 注册全局插件\ndatabase.RegisterPlugin(\"after find\", func(ctx context.Context, opCtx *operation.OpContext, opts ...any) error {\n    if user, ok := opCtx.Doc.(*User); ok {\n        fmt.Println(user)\n    }\n    if users, ok := opCtx.Doc.([]*User); ok {\n        fmt.Println(users)\n    }\n    return nil\n}, operation.OpTypeAfterFind)\n\n// 移除全局插件\ndatabase.RemovePlugin(\"after find\", operation.OpTypeAfterFind)\n```\n\n----------------------------------------\n\nTITLE: Gte Query Condition - Function Build - Go\nDESCRIPTION: Builds a $gte query condition using the `Gte` function from the `query` package.  It takes the field name and the value to compare against as input parameters. The expected output is a bson.D representing the query condition.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/gte.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gte\", Value:18}}}}\nquery.Gte(\"age\", 18)\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Hooks in Mongox\nDESCRIPTION: This snippet showcases how to implement the BeforeDelete and AfterDelete hooks in Mongox using the ModelHook method. A `deleteHook` struct is defined with both `BeforeDelete` and `AfterDelete` methods. The example then demonstrates how to apply this hook using `ModelHook` in both `DeleteOne` and `DeleteMany` operations.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/hooks/model-hooks.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype deleteHook struct{}\n\nfunc (d *deleteHook) BeforeDelete(ctx context.Context) error {\n\tfmt.Println(\"BeforeDelete called\")\n\treturn nil\n}\n\nfunc (d *deleteHook) AfterDelete(ctx context.Context) error {\n\tfmt.Println(\"AfterDelete called\")\n\treturn nil\n}\n\nmongox.InitPlugin(&mongox.PluginConfig{\n    EnableModelHook: true,\n})\n\ndeleteOneResult, err := userColl.Deleter().ModelHook(new(deleteHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).DeleteOne(context.Background())\n\ndeleteManyResult, err := userColl.Deleter().ModelHook(new(deleteHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).DeleteMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Build $unwind stage in Go\nDESCRIPTION: Constructs a MongoDB aggregation pipeline stage `$unwind` using the `aggregation.NewStageBuilder().Unwind()` method. This example unwinds the `hobbies` array. The `Build()` method is called to finalize the stage construction.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/unwind.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\naggregation.NewStageBuilder().Unwind(\"$hobbies\", nil).Build()\n```\n\n----------------------------------------\n\nTITLE: Define User struct with mongox embedding\nDESCRIPTION: Defines a `User` struct with embedded `mongox.Model` for MongoDB integration. Includes fields for `Name` (string) and `Age` (int) with bson tags for proper field mapping to MongoDB.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/bucketAuto.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration/Removal (Previous)\nDESCRIPTION: Illustrates the previous way to register and remove plugins using global functions. This method is deprecated in v2.2.0.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/changelog.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Previously\nmongox.RegisterPlugin()\nmongox.RemovePlugin()\n```\n\n----------------------------------------\n\nTITLE: Defining User struct for MongoDB\nDESCRIPTION: Defines a `User` struct with `mongox.Model` embedded for MongoDB integration. The struct includes fields for Name (string) and Age (int), along with `bson` tags for mapping to MongoDB document fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/addFields.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents with Insert Hooks in go-mongox\nDESCRIPTION: This code demonstrates inserting one or many documents into a MongoDB collection using go-mongox. It shows how the defined `BeforeInsert` and `AfterInsert` hooks are triggered during the insertion process. Requires the `User` struct with implemented hooks and `userColl` representing the MongoDB collection.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nuser := &User{Name: \"Mingyong Chen\", Age: 18}\ninsertOneResult, err := userColl.Creator().InsertOne(context.Background(), user)\n\nusers := []*User{\n    {Name: \"Mingyong Chen\", Age: 18},\n    {Name: \"chenmingyong\", Age: 18},\n}\ninsertManyResult, err := userColl.Creator().InsertMany(context.Background(), users)\n\n// You can also use the ModelHook method to pass an object that implements the BeforeInsert and AfterInsert methods.\n// Note: The object passed via ModelHook takes precedence over the parameters passed in the InsertOne method.\n// userColl.Creator().ModelHook(user).InsertOne(context.Background(), user)\n```\n\n----------------------------------------\n\nTITLE: Executing Integration Tests with Make\nDESCRIPTION: This snippet demonstrates how to run integration tests using the `make e2e` command, validating the interaction between different parts of the system. It helps in ensuring the overall functionality and stability of the project.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/contribute.md#_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\nmake e2e\n```\n\n----------------------------------------\n\nTITLE: Advanced $lookup Aggregation with Go Mongox\nDESCRIPTION: This snippet demonstrates an advanced `$lookup` operation to find orders with a total amount greater than 100 associated with each user in the `users` collection. It uses a pipeline within the `$lookup` stage to filter orders based on the `totalAmount` field and stores the results in the `largeOrders` array within each user document. This also needs `bsonx` from `go.mongodb.org/mongo-driver/bson/primitive` and `time` for `OrderDate` field.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/lookup.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\ntype Order struct {\n\tID         primitive.ObjectID `bson:\"_id,omitempty\"` // 订单的唯一标识符\n\tUserID     primitive.ObjectID `bson:\"userId\"`        // 关联的用户ID，对应 User 集合中的 _id\n\tTotalAmount float64           `bson:\"totalAmount\"`   // 订单的总金额\n\tOrderDate  time.Time          `bson:\"orderDate\"`     // 订单日期\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$lookup\", Value:bson.D{bson.E{Key:\"from\", Value:\"orders\"}, bson.E{Key:\"let\", Value:bson.D{bson.E{Key:\"userId\", Value:\"$_id\"}}}, bson.E{Key:\"pipeline\", Value:mongo.Pipeline{bson.D{bson.E{Key:\"$match\", Value:bson.D{bson.E{Key:\"$expr\", Value:bson.D{bson.E{Key:\"$and\", Value:[]interface {}{bson.D{bson.E{Key:\"$eq\", Value:[]interface {}{\"$userId\", \"$$userId\"}}}, bson.D{bson.E{Key:\"$gt\", Value:[]interface {}{\"$totalAmount\", 100}}}}}}}}}}}}, bson.E{Key:\"as\", Value:\"largeOrders\"}}}}}\n//[\n//  {\n//    \"$lookup\": {\n//      \"from\": \"orders\",\n//      \"let\": { \"userId\": \"$_id\" },\n//      \"pipeline\": [\n//        {\n//          \"$match\": {\n//            \"$expr\": {\n//              \"$and\": [ { \"$eq\": [\"$userId\", \"$$userId\"] }, { \"$gt\": [\"$totalAmount\", 100] } ]\n//            }\n//          }\n//        }\n//      ],\n//      \"as\": \"largeOrders\"\n//    }\n//  }\n//]\naggregation.NewStageBuilder().Lookup(\"orders\", \"largeOrders\", &aggregation.LookUpOptions{\n    Let: bsonx.D(\"userId\", \"$_id\"),\n    Pipeline: aggregation.NewStageBuilder().Match(\n        aggregation.And(\"$expr\", aggregation.EqWithoutKey(\"$userId\", \"$$userId\"), aggregation.GtWithoutKey(\"$totalAmount\", 100)),\n    ).Build(),\n}).Build()\n```\n\n----------------------------------------\n\nTITLE: Initializing go-mongox Plugin with Model Hooks\nDESCRIPTION: This code initializes the go-mongox plugin and enables model hooks. Setting `EnableModelHook` to `true` is crucial for the hooks to function correctly. This initialization must occur before using any hooks. Requires the `mongox` package.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmongox.InitPlugin(&mongox.PluginConfig{\n    EnableModelHook:        true,\n})\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration/Removal (Updated)\nDESCRIPTION: Shows the updated method for registering and removing plugins in v2.2.0. Plugins are now registered and removed on the `mongox.Database` object. The code initializes a client and a database named 'db-test' before performing the plugin operations.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/changelog.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Now\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n\ndatabase.RegisterPlugin()\ndatabase.RemovePlugin()\n```\n\n----------------------------------------\n\nTITLE: Implementing Find Hooks in Mongox\nDESCRIPTION: This snippet illustrates how to implement the AfterFind hook in a Mongox model and how to use the ModelHook method to trigger the BeforeFind hook.  The example demonstrates defining a struct with an AfterFind method, and a separate struct implementing both BeforeFind and AfterFind.  It also shows how to use these hooks with FindOne and Find methods on a Mongox Finder.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/hooks/model-hooks.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\",inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\nfunc (u *User) AfterFind(ctx context.Context) error {\n\tfmt.Println(\"AfterFind called\")\n\treturn nil\n}\n\ntype findHook struct{}\n\nfunc (b *findHook) BeforeFind(ctx context.Context) error {\n\tfmt.Println(\"BeforeFind called\")\n\treturn nil\n}\n\nfunc (b *findHook) AfterFind(ctx context.Context) error {\n\tfmt.Println(\"AfterFind called\")\n\treturn nil\n}\n\nmongox.InitPlugin(&mongox.PluginConfig{\n    EnableModelHook:        true,\n})\n\nuser, err := userColl.Finder().ModelHook(new(findHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).FindOne(context.Background())\n\nusers, err := userColl.Finder().Filter(query.In(\"name\", \"Mingyong Chen\", \"chenmingyong\")).Find(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Define User struct with mongox tags\nDESCRIPTION: Defines a `User` struct with `mongox` tags for MongoDB integration.  It includes fields for `Name` and `Age`, along with the embedded `mongox.Model` for common fields like `_id` and timestamps.  This struct is used in the subsequent aggregation pipeline example.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/project.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Building $gte Query Condition with Builder in Go\nDESCRIPTION: This code snippet illustrates how to construct a '$gte' query condition using the `Builder` from the `query` package. The builder pattern allows for chaining multiple query conditions together, making it suitable for creating more complex queries. The `Build` method finalizes the query construction and returns the resulting BSON document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/gte.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gte\", Value:18}}}}\n query.NewBuilder().Gte(\"age\", 18).Build()\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Hooks in go-mongox\nDESCRIPTION: This code shows how to define `BeforeDelete` and `AfterDelete` hooks for deleting documents using go-mongox. These hooks are implemented on a separate `deleteHook` struct. Requires the `mongox` package.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype deleteHook struct{}\n\nfunc (d *deleteHook) BeforeDelete(ctx context.Context) error {\n\tfmt.Println(\"BeforeDelete called\")\n\treturn nil\n}\n\nfunc (d *deleteHook) AfterDelete(ctx context.Context) error {\n\tfmt.Println(\"AfterDelete called\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB $replaceWith Aggregation Stage in Go\nDESCRIPTION: This code snippet shows how to construct a MongoDB aggregation pipeline stage that replaces existing documents with a new structure containing only the 'name' and 'isAdult' fields. It utilizes the `aggregation.NewStageBuilder` and `bsonx.NewD` to define the new document structure.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/replaceWith.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$addFields\", Value:bson.D{bson.E{Key:\"isAdult\", Value:bson.D{bson.E{Key:\"$gte\", Value:[]interface {}{\"$age\", 18}}}}}}}, bson.D{bson.E{Key:\"$replaceWith\", Value:bson.D{bson.E{Key:\"name\", Value:\"$name\"}, bson.E{Key:\"isAdult\", Value:\"$isAdult\"}}}}}\n//[\n//  {\n//    \"$addFields\": {\n//      \"isAdult\": {\n//        \"$gte\": [\"$age\", 18]\n//      }\n//    }\n//  },\n//  {\n//    \"$replaceWith\": {\n//      \"name\": \"$name\",\n//      \"isAdult\": \"$isAdult\"\n//    }\n//  }\n//]\naggregation.NewStageBuilder().\n    AddFields(aggregation.Gte(\"isAdult\", \"$age\", 18)).\n    ReplaceWith(bsonx.NewD().Add(\"name\", \"$name\").Add(\"isAdult\", \"$isAdult\").Build()).Build()\n```\n\n----------------------------------------\n\nTITLE: Upserting Documents with Upsert Hooks in go-mongox\nDESCRIPTION: This example showcases how to use upsert hooks when upserting documents in a MongoDB collection using go-mongox. It uses `ModelHook` to pass an object implementing `BeforeUpsert` and `AfterUpsert`. Requires `userColl` representing the MongoDB collection, `query` and `update` from `go.mongodb.org/mongo-driver/bson/primitive`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().ModelHook(new(upsertHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).Updates(update.Set(\"age\", 6)).Upsert(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Defining Update Hooks in go-mongox\nDESCRIPTION: This code defines `BeforeUpdate` and `AfterUpdate` hooks for updating documents using go-mongox. These hooks are implemented on a separate `updateHook` struct. Requires the `mongox` package.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype updateHook struct{}\n\nfunc (u *updateHook) BeforeUpdate(ctx context.Context) error {\n\tfmt.Println(\"BeforeUpdate called\")\n\treturn nil\n}\n\nfunc (u *updateHook) AfterUpdate(ctx context.Context) error {\n\tfmt.Println(\"AfterUpdate called\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating mongox client, database and collection\nDESCRIPTION: Creates a `mongox` client using the standard MongoDB client, then creates a `mongox` database instance. Finally, it creates a generic collection of `User` type using the `mongox.NewCollection` function, linked to the 'users' collection in the database.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/getting-started/generic-collection.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmongoClient, err := newMongoClient()\nif err != nil {\n  panic(err)\n}\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n\nuserColl := mongox.NewCollection[User](database, \"users\")\n```\n\n----------------------------------------\n\nTITLE: Defining the Callback Function Signature in Go\nDESCRIPTION: This snippet defines the signature for the callback function `CbFn` used when registering a plugin.  It takes a context, an operation context (`opCtx`), and a variable number of optional arguments. The callback function is designed to execute custom logic before or after specific database operations.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/plugins/plugins.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype CbFn func(ctx context.Context, opCtx *operation.OpContext, opts ...any) error\n```\n\n----------------------------------------\n\nTITLE: Defining User Struct in Go\nDESCRIPTION: This struct defines the structure of a User document with fields for ID, Name, and Age. It includes bson tags for proper mapping to MongoDB fields using the `mongox` library.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/project.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB $count Aggregation Stage in Go\nDESCRIPTION: This snippet demonstrates how to use the `go-mongox` library to build a `$count` aggregation pipeline stage. It defines a `User` struct with `mongox.Model`, `Name`, and `Age` fields. Then, it constructs the `$count` stage using `aggregation.NewStageBuilder().Count(\"totalUsers\").Build()`, which is equivalent to `mongo.Pipeline{bson.D{bson.E{Key:\"$count\", Value:\"totalUsers\"}}}`. The result is an aggregation stage that counts all documents in the collection and stores the count in the 'totalUsers' field.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/count.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$count\", Value:\"totalUsers\"}}}\n// [\n//  {\n//    \"$count\": \"totalUsers\"\n//  }\n// ]\naggregation.NewStageBuilder().Count(\"totalUsers\").Build()\n```\n\n----------------------------------------\n\nTITLE: Defining Upsert Hooks in go-mongox\nDESCRIPTION: This code snippet defines `BeforeUpsert` and `AfterUpsert` hooks for upserting documents using go-mongox. These hooks are implemented on a separate `upsertHook` struct. Requires the `mongox` package.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype upsertHook struct{}\n\nfunc (u *upsertHook) BeforeUpsert(ctx context.Context) error {\n\tfmt.Println(\"BeforeUpsert called\")\n\treturn nil\n}\n\nfunc (u *upsertHook) AfterUpsert(ctx context.Context) error {\n\tfmt.Println(\"AfterUpsert called\")\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Build $sortByCount stage using aggregation builder\nDESCRIPTION: Constructs a `$sortByCount` aggregation pipeline stage that sorts and counts documents based on the `age` field. It uses the `aggregation.NewStageBuilder` and the `SortByCount` method.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/sortByCount.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().SortByCount(\"$age\").Build()\n```\n\n----------------------------------------\n\nTITLE: Defining the OpContext struct in Go\nDESCRIPTION: This code snippet defines the `OpContext` struct, which is used to pass operation context information within the go-mongox library. It includes fields for the MongoDB collection, struct field metadata, document objects, query filters, updates, aggregation pipelines, MongoDB operation options, model hooks, reflection value of the document, operation start time, and the operation result.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/plugins/op-context.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype OpContext struct {\n    Col           *mongo.Collection `opt:\"-\"` // The collection object\n    Fields        []*field.Filed    // Metadata of the struct fields bound to the Collection's generic type\n    Doc           any                // Document object (e.g., *T or []*T)\n    Filter        any                // Query filter\n    Updates       any                // Document updates\n    Pipeline      any                // Aggregation pipeline\n    MongoOptions  any                // MongoDB operation options\n    ModelHook     any                // Model hook\n    ReflectValue  reflect.Value     // Reflection value of the Doc (used to dynamically modify the document in plugins)\n    StartTime     time.Time         // Operation start time\n    Result        any                // Result of the MongoDB collection operation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Hooks in Mongox\nDESCRIPTION: This snippet demonstrates how to use update hooks, specifically `BeforeUpdate` and `AfterUpdate` with the `ModelHook` in `Mongox`. An `updateHook` struct is created with both methods. The example showcases using the hook with `UpdateOne` and `UpdateMany` operations, demonstrating how to trigger the hooks by passing the hook object via `ModelHook`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/hooks/model-hooks.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype updateHook struct{}\n\nfunc (u *updateHook) BeforeUpdate(ctx context.Context) error {\n\tfmt.Println(\"BeforeUpdate called\")\n\treturn nil\n}\n\nfunc (u *updateHook) AfterUpdate(ctx context.Context) error {\n\tfmt.Println(\"AfterUpdate called\")\n\treturn nil\n}\n\nmongox.InitPlugin(&mongox.PluginConfig{\n    EnableModelHook: true,\n})\n\nupdateOneResult, err := userColl.Updater().ModelHook(new(updateHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).Updates(update.Set(\"age\", 6)).UpdateOne(context.Background())\n\nupdateManyResult, err := userColl.Updater().ModelHook(new(updateHook)).Filter(query.In(\"name\", \"Mingyong Chen\", \"chenmingyong\")).Updates(update.Set(\"age\", 6)).UpdateMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Defining User struct for MongoDB in Go\nDESCRIPTION: This code defines a `User` struct with fields for `Name` (string) and `Age` (int). It also embeds `mongox.Model` which is likely a base struct for MongoDB models, providing common fields like `_id`. The `bson` tags are used to map the struct fields to MongoDB document fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/bucket.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Client in Go\nDESCRIPTION: This code snippet demonstrates how to create a MongoDB client using the official `go.mongodb.org/mongo-driver` package. It establishes a connection to a MongoDB server, authenticates with a username, password, and authentication source, and then pings the server to verify the connection. It returns the created mongo client or an error if the connection fails.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/database/database.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 示例代码，不是最佳的创建方式\nfunc newMongoClient() (*mongo.Client, error) {\n\tclient, err := mongo.Connect(options.Client().ApplyURI(\"mongodb://localhost:27017\").SetAuth(options.Credential{\n\t\tUsername:   \"test\",\n\t\tPassword:   \"test\",\n\t\tAuthSource: \"db-test\",\n\t}))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = client.Ping(context.Background(), readpref.Primary())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn client, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Add Aggregation Builder Construction in Go\nDESCRIPTION: Demonstrates how to construct a $add aggregation expression in Go using the `Builder` from the `aggregation` package. The Builder pattern allows for chaining methods to create the aggregation pipeline stages.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/expression/accumulators/add.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"total\", Value:bson.D{bson.E{Key:\"$add\", Value:[]interface {}{\"$price\", \"$fee\"}}}}}\n/*\n   {\n     \"total\": {\n       \"$add\": [\"$price\", \"$fee\"]\n     }\n   }\n*/\naggregation.NewBuilder().Add(\"total\", \"$price\", \"$fee\").Build()\n```\n\n----------------------------------------\n\nTITLE: Building $addFields Stage with Go\nDESCRIPTION: This code snippet demonstrates how to use the `aggregation.NewStageBuilder` and `aggregation.NewBuilder` to construct a MongoDB aggregation pipeline stage that adds two new fields to documents: `isAdult` (a boolean indicating if the user is 18 or older) and `birthYear` (calculated by subtracting the age from 2024). It uses the `$gte` and `$subtract` operators within the `$addFields` stage. The snippet assumes there is a `User` struct defined with fields like `Name` and `Age`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/addFields.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$addFields\", Value:bson.D{bson.E{Key:\"isAdult\", Value:bson.D{bson.E{Key:\"$gte\", Value:[]interface {}{\"$age\", 18}}}}, bson.E{Key:\"birthYear\", Value:bson.D{bson.E{Key:\"$subtract\", Value:[]interface {}{2024, \"$age\"}}}}}}}}}}\n// [\n//  {\n//    \"$addFields\": {\n//      \"isAdult\": {\n//        \"$gte\": [\"$age\", 18]\n//      },\n//      \"birthYear\": {\n//        \"$subtract\": [2024, \"$age\"]\n//      }\n//    }\n//  }\n//]\naggregation.NewStageBuilder().AddFields(\n    aggregation.NewBuilder().\n        // 如果年龄大于或等于 18，isAdult 为 true\n        Gte(\"isAdult\", \"$age\", 18).\n        // 计算出生年份\n        Subtract(\"birthYear\", 2024, \"$age\").Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents with Delete Hooks in go-mongox\nDESCRIPTION: This example illustrates how to use delete hooks when deleting documents from a MongoDB collection in go-mongox. It uses `ModelHook` to pass an object implementing `BeforeDelete` and `AfterDelete`, and demonstrates both `DeleteOne` and `DeleteMany` operations. Requires `userColl` representing the MongoDB collection, and `query` from `go.mongodb.org/mongo-driver/bson/primitive`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/hooks/model-hooks.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ndeleteOneResult, err := userColl.Deleter().ModelHook(new(deleteHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).DeleteOne(context.Background())\n\ndeleteManyResult, err := userColl.Deleter().ModelHook(new(deleteHook)).Filter(query.Eq(\"name\", \"Mingyong Chen\")).DeleteMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Registering and Removing Plugins in mongox\nDESCRIPTION: This snippet shows how to register and remove a plugin in `mongox`. The plugin is registered for the `OpTypeAfterFind` operation type, and the callback function prints the `User` or `[]*User` documents if they are found in the `opCtx.Doc` field. It uses `database.RegisterPlugin` and `database.RemovePlugin` to manage the plugin.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/plugins/plugins.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// Register plugin\ndatabase.RegisterPlugin(\"after find\", func(ctx context.Context, opCtx *operation.OpContext, opts ...any) error {\n    if user, ok := opCtx.Doc.(*User); ok {\n        fmt.Println(user)\n    }\n    if users, ok := opCtx.Doc.([]*User); ok {\n        fmt.Println(users)\n    }\n    return nil\n}, operation.OpTypeAfterFind)\n\n// Remove plugin\ndatabase.RemovePlugin(\"after find\", operation.OpTypeAfterFind)\n```\n\n----------------------------------------\n\nTITLE: Count Stage Construction in Go\nDESCRIPTION: This code snippet demonstrates how to create a $count stage in a MongoDB aggregation pipeline using the `aggregation.NewStageBuilder` in Go. It defines a User struct and then constructs a pipeline stage that counts the total number of users, storing the result in a field named \"totalUsers\".\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/count.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$count\", Value:\"totalUsers\"}}}\n// [\n//  {\n//    \"$count\": \"totalUsers\"\n//  }\n// ]\naggregation.NewStageBuilder().Count(\"totalUsers\").Build()\n```\n\n----------------------------------------\n\nTITLE: Customizing CreatedAt and UpdatedAt fields with mongox tags in Go\nDESCRIPTION: This snippet showcases how to use `autoCreateTime` and `autoUpdateTime` tags with different timestamp precisions (second, milli, nano) and different data types (time.Time, int, int64) for `CreatedAt` and `UpdatedAt` fields. `mongox` will automatically set their values.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/model.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tCreatedAt        time.Time // Automatically set to the current time if zero value when inserting\n\tUpdatedAt        int       // Automatically set to the current timestamp (in seconds) if zero value when inserting or updating\n\tCreateSecondTime int64     `mongox:\"autoCreateTime\"`        // Fills with timestamp in seconds\n\tUpdateSecondTime int64     `mongox:\"autoUpdateTime:second\"` // Fills with timestamp in seconds\n\tCreateMilliTime  int64     `mongox:\"autoCreateTime:milli\"`  // Fills with timestamp in milliseconds\n\tUpdateMilliTime  int64     `mongox:\"autoUpdateTime:milli\"`  // Fills with timestamp in milliseconds\n\tCreateNanoTime   int64     `mongox:\"autoCreateTime:nano\"`   // Fills with timestamp in nanoseconds\n\tUpdateNanoTime   int64     `mongox:\"autoUpdateTime:nano\"`   // Fills with timestamp in nanoseconds\n}\n```\n\n----------------------------------------\n\nTITLE: Building $add Expression with Builder in Go\nDESCRIPTION: This snippet illustrates how to build a `$add` expression using the `Builder` pattern provided by the `aggregation` package.  It uses `NewStageBuilder` to create a builder, then uses the `Add` method to add the `$add` expression to the builder, and finally calls `Build` to generate the BSON document.  The expected result is a BSON document that has a \"total\" field containing the result of adding the 'price' and 'fee' fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/expression/accumulators/add.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\naggregation.NewStageBuilder().Add(\"total\", \"$price\", \"$fee\").Build()\n```\n\n----------------------------------------\n\nTITLE: OpType Definition in Go\nDESCRIPTION: Defines the `OpType` as a string type in Go. This type is used to specify when a plugin should be executed in relation to database operations. It serves as an enumeration for the different possible operation phases.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/plugins/op-type.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype OpType string\n```\n\n----------------------------------------\n\nTITLE: Building $sort stage for MongoDB aggregation in Go\nDESCRIPTION: This code snippet constructs a `$sort` stage for a MongoDB aggregation pipeline. It sorts documents first by the `age` field in ascending order and then by the `name` field in ascending order using `aggregation.NewStageBuilder` and `bsonx.NewD`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/sort.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Sort(bsonx.NewD().Add(\"age\", 1).Add(\"name\", 1).Build()).Build()\n```\n\n----------------------------------------\n\nTITLE: Running Code Checks with Make\nDESCRIPTION: This snippet demonstrates using `make check` and `make lint` commands to ensure the code complies with the project's coding standards and quality criteria before submitting code.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/contribute.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake check\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Unwinding Array Field with go-mongox\nDESCRIPTION: This code snippet demonstrates how to use the `Unwind` method from the `aggregation.NewStageBuilder` to create an aggregation pipeline stage that unwinds the 'hobbies' array field of a User document. It shows the struct definition, a commented-out MongoDB pipeline example, and the actual Go code to build the $unwind stage.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/unwind.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n\tHobbies      []string `bson:\"hobbies\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$unwind\", Value:\"$hobbies\"}}}\n//[\n//  {\n//    \"$unwind\": \"$hobbies\"\n//  }\n//]\naggregation.NewStageBuilder().Unwind(\"$hobbies\", nil).Build()\n```\n\n----------------------------------------\n\nTITLE: Defining Order struct for MongoDB with go-mongox\nDESCRIPTION: This snippet defines an `Order` struct that represents an order document in MongoDB. It includes fields for ID, user ID, total amount, and order date. The `primitive.ObjectID` is used for MongoDB's `_id` field. The `bson` tags are used to map struct fields to MongoDB document fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/lookup.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Order struct {\n    ID          primitive.ObjectID `bson:\"_id,omitempty\"` // Unique identifier for the order\n    UserID      primitive.ObjectID `bson:\"userId\"`        // Associated user ID, corresponding to the _id in the User collection\n    TotalAmount float64            `bson:\"totalAmount\"`   // Total amount of the order\n    OrderDate   time.Time          `bson:\"orderDate\"`     // Date of the order\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Documents with Deleter in Go\nDESCRIPTION: This snippet demonstrates how to delete multiple documents from a MongoDB collection using the `Deleter` object in the `go-mongox` library. It uses the `Filter` method with the `In` operator to specify a list of document IDs to delete and calls the `DeleteMany` method to perform the deletion. The `deleteResult` variable holds the result of the delete operation.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/deleter.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ndeleteResult, err := userColl.Deleter().Filter(query.In(\"_id\", \"60e96214a21b1b0001c3d69e\", \"80e96214a21b1b0001c3d70e\")).DeleteMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Defining the RegisterPlugin Function Signature in Go\nDESCRIPTION: This snippet defines the function signature for `RegisterPlugin`. It shows that the function takes a plugin name, a callback function, and an operation type as arguments. The callback function is executed based on the specified operation type.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/plugins/plugins.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (d *Database) RegisterPlugin(name string, cb callback.CbFn, opType operation.OpType)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Document with Deleter in Go\nDESCRIPTION: This snippet demonstrates how to delete a single document from a MongoDB collection using the `Deleter` object in the `go-mongox` library. It uses the `Filter` method to specify the document to delete based on its ID and calls the `DeleteOne` method to perform the deletion. The `deleteResult` variable holds the result of the delete operation.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/deleter.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ndeleteResult, err := userColl.Deleter().Filter(query.Id(\"60e96214a21b1b0001c3d69e\")).DeleteOne(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Counting Documents in Go\nDESCRIPTION: This snippet illustrates how to count the number of documents in a MongoDB collection that match a specified filter using the `Count` method of the `Finder` type. A new query builder constructs a filter to find documents where the 'age' field is greater than 18 and less than 24. The count is returned as an `int64`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/finder.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncount, err := userColl.Finder().\n\t\tFilter(query.NewBuilder().Gt(\"age\", 18).Lt(\"age\", 24).Build()).\n\t\tCount(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Upsert Document with go-mongox\nDESCRIPTION: This code snippet demonstrates how to perform an upsert operation in a MongoDB collection using the `Updater` feature of the go-mongox library. It uses `Filter` to specify the document to update or insert and `Updates` to specify the update operation. If no document matches the filter, a new document with the specified fields will be inserted.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/updater.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().\n\t\tFilter(query.Eq(\"name\", \"Mingyong Chen\")).\n\t\tUpdates(update.NewBuilder().Set(\"name\", \"Mingyong Chen\").Set(\"age\", 18).Build()).\n\t\tUpsert(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building $addFields Aggregation Stage in Go\nDESCRIPTION: Constructs an `$addFields` stage to add the `isAdult` and `birthYear` fields. `isAdult` is a boolean derived from whether the `age` field is greater than or equal to 18. `birthYear` is calculated by subtracting the `age` from 2024. Uses `aggregation.NewStageBuilder` and `aggregation.NewBuilder` from the `go-mongox` library.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/addFields.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().AddFields(\n    aggregation.NewBuilder().\n        // If age is greater than or equal to 18, isAdult is true\n        Gte(\"isAdult\", \"$age\", 18).\n        // Calculate the birth year\n        Subtract(\"birthYear\", 2024, \"$age\").Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $bucketAuto Stage with aggregation.NewStageBuilder in Go\nDESCRIPTION: This code snippet demonstrates how to build the `$bucketAuto` aggregation pipeline stage using `aggregation.NewStageBuilder` in Go. It groups users by age, divides them into 4 buckets, and calculates the count, average age, and collects names for each bucket using aggregation builders.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/bucketAuto.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().BucketAuto(\n    \"$age\",\n    4,\n    &types.BucketAutoOptions{\n        Output: aggregation.NewBuilder().\n            Sum(\"count\", 1).\n            Avg(\"averageAge\", \"$age\").\n            Push(\"names\", \"$name\").Build(),\n    },\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Initializing mongox Database\nDESCRIPTION: This snippet demonstrates how to initialize a `mongox.Database` object using an existing MongoDB client and a `mongox.Config` instance. The resulting database object is named \"db-test\".\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/plugins/plugins.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n```\n\n----------------------------------------\n\nTITLE: Building bson.D with DBuilder in Go\nDESCRIPTION: This snippet demonstrates how to use the `DBuilder` in the `bsonx` package to create a `bson.D` object. It initializes a new `DBuilder`, adds key-value pairs using the `Add` method, and then builds the final `bson.D` object using the `Build` method. The `bsonx` package needs to be imported.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/bsonx.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nd := bsonx.NewD().Add(\"name\", \"Mingyong Chen\").Add(\"name\", \"Burt\").Build()\n```\n\n----------------------------------------\n\nTITLE: Define User struct for MongoDB\nDESCRIPTION: This code defines a `User` struct that represents a document in the MongoDB collection. It includes `mongox.Model` for common fields like `_id`, `Name` as a string, and `Age` as an integer. The `bson` tags are used to map the struct fields to the corresponding fields in the MongoDB document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/facet.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Registration and Removal in Go\nDESCRIPTION: Shows the updated method for registering and removing plugins.  Previously, global functions `mongox.RegisterPlugin()` and `mongox.RemovePlugin()` were used.  Now, plugin registration and removal are performed on a `mongox.Database` object, which is obtained from a `mongox.Client` instance.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/changelog.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 以前\nmongox.RegisterPlugin()\nmongox.RemovePlugin()\n\n// 现在\nclient := mongox.NewClient(mongoClient, &mongox.Config{})\ndatabase := client.NewDatabase(\"db-test\")\n\ndatabase.RegisterPlugin()\ndatabase.RemovePlugin()\n```\n\n----------------------------------------\n\nTITLE: Updating with $currentDate using Function in Go\nDESCRIPTION: This snippet demonstrates how to build a `$currentDate` update document using the `CurrentDate` function from the `update` package.  It sets the `last_modified` field to the current date. Requires the `update` package. The input parameters are the field name (`last_modified`) and a boolean value indicating whether to set the current date.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/update/field/currentDate.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nupdate.CurrentDate(\"last_modified\", true)\n```\n\n----------------------------------------\n\nTITLE: Database RegisterPlugin Function Signature\nDESCRIPTION: This snippet shows the function signature of the `RegisterPlugin` method in the `mongox` library. It takes a plugin name, a callback function, and an operation type as parameters. The callback function's signature is also defined.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/plugins/plugins.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (d *Database) RegisterPlugin(name string, cb callback.CbFn, opType operation.OpType)\n```\n\n----------------------------------------\n\nTITLE: Defining a User struct for MongoDB documents in Go\nDESCRIPTION: Defines a `User` struct that maps to a MongoDB document structure. The `mongox.Model` is embedded for common fields like ID and timestamps.  `bson` tags are used for field mapping in MongoDB. This struct is used as the generic type for the `mongox` collection.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/getting-started/generic-collection.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n  mongox.Model `bson:\"inline\"`\n  Name         string `bson:\"name\"`\n  Age          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Gte Query Condition - Builder Build - Go\nDESCRIPTION: Builds a $gte query condition using the `Builder` from the `query` package. The builder allows for creating more complex queries by chaining multiple conditions. The `Build()` method returns the final bson.D representing the composite query condition.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/gte.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gte\", Value:18}}}}\n query.NewBuilder().Gte(\"age\", 18).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $in Query with Builder in Go\nDESCRIPTION: This snippet demonstrates building a MongoDB $in query condition using the `Builder` pattern from the `query` package. It showcases the construction of a composite query condition combining an equality check (`Eq`) and an $in check (`In`).\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/in.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"enabled\", Value:bson.D{bson.E{Key:\"$eq\", Value:true}}}, bson.E{Key:\"name\", Value:bson.D{bson.E{Key :\"$in\", Value:[]interface {}{\"Mingyong Chen\", \"Burt\"}}}}}\nquery.NewBuilder().Eq(\"enabled\", true).In(\"name\", \"Mingyong Chen\", \"Burt\").Build()\n```\n\n----------------------------------------\n\nTITLE: Delete Single Document with go-mongox\nDESCRIPTION: This snippet demonstrates how to delete a single document from a MongoDB collection using the `DeleteOne` method of the `Deleter` object in `go-mongox`. It requires a `Filter` to specify the document to delete and a `context.Context` for the operation. The `deleteResult` contains information about the deletion operation.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/operator/deleter.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ndeleteResult, err := userColl.Deleter().Filter(query.Id(\"60e96214a21b1b0001c3d69e\")).DeleteOne(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Documents with go-mongox\nDESCRIPTION: This code snippet demonstrates how to update multiple documents in a MongoDB collection using the `Updater` feature of the go-mongox library. It uses `Updates` to specify the update operation, setting the 'name' field to 'Mingyong Chen' for all documents that match the filter.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/operator/updater.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nupdateResult, err := userColl.Updater().\n\t\tUpdates(update.Set(\"name\", \"Mingyong Chen\")).\n\t\tUpdateMany(context.Background())\n```\n\n----------------------------------------\n\nTITLE: Building $gt Query with Function in Go\nDESCRIPTION: This code snippet demonstrates how to use the `Gt` function from the `query` package to construct a MongoDB query for documents where the 'age' field is greater than 18. The resulting BSON document represents the '$gt' condition.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/query/comparison/gt.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:18}}}}\nquery.Gt(\"age\", 18)\n```\n\n----------------------------------------\n\nTITLE: Define User struct for MongoDB\nDESCRIPTION: Defines a `User` struct with fields `Name` and `Age`, along with embedded `mongox.Model` which is assumed to provide common fields like `_id`. The `bson` tags are used to map the struct fields to MongoDB document fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/replaceWith.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Define User struct for MongoDB with mongox\nDESCRIPTION: Defines a User struct with embedded mongox.Model for MongoDB integration.  The struct includes fields for Name (string) and Age (int) with corresponding bson tags. The mongox.Model provides common fields like _id, createdAt, and updatedAt.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/match.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Build $replaceWith Aggregation Stage in Go\nDESCRIPTION: Demonstrates how to construct a `$replaceWith` aggregation pipeline stage using `aggregation.NewStageBuilder`. The pipeline first adds a boolean `isAdult` field based on the `Age` field and then replaces each document with a new document containing only the `name` and `isAdult` fields.  The dependencies include the `aggregation` package and `bsonx` for constructing the BSON document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/replaceWith.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().\n    AddFields(aggregation.Gte(\"isAdult\", \"$age\", 18)).\n    ReplaceWith(bsonx.NewD().Add(\"name\", \"$name\").Add(\"isAdult\", \"$isAdult\").Build()).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $in Query with In Function in Go\nDESCRIPTION: This snippet demonstrates building a MongoDB $in query condition using the `In` function from the `query` package. It specifies the field name and the values to check for within the field.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/in.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"name\", Value:bson.D{bson.E{Key:\"$in\", Value:[]string{\"Mingyong Chen\", \"Burt\"}}}}}\nquery.In(\"name\", \"Mingyong Chen\", \"Burt\")\n```\n\n----------------------------------------\n\nTITLE: Build $facet stage with aggregation.NewStageBuilder - Go\nDESCRIPTION: Constructs a $facet stage in MongoDB aggregation pipeline to perform multiple aggregations: calculate total users, group by age, and find users older than 18. It uses `aggregation.NewStageBuilder` to create the pipeline stages.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/facet.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\naggregation.NewStageBuilder().Facet(\n    bsonx.NewD().\n        Add(\"totalUsers\", aggregation.NewStageBuilder().Count(\"totalUsers\").Build()).\n        Add(\n            \"ageGroups\",\n            aggregation.NewStageBuilder().\n                Group(\"$age\", aggregation.Sum(\"count\", 1)...).\n                Sort(bsonx.D(\"_id\", 1)).Build(),\n        ).\n        Add(\n            \"over18\",\n            aggregation.NewStageBuilder().\n                Match(aggregation.Gt(\"age\", 18)).\n                Project(bsonx.NewD().Add(\"name\", 1).Add(\"age\", 1).Build()).Build()).\n        Build(),\n).Build()\n```\n\n----------------------------------------\n\nTITLE: Signature of RegisterPlugin Method in mongox Go\nDESCRIPTION: This code snippet shows the method signature of the `RegisterPlugin` function in `mongox`. It takes a plugin name (string), a callback function (`callback.CbFn`), and an operation type (`operation.OpType`) as parameters. The callback function defines the logic to be executed by the plugin. This code provides the signature of the `RegisterPlugin` and the callback function `CbFn`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/database/database.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (d *Database) RegisterPlugin(name string, cb callback.CbFn, opType operation.OpType)\n```\n\nLANGUAGE: go\nCODE:\n```\ntype CbFn func(ctx context.Context, opCtx *operation.OpContext, opts ...any) error\n```\n\n----------------------------------------\n\nTITLE: Creating $skip Stage with go-mongox\nDESCRIPTION: This code snippet demonstrates how to create a `$skip` stage in a MongoDB aggregation pipeline using the `go-mongox` library. The `Skip` method of the `aggregation.NewStageBuilder` is used to specify the number of documents to skip, and the `Build` method finalizes the stage.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/skip.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$skip\", Value:10}}}\n//[\n//  {\n//    \"$skip\": 10\n//  }\n//]\naggregation.NewStageBuilder().Skip(10).Build()\n```\n\n----------------------------------------\n\nTITLE: Building $skip Stage with mongox in Go\nDESCRIPTION: This snippet demonstrates how to create a $skip stage in a MongoDB aggregation pipeline using the mongox library. It uses the `aggregation.NewStageBuilder` to build the stage and the `Skip` method to specify the number of documents to skip. The `Build` method finalizes the stage creation.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/skip.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n\n// mongo.Pipeline{bson.D{bson.E{Key:\"$skip\", Value:10}}}\n//[\n//  {\n//    \"$skip\": 10\n//  }\n//]\naggregation.NewStageBuilder().Skip(10).Build()\n```\n\n----------------------------------------\n\nTITLE: NewCollection Usage (Previous)\nDESCRIPTION: Demonstrates the previous usage of `mongox.NewCollection` before version 2.2.0. It directly takes the `mongoColl` as an argument.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/changelog.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Previously\nuserColl := mongox.NewCollection[User](mongoColl)\n```\n\n----------------------------------------\n\nTITLE: Building $gt Query Condition with Function in Go\nDESCRIPTION: This snippet demonstrates how to construct a '$gt' (greater than) query condition using the `Gt` function from the `query` package. It creates a BSON document that filters documents where the 'age' field is greater than 18.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/query/comparison/gt.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// bson.D{bson.E{Key:\"age\", Value:bson.D{bson.E{Key:\"$gt\", Value:18}}}}\nquery.Gt(\"age\", 18)\n```\n\n----------------------------------------\n\nTITLE: OpContext struct definition in Go\nDESCRIPTION: Defines the `OpContext` struct, which is used to pass operation context information in the go-mongox library. It contains fields like `Col` (MongoDB collection), `Fields` (metadata), `Doc` (document), `Filter` (query), `Updates` (updates), `Pipeline` (aggregation pipeline), `MongoOptions` (options), `ModelHook` (hook), `ReflectValue` (reflection value), `StartTime` (operation start time), and `Result` (operation result).\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/plugins/op-context.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype OpContext struct {\n    Col    *mongo.Collection `opt:\"-\"`\n    Fields []*field.Filed\n\n    Doc any\n    // filter also can be used as query\n    Filter       any\n    Updates      any\n    Pipeline     any\n    MongoOptions any\n    ModelHook    any\n    ReflectValue reflect.Value\n    StartTime    time.Time\n\n    // result of the collection operation\n    Result any\n}\n```\n\n----------------------------------------\n\nTITLE: Define User struct for MongoDB aggregation - Go\nDESCRIPTION: Defines a `User` struct with fields for `Name` and `Age` that are mapped to MongoDB fields using bson tags. The struct also embeds `mongox.Model` which is assumed to contain standard fields such as ID, createdAt, updatedAt.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/build/aggregation/stage/bucket.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the User struct in Go\nDESCRIPTION: This code defines a `User` struct with fields for `mongox.Model`, `Name`, and `Age`. The `bson` tags are used for mapping the struct fields to MongoDB document fields.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/bucketAuto.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Define User struct with mongox.Model\nDESCRIPTION: Defines a `User` struct embedding `mongox.Model` and specifies bson tags for `Name` and `Age` fields. `mongox.Model` provides common fields such as `ID`, `CreatedAt`, and `UpdatedAt`.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/sortByCount.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Define User struct with mongox.Model\nDESCRIPTION: Defines a struct named User that includes an embedded mongox.Model and fields for Name and Age. The bson tags map the struct fields to the corresponding fields in the MongoDB document.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/build/aggregation/stage/facet.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tmongox.Model `bson:\"inline\"`\n\tName         string `bson:\"name\"`\n\tAge          int    `bson:\"age\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dependencies with Make\nDESCRIPTION: This snippet shows how to install the required dependencies and configure git hooks using the `make setup` command in the project's root directory. It prepares the development environment for contributing to the project.\nSOURCE: https://github.com/chenmingyong0423/go-mongox-doc/blob/main/docs/en/contribute.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake setup\n```"
  }
]